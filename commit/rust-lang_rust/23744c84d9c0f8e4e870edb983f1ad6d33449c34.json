{"sha": "23744c84d9c0f8e4e870edb983f1ad6d33449c34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNzQ0Yzg0ZDljMGY4ZTRlODcwZWRiOTgzZjFhZDZkMzM0NDljMzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-14T20:19:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-14T20:19:59Z"}, "message": "Auto merge of #74342 - Manishearth:rollup-l63pesj, r=Manishearth\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #73759 (Add missing Stdin and StdinLock examples)\n - #74211 (Structured suggestion when not using struct pattern)\n - #74228 (Provide structured suggestion on unsized fields and fn params)\n - #74252 (Don't allow `DESTDIR` to influence LLVM builds)\n - #74263 (Slight reorganization of sys/(fast_)thread_local)\n - #74271 (process_unix: prefer i32::*_be_bytes over manually shifting bytes)\n - #74272 (pprust: support multiline comments within lines)\n - #74332 (Update cargo)\n - #74334 (bootstrap: Improve wording on docs for `verbose-tests`)\n - #74336 (typeck: use `item_name` in cross-crate packed diag)\n - #74340 (lint: use `transparent_newtype_field` to avoid ICE)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "873851698947a162abdd85a971618981b1e19b2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/873851698947a162abdd85a971618981b1e19b2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23744c84d9c0f8e4e870edb983f1ad6d33449c34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23744c84d9c0f8e4e870edb983f1ad6d33449c34", "html_url": "https://github.com/rust-lang/rust/commit/23744c84d9c0f8e4e870edb983f1ad6d33449c34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23744c84d9c0f8e4e870edb983f1ad6d33449c34/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2002ebacfbca288830a3c308ddc8189705c608fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/2002ebacfbca288830a3c308ddc8189705c608fe", "html_url": "https://github.com/rust-lang/rust/commit/2002ebacfbca288830a3c308ddc8189705c608fe"}, {"sha": "dbe7ed33cd14166ed52ff02f4db145e199c348cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe7ed33cd14166ed52ff02f4db145e199c348cd", "html_url": "https://github.com/rust-lang/rust/commit/dbe7ed33cd14166ed52ff02f4db145e199c348cd"}], "stats": {"total": 1771, "additions": 1068, "deletions": 703}, "files": [{"sha": "01952b21ba4b1fe9a07f76b246b65e3a0151760c", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -391,8 +391,7 @@\n # desired in distributions, for example.\n #rpath = true\n \n-# Emits extraneous output from tests to ensure that failures of the test\n-# harness are debuggable just from logfiles.\n+# Emits extra output from tests so test failures are debuggable just from logfiles.\n #verbose-tests = false\n \n # Flag indicating whether tests are compiled with optimizations (the -O flag)."}, {"sha": "ca0b3ddc920ed6d9faeda24a0578266d7032646a", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -347,6 +347,11 @@ fn configure_cmake(\n     // LLVM and LLD builds can produce a lot of those and hit CI limits on log size.\n     cfg.define(\"CMAKE_INSTALL_MESSAGE\", \"LAZY\");\n \n+    // Do not allow the user's value of DESTDIR to influence where\n+    // LLVM will install itself. LLVM must always be installed in our\n+    // own build directories.\n+    cfg.env(\"DESTDIR\", \"\");\n+\n     if builder.config.ninja {\n         cfg.generator(\"Ninja\");\n     }"}, {"sha": "6ddd41a26f122e7562b0fb11e24bcc97220890b0", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -84,11 +84,8 @@ impl<T: ?Sized> !Send for *mut T {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"sized\"]\n #[rustc_on_unimplemented(\n-    on(parent_trait = \"std::path::Path\", label = \"borrow the `Path` instead\"),\n     message = \"the size for values of type `{Self}` cannot be known at compilation time\",\n-    label = \"doesn't have a size known at compile-time\",\n-    note = \"to learn more, visit <https://doc.rust-lang.org/book/\\\n-            ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\"\n+    label = \"doesn't have a size known at compile-time\"\n )]\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n #[rustc_specialization_trait]"}, {"sha": "201972fcf264bd505b6e5f61b187f1e4e0be9541", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -526,7 +526,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             Ident::with_dummy_span(sym::_task_context),\n             hir::BindingAnnotation::Mutable,\n         );\n-        let param = hir::Param { attrs: &[], hir_id: self.next_id(), pat, span };\n+        let param = hir::Param { attrs: &[], hir_id: self.next_id(), pat, ty_span: span, span };\n         let params = arena_vec![self; param];\n \n         let body_id = self.lower_body(move |this| {"}, {"sha": "dd5e658102facacbe5688df07b9427c7961a5c03", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -972,6 +972,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             attrs: self.lower_attrs(&param.attrs),\n             hir_id: self.lower_node_id(param.id),\n             pat: self.lower_pat(&param.pat),\n+            ty_span: param.ty.span,\n             span: param.span,\n         }\n     }\n@@ -1098,6 +1099,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     attrs: parameter.attrs,\n                     hir_id: parameter.hir_id,\n                     pat: new_parameter_pat,\n+                    ty_span: parameter.ty_span,\n                     span: parameter.span,\n                 };\n "}, {"sha": "c33cae57872ac2bfd0c62c25a97b9c1aa1a62c6b", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -450,9 +450,20 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     fn print_comment(&mut self, cmnt: &comments::Comment) {\n         match cmnt.style {\n             comments::Mixed => {\n-                assert_eq!(cmnt.lines.len(), 1);\n                 self.zerobreak();\n-                self.word(cmnt.lines[0].clone());\n+                if let Some((last, lines)) = cmnt.lines.split_last() {\n+                    self.ibox(0);\n+\n+                    for line in lines {\n+                        self.word(line.clone());\n+                        self.hardbreak()\n+                    }\n+\n+                    self.word(last.clone());\n+                    self.space();\n+\n+                    self.end();\n+                }\n                 self.zerobreak()\n             }\n             comments::Isolated => {"}, {"sha": "07b489a75626708528388cab5e92774867506e48", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -2148,6 +2148,7 @@ pub struct Param<'hir> {\n     pub attrs: &'hir [Attribute],\n     pub hir_id: HirId,\n     pub pat: &'hir Pat<'hir>,\n+    pub ty_span: Span,\n     pub span: Span,\n }\n "}, {"sha": "46741fcf2ba0c290864bc6aa1b4a39890cd0fc22", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -531,23 +531,23 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         match ty.kind {\n             ty::FnPtr(_) => true,\n             ty::Ref(..) => true,\n-            ty::Adt(field_def, substs) if field_def.repr.transparent() && !field_def.is_union() => {\n-                for field in field_def.all_fields() {\n-                    let field_ty = self.cx.tcx.normalize_erasing_regions(\n-                        self.cx.param_env,\n-                        field.ty(self.cx.tcx, substs),\n-                    );\n-                    if field_ty.is_zst(self.cx.tcx, field.did) {\n-                        continue;\n-                    }\n+            ty::Adt(def, substs) if def.repr.transparent() && !def.is_union() => {\n+                let guaranteed_nonnull_optimization = self\n+                    .cx\n+                    .tcx\n+                    .get_attrs(def.did)\n+                    .iter()\n+                    .any(|a| a.check_name(sym::rustc_nonnull_optimization_guaranteed));\n+\n+                if guaranteed_nonnull_optimization {\n+                    return true;\n+                }\n \n-                    let attrs = self.cx.tcx.get_attrs(field_def.did);\n-                    if attrs\n-                        .iter()\n-                        .any(|a| a.check_name(sym::rustc_nonnull_optimization_guaranteed))\n-                        || self.ty_is_known_nonnull(field_ty)\n-                    {\n-                        return true;\n+                for variant in &def.variants {\n+                    if let Some(field) = variant.transparent_newtype_field(self.cx.tcx) {\n+                        if self.ty_is_known_nonnull(field.ty(self.cx.tcx, substs)) {\n+                            return true;\n+                        }\n                     }\n                 }\n "}, {"sha": "c15c31a53f0c9fefafb2f06bdf6d086e95c08488", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -215,7 +215,7 @@ pub enum ObligationCauseCode<'tcx> {\n     /// Type of each variable must be `Sized`.\n     VariableType(hir::HirId),\n     /// Argument type must be `Sized`.\n-    SizedArgumentType,\n+    SizedArgumentType(Option<Span>),\n     /// Return type must be `Sized`.\n     SizedReturnType,\n     /// Yield type must be `Sized`.\n@@ -229,6 +229,7 @@ pub enum ObligationCauseCode<'tcx> {\n     /// Types of fields (other than the last, except for packed structs) in a struct must be sized.\n     FieldSized {\n         adt_kind: AdtKind,\n+        span: Span,\n         last: bool,\n     },\n "}, {"sha": "334462790edbcc5a2f03c2de543fcdf9148d0065", "filename": "src/librustc_middle/traits/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -151,12 +151,14 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::VariableType(id) => Some(super::VariableType(id)),\n             super::ReturnValue(id) => Some(super::ReturnValue(id)),\n             super::ReturnType => Some(super::ReturnType),\n-            super::SizedArgumentType => Some(super::SizedArgumentType),\n+            super::SizedArgumentType(sp) => Some(super::SizedArgumentType(sp)),\n             super::SizedReturnType => Some(super::SizedReturnType),\n             super::SizedYieldType => Some(super::SizedYieldType),\n             super::InlineAsmSized => Some(super::InlineAsmSized),\n             super::RepeatVec(suggest_flag) => Some(super::RepeatVec(suggest_flag)),\n-            super::FieldSized { adt_kind, last } => Some(super::FieldSized { adt_kind, last }),\n+            super::FieldSized { adt_kind, span, last } => {\n+                Some(super::FieldSized { adt_kind, span, last })\n+            }\n             super::ConstSized => Some(super::ConstSized),\n             super::ConstPatternStructural => Some(super::ConstPatternStructural),\n             super::SharedStatic => Some(super::SharedStatic),"}, {"sha": "8db27babd058bd97bc74bed6708690cfd90edf62", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -300,9 +300,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     }\n \n     fn insert_field_names(&mut self, def_id: DefId, field_names: Vec<Spanned<Symbol>>) {\n-        if !field_names.is_empty() {\n-            self.r.field_names.insert(def_id, field_names);\n-        }\n+        self.r.field_names.insert(def_id, field_names);\n     }\n \n     fn block_needs_anonymous_module(&mut self, block: &Block) -> bool {\n@@ -1428,6 +1426,8 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         let ctor_kind = CtorKind::from_ast(&variant.data);\n         let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);\n         self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, variant.span, expn_id));\n+        // Record field names for error reporting.\n+        self.insert_field_names_local(ctor_def_id, &variant.data);\n \n         visit::walk_variant(self, variant);\n     }"}, {"sha": "71c71fe4ce665d32ad3db9b262dbad63e66df6d3", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -184,7 +184,7 @@ crate enum PathSource<'a> {\n     // Paths in struct expressions and patterns `Path { .. }`.\n     Struct,\n     // Paths in tuple struct patterns `Path(..)`.\n-    TupleStruct,\n+    TupleStruct(Span),\n     // `m::A::B` in `<T as m::A>::B::C`.\n     TraitItem(Namespace),\n }\n@@ -193,7 +193,7 @@ impl<'a> PathSource<'a> {\n     fn namespace(self) -> Namespace {\n         match self {\n             PathSource::Type | PathSource::Trait(_) | PathSource::Struct => TypeNS,\n-            PathSource::Expr(..) | PathSource::Pat | PathSource::TupleStruct => ValueNS,\n+            PathSource::Expr(..) | PathSource::Pat | PathSource::TupleStruct(_) => ValueNS,\n             PathSource::TraitItem(ns) => ns,\n         }\n     }\n@@ -204,7 +204,7 @@ impl<'a> PathSource<'a> {\n             | PathSource::Expr(..)\n             | PathSource::Pat\n             | PathSource::Struct\n-            | PathSource::TupleStruct => true,\n+            | PathSource::TupleStruct(_) => true,\n             PathSource::Trait(_) | PathSource::TraitItem(..) => false,\n         }\n     }\n@@ -215,7 +215,7 @@ impl<'a> PathSource<'a> {\n             PathSource::Trait(_) => \"trait\",\n             PathSource::Pat => \"unit struct, unit variant or constant\",\n             PathSource::Struct => \"struct, variant or union type\",\n-            PathSource::TupleStruct => \"tuple struct or tuple variant\",\n+            PathSource::TupleStruct(_) => \"tuple struct or tuple variant\",\n             PathSource::TraitItem(ns) => match ns {\n                 TypeNS => \"associated type\",\n                 ValueNS => \"method or associated constant\",\n@@ -301,7 +301,7 @@ impl<'a> PathSource<'a> {\n                 | Res::SelfCtor(..) => true,\n                 _ => false,\n             },\n-            PathSource::TupleStruct => match res {\n+            PathSource::TupleStruct(_) => match res {\n                 Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) | Res::SelfCtor(..) => true,\n                 _ => false,\n             },\n@@ -336,8 +336,8 @@ impl<'a> PathSource<'a> {\n             (PathSource::Struct, false) => error_code!(E0422),\n             (PathSource::Expr(..), true) => error_code!(E0423),\n             (PathSource::Expr(..), false) => error_code!(E0425),\n-            (PathSource::Pat | PathSource::TupleStruct, true) => error_code!(E0532),\n-            (PathSource::Pat | PathSource::TupleStruct, false) => error_code!(E0531),\n+            (PathSource::Pat | PathSource::TupleStruct(_), true) => error_code!(E0532),\n+            (PathSource::Pat | PathSource::TupleStruct(_), false) => error_code!(E0531),\n             (PathSource::TraitItem(..), true) => error_code!(E0575),\n             (PathSource::TraitItem(..), false) => error_code!(E0576),\n         }\n@@ -1483,7 +1483,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     self.r.record_partial_res(pat.id, PartialRes::new(res));\n                 }\n                 PatKind::TupleStruct(ref path, ..) => {\n-                    self.smart_resolve_path(pat.id, None, path, PathSource::TupleStruct);\n+                    self.smart_resolve_path(pat.id, None, path, PathSource::TupleStruct(pat.span));\n                 }\n                 PatKind::Path(ref qself, ref path) => {\n                     self.smart_resolve_path(pat.id, qself.as_ref(), path, PathSource::Pat);"}, {"sha": "918b5941a795cd51ce6e8d0deb6156fd64fbfb7a", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 57, "deletions": 11, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -480,10 +480,12 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n \n         let mut bad_struct_syntax_suggestion = |def_id: DefId| {\n             let (followed_by_brace, closing_brace) = self.followed_by_brace(span);\n-            let mut suggested = false;\n+\n             match source {\n-                PathSource::Expr(Some(parent)) => {\n-                    suggested = path_sep(err, &parent);\n+                PathSource::Expr(Some(\n+                    parent @ Expr { kind: ExprKind::Field(..) | ExprKind::MethodCall(..), .. },\n+                )) => {\n+                    path_sep(err, &parent);\n                 }\n                 PathSource::Expr(None) if followed_by_brace => {\n                     if let Some(sp) = closing_brace {\n@@ -505,15 +507,56 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                             ),\n                         );\n                     }\n-                    suggested = true;\n                 }\n-                _ => {}\n-            }\n-            if !suggested {\n-                if let Some(span) = self.r.opt_span(def_id) {\n-                    err.span_label(span, &format!(\"`{}` defined here\", path_str));\n+                PathSource::Expr(\n+                    None | Some(Expr { kind: ExprKind::Call(..) | ExprKind::Path(..), .. }),\n+                )\n+                | PathSource::TupleStruct(_)\n+                | PathSource::Pat => {\n+                    let span = match &source {\n+                        PathSource::Expr(Some(Expr {\n+                            span, kind: ExprKind::Call(_, _), ..\n+                        }))\n+                        | PathSource::TupleStruct(span) => {\n+                            // We want the main underline to cover the suggested code as well for\n+                            // cleaner output.\n+                            err.set_span(*span);\n+                            *span\n+                        }\n+                        _ => span,\n+                    };\n+                    if let Some(span) = self.r.opt_span(def_id) {\n+                        err.span_label(span, &format!(\"`{}` defined here\", path_str));\n+                    }\n+                    let (tail, descr, applicability) = match source {\n+                        PathSource::Pat | PathSource::TupleStruct(_) => {\n+                            (\"\", \"pattern\", Applicability::MachineApplicable)\n+                        }\n+                        _ => (\": val\", \"literal\", Applicability::HasPlaceholders),\n+                    };\n+                    let (fields, applicability) = match self.r.field_names.get(&def_id) {\n+                        Some(fields) => (\n+                            fields\n+                                .iter()\n+                                .map(|f| format!(\"{}{}\", f.node, tail))\n+                                .collect::<Vec<String>>()\n+                                .join(\", \"),\n+                            applicability,\n+                        ),\n+                        None => (\"/* fields */\".to_string(), Applicability::HasPlaceholders),\n+                    };\n+                    let pad = match self.r.field_names.get(&def_id) {\n+                        Some(fields) if fields.is_empty() => \"\",\n+                        _ => \" \",\n+                    };\n+                    err.span_suggestion(\n+                        span,\n+                        &format!(\"use struct {} syntax instead\", descr),\n+                        format!(\"{} {{{pad}{}{pad}}}\", path_str, fields, pad = pad),\n+                        applicability,\n+                    );\n                 }\n-                err.span_label(span, format!(\"did you mean `{} {{ /* fields */ }}`?\", path_str));\n+                _ => {}\n             }\n         };\n \n@@ -546,7 +589,10 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                     return false;\n                 }\n             }\n-            (Res::Def(DefKind::Enum, def_id), PathSource::TupleStruct | PathSource::Expr(..)) => {\n+            (\n+                Res::Def(DefKind::Enum, def_id),\n+                PathSource::TupleStruct(_) | PathSource::Expr(..),\n+            ) => {\n                 if let Some(variants) = self.collect_enum_variants(def_id) {\n                     if !variants.is_empty() {\n                         let msg = if variants.len() == 1 {"}, {"sha": "4ade1ce91632fa0dd2990af51730514870f06944", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -376,7 +376,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             // If it has a custom `#[rustc_on_unimplemented]`\n                             // error message, let's display it as the label!\n                             err.span_label(span, s.as_str());\n-                            err.help(&explanation);\n+                            if !matches!(trait_ref.skip_binder().self_ty().kind, ty::Param(_)) {\n+                                // When the self type is a type param We don't need to \"the trait\n+                                // `std::marker::Sized` is not implemented for `T`\" as we will point\n+                                // at the type param with a label to suggest constraining it.\n+                                err.help(&explanation);\n+                            }\n                         } else {\n                             err.span_label(span, explanation);\n                         }\n@@ -403,7 +408,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         }\n \n                         self.suggest_dereferences(&obligation, &mut err, &trait_ref, points_at_arg);\n-                        self.suggest_borrow_on_unsized_slice(&obligation.cause.code, &mut err);\n                         self.suggest_fn_call(&obligation, &mut err, &trait_ref, points_at_arg);\n                         self.suggest_remove_reference(&obligation, &mut err, &trait_ref);\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, &trait_ref);"}, {"sha": "2c6589eb2bdf9b34e04d7743a9afcb9be34227b4", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 82, "deletions": 55, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -43,12 +43,6 @@ pub trait InferCtxtExt<'tcx> {\n         body_id: hir::HirId,\n     );\n \n-    fn suggest_borrow_on_unsized_slice(\n-        &self,\n-        code: &ObligationCauseCode<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n-    );\n-\n     fn suggest_dereferences(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n@@ -515,32 +509,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    /// When encountering an assignment of an unsized trait, like `let x = \"\"[..];`, provide a\n-    /// suggestion to borrow the initializer in order to use have a slice instead.\n-    fn suggest_borrow_on_unsized_slice(\n-        &self,\n-        code: &ObligationCauseCode<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n-    ) {\n-        if let &ObligationCauseCode::VariableType(hir_id) = code {\n-            let parent_node = self.tcx.hir().get_parent_node(hir_id);\n-            if let Some(Node::Local(ref local)) = self.tcx.hir().find(parent_node) {\n-                if let Some(ref expr) = local.init {\n-                    if let hir::ExprKind::Index(_, _) = expr.kind {\n-                        if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(expr.span) {\n-                            err.span_suggestion(\n-                                expr.span,\n-                                \"consider borrowing here\",\n-                                format!(\"&{}\", snippet),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n     /// Given a closure's `DefId`, return the given name of the closure.\n     ///\n     /// This doesn't account for reassignments, but it's only used for suggestions.\n@@ -1817,15 +1785,56 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n-            ObligationCauseCode::VariableType(_) => {\n-                err.note(\"all local variables must have a statically known size\");\n+            ObligationCauseCode::VariableType(hir_id) => {\n+                let parent_node = self.tcx.hir().get_parent_node(hir_id);\n+                match self.tcx.hir().find(parent_node) {\n+                    Some(Node::Local(hir::Local {\n+                        init: Some(hir::Expr { kind: hir::ExprKind::Index(_, _), span, .. }),\n+                        ..\n+                    })) => {\n+                        // When encountering an assignment of an unsized trait, like\n+                        // `let x = \"\"[..];`, provide a suggestion to borrow the initializer in\n+                        // order to use have a slice instead.\n+                        err.span_suggestion_verbose(\n+                            span.shrink_to_lo(),\n+                            \"consider borrowing here\",\n+                            \"&\".to_owned(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        err.note(\"all local variables must have a statically known size\");\n+                    }\n+                    Some(Node::Param(param)) => {\n+                        err.span_suggestion_verbose(\n+                            param.ty_span.shrink_to_lo(),\n+                            \"function arguments must have a statically known size, borrowed types \\\n+                            always have a known size\",\n+                            \"&\".to_owned(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                    _ => {\n+                        err.note(\"all local variables must have a statically known size\");\n+                    }\n+                }\n                 if !self.tcx.features().unsized_locals {\n                     err.help(\"unsized locals are gated as an unstable feature\");\n                 }\n             }\n-            ObligationCauseCode::SizedArgumentType => {\n-                err.note(\"all function arguments must have a statically known size\");\n-                if !self.tcx.features().unsized_locals {\n+            ObligationCauseCode::SizedArgumentType(sp) => {\n+                if let Some(span) = sp {\n+                    err.span_suggestion_verbose(\n+                        span.shrink_to_lo(),\n+                        \"function arguments must have a statically known size, borrowed types \\\n+                         always have a known size\",\n+                        \"&\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else {\n+                    err.note(\"all function arguments must have a statically known size\");\n+                }\n+                if tcx.sess.opts.unstable_features.is_nightly_build()\n+                    && !self.tcx.features().unsized_locals\n+                {\n                     err.help(\"unsized locals are gated as an unstable feature\");\n                 }\n             }\n@@ -1844,26 +1853,44 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ObligationCauseCode::StructInitializerSized => {\n                 err.note(\"structs must have a statically known size to be initialized\");\n             }\n-            ObligationCauseCode::FieldSized { adt_kind: ref item, last } => match *item {\n-                AdtKind::Struct => {\n-                    if last {\n-                        err.note(\n-                            \"the last field of a packed struct may only have a \\\n-                             dynamically sized type if it does not need drop to be run\",\n-                        );\n-                    } else {\n-                        err.note(\n-                            \"only the last field of a struct may have a dynamically sized type\",\n-                        );\n+            ObligationCauseCode::FieldSized { adt_kind: ref item, last, span } => {\n+                match *item {\n+                    AdtKind::Struct => {\n+                        if last {\n+                            err.note(\n+                                \"the last field of a packed struct may only have a \\\n+                                dynamically sized type if it does not need drop to be run\",\n+                            );\n+                        } else {\n+                            err.note(\n+                                \"only the last field of a struct may have a dynamically sized type\",\n+                            );\n+                        }\n+                    }\n+                    AdtKind::Union => {\n+                        err.note(\"no field of a union may have a dynamically sized type\");\n+                    }\n+                    AdtKind::Enum => {\n+                        err.note(\"no field of an enum variant may have a dynamically sized type\");\n                     }\n                 }\n-                AdtKind::Union => {\n-                    err.note(\"no field of a union may have a dynamically sized type\");\n-                }\n-                AdtKind::Enum => {\n-                    err.note(\"no field of an enum variant may have a dynamically sized type\");\n-                }\n-            },\n+                err.help(\"change the field's type to have a statically known size\");\n+                err.span_suggestion(\n+                    span.shrink_to_lo(),\n+                    \"borrowed types always have a statically known size\",\n+                    \"&\".to_string(),\n+                    Applicability::MachineApplicable,\n+                );\n+                err.multipart_suggestion(\n+                    \"the `Box` type always has a statically known size and allocates its contents \\\n+                     in the heap\",\n+                    vec![\n+                        (span.shrink_to_lo(), \"Box<\".to_string()),\n+                        (span.shrink_to_hi(), \">\".to_string()),\n+                    ],\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n             ObligationCauseCode::ConstSized => {\n                 err.note(\"constant expressions must have a statically known size\");\n             }"}, {"sha": "3956e91a1673460234d125870bc21ca8f3fe54cc", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -487,7 +487,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.require_type_is_sized_deferred(\n                         input,\n                         expr.span,\n-                        traits::SizedArgumentType,\n+                        traits::SizedArgumentType(None),\n                     );\n                 }\n             }"}, {"sha": "bc01da324b66fd4dab9457d5a892e4efb84a4b84", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -103,7 +103,7 @@ use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::lang_items::{\n     FutureTraitLangItem, PinTypeLangItem, SizedTraitLangItem, VaListTypeLangItem,\n };\n-use rustc_hir::{ExprKind, GenericArg, HirIdMap, Item, ItemKind, Node, PatKind, QPath};\n+use rustc_hir::{ExprKind, GenericArg, HirIdMap, ItemKind, Node, PatKind, QPath};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n use rustc_infer::infer;\n@@ -1342,14 +1342,15 @@ fn check_fn<'a, 'tcx>(\n     let inputs_fn = fn_sig.inputs().iter().copied();\n     for (idx, (param_ty, param)) in inputs_fn.chain(maybe_va_list).zip(body.params).enumerate() {\n         // Check the pattern.\n-        fcx.check_pat_top(&param.pat, param_ty, try { inputs_hir?.get(idx)?.span }, false);\n+        let ty_span = try { inputs_hir?.get(idx)?.span };\n+        fcx.check_pat_top(&param.pat, param_ty, ty_span, false);\n \n         // Check that argument is Sized.\n         // The check for a non-trivial pattern is a hack to avoid duplicate warnings\n         // for simple cases like `fn foo(x: Trait)`,\n         // where we would error once on the parameter as a whole, and once on the binding `x`.\n         if param.pat.simple_ident().is_none() && !tcx.features().unsized_locals {\n-            fcx.require_type_is_sized(param_ty, param.pat.span, traits::SizedArgumentType);\n+            fcx.require_type_is_sized(param_ty, param.pat.span, traits::SizedArgumentType(ty_span));\n         }\n \n         fcx.write_ty(param.hir_id, param_ty);\n@@ -2624,34 +2625,31 @@ fn check_packed(tcx: TyCtxt<'_>, sp: Span, def: &ty::AdtDef) {\n                     \"packed type cannot transitively contain a `#[repr(align)]` type\"\n                 );\n \n-                let hir = tcx.hir();\n-                let hir_id = hir.as_local_hir_id(def_spans[0].0.expect_local());\n-                if let Node::Item(Item { ident, .. }) = hir.get(hir_id) {\n-                    err.span_note(\n-                        tcx.def_span(def_spans[0].0),\n-                        &format!(\"`{}` has a `#[repr(align)]` attribute\", ident),\n-                    );\n-                }\n+                err.span_note(\n+                    tcx.def_span(def_spans[0].0),\n+                    &format!(\n+                        \"`{}` has a `#[repr(align)]` attribute\",\n+                        tcx.item_name(def_spans[0].0)\n+                    ),\n+                );\n \n                 if def_spans.len() > 2 {\n                     let mut first = true;\n                     for (adt_def, span) in def_spans.iter().skip(1).rev() {\n-                        let hir_id = hir.as_local_hir_id(adt_def.expect_local());\n-                        if let Node::Item(Item { ident, .. }) = hir.get(hir_id) {\n-                            err.span_note(\n-                                *span,\n-                                &if first {\n-                                    format!(\n-                                        \"`{}` contains a field of type `{}`\",\n-                                        tcx.type_of(def.did),\n-                                        ident\n-                                    )\n-                                } else {\n-                                    format!(\"...which contains a field of type `{}`\", ident)\n-                                },\n-                            );\n-                            first = false;\n-                        }\n+                        let ident = tcx.item_name(*adt_def);\n+                        err.span_note(\n+                            *span,\n+                            &if first {\n+                                format!(\n+                                    \"`{}` contains a field of type `{}`\",\n+                                    tcx.type_of(def.did),\n+                                    ident\n+                                )\n+                            } else {\n+                                format!(\"...which contains a field of type `{}`\", ident)\n+                            },\n+                        );\n+                        first = false;\n                     }\n                 }\n "}, {"sha": "19c556942afc1397462390030fb97b722f879b10", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -394,6 +394,7 @@ fn check_type_defn<'tcx, F>(\n                                 Some(i) => i,\n                                 None => bug!(),\n                             },\n+                            span: field.span,\n                             last,\n                         },\n                     ),\n@@ -1326,10 +1327,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .iter()\n             .map(|field| {\n                 let field_ty = self.tcx.type_of(self.tcx.hir().local_def_id(field.hir_id));\n-                let field_ty = self.normalize_associated_types_in(field.span, &field_ty);\n+                let field_ty = self.normalize_associated_types_in(field.ty.span, &field_ty);\n                 let field_ty = self.resolve_vars_if_possible(&field_ty);\n                 debug!(\"non_enum_variant: type of field {:?} is {:?}\", field, field_ty);\n-                AdtField { ty: field_ty, span: field.span }\n+                AdtField { ty: field_ty, span: field.ty.span }\n             })\n             .collect();\n         AdtVariant { fields, explicit_discr: None }"}, {"sha": "156f555be02d8d4ab0832a725cdcc861316062ca", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -256,9 +256,23 @@ fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {\n /// [`BufRead`]: trait.BufRead.html\n ///\n /// ### Note: Windows Portability Consideration\n+///\n /// When operating in a console, the Windows implementation of this stream does not support\n /// non-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return\n /// an error.\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// use std::io::{self, Read};\n+///\n+/// fn main() -> io::Result<()> {\n+///     let mut buffer = String::new();\n+///     let mut stdin = io::stdin(); // We get `Stdin` here.\n+///     stdin.read_to_string(&mut buffer)?;\n+///     Ok(())\n+/// }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stdin {\n     inner: Arc<Mutex<BufReader<Maybe<StdinRaw>>>>,\n@@ -274,9 +288,26 @@ pub struct Stdin {\n /// [`Stdin::lock`]: struct.Stdin.html#method.lock\n ///\n /// ### Note: Windows Portability Consideration\n+///\n /// When operating in a console, the Windows implementation of this stream does not support\n /// non-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return\n /// an error.\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// use std::io::{self, Read};\n+///\n+/// fn main() -> io::Result<()> {\n+///     let mut buffer = String::new();\n+///     let stdin = io::stdin(); // We get `Stdin` here.\n+///     {\n+///         let mut stdin_lock = stdin.lock(); // We get `StdinLock` here.\n+///         stdin_lock.read_to_string(&mut buffer)?;\n+///     } // `StdinLock` is dropped here.\n+///     Ok(())\n+/// }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StdinLock<'a> {\n     inner: MutexGuard<'a, BufReader<Maybe<StdinRaw>>>,"}, {"sha": "f7dd2c8d00fd220b1f2fb688e8ea18225d81d59a", "filename": "src/libstd/sys/cloudabi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -16,8 +16,8 @@ pub mod rwlock;\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n-#[path = \"../unix/thread_local.rs\"]\n-pub mod thread_local;\n+#[path = \"../unix/thread_local_key.rs\"]\n+pub mod thread_local_key;\n pub mod time;\n \n pub use crate::sys_common::os_str_bytes as os_str;"}, {"sha": "675b82ceb775f7b0a35c116cc54b2c39d0c93b90", "filename": "src/libstd/sys/hermit/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -22,7 +22,6 @@ pub mod cmath;\n pub mod condvar;\n pub mod env;\n pub mod ext;\n-pub mod fast_thread_local;\n pub mod fd;\n pub mod fs;\n pub mod io;\n@@ -37,7 +36,8 @@ pub mod rwlock;\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n-pub mod thread_local;\n+pub mod thread_local_dtor;\n+pub mod thread_local_key;\n pub mod time;\n \n use crate::io::ErrorKind;"}, {"sha": "9b683fce157488df8d26ee08184e278578e5c17b", "filename": "src/libstd/sys/hermit/thread_local_dtor.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local_dtor.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "previous_filename": "src/libstd/sys/hermit/fast_thread_local.rs"}, {"sha": "bf1b49eb83b7e14ce8c046eb9c50aea20891a0c6", "filename": "src/libstd/sys/hermit/thread_local_key.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local_key.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -2,25 +2,25 @@ pub type Key = usize;\n \n #[inline]\n pub unsafe fn create(_dtor: Option<unsafe extern \"C\" fn(*mut u8)>) -> Key {\n-    panic!(\"should not be used on the wasm target\");\n+    panic!(\"should not be used on the hermit target\");\n }\n \n #[inline]\n pub unsafe fn set(_key: Key, _value: *mut u8) {\n-    panic!(\"should not be used on the wasm target\");\n+    panic!(\"should not be used on the hermit target\");\n }\n \n #[inline]\n pub unsafe fn get(_key: Key) -> *mut u8 {\n-    panic!(\"should not be used on the wasm target\");\n+    panic!(\"should not be used on the hermit target\");\n }\n \n #[inline]\n pub unsafe fn destroy(_key: Key) {\n-    panic!(\"should not be used on the wasm target\");\n+    panic!(\"should not be used on the hermit target\");\n }\n \n #[inline]\n pub fn requires_synchronized_create() -> bool {\n-    panic!(\"should not be used on the wasm target\");\n+    panic!(\"should not be used on the hermit target\");\n }", "previous_filename": "src/libstd/sys/wasm/thread_local.rs"}, {"sha": "a4968ff7d4f547982706100b690d0baaecfd9c1a", "filename": "src/libstd/sys/sgx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -30,7 +30,7 @@ pub mod rwlock;\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n-pub mod thread_local;\n+pub mod thread_local_key;\n pub mod time;\n \n pub use crate::sys_common::os_str_bytes as os_str;"}, {"sha": "b21784475f0d2d020aa4f0eb14cff31d0b1f558c", "filename": "src/libstd/sys/sgx/thread_local_key.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fsgx%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fsgx%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fthread_local_key.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "previous_filename": "src/libstd/sys/sgx/thread_local.rs"}, {"sha": "eddf00d3979f509292f4cd5fe17a18fafc642918", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -47,7 +47,6 @@ pub mod cmath;\n pub mod condvar;\n pub mod env;\n pub mod ext;\n-pub mod fast_thread_local;\n pub mod fd;\n pub mod fs;\n pub mod io;\n@@ -68,7 +67,8 @@ pub mod rwlock;\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n-pub mod thread_local;\n+pub mod thread_local_dtor;\n+pub mod thread_local_key;\n pub mod time;\n \n pub use crate::sys_common::os_str_bytes as os_str;"}, {"sha": "de35fe0521d03a8a3cefc8597732868048eca5b7", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,3 +1,4 @@\n+use crate::convert::TryInto;\n use crate::fmt;\n use crate::io::{self, Error, ErrorKind};\n use crate::ptr;\n@@ -17,7 +18,7 @@ impl Command {\n         default: Stdio,\n         needs_stdin: bool,\n     ) -> io::Result<(Process, StdioPipes)> {\n-        const CLOEXEC_MSG_FOOTER: &[u8] = b\"NOEX\";\n+        const CLOEXEC_MSG_FOOTER: [u8; 4] = *b\"NOEX\";\n \n         let envp = self.capture_env();\n \n@@ -52,11 +53,12 @@ impl Command {\n                     drop(input);\n                     let Err(err) = self.do_exec(theirs, envp.as_ref());\n                     let errno = err.raw_os_error().unwrap_or(libc::EINVAL) as u32;\n+                    let errno = errno.to_be_bytes();\n                     let bytes = [\n-                        (errno >> 24) as u8,\n-                        (errno >> 16) as u8,\n-                        (errno >> 8) as u8,\n-                        (errno >> 0) as u8,\n+                        errno[0],\n+                        errno[1],\n+                        errno[2],\n+                        errno[3],\n                         CLOEXEC_MSG_FOOTER[0],\n                         CLOEXEC_MSG_FOOTER[1],\n                         CLOEXEC_MSG_FOOTER[2],\n@@ -81,12 +83,13 @@ impl Command {\n             match input.read(&mut bytes) {\n                 Ok(0) => return Ok((p, ours)),\n                 Ok(8) => {\n+                    let (errno, footer) = bytes.split_at(4);\n                     assert!(\n-                        combine(CLOEXEC_MSG_FOOTER) == combine(&bytes[4..8]),\n+                        combine(CLOEXEC_MSG_FOOTER) == combine(footer.try_into().unwrap()),\n                         \"Validation on the CLOEXEC pipe failed: {:?}\",\n                         bytes\n                     );\n-                    let errno = combine(&bytes[0..4]);\n+                    let errno = combine(errno.try_into().unwrap());\n                     assert!(p.wait().is_ok(), \"wait() should either return Ok or panic\");\n                     return Err(Error::from_raw_os_error(errno));\n                 }\n@@ -103,13 +106,8 @@ impl Command {\n             }\n         }\n \n-        fn combine(arr: &[u8]) -> i32 {\n-            let a = arr[0] as u32;\n-            let b = arr[1] as u32;\n-            let c = arr[2] as u32;\n-            let d = arr[3] as u32;\n-\n-            ((a << 24) | (b << 16) | (c << 8) | (d << 0)) as i32\n+        fn combine(arr: [u8; 4]) -> i32 {\n+            i32::from_be_bytes(arr)\n         }\n     }\n "}, {"sha": "c3275eb6f0e50a836eab60f3061528e6bda9d44a", "filename": "src/libstd/sys/unix/thread_local_dtor.rs", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Funix%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Funix%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread_local_dtor.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,6 +1,9 @@\n #![cfg(target_thread_local)]\n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n \n+//! Provides thread-local destructors without an associated \"key\", which\n+//! can be more efficient.\n+\n // Since what appears to be glibc 2.18 this symbol has been shipped which\n // GCC and clang both use to invoke destructors in thread_local globals, so\n // let's do the same!\n@@ -16,7 +19,7 @@\n ))]\n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n     use crate::mem;\n-    use crate::sys_common::thread_local::register_dtor_fallback;\n+    use crate::sys_common::thread_local_dtor::register_dtor_fallback;\n \n     extern \"C\" {\n         #[linkage = \"extern_weak\"]", "previous_filename": "src/libstd/sys/unix/fast_thread_local.rs"}, {"sha": "2c5b94b1e61e5710717363d92396c6b5e1027305", "filename": "src/libstd/sys/unix/thread_local_key.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Funix%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Funix%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread_local_key.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "previous_filename": "src/libstd/sys/unix/thread_local.rs"}, {"sha": "1132a849e2f18b34965d8fe11a12c6bad83c2e71", "filename": "src/libstd/sys/vxworks/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fvxworks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fvxworks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fmod.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -13,7 +13,6 @@ pub mod cmath;\n pub mod condvar;\n pub mod env;\n pub mod ext;\n-pub mod fast_thread_local;\n pub mod fd;\n pub mod fs;\n pub mod io;\n@@ -29,7 +28,8 @@ pub mod rwlock;\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n-pub mod thread_local;\n+pub mod thread_local_dtor;\n+pub mod thread_local_key;\n pub mod time;\n \n pub use crate::sys_common::os_str_bytes as os_str;"}, {"sha": "3f73f6c490326fb6d4e8c6c8fd94b55abdc36f08", "filename": "src/libstd/sys/vxworks/thread_local_dtor.rs", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fvxworks%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fvxworks%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fthread_local_dtor.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,3 @@ pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n     use crate::sys_common::thread_local::register_dtor_fallback;\n     register_dtor_fallback(t, dtor);\n }\n-\n-pub fn requires_move_before_drop() -> bool {\n-    false\n-}", "previous_filename": "src/libstd/sys/vxworks/fast_thread_local.rs"}, {"sha": "2c5b94b1e61e5710717363d92396c6b5e1027305", "filename": "src/libstd/sys/vxworks/thread_local_key.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fvxworks%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fvxworks%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fthread_local_key.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "previous_filename": "src/libstd/sys/vxworks/thread_local.rs"}, {"sha": "85f5282034ff18ad85e6f4a7348714931e061167", "filename": "src/libstd/sys/wasi/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -36,8 +36,6 @@ pub mod net;\n pub mod os;\n pub use crate::sys_common::os_str_bytes as os_str;\n pub mod ext;\n-#[path = \"../wasm/fast_thread_local.rs\"]\n-pub mod fast_thread_local;\n pub mod path;\n pub mod pipe;\n pub mod process;\n@@ -47,8 +45,10 @@ pub mod rwlock;\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n-#[path = \"../wasm/thread_local.rs\"]\n-pub mod thread_local;\n+#[path = \"../wasm/thread_local_dtor.rs\"]\n+pub mod thread_local_dtor;\n+#[path = \"../wasm/thread_local_key.rs\"]\n+pub mod thread_local_key;\n pub mod time;\n \n #[cfg(not(test))]"}, {"sha": "6939596e52d7835f825f1efc1c4fb387b190d8e0", "filename": "src/libstd/sys/wasm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -20,7 +20,6 @@ pub mod alloc;\n pub mod args;\n pub mod cmath;\n pub mod env;\n-pub mod fast_thread_local;\n pub mod fs;\n pub mod io;\n pub mod memchr;\n@@ -32,7 +31,8 @@ pub mod process;\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n-pub mod thread_local;\n+pub mod thread_local_dtor;\n+pub mod thread_local_key;\n pub mod time;\n \n pub use crate::sys_common::os_str_bytes as os_str;"}, {"sha": "85d660983029c830329066a7da06ae20962adb6b", "filename": "src/libstd/sys/wasm/thread_local_dtor.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_dtor.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "previous_filename": "src/libstd/sys/wasm/fast_thread_local.rs"}, {"sha": "f8be9863ed56f69713e88c98fdfd8b4a6037f2e6", "filename": "src/libstd/sys/wasm/thread_local_key.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fthread_local_key.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "previous_filename": "src/libstd/sys/hermit/thread_local.rs"}, {"sha": "9a52371280e159ffb2e0115f8af19086eb90570d", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -20,7 +20,6 @@ pub mod cmath;\n pub mod condvar;\n pub mod env;\n pub mod ext;\n-pub mod fast_thread_local;\n pub mod fs;\n pub mod handle;\n pub mod io;\n@@ -35,7 +34,8 @@ pub mod process;\n pub mod rand;\n pub mod rwlock;\n pub mod thread;\n-pub mod thread_local;\n+pub mod thread_local_dtor;\n+pub mod thread_local_key;\n pub mod time;\n cfg_if::cfg_if! {\n     if #[cfg(not(target_vendor = \"uwp\"))] {"}, {"sha": "7be13bc4b2bc7cf7edb2653dfc929908af829a9c", "filename": "src/libstd/sys/windows/thread_local_dtor.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_dtor.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,4 +1,4 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n #![cfg(target_thread_local)]\n \n-pub use crate::sys_common::thread_local::register_dtor_fallback as register_dtor;\n+pub use crate::sys_common::thread_local_dtor::register_dtor_fallback as register_dtor;", "previous_filename": "src/libstd/sys/windows/fast_thread_local.rs"}, {"sha": "e0bb102b3afe5b8e746ea51d420466e41b8112bb", "filename": "src/libstd/sys/windows/thread_local_key.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_key.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "previous_filename": "src/libstd/sys/windows/thread_local.rs"}, {"sha": "e57bb267cbd0f3f33f505f3119ecf44b191a4f05", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -65,7 +65,8 @@ pub mod remutex;\n pub mod rwlock;\n pub mod thread;\n pub mod thread_info;\n-pub mod thread_local;\n+pub mod thread_local_dtor;\n+pub mod thread_local_key;\n pub mod util;\n pub mod wtf8;\n "}, {"sha": "6f5ebf4a271582fa753e03ad66f0d9f8a6fcab3c", "filename": "src/libstd/sys_common/thread_local_dtor.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys_common%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys_common%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_local_dtor.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -0,0 +1,49 @@\n+//! Thread-local destructor\n+//!\n+//! Besides thread-local \"keys\" (pointer-sized non-adressable thread-local store\n+//! with an associated destructor), many platforms also provide thread-local\n+//! destructors that are not associated with any particular data. These are\n+//! often more efficient.\n+//!\n+//! This module provides a fallback implementation for that interface, based\n+//! on the less efficient thread-local \"keys\". Each platform provides\n+//! a `thread_local_dtor` module which will either re-export the fallback,\n+//! or implement something more efficient.\n+\n+#![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n+#![allow(dead_code)] // sys isn't exported yet\n+\n+use crate::ptr;\n+use crate::sys_common::thread_local_key::StaticKey;\n+\n+pub unsafe fn register_dtor_fallback(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n+    // The fallback implementation uses a vanilla OS-based TLS key to track\n+    // the list of destructors that need to be run for this thread. The key\n+    // then has its own destructor which runs all the other destructors.\n+    //\n+    // The destructor for DTORS is a little special in that it has a `while`\n+    // loop to continuously drain the list of registered destructors. It\n+    // *should* be the case that this loop always terminates because we\n+    // provide the guarantee that a TLS key cannot be set after it is\n+    // flagged for destruction.\n+\n+    static DTORS: StaticKey = StaticKey::new(Some(run_dtors));\n+    type List = Vec<(*mut u8, unsafe extern \"C\" fn(*mut u8))>;\n+    if DTORS.get().is_null() {\n+        let v: Box<List> = box Vec::new();\n+        DTORS.set(Box::into_raw(v) as *mut u8);\n+    }\n+    let list: &mut List = &mut *(DTORS.get() as *mut List);\n+    list.push((t, dtor));\n+\n+    unsafe extern \"C\" fn run_dtors(mut ptr: *mut u8) {\n+        while !ptr.is_null() {\n+            let list: Box<List> = Box::from_raw(ptr as *mut List);\n+            for (ptr, dtor) in list.into_iter() {\n+                dtor(ptr);\n+            }\n+            ptr = DTORS.get();\n+            DTORS.set(ptr::null_mut());\n+        }\n+    }\n+}"}, {"sha": "ac5b128298d7856419aed0eb3cb3d626e62863a3", "filename": "src/libstd/sys_common/thread_local_key.rs", "status": "renamed", "additions": 3, "deletions": 36, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys_common%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fsys_common%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_local_key.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -4,7 +4,7 @@\n //! using the native OS-provided facilities (think `TlsAlloc` or\n //! `pthread_setspecific`). The interface of this differs from the other types\n //! of thread-local-storage provided in this crate in that OS-based TLS can only\n-//! get/set pointers,\n+//! get/set pointer-sized data, possibly with an associated destructor.\n //!\n //! This module also provides two flavors of TLS. One is intended for static\n //! initialization, and does not contain a `Drop` implementation to deallocate\n@@ -14,7 +14,7 @@\n //! # Usage\n //!\n //! This module should likely not be used directly unless other primitives are\n-//! being built on. types such as `thread_local::spawn::Key` are likely much\n+//! being built on. Types such as `thread_local::spawn::Key` are likely much\n //! more useful in practice than this OS-based version which likely requires\n //! unsafe code to interoperate with.\n //!\n@@ -48,9 +48,8 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n #![allow(dead_code)] // sys isn't exported yet\n \n-use crate::ptr;\n use crate::sync::atomic::{self, AtomicUsize, Ordering};\n-use crate::sys::thread_local as imp;\n+use crate::sys::thread_local_key as imp;\n use crate::sys_common::mutex::Mutex;\n \n /// A type for TLS keys that are statically allocated.\n@@ -233,38 +232,6 @@ impl Drop for Key {\n     }\n }\n \n-pub unsafe fn register_dtor_fallback(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n-    // The fallback implementation uses a vanilla OS-based TLS key to track\n-    // the list of destructors that need to be run for this thread. The key\n-    // then has its own destructor which runs all the other destructors.\n-    //\n-    // The destructor for DTORS is a little special in that it has a `while`\n-    // loop to continuously drain the list of registered destructors. It\n-    // *should* be the case that this loop always terminates because we\n-    // provide the guarantee that a TLS key cannot be set after it is\n-    // flagged for destruction.\n-\n-    static DTORS: StaticKey = StaticKey::new(Some(run_dtors));\n-    type List = Vec<(*mut u8, unsafe extern \"C\" fn(*mut u8))>;\n-    if DTORS.get().is_null() {\n-        let v: Box<List> = box Vec::new();\n-        DTORS.set(Box::into_raw(v) as *mut u8);\n-    }\n-    let list: &mut List = &mut *(DTORS.get() as *mut List);\n-    list.push((t, dtor));\n-\n-    unsafe extern \"C\" fn run_dtors(mut ptr: *mut u8) {\n-        while !ptr.is_null() {\n-            let list: Box<List> = Box::from_raw(ptr as *mut List);\n-            for (ptr, dtor) in list.into_iter() {\n-                dtor(ptr);\n-            }\n-            ptr = DTORS.get();\n-            DTORS.set(ptr::null_mut());\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::{Key, StaticKey};", "previous_filename": "src/libstd/sys_common/thread_local.rs"}, {"sha": "ecd6fbc6b9395aaa7dfdc6f8dfa4713856b8acc2", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -363,7 +363,7 @@ pub mod fast {\n     use crate::cell::Cell;\n     use crate::fmt;\n     use crate::mem;\n-    use crate::sys::fast_thread_local::register_dtor;\n+    use crate::sys::thread_local_dtor::register_dtor;\n \n     #[derive(Copy, Clone)]\n     enum DtorState {\n@@ -468,7 +468,7 @@ pub mod os {\n     use crate::fmt;\n     use crate::marker;\n     use crate::ptr;\n-    use crate::sys_common::thread_local::StaticKey as OsStaticKey;\n+    use crate::sys_common::thread_local_key::StaticKey as OsStaticKey;\n \n     pub struct Key<T> {\n         // OS-TLS key that we'll use to key off."}, {"sha": "a002f09be3b4eb89e2e498215d95eceb52e0872b", "filename": "src/test/pretty/issue-73626.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fpretty%2Fissue-73626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fpretty%2Fissue-73626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-73626.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -0,0 +1,34 @@\n+fn main(/*\n+    ---\n+*/) {\n+    let x /* this is one line */ = 3;\n+\n+    let x /*\n+           * this\n+           * is\n+           * multiple\n+           * lines\n+           */ = 3;\n+\n+    let x = /*\n+           * this\n+           * is\n+           * multiple\n+           * lines\n+           * after\n+           * the\n+           * =\n+           */ 3;\n+\n+    let x /*\n+           * this\n+           * is\n+           * multiple\n+           * lines\n+           * including\n+           * a\n+\n+           * blank\n+           * line\n+           */ = 3;\n+}"}, {"sha": "1f11d19c70ea2c12cc633b317285d4592e031a5a", "filename": "src/test/ui/asm/type-check-1.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -17,7 +17,6 @@ LL |         asm!(\"{}\", in(reg) v[..]);\n    |                            ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u64]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all inline asm arguments must have a statically known size\n \n error[E0277]: the size for values of type `[u64]` cannot be known at compilation time\n@@ -27,7 +26,6 @@ LL |         asm!(\"{}\", out(reg) v[..]);\n    |                             ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u64]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all inline asm arguments must have a statically known size\n \n error[E0277]: the size for values of type `[u64]` cannot be known at compilation time\n@@ -37,7 +35,6 @@ LL |         asm!(\"{}\", inout(reg) v[..]);\n    |                               ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u64]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all inline asm arguments must have a statically known size\n \n error: aborting due to 5 previous errors"}, {"sha": "e96d0e0eff7192bab34e361fb513b0f52ed6419f", "filename": "src/test/ui/associated-types/associated-types-unsized.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     let x = t.get();\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<T as Get>::Value`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n help: consider further restricting the associated type"}, {"sha": "de0acc88324a582d489727b4719bf5c8f18feef4", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -139,7 +139,6 @@ LL | pub struct Vec<T> {\n    |                - required by this bound in `std::vec::Vec`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to 11 previous errors\n "}, {"sha": "2ba854eac4665b86159b74cdba0b37d188b39ed2", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -21,7 +21,6 @@ LL | trait UncheckedCopy: Sized {\n LL |     + AddAssign<&'static str>\n    |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n    |\n-   = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + std::ops::AddAssign<&'static str> {\n@@ -50,7 +49,6 @@ LL | trait UncheckedCopy: Sized {\n LL |     + Display = Self;\n    |       ^^^^^^^ `Self` cannot be formatted with the default formatter\n    |\n-   = help: the trait `std::fmt::Display` is not implemented for `Self`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n help: consider further restricting `Self`\n    |\n@@ -69,7 +67,6 @@ LL |     + Display = Self;\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n    |\n-   = help: the trait `std::fmt::Display` is not implemented for `T`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n help: consider restricting type parameter `T`\n    |\n@@ -105,7 +102,6 @@ LL |     + AddAssign<&'static str>\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n    |\n-   = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::AddAssign<&'static str>> UncheckedCopy for T {}"}, {"sha": "d4fd0ca98ee548820fae161aed6e3ac19e85ae5f", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -21,7 +21,6 @@ LL | trait UncheckedCopy: Sized {\n LL |     + AddAssign<&'static str>\n    |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n    |\n-   = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + std::ops::AddAssign<&'static str> {\n@@ -50,7 +49,6 @@ LL | trait UncheckedCopy: Sized {\n LL |     + Display = Self;\n    |       ^^^^^^^ `Self` cannot be formatted with the default formatter\n    |\n-   = help: the trait `std::fmt::Display` is not implemented for `Self`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n help: consider further restricting `Self`\n    |\n@@ -69,7 +67,6 @@ LL |     + Display = Self;\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n    |\n-   = help: the trait `std::fmt::Display` is not implemented for `T`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n help: consider restricting type parameter `T`\n    |\n@@ -105,7 +102,6 @@ LL |     + AddAssign<&'static str>\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n    |\n-   = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::AddAssign<&'static str>> UncheckedCopy for T {}"}, {"sha": "be3b61665b11f50c33f4db77704dbe1d97ec381c", "filename": "src/test/ui/associated-types/issue-63593.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -6,8 +6,6 @@ LL | trait MyTrait {\n LL |     type This = Self;\n    |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider further restricting `Self`\n    |\n LL | trait MyTrait: std::marker::Sized {"}, {"sha": "7813d3b6596bffa58a619d196e67db7fbd39f6a7", "filename": "src/test/ui/associated-types/trait-with-supertraits-needing-sized-self.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -9,8 +9,6 @@ LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self>\n LL | pub trait Add<Rhs = Self> {\n    |               --- required by this bound in `std::ops::Add`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider further restricting `Self`\n    |\n LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + Div<Output=Self> + std::marker::Sized {}"}, {"sha": "2166420070a07a1898b3156ef6ea1c068ce9bf8b", "filename": "src/test/ui/async-await/issue-70818.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -7,7 +7,6 @@ LL |\n LL |     async { (ty, ty1) }\n    |     ------------------- this returned value is of type `impl std::future::Future`\n    |\n-   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `U`\n note: captured value is not `Send`\n   --> $DIR/issue-70818.rs:6:18\n    |"}, {"sha": "762afa6450a955c7395e0fadba680db714b54dc7", "filename": "src/test/ui/async-await/issue-72590-type-error-sized.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -17,10 +17,12 @@ LL |     async fn frob(self) {}\n    |                   ^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Foo`, the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Foo`\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL |     async fn frob(&self) {}\n+   |                   ^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fd3999ae6fbeca92d9edcacbfed3794ebf0da4e2", "filename": "src/test/ui/bad/bad-method-typaram-kind.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -4,7 +4,6 @@ error[E0277]: `T` cannot be sent between threads safely\n LL |     1.bar::<T>();\n    |       ^^^ `T` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `T`\n help: consider further restricting this bound\n    |\n LL | fn foo<T:'static + std::marker::Send>() {"}, {"sha": "47d8cc1f06fd1b557402e86705709f8fd31ee60f", "filename": "src/test/ui/bad/bad-sized.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -21,7 +21,6 @@ LL | pub struct Vec<T> {\n    |                - required by this bound in `std::vec::Vec`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn Trait`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n   --> $DIR/bad-sized.rs:4:37\n@@ -30,7 +29,6 @@ LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    |                                     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn Trait`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::vec::Vec::<T>::new`\n \n error: aborting due to 3 previous errors"}, {"sha": "623252a8c11399ff4bd0f9de920133d772dd0301", "filename": "src/test/ui/bound-suggestions.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -4,7 +4,6 @@ error[E0277]: `impl Sized` doesn't implement `std::fmt::Debug`\n LL |     println!(\"{:?}\", t);\n    |                      ^ `impl Sized` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `impl Sized`\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n@@ -18,7 +17,6 @@ error[E0277]: `T` doesn't implement `std::fmt::Debug`\n LL |     println!(\"{:?}\", t);\n    |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `T`\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n@@ -32,7 +30,6 @@ error[E0277]: `T` doesn't implement `std::fmt::Debug`\n LL |     println!(\"{:?}\", t);\n    |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `T`\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n@@ -46,7 +43,6 @@ error[E0277]: `Y` doesn't implement `std::fmt::Debug`\n LL |     println!(\"{:?} {:?}\", x, y);\n    |                              ^ `Y` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `Y`\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting type parameter `Y`\n@@ -60,7 +56,6 @@ error[E0277]: `X` doesn't implement `std::fmt::Debug`\n LL |     println!(\"{:?}\", x);\n    |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `X`\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n@@ -74,7 +69,6 @@ error[E0277]: `X` doesn't implement `std::fmt::Debug`\n LL |     println!(\"{:?}\", x);\n    |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `X`\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting type parameter `X`"}, {"sha": "b3e7b5b4feea4b6c446a14ed799e0e95ed1ef0d3", "filename": "src/test/ui/box-into-boxed-slice-fail.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox-into-boxed-slice-fail.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     let _ = Box::into_boxed_slice(boxed_slice);\n    |                                   ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::boxed::Box::<T>::into_boxed_slice`\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n@@ -15,7 +14,6 @@ LL |     let _ = Box::into_boxed_slice(boxed_slice);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: slice and array elements must have `Sized` type\n \n error[E0277]: the size for values of type `dyn std::fmt::Debug` cannot be known at compilation time\n@@ -25,7 +23,6 @@ LL |     let _ = Box::into_boxed_slice(boxed_trait);\n    |                                   ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn std::fmt::Debug`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::boxed::Box::<T>::into_boxed_slice`\n \n error[E0277]: the size for values of type `dyn std::fmt::Debug` cannot be known at compilation time\n@@ -35,7 +32,6 @@ LL |     let _ = Box::into_boxed_slice(boxed_trait);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn std::fmt::Debug`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: slice and array elements must have `Sized` type\n \n error: aborting due to 4 previous errors"}, {"sha": "7ff986ec38109d78b3829d5cff702a0f851bf95a", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-double-superkind.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -7,7 +7,6 @@ LL |\n LL | impl <T: Sync+'static> Foo for (T,) { }\n    |                        ^^^ `T` cannot be sent between threads safely\n    |\n-   = help: within `(T,)`, the trait `std::marker::Send` is not implemented for `T`\n    = note: required because it appears within the type `(T,)`\n help: consider further restricting this bound\n    |\n@@ -23,7 +22,6 @@ LL | trait Foo : Send+Sync { }\n LL | impl <T: Send> Foo for (T,T) { }\n    |                ^^^ `T` cannot be shared between threads safely\n    |\n-   = help: within `(T, T)`, the trait `std::marker::Sync` is not implemented for `T`\n    = note: required because it appears within the type `(T, T)`\n help: consider further restricting this bound\n    |"}, {"sha": "9ee045edfe546fc2a4f4259b8e01bb6787c6fdac", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -9,7 +9,6 @@ LL | impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n LL | pub trait RequiresRequiresShareAndSend : RequiresShare + Send { }\n    |                                                          ---- required by this bound in `trait_superkinds_in_metadata::RequiresRequiresShareAndSend`\n    |\n-   = help: within `X<T>`, the trait `std::marker::Send` is not implemented for `T`\n    = note: required because it appears within the type `X<T>`\n help: consider further restricting this bound\n    |"}, {"sha": "ad80b3fa8d11f39b97a2ad145e7162d0a988ec65", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-typaram-not-send.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -7,7 +7,6 @@ LL |\n LL | impl <T: Sync+'static> Foo for T { }\n    |                        ^^^ `T` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `T`\n help: consider further restricting this bound\n    |\n LL | impl <T: Sync+'static + std::marker::Send> Foo for T { }"}, {"sha": "fb2e0fc1a61699016c5f6e92189f861a47927b75", "filename": "src/test/ui/chalkify/impl_wf.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -8,7 +8,6 @@ LL | impl Foo for str { }\n    |      ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the trait bound `f32: Foo` is not satisfied\n   --> $DIR/impl_wf.rs:27:17"}, {"sha": "273eae995538a7dc0b62ce3b833d9fb5d9967437", "filename": "src/test/ui/closures/closure-bounds-cant-promote-superkind-in-struct.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -7,7 +7,6 @@ LL | struct X<F> where F: FnOnce() + 'static + Send {\n LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n    |                      ^^^^ `F` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `F`\n help: consider further restricting this bound\n    |\n LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static + std::marker::Send {"}, {"sha": "7df29d5a098a02896f34bdf666fa479421c7b764", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -7,7 +7,6 @@ LL | fn take_const_owned<F>(_: F) where F: FnOnce() + Sync + Send {\n LL |     take_const_owned(f);\n    |                      ^ `F` cannot be shared between threads safely\n    |\n-   = help: the trait `std::marker::Sync` is not implemented for `F`\n help: consider further restricting this bound\n    |\n LL | fn give_owned<F>(f: F) where F: FnOnce() + Send + std::marker::Sync {"}, {"sha": "ad67a87265bd3f0e66959bf691864ee8625610e1", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -16,10 +16,10 @@ LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/array-size-in-generic-struct-param.rs:14:5\n+  --> $DIR/array-size-in-generic-struct-param.rs:14:10\n    |\n LL |     arr: [u8; CFG.arr_size],\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |          ^^^^^^^^^^^^^^^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n "}, {"sha": "bf2844cfb70d6db23fc61845f350db0117586ea3", "filename": "src/test/ui/consts/const-unsized.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL | const CONST_0: dyn Debug + Sync = *(&0 as &(dyn Debug + Sync));\n    |                ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:6:18\n@@ -14,7 +13,6 @@ LL | const CONST_FOO: str = *\"foo\";\n    |                  ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:9:18\n@@ -23,7 +21,6 @@ LL | static STATIC_1: dyn Debug + Sync = *(&1 as &(dyn Debug + Sync));\n    |                  ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:12:20\n@@ -32,7 +29,6 @@ LL | static STATIC_BAR: str = *\"bar\";\n    |                    ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a5374aedab86bf505c4b575fdf0c1c3659230adb", "filename": "src/test/ui/dst/dst-bad-assign-2.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     f5.ptr = *z;\n    |     ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn ToBar`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error: aborting due to previous error"}, {"sha": "f8d9300f11a310dc9ac357ceef2dc5f4e5522b85", "filename": "src/test/ui/dst/dst-bad-assign-3.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -14,7 +14,6 @@ LL |     f5.2 = Bar1 {f: 36};\n    |     ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn ToBar`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error: aborting due to 2 previous errors"}, {"sha": "8e3eeefb9ea66c178416a21c6da4426fffae60ff", "filename": "src/test/ui/dst/dst-bad-assign.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -14,7 +14,6 @@ LL |     f5.ptr = Bar1 {f: 36};\n    |     ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn ToBar`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error: aborting due to 2 previous errors"}, {"sha": "d9d6ca3292311a243ab9c7d2e730db04e38f2ce8", "filename": "src/test/ui/dst/dst-bad-deep-2.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep-2.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     let h: &(([isize],),) = &(*g,);\n    |                              ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `(([isize],),)`, the trait `std::marker::Sized` is not implemented for `[isize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `([isize],)`\n    = note: required because it appears within the type `(([isize],),)`\n    = note: tuples must have a statically known size to be initialized"}, {"sha": "1304f04f82062d30af80ea882abd4ef75d7644bf", "filename": "src/test/ui/dst/dst-bad-deep.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     let h: &Fat<Fat<[isize]>> = &Fat { ptr: *g };\n    |                                  ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Fat<Fat<[isize]>>`, the trait `std::marker::Sized` is not implemented for `[isize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Fat<[isize]>`\n    = note: required because it appears within the type `Fat<Fat<[isize]>>`\n    = note: structs must have a statically known size to be initialized"}, {"sha": "da8ead885c8987002b18994fc327451918645e78", "filename": "src/test/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -6,8 +6,6 @@ LL | fn test1<T: ?Sized + Foo>(t: &T) {\n LL |     let u: &dyn Foo = t;\n    |                       ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n@@ -18,8 +16,6 @@ LL | fn test2<T: ?Sized + Foo>(t: &T) {\n LL |     let v: &dyn Foo = t as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -29,7 +25,6 @@ LL |     let _: &[&dyn Foo] = &[\"hi\"];\n    |                            ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n@@ -39,7 +34,6 @@ LL |     let _: &dyn Foo = x as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error: aborting due to 4 previous errors"}, {"sha": "7e90e9ce1792dae953b7ac2a9dd6dae121de6728", "filename": "src/test/ui/dst/dst-sized-trait-param.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -8,7 +8,6 @@ LL | impl Foo<[isize]> for usize { }\n    |      ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[isize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait Foo<T: ?Sized> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n@@ -24,7 +23,6 @@ LL | impl Foo<isize> for [usize] { }\n    |      ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[usize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c0ba9716fb001fad97a8c798c86bc6fae05a9785", "filename": "src/test/ui/empty/empty-struct-braces-expr.stderr", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -6,14 +6,20 @@ LL | struct Empty1 {}\n ...\n LL |     let e1 = Empty1;\n    |              ^^^^^^\n-   |              |\n-   |              did you mean `Empty1 { /* fields */ }`?\n-   |              help: a unit struct with a similar name exists: `XEmpty2`\n    | \n   ::: $DIR/auxiliary/empty-struct.rs:2:1\n    |\n LL | pub struct XEmpty2;\n    | ------------------- similarly named unit struct `XEmpty2` defined here\n+   |\n+help: a unit struct with a similar name exists\n+   |\n+LL |     let e1 = XEmpty2;\n+   |              ^^^^^^^\n+help: use struct literal syntax instead\n+   |\n+LL |     let e1 = Empty1 {};\n+   |              ^^^^^^^^^\n \n error[E0423]: expected function, tuple struct or tuple variant, found struct `Empty1`\n   --> $DIR/empty-struct-braces-expr.rs:16:14\n@@ -22,15 +28,16 @@ LL | struct Empty1 {}\n    | ---------------- `Empty1` defined here\n ...\n LL |     let e1 = Empty1();\n-   |              ^^^^^^\n-   |              |\n-   |              did you mean `Empty1 { /* fields */ }`?\n-   |              help: a unit struct with a similar name exists: `XEmpty2`\n-   | \n-  ::: $DIR/auxiliary/empty-struct.rs:2:1\n+   |              ^^^^^^^^\n    |\n-LL | pub struct XEmpty2;\n-   | ------------------- similarly named unit struct `XEmpty2` defined here\n+help: a unit struct with a similar name exists\n+   |\n+LL |     let e1 = XEmpty2();\n+   |              ^^^^^^^\n+help: use struct literal syntax instead\n+   |\n+LL |     let e1 = Empty1 {};\n+   |              ^^^^^^^^^\n \n error[E0423]: expected value, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-expr.rs:18:14\n@@ -39,7 +46,7 @@ LL |     Empty3 {}\n    |     --------- `E::Empty3` defined here\n ...\n LL |     let e3 = E::Empty3;\n-   |              ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n+   |              ^^^^^^^^^ help: use struct literal syntax instead: `E::Empty3 {}`\n \n error[E0423]: expected function, tuple struct or tuple variant, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-expr.rs:19:14\n@@ -48,35 +55,42 @@ LL |     Empty3 {}\n    |     --------- `E::Empty3` defined here\n ...\n LL |     let e3 = E::Empty3();\n-   |              ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n+   |              ^^^^^^^^^^^ help: use struct literal syntax instead: `E::Empty3 {}`\n \n error[E0423]: expected value, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-expr.rs:22:15\n    |\n LL |     let xe1 = XEmpty1;\n    |               ^^^^^^^\n-   |               |\n-   |               did you mean `XEmpty1 { /* fields */ }`?\n-   |               help: a unit struct with a similar name exists: `XEmpty2`\n    | \n   ::: $DIR/auxiliary/empty-struct.rs:2:1\n    |\n LL | pub struct XEmpty2;\n    | ------------------- similarly named unit struct `XEmpty2` defined here\n+   |\n+help: a unit struct with a similar name exists\n+   |\n+LL |     let xe1 = XEmpty2;\n+   |               ^^^^^^^\n+help: use struct literal syntax instead\n+   |\n+LL |     let xe1 = XEmpty1 {};\n+   |               ^^^^^^^^^^\n \n error[E0423]: expected function, tuple struct or tuple variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-expr.rs:23:15\n    |\n LL |     let xe1 = XEmpty1();\n+   |               ^^^^^^^^^\n+   |\n+help: a unit struct with a similar name exists\n+   |\n+LL |     let xe1 = XEmpty2();\n    |               ^^^^^^^\n-   |               |\n-   |               did you mean `XEmpty1 { /* fields */ }`?\n-   |               help: a unit struct with a similar name exists: `XEmpty2`\n-   | \n-  ::: $DIR/auxiliary/empty-struct.rs:2:1\n+help: use struct literal syntax instead\n    |\n-LL | pub struct XEmpty2;\n-   | ------------------- similarly named unit struct `XEmpty2` defined here\n+LL |     let xe1 = XEmpty1 {};\n+   |               ^^^^^^^^^^\n \n error[E0599]: no variant or associated item named `Empty3` found for enum `empty_struct::XE` in the current scope\n   --> $DIR/empty-struct-braces-expr.rs:25:19"}, {"sha": "b027c82f7dd37d600ebf8e705ddb6132993cf39c", "filename": "src/test/ui/empty/empty-struct-braces-pat-1.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,21 +5,27 @@ LL |     Empty3 {}\n    |     --------- `E::Empty3` defined here\n ...\n LL |         E::Empty3 => ()\n-   |         ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n+   |         ^^^^^^^^^ help: use struct pattern syntax instead: `E::Empty3 {}`\n \n error[E0532]: expected unit struct, unit variant or constant, found struct variant `XE::XEmpty3`\n   --> $DIR/empty-struct-braces-pat-1.rs:31:9\n    |\n LL |         XE::XEmpty3 => ()\n-   |         ^^^^-------\n-   |         |   |\n-   |         |   help: a unit variant with a similar name exists: `XEmpty4`\n-   |         did you mean `XE::XEmpty3 { /* fields */ }`?\n+   |         ^^^^^^^^^^^\n    | \n   ::: $DIR/auxiliary/empty-struct.rs:7:5\n    |\n LL |     XEmpty4,\n    |     ------- similarly named unit variant `XEmpty4` defined here\n+   |\n+help: a unit variant with a similar name exists\n+   |\n+LL |         XE::XEmpty4 => ()\n+   |             ^^^^^^^\n+help: use struct pattern syntax instead\n+   |\n+LL |         XE::XEmpty3 { /* fields */ } => ()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a53b88db7d1ed3725234d3bcd8d314e1583b9527", "filename": "src/test/ui/empty/empty-struct-braces-pat-2.stderr", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,29 +5,31 @@ LL | struct Empty1 {}\n    | ---------------- `Empty1` defined here\n ...\n LL |         Empty1() => ()\n-   |         ^^^^^^\n-   |         |\n-   |         did you mean `Empty1 { /* fields */ }`?\n-   |         help: a tuple struct with a similar name exists: `XEmpty6`\n-   | \n-  ::: $DIR/auxiliary/empty-struct.rs:3:1\n-   |\n-LL | pub struct XEmpty6();\n-   | --------------------- similarly named tuple struct `XEmpty6` defined here\n+   |         ^^^^^^^^\n+   |\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         XEmpty6() => ()\n+   |         ^^^^^^^\n+help: use struct pattern syntax instead\n+   |\n+LL |         Empty1 {} => ()\n+   |         ^^^^^^^^^\n \n error[E0532]: expected tuple struct or tuple variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:18:9\n    |\n LL |         XEmpty1() => ()\n+   |         ^^^^^^^^^\n+   |\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         XEmpty6() => ()\n    |         ^^^^^^^\n-   |         |\n-   |         did you mean `XEmpty1 { /* fields */ }`?\n-   |         help: a tuple struct with a similar name exists: `XEmpty6`\n-   | \n-  ::: $DIR/auxiliary/empty-struct.rs:3:1\n-   |\n-LL | pub struct XEmpty6();\n-   | --------------------- similarly named tuple struct `XEmpty6` defined here\n+help: use struct pattern syntax instead\n+   |\n+LL |         XEmpty1 {} => ()\n+   |         ^^^^^^^^^^\n \n error[E0532]: expected tuple struct or tuple variant, found struct `Empty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:21:9\n@@ -36,29 +38,31 @@ LL | struct Empty1 {}\n    | ---------------- `Empty1` defined here\n ...\n LL |         Empty1(..) => ()\n-   |         ^^^^^^\n-   |         |\n-   |         did you mean `Empty1 { /* fields */ }`?\n-   |         help: a tuple struct with a similar name exists: `XEmpty6`\n-   | \n-  ::: $DIR/auxiliary/empty-struct.rs:3:1\n-   |\n-LL | pub struct XEmpty6();\n-   | --------------------- similarly named tuple struct `XEmpty6` defined here\n+   |         ^^^^^^^^^^\n+   |\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         XEmpty6(..) => ()\n+   |         ^^^^^^^\n+help: use struct pattern syntax instead\n+   |\n+LL |         Empty1 {} => ()\n+   |         ^^^^^^^^^\n \n error[E0532]: expected tuple struct or tuple variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:24:9\n    |\n LL |         XEmpty1(..) => ()\n+   |         ^^^^^^^^^^^\n+   |\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         XEmpty6(..) => ()\n    |         ^^^^^^^\n-   |         |\n-   |         did you mean `XEmpty1 { /* fields */ }`?\n-   |         help: a tuple struct with a similar name exists: `XEmpty6`\n-   | \n-  ::: $DIR/auxiliary/empty-struct.rs:3:1\n-   |\n-LL | pub struct XEmpty6();\n-   | --------------------- similarly named tuple struct `XEmpty6` defined here\n+help: use struct pattern syntax instead\n+   |\n+LL |         XEmpty1 {} => ()\n+   |         ^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "93ace3eccef91aefa755d15ce52eea838dfc86b8", "filename": "src/test/ui/empty/empty-struct-braces-pat-3.stderr", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,21 +5,22 @@ LL |     Empty3 {}\n    |     --------- `E::Empty3` defined here\n ...\n LL |         E::Empty3() => ()\n-   |         ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n+   |         ^^^^^^^^^^^ help: use struct pattern syntax instead: `E::Empty3 {}`\n \n error[E0532]: expected tuple struct or tuple variant, found struct variant `XE::XEmpty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:21:9\n    |\n LL |         XE::XEmpty3() => ()\n-   |         ^^^^-------\n-   |         |   |\n-   |         |   help: a tuple variant with a similar name exists: `XEmpty5`\n-   |         did you mean `XE::XEmpty3 { /* fields */ }`?\n-   | \n-  ::: $DIR/auxiliary/empty-struct.rs:8:5\n-   |\n-LL |     XEmpty5(),\n-   |     --------- similarly named tuple variant `XEmpty5` defined here\n+   |         ^^^^^^^^^^^^^\n+   |\n+help: a tuple variant with a similar name exists\n+   |\n+LL |         XE::XEmpty5() => ()\n+   |             ^^^^^^^\n+help: use struct pattern syntax instead\n+   |\n+LL |         XE::XEmpty3 { /* fields */ } => ()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0532]: expected tuple struct or tuple variant, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:25:9\n@@ -28,21 +29,22 @@ LL |     Empty3 {}\n    |     --------- `E::Empty3` defined here\n ...\n LL |         E::Empty3(..) => ()\n-   |         ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n+   |         ^^^^^^^^^^^^^ help: use struct pattern syntax instead: `E::Empty3 {}`\n \n error[E0532]: expected tuple struct or tuple variant, found struct variant `XE::XEmpty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:29:9\n    |\n LL |         XE::XEmpty3(..) => ()\n-   |         ^^^^-------\n-   |         |   |\n-   |         |   help: a tuple variant with a similar name exists: `XEmpty5`\n-   |         did you mean `XE::XEmpty3 { /* fields */ }`?\n-   | \n-  ::: $DIR/auxiliary/empty-struct.rs:8:5\n-   |\n-LL |     XEmpty5(),\n-   |     --------- similarly named tuple variant `XEmpty5` defined here\n+   |         ^^^^^^^^^^^^^^^\n+   |\n+help: a tuple variant with a similar name exists\n+   |\n+LL |         XE::XEmpty5(..) => ()\n+   |             ^^^^^^^\n+help: use struct pattern syntax instead\n+   |\n+LL |         XE::XEmpty3 { /* fields */ } => ()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "203fc18915647fcbacbddbf9fa101a1e0b396dc9", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -2,13 +2,15 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n   --> $DIR/E0277.rs:13:6\n    |\n LL | fn f(p: Path) { }\n-   |      ^ borrow the `Path` instead\n+   |      ^ doesn't have a size known at compile-time\n    |\n    = help: within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `std::path::Path`\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn f(p: &Path) { }\n+   |         ^\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/E0277.rs:17:15"}, {"sha": "077367de9d847cb47af16ddb20e5d31bd9022abb", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -33,13 +33,16 @@ LL |     struct Foo { a: bool };\n    |     ---------------------- `Foo` defined here\n LL | \n LL |     let f = Foo();\n+   |             ^^^^^\n+   |\n+help: a function with a similar name exists\n+   |\n+LL |     let f = foo();\n    |             ^^^\n-   |             |\n-   |             did you mean `Foo { /* fields */ }`?\n-   |             help: a function with a similar name exists (notice the capitalization): `foo`\n-...\n-LL | fn foo() {\n-   | -------- similarly named function `foo` defined here\n+help: use struct literal syntax instead\n+   |\n+LL |     let f = Foo { a: val };\n+   |             ^^^^^^^^^^^^^^\n \n error[E0423]: expected value, found struct `T`\n   --> $DIR/E0423.rs:14:8"}, {"sha": "38736de8d9ac72d7c22b392c85ab1b025ef49445", "filename": "src/test/ui/error-codes/E0478.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,8 +1,8 @@\n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/E0478.rs:4:5\n+  --> $DIR/E0478.rs:4:12\n    |\n LL |     child: Box<dyn Wedding<'kiss> + 'SnowWhite>,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'SnowWhite` as defined on the struct at 3:22\n   --> $DIR/E0478.rs:3:22"}, {"sha": "8938afd33ffde90c3d9c55e6cf46deafc7723cef", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -8,7 +8,6 @@ LL |     assert_sized::<A>();\n    |                    ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn assert_sized<T: ?Sized>() { }\n@@ -24,7 +23,6 @@ LL |     assert_sized::<Foo>();\n    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Foo`, the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Foo`\n help: consider relaxing the implicit `Sized` restriction\n    |\n@@ -41,7 +39,6 @@ LL |     assert_sized::<Bar<A>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<A>`, the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Bar<A>`\n help: consider relaxing the implicit `Sized` restriction\n    |\n@@ -58,7 +55,6 @@ LL |     assert_sized::<Bar<Bar<A>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<Bar<A>>`, the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Bar<A>`\n    = note: required because it appears within the type `Bar<Bar<A>>`\n help: consider relaxing the implicit `Sized` restriction"}, {"sha": "5a58e57d36c706ba98983a40a8939ea86f183bb9", "filename": "src/test/ui/extern/issue-36122-accessing-externed-dst.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fextern%2Fissue-36122-accessing-externed-dst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fextern%2Fissue-36122-accessing-externed-dst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fissue-36122-accessing-externed-dst.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |         static symbol: [usize];\n    |                        ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[usize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "987cde191cbb98431dc46b85f41800f15ecb026d", "filename": "src/test/ui/feature-gates/feature-gate-infer_static_outlives_requirements.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,10 +1,10 @@\n error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/feature-gate-infer_static_outlives_requirements.rs:5:5\n+  --> $DIR/feature-gate-infer_static_outlives_requirements.rs:5:10\n    |\n LL | struct Foo<U> {\n    |            - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     bar: Bar<U>\n-   |     ^^^^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n+   |          ^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "d4c09ec40fd926154140e23c0a2fe9486ea01fec", "filename": "src/test/ui/feature-gates/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -95,7 +95,6 @@ LL | struct TwoStrs(str, str) where str: Sized;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n@@ -108,7 +107,6 @@ LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n    = help: within `Dst<(dyn A + 'static)>`, the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Dst<(dyn A + 'static)>`\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n@@ -122,7 +120,6 @@ LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n "}, {"sha": "0195cc1481e74ce1adc170620a7d909bb8c3b9ce", "filename": "src/test/ui/feature-gates/feature-gate-unsized_locals.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,9 +5,11 @@ LL | fn f(f: dyn FnOnce()) {}\n    |      ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::FnOnce() + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn f(f: &dyn FnOnce()) {}\n+   |         ^\n \n error: aborting due to previous error\n "}, {"sha": "379bd8ebd1cada3db5a4af9ab753152f12d673d1", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -9,7 +9,6 @@ LL | |    };\n    | |____^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the yield type of a generator must have a statically known size\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -19,7 +18,6 @@ LL |    Pin::new(&mut gen).resume(());\n    |                       ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2fab7ffb66050b103e6a3a301dc897edfeb1a626", "filename": "src/test/ui/generic-associated-types/issue-68642-broken-llvm-ir.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -16,7 +16,6 @@ LL |     type F<'a>: Fn() -> u32;\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n    |\n-   = help: the trait `std::ops::Fn<()>` is not implemented for `T`\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n help: consider restricting type parameter `T`\n    |"}, {"sha": "186e142138be2fe93c23b464061d224cac0acef2", "filename": "src/test/ui/generic-associated-types/issue-68643-broken-mir.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -16,7 +16,6 @@ LL |     type F<'a>: Fn() -> u32;\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n    |\n-   = help: the trait `std::ops::Fn<()>` is not implemented for `T`\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n help: consider restricting type parameter `T`\n    |"}, {"sha": "d16bdcbbb6b00d859da406fb85c4247487512801", "filename": "src/test/ui/generic-associated-types/issue-68644-codegen-selection.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -16,7 +16,6 @@ LL |     type F<'a>: Fn() -> u32;\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n    |\n-   = help: the trait `std::ops::Fn<()>` is not implemented for `T`\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n help: consider restricting type parameter `T`\n    |"}, {"sha": "72c42917c83c92a53cd953e56ac28ba32510fee9", "filename": "src/test/ui/generic-associated-types/issue-68645-codegen-fulfillment.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -16,7 +16,6 @@ LL |     type F<'a>: Fn() -> u32;\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n    |\n-   = help: the trait `std::ops::Fn<()>` is not implemented for `T`\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n help: consider restricting type parameter `T`\n    |"}, {"sha": "7a6c07d4e082e0f5b013861be53e27f712452a0e", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -8,7 +8,6 @@ LL | impl Tsized for () {}\n    |      ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[()]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "96f961a2aaf6bd19c1029f3f7a6f8cf816ba8f34", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -16,7 +16,6 @@ LL | fn fuz() -> (usize, Trait) { (42, Struct) }\n    |             doesn't have a size known at compile-time\n    |\n    = help: within `(usize, (dyn Trait + 'static))`, the trait `std::marker::Sized` is not implemented for `(dyn Trait + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `(usize, (dyn Trait + 'static))`\n    = note: the return type of a function must have a statically known size\n \n@@ -38,7 +37,6 @@ LL | fn bar() -> (usize, dyn Trait) { (42, Struct) }\n    |             doesn't have a size known at compile-time\n    |\n    = help: within `(usize, (dyn Trait + 'static))`, the trait `std::marker::Sized` is not implemented for `(dyn Trait + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `(usize, (dyn Trait + 'static))`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "6210c29bbdc8c3dd69b28fd8de4f485efb19aa02", "filename": "src/test/ui/issues/auxiliary/issue-73112.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-73112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-73112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-73112.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -0,0 +1,10 @@\n+#[repr(transparent)]\n+pub struct PageTableEntry {\n+    entry: u64,\n+}\n+\n+#[repr(align(4096))]\n+#[repr(C)]\n+pub struct PageTable {\n+    entries: [PageTableEntry; 512],\n+}"}, {"sha": "d241e6406d579080e67cfc6792716150a766c509", "filename": "src/test/ui/issues/issue-10412.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -56,7 +56,6 @@ LL | impl<'self> Serializable<str> for &'self str {\n    |             ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait Serializable<'self, T: ?Sized> {"}, {"sha": "4e41acf433e599889fd76c95814411db40293920", "filename": "src/test/ui/issues/issue-14366.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     let _x = \"test\" as &dyn (::std::any::Any);\n    |              ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn std::any::Any`\n \n error: aborting due to previous error"}, {"sha": "68ceebc5b651d2e334378a738a2924a41515c259", "filename": "src/test/ui/issues/issue-15756.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-15756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-15756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15756.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     &mut something\n    |          ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[T]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "812778911a865fde362eac5e410c57cbf3b11002", "filename": "src/test/ui/issues/issue-17651.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     (|| Box::new(*(&[0][..])))();\n    |                  ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[{integer}]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::boxed::Box::<T>::new`\n \n error[E0277]: the size for values of type `[{integer}]` cannot be known at compilation time\n@@ -15,7 +14,6 @@ LL |     (|| Box::new(*(&[0][..])))();\n    |         ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[{integer}]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "3b5dfd1ad158c27660af7b02c325e7a2d1d58f0e", "filename": "src/test/ui/issues/issue-18919.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -8,7 +8,6 @@ LL | enum Option<T> {\n    |             - required by this bound in `Option`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn for<'r> std::ops::Fn(&'r isize) -> isize`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/issue-18919.rs:7:13\n    |"}, {"sha": "a54f1008e4ba9c9b915f935d38537b79ee42aa48", "filename": "src/test/ui/issues/issue-19086.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-19086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-19086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19086.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,7 @@ LL |     FooB { x: i32, y: i32 }\n    |     ----------------------- `FooB` defined here\n ...\n LL |         FooB(a, b) => println!(\"{} {}\", a, b),\n-   |         ^^^^ did you mean `FooB { /* fields */ }`?\n+   |         ^^^^^^^^^^ help: use struct pattern syntax instead: `FooB { x, y }`\n \n error: aborting due to previous error\n "}, {"sha": "63f0701974b8b1efe1b37028d63ad523c3f976c0", "filename": "src/test/ui/issues/issue-19380.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,13 +1,13 @@\n error[E0038]: the trait `Qiz` cannot be made into an object\n-  --> $DIR/issue-19380.rs:11:3\n+  --> $DIR/issue-19380.rs:11:9\n    |\n LL | trait Qiz {\n    |       --- this trait cannot be made into an object...\n LL |   fn qiz();\n    |      --- ...because associated function `qiz` has no `self` parameter\n ...\n LL |   foos: &'static [&'static (dyn Qiz + 'static)]\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Qiz` cannot be made into an object\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Qiz` cannot be made into an object\n    |\n help: consider turning `qiz` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n    |"}, {"sha": "cbaa7507244a391cd4e70748b86b5e0ca8589f56", "filename": "src/test/ui/issues/issue-20005.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -7,8 +7,6 @@ LL | trait From<Src> {\n LL |     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n    |                                                 ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider further restricting `Self`\n    |\n LL |     ) -> <Dst as From<Self>>::Result where Dst: From<Self>, Self: std::marker::Sized {"}, {"sha": "0e96b12066937aa43679beb3806910ec90b31e23", "filename": "src/test/ui/issues/issue-20433.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -10,7 +10,6 @@ LL | pub struct Vec<T> {\n    |                - required by this bound in `std::vec::Vec`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "5e06e3bc95c3655f9bb5f94e34604a52e05298b9", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     for item in *things { *item = 0 }\n    |                 ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn std::iter::Iterator<Item = &'a mut u8>`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error: aborting due to previous error"}, {"sha": "6f22fe6a99717be6140539dfa6eded3bbd97b138", "filename": "src/test/ui/issues/issue-22874.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-22874.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-22874.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22874.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,11 +1,10 @@\n error[E0277]: the size for values of type `[std::string::String]` cannot be known at compilation time\n-  --> $DIR/issue-22874.rs:2:5\n+  --> $DIR/issue-22874.rs:2:11\n    |\n LL |     rows: [[String]],\n-   |     ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |           ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[std::string::String]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: slice and array elements must have `Sized` type\n \n error: aborting due to previous error"}, {"sha": "46b4be6fd36496adbb5719a647920f9f481d675e", "filename": "src/test/ui/issues/issue-23281.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -8,7 +8,6 @@ LL | struct Vec<T> {\n    |            - required by this bound in `Vec`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/issue-23281.rs:8:12\n    |"}, {"sha": "d2714408d8a39629cf0114d4072a64c9750f05bb", "filename": "src/test/ui/issues/issue-24446.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     static foo: dyn Fn() -> u32 = || -> u32 {\n    |                 ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() -> u32 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "5dbcc96e87488440f6c70dec125ae5e6b7740289", "filename": "src/test/ui/issues/issue-27060-2.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,14 +1,21 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/issue-27060-2.rs:3:5\n+  --> $DIR/issue-27060-2.rs:3:11\n    |\n LL | pub struct Bad<T: ?Sized> {\n    |                - this type parameter needs to be `std::marker::Sized`\n LL |     data: T,\n-   |     ^^^^^^^ doesn't have a size known at compile-time\n+   |           ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the last field of a packed struct may only have a dynamically sized type if it does not need drop to be run\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     data: &T,\n+   |           ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     data: Box<T>,\n+   |           ^^^^ ^\n \n error: aborting due to previous error\n "}, {"sha": "de1810e99aac6c6f859a17b8d23c38442319afb7", "filename": "src/test/ui/issues/issue-27078.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -4,14 +4,15 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n LL |     fn foo(self) -> &'static i32 {\n    |            ^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n help: consider further restricting `Self`\n    |\n LL |     fn foo(self) -> &'static i32 where Self: std::marker::Sized {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL |     fn foo(&self) -> &'static i32 {\n+   |            ^\n \n error: aborting due to previous error\n "}, {"sha": "98de768a5a819af9a6442ee541631ca90eb96e6d", "filename": "src/test/ui/issues/issue-30355.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     &X(*Y)\n    |      ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "5f157f6e3c0895a17630f67fab27be876a45ebf6", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -23,7 +23,7 @@ error[E0423]: expected value, found struct `Vec`\n   --> $DIR/issue-34334.rs:2:13\n    |\n LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |             ^^^ did you mean `Vec { /* fields */ }`?\n+   |             ^^^ help: use struct literal syntax instead: `Vec { buf: val, len: val }`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-34334.rs:2:31"}, {"sha": "0f0b80a9ff8d3f00153e31a3cef2828341c624ae", "filename": "src/test/ui/issues/issue-35988.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,8 +5,16 @@ LL |     V([Box<E>]),\n    |       ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[std::boxed::Box<E>]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     V(&[Box<E>]),\n+   |       ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     V(Box<[Box<E>]>),\n+   |       ^^^^        ^\n \n error: aborting due to previous error\n "}, {"sha": "e96bbe1a99312d369b30b3b1b0d810cdeaf4cda3", "filename": "src/test/ui/issues/issue-38954.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,9 +5,11 @@ LL | fn _test(ref _p: str) {}\n    |          ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn _test(ref _p: &str) {}\n+   |                  ^\n \n error: aborting due to previous error\n "}, {"sha": "35aa1acdc1c9b04305d465eb88ba788ef9d002d8", "filename": "src/test/ui/issues/issue-41229-ref-str.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,9 +5,11 @@ LL | pub fn example(ref s: str) {}\n    |                ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | pub fn example(ref s: &str) {}\n+   |                       ^\n \n error: aborting due to previous error\n "}, {"sha": "fbe87aa2dbee592a94511c0d05741462362b9b41", "filename": "src/test/ui/issues/issue-42312.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,13 +5,15 @@ LL |     fn baz(_: Self::Target) where Self: Deref {}\n    |            ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<Self as std::ops::Deref>::Target`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n help: consider further restricting the associated type\n    |\n LL |     fn baz(_: Self::Target) where Self: Deref, <Self as std::ops::Deref>::Target: std::marker::Sized {}\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL |     fn baz(_: &Self::Target) where Self: Deref {}\n+   |               ^\n \n error[E0277]: the size for values of type `(dyn std::string::ToString + 'static)` cannot be known at compilation time\n   --> $DIR/issue-42312.rs:8:10\n@@ -20,9 +22,11 @@ LL | pub fn f(_: dyn ToString) {}\n    |          ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::string::ToString + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | pub fn f(_: &dyn ToString) {}\n+   |             ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9205a518c8c3a59d296d166f3da0298505b6f110", "filename": "src/test/ui/issues/issue-54410.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-54410.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-54410.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54410.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     pub static mut symbol: [i8];\n    |                            ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "897984d0ae410eb483502ad901f698e0d9e55336", "filename": "src/test/ui/issues/issue-5883.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,9 +5,11 @@ LL | fn new_struct(r: dyn A + 'static)\n    |               ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn new_struct(r: &dyn A + 'static)\n+   |                  ^\n \n error[E0277]: the size for values of type `(dyn A + 'static)` cannot be known at compilation time\n   --> $DIR/issue-5883.rs:8:8\n@@ -19,7 +21,6 @@ LL |     Struct { r: r }\n    |     --------------- this returned value is of type `Struct`\n    |\n    = help: within `Struct`, the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Struct`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "771a5c285aff8c578d49770ee811395dd3c4f527", "filename": "src/test/ui/issues/issue-63983.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -14,7 +14,7 @@ LL |     Struct{ s: i32 },\n    |     ---------------- `MyEnum::Struct` defined here\n ...\n LL |         MyEnum::Struct => \"\",\n-   |         ^^^^^^^^^^^^^^ did you mean `MyEnum::Struct { /* fields */ }`?\n+   |         ^^^^^^^^^^^^^^ help: use struct pattern syntax instead: `MyEnum::Struct { s }`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "12053d8a1291c3ae8ae3a089e370c7108ce35c3e", "filename": "src/test/ui/issues/issue-64792-bad-unicode-ctor.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,11 +5,16 @@ LL | struct X {}\n    | ----------- `X` defined here\n LL | \n LL | const Y: X = X(\"\u00f6\");\n-   | -------------^------\n-   | |            |\n-   | |            did you mean `X { /* fields */ }`?\n-   | |            help: a constant with a similar name exists: `Y`\n-   | similarly named constant `Y` defined here\n+   |              ^^^^^^\n+   |\n+help: a constant with a similar name exists\n+   |\n+LL | const Y: X = Y(\"\u00f6\");\n+   |              ^\n+help: use struct literal syntax instead\n+   |\n+LL | const Y: X = X {};\n+   |              ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "fef64ebf2d365ebe7d463e2096faea63f0344437", "filename": "src/test/ui/issues/issue-65673.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -10,7 +10,6 @@ LL |     type Ctx = dyn Alias<T>;\n    |                ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Trait + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "cc7be9c95aef6be2dc3012562bd7d2264f5e4854", "filename": "src/test/ui/issues/issue-73112.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-73112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-73112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73112.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -0,0 +1,13 @@\n+// aux-build:issue-73112.rs\n+\n+extern crate issue_73112;\n+\n+fn main() {\n+    use issue_73112::PageTable;\n+\n+    #[repr(C, packed)]\n+    struct SomeStruct {\n+    //~^ ERROR packed type cannot transitively contain a `#[repr(align)]` type [E0588]\n+        page_table: PageTable,\n+    }\n+}"}, {"sha": "5a548378c2687c7c7e7d2220d1d02b6ecae66d67", "filename": "src/test/ui/issues/issue-73112.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-73112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fissues%2Fissue-73112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73112.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -0,0 +1,20 @@\n+error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n+  --> $DIR/issue-73112.rs:9:5\n+   |\n+LL | /     struct SomeStruct {\n+LL | |\n+LL | |         page_table: PageTable,\n+LL | |     }\n+   | |_____^\n+   |\n+note: `PageTable` has a `#[repr(align)]` attribute\n+  --> $DIR/auxiliary/issue-73112.rs:8:1\n+   |\n+LL | / pub struct PageTable {\n+LL | |     entries: [PageTableEntry; 512],\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0588`."}, {"sha": "eb400cf061547ed13b5ca8c4cb518c0d6cf789d5", "filename": "src/test/ui/kindck/kindck-impl-type-params.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -4,7 +4,6 @@ error[E0277]: `T` cannot be sent between threads safely\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `T`\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n@@ -31,7 +30,6 @@ error[E0277]: `T` cannot be sent between threads safely\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ `T` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `T`\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`"}, {"sha": "ab9dfc9b8a7795bfc0f4d6fdd07353633fdbab1c", "filename": "src/test/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -4,7 +4,6 @@ error[E0277]: `T` cannot be sent between threads safely\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `T`\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n@@ -31,7 +30,6 @@ error[E0277]: `T` cannot be sent between threads safely\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ `T` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `T`\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`"}, {"sha": "98bf9923823d7d7f34ceb588c6ebd262b6c8b1b0", "filename": "src/test/ui/lazy_normalization_consts/feature-gate-lazy_normalization_consts.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -9,8 +9,6 @@ LL | fn test<T>() {\n LL |     let _: [u8; sof::<T>()];\n    |                       ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | pub const fn sof<T: ?Sized>() -> usize {"}, {"sha": "ce0495dd8b0cbaa3a0b137715e6d7f03122530f2", "filename": "src/test/ui/lazy_normalization_consts/issue-57739.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-57739.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-57739.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-57739.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -8,10 +8,10 @@ LL | #![feature(lazy_normalization_consts)]\n    = note: see issue #72219 <https://github.com/rust-lang/rust/issues/72219> for more information\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-57739.rs:12:5\n+  --> $DIR/issue-57739.rs:12:12\n    |\n LL |     array: [u8; T::SIZE],\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n "}, {"sha": "e5083e3a088b6b53be9e6b1f8d8976d8c47d31b2", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,10 +1,10 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:19:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:19:10\n    |\n LL | struct Foo<T> {\n    |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     foo: &'static T\n-   |     ^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n+   |          ^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n \n error[E0309]: the parameter type `K` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:24:19"}, {"sha": "293ffd5c28e1089cee0a40805786a13f408251a9", "filename": "src/test/ui/lint/lint-ctypes-73747.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73747.rs?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+#[repr(transparent)]\n+struct NonNullRawComPtr<T: ComInterface> {\n+    inner: std::ptr::NonNull<<T as ComInterface>::VTable>,\n+}\n+\n+trait ComInterface {\n+    type VTable;\n+}\n+\n+extern \"C\" fn invoke<T: ComInterface>(_: Option<NonNullRawComPtr<T>>) {}\n+\n+fn main() {}"}, {"sha": "71abda520653e56b14eed5bbf1356b582530580a", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -209,7 +209,6 @@ LL |     let _ = fat_v as *const dyn Foo;\n    |             ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -219,7 +218,6 @@ LL |     let _ = a as *const dyn Foo;\n    |             ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0606]: casting `&{float}` as `f32` is invalid"}, {"sha": "636789c9cc3004714f54843a4af0574e6b5834fc", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -51,12 +51,16 @@ LL |         TV(),\n    |         ---- similarly named tuple variant `TV` defined here\n ...\n LL |     check(m7::V);\n-   |           ^^^^^ did you mean `m7::V { /* fields */ }`?\n+   |           ^^^^^\n    |\n help: a tuple variant with a similar name exists\n    |\n LL |     check(m7::TV);\n    |               ^^\n+help: use struct literal syntax instead\n+   |\n+LL |     check(m7::V {});\n+   |           ^^^^^^^^\n help: consider importing one of these items instead\n    |\n LL | use m8::V;\n@@ -68,7 +72,7 @@ error[E0423]: expected value, found struct variant `xm7::V`\n   --> $DIR/namespace-mix.rs:106:11\n    |\n LL |     check(xm7::V);\n-   |           ^^^^^^ did you mean `xm7::V { /* fields */ }`?\n+   |           ^^^^^^\n    | \n   ::: $DIR/auxiliary/namespace-mix.rs:7:9\n    |\n@@ -79,6 +83,10 @@ help: a tuple variant with a similar name exists\n    |\n LL |     check(xm7::TV);\n    |                ^^\n+help: use struct literal syntax instead\n+   |\n+LL |     check(xm7::V { /* fields */ });\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n help: consider importing one of these items instead\n    |\n LL | use m8::V;"}, {"sha": "6986d966d69ecb9c00754cb45678b567a7dce264", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -16,7 +16,7 @@ LL |     Foo { a: usize, b: usize },\n    |     -------------------------- `Enum::Foo` defined here\n ...\n LL |         Enum::Foo(a, b) => {}\n-   |         ^^^^^^^^^ did you mean `Enum::Foo { /* fields */ }`?\n+   |         ^^^^^^^^^^^^^^^ help: use struct pattern syntax instead: `Enum::Foo { a, b }`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e143747d637ee0292c2ee79aed7ba4e340f73c61", "filename": "src/test/ui/phantom-oibit.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-oibit.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -7,7 +7,6 @@ LL | fn is_zen<T: Zen>(_: T) {}\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n    |\n-   = help: the trait `std::marker::Sync` is not implemented for `T`\n    = note: required because of the requirements on the impl of `Zen` for `&T`\n    = note: required because it appears within the type `std::marker::PhantomData<&T>`\n    = note: required because it appears within the type `Guard<'_, T>`\n@@ -25,7 +24,6 @@ LL | fn is_zen<T: Zen>(_: T) {}\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n    |\n-   = help: the trait `std::marker::Sync` is not implemented for `T`\n    = note: required because of the requirements on the impl of `Zen` for `&T`\n    = note: required because it appears within the type `std::marker::PhantomData<&T>`\n    = note: required because it appears within the type `Guard<'_, T>`"}, {"sha": "e179feba7a799e59e279c003c8cff34d3573d990", "filename": "src/test/ui/range/range-1.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-1.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -19,7 +19,6 @@ LL |     let range = *arr..;\n    |                 ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[{integer}]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::ops::RangeFrom`\n \n error: aborting due to 3 previous errors"}, {"sha": "22586b5de91ff9e2158c52df337f083e74fedeac", "filename": "src/test/ui/regions/region-bounds-on-objects-and-type-parameters.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,10 +5,10 @@ LL |     z: Box<dyn Is<'a>+'b+'c>,\n    |                          ^^\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/region-bounds-on-objects-and-type-parameters.rs:21:5\n+  --> $DIR/region-bounds-on-objects-and-type-parameters.rs:21:8\n    |\n LL |     z: Box<dyn Is<'a>+'b+'c>,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'b` as defined on the struct at 11:15\n   --> $DIR/region-bounds-on-objects-and-type-parameters.rs:11:15"}, {"sha": "1ddbf73a46372dc13dbc2c54a9f20a4fc6d8ca23", "filename": "src/test/ui/regions/regions-wf-trait-object.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fregions%2Fregions-wf-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fregions%2Fregions-wf-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-wf-trait-object.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,8 +1,8 @@\n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/regions-wf-trait-object.rs:7:5\n+  --> $DIR/regions-wf-trait-object.rs:7:8\n    |\n LL |     x: Box<dyn TheTrait<'a>+'b>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'b` as defined on the struct at 6:15\n   --> $DIR/regions-wf-trait-object.rs:6:15"}, {"sha": "13e7a59732db1562a16665b127c77a3cfc5ef9ef", "filename": "src/test/ui/resolve/issue-18252.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,7 @@ LL |     Variant { x: usize }\n    |     -------------------- `Foo::Variant` defined here\n ...\n LL |     let f = Foo::Variant(42);\n-   |             ^^^^^^^^^^^^ did you mean `Foo::Variant { /* fields */ }`?\n+   |             ^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `Foo::Variant { x: val }`\n \n error: aborting due to previous error\n "}, {"sha": "d1690d4eef7ef2fcb00b294fc4d362841564990f", "filename": "src/test/ui/resolve/issue-19452.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,13 +5,13 @@ LL |     Madoka { age: u32 }\n    |     ------------------- `Homura::Madoka` defined here\n ...\n LL |     let homura = Homura::Madoka;\n-   |                  ^^^^^^^^^^^^^^ did you mean `Homura::Madoka { /* fields */ }`?\n+   |                  ^^^^^^^^^^^^^^ help: use struct literal syntax instead: `Homura::Madoka { age: val }`\n \n error[E0423]: expected value, found struct variant `issue_19452_aux::Homura::Madoka`\n   --> $DIR/issue-19452.rs:13:18\n    |\n LL |     let homura = issue_19452_aux::Homura::Madoka;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ did you mean `issue_19452_aux::Homura::Madoka { /* fields */ }`?\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `issue_19452_aux::Homura::Madoka { /* fields */ }`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c9b9aeb45ba42c582911f9c89164cfb5d8f34f46", "filename": "src/test/ui/resolve/issue-39226.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -6,9 +6,15 @@ LL | struct Handle {}\n ...\n LL |         handle: Handle\n    |                 ^^^^^^\n-   |                 |\n-   |                 did you mean `Handle { /* fields */ }`?\n-   |                 help: a local variable with a similar name exists: `handle`\n+   |\n+help: a local variable with a similar name exists\n+   |\n+LL |         handle: handle\n+   |                 ^^^^^^\n+help: use struct literal syntax instead\n+   |\n+LL |         handle: Handle {}\n+   |                 ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4ed93ad3279adec5bb4ea680e90ed9ab29b84d6b", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,9 +5,11 @@ LL | fn foo(_x: K) {}\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn I + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn foo(_x: &K) {}\n+   |            ^\n \n error: aborting due to previous error\n "}, {"sha": "a118f94191df3647b132c610fb8487d812351e7f", "filename": "src/test/ui/resolve/issue-6702.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -7,7 +7,7 @@ LL | | }\n    | |_- `Monster` defined here\n ...\n LL |       let _m = Monster();\n-   |                ^^^^^^^ did you mean `Monster { /* fields */ }`?\n+   |                ^^^^^^^^^ help: use struct literal syntax instead: `Monster { damage: val }`\n \n error: aborting due to previous error\n "}, {"sha": "3904a00dde1dd5ead0d6271f70163c3e6020e3c8", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -44,7 +44,7 @@ LL | |             },\n    | |_____________- `Z::Struct` defined here\n ...\n LL |           let _: Z = Z::Struct;\n-   |                      ^^^^^^^^^ did you mean `Z::Struct { /* fields */ }`?\n+   |                      ^^^^^^^^^ help: use struct literal syntax instead: `Z::Struct { s: val }`\n \n error[E0423]: expected value, found enum `m::E`\n   --> $DIR/privacy-enum-ctor.rs:41:16\n@@ -83,7 +83,7 @@ LL | |         },\n    | |_________- `m::E::Struct` defined here\n ...\n LL |       let _: E = m::E::Struct;\n-   |                  ^^^^^^^^^^^^ did you mean `m::E::Struct { /* fields */ }`?\n+   |                  ^^^^^^^^^^^^ help: use struct literal syntax instead: `m::E::Struct { s: val }`\n \n error[E0423]: expected value, found enum `E`\n   --> $DIR/privacy-enum-ctor.rs:49:16\n@@ -115,7 +115,7 @@ LL | |         },\n    | |_________- `E::Struct` defined here\n ...\n LL |       let _: E = E::Struct;\n-   |                  ^^^^^^^^^ did you mean `E::Struct { /* fields */ }`?\n+   |                  ^^^^^^^^^ help: use struct literal syntax instead: `E::Struct { s: val }`\n \n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:57:12\n@@ -195,7 +195,7 @@ LL | |             },\n    | |_____________- `m::n::Z::Struct` defined here\n ...\n LL |       let _: Z = m::n::Z::Struct;\n-   |                  ^^^^^^^^^^^^^^^ did you mean `m::n::Z::Struct { /* fields */ }`?\n+   |                  ^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `m::n::Z::Struct { s: val }`\n \n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:68:12"}, {"sha": "a72f69cf1cd8d48a713069f3141e4d0602b684e3", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -25,7 +25,7 @@ LL | |     }\n    | |_____- `S2` defined here\n ...\n LL |       S2;\n-   |       ^^ did you mean `S2 { /* fields */ }`?\n+   |       ^^ help: use struct literal syntax instead: `S2 { s: val }`\n \n error[E0423]: expected value, found struct `xcrate::S`\n   --> $DIR/privacy-struct-ctor.rs:43:5"}, {"sha": "a449fac11930d8ce0571b2bace6738863aa20da3", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,10 +1,10 @@\n error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/dont-infer-static.rs:8:5\n+  --> $DIR/dont-infer-static.rs:8:10\n    |\n LL | struct Foo<U> {\n    |            - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     bar: Bar<U>\n-   |     ^^^^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n+   |          ^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "3da8725d88a0caa6c900fbbf7fd1a413bb577703", "filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -24,7 +24,6 @@ LL |     type U<'a>: PartialEq<&'a Self>;\n LL |     default type U<'a> = &'a T;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `T == T`\n    |\n-   = help: the trait `std::cmp::PartialEq` is not implemented for `T`\n    = note: required because of the requirements on the impl of `std::cmp::PartialEq` for `&'a T`\n help: consider further restricting this bound\n    |"}, {"sha": "52d3aefe125c03b6bd374a543283c33eae17eabc", "filename": "src/test/ui/str/str-array-assignment.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -19,14 +19,15 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/str-array-assignment.rs:7:7\n    |\n LL |   let v = s[..2];\n-   |       ^   ------ help: consider borrowing here: `&s[..2]`\n-   |       |\n-   |       doesn't have a size known at compile-time\n+   |       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: consider borrowing here\n+   |\n+LL |   let v = &s[..2];\n+   |           ^\n \n error[E0308]: mismatched types\n   --> $DIR/str-array-assignment.rs:9:17"}, {"sha": "7c834165e7f1c1c96abe76392e7ff059e7bb02b1", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -8,7 +8,6 @@ LL |     s[1..2] = bot();\n    |               ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn bot<T: ?Sized>() -> T { loop {} }\n@@ -21,7 +20,6 @@ LL |     s[1..2] = bot();\n    |     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error[E0277]: the type `str` cannot be indexed by `usize`"}, {"sha": "8dab8add80b8ab0b12dcd9428aacc4ad0b648cfd", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -80,7 +80,6 @@ LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because of the requirements on the impl of `Foo<'_, '_, u8>` for `str`\n \n error: aborting due to 5 previous errors"}, {"sha": "a40d5e4bf7ba13a2f7c21eb5001aff0cedc5a212", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -80,7 +80,6 @@ LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because of the requirements on the impl of `Foo<'_#0r, '_#1r, u8>` for `str`\n \n error: aborting due to 5 previous errors"}, {"sha": "f4c0d0f96c428af0922d047fb84ee5c1049b6422", "filename": "src/test/ui/suggestions/adt-param-with-implicit-sized-bound.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,16 +1,14 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/adt-param-with-implicit-sized-bound.rs:25:5\n+  --> $DIR/adt-param-with-implicit-sized-bound.rs:25:9\n    |\n LL | struct X<T>(T);\n    |          - required by this bound in `X`\n ...\n LL | struct Struct5<T: ?Sized>{\n    |                - this type parameter needs to be `std::marker::Sized`\n LL |     _t: X<T>,\n-   |     ^^^^^^^^ doesn't have a size known at compile-time\n+   |         ^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/adt-param-with-implicit-sized-bound.rs:18:10\n    |\n@@ -28,8 +26,6 @@ LL |     fn func1() -> Struct1<Self>;\n LL | struct Struct1<T>{\n    |                - required by this bound in `Struct1`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider further restricting `Self`\n    |\n LL |     fn func1() -> Struct1<Self> where Self: std::marker::Sized;\n@@ -48,8 +44,6 @@ LL |     fn func2<'a>() -> Struct2<'a, Self>;\n LL | struct Struct2<'a, T>{\n    |                    - required by this bound in `Struct2`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider further restricting `Self`\n    |\n LL |     fn func2<'a>() -> Struct2<'a, Self> where Self: std::marker::Sized;\n@@ -68,8 +62,6 @@ LL |     fn func3() -> Struct3<Self>;\n LL | struct Struct3<T>{\n    |                - required by this bound in `Struct3`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/adt-param-with-implicit-sized-bound.rs:14:16\n    |\n@@ -91,8 +83,6 @@ LL |     fn func4() -> Struct4<Self>;\n LL | struct Struct4<T>{\n    |                - required by this bound in `Struct4`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider further restricting `Self`\n    |\n LL |     fn func4() -> Struct4<Self> where Self: std::marker::Sized;"}, {"sha": "45309486db46ffaed203f1cc96af8407837c3aae", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -7,10 +7,16 @@ LL |     B { a: usize },\n    |     -------------- `E::B` defined here\n ...\n LL |     let _: E = E::B;\n-   |                ^^^-\n-   |                |  |\n-   |                |  help: a tuple variant with a similar name exists: `A`\n-   |                did you mean `E::B { /* fields */ }`?\n+   |                ^^^^\n+   |\n+help: a tuple variant with a similar name exists\n+   |\n+LL |     let _: E = E::A;\n+   |                   ^\n+help: use struct literal syntax instead\n+   |\n+LL |     let _: E = E::B { a: val };\n+   |                ^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:29:20"}, {"sha": "7f6f082d7a8d7ca9762e94a7b4a51aad1f743d61", "filename": "src/test/ui/suggestions/issue-61226.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,7 @@ LL | struct X {}\n    | ----------- `X` defined here\n LL | fn main() {\n LL |     vec![X]; //\u2026\n-   |          ^ did you mean `X { /* fields */ }`?\n+   |          ^ help: use struct literal syntax instead: `X {}`\n \n error: aborting due to previous error\n "}, {"sha": "2b7c29e20cd31092e670f09108329e26518b5394", "filename": "src/test/ui/suggestions/path-by-value.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -2,13 +2,15 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n   --> $DIR/path-by-value.rs:3:6\n    |\n LL | fn f(p: Path) { }\n-   |      ^ borrow the `Path` instead\n+   |      ^ doesn't have a size known at compile-time\n    |\n    = help: within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `std::path::Path`\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn f(p: &Path) { }\n+   |         ^\n \n error: aborting due to previous error\n "}, {"sha": "33af13d943f74d97d6fd393355c594eb0721b3b2", "filename": "src/test/ui/suggestions/restrict-type-argument.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -7,7 +7,6 @@ LL | fn is_send<T: Send>(val: T) {}\n LL |     is_send(val);\n    |             ^^^ `impl Sync` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `impl Sync`\n help: consider further restricting this bound\n    |\n LL | fn use_impl_sync(val: impl Sync + std::marker::Send) {\n@@ -22,7 +21,6 @@ LL | fn is_send<T: Send>(val: T) {}\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `S`\n help: consider further restricting this bound\n    |\n LL | fn use_where<S>(val: S) where S: Sync + std::marker::Send {\n@@ -37,7 +35,6 @@ LL | fn is_send<T: Send>(val: T) {}\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `S`\n help: consider further restricting this bound\n    |\n LL | fn use_bound<S: Sync + std::marker::Send>(val: S) {\n@@ -52,7 +49,6 @@ LL | fn is_send<T: Send>(val: T) {}\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `S`\n help: consider further restricting this bound\n    |\n LL |     Sync + std::marker::Send\n@@ -67,7 +63,6 @@ LL | fn is_send<T: Send>(val: T) {}\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `S`\n help: consider further restricting this bound\n    |\n LL | fn use_bound_and_where<S: Sync>(val: S) where S: std::fmt::Debug + std::marker::Send {\n@@ -82,7 +77,6 @@ LL | fn is_send<T: Send>(val: T) {}\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `S`\n help: consider restricting type parameter `S`\n    |\n LL | fn use_unbound<S: std::marker::Send>(val: S) {"}, {"sha": "324316ceaf6badf19550dcb900a6355378e1fdd9", "filename": "src/test/ui/traits/cycle-cache-err-60010.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,8 +1,8 @@\n error[E0275]: overflow evaluating the requirement `RootDatabase: SourceDatabase`\n-  --> $DIR/cycle-cache-err-60010.rs:27:5\n+  --> $DIR/cycle-cache-err-60010.rs:27:13\n    |\n LL |     _parse: <ParseQuery as Query<RootDatabase>>::Data,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: required because of the requirements on the impl of `Query<RootDatabase>` for `ParseQuery`\n "}, {"sha": "daca91abff8433fc9573cf8b44951a1ac0896e1c", "filename": "src/test/ui/traits/trait-bounds-not-on-bare-trait.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -13,9 +13,11 @@ LL | fn foo(_x: Foo + Send) {\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Foo + std::marker::Send + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn foo(_x: &Foo + Send) {\n+   |            ^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "d7549835a09051c5e433291322160acc13ef62eb", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -13,13 +13,13 @@ LL | impl<T: Trait> Foo<T> {\n    |       ^^^^^^^\n \n error[E0277]: the trait bound `isize: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:19:5\n+  --> $DIR/trait-bounds-on-structs-and-enums.rs:19:8\n    |\n LL | struct Foo<T:Trait> {\n    |              ----- required by this bound in `Foo`\n ...\n LL |     a: Foo<isize>,\n-   |     ^^^^^^^^^^^^^ the trait `Trait` is not implemented for `isize`\n+   |        ^^^^^^^^^^ the trait `Trait` is not implemented for `isize`\n \n error[E0277]: the trait bound `usize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:23:10\n@@ -31,13 +31,13 @@ LL |     Quux(Bar<usize>),\n    |          ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`\n \n error[E0277]: the trait bound `U: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:27:5\n+  --> $DIR/trait-bounds-on-structs-and-enums.rs:27:8\n    |\n LL | struct Foo<T:Trait> {\n    |              ----- required by this bound in `Foo`\n ...\n LL |     b: Foo<U>,\n-   |     ^^^^^^^^^ the trait `Trait` is not implemented for `U`\n+   |        ^^^^^^ the trait `Trait` is not implemented for `U`\n    |\n help: consider restricting type parameter `U`\n    |\n@@ -68,13 +68,13 @@ LL |     Foo<i32>,\n    |     ^^^^^^^^ the trait `Trait` is not implemented for `i32`\n \n error[E0277]: the trait bound `u8: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:39:22\n+  --> $DIR/trait-bounds-on-structs-and-enums.rs:39:29\n    |\n LL | enum Bar<T:Trait> {\n    |            ----- required by this bound in `Bar`\n ...\n LL |     DictionaryLike { field: Bar<u8> },\n-   |                      ^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `u8`\n+   |                             ^^^^^^^ the trait `Trait` is not implemented for `u8`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "86a313baa5c385ad1fd47b4bf4c7ddd4a5767f86", "filename": "src/test/ui/traits/trait-suggest-where-clause.stderr", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -11,9 +11,6 @@ LL |     mem::size_of::<U>();\n    |\n LL | pub const fn size_of<T>() -> usize {\n    |                      - required by this bound in `std::mem::size_of`\n-   |\n-   = help: the trait `std::marker::Sized` is not implemented for `U`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `U` cannot be known at compilation time\n   --> $DIR/trait-suggest-where-clause.rs:10:5\n@@ -29,8 +26,6 @@ LL |     mem::size_of::<Misc<U>>();\n LL | pub const fn size_of<T>() -> usize {\n    |                      - required by this bound in `std::mem::size_of`\n    |\n-   = help: within `Misc<U>`, the trait `std::marker::Sized` is not implemented for `U`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Misc<U>`\n \n error[E0277]: the trait bound `u64: std::convert::From<T>` is not satisfied\n@@ -69,7 +64,6 @@ LL | pub const fn size_of<T>() -> usize {\n    |                      - required by this bound in `std::mem::size_of`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[T]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n   --> $DIR/trait-suggest-where-clause.rs:31:5\n@@ -83,7 +77,6 @@ LL | pub const fn size_of<T>() -> usize {\n    |                      - required by this bound in `std::mem::size_of`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[&U]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to 7 previous errors\n "}, {"sha": "4f4695612de0b9dea8c73400ed097b1a1de3df77", "filename": "src/test/ui/trivial-bounds/trivial-bounds-leak.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL | fn cant_return_str() -> str {\n    |                         ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the return type of a function must have a statically known size\n \n error[E0599]: no method named `test` found for type `i32` in the current scope"}, {"sha": "28e30cbdd9d967c8782cc09adbd547de6fd338ab", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -19,7 +19,6 @@ LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n LL |     5u32\n    |     ---- this returned value is of type `u32`\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `U`\n    = note: the return type of a function must have a statically known size\n help: consider restricting type parameter `U`\n    |\n@@ -35,7 +34,6 @@ LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n LL |     5u32\n    |     ---- this returned value is of type `u32`\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `V`\n    = note: the return type of a function must have a statically known size\n help: consider restricting type parameter `V`\n    |"}, {"sha": "7398b48a238d1c7c31022c78a39a13fa2f0a3fb4", "filename": "src/test/ui/typeck/typeck-default-trait-impl-send-param.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -7,7 +7,6 @@ LL |     is_send::<T>()\n LL | fn is_send<T:Send>() {\n    |              ---- required by this bound in `is_send`\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `T`\n help: consider restricting type parameter `T`\n    |\n LL | fn foo<T: std::marker::Send>() {"}, {"sha": "b916bbe8ad10a3deedaf7a5e30f613d613d856e3", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,26 +1,40 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/union-sized-field.rs:4:5\n+  --> $DIR/union-sized-field.rs:4:12\n    |\n LL | union Foo<T: ?Sized> {\n    |           - this type parameter needs to be `std::marker::Sized`\n LL |     value: T,\n-   |     ^^^^^^^^ doesn't have a size known at compile-time\n+   |            ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of a union may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     value: &T,\n+   |            ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     value: Box<T>,\n+   |            ^^^^ ^\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/union-sized-field.rs:9:5\n+  --> $DIR/union-sized-field.rs:9:12\n    |\n LL | struct Foo2<T: ?Sized> {\n    |             - this type parameter needs to be `std::marker::Sized`\n LL |     value: T,\n-   |     ^^^^^^^^ doesn't have a size known at compile-time\n+   |            ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     value: &T,\n+   |            ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     value: Box<T>,\n+   |            ^^^^ ^\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/union-sized-field.rs:15:11\n@@ -30,9 +44,16 @@ LL | enum Foo3<T: ?Sized> {\n LL |     Value(T),\n    |           ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     Value(&T),\n+   |           ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     Value(Box<T>),\n+   |           ^^^^ ^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f62a3b4d14b974c3c417fe22a54122c5f9ca4b75", "filename": "src/test/ui/union/union-unsized.stderr", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,22 +1,38 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/union-unsized.rs:4:5\n+  --> $DIR/union-unsized.rs:4:8\n    |\n LL |     a: str,\n-   |     ^^^^^^ doesn't have a size known at compile-time\n+   |        ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of a union may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     a: &str,\n+   |        ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     a: Box<str>,\n+   |        ^^^^   ^\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/union-unsized.rs:12:5\n+  --> $DIR/union-unsized.rs:12:8\n    |\n LL |     b: str,\n-   |     ^^^^^^ doesn't have a size known at compile-time\n+   |        ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of a union may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     b: &str,\n+   |        ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     b: Box<str>,\n+   |        ^^^^   ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2ed35dc0e2c12202403cccaecbab212b7814e00b", "filename": "src/test/ui/unsized-locals/issue-30276-feature-flagged.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     let _x: fn(_) -> Test = Test;\n    |                             ^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Test`, the trait `std::marker::Sized` is not implemented for `[i32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Test`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "461efcf3dbf292d5c6014fc6b36eaff73aad8bee", "filename": "src/test/ui/unsized-locals/issue-30276.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     let _x: fn(_) -> Test = Test;\n    |                             ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "04a8de1b5dc5b4ccfc9fdacc528f8f82a02923d1", "filename": "src/test/ui/unsized-locals/issue-50940-with-feature.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     A as fn(str) -> A<str>;\n    |     ^ doesn't have a size known at compile-time\n    |\n    = help: within `main::A<str>`, the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `main::A<str>`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "8e5f753082734ee55df4a3293c7c703a62de06da", "filename": "src/test/ui/unsized-locals/issue-50940.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     A as fn(str) -> A<str>;\n    |     ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "0a9b43dac334494c4ef9cee3a87d20cf018f59b4", "filename": "src/test/ui/unsized-locals/unsized-exprs.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     udrop::<(i32, [u8])>((42, *foo()));\n    |                          ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `({integer}, [u8])`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `({integer}, [u8])`\n    = note: tuples must have a statically known size to be initialized\n \n@@ -16,7 +15,6 @@ LL |     udrop::<A<[u8]>>(A { 0: *foo() });\n    |                      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `A<[u8]>`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `A<[u8]>`\n    = note: structs must have a statically known size to be initialized\n \n@@ -27,7 +25,6 @@ LL |     udrop::<A<[u8]>>(A(*foo()));\n    |                      ^ doesn't have a size known at compile-time\n    |\n    = help: within `A<[u8]>`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `A<[u8]>`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "11435ec0353bc68ae6b35a3374c2cdf6cd9d1255", "filename": "src/test/ui/unsized-locals/unsized-exprs3.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     udrop as fn([u8]);\n    |     ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "19978ae24cacb75094e17314ebb342ff3f91ab4c", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -7,9 +7,6 @@ LL | fn foo<T: ?Sized>() { bar::<T>() }\n    |        -                    ^ doesn't have a size known at compile-time\n    |        |\n    |        this type parameter needs to be `std::marker::Sized`\n-   |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "fdfdb9b4e2a5b636be8a0c62a44aac7d0adfa57b", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -9,8 +9,6 @@ LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `U` if it were used through indirection like `&U` or `Box<U>`\n   --> $DIR/unsized-enum.rs:4:10\n    |"}, {"sha": "988c310167682affcebaabbc6c10927aaabdcda3", "filename": "src/test/ui/unsized/unsized-enum2.stderr", "status": "modified", "additions": 200, "deletions": 44, "changes": 244, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -7,22 +7,36 @@ LL |     // parameter\n LL |     VA(W),\n    |        ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `W`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VA(&W),\n+   |        ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VA(Box<W>),\n+   |        ^^^^ ^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:25:8\n+  --> $DIR/unsized-enum2.rs:25:11\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n    |                   - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     VB{x: X},\n-   |        ^^^^ doesn't have a size known at compile-time\n+   |           ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VB{x: &X},\n+   |           ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VB{x: Box<X>},\n+   |           ^^^^ ^\n \n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:27:15\n@@ -33,22 +47,36 @@ LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n LL |     VC(isize, Y),\n    |               ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Y`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VC(isize, &Y),\n+   |               ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VC(isize, Box<Y>),\n+   |               ^^^^ ^\n \n error[E0277]: the size for values of type `Z` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:29:18\n+  --> $DIR/unsized-enum2.rs:29:21\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n    |                                         - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     VD{u: isize, x: Z},\n-   |                  ^^^^ doesn't have a size known at compile-time\n+   |                     ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Z`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VD{u: isize, x: &Z},\n+   |                     ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VD{u: isize, x: Box<Z>},\n+   |                     ^^^^ ^\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:33:8\n@@ -57,18 +85,34 @@ LL |     VE([u8]),\n    |        ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VE(&[u8]),\n+   |        ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VE(Box<[u8]>),\n+   |        ^^^^    ^\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:35:8\n+  --> $DIR/unsized-enum2.rs:35:11\n    |\n LL |     VF{x: str},\n-   |        ^^^^^^ doesn't have a size known at compile-time\n+   |           ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VF{x: &str},\n+   |           ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VF{x: Box<str>},\n+   |           ^^^^   ^\n \n error[E0277]: the size for values of type `[f32]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:37:15\n@@ -77,18 +121,34 @@ LL |     VG(isize, [f32]),\n    |               ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[f32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VG(isize, &[f32]),\n+   |               ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VG(isize, Box<[f32]>),\n+   |               ^^^^     ^\n \n error[E0277]: the size for values of type `[u32]` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:39:18\n+  --> $DIR/unsized-enum2.rs:39:21\n    |\n LL |     VH{u: isize, x: [u32]},\n-   |                  ^^^^^^^^ doesn't have a size known at compile-time\n+   |                     ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VH{u: isize, x: &[u32]},\n+   |                     ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VH{u: isize, x: Box<[u32]>},\n+   |                     ^^^^     ^\n \n error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:53:8\n@@ -97,18 +157,34 @@ LL |     VM(dyn Foo),\n    |        ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Foo + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VM(&dyn Foo),\n+   |        ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VM(Box<dyn Foo>),\n+   |        ^^^^       ^\n \n error[E0277]: the size for values of type `(dyn Bar + 'static)` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:55:8\n+  --> $DIR/unsized-enum2.rs:55:11\n    |\n LL |     VN{x: dyn Bar},\n-   |        ^^^^^^^^^^ doesn't have a size known at compile-time\n+   |           ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Bar + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VN{x: &dyn Bar},\n+   |           ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VN{x: Box<dyn Bar>},\n+   |           ^^^^       ^\n \n error[E0277]: the size for values of type `(dyn FooBar + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:57:15\n@@ -117,18 +193,34 @@ LL |     VO(isize, dyn FooBar),\n    |               ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn FooBar + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VO(isize, &dyn FooBar),\n+   |               ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VO(isize, Box<dyn FooBar>),\n+   |               ^^^^          ^\n \n error[E0277]: the size for values of type `(dyn BarFoo + 'static)` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:59:18\n+  --> $DIR/unsized-enum2.rs:59:21\n    |\n LL |     VP{u: isize, x: dyn BarFoo},\n-   |                  ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                     ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn BarFoo + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VP{u: isize, x: &dyn BarFoo},\n+   |                     ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VP{u: isize, x: Box<dyn BarFoo>},\n+   |                     ^^^^          ^\n \n error[E0277]: the size for values of type `[i8]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:63:8\n@@ -137,18 +229,34 @@ LL |     VQ(<&'static [i8] as Deref>::Target),\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VQ(&<&'static [i8] as Deref>::Target),\n+   |        ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VQ(Box<<&'static [i8] as Deref>::Target>),\n+   |        ^^^^                                ^\n \n error[E0277]: the size for values of type `[char]` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:65:8\n+  --> $DIR/unsized-enum2.rs:65:11\n    |\n LL |     VR{x: <&'static [char] as Deref>::Target},\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[char]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VR{x: &<&'static [char] as Deref>::Target},\n+   |           ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VR{x: Box<<&'static [char] as Deref>::Target>},\n+   |           ^^^^                                  ^\n \n error[E0277]: the size for values of type `[f64]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:67:15\n@@ -157,18 +265,34 @@ LL |     VS(isize, <&'static [f64] as Deref>::Target),\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[f64]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VS(isize, &<&'static [f64] as Deref>::Target),\n+   |               ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VS(isize, Box<<&'static [f64] as Deref>::Target>),\n+   |               ^^^^                                 ^\n \n error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:69:18\n+  --> $DIR/unsized-enum2.rs:69:21\n    |\n LL |     VT{u: isize, x: <&'static [i32] as Deref>::Target},\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VT{u: isize, x: &<&'static [i32] as Deref>::Target},\n+   |                     ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VT{u: isize, x: Box<<&'static [i32] as Deref>::Target>},\n+   |                     ^^^^                                 ^\n \n error[E0277]: the size for values of type `(dyn PathHelper1 + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:43:8\n@@ -177,20 +301,36 @@ LL |     VI(Path1),\n    |        ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path1`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper1 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path1`\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VI(&Path1),\n+   |        ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VI(Box<Path1>),\n+   |        ^^^^     ^\n \n error[E0277]: the size for values of type `(dyn PathHelper2 + 'static)` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:45:8\n+  --> $DIR/unsized-enum2.rs:45:11\n    |\n LL |     VJ{x: Path2},\n-   |        ^^^^^^^^ doesn't have a size known at compile-time\n+   |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path2`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper2 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path2`\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VJ{x: &Path2},\n+   |           ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VJ{x: Box<Path2>},\n+   |           ^^^^     ^\n \n error[E0277]: the size for values of type `(dyn PathHelper3 + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:47:15\n@@ -199,20 +339,36 @@ LL |     VK(isize, Path3),\n    |               ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path3`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper3 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path3`\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VK(isize, &Path3),\n+   |               ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VK(isize, Box<Path3>),\n+   |               ^^^^     ^\n \n error[E0277]: the size for values of type `(dyn PathHelper4 + 'static)` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:49:18\n+  --> $DIR/unsized-enum2.rs:49:21\n    |\n LL |     VL{u: isize, x: Path4},\n-   |                  ^^^^^^^^ doesn't have a size known at compile-time\n+   |                     ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path4`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper4 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path4`\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VL{u: isize, x: &Path4},\n+   |                     ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     VL{u: isize, x: Box<Path4>},\n+   |                     ^^^^     ^\n \n error: aborting due to 20 previous errors\n "}, {"sha": "6b54db7148a749cb81b5f298a20de9bb35f53c42", "filename": "src/test/ui/unsized/unsized-fn-param.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -5,7 +5,6 @@ LL |     foo11(\"bar\", &\"baz\");\n    |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn std::convert::AsRef<std::path::Path>`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -15,7 +14,6 @@ LL |     foo12(&\"bar\", \"baz\");\n    |                   ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn std::convert::AsRef<std::path::Path>`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -25,7 +23,6 @@ LL |     foo21(\"bar\", &\"baz\");\n    |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn std::convert::AsRef<str>`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -35,7 +32,6 @@ LL |     foo22(&\"bar\", \"baz\");\n    |                   ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn std::convert::AsRef<str>`\n \n error: aborting due to 4 previous errors"}, {"sha": "50b54593f3aa149460594ac2bb50cfb207e10d95", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -9,8 +9,6 @@ LL | impl<X: ?Sized> S5<X> {\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `Y` if it were used through indirection like `&Y` or `Box<Y>`\n   --> $DIR/unsized-inherent-impl-self-type.rs:5:11\n    |"}, {"sha": "0c8529bf1a9af43148872913ca3876254ebf5e74", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -9,8 +9,6 @@ LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/unsized-struct.rs:4:12\n    |\n@@ -30,8 +28,6 @@ LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: within `Bar<T>`, the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Bar<T>`\n \n error: aborting due to 2 previous errors"}, {"sha": "4514208a90dc9a5cfe0955dc0c94fc73193c1485", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -9,8 +9,6 @@ LL | impl<X: ?Sized> T3<X> for S5<X> {\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `Y` if it were used through indirection like `&Y` or `Box<Y>`\n   --> $DIR/unsized-trait-impl-self-type.rs:8:11\n    |"}, {"sha": "f48d4ef9f14617b98ffb8ef017c49dbf9f5516b6", "filename": "src/test/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -9,8 +9,6 @@ LL | impl<X: ?Sized> T2<X> for S4<X> {\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait T2<Z: ?Sized> {"}, {"sha": "ddddae4eaba57cf51d1094b02b3e0d5066210125", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -9,8 +9,6 @@ LL |     f2::<X>(x);\n LL | fn f2<X>(x: &X) {\n    |       - required by this bound in `f2`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn f2<X: ?Sized>(x: &X) {\n@@ -27,8 +25,6 @@ LL |     f4::<X>(x);\n LL | fn f4<X: T>(x: &X) {\n    |       - required by this bound in `f4`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn f4<X: T + ?Sized>(x: &X) {\n@@ -45,8 +41,6 @@ LL | fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n LL |     f5(x1);\n    |        ^^ doesn't have a size known at compile-time\n    |\n-   = help: within `S<X>`, the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `S<X>`\n help: consider relaxing the implicit `Sized` restriction\n    |\n@@ -61,8 +55,6 @@ LL | fn f9<X: ?Sized>(x1: Box<S<X>>) {\n LL |     f5(&(*x1, 34));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `S<X>`, the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `S<X>`\n    = note: only the last element of a tuple may have a dynamically sized type\n \n@@ -74,8 +66,6 @@ LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n LL |     f5(&(32, *x1));\n    |         ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `({integer}, S<X>)`, the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `S<X>`\n    = note: required because it appears within the type `({integer}, S<X>)`\n    = note: tuples must have a statically known size to be initialized\n@@ -91,8 +81,6 @@ LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n LL |     f5(&(32, *x1));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `({integer}, S<X>)`, the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `S<X>`\n    = note: required because it appears within the type `({integer}, S<X>)`\n help: consider relaxing the implicit `Sized` restriction"}, {"sha": "3fd0b429becc186fd39609cdd341a58f7fa7ffbe", "filename": "src/test/ui/unsized5.stderr", "status": "modified", "additions": 64, "deletions": 20, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized5.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,47 +1,77 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized5.rs:4:5\n+  --> $DIR/unsized5.rs:4:9\n    |\n LL | struct S1<X: ?Sized> {\n    |           - this type parameter needs to be `std::marker::Sized`\n LL |     f1: X,\n-   |     ^^^^^ doesn't have a size known at compile-time\n+   |         ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     f1: &X,\n+   |         ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     f1: Box<X>,\n+   |         ^^^^ ^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized5.rs:10:5\n+  --> $DIR/unsized5.rs:10:8\n    |\n LL | struct S2<X: ?Sized> {\n    |           - this type parameter needs to be `std::marker::Sized`\n LL |     f: isize,\n LL |     g: X,\n-   |     ^^^^ doesn't have a size known at compile-time\n+   |        ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     g: &X,\n+   |        ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     g: Box<X>,\n+   |        ^^^^ ^\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/unsized5.rs:15:5\n+  --> $DIR/unsized5.rs:15:8\n    |\n LL |     f: str,\n-   |     ^^^^^^ doesn't have a size known at compile-time\n+   |        ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     f: &str,\n+   |        ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     f: Box<str>,\n+   |        ^^^^   ^\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/unsized5.rs:20:5\n+  --> $DIR/unsized5.rs:20:8\n    |\n LL |     f: [u8],\n-   |     ^^^^^^^ doesn't have a size known at compile-time\n+   |        ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     f: &[u8],\n+   |        ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     f: Box<[u8]>,\n+   |        ^^^^    ^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized5.rs:25:8\n@@ -51,21 +81,35 @@ LL | enum E<X: ?Sized> {\n LL |     V1(X, isize),\n    |        ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     V1(&X, isize),\n+   |        ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     V1(Box<X>, isize),\n+   |        ^^^^ ^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized5.rs:29:8\n+  --> $DIR/unsized5.rs:29:12\n    |\n LL | enum F<X: ?Sized> {\n    |        - this type parameter needs to be `std::marker::Sized`\n LL |     V2{f1: X, f: isize},\n-   |        ^^^^^ doesn't have a size known at compile-time\n+   |            ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     V2{f1: &X, f: isize},\n+   |            ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     V2{f1: Box<X>, f: isize},\n+   |            ^^^^ ^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "f045bfe2444bc8490d32292336a78a2337d879a7", "filename": "src/test/ui/unsized6.stderr", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized6.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -7,8 +7,6 @@ LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n LL |     let y: Y;\n    |         ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Y`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -21,8 +19,6 @@ LL |     let _: W; // <-- this is OK, no bindings created, no initializer.\n LL |     let _: (isize, (X, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `Z` cannot be known at compilation time\n@@ -34,8 +30,6 @@ LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n LL |     let y: (isize, (Z, usize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Z`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n@@ -46,8 +40,6 @@ LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n LL |     let y: X;\n    |         ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -60,8 +52,6 @@ LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n LL |     let y: (isize, (Y, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Y`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n@@ -72,8 +62,6 @@ LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -86,8 +74,6 @@ LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -100,8 +86,6 @@ LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -113,8 +97,6 @@ LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -127,8 +109,6 @@ LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -141,8 +121,6 @@ LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -154,10 +132,11 @@ LL | fn g1<X: ?Sized>(x: X) {}\n    |       |\n    |       this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn g1<X: ?Sized>(x: &X) {}\n+   |                     ^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:40:22\n@@ -167,10 +146,11 @@ LL | fn g2<X: ?Sized + T>(x: X) {}\n    |       |\n    |       this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn g2<X: ?Sized + T>(x: &X) {}\n+   |                         ^\n \n error: aborting due to 13 previous errors\n "}, {"sha": "7dbddd4ed24430579ccc44e484b859a91482cb3a", "filename": "src/test/ui/unsized7.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized7.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -9,8 +9,6 @@ LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait T1<Z: T + ?Sized> {"}, {"sha": "fedec1909fd3374e38132e42dd4c26d6ea5dabd5", "filename": "src/test/ui/wf/wf-array-elem-sized.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,11 +1,10 @@\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/wf-array-elem-sized.rs:7:5\n+  --> $DIR/wf-array-elem-sized.rs:7:10\n    |\n LL |     foo: [[u8]],\n-   |     ^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |          ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: slice and array elements must have `Sized` type\n \n error: aborting due to previous error"}, {"sha": "1eb7010c77a79988e88589ad0f93444f90ec3eb4", "filename": "src/test/ui/wf/wf-enum-fields-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-enum-fields-struct-variant.rs:13:9\n+  --> $DIR/wf-enum-fields-struct-variant.rs:13:12\n    |\n LL | struct IsCopy<T:Copy> {\n    |                 ---- required by this bound in `IsCopy`\n ...\n LL |         f: IsCopy<A>\n-   |         ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n+   |            ^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n    |\n help: consider restricting type parameter `A`\n    |"}, {"sha": "938336d3ace76f769d954888bfcb70395c95002c", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -22,7 +22,6 @@ LL | struct Vec<T> {\n    |            - required by this bound in `Vec`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::marker::Copy + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/wf-fn-where-clause.rs:16:12\n    |"}, {"sha": "212c61e1e5e07336f10cd5dac645d4c0923aac78", "filename": "src/test/ui/wf/wf-in-fn-type-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-in-fn-type-arg.rs:9:5\n+  --> $DIR/wf-in-fn-type-arg.rs:9:8\n    |\n LL | struct MustBeCopy<T:Copy> {\n    |                     ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: fn(MustBeCopy<T>)\n-   |     ^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |        ^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "3fb05fe81763bd4f5da0ec4516bd5e1036d7a231", "filename": "src/test/ui/wf/wf-in-fn-type-ret.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-in-fn-type-ret.rs:9:5\n+  --> $DIR/wf-in-fn-type-ret.rs:9:8\n    |\n LL | struct MustBeCopy<T:Copy> {\n    |                     ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: fn() -> MustBeCopy<T>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |        ^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "44cacf4ef4dfe5d75fadd5041c0f93ed50af7178", "filename": "src/test/ui/wf/wf-in-fn-type-static.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,20 +1,20 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/wf-in-fn-type-static.rs:13:5\n+  --> $DIR/wf-in-fn-type-static.rs:13:8\n    |\n LL | struct Foo<T> {\n    |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // needs T: 'static\n LL |     x: fn() -> &'static T\n-   |     ^^^^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n+   |        ^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/wf-in-fn-type-static.rs:18:5\n+  --> $DIR/wf-in-fn-type-static.rs:18:8\n    |\n LL | struct Bar<T> {\n    |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // needs T: Copy\n LL |     x: fn(&'static T)\n-   |     ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n+   |        ^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c50a6bb6e4d878939e0c963e3a3306dcf5d556c6", "filename": "src/test/ui/wf/wf-in-obj-type-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,11 +1,11 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/wf-in-obj-type-static.rs:14:5\n+  --> $DIR/wf-in-obj-type-static.rs:14:8\n    |\n LL | struct Foo<T> {\n    |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // needs T: 'static\n LL |     x: dyn Object<&'static T>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n+   |        ^^^^^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n \n error: aborting due to previous error\n "}, {"sha": "129f9484df29bef1993cfcec02bf9311fed5f650", "filename": "src/test/ui/wf/wf-in-obj-type-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-in-obj-type-trait.rs:11:5\n+  --> $DIR/wf-in-obj-type-trait.rs:11:8\n    |\n LL | struct MustBeCopy<T:Copy> {\n    |                     ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: dyn Object<MustBeCopy<T>>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "d7d0b7a0820a8739a344e97e126c8971e972bcea", "filename": "src/test/ui/wf/wf-struct-field.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-struct-field.rs:12:5\n+  --> $DIR/wf-struct-field.rs:12:11\n    |\n LL | struct IsCopy<T:Copy> {\n    |                 ---- required by this bound in `IsCopy`\n ...\n LL |     data: IsCopy<A>\n-   |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n+   |           ^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n    |\n help: consider restricting type parameter `A`\n    |"}, {"sha": "813d5d4fdb12b62c24b271fa6457c6d15865f498", "filename": "src/test/ui/xcrate/xcrate-unit-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct.stderr?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -2,7 +2,7 @@ error[E0423]: expected value, found struct `xcrate_unit_struct::StructWithFields\n   --> $DIR/xcrate-unit-struct.rs:9:13\n    |\n LL |     let _ = xcrate_unit_struct::StructWithFields;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ did you mean `xcrate_unit_struct::StructWithFields { /* fields */ }`?\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `xcrate_unit_struct::StructWithFields { foo: val }`\n \n error: aborting due to previous error\n "}, {"sha": "43cf77395cad5b79887b20b7cf19d418bbd703a9", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=23744c84d9c0f8e4e870edb983f1ad6d33449c34", "patch": "@@ -1 +1 @@\n-Subproject commit 4f74d9b2a771c58b7ef4906b2668afd075bc8081\n+Subproject commit 43cf77395cad5b79887b20b7cf19d418bbd703a9"}]}