{"sha": "f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NjczYTRlN2NjZmQ1ZjVjOGRlMDdlMjQ3MzViMWU3MzBhYWZmYjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-27T12:32:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-27T12:32:18Z"}, "message": "Rollup merge of #58627 - euclio:rustdoc-pass-order, r=QuietMisdreavus\n\nrustdoc: move collapse and unindent docs passes earlier\n\nMoves these passes as early as possible so later passes will see the same markdown that is passed to the test collector.\n\nFixes #58473, and a similar issue with the private-doc-tests lint.\n\nr? @QuietMisdreavus", "tree": {"sha": "017123984059d5d0ffa88f2f51246a3c7acaeddd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/017123984059d5d0ffa88f2f51246a3c7acaeddd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcdoNSCRBK7hj4Ov3rIwAAdHIIAIV8bTYsqLGXaFbkElCn+TMd\nKdok7npYpX2gAxgqYLfkx42FdwgYqDhaTZgatsSN9lEQ1xwrcCSsYgV/BQCVudPm\nmWU4gYeHio451YO50eB7WyJo3xrGoy0MMVzar8HD/S9nt1t/F/ka0UZWqbBqE1ma\nZQy0trejAm9G3OGeBgU3LQ8Pq8E/JjS8LTVTQkXLHVZbIUVpPU8IxcytJt10RfyI\nZIfe7N33JaI0foJIK2QuGY5WS/dsEECRERPpVSaT2Q4DxpRbPOfF8DOOHe2ZhGe6\nHZUBaurK7+L408w3/3np5OAz6wPHcid0ISI+aohK6+yl1G2VLHNVCefdAH0rRYU=\n=/IlM\n-----END PGP SIGNATURE-----\n", "payload": "tree 017123984059d5d0ffa88f2f51246a3c7acaeddd\nparent 2f58c2cfc0ca7b10ebf89defeaef3417eb800110\nparent 1536852b428b56a13a3026354db72e0b83c83652\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1551270738 +0100\ncommitter GitHub <noreply@github.com> 1551270738 +0100\n\nRollup merge of #58627 - euclio:rustdoc-pass-order, r=QuietMisdreavus\n\nrustdoc: move collapse and unindent docs passes earlier\n\nMoves these passes as early as possible so later passes will see the same markdown that is passed to the test collector.\n\nFixes #58473, and a similar issue with the private-doc-tests lint.\n\nr? @QuietMisdreavus\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "html_url": "https://github.com/rust-lang/rust/commit/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f58c2cfc0ca7b10ebf89defeaef3417eb800110", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f58c2cfc0ca7b10ebf89defeaef3417eb800110", "html_url": "https://github.com/rust-lang/rust/commit/2f58c2cfc0ca7b10ebf89defeaef3417eb800110"}, {"sha": "1536852b428b56a13a3026354db72e0b83c83652", "url": "https://api.github.com/repos/rust-lang/rust/commits/1536852b428b56a13a3026354db72e0b83c83652", "html_url": "https://github.com/rust-lang/rust/commit/1536852b428b56a13a3026354db72e0b83c83652"}], "stats": {"total": 258, "additions": 106, "deletions": 152}, "files": [{"sha": "b1c53ea92b300b6c1ee7af855b38fde739dd0bad", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "patch": "@@ -214,7 +214,7 @@ impl Options {\n         if matches.opt_strs(\"passes\") == [\"list\"] {\n             println!(\"Available passes for running rustdoc:\");\n             for pass in passes::PASSES {\n-                println!(\"{:>20} - {}\", pass.name(), pass.description());\n+                println!(\"{:>20} - {}\", pass.name, pass.description);\n             }\n             println!(\"\\nDefault passes for rustdoc:\");\n             for &name in passes::DEFAULT_PASSES {"}, {"sha": "4dce4e86cc449e31739f1ee4ae5d89662e968908", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "patch": "@@ -603,10 +603,12 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 passes::defaults(default_passes).iter().map(|p| p.to_string()).collect();\n             passes.extend(manual_passes);\n \n+            info!(\"Executing passes\");\n+\n             for pass in &passes {\n-                // the \"unknown pass\" error will be reported when late passes are run\n-                if let Some(pass) = passes::find_pass(pass).and_then(|p| p.early_fn()) {\n-                    krate = pass(krate, &ctxt);\n+                match passes::find_pass(pass).map(|p| p.pass) {\n+                    Some(pass) => krate = pass(krate, &ctxt),\n+                    None => error!(\"unknown pass {}, skipping\", *pass),\n                 }\n             }\n "}, {"sha": "39e504951d1c6dbefb0fa29c90967b1720c66179", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "patch": "@@ -441,28 +441,6 @@ where R: 'static + Send,\n \n         krate.version = crate_version;\n \n-        info!(\"Executing passes\");\n-\n-        for pass in &passes {\n-            // determine if we know about this pass\n-            let pass = match passes::find_pass(pass) {\n-                Some(pass) => if let Some(pass) = pass.late_fn() {\n-                    pass\n-                } else {\n-                    // not a late pass, but still valid so don't report the error\n-                    continue\n-                }\n-                None => {\n-                    error!(\"unknown pass {}, skipping\", *pass);\n-\n-                    continue\n-                },\n-            };\n-\n-            // run it\n-            krate = pass(krate);\n-        }\n-\n         tx.send(f(Output {\n             krate: krate,\n             renderinfo: renderinfo,"}, {"sha": "88d9c87c5289892df082e82b9789430427eeec11", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "patch": "@@ -10,9 +10,11 @@ use crate::fold::DocFolder;\n use crate::html::markdown::{self, RustCodeBlock};\n use crate::passes::Pass;\n \n-pub const CHECK_CODE_BLOCK_SYNTAX: Pass =\n-    Pass::early(\"check-code-block-syntax\", check_code_block_syntax,\n-                \"validates syntax inside Rust code blocks\");\n+pub const CHECK_CODE_BLOCK_SYNTAX: Pass = Pass {\n+    name: \"check-code-block-syntax\",\n+    pass: check_code_block_syntax,\n+    description: \"validates syntax inside Rust code blocks\",\n+};\n \n pub fn check_code_block_syntax(krate: clean::Crate, cx: &DocContext<'_, '_, '_>) -> clean::Crate {\n     SyntaxChecker { cx }.fold_crate(krate)"}, {"sha": "088a6ea77c73ff53b64c7023ee29513b92cd5cfd", "filename": "src/librustdoc/passes/collapse_docs.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs?ref=f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "patch": "@@ -1,13 +1,16 @@\n use crate::clean::{self, DocFragment, Item};\n+use crate::core::DocContext;\n use crate::fold;\n use crate::fold::{DocFolder};\n use crate::passes::Pass;\n \n use std::mem::replace;\n \n-pub const COLLAPSE_DOCS: Pass =\n-    Pass::late(\"collapse-docs\", collapse_docs,\n-        \"concatenates all document attributes into one document attribute\");\n+pub const COLLAPSE_DOCS: Pass = Pass {\n+    name: \"collapse-docs\",\n+    pass: collapse_docs,\n+    description: \"concatenates all document attributes into one document attribute\",\n+};\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n enum DocFragmentKind {\n@@ -26,7 +29,7 @@ impl DocFragment {\n     }\n }\n \n-pub fn collapse_docs(krate: clean::Crate) -> clean::Crate {\n+pub fn collapse_docs(krate: clean::Crate, _: &DocContext<'_, '_, '_>) -> clean::Crate {\n     Collapser.fold_crate(krate)\n }\n "}, {"sha": "67f291285c447415500d856274fb4ad48c8d2f93", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "patch": "@@ -19,9 +19,11 @@ use crate::passes::{look_for_tests, Pass};\n \n use super::span_of_attrs;\n \n-pub const COLLECT_INTRA_DOC_LINKS: Pass =\n-    Pass::early(\"collect-intra-doc-links\", collect_intra_doc_links,\n-                \"reads a crate's documentation to resolve intra-doc-links\");\n+pub const COLLECT_INTRA_DOC_LINKS: Pass = Pass {\n+    name: \"collect-intra-doc-links\",\n+    pass: collect_intra_doc_links,\n+    description: \"reads a crate's documentation to resolve intra-doc-links\",\n+};\n \n pub fn collect_intra_doc_links(krate: Crate, cx: &DocContext<'_, '_, '_>) -> Crate {\n     if !UnstableFeatures::from_environment().is_nightly_build() {"}, {"sha": "4c90540871d2eb3dabcbe2aa692ff53b81822def", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "patch": "@@ -6,9 +6,11 @@ use super::Pass;\n use rustc::util::nodemap::FxHashSet;\n use rustc::hir::def_id::DefId;\n \n-pub const COLLECT_TRAIT_IMPLS: Pass =\n-    Pass::early(\"collect-trait-impls\", collect_trait_impls,\n-                \"retrieves trait impls for items in the crate\");\n+pub const COLLECT_TRAIT_IMPLS: Pass = Pass {\n+    name: \"collect-trait-impls\",\n+    pass: collect_trait_impls,\n+    description: \"retrieves trait impls for items in the crate\",\n+};\n \n pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_, '_, '_>) -> Crate {\n     let mut synth = SyntheticImplCollector::new(cx);"}, {"sha": "3a9d8ef20ce84769bbd1cd68be07d4f23719709a", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 19, "deletions": 90, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "patch": "@@ -6,7 +6,6 @@ use rustc::lint as lint;\n use rustc::middle::privacy::AccessLevels;\n use rustc::util::nodemap::DefIdSet;\n use std::mem;\n-use std::fmt;\n use syntax::ast::NodeId;\n use syntax_pos::{DUMMY_SP, Span};\n use std::ops::Range;\n@@ -46,84 +45,14 @@ pub use self::collect_trait_impls::COLLECT_TRAIT_IMPLS;\n mod check_code_block_syntax;\n pub use self::check_code_block_syntax::CHECK_CODE_BLOCK_SYNTAX;\n \n-/// Represents a single pass.\n+/// A single pass over the cleaned documentation.\n+///\n+/// Runs in the compiler context, so it has access to types and traits and the like.\n #[derive(Copy, Clone)]\n-pub enum Pass {\n-    /// An \"early pass\" is run in the compiler context, and can gather information about types and\n-    /// traits and the like.\n-    EarlyPass {\n-        name: &'static str,\n-        pass: fn(clean::Crate, &DocContext<'_, '_, '_>) -> clean::Crate,\n-        description: &'static str,\n-    },\n-    /// A \"late pass\" is run between crate cleaning and page generation.\n-    LatePass {\n-        name: &'static str,\n-        pass: fn(clean::Crate) -> clean::Crate,\n-        description: &'static str,\n-    },\n-}\n-\n-impl fmt::Debug for Pass {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let mut dbg = match *self {\n-            Pass::EarlyPass { .. } => f.debug_struct(\"EarlyPass\"),\n-            Pass::LatePass { .. } => f.debug_struct(\"LatePass\"),\n-        };\n-\n-        dbg.field(\"name\", &self.name())\n-           .field(\"pass\", &\"...\")\n-           .field(\"description\", &self.description())\n-           .finish()\n-    }\n-}\n-\n-impl Pass {\n-    /// Constructs a new early pass.\n-    pub const fn early(name: &'static str,\n-                       pass: fn(clean::Crate, &DocContext<'_, '_, '_>) -> clean::Crate,\n-                       description: &'static str) -> Pass {\n-        Pass::EarlyPass { name, pass, description }\n-    }\n-\n-    /// Constructs a new late pass.\n-    pub const fn late(name: &'static str,\n-                      pass: fn(clean::Crate) -> clean::Crate,\n-                      description: &'static str) -> Pass {\n-        Pass::LatePass { name, pass, description }\n-    }\n-\n-    /// Returns the name of this pass.\n-    pub fn name(self) -> &'static str {\n-        match self {\n-            Pass::EarlyPass { name, .. } |\n-                Pass::LatePass { name, .. } => name,\n-        }\n-    }\n-\n-    /// Returns the description of this pass.\n-    pub fn description(self) -> &'static str {\n-        match self {\n-            Pass::EarlyPass { description, .. } |\n-                Pass::LatePass { description, .. } => description,\n-        }\n-    }\n-\n-    /// If this pass is an early pass, returns the pointer to its function.\n-    pub fn early_fn(self) -> Option<fn(clean::Crate, &DocContext<'_, '_, '_>) -> clean::Crate> {\n-        match self {\n-            Pass::EarlyPass { pass, .. } => Some(pass),\n-            _ => None,\n-        }\n-    }\n-\n-    /// If this pass is a late pass, returns the pointer to its function.\n-    pub fn late_fn(self) -> Option<fn(clean::Crate) -> clean::Crate> {\n-        match self {\n-            Pass::LatePass { pass, .. } => Some(pass),\n-            _ => None,\n-        }\n-    }\n+pub struct Pass {\n+    pub name: &'static str,\n+    pub pass: fn(clean::Crate, &DocContext<'_, '_, '_>) -> clean::Crate,\n+    pub description: &'static str,\n }\n \n /// The full list of passes.\n@@ -141,27 +70,27 @@ pub const PASSES: &'static [Pass] = &[\n ];\n \n /// The list of passes run by default.\n-pub const DEFAULT_PASSES: &'static [&'static str] = &[\n+pub const DEFAULT_PASSES: &[&str] = &[\n     \"collect-trait-impls\",\n+    \"collapse-docs\",\n+    \"unindent-comments\",\n     \"check-private-items-doc-tests\",\n     \"strip-hidden\",\n     \"strip-private\",\n     \"collect-intra-doc-links\",\n     \"check-code-block-syntax\",\n-    \"collapse-docs\",\n-    \"unindent-comments\",\n     \"propagate-doc-cfg\",\n ];\n \n /// The list of default passes run with `--document-private-items` is passed to rustdoc.\n-pub const DEFAULT_PRIVATE_PASSES: &'static [&'static str] = &[\n+pub const DEFAULT_PRIVATE_PASSES: &[&str] = &[\n     \"collect-trait-impls\",\n+    \"collapse-docs\",\n+    \"unindent-comments\",\n     \"check-private-items-doc-tests\",\n     \"strip-priv-imports\",\n     \"collect-intra-doc-links\",\n     \"check-code-block-syntax\",\n-    \"collapse-docs\",\n-    \"unindent-comments\",\n     \"propagate-doc-cfg\",\n ];\n \n@@ -184,8 +113,8 @@ pub fn defaults(default_set: DefaultPassOption) -> &'static [&'static str] {\n }\n \n /// If the given name matches a known pass, returns its information.\n-pub fn find_pass(pass_name: &str) -> Option<Pass> {\n-    PASSES.iter().find(|p| p.name() == pass_name).cloned()\n+pub fn find_pass(pass_name: &str) -> Option<&'static Pass> {\n+    PASSES.iter().find(|p| p.name == pass_name)\n }\n \n struct Stripper<'a> {\n@@ -438,11 +367,11 @@ crate fn source_span_for_markdown_range(\n         .span_to_snippet(span_of_attrs(attrs))\n         .ok()?;\n \n-    let starting_line = markdown[..md_range.start].lines().count() - 1;\n-    let ending_line = markdown[..md_range.end].lines().count() - 1;\n+    let starting_line = markdown[..md_range.start].matches('\\n').count();\n+    let ending_line = starting_line + markdown[md_range.start..md_range.end].matches('\\n').count();\n \n-    // We use `split_terminator('\\n')` instead of `lines()` when counting bytes so that we only\n-    // we can treat CRLF and LF line endings the same way.\n+    // We use `split_terminator('\\n')` instead of `lines()` when counting bytes so that we treat\n+    // CRLF and LF line endings the same way.\n     let mut src_lines = snippet.split_terminator('\\n');\n     let md_lines = markdown.split_terminator('\\n');\n "}, {"sha": "1c3977c4f85cddd36eabf65220353c2ad4ee198c", "filename": "src/librustdoc/passes/private_items_doc_tests.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs?ref=f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "patch": "@@ -3,10 +3,11 @@ use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::passes::{look_for_tests, Pass};\n \n-\n-pub const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass =\n-    Pass::early(\"check-private-items-doc-tests\", check_private_items_doc_tests,\n-                \"check private items doc tests\");\n+pub const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass = Pass {\n+    name: \"check-private-items-doc-tests\",\n+    pass: check_private_items_doc_tests,\n+    description: \"check private items doc tests\",\n+};\n \n struct PrivateItemDocTestLinter<'a, 'tcx: 'a, 'rcx: 'a> {\n     cx: &'a DocContext<'a, 'tcx, 'rcx>,"}, {"sha": "aed80b5ba86fd7c270a95039d3882164a08666c9", "filename": "src/librustdoc/passes/propagate_doc_cfg.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs?ref=f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "patch": "@@ -2,14 +2,17 @@ use std::sync::Arc;\n \n use crate::clean::{Crate, Item};\n use crate::clean::cfg::Cfg;\n+use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::passes::Pass;\n \n-pub const PROPAGATE_DOC_CFG: Pass =\n-    Pass::late(\"propagate-doc-cfg\", propagate_doc_cfg,\n-        \"propagates `#[doc(cfg(...))]` to child items\");\n+pub const PROPAGATE_DOC_CFG: Pass = Pass {\n+    name: \"propagate-doc-cfg\",\n+    pass: propagate_doc_cfg,\n+    description: \"propagates `#[doc(cfg(...))]` to child items\",\n+};\n \n-pub fn propagate_doc_cfg(cr: Crate) -> Crate {\n+pub fn propagate_doc_cfg(cr: Crate, _: &DocContext<'_, '_, '_>) -> Crate {\n     CfgPropagator { parent_cfg: None }.fold_crate(cr)\n }\n "}, {"sha": "330057e53843b517c2c4a61995746a6cc550934a", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "patch": "@@ -7,9 +7,11 @@ use crate::core::DocContext;\n use crate::fold::{DocFolder, StripItem};\n use crate::passes::{ImplStripper, Pass};\n \n-pub const STRIP_HIDDEN: Pass =\n-    Pass::early(\"strip-hidden\", strip_hidden,\n-                \"strips all doc(hidden) items from the output\");\n+pub const STRIP_HIDDEN: Pass = Pass {\n+    name: \"strip-hidden\",\n+    pass: strip_hidden,\n+    description: \"strips all doc(hidden) items from the output\",\n+};\n \n /// Strip items marked `#[doc(hidden)]`\n pub fn strip_hidden(krate: clean::Crate, _: &DocContext<'_, '_, '_>) -> clean::Crate {"}, {"sha": "479f0877bd7d2c4e80418e6350bde545358c39f7", "filename": "src/librustdoc/passes/strip_priv_imports.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs?ref=f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "patch": "@@ -3,8 +3,11 @@ use crate::fold::{DocFolder};\n use crate::core::DocContext;\n use crate::passes::{ImportStripper, Pass};\n \n-pub const STRIP_PRIV_IMPORTS: Pass = Pass::early(\"strip-priv-imports\", strip_priv_imports,\n-     \"strips all private import statements (`use`, `extern crate`) from a crate\");\n+pub const STRIP_PRIV_IMPORTS: Pass = Pass {\n+    name: \"strip-priv-imports\",\n+    pass: strip_priv_imports,\n+    description: \"strips all private import statements (`use`, `extern crate`) from a crate\",\n+};\n \n pub fn strip_priv_imports(krate: clean::Crate, _: &DocContext<'_, '_, '_>)  -> clean::Crate {\n     ImportStripper.fold_crate(krate)"}, {"sha": "1ac3a90f38d35cb191f37290498a4946ee4eaee3", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "patch": "@@ -5,10 +5,12 @@ use crate::fold::{DocFolder};\n use crate::core::DocContext;\n use crate::passes::{ImplStripper, ImportStripper, Stripper, Pass};\n \n-pub const STRIP_PRIVATE: Pass =\n-    Pass::early(\"strip-private\", strip_private,\n-        \"strips all private items from a crate which cannot be seen externally, \\\n-         implies strip-priv-imports\");\n+pub const STRIP_PRIVATE: Pass = Pass {\n+    name: \"strip-private\",\n+    pass: strip_private,\n+    description: \"strips all private items from a crate which cannot be seen externally, \\\n+        implies strip-priv-imports\",\n+};\n \n /// Strip private items from the point of view of a crate or externally from a\n /// crate, specified by the `xcrate` flag."}, {"sha": "b77cf68d7c63fab3a8955b3ff5749b1156f06913", "filename": "src/librustdoc/passes/unindent_comments.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs?ref=f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "patch": "@@ -3,14 +3,17 @@ use std::string::String;\n use std::usize;\n \n use crate::clean::{self, DocFragment, Item};\n+use crate::core::DocContext;\n use crate::fold::{self, DocFolder};\n use crate::passes::Pass;\n \n-pub const UNINDENT_COMMENTS: Pass =\n-    Pass::late(\"unindent-comments\", unindent_comments,\n-        \"removes excess indentation on comments in order for markdown to like it\");\n+pub const UNINDENT_COMMENTS: Pass = Pass {\n+    name: \"unindent-comments\",\n+    pass: unindent_comments,\n+    description: \"removes excess indentation on comments in order for markdown to like it\",\n+};\n \n-pub fn unindent_comments(krate: clean::Crate) -> clean::Crate {\n+pub fn unindent_comments(krate: clean::Crate, _: &DocContext<'_, '_, '_>) -> clean::Crate {\n     CommentCleaner.fold_crate(krate)\n }\n "}, {"sha": "60fc131dbda175029f36eb46e5f501cf6238ccef", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "patch": "@@ -105,8 +105,8 @@ LL | | /// [error]\n    |\n    = note: the link appears in this line:\n            \n-            [error]\n-             ^^^^^\n+           [error]\n+            ^^^^^\n    = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n \n warning: `[error1]` cannot be resolved, ignoring it..."}, {"sha": "5e5ddebe108845387808d56a696e836f2f26de39", "filename": "src/test/rustdoc-ui/issue-58473-2.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Ftest%2Frustdoc-ui%2Fissue-58473-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Ftest%2Frustdoc-ui%2Fissue-58473-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-58473-2.rs?ref=f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "patch": "@@ -0,0 +1,12 @@\n+// compile-pass\n+\n+#![deny(private_doc_tests)]\n+\n+mod foo {\n+    /**\n+    Does nothing, returns `()`\n+\n+    yadda-yadda-yadda\n+    */\n+    fn foo() {}\n+}"}, {"sha": "0e5be3292c05341f7b640f33882d799251008f2b", "filename": "src/test/rustdoc-ui/issue-58473.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Ftest%2Frustdoc-ui%2Fissue-58473.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2/src%2Ftest%2Frustdoc-ui%2Fissue-58473.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-58473.rs?ref=f6673a4e7ccfd5f5c8de07e24735b1e730aaffb2", "patch": "@@ -0,0 +1,10 @@\n+// compile-pass\n+\n+pub trait Foo {\n+    /**\n+    Does nothing, returns `()`\n+\n+    yadda-yadda-yadda\n+    */\n+    fn foo() {}\n+}"}]}