{"sha": "59c6ae615e5547610c3348b466a45ff2a5b3d935", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YzZhZTYxNWU1NTQ3NjEwYzMzNDhiNDY2YTQ1ZmYyYTViM2Q5MzU=", "commit": {"author": {"name": "Maarten de Vries", "email": "maarten@de-vri.es", "date": "2020-10-30T13:05:53Z"}, "committer": {"name": "Maarten de Vries", "email": "maarten@de-vri.es", "date": "2020-10-30T13:20:10Z"}, "message": "Use SOCK_CLOEXEC and accept4() on more platforms.", "tree": {"sha": "b38218388bfa43f971c2c9dc5485a83db54e3361", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b38218388bfa43f971c2c9dc5485a83db54e3361"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59c6ae615e5547610c3348b466a45ff2a5b3d935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59c6ae615e5547610c3348b466a45ff2a5b3d935", "html_url": "https://github.com/rust-lang/rust/commit/59c6ae615e5547610c3348b466a45ff2a5b3d935", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59c6ae615e5547610c3348b466a45ff2a5b3d935/comments", "author": {"login": "de-vri-es", "id": 786213, "node_id": "MDQ6VXNlcjc4NjIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/786213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/de-vri-es", "html_url": "https://github.com/de-vri-es", "followers_url": "https://api.github.com/users/de-vri-es/followers", "following_url": "https://api.github.com/users/de-vri-es/following{/other_user}", "gists_url": "https://api.github.com/users/de-vri-es/gists{/gist_id}", "starred_url": "https://api.github.com/users/de-vri-es/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/de-vri-es/subscriptions", "organizations_url": "https://api.github.com/users/de-vri-es/orgs", "repos_url": "https://api.github.com/users/de-vri-es/repos", "events_url": "https://api.github.com/users/de-vri-es/events{/privacy}", "received_events_url": "https://api.github.com/users/de-vri-es/received_events", "type": "User", "site_admin": false}, "committer": {"login": "de-vri-es", "id": 786213, "node_id": "MDQ6VXNlcjc4NjIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/786213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/de-vri-es", "html_url": "https://github.com/de-vri-es", "followers_url": "https://api.github.com/users/de-vri-es/followers", "following_url": "https://api.github.com/users/de-vri-es/following{/other_user}", "gists_url": "https://api.github.com/users/de-vri-es/gists{/gist_id}", "starred_url": "https://api.github.com/users/de-vri-es/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/de-vri-es/subscriptions", "organizations_url": "https://api.github.com/users/de-vri-es/orgs", "repos_url": "https://api.github.com/users/de-vri-es/repos", "events_url": "https://api.github.com/users/de-vri-es/events{/privacy}", "received_events_url": "https://api.github.com/users/de-vri-es/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8df58ae03a8fda8ed126c02fbc16b530d18344df", "url": "https://api.github.com/repos/rust-lang/rust/commits/8df58ae03a8fda8ed126c02fbc16b530d18344df", "html_url": "https://github.com/rust-lang/rust/commit/8df58ae03a8fda8ed126c02fbc16b530d18344df"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "71c6aa5a0e7ea43e0a000b1a6182c382a9d766f8", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/59c6ae615e5547610c3348b466a45ff2a5b3d935/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c6ae615e5547610c3348b466a45ff2a5b3d935/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=59c6ae615e5547610c3348b466a45ff2a5b3d935", "patch": "@@ -55,9 +55,18 @@ impl Socket {\n     pub fn new_raw(fam: c_int, ty: c_int) -> io::Result<Socket> {\n         unsafe {\n             cfg_if::cfg_if! {\n-                if #[cfg(target_os = \"linux\")] {\n-                    // On Linux we pass the SOCK_CLOEXEC flag to atomically create\n-                    // the socket and set it as CLOEXEC, added in 2.6.27.\n+                if #[cfg(any(\n+                    target_os = \"android\",\n+                    target_os = \"dragonfly\",\n+                    target_os = \"freebsd\",\n+                    target_os = \"illumos\",\n+                    target_os = \"linux\",\n+                    target_os = \"netbsd\",\n+                    target_os = \"opensbd\",\n+                ))] {\n+                    // On platforms that support it we pass the SOCK_CLOEXEC\n+                    // flag to atomically create the socket and set it as\n+                    // CLOEXEC. On Linux this was added in 2.6.27.\n                     let fd = cvt(libc::socket(fam, ty | libc::SOCK_CLOEXEC, 0))?;\n                     Ok(Socket(FileDesc::new(fd)))\n                 } else {\n@@ -83,7 +92,15 @@ impl Socket {\n             let mut fds = [0, 0];\n \n             cfg_if::cfg_if! {\n-                if #[cfg(target_os = \"linux\")] {\n+                if #[cfg(any(\n+                    target_os = \"android\",\n+                    target_os = \"dragonfly\",\n+                    target_os = \"freebsd\",\n+                    target_os = \"illumos\",\n+                    target_os = \"linux\",\n+                    target_os = \"netbsd\",\n+                    target_os = \"opensbd\",\n+                ))] {\n                     // Like above, set cloexec atomically\n                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n                     Ok((Socket(FileDesc::new(fds[0])), Socket(FileDesc::new(fds[1]))))\n@@ -174,9 +191,18 @@ impl Socket {\n     pub fn accept(&self, storage: *mut sockaddr, len: *mut socklen_t) -> io::Result<Socket> {\n         // Unfortunately the only known way right now to accept a socket and\n         // atomically set the CLOEXEC flag is to use the `accept4` syscall on\n-        // Linux. This was added in 2.6.28, glibc 2.10 and musl 0.9.5.\n+        // platforms that support it. On Linux, this was added in 2.6.28,\n+        // glibc 2.10 and musl 0.9.5.\n         cfg_if::cfg_if! {\n-            if #[cfg(target_os = \"linux\")] {\n+            if #[cfg(any(\n+                target_os = \"android\",\n+                target_os = \"dragonfly\",\n+                target_os = \"freebsd\",\n+                target_os = \"illumos\",\n+                target_os = \"linux\",\n+                target_os = \"netbsd\",\n+                target_os = \"opensbd\",\n+            ))] {\n                 let fd = cvt_r(|| unsafe {\n                     libc::accept4(self.0.raw(), storage, len, libc::SOCK_CLOEXEC)\n                 })?;"}]}