{"sha": "ba3148159974b4fa7a2e37ade3a79ba5eeb4e760", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMzE0ODE1OTk3NGI0ZmE3YTJlMzdhZGUzYTc5YmE1ZWViNGU3NjA=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-06T12:58:28Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-06T12:58:28Z"}, "message": "Merge #1380\n\n1380: [#1083] Try block syntax r=matklad a=andreytkachenko\n\nThe `try` block syntax \n\nCo-authored-by: Andrey Tkachenko <andreytkachenko64@gmail.com>", "tree": {"sha": "b5b9eb1151c6fdbfcbeeaaf4dfd2b2db015a6266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5b9eb1151c6fdbfcbeeaaf4dfd2b2db015a6266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760", "html_url": "https://github.com/rust-lang/rust/commit/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "b79e6294a68fd41f0a3dbd9eb907dfe99646d77e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b79e6294a68fd41f0a3dbd9eb907dfe99646d77e", "html_url": "https://github.com/rust-lang/rust/commit/b79e6294a68fd41f0a3dbd9eb907dfe99646d77e"}, {"sha": "505b8d873ffe422358bb4ff47dc82d6c76d0772e", "url": "https://api.github.com/repos/rust-lang/rust/commits/505b8d873ffe422358bb4ff47dc82d6c76d0772e", "html_url": "https://github.com/rust-lang/rust/commit/505b8d873ffe422358bb4ff47dc82d6c76d0772e"}], "stats": {"total": 123, "additions": 121, "deletions": 2}, "files": [{"sha": "9d9769859c358c8006f1de644822f9399a8d4a8f", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=ba3148159974b4fa7a2e37ade3a79ba5eeb4e760", "patch": "@@ -6,7 +6,7 @@ use rustc_hash::FxHashMap;\n use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n use ra_syntax::{\n     SyntaxNodePtr, AstPtr, AstNode,\n-    ast::{self, LoopBodyOwner, ArgListOwner, NameOwner, LiteralKind,ArrayExprKind, TypeAscriptionOwner},\n+    ast::{self, TryBlockBodyOwner, LoopBodyOwner, ArgListOwner, NameOwner, LiteralKind,ArrayExprKind, TypeAscriptionOwner},\n };\n \n use crate::{\n@@ -216,6 +216,9 @@ pub enum Expr {\n     Try {\n         expr: ExprId,\n     },\n+    TryBlock {\n+        body: ExprId,\n+    },\n     Cast {\n         expr: ExprId,\n         type_ref: TypeRef,\n@@ -299,6 +302,7 @@ impl Expr {\n                     f(*expr);\n                 }\n             }\n+            Expr::TryBlock { body } => f(*body),\n             Expr::Loop { body } => f(*body),\n             Expr::While { condition, body } => {\n                 f(*condition);\n@@ -578,6 +582,10 @@ where\n                     self.alloc_expr(Expr::If { condition, then_branch, else_branch }, syntax_ptr)\n                 }\n             }\n+            ast::ExprKind::TryBlockExpr(e) => {\n+                let body = self.collect_block_opt(e.try_body());\n+                self.alloc_expr(Expr::TryBlock { body }, syntax_ptr)\n+            }\n             ast::ExprKind::BlockExpr(e) => self.collect_block_opt(e.block()),\n             ast::ExprKind::LoopExpr(e) => {\n                 let body = self.collect_block_opt(e.loop_body());"}, {"sha": "6cc5dbc6f27daf721b9c8d172046ca57ebe88567", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=ba3148159974b4fa7a2e37ade3a79ba5eeb4e760", "patch": "@@ -946,6 +946,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 then_ty\n             }\n             Expr::Block { statements, tail } => self.infer_block(statements, *tail, expected),\n+            Expr::TryBlock { body } => {\n+                let _inner = self.infer_expr(*body, expected);\n+                // FIXME should be std::result::Result<{inner}, _>\n+                Ty::Unknown\n+            }\n             Expr::Loop { body } => {\n                 self.infer_expr(*body, &Expectation::has_type(Ty::unit()));\n                 // FIXME handle break with value"}, {"sha": "725fb99f66855d19a61815f53306a62d5a545f89", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=ba3148159974b4fa7a2e37ade3a79ba5eeb4e760", "patch": "@@ -52,6 +52,7 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet =\n         CONTINUE_KW,\n         LIFETIME,\n         ASYNC_KW,\n+        TRY_KW,\n     ]);\n \n const EXPR_RECOVERY_SET: TokenSet = token_set![LET_KW];\n@@ -75,6 +76,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n         T![loop] => loop_expr(p, None),\n         T![for] => for_expr(p, None),\n         T![while] => while_expr(p, None),\n+        T![try] => try_block_expr(p, None),\n         LIFETIME if la == T![:] => {\n             let m = p.start();\n             label(p);\n@@ -116,7 +118,9 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n         }\n     };\n     let blocklike = match done.kind() {\n-        IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR | BLOCK_EXPR => BlockLike::Block,\n+        IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR | BLOCK_EXPR | TRY_BLOCK_EXPR => {\n+            BlockLike::Block\n+        }\n         _ => BlockLike::NotBlock,\n     };\n     Some((done, blocklike))\n@@ -491,3 +495,15 @@ fn break_expr(p: &mut Parser, r: Restrictions) -> CompletedMarker {\n     }\n     m.complete(p, BREAK_EXPR)\n }\n+\n+// test try_block_expr\n+// fn foo() {\n+//     let _ = try {};\n+// }\n+fn try_block_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n+    assert!(p.at(T![try]));\n+    let m = m.unwrap_or_else(|| p.start());\n+    p.bump();\n+    block(p);\n+    m.complete(p, TRY_EXPR)\n+}"}, {"sha": "2c021f3e9dcd98c72485f7761fb49bf84d3aa9b9", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=ba3148159974b4fa7a2e37ade3a79ba5eeb4e760", "patch": "@@ -103,6 +103,7 @@ pub enum SyntaxKind {\n     LET_KW,\n     MOVE_KW,\n     RETURN_KW,\n+    TRY_KW,\n     AUTO_KW,\n     DEFAULT_KW,\n     UNION_KW,\n@@ -184,6 +185,7 @@ pub enum SyntaxKind {\n     STRUCT_LIT,\n     NAMED_FIELD_LIST,\n     NAMED_FIELD,\n+    TRY_BLOCK_EXPR,\n     CALL_EXPR,\n     INDEX_EXPR,\n     METHOD_CALL_EXPR,\n@@ -331,6 +333,7 @@ macro_rules! T {\n     (let) => { $crate::SyntaxKind::LET_KW };\n     (move) => { $crate::SyntaxKind::MOVE_KW };\n     (return) => { $crate::SyntaxKind::RETURN_KW };\n+    (try) => { $crate::SyntaxKind::TRY_KW };\n     (auto) => { $crate::SyntaxKind::AUTO_KW };\n     (default) => { $crate::SyntaxKind::DEFAULT_KW };\n     (union) => { $crate::SyntaxKind::UNION_KW };\n@@ -388,6 +391,7 @@ impl SyntaxKind {\n             | LET_KW\n             | MOVE_KW\n             | RETURN_KW\n+            | TRY_KW\n             | AUTO_KW\n             | DEFAULT_KW\n             | UNION_KW\n@@ -559,6 +563,7 @@ impl SyntaxKind {\n             LET_KW => &SyntaxInfo { name: \"LET_KW\" },\n             MOVE_KW => &SyntaxInfo { name: \"MOVE_KW\" },\n             RETURN_KW => &SyntaxInfo { name: \"RETURN_KW\" },\n+            TRY_KW => &SyntaxInfo { name: \"TRY_KW\" },\n             AUTO_KW => &SyntaxInfo { name: \"AUTO_KW\" },\n             DEFAULT_KW => &SyntaxInfo { name: \"DEFAULT_KW\" },\n             UNION_KW => &SyntaxInfo { name: \"UNION_KW\" },\n@@ -640,6 +645,7 @@ impl SyntaxKind {\n             STRUCT_LIT => &SyntaxInfo { name: \"STRUCT_LIT\" },\n             NAMED_FIELD_LIST => &SyntaxInfo { name: \"NAMED_FIELD_LIST\" },\n             NAMED_FIELD => &SyntaxInfo { name: \"NAMED_FIELD\" },\n+            TRY_BLOCK_EXPR => &SyntaxInfo { name: \"TRY_BLOCK_EXPR\" },\n             CALL_EXPR => &SyntaxInfo { name: \"CALL_EXPR\" },\n             INDEX_EXPR => &SyntaxInfo { name: \"INDEX_EXPR\" },\n             METHOD_CALL_EXPR => &SyntaxInfo { name: \"METHOD_CALL_EXPR\" },\n@@ -734,6 +740,7 @@ impl SyntaxKind {\n             \"let\" => LET_KW,\n             \"move\" => MOVE_KW,\n             \"return\" => RETURN_KW,\n+            \"try\" => TRY_KW,\n             _ => return None,\n         };\n         Some(kw)"}, {"sha": "1d888e7094542b88fcf9e639ac5ea23b2919815a", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=ba3148159974b4fa7a2e37ade3a79ba5eeb4e760", "patch": "@@ -713,6 +713,7 @@ pub enum ExprKind<'a> {\n     MethodCallExpr(&'a MethodCallExpr),\n     FieldExpr(&'a FieldExpr),\n     TryExpr(&'a TryExpr),\n+    TryBlockExpr(&'a TryBlockExpr),\n     CastExpr(&'a CastExpr),\n     RefExpr(&'a RefExpr),\n     PrefixExpr(&'a PrefixExpr),\n@@ -826,6 +827,11 @@ impl<'a> From<&'a TryExpr> for &'a Expr {\n         Expr::cast(&n.syntax).unwrap()\n     }\n }\n+impl<'a> From<&'a TryBlockExpr> for &'a Expr {\n+    fn from(n: &'a TryBlockExpr) -> &'a Expr {\n+        Expr::cast(&n.syntax).unwrap()\n+    }\n+}\n impl<'a> From<&'a CastExpr> for &'a Expr {\n     fn from(n: &'a CastExpr) -> &'a Expr {\n         Expr::cast(&n.syntax).unwrap()\n@@ -887,6 +893,7 @@ impl AstNode for Expr {\n             | METHOD_CALL_EXPR\n             | FIELD_EXPR\n             | TRY_EXPR\n+            | TRY_BLOCK_EXPR\n             | CAST_EXPR\n             | REF_EXPR\n             | PREFIX_EXPR\n@@ -929,6 +936,7 @@ impl Expr {\n             METHOD_CALL_EXPR => ExprKind::MethodCallExpr(MethodCallExpr::cast(&self.syntax).unwrap()),\n             FIELD_EXPR => ExprKind::FieldExpr(FieldExpr::cast(&self.syntax).unwrap()),\n             TRY_EXPR => ExprKind::TryExpr(TryExpr::cast(&self.syntax).unwrap()),\n+            TRY_BLOCK_EXPR => ExprKind::TryBlockExpr(TryBlockExpr::cast(&self.syntax).unwrap()),\n             CAST_EXPR => ExprKind::CastExpr(CastExpr::cast(&self.syntax).unwrap()),\n             REF_EXPR => ExprKind::RefExpr(RefExpr::cast(&self.syntax).unwrap()),\n             PREFIX_EXPR => ExprKind::PrefixExpr(PrefixExpr::cast(&self.syntax).unwrap()),\n@@ -3672,6 +3680,35 @@ impl TraitDef {\n     }\n }\n \n+// TryBlockExpr\n+#[derive(Debug, PartialEq, Eq, Hash)]\n+#[repr(transparent)]\n+pub struct TryBlockExpr {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+unsafe impl TransparentNewType for TryBlockExpr {\n+    type Repr = rowan::SyntaxNode;\n+}\n+\n+impl AstNode for TryBlockExpr {\n+    fn cast(syntax: &SyntaxNode) -> Option<&Self> {\n+        match syntax.kind() {\n+            TRY_BLOCK_EXPR => Some(TryBlockExpr::from_repr(syntax.into_repr())),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for TryBlockExpr {\n+    type Owned = TreeArc<TryBlockExpr>;\n+    fn to_owned(&self) -> TreeArc<TryBlockExpr> { TreeArc::cast(self.syntax.to_owned()) }\n+}\n+\n+\n+impl ast::TryBlockBodyOwner for TryBlockExpr {}\n+impl TryBlockExpr {}\n+\n // TryExpr\n #[derive(Debug, PartialEq, Eq, Hash)]\n #[repr(transparent)]"}, {"sha": "43348540082c2f323fdb3c80df39bcb9fd4cb0ba", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=ba3148159974b4fa7a2e37ade3a79ba5eeb4e760", "patch": "@@ -33,6 +33,12 @@ pub trait LoopBodyOwner: AstNode {\n     }\n }\n \n+pub trait TryBlockBodyOwner: AstNode {\n+    fn try_body(&self) -> Option<&ast::Block> {\n+        child_opt(self)\n+    }\n+}\n+\n pub trait ArgListOwner: AstNode {\n     fn arg_list(&self) -> Option<&ast::ArgList> {\n         child_opt(self)"}, {"sha": "1c2714307a1ca69b332f3530b8226d50a49dea7e", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=ba3148159974b4fa7a2e37ade3a79ba5eeb4e760", "patch": "@@ -95,6 +95,7 @@ Grammar(\n         \"let\",\n         \"move\",\n         \"return\",\n+        \"try\",\n     ],\n     contextual_keywords: [\n         \"auto\",\n@@ -189,6 +190,7 @@ Grammar(\n         \"STRUCT_LIT\",\n         \"NAMED_FIELD_LIST\",\n         \"NAMED_FIELD\",\n+        \"TRY_BLOCK_EXPR\",\n \n         // postfix\n         \"CALL_EXPR\",\n@@ -417,6 +419,9 @@ Grammar(\n         \"LoopExpr\": (\n             traits: [\"LoopBodyOwner\"],\n         ),\n+        \"TryBlockExpr\": (\n+            traits: [\"TryBlockBodyOwner\"],\n+        ),\n         \"ForExpr\": (\n             traits: [\"LoopBodyOwner\"],\n             options: [\n@@ -499,6 +504,7 @@ Grammar(\n                 \"MethodCallExpr\",\n                 \"FieldExpr\",\n                 \"TryExpr\",\n+                \"TryBlockExpr\",\n                 \"CastExpr\",\n                 \"RefExpr\",\n                 \"PrefixExpr\","}, {"sha": "0f1b41eb64b4763678cee225ad9bbab5c42fdfcf", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0130_try_block_expr.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0130_try_block_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0130_try_block_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0130_try_block_expr.rs?ref=ba3148159974b4fa7a2e37ade3a79ba5eeb4e760", "patch": "@@ -0,0 +1,3 @@\n+fn foo() {\n+    let _ = try {};\n+}"}, {"sha": "53f49b9b5d577fa9d4f48373b5bd6f37a67deda1", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0130_try_block_expr.txt", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0130_try_block_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ba3148159974b4fa7a2e37ade3a79ba5eeb4e760/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0130_try_block_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0130_try_block_expr.txt?ref=ba3148159974b4fa7a2e37ade3a79ba5eeb4e760", "patch": "@@ -0,0 +1,31 @@\n+SOURCE_FILE@[0; 33)\n+  FN_DEF@[0; 32)\n+    FN_KW@[0; 2) \"fn\"\n+    WHITESPACE@[2; 3) \" \"\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7) \"(\"\n+      R_PAREN@[7; 8) \")\"\n+    WHITESPACE@[8; 9) \" \"\n+    BLOCK@[9; 32)\n+      L_CURLY@[9; 10) \"{\"\n+      WHITESPACE@[10; 15) \"\\n    \"\n+      LET_STMT@[15; 30)\n+        LET_KW@[15; 18) \"let\"\n+        WHITESPACE@[18; 19) \" \"\n+        PLACEHOLDER_PAT@[19; 20)\n+          UNDERSCORE@[19; 20) \"_\"\n+        WHITESPACE@[20; 21) \" \"\n+        EQ@[21; 22) \"=\"\n+        WHITESPACE@[22; 23) \" \"\n+        TRY_EXPR@[23; 29)\n+          TRY_KW@[23; 26) \"try\"\n+          WHITESPACE@[26; 27) \" \"\n+          BLOCK@[27; 29)\n+            L_CURLY@[27; 28) \"{\"\n+            R_CURLY@[28; 29) \"}\"\n+        SEMI@[29; 30) \";\"\n+      WHITESPACE@[30; 31) \"\\n\"\n+      R_CURLY@[31; 32) \"}\"\n+  WHITESPACE@[32; 33) \"\\n\""}]}