{"sha": "1fb612bd15bb3ef098fd24c20d0727de573b4410", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYjYxMmJkMTViYjNlZjA5OGZkMjRjMjBkMDcyN2RlNTczYjQ0MTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-13T00:55:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-13T00:55:34Z"}, "message": "Auto merge of #73277 - RalfJung:miri-caller-location, r=oli-obk\n\nfix caller_location intrinsic for Miri\n\nFixes https://github.com/rust-lang/rust/issues/73272\n\nr? @oli-obk Cc @Aaron1011", "tree": {"sha": "669b0356daa7d75e6a228c8ff5d2557208009a01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/669b0356daa7d75e6a228c8ff5d2557208009a01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fb612bd15bb3ef098fd24c20d0727de573b4410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb612bd15bb3ef098fd24c20d0727de573b4410", "html_url": "https://github.com/rust-lang/rust/commit/1fb612bd15bb3ef098fd24c20d0727de573b4410", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fb612bd15bb3ef098fd24c20d0727de573b4410/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4fbb93113aa4f0a0cd08e74afb35381bbfbc7f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4fbb93113aa4f0a0cd08e74afb35381bbfbc7f0", "html_url": "https://github.com/rust-lang/rust/commit/f4fbb93113aa4f0a0cd08e74afb35381bbfbc7f0"}, {"sha": "b4bd180e5e330c6b3019c0d9d0ad676f07885258", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4bd180e5e330c6b3019c0d9d0ad676f07885258", "html_url": "https://github.com/rust-lang/rust/commit/b4bd180e5e330c6b3019c0d9d0ad676f07885258"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "b44152a5188a8b51ccc8ad2ecee42f4ef9420daf", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1fb612bd15bb3ef098fd24c20d0727de573b4410/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb612bd15bb3ef098fd24c20d0727de573b4410/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=1fb612bd15bb3ef098fd24c20d0727de573b4410", "patch": "@@ -171,15 +171,8 @@ impl<'mir, 'tcx, Tag> Frame<'mir, 'tcx, Tag> {\n \n impl<'mir, 'tcx, Tag, Extra> Frame<'mir, 'tcx, Tag, Extra> {\n     /// Return the `SourceInfo` of the current instruction.\n-    pub fn current_source_info(&self) -> Option<mir::SourceInfo> {\n-        self.loc.map(|loc| {\n-            let block = &self.body.basic_blocks()[loc.block];\n-            if loc.statement_index < block.statements.len() {\n-                block.statements[loc.statement_index].source_info\n-            } else {\n-                block.terminator().source_info\n-            }\n-        })\n+    pub fn current_source_info(&self) -> Option<&mir::SourceInfo> {\n+        self.loc.map(|loc| self.body.source_info(loc))\n     }\n }\n "}, {"sha": "9adef8c43c7c88971f04bfbca092b43698ba08f0", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1fb612bd15bb3ef098fd24c20d0727de573b4410/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb612bd15bb3ef098fd24c20d0727de573b4410/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=1fb612bd15bb3ef098fd24c20d0727de573b4410", "patch": "@@ -29,18 +29,25 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             })\n             // Assert that there is always such a frame.\n             .unwrap();\n+        // Assert that the frame we look at is actually executing code currently\n+        // (`current_source_info` is None when we are unwinding and the frame does\n+        // not require cleanup).\n         let loc = frame.loc.unwrap();\n+        // If this is a `Call` terminator, use the `fn_span` instead.\n         let block = &frame.body.basic_blocks()[loc.block];\n-        assert_eq!(block.statements.len(), loc.statement_index);\n-        debug!(\n-            \"find_closest_untracked_caller_location:: got terminator {:?} ({:?})\",\n-            block.terminator(),\n-            block.terminator().kind\n-        );\n-        if let TerminatorKind::Call { fn_span, .. } = block.terminator().kind {\n-            return fn_span;\n+        if loc.statement_index == block.statements.len() {\n+            debug!(\n+                \"find_closest_untracked_caller_location:: got terminator {:?} ({:?})\",\n+                block.terminator(),\n+                block.terminator().kind\n+            );\n+            if let TerminatorKind::Call { fn_span, .. } = block.terminator().kind {\n+                return fn_span;\n+            }\n         }\n-        unreachable!();\n+        // This is a different terminator (such as `Drop`) or not a terminator at all\n+        // (such as `box`). Use the normal span.\n+        frame.body.source_info(loc).span\n     }\n \n     /// Allocate a `const core::panic::Location` with the provided filename and line/column numbers."}]}