{"sha": "1854f8b3d8bb5f35554f3bdf61f63853ae720742", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NTRmOGIzZDhiYjVmMzU1NTRmM2JkZjYxZjYzODUzYWU3MjA3NDI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-09T20:16:13Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-11T11:36:15Z"}, "message": "Warn for #[unstable] on trait impls when it has no effect.", "tree": {"sha": "a1ce37dd6c3471edb09d520c670555735f72e1b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1ce37dd6c3471edb09d520c670555735f72e1b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1854f8b3d8bb5f35554f3bdf61f63853ae720742", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1854f8b3d8bb5f35554f3bdf61f63853ae720742", "html_url": "https://github.com/rust-lang/rust/commit/1854f8b3d8bb5f35554f3bdf61f63853ae720742", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1854f8b3d8bb5f35554f3bdf61f63853ae720742/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c35a9279ca50d3e5a6f33d80a7191454fd89cbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c35a9279ca50d3e5a6f33d80a7191454fd89cbe", "html_url": "https://github.com/rust-lang/rust/commit/8c35a9279ca50d3e5a6f33d80a7191454fd89cbe"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "d3141c34d0e11df9e943e8a219e98d1422e0a9b9", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1854f8b3d8bb5f35554f3bdf61f63853ae720742/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1854f8b3d8bb5f35554f3bdf61f63853ae720742/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=1854f8b3d8bb5f35554f3bdf61f63853ae720742", "patch": "@@ -9,7 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::{Generics, HirId, Item, StructField, Variant};\n+use rustc_hir::{Generics, HirId, Item, StructField, TraitRef, Ty, TyKind, Variant};\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability::{DeprecationEntry, Index};\n@@ -538,7 +538,31 @@ impl Visitor<'tcx> for Checker<'tcx> {\n             // For implementations of traits, check the stability of each item\n             // individually as it's possible to have a stable trait with unstable\n             // items.\n-            hir::ItemKind::Impl { of_trait: Some(ref t), items, .. } => {\n+            hir::ItemKind::Impl { of_trait: Some(ref t), self_ty, items, .. } => {\n+                // If this impl block has an #[unstable] attribute, give an\n+                // error if all involved types and traits are stable, because\n+                // it will have no effect.\n+                // See: https://github.com/rust-lang/rust/issues/55436\n+                if let (Some(Stability { level: attr::Unstable { .. }, .. }), _) =\n+                    attr::find_stability(&self.tcx.sess, &item.attrs, item.span)\n+                {\n+                    let mut c = CheckTraitImplStable { tcx: self.tcx, fully_stable: true };\n+                    c.visit_ty(self_ty);\n+                    c.visit_trait_ref(t);\n+                    if c.fully_stable {\n+                        let span = item\n+                            .attrs\n+                            .iter()\n+                            .find(|a| a.has_name(sym::unstable))\n+                            .map_or(item.span, |a| a.span);\n+                        self.tcx.sess.span_warn(\n+                            span,\n+                            \"An `#[unstable]` annotation here has no effect. \\\n+                            See issue #55436 <https://github.com/rust-lang/rust/issues/55436> for more information.\",\n+                        );\n+                    }\n+                }\n+\n                 if let Res::Def(DefKind::Trait, trait_did) = t.path.res {\n                     for impl_item_ref in items {\n                         let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n@@ -598,6 +622,44 @@ impl Visitor<'tcx> for Checker<'tcx> {\n     }\n }\n \n+struct CheckTraitImplStable<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    fully_stable: bool,\n+}\n+\n+impl Visitor<'tcx> for CheckTraitImplStable<'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, _id: hir::HirId) {\n+        if let Some(def_id) = path.res.opt_def_id() {\n+            if let Some(stab) = self.tcx.lookup_stability(def_id) {\n+                self.fully_stable &= stab.level.is_stable();\n+            }\n+        }\n+        intravisit::walk_path(self, path)\n+    }\n+\n+    fn visit_trait_ref(&mut self, t: &'tcx TraitRef<'tcx>) {\n+        if let Res::Def(DefKind::Trait, trait_did) = t.path.res {\n+            if let Some(stab) = self.tcx.lookup_stability(trait_did) {\n+                self.fully_stable &= stab.level.is_stable();\n+            }\n+        }\n+        intravisit::walk_trait_ref(self, t)\n+    }\n+\n+    fn visit_ty(&mut self, t: &'tcx Ty<'tcx>) {\n+        if let TyKind::Never = t.kind {\n+            self.fully_stable = false;\n+        }\n+        intravisit::walk_ty(self, t)\n+    }\n+}\n+\n /// Given the list of enabled features that were not language features (i.e., that\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them."}]}