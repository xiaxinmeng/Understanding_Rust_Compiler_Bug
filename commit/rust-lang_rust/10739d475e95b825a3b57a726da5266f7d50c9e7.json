{"sha": "10739d475e95b825a3b57a726da5266f7d50c9e7", "node_id": "C_kwDOAAsO6NoAKDEwNzM5ZDQ3NWU5NWI4MjVhM2I1N2E3MjZkYTUyNjZmN2Q1MGM5ZTc", "commit": {"author": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-09-30T15:41:01Z"}, "committer": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-09-30T15:41:01Z"}, "message": "Add back ConstFnMutClosure::new, fix formatting", "tree": {"sha": "3683ef8ac87703db1d7098a78dc600c08798c10d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3683ef8ac87703db1d7098a78dc600c08798c10d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10739d475e95b825a3b57a726da5266f7d50c9e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10739d475e95b825a3b57a726da5266f7d50c9e7", "html_url": "https://github.com/rust-lang/rust/commit/10739d475e95b825a3b57a726da5266f7d50c9e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10739d475e95b825a3b57a726da5266f7d50c9e7/comments", "author": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a641a533cf3e560bd4133e01dd43250bb784ff5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a641a533cf3e560bd4133e01dd43250bb784ff5", "html_url": "https://github.com/rust-lang/rust/commit/9a641a533cf3e560bd4133e01dd43250bb784ff5"}], "stats": {"total": 95, "additions": 48, "deletions": 47}, "files": [{"sha": "f0fa2e1d2c190a629def5e5185408d8419ff3e71", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10739d475e95b825a3b57a726da5266f7d50c9e7/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10739d475e95b825a3b57a726da5266f7d50c9e7/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=10739d475e95b825a3b57a726da5266f7d50c9e7", "patch": "@@ -1267,7 +1267,7 @@ where\n     {\n         f(v1).cmp(&f(v2))\n     }\n-    min_by(v1, v2, ConstFnMutClosure { data: &mut f, func: imp })\n+    min_by(v1, v2, ConstFnMutClosure::new(&mut f, imp))\n }\n \n /// Compares and returns the maximum of two values.\n@@ -1352,7 +1352,7 @@ where\n     {\n         f(v1).cmp(&f(v2))\n     }\n-    max_by(v1, v2, ConstFnMutClosure { data: &mut f, func: imp })\n+    max_by(v1, v2, ConstFnMutClosure::new(&mut f, imp))\n }\n \n // Implementation of PartialEq, Eq, PartialOrd and Ord for primitive types"}, {"sha": "9e9c02093be203d208845880537a6d4a3288c654", "filename": "library/core/src/const_closure.rs", "status": "modified", "additions": 40, "deletions": 23, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/10739d475e95b825a3b57a726da5266f7d50c9e7/library%2Fcore%2Fsrc%2Fconst_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10739d475e95b825a3b57a726da5266f7d50c9e7/library%2Fcore%2Fsrc%2Fconst_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconst_closure.rs?ref=10739d475e95b825a3b57a726da5266f7d50c9e7", "patch": "@@ -23,36 +23,53 @@ pub(crate) struct ConstFnMutClosure<CapturedData, Function> {\n     /// The Function of the Closure, must be: Fn(CapturedData, ClosureArgs) -> ClosureReturn\n     pub func: Function,\n }\n+impl<'a, CapturedData: ?Sized, Function> ConstFnMutClosure<&'a mut CapturedData, Function> {\n+    /// Function for creating a new closure.\n+    ///\n+    /// `data` is the a mutable borrow of data that is captured from the environment.\n+    /// If you want Data to be a tuple of mutable Borrows, the struct must be constructed manually.\n+    ///\n+    /// `func` is the function of the closure, it gets the data and a tuple of the arguments closure\n+    ///   and return the return value of the closure.\n+    pub(crate) const fn new<ClosureArguments, ClosureReturnValue>(\n+        data: &'a mut CapturedData,\n+        func: Function,\n+    ) -> Self\n+    where\n+        Function: ~const Fn(&mut CapturedData, ClosureArguments) -> ClosureReturnValue,\n+    {\n+        Self { data, func }\n+    }\n+}\n \n macro_rules! impl_fn_mut_tuple {\n     ($($var:ident)*) => {\n-      #[allow(unused_parens)]\n-      impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n-        FnOnce<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n-      where\n-        Function: ~const Fn(($(&mut $var),*), ClosureArguments) -> ClosureReturnValue+ ~const Destruct,\n-      {\n-        type Output = ClosureReturnValue;\n+        #[allow(unused_parens)]\n+        impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n+            FnOnce<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n+        where\n+            Function: ~const Fn(($(&mut $var),*), ClosureArguments) -> ClosureReturnValue+ ~const Destruct,\n+        {\n+            type Output = ClosureReturnValue;\n \n-        extern \"rust-call\" fn call_once(mut self, args: ClosureArguments) -> Self::Output {\n-          self.call_mut(args)\n+            extern \"rust-call\" fn call_once(mut self, args: ClosureArguments) -> Self::Output {\n+            self.call_mut(args)\n+            }\n         }\n-      }\n-      #[allow(unused_parens)]\n-      impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n-        FnMut<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n-      where\n-        Function: ~const Fn(($(&mut $var),*), ClosureArguments)-> ClosureReturnValue,\n-      {\n-        extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n-          #[allow(non_snake_case)]\n-          let ($($var),*) = &mut self.data;\n-          (self.func)(($($var),*), args)\n+        #[allow(unused_parens)]\n+        impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n+            FnMut<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n+        where\n+            Function: ~const Fn(($(&mut $var),*), ClosureArguments)-> ClosureReturnValue,\n+        {\n+            extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n+                #[allow(non_snake_case)]\n+                let ($($var),*) = &mut self.data;\n+                (self.func)(($($var),*), args)\n+            }\n         }\n-      }\n-\n     };\n-  }\n+}\n impl_fn_mut_tuple!(A);\n impl_fn_mut_tuple!(A B);\n impl_fn_mut_tuple!(A B C);"}, {"sha": "489fb13c0dc97aff6df6fd8bd16f7c26c4283bb8", "filename": "library/core/src/iter/adapters/array_chunks.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10739d475e95b825a3b57a726da5266f7d50c9e7/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10739d475e95b825a3b57a726da5266f7d50c9e7/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs?ref=10739d475e95b825a3b57a726da5266f7d50c9e7", "patch": "@@ -88,11 +88,7 @@ where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        self.try_fold(\n-            init,\n-            ConstFnMutClosure { data: &mut f, func: NeverShortCircuit::wrap_mut_2_imp },\n-        )\n-        .0\n+        self.try_fold(init, ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp)).0\n     }\n }\n \n@@ -136,11 +132,7 @@ where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        self.try_rfold(\n-            init,\n-            ConstFnMutClosure { data: &mut f, func: NeverShortCircuit::wrap_mut_2_imp },\n-        )\n-        .0\n+        self.try_rfold(init, ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp)).0\n     }\n }\n "}, {"sha": "1945e402ff50ed8e4875cebd8f7bb7c98202f9fa", "filename": "library/core/src/iter/adapters/by_ref_sized.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/10739d475e95b825a3b57a726da5266f7d50c9e7/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10739d475e95b825a3b57a726da5266f7d50c9e7/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs?ref=10739d475e95b825a3b57a726da5266f7d50c9e7", "patch": "@@ -44,12 +44,8 @@ impl<I: Iterator> Iterator for ByRefSized<'_, I> {\n         F: FnMut(B, Self::Item) -> B,\n     {\n         // `fold` needs ownership, so this can't forward directly.\n-        I::try_fold(\n-            self.0,\n-            init,\n-            ConstFnMutClosure { data: &mut f, func: NeverShortCircuit::wrap_mut_2_imp },\n-        )\n-        .0\n+        I::try_fold(self.0, init, ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp))\n+            .0\n     }\n \n     #[inline]\n@@ -88,7 +84,7 @@ impl<I: DoubleEndedIterator> DoubleEndedIterator for ByRefSized<'_, I> {\n         I::try_rfold(\n             self.0,\n             init,\n-            ConstFnMutClosure { data: &mut f, func: NeverShortCircuit::wrap_mut_2_imp },\n+            ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp),\n         )\n         .0\n     }"}, {"sha": "de3a534f81b8adf4b0655e4f1471232ec45fde64", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10739d475e95b825a3b57a726da5266f7d50c9e7/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10739d475e95b825a3b57a726da5266f7d50c9e7/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=10739d475e95b825a3b57a726da5266f7d50c9e7", "patch": "@@ -209,11 +209,7 @@ where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        self.try_fold(\n-            init,\n-            ConstFnMutClosure { data: &mut fold, func: NeverShortCircuit::wrap_mut_2_imp },\n-        )\n-        .0\n+        self.try_fold(init, ConstFnMutClosure::new(&mut fold, NeverShortCircuit::wrap_mut_2_imp)).0\n     }\n }\n "}]}