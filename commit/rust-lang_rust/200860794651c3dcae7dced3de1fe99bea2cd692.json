{"sha": "200860794651c3dcae7dced3de1fe99bea2cd692", "node_id": "C_kwDOAAsO6NoAKDIwMDg2MDc5NDY1MWMzZGNhZTdkY2VkM2RlMWZlOTliZWEyY2Q2OTI", "commit": {"author": {"name": "bellau", "email": "laurent.belmonte@gmail.com", "date": "2022-02-12T15:07:58Z"}, "committer": {"name": "bellau", "email": "laurent.belmonte@gmail.com", "date": "2022-02-12T15:07:58Z"}, "message": "support static move too", "tree": {"sha": "ef0f028193c87d44f20247eeffb92fad28dc0102", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef0f028193c87d44f20247eeffb92fad28dc0102"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/200860794651c3dcae7dced3de1fe99bea2cd692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/200860794651c3dcae7dced3de1fe99bea2cd692", "html_url": "https://github.com/rust-lang/rust/commit/200860794651c3dcae7dced3de1fe99bea2cd692", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/200860794651c3dcae7dced3de1fe99bea2cd692/comments", "author": {"login": "bellau", "id": 475393, "node_id": "MDQ6VXNlcjQ3NTM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/475393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bellau", "html_url": "https://github.com/bellau", "followers_url": "https://api.github.com/users/bellau/followers", "following_url": "https://api.github.com/users/bellau/following{/other_user}", "gists_url": "https://api.github.com/users/bellau/gists{/gist_id}", "starred_url": "https://api.github.com/users/bellau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bellau/subscriptions", "organizations_url": "https://api.github.com/users/bellau/orgs", "repos_url": "https://api.github.com/users/bellau/repos", "events_url": "https://api.github.com/users/bellau/events{/privacy}", "received_events_url": "https://api.github.com/users/bellau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bellau", "id": 475393, "node_id": "MDQ6VXNlcjQ3NTM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/475393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bellau", "html_url": "https://github.com/bellau", "followers_url": "https://api.github.com/users/bellau/followers", "following_url": "https://api.github.com/users/bellau/following{/other_user}", "gists_url": "https://api.github.com/users/bellau/gists{/gist_id}", "starred_url": "https://api.github.com/users/bellau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bellau/subscriptions", "organizations_url": "https://api.github.com/users/bellau/orgs", "repos_url": "https://api.github.com/users/bellau/repos", "events_url": "https://api.github.com/users/bellau/events{/privacy}", "received_events_url": "https://api.github.com/users/bellau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1284bc0af32c7bf772150c3e64f8a867d4f533be", "url": "https://api.github.com/repos/rust-lang/rust/commits/1284bc0af32c7bf772150c3e64f8a867d4f533be", "html_url": "https://github.com/rust-lang/rust/commit/1284bc0af32c7bf772150c3e64f8a867d4f533be"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "76d9b39d385b324a1e62ace60e4f9d7a7f35915f", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/200860794651c3dcae7dced3de1fe99bea2cd692/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200860794651c3dcae7dced3de1fe99bea2cd692/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=200860794651c3dcae7dced3de1fe99bea2cd692", "patch": "@@ -74,7 +74,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n         T![|] => closure_expr(p),\n         T![move] if la == T![|] => closure_expr(p),\n         T![async] if la == T![|] || (la == T![move] && p.nth(2) == T![|]) => closure_expr(p),\n-        T![static] if la == T![|] => closure_expr(p),\n+        T![static] if la == T![|] || (la == T![move] && p.nth(2) == T![|]) => closure_expr(p),\n         T![if] => if_expr(p),\n \n         T![loop] => loop_expr(p, None),\n@@ -236,6 +236,7 @@ fn array_expr(p: &mut Parser) -> CompletedMarker {\n //     move || {};\n //     async move || {};\n //     static || {};\n+//     static move || {};\n // }\n fn closure_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(\n@@ -244,11 +245,12 @@ fn closure_expr(p: &mut Parser) -> CompletedMarker {\n             || (p.at(T![async]) && p.nth(1) == T![|])\n             || (p.at(T![async]) && p.nth(1) == T![move] && p.nth(2) == T![|])\n             || (p.at(T![static]) && p.nth(1) == T![|])\n+            || (p.at(T![static]) && p.nth(1) == T![move] && p.nth(2) == T![|])\n     );\n     let m = p.start();\n     p.eat(T![async]);\n-    p.eat(T![move]);\n     p.eat(T![static]);\n+    p.eat(T![move]);\n     params::param_list_closure(p);\n     if opt_ret_type(p) {\n         // test lambda_ret_block"}, {"sha": "e583ff782b6868d8303584b8cb5700df9d50af4a", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200860794651c3dcae7dced3de1fe99bea2cd692/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200860794651c3dcae7dced3de1fe99bea2cd692/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=200860794651c3dcae7dced3de1fe99bea2cd692", "patch": "@@ -230,7 +230,7 @@ fn opt_item_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n         IDENT if p.at_contextual_kw(T![macro_rules]) && p.nth(1) == BANG => macro_rules(p, m),\n \n         T![const] if (la == IDENT || la == T![_] || la == T![mut]) => consts::konst(p, m),\n-        T![static] if la != PIPE => consts::static_(p, m),\n+        T![static] if (la != PIPE && la != T![move] ) => consts::static_(p, m),\n \n         _ => return Err(m),\n     };"}, {"sha": "7d19891259fac659248fbcfd5ffee3ad39c306a5", "filename": "crates/parser/test_data/parser/inline/ok/0106_lambda_expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/200860794651c3dcae7dced3de1fe99bea2cd692/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200860794651c3dcae7dced3de1fe99bea2cd692/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rs?ref=200860794651c3dcae7dced3de1fe99bea2cd692", "patch": "@@ -7,4 +7,5 @@ fn foo() {\n     move || {};\n     async move || {};\n     static || {};\n+    static move || {};\n }"}, {"sha": "9b4c5d52995201e9c2d2f3e1dd91c499d68c6263", "filename": "crates/parser/test_data/parser/inline/ok/0106_lambda_expr.txt", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/200860794651c3dcae7dced3de1fe99bea2cd692/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/200860794651c3dcae7dced3de1fe99bea2cd692/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.txt?ref=200860794651c3dcae7dced3de1fe99bea2cd692", "patch": "@@ -149,6 +149,22 @@ SOURCE_FILE\n                 L_CURLY \"{\"\n                 R_CURLY \"}\"\n           SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          CLOSURE_EXPR\n+            STATIC_KW \"static\"\n+            WHITESPACE \" \"\n+            MOVE_KW \"move\"\n+            WHITESPACE \" \"\n+            PARAM_LIST\n+              PIPE \"|\"\n+              PIPE \"|\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                R_CURLY \"}\"\n+          SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\""}]}