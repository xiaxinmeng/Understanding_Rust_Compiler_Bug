{"sha": "d3f9788e596f9b7f07c165e0f382dbe2cdb02b6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZjk3ODhlNTk2ZjliN2YwN2MxNjVlMGYzODJkYmUyY2RiMDJiNmU=", "commit": {"author": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-11-29T23:17:05Z"}, "committer": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-11-29T23:17:05Z"}, "message": "panic_immediate_abort: Fix issues from review", "tree": {"sha": "4f7f8d99e49b37f4c82caf7ff9d5c09a9553739d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f7f8d99e49b37f4c82caf7ff9d5c09a9553739d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3f9788e596f9b7f07c165e0f382dbe2cdb02b6e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABEIAB0WIQQzEHnM5f9ubG8rMBnAlyIdbgPfaAUCXABzcQAKCRDAlyIdbgPf\naJ7UAP4uyJuqn3NESbpZH329ATElV11n+hO01mPjAN0yY87KEgEArYl82MgPmsvF\noDarrdyXDUff2enz9c+7Izi+2Ltg468=\n=dT0B\n-----END PGP SIGNATURE-----", "payload": "tree 4f7f8d99e49b37f4c82caf7ff9d5c09a9553739d\nparent fdef3848a01c4567abd326043b797f6bdc3f3e76\nauthor Vitaly _Vi Shukela <vi0oss@gmail.com> 1543533425 +0300\ncommitter Vitaly _Vi Shukela <vi0oss@gmail.com> 1543533425 +0300\n\npanic_immediate_abort: Fix issues from review\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f9788e596f9b7f07c165e0f382dbe2cdb02b6e", "html_url": "https://github.com/rust-lang/rust/commit/d3f9788e596f9b7f07c165e0f382dbe2cdb02b6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3f9788e596f9b7f07c165e0f382dbe2cdb02b6e/comments", "author": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdef3848a01c4567abd326043b797f6bdc3f3e76", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdef3848a01c4567abd326043b797f6bdc3f3e76", "html_url": "https://github.com/rust-lang/rust/commit/fdef3848a01c4567abd326043b797f6bdc3f3e76"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "834fcd246c532834ea6277137761bcf7ce14d9fa", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d3f9788e596f9b7f07c165e0f382dbe2cdb02b6e/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f9788e596f9b7f07c165e0f382dbe2cdb02b6e/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=d3f9788e596f9b7f07c165e0f382dbe2cdb02b6e", "patch": "@@ -40,13 +40,13 @@ use fmt;\n use panic::{Location, PanicInfo};\n \n #[cold]\n-// inline(never) is required even in panic_immediate_abort mode, lest linker error\n-#[inline(never)]\n+// never inline unless panic_immediate_abort to avoid code bloat at the call sites as much as possible\n+#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n #[lang = \"panic\"]\n pub fn panic(expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         unsafe { super::intrinsics::abort() }\n-    };\n+    }\n \n     // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially\n     // reduce size overhead. The format_args! macro uses str's Display trait to\n@@ -59,14 +59,13 @@ pub fn panic(expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n }\n \n #[cold]\n-// inline(never) is required even in panic_immediate_abort mode, lest linker error\n-#[inline(never)]\n+#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n #[lang = \"panic_bounds_check\"]\n fn panic_bounds_check(file_line_col: &(&'static str, u32, u32),\n                      index: usize, len: usize) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         unsafe { super::intrinsics::abort() }\n-    };\n+    }\n \n     panic_fmt(format_args!(\"index out of bounds: the len is {} but the index is {}\",\n                            len, index), file_line_col)\n@@ -78,7 +77,7 @@ fn panic_bounds_check(file_line_col: &(&'static str, u32, u32),\n pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         unsafe { super::intrinsics::abort() }\n-    };\n+    }\n \n     // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n     #[allow(improper_ctypes)] // PanicInfo contains a trait object which is not FFI safe"}, {"sha": "82ceec62f357a31957b896224a2456d7fefd4251", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d3f9788e596f9b7f07c165e0f382dbe2cdb02b6e/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f9788e596f9b7f07c165e0f382dbe2cdb02b6e/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=d3f9788e596f9b7f07c165e0f382dbe2cdb02b6e", "patch": "@@ -335,13 +335,15 @@ pub fn rust_begin_panic(info: &PanicInfo) -> ! {\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]\n #[cold]\n+// If panic_immediate_abort, inline the abort call,\n+// otherwise avoid inlining because of it is cold path.\n #[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n #[cfg_attr(    feature=\"panic_immediate_abort\" ,inline)]\n pub fn begin_panic_fmt(msg: &fmt::Arguments,\n                        file_line_col: &(&'static str, u32, u32)) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         unsafe { intrinsics::abort() }\n-    };\n+    }\n \n     let (file, line, col) = *file_line_col;\n     let info = PanicInfo::internal_constructor(\n@@ -404,14 +406,13 @@ fn continue_panic_fmt(info: &PanicInfo) -> ! {\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]\n #[cfg_attr(not(test), lang = \"begin_panic\")]\n-// avoid code bloat at the call sites as much as possible\n-// inline(never) is required even in panic_immediate_abort mode, lest linker error\n-#[inline(never)]\n+// never inline unless panic_immediate_abort to avoid code bloat at the call sites as much as possible\n+#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n #[cold]\n pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u32)) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         unsafe { intrinsics::abort() }\n-    };\n+    }\n \n     // Note that this should be the only allocation performed in this code path.\n     // Currently this means that panic!() on OOM will invoke this code path,"}]}