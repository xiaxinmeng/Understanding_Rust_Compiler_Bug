{"sha": "41e94dd072e8a0dbf060740e6baaf3dcfb07fbc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZTk0ZGQwNzJlOGEwZGJmMDYwNzQwZTZiYWFmM2RjZmIwN2ZiYzk=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-10-08T05:59:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-08T05:59:55Z"}, "message": "Merge pull request #3285 from devonhollowood/pedantic-dogfood-items-after-statements\n\nPedantic dogfood: `items_after_statements`", "tree": {"sha": "c557944889cbf19988e51b50f84015e320143d58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c557944889cbf19988e51b50f84015e320143d58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41e94dd072e8a0dbf060740e6baaf3dcfb07fbc9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbuvJbCRBK7hj4Ov3rIwAAdHIIACoDjicks0VEVIxJww0VnvWd\n9rxxaS5i8D0kcWA0aXzlxRKGnW5xn6tQ90GPp73dPHFWst5xE+VjGAeDld8vOKQQ\nlPEi5fOpeDpvXtSu4eBUZsRvAOh5HV8SLHn/SuE0NLbaEXD5eMUhgcTG0Ire9xAl\nabi6hj8PGbvP0Y2DuOo9rZ6zh/3+CIqSuviA6zlWuHa9cC9ng38fd7Ip9KokkuZX\nsJ6Qjy/pMl80nRqN0y5D5bK/KE9G0Fog4aa6nkFPB9CCJ9aI04K3c6OTir7PLWL/\nxVVm0eZLDfO+O5d6BDwny4i+Wq9fXUi3cQbNoGNeL1HDXTwFhUDmUM6/JRPsMsA=\n=Di8O\n-----END PGP SIGNATURE-----\n", "payload": "tree c557944889cbf19988e51b50f84015e320143d58\nparent 63ceabf0cf5758fa513b12b648608db7ff6f5166\nparent 82638e4dd42274dd1c644197b9dc821aa3409c97\nauthor Philipp Hansch <dev@phansch.net> 1538978395 +0100\ncommitter GitHub <noreply@github.com> 1538978395 +0100\n\nMerge pull request #3285 from devonhollowood/pedantic-dogfood-items-after-statements\n\nPedantic dogfood: `items_after_statements`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41e94dd072e8a0dbf060740e6baaf3dcfb07fbc9", "html_url": "https://github.com/rust-lang/rust/commit/41e94dd072e8a0dbf060740e6baaf3dcfb07fbc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41e94dd072e8a0dbf060740e6baaf3dcfb07fbc9/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63ceabf0cf5758fa513b12b648608db7ff6f5166", "url": "https://api.github.com/repos/rust-lang/rust/commits/63ceabf0cf5758fa513b12b648608db7ff6f5166", "html_url": "https://github.com/rust-lang/rust/commit/63ceabf0cf5758fa513b12b648608db7ff6f5166"}, {"sha": "82638e4dd42274dd1c644197b9dc821aa3409c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/82638e4dd42274dd1c644197b9dc821aa3409c97", "html_url": "https://github.com/rust-lang/rust/commit/82638e4dd42274dd1c644197b9dc821aa3409c97"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "2422e8e8a10f5f01e2db0517594a94ef00ddee4a", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41e94dd072e8a0dbf060740e6baaf3dcfb07fbc9/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41e94dd072e8a0dbf060740e6baaf3dcfb07fbc9/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=41e94dd072e8a0dbf060740e6baaf3dcfb07fbc9", "patch": "@@ -275,6 +275,8 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n \n     /// lookup a possibly constant expression from a ExprKind::Path\n     fn fetch_path(&mut self, qpath: &QPath, id: HirId) -> Option<Constant> {\n+        use crate::rustc::mir::interpret::GlobalId;\n+\n         let def = self.tables.qpath_def(qpath, id);\n         match def {\n             Def::Const(def_id) | Def::AssociatedConst(def_id) => {\n@@ -289,7 +291,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                     instance,\n                     promoted: None,\n                 };\n-                use crate::rustc::mir::interpret::GlobalId;\n+                \n                 let result = self.tcx.const_eval(self.param_env.and(gid)).ok()?;\n                 let ret = miri_to_const(self.tcx, result);\n                 if ret.is_some() {"}, {"sha": "a5102824b1c76ae164c0f18d2dc20b2bd4557158", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/41e94dd072e8a0dbf060740e6baaf3dcfb07fbc9/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41e94dd072e8a0dbf060740e6baaf3dcfb07fbc9/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=41e94dd072e8a0dbf060740e6baaf3dcfb07fbc9", "patch": "@@ -1102,18 +1102,6 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n         arg: &hir::Expr,\n         span: Span,\n     ) {\n-        if name != \"expect\" {\n-            return;\n-        }\n-\n-        let self_type = cx.tables.expr_ty(self_expr);\n-        let known_types = &[&paths::OPTION, &paths::RESULT];\n-\n-        // if not a known type, return early\n-        if known_types.iter().all(|&k| !match_type(cx, self_type, k)) {\n-            return;\n-        }\n-\n         fn is_call(node: &hir::ExprKind) -> bool {\n             match node {\n                 hir::ExprKind::AddrOf(_, expr) => {\n@@ -1128,6 +1116,18 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n             }\n         }\n \n+        if name != \"expect\" {\n+            return;\n+        }\n+\n+        let self_type = cx.tables.expr_ty(self_expr);\n+        let known_types = &[&paths::OPTION, &paths::RESULT];\n+\n+        // if not a known type, return early\n+        if known_types.iter().all(|&k| !match_type(cx, self_type, k)) {\n+            return;\n+        }\n+\n         if !is_call(&arg.node) {\n             return;\n         }\n@@ -1359,14 +1359,6 @@ fn lint_iter_cloned_collect(cx: &LateContext<'_, '_>, expr: &hir::Expr, iter_arg\n }\n \n fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args: &[hir::Expr]) {\n-    // Check that this is a call to Iterator::fold rather than just some function called fold\n-    if !match_trait_method(cx, expr, &paths::ITERATOR) {\n-        return;\n-    }\n-\n-    assert!(fold_args.len() == 3,\n-        \"Expected fold_args to have three entries - the receiver, the initial value and the closure\");\n-\n     fn check_fold_with_op(\n         cx: &LateContext<'_, '_>,\n         fold_args: &[hir::Expr],\n@@ -1423,6 +1415,14 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n         }\n     }\n \n+    // Check that this is a call to Iterator::fold rather than just some function called fold\n+    if !match_trait_method(cx, expr, &paths::ITERATOR) {\n+        return;\n+    }\n+\n+    assert!(fold_args.len() == 3,\n+        \"Expected fold_args to have three entries - the receiver, the initial value and the closure\");\n+\n     // Check if the first argument to .fold is a suitable literal\n     match fold_args[1].node {\n         hir::ExprKind::Lit(ref lit) => {"}, {"sha": "29c7260f4912a5c03320127c83333ba4fd04c7c4", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/41e94dd072e8a0dbf060740e6baaf3dcfb07fbc9/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41e94dd072e8a0dbf060740e6baaf3dcfb07fbc9/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=41e94dd072e8a0dbf060740e6baaf3dcfb07fbc9", "patch": "@@ -56,6 +56,14 @@ pub struct Range<'a> {\n \n /// Higher a `hir` range to something similar to `ast::ExprKind::Range`.\n pub fn range<'a, 'b, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'b hir::Expr) -> Option<Range<'b>> {\n+    /// Find the field named `name` in the field. Always return `Some` for\n+    /// convenience.\n+    fn get_field<'a>(name: &str, fields: &'a [hir::Field]) -> Option<&'a hir::Expr> {\n+        let expr = &fields.iter().find(|field| field.ident.name == name)?.expr;\n+\n+        Some(expr)\n+    }\n+\n \n     let def_path = match cx.tables.expr_ty(expr).sty {\n         ty::Adt(def, _) => cx.tcx.def_path(def.did),\n@@ -85,14 +93,6 @@ pub fn range<'a, 'b, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'b hir::Expr) -> O\n         return None;\n     }\n \n-    /// Find the field named `name` in the field. Always return `Some` for\n-    /// convenience.\n-    fn get_field<'a>(name: &str, fields: &'a [hir::Field]) -> Option<&'a hir::Expr> {\n-        let expr = &fields.iter().find(|field| field.ident.name == name)?.expr;\n-\n-        Some(expr)\n-    }\n-\n     // The range syntax is expanded to literal paths starting with `core` or `std`\n     // depending on\n     // `#[no_std]`. Testing both instead of resolving the paths."}, {"sha": "f84362fdbbc65377a1a0bfdc7b7d834ae92e3c6a", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/41e94dd072e8a0dbf060740e6baaf3dcfb07fbc9/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41e94dd072e8a0dbf060740e6baaf3dcfb07fbc9/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=41e94dd072e8a0dbf060740e6baaf3dcfb07fbc9", "patch": "@@ -256,6 +256,7 @@ impl EarlyLintPass for Pass {\n }\n \n fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -> (Option<String>, Option<Expr>) {\n+    use crate::fmt_macros::*;\n     let tts = TokenStream::from(tts.clone());\n     let mut parser = parser::Parser::new(&cx.sess.parse_sess, tts, None, false, false);\n     let mut expr: Option<Expr> = None;\n@@ -274,7 +275,6 @@ fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -\n         Ok(token) => token.0.to_string(),\n         Err(_) => return (None, expr),\n     };\n-    use crate::fmt_macros::*;\n     let tmp = fmtstr.clone();\n     let mut args = vec![];\n     let mut fmt_parser = Parser::new(&tmp, None);\n@@ -293,13 +293,6 @@ fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -\n     let lint = if is_write { WRITE_LITERAL } else { PRINT_LITERAL };\n     let mut idx = 0;\n     loop {\n-        if !parser.eat(&token::Comma) {\n-            return (Some(fmtstr), expr);\n-        }\n-        let token_expr = match parser.parse_expr().map_err(|mut err| err.cancel()) {\n-            Ok(expr) => expr,\n-            Err(_) => return (Some(fmtstr), None),\n-        };\n         const SIMPLE: FormatSpec<'_> = FormatSpec {\n             fill: None,\n             align: AlignUnknown,\n@@ -308,6 +301,13 @@ fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -\n             width: CountImplied,\n             ty: \"\",\n         };\n+        if !parser.eat(&token::Comma) {\n+            return (Some(fmtstr), expr);\n+        }\n+        let token_expr = match parser.parse_expr().map_err(|mut err| err.cancel()) {\n+            Ok(expr) => expr,\n+            Err(_) => return (Some(fmtstr), None),\n+        };\n         match &token_expr.node {\n             ExprKind::Lit(_) => {\n                 let mut all_simple = true;"}]}