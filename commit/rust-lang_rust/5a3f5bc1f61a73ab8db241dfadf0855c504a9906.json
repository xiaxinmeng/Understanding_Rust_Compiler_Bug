{"sha": "5a3f5bc1f61a73ab8db241dfadf0855c504a9906", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhM2Y1YmMxZjYxYTczYWI4ZGIyNDFkZmFkZjA4NTVjNTA0YTk5MDY=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-11-23T20:35:09Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-11-23T20:35:09Z"}, "message": "Merge pull request #646 from rust-lang-nursery/mulit-file\n\n Handle multiply-referenced files", "tree": {"sha": "8f4f37b5a767179265292d64743a4e43af833e06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f4f37b5a767179265292d64743a4e43af833e06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a3f5bc1f61a73ab8db241dfadf0855c504a9906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3f5bc1f61a73ab8db241dfadf0855c504a9906", "html_url": "https://github.com/rust-lang/rust/commit/5a3f5bc1f61a73ab8db241dfadf0855c504a9906", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebd876afb2efb006a3d3bee4a7dddfb863845d1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebd876afb2efb006a3d3bee4a7dddfb863845d1b", "html_url": "https://github.com/rust-lang/rust/commit/ebd876afb2efb006a3d3bee4a7dddfb863845d1b"}, {"sha": "2661592d59a30a175f71667a9ad751f52e58b3eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2661592d59a30a175f71667a9ad751f52e58b3eb", "html_url": "https://github.com/rust-lang/rust/commit/2661592d59a30a175f71667a9ad751f52e58b3eb"}], "stats": {"total": 263, "additions": 228, "deletions": 35}, "files": [{"sha": "cb3b4b5f4d7c5fdd4aea852bcd204587efa0d89e", "filename": "src/comment.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=5a3f5bc1f61a73ab8db241dfadf0855c504a9906", "patch": "@@ -219,7 +219,10 @@ pub enum CodeCharKind {\n     Comment,\n }\n \n-impl<T> CharClasses<T> where T: Iterator, T::Item: RichChar {\n+impl<T> CharClasses<T>\n+    where T: Iterator,\n+          T::Item: RichChar\n+{\n     fn new(base: T) -> CharClasses<T> {\n         CharClasses {\n             base: base.peekable(),\n@@ -228,7 +231,10 @@ impl<T> CharClasses<T> where T: Iterator, T::Item: RichChar {\n     }\n }\n \n-impl<T> Iterator for CharClasses<T> where T: Iterator, T::Item: RichChar {\n+impl<T> Iterator for CharClasses<T>\n+    where T: Iterator,\n+          T::Item: RichChar\n+{\n     type Item = (CodeCharKind, T::Item);\n \n     fn next(&mut self) -> Option<(CodeCharKind, T::Item)> {"}, {"sha": "c75fe9a942f99f17abf0017794539ee8411c41a5", "filename": "src/items.rs", "status": "modified", "additions": 99, "deletions": 1, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=5a3f5bc1f61a73ab8db241dfadf0855c504a9906", "patch": "@@ -12,7 +12,7 @@\n \n use Indent;\n use utils::{format_mutability, format_visibility, contains_skip, span_after, end_typaram,\n-            wrap_str, last_line_width, semicolon_for_expr};\n+            wrap_str, last_line_width, semicolon_for_expr, format_unsafety, trim_newlines};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n             DefinitiveListTactic, definitive_tactic, format_item_list};\n use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs};\n@@ -435,6 +435,104 @@ impl<'a> FmtVisitor<'a> {\n     }\n }\n \n+pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -> Option<String> {\n+    if let ast::Item_::ItemImpl(unsafety,\n+                                polarity,\n+                                ref generics,\n+                                ref trait_ref,\n+                                ref self_ty,\n+                                ref items) = item.node {\n+        let mut result = String::new();\n+        result.push_str(format_visibility(item.vis));\n+        result.push_str(format_unsafety(unsafety));\n+        result.push_str(\"impl\");\n+\n+        let lo = span_after(item.span, \"impl\", context.codemap);\n+        let hi = match *trait_ref {\n+            Some(ref tr) => tr.path.span.lo,\n+            None => self_ty.span.lo,\n+        };\n+        let generics_str = try_opt!(rewrite_generics(context,\n+                                                     generics,\n+                                                     offset,\n+                                                     offset + result.len(),\n+                                                     mk_sp(lo, hi)));\n+        result.push_str(&generics_str);\n+\n+        // FIXME might need to linebreak in the impl header, here would be a\n+        // good place.\n+        result.push(' ');\n+        if polarity == ast::ImplPolarity::Negative {\n+            result.push_str(\"!\");\n+        }\n+        if let &Some(ref trait_ref) = trait_ref {\n+            let budget = try_opt!(context.config.max_width.checked_sub(result.len()));\n+            let indent = offset + result.len();\n+            result.push_str(&*try_opt!(trait_ref.rewrite(context, budget, indent)));\n+            result.push_str(\" for \");\n+        }\n+\n+        let budget = try_opt!(context.config.max_width.checked_sub(result.len()));\n+        let indent = offset + result.len();\n+        result.push_str(&*try_opt!(self_ty.rewrite(context, budget, indent)));\n+\n+        let where_clause_str = try_opt!(rewrite_where_clause(context,\n+                                                             &generics.where_clause,\n+                                                             context.config,\n+                                                             context.block_indent,\n+                                                             context.config.where_density,\n+                                                             \"{\",\n+                                                             None));\n+        if !where_clause_str.contains('\\n') &&\n+           result.len() + where_clause_str.len() + offset.width() > context.config.max_width {\n+            result.push('\\n');\n+            let width = context.block_indent.width() + context.config.tab_spaces - 1;\n+            let where_indent = Indent::new(0, width);\n+            result.push_str(&where_indent.to_string(context.config));\n+        }\n+        result.push_str(&where_clause_str);\n+\n+        match context.config.item_brace_style {\n+            BraceStyle::AlwaysNextLine => result.push('\\n'),\n+            BraceStyle::PreferSameLine => result.push(' '),\n+            BraceStyle::SameLineWhere => {\n+                if where_clause_str.len() > 0 {\n+                    result.push('\\n')\n+                } else {\n+                    result.push(' ')\n+                }\n+            }\n+        }\n+        result.push('{');\n+\n+        if !items.is_empty() {\n+            result.push('\\n');\n+            let indent_str = context.block_indent.to_string(context.config);\n+            result.push_str(&indent_str);\n+\n+            let mut visitor = FmtVisitor::from_codemap(context.parse_session, context.config, None);\n+            visitor.block_indent = context.block_indent.block_indent(context.config);\n+\n+            let snippet = context.snippet(item.span);\n+            let open_pos = try_opt!(snippet.find_uncommented(\"{\")) + 1;\n+            visitor.last_pos = item.span.lo + BytePos(open_pos as u32);\n+\n+            for item in items {\n+                visitor.visit_impl_item(&item);\n+            }\n+\n+            result.push_str(trim_newlines(&visitor.buffer.to_string()));\n+            result.push('\\n');\n+            result.push_str(&indent_str);\n+        }\n+        result.push('}');\n+\n+        Some(result)\n+    } else {\n+        unreachable!();\n+    }\n+}\n+\n pub fn format_struct(context: &RewriteContext,\n                      item_name: &str,\n                      ident: ast::Ident,"}, {"sha": "dd065a9939c2d655018c1b411aa3892f0212ce9c", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5a3f5bc1f61a73ab8db241dfadf0855c504a9906", "patch": "@@ -298,7 +298,7 @@ fn fmt_ast(krate: &ast::Crate,\n             println!(\"Formatting {}\", path);\n         }\n         let mut visitor = FmtVisitor::from_codemap(parse_session, config, Some(mode));\n-        visitor.format_separate_mod(module, path);\n+        visitor.format_separate_mod(module);\n         file_map.insert(path.to_owned(), visitor.buffer);\n     }\n     file_map\n@@ -404,7 +404,7 @@ pub fn format_string(input: String, config: &Config, mode: WriteMode) -> FileMap\n \n     // do the actual formatting\n     let mut visitor = FmtVisitor::from_codemap(&parse_session, config, Some(mode));\n-    visitor.format_separate_mod(&krate.module, path);\n+    visitor.format_separate_mod(&krate.module);\n \n     // append final newline\n     visitor.buffer.push_str(\"\\n\");"}, {"sha": "c483032b451272f079524d549fc89cc142ed2749", "filename": "src/types.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=5a3f5bc1f61a73ab8db241dfadf0855c504a9906", "patch": "@@ -215,8 +215,12 @@ fn rewrite_segment(expr_context: bool,\n             format!(\"{}<{}>\", separator, list_str)\n         }\n         ast::PathParameters::ParenthesizedParameters(ref data) => {\n+            let output = match data.output {\n+                Some(ref ty) => FunctionRetTy::Return(ty.clone()),\n+                None => FunctionRetTy::DefaultReturn(codemap::DUMMY_SP),\n+            };\n             try_opt!(format_function_type(data.inputs.iter().map(|x| &**x),\n-                                          data.output.as_ref().map(|x| &**x),\n+                                          &output,\n                                           data.span,\n                                           context,\n                                           width,\n@@ -229,7 +233,7 @@ fn rewrite_segment(expr_context: bool,\n }\n \n fn format_function_type<'a, I>(inputs: I,\n-                               output: Option<&ast::Ty>,\n+                               output: &FunctionRetTy,\n                                span: Span,\n                                context: &RewriteContext,\n                                width: usize,\n@@ -253,13 +257,14 @@ fn format_function_type<'a, I>(inputs: I,\n \n     let list_str = try_opt!(format_fn_args(items, budget, offset, context.config));\n \n-    let output = match output {\n-        Some(ref ty) => {\n+    let output = match *output {\n+        FunctionRetTy::Return(ref ty) => {\n             let budget = try_opt!(width.checked_sub(4));\n             let type_str = try_opt!(ty.rewrite(context, budget, offset + 4));\n             format!(\" -> {}\", type_str)\n         }\n-        None => String::new(),\n+        FunctionRetTy::NoReturn(..) => \" -> !\".to_owned(),\n+        FunctionRetTy::DefaultReturn(..) => String::new(),\n     };\n \n     let infix = if output.len() + list_str.len() > width {\n@@ -432,20 +437,22 @@ impl Rewrite for ast::PolyTraitRef {\n             // 6 is \"for<> \".len()\n             let extra_offset = lifetime_str.len() + 6;\n             let max_path_width = try_opt!(width.checked_sub(extra_offset));\n-            let path_str = try_opt!(rewrite_path(context,\n-                                                 false,\n-                                                 None,\n-                                                 &self.trait_ref.path,\n-                                                 max_path_width,\n-                                                 offset + extra_offset));\n+            let path_str = try_opt!(self.trait_ref\n+                                        .rewrite(context, max_path_width, offset + extra_offset));\n \n             Some(format!(\"for<{}> {}\", lifetime_str, path_str))\n         } else {\n-            rewrite_path(context, false, None, &self.trait_ref.path, width, offset)\n+            self.trait_ref.rewrite(context, width, offset)\n         }\n     }\n }\n \n+impl Rewrite for ast::TraitRef {\n+    fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n+        rewrite_path(context, false, None, &self.path, width, offset)\n+    }\n+}\n+\n impl Rewrite for ast::Ty {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         match self.node {\n@@ -538,17 +545,11 @@ fn rewrite_bare_fn(bare_fn: &ast::BareFnTy,\n \n     result.push_str(\"fn\");\n \n-    let output = match bare_fn.decl.output {\n-        FunctionRetTy::Return(ref ty) => Some(&**ty),\n-        FunctionRetTy::NoReturn(..) => None,\n-        FunctionRetTy::DefaultReturn(..) => unreachable!(),\n-    };\n-\n     let budget = try_opt!(width.checked_sub(result.len()));\n     let indent = offset + result.len();\n \n     let rewrite = try_opt!(format_function_type(bare_fn.decl.inputs.iter().map(|x| &*(x.ty)),\n-                                                output,\n+                                                &bare_fn.decl.output,\n                                                 span,\n                                                 context,\n                                                 budget,"}, {"sha": "195ca265c1fb43a51e186b0268cbef19938e6362", "filename": "src/utils.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=5a3f5bc1f61a73ab8db241dfadf0855c504a9906", "patch": "@@ -142,6 +142,13 @@ pub fn semicolon_for_stmt(stmt: &ast::Stmt) -> bool {\n     }\n }\n \n+#[inline]\n+pub fn trim_newlines(input: &str) -> &str {\n+    let start = input.find(|c| c != '\\n' && c != '\\r').unwrap_or(0);\n+    let end = input.rfind(|c| c != '\\n' && c != '\\r').unwrap_or(0) + 1;\n+    &input[start..end]\n+}\n+\n #[inline]\n #[cfg(target_pointer_width=\"64\")]\n // Based on the trick layed out at"}, {"sha": "7d50a6da61b9aa31403052864bb41145820f836f", "filename": "src/visitor.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=5a3f5bc1f61a73ab8db241dfadf0855c504a9906", "patch": "@@ -21,7 +21,7 @@ use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;\n use macros::rewrite_macro;\n-use items::rewrite_static;\n+use items::{rewrite_static, format_impl};\n \n pub struct FmtVisitor<'a> {\n     pub parse_session: &'a ParseSess,\n@@ -200,14 +200,12 @@ impl<'a> FmtVisitor<'a> {\n             ast::Item_::ItemUse(ref vp) => {\n                 self.format_import(item.vis, vp, item.span);\n             }\n-            // FIXME(#78): format impl definitions.\n-            ast::Item_::ItemImpl(_, _, _, _, _, ref impl_items) => {\n+            ast::Item_::ItemImpl(..) => {\n                 self.format_missing_with_indent(item.span.lo);\n-                self.block_indent = self.block_indent.block_indent(self.config);\n-                for item in impl_items {\n-                    self.visit_impl_item(&item);\n+                if let Some(impl_str) = format_impl(&self.get_context(), item, self.block_indent) {\n+                    self.buffer.push_str(&impl_str);\n+                    self.last_pos = item.span.hi;\n                 }\n-                self.block_indent = self.block_indent.block_unindent(self.config);\n             }\n             // FIXME(#78): format traits.\n             ast::Item_::ItemTrait(_, _, _, ref trait_items) => {\n@@ -334,7 +332,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    fn visit_impl_item(&mut self, ii: &ast::ImplItem) {\n+    pub fn visit_impl_item(&mut self, ii: &ast::ImplItem) {\n         if self.visit_attrs(&ii.attrs) {\n             return;\n         }\n@@ -465,8 +463,8 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    pub fn format_separate_mod(&mut self, m: &ast::Mod, filename: &str) {\n-        let filemap = self.codemap.get_filemap(filename);\n+    pub fn format_separate_mod(&mut self, m: &ast::Mod) {\n+        let filemap = self.codemap.lookup_char_pos(m.inner.lo).file;\n         self.last_pos = filemap.start_pos;\n         self.block_indent = Indent::empty();\n         self.walk_mod_items(m);"}, {"sha": "8e7b561ae4a6c8f2a7ee66de31d99a77b71326ef", "filename": "tests/source/impls.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/tests%2Fsource%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/tests%2Fsource%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimpls.rs?ref=5a3f5bc1f61a73ab8db241dfadf0855c504a9906", "patch": "@@ -0,0 +1,23 @@\n+impl Foo for Bar { fn foo() { \"hi\" } }\n+\n+pub impl Foo for Bar {\n+    // Comment 1\n+    fn foo() { \"hi\" }\n+    // Comment 2\n+    fn foo() { \"hi\" }\n+    // Comment 3\n+}\n+\n+pub unsafe impl<'a, 'b, X, Y: Foo<Bar>> !Foo<'a, X> for Bar<'b, Y> where X: Foo<'a, Z> {\n+    fn foo() { \"hi\" }    \n+}\n+\n+impl<'a, 'b, X, Y: Foo<Bar>> Foo<'a, X> for Bar<'b, Y> where X: Fooooooooooooooooooooooooooooo<'a, Z>\n+{\n+    fn foo() { \"hi\" }    \n+}\n+\n+impl<'a, 'b, X, Y: Foo<Bar>> Foo<'a, X> for Bar<'b, Y> where X: Foooooooooooooooooooooooooooo<'a, Z>\n+{\n+    fn foo() { \"hi\" }    \n+}"}, {"sha": "7432fcded349756eee32e69090a5828d815b6169", "filename": "tests/target/fn-ty.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/tests%2Ftarget%2Ffn-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/tests%2Ftarget%2Ffn-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-ty.rs?ref=5a3f5bc1f61a73ab8db241dfadf0855c504a9906", "patch": "@@ -0,0 +1,12 @@\n+fn f(xxxxxxxxxxxxxxxxxx: fn(a, b, b) -> a,\n+     xxxxxxxxxxxxxxxxxx: fn() -> a,\n+     xxxxxxxxxxxxxxxxxx: fn(a, b, b),\n+     xxxxxxxxxxxxxxxxxx: fn(),\n+     xxxxxxxxxxxxxxxxxx: fn(a, b, b) -> !,\n+     xxxxxxxxxxxxxxxxxx: fn() -> !)\n+    where F1: Fn(a, b, b) -> a,\n+          F2: Fn(a, b, b),\n+          F3: Fn(),\n+          F4: Fn() -> u32\n+{\n+}"}, {"sha": "7530bf16ede06402f6686d32c9a8a26ebeaf68db", "filename": "tests/target/impls.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/tests%2Ftarget%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/tests%2Ftarget%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpls.rs?ref=5a3f5bc1f61a73ab8db241dfadf0855c504a9906", "patch": "@@ -0,0 +1,38 @@\n+impl Foo for Bar {\n+    fn foo() {\n+        \"hi\"\n+    }\n+}\n+\n+pub impl Foo for Bar {\n+    // Comment 1\n+    fn foo() {\n+        \"hi\"\n+    }\n+    // Comment 2\n+    fn foo() {\n+        \"hi\"\n+    }\n+}\n+\n+pub unsafe impl<'a, 'b, X, Y: Foo<Bar>> !Foo<'a, X> for Bar<'b, Y> where X: Foo<'a, Z>\n+{\n+    fn foo() {\n+        \"hi\"\n+    }\n+}\n+\n+impl<'a, 'b, X, Y: Foo<Bar>> Foo<'a, X> for Bar<'b, Y>\n+    where X: Fooooooooooooooooooooooooooooo<'a, Z>\n+{\n+    fn foo() {\n+        \"hi\"\n+    }\n+}\n+\n+impl<'a, 'b, X, Y: Foo<Bar>> Foo<'a, X> for Bar<'b, Y> where X: Foooooooooooooooooooooooooooo<'a, Z>\n+{\n+    fn foo() {\n+        \"hi\"\n+    }\n+}"}, {"sha": "1f829b36f3f000d0dab47ab3f3fe735b1c7e427d", "filename": "tests/target/mulit-file.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/tests%2Ftarget%2Fmulit-file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/tests%2Ftarget%2Fmulit-file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmulit-file.rs?ref=5a3f5bc1f61a73ab8db241dfadf0855c504a9906", "patch": "@@ -0,0 +1,10 @@\n+// Tests that where a single file is referred to in multiple places, we don't\n+// crash.\n+\n+#[cfg(all(foo))]\n+#[path = \"closure.rs\"]\n+pub mod imp;\n+\n+#[cfg(all(bar))]\n+#[path = \"closure.rs\"]\n+pub mod imp;"}, {"sha": "eb42f9fde739e49e735ee013255b7d93747ad855", "filename": "tests/target/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/tests%2Ftarget%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3f5bc1f61a73ab8db241dfadf0855c504a9906/tests%2Ftarget%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fpattern.rs?ref=5a3f5bc1f61a73ab8db241dfadf0855c504a9906", "patch": "@@ -15,7 +15,7 @@ fn main() {\n     }\n }\n \n-impl<'a,'b> ResolveGeneratedContentFragmentMutator<'a,'b> {\n+impl<'a, 'b> ResolveGeneratedContentFragmentMutator<'a, 'b> {\n     fn mutate_fragment(&mut self, fragment: &mut Fragment) {\n         match **info {\n             GeneratedContentInfo::ContentItem(ContentItem::Counter(ref counter_name,"}]}