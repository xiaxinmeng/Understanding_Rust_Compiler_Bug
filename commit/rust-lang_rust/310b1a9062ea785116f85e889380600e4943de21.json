{"sha": "310b1a9062ea785116f85e889380600e4943de21", "node_id": "C_kwDOAAsO6NoAKDMxMGIxYTkwNjJlYTc4NTExNmY4NWU4ODkzODA2MDBlNDk0M2RlMjE", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-05-31T23:38:03Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-06-01T16:52:03Z"}, "message": "Mention filename in suggestion when it differs from primary span", "tree": {"sha": "7cbc95d99c25a06db071274f08ae3aeff671e733", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cbc95d99c25a06db071274f08ae3aeff671e733"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/310b1a9062ea785116f85e889380600e4943de21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/310b1a9062ea785116f85e889380600e4943de21", "html_url": "https://github.com/rust-lang/rust/commit/310b1a9062ea785116f85e889380600e4943de21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/310b1a9062ea785116f85e889380600e4943de21/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a43923a86c3b8f11d005884871b152f59b746f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a43923a86c3b8f11d005884871b152f59b746f7", "html_url": "https://github.com/rust-lang/rust/commit/0a43923a86c3b8f11d005884871b152f59b746f7"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "e9e7065ec03cc744b90b8bda4a96c903926b8ec2", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/310b1a9062ea785116f85e889380600e4943de21/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/310b1a9062ea785116f85e889380600e4943de21/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=310b1a9062ea785116f85e889380600e4943de21", "patch": "@@ -1715,6 +1715,7 @@ impl EmitterWriter {\n \n     fn emit_suggestion_default(\n         &mut self,\n+        span: &MultiSpan,\n         suggestion: &CodeSuggestion,\n         args: &FluentArgs<'_>,\n         level: &Level,\n@@ -1766,6 +1767,30 @@ impl EmitterWriter {\n                 None,\n             }\n \n+            if let Some(span) = span.primary_span() {\n+                // Compare the primary span of the diagnostic with the span of the suggestion\n+                // being emitted.  If they belong to the same file, we don't *need* to show the\n+                // file name, saving in verbosity, but if it *isn't* we do need it, otherwise we're\n+                // telling users to make a change but not clarifying *where*.\n+                let loc = sm.lookup_char_pos(parts[0].span.lo());\n+                if loc.file.name != sm.span_to_filename(span) && loc.file.name.is_real() {\n+                    buffer.puts(row_num - 1, 0, \"--> \", Style::LineNumber);\n+                    buffer.append(\n+                        row_num - 1,\n+                        &format!(\n+                            \"{}:{}:{}\",\n+                            sm.filename_for_diagnostics(&loc.file.name),\n+                            sm.doctest_offset_line(&loc.file.name, loc.line),\n+                            loc.col.0 + 1,\n+                        ),\n+                        Style::LineAndColumn,\n+                    );\n+                    for _ in 0..max_line_num_len {\n+                        buffer.prepend(row_num - 1, \" \", Style::NoStyle);\n+                    }\n+                    row_num += 1;\n+                }\n+            }\n             let show_code_change = if has_deletion && !is_multiline {\n                 DisplaySuggestion::Diff\n             } else if (parts.len() != 1 || parts[0].snippet.trim() != complete.trim())\n@@ -1787,7 +1812,7 @@ impl EmitterWriter {\n             assert!(!file_lines.lines.is_empty() || parts[0].span.is_dummy());\n \n             let line_start = sm.lookup_char_pos(parts[0].span.lo()).line;\n-            draw_col_separator_no_space(&mut buffer, 1, max_line_num_len + 1);\n+            draw_col_separator_no_space(&mut buffer, row_num - 1, max_line_num_len + 1);\n             let mut lines = complete.lines();\n             if lines.clone().next().is_none() {\n                 // Account for a suggestion to completely remove a line(s) with whitespace (#94192).\n@@ -2046,9 +2071,13 @@ impl EmitterWriter {\n                             ) {\n                                 panic!(\"failed to emit error: {}\", e);\n                             }\n-                        } else if let Err(e) =\n-                            self.emit_suggestion_default(sugg, args, &Level::Help, max_line_num_len)\n-                        {\n+                        } else if let Err(e) = self.emit_suggestion_default(\n+                            span,\n+                            sugg,\n+                            args,\n+                            &Level::Help,\n+                            max_line_num_len,\n+                        ) {\n                             panic!(\"failed to emit error: {}\", e);\n                         };\n                     }"}, {"sha": "2eb3fd56783147fd58047c9f214dadb9ae12fe54", "filename": "src/test/ui/codemap_tests/two_files.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/310b1a9062ea785116f85e889380600e4943de21/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/310b1a9062ea785116f85e889380600e4943de21/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr?ref=310b1a9062ea785116f85e889380600e4943de21", "patch": "@@ -5,6 +5,7 @@ LL | impl Bar for Baz { }\n    |      ^^^ type aliases cannot be used as traits\n    |\n help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias\n+  --> $DIR/two_files_data.rs:5:1\n    |\n LL | trait Bar = dyn Foo;\n    |"}, {"sha": "7390a007742fcce629a9c166f1c6a79596c7570e", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-94287.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/310b1a9062ea785116f85e889380600e4943de21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/310b1a9062ea785116f85e889380600e4943de21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94287.stderr?ref=310b1a9062ea785116f85e889380600e4943de21", "patch": "@@ -6,6 +6,7 @@ LL |     If<{ FRAC <= 32 }>: True,\n    |\n    = note: the crate this constant originates from uses `#![feature(generic_const_exprs)]`\n help: consider enabling this feature\n+  --> $DIR/issue-94287.rs:1:1\n    |\n LL | #![feature(generic_const_exprs)]\n    |"}, {"sha": "570bbac2b21f649d6d1df5ae37c123e786a2ba93", "filename": "src/test/ui/editions/edition-keywords-2015-2018-expansion.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/310b1a9062ea785116f85e889380600e4943de21/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/310b1a9062ea785116f85e889380600e4943de21/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr?ref=310b1a9062ea785116f85e889380600e4943de21", "patch": "@@ -6,6 +6,7 @@ LL |     produces_async! {}\n    |\n    = note: this error originates in the macro `produces_async` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: escape `async` to use it as an identifier\n+  --> $DIR/auxiliary/edition-kw-macro-2018.rs:7:19\n    |\n LL |     () => (pub fn r#async() {})\n    |                   ++"}, {"sha": "69f275746bdc44be3db5b5552e5cd8e2c0759317", "filename": "src/test/ui/editions/edition-keywords-2018-2018-expansion.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/310b1a9062ea785116f85e889380600e4943de21/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/310b1a9062ea785116f85e889380600e4943de21/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr?ref=310b1a9062ea785116f85e889380600e4943de21", "patch": "@@ -6,6 +6,7 @@ LL |     produces_async! {}\n    |\n    = note: this error originates in the macro `produces_async` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: escape `async` to use it as an identifier\n+  --> $DIR/auxiliary/edition-kw-macro-2018.rs:7:19\n    |\n LL |     () => (pub fn r#async() {})\n    |                   ++"}, {"sha": "c6e6ea1e096af76068f6be6627d27cd95e66cd24", "filename": "src/test/ui/issues/issue-70724-add_type_neq_err_label-unwrap.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/310b1a9062ea785116f85e889380600e4943de21/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/310b1a9062ea785116f85e889380600e4943de21/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr?ref=310b1a9062ea785116f85e889380600e4943de21", "patch": "@@ -9,6 +9,7 @@ LL |     assert_eq!(a, 0);\n    |\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you might have forgotten to call this function\n+  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n    |\n LL |                 if !(*left_val() == *right_val) {\n    |                               ++"}, {"sha": "0af58bc61f49ea88416d71682d3c51229927efe8", "filename": "src/test/ui/methods/method-on-ambiguous-numeric-type.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/310b1a9062ea785116f85e889380600e4943de21/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/310b1a9062ea785116f85e889380600e4943de21/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr?ref=310b1a9062ea785116f85e889380600e4943de21", "patch": "@@ -46,6 +46,7 @@ LL |     bar.pow(2);\n    |         ^^^\n    |\n help: you must specify a type for this binding, like `i32`\n+  --> $DIR/auxiliary/macro-in-other-crate.rs:3:29\n    |\n LL |     ($ident:ident) => { let $ident: i32 = 42; }\n    |                             ~~~~~~~~~~~"}]}