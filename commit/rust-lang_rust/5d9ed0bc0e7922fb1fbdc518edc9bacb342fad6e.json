{"sha": "5d9ed0bc0e7922fb1fbdc518edc9bacb342fad6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOWVkMGJjMGU3OTIyZmIxZmJkYzUxOGVkYzliYWNiMzQyZmFkNmU=", "commit": {"author": {"name": "Gleb Kozyrev", "email": "gleb@gkoz.com", "date": "2015-03-12T15:09:26Z"}, "committer": {"name": "Gleb Kozyrev", "email": "gleb@gkoz.com", "date": "2015-03-12T18:48:04Z"}, "message": "Update the ways to get a pointer from a box\n\nShow how to get a pointer without destroying the box.\nUse `boxed::into_raw` instead of `mem::transmute`.", "tree": {"sha": "69fbfdbdc1f16ec32e6ac88b3b8963b23befe3fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69fbfdbdc1f16ec32e6ac88b3b8963b23befe3fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d9ed0bc0e7922fb1fbdc518edc9bacb342fad6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9ed0bc0e7922fb1fbdc518edc9bacb342fad6e", "html_url": "https://github.com/rust-lang/rust/commit/5d9ed0bc0e7922fb1fbdc518edc9bacb342fad6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d9ed0bc0e7922fb1fbdc518edc9bacb342fad6e/comments", "author": {"login": "gkoz", "id": 4260361, "node_id": "MDQ6VXNlcjQyNjAzNjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4260361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gkoz", "html_url": "https://github.com/gkoz", "followers_url": "https://api.github.com/users/gkoz/followers", "following_url": "https://api.github.com/users/gkoz/following{/other_user}", "gists_url": "https://api.github.com/users/gkoz/gists{/gist_id}", "starred_url": "https://api.github.com/users/gkoz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gkoz/subscriptions", "organizations_url": "https://api.github.com/users/gkoz/orgs", "repos_url": "https://api.github.com/users/gkoz/repos", "events_url": "https://api.github.com/users/gkoz/events{/privacy}", "received_events_url": "https://api.github.com/users/gkoz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gkoz", "id": 4260361, "node_id": "MDQ6VXNlcjQyNjAzNjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4260361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gkoz", "html_url": "https://github.com/gkoz", "followers_url": "https://api.github.com/users/gkoz/followers", "following_url": "https://api.github.com/users/gkoz/following{/other_user}", "gists_url": "https://api.github.com/users/gkoz/gists{/gist_id}", "starred_url": "https://api.github.com/users/gkoz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gkoz/subscriptions", "organizations_url": "https://api.github.com/users/gkoz/orgs", "repos_url": "https://api.github.com/users/gkoz/repos", "events_url": "https://api.github.com/users/gkoz/events{/privacy}", "received_events_url": "https://api.github.com/users/gkoz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49f7550a25722fbdb779eef80afa85f6d802f7e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/49f7550a25722fbdb779eef80afa85f6d802f7e8", "html_url": "https://github.com/rust-lang/rust/commit/49f7550a25722fbdb779eef80afa85f6d802f7e8"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "32123a8271ce4fff85a78a5ff325d0742c0e8541", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5d9ed0bc0e7922fb1fbdc518edc9bacb342fad6e/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9ed0bc0e7922fb1fbdc518edc9bacb342fad6e/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=5d9ed0bc0e7922fb1fbdc518edc9bacb342fad6e", "patch": "@@ -33,31 +33,34 @@\n //! let my_speed_ptr: *mut i32 = &mut my_speed;\n //! ```\n //!\n+//! To get a pointer to a boxed value, dereference the box:\n+//!\n+//! ```\n+//! let my_num: Box<i32> = Box::new(10);\n+//! let my_num_ptr: *const i32 = &*my_num;\n+//! let mut my_speed: Box<i32> = Box::new(88);\n+//! let my_speed_ptr: *mut i32 = &mut *my_speed;\n+//! ```\n+//!\n //! This does not take ownership of the original allocation\n //! and requires no resource management later,\n //! but you must not use the pointer after its lifetime.\n //!\n-//! ## 2. Transmute an owned box (`Box<T>`).\n+//! ## 2. Consume a box (`Box<T>`).\n //!\n-//! The `transmute` function takes, by value, whatever it's given\n-//! and returns it as whatever type is requested, as long as the\n-//! types are the same size. Because `Box<T>` and `*mut T` have the same\n-//! representation they can be trivially,\n-//! though unsafely, transformed from one type to the other.\n+//! The `into_raw` function consumes a box and returns\n+//! the raw pointer. It doesn't destroy `T` or deallocate any memory.\n //!\n //! ```\n-//! use std::mem;\n+//! use std::boxed;\n //!\n //! unsafe {\n-//!     let my_num: Box<i32> = Box::new(10);\n-//!     let my_num: *const i32 = mem::transmute(my_num);\n //!     let my_speed: Box<i32> = Box::new(88);\n-//!     let my_speed: *mut i32 = mem::transmute(my_speed);\n+//!     let my_speed: *mut i32 = boxed::into_raw(my_speed);\n //!\n //!     // By taking ownership of the original `Box<T>` though\n-//!     // we are obligated to transmute it back later to be destroyed.\n-//!     drop(mem::transmute::<_, Box<i32>>(my_speed));\n-//!     drop(mem::transmute::<_, Box<i32>>(my_num));\n+//!     // we are obligated to put it together later to be destroyed.\n+//!     drop(Box::from_raw(my_speed));\n //! }\n //! ```\n //!"}]}