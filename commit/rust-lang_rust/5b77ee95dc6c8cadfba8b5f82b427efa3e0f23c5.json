{"sha": "5b77ee95dc6c8cadfba8b5f82b427efa3e0f23c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNzdlZTk1ZGM2YzhjYWRmYmE4YjVmODJiNDI3ZWZhM2UwZjIzYzU=", "commit": {"author": {"name": "Guillem Nieto", "email": "gnieto.talo@gmail.com", "date": "2018-10-30T20:47:15Z"}, "committer": {"name": "Guillem Nieto", "email": "gnieto@scopely.com", "date": "2018-11-25T22:34:23Z"}, "message": "Rename some symbols\n\nRenamed some symbols in order to make them a little bit more accurate.", "tree": {"sha": "bd7314a02dbf2ab804eee336755a39a5e70ddba2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd7314a02dbf2ab804eee336755a39a5e70ddba2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b77ee95dc6c8cadfba8b5f82b427efa3e0f23c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b77ee95dc6c8cadfba8b5f82b427efa3e0f23c5", "html_url": "https://github.com/rust-lang/rust/commit/5b77ee95dc6c8cadfba8b5f82b427efa3e0f23c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b77ee95dc6c8cadfba8b5f82b427efa3e0f23c5/comments", "author": {"login": "gnieto", "id": 4637936, "node_id": "MDQ6VXNlcjQ2Mzc5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/4637936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnieto", "html_url": "https://github.com/gnieto", "followers_url": "https://api.github.com/users/gnieto/followers", "following_url": "https://api.github.com/users/gnieto/following{/other_user}", "gists_url": "https://api.github.com/users/gnieto/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnieto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnieto/subscriptions", "organizations_url": "https://api.github.com/users/gnieto/orgs", "repos_url": "https://api.github.com/users/gnieto/repos", "events_url": "https://api.github.com/users/gnieto/events{/privacy}", "received_events_url": "https://api.github.com/users/gnieto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnieto", "id": 4637936, "node_id": "MDQ6VXNlcjQ2Mzc5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/4637936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnieto", "html_url": "https://github.com/gnieto", "followers_url": "https://api.github.com/users/gnieto/followers", "following_url": "https://api.github.com/users/gnieto/following{/other_user}", "gists_url": "https://api.github.com/users/gnieto/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnieto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnieto/subscriptions", "organizations_url": "https://api.github.com/users/gnieto/orgs", "repos_url": "https://api.github.com/users/gnieto/repos", "events_url": "https://api.github.com/users/gnieto/events{/privacy}", "received_events_url": "https://api.github.com/users/gnieto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2753f1cbd4623063f19ca27caaac67308c94a536", "url": "https://api.github.com/repos/rust-lang/rust/commits/2753f1cbd4623063f19ca27caaac67308c94a536", "html_url": "https://github.com/rust-lang/rust/commit/2753f1cbd4623063f19ca27caaac67308c94a536"}], "stats": {"total": 149, "additions": 76, "deletions": 73}, "files": [{"sha": "ec9c7ec60bce3b4d3ca1a2d16a83470e345db6c0", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 60, "deletions": 57, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/5b77ee95dc6c8cadfba8b5f82b427efa3e0f23c5/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b77ee95dc6c8cadfba8b5f82b427efa3e0f23c5/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=5b77ee95dc6c8cadfba8b5f82b427efa3e0f23c5", "patch": "@@ -8,15 +8,14 @@\n // except according to those terms.\n \n use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, Lint};\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc::hir::*;\n use if_chain::if_chain;\n use crate::syntax_pos::symbol::Symbol;\n use crate::syntax::ast::{LitKind, NodeId};\n-use crate::syntax::source_map::Span;\n-use crate::utils::{match_qpath, span_lint_and_then, SpanlessEq};\n-use crate::utils::get_enclosing_block;\n+use crate::utils::{match_qpath, span_lint_and_then, SpanlessEq, get_enclosing_block};\n+use crate::utils::sugg::Sugg;\n use crate::rustc_errors::{Applicability};\n \n /// **What it does:** Checks slow zero-filled vector initialization\n@@ -70,15 +69,15 @@ impl LintPass for Pass {\n     }\n }\n \n-/// VecInitialization contains data regarding a vector initialized with `with_capacity` and then\n+/// `VecAllocation` contains data regarding a vector allocated with `with_capacity` and then\n /// assigned to a variable. For example, `let mut vec = Vec::with_capacity(0)` or\n /// `vec = Vec::with_capacity(0)`\n-struct VecInitialization<'tcx> {\n+struct VecAllocation<'tcx> {\n     /// Symbol of the local variable name\n     variable_name: Symbol,\n \n-    /// Reference to the expression which initializes the vector\n-    initialization_expr: &'tcx Expr,\n+    /// Reference to the expression which allocates the vector\n+    allocation_expr: &'tcx Expr,\n \n     /// Reference to the expression used as argument on `with_capacity` call. This is used\n     /// to only match slow zero-filling idioms of the same length than vector initialization.\n@@ -111,13 +110,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if let Some(ref len_arg) = Pass::is_vec_with_capacity(right);\n \n             then {\n-                let vi = VecInitialization {\n+                let vi = VecAllocation {\n                     variable_name: variable_name.ident.name,\n-                    initialization_expr: right,\n+                    allocation_expr: right,\n                     len_expr: len_arg,\n                 };\n \n-                Pass::search_slow_initialization(cx, vi, expr.id);\n+                Pass::search_initialization(cx, vi, expr.id);\n             }\n         }\n     }\n@@ -132,13 +131,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if let Some(ref len_arg) = Pass::is_vec_with_capacity(init);\n \n             then {\n-                let vi = VecInitialization {\n+                let vi = VecAllocation {\n                     variable_name: variable_name.name,\n-                    initialization_expr: init,\n+                    allocation_expr: init,\n                     len_expr: len_arg,\n                 };\n \n-                Pass::search_slow_initialization(cx, vi, stmt.node.id());\n+                Pass::search_initialization(cx, vi, stmt.node.id());\n             }\n         }\n     }\n@@ -162,10 +161,10 @@ impl Pass {\n         None\n     }\n \n-    /// Search a slow initialization for the given vector\n-    fn search_slow_initialization<'tcx>(\n+    /// Search initialization for the given vector\n+    fn search_initialization<'tcx>(\n         cx: &LateContext<'_, 'tcx>,\n-        vec_initialization: VecInitialization<'tcx>,\n+        vec_alloc: VecAllocation<'tcx>,\n         parent_node: NodeId\n     ) {\n         let enclosing_body = get_enclosing_block(cx, parent_node);\n@@ -174,72 +173,76 @@ impl Pass {\n             return;\n         }\n \n-        let mut v = SlowInitializationVisitor {\n+        let mut v = VectorInitializationVisitor {\n             cx,\n-            vec_ini: vec_initialization,\n+            vec_alloc,\n             slow_expression: None,\n             initialization_found: false,\n         };\n \n         v.visit_block(enclosing_body.unwrap());\n \n-        if let Some(ref initialization_expr) = v.slow_expression {\n-            let alloc_span = v.vec_ini.initialization_expr.span;\n-            Pass::lint_initialization(cx, initialization_expr, alloc_span);\n+        if let Some(ref allocation_expr) = v.slow_expression {\n+            Pass::lint_initialization(cx, allocation_expr, &v.vec_alloc);\n         }\n     }\n \n-    fn lint_initialization<'tcx>(cx: &LateContext<'_, 'tcx>, initialization: &InitializationType<'tcx>, alloc_span: Span) {\n+    fn lint_initialization<'tcx>(cx: &LateContext<'_, 'tcx>, initialization: &InitializationType<'tcx>, vec_alloc: &VecAllocation<'_>) {\n         match initialization {\n             InitializationType::UnsafeSetLen(e) =>\n-                Pass::lint_unsafe_initialization(cx, e, alloc_span),\n+                Pass::emit_lint(\n+                    cx,\n+                    e,\n+                    vec_alloc,\n+                    \"unsafe vector initialization\",\n+                    UNSAFE_VECTOR_INITIALIZATION\n+                ),\n \n             InitializationType::Extend(e) |\n             InitializationType::Resize(e) =>\n-                Pass::lint_slow_initialization(cx, e, alloc_span),\n+                Pass::emit_lint(\n+                    cx,\n+                    e,\n+                    vec_alloc,\n+                    \"slow zero-filling initialization\",\n+                    SLOW_VECTOR_INITIALIZATION\n+                )\n         };\n     }\n \n-    fn lint_slow_initialization<'tcx>(\n+    fn emit_lint<'tcx>(\n         cx: &LateContext<'_, 'tcx>,\n         slow_fill: &Expr,\n-        alloc_span: Span,\n+        vec_alloc: &VecAllocation<'_>,\n+        msg: &str,\n+        lint: &'static Lint\n     ) {\n-        span_lint_and_then(\n-            cx,\n-            SLOW_VECTOR_INITIALIZATION,\n-            slow_fill.span,\n-            \"detected slow zero-filling initialization\",\n-            |db| {\n-                db.span_suggestion_with_applicability(alloc_span, \"consider replacing with\", \"vec![0; ..]\".to_string(), Applicability::Unspecified);\n-            }\n-        );\n-    }\n+        let len_expr = Sugg::hir(cx, vec_alloc.len_expr, \"len\");\n \n-    fn lint_unsafe_initialization<'tcx>(\n-        cx: &LateContext<'_, 'tcx>,\n-        slow_fill: &Expr,\n-        alloc_span: Span,\n-    ) {\n         span_lint_and_then(\n             cx,\n-            UNSAFE_VECTOR_INITIALIZATION,\n+            lint,\n             slow_fill.span,\n-            \"detected unsafe vector initialization\",\n+            msg,\n             |db| {\n-                db.span_suggestion_with_applicability(alloc_span, \"consider replacing with\", \"vec![0; ..]\".to_string(), Applicability::Unspecified);\n+                db.span_suggestion_with_applicability(\n+                    vec_alloc.allocation_expr.span,\n+                    \"consider replace allocation with\",\n+                    format!(\"vec![0; {}]\", len_expr),\n+                    Applicability::Unspecified\n+                );\n             }\n         );\n     }\n }\n \n-/// SlowInitializationVisitor searches for slow zero filling vector initialization, for the given\n+/// `VectorInitializationVisitor` searches for unsafe or slow vector initializations for the given\n /// vector.\n-struct SlowInitializationVisitor<'a, 'tcx: 'a> {\n+struct VectorInitializationVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n \n     /// Contains the information\n-    vec_ini: VecInitialization<'tcx>,\n+    vec_alloc: VecAllocation<'tcx>,\n \n     /// Contains, if found, the slow initialization expression\n     slow_expression: Option<InitializationType<'tcx>>,\n@@ -248,14 +251,14 @@ struct SlowInitializationVisitor<'a, 'tcx: 'a> {\n     initialization_found: bool,\n }\n \n-impl<'a, 'tcx> SlowInitializationVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n     /// Checks if the given expression is extending a vector with `repeat(0).take(..)`\n     fn search_slow_extend_filling(&mut self, expr: &'tcx Expr) {\n         if_chain! {\n             if self.initialization_found;\n             if let ExprKind::MethodCall(ref path, _, ref args) = expr.node;\n             if let ExprKind::Path(ref qpath_subj) = args[0].node;\n-            if match_qpath(&qpath_subj, &[&self.vec_ini.variable_name.to_string()]);\n+            if match_qpath(&qpath_subj, &[&self.vec_alloc.variable_name.to_string()]);\n             if path.ident.name == \"extend\";\n             if let Some(ref extend_arg) = args.get(1);\n             if self.is_repeat_take(extend_arg);\n@@ -272,7 +275,7 @@ impl<'a, 'tcx> SlowInitializationVisitor<'a, 'tcx> {\n             if self.initialization_found;\n             if let ExprKind::MethodCall(ref path, _, ref args) = expr.node;\n             if let ExprKind::Path(ref qpath_subj) = args[0].node;\n-            if match_qpath(&qpath_subj, &[&self.vec_ini.variable_name.to_string()]);\n+            if match_qpath(&qpath_subj, &[&self.vec_alloc.variable_name.to_string()]);\n             if path.ident.name == \"resize\";\n             if let (Some(ref len_arg), Some(fill_arg)) = (args.get(1), args.get(2));\n \n@@ -281,7 +284,7 @@ impl<'a, 'tcx> SlowInitializationVisitor<'a, 'tcx> {\n             if let LitKind::Int(0, _) = lit.node;\n \n             // Check that len expression is equals to `with_capacity` expression\n-            if SpanlessEq::new(self.cx).eq_expr(len_arg, self.vec_ini.len_expr);\n+            if SpanlessEq::new(self.cx).eq_expr(len_arg, self.vec_alloc.len_expr);\n \n             then {\n                 self.slow_expression = Some(InitializationType::Resize(expr));\n@@ -295,12 +298,12 @@ impl<'a, 'tcx> SlowInitializationVisitor<'a, 'tcx> {\n             if self.initialization_found;\n             if let ExprKind::MethodCall(ref path, _, ref args) = expr.node;\n             if let ExprKind::Path(ref qpath_subj) = args[0].node;\n-            if match_qpath(&qpath_subj, &[&self.vec_ini.variable_name.to_string()]);\n+            if match_qpath(&qpath_subj, &[&self.vec_alloc.variable_name.to_string()]);\n             if path.ident.name == \"set_len\";\n             if let Some(ref len_arg) = args.get(1);\n \n             // Check that len expression is equals to `with_capacity` expression\n-            if SpanlessEq::new(self.cx).eq_expr(len_arg, self.vec_ini.len_expr);\n+            if SpanlessEq::new(self.cx).eq_expr(len_arg, self.vec_alloc.len_expr);\n \n             then {\n                 self.slow_expression = Some(InitializationType::UnsafeSetLen(expr));\n@@ -320,7 +323,7 @@ impl<'a, 'tcx> SlowInitializationVisitor<'a, 'tcx> {\n \n             // Check that len expression is equals to `with_capacity` expression\n             if let Some(ref len_arg) = take_args.get(1);\n-            if SpanlessEq::new(self.cx).eq_expr(len_arg, self.vec_ini.len_expr);\n+            if SpanlessEq::new(self.cx).eq_expr(len_arg, self.vec_alloc.len_expr);\n \n             then {\n                 return true;\n@@ -349,15 +352,15 @@ impl<'a, 'tcx> SlowInitializationVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for SlowInitializationVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for VectorInitializationVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n         // Stop the search if we already found a slow zero-filling initialization\n         if self.slow_expression.is_some() {\n             return\n         }\n \n         // Skip all the expressions previous to the vector initialization\n-        if self.vec_ini.initialization_expr.id == expr.id {\n+        if self.vec_alloc.allocation_expr.id == expr.id {\n             self.initialization_found = true;\n         }\n         "}, {"sha": "c1e48d42a6ce8bfb597a1c3077a4dc2630004125", "filename": "tests/ui/slow_vector_initialization.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5b77ee95dc6c8cadfba8b5f82b427efa3e0f23c5/tests%2Fui%2Fslow_vector_initialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b77ee95dc6c8cadfba8b5f82b427efa3e0f23c5/tests%2Fui%2Fslow_vector_initialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fslow_vector_initialization.stderr?ref=5b77ee95dc6c8cadfba8b5f82b427efa3e0f23c5", "patch": "@@ -1,68 +1,68 @@\n-error: detected slow zero-filling initialization\n+error: slow zero-filling initialization\n   --> $DIR/slow_vector_initialization.rs:23:5\n    |\n 22 |     let mut vec1 = Vec::with_capacity(len);\n-   |                    ----------------------- help: consider replacing with: `vec![0; ..]`\n+   |                    ----------------------- help: consider replace allocation with: `vec![0; len]`\n 23 |     vec1.extend(repeat(0).take(len));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::slow-vector-initialization` implied by `-D warnings`\n \n-error: detected slow zero-filling initialization\n+error: slow zero-filling initialization\n   --> $DIR/slow_vector_initialization.rs:27:5\n    |\n 26 |     let mut vec2 = Vec::with_capacity(len - 10);\n-   |                    ---------------------------- help: consider replacing with: `vec![0; ..]`\n+   |                    ---------------------------- help: consider replace allocation with: `vec![0; len - 10]`\n 27 |     vec2.extend(repeat(0).take(len - 10));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: detected slow zero-filling initialization\n+error: slow zero-filling initialization\n   --> $DIR/slow_vector_initialization.rs:42:5\n    |\n 39 |     let mut resized_vec = Vec::with_capacity(30);\n-   |                           ---------------------- help: consider replacing with: `vec![0; ..]`\n+   |                           ---------------------- help: consider replace allocation with: `vec![0; 30]`\n ...\n 42 |     resized_vec.resize(30, 0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: detected slow zero-filling initialization\n+error: slow zero-filling initialization\n   --> $DIR/slow_vector_initialization.rs:44:5\n    |\n 40 |     let mut extend_vec = Vec::with_capacity(30);\n-   |                          ---------------------- help: consider replacing with: `vec![0; ..]`\n+   |                          ---------------------- help: consider replace allocation with: `vec![0; 30]`\n ...\n 44 |     extend_vec.extend(repeat(0).take(30));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: detected slow zero-filling initialization\n+error: slow zero-filling initialization\n   --> $DIR/slow_vector_initialization.rs:51:5\n    |\n 50 |     let mut vec1 = Vec::with_capacity(len);\n-   |                    ----------------------- help: consider replacing with: `vec![0; ..]`\n+   |                    ----------------------- help: consider replace allocation with: `vec![0; len]`\n 51 |     vec1.resize(len, 0);\n    |     ^^^^^^^^^^^^^^^^^^^\n \n-error: detected slow zero-filling initialization\n+error: slow zero-filling initialization\n   --> $DIR/slow_vector_initialization.rs:59:5\n    |\n 58 |     let mut vec3 = Vec::with_capacity(len - 10);\n-   |                    ---------------------------- help: consider replacing with: `vec![0; ..]`\n+   |                    ---------------------------- help: consider replace allocation with: `vec![0; len - 10]`\n 59 |     vec3.resize(len - 10, 0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: detected slow zero-filling initialization\n+error: slow zero-filling initialization\n   --> $DIR/slow_vector_initialization.rs:63:5\n    |\n 62 |     vec1 = Vec::with_capacity(10);\n-   |            ---------------------- help: consider replacing with: `vec![0; ..]`\n+   |            ---------------------- help: consider replace allocation with: `vec![0; 10]`\n 63 |     vec1.resize(10, 0);\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: detected unsafe vector initialization\n+error: unsafe vector initialization\n   --> $DIR/slow_vector_initialization.rs:70:9\n    |\n 67 |     let mut unsafe_vec: Vec<u8> = Vec::with_capacity(200);\n-   |                                   ----------------------- help: consider replacing with: `vec![0; ..]`\n+   |                                   ----------------------- help: consider replace allocation with: `vec![0; 200]`\n ...\n 70 |         unsafe_vec.set_len(200);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^"}]}