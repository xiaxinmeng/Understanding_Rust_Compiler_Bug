{"sha": "1c9277e0d313bb4118a44f6533be9af2e868a1d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjOTI3N2UwZDMxM2JiNDExOGE0NGY2NTMzYmU5YWYyZTg2OGExZDI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-15T00:06:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-15T16:48:55Z"}, "message": "rustc: Make room in remaining AST item nodes for attributes\n\nIssue #487", "tree": {"sha": "739bce684e7f92b2372b0cb1e969abc0ba7d0c5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/739bce684e7f92b2372b0cb1e969abc0ba7d0c5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c9277e0d313bb4118a44f6533be9af2e868a1d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c9277e0d313bb4118a44f6533be9af2e868a1d2", "html_url": "https://github.com/rust-lang/rust/commit/1c9277e0d313bb4118a44f6533be9af2e868a1d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c9277e0d313bb4118a44f6533be9af2e868a1d2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "697fdaac24c0f973da8569b1249d8c778e510082", "url": "https://api.github.com/repos/rust-lang/rust/commits/697fdaac24c0f973da8569b1249d8c778e510082", "html_url": "https://github.com/rust-lang/rust/commit/697fdaac24c0f973da8569b1249d8c778e510082"}], "stats": {"total": 307, "additions": 157, "deletions": 150}, "files": [{"sha": "06e029f78b02cde3720bfcbb1ca25a8260f2247d", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=1c9277e0d313bb4118a44f6533be9af2e868a1d2", "patch": "@@ -465,24 +465,24 @@ type attribute_ = rec(attr_style style,\n \n type item = spanned[item_];\n tag item_ {\n-    item_const(ident, @ty, @expr, def_id, ann);\n-    item_fn(ident, _fn, vec[ty_param], def_id, ann);\n+    item_const(ident, @ty, @expr, vec[attribute], def_id, ann);\n+    item_fn(ident, _fn, vec[ty_param], vec[attribute], def_id, ann);\n     item_mod(ident, _mod, vec[attribute], def_id);\n-    item_native_mod(ident, native_mod, def_id);\n-    item_ty(ident, @ty, vec[ty_param], def_id, ann);\n-    item_tag(ident, vec[variant], vec[ty_param], def_id, ann);\n-    item_obj(ident, _obj, vec[ty_param], obj_def_ids, ann);\n+    item_native_mod(ident, native_mod, vec[attribute], def_id);\n+    item_ty(ident, @ty, vec[ty_param], vec[attribute], def_id, ann);\n+    item_tag(ident, vec[variant], vec[ty_param], vec[attribute], def_id, ann);\n+    item_obj(ident, _obj, vec[ty_param], vec[attribute], obj_def_ids, ann);\n }\n \n fn item_ident(@item it) -> ident {\n     ret alt (it.node) {\n-        case (item_const(?ident, _, _, _, _)) { ident }\n-        case (item_fn(?ident, _, _, _, _)) { ident }\n+        case (item_const(?ident, _, _, _, _, _)) { ident }\n+        case (item_fn(?ident, _, _, _, _, _)) { ident }\n         case (item_mod(?ident, _, _, _)) { ident }\n-        case (item_native_mod(?ident, _, _)) { ident }\n-        case (item_ty(?ident, _, _, _, _)) { ident }\n-        case (item_tag(?ident, _, _, _, _)) { ident }\n-        case (item_obj(?ident, _, _, _, _)) { ident }\n+        case (item_native_mod(?ident, _, _, _)) { ident }\n+        case (item_ty(?ident, _, _, _, _, _)) { ident }\n+        case (item_tag(?ident, _, _, _, _, _)) { ident }\n+        case (item_obj(?ident, _, _, _, _, _)) { ident }\n     }\n }\n \n@@ -500,7 +500,7 @@ fn is_exported(ident i, _mod m) -> bool {\n             nonlocal = false;\n         }\n         alt (it.node) {\n-            case (item_tag(_, ?variants, _, _, _)) {\n+            case (item_tag(_, ?variants, _, _, _, _)) {\n                 for (variant v in variants) {\n                     if (v.node.name == i) {\n                         nonlocal = false;"}, {"sha": "f58e95ca0a6e35cdef4c4e8f0af0744ee5831cde", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=1c9277e0d313bb4118a44f6533be9af2e868a1d2", "patch": "@@ -1797,12 +1797,12 @@ fn parse_fn_header(&parser p)\n     ret tup(id, ty_params);\n }\n \n-fn parse_item_fn_or_iter(&parser p, ast::purity purity, ast::proto proto)\n-    -> @ast::item {\n+fn parse_item_fn_or_iter(&parser p, ast::purity purity, ast::proto proto,\n+                         vec[ast::attribute] attrs ) -> @ast::item {\n     auto lo = p.get_last_lo_pos();\n     auto t = parse_fn_header(p);\n     auto f = parse_fn(p, proto, purity);\n-    auto item = ast::item_fn(t._0, f, t._1,\n+    auto item = ast::item_fn(t._0, f, t._1, attrs,\n                             p.next_def_id(), p.get_ann());\n     ret @spanned(lo, f.body.span.hi, item);\n }\n@@ -1846,7 +1846,8 @@ fn parse_dtor(&parser p) -> @ast::method {\n     ret @spanned(lo, f.body.span.hi, m);\n }\n \n-fn parse_item_obj(&parser p, ast::layer lyr) -> @ast::item {\n+fn parse_item_obj(&parser p, ast::layer lyr,\n+                  vec[ast::attribute] attrs) -> @ast::item {\n     auto lo = p.get_last_lo_pos();\n     auto ident = parse_value_ident(p);\n     auto ty_params = parse_ty_params(p);\n@@ -1877,7 +1878,7 @@ fn parse_item_obj(&parser p, ast::layer lyr) -> @ast::item {\n                           dtor=dtor);\n \n     auto odid = rec(ty=p.next_def_id(), ctor=p.next_def_id());\n-    auto item = ast::item_obj(ident, ob, ty_params, odid, p.get_ann());\n+    auto item = ast::item_obj(ident, ob, ty_params, attrs, odid, p.get_ann());\n \n     ret @spanned(lo, hi, item);\n }\n@@ -1900,15 +1901,16 @@ fn parse_mod_items(&parser p, token::token term) -> ast::_mod {\n     ret rec(view_items=view_items, items=items);\n }\n \n-fn parse_item_const(&parser p) -> @ast::item {\n+fn parse_item_const(&parser p, vec[ast::attribute] attrs) -> @ast::item {\n     auto lo = p.get_last_lo_pos();\n     auto ty = parse_ty(p);\n     auto id = parse_value_ident(p);\n     expect(p, token::EQ);\n     auto e = parse_expr(p);\n     auto hi = p.get_hi_pos();\n     expect(p, token::SEMI);\n-    auto item = ast::item_const(id, ty, e, p.next_def_id(), p.get_ann());\n+    auto item = ast::item_const(id, ty, e, attrs,\n+                                p.next_def_id(), p.get_ann());\n     ret @spanned(lo, hi, item);\n }\n \n@@ -1994,7 +1996,7 @@ fn default_native_name(session::session sess, str id) -> str {\n     ret n.prefix + id + n.suffix;\n }\n \n-fn parse_item_native_mod(&parser p) -> @ast::item {\n+fn parse_item_native_mod(&parser p, vec[ast::attribute] attrs) -> @ast::item {\n     auto lo = p.get_last_lo_pos();\n     auto abi = ast::native_abi_cdecl;\n     if (!is_word(p, \"mod\")) {\n@@ -2024,7 +2026,7 @@ fn parse_item_native_mod(&parser p) -> @ast::item {\n     auto m = parse_native_mod_items(p, native_name, abi);\n     auto hi = p.get_hi_pos();\n     expect(p, token::RBRACE);\n-    auto item = ast::item_native_mod(id, m, p.next_def_id());\n+    auto item = ast::item_native_mod(id, m, attrs, p.next_def_id());\n     ret @spanned(lo, hi, item);\n }\n \n@@ -2034,19 +2036,20 @@ fn parse_type_decl(&parser p) -> tup(uint, ast::ident) {\n     ret tup(lo, id);\n }\n \n-fn parse_item_type(&parser p) -> @ast::item {\n+fn parse_item_type(&parser p, vec[ast::attribute] attrs) -> @ast::item {\n     auto t = parse_type_decl(p);\n     auto tps = parse_ty_params(p);\n \n     expect(p, token::EQ);\n     auto ty = parse_ty(p);\n     auto hi = p.get_hi_pos();\n     expect(p, token::SEMI);\n-    auto item = ast::item_ty(t._1, ty, tps, p.next_def_id(), p.get_ann());\n+    auto item = ast::item_ty(t._1, ty, tps, attrs,\n+                             p.next_def_id(), p.get_ann());\n     ret @spanned(t._0, hi, item);\n }\n \n-fn parse_item_tag(&parser p) -> @ast::item {\n+fn parse_item_tag(&parser p, vec[ast::attribute] attrs) -> @ast::item {\n     auto lo = p.get_last_lo_pos();\n     auto id = parse_ident(p);\n     auto ty_params = parse_ty_params(p);\n@@ -2092,8 +2095,8 @@ fn parse_item_tag(&parser p) -> @ast::item {\n     auto hi = p.get_hi_pos();\n     p.bump();\n \n-    auto item = ast::item_tag(id, variants, ty_params, p.next_def_id(),\n-                             p.get_ann());\n+    auto item = ast::item_tag(id, variants, ty_params, attrs,\n+                              p.next_def_id(), p.get_ann());\n     ret @spanned(lo, hi, item);\n }\n \n@@ -2128,29 +2131,31 @@ tag parsed_item {\n fn parse_item(&parser p, vec[ast::attribute] attrs) -> parsed_item {\n \n     if (eat_word(p, \"const\")) {\n-        ret got_item(parse_item_const(p));\n+        ret got_item(parse_item_const(p, attrs));\n     } else if (eat_word(p, \"fn\")) {\n         // This is an anonymous function\n         if (p.peek() == token::LPAREN) { ret fn_no_item; }\n-        ret got_item(parse_item_fn_or_iter(p, ast::impure_fn, ast::proto_fn));\n+        ret got_item(parse_item_fn_or_iter(p, ast::impure_fn,\n+                                           ast::proto_fn, attrs));\n     } else if (eat_word(p, \"pred\")) {\n-        ret got_item(parse_item_fn_or_iter(p, ast::pure_fn, ast::proto_fn));\n+        ret got_item(parse_item_fn_or_iter(p, ast::pure_fn,\n+                                           ast::proto_fn, attrs));\n     } else if (eat_word(p, \"iter\")) {\n         ret got_item(parse_item_fn_or_iter(p, ast::impure_fn,\n-                                           ast::proto_iter));\n+                                           ast::proto_iter, attrs));\n     } else if (eat_word(p, \"mod\")) {\n         ret got_item(parse_item_mod(p, attrs));\n     } else if (eat_word(p, \"native\")) {\n-        ret got_item(parse_item_native_mod(p));\n+        ret got_item(parse_item_native_mod(p, attrs));\n     }\n \n     auto lyr = parse_layer(p);\n     if (eat_word(p, \"type\")) {\n-        ret got_item(parse_item_type(p));\n+        ret got_item(parse_item_type(p, attrs));\n     } else if (eat_word(p, \"tag\")) {\n-        ret got_item(parse_item_tag(p));\n+        ret got_item(parse_item_tag(p, attrs));\n     } else if (eat_word(p, \"obj\")) {\n-        ret got_item(parse_item_obj(p, lyr));\n+        ret got_item(parse_item_obj(p, lyr, attrs));\n     } else {\n         ret no_item;\n     }"}, {"sha": "fde8f62aefb22bea7caab4cfcf2b5b67e29e1648", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=1c9277e0d313bb4118a44f6533be9af2e868a1d2", "patch": "@@ -66,7 +66,7 @@ fn visit_fn(@ctx cx, &ast::_fn f, &vec[ast::ty_param] tp, &span sp,\n \n fn visit_item(@ctx cx, &@ast::item i, &scope sc, &vt[scope] v) {\n     alt (i.node) {\n-        case (ast::item_obj(_, ?o, _, _, _)) {\n+        case (ast::item_obj(_, ?o, _, _, _, _)) {\n             for (ast::obj_field f in o.fields) {\n                 cx.local_map.insert(f.id._1, objfield(f.mut));\n             }"}, {"sha": "471726e3271b97f5a725944aef08f82a2271ae85", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=1c9277e0d313bb4118a44f6533be9af2e868a1d2", "patch": "@@ -388,14 +388,14 @@ fn encode_module_item_paths(&ebml::writer ebml_w,\n         }\n \n         alt (it.node) {\n-            case (ast::item_const(?id, _, ?tps, ?did, ?ann)) {\n+            case (ast::item_const(?id, _, ?tps, _, ?did, ?ann)) {\n                 add_to_index(ebml_w, path, index, id);\n                 ebml::start_tag(ebml_w, tag_paths_data_item);\n                 encode_name(ebml_w, id);\n                 encode_def_id(ebml_w, did);\n                 ebml::end_tag(ebml_w);\n             }\n-            case (ast::item_fn(?id, _, ?tps, ?did, ?ann)) {\n+            case (ast::item_fn(?id, _, ?tps, _, ?did, ?ann)) {\n                 add_to_index(ebml_w, path, index, id);\n                 ebml::start_tag(ebml_w, tag_paths_data_item);\n                 encode_name(ebml_w, id);\n@@ -410,7 +410,7 @@ fn encode_module_item_paths(&ebml::writer ebml_w,\n                 encode_module_item_paths(ebml_w, _mod, path + [id], index);\n                 ebml::end_tag(ebml_w);\n             }\n-            case (ast::item_native_mod(?id, ?nmod, ?did)) {\n+            case (ast::item_native_mod(?id, ?nmod, _, ?did)) {\n                 add_to_index(ebml_w, path, index, id);\n                 ebml::start_tag(ebml_w, tag_paths_data_mod);\n                 encode_name(ebml_w, id);\n@@ -419,14 +419,14 @@ fn encode_module_item_paths(&ebml::writer ebml_w,\n                                                 index);\n                 ebml::end_tag(ebml_w);\n             }\n-            case (ast::item_ty(?id, _, ?tps, ?did, ?ann)) {\n+            case (ast::item_ty(?id, _, ?tps, _, ?did, ?ann)) {\n                 add_to_index(ebml_w, path, index, id);\n                 ebml::start_tag(ebml_w, tag_paths_data_item);\n                 encode_name(ebml_w, id);\n                 encode_def_id(ebml_w, did);\n                 ebml::end_tag(ebml_w);\n             }\n-            case (ast::item_tag(?id, ?variants, ?tps, ?did, _)) {\n+            case (ast::item_tag(?id, ?variants, ?tps, _, ?did, _)) {\n                 add_to_index(ebml_w, path, index, id);\n                 ebml::start_tag(ebml_w, tag_paths_data_item);\n                 encode_name(ebml_w, id);\n@@ -435,7 +435,7 @@ fn encode_module_item_paths(&ebml::writer ebml_w,\n \n                 encode_tag_variant_paths(ebml_w, variants, path, index);\n             }\n-            case (ast::item_obj(?id, _, ?tps, ?odid, ?ann)) {\n+            case (ast::item_obj(?id, _, ?tps, _, ?odid, ?ann)) {\n                 add_to_index(ebml_w, path, index, id);\n                 ebml::start_tag(ebml_w, tag_paths_data_item);\n                 encode_name(ebml_w, id);\n@@ -543,15 +543,15 @@ fn encode_tag_variant_info(&@trans::crate_ctxt cx, &ebml::writer ebml_w,\n fn encode_info_for_item(@trans::crate_ctxt cx, &ebml::writer ebml_w,\n                         @ast::item item, &mutable vec[tup(int, uint)] index) {\n     alt (item.node) {\n-        case (ast::item_const(_, _, _, ?did, ?ann)) {\n+        case (ast::item_const(_, _, _, _, ?did, ?ann)) {\n             ebml::start_tag(ebml_w, tag_items_data_item);\n             encode_def_id(ebml_w, did);\n             encode_kind(ebml_w, 'c' as u8);\n             encode_type(cx, ebml_w, trans::node_ann_type(cx, ann));\n             encode_symbol(cx, ebml_w, did);\n             ebml::end_tag(ebml_w);\n         }\n-        case (ast::item_fn(_, _, ?tps, ?did, ?ann)) {\n+        case (ast::item_fn(_, _, ?tps, _, ?did, ?ann)) {\n             ebml::start_tag(ebml_w, tag_items_data_item);\n             encode_def_id(ebml_w, did);\n             encode_kind(ebml_w, 'f' as u8);\n@@ -566,21 +566,21 @@ fn encode_info_for_item(@trans::crate_ctxt cx, &ebml::writer ebml_w,\n             encode_kind(ebml_w, 'm' as u8);\n             ebml::end_tag(ebml_w);\n         }\n-        case (ast::item_native_mod(?id, _, ?did)) {\n+        case (ast::item_native_mod(?id, _, _, ?did)) {\n             ebml::start_tag(ebml_w, tag_items_data_item);\n             encode_def_id(ebml_w, did);\n             encode_kind(ebml_w, 'n' as u8);\n             ebml::end_tag(ebml_w);\n         }\n-        case (ast::item_ty(?id, _, ?tps, ?did, ?ann)) {\n+        case (ast::item_ty(?id, _, ?tps, _, ?did, ?ann)) {\n             ebml::start_tag(ebml_w, tag_items_data_item);\n             encode_def_id(ebml_w, did);\n             encode_kind(ebml_w, 'y' as u8);\n             encode_type_param_count(ebml_w, tps);\n             encode_type(cx, ebml_w, trans::node_ann_type(cx, ann));\n             ebml::end_tag(ebml_w);\n         }\n-        case (ast::item_tag(?id, ?variants, ?tps, ?did, ?ann)) {\n+        case (ast::item_tag(?id, ?variants, ?tps, _, ?did, ?ann)) {\n             ebml::start_tag(ebml_w, tag_items_data_item);\n             encode_def_id(ebml_w, did);\n             encode_kind(ebml_w, 't' as u8);\n@@ -593,7 +593,7 @@ fn encode_info_for_item(@trans::crate_ctxt cx, &ebml::writer ebml_w,\n \n             encode_tag_variant_info(cx, ebml_w, did, variants, index, tps);\n         }\n-        case (ast::item_obj(?id, _, ?tps, ?odid, ?ann)) {\n+        case (ast::item_obj(?id, _, ?tps, _, ?odid, ?ann)) {\n             ebml::start_tag(ebml_w, tag_items_data_item);\n             encode_def_id(ebml_w, odid.ctor);\n             encode_kind(ebml_w, 'o' as u8);"}, {"sha": "5355bb6d4999bf0927f077e045e6a750f114a408", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=1c9277e0d313bb4118a44f6533be9af2e868a1d2", "patch": "@@ -166,7 +166,7 @@ fn map_crate(&@env e, &@ast::crate c) {\n                                       =new_str_hash[import_state]()));\n                 e.ast_map.insert(defid, i);\n             }\n-            case (ast::item_native_mod(_, ?nmd, ?defid)) {\n+            case (ast::item_native_mod(_, ?nmd, _, ?defid)) {\n                 e.mod_map.insert(defid._1, \n                                  @rec(m=none[ast::_mod], \n                                       index=index_nmod(nmd),\n@@ -175,19 +175,19 @@ fn map_crate(&@env e, &@ast::crate c) {\n                                       =new_str_hash[import_state]()));\n                 e.ast_map.insert(defid, i);\n             }\n-            case (ast::item_const(_, _, _, ?defid, _)) {\n+            case (ast::item_const(_, _, _, _, ?defid, _)) {\n                 e.ast_map.insert(defid, i);\n             }\n-            case (ast::item_fn(_, _, _, ?defid, _)) { \n+            case (ast::item_fn(_, _, _, _, ?defid, _)) { \n                 e.ast_map.insert(defid, i);\n             }\n-            case (ast::item_ty(_, _, _, ?defid, _)) {\n+            case (ast::item_ty(_, _, _, _, ?defid, _)) {\n                 e.ast_map.insert(defid, i);\n             }\n-            case (ast::item_tag(_, _, _, ?defid, _)) {\n+            case (ast::item_tag(_, _, _, _, ?defid, _)) {\n                 e.ast_map.insert(defid, i);\n             }\n-            case (ast::item_obj(_, _, _, ?obj_def_ids, _)) { \n+            case (ast::item_obj(_, _, _, _, ?obj_def_ids, _)) { \n                 e.ast_map.insert(obj_def_ids.ty, i);\n                 e.ast_map.insert(obj_def_ids.ctor, i);\n             }\n@@ -210,7 +210,7 @@ fn map_crate(&@env e, &@ast::crate c) {\n                         case (ast::item_mod(_, _, _, ?defid)) {\n                             ret e.mod_map.get(defid._1);\n                         }\n-                        case (ast::item_native_mod(_, _, ?defid)) {\n+                        case (ast::item_native_mod(_, _, _, ?defid)) {\n                             ret e.mod_map.get(defid._1);\n                         }\n                         case (_) {\n@@ -512,21 +512,21 @@ fn lookup_in_scope(&env e, scopes sc, &span sp, &ident id, namespace ns)\n             }\n             case (scope_item(?it)) {\n                 alt (it.node) {\n-                    case (ast::item_obj(_, ?ob, ?ty_params, _, _)) {\n+                    case (ast::item_obj(_, ?ob, ?ty_params, _, _, _)) {\n                         ret lookup_in_obj(id, ob, ty_params, ns);\n                     }\n-                    case (ast::item_tag(_, _, ?ty_params, _, _)) {\n+                    case (ast::item_tag(_, _, ?ty_params, _, _, _)) {\n                         if (ns == ns_type) {\n                             ret lookup_in_ty_params(id, ty_params);\n                         }\n                     }\n                     case (ast::item_mod(_, _, _, ?defid)) {\n                         ret lookup_in_local_mod(e, defid, sp, id, ns, inside);\n                     }\n-                    case (ast::item_native_mod(_, ?m, ?defid)) {\n+                    case (ast::item_native_mod(_, ?m, _, ?defid)) {\n                         ret lookup_in_local_native_mod(e, defid, sp, id, ns);\n                     }\n-                    case (ast::item_ty(_, _, ?ty_params, _, _)) {\n+                    case (ast::item_ty(_, _, ?ty_params, _, _, _)) {\n                         if (ns == ns_type) {\n                             ret lookup_in_ty_params(id, ty_params);\n                         }\n@@ -673,7 +673,7 @@ fn lookup_in_block(&ident id, &ast::block_ b, namespace ns)\n                     case (ast::decl_item(?it)) {\n                         alt (it.node) {\n                             case (ast::item_tag(?name, ?variants, _,\n-                                               ?defid, _)) {\n+                                                _, ?defid, _)) {\n                                 if (ns == ns_type) {\n                                     if (str::eq(name, id)) {\n                                         ret some(ast::def_ty(defid));\n@@ -705,25 +705,25 @@ fn lookup_in_block(&ident id, &ast::block_ b, namespace ns)\n \n fn found_def_item(&@ast::item i, namespace ns) -> option::t[def] {\n     alt (i.node) {\n-        case (ast::item_const(_, _, _, ?defid, _)) {\n+        case (ast::item_const(_, _, _, _, ?defid, _)) {\n             if (ns == ns_value) { ret some(ast::def_const(defid)); }\n         }\n-        case (ast::item_fn(_, _, _, ?defid, _)) {\n+        case (ast::item_fn(_, _, _, _, ?defid, _)) {\n             if (ns == ns_value) { ret some(ast::def_fn(defid)); }\n         }\n         case (ast::item_mod(_, _, _, ?defid)) {\n             if (ns == ns_module) { ret some(ast::def_mod(defid)); }\n         }\n-        case (ast::item_native_mod(_, _, ?defid)) {\n+        case (ast::item_native_mod(_, _, _, ?defid)) {\n             if (ns == ns_module) { ret some(ast::def_native_mod(defid)); }\n         }\n-        case (ast::item_ty(_, _, _, ?defid, _)) {\n+        case (ast::item_ty(_, _, _, _, ?defid, _)) {\n             if (ns == ns_type) { ret some(ast::def_ty(defid)); }\n         }\n-        case (ast::item_tag(_, _, _, ?defid, _)) {\n+        case (ast::item_tag(_, _, _, _, ?defid, _)) {\n             if (ns == ns_type) { ret some(ast::def_ty(defid)); }\n         }\n-        case (ast::item_obj(_, _, _, ?odid, _)) {\n+        case (ast::item_obj(_, _, _, _, ?odid, _)) {\n             alt (ns) {\n                 case (ns_value) { ret some(ast::def_obj(odid.ctor)); }\n                 case (ns_type) { ret some(ast::def_obj(odid.ty)); }\n@@ -906,7 +906,7 @@ fn lookup_in_mie(&env e, &mod_index_entry mie, namespace ns)\n         }\n         case (mie_tag_variant(?item, ?variant_idx)) {\n             alt (item.node) {\n-                case (ast::item_tag(_, ?variants, _, ?tid, _)) {\n+                case (ast::item_tag(_, ?variants, _, _, ?tid, _)) {\n                     if (ns == ns_value) {\n                         auto vid = variants.(variant_idx).node.id;\n                         ret some(ast::def_variant(tid, vid));\n@@ -970,22 +970,22 @@ fn index_mod(&ast::_mod md) -> mod_index {\n \n     for (@ast::item it in md.items) {\n         alt (it.node) {\n-            case (ast::item_const(?id, _, _, _, _)) {\n+            case (ast::item_const(?id, _, _,  _, _, _)) {\n                 add_to_index(index, id, mie_item(it));\n             }\n-            case (ast::item_fn(?id, _, _, _, _)) {\n+            case (ast::item_fn(?id, _, _, _, _, _)) {\n                 add_to_index(index, id, mie_item(it));\n             }\n             case (ast::item_mod(?id, _, _, _)) {\n                 add_to_index(index, id, mie_item(it));\n             }\n-            case (ast::item_native_mod(?id, _, _)) {\n+            case (ast::item_native_mod(?id, _, _, _)) {\n                 add_to_index(index, id, mie_item(it));\n             }\n-            case (ast::item_ty(?id, _, _, _, _)) {\n+            case (ast::item_ty(?id, _, _, _, _, _)) {\n                 add_to_index(index, id, mie_item(it));\n             }\n-            case (ast::item_tag(?id, ?variants, _, _, _)) {\n+            case (ast::item_tag(?id, ?variants, _, _, _, _)) {\n                 add_to_index(index, id, mie_item(it));\n                 let uint variant_idx = 0u;\n                 for (ast::variant v in variants) {\n@@ -994,7 +994,7 @@ fn index_mod(&ast::_mod md) -> mod_index {\n                     variant_idx += 1u;\n                 }\n             }\n-            case (ast::item_obj(?id, _, _, _, _)) {\n+            case (ast::item_obj(?id, _, _, _, _, _)) {\n                 add_to_index(index, id, mie_item(it));\n             }\n         }\n@@ -1122,11 +1122,11 @@ fn mie_span(&mod_index_entry mie) -> span {\n fn check_item(@env e, &@ast::item i, &() x, &vt[()] v) {\n     visit::visit_item(i, x, v);\n     alt (i.node) {\n-        case (ast::item_fn(_, ?f, ?ty_params, _, _)) {\n+        case (ast::item_fn(_, ?f, ?ty_params, _, _,  _)) {\n             check_fn(*e, i.span, f);\n             ensure_unique(*e, i.span, ty_params, ident_id, \"type parameter\");\n         }\n-        case (ast::item_obj(_, ?ob, ?ty_params, _, _)) {\n+        case (ast::item_obj(_, ?ob, ?ty_params, _, _, _)) {\n             fn field_name(&ast::obj_field field) -> ident {\n                 ret field.ident;\n             }\n@@ -1136,7 +1136,7 @@ fn check_item(@env e, &@ast::item i, &() x, &vt[()] v) {\n             }\n             ensure_unique(*e, i.span, ty_params, ident_id, \"type parameter\");\n         }\n-        case (ast::item_tag(_, _, ?ty_params, _, _)) {\n+        case (ast::item_tag(_, _, ?ty_params, _, _, _)) {\n             ensure_unique(*e, i.span, ty_params, ident_id, \"type parameter\");\n         }\n         case (_) {}\n@@ -1177,28 +1177,29 @@ fn check_block(@env e, &ast::block b, &() x, &vt[()] v) {\n                     }\n                     case (ast::decl_item(?it)) {\n                         alt (it.node) {\n-                            case (ast::item_tag(?name, ?variants, _, _, _)) {\n+                            case (ast::item_tag(?name, ?variants,\n+                                                _, _, _, _)) {\n                                 add_name(types, it.span, name);\n                                 for (ast::variant v in variants) {\n                                     add_name(values, v.span, v.node.name);\n                                 }\n                             }\n-                            case (ast::item_const(?name, _, _, _, _)) {\n+                            case (ast::item_const(?name, _, _, _, _, _)) {\n                                 add_name(values, it.span, name);\n                             }\n-                            case (ast::item_fn(?name, _, _, _, _)) {\n+                            case (ast::item_fn(?name, _, _, _, _, _)) {\n                                 add_name(values, it.span, name);\n                             }\n                             case (ast::item_mod(?name, _, _, _)) {\n                                 add_name(mods, it.span, name);\n                             }\n-                            case (ast::item_native_mod(?name, _, _)) {\n+                            case (ast::item_native_mod(?name, _, _, _)) {\n                                 add_name(mods, it.span, name);\n                             }\n-                            case (ast::item_ty(?name, _, _, _, _)) {\n+                            case (ast::item_ty(?name, _, _, _, _, _)) {\n                                 add_name(types, it.span, name);\n                             }\n-                            case (ast::item_obj(?name, _, _, _, _)) {\n+                            case (ast::item_obj(?name, _, _, _, _, _)) {\n                                 add_name(types, it.span, name);\n                                 add_name(values, it.span, name);\n                             }"}, {"sha": "efa74e4bca8527691fcba6c9a2320265983c3a72", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1c9277e0d313bb4118a44f6533be9af2e868a1d2", "patch": "@@ -8153,13 +8153,13 @@ fn trans_const(&@crate_ctxt cx, @ast::expr e,\n \n fn trans_item(@local_ctxt cx, &ast::item item) {\n     alt (item.node) {\n-        case (ast::item_fn(?name, ?f, ?tps, ?fid, ?ann)) {\n+        case (ast::item_fn(?name, ?f, ?tps, _, ?fid, ?ann)) {\n             auto sub_cx = extend_path(cx, name);\n             auto llfndecl = cx.ccx.item_ids.get(fid);\n             trans_fn(sub_cx, item.span, f, llfndecl, none[ty_self_pair],\n                      tps, ann);\n         }\n-        case (ast::item_obj(?name, ?ob, ?tps, ?oid, ?ann)) {\n+        case (ast::item_obj(?name, ?ob, ?tps, _, ?oid, ?ann)) {\n             auto sub_cx = @rec(obj_typarams=tps,\n                                obj_fields=ob.fields with\n                                *extend_path(cx, name));\n@@ -8171,15 +8171,15 @@ fn trans_item(@local_ctxt cx, &ast::item item) {\n                                with *cx);\n             trans_mod(sub_cx, m);\n         }\n-        case (ast::item_tag(?name, ?variants, ?tps, ?tag_id, _)) {\n+        case (ast::item_tag(?name, ?variants, ?tps, _, ?tag_id, _)) {\n             auto sub_cx = extend_path(cx, name);\n             auto i = 0;\n             for (ast::variant variant in variants) {\n                 trans_tag_variant(sub_cx, tag_id, variant, i, tps);\n                 i += 1;\n             }\n         }\n-        case (ast::item_const(?name, _, ?expr, ?cid, ?ann)) {\n+        case (ast::item_const(?name, _, ?expr, _, ?cid, ?ann)) {\n             trans_const(cx.ccx, expr, cid, ann);\n         }\n         case (_) { /* fall through */ }\n@@ -8486,8 +8486,8 @@ fn decl_native_fn_and_pair(&@crate_ctxt ccx,\n \n fn item_path(&@ast::item item) -> vec[str] {\n     alt (item.node) {\n-        case (ast::item_fn(?name, _, _, _, _)) { ret [name]; }\n-        case (ast::item_obj(?name, _, _, _, _)) { ret [name]; }\n+        case (ast::item_fn(?name, _, _, _, _, _)) { ret [name]; }\n+        case (ast::item_obj(?name, _, _, _, _, _)) { ret [name]; }\n         case (ast::item_mod(?name, _, _, _)) { ret [name]; }\n         case (_) { ret []; }\n     }\n@@ -8512,7 +8512,7 @@ fn collect_item_1(@crate_ctxt ccx, &@ast::item i,\n                   &vec[str] pt, &vt[vec[str]] v) {\n     visit::visit_item(i, pt + item_path(i), v);\n     alt (i.node) {\n-        case (ast::item_const(?name, _, _, ?cid, ?ann)) {\n+        case (ast::item_const(?name, _, _, _, ?cid, ?ann)) {\n             auto typ = node_ann_type(ccx, ann);\n             auto g = llvm::LLVMAddGlobal(ccx.llmod, type_of(ccx, i.span, typ),\n                                         str::buf(ccx.names.next(name)));\n@@ -8524,13 +8524,13 @@ fn collect_item_1(@crate_ctxt ccx, &@ast::item i,\n         case (ast::item_mod(?name, ?m, _, ?mid)) {\n             ccx.items.insert(mid, i);\n         }\n-        case (ast::item_native_mod(_, _, ?mid)) {\n+        case (ast::item_native_mod(_, _, _, ?mid)) {\n             ccx.items.insert(mid, i);\n         }\n-        case (ast::item_ty(_, _, _, ?did, _)) {\n+        case (ast::item_ty(_, _, _, _, ?did, _)) {\n             ccx.items.insert(did, i);\n         }\n-        case (ast::item_tag(?name, ?variants, ?tps, ?tag_id, _)) {\n+        case (ast::item_tag(?name, ?variants, ?tps, _, ?tag_id, _)) {\n             ccx.items.insert(tag_id, i);\n         }\n         case (_) {}\n@@ -8542,13 +8542,13 @@ fn collect_item_2(&@crate_ctxt ccx, &@ast::item i,\n     auto new_pt = pt + item_path(i);\n     visit::visit_item(i, new_pt, v);\n     alt (i.node) {\n-        case (ast::item_fn(?name, ?f, ?tps, ?fid, ?ann)) {\n+        case (ast::item_fn(?name, ?f, ?tps, _, ?fid, ?ann)) {\n             ccx.items.insert(fid, i);\n             if (!ccx.obj_methods.contains_key(fid)) {\n                 decl_fn_and_pair(ccx, i.span, new_pt, \"fn\", tps, ann, fid);\n             }\n         }\n-        case (ast::item_obj(?name, ?ob, ?tps, ?oid, ?ann)) {\n+        case (ast::item_obj(?name, ?ob, ?tps, _, ?oid, ?ann)) {\n             ccx.items.insert(oid.ctor, i);\n             decl_fn_and_pair(ccx, i.span, new_pt,\n                              \"obj_ctor\", tps, ann, oid.ctor);\n@@ -8578,7 +8578,7 @@ fn collect_tag_ctor(@crate_ctxt ccx, &@ast::item i,\n     visit::visit_item(i, new_pt, v);\n \n     alt (i.node) {\n-        case (ast::item_tag(_, ?variants, ?tps, _, _)) {\n+        case (ast::item_tag(_, ?variants, ?tps, _, _, _)) {\n             for (ast::variant variant in variants) {\n                 if (vec::len[ast::variant_arg](variant.node.args) != 0u) {\n                     decl_fn_and_pair(ccx, i.span,\n@@ -8607,7 +8607,7 @@ fn trans_constant(@crate_ctxt ccx, &@ast::item it,\n     visit::visit_item(it, new_pt, v);\n \n     alt (it.node) {\n-        case (ast::item_tag(?ident, ?variants, _, ?tag_id, _)) {\n+        case (ast::item_tag(?ident, ?variants, _, _, ?tag_id, _)) {\n             auto i = 0u;\n             auto n_variants = vec::len[ast::variant](variants);\n             while (i < n_variants) {\n@@ -8630,7 +8630,7 @@ fn trans_constant(@crate_ctxt ccx, &@ast::item it,\n             }\n         }\n \n-        case (ast::item_const(?name, _, ?expr, ?cid, ?ann)) {\n+        case (ast::item_const(?name, _, ?expr, _, ?cid, ?ann)) {\n             // FIXME: The whole expr-translation system needs cloning to deal\n             // with consts.\n             auto v = C_int(1);"}, {"sha": "2fd0a9105cff4fb894e8f0361e622517aee777d1", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=1c9277e0d313bb4118a44f6533be9af2e868a1d2", "patch": "@@ -101,7 +101,7 @@ fn find_pre_post_obj(&crate_ctxt ccx, _obj o) -> () {\n \n fn find_pre_post_item(&crate_ctxt ccx, &item i) -> () {\n     alt (i.node) {\n-        case (item_const(?id, ?t, ?e, ?di, ?a)) {\n+        case (item_const(?id, ?t, ?e, _, ?di, ?a)) {\n             // make a fake fcx\n             auto fake_fcx = rec(enclosing=\n                 rec(constrs=@new_def_hash[constraint](),\n@@ -112,7 +112,7 @@ fn find_pre_post_item(&crate_ctxt ccx, &item i) -> () {\n                                 ccx=ccx);\n             find_pre_post_expr(fake_fcx, e);\n         }\n-        case (item_fn(?id, ?f, ?ps, ?di, ?a)) {\n+        case (item_fn(?id, ?f, ?ps, _, ?di, ?a)) {\n             assert (ccx.fm.contains_key(di));\n             auto fcx = rec(enclosing=ccx.fm.get(di),\n                            id=di, name=id, ccx=ccx);\n@@ -121,16 +121,16 @@ fn find_pre_post_item(&crate_ctxt ccx, &item i) -> () {\n         case (item_mod(?id, ?m, _, ?di)) {\n             find_pre_post_mod(m);\n         }\n-        case (item_native_mod(?id, ?nm, ?di)) {\n+        case (item_native_mod(?id, ?nm, _, ?di)) {\n             find_pre_post_native_mod(nm);\n         }\n-        case (item_ty(_,_,_,_,_)) {\n+        case (item_ty(_,_,_,_,_,_)) {\n             ret;\n         }\n-        case (item_tag(_,_,_,_,_)) {\n+        case (item_tag(_,_,_,_,_,_)) {\n             ret;\n         }\n-        case (item_obj(?id, ?o, ?ps, ?di, ?a)) {\n+        case (item_obj(?id, ?o, ?ps, _, ?di, ?a)) {\n             find_pre_post_obj(ccx, o);\n         }\n     }"}, {"sha": "3206fb96406e3b99155bd2831377bbfbf0aaf84e", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=1c9277e0d313bb4118a44f6533be9af2e868a1d2", "patch": "@@ -1627,21 +1627,21 @@ fn pat_ty(&ctxt cx, &@ast::pat pat) -> t {\n \n fn item_ann(&@ast::item it) -> ast::ann {\n     alt (it.node) {\n-        case (ast::item_const(_,_,_,_,?a)) { ret a; }\n-        case (ast::item_fn(_,_,_,_,?a)) { ret a; }\n+        case (ast::item_const(_,_,_,_,_,?a)) { ret a; }\n+        case (ast::item_fn(_,_,_,_,_,?a)) { ret a; }\n         case (ast::item_mod(_,_,_, _)) {\n             log_err \"a module was passed to item_ann(), \" +\n                 \"but modules haven't annotations\";\n             fail;\n         }\n-        case (ast::item_native_mod(_,_,_)) {\n+        case (ast::item_native_mod(_,_,_,_)) {\n             log_err \"a native module was passed to item_ann(), \" +\n                 \"but native modules haven't annotations\";\n             fail;\n         }\n-        case (ast::item_ty(_,_,_,_,?a)) { ret a; }\n-        case (ast::item_tag(_,_,_,_,?a)) { ret a; }\n-        case (ast::item_obj(_,_,_,_,?a)) { ret a; }\n+        case (ast::item_ty(_,_,_,_,_,?a)) { ret a; }\n+        case (ast::item_tag(_,_,_,_,_,?a)) { ret a; }\n+        case (ast::item_obj(_,_,_,_,_,?a)) { ret a; }\n     }\n }\n \n@@ -2720,7 +2720,7 @@ fn tag_variants(&ctxt cx, &ast::def_id id) -> vec[variant_info] {\n     alt (cx.items.get(id)) {\n         case (any_item_rust(?item)) {\n             alt (item.node) {\n-                case (ast::item_tag(_, ?variants, _, _, _)) {\n+                case (ast::item_tag(_, ?variants, _,  _, _, _)) {\n                     let vec[variant_info] result = [];\n                     for (ast::variant variant in variants) {\n                         auto ctor_ty = ann_to_monotype(cx, variant.node.ann);"}, {"sha": "52a6fa6415b71771b3154ff1781490ea99c36a7f", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=1c9277e0d313bb4118a44f6533be9af2e868a1d2", "patch": "@@ -593,26 +593,26 @@ mod collect {\n \n         alt (it.node) {\n \n-            case (ast::item_const(?ident, ?t, _, ?def_id, _)) {\n+            case (ast::item_const(?ident, ?t, _, _, ?def_id, _)) {\n                 auto typ = convert(t);\n                 auto tpt = tup(0u, typ);\n                 cx.tcx.tcache.insert(def_id, tpt);\n                 ret tpt;\n             }\n \n-            case (ast::item_fn(?ident, ?fn_info, ?tps, ?def_id, _)) {\n+            case (ast::item_fn(?ident, ?fn_info, ?tps, _, ?def_id, _)) {\n                 auto f = bind ty_of_arg(cx, _);\n                 ret ty_of_fn_decl(cx, convert, f, fn_info.decl, fn_info.proto,\n                                   tps, some(def_id));\n             }\n \n-            case (ast::item_obj(?ident, ?obj_info, ?tps, ?odid, _)) {\n+            case (ast::item_obj(?ident, ?obj_info, ?tps, _, ?odid, _)) {\n                 auto t_obj = ty_of_obj(cx, ident, obj_info, tps);\n                 cx.tcx.tcache.insert(odid.ty, t_obj);\n                 ret t_obj;\n             }\n \n-            case (ast::item_ty(?ident, ?t, ?tps, ?def_id, _)) {\n+            case (ast::item_ty(?ident, ?t, ?tps, _, ?def_id, _)) {\n                 alt (cx.tcx.tcache.find(def_id)) {\n                     case (some(?tpt)) {\n                         ret tpt;\n@@ -629,7 +629,7 @@ mod collect {\n                 ret tpt;\n             }\n \n-            case (ast::item_tag(_, _, ?tps, ?def_id, _)) {\n+            case (ast::item_tag(_, _, ?tps, _, ?def_id, _)) {\n                 // Create a new generic polytype.\n                 let vec[ty::t] subtys = [];\n \n@@ -648,7 +648,7 @@ mod collect {\n             }\n \n             case (ast::item_mod(_, _, _, _)) { fail; }\n-            case (ast::item_native_mod(_, _, _)) { fail; }\n+            case (ast::item_native_mod(_, _, _, _)) { fail; }\n         }\n     }\n \n@@ -729,13 +729,13 @@ mod collect {\n \n     fn collect(ty::item_table id_to_ty_item, &@ast::item i) {\n         alt (i.node) {\n-            case (ast::item_ty(_, _, _, ?def_id, _)) {\n+            case (ast::item_ty(_, _, _, _, ?def_id, _)) {\n                 id_to_ty_item.insert(def_id, ty::any_item_rust(i));\n             }\n-            case (ast::item_tag(_, _, _, ?def_id, _)) {\n+            case (ast::item_tag(_, _, _, _, ?def_id, _)) {\n                 id_to_ty_item.insert(def_id, ty::any_item_rust(i));\n             }\n-            case (ast::item_obj(_, _, _, ?odid, _)) {\n+            case (ast::item_obj(_, _, _, _, ?odid, _)) {\n                 id_to_ty_item.insert(odid.ty, ty::any_item_rust(i));\n             }\n             case (_) { /* empty */ }\n@@ -759,18 +759,19 @@ mod collect {\n             case (ast::item_mod(_, _, _, _)) {\n                 // ignore item_mod, it has no type.\n             }\n-            case (ast::item_native_mod(_, ?native_mod, _)) {\n+            case (ast::item_native_mod(_, ?native_mod, _, _)) {\n                 // Propagate the native ABI down to convert_native() below,\n                 // but otherwise do nothing, as native modules have no types.\n                 *abi = some[ast::native_abi](native_mod.abi);\n             }\n-            case (ast::item_tag(_, ?variants, ?ty_params, ?tag_id, ?ann)) {\n+            case (ast::item_tag(_, ?variants, ?ty_params, _, ?tag_id, ?ann)) {\n                 auto tpt = ty_of_item(cx, it);\n                 write::ty_only(cx.tcx, ann.id, tpt._1);\n \n                 get_tag_variant_types(cx, tag_id, variants, ty_params);\n             }\n-            case (ast::item_obj(?ident, ?object, ?ty_params, ?odid, ?ann)) {\n+            case (ast::item_obj(?ident, ?object,\n+                                ?ty_params, _, ?odid, ?ann)) {\n                 // This calls ty_of_obj().\n                 auto t_obj = ty_of_item(cx, it);\n \n@@ -2511,13 +2512,13 @@ fn check_method(&@crate_ctxt ccx, &@ast::method method) {\n \n fn check_item(@crate_ctxt ccx, &@ast::item it) {\n     alt (it.node) {\n-        case (ast::item_const(_, _, ?e, _, ?a)) {\n+        case (ast::item_const(_, _, ?e, _, _, ?a)) {\n             check_const(ccx, it.span, e, a);\n         }\n-        case (ast::item_fn(_, ?f, _, _, ?a)) {\n+        case (ast::item_fn(_, ?f, _, _, _, ?a)) {\n             check_fn(ccx, f.decl, f.proto, f.body, a);\n         }\n-        case (ast::item_obj(_, ?ob, _, ?obj_def_ids, _)) {\n+        case (ast::item_obj(_, ?ob, _, _, ?obj_def_ids, _)) {\n             // We're entering an object, so gather up the info we need.\n             let ast::def_id di = obj_def_ids.ty;\n             vec::push[obj_info](ccx.obj_infos,\n@@ -2541,7 +2542,7 @@ fn mk_fn_purity_table(&@ast::crate crate) -> @fn_purity_table {\n \n     fn do_one(@fn_purity_table t, &@ast::item i) -> () {\n         alt (i.node) {\n-            case (ast::item_fn(_, ?f, _, ?d_id, _)) {\n+            case (ast::item_fn(_, ?f, _, _, ?d_id, _)) {\n                 t.insert(d_id, f.decl.purity);\n             }\n             case (_) {}"}, {"sha": "0db114f0c98b25a257b72c8537bdd892fbe6e985", "filename": "src/comp/middle/visit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fvisit.rs?ref=1c9277e0d313bb4118a44f6533be9af2e868a1d2", "patch": "@@ -104,35 +104,35 @@ fn visit_local[E](&@local loc, &E e, &vt[E] v) {\n \n fn visit_item[E](&@item i, &E e, &vt[E] v) {\n     alt (i.node) {\n-        case (item_const(_, ?t, ?ex, _, _)) {\n+        case (item_const(_, ?t, ?ex, _, _, _)) {\n             vt(v).visit_ty(t, e, v);\n             vt(v).visit_expr(ex, e, v);\n         }\n-        case (item_fn(?nm, ?f, ?tp, ?d, ?a)) {\n+        case (item_fn(?nm, ?f, ?tp, _, ?d, ?a)) {\n             vt(v).visit_fn(f, tp, i.span, nm, d, a, e, v);\n         }\n         case (item_mod(_, ?m, _, _)) {\n             vt(v).visit_mod(m, i.span, e, v);\n         }\n-        case (item_native_mod(_, ?nm, _)) {\n+        case (item_native_mod(_, ?nm, _, _)) {\n             for (@view_item vi in nm.view_items) {\n                 vt(v).visit_view_item(vi, e, v);\n             }\n             for (@native_item ni in nm.items) {\n                 vt(v).visit_native_item(ni, e, v);\n             }\n         }\n-        case (item_ty(_, ?t, _, _, _)) {\n+        case (item_ty(_, ?t, _, _, _, _)) {\n             vt(v).visit_ty(t, e, v);\n         }\n-        case (item_tag(_, ?variants, _, _, _)) {\n+        case (item_tag(_, ?variants, _, _, _, _)) {\n             for (variant vr in variants) {\n                 for (variant_arg va in vr.node.args) {\n                     vt(v).visit_ty(va.ty, e, v);\n                 }\n             }\n         }\n-        case (item_obj(_, ?ob, _, _, _)) {\n+        case (item_obj(_, ?ob, _, _, _, _)) {\n             for (obj_field f in ob.fields) {\n                 vt(v).visit_ty(f.ty, e, v);\n             }"}, {"sha": "3ef1586d14f27352fd153f1efdea84101e9d5a2a", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=1c9277e0d313bb4118a44f6533be9af2e868a1d2", "patch": "@@ -114,30 +114,30 @@ fn walk_item(&ast_visitor v, @ast::item i) {\n     if (!v.keep_going()) { ret; }\n     v.visit_item_pre(i);\n     alt (i.node) {\n-        case (ast::item_const(_, ?t, ?e, _, _)) {\n+        case (ast::item_const(_, ?t, ?e, _, _, _)) {\n             walk_ty(v, t);\n             walk_expr(v, e);\n         }\n-        case (ast::item_fn(?nm, ?f, _, ?d, ?a)) {\n+        case (ast::item_fn(?nm, ?f, _, _, ?d, ?a)) {\n             walk_fn(v, f, i.span, nm, d, a);\n         }\n         case (ast::item_mod(_, ?m, _, _)) {\n             walk_mod(v, m);\n         }\n-        case (ast::item_native_mod(_, ?nm, _)) {\n+        case (ast::item_native_mod(_, ?nm, _, _)) {\n             walk_native_mod(v, nm);\n         }\n-        case (ast::item_ty(_, ?t, _, _, _)) {\n+        case (ast::item_ty(_, ?t, _, _, _, _)) {\n             walk_ty(v, t);\n         }\n-        case (ast::item_tag(_, ?variants, _, _, _)) {\n+        case (ast::item_tag(_, ?variants, _, _, _, _)) {\n             for (ast::variant vr in variants) {\n                 for (ast::variant_arg va in vr.node.args) {\n                     walk_ty(v, va.ty);\n                 }\n             }\n         }\n-        case (ast::item_obj(_, ?ob, _, _, _)) {\n+        case (ast::item_obj(_, ?ob, _, _, _, _)) {\n             for (ast::obj_field f in ob.fields) {\n                 walk_ty(v, f.ty);\n             }"}, {"sha": "5f2b645899831b6520a987f0e1859e0e5ecd0ffc", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=1c9277e0d313bb4118a44f6533be9af2e868a1d2", "patch": "@@ -257,7 +257,7 @@ fn print_item(&ps s, &@ast::item item) {\n     hardbreak(s.s);\n     maybe_print_comment(s, item.span.lo);\n     alt (item.node) {\n-        case (ast::item_const(?id, ?ty, ?expr, _, _)) {\n+        case (ast::item_const(?id, ?ty, ?expr, _, _, _)) {\n             head(s, \"const\");\n             print_type(s, *ty);\n             space(s.s);\n@@ -268,7 +268,7 @@ fn print_item(&ps s, &@ast::item item) {\n             word(s.s, \";\");\n             end(s); // end the outer cbox\n         }\n-        case (ast::item_fn(?name,?_fn,?typarams,_,_)) {\n+        case (ast::item_fn(?name,?_fn,?typarams,_,_,_)) {\n             print_fn(s, _fn.decl, _fn.proto, name, typarams);\n             word(s.s, \" \");\n             print_block(s, _fn.body);\n@@ -280,7 +280,7 @@ fn print_item(&ps s, &@ast::item item) {\n             for (@ast::item itm in _mod.items) {print_item(s, itm);}\n             bclose(s, item.span);\n         }\n-        case (ast::item_native_mod(?id,?nmod,_)) {\n+        case (ast::item_native_mod(?id,?nmod,_,_)) {\n             head(s, \"native\");\n             alt (nmod.abi) {\n                 case (ast::native_abi_rust) {word_nbsp(s, \"\\\"rust\\\"\");}\n@@ -317,7 +317,7 @@ fn print_item(&ps s, &@ast::item item) {\n             }\n             bclose(s, item.span);\n         }\n-        case (ast::item_ty(?id,?ty,?params,_,_)) {\n+        case (ast::item_ty(?id,?ty,?params,_,_,_)) {\n             ibox(s, indent_unit);\n             ibox(s, 0u);\n             word_nbsp(s, \"type\");\n@@ -331,7 +331,7 @@ fn print_item(&ps s, &@ast::item item) {\n             end(s); // end the outer ibox\n             break_offset(s.s, 0u, 0);\n         }\n-        case (ast::item_tag(?id,?variants,?params,_,_)) {\n+        case (ast::item_tag(?id,?variants,?params,_,_,_)) {\n             head(s, \"tag\");\n             word(s.s, id);\n             print_type_params(s, params);\n@@ -354,7 +354,7 @@ fn print_item(&ps s, &@ast::item item) {\n             }\n             bclose(s, item.span);\n         }\n-        case (ast::item_obj(?id,?_obj,?params,_,_)) {\n+        case (ast::item_obj(?id,?_obj,?params,_,_,_)) {\n             head(s, \"obj\");\n             word(s.s, id);\n             print_type_params(s, params);"}, {"sha": "a9f0d059b3d30d636b5741d44cd75901be56e46e", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9277e0d313bb4118a44f6533be9af2e868a1d2/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=1c9277e0d313bb4118a44f6533be9af2e868a1d2", "patch": "@@ -181,25 +181,25 @@ fn decl_lhs(@ast::decl d) -> ast::def_id {\n         }\n         case (ast::decl_item(?an_item)) {\n             alt (an_item.node) {\n-                case (ast::item_const(_,_,_,?d,_)) {\n+                case (ast::item_const(_,_,_,_,?d,_)) {\n                     ret d;\n                 }\n-                case (ast::item_fn(_,_,_,?d,_)) {\n+                case (ast::item_fn(_,_,_,_,?d,_)) {\n                     ret d;\n                 }\n                 case (ast::item_mod(_,_,_,?d)) {\n                     ret d;\n                 }\n-                case (ast::item_native_mod(_,_,?d)) {\n+                case (ast::item_native_mod(_,_,_,?d)) {\n                     ret d;\n                 }\n-                case (ast::item_ty(_,_,_,?d,_)) {\n+                case (ast::item_ty(_,_,_,_,?d,_)) {\n                     ret d;\n                 }\n-                case (ast::item_tag(_,_,_,?d,_)) {\n+                case (ast::item_tag(_,_,_,_,?d,_)) {\n                     ret d;\n                 }\n-                case (ast::item_obj(_,_,_,?d,_)) {\n+                case (ast::item_obj(_,_,_,_,?d,_)) {\n                     ret d.ctor; /* This doesn't really make sense */\n                 }\n             }"}]}