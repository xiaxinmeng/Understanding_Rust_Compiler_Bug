{"sha": "4f4335296498c7fbfd19cd2de2e193cd48c5051c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNDMzNTI5NjQ5OGM3ZmJmZDE5Y2QyZGUyZTE5M2NkNDhjNTA1MWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-26T12:17:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-26T12:17:40Z"}, "message": "Rollup merge of #65743 - eddyb:generator-on-call, r=matthewjasper\n\nrustc_typeck: don't record direct callees in generator_interior.\n\nFor expressions like `f(g().await)` we were recording `f` as needing to be kept in a temporary (and therefore be tracked by the generator type) across the suspend, even if a function/method path.\nHowever, this is never needed, and can cause issues with complex function types (see #65244).\n\ncc @Zoxc @nikomatsakis", "tree": {"sha": "008c4a4dd11388ddc0b837837d82319e94ea6cb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/008c4a4dd11388ddc0b837837d82319e94ea6cb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f4335296498c7fbfd19cd2de2e193cd48c5051c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdtDlkCRBK7hj4Ov3rIwAAdHIIACUz4zRqe5sRIprXfsFxarrx\nwocvFwicnIeGflEI0y4AbdI0jHKxDvHeXw3WV0Vmc/eDAmiEFTqPwfo4rBP0bAGR\nFJx2UzSGVhkdbn10pJJaMtgqbc2m+hEb6X/xXmmpXcNsVMwxzyLmtD4J6i5k6lOK\nG9deba1RtDKOMXDlfTJ7+NR0UP59XCENC2RqNkMvS3SZLlQ/xFgPwPt2asENe/QS\nHwU6HmWXTysFvtadPt9lrP952IjC0MywAmeV7MYmR1dlsXv6eqH71J5B4B1/8r7p\nfQQ29qWE9vzlQttss8BTZrACVn2ky+WDB++h/3gkvO9Xt8rPqLbAKzht0aEhGjU=\n=4ygn\n-----END PGP SIGNATURE-----\n", "payload": "tree 008c4a4dd11388ddc0b837837d82319e94ea6cb6\nparent 084edc426f2e7e4bbedb5c6afa7fc422a52ee379\nparent d717806363e71332c1563d33ffa0aed97cbbcdbd\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1572092260 +0200\ncommitter GitHub <noreply@github.com> 1572092260 +0200\n\nRollup merge of #65743 - eddyb:generator-on-call, r=matthewjasper\n\nrustc_typeck: don't record direct callees in generator_interior.\n\nFor expressions like `f(g().await)` we were recording `f` as needing to be kept in a temporary (and therefore be tracked by the generator type) across the suspend, even if a function/method path.\nHowever, this is never needed, and can cause issues with complex function types (see #65244).\n\ncc @Zoxc @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4335296498c7fbfd19cd2de2e193cd48c5051c", "html_url": "https://github.com/rust-lang/rust/commit/4f4335296498c7fbfd19cd2de2e193cd48c5051c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f4335296498c7fbfd19cd2de2e193cd48c5051c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "084edc426f2e7e4bbedb5c6afa7fc422a52ee379", "url": "https://api.github.com/repos/rust-lang/rust/commits/084edc426f2e7e4bbedb5c6afa7fc422a52ee379", "html_url": "https://github.com/rust-lang/rust/commit/084edc426f2e7e4bbedb5c6afa7fc422a52ee379"}, {"sha": "d717806363e71332c1563d33ffa0aed97cbbcdbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d717806363e71332c1563d33ffa0aed97cbbcdbd", "html_url": "https://github.com/rust-lang/rust/commit/d717806363e71332c1563d33ffa0aed97cbbcdbd"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "ff9c945eec45219ac9d4ffd2b15400d987d4320d", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4f4335296498c7fbfd19cd2de2e193cd48c5051c/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4335296498c7fbfd19cd2de2e193cd48c5051c/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=4f4335296498c7fbfd19cd2de2e193cd48c5051c", "patch": "@@ -3,9 +3,10 @@\n //! is calculated in `rustc_mir::transform::generator` and may be a subset of the\n //! types computed here.\n \n+use rustc::hir::def::{CtorKind, DefKind, Res};\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use rustc::hir::{self, Pat, PatKind, Expr};\n+use rustc::hir::{self, Pat, PatKind, Expr, ExprKind};\n use rustc::middle::region::{self, YieldData};\n use rustc::ty::{self, Ty};\n use syntax_pos::Span;\n@@ -184,7 +185,33 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n-        intravisit::walk_expr(self, expr);\n+        match &expr.kind {\n+            ExprKind::Call(callee, args) => match &callee.kind {\n+                ExprKind::Path(qpath) => {\n+                    let res = self.fcx.tables.borrow().qpath_res(qpath, callee.hir_id);\n+                    match res {\n+                        // Direct calls never need to keep the callee `ty::FnDef`\n+                        // ZST in a temporary, so skip its type, just in case it\n+                        // can significantly complicate the generator type.\n+                        Res::Def(DefKind::Fn, _) |\n+                        Res::Def(DefKind::Method, _) |\n+                        Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) => {\n+                            // NOTE(eddyb) this assumes a path expression has\n+                            // no nested expressions to keep track of.\n+                            self.expr_count += 1;\n+\n+                            // Record the rest of the call expression normally.\n+                            for arg in args {\n+                                self.visit_expr(arg);\n+                            }\n+                        }\n+                        _ => intravisit::walk_expr(self, expr),\n+                    }\n+                }\n+                _ => intravisit::walk_expr(self, expr),\n+            }\n+            _ => intravisit::walk_expr(self, expr),\n+        }\n \n         self.expr_count += 1;\n "}, {"sha": "6e89deb407e929bad276cc285dfe27bdb6c5c244", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4f4335296498c7fbfd19cd2de2e193cd48c5051c/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f4335296498c7fbfd19cd2de2e193cd48c5051c/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=4f4335296498c7fbfd19cd2de2e193cd48c5051c", "patch": "@@ -9,9 +9,9 @@ LL |     assert_send(local_dropped_before_await());\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `impl std::fmt::Debug`\n-   = note: required because it appears within the type `{impl std::fmt::Debug, fn() -> impl std::future::Future {fut}, impl std::future::Future, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, fn() -> impl std::future::Future {fut}, impl std::future::Future, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, fn() -> impl std::future::Future {fut}, impl std::future::Future, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `{impl std::fmt::Debug, impl std::future::Future, impl std::future::Future, ()}`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, impl std::future::Future, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, impl std::future::Future, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n \n@@ -26,9 +26,9 @@ LL |     assert_send(non_send_temporary_in_match());\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `impl std::fmt::Debug`\n-   = note: required because it appears within the type `{fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, fn() -> impl std::future::Future {fut}, impl std::future::Future, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, fn() -> impl std::future::Future {fut}, impl std::future::Future, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, fn() -> impl std::future::Future {fut}, impl std::future::Future, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `{impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, impl std::future::Future, ()}`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n \n@@ -45,9 +45,9 @@ LL |     assert_send(non_sync_with_method_call());\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&mut dyn std::fmt::Write`\n    = note: required because it appears within the type `std::fmt::Formatter<'_>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&mut std::fmt::Formatter<'_>`\n-   = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, bool, impl std::future::Future, impl std::future::Future, ()}`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, bool, impl std::future::Future, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, bool, impl std::future::Future, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n \n@@ -68,9 +68,9 @@ LL |     assert_send(non_sync_with_method_call());\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::slice::Iter<'_, std::fmt::ArgumentV1<'_>>`\n    = note: required because it appears within the type `std::fmt::Formatter<'_>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&mut std::fmt::Formatter<'_>`\n-   = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, bool, impl std::future::Future, impl std::future::Future, ()}`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, bool, impl std::future::Future, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, bool, impl std::future::Future, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n "}]}