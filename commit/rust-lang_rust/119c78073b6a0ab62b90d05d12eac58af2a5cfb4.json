{"sha": "119c78073b6a0ab62b90d05d12eac58af2a5cfb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExOWM3ODA3M2I2YTBhYjYyYjkwZDA1ZDEyZWFjNThhZjJhNWNmYjQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-02T21:19:47Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-03T20:55:11Z"}, "message": "oldmap: start conversion to explicit self", "tree": {"sha": "6289ba9d8cc165804cdb986f510b24744a7ee074", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6289ba9d8cc165804cdb986f510b24744a7ee074"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/119c78073b6a0ab62b90d05d12eac58af2a5cfb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/119c78073b6a0ab62b90d05d12eac58af2a5cfb4", "html_url": "https://github.com/rust-lang/rust/commit/119c78073b6a0ab62b90d05d12eac58af2a5cfb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/119c78073b6a0ab62b90d05d12eac58af2a5cfb4/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81b4f36d49c8e9632e894f7443c9629f3c2ea294", "url": "https://api.github.com/repos/rust-lang/rust/commits/81b4f36d49c8e9632e894f7443c9629f3c2ea294", "html_url": "https://github.com/rust-lang/rust/commit/81b4f36d49c8e9632e894f7443c9629f3c2ea294"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "adfc88544435302db1f0ac564a89de769e2e74d2", "filename": "src/libstd/oldmap.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/119c78073b6a0ab62b90d05d12eac58af2a5cfb4/src%2Flibstd%2Foldmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119c78073b6a0ab62b90d05d12eac58af2a5cfb4/src%2Flibstd%2Foldmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldmap.rs?ref=119c78073b6a0ab62b90d05d12eac58af2a5cfb4", "patch": "@@ -18,7 +18,6 @@ use core::io::WriterUtil;\n use core::io;\n use core::ops;\n use core::to_str::ToStr;\n-use core::mutable::Mut;\n use core::prelude::*;\n use core::to_bytes::IterBytes;\n use core::uint;\n@@ -175,7 +174,7 @@ pub mod chained {\n     }\n \n     impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V> {\n-        pure fn contains_key_ref(k: &K) -> bool {\n+        pure fn contains_key_ref(&self, k: &K) -> bool {\n             let hash = k.hash_keyed(0,0) as uint;\n             match self.search_tbl(k, hash) {\n               NotFound => false,\n@@ -227,7 +226,7 @@ pub mod chained {\n             }\n         }\n \n-        pure fn find(k: K) -> Option<V> {\n+        pure fn find(&self, k: K) -> Option<V> {\n             unsafe {\n                 match self.search_tbl(&k, k.hash_keyed(0,0) as uint) {\n                   NotFound => None,\n@@ -292,7 +291,7 @@ pub mod chained {\n             return self.update_with_key(key, newval, |_k, v, v1| ff(v,v1));\n         }\n \n-        pure fn get(k: K) -> V {\n+        pure fn get(&self, k: K) -> V {\n             let opt_v = self.find(k);\n             if opt_v.is_none() {\n                 die!(fmt!(\"Key not found in table: %?\", k));\n@@ -316,17 +315,17 @@ pub mod chained {\n             }\n         }\n \n-        pure fn each_ref(blk: fn(key: &K, value: &V) -> bool) {\n+        pure fn each_ref(&self, blk: fn(key: &K, value: &V) -> bool) {\n             for self.each_entry |entry| {\n                 if !blk(&entry.key, &entry.value) { break; }\n             }\n         }\n \n-        pure fn each_key_ref(blk: fn(key: &K) -> bool) {\n+        pure fn each_key_ref(&self, blk: fn(key: &K) -> bool) {\n             self.each_ref(|k, _v| blk(k))\n         }\n \n-        pure fn each_value_ref(blk: fn(value: &V) -> bool) {\n+        pure fn each_value_ref(&self, blk: fn(value: &V) -> bool) {\n             self.each_ref(|_k, v| blk(v))\n         }\n     }"}]}