{"sha": "9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmODAxMmUzYWE4ZDViMDg3MTAwZWNkN2IxMDllZDNkZDI4NTljY2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-19T04:44:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-19T04:44:09Z"}, "message": "Auto merge of #85458 - jackh726:rollup-zvvybmt, r=jackh726\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #83366 (Stabilize extended_key_value_attributes)\n - #83767 (Fix v0 symbol mangling bug)\n - #84883 (compiletest: \"fix\" FileCheck with --allow-unused-prefixes)\n - #85274 (Only pass --[no-]gc-sections if linker is GNU ld.)\n - #85297 (bootstrap: build cargo only if requested in tools)\n - #85396 (rustdoc: restore header sizes)\n - #85425 (Fix must_use on `Option::is_none`)\n - #85438 (Fix escape handling)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "355bae166d5db61da88e4f7f06384a4ad64f38a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/355bae166d5db61da88e4f7f06384a4ad64f38a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "html_url": "https://github.com/rust-lang/rust/commit/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d31363338bc3a4db66237f5be10389cfd01201b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d31363338bc3a4db66237f5be10389cfd01201b", "html_url": "https://github.com/rust-lang/rust/commit/3d31363338bc3a4db66237f5be10389cfd01201b"}, {"sha": "6cfcbf7d032bc4d990ac2121730866849602e174", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cfcbf7d032bc4d990ac2121730866849602e174", "html_url": "https://github.com/rust-lang/rust/commit/6cfcbf7d032bc4d990ac2121730866849602e174"}], "stats": {"total": 326, "additions": 226, "deletions": 100}, "files": [{"sha": "4996c2195efdf2402f8cd32c816671c31623f553", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -712,10 +712,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(const_trait_impl, \"const trait impls are experimental\");\n     gate_all!(half_open_range_patterns, \"half-open range patterns are unstable\");\n     gate_all!(inline_const, \"inline-const is experimental\");\n-    gate_all!(\n-        extended_key_value_attributes,\n-        \"arbitrary expressions in key-value attributes are unstable\"\n-    );\n     gate_all!(\n         const_generics_defaults,\n         \"default values for const generic parameters are experimental\""}, {"sha": "8eef06f018f3af91871a09e4462d8af129500c5d", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -8,7 +8,7 @@\n #![feature(bool_to_option)]\n #![feature(const_cstr_unchecked)]\n #![feature(crate_visibility_modifier)]\n-#![feature(extended_key_value_attributes)]\n+#![cfg_attr(bootstrap, feature(extended_key_value_attributes))]\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]"}, {"sha": "4dc9a3f5e41be181199eb2e5b74b762705d557f8", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -281,8 +281,11 @@ impl<'a> Linker for GccLinker<'a> {\n                 }\n             }\n             LinkOutputKind::DynamicPicExe => {\n-                // `-pie` works for both gcc wrapper and ld.\n-                self.cmd.arg(\"-pie\");\n+                // noop on windows w/ gcc & ld, error w/ lld\n+                if !self.sess.target.is_like_windows {\n+                    // `-pie` works for both gcc wrapper and ld.\n+                    self.cmd.arg(\"-pie\");\n+                }\n             }\n             LinkOutputKind::StaticNoPicExe => {\n                 // `-static` works for both gcc wrapper and ld.\n@@ -347,7 +350,7 @@ impl<'a> Linker for GccLinker<'a> {\n                 // has -needed-l{} / -needed_library {}\n                 // but we have no way to detect that here.\n                 self.sess.warn(\"`as-needed` modifier not implemented yet for ld64\");\n-            } else if self.sess.target.linker_is_gnu {\n+            } else if self.sess.target.linker_is_gnu && !self.sess.target.is_like_windows {\n                 self.linker_arg(\"--no-as-needed\");\n             } else {\n                 self.sess.warn(\"`as-needed` modifier not supported for current linker\");\n@@ -358,7 +361,7 @@ impl<'a> Linker for GccLinker<'a> {\n         if !as_needed {\n             if self.sess.target.is_like_osx {\n                 // See above FIXME comment\n-            } else if self.sess.target.linker_is_gnu {\n+            } else if self.sess.target.linker_is_gnu && !self.sess.target.is_like_windows {\n                 self.linker_arg(\"--as-needed\");\n             }\n         }\n@@ -469,17 +472,15 @@ impl<'a> Linker for GccLinker<'a> {\n         // eliminate the metadata. If we're building an executable, however,\n         // --gc-sections drops the size of hello world from 1.8MB to 597K, a 67%\n         // reduction.\n-        } else if !keep_metadata {\n+        } else if self.sess.target.linker_is_gnu && !keep_metadata {\n             self.linker_arg(\"--gc-sections\");\n         }\n     }\n \n     fn no_gc_sections(&mut self) {\n         if self.sess.target.is_like_osx {\n             self.linker_arg(\"-no_dead_strip\");\n-        } else if self.sess.target.is_like_solaris {\n-            self.linker_arg(\"-zrecord\");\n-        } else {\n+        } else if self.sess.target.linker_is_gnu {\n             self.linker_arg(\"--no-gc-sections\");\n         }\n     }\n@@ -692,7 +693,7 @@ impl<'a> Linker for GccLinker<'a> {\n     }\n \n     fn add_as_needed(&mut self) {\n-        if self.sess.target.linker_is_gnu {\n+        if self.sess.target.linker_is_gnu && !self.sess.target.is_like_windows {\n             self.linker_arg(\"--as-needed\");\n         } else if self.sess.target.is_like_solaris {\n             // -z ignore is the Solaris equivalent to the GNU ld --as-needed option"}, {"sha": "65352f0bc6e7b9f6c9e09a4dc23686779c8ed0f4", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -5,7 +5,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(crate_visibility_modifier)]\n #![feature(backtrace)]\n-#![feature(extended_key_value_attributes)]\n+#![cfg_attr(bootstrap, feature(extended_key_value_attributes))]\n #![feature(format_args_capture)]\n #![feature(iter_zip)]\n #![feature(nll)]"}, {"sha": "eef71e096a52e0ebf579282691f700008d03714e", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -281,6 +281,8 @@ declare_features! (\n     (accepted, or_patterns, \"1.53.0\", Some(54883), None),\n     /// Allows defining identifiers beyond ASCII.\n     (accepted, non_ascii_idents, \"1.53.0\", Some(55467), None),\n+    /// Allows arbitrary expressions in key-value attributes at parse time.\n+    (accepted, extended_key_value_attributes, \"1.54.0\", Some(78835), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "2cef46a844a72e9e4988d5aeed9df897db7182c9", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -601,9 +601,6 @@ declare_features! (\n     /// Allows capturing disjoint fields in a closure/generator (RFC 2229).\n     (active, capture_disjoint_fields, \"1.49.0\", Some(53488), None),\n \n-    /// Allows arbitrary expressions in key-value attributes at parse time.\n-    (active, extended_key_value_attributes, \"1.50.0\", Some(78835), None),\n-\n     /// Allows const generics to have default values (e.g. `struct Foo<const N: usize = 3>(...);`).\n     (active, const_generics_defaults, \"1.51.0\", Some(44580), None),\n "}, {"sha": "71e997994deff85d8ad76304a5bdde9f03f49336", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -4,7 +4,7 @@\n \n #![feature(crate_visibility_modifier)]\n #![feature(const_panic)]\n-#![feature(extended_key_value_attributes)]\n+#![cfg_attr(bootstrap, feature(extended_key_value_attributes))]\n #![feature(in_band_lifetimes)]\n #![feature(once_cell)]\n #![cfg_attr(bootstrap, feature(or_patterns))]"}, {"sha": "4c2bc6ebf3143071d896df2480049798f4636d4f", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -1065,24 +1065,11 @@ impl<'a> Parser<'a> {\n             } else if !delimited_only {\n                 if self.eat(&token::Eq) {\n                     let eq_span = self.prev_token.span;\n-                    let mut is_interpolated_expr = false;\n-                    if let token::Interpolated(nt) = &self.token.kind {\n-                        if let token::NtExpr(..) = **nt {\n-                            is_interpolated_expr = true;\n-                        }\n-                    }\n \n                     // Collect tokens because they are used during lowering to HIR.\n                     let expr = self.parse_expr_force_collect()?;\n                     let span = expr.span;\n \n-                    match &expr.kind {\n-                        // Not gated to support things like `doc = $expr` that work on stable.\n-                        _ if is_interpolated_expr => {}\n-                        ExprKind::Lit(lit) if lit.kind.is_unsuffixed() => {}\n-                        _ => self.sess.gated_spans.gate(sym::extended_key_value_attributes, span),\n-                    }\n-\n                     let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));\n                     MacArgs::Eq(eq_span, Token::new(token_kind, span))\n                 } else {"}, {"sha": "a70b374fc6d21b8b4e236ed4ec07323f9d5c8ad6", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -485,9 +485,39 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         mut self,\n         predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n-        for predicate in predicates {\n-            self = self.in_binder(&predicate, |mut cx, predicate| {\n-                match predicate {\n+        // Okay, so this is a bit tricky. Imagine we have a trait object like\n+        // `dyn for<'a> Foo<'a, Bar = &'a ()>`. When we mangle this, the\n+        // output looks really close to the syntax, where the `Bar = &'a ()` bit\n+        // is under the same binders (`['a]`) as the `Foo<'a>` bit. However, we\n+        // actually desugar these into two separate `ExistentialPredicate`s. We\n+        // can't enter/exit the \"binder scope\" twice though, because then we\n+        // would mangle the binders twice. (Also, side note, we merging these\n+        // two is kind of difficult, because of potential HRTBs in the Projection\n+        // predicate.)\n+        //\n+        // Also worth mentioning: imagine that we instead had\n+        // `dyn for<'a> Foo<'a, Bar = &'a ()> + Send`. In this case, `Send` is\n+        // under the same binders as `Foo`. Currently, this doesn't matter,\n+        // because only *auto traits* are allowed other than the principal trait\n+        // and all auto traits don't have any generics. Two things could\n+        // make this not an \"okay\" mangling:\n+        // 1) Instead of mangling only *used*\n+        // bound vars, we want to mangle *all* bound vars (`for<'b> Send` is a\n+        // valid trait predicate);\n+        // 2) We allow multiple \"principal\" traits in the future, or at least\n+        // allow in any form another trait predicate that can take generics.\n+        //\n+        // Here we assume that predicates have the following structure:\n+        // [<Trait> [{<Projection>}]] [{<Auto>}]\n+        // Since any predicates after the first one shouldn't change the binders,\n+        // just put them all in the binders of the first.\n+        self = self.in_binder(&predicates[0], |mut cx, _| {\n+            for predicate in predicates.iter() {\n+                // It would be nice to be able to validate bound vars here, but\n+                // projections can actually include bound vars from super traits\n+                // because of HRTBs (only in the `Self` type). Also, auto traits\n+                // could have different bound vars *anyways*.\n+                match predicate.as_ref().skip_binder() {\n                     ty::ExistentialPredicate::Trait(trait_ref) => {\n                         // Use a type that can't appear in defaults of type parameters.\n                         let dummy_self = cx.tcx.mk_ty_infer(ty::FreshTy(0));\n@@ -504,9 +534,10 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n                         cx = cx.print_def_path(*def_id, &[])?;\n                     }\n                 }\n-                Ok(cx)\n-            })?;\n-        }\n+            }\n+            Ok(cx)\n+        })?;\n+\n         self.push(\"E\");\n         Ok(self)\n     }"}, {"sha": "5808391ee065d8fb8b823a9ba5539ec494e87899", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -66,6 +66,7 @@ pub fn opts() -> TargetOptions {\n         // FIXME(#13846) this should be enabled for windows\n         function_sections: false,\n         linker: Some(\"gcc\".to_string()),\n+        linker_is_gnu: true,\n         dynamic_linking: true,\n         executables: true,\n         dll_prefix: String::new(),"}, {"sha": "ef1956210448da19a7918c5811df632f3e62f113", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -1394,11 +1394,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let auto_trait_predicates = auto_traits.into_iter().map(|trait_ref| {\n             ty::Binder::dummy(ty::ExistentialPredicate::AutoTrait(trait_ref.trait_ref().def_id()))\n         });\n+        // N.b. principal, projections, auto traits\n+        // FIXME: This is actually wrong with multiple principals in regards to symbol mangling\n         let mut v = regular_trait_predicates\n-            .chain(auto_trait_predicates)\n             .chain(\n                 existential_projections.map(|x| x.map_bound(ty::ExistentialPredicate::Projection)),\n             )\n+            .chain(auto_trait_predicates)\n             .collect::<SmallVec<[_; 8]>>();\n         v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));\n         v.dedup();"}, {"sha": "f652c52db530160623782f897a303897f9bb075d", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -113,7 +113,7 @@\n #![cfg_attr(bootstrap, feature(doc_spotlight))]\n #![cfg_attr(not(bootstrap), feature(doc_notable_trait))]\n #![feature(duration_consts_2)]\n-#![feature(extended_key_value_attributes)]\n+#![cfg_attr(bootstrap, feature(extended_key_value_attributes))]\n #![feature(extern_types)]\n #![feature(fundamental)]\n #![feature(intra_doc_pointers)]"}, {"sha": "cfc1768dee9722578064cf9ecf17705b023b6488", "filename": "library/core/src/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -209,7 +209,7 @@ impl<T> Option<T> {\n     /// assert_eq!(x.is_none(), true);\n     /// ```\n     #[must_use = \"if you intended to assert that this doesn't have a value, consider \\\n-                  `.and_then(|| panic!(\\\"`Option` had a value when expected `None`\\\"))` instead\"]\n+                  `.and_then(|_| panic!(\\\"`Option` had a value when expected `None`\\\"))` instead\"]\n     #[inline]\n     #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "6d11698d268223ffd95dc4e86377127a0795fb82", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -268,7 +268,7 @@\n #![feature(exact_size_is_empty)]\n #![feature(exhaustive_patterns)]\n #![feature(extend_one)]\n-#![feature(extended_key_value_attributes)]\n+#![cfg_attr(bootstrap, feature(extended_key_value_attributes))]\n #![feature(fn_traits)]\n #![feature(format_args_nl)]\n #![feature(gen_future)]"}, {"sha": "dd8c6023a44cb915c177754d606044b4317a13f6", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -593,7 +593,14 @@ impl Step for Cargo {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run.path(\"src/tools/cargo\").default_condition(builder.config.extended)\n+        run.path(\"src/tools/cargo\").default_condition(\n+            builder.config.extended\n+                && builder.config.tools.as_ref().map_or(\n+                    true,\n+                    // If `tools` is set, search list for this tool.\n+                    |tools| tools.iter().any(|tool| tool == \"cargo\"),\n+                ),\n+        )\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}, {"sha": "7d97d5e4ab52f654b94da1fb6a9b9830f763a35f", "filename": "src/doc/rustdoc/README.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Fdoc%2Frustdoc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Fdoc%2Frustdoc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2FREADME.md?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -0,0 +1,5 @@\n+# Rustdoc\n+\n+This is documentation for rustdoc itself, written in mdbook format.\n+To build the book, use `x.py doc src/doc/rustdoc`.\n+To run doctests, use `x.py test src/doc/rustdoc`."}, {"sha": "d192f7d5ce9e52d6d87fe0defa148e07e176bbc6", "filename": "src/doc/rustdoc/src/the-doc-attribute.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -35,6 +35,13 @@ Which can feel more flexible. Note that this would generate this:\n \n but given that docs are rendered via Markdown, it will remove these newlines.\n \n+Another use case is for including external files as documentation:\n+\n+```rust,no_run\n+#[doc = include_str!(\"../README.md\")]\n+# fn f() {}\n+```\n+\n The `doc` attribute has more options though! These don't involve the text of\n the output, but instead, various aspects of the presentation of the output.\n We've split them into two kinds below: attributes that are useful at the"}, {"sha": "7c00cf940c773bcfe3ba53258a7079e7bf6233c5", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -425,9 +425,9 @@ function hideThemeButtonState() {\n     function handleEscape(ev) {\n         var help = getHelpElement(false);\n         var search = searchState.outputElement();\n-        if (!hasClass(help, \"hidden\")) {\n+        if (help && !hasClass(help, \"hidden\")) {\n             displayHelp(false, ev, help);\n-        } else if (!hasClass(search, \"hidden\")) {\n+        } else if (search && !hasClass(search, \"hidden\")) {\n             searchState.clearInputTimeout();\n             ev.preventDefault();\n             searchState.hideResults(search);"}, {"sha": "6d581108836ef6f850d2f722d636e86fa33c8557", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -427,9 +427,13 @@ nav.sub {\n \tborder-bottom: 1px solid;\n }\n \n-#main > .docblock h1 { font-size: 1.3em; }\n-#main > .docblock h2 { font-size: 1.15em; }\n-#main > .docblock h3, #main > .docblock h4, #main > .docblock h5 { font-size: 1em; }\n+.top-doc .docblock h1 { font-size: 1.3em; }\n+.top-doc .docblock h2 { font-size: 1.15em; }\n+.top-doc .docblock h3,\n+.top-doc .docblock h4,\n+.top-doc .docblock h5 {\n+\tfont-size: 1em;\n+}\n \n .docblock h1 { font-size: 1em; }\n .docblock h2 { font-size: 0.95em; }"}, {"sha": "303dd000ba391e9b1133de4f867ada6695b4fc03", "filename": "src/test/rustdoc-gui/escape-key.goml", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -0,0 +1,27 @@\n+goto: file://|DOC_PATH|/test_docs/index.html\n+// First, we check that the search results are hidden when the Escape key is pressed.\n+write: (\".search-input\", \"test\")\n+wait-for: \"#search > h1\" // The search element is empty before the first search \n+assert: (\"#search\", \"class\", \"content\")\n+assert: (\"#main\", \"class\", \"content hidden\")\n+press-key: \"Escape\"\n+assert: (\"#search\", \"class\", \"content hidden\")\n+assert: (\"#main\", \"class\", \"content\")\n+\n+// Check that focusing the search input brings back the search results\n+focus: \".search-input\"\n+assert: (\"#search\", \"class\", \"content\")\n+assert: (\"#main\", \"class\", \"content hidden\")\n+\n+// Now let's check that when the help popup is displayed and we press Escape, it doesn't\n+// hide the search results too.\n+click: \"#help-button\"\n+assert: (\"#help\", \"class\", \"\")\n+press-key: \"Escape\"\n+assert: (\"#help\", \"class\", \"hidden\")\n+assert: (\"#search\", \"class\", \"content\")\n+assert: (\"#main\", \"class\", \"content hidden\")\n+\n+// FIXME: Once https://github.com/rust-lang/rust/pull/84462 is merged, add check to ensure\n+// that Escape hides the search results when a result is focused.\n+// press-key: \"ArrowDown\""}, {"sha": "0dadca551a9ff14a84f851a7de490a9b046d5187", "filename": "src/test/rustdoc/external-doc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Ftest%2Frustdoc%2Fexternal-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Ftest%2Frustdoc%2Fexternal-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fexternal-doc.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -1,5 +1,4 @@\n #![feature(external_doc)]\n-#![feature(extended_key_value_attributes)]\n \n // @has external_doc/struct.CanHasDocs.html\n // @has - '//h1' 'External Docs'"}, {"sha": "95bc1c04961b0b01c49e4a762a6b6e30f1e09f9b", "filename": "src/test/ui/attributes/key-value-expansion-on-mac.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -1,4 +1,3 @@\n-#![feature(extended_key_value_attributes)]\n #![feature(rustc_attrs)]\n \n #[rustc_dummy = stringify!(a)] // OK"}, {"sha": "fa9ea543765f71f3e95c1fc6e13541f5745fedab", "filename": "src/test/ui/attributes/key-value-expansion-on-mac.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.stderr?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -1,5 +1,5 @@\n error: unexpected token: `stringify!(b)`\n-  --> $DIR/key-value-expansion-on-mac.rs:12:17\n+  --> $DIR/key-value-expansion-on-mac.rs:11:17\n    |\n LL | #[rustc_dummy = stringify!(b)]\n    |                 ^^^^^^^^^^^^^"}, {"sha": "f19fdb45f1f1e6f9a8dfa44bf198a75aa6073a38", "filename": "src/test/ui/feature-gates/feature-gate-extended_key_value_attributes.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d31363338bc3a4db66237f5be10389cfd01201b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d31363338bc3a4db66237f5be10389cfd01201b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.rs?ref=3d31363338bc3a4db66237f5be10389cfd01201b", "patch": "@@ -1,8 +0,0 @@\n-#[cfg(FALSE)]\n-#[attr = multi::segment::path] //~ ERROR arbitrary expressions in key-value attributes are unstable\n-#[attr = macro_call!()] //~ ERROR arbitrary expressions in key-value attributes are unstable\n-#[attr = 1 + 2] //~ ERROR arbitrary expressions in key-value attributes are unstable\n-#[attr = what?] //~ ERROR arbitrary expressions in key-value attributes are unstable\n-struct S;\n-\n-fn main() {}"}, {"sha": "9887814b90762bbf06e4e5a44d5c33d2d36e9678", "filename": "src/test/ui/feature-gates/feature-gate-extended_key_value_attributes.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3d31363338bc3a4db66237f5be10389cfd01201b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d31363338bc3a4db66237f5be10389cfd01201b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.stderr?ref=3d31363338bc3a4db66237f5be10389cfd01201b", "patch": "@@ -1,39 +0,0 @@\n-error[E0658]: arbitrary expressions in key-value attributes are unstable\n-  --> $DIR/feature-gate-extended_key_value_attributes.rs:2:10\n-   |\n-LL | #[attr = multi::segment::path]\n-   |          ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #78835 <https://github.com/rust-lang/rust/issues/78835> for more information\n-   = help: add `#![feature(extended_key_value_attributes)]` to the crate attributes to enable\n-\n-error[E0658]: arbitrary expressions in key-value attributes are unstable\n-  --> $DIR/feature-gate-extended_key_value_attributes.rs:3:10\n-   |\n-LL | #[attr = macro_call!()]\n-   |          ^^^^^^^^^^^^^\n-   |\n-   = note: see issue #78835 <https://github.com/rust-lang/rust/issues/78835> for more information\n-   = help: add `#![feature(extended_key_value_attributes)]` to the crate attributes to enable\n-\n-error[E0658]: arbitrary expressions in key-value attributes are unstable\n-  --> $DIR/feature-gate-extended_key_value_attributes.rs:4:10\n-   |\n-LL | #[attr = 1 + 2]\n-   |          ^^^^^\n-   |\n-   = note: see issue #78835 <https://github.com/rust-lang/rust/issues/78835> for more information\n-   = help: add `#![feature(extended_key_value_attributes)]` to the crate attributes to enable\n-\n-error[E0658]: arbitrary expressions in key-value attributes are unstable\n-  --> $DIR/feature-gate-extended_key_value_attributes.rs:5:10\n-   |\n-LL | #[attr = what?]\n-   |          ^^^^^\n-   |\n-   = note: see issue #78835 <https://github.com/rust-lang/rust/issues/78835> for more information\n-   = help: add `#![feature(extended_key_value_attributes)]` to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "a6531490c015914091f13b6423d65a64611090a5", "filename": "src/test/ui/suffixed-literal-meta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_attrs, extended_key_value_attributes)]\n+#![feature(rustc_attrs)]\n \n #[rustc_dummy = 1usize] //~ ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1u8] //~ ERROR: suffixed literals are not allowed in attributes"}, {"sha": "cea1a89d75746d77a8cb61fbd848fb9fd6571096", "filename": "src/test/ui/symbol-names/trait-objects.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -0,0 +1,48 @@\n+// Ensure that trait objects don't include more than one binder. See #83611\n+\n+// build-fail\n+// revisions: v0\n+//[v0]compile-flags: -Z symbol-mangling-version=v0\n+//[v0]normalize-stderr-test: \"Cs.*?_\" -> \"CRATE_HASH\"\n+//[v0]normalize-stderr-test: \"core\\[.*?\\]\" -> \"core[HASH]\"\n+\n+#![feature(rustc_attrs)]\n+\n+trait Bar {\n+    fn method(&self) {}\n+}\n+\n+impl Bar for &dyn FnMut(&u8) {\n+    #[rustc_symbol_name]\n+    //[v0]~^ ERROR symbol-name\n+    //[v0]~| ERROR demangling\n+    //[v0]~| ERROR demangling-alt\n+    fn method(&self) {}\n+}\n+\n+trait Foo {\n+    fn method(&self) {}\n+}\n+\n+impl Foo for &(dyn FnMut(&u8) + for<'b> Send) {\n+    #[rustc_symbol_name]\n+    //[v0]~^ ERROR symbol-name\n+    //[v0]~| ERROR demangling\n+    //[v0]~| ERROR demangling-alt\n+    fn method(&self) {}\n+}\n+\n+trait Baz {\n+    fn method(&self) {}\n+}\n+\n+impl Baz for &(dyn for<'b> Send + FnMut(&u8)) {\n+    #[rustc_symbol_name]\n+    //[v0]~^ ERROR symbol-name\n+    //[v0]~| ERROR demangling\n+    //[v0]~| ERROR demangling-alt\n+    fn method(&self) {}\n+}\n+\n+fn main() {\n+}"}, {"sha": "2b09318f06c74806386f6f668cc805dfd1a74c2f", "filename": "src/test/ui/symbol-names/trait-objects.v0.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -0,0 +1,56 @@\n+error: symbol-name(_RNvXCRATE_HASH13trait_objectsRDG_INtNtNtCRATE_HASH4core3ops8function5FnMutTRL0_hEEp6OutputuEL_NtB2_3Bar6method)\n+  --> $DIR/trait-objects.rs:16:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> as trait_objects[17891616a171812d]::Bar>::method)\n+  --> $DIR/trait-objects.rs:16:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<&dyn for<'a> core::ops::function::FnMut<(&'a u8,), Output = ()> as trait_objects::Bar>::method)\n+  --> $DIR/trait-objects.rs:16:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RNvXs_CRATE_HASH13trait_objectsRDG_INtNtNtCRATE_HASH4core3ops8function5FnMutTRL0_hEEp6OutputuNtNtBI_6marker4SendEL_NtB4_3Foo6method)\n+  --> $DIR/trait-objects.rs:28:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[17891616a171812d]::Foo>::method)\n+  --> $DIR/trait-objects.rs:28:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<&dyn for<'a> core::ops::function::FnMut<(&'a u8,), Output = ()> + core::marker::Send as trait_objects::Foo>::method)\n+  --> $DIR/trait-objects.rs:28:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RNvXs0_CRATE_HASH13trait_objectsRDG_INtNtNtCRATE_HASH4core3ops8function5FnMutTRL0_hEEp6OutputuNtNtBJ_6marker4SendEL_NtB5_3Baz6method)\n+  --> $DIR/trait-objects.rs:40:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[17891616a171812d]::Baz>::method)\n+  --> $DIR/trait-objects.rs:40:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<&dyn for<'a> core::ops::function::FnMut<(&'a u8,), Output = ()> + core::marker::Send as trait_objects::Baz>::method)\n+  --> $DIR/trait-objects.rs:40:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "54b079a3e861057422fe1e075d786b2c10517385", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "patch": "@@ -2327,7 +2327,11 @@ impl<'test> TestCx<'test> {\n         // For now, though\u2026\n         if let Some(rev) = self.revision {\n             let prefixes = format!(\"CHECK,{}\", rev);\n-            filecheck.args(&[\"--check-prefixes\", &prefixes]);\n+            if self.config.llvm_version.unwrap_or(0) >= 130000 {\n+                filecheck.args(&[\"--allow-unused-prefixes\", \"--check-prefixes\", &prefixes]);\n+            } else {\n+                filecheck.args(&[\"--check-prefixes\", &prefixes]);\n+            }\n         }\n         self.compose_and_run(filecheck, \"\", None, None)\n     }"}]}