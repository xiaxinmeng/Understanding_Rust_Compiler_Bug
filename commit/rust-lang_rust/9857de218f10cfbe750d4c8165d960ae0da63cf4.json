{"sha": "9857de218f10cfbe750d4c8165d960ae0da63cf4", "node_id": "C_kwDOAAsO6NoAKDk4NTdkZTIxOGYxMGNmYmU3NTBkNGM4MTY1ZDk2MGFlMGRhNjNjZjQ", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-11-09T13:40:51Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-11-15T05:28:20Z"}, "message": "shift no characters when using raw string literals\n\nremove `find_skips`\n\nremove unnecessary variables", "tree": {"sha": "b2dfa057f8101edfc19812ed031ecb5a82495bc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2dfa057f8101edfc19812ed031ecb5a82495bc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9857de218f10cfbe750d4c8165d960ae0da63cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9857de218f10cfbe750d4c8165d960ae0da63cf4", "html_url": "https://github.com/rust-lang/rust/commit/9857de218f10cfbe750d4c8165d960ae0da63cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9857de218f10cfbe750d4c8165d960ae0da63cf4/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aaad9e757207657064d70bf9e6c1e6eb327bf15", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aaad9e757207657064d70bf9e6c1e6eb327bf15", "html_url": "https://github.com/rust-lang/rust/commit/0aaad9e757207657064d70bf9e6c1e6eb327bf15"}], "stats": {"total": 179, "additions": 103, "deletions": 76}, "files": [{"sha": "0113eb4e3d1029911abf26519c4b742b2e62630e", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 74, "deletions": 76, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/9857de218f10cfbe750d4c8165d960ae0da63cf4/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9857de218f10cfbe750d4c8165d960ae0da63cf4/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=9857de218f10cfbe750d4c8165d960ae0da63cf4", "patch": "@@ -818,96 +818,94 @@ fn find_skips_from_snippet(\n         _ => return (vec![], false),\n     };\n \n-    fn find_skips(snippet: &str, is_raw: bool) -> Vec<usize> {\n-        let mut s = snippet.char_indices();\n-        let mut skips = vec![];\n-        while let Some((pos, c)) = s.next() {\n-            match (c, s.clone().next()) {\n-                // skip whitespace and empty lines ending in '\\\\'\n-                ('\\\\', Some((next_pos, '\\n'))) if !is_raw => {\n-                    skips.push(pos);\n-                    skips.push(next_pos);\n-                    let _ = s.next();\n+    if str_style.is_some() {\n+        return (vec![], true);\n+    }\n \n-                    while let Some((pos, c)) = s.clone().next() {\n-                        if matches!(c, ' ' | '\\n' | '\\t') {\n-                            skips.push(pos);\n-                            let _ = s.next();\n-                        } else {\n-                            break;\n-                        }\n-                    }\n-                }\n-                ('\\\\', Some((next_pos, 'n' | 't' | 'r' | '0' | '\\\\' | '\\'' | '\\\"'))) => {\n-                    skips.push(next_pos);\n-                    let _ = s.next();\n-                }\n-                ('\\\\', Some((_, 'x'))) if !is_raw => {\n-                    for _ in 0..3 {\n-                        // consume `\\xAB` literal\n-                        if let Some((pos, _)) = s.next() {\n-                            skips.push(pos);\n-                        } else {\n-                            break;\n-                        }\n+    let snippet = &snippet[1..snippet.len() - 1];\n+\n+    let mut s = snippet.char_indices();\n+    let mut skips = vec![];\n+    while let Some((pos, c)) = s.next() {\n+        match (c, s.clone().next()) {\n+            // skip whitespace and empty lines ending in '\\\\'\n+            ('\\\\', Some((next_pos, '\\n'))) => {\n+                skips.push(pos);\n+                skips.push(next_pos);\n+                let _ = s.next();\n+\n+                while let Some((pos, c)) = s.clone().next() {\n+                    if matches!(c, ' ' | '\\n' | '\\t') {\n+                        skips.push(pos);\n+                        let _ = s.next();\n+                    } else {\n+                        break;\n                     }\n                 }\n-                ('\\\\', Some((_, 'u'))) if !is_raw => {\n+            }\n+            ('\\\\', Some((next_pos, 'n' | 't' | 'r' | '0' | '\\\\' | '\\'' | '\\\"'))) => {\n+                skips.push(next_pos);\n+                let _ = s.next();\n+            }\n+            ('\\\\', Some((_, 'x'))) => {\n+                for _ in 0..3 {\n+                    // consume `\\xAB` literal\n                     if let Some((pos, _)) = s.next() {\n                         skips.push(pos);\n+                    } else {\n+                        break;\n                     }\n-                    if let Some((next_pos, next_c)) = s.next() {\n-                        if next_c == '{' {\n-                            // consume up to 6 hexanumeric chars\n-                            let digits_len =\n-                                s.clone().take(6).take_while(|(_, c)| c.is_digit(16)).count();\n-\n-                            let len_utf8 = s\n-                                .as_str()\n-                                .get(..digits_len)\n-                                .and_then(|digits| u32::from_str_radix(digits, 16).ok())\n-                                .and_then(char::from_u32)\n-                                .map_or(1, char::len_utf8);\n-\n-                            // Skip the digits, for chars that encode to more than 1 utf-8 byte\n-                            // exclude as many digits as it is greater than 1 byte\n-                            //\n-                            // So for a 3 byte character, exclude 2 digits\n-                            let required_skips =\n-                                digits_len.saturating_sub(len_utf8.saturating_sub(1));\n-\n-                            // skip '{' and '}' also\n-                            for pos in (next_pos..).take(required_skips + 2) {\n-                                skips.push(pos)\n-                            }\n+                }\n+            }\n+            ('\\\\', Some((_, 'u'))) => {\n+                if let Some((pos, _)) = s.next() {\n+                    skips.push(pos);\n+                }\n+                if let Some((next_pos, next_c)) = s.next() {\n+                    if next_c == '{' {\n+                        // consume up to 6 hexanumeric chars\n+                        let digits_len =\n+                            s.clone().take(6).take_while(|(_, c)| c.is_digit(16)).count();\n+\n+                        let len_utf8 = s\n+                            .as_str()\n+                            .get(..digits_len)\n+                            .and_then(|digits| u32::from_str_radix(digits, 16).ok())\n+                            .and_then(char::from_u32)\n+                            .map_or(1, char::len_utf8);\n+\n+                        // Skip the digits, for chars that encode to more than 1 utf-8 byte\n+                        // exclude as many digits as it is greater than 1 byte\n+                        //\n+                        // So for a 3 byte character, exclude 2 digits\n+                        let required_skips = digits_len.saturating_sub(len_utf8.saturating_sub(1));\n+\n+                        // skip '{' and '}' also\n+                        for pos in (next_pos..).take(required_skips + 2) {\n+                            skips.push(pos)\n+                        }\n \n-                            s.nth(digits_len);\n-                        } else if next_c.is_digit(16) {\n-                            skips.push(next_pos);\n-                            // We suggest adding `{` and `}` when appropriate, accept it here as if\n-                            // it were correct\n-                            let mut i = 0; // consume up to 6 hexanumeric chars\n-                            while let (Some((next_pos, c)), _) = (s.next(), i < 6) {\n-                                if c.is_digit(16) {\n-                                    skips.push(next_pos);\n-                                } else {\n-                                    break;\n-                                }\n-                                i += 1;\n+                        s.nth(digits_len);\n+                    } else if next_c.is_digit(16) {\n+                        skips.push(next_pos);\n+                        // We suggest adding `{` and `}` when appropriate, accept it here as if\n+                        // it were correct\n+                        let mut i = 0; // consume up to 6 hexanumeric chars\n+                        while let (Some((next_pos, c)), _) = (s.next(), i < 6) {\n+                            if c.is_digit(16) {\n+                                skips.push(next_pos);\n+                            } else {\n+                                break;\n                             }\n+                            i += 1;\n                         }\n                     }\n                 }\n-                _ => {}\n             }\n+            _ => {}\n         }\n-        skips\n     }\n-\n-    let r_start = str_style.map_or(0, |r| r + 1);\n-    let r_end = str_style.unwrap_or(0);\n-    let s = &snippet[r_start + 1..snippet.len() - r_end - 1];\n-    (find_skips(s, str_style.is_some()), true)\n+    (skips, true)\n }\n \n #[cfg(test)]"}, {"sha": "9f0bc01a749cf52c88b7671fcf8233d77c15fb3f", "filename": "src/test/ui/fmt/format-raw-string-error.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9857de218f10cfbe750d4c8165d960ae0da63cf4/src%2Ftest%2Fui%2Ffmt%2Fformat-raw-string-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9857de218f10cfbe750d4c8165d960ae0da63cf4/src%2Ftest%2Fui%2Ffmt%2Fformat-raw-string-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-raw-string-error.rs?ref=9857de218f10cfbe750d4c8165d960ae0da63cf4", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    println!(r#\"\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'}\"#); //~ ERROR invalid format string: unmatched `}` found\n+}"}, {"sha": "8d61950d8c2adf0399664e5551d2f0ae8e55c287", "filename": "src/test/ui/fmt/format-raw-string-error.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9857de218f10cfbe750d4c8165d960ae0da63cf4/src%2Ftest%2Fui%2Ffmt%2Fformat-raw-string-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9857de218f10cfbe750d4c8165d960ae0da63cf4/src%2Ftest%2Fui%2Ffmt%2Fformat-raw-string-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-raw-string-error.stderr?ref=9857de218f10cfbe750d4c8165d960ae0da63cf4", "patch": "@@ -0,0 +1,10 @@\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/format-raw-string-error.rs:2:45\n+   |\n+LL |     println!(r#\"\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'}\"#);\n+   |                                             ^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8d7283a7197807ceb4496dece340d7fa6e60715b", "filename": "src/test/ui/fmt/issue-104142.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9857de218f10cfbe750d4c8165d960ae0da63cf4/src%2Ftest%2Fui%2Ffmt%2Fissue-104142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9857de218f10cfbe750d4c8165d960ae0da63cf4/src%2Ftest%2Fui%2Ffmt%2Fissue-104142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fissue-104142.rs?ref=9857de218f10cfbe750d4c8165d960ae0da63cf4", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    println!(\n+        r#\"\n+    \\\"\\'}\uff64\"# //~ ERROR invalid format string: unmatched `}` found\n+    );\n+}"}, {"sha": "d41644faa2827a04f9ed0e5a01333a91caf3aa73", "filename": "src/test/ui/fmt/issue-104142.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9857de218f10cfbe750d4c8165d960ae0da63cf4/src%2Ftest%2Fui%2Ffmt%2Fissue-104142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9857de218f10cfbe750d4c8165d960ae0da63cf4/src%2Ftest%2Fui%2Ffmt%2Fissue-104142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fissue-104142.stderr?ref=9857de218f10cfbe750d4c8165d960ae0da63cf4", "patch": "@@ -0,0 +1,10 @@\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/issue-104142.rs:4:9\n+   |\n+LL |     \\\"\\'}\uff64\"#\n+   |         ^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+\n+error: aborting due to previous error\n+"}]}