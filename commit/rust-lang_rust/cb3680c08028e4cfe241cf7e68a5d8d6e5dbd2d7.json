{"sha": "cb3680c08028e4cfe241cf7e68a5d8d6e5dbd2d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMzY4MGMwODAyOGU0Y2ZlMjQxY2Y3ZTY4YTVkOGQ2ZTVkYmQyZDc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-27T19:18:31Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-27T19:18:31Z"}, "message": "Rollup merge of #31186 - gchp:contributing, r=alexcrichton\n\nI recently wrote a blog post on contributing to the Rust compiler which\ngained some interest. It was mentioned in a comment on Reddit that it\nwould be useful to integrate some of the information from that post to\nthe official contributing guide.\n\nThis is the start of my efforts to integrate what I wrote with the\nofficial guide.\n\nThis commit adds information on the build system. It is not a complete\nguide on the build system, but it should be enough to provide a good\nstarting place for those wishing to contribute.", "tree": {"sha": "09b500c15b617110b58da37bb549bd648402bf36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09b500c15b617110b58da37bb549bd648402bf36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb3680c08028e4cfe241cf7e68a5d8d6e5dbd2d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3680c08028e4cfe241cf7e68a5d8d6e5dbd2d7", "html_url": "https://github.com/rust-lang/rust/commit/cb3680c08028e4cfe241cf7e68a5d8d6e5dbd2d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb3680c08028e4cfe241cf7e68a5d8d6e5dbd2d7/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b29628ac914562a649aa9beeacdba5ffe0041f41", "url": "https://api.github.com/repos/rust-lang/rust/commits/b29628ac914562a649aa9beeacdba5ffe0041f41", "html_url": "https://github.com/rust-lang/rust/commit/b29628ac914562a649aa9beeacdba5ffe0041f41"}, {"sha": "05f7b59352abe51f4b1b4897dfcdae7feb33a3a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/05f7b59352abe51f4b1b4897dfcdae7feb33a3a3", "html_url": "https://github.com/rust-lang/rust/commit/05f7b59352abe51f4b1b4897dfcdae7feb33a3a3"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "e4870aa6a898032210f87bbd9af33ce045735edf", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/cb3680c08028e4cfe241cf7e68a5d8d6e5dbd2d7/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/cb3680c08028e4cfe241cf7e68a5d8d6e5dbd2d7/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=cb3680c08028e4cfe241cf7e68a5d8d6e5dbd2d7", "patch": "@@ -6,6 +6,7 @@ links to the major sections:\n \n * [Feature Requests](#feature-requests)\n * [Bug Reports](#bug-reports)\n+* [The Build System](#the-build-system)\n * [Pull Requests](#pull-requests)\n * [Writing Documentation](#writing-documentation)\n * [Issue Triage](#issue-triage)\n@@ -77,6 +78,66 @@ to do this is to invoke `rustc` like this:\n $ RUST_BACKTRACE=1 rustc ...\n ```\n \n+## The Build System\n+\n+Rust's build system allows you to bootstrap the compiler, run tests &\n+benchmarks, generate documentation, install a fresh build of Rust, and more.\n+It's your best friend when working on Rust, allowing you to compile & test\n+your contributions before submission.\n+\n+All the configuration for the build system lives in [the `mk` directory][mkdir]\n+in the project root. It can be hard to follow in places, as it uses some\n+advanced Make features which make for some challenging reading. If you have\n+questions on the build system internals, try asking in\n+[`#rust-internals`][pound-rust-internals].\n+\n+[mkdir]: https://github.com/rust-lang/rust/tree/master/mk/\n+\n+### Configuration\n+\n+Before you can start building the compiler you need to configure the build for\n+your system. In most cases, that will just mean using the defaults provided\n+for Rust. Configuring involves invoking the `configure` script in the project\n+root.\n+\n+```\n+./configure\n+```\n+\n+There are large number of options accepted by this script to alter the\n+configuration used later in the build process. Some options to note:\n+\n+- `--enable-debug` - Build a debug version of the compiler (disables optimizations)\n+- `--enable-optimize` - Enable optimizations (can be used with `--enable-debug`\n+    to make a debug build with optimizations)\n+- `--disable-valgrind-rpass` - Don't run tests with valgrind\n+- `--enable-clang` - Prefer clang to gcc for building dependencies (e.g., LLVM)\n+- `--enable-ccache` - Invoke clang/gcc with ccache to re-use object files between builds\n+- `--enable-compiler-docs` - Build compiler documentation\n+\n+To see a full list of options, run `./configure --help`.\n+\n+### Useful Targets\n+\n+Some common make targets are:\n+\n+- `make rustc-stage1` - build up to (and including) the first stage. For most\n+  cases we don't need to build the stage2 compiler, so we can save time by not\n+  building it. The stage1 compiler is a fully functioning compiler and\n+  (probably) will be enough to determine if your change works as expected.\n+- `make check` - build the full compiler & run all tests (takes a while). This\n+  is what gets run by the continuous integration system against your pull\n+  request. You should run this before submitting to make sure your tests pass\n+  & everything builds in the correct manner.\n+- `make check-stage1-std NO_REBUILD=1` - test the standard library without\n+  rebuilding the entire compiler\n+- `make check TESTNAME=<path-to-test-file>.rs` - Run a single test file\n+- `make check-stage1-rpass TESTNAME=<path-to-test-file>.rs` - Run a single\n+  rpass test with the stage1 compiler (this will be quicker than running the\n+  command above as we only build the stage1 compiler, not the entire thing).\n+  You can also leave off the `-rpass` to run all stage1 test types.\n+- `make check-stage1-coretest` - Run stage1 tests in `libcore`.\n+\n ## Pull Requests\n \n Pull requests are the primary mechanism we use to change Rust. GitHub itself"}]}