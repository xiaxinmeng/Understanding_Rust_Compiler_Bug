{"sha": "6572874965b43abfacf292143ae85213e0b5927c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NzI4NzQ5NjViNDNhYmZhY2YyOTIxNDNhZTg1MjEzZTBiNTkyN2M=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-01-18T21:47:07Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-01-19T19:20:49Z"}, "message": "Update to latest Syntex\n\nAs a side-effect of the Path changes, we are now a bit more aggressive about normalising paths.", "tree": {"sha": "f154af645730dac8608c017c658fcac4f9d6989a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f154af645730dac8608c017c658fcac4f9d6989a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6572874965b43abfacf292143ae85213e0b5927c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6572874965b43abfacf292143ae85213e0b5927c", "html_url": "https://github.com/rust-lang/rust/commit/6572874965b43abfacf292143ae85213e0b5927c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6572874965b43abfacf292143ae85213e0b5927c/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49e86a1e6501b261e6fef530d478ad0ea5ff3814", "url": "https://api.github.com/repos/rust-lang/rust/commits/49e86a1e6501b261e6fef530d478ad0ea5ff3814", "html_url": "https://github.com/rust-lang/rust/commit/49e86a1e6501b261e6fef530d478ad0ea5ff3814"}], "stats": {"total": 364, "additions": 198, "deletions": 166}, "files": [{"sha": "d4d4b4b49627f8274a5ccebc2794beb275a1efe5", "filename": "Cargo.lock", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6572874965b43abfacf292143ae85213e0b5927c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6572874965b43abfacf292143ae85213e0b5927c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6572874965b43abfacf292143ae85213e0b5927c", "patch": "@@ -7,14 +7,14 @@ dependencies = [\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"multimap 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syntex_errors 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syntex_syntax 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_errors 0.56.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_syntax 0.56.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -78,7 +78,7 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.19\"\n+version = \"0.2.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -91,7 +91,7 @@ name = \"memchr\"\n version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -127,7 +127,7 @@ version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -141,38 +141,38 @@ dependencies = [\n \n [[package]]\n name = \"syntex_errors\"\n-version = \"0.52.0\"\n+version = \"0.56.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syntex_pos 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_pos 0.56.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"syntex_pos\"\n-version = \"0.52.0\"\n+version = \"0.56.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"syntex_syntax\"\n-version = \"0.52.0\"\n+version = \"0.56.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syntex_errors 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syntex_pos 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_errors 0.56.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_pos 0.56.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -190,7 +190,7 @@ version = \"2.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -216,7 +216,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"unicode-xid\"\n-version = \"0.0.3\"\n+version = \"0.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -253,7 +253,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n \"checksum itertools 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6946da472dbbcbd98c049050e8e587cc4ee26985992e582b1d74a35cb8a7020\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum libc 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9e030dc72013ed68994d1b2cbf36a94dd0e58418ba949c4b0db7eeb70a7a6352\"\n+\"checksum libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"684f330624d8c3784fb9558ca46c4ce488073a8d22450415c5eb4f4cfb0d11b5\"\n \"checksum log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab83497bf8bf4ed2a74259c1c802351fcd67a65baa86394b6ba73c36f4838054\"\n \"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n \"checksum multimap 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9223f4774d08e06185e44e555b9a7561243d387bac49c78a6205c42d6975fbf2\"\n@@ -262,15 +262,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"237546c689f20bb44980270c73c3b9edd0891c1be49cc1274406134a66d3957b\"\n \"checksum same-file 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c722bde68d432ad7982a6431b13264cc558af1707c0f321820e238c5671856ea\"\n \"checksum strings 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"54f86446ab480b4f60782188f4f78886465c5793aee248cbb48b7fdc0d022420\"\n-\"checksum syntex_errors 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9e52bffe6202cfb67587784cf23e0ec5bf26d331eef4922a16d5c42e12aa1e9b\"\n-\"checksum syntex_pos 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"955ef4b16af4c468e4680d1497f873ff288f557d338180649e18f915af5e15ac\"\n-\"checksum syntex_syntax 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76a302e717e348aa372ff577791c3832395650073b8d8432f8b3cb170b34afde\"\n+\"checksum syntex_errors 0.56.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"13596c6a30ecd9d73d5f03167b7cc98f1e3e65063b046ac10b411dc9b2a8c600\"\n+\"checksum syntex_pos 0.56.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d55810cf983ad75bcc52ec97a777b619b00d821219df7883d40f2aed7416966a\"\n+\"checksum syntex_syntax 0.56.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca00794c3556cadbcec14036c8bce354d92de33bd5ffbbc5bc090a4c595b27dc\"\n \"checksum term 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3deff8a2b3b6607d6d7cc32ac25c0b33709453ca9cceac006caac51e963cf94a\"\n \"checksum thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9539db560102d1cef46b8b78ce737ff0bb64e7e18d35b2a5688f7d097d0ff03\"\n \"checksum thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8576dbbfcaef9641452d5cf0df9b0e7eeab7694956dd33bb61515fb8f18cfdd5\"\n \"checksum toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"736b60249cb25337bc196faa43ee12c705e426f3d55c214d73a4e7be06f92cb4\"\n \"checksum unicode-segmentation 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7baebdc1df1363fa66161fca2fe047e4f4209011cc7e045948298996afdf85df\"\n-\"checksum unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36dff09cafb4ec7c8cf0023eb0b686cb6ce65499116a12201c9e11840ca01beb\"\n+\"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n \"checksum utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1ca13c08c41c9c3e04224ed9ff80461d97e121589ff27c753a16cb10830ae0f\"\n \"checksum walkdir 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb08f9e670fab86099470b97cd2b252d6527f0b3cc1401acdb595ffc9dd288ff\"\n \"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\""}, {"sha": "3dc8e8c0ff03570676bf8e1b7954ebd0682db13b", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6572874965b43abfacf292143ae85213e0b5927c/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6572874965b43abfacf292143ae85213e0b5927c/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=6572874965b43abfacf292143ae85213e0b5927c", "patch": "@@ -22,8 +22,8 @@ regex = \"0.1\"\n term = \"0.4\"\n strings = \"0.0.1\"\n diff = \"0.1\"\n-syntex_syntax = \"0.52\"\n-syntex_errors = \"0.52\"\n+syntex_syntax = \"0.56\"\n+syntex_errors = \"0.56\"\n log = \"0.3\"\n env_logger = \"0.3\"\n getopts = \"0.2\""}, {"sha": "1971f2061f52007601ea1f6758a504ebfb3adff4", "filename": "src/config.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6572874965b43abfacf292143ae85213e0b5927c/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572874965b43abfacf292143ae85213e0b5927c/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=6572874965b43abfacf292143ae85213e0b5927c", "patch": "@@ -384,7 +384,6 @@ create_config! {\n     reorder_imports: bool, false, \"Reorder import statements alphabetically\";\n     reorder_imported_names: bool, false,\n         \"Reorder lists of names in import statements alphabetically\";\n-    normalize_imports: bool, true, \"Allows removing braces from imports and reducing paths\";\n     single_line_if_else_max_width: usize, 50, \"Maximum line length for single line if-else \\\n                                                 expressions. A value of zero means always break \\\n                                                 if-else expressions.\";"}, {"sha": "c7d1ee3b680ede52b85239e0e5a74220381d0a7b", "filename": "src/expr.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6572874965b43abfacf292143ae85213e0b5927c/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572874965b43abfacf292143ae85213e0b5927c/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=6572874965b43abfacf292143ae85213e0b5927c", "patch": "@@ -26,7 +26,7 @@ use utils::{extra_offset, last_line_width, wrap_str, binary_search, first_line_w\n use visitor::FmtVisitor;\n use config::{Config, StructLitStyle, MultilineStyle, ControlBraceStyle};\n use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};\n-use types::rewrite_path;\n+use types::{rewrite_path, PathContext};\n use items::{span_lo_for_arg, span_hi_for_arg};\n use chains::rewrite_chain;\n use macros::{rewrite_macro, MacroPosition};\n@@ -54,7 +54,7 @@ fn format_expr(expr: &ast::Expr,\n                offset: Indent)\n                -> Option<String> {\n     let result = match expr.node {\n-        ast::ExprKind::Vec(ref expr_vec) => {\n+        ast::ExprKind::Array(ref expr_vec) => {\n             rewrite_array(expr_vec.iter().map(|e| &**e),\n                           mk_sp(context.codemap.span_after(expr.span, \"[\"), expr.span.hi),\n                           context,\n@@ -148,7 +148,12 @@ fn format_expr(expr: &ast::Expr,\n             rewrite_match(context, cond, arms, width, offset, expr.span)\n         }\n         ast::ExprKind::Path(ref qself, ref path) => {\n-            rewrite_path(context, true, qself.as_ref(), path, width, offset)\n+            rewrite_path(context,\n+                         PathContext::Expr,\n+                         qself.as_ref(),\n+                         path,\n+                         width,\n+                         offset)\n         }\n         ast::ExprKind::Assign(ref lhs, ref rhs) => {\n             rewrite_assignment(context, lhs, rhs, None, width, offset)\n@@ -1727,7 +1732,8 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n \n     // 2 = \" {\".len()\n     let path_budget = try_opt!(width.checked_sub(2));\n-    let path_str = try_opt!(rewrite_path(context, true, None, path, path_budget, offset));\n+    let path_str =\n+        try_opt!(rewrite_path(context, PathContext::Expr, None, path, path_budget, offset));\n \n     // Foo { a: Foo } - indent is +3, width is -5.\n     let h_budget = width.checked_sub(path_str.len() + 5).unwrap_or(0);"}, {"sha": "a75a571c553fe39f496ce7f3755d64342d80c8eb", "filename": "src/imports.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6572874965b43abfacf292143ae85213e0b5927c/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572874965b43abfacf292143ae85213e0b5927c/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=6572874965b43abfacf292143ae85213e0b5927c", "patch": "@@ -13,7 +13,7 @@ use utils;\n use syntax::codemap::{self, BytePos, Span};\n use codemap::SpanUtils;\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, definitive_tactic};\n-use types::rewrite_path;\n+use types::{rewrite_path, PathContext};\n use rewrite::{Rewrite, RewriteContext};\n use visitor::FmtVisitor;\n use std::cmp::{self, Ordering};\n@@ -139,17 +139,20 @@ impl Rewrite for ast::ViewPath {\n                 // 4 = \" as \".len()\n                 let budget = try_opt!(width.checked_sub(ident_str.len() + 4));\n \n-                let path_str = if context.config.normalize_imports &&\n-                                  path.segments.last().unwrap().identifier.to_string() == \"self\" &&\n+                let path_str = if path.segments.last().unwrap().identifier.to_string() == \"self\" &&\n                                   path.segments.len() > 1 {\n                     let path = &ast::Path {\n                         span: path.span.clone(),\n                         segments: path.segments[..path.segments.len() - 1].to_owned(),\n-                        global: path.global,\n                     };\n-                    try_opt!(rewrite_path(context, false, None, &path, budget, offset))\n+                    try_opt!(rewrite_path(context,\n+                                          PathContext::Import,\n+                                          None,\n+                                          &path,\n+                                          budget,\n+                                          offset))\n                 } else {\n-                    try_opt!(rewrite_path(context, false, None, path, budget, offset))\n+                    try_opt!(rewrite_path(context, PathContext::Import, None, path, budget, offset))\n                 };\n \n                 Some(if path.segments.last().unwrap().identifier == ident {\n@@ -248,17 +251,22 @@ impl<'a> FmtVisitor<'a> {\n     }\n }\n \n-fn rewrite_single_use_list(path_str: Option<String>,\n-                           vpi: &ast::PathListItem,\n-                           context: &RewriteContext)\n-                           -> String {\n-    let path_item_str = match path_str {\n-        Some(ref path_str) if vpi.node.name.to_string() == \"self\" &&\n-                              context.config.normalize_imports => path_str.to_owned(),\n-        Some(path_str) => format!(\"{}::{}\", path_str, vpi.node.name),\n-        None => vpi.node.name.to_string(),\n+fn rewrite_single_use_list(path_str: String, vpi: &ast::PathListItem) -> String {\n+    let mut item_str = vpi.node.name.to_string();\n+    if item_str == \"self\" {\n+        item_str = \"\".to_owned();\n+    }\n+    let path_item_str = if path_str.is_empty() {\n+        if item_str.is_empty() {\n+            \"self\".to_owned()\n+        } else {\n+            item_str\n+        }\n+    } else if item_str.is_empty() {\n+        path_str\n+    } else {\n+        format!(\"{}::{}\", path_str, item_str)\n     };\n-\n     append_alias(path_item_str, vpi)\n }\n \n@@ -283,27 +291,16 @@ pub fn rewrite_use_list(width: usize,\n                         context: &RewriteContext)\n                         -> Option<String> {\n     // Returns a different option to distinguish `::foo` and `foo`\n-    let opt_path_str = if !path.to_string().is_empty() {\n-        Some(path.to_string())\n-    } else if path.global {\n-        // path is absolute, we return an empty String to avoid a double `::`\n-        Some(String::new())\n-    } else {\n-        None\n-    };\n+    let path_str = try_opt!(rewrite_path(context, PathContext::Import, None, path, width, offset));\n \n     match path_list.len() {\n         0 => unreachable!(),\n-        1 => return Some(rewrite_single_use_list(opt_path_str, &path_list[0], context)),\n+        1 => return Some(rewrite_single_use_list(path_str, &path_list[0])),\n         _ => (),\n     }\n \n-    // 2 = ::\n-    let path_separation_w = if opt_path_str.is_some() { 2 } else { 0 };\n-    // 1 = {\n-    let supp_indent = path.to_string().len() + path_separation_w + 1;\n-    // 1 = }\n-    let remaining_width = width.checked_sub(supp_indent + 1).unwrap_or(0);\n+    // 2 = {}\n+    let remaining_width = width.checked_sub(path_str.len() + 2).unwrap_or(0);\n \n     let mut items = {\n         // Dummy value, see explanation below.\n@@ -330,14 +327,16 @@ pub fn rewrite_use_list(width: usize,\n         items[1..].sort_by(|a, b| a.item.cmp(&b.item));\n     }\n \n+    let colons_offset = if path_str.is_empty() { 0 } else { 2 };\n+\n     let tactic = definitive_tactic(&items[first_index..],\n                                    ::lists::ListTactic::Mixed,\n                                    remaining_width);\n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\",\n         trailing_separator: SeparatorTactic::Never,\n-        indent: offset + supp_indent,\n+        indent: offset + path_str.len() + 1 + colons_offset,\n         // FIXME This is too conservative, and will not use all width\n         // available\n         // (loose 1 column (\";\"))\n@@ -347,9 +346,10 @@ pub fn rewrite_use_list(width: usize,\n     };\n     let list_str = try_opt!(write_list(&items[first_index..], &fmt));\n \n-    Some(match opt_path_str {\n-        Some(opt_path_str) => format!(\"{}::{{{}}}\", opt_path_str, list_str),\n-        None => format!(\"{{{}}}\", list_str),\n+    Some(if path_str.is_empty() {\n+        format!(\"{{{}}}\", list_str)\n+    } else {\n+        format!(\"{}::{{{}}}\", path_str, list_str)\n     })\n }\n "}, {"sha": "03598a1971b78d4a805de879ea30a3bb658ab10a", "filename": "src/patterns.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6572874965b43abfacf292143ae85213e0b5927c/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572874965b43abfacf292143ae85213e0b5927c/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=6572874965b43abfacf292143ae85213e0b5927c", "patch": "@@ -14,7 +14,7 @@ use rewrite::{Rewrite, RewriteContext};\n use utils::{wrap_str, format_mutability};\n use lists::{format_item_list, itemize_list, ListItem};\n use expr::{rewrite_unary_prefix, rewrite_pair};\n-use types::rewrite_path;\n+use types::{rewrite_path, PathContext};\n use super::Spanned;\n use comment::FindUncommented;\n \n@@ -65,10 +65,16 @@ impl Rewrite for Pat {\n                 rewrite_tuple_pat(items, dotdot_pos, None, self.span, context, width, offset)\n             }\n             PatKind::Path(ref q_self, ref path) => {\n-                rewrite_path(context, true, q_self.as_ref(), path, width, offset)\n+                rewrite_path(context,\n+                             PathContext::Expr,\n+                             q_self.as_ref(),\n+                             path,\n+                             width,\n+                             offset)\n             }\n             PatKind::TupleStruct(ref path, ref pat_vec, dotdot_pos) => {\n-                let path_str = try_opt!(rewrite_path(context, true, None, path, width, offset));\n+                let path_str =\n+                    try_opt!(rewrite_path(context, PathContext::Expr, None, path, width, offset));\n                 rewrite_tuple_pat(pat_vec,\n                                   dotdot_pos,\n                                   Some(path_str),\n@@ -102,7 +108,8 @@ impl Rewrite for Pat {\n                 wrap_str(result, context.config.max_width, width, offset)\n             }\n             PatKind::Struct(ref path, ref fields, elipses) => {\n-                let path = try_opt!(rewrite_path(context, true, None, path, width, offset));\n+                let path =\n+                    try_opt!(rewrite_path(context, PathContext::Expr, None, path, width, offset));\n \n                 let (elipses_str, terminator) = if elipses { (\", ..\", \"..\") } else { (\"\", \"}\") };\n "}, {"sha": "acc9c7c6cb51ecc0d57a27fbc59a0dfd62bcf763", "filename": "src/types.rs", "status": "modified", "additions": 106, "deletions": 88, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/6572874965b43abfacf292143ae85213e0b5927c/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572874965b43abfacf292143ae85213e0b5927c/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=6572874965b43abfacf292143ae85213e0b5927c", "patch": "@@ -11,10 +11,11 @@\n use std::ops::Deref;\n use std::iter::ExactSizeIterator;\n \n+use syntax::abi;\n use syntax::ast::{self, Mutability, FunctionRetTy};\n-use syntax::print::pprust;\n use syntax::codemap::{self, Span, BytePos};\n-use syntax::abi;\n+use syntax::print::pprust;\n+use syntax::symbol::keywords;\n \n use {Indent, Spanned};\n use codemap::SpanUtils;\n@@ -25,17 +26,25 @@ use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple};\n use config::TypeDensity;\n use itertools::Itertools;\n \n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+pub enum PathContext {\n+    Expr,\n+    Type,\n+    Import,\n+}\n+\n // Does not wrap on simple segments.\n pub fn rewrite_path(context: &RewriteContext,\n-                    expr_context: bool,\n+                    path_context: PathContext,\n                     qself: Option<&ast::QSelf>,\n                     path: &ast::Path,\n                     width: usize,\n                     offset: Indent)\n                     -> Option<String> {\n     let skip_count = qself.map_or(0, |x| x.position);\n \n-    let mut result = if path.global && qself.is_none() {\n+    let mut result = if path.is_global() && qself.is_none() &&\n+                        path_context != PathContext::Import {\n         \"::\".to_owned()\n     } else {\n         String::new()\n@@ -54,15 +63,15 @@ pub fn rewrite_path(context: &RewriteContext,\n \n         if skip_count > 0 {\n             result.push_str(\" as \");\n-            if path.global {\n+            if path.is_global() && path_context != PathContext::Import {\n                 result.push_str(\"::\");\n             }\n \n             let extra_offset = extra_offset(&result, offset);\n             // 3 = \">::\".len()\n             let budget = try_opt!(width.checked_sub(extra_offset + 3));\n \n-            result = try_opt!(rewrite_path_segments(false,\n+            result = try_opt!(rewrite_path_segments(PathContext::Type,\n                                                     result,\n                                                     path.segments.iter().take(skip_count),\n                                                     span_lo,\n@@ -82,7 +91,7 @@ pub fn rewrite_path(context: &RewriteContext,\n \n     let extra_offset = extra_offset(&result, offset);\n     let budget = try_opt!(width.checked_sub(extra_offset));\n-    rewrite_path_segments(expr_context,\n+    rewrite_path_segments(path_context,\n                           result,\n                           path.segments.iter().skip(skip_count),\n                           span_lo,\n@@ -92,7 +101,7 @@ pub fn rewrite_path(context: &RewriteContext,\n                           offset + extra_offset)\n }\n \n-fn rewrite_path_segments<'a, I>(expr_context: bool,\n+fn rewrite_path_segments<'a, I>(path_context: PathContext,\n                                 mut buffer: String,\n                                 iter: I,\n                                 mut span_lo: BytePos,\n@@ -106,6 +115,10 @@ fn rewrite_path_segments<'a, I>(expr_context: bool,\n     let mut first = true;\n \n     for segment in iter {\n+        // Indicates a global path, shouldn't be rendered.\n+        if segment.identifier.name == keywords::CrateRoot.name() {\n+            continue;\n+        }\n         if first {\n             first = false;\n         } else {\n@@ -115,7 +128,7 @@ fn rewrite_path_segments<'a, I>(expr_context: bool,\n         let extra_offset = extra_offset(&buffer, offset);\n         let remaining_width = try_opt!(width.checked_sub(extra_offset));\n         let new_offset = offset + extra_offset;\n-        let segment_string = try_opt!(rewrite_segment(expr_context,\n+        let segment_string = try_opt!(rewrite_segment(path_context,\n                                                       segment,\n                                                       &mut span_lo,\n                                                       span_hi,\n@@ -172,7 +185,7 @@ impl<'a> Rewrite for SegmentParam<'a> {\n //\n // When the segment contains a positive number of parameters, we update span_lo\n // so that invariants described above will hold for the next segment.\n-fn rewrite_segment(expr_context: bool,\n+fn rewrite_segment(path_context: PathContext,\n                    segment: &ast::PathSegment,\n                    span_lo: &mut BytePos,\n                    span_hi: BytePos,\n@@ -184,62 +197,71 @@ fn rewrite_segment(expr_context: bool,\n     let width = try_opt!(width.checked_sub(ident_len));\n     let offset = offset + ident_len;\n \n-    let params = match segment.parameters {\n-        ast::PathParameters::AngleBracketed(ref data) if !data.lifetimes.is_empty() ||\n-                                                         !data.types.is_empty() ||\n-                                                         !data.bindings.is_empty() => {\n-            let param_list = data.lifetimes\n-                .iter()\n-                .map(SegmentParam::LifeTime)\n-                .chain(data.types.iter().map(|x| SegmentParam::Type(&*x)))\n-                .chain(data.bindings.iter().map(|x| SegmentParam::Binding(&*x)))\n-                .collect::<Vec<_>>();\n-\n-            let next_span_lo = param_list.last().unwrap().get_span().hi + BytePos(1);\n-            let list_lo = context.codemap.span_after(codemap::mk_sp(*span_lo, span_hi), \"<\");\n-            let separator = if expr_context { \"::\" } else { \"\" };\n-\n-            // 1 for <\n-            let extra_offset = 1 + separator.len();\n-            // 1 for >\n-            let list_width = try_opt!(width.checked_sub(extra_offset + 1));\n-\n-            let items = itemize_list(context.codemap,\n-                                     param_list.into_iter(),\n-                                     \">\",\n-                                     |param| param.get_span().lo,\n-                                     |param| param.get_span().hi,\n-                                     |seg| seg.rewrite(context, list_width, offset + extra_offset),\n-                                     list_lo,\n-                                     span_hi);\n-            let list_str = try_opt!(format_item_list(items,\n-                                                     list_width,\n-                                                     offset + extra_offset,\n-                                                     context.config));\n-\n-            // Update position of last bracket.\n-            *span_lo = next_span_lo;\n-\n-            if context.config.spaces_within_angle_brackets && list_str.len() > 0 {\n-                format!(\"{}< {} >\", separator, list_str)\n-            } else {\n-                format!(\"{}<{}>\", separator, list_str)\n+    let params = if let Some(ref params) = segment.parameters {\n+        match **params {\n+            ast::PathParameters::AngleBracketed(ref data) if !data.lifetimes.is_empty() ||\n+                                                             !data.types.is_empty() ||\n+                                                             !data.bindings.is_empty() => {\n+                let param_list = data.lifetimes\n+                    .iter()\n+                    .map(SegmentParam::LifeTime)\n+                    .chain(data.types.iter().map(|x| SegmentParam::Type(&*x)))\n+                    .chain(data.bindings.iter().map(|x| SegmentParam::Binding(&*x)))\n+                    .collect::<Vec<_>>();\n+\n+                let next_span_lo = param_list.last().unwrap().get_span().hi + BytePos(1);\n+                let list_lo = context.codemap.span_after(codemap::mk_sp(*span_lo, span_hi), \"<\");\n+                let separator = if path_context == PathContext::Expr {\n+                    \"::\"\n+                } else {\n+                    \"\"\n+                };\n+\n+                // 1 for <\n+                let extra_offset = 1 + separator.len();\n+                // 1 for >\n+                let list_width = try_opt!(width.checked_sub(extra_offset + 1));\n+\n+                let items =\n+                    itemize_list(context.codemap,\n+                                 param_list.into_iter(),\n+                                 \">\",\n+                                 |param| param.get_span().lo,\n+                                 |param| param.get_span().hi,\n+                                 |seg| seg.rewrite(context, list_width, offset + extra_offset),\n+                                 list_lo,\n+                                 span_hi);\n+                let list_str = try_opt!(format_item_list(items,\n+                                                         list_width,\n+                                                         offset + extra_offset,\n+                                                         context.config));\n+\n+                // Update position of last bracket.\n+                *span_lo = next_span_lo;\n+\n+                if context.config.spaces_within_angle_brackets && list_str.len() > 0 {\n+                    format!(\"{}< {} >\", separator, list_str)\n+                } else {\n+                    format!(\"{}<{}>\", separator, list_str)\n+                }\n             }\n+            ast::PathParameters::Parenthesized(ref data) => {\n+                let output = match data.output {\n+                    Some(ref ty) => FunctionRetTy::Ty(ty.clone()),\n+                    None => FunctionRetTy::Default(codemap::DUMMY_SP),\n+                };\n+                try_opt!(format_function_type(data.inputs.iter().map(|x| &**x),\n+                                              &output,\n+                                              false,\n+                                              data.span,\n+                                              context,\n+                                              width,\n+                                              offset))\n+            }\n+            _ => String::new(),\n         }\n-        ast::PathParameters::Parenthesized(ref data) => {\n-            let output = match data.output {\n-                Some(ref ty) => FunctionRetTy::Ty(ty.clone()),\n-                None => FunctionRetTy::Default(codemap::DUMMY_SP),\n-            };\n-            try_opt!(format_function_type(data.inputs.iter().map(|x| &**x),\n-                                          &output,\n-                                          false,\n-                                          data.span,\n-                                          context,\n-                                          width,\n-                                          offset))\n-        }\n-        _ => String::new(),\n+    } else {\n+        String::new()\n     };\n \n     Some(format!(\"{}{}\", segment.identifier, params))\n@@ -393,14 +415,15 @@ impl Rewrite for ast::WherePredicate {\n                                                                              .. }) => {\n                 try_opt!(rewrite_bounded_lifetime(lifetime, bounds.iter(), context, width, offset))\n             }\n-            ast::WherePredicate::EqPredicate(ast::WhereEqPredicate { ref path, ref ty, .. }) => {\n-                let ty_str = try_opt!(ty.rewrite(context, width, offset));\n+            ast::WherePredicate::EqPredicate(ast::WhereEqPredicate { ref lhs_ty,\n+                                                                     ref rhs_ty,\n+                                                                     .. }) => {\n+                let lhs_ty_str = try_opt!(lhs_ty.rewrite(context, width, offset));\n                 // 3 = \" = \".len()\n-                let used_width = 3 + ty_str.len();\n+                let used_width = 3 + lhs_ty_str.len();\n                 let budget = try_opt!(width.checked_sub(used_width));\n-                let path_str =\n-                    try_opt!(rewrite_path(context, false, None, path, budget, offset + used_width));\n-                format!(\"{} = {}\", path_str, ty_str)\n+                let rhs_ty_str = try_opt!(rhs_ty.rewrite(context, budget, offset + used_width));\n+                format!(\"{} = {}\", lhs_ty_str, rhs_ty_str)\n             }\n         };\n \n@@ -462,10 +485,14 @@ impl Rewrite for ast::Lifetime {\n \n impl Rewrite for ast::TyParamBounds {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n+        let joiner = match context.config.type_punctuation_density {\n+            TypeDensity::Compressed => \"+\",\n+            TypeDensity::Wide => \" + \",\n+        };\n         let strs: Vec<_> = try_opt!(self.iter()\n             .map(|b| b.rewrite(context, width, offset))\n             .collect());\n-        wrap_str(strs.join(\" + \"), context.config.max_width, width, offset)\n+        wrap_str(strs.join(joiner), context.config.max_width, width, offset)\n     }\n }\n \n@@ -534,27 +561,14 @@ impl Rewrite for ast::PolyTraitRef {\n \n impl Rewrite for ast::TraitRef {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n-        rewrite_path(context, false, None, &self.path, width, offset)\n+        rewrite_path(context, PathContext::Type, None, &self.path, width, offset)\n     }\n }\n \n impl Rewrite for ast::Ty {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         match self.node {\n-            ast::TyKind::ObjectSum(ref ty, ref bounds) => {\n-                let ty_str = try_opt!(ty.rewrite(context, width, offset));\n-                let overhead = ty_str.len() + 3;\n-                let plus_str = match context.config.type_punctuation_density {\n-                    TypeDensity::Compressed => \"+\",\n-                    TypeDensity::Wide => \" + \",\n-                };\n-                Some(format!(\"{}{}{}\",\n-                             ty_str,\n-                             plus_str,\n-                             try_opt!(bounds.rewrite(context,\n-                                                     try_opt!(width.checked_sub(overhead)),\n-                                                     offset + overhead))))\n-            }\n+            ast::TyKind::TraitObject(ref bounds) => bounds.rewrite(context, width, offset),\n             ast::TyKind::Ptr(ref mt) => {\n                 let prefix = match mt.mutbl {\n                     Mutability::Mutable => \"*mut \",\n@@ -618,9 +632,13 @@ impl Rewrite for ast::Ty {\n                               width,\n                               offset)\n             }\n-            ast::TyKind::PolyTraitRef(ref trait_ref) => trait_ref.rewrite(context, width, offset),\n             ast::TyKind::Path(ref q_self, ref path) => {\n-                rewrite_path(context, false, q_self.as_ref(), path, width, offset)\n+                rewrite_path(context,\n+                             PathContext::Type,\n+                             q_self.as_ref(),\n+                             path,\n+                             width,\n+                             offset)\n             }\n             ast::TyKind::Array(ref ty, ref repeats) => {\n                 let use_spaces = context.config.spaces_within_square_brackets;"}, {"sha": "2f8c5db82e16d820e6bd33d35c5ef130844c840f", "filename": "src/utils.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6572874965b43abfacf292143ae85213e0b5927c/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572874965b43abfacf292143ae85213e0b5927c/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=6572874965b43abfacf292143ae85213e0b5927c", "patch": "@@ -39,11 +39,13 @@ pub fn format_visibility(vis: &Visibility) -> Cow<'static, str> {\n         Visibility::Inherited => Cow::from(\"\"),\n         Visibility::Crate(_) => Cow::from(\"pub(crate) \"),\n         Visibility::Restricted { ref path, .. } => {\n-            let Path { global, ref segments, .. } = **path;\n-            let prefix = if global { \"::\" } else { \"\" };\n+            let Path { ref segments, .. } = **path;\n             let mut segments_iter = segments.iter().map(|seg| seg.identifier.name.as_str());\n+            if path.is_global() {\n+                segments_iter.next().expect(\"Non-global path in pub(restricted)?\");\n+            }\n \n-            Cow::from(format!(\"pub({}{}) \", prefix, segments_iter.join(\"::\")))\n+            Cow::from(format!(\"pub({}) \", segments_iter.join(\"::\")))\n         }\n     }\n }"}, {"sha": "6b1d75d7f2009ded48a04c5e02b54f7a4b95d8e0", "filename": "tests/target/imports.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6572874965b43abfacf292143ae85213e0b5927c/tests%2Ftarget%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572874965b43abfacf292143ae85213e0b5927c/tests%2Ftarget%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports.rs?ref=6572874965b43abfacf292143ae85213e0b5927c", "patch": "@@ -53,8 +53,8 @@ use foo::qux as bar;\n use foo::{baz, qux as bar};\n \n // With absolute paths\n-use ::foo;\n-use ::foo::Bar;\n-use ::foo::{Bar, Baz};\n-use ::Foo;\n-use ::{Bar, Baz};\n+use foo;\n+use foo::Bar;\n+use foo::{Bar, Baz};\n+use Foo;\n+use {Bar, Baz};"}, {"sha": "88053173704602be89f8ed0464ab01215871d317", "filename": "tests/target/pub-restricted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6572874965b43abfacf292143ae85213e0b5927c/tests%2Ftarget%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6572874965b43abfacf292143ae85213e0b5927c/tests%2Ftarget%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fpub-restricted.rs?ref=6572874965b43abfacf292143ae85213e0b5927c", "patch": "@@ -24,7 +24,7 @@ pub(crate) enum WriteState<D> {\n     WriteData(Writer<D>),\n }\n \n-pub(::global::path::to::some_mod) enum WriteState<D> {\n+pub(global::path::to::some_mod) enum WriteState<D> {\n     WriteId {\n         id: U64Writer,\n         size: U64Writer,"}]}