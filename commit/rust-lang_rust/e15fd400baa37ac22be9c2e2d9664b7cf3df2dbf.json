{"sha": "e15fd400baa37ac22be9c2e2d9664b7cf3df2dbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNWZkNDAwYmFhMzdhYzIyYmU5YzJlMmQ5NjY0YjdjZjNkZjJkYmY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-03-05T13:32:30Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-03-06T06:59:37Z"}, "message": "debuginfo: Expose limited debuginfo in command line options", "tree": {"sha": "96455993f11a3b899720ee550cef8794eb9bec86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96455993f11a3b899720ee550cef8794eb9bec86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e15fd400baa37ac22be9c2e2d9664b7cf3df2dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e15fd400baa37ac22be9c2e2d9664b7cf3df2dbf", "html_url": "https://github.com/rust-lang/rust/commit/e15fd400baa37ac22be9c2e2d9664b7cf3df2dbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e15fd400baa37ac22be9c2e2d9664b7cf3df2dbf/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1938e87393929ab33928210d55bff4bc2d73f6c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1938e87393929ab33928210d55bff4bc2d73f6c2", "html_url": "https://github.com/rust-lang/rust/commit/1938e87393929ab33928210d55bff4bc2d73f6c2"}], "stats": {"total": 123, "additions": 69, "deletions": 54}, "files": [{"sha": "b1b8351b040adc8900b13acd80ba2f5f21079e43", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e15fd400baa37ac22be9c2e2d9664b7cf3df2dbf/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15fd400baa37ac22be9c2e2d9664b7cf3df2dbf/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=e15fd400baa37ac22be9c2e2d9664b7cf3df2dbf", "patch": "@@ -455,6 +455,25 @@ pub fn optmulti(short_name: &str, long_name: &str, desc: &str, hint: &str) -> Op\n     }\n }\n \n+/// Create a generic option group, stating all parameters explicitly\n+pub fn opt(short_name: &str,\n+           long_name: &str,\n+           desc: &str,\n+           hint: &str,\n+           hasarg: HasArg,\n+           occur: Occur) -> OptGroup {\n+    let len = short_name.len();\n+    assert!(len == 1 || len == 0);\n+    OptGroup {\n+        short_name: short_name.to_owned(),\n+        long_name: long_name.to_owned(),\n+        hint: hint.to_owned(),\n+        desc: desc.to_owned(),\n+        hasarg: hasarg,\n+        occur: occur\n+    }\n+}\n+\n impl Fail_ {\n     /// Convert a `Fail_` enum into an error string.\n     pub fn to_err_msg(self) -> ~str {"}, {"sha": "c4f3bb21059009bcf30c3f7de035ece688af29f7", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 48, "deletions": 52, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/e15fd400baa37ac22be9c2e2d9664b7cf3df2dbf/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15fd400baa37ac22be9c2e2d9664b7cf3df2dbf/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=e15fd400baa37ac22be9c2e2d9664b7cf3df2dbf", "patch": "@@ -11,7 +11,8 @@\n \n use back::link;\n use back::{arm, x86, x86_64, mips};\n-use driver::session::{Aggressive, CrateTypeExecutable, FullDebugInfo, NoDebugInfo};\n+use driver::session::{Aggressive, CrateTypeExecutable, FullDebugInfo, LimitedDebugInfo,\n+                      NoDebugInfo};\n use driver::session::{Session, Session_, No, Less, Default};\n use driver::session;\n use front;\n@@ -38,7 +39,9 @@ use std::vec;\n use std::vec_ng::Vec;\n use std::vec_ng;\n use collections::{HashMap, HashSet};\n-use getopts::{optopt, optmulti, optflag, optflagopt};\n+use getopts::{optopt, optmulti, optflag, optflagopt, opt};\n+use MaybeHasArg = getopts::Maybe;\n+use OccurOptional = getopts::Optional;\n use getopts;\n use syntax::ast;\n use syntax::abi;\n@@ -865,10 +868,17 @@ pub fn build_session_options(matches: &getopts::Matches)\n         } else { No }\n     };\n     let gc = debugging_opts & session::GC != 0;\n-    let debuginfo = if matches.opt_present(\"g\") || matches.opt_present(\"debuginfo\") {\n-        FullDebugInfo\n-    } else {\n-        NoDebugInfo\n+\n+    let debuginfo = match matches.opt_default(\"debuginfo\", \"2\") {\n+        Some(level) => {\n+            match level {\n+                ~\"0\" => NoDebugInfo,\n+                ~\"1\" => LimitedDebugInfo,\n+                ~\"2\" => FullDebugInfo,\n+                _    => early_error(\"debug info level needs to be between 0-2\")\n+            }\n+        }\n+        None => NoDebugInfo\n     };\n \n     let addl_lib_search_paths = matches.opt_strs(\"L\").map(|s| {\n@@ -1016,61 +1026,47 @@ pub fn optgroups() -> ~[getopts::OptGroup] {\n   optflag(\"h\", \"help\", \"Display this message\"),\n   optmulti(\"\", \"cfg\", \"Configure the compilation environment\", \"SPEC\"),\n   optmulti(\"L\", \"\",   \"Add a directory to the library search path\", \"PATH\"),\n-  optmulti(\"\", \"crate-type\", \"Comma separated list of types of crates for the \\\n-                              compiler to emit\",\n+  optmulti(\"\", \"crate-type\", \"Comma separated list of types of crates for the compiler to emit\",\n            \"[bin|lib|rlib|dylib|staticlib]\"),\n-  optmulti(\"\", \"emit\", \"Comma separated list of types of output for the compiler\n-                        to emit\",\n+  optmulti(\"\", \"emit\", \"Comma separated list of types of output for the compiler to emit\",\n            \"[asm|bc|ir|obj|link]\"),\n   optflag(\"\", \"crate-id\", \"Output the crate id and exit\"),\n   optflag(\"\", \"crate-name\", \"Output the crate name and exit\"),\n   optflag(\"\", \"crate-file-name\", \"Output the file(s) that would be written if compilation \\\n           continued and exit\"),\n   optflag(\"\",  \"ls\",  \"List the symbols defined by a library crate\"),\n-  optflag(\"g\",  \"debuginfo\",  \"Emit DWARF debug info to the objects created\"),\n-  optflag(\"\", \"no-trans\",\n-                        \"Run all passes except translation; no output\"),\n-  optflag(\"\", \"no-analysis\",\n-                        \"Parse and expand the output, but run no analysis or produce \\\n-                        output\"),\n-  optflag(\"O\", \"\",    \"Equivalent to --opt-level=2\"),\n-  optopt(\"o\", \"\",     \"Write output to <filename>\", \"FILENAME\"),\n-  optopt(\"\", \"opt-level\",\n-                        \"Optimize with possible levels 0-3\", \"LEVEL\"),\n-  optopt( \"\",  \"out-dir\",\n-                        \"Write output to compiler-chosen filename\n-                          in <dir>\", \"DIR\"),\n-  optflag(\"\", \"parse-only\",\n-                        \"Parse only; do not compile, assemble, or link\"),\n+  opt(\"g\",  \"debuginfo\",  \"Emit DWARF debug info to the objects created:\n+       0 = no debug info,\n+       1 = line-tables only (for stacktraces),\n+       2 = full debug info with variable, argument and type information\",\n+      \"LEVEL\", MaybeHasArg, OccurOptional),\n+  optflag(\"\", \"no-trans\", \"Run all passes except translation; no output\"),\n+  optflag(\"\", \"no-analysis\", \"Parse and expand the output, but run no analysis or produce output\"),\n+  optflag(\"O\", \"\", \"Equivalent to --opt-level=2\"),\n+  optopt(\"o\", \"\", \"Write output to <filename>\", \"FILENAME\"),\n+  optopt(\"\", \"opt-level\", \"Optimize with possible levels 0-3\", \"LEVEL\"),\n+  optopt( \"\",  \"out-dir\", \"Write output to compiler-chosen filename in <dir>\", \"DIR\"),\n+  optflag(\"\", \"parse-only\", \"Parse only; do not compile, assemble, or link\"),\n   optflagopt(\"\", \"pretty\",\n-                        \"Pretty-print the input instead of compiling;\n-                          valid types are: normal (un-annotated source),\n-                          expanded (crates expanded),\n-                          typed (crates expanded, with type annotations),\n-                          or identified (fully parenthesized,\n-                          AST nodes and blocks with IDs)\", \"TYPE\"),\n-  optflagopt(\"\", \"dep-info\",\n-                        \"Output dependency info to <filename> after compiling\", \"FILENAME\"),\n-  optopt(\"\", \"sysroot\",\n-                        \"Override the system root\", \"PATH\"),\n+             \"Pretty-print the input instead of compiling;\n+              valid types are: normal (un-annotated source),\n+              expanded (crates expanded),\n+              typed (crates expanded, with type annotations),\n+              or identified (fully parenthesized,\n+              AST nodes and blocks with IDs)\", \"TYPE\"),\n+  optflagopt(\"\", \"dep-info\", \"Output dependency info to <filename> after compiling\", \"FILENAME\"),\n+  optopt(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n   optflag(\"\", \"test\", \"Build a test harness\"),\n-  optopt(\"\", \"target\",\n-                        \"Target triple cpu-manufacturer-kernel[-os]\n-                          to compile for (see chapter 3.4 of http://www.sourceware.org/autobook/\n-                          for details)\", \"TRIPLE\"),\n-  optmulti(\"W\", \"warn\",\n-                        \"Set lint warnings\", \"OPT\"),\n-  optmulti(\"A\", \"allow\",\n-                        \"Set lint allowed\", \"OPT\"),\n-  optmulti(\"D\", \"deny\",\n-                        \"Set lint denied\", \"OPT\"),\n-  optmulti(\"F\", \"forbid\",\n-                        \"Set lint forbidden\", \"OPT\"),\n-  optmulti(\"C\", \"codegen\",\n-                        \"Set a codegen option\", \"OPT[=VALUE]\"),\n-  optmulti(\"Z\", \"\",   \"Set internal debugging options\", \"FLAG\"),\n-  optflag( \"v\", \"version\",\n-                        \"Print version info and exit\"),\n+  optopt(\"\", \"target\", \"Target triple cpu-manufacturer-kernel[-os]\n+                        to compile for (see chapter 3.4 of http://www.sourceware.org/autobook/\n+                        for details)\", \"TRIPLE\"),\n+  optmulti(\"W\", \"warn\", \"Set lint warnings\", \"OPT\"),\n+  optmulti(\"A\", \"allow\", \"Set lint allowed\", \"OPT\"),\n+  optmulti(\"D\", \"deny\", \"Set lint denied\", \"OPT\"),\n+  optmulti(\"F\", \"forbid\", \"Set lint forbidden\", \"OPT\"),\n+  optmulti(\"C\", \"codegen\", \"Set a codegen option\", \"OPT[=VALUE]\"),\n+  optmulti(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n+  optflag( \"v\", \"version\", \"Print version info and exit\"),\n  ]\n }\n "}, {"sha": "af9b84085e3579f94d8eeded02a398ef527f2e8d", "filename": "src/test/debug-info/issue7712.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15fd400baa37ac22be9c2e2d9664b7cf3df2dbf/src%2Ftest%2Fdebug-info%2Fissue7712.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15fd400baa37ac22be9c2e2d9664b7cf3df2dbf/src%2Ftest%2Fdebug-info%2Fissue7712.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fissue7712.rs?ref=e15fd400baa37ac22be9c2e2d9664b7cf3df2dbf", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:-g\n+// compile-flags:-g1\n \n pub trait TraitWithDefaultMethod {\n     fn method(self) {"}, {"sha": "ec2c80034d2262339ce19fcc6b38289bd469c6e6", "filename": "src/test/debug-info/lexical-scope-in-parameterless-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15fd400baa37ac22be9c2e2d9664b7cf3df2dbf/src%2Ftest%2Fdebug-info%2Flexical-scope-in-parameterless-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15fd400baa37ac22be9c2e2d9664b7cf3df2dbf/src%2Ftest%2Fdebug-info%2Flexical-scope-in-parameterless-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-parameterless-closure.rs?ref=e15fd400baa37ac22be9c2e2d9664b7cf3df2dbf", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-android: FIXME(#10381)\n \n-// compile-flags:-g\n+// compile-flags:-g1\n // debugger:run\n \n // Nothing to do here really, just make sure it compiles. See issue #8513."}]}