{"sha": "853f30052d019a8ebe197a5adff3a29d6716a955", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1M2YzMDA1MmQwMTlhOGViZTE5N2E1YWRmZjNhMjlkNjcxNmE5NTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-05T11:53:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-05T11:53:52Z"}, "message": "Auto merge of #62407 - Centril:rollup-g0zmff7, r=Centril\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #62123 ( Remove needless lifetimes (std))\n - #62150 (Implement mem::{zeroed,uninitialized} in terms of MaybeUninit.)\n - #62169 (Derive which queries to save using the proc macro)\n - #62238 (Fix code block information icon position)\n - #62292 (Move `async || ...` closures into `#![feature(async_closure)]`)\n - #62323 (Clarify unaligned fields in ptr::{read,write}_unaligned)\n - #62324 (Reduce reliance on `await!(...)` macro)\n - #62371 (Add tracking issue for Box::into_pin)\n - #62383 (Improve error span for async type inference error)\n - #62388 (Break out of the correct number of scopes in loops)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "edea92c0e1ce6501e5c23fd5d9c2874f15623d79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edea92c0e1ce6501e5c23fd5d9c2874f15623d79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/853f30052d019a8ebe197a5adff3a29d6716a955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/853f30052d019a8ebe197a5adff3a29d6716a955", "html_url": "https://github.com/rust-lang/rust/commit/853f30052d019a8ebe197a5adff3a29d6716a955", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/853f30052d019a8ebe197a5adff3a29d6716a955/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f119bf2761ab11ca577fac9881678c04d3e7fdb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f119bf2761ab11ca577fac9881678c04d3e7fdb0", "html_url": "https://github.com/rust-lang/rust/commit/f119bf2761ab11ca577fac9881678c04d3e7fdb0"}, {"sha": "18081890ea7c4f3cb38d51be5ddea4f51dc262c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/18081890ea7c4f3cb38d51be5ddea4f51dc262c3", "html_url": "https://github.com/rust-lang/rust/commit/18081890ea7c4f3cb38d51be5ddea4f51dc262c3"}], "stats": {"total": 777, "additions": 496, "deletions": 281}, "files": [{"sha": "01dee0a3943373bd2b0f566911d2cd32fe25e240", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -320,7 +320,7 @@ impl<T: ?Sized> Box<T> {\n     /// This conversion does not allocate on the heap and happens in place.\n     ///\n     /// This is also available via [`From`].\n-    #[unstable(feature = \"box_into_pin\", issue = \"0\")]\n+    #[unstable(feature = \"box_into_pin\", issue = \"62370\")]\n     pub fn into_pin(boxed: Box<T>) -> Pin<Box<T>> {\n         // It's not possible to move or replace the insides of a `Pin<Box<T>>`\n         // when `T: !Unpin`,  so it's safe to pin it directly without any"}, {"sha": "d466948a0178e18e8d5595dc6110fd776ffd3535", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -2032,7 +2032,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(keys, [1, 2]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn keys<'a>(&'a self) -> Keys<'a, K, V> {\n+    pub fn keys(&self) -> Keys<'_, K, V> {\n         Keys { inner: self.iter() }\n     }\n \n@@ -2053,7 +2053,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(values, [\"hello\", \"goodbye\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn values<'a>(&'a self) -> Values<'a, K, V> {\n+    pub fn values(&self) -> Values<'_, K, V> {\n         Values { inner: self.iter() }\n     }\n \n@@ -2557,8 +2557,8 @@ enum UnderflowResult<'a, K, V> {\n     Stole(NodeRef<marker::Mut<'a>, K, V, marker::Internal>),\n }\n \n-fn handle_underfull_node<'a, K, V>(node: NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>)\n-                                   -> UnderflowResult<'a, K, V> {\n+fn handle_underfull_node<K, V>(node: NodeRef<marker::Mut<'_>, K, V, marker::LeafOrInternal>)\n+                               -> UnderflowResult<'_, K, V> {\n     let parent = if let Ok(parent) = node.ascend() {\n         parent\n     } else {"}, {"sha": "7cf077d61d687b1f9ea48932f7611c584704a601", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -394,7 +394,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n     }\n \n     /// Temporarily takes out another, immutable reference to the same node.\n-    fn reborrow<'a>(&'a self) -> NodeRef<marker::Immut<'a>, K, V, Type> {\n+    fn reborrow(&self) -> NodeRef<marker::Immut<'_>, K, V, Type> {\n         NodeRef {\n             height: self.height,\n             node: self.node,"}, {"sha": "366191e2c85f39f38aa7ad5de472056705b456fd", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -552,7 +552,7 @@ impl String {\n     /// assert_eq!(\"Hello \ufffdWorld\", output);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn from_utf8_lossy<'a>(v: &'a [u8]) -> Cow<'a, str> {\n+    pub fn from_utf8_lossy(v: &[u8]) -> Cow<'_, str> {\n         let mut iter = lossy::Utf8Lossy::from_bytes(v).chunks();\n \n         let (first_valid, first_broken) = if let Some(chunk) = iter.next() {"}, {"sha": "67430e5bbda4d58df472854ea5ae6cef7d07eb42", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -700,17 +700,15 @@ extern \"rust-intrinsic\" {\n     /// which is unsafe unless `T` is `Copy`. Also, even if T is\n     /// `Copy`, an all-zero value may not correspond to any legitimate\n     /// state for the type in question.\n+    #[unstable(feature = \"core_intrinsics\",\n+               reason = \"intrinsics are unlikely to ever be stabilized, instead \\\n+                         they should be used through stabilized interfaces \\\n+                         in the rest of the standard library\",\n+               issue = \"0\")]\n+    #[rustc_deprecated(reason = \"no longer used by rustc, will be removed - use MaybeUnint instead\",\n+                       since = \"1.38.0\")]\n     pub fn init<T>() -> T;\n \n-    /// Creates an uninitialized value.\n-    ///\n-    /// `uninit` is unsafe because there is no guarantee of what its\n-    /// contents are. In particular its drop-flag may be set to any\n-    /// state, which means it may claim either dropped or\n-    /// undropped. In the general case one must use `ptr::write` to\n-    /// initialize memory previous set to the result of `uninit`.\n-    pub fn uninit<T>() -> T;\n-\n     /// Moves a value out of scope without running drop glue.\n     pub fn forget<T: ?Sized>(_: T);\n "}, {"sha": "39c390b4df6d3d31383dfb4c6839e367004bdee4", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -498,7 +498,7 @@ macro_rules! impls{\n /// #     end: *const T,\n /// #     phantom: PhantomData<&'a T>,\n /// # }\n-/// fn borrow_vec<'a, T>(vec: &'a Vec<T>) -> Slice<'a, T> {\n+/// fn borrow_vec<T>(vec: &Vec<T>) -> Slice<'_, T> {\n ///     let ptr = vec.as_ptr();\n ///     Slice {\n ///         start: ptr,"}, {"sha": "b62d81affddbd61c69d077cf93ce7ca13e85b0f5", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -450,8 +450,7 @@ pub const fn needs_drop<T>() -> bool {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn zeroed<T>() -> T {\n-    intrinsics::panic_if_uninhabited::<T>();\n-    intrinsics::init()\n+    MaybeUninit::zeroed().assume_init()\n }\n \n /// Bypasses Rust's normal memory-initialization checks by pretending to\n@@ -476,8 +475,7 @@ pub unsafe fn zeroed<T>() -> T {\n #[rustc_deprecated(since = \"1.38.0\", reason = \"use `mem::MaybeUninit` instead\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn uninitialized<T>() -> T {\n-    intrinsics::panic_if_uninhabited::<T>();\n-    intrinsics::uninit()\n+    MaybeUninit::uninit().assume_init()\n }\n \n /// Swaps the values at two mutable locations, without deinitializing either one."}, {"sha": "9cff474a760306be8f639270d67b5fed39802cd1", "filename": "src/libcore/ops/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibcore%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibcore%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Findex.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -105,7 +105,7 @@ pub trait Index<Idx: ?Sized> {\n /// impl Index<Side> for Balance {\n ///     type Output = Weight;\n ///\n-///     fn index<'a>(&'a self, index: Side) -> &'a Self::Output {\n+///     fn index(&self, index: Side) -> &Self::Output {\n ///         println!(\"Accessing {:?}-side of balance immutably\", index);\n ///         match index {\n ///             Side::Left => &self.left,\n@@ -115,7 +115,7 @@ pub trait Index<Idx: ?Sized> {\n /// }\n ///\n /// impl IndexMut<Side> for Balance {\n-///     fn index_mut<'a>(&'a mut self, index: Side) -> &'a mut Self::Output {\n+///     fn index_mut(&mut self, index: Side) -> &mut Self::Output {\n ///         println!(\"Accessing {:?}-side of balance mutably\", index);\n ///         match index {\n ///             Side::Left => &mut self.left,"}, {"sha": "2a6c2b1331e5c5754e8b7c5e63025a9f9e0d29ef", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 53, "deletions": 35, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -625,42 +625,50 @@ pub unsafe fn read<T>(src: *const T) -> T {\n /// [read-ownership]: ./fn.read.html#ownership-of-the-returned-value\n /// [valid]: ../ptr/index.html#safety\n ///\n-/// # Examples\n+/// ## On `packed` structs\n ///\n-/// Access members of a packed struct by reference:\n+/// It is currently impossible to create raw pointers to unaligned fields\n+/// of a packed struct.\n ///\n-/// ```\n-/// use std::ptr;\n+/// Attempting to create a raw pointer to an `unaligned` struct field with\n+/// an expression such as `&packed.unaligned as *const FieldType` creates an\n+/// intermediate unaligned reference before converting that to a raw pointer.\n+/// That this reference is temporary and immediately cast is inconsequential\n+/// as the compiler always expects references to be properly aligned.\n+/// As a result, using `&packed.unaligned as *const FieldType` causes immediate\n+/// *undefined behavior* in your program.\n ///\n+/// An example of what not to do and how this relates to `read_unaligned` is:\n+///\n+/// ```no_run\n /// #[repr(packed, C)]\n /// struct Packed {\n ///     _padding: u8,\n ///     unaligned: u32,\n /// }\n ///\n-/// let x = Packed {\n+/// let packed = Packed {\n ///     _padding: 0x00,\n ///     unaligned: 0x01020304,\n /// };\n ///\n /// let v = unsafe {\n-///     // Take the address of a 32-bit integer which is not aligned.\n-///     // This must be done as a raw pointer; unaligned references are invalid.\n-///     let unaligned = &x.unaligned as *const u32;\n-///\n-///     // Dereferencing normally will emit an aligned load instruction,\n-///     // causing undefined behavior.\n-///     // let v = *unaligned; // ERROR\n+///     // Here we attempt to take the address of a 32-bit integer which is not aligned.\n+///     let unaligned =\n+///         // A temporary unaligned reference is created here which results in\n+///         // undefined behavior regardless of whether the reference is used or not.\n+///         &packed.unaligned\n+///         // Casting to a raw pointer doesn't help; the mistake already happened.\n+///         as *const u32;\n ///\n-///     // Instead, use `read_unaligned` to read improperly aligned values.\n-///     let v = ptr::read_unaligned(unaligned);\n+///     let v = std::ptr::read_unaligned(unaligned);\n ///\n ///     v\n /// };\n-///\n-/// // Accessing unaligned values directly is safe.\n-/// assert!(x.unaligned == v);\n /// ```\n+///\n+/// Accessing unaligned fields directly with e.g. `packed.unaligned` is safe however.\n+// FIXME: Update docs based on outcome of RFC #2582 and friends.\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n@@ -789,38 +797,48 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n ///\n /// [valid]: ../ptr/index.html#safety\n ///\n-/// # Examples\n+/// ## On `packed` structs\n ///\n-/// Access fields in a packed struct:\n+/// It is currently impossible to create raw pointers to unaligned fields\n+/// of a packed struct.\n ///\n-/// ```\n-/// use std::{mem, ptr};\n+/// Attempting to create a raw pointer to an `unaligned` struct field with\n+/// an expression such as `&packed.unaligned as *const FieldType` creates an\n+/// intermediate unaligned reference before converting that to a raw pointer.\n+/// That this reference is temporary and immediately cast is inconsequential\n+/// as the compiler always expects references to be properly aligned.\n+/// As a result, using `&packed.unaligned as *const FieldType` causes immediate\n+/// *undefined behavior* in your program.\n ///\n+/// An example of what not to do and how this relates to `write_unaligned` is:\n+///\n+/// ```no_run\n /// #[repr(packed, C)]\n-/// #[derive(Default)]\n /// struct Packed {\n ///     _padding: u8,\n ///     unaligned: u32,\n /// }\n ///\n /// let v = 0x01020304;\n-/// let mut x: Packed = unsafe { mem::zeroed() };\n-///\n-/// unsafe {\n-///     // Take a reference to a 32-bit integer which is not aligned.\n-///     let unaligned = &mut x.unaligned as *mut u32;\n+/// let mut packed: Packed = unsafe { std::mem::zeroed() };\n ///\n-///     // Dereferencing normally will emit an aligned store instruction,\n-///     // causing undefined behavior because the pointer is not aligned.\n-///     // *unaligned = v; // ERROR\n+/// let v = unsafe {\n+///     // Here we attempt to take the address of a 32-bit integer which is not aligned.\n+///     let unaligned =\n+///         // A temporary unaligned reference is created here which results in\n+///         // undefined behavior regardless of whether the reference is used or not.\n+///         &mut packed.unaligned\n+///         // Casting to a raw pointer doesn't help; the mistake already happened.\n+///         as *mut u32;\n ///\n-///     // Instead, use `write_unaligned` to write improperly aligned values.\n-///     ptr::write_unaligned(unaligned, v);\n-/// }\n+///     std::ptr::write_unaligned(unaligned, v);\n ///\n-/// // Accessing unaligned values directly is safe.\n-/// assert!(x.unaligned == v);\n+///     v\n+/// };\n /// ```\n+///\n+/// Accessing unaligned fields directly with e.g. `packed.unaligned` is safe however.\n+// FIXME: Update docs based on outcome of RFC #2582 and friends.\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {"}, {"sha": "442a90ab3f845b8a666aefa1882f0e286076ad03", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -422,11 +422,6 @@ rustc_queries! {\n                 \"const-evaluating `{}`\",\n                 tcx.def_path_str(key.value.instance.def.def_id())\n             }\n-            cache_on_disk_if(_, opt_result) {\n-                // Only store results without errors\n-                // FIXME: We never store these\n-                opt_result.map_or(true, |r| r.is_ok())\n-            }\n         }\n \n         /// Results of evaluating const items or constants embedded in"}, {"sha": "56c9474170cad0ca533675f6d853240bcc404dd2", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -201,28 +201,22 @@ impl<'sess> OnDiskCache<'sess> {\n             let mut query_result_index = EncodedQueryResultIndex::new();\n \n             time(tcx.sess, \"encode query results\", || {\n-                use crate::ty::query::queries::*;\n                 let enc = &mut encoder;\n                 let qri = &mut query_result_index;\n \n-                encode_query_results::<type_of<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<generics_of<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<predicates_of<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<used_trait_imports<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<typeck_tables_of<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<codegen_fulfill_obligation<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<optimized_mir<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<unsafety_check_result<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<borrowck<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<mir_borrowck<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<mir_const_qualif<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<const_is_rvalue_promotable_to_static<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<symbol_name<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<check_match<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<codegen_fn_attrs<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<specialization_graph_of<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<const_eval<'_>, _>(tcx, enc, qri)?;\n-                // FIXME: Include const_eval_raw?\n+                macro_rules! encode_queries {\n+                    ($($query:ident,)*) => {\n+                        $(\n+                            encode_query_results::<ty::query::queries::$query<'_>, _>(\n+                                tcx,\n+                                enc,\n+                                qri\n+                            )?;\n+                        )*\n+                    }\n+                }\n+\n+                rustc_cached_queries!(encode_queries!);\n \n                 Ok(())\n             })?;"}, {"sha": "69f8356f66920be0bc29b5fcbe154b0ac95ab056", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -234,7 +234,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 return;\n             }\n             // Effectively no-ops\n-            \"uninit\" | \"forget\" => {\n+            \"forget\" => {\n                 return;\n             }\n             \"needs_drop\" => {"}, {"sha": "a8df7e197a8c9f069cc8526b9b27e4cc2291a4fc", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -414,6 +414,7 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n     let mut dep_node_force_stream = quote! {};\n     let mut try_load_from_on_disk_cache_stream = quote! {};\n     let mut no_force_queries = Vec::new();\n+    let mut cached_queries = quote! {};\n \n     for group in groups.0 {\n         let mut group_stream = quote! {};\n@@ -427,6 +428,12 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 _ => quote! { #result_full },\n             };\n \n+            if modifiers.cache.is_some() {\n+                cached_queries.extend(quote! {\n+                    #name,\n+                });\n+            }\n+\n             if modifiers.cache.is_some() && !modifiers.no_force {\n                 try_load_from_on_disk_cache_stream.extend(quote! {\n                     DepKind::#name => {\n@@ -549,6 +556,12 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 }\n             }\n         }\n+        macro_rules! rustc_cached_queries {\n+            ($($macro:tt)*) => {\n+                $($macro)*(#cached_queries);\n+            }\n+        }\n+\n         #query_description_stream\n \n         impl DepNode {"}, {"sha": "75c64bb2644c1611809dd00dfe9a56221c862f50", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -228,10 +228,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         };\n \n         // Step 5. Create everything else: the guards and the arms.\n+        let match_scope = self.scopes.topmost();\n+\n         let arm_end_blocks: Vec<_> = arm_candidates.into_iter().map(|(arm, mut candidates)| {\n             let arm_source_info = self.source_info(arm.span);\n-            let region_scope = (arm.scope, arm_source_info);\n-            self.in_scope(region_scope, arm.lint_level, |this| {\n+            let arm_scope = (arm.scope, arm_source_info);\n+            self.in_scope(arm_scope, arm.lint_level, |this| {\n                 let body = this.hir.mirror(arm.body.clone());\n                 let scope = this.declare_bindings(\n                     None,\n@@ -248,7 +250,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         arm.guard.clone(),\n                         &fake_borrow_temps,\n                         scrutinee_span,\n-                        region_scope,\n+                        match_scope,\n                     );\n                 } else {\n                     arm_block = this.cfg.start_new_block();\n@@ -259,7 +261,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             arm.guard.clone(),\n                             &fake_borrow_temps,\n                             scrutinee_span,\n-                            region_scope,\n+                            match_scope,\n                         );\n                         this.cfg.terminate(\n                             binding_end,\n@@ -1339,7 +1341,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         guard: Option<Guard<'tcx>>,\n         fake_borrows: &Vec<(&Place<'tcx>, Local)>,\n         scrutinee_span: Span,\n-        region_scope: (region::Scope, SourceInfo),\n+        region_scope: region::Scope,\n     ) -> BasicBlock {\n         debug!(\"bind_and_guard_matched_candidate(candidate={:?})\", candidate);\n "}, {"sha": "bdcde5b33dc66228dcf1b0b1649922fe1fcaddd5", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -604,9 +604,18 @@ where\n         }\n \n         let arg_scope_s = (arg_scope, source_info);\n-        unpack!(block = builder.in_scope(arg_scope_s, LintLevel::Inherited, |builder| {\n-            builder.args_and_body(block, &arguments, arg_scope, &body.value)\n-        }));\n+        // `return_block` is called when we evaluate a `return` expression, so\n+        // we just use `START_BLOCK` here.\n+        unpack!(block = builder.in_breakable_scope(\n+            None,\n+            START_BLOCK,\n+            Place::RETURN_PLACE,\n+            |builder| {\n+                builder.in_scope(arg_scope_s, LintLevel::Inherited, |builder| {\n+                    builder.args_and_body(block, &arguments, arg_scope, &body.value)\n+                })\n+            },\n+        ));\n         // Attribute epilogue to function's closing brace\n         let fn_end = span.shrink_to_hi();\n         let source_info = builder.source_info(fn_end);\n@@ -860,11 +869,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n \n         let body = self.hir.mirror(ast_body);\n-        // `return_block` is called when we evaluate a `return` expression, so\n-        // we just use `START_BLOCK` here.\n-        self.in_breakable_scope(None, START_BLOCK, Place::RETURN_PLACE, |this| {\n-            this.into(&Place::RETURN_PLACE, block, body)\n-        })\n+        self.into(&Place::RETURN_PLACE, block, body)\n     }\n \n     fn get_unit_temp(&mut self) -> Place<'tcx> {"}, {"sha": "a74d5d7ab2de3347ac8a6251cdb8a2655e072617", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -332,9 +332,9 @@ impl<'tcx> Scopes<'tcx> {\n         }\n     }\n \n-    fn num_scopes_to(&self, region_scope: (region::Scope, SourceInfo), span: Span) -> usize {\n-        let scope_count = 1 + self.scopes.iter().rev()\n-            .position(|scope| scope.region_scope == region_scope.0)\n+    fn num_scopes_above(&self, region_scope: region::Scope, span: Span) -> usize {\n+        let scope_count = self.scopes.iter().rev()\n+            .position(|scope| scope.region_scope == region_scope)\n             .unwrap_or_else(|| {\n                 span_bug!(span, \"region_scope {:?} does not enclose\", region_scope)\n             });\n@@ -354,7 +354,7 @@ impl<'tcx> Scopes<'tcx> {\n \n     /// Returns the topmost active scope, which is known to be alive until\n     /// the next scope expression.\n-    fn topmost(&self) -> region::Scope {\n+    pub(super) fn topmost(&self) -> region::Scope {\n         self.scopes.last().expect(\"topmost_scope: no scopes present\").region_scope\n     }\n \n@@ -514,7 +514,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         } else {\n             assert!(value.is_none(), \"`return` and `break` should have a destination\");\n         }\n-        self.exit_scope(source_info.span, (region_scope, source_info), block, target_block);\n+        self.exit_scope(source_info.span, region_scope, block, target_block);\n         self.cfg.start_new_block().unit()\n     }\n \n@@ -523,12 +523,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// needed. See module comment for details.\n     pub fn exit_scope(&mut self,\n                       span: Span,\n-                      region_scope: (region::Scope, SourceInfo),\n+                      region_scope: region::Scope,\n                       mut block: BasicBlock,\n                       target: BasicBlock) {\n         debug!(\"exit_scope(region_scope={:?}, block={:?}, target={:?})\",\n                region_scope, block, target);\n-        let scope_count = self.scopes.num_scopes_to(region_scope, span);\n+        let scope_count = self.scopes.num_scopes_above(region_scope, span);\n \n         // If we are emitting a `drop` statement, we need to have the cached\n         // diverge cleanup pads ready in case that drop panics.\n@@ -545,7 +545,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 continue;\n             }\n             let source_info = scope.source_info(span);\n-            block = match scope.cached_exits.entry((target, region_scope.0)) {\n+            block = match scope.cached_exits.entry((target, region_scope)) {\n                 Entry::Occupied(e) => {\n                     self.cfg.terminate(block, source_info,\n                                     TerminatorKind::Goto { target: *e.get() });"}, {"sha": "7e4768d81b868663170d88f1703efa6f48ad7a2d", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                 // If unresolved type isn't a ty_var then unresolved_type_span is None\n                 self.fcx.need_type_info_err_in_generator(\n                     self.kind,\n-                    unresolved_type_span.unwrap_or(yield_data.span),\n+                    unresolved_type_span.unwrap_or(source_span),\n                     unresolved_type,\n                 )\n                     .span_note(yield_data.span, &*note)"}, {"sha": "82a736bf9c5f2d139d9289e58129fa5b264f791f", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -145,7 +145,6 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n             \"rustc_peek\" => (1, vec![param(0)], param(0)),\n             \"panic_if_uninhabited\" => (1, Vec::new(), tcx.mk_unit()),\n             \"init\" => (1, Vec::new(), param(0)),\n-            \"uninit\" => (1, Vec::new(), param(0)),\n             \"forget\" => (1, vec![param(0)], tcx.mk_unit()),\n             \"transmute\" => (2, vec![ param(0) ], param(1)),\n             \"move_val_init\" => {"}, {"sha": "2fe40f4e10b64adb49830d562ee71920cdbf901a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -392,7 +392,7 @@ impl fmt::Debug for Item {\n impl Item {\n     /// Finds the `doc` attribute as a NameValue and returns the corresponding\n     /// value found.\n-    pub fn doc_value<'a>(&'a self) -> Option<&'a str> {\n+    pub fn doc_value(&self) -> Option<&str> {\n         self.attrs.doc_value()\n     }\n     /// Finds all `doc` attributes as NameValues and returns their corresponding values, joined\n@@ -699,11 +699,11 @@ impl<'a> Iterator for ListAttributesIter<'a> {\n \n pub trait AttributesExt {\n     /// Finds an attribute as List and returns the list of attributes nested inside.\n-    fn lists<'a>(&'a self, name: Symbol) -> ListAttributesIter<'a>;\n+    fn lists(&self, name: Symbol) -> ListAttributesIter<'_>;\n }\n \n impl AttributesExt for [ast::Attribute] {\n-    fn lists<'a>(&'a self, name: Symbol) -> ListAttributesIter<'a> {\n+    fn lists(&self, name: Symbol) -> ListAttributesIter<'_> {\n         ListAttributesIter {\n             attrs: self.iter(),\n             current_list: Vec::new().into_iter(),\n@@ -952,7 +952,7 @@ impl Attributes {\n \n     /// Finds the `doc` attribute as a NameValue and returns the corresponding\n     /// value found.\n-    pub fn doc_value<'a>(&'a self) -> Option<&'a str> {\n+    pub fn doc_value(&self) -> Option<&str> {\n         self.doc_strings.first().map(|s| s.as_str())\n     }\n \n@@ -1037,7 +1037,7 @@ impl Hash for Attributes {\n }\n \n impl AttributesExt for Attributes {\n-    fn lists<'a>(&'a self, name: Symbol) -> ListAttributesIter<'a> {\n+    fn lists(&self, name: Symbol) -> ListAttributesIter<'_> {\n         self.other_attrs.lists(name)\n     }\n }"}, {"sha": "2d69c29dfae3cda6e6c37af7322f3f9b73f3e92a", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -2541,7 +2541,7 @@ fn full_path(cx: &Context, item: &clean::Item) -> String {\n     s\n }\n \n-fn shorter<'a>(s: Option<&'a str>) -> String {\n+fn shorter(s: Option<&str>) -> String {\n     match s {\n         Some(s) => s.lines()\n             .skip_while(|s| s.chars().all(|c| c.is_whitespace()))"}, {"sha": "59704dace4d15bfa6a23e47ba598457316414701", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -146,6 +146,10 @@ img {\n \tmax-width: 100%;\n }\n \n+li {\n+\tposition: relative;\n+}\n+\n .source .content {\n \tmargin-top: 50px;\n \tmax-width: none;"}, {"sha": "2da7aceae8bf4fd23c19b9aee537c0aaf03bf679", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -119,7 +119,7 @@ impl TocBuilder {\n     /// Push a level `level` heading into the appropriate place in the\n     /// hierarchy, returning a string containing the section number in\n     /// `<num>.<num>.<num>` format.\n-    pub fn push<'a>(&'a mut self, level: u32, name: String, id: String) -> &'a str {\n+    pub fn push(&mut self, level: u32, name: String, id: String) -> &str {\n         assert!(level >= 1);\n \n         // collapse all previous sections into their parents until we"}, {"sha": "50a647f244db55a563dab1bbf447a79d4fd442c5", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -17,7 +17,7 @@ use crate::html::markdown::{ErrorCodes, IdMap, Markdown, MarkdownWithToc, find_t\n use crate::test::{TestOptions, Collector};\n \n /// Separate any lines at the start of the file that begin with `# ` or `%`.\n-fn extract_leading_metadata<'a>(s: &'a str) -> (Vec<&'a str>, &'a str) {\n+fn extract_leading_metadata(s: &str) -> (Vec<&str>, &str) {\n     let mut metadata = Vec::new();\n     let mut count = 0;\n "}, {"sha": "726306d60ce1e1dbb9239e8ebd93f36fc8de7206", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -1031,7 +1031,7 @@ impl Json {\n \n      /// If the Json value is an Object, returns the value associated with the provided key.\n     /// Otherwise, returns None.\n-    pub fn find<'a>(&'a self, key: &str) -> Option<&'a Json>{\n+    pub fn find(&self, key: &str) -> Option<&Json> {\n         match *self {\n             Json::Object(ref map) => map.get(key),\n             _ => None\n@@ -1052,7 +1052,7 @@ impl Json {\n     /// If the Json value is an Object, performs a depth-first search until\n     /// a value associated with the provided key is found. If no value is found\n     /// or the Json value is not an Object, returns `None`.\n-    pub fn search<'a>(&'a self, key: &str) -> Option<&'a Json> {\n+    pub fn search(&self, key: &str) -> Option<&Json> {\n         match self {\n             &Json::Object(ref map) => {\n                 match map.get(key) {"}, {"sha": "fbe36d10517eb1ae610638cff3a02db07f24a625", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -140,7 +140,7 @@ fn wait_timeout_receiver<'a, 'b, T>(lock: &'a Mutex<State<T>>,\n     new_guard\n }\n \n-fn abort_selection<'a, T>(guard: &mut MutexGuard<'a , State<T>>) -> bool {\n+fn abort_selection<T>(guard: &mut MutexGuard<'_, State<T>>) -> bool {\n     match mem::replace(&mut guard.blocker, NoneBlocked) {\n         NoneBlocked => true,\n         BlockedSender(token) => {"}, {"sha": "1f5c785f419075b56ff415827f3778b358d5eac0", "filename": "src/libstd/sys/redox/ext/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -673,7 +673,7 @@ impl UnixListener {\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n-    pub fn incoming<'a>(&'a self) -> Incoming<'a> {\n+    pub fn incoming(&self) -> Incoming<'_> {\n         Incoming { listener: self }\n     }\n }"}, {"sha": "42edd5dbbea7c463d42e287ba26f11a11ce0a528", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -198,7 +198,7 @@ impl SocketAddr {\n         }\n     }\n \n-    fn address<'a>(&'a self) -> AddressKind<'a> {\n+    fn address(&self) -> AddressKind<'_> {\n         let len = self.len as usize - sun_path_offset(&self.addr);\n         let path = unsafe { mem::transmute::<&[libc::c_char], &[u8]>(&self.addr.sun_path) };\n \n@@ -894,7 +894,7 @@ impl UnixListener {\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub fn incoming<'a>(&'a self) -> Incoming<'a> {\n+    pub fn incoming(&self) -> Incoming<'_> {\n         Incoming { listener: self }\n     }\n }"}, {"sha": "36fb1fb5ff68d7086a397d037cc09c509c0e4f24", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -195,7 +195,7 @@ fn wide_char_to_multi_byte(code_page: u32,\n     }\n }\n \n-pub fn truncate_utf16_at_nul<'a>(v: &'a [u16]) -> &'a [u16] {\n+pub fn truncate_utf16_at_nul(v: &[u16]) -> &[u16] {\n     match v.iter().position(|c| *c == 0) {\n         // don't include the 0\n         Some(i) => &v[..i],"}, {"sha": "7eae28cb14fbc9c2be42f39533f56633c1efb2a4", "filename": "src/libstd/sys/windows/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -19,7 +19,7 @@ pub fn is_verbatim_sep(b: u8) -> bool {\n     b == b'\\\\'\n }\n \n-pub fn parse_prefix<'a>(path: &'a OsStr) -> Option<Prefix<'a>> {\n+pub fn parse_prefix(path: &OsStr) -> Option<Prefix<'_>> {\n     use crate::path::Prefix::*;\n     unsafe {\n         // The unsafety here stems from converting between &OsStr and &[u8]"}, {"sha": "8789abe55c3d0b526d9526a5ea10f333d72e918c", "filename": "src/libstd/sys_common/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibstd%2Fsys_common%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibstd%2Fsys_common%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fio.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -16,7 +16,7 @@ pub mod test {\n             p.join(path)\n         }\n \n-        pub fn path<'a>(&'a self) -> &'a Path {\n+        pub fn path(&self) -> &Path {\n             let TempDir(ref p) = *self;\n             p\n         }"}, {"sha": "ab61f77f5cb3645958919c5f931fded473b895aa", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -31,6 +31,7 @@ use crate::tokenstream::TokenTree;\n \n use errors::{Applicability, DiagnosticBuilder, Handler};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sync::Lock;\n use rustc_target::spec::abi::Abi;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use log::debug;\n@@ -573,6 +574,9 @@ declare_features! (\n     // Allows `impl Trait` with multiple unrelated lifetimes.\n     (active, member_constraints, \"1.37.0\", Some(61977), None),\n \n+    // Allows `async || body` closures.\n+    (active, async_closure, \"1.37.0\", Some(62290), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -2191,9 +2195,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                     \"labels on blocks are unstable\");\n                 }\n             }\n-            ast::ExprKind::Closure(_, ast::IsAsync::Async { .. }, ..) => {\n-                gate_feature_post!(&self, async_await, e.span, \"async closures are unstable\");\n-            }\n             ast::ExprKind::Async(..) => {\n                 gate_feature_post!(&self, async_await, e.span, \"async blocks are unstable\");\n             }\n@@ -2527,6 +2528,10 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n     features\n }\n \n+fn for_each_in_lock<T>(vec: &Lock<Vec<T>>, f: impl Fn(&T)) {\n+    vec.borrow().iter().for_each(f);\n+}\n+\n pub fn check_crate(krate: &ast::Crate,\n                    sess: &ParseSess,\n                    features: &Features,\n@@ -2539,27 +2544,26 @@ pub fn check_crate(krate: &ast::Crate,\n         plugin_attributes,\n     };\n \n-    sess\n-        .param_attr_spans\n-        .borrow()\n-        .iter()\n-        .for_each(|span| gate_feature!(\n-            &ctx,\n-            param_attrs,\n-            *span,\n-            \"attributes on function parameters are unstable\"\n-        ));\n-\n-    sess\n-        .let_chains_spans\n-        .borrow()\n-        .iter()\n-        .for_each(|span| gate_feature!(\n-            &ctx,\n-            let_chains,\n-            *span,\n-            \"`let` expressions in this position are experimental\"\n-        ));\n+    for_each_in_lock(&sess.param_attr_spans, |span| gate_feature!(\n+        &ctx,\n+        param_attrs,\n+        *span,\n+        \"attributes on function parameters are unstable\"\n+    ));\n+\n+    for_each_in_lock(&sess.let_chains_spans, |span| gate_feature!(\n+        &ctx,\n+        let_chains,\n+        *span,\n+        \"`let` expressions in this position are experimental\"\n+    ));\n+\n+    for_each_in_lock(&sess.async_closure_spans, |span| gate_feature!(\n+        &ctx,\n+        async_closure,\n+        *span,\n+        \"async closures are unstable\"\n+    ));\n \n     let visitor = &mut PostExpansionVisitor {\n         context: &ctx,"}, {"sha": "3717bb435f69d07fb78f9cfd71417cd7ac02d4a0", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -1452,6 +1452,7 @@ mod tests {\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n             param_attr_spans: Lock::new(Vec::new()),\n             let_chains_spans: Lock::new(Vec::new()),\n+            async_closure_spans: Lock::new(Vec::new()),\n         }\n     }\n "}, {"sha": "4056905d5dd014a40f0187b539ed4e2caedc365f", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -57,6 +57,8 @@ pub struct ParseSess {\n     pub param_attr_spans: Lock<Vec<Span>>,\n     // Places where `let` exprs were used and should be feature gated according to `let_chains`.\n     pub let_chains_spans: Lock<Vec<Span>>,\n+    // Places where `async || ..` exprs were used and should be feature gated.\n+    pub async_closure_spans: Lock<Vec<Span>>,\n }\n \n impl ParseSess {\n@@ -84,6 +86,7 @@ impl ParseSess {\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n             param_attr_spans: Lock::new(Vec::new()),\n             let_chains_spans: Lock::new(Vec::new()),\n+            async_closure_spans: Lock::new(Vec::new()),\n         }\n     }\n "}, {"sha": "a95b6891fb9d5876d243bfabc8cfe545be4102eb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -3221,21 +3221,24 @@ impl<'a> Parser<'a> {\n                              -> PResult<'a, P<Expr>>\n     {\n         let lo = self.token.span;\n+\n         let movability = if self.eat_keyword(kw::Static) {\n             Movability::Static\n         } else {\n             Movability::Movable\n         };\n+\n         let asyncness = if self.token.span.rust_2018() {\n             self.parse_asyncness()\n         } else {\n             IsAsync::NotAsync\n         };\n-        let capture_clause = if self.eat_keyword(kw::Move) {\n-            CaptureBy::Value\n-        } else {\n-            CaptureBy::Ref\n-        };\n+        if asyncness.is_async() {\n+            // Feature gate `async ||` closures.\n+            self.sess.async_closure_spans.borrow_mut().push(self.prev_span);\n+        }\n+\n+        let capture_clause = self.parse_capture_clause();\n         let decl = self.parse_fn_block_decl()?;\n         let decl_hi = self.prev_span;\n         let body = match decl.output {\n@@ -3257,7 +3260,7 @@ impl<'a> Parser<'a> {\n             attrs))\n     }\n \n-    // `else` token already eaten\n+    /// `else` token already eaten\n     fn parse_else_expr(&mut self) -> PResult<'a, P<Expr>> {\n         if self.eat_keyword(kw::If) {\n             return self.parse_if_expr(ThinVec::new());\n@@ -3306,7 +3309,7 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(span, ExprKind::While(cond, body, opt_label), attrs))\n     }\n \n-    // parse `loop {...}`, `loop` token already eaten\n+    /// Parse `loop {...}`, `loop` token already eaten.\n     fn parse_loop_expr(&mut self, opt_label: Option<Label>,\n                            span_lo: Span,\n                            mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n@@ -3316,17 +3319,20 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(span, ExprKind::Loop(body, opt_label), attrs))\n     }\n \n-    /// Parses an `async move {...}` expression.\n-    pub fn parse_async_block(&mut self, mut attrs: ThinVec<Attribute>)\n-        -> PResult<'a, P<Expr>>\n-    {\n-        let span_lo = self.token.span;\n-        self.expect_keyword(kw::Async)?;\n-        let capture_clause = if self.eat_keyword(kw::Move) {\n+    /// Parse an optional `move` prefix to a closure lke construct.\n+    fn parse_capture_clause(&mut self) -> CaptureBy {\n+        if self.eat_keyword(kw::Move) {\n             CaptureBy::Value\n         } else {\n             CaptureBy::Ref\n-        };\n+        }\n+    }\n+\n+    /// Parses an `async move? {...}` expression.\n+    pub fn parse_async_block(&mut self, mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n+        let span_lo = self.token.span;\n+        self.expect_keyword(kw::Async)?;\n+        let capture_clause = self.parse_capture_clause();\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n         Ok(self.mk_expr("}, {"sha": "233574dda5daed197e890c48c8e4fa5c7f2a3825", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -146,6 +146,7 @@ symbols! {\n         associated_type_defaults,\n         associated_types,\n         async_await,\n+        async_closure,\n         attr,\n         attributes,\n         attr_literals,"}, {"sha": "7396918196c088a35c4108780728d80cb19ce766", "filename": "src/test/run-pass/async-await/async-fn-size.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Frun-pass%2Fasync-await%2Fasync-fn-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Frun-pass%2Fasync-await%2Fasync-fn-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await%2Fasync-fn-size.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n #[path = \"../auxiliary/arc_wake.rs\"]\n mod arc_wake;\n@@ -58,31 +58,31 @@ fn wait(fut: impl Future<Output = u8>) -> u8 {\n fn base() -> WakeOnceThenComplete { WakeOnceThenComplete(false, 1) }\n \n async fn await1_level1() -> u8 {\n-    await!(base())\n+    base().await\n }\n \n async fn await2_level1() -> u8 {\n-    await!(base()) + await!(base())\n+    base().await + base().await\n }\n \n async fn await3_level1() -> u8 {\n-    await!(base()) + await!(base()) + await!(base())\n+    base().await + base().await + base().await\n }\n \n async fn await3_level2() -> u8 {\n-    await!(await3_level1()) + await!(await3_level1()) + await!(await3_level1())\n+    await3_level1().await + await3_level1().await + await3_level1().await\n }\n \n async fn await3_level3() -> u8 {\n-    await!(await3_level2()) + await!(await3_level2()) + await!(await3_level2())\n+    await3_level2().await + await3_level2().await + await3_level2().await\n }\n \n async fn await3_level4() -> u8 {\n-    await!(await3_level3()) + await!(await3_level3()) + await!(await3_level3())\n+    await3_level3().await + await3_level3().await + await3_level3().await\n }\n \n async fn await3_level5() -> u8 {\n-    await!(await3_level4()) + await!(await3_level4()) + await!(await3_level4())\n+    await3_level4().await + await3_level4().await + await3_level4().await\n }\n \n fn main() {"}, {"sha": "5ebb18b999ab6f83d071f65630740f08d74f9c5b", "filename": "src/test/run-pass/async-await/issue-60709.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Frun-pass%2Fasync-await%2Fissue-60709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Frun-pass%2Fasync-await%2Fissue-60709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await%2Fissue-60709.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -2,7 +2,7 @@\n // handled incorrectly in generators.\n // compile-flags: -Copt-level=z -Cdebuginfo=2 --edition=2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n #![allow(unused)]\n \n use std::future::Future;\n@@ -22,7 +22,7 @@ impl Future for Never {\n fn main() {\n     let fut = async {\n         let _rc = Rc::new(()); // Also crashes with Arc\n-        await!(Never());\n+        Never().await;\n     };\n     let _bla = fut; // Moving the future is required.\n }"}, {"sha": "9555efb639b50480e93a11db16d009cd23fa1f64", "filename": "src/test/run-pass/intrinsics/intrinsic-uninit.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f119bf2761ab11ca577fac9881678c04d3e7fdb0/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsic-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f119bf2761ab11ca577fac9881678c04d3e7fdb0/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsic-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsic-uninit.rs?ref=f119bf2761ab11ca577fac9881678c04d3e7fdb0", "patch": "@@ -1,13 +0,0 @@\n-// run-pass\n-// pretty-expanded FIXME #23616\n-\n-#![feature(intrinsics)]\n-\n-mod rusti {\n-    extern \"rust-intrinsic\" {\n-        pub fn uninit<T>() -> T;\n-    }\n-}\n-pub fn main() {\n-    let _a : isize = unsafe {rusti::uninit()};\n-}"}, {"sha": "29622c9d030a3514aeb93ed46ee16097aec0e356", "filename": "src/test/ui/async-await/async-await.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -70,13 +70,6 @@ fn async_nonmove_block(x: u8) -> impl Future<Output = u8> {\n     }\n }\n \n-fn async_closure(x: u8) -> impl Future<Output = u8> {\n-    (async move |x: u8| -> u8 {\n-        wake_and_yield_once().await;\n-        x\n-    })(x)\n-}\n-\n async fn async_fn(x: u8) -> u8 {\n     wake_and_yield_once().await;\n     x\n@@ -180,7 +173,6 @@ fn main() {\n     test! {\n         async_block,\n         async_nonmove_block,\n-        async_closure,\n         async_fn,\n         generic_async_fn,\n         async_fn_with_internal_borrow,"}, {"sha": "90bd51ec5d0d2cc5cc23f57c723f8cf953e55fed", "filename": "src/test/ui/async-await/async-closure-matches-expr.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure-matches-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure-matches-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure-matches-expr.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -0,0 +1,12 @@\n+// compile-pass\n+// edition:2018\n+\n+#![feature(async_await, async_closure)]\n+\n+macro_rules! match_expr {\n+    ($x:expr) => {}\n+}\n+\n+fn main() {\n+    match_expr!(async || {});\n+}"}, {"sha": "f5dc9e24d2d86d0662f8f1305191c9bbea28e2f8", "filename": "src/test/ui/async-await/async-closure.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -0,0 +1,81 @@\n+// run-pass\n+\n+// edition:2018\n+// aux-build:arc_wake.rs\n+\n+#![feature(async_await, async_closure)]\n+\n+extern crate arc_wake;\n+\n+use std::pin::Pin;\n+use std::future::Future;\n+use std::sync::{\n+    Arc,\n+    atomic::{self, AtomicUsize},\n+};\n+use std::task::{Context, Poll};\n+use arc_wake::ArcWake;\n+\n+struct Counter {\n+    wakes: AtomicUsize,\n+}\n+\n+impl ArcWake for Counter {\n+    fn wake(self: Arc<Self>) {\n+        Self::wake_by_ref(&self)\n+    }\n+    fn wake_by_ref(arc_self: &Arc<Self>) {\n+        arc_self.wakes.fetch_add(1, atomic::Ordering::SeqCst);\n+    }\n+}\n+\n+struct WakeOnceThenComplete(bool);\n+\n+fn wake_and_yield_once() -> WakeOnceThenComplete { WakeOnceThenComplete(false) }\n+\n+impl Future for WakeOnceThenComplete {\n+    type Output = ();\n+    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {\n+        if self.0 {\n+            Poll::Ready(())\n+        } else {\n+            cx.waker().wake_by_ref();\n+            self.0 = true;\n+            Poll::Pending\n+        }\n+    }\n+}\n+\n+fn async_closure(x: u8) -> impl Future<Output = u8> {\n+    (async move |x: u8| -> u8 {\n+        wake_and_yield_once().await;\n+        x\n+    })(x)\n+}\n+\n+fn test_future_yields_once_then_returns<F, Fut>(f: F)\n+where\n+    F: FnOnce(u8) -> Fut,\n+    Fut: Future<Output = u8>,\n+{\n+    let mut fut = Box::pin(f(9));\n+    let counter = Arc::new(Counter { wakes: AtomicUsize::new(0) });\n+    let waker = ArcWake::into_waker(counter.clone());\n+    let mut cx = Context::from_waker(&waker);\n+    assert_eq!(0, counter.wakes.load(atomic::Ordering::SeqCst));\n+    assert_eq!(Poll::Pending, fut.as_mut().poll(&mut cx));\n+    assert_eq!(1, counter.wakes.load(atomic::Ordering::SeqCst));\n+    assert_eq!(Poll::Ready(9), fut.as_mut().poll(&mut cx));\n+}\n+\n+fn main() {\n+    macro_rules! test {\n+        ($($fn_name:expr,)*) => { $(\n+            test_future_yields_once_then_returns($fn_name);\n+        )* }\n+    }\n+\n+    test! {\n+        async_closure,\n+    }\n+}"}, {"sha": "d362348a3fddb9d0e4148fe1e4561051bf306a54", "filename": "src/test/ui/async-await/async-error-span.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -0,0 +1,17 @@\n+// edition:2018\n+#![feature(async_await)]\n+\n+// Regression test for issue #62382\n+\n+use std::future::Future;\n+\n+fn get_future() -> impl Future<Output = ()> {\n+    panic!()\n+}\n+\n+async fn foo() {\n+    let a; //~ ERROR type inside `async` object must be known in this context\n+    get_future().await;\n+}\n+\n+fn main() {}"}, {"sha": "bd8966b9c7d47ff517091e679cbcfea7a561ccf5", "filename": "src/test/ui/async-await/async-error-span.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -0,0 +1,15 @@\n+error[E0698]: type inside `async` object must be known in this context\n+  --> $DIR/async-error-span.rs:13:9\n+   |\n+LL |     let a;\n+   |         ^ cannot infer type\n+   |\n+note: the type is part of the `async` object because of this `await`\n+  --> $DIR/async-error-span.rs:14:5\n+   |\n+LL |     get_future().await;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0698`."}, {"sha": "447e40dddd910f4b47aed0035bc157c645ed8e04", "filename": "src/test/ui/async-await/async-fn-path-elision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n #![allow(dead_code)]\n \n struct HasLifetime<'a>(&'a bool);"}, {"sha": "a6f0211e41f98e369990176ff42af9fd4e5ef2bb", "filename": "src/test/ui/async-await/async-matches-expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fasync-matches-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fasync-matches-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-matches-expr.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -1,13 +1,12 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n macro_rules! match_expr {\n     ($x:expr) => {}\n }\n \n fn main() {\n     match_expr!(async {});\n-    match_expr!(async || {});\n }"}, {"sha": "f7dc874affd268170bc6c58e4ef5add1651e78ec", "filename": "src/test/ui/async-await/async-with-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -1,7 +1,7 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n trait MyClosure {\n     type Args;\n@@ -20,7 +20,7 @@ async fn get_future<C: ?Sized + MyClosure>(_stream: MyStream<C>) {}\n \n async fn f() {\n     let messages: MyStream<dyn FnMut()> = unimplemented!();\n-    await!(get_future(messages));\n+    get_future(messages).await;\n }\n \n fn main() {}"}, {"sha": "92f3210ac89a38df7eb4ddf6f06def3d845cdf9b", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error-in-non-macro-position.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n \n #![allow(non_camel_case_types)]\n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n mod outer_mod {\n     pub mod await { //~ ERROR expected identifier, found reserved keyword `await`"}, {"sha": "c37835d73e92be5b38148a95ab74ccf5b6b53cfe", "filename": "src/test/ui/async-await/await-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -3,7 +3,7 @@\n // edition:2018\n // aux-build:arc_wake.rs\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await, async_closure, await_macro)]\n \n extern crate arc_wake;\n "}, {"sha": "d5e21257f4f7df118d3d03d97b931e8b38e2deb2", "filename": "src/test/ui/async-await/await-unsize.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fawait-unsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fawait-unsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-unsize.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -0,0 +1,16 @@\n+// Regression test for #62312\n+\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+async fn make_boxed_object() -> Box<dyn Send> {\n+    Box::new(()) as _\n+}\n+\n+async fn await_object() {\n+    let _ = make_boxed_object().await;\n+}\n+\n+fn main() {}"}, {"sha": "dfd8b2e361eef1b1e0cd8ea77a309eb7989ee354", "filename": "src/test/ui/async-await/drop-order/drop-order-for-async-fn-parameters-by-ref-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -3,7 +3,7 @@\n // run-pass\n \n #![allow(unused_variables)]\n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n // Test that the drop order for parameters in a fn and async fn matches up. Also test that\n // parameters (used or unused) are not dropped until the async fn completes execution."}, {"sha": "2a74485afb45094803b030dcdde26ebacbe37c17", "filename": "src/test/ui/async-await/drop-order/drop-order-for-async-fn-parameters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -3,7 +3,7 @@\n // run-pass\n \n #![allow(unused_variables)]\n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n // Test that the drop order for parameters in a fn and async fn matches up. Also test that\n // parameters (used or unused) are not dropped until the async fn completes execution."}, {"sha": "d07116b13a2b50676befb3b37dd2beb491723272", "filename": "src/test/ui/async-await/feature-async-closure.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Ffeature-async-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Ffeature-async-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ffeature-async-closure.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -0,0 +1,8 @@\n+// edition:2018\n+// gate-test-async_closure\n+\n+fn f() {\n+    let _ = async || {}; //~ ERROR async closures are unstable\n+}\n+\n+fn main() {}"}, {"sha": "61909f8659ed062dcc40f4a84df2fd4bad345bdc", "filename": "src/test/ui/async-await/feature-async-closure.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Ffeature-async-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Ffeature-async-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ffeature-async-closure.stderr?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: async closures are unstable\n+  --> $DIR/feature-async-closure.rs:5:13\n+   |\n+LL |     let _ = async || {};\n+   |             ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/62290\n+   = help: add #![feature(async_closure)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "c57dc6b0ef6f9e63a173bf4aee230453b69ffdcd", "filename": "src/test/ui/async-await/issues/issue-53249.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -1,7 +1,7 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(arbitrary_self_types, async_await, await_macro)]\n+#![feature(arbitrary_self_types, async_await)]\n \n use std::task::{self, Poll};\n use std::future::Future;\n@@ -37,11 +37,11 @@ impl<R, F> Future for Lazy<F>\n async fn __receive<WantFn, Fut>(want: WantFn) -> ()\n     where Fut: Future<Output = ()>, WantFn: Fn(&Box<dyn Send + 'static>) -> Fut,\n {\n-    await!(lazy(|_| ()));\n+    lazy(|_| ()).await;\n }\n \n pub fn basic_spawn_receive() {\n-    async { await!(__receive(|_| async { () })) };\n+    async { __receive(|_| async { () }).await };\n }\n \n fn main() {}"}, {"sha": "040989b33fc1a2746f0778e306d3285f32a8ee46", "filename": "src/test/ui/async-await/issues/issue-54974.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -1,7 +1,7 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n use std::sync::Arc;\n "}, {"sha": "4f383a51a88e7ecfb0e7884858e4c8c9822ecb83", "filename": "src/test/ui/async-await/issues/issue-55324.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -1,13 +1,13 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n use std::future::Future;\n \n #[allow(unused)]\n async fn foo<F: Future<Output = i32>>(x: &i32, future: F) -> i32 {\n-    let y = await!(future);\n+    let y = future.await;\n     *x + y\n }\n "}, {"sha": "47744aeea603499e84dedea88f447e5fd372ae6b", "filename": "src/test/ui/async-await/issues/issue-58885.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -1,7 +1,7 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n struct Xyz {\n     a: u64,"}, {"sha": "9334ddb0af588e2335939bdef5cd5dc6c00bfabb", "filename": "src/test/ui/async-await/issues/issue-59001.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -1,7 +1,7 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n use std::future::Future;\n "}, {"sha": "1b843720102ab6a514a8aa32d2f9ccea6de7ddad", "filename": "src/test/ui/async-await/issues/issue-59972.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -2,7 +2,7 @@\n \n // compile-flags: --edition=2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n pub enum Uninhabited { }\n \n@@ -15,7 +15,7 @@ async fn noop() { }\n #[allow(unused)]\n async fn contains_never() {\n     let error = uninhabited_async();\n-    await!(noop());\n+    noop().await;\n     let error2 = error;\n }\n "}, {"sha": "ac6605bcefff956201c8dc1a84d344d262ee2eb9", "filename": "src/test/ui/async-await/issues/issue-62009-1.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -11,8 +11,6 @@ fn main() {\n     //~^ ERROR `await` is only allowed inside `async` functions and blocks\n         let task1 = print_dur().await;\n     }.await;\n-    (async || 2333)().await;\n-    //~^ ERROR `await` is only allowed inside `async` functions and blocks\n     (|_| 2333).await;\n     //~^ ERROR `await` is only allowed inside `async` functions and blocks\n     //~^^ ERROR", "previous_filename": "src/test/ui/async-await/issues/issue-62009.rs"}, {"sha": "2bbb6d079ead11279045a8881c6dd77f5dc906bc", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "renamed", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -1,13 +1,13 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009.rs:8:5\n+  --> $DIR/issue-62009-1.rs:8:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     async { let (); }.await;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009.rs:10:5\n+  --> $DIR/issue-62009-1.rs:10:5\n    |\n LL |   fn main() {\n    |      ---- this is not `async`\n@@ -19,31 +19,22 @@ LL | |     }.await;\n    | |___________^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009.rs:14:5\n-   |\n-LL | fn main() {\n-   |    ---- this is not `async`\n-...\n-LL |     (async || 2333)().await;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n-\n-error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009.rs:16:5\n+  --> $DIR/issue-62009-1.rs:14:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n ...\n LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n-error[E0277]: the trait bound `[closure@$DIR/issue-62009.rs:16:5: 16:15]: std::future::Future` is not satisfied\n-  --> $DIR/issue-62009.rs:16:5\n+error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]: std::future::Future` is not satisfied\n+  --> $DIR/issue-62009-1.rs:14:5\n    |\n LL |     (|_| 2333).await;\n-   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009.rs:16:5: 16:15]`\n+   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]`\n    |\n    = note: required by `std::future::poll_with_tls_context`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`.", "previous_filename": "src/test/ui/async-await/issues/issue-62009.stderr"}, {"sha": "52b62eaa9e0a7054ad8f9f26448f2c391b653ea1", "filename": "src/test/ui/async-await/issues/issue-62009-2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -0,0 +1,10 @@\n+// edition:2018\n+\n+#![feature(async_await, async_closure)]\n+\n+async fn print_dur() {}\n+\n+fn main() {\n+    (async || 2333)().await;\n+    //~^ ERROR `await` is only allowed inside `async` functions and blocks\n+}"}, {"sha": "79b6803263eecdec36667c8747f879819e0045fa", "filename": "src/test/ui/async-await/issues/issue-62009-2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -0,0 +1,10 @@\n+error[E0728]: `await` is only allowed inside `async` functions and blocks\n+  --> $DIR/issue-62009-2.rs:8:5\n+   |\n+LL | fn main() {\n+   |    ---- this is not `async`\n+LL |     (async || 2333)().await;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+\n+error: aborting due to previous error\n+"}, {"sha": "589e260d084b2136a56c947686ba12c3cffa9eee", "filename": "src/test/ui/async-await/multiple-lifetimes/hrtb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -3,7 +3,7 @@\n \n // Test that we can use async fns with multiple arbitrary lifetimes.\n \n-#![feature(arbitrary_self_types, async_await, await_macro)]\n+#![feature(async_await)]\n #![allow(dead_code)]\n \n use std::ops::Add;"}, {"sha": "62d4b3fb6f23b9a82970b461674056ef79c03b5b", "filename": "src/test/ui/async-await/no-args-non-move-async-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await, async_closure)]\n \n fn main() {\n     let _ = async |x: u8| {};"}, {"sha": "54f3339870bda4012bc6b8b3a2404a47028d190b", "filename": "src/test/ui/async-await/recursive-async-impl-trait-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -2,10 +2,10 @@\n // Test that impl trait does not allow creating recursive types that are\n // otherwise forbidden when using `async` and `await`.\n \n-#![feature(await_macro, async_await, generators)]\n+#![feature(async_await)]\n \n async fn recursive_async_function() -> () { //~ ERROR\n-    await!(recursive_async_function());\n+    recursive_async_function().await;\n }\n \n fn main() {}"}, {"sha": "60c9a8581ac9ee7a4a58f950b668c71b7730d610", "filename": "src/test/ui/async-await/suggest-missing-await-closure.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.fixed?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -0,0 +1,23 @@\n+// edition:2018\n+// run-rustfix\n+\n+#![feature(async_await, async_closure)]\n+\n+fn take_u32(_x: u32) {}\n+\n+async fn make_u32() -> u32 {\n+    22\n+}\n+\n+#[allow(unused)]\n+async fn suggest_await_in_async_closure() {\n+    async || {\n+        let x = make_u32();\n+        take_u32(x.await)\n+        //~^ ERROR mismatched types [E0308]\n+        //~| HELP consider using `.await` here\n+        //~| SUGGESTION x.await\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "cb992a27bc1c610ea28b8b563c73c5d2612054a1", "filename": "src/test/ui/async-await/suggest-missing-await-closure.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -0,0 +1,23 @@\n+// edition:2018\n+// run-rustfix\n+\n+#![feature(async_await, async_closure)]\n+\n+fn take_u32(_x: u32) {}\n+\n+async fn make_u32() -> u32 {\n+    22\n+}\n+\n+#[allow(unused)]\n+async fn suggest_await_in_async_closure() {\n+    async || {\n+        let x = make_u32();\n+        take_u32(x)\n+        //~^ ERROR mismatched types [E0308]\n+        //~| HELP consider using `.await` here\n+        //~| SUGGESTION x.await\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "487ca6c0fc57ce8ba9f5771f19db694acf70e37a", "filename": "src/test/ui/async-await/suggest-missing-await-closure.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-missing-await-closure.rs:16:18\n+   |\n+LL |         take_u32(x)\n+   |                  ^\n+   |                  |\n+   |                  expected u32, found opaque type\n+   |                  help: consider using `.await` here: `x.await`\n+   |\n+   = note: expected type `u32`\n+              found type `impl std::future::Future`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "aa032682be82249e6df7ef28d5f936fd67a2ca16", "filename": "src/test/ui/async-await/suggest-missing-await.fixed", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -18,15 +18,4 @@ async fn suggest_await_in_async_fn() {\n     //~| SUGGESTION x.await\n }\n \n-#[allow(unused)]\n-async fn suggest_await_in_async_closure() {\n-    async || {\n-        let x = make_u32();\n-        take_u32(x.await)\n-        //~^ ERROR mismatched types [E0308]\n-        //~| HELP consider using `.await` here\n-        //~| SUGGESTION x.await\n-    };\n-}\n-\n fn main() {}"}, {"sha": "2ca814fbb22b5d57a6d54176c6aecdc2ef324def", "filename": "src/test/ui/async-await/suggest-missing-await.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -18,15 +18,4 @@ async fn suggest_await_in_async_fn() {\n     //~| SUGGESTION x.await\n }\n \n-#[allow(unused)]\n-async fn suggest_await_in_async_closure() {\n-    async || {\n-        let x = make_u32();\n-        take_u32(x)\n-        //~^ ERROR mismatched types [E0308]\n-        //~| HELP consider using `.await` here\n-        //~| SUGGESTION x.await\n-    };\n-}\n-\n fn main() {}"}, {"sha": "9bae7150276a865ba90cd6647d18566ec57bbc8f", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -10,18 +10,6 @@ LL |     take_u32(x)\n    = note: expected type `u32`\n               found type `impl std::future::Future`\n \n-error[E0308]: mismatched types\n-  --> $DIR/suggest-missing-await.rs:25:18\n-   |\n-LL |         take_u32(x)\n-   |                  ^\n-   |                  |\n-   |                  expected u32, found opaque type\n-   |                  help: consider using `.await` here: `x.await`\n-   |\n-   = note: expected type `u32`\n-              found type `impl std::future::Future`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "78391c0e104cc3e26a441fb48491320524f2c2d3", "filename": "src/test/ui/feature-gates/feature-gate-async-await.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -15,5 +15,4 @@ async fn foo() {} //~ ERROR async fn is unstable\n \n fn main() {\n     let _ = async {}; //~ ERROR async blocks are unstable\n-    let _ = async || {}; //~ ERROR async closures are unstable\n }"}, {"sha": "1ea4da8da0c5e323f0d024b380164a66c873fe83", "filename": "src/test/ui/feature-gates/feature-gate-async-await.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -40,15 +40,6 @@ LL |     let _ = async {};\n    = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n    = help: add #![feature(async_await)] to the crate attributes to enable\n \n-error[E0658]: async closures are unstable\n-  --> $DIR/feature-gate-async-await.rs:18:13\n-   |\n-LL |     let _ = async || {};\n-   |             ^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n-   = help: add #![feature(async_await)] to the crate attributes to enable\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "3d65cfc2340926f6b7e07a08c4d23a6b24b15245", "filename": "src/test/ui/init-unsafe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Finit-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Finit-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finit-unsafe.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -1,3 +1,4 @@\n+#![allow(deprecated)]\n #![feature(core_intrinsics)]\n \n use std::intrinsics::{init};"}, {"sha": "e1126316af34ee3ab4f0839bc18f80a663d3e47e", "filename": "src/test/ui/init-unsafe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Finit-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Finit-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finit-unsafe.stderr?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/init-unsafe.rs:7:17\n+  --> $DIR/init-unsafe.rs:8:17\n    |\n LL |     let stuff = init::<isize>();\n    |                 ^^^^^^^^^^^^^^^ call to unsafe function"}, {"sha": "974c63cea85e4ae9f0096e7833f30918ec538091", "filename": "src/test/ui/loops/loop-break-unsize.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Floops%2Floop-break-unsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853f30052d019a8ebe197a5adff3a29d6716a955/src%2Ftest%2Fui%2Floops%2Floop-break-unsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-unsize.rs?ref=853f30052d019a8ebe197a5adff3a29d6716a955", "patch": "@@ -0,0 +1,8 @@\n+// Regression test for #62312\n+// check-pass\n+\n+fn main() {\n+    let _ = loop {\n+        break Box::new(()) as Box<dyn Send>;\n+    };\n+}"}]}