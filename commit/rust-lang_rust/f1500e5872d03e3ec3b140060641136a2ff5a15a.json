{"sha": "f1500e5872d03e3ec3b140060641136a2ff5a15a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNTAwZTU4NzJkMDNlM2VjM2IxNDAwNjA2NDExMzZhMmZmNWExNWE=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-02-27T01:51:02Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-02T18:28:14Z"}, "message": "Add fold, typecheck and trans for expr_ext", "tree": {"sha": "328b45166e948c7a1b304f0dfe90a822c24a3c5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/328b45166e948c7a1b304f0dfe90a822c24a3c5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1500e5872d03e3ec3b140060641136a2ff5a15a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1500e5872d03e3ec3b140060641136a2ff5a15a", "html_url": "https://github.com/rust-lang/rust/commit/f1500e5872d03e3ec3b140060641136a2ff5a15a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1500e5872d03e3ec3b140060641136a2ff5a15a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c60399257cde71fc265eb10cae1f398a0ac2516", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c60399257cde71fc265eb10cae1f398a0ac2516", "html_url": "https://github.com/rust-lang/rust/commit/1c60399257cde71fc265eb10cae1f398a0ac2516"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "d533082c915183c5f710f5c534f8d5ddd3aeee90", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f1500e5872d03e3ec3b140060641136a2ff5a15a/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1500e5872d03e3ec3b140060641136a2ff5a15a/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=f1500e5872d03e3ec3b140060641136a2ff5a15a", "patch": "@@ -154,6 +154,12 @@ type ast_fold[ENV] =\n          &option.t[def] d,\n          ann a) -> @expr)                         fold_expr_path,\n \n+     (fn(&ENV e, &span sp,\n+         &path p, vec[@expr] args,\n+         option.t[@expr] body,\n+         option.t[@expr] expanded,\n+         ann a) -> @expr)                         fold_expr_ext,\n+\n      (fn(&ENV e, &span sp) -> @expr)              fold_expr_fail,\n \n      (fn(&ENV e, &span sp,\n@@ -644,6 +650,15 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n             ret fld.fold_expr_path(env_, e.span, p_, r, t);\n         }\n \n+        case (ast.expr_ext(?p, ?args, ?body, ?expanded, ?t)) {\n+            // Only fold the expanded expression, not the\n+            // expressions involved in syntax extension\n+            auto exp = option.get[@expr](expanded);\n+            auto exp_ = fold_expr(env_, fld, exp);\n+            ret fld.fold_expr_ext(env_, e.span, p, args, body,\n+                                  some[@ast.expr](exp_), t);\n+        }\n+\n         case (ast.expr_fail) {\n             ret fld.fold_expr_fail(env_, e.span);\n         }\n@@ -1166,6 +1181,14 @@ fn identity_fold_expr_path[ENV](&ENV env, &span sp,\n     ret @respan(sp, ast.expr_path(p, d, a));\n }\n \n+fn identity_fold_expr_ext[ENV](&ENV env, &span sp,\n+                               &path p, vec[@expr] args,\n+                               option.t[@expr] body,\n+                               option.t[@expr] expanded,\n+                               ann a) -> @expr {\n+    ret @respan(sp, ast.expr_ext(p, args, body, expanded, a));\n+}\n+\n fn identity_fold_expr_fail[ENV](&ENV env, &span sp) -> @expr {\n     ret @respan(sp, ast.expr_fail);\n }\n@@ -1447,6 +1470,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_expr_field  = bind identity_fold_expr_field[ENV](_,_,_,_,_),\n          fold_expr_index  = bind identity_fold_expr_index[ENV](_,_,_,_,_),\n          fold_expr_path   = bind identity_fold_expr_path[ENV](_,_,_,_,_),\n+         fold_expr_ext    = bind identity_fold_expr_ext[ENV](_,_,_,_,_,_,_),\n          fold_expr_fail   = bind identity_fold_expr_fail[ENV](_,_),\n          fold_expr_ret    = bind identity_fold_expr_ret[ENV](_,_,_),\n          fold_expr_put    = bind identity_fold_expr_put[ENV](_,_,_),"}, {"sha": "f8c3fd61d46b9c70c8d131cec351677c18ea0161", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1500e5872d03e3ec3b140060641136a2ff5a15a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1500e5872d03e3ec3b140060641136a2ff5a15a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f1500e5872d03e3ec3b140060641136a2ff5a15a", "patch": "@@ -1957,6 +1957,8 @@ fn trans_lit(@crate_ctxt cx, &ast.lit lit, &ast.ann ann) -> ValueRef {\n             ret C_nil();\n         }\n         case (ast.lit_str(?s)) {\n+            log \"translating literal:\";\n+            log s;\n             ret C_str(cx, s);\n         }\n     }\n@@ -3599,6 +3601,7 @@ fn trans_rec(@block_ctxt cx, vec[ast.field] fields,\n fn trans_expr(@block_ctxt cx, @ast.expr e) -> result {\n     alt (e.node) {\n         case (ast.expr_lit(?lit, ?ann)) {\n+            log \"translating literal\";\n             ret res(cx, trans_lit(cx.fcx.ccx, *lit, ann));\n         }\n \n@@ -3693,6 +3696,11 @@ fn trans_expr(@block_ctxt cx, @ast.expr e) -> result {\n             ret trans_rec(cx, args, base, ann);\n         }\n \n+        case (ast.expr_ext(_, _, _, ?expanded, _)) {\n+            log \"translating extension\";\n+            ret trans_expr(cx, option.get[@ast.expr](expanded));\n+        }\n+\n         case (ast.expr_fail) {\n             ret trans_fail(cx, e.span, \"explicit failure\");\n         }"}, {"sha": "478f54d1ab4f94f96cc9d1d9f79ecd6aa7db80d8", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1500e5872d03e3ec3b140060641136a2ff5a15a/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1500e5872d03e3ec3b140060641136a2ff5a15a/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=f1500e5872d03e3ec3b140060641136a2ff5a15a", "patch": "@@ -749,6 +749,7 @@ fn expr_ty(@ast.expr expr) -> @t {\n         case (ast.expr_field(_, _, ?ann))     { ret ann_to_type(ann); }\n         case (ast.expr_index(_, _, ?ann))     { ret ann_to_type(ann); }\n         case (ast.expr_path(_, _, ?ann))      { ret ann_to_type(ann); }\n+        case (ast.expr_ext(_, _, _, _, ?ann)) { ret ann_to_type(ann); }\n \n         case (ast.expr_fail)                  { ret plain_ty(ty_nil); }\n         case (ast.expr_log(_))                { ret plain_ty(ty_nil); }"}, {"sha": "5cccc4d7ef8bca80439c65a2279ae8b7bad8a2bf", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1500e5872d03e3ec3b140060641136a2ff5a15a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1500e5872d03e3ec3b140060641136a2ff5a15a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=f1500e5872d03e3ec3b140060641136a2ff5a15a", "patch": "@@ -1156,6 +1156,11 @@ fn demand_expr_full(&@fn_ctxt fcx, @ty.t expected, @ast.expr e,\n                                  ann_to_type(ann), adk);\n             e_1 = ast.expr_path(pth, d, ast.ann_type(t));\n         }\n+        case (ast.expr_ext(?p, ?args, ?body, ?expanded, ?ann)) {\n+            auto t = demand_full(fcx, e.span, expected,\n+                                 ann_to_type(ann), adk);\n+            e_1 = ast.expr_ext(p, args, body, expanded, ast.ann_type(t));\n+        }\n         case (ast.expr_fail) { e_1 = e.node; }\n         case (ast.expr_log(_)) { e_1 = e.node; }\n         case (ast.expr_ret(_)) { e_1 = e.node; }\n@@ -1508,6 +1513,15 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                                                       ast.ann_type(t)));\n         }\n \n+        case (ast.expr_ext(?p, ?args, ?body, ?expanded, _)) {\n+            auto exp_ = check_expr(fcx, option.get[@ast.expr](expanded));\n+            auto t = expr_ty(exp_);\n+            ret @fold.respan[ast.expr_](expr.span,\n+                                        ast.expr_ext(p, args, body,\n+                                                     some[@ast.expr](exp_),\n+                                                     ast.ann_type(t)));\n+        }\n+\n         case (ast.expr_fail) {\n             ret expr;\n         }"}, {"sha": "0d1d708297f2017d6c7cb48dc14a5f35315fd51d", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1500e5872d03e3ec3b140060641136a2ff5a15a/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1500e5872d03e3ec3b140060641136a2ff5a15a/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=f1500e5872d03e3ec3b140060641136a2ff5a15a", "patch": "@@ -8,6 +8,7 @@ fn test(str actual, str expected) {\n }\n \n fn main() {\n-  test(#fmt(\"hello %d friends and %s things\", 10, \"formatted\"),\n-       \"hello 10 friends and formatted things\");\n+  /*test(#fmt(\"hello %d friends and %s things\", 10, \"formatted\"),\n+    \"hello 10 friends and formatted things\");*/\n+  log #fmt(\"test\");\n }"}]}