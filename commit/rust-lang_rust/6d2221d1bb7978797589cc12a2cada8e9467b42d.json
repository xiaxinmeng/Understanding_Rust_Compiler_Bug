{"sha": "6d2221d1bb7978797589cc12a2cada8e9467b42d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMjIyMWQxYmI3OTc4Nzk3NTg5Y2MxMmEyY2FkYThlOTQ2N2I0MmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-25T16:44:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-25T16:44:42Z"}, "message": "Fix simd_round implementation", "tree": {"sha": "e2117a7e7b227bb0bf65cbad15b7e78b80c9593f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2117a7e7b227bb0bf65cbad15b7e78b80c9593f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d2221d1bb7978797589cc12a2cada8e9467b42d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2221d1bb7978797589cc12a2cada8e9467b42d", "html_url": "https://github.com/rust-lang/rust/commit/6d2221d1bb7978797589cc12a2cada8e9467b42d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d2221d1bb7978797589cc12a2cada8e9467b42d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90e4493b98196e8825fcf18eff2a529a5b19d08f", "url": "https://api.github.com/repos/rust-lang/rust/commits/90e4493b98196e8825fcf18eff2a529a5b19d08f", "html_url": "https://github.com/rust-lang/rust/commit/90e4493b98196e8825fcf18eff2a529a5b19d08f"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "37906ab472d2ebd71f2d7b85f18d1b3a797ec683", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6d2221d1bb7978797589cc12a2cada8e9467b42d/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2221d1bb7978797589cc12a2cada8e9467b42d/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=6d2221d1bb7978797589cc12a2cada8e9467b42d", "patch": "@@ -289,9 +289,23 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_round, (c a) {\n             validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, ret_lane_layout, lane| {\n-                let ret_lane = fx.bcx.ins().nearest(lane);\n-                CValue::by_val(ret_lane, ret_lane_layout)\n+            simd_for_each_lane(fx, a, ret, |fx, lane_layout, ret_lane_layout, lane| {\n+                let res_lane = match lane_layout.ty.kind() {\n+                    ty::Float(FloatTy::F32) => fx.lib_call(\n+                        \"roundf\",\n+                        vec![AbiParam::new(types::F32)],\n+                        vec![AbiParam::new(types::F32)],\n+                        &[lane],\n+                    )[0],\n+                    ty::Float(FloatTy::F64) => fx.lib_call(\n+                        \"round\",\n+                        vec![AbiParam::new(types::F64)],\n+                        vec![AbiParam::new(types::F64)],\n+                        &[lane],\n+                    )[0],\n+                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n+                };\n+                CValue::by_val(res_lane, ret_lane_layout)\n             });\n         };\n         simd_ceil, (c a) {\n@@ -409,5 +423,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         // simd_saturating_*\n         // simd_bitmask\n+        // simd_scatter\n+        // simd_gather\n     }\n }"}]}