{"sha": "152913767a365d963f2486fb88eff976501d7f72", "node_id": "C_kwDOAAsO6NoAKDE1MjkxMzc2N2EzNjVkOTYzZjI0ODZmYjg4ZWZmOTc2NTAxZDdmNzI", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2022-08-28T08:51:28Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2022-08-28T08:51:28Z"}, "message": "Support method calls", "tree": {"sha": "20e4158550fdc6f799f95316b909b046639414dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20e4158550fdc6f799f95316b909b046639414dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/152913767a365d963f2486fb88eff976501d7f72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/152913767a365d963f2486fb88eff976501d7f72", "html_url": "https://github.com/rust-lang/rust/commit/152913767a365d963f2486fb88eff976501d7f72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/152913767a365d963f2486fb88eff976501d7f72/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75ed56f0cba4ab95b5d4a67c1f9235a5dbe9df8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/75ed56f0cba4ab95b5d4a67c1f9235a5dbe9df8a", "html_url": "https://github.com/rust-lang/rust/commit/75ed56f0cba4ab95b5d4a67c1f9235a5dbe9df8a"}], "stats": {"total": 110, "additions": 87, "deletions": 23}, "files": [{"sha": "36e94c3dce5ae96e9ece2daf3000d0d71406fef7", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/152913767a365d963f2486fb88eff976501d7f72/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152913767a365d963f2486fb88eff976501d7f72/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=152913767a365d963f2486fb88eff976501d7f72", "patch": "@@ -683,6 +683,14 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         let num_trait_generics_except_self =\n             trait_generics.count() - if trait_generics.has_self { 1 } else { 0 };\n \n+        let msg = format!(\n+            \"consider moving {these} generic argument{s} to the `{name}` trait, which takes up to {num} argument{s}\",\n+            these = pluralize!(\"this\", num_assoc_fn_excess_args),\n+            s = pluralize!(num_assoc_fn_excess_args),\n+            name = self.tcx.item_name(trait_),\n+            num = num_trait_generics_except_self,\n+        );\n+\n         if let Some(hir_id) = self.path_segment.hir_id\n         && let Some(parent_node) = self.tcx.hir().find_parent_node(hir_id)\n         && let Some(parent_node) = self.tcx.hir().find(parent_node)\n@@ -691,14 +699,22 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n                 hir::ExprKind::Path(ref qpath) => {\n                     self.suggest_moving_args_from_assoc_fn_to_trait_for_qualified_path(\n                         err,\n-                        trait_,\n                         qpath,\n+                        msg,\n+                        num_assoc_fn_excess_args,\n+                        num_trait_generics_except_self\n+                    )\n+                },\n+                hir::ExprKind::MethodCall(..) => {\n+                    self.suggest_moving_args_from_assoc_fn_to_trait_for_method_call(\n+                        err,\n+                        trait_,\n+                        expr,\n+                        msg,\n                         num_assoc_fn_excess_args,\n                         num_trait_generics_except_self\n                     )\n                 },\n-                // FIXME(hkmatsumoto): Emit similar suggestion for \"x.<assoc fn>()\"\n-                hir::ExprKind::MethodCall(..) => return,\n                 _ => return,\n             }\n         }\n@@ -707,8 +723,8 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n     fn suggest_moving_args_from_assoc_fn_to_trait_for_qualified_path(\n         &self,\n         err: &mut Diagnostic,\n-        trait_: DefId,\n         qpath: &'tcx hir::QPath<'tcx>,\n+        msg: String,\n         num_assoc_fn_excess_args: usize,\n         num_trait_generics_except_self: usize,\n     ) {\n@@ -719,13 +735,6 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             if num_assoc_fn_excess_args == num_trait_generics_except_self - num_generic_args_supplied_to_trait {\n                 if let Some(span) = self.gen_args.span_ext()\n                 && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n-                    let msg = format!(\n-                        \"consider moving {these} generic argument{s} to the `{name}` trait, which takes up to {num} argument{s}\",\n-                        these = pluralize!(\"this\", num_assoc_fn_excess_args),\n-                        s = pluralize!(num_assoc_fn_excess_args),\n-                        name = self.tcx.item_name(trait_),\n-                        num = num_trait_generics_except_self,\n-                    );\n                     let sugg = vec![\n                         (self.path_segment.ident.span, format!(\"{}::{}\", snippet, self.path_segment.ident)),\n                         (span.with_lo(self.path_segment.ident.span.hi()), \"\".to_owned())\n@@ -741,6 +750,28 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         }\n     }\n \n+    fn suggest_moving_args_from_assoc_fn_to_trait_for_method_call(\n+        &self,\n+        err: &mut Diagnostic,\n+        trait_: DefId,\n+        expr: &'tcx hir::Expr<'tcx>,\n+        msg: String,\n+        num_assoc_fn_excess_args: usize,\n+        num_trait_generics_except_self: usize,\n+    ) {\n+        if let hir::ExprKind::MethodCall(_, args, _) = expr.kind {\n+            assert_eq!(args.len(), 1);\n+            if num_assoc_fn_excess_args == num_trait_generics_except_self {\n+                if let Some(gen_args) = self.gen_args.span_ext()\n+                && let Ok(gen_args) = self.tcx.sess.source_map().span_to_snippet(gen_args)\n+                && let Ok(args) = self.tcx.sess.source_map().span_to_snippet(args[0].span) {\n+                    let sugg = format!(\"{}::{}::{}({})\", self.tcx.item_name(trait_), gen_args, self.tcx.item_name(self.def_id), args);\n+                    err.span_suggestion(expr.span, msg, sugg, Applicability::MaybeIncorrect);\n+                }\n+            }\n+        }\n+    }\n+\n     /// Suggests to remove redundant argument(s):\n     ///\n     /// ```text"}, {"sha": "d955b4f9651daa4906530e94bb19a0278ac331af", "filename": "src/test/ui/const-generics/invalid-const-arg-for-type-param.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/152913767a365d963f2486fb88eff976501d7f72/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/152913767a365d963f2486fb88eff976501d7f72/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr?ref=152913767a365d963f2486fb88eff976501d7f72", "patch": "@@ -2,15 +2,22 @@ error[E0107]: this associated function takes 0 generic arguments but 1 generic a\n   --> $DIR/invalid-const-arg-for-type-param.rs:6:23\n    |\n LL |     let _: u32 = 5i32.try_into::<32>().unwrap();\n-   |                       ^^^^^^^^------ help: remove these generics\n-   |                       |\n-   |                       expected 0 generic arguments\n+   |                       ^^^^^^^^ expected 0 generic arguments\n    |\n note: associated function defined here, with 0 generic parameters\n   --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n    |\n LL |     fn try_into(self) -> Result<T, Self::Error>;\n    |        ^^^^^^^^\n+help: consider moving this generic argument to the `TryInto` trait, which takes up to 1 argument\n+   |\n+LL |     let _: u32 = TryInto::<32>::try_into(5i32).unwrap();\n+   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+help: remove these generics\n+   |\n+LL -     let _: u32 = 5i32.try_into::<32>().unwrap();\n+LL +     let _: u32 = 5i32.try_into().unwrap();\n+   |\n \n error[E0599]: no method named `f` found for struct `S` in the current scope\n   --> $DIR/invalid-const-arg-for-type-param.rs:9:7"}, {"sha": "fa5fc899dc083639119b384248a0dbcab088f0ce", "filename": "src/test/ui/suggestions/issue-89064.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/152913767a365d963f2486fb88eff976501d7f72/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152913767a365d963f2486fb88eff976501d7f72/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.rs?ref=152913767a365d963f2486fb88eff976501d7f72", "patch": "@@ -27,4 +27,9 @@ fn main() {\n     let _ = A::<S>::foo::<S>();\n     //~^ ERROR\n     //~| HELP remove these generics\n+\n+    let _ = 42.into::<Option<_>>();\n+    //~^ ERROR\n+    //~| HELP remove these generics\n+    //~| HELP consider moving this generic argument\n }"}, {"sha": "8b2a388162806e86866c4da9657ffafad3b83024", "filename": "src/test/ui/suggestions/issue-89064.stderr", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/152913767a365d963f2486fb88eff976501d7f72/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/152913767a365d963f2486fb88eff976501d7f72/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.stderr?ref=152913767a365d963f2486fb88eff976501d7f72", "patch": "@@ -9,15 +9,15 @@ note: associated function defined here, with 0 generic parameters\n    |\n LL |     fn foo() {}\n    |        ^^^\n-help: remove these generics\n+help: consider moving this generic argument to the `A` trait, which takes up to 1 argument\n    |\n LL -     let _ = A::foo::<S>();\n-LL +     let _ = A::foo();\n+LL +     let _ = A::<S>::foo();\n    |\n-help: consider moving this generic argument to the `A` trait, which takes up to 1 argument\n+help: remove these generics\n    |\n LL -     let _ = A::foo::<S>();\n-LL +     let _ = A::<S>::foo();\n+LL +     let _ = A::foo();\n    |\n \n error[E0107]: this associated function takes 0 generic arguments but 2 generic arguments were supplied\n@@ -31,15 +31,15 @@ note: associated function defined here, with 0 generic parameters\n    |\n LL |     fn bar() {}\n    |        ^^^\n-help: remove these generics\n+help: consider moving these generic arguments to the `B` trait, which takes up to 2 arguments\n    |\n LL -     let _ = B::bar::<S, S>();\n-LL +     let _ = B::bar();\n+LL +     let _ = B::<S, S>::bar();\n    |\n-help: consider moving these generic arguments to the `B` trait, which takes up to 2 arguments\n+help: remove these generics\n    |\n LL -     let _ = B::bar::<S, S>();\n-LL +     let _ = B::<S, S>::bar();\n+LL +     let _ = B::bar();\n    |\n \n error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n@@ -56,6 +56,27 @@ note: associated function defined here, with 0 generic parameters\n LL |     fn foo() {}\n    |        ^^^\n \n-error: aborting due to 3 previous errors\n+error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/issue-89064.rs:31:16\n+   |\n+LL |     let _ = 42.into::<Option<_>>();\n+   |                ^^^^ expected 0 generic arguments\n+   |\n+note: associated function defined here, with 0 generic parameters\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn into(self) -> T;\n+   |        ^^^^\n+help: consider moving this generic argument to the `Into` trait, which takes up to 1 argument\n+   |\n+LL |     let _ = Into::<Option<_>>::into(42);\n+   |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+help: remove these generics\n+   |\n+LL -     let _ = 42.into::<Option<_>>();\n+LL +     let _ = 42.into();\n+   |\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}]}