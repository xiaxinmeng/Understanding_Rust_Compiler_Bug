{"sha": "4dad9077cc1c0ad00c23ab74a9bae4c0871e4822", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYWQ5MDc3Y2MxYzBhZDAwYzIzYWI3NGE5YmFlNGMwODcxZTQ4MjI=", "commit": {"author": {"name": "Ms2ger", "email": "ms2ger@gmail.com", "date": "2015-02-28T11:17:11Z"}, "committer": {"name": "Ms2ger", "email": "ms2ger@gmail.com", "date": "2015-02-28T11:17:11Z"}, "message": "Qualify uses of MethodContext variants.", "tree": {"sha": "769bf915f118fbeb0f1646483f8be78b030ded2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/769bf915f118fbeb0f1646483f8be78b030ded2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dad9077cc1c0ad00c23ab74a9bae4c0871e4822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dad9077cc1c0ad00c23ab74a9bae4c0871e4822", "html_url": "https://github.com/rust-lang/rust/commit/4dad9077cc1c0ad00c23ab74a9bae4c0871e4822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dad9077cc1c0ad00c23ab74a9bae4c0871e4822/comments", "author": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48aeaba9347a25b2e3848e0dcbc1d8f6b0076718", "url": "https://api.github.com/repos/rust-lang/rust/commits/48aeaba9347a25b2e3848e0dcbc1d8f6b0076718", "html_url": "https://github.com/rust-lang/rust/commit/48aeaba9347a25b2e3848e0dcbc1d8f6b0076718"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "30e767f7da55c20f2dd7612fc5b75f6f7bb10fb4", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4dad9077cc1c0ad00c23ab74a9bae4c0871e4822/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dad9077cc1c0ad00c23ab74a9bae4c0871e4822/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=4dad9077cc1c0ad00c23ab74a9bae4c0871e4822", "patch": "@@ -28,8 +28,6 @@\n //! Use the former for unit-like structs and the latter for structs with\n //! a `pub fn new()`.\n \n-use self::MethodContext::*;\n-\n use metadata::{csearch, decoder};\n use middle::def::*;\n use middle::subst::Substs;\n@@ -870,22 +868,22 @@ fn method_context(cx: &Context, m: &ast::Method) -> MethodContext {\n             match md {\n                 ty::MethodTraitItem(md) => {\n                     match md.container {\n-                        ty::TraitContainer(..) => TraitDefaultImpl,\n+                        ty::TraitContainer(..) => MethodContext::TraitDefaultImpl,\n                         ty::ImplContainer(cid) => {\n                             match ty::impl_trait_ref(cx.tcx, cid) {\n-                                Some(..) => TraitImpl,\n-                                None => PlainImpl\n+                                Some(..) => MethodContext::TraitImpl,\n+                                None => MethodContext::PlainImpl\n                             }\n                         }\n                     }\n                 }\n                 ty::TypeTraitItem(typedef) => {\n                     match typedef.container {\n-                        ty::TraitContainer(..) => TraitDefaultImpl,\n+                        ty::TraitContainer(..) => MethodContext::TraitDefaultImpl,\n                         ty::ImplContainer(cid) => {\n                             match ty::impl_trait_ref(cx.tcx, cid) {\n-                                Some(..) => TraitImpl,\n-                                None => PlainImpl\n+                                Some(..) => MethodContext::TraitImpl,\n+                                None => MethodContext::PlainImpl\n                             }\n                         }\n                     }\n@@ -979,9 +977,9 @@ impl LintPass for NonSnakeCase {\n                 _: &ast::Block, span: Span, _: ast::NodeId) {\n         match fk {\n             visit::FkMethod(ident, _, m) => match method_context(cx, m) {\n-                PlainImpl\n+                MethodContext::PlainImpl\n                     => self.check_snake_case(cx, \"method\", ident, span),\n-                TraitDefaultImpl\n+                MethodContext::TraitDefaultImpl\n                     => self.check_snake_case(cx, \"trait method\", ident, span),\n                 _ => (),\n             },\n@@ -1563,7 +1561,7 @@ impl LintPass for MissingDoc {\n             _: &ast::Block, _: Span, _: ast::NodeId) {\n         if let visit::FkMethod(_, _, m) = fk {\n             // If the method is an impl for a trait, don't doc.\n-            if method_context(cx, m) == TraitImpl { return; }\n+            if method_context(cx, m) == MethodContext::TraitImpl { return; }\n \n             // Otherwise, doc according to privacy. This will also check\n             // doc for default methods defined on traits."}]}