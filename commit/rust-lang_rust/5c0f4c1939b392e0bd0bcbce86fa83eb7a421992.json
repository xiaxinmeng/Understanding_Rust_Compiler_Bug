{"sha": "5c0f4c1939b392e0bd0bcbce86fa83eb7a421992", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMGY0YzE5MzliMzkyZTBiZDBiY2JjZTg2ZmE4M2ViN2E0MjE5OTI=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-14T00:51:24Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-14T02:14:40Z"}, "message": "Add more commentary about ExtFmt", "tree": {"sha": "9d88f7766e9b3526ffccb2a38c06acbcd38e009f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d88f7766e9b3526ffccb2a38c06acbcd38e009f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c0f4c1939b392e0bd0bcbce86fa83eb7a421992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0f4c1939b392e0bd0bcbce86fa83eb7a421992", "html_url": "https://github.com/rust-lang/rust/commit/5c0f4c1939b392e0bd0bcbce86fa83eb7a421992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c0f4c1939b392e0bd0bcbce86fa83eb7a421992/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4844e1c08a0f87f8c2bf4ba752630e1af0794a63", "url": "https://api.github.com/repos/rust-lang/rust/commits/4844e1c08a0f87f8c2bf4ba752630e1af0794a63", "html_url": "https://github.com/rust-lang/rust/commit/4844e1c08a0f87f8c2bf4ba752630e1af0794a63"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "54174dd3d1b8938f09d24316d77022c1cdda477c", "filename": "src/comp/front/extfmt.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5c0f4c1939b392e0bd0bcbce86fa83eb7a421992/src%2Fcomp%2Ffront%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0f4c1939b392e0bd0bcbce86fa83eb7a421992/src%2Fcomp%2Ffront%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextfmt.rs?ref=5c0f4c1939b392e0bd0bcbce86fa83eb7a421992", "patch": "@@ -1,16 +1,7 @@\n-/* The 'fmt' extension is modeled on the posix printf system.\n- *\n- * A posix conversion ostensibly looks like this:\n- *\n- * %[parameter][flags][width][.precision][length]type\n- *\n- * Given the different numeric type bestiary we have, we omit the 'length'\n- * parameter and support slightly different conversions for 'type':\n- *\n- * %[parameter][flags][width][.precision]type\n- *\n- * we also only support translating-to-rust a tiny subset of the possible\n- * combinations at the moment.\n+/*\n+ * The compiler code necessary to support the #fmt extension.  Eventually this\n+ * should all get sucked into either the standard library ExtFmt module or the\n+ * compiler syntax extension plugin interface.\n  */\n \n import util.common;\n@@ -53,7 +44,7 @@ import std.ExtFmt.CT.parse_fmt_string;\n \n export expand_syntax_ext;\n \n-// TODO: Need to thread parser through here to handle errors correctly\n+// FIXME: Need to thread parser through here to handle errors correctly\n fn expand_syntax_ext(vec[@ast.expr] args,\n                      option.t[@ast.expr] body) -> @ast.expr {\n \n@@ -148,6 +139,8 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n     }\n \n     fn make_path_vec(str ident) -> vec[str] {\n+        // FIXME: #fmt can't currently be used from within std\n+        // because we're explicitly referencing the 'std' crate here\n         ret vec(\"std\", \"ExtFmt\", \"RT\", ident);\n     }\n "}, {"sha": "da32568af52ff817d82f582dce15acf096f1203e", "filename": "src/lib/ExtFmt.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5c0f4c1939b392e0bd0bcbce86fa83eb7a421992/src%2Flib%2FExtFmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0f4c1939b392e0bd0bcbce86fa83eb7a421992/src%2Flib%2FExtFmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FExtFmt.rs?ref=5c0f4c1939b392e0bd0bcbce86fa83eb7a421992", "patch": "@@ -1,6 +1,32 @@\n+/* The 'fmt' extension is modeled on the posix printf system.\n+ *\n+ * A posix conversion ostensibly looks like this:\n+ *\n+ * %[parameter][flags][width][.precision][length]type\n+ *\n+ * Given the different numeric type bestiary we have, we omit the 'length'\n+ * parameter and support slightly different conversions for 'type':\n+ *\n+ * %[parameter][flags][width][.precision]type\n+ *\n+ * we also only support translating-to-rust a tiny subset of the possible\n+ * combinations at the moment.\n+ */\n+\n import option.none;\n import option.some;\n \n+/*\n+ * We have a CT (compile-time) module that parses format strings into a\n+ * sequence of conversions. From those conversions AST fragments are built\n+ * that call into properly-typed functions in the RT (run-time) module.  Each\n+ * of those run-time conversion functions accepts another conversion\n+ * description that specifies how to format its output.\n+ *\n+ * The building of the AST is currently done in a module inside the compiler,\n+ * but should migrate over here as the plugin interface is defined.\n+ */\n+\n // Functions used by the fmt extension at compile time\n mod CT {\n     tag signedness {\n@@ -262,7 +288,10 @@ mod CT {\n     }\n }\n \n-// Functions used by the fmt extension at runtime\n+// Functions used by the fmt extension at runtime. For now there are a lot of\n+// decisions made a runtime. If it proves worthwhile then some of these\n+// conditions can be evaluated at compile-time. For now though it's cleaner to\n+// implement it this way, I think.\n mod RT {\n \n     tag ty {"}]}