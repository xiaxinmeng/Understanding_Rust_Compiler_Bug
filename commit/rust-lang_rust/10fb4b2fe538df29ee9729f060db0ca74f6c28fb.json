{"sha": "10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZmI0YjJmZTUzOGRmMjllZTk3MjlmMDYwZGIwY2E3NGY2YzI4ZmI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-10T16:23:32Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-30T17:54:04Z"}, "message": "Restrict access to crate_name.\n\nAlso remove original_crate_name, which had the exact same implementation", "tree": {"sha": "ef42f89da0c06fceabdce688e1da49e23899ac44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef42f89da0c06fceabdce688e1da49e23899ac44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "html_url": "https://github.com/rust-lang/rust/commit/10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d9f96ab275af964b6c618f6a3bc3cd163b34d23", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9f96ab275af964b6c618f6a3bc3cd163b34d23", "html_url": "https://github.com/rust-lang/rust/commit/5d9f96ab275af964b6c618f6a3bc3cd163b34d23"}], "stats": {"total": 53, "additions": 23, "deletions": 30}, "files": [{"sha": "fb762d2deba7cbea8ddcf38d3aed09608b98a588", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -524,7 +524,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n \n             fn path_crate(self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n-                Ok(vec![self.tcx.original_crate_name(cnum).to_string()])\n+                Ok(vec![self.tcx.crate_name(cnum).to_string()])\n             }\n             fn path_qualified(\n                 self,"}, {"sha": "862f8374d30d8ffeaa82c0ed0d66f37861611dbc", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -922,7 +922,7 @@ impl<'tcx> LateContext<'tcx> {\n             }\n \n             fn path_crate(self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n-                Ok(vec![self.tcx.original_crate_name(cnum)])\n+                Ok(vec![self.tcx.crate_name(cnum)])\n             }\n \n             fn path_qualified("}, {"sha": "67925537aa5cb98236879c981c2b67853275fb7b", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -187,7 +187,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     foreign_modules => { cdata.get_foreign_modules(tcx) }\n     crate_hash => { cdata.root.hash }\n     crate_host_hash => { cdata.host_hash }\n-    original_crate_name => { cdata.root.name }\n+    crate_name => { cdata.root.name }\n \n     extra_filename => { cdata.root.extra_filename.clone() }\n \n@@ -204,7 +204,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         let r = *cdata.dep_kind.lock();\n         r\n     }\n-    crate_name => { cdata.root.name }\n     item_children => {\n         let mut result = SmallVec::<[_; 8]>::new();\n         cdata.each_child_of_item(def_id.index, |child| result.push(child), tcx.sess);"}, {"sha": "2fd9a46cf428dff7a84e6209c1272c20bea0572e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -1673,7 +1673,7 @@ impl EncodeContext<'a, 'tcx> {\n             .iter()\n             .map(|&cnum| {\n                 let dep = CrateDep {\n-                    name: self.tcx.original_crate_name(cnum),\n+                    name: self.tcx.crate_name(cnum),\n                     hash: self.tcx.crate_hash(cnum),\n                     host_hash: self.tcx.crate_host_hash(cnum),\n                     kind: self.tcx.dep_kind(cnum),"}, {"sha": "aa54d1ae7b9d118426d9702dac6384725e0b50c4", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -285,7 +285,7 @@ pub type DepNode = rustc_query_system::dep_graph::DepNode<DepKind>;\n // required that their size stay the same, but we don't want to change\n // it inadvertently. This assert just ensures we're aware of any change.\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-static_assert_size!(DepNode, 18);\n+static_assert_size!(DepNode, 17);\n \n #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n static_assert_size!(DepNode, 24);"}, {"sha": "5ea78e087f8451c34d6503dc45060f4f93bdfc46", "filename": "compiler/rustc_middle/src/middle/exported_symbols.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> ExportedSymbol<'tcx> {\n pub fn metadata_symbol_name(tcx: TyCtxt<'_>) -> String {\n     format!(\n         \"rust_metadata_{}_{:08x}\",\n-        tcx.original_crate_name(LOCAL_CRATE),\n+        tcx.crate_name(LOCAL_CRATE),\n         tcx.sess.local_stable_crate_id().to_u64(),\n     )\n }"}, {"sha": "9bf6990691123115b87d24d37f8d951e1c835120", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -1252,10 +1252,6 @@ rustc_queries! {\n         eval_always\n         desc { \"looking up the hash of a host version of a crate\" }\n     }\n-    query original_crate_name(_: CrateNum) -> Symbol {\n-        eval_always\n-        desc { \"looking up the original name a crate\" }\n-    }\n     query extra_filename(_: CrateNum) -> String {\n         eval_always\n         desc { \"looking up the extra filename for a crate\" }"}, {"sha": "f71158b510fed0e65170e33adfbe89523aa754d7", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -985,7 +985,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     /// The definite name of the current crate after taking into account\n     /// attributes, commandline parameters, etc.\n-    pub crate_name: Symbol,\n+    crate_name: Symbol,\n \n     /// Data layout specification for the current target.\n     pub data_layout: TargetDataLayout,"}, {"sha": "37f2f36a4032f70911cb22cc2b60abffe90e4ee6", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -1619,7 +1619,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     fn item_name_from_def_id(self, def_id: DefId) -> Option<Symbol> {\n         if def_id.index == CRATE_DEF_INDEX {\n-            Some(self.original_crate_name(def_id.krate))\n+            Some(self.crate_name(def_id.krate))\n         } else {\n             let def_key = self.def_key(def_id);\n             match def_key.disambiguated_data.data {"}, {"sha": "f48d7819fe05691f46c66a9020f016910f62cdd5", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -452,7 +452,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             // Re-exported `extern crate` (#43189).\n             DefPathData::CrateRoot => {\n-                data = DefPathData::TypeNs(self.tcx().original_crate_name(def_id.krate));\n+                data = DefPathData::TypeNs(self.tcx().crate_name(def_id.krate));\n             }\n             _ => {}\n         }"}, {"sha": "756987fd5bc550c2926b1265113db909222dac72", "filename": "compiler/rustc_mir/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -88,7 +88,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n     }\n \n     fn path_crate(mut self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n-        self.path.push_str(&self.tcx.original_crate_name(cnum).as_str());\n+        self.path.push_str(&self.tcx.crate_name(cnum).as_str());\n         Ok(self)\n     }\n "}, {"sha": "95edc1e93a538ee093b0c19465be2c4489ff7180", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -61,7 +61,7 @@ impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n \n         match def_key.disambiguated_data.data {\n             DefPathData::CrateRoot => {\n-                crate_name = self.tcx.original_crate_name(def_id.krate).as_str();\n+                crate_name = self.tcx.crate_name(def_id.krate).as_str();\n                 name = &*crate_name;\n                 dis = \"\";\n                 end_index = 3;"}, {"sha": "0c64fe6ea60a9249cbce6f5c1c98d30d77a20ab3", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -254,7 +254,7 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n     }\n \n     fn path_crate(mut self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n-        self.write_str(&self.tcx.original_crate_name(cnum).as_str())?;\n+        self.write_str(&self.tcx.crate_name(cnum).as_str())?;\n         Ok(self)\n     }\n     fn path_qualified("}, {"sha": "e7da56ed0f3c7459ecb1a7b5f1952e14085b17eb", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -594,7 +594,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         self.push(\"C\");\n         let stable_crate_id = self.tcx.def_path_hash(cnum.as_def_id()).stable_crate_id();\n         self.push_disambiguator(stable_crate_id.to_u64());\n-        let name = self.tcx.original_crate_name(cnum).as_str();\n+        let name = self.tcx.crate_name(cnum).as_str();\n         self.push_ident(&name);\n         Ok(self)\n     }"}, {"sha": "ac2e0ebae32732cbe778c6e4896ffd30b5987a4c", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -6,6 +6,7 @@ use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::{self, TraitRef, Ty, TyCtxt, WithConstness};\n use rustc_middle::ty::{ToPredicate, TypeFoldable};\n use rustc_session::DiagnosticMessageId;\n+use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::Span;\n \n #[derive(Copy, Clone, Debug)]\n@@ -231,7 +232,8 @@ pub fn report_autoderef_recursion_limit_error<'tcx>(tcx: TyCtxt<'tcx>, span: Spa\n         .span_label(span, \"deref recursion limit reached\")\n         .help(&format!(\n             \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate (`{}`)\",\n-            suggested_limit, tcx.crate_name,\n+            suggested_limit,\n+            tcx.crate_name(LOCAL_CRATE),\n         ))\n         .emit();\n     }"}, {"sha": "5c35b515f3d027f9ba60db1e4ab0a8e447699080", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -21,6 +21,7 @@ use rustc_middle::ty::{\n     Infer, InferTy, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n use rustc_middle::ty::{TypeAndMut, TypeckResults};\n+use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n@@ -2313,7 +2314,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let suggested_limit = current_limit * 2;\n         err.help(&format!(\n             \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate (`{}`)\",\n-            suggested_limit, self.tcx.crate_name,\n+            suggested_limit,\n+            self.tcx.crate_name(LOCAL_CRATE),\n         ));\n     }\n "}, {"sha": "07a3132568b8d26c2a1cafb464535b637049b923", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -1,12 +1,11 @@\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::hir::map as hir_map;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{\n     self, Binder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt, WithConstness,\n };\n-use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n \n@@ -388,11 +387,6 @@ fn param_env_reveal_all_normalized(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamE\n     tcx.param_env(def_id).with_reveal_all_normalized(tcx)\n }\n \n-fn original_crate_name(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Symbol {\n-    assert_eq!(crate_num, LOCAL_CRATE);\n-    tcx.crate_name\n-}\n-\n fn instance_def_size_estimate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance_def: ty::InstanceDef<'tcx>,\n@@ -538,7 +532,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         param_env,\n         param_env_reveal_all_normalized,\n         trait_of_item,\n-        original_crate_name,\n         instance_def_size_estimate,\n         issue33140_self_ty,\n         impl_defaultness,"}, {"sha": "111827aacdff8b64a40d0eab96eb501d6c5691f8", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -527,7 +527,7 @@ fn build_static(cx: &mut DocContext<'_>, did: DefId, mutable: bool) -> clean::St\n }\n \n fn build_macro(cx: &mut DocContext<'_>, did: DefId, name: Symbol) -> clean::ItemKind {\n-    let imported_from = cx.tcx.original_crate_name(did.krate);\n+    let imported_from = cx.tcx.crate_name(did.krate);\n     match cx.enter_resolver(|r| r.cstore().load_macro_untracked(did, cx.sess())) {\n         LoadedMacro::MacroDef(def, _) => {\n             let matchers: Vec<Span> = if let ast::ItemKind::MacroDef(ref def) = def.kind {"}, {"sha": "b563c4f479935b2c70edad4ff5ab2938cfcf9e79", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb4b2fe538df29ee9729f060db0ca74f6c28fb/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "patch": "@@ -9,6 +9,7 @@ use rustc_hir::Node;\n use rustc_middle::middle::privacy::AccessLevel;\n use rustc_middle::ty::TyCtxt;\n use rustc_span;\n+use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n@@ -76,7 +77,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             &Spanned { span, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n             &krate.item,\n-            self.cx.tcx.crate_name,\n+            self.cx.tcx.crate_name(LOCAL_CRATE),\n         );\n         // Attach the crate's exported macros to the top-level module.\n         // In the case of macros 2.0 (`pub macro`), and for built-in `derive`s or attributes as"}]}