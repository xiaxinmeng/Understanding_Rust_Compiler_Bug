{"sha": "a65d3f5b98cc94f0a759fbf1a08be9aee0f97883", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NWQzZjViOThjYzk0ZjBhNzU5ZmJmMWEwOGJlOWFlZTBmOTc4ODM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-08T03:01:05Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-30T15:36:31Z"}, "message": "core: add the `IntoIterator` trait", "tree": {"sha": "727f2112924bbe042cb6a1ea059d163044ace818", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/727f2112924bbe042cb6a1ea059d163044ace818"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883", "html_url": "https://github.com/rust-lang/rust/commit/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/comments", "author": null, "committer": null, "parents": [{"sha": "1a51eb9cca3ae5f815825096de4dfbdc9267f735", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a51eb9cca3ae5f815825096de4dfbdc9267f735", "html_url": "https://github.com/rust-lang/rust/commit/1a51eb9cca3ae5f815825096de4dfbdc9267f735"}], "stats": {"total": 245, "additions": 236, "deletions": 9}, "files": [{"sha": "fb4c326e10a1b5c8cd21771d1090bd0d9a636082", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=a65d3f5b98cc94f0a759fbf1a08be9aee0f97883", "patch": "@@ -153,7 +153,7 @@\n use core::prelude::*;\n \n use core::default::Default;\n-use core::iter::FromIterator;\n+use core::iter::{FromIterator, IntoIterator};\n use core::mem::{zeroed, replace, swap};\n use core::ptr;\n \n@@ -655,6 +655,22 @@ impl<T: Ord> FromIterator<T> for BinaryHeap<T> {\n     }\n }\n \n+impl<T> IntoIterator for BinaryHeap<T> {\n+    type Iter = IntoIter<T>;\n+\n+    fn into_iter(self) -> IntoIter<T> {\n+        self.into_iter()\n+    }\n+}\n+\n+impl<'a, T> IntoIterator for &'a BinaryHeap<T> where T: Ord {\n+    type Iter = Iter<'a, T>;\n+\n+    fn into_iter(self) -> Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Extend<T> for BinaryHeap<T> {\n     fn extend<Iter: Iterator<Item=T>>(&mut self, mut iter: Iter) {"}, {"sha": "d676cfca9294e6ab2a0f07a03c94aeed28a36055", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=a65d3f5b98cc94f0a759fbf1a08be9aee0f97883", "patch": "@@ -89,7 +89,7 @@ use core::fmt;\n use core::hash;\n use core::iter::RandomAccessIterator;\n use core::iter::{Chain, Enumerate, Repeat, Skip, Take, repeat, Cloned};\n-use core::iter::{self, FromIterator};\n+use core::iter::{self, FromIterator, IntoIterator};\n use core::num::Int;\n use core::ops::Index;\n use core::slice;\n@@ -1070,6 +1070,14 @@ impl<'a> RandomAccessIterator for Iter<'a> {\n     }\n }\n \n+impl<'a> IntoIterator for &'a Bitv {\n+    type Iter = Iter<'a>;\n+\n+    fn into_iter(self) -> Iter<'a> {\n+        self.iter()\n+    }\n+}\n+\n /// An implementation of a set using a bit vector as an underlying\n /// representation for holding unsigned numerical elements.\n ///\n@@ -1873,6 +1881,13 @@ impl<'a> Iterator for SymmetricDifference<'a> {\n     #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.0.size_hint() }\n }\n \n+impl<'a> IntoIterator for &'a BitvSet {\n+    type Iter = SetIter<'a>;\n+\n+    fn into_iter(self) -> SetIter<'a> {\n+        self.iter()\n+    }\n+}\n \n #[cfg(test)]\n mod tests {"}, {"sha": "27783ff941a4152ea6fb4afa4af162642a9bfdc1", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=a65d3f5b98cc94f0a759fbf1a08be9aee0f97883", "patch": "@@ -24,7 +24,7 @@ use core::cmp::Ordering;\n use core::default::Default;\n use core::fmt::Debug;\n use core::hash::{Hash, Hasher};\n-use core::iter::{Map, FromIterator};\n+use core::iter::{Map, FromIterator, IntoIterator};\n use core::ops::{Index, IndexMut};\n use core::{iter, fmt, mem};\n use Bound::{self, Included, Excluded, Unbounded};\n@@ -478,6 +478,30 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     }\n }\n \n+impl<K, V> IntoIterator for BTreeMap<K, V> {\n+    type Iter = IntoIter<K, V>;\n+\n+    fn into_iter(self) -> IntoIter<K, V> {\n+        self.into_iter()\n+    }\n+}\n+\n+impl<'a, K, V> IntoIterator for &'a BTreeMap<K, V> {\n+    type Iter = Iter<'a, K, V>;\n+\n+    fn into_iter(self) -> Iter<'a, K, V> {\n+        self.iter()\n+    }\n+}\n+\n+impl<'a, K, V> IntoIterator for &'a mut BTreeMap<K, V> {\n+    type Iter = IterMut<'a, K, V>;\n+\n+    fn into_iter(mut self) -> IterMut<'a, K, V> {\n+        self.iter_mut()\n+    }\n+}\n+\n /// A helper enum useful for deciding whether to continue a loop since we can't\n /// return from a closure\n enum Continuation<A, B> {"}, {"sha": "e6d7d2a37eb78a435fc539e3fa4b7abe7e35fb44", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=a65d3f5b98cc94f0a759fbf1a08be9aee0f97883", "patch": "@@ -18,7 +18,7 @@ use core::cmp::Ordering::{self, Less, Greater, Equal};\n use core::default::Default;\n use core::fmt::Debug;\n use core::fmt;\n-use core::iter::{Peekable, Map, FromIterator};\n+use core::iter::{Peekable, Map, FromIterator, IntoIterator};\n use core::ops::{BitOr, BitAnd, BitXor, Sub};\n \n use btree_map::{BTreeMap, Keys};\n@@ -480,6 +480,22 @@ impl<T: Ord> FromIterator<T> for BTreeSet<T> {\n     }\n }\n \n+impl<T> IntoIterator for BTreeSet<T> {\n+    type Iter = IntoIter<T>;\n+\n+    fn into_iter(self) -> IntoIter<T> {\n+        self.into_iter()\n+    }\n+}\n+\n+impl<'a, T> IntoIterator for &'a BTreeSet<T> {\n+    type Iter = Iter<'a, T>;\n+\n+    fn into_iter(self) -> Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Extend<T> for BTreeSet<T> {\n     #[inline]"}, {"sha": "48bf820e6f6a233991a3e26c724012a41ad2a638", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=a65d3f5b98cc94f0a759fbf1a08be9aee0f97883", "patch": "@@ -28,7 +28,7 @@ use core::cmp::Ordering;\n use core::default::Default;\n use core::fmt;\n use core::hash::{Writer, Hasher, Hash};\n-use core::iter::{self, FromIterator};\n+use core::iter::{self, FromIterator, IntoIterator};\n use core::mem;\n use core::ptr;\n \n@@ -830,6 +830,30 @@ impl<A> FromIterator<A> for DList<A> {\n     }\n }\n \n+impl<T> IntoIterator for DList<T> {\n+    type Iter = IntoIter<T>;\n+\n+    fn into_iter(self) -> IntoIter<T> {\n+        self.into_iter()\n+    }\n+}\n+\n+impl<'a, T> IntoIterator for &'a DList<T> {\n+    type Iter = Iter<'a, T>;\n+\n+    fn into_iter(self) -> Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n+impl<'a, T> IntoIterator for &'a mut DList<T> {\n+    type Iter = IterMut<'a, T>;\n+\n+    fn into_iter(mut self) -> IterMut<'a, T> {\n+        self.iter_mut()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A> Extend<A> for DList<A> {\n     fn extend<T: Iterator<Item=A>>(&mut self, mut iterator: T) {"}, {"sha": "a9e64a5c282ea4e8bfdb3cd69276f74a89742426", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=a65d3f5b98cc94f0a759fbf1a08be9aee0f97883", "patch": "@@ -16,7 +16,7 @@\n use core::prelude::*;\n use core::fmt;\n use core::num::Int;\n-use core::iter::FromIterator;\n+use core::iter::{FromIterator, IntoIterator};\n use core::ops::{Sub, BitOr, BitAnd, BitXor};\n \n // FIXME(contentions): implement union family of methods? (general design may be wrong here)\n@@ -256,6 +256,14 @@ impl<E:CLike> FromIterator<E> for EnumSet<E> {\n     }\n }\n \n+impl<'a, E> IntoIterator for &'a EnumSet<E> where E: CLike {\n+    type Iter = Iter<E>;\n+\n+    fn into_iter(self) -> Iter<E> {\n+        self.iter()\n+    }\n+}\n+\n impl<E:CLike> Extend<E> for EnumSet<E> {\n     fn extend<I: Iterator<Item=E>>(&mut self, mut iterator: I) {\n         for element in iterator {"}, {"sha": "5b5e3be12e35fb5688ca3d2d03aeb2e7cf863c99", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=a65d3f5b98cc94f0a759fbf1a08be9aee0f97883", "patch": "@@ -19,7 +19,7 @@ use core::prelude::*;\n use core::cmp::Ordering;\n use core::default::Default;\n use core::fmt;\n-use core::iter::{self, repeat, FromIterator, RandomAccessIterator};\n+use core::iter::{self, repeat, FromIterator, IntoIterator, RandomAccessIterator};\n use core::marker;\n use core::mem;\n use core::num::{Int, UnsignedInt};\n@@ -1609,6 +1609,30 @@ impl<A> FromIterator<A> for RingBuf<A> {\n     }\n }\n \n+impl<T> IntoIterator for RingBuf<T> {\n+    type Iter = IntoIter<T>;\n+\n+    fn into_iter(self) -> IntoIter<T> {\n+        self.into_iter()\n+    }\n+}\n+\n+impl<'a, T> IntoIterator for &'a RingBuf<T> {\n+    type Iter = Iter<'a, T>;\n+\n+    fn into_iter(self) -> Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n+impl<'a, T> IntoIterator for &'a mut RingBuf<T> {\n+    type Iter = IterMut<'a, T>;\n+\n+    fn into_iter(mut self) -> IterMut<'a, T> {\n+        self.iter_mut()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A> Extend<A> for RingBuf<A> {\n     fn extend<T: Iterator<Item=A>>(&mut self, mut iterator: T) {"}, {"sha": "ac6d7936f280840cf07aec83853e86ffaf0db212", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=a65d3f5b98cc94f0a759fbf1a08be9aee0f97883", "patch": "@@ -56,7 +56,7 @@ use core::cmp::{Ordering};\n use core::default::Default;\n use core::fmt;\n use core::hash::{self, Hash};\n-use core::iter::{repeat, FromIterator};\n+use core::iter::{repeat, FromIterator, IntoIterator};\n use core::marker::{ContravariantLifetime, InvariantType};\n use core::mem;\n use core::nonzero::NonZero;\n@@ -65,6 +65,7 @@ use core::ops::{Index, IndexMut, Deref, Add};\n use core::ops;\n use core::ptr;\n use core::raw::Slice as RawSlice;\n+use core::slice;\n use core::uint;\n \n /// A growable list type, written `Vec<T>` but pronounced 'vector.'\n@@ -1404,6 +1405,30 @@ impl<T> FromIterator<T> for Vec<T> {\n     }\n }\n \n+impl<T> IntoIterator for Vec<T> {\n+    type Iter = IntoIter<T>;\n+\n+    fn into_iter(self) -> IntoIter<T> {\n+        self.into_iter()\n+    }\n+}\n+\n+impl<'a, T> IntoIterator for &'a Vec<T> {\n+    type Iter = slice::Iter<'a, T>;\n+\n+    fn into_iter(self) -> slice::Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n+impl<'a, T> IntoIterator for &'a mut Vec<T> {\n+    type Iter = slice::IterMut<'a, T>;\n+\n+    fn into_iter(mut self) -> slice::IterMut<'a, T> {\n+        self.iter_mut()\n+    }\n+}\n+\n #[unstable(feature = \"collections\", reason = \"waiting on Extend stability\")]\n impl<T> Extend<T> for Vec<T> {\n     #[inline]"}, {"sha": "2846414bb9accd8df3c5fa838e2b6961c2fd873b", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=a65d3f5b98cc94f0a759fbf1a08be9aee0f97883", "patch": "@@ -19,7 +19,7 @@ use core::cmp::Ordering;\n use core::default::Default;\n use core::fmt;\n use core::hash::{Hash, Writer, Hasher};\n-use core::iter::{Enumerate, FilterMap, Map, FromIterator};\n+use core::iter::{Enumerate, FilterMap, Map, FromIterator, IntoIterator};\n use core::iter;\n use core::mem::replace;\n use core::ops::{Index, IndexMut};\n@@ -536,6 +536,30 @@ impl<V> FromIterator<(uint, V)> for VecMap<V> {\n     }\n }\n \n+impl<T> IntoIterator for VecMap<T> {\n+    type Iter = IntoIter<T>;\n+\n+    fn into_iter(self) -> IntoIter<T> {\n+        self.into_iter()\n+    }\n+}\n+\n+impl<'a, T> IntoIterator for &'a VecMap<T> {\n+    type Iter = Iter<'a, T>;\n+\n+    fn into_iter(self) -> Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n+impl<'a, T> IntoIterator for &'a mut VecMap<T> {\n+    type Iter = IterMut<'a, T>;\n+\n+    fn into_iter(mut self) -> IterMut<'a, T> {\n+        self.iter_mut()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<V> Extend<(uint, V)> for VecMap<V> {\n     fn extend<Iter: Iterator<Item=(uint, V)>>(&mut self, mut iter: Iter) {"}, {"sha": "ec3d9783255cb77a13c09e24d45fc606bb7c57d9", "filename": "src/libcore/array.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=a65d3f5b98cc94f0a759fbf1a08be9aee0f97883", "patch": "@@ -18,12 +18,14 @@ use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use fmt;\n use hash::{Hash, Hasher, self};\n+use iter::IntoIterator;\n use marker::Copy;\n #[cfg(stage0)]\n use ops::{Deref, FullRange};\n #[cfg(not(stage0))]\n use ops::Deref;\n use option::Option;\n+use slice::{Iter, IterMut, SliceExt};\n \n // macro for implementing n-ary tuple functions and operations\n macro_rules! array_impls {\n@@ -49,6 +51,22 @@ macro_rules! array_impls {\n                 }\n             }\n \n+            impl<'a, T> IntoIterator for &'a [T; $N] {\n+                type Iter = Iter<'a, T>;\n+\n+                fn into_iter(self) -> Iter<'a, T> {\n+                    self.iter()\n+                }\n+            }\n+\n+            impl<'a, T> IntoIterator for &'a mut [T; $N] {\n+                type Iter = IterMut<'a, T>;\n+\n+                fn into_iter(self) -> IterMut<'a, T> {\n+                    self.iter_mut()\n+                }\n+            }\n+\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<A, B> PartialEq<[B; $N]> for [A; $N] where A: PartialEq<B> {\n                 #[inline]"}, {"sha": "f9c6e0758e6e87b18403a7f870ddf7d63ca6d59f", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=a65d3f5b98cc94f0a759fbf1a08be9aee0f97883", "patch": "@@ -122,6 +122,23 @@ pub trait FromIterator<A> {\n     fn from_iter<T: Iterator<Item=A>>(iterator: T) -> Self;\n }\n \n+/// Conversion into an `Iterator`\n+#[unstable]\n+pub trait IntoIterator {\n+    type Iter: Iterator;\n+\n+    /// Consumes `Self` and returns an iterator over it\n+    fn into_iter(self) -> Self::Iter;\n+}\n+\n+impl<I> IntoIterator for I where I: Iterator {\n+    type Iter = I;\n+\n+    fn into_iter(self) -> I {\n+        self\n+    }\n+}\n+\n /// A type growable from an `Iterator` implementation\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Extend<A> {"}, {"sha": "11e3d196f73fac8545eb0cf8c3388c0a7bf00a38", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65d3f5b98cc94f0a759fbf1a08be9aee0f97883/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=a65d3f5b98cc94f0a759fbf1a08be9aee0f97883", "patch": "@@ -637,6 +637,22 @@ impl<'a, T> Default for &'a [T] {\n // Iterators\n //\n \n+impl<'a, T> IntoIterator for &'a [T] {\n+    type Iter = Iter<'a, T>;\n+\n+    fn into_iter(self) -> Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n+impl<'a, T> IntoIterator for &'a mut [T] {\n+    type Iter = IterMut<'a, T>;\n+\n+    fn into_iter(self) -> IterMut<'a, T> {\n+        self.iter_mut()\n+    }\n+}\n+\n // The shared definition of the `Iter` and `IterMut` iterators\n macro_rules! iterator {\n     (struct $name:ident -> $ptr:ty, $elem:ty) => {"}]}