{"sha": "5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "node_id": "C_kwDOAAsO6NoAKDViOGNmNDljNTE4MzNlZTVkMjdhZTJlOGUxNzkzMzdkYmI5ZjE0ZDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-06T05:48:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-06T05:48:11Z"}, "message": "Auto merge of #98206 - eggyal:align-to-chalk-folding-api, r=jackh726\n\nSplit TypeVisitable from TypeFoldable\n\nImpl of rust-lang/compiler-team#520 following MCP approval.\n\nr? `@ghost`", "tree": {"sha": "a088622340541cbdb4ca3528a3db1d972c1e886d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a088622340541cbdb4ca3528a3db1d972c1e886d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "html_url": "https://github.com/rust-lang/rust/commit/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f342bea9d19f14616c6559312552e6d0ee529cfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f342bea9d19f14616c6559312552e6d0ee529cfd", "html_url": "https://github.com/rust-lang/rust/commit/f342bea9d19f14616c6559312552e6d0ee529cfd"}, {"sha": "4f0a64736b94a84da4272867366b8679b585e603", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f0a64736b94a84da4272867366b8679b585e603", "html_url": "https://github.com/rust-lang/rust/commit/4f0a64736b94a84da4272867366b8679b585e603"}], "stats": {"total": 2787, "additions": 1481, "deletions": 1306}, "files": [{"sha": "5e9cec5c350c9953172a375fa2afd463c0b7c662", "filename": "compiler/rustc_borrowck/src/constraint_generation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -5,8 +5,8 @@ use rustc_middle::mir::{\n     BasicBlock, BasicBlockData, Body, Local, Location, Place, PlaceRef, ProjectionElem, Rvalue,\n     SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UserTypeProjection,\n };\n-use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::SubstsRef;\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, RegionVid, Ty};\n \n use crate::{\n@@ -163,7 +163,7 @@ impl<'cx, 'cg, 'tcx> ConstraintGeneration<'cx, 'cg, 'tcx> {\n     /// `location`.\n     fn add_regular_live_constraint<T>(&mut self, live_ty: T, location: Location)\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeVisitable<'tcx>,\n     {\n         debug!(\"add_regular_live_constraint(live_ty={:?}, location={:?})\", live_ty, location);\n "}, {"sha": "d0e0203bf8c44d0e918f941839f878272baedabc", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -19,7 +19,9 @@ use rustc_middle::mir::{\n };\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::traits::ObligationCauseCode;\n-use rustc_middle::ty::{self, subst::SubstsRef, RegionVid, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{\n+    self, subst::SubstsRef, RegionVid, Ty, TyCtxt, TypeFoldable, TypeVisitable,\n+};\n use rustc_span::Span;\n \n use crate::{"}, {"sha": "d129e8454265bdab3e19adafe2f7d4299295acac", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -2,7 +2,9 @@ use rustc_data_structures::vec_map::VecMap;\n use rustc_hir::def_id::DefId;\n use rustc_hir::OpaqueTyOrigin;\n use rustc_infer::infer::InferCtxt;\n-use rustc_middle::ty::{self, OpaqueHiddenType, OpaqueTypeKey, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{\n+    self, OpaqueHiddenType, OpaqueTypeKey, TyCtxt, TypeFoldable, TypeVisitable,\n+};\n use rustc_trait_selection::opaque_types::InferCtxtExt;\n \n use super::RegionInferenceContext;"}, {"sha": "3f9c0cecccc68c4dcb7e91f73aae146f1f0c8721", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -6,7 +6,7 @@ use rustc_infer::infer::region_constraints::{GenericKind, VerifyBound};\n use rustc_infer::infer::{self, InferCtxt, SubregionOrigin};\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::TypeFoldable;\n+use rustc_middle::ty::TypeVisitable;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::{Span, DUMMY_SP};\n "}, {"sha": "d4e61ec213b60236dc4adb501bdb143f211c91b5", "filename": "compiler/rustc_borrowck/src/type_check/liveness/trace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -3,7 +3,7 @@ use rustc_index::bit_set::HybridBitSet;\n use rustc_index::interval::IntervalSet;\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n use rustc_middle::mir::{BasicBlock, Body, ConstraintCategory, Local, Location};\n-use rustc_middle::ty::{Ty, TypeFoldable};\n+use rustc_middle::ty::{Ty, TypeVisitable};\n use rustc_trait_selection::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc_trait_selection::traits::query::type_op::outlives::DropckOutlives;\n use rustc_trait_selection::traits::query::type_op::{TypeOp, TypeOpOutput};\n@@ -477,7 +477,7 @@ impl<'tcx> LivenessContext<'_, '_, '_, 'tcx> {\n     /// points `live_at`.\n     fn add_use_live_facts_for(\n         &mut self,\n-        value: impl TypeFoldable<'tcx>,\n+        value: impl TypeVisitable<'tcx>,\n         live_at: &IntervalSet<PointIndex>,\n     ) {\n         debug!(\"add_use_live_facts_for(value={:?})\", value);\n@@ -542,7 +542,7 @@ impl<'tcx> LivenessContext<'_, '_, '_, 'tcx> {\n     fn make_all_regions_live(\n         elements: &RegionValueElements,\n         typeck: &mut TypeChecker<'_, 'tcx>,\n-        value: impl TypeFoldable<'tcx>,\n+        value: impl TypeVisitable<'tcx>,\n         live_at: &IntervalSet<PointIndex>,\n     ) {\n         debug!(\"make_all_regions_live(value={:?})\", value);"}, {"sha": "d71a4983a92c42823088636cafbbd251101052d9", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -27,8 +27,8 @@ use rustc_middle::mir::AssertKind;\n use rustc_middle::mir::*;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::cast::CastTy;\n-use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef, UserSubsts};\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{\n     self, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, OpaqueHiddenType,\n     OpaqueTypeKey, RegionVid, ToPredicate, Ty, TyCtxt, UserType, UserTypeAnnotationIndex,"}, {"sha": "be2d3108c5fa919c54386e5ee922931f67cb7973", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -79,7 +79,7 @@ mod prelude {\n     pub(crate) use rustc_middle::ty::layout::{self, LayoutOf, TyAndLayout};\n     pub(crate) use rustc_middle::ty::{\n         self, FloatTy, Instance, InstanceDef, IntTy, ParamEnv, Ty, TyCtxt, TypeAndMut,\n-        TypeFoldable, UintTy,\n+        TypeFoldable, TypeVisitable, UintTy,\n     };\n     pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx};\n "}, {"sha": "c1041125ecce7542ceace76b05ae01c8b9346a4f", "filename": "compiler/rustc_codegen_gcc/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcallee.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,6 +1,6 @@\n use gccjit::{FunctionType, RValue};\n use rustc_codegen_ssa::traits::BaseTypeMethods;\n-use rustc_middle::ty::{self, Instance, TypeFoldable};\n+use rustc_middle::ty::{self, Instance, TypeVisitable};\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt};\n \n use crate::abi::FnAbiGccExt;"}, {"sha": "9468a1ef4bbbbf66cff714810947e9e0db894275", "filename": "compiler/rustc_codegen_gcc/src/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_gcc%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_gcc%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fmono_item.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,7 +1,7 @@\n use rustc_codegen_ssa::traits::PreDefineMethods;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n-use rustc_middle::ty::{self, Instance, TypeFoldable};\n+use rustc_middle::ty::{self, Instance, TypeVisitable};\n use rustc_middle::ty::layout::{FnAbiOf, LayoutOf};\n use rustc_span::def_id::DefId;\n "}, {"sha": "524d10fb5e24d02e52829d96d0b5a970850d1c6e", "filename": "compiler/rustc_codegen_gcc/src/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_of.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -3,7 +3,7 @@ use std::fmt::Write;\n use gccjit::{Struct, Type};\n use crate::rustc_codegen_ssa::traits::{BaseTypeMethods, DerivedTypeMethods, LayoutTypeMethods};\n use rustc_middle::bug;\n-use rustc_middle::ty::{self, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TypeVisitable};\n use rustc_middle::ty::layout::{FnAbiOf, LayoutOf, TyAndLayout};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_target::abi::{self, Abi, F32, F64, FieldsShape, Int, Integer, Pointer, PointeeInfo, Size, TyAbiInterface, Variants};"}, {"sha": "72155d874a2572e6630cf3ec7e16c20f8e7049d2", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -13,7 +13,7 @@ use rustc_codegen_ssa::traits::*;\n use tracing::debug;\n \n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt};\n-use rustc_middle::ty::{self, Instance, TypeFoldable};\n+use rustc_middle::ty::{self, Instance, TypeVisitable};\n \n /// Codegens a reference to a fn/method item, monomorphizing and\n /// inlining as it goes."}, {"sha": "64ecbc82c560058a321d30ffd1dd742697f5b1f0", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -27,7 +27,7 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::mir;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, Instance, ParamEnv, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Instance, ParamEnv, Ty, TypeVisitable};\n use rustc_session::config::{self, DebugInfo};\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;"}, {"sha": "6e94284852f357970663599fbf08766576eef75c", "filename": "compiler/rustc_codegen_llvm/src/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n pub use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n use rustc_middle::ty::layout::{FnAbiOf, LayoutOf};\n-use rustc_middle::ty::{self, Instance, TypeFoldable};\n+use rustc_middle::ty::{self, Instance, TypeVisitable};\n use rustc_session::config::CrateType;\n use rustc_target::spec::RelocModel;\n use tracing::debug;"}, {"sha": "9f0e6c80b19a7f0108620d5fa07275f7dd90aaee", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -6,7 +6,7 @@ use rustc_codegen_ssa::traits::*;\n use rustc_middle::bug;\n use rustc_middle::ty::layout::{FnAbiOf, LayoutOf, TyAndLayout};\n use rustc_middle::ty::print::{with_no_trimmed_paths, with_no_visible_paths};\n-use rustc_middle::ty::{self, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TypeVisitable};\n use rustc_target::abi::{Abi, AddressSpace, Align, FieldsShape};\n use rustc_target::abi::{Int, Pointer, F32, F64};\n use rustc_target::abi::{PointeeInfo, Scalar, Size, TyAbiInterface, Variants};"}, {"sha": "f296a04dea16f143eee0cd82c2eb12eab7121239", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::mir::AssertKind;\n use rustc_middle::mir::{self, SwitchTargets};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_middle::ty::print::{with_no_trimmed_paths, with_no_visible_paths};\n-use rustc_middle::ty::{self, Instance, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Instance, Ty, TypeVisitable};\n use rustc_span::source_map::Span;\n use rustc_span::{sym, Symbol};\n use rustc_symbol_mangling::typeid_for_fnabi;"}, {"sha": "ec3f7a2156a4addc8822fee403210dd2902e0589", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -2,7 +2,7 @@ use crate::traits::*;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, TyAndLayout};\n-use rustc_middle::ty::{self, Instance, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Instance, Ty, TypeFoldable, TypeVisitable};\n use rustc_symbol_mangling::typeid_for_fnabi;\n use rustc_target::abi::call::{FnAbi, PassMode};\n "}, {"sha": "2bc521d5bbe0b8bca7c3ea812ee8f8d9bd38c0ba", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,5 +1,5 @@\n use rustc_middle::mir::interpret::InterpResult;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n use std::convert::TryInto;\n use std::ops::ControlFlow;\n \n@@ -10,7 +10,7 @@ use std::ops::ControlFlow;\n /// case these parameters are unused.\n pub(crate) fn ensure_monomorphic_enough<'tcx, T>(tcx: TyCtxt<'tcx>, ty: T) -> InterpResult<'tcx>\n where\n-    T: TypeFoldable<'tcx>,\n+    T: TypeVisitable<'tcx>,\n {\n     debug!(\"ensure_monomorphic_enough: ty={:?}\", ty);\n     if !ty.needs_subst() {"}, {"sha": "f87de4f6a08a4e58200a1f05a75ea8aec9705f99", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceC\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, InstanceDef, Ty, TyCtxt};\n-use rustc_middle::ty::{Binder, TraitPredicate, TraitRef, TypeFoldable};\n+use rustc_middle::ty::{Binder, TraitPredicate, TraitRef, TypeVisitable};\n use rustc_mir_dataflow::{self, Analysis};\n use rustc_span::{sym, Span, Symbol};\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;"}, {"sha": "6298fa7f062cb7de212393c25eea853bb4d0d5b0", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::mir::traversal::ReversePostorderIter;\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::{self, List, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, List, TyCtxt, TypeVisitable};\n use rustc_span::Span;\n \n use rustc_index::vec::{Idx, IndexVec};"}, {"sha": "7b9c6329d326ed6760aec5652e0b2f608fe91671", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::mir::{\n     Statement, StatementKind, Terminator, TerminatorKind, UnOp, START_BLOCK,\n };\n use rustc_middle::ty::fold::BottomUpFolder;\n-use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n use rustc_mir_dataflow::storage::always_live_locals;\n use rustc_mir_dataflow::{Analysis, ResultsCursor};"}, {"sha": "8bf1de34a9b5cace73b66a13e3f888ebafc6fbb9", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -37,7 +37,7 @@ use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, InferConst, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, InferConst, ToPredicate, Ty, TyCtxt, TypeVisitable};\n use rustc_middle::ty::{IntType, UintType};\n use rustc_span::{Span, DUMMY_SP};\n "}, {"sha": "665669be2dd5682fbf6883dfb83210ca57cf4914", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -68,7 +68,7 @@ use rustc_middle::dep_graph::DepContext;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{\n     self, error::TypeError, Binder, List, Region, Subst, Ty, TyCtxt, TypeFoldable,\n-    TypeSuperFoldable,\n+    TypeSuperVisitable, TypeVisitable,\n };\n use rustc_span::{sym, symbol::kw, BytePos, DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n@@ -1540,7 +1540,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n         }\n \n-        impl<'tcx> ty::fold::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n+        impl<'tcx> ty::visit::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if let Some((kind, def_id)) = TyCategory::from_ty(self.tcx, t) {\n                     let span = self.tcx.def_span(def_id);"}, {"sha": "02928c4aa57cdd5b884529d4c7f1243336662a9b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_ty, Visitor};\n use rustc_hir::{self as hir, GenericBound, Item, ItemKind, Lifetime, LifetimeName, Node, TyKind};\n use rustc_middle::ty::{\n-    self, AssocItemContainer, StaticLifetimeVisitor, Ty, TyCtxt, TypeSuperFoldable, TypeVisitor,\n+    self, AssocItemContainer, StaticLifetimeVisitor, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::Span;"}, {"sha": "91bf9695dfc140ab2fc052b6abb3911b7fadf7e8", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::print::RegionHighlightMode;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor};\n use rustc_span::{Span, Symbol};\n \n use std::ops::ControlFlow;\n@@ -88,7 +88,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             }\n         }\n \n-        impl<'tcx> ty::fold::TypeVisitor<'tcx> for HighlightBuilder<'tcx> {\n+        impl<'tcx> ty::visit::TypeVisitor<'tcx> for HighlightBuilder<'tcx> {\n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if !r.has_name() && self.counter <= 3 {\n                     self.highlight.highlighting_region(r, self.counter);"}, {"sha": "b356da0be554efcce5758f55b0cd2731077ac4f5", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -5,7 +5,7 @@ use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::TyCtxt;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_middle::ty::{self, Binder, DefIdTree, Region, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Binder, DefIdTree, Region, Ty, TypeVisitable};\n use rustc_span::Span;\n \n /// Information about the anonymous region we are searching for.\n@@ -142,7 +142,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n     fn includes_region(\n         &self,\n-        ty: Binder<'tcx, impl TypeFoldable<'tcx>>,\n+        ty: Binder<'tcx, impl TypeVisitable<'tcx>>,\n         region: ty::BoundRegionKind,\n     ) -> bool {\n         let late_bound_regions = self.tcx().collect_referenced_late_bound_regions(&ty);"}, {"sha": "84004d2b21f902bce8fe3b5e7a8d2416143bc1bc", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -34,7 +34,7 @@ use super::InferCtxt;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::infer::unify_key::ToType;\n use rustc_middle::ty::fold::TypeFolder;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitable};\n use std::collections::hash_map::Entry;\n \n pub struct TypeFreshener<'a, 'tcx> {"}, {"sha": "991fd23ab4344660949b4e0ce80673f672cc5aaa", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -25,6 +25,7 @@ use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::relate::RelateResult;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n+use rustc_middle::ty::visit::TypeVisitable;\n pub use rustc_middle::ty::IntVarValue;\n use rustc_middle::ty::{self, GenericParamDefKind, InferConst, Ty, TyCtxt};\n use rustc_middle::ty::{ConstVid, FloatVid, IntVid, TyVid};\n@@ -318,7 +319,7 @@ pub struct InferCtxt<'a, 'tcx> {\n }\n \n /// See the `error_reporting` module for more details.\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable, TypeVisitable)]\n pub enum ValuePairs<'tcx> {\n     Regions(ExpectedFound<ty::Region<'tcx>>),\n     Terms(ExpectedFound<ty::Term<'tcx>>),\n@@ -1438,7 +1439,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// `resolve_vars_if_possible()`.\n     pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeVisitable<'tcx>,\n     {\n         value.visit_with(&mut resolve::UnresolvedTypeFinder::new(self)).break_value()\n     }"}, {"sha": "bab4f3e9e362ffb4a4c2fcea4c83c45b85d97fcc", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -27,8 +27,8 @@ use crate::infer::{ConstVarValue, ConstVariableValue};\n use crate::infer::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::ty::error::TypeError;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeSuperFoldable, TypeVisitor};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n+use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n use rustc_middle::ty::{self, InferConst, Ty, TyCtxt};\n use rustc_span::Span;\n use std::fmt::Debug;\n@@ -810,7 +810,7 @@ struct ScopeInstantiator<'me, 'tcx> {\n }\n \n impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n+    fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {"}, {"sha": "26d689f29eeaf690c4dfc47186e712b33f421811", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -9,7 +9,8 @@ use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n use rustc_middle::ty::{\n-    self, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor,\n+    self, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n+    TypeVisitable, TypeVisitor,\n };\n use rustc_span::Span;\n \n@@ -461,7 +462,7 @@ impl<'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<OP>\n where\n     OP: FnMut(ty::Region<'tcx>),\n {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n+    fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {"}, {"sha": "7234660dbcd32c4e75a54ba281d26e8c683108ba", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -4,7 +4,7 @@\n \n use rustc_data_structures::sso::SsoHashSet;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n use smallvec::{smallvec, SmallVec};\n \n #[derive(Debug)]"}, {"sha": "59cf39abe644055f010cbe79165edf32919cdd67", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -69,7 +69,7 @@ use crate::infer::{\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use rustc_data_structures::undo_log::UndoLogs;\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, Region, Ty, TyCtxt, TypeVisitable};\n use smallvec::smallvec;\n \n impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {"}, {"sha": "772e297b7b44556a305b1ce7b68f38c47dd71667", "filename": "compiler/rustc_infer/src/infer/outlives/test_type_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,7 +1,7 @@\n use std::collections::hash_map::Entry;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_middle::ty::TypeFoldable;\n+use rustc_middle::ty::TypeVisitable;\n use rustc_middle::ty::{\n     self,\n     error::TypeError,"}, {"sha": "c5747ecf702a70e76b1648173bb005a4363e799c", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -165,7 +165,7 @@ pub struct Verify<'tcx> {\n     pub bound: VerifyBound<'tcx>,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, TypeFoldable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, TypeFoldable, TypeVisitable)]\n pub enum GenericKind<'tcx> {\n     Param(ty::ParamTy),\n     Projection(ty::ProjectionTy<'tcx>),\n@@ -272,7 +272,7 @@ pub enum VerifyBound<'tcx> {\n ///     }\n /// }\n /// ```\n-#[derive(Debug, Copy, Clone, TypeFoldable)]\n+#[derive(Debug, Copy, Clone, TypeFoldable, TypeVisitable)]\n pub struct VerifyIfEq<'tcx> {\n     /// Type which must match the generic `G`\n     pub ty: Ty<'tcx>,"}, {"sha": "a61456874292075af538eaac5597f9f97b117659", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,8 +1,9 @@\n use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use super::{FixupError, FixupResult, InferCtxt, Span};\n use rustc_middle::mir;\n-use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFolder, TypeSuperFoldable, TypeVisitor};\n-use rustc_middle::ty::{self, Const, InferConst, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, Const, InferConst, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n \n use std::ops::ControlFlow;\n "}, {"sha": "b27571275b73395da0c74945defec150f9f2dbcf", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -4,8 +4,8 @@ use super::SubregionOrigin;\n use crate::infer::combine::ConstEquateRelation;\n use crate::infer::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::traits::Obligation;\n-use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::TyVar;\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt};\n use std::mem;"}, {"sha": "932e597509f9990631cb4d05b8b5d73a87282c0e", "filename": "compiler/rustc_infer/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -20,7 +20,7 @@ pub struct MismatchedProjectionTypes<'tcx> {\n     pub err: ty::error::TypeError<'tcx>,\n }\n \n-#[derive(Clone, TypeFoldable)]\n+#[derive(Clone, TypeFoldable, TypeVisitable)]\n pub struct Normalized<'tcx, T> {\n     pub value: T,\n     pub obligations: Vec<PredicateObligation<'tcx>>,"}, {"sha": "573d2d1e330165c5499279656bf54e1a6f6f3491", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,7 +1,8 @@\n use crate::traits;\n use crate::traits::project::Normalized;\n use rustc_middle::ty;\n-use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable};\n+use rustc_middle::ty::visit::{TypeVisitable, TypeVisitor};\n \n use std::fmt;\n use std::ops::ControlFlow;\n@@ -68,7 +69,9 @@ impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx\n             param_env: self.param_env.try_fold_with(folder)?,\n         })\n     }\n+}\n \n+impl<'tcx, O: TypeVisitable<'tcx>> TypeVisitable<'tcx> for traits::Obligation<'tcx, O> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.predicate.visit_with(visitor)?;\n         self.param_env.visit_with(visitor)"}, {"sha": "53e3e1a198ee1a1c0412fda208c71edb8868219d", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1645,7 +1645,7 @@ declare_lint_pass!(\n \n impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n-        use rustc_middle::ty::fold::TypeFoldable;\n+        use rustc_middle::ty::visit::TypeVisitable;\n         use rustc_middle::ty::PredicateKind::*;\n \n         if cx.tcx.features().trivial_bounds {"}, {"sha": "f41ee6404992d197175b8c6d33e97b9696137780", "filename": "compiler/rustc_lint/src/enum_intrinsics_non_enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,7 +1,7 @@\n use crate::{context::LintContext, LateContext, LateLintPass};\n use rustc_errors::fluent;\n use rustc_hir as hir;\n-use rustc_middle::ty::{fold::TypeFoldable, Ty};\n+use rustc_middle::ty::{visit::TypeVisitable, Ty};\n use rustc_span::{symbol::sym, Span};\n \n declare_lint! {"}, {"sha": "11a752ff09705547328d54b5f452e71b0d232c3f", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,5 +1,5 @@\n use crate::context::LintContext;\n-use crate::rustc_middle::ty::TypeFoldable;\n+use crate::rustc_middle::ty::TypeVisitable;\n use crate::LateContext;\n use crate::LateLintPass;\n use rustc_errors::fluent;"}, {"sha": "7f6ef91045335f3942f5d68f627833cbc2225dac", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -7,7 +7,7 @@ use rustc_hir as hir;\n use rustc_hir::{is_range_literal, Expr, ExprKind, Node};\n use rustc_middle::ty::layout::{IntegerExt, LayoutOf, SizeSkeleton};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, AdtKind, DefIdTree, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n+use rustc_middle::ty::{self, AdtKind, DefIdTree, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol, DUMMY_SP};\n@@ -1182,7 +1182,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             cx: &'a LateContext<'tcx>,\n         }\n \n-        impl<'a, 'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'a, 'tcx> {\n+        impl<'a, 'tcx> ty::visit::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'a, 'tcx> {\n             type BreakTy = Ty<'tcx>;\n \n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "ab1d6a439cd2d753616f6f9879fb207e52cc0f1c", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -18,6 +18,7 @@ mod query;\n mod serialize;\n mod symbols;\n mod type_foldable;\n+mod type_visitable;\n \n #[proc_macro]\n pub fn rustc_queries(input: TokenStream) -> TokenStream {\n@@ -121,6 +122,7 @@ decl_derive!([TyEncodable] => serialize::type_encodable_derive);\n decl_derive!([MetadataDecodable] => serialize::meta_decodable_derive);\n decl_derive!([MetadataEncodable] => serialize::meta_encodable_derive);\n decl_derive!([TypeFoldable, attributes(type_foldable)] => type_foldable::type_foldable_derive);\n+decl_derive!([TypeVisitable, attributes(type_visitable)] => type_visitable::type_visitable_derive);\n decl_derive!([Lift, attributes(lift)] => lift::lift_derive);\n decl_derive!(\n     [SessionDiagnostic, attributes("}, {"sha": "23e619221aab7e289f0decb098302e4e315df55d", "filename": "compiler/rustc_macros/src/type_foldable.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -11,11 +11,6 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n     }\n \n     s.add_bounds(synstructure::AddBounds::Generics);\n-    let body_visit = s.each(|bind| {\n-        quote! {\n-            ::rustc_middle::ty::fold::TypeFoldable::visit_with(#bind, __folder)?;\n-        }\n-    });\n     s.bind_with(|_| synstructure::BindStyle::Move);\n     let body_fold = s.each_variant(|vi| {\n         let bindings = vi.bindings();\n@@ -36,14 +31,6 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n             ) -> Result<Self, __F::Error> {\n                 Ok(match self { #body_fold })\n             }\n-\n-            fn visit_with<__F: ::rustc_middle::ty::fold::TypeVisitor<'tcx>>(\n-                &self,\n-                __folder: &mut __F\n-            ) -> ::std::ops::ControlFlow<__F::BreakTy> {\n-                match *self { #body_visit }\n-                ::std::ops::ControlFlow::CONTINUE\n-            }\n         },\n     )\n }"}, {"sha": "14e6aa6e0c17baec8b57e251f08a96980c71b11a", "filename": "compiler/rustc_macros/src/type_visitable.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -0,0 +1,33 @@\n+use quote::quote;\n+use syn::parse_quote;\n+\n+pub fn type_visitable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::TokenStream {\n+    if let syn::Data::Union(_) = s.ast().data {\n+        panic!(\"cannot derive on union\")\n+    }\n+\n+    if !s.ast().generics.lifetimes().any(|lt| lt.lifetime.ident == \"tcx\") {\n+        s.add_impl_generic(parse_quote! { 'tcx });\n+    }\n+\n+    s.add_bounds(synstructure::AddBounds::Generics);\n+    let body_visit = s.each(|bind| {\n+        quote! {\n+            ::rustc_middle::ty::visit::TypeVisitable::visit_with(#bind, __visitor)?;\n+        }\n+    });\n+    s.bind_with(|_| synstructure::BindStyle::Move);\n+\n+    s.bound_impl(\n+        quote!(::rustc_middle::ty::visit::TypeVisitable<'tcx>),\n+        quote! {\n+            fn visit_with<__V: ::rustc_middle::ty::visit::TypeVisitor<'tcx>>(\n+                &self,\n+                __visitor: &mut __V\n+            ) -> ::std::ops::ControlFlow<__V::BreakTy> {\n+                match *self { #body_visit }\n+                ::std::ops::ControlFlow::CONTINUE\n+            }\n+        },\n+    )\n+}"}, {"sha": "83d3b0100b844b0efadcef26f6966bf95aa5968f", "filename": "compiler/rustc_middle/src/hir/place.rs", "status": "modified", "additions": 10, "deletions": 38, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -4,18 +4,8 @@ use crate::ty::Ty;\n use rustc_hir::HirId;\n use rustc_target::abi::VariantIdx;\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    TyEncodable,\n-    TyDecodable,\n-    TypeFoldable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum PlaceBase {\n     /// A temporary variable.\n     Rvalue,\n@@ -27,18 +17,8 @@ pub enum PlaceBase {\n     Upvar(ty::UpvarId),\n }\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    TyEncodable,\n-    TyDecodable,\n-    TypeFoldable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum ProjectionKind {\n     /// A dereference of a pointer, reference or `Box<T>` of the given type.\n     Deref,\n@@ -58,18 +38,8 @@ pub enum ProjectionKind {\n     Subslice,\n }\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    TyEncodable,\n-    TyDecodable,\n-    TypeFoldable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct Projection<'tcx> {\n     /// Type after the projection is applied.\n     pub ty: Ty<'tcx>,\n@@ -81,7 +51,8 @@ pub struct Projection<'tcx> {\n /// A `Place` represents how a value is located in memory.\n ///\n /// This is an HIR version of [`rustc_middle::mir::Place`].\n-#[derive(Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct Place<'tcx> {\n     /// The type of the `PlaceBase`\n     pub base_ty: Ty<'tcx>,\n@@ -94,7 +65,8 @@ pub struct Place<'tcx> {\n /// A `PlaceWithHirId` represents how a value is located in memory.\n ///\n /// This is an HIR version of [`rustc_middle::mir::Place`].\n-#[derive(Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct PlaceWithHirId<'tcx> {\n     /// `HirId` of the expression or pattern producing this value.\n     pub hir_id: HirId,"}, {"sha": "c6fe3e721032f4e7957adc198d282ceaac78d40c", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -34,7 +34,7 @@ use std::ops::Index;\n /// variables have been rewritten to \"canonical vars\". These are\n /// numbered starting from 0 in order of first appearance.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyDecodable, TyEncodable)]\n-#[derive(HashStable, TypeFoldable, Lift)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct Canonical<'tcx, V> {\n     pub max_universe: ty::UniverseIndex,\n     pub variables: CanonicalVarInfos<'tcx>,\n@@ -53,7 +53,7 @@ pub type CanonicalVarInfos<'tcx> = &'tcx List<CanonicalVarInfo<'tcx>>;\n /// variables. You will need to supply it later to instantiate the\n /// canonicalized query response.\n #[derive(Clone, Debug, PartialEq, Eq, Hash, TyDecodable, TyEncodable)]\n-#[derive(HashStable, TypeFoldable, Lift)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct CanonicalVarValues<'tcx> {\n     pub var_values: IndexVec<BoundVar, GenericArg<'tcx>>,\n }\n@@ -173,7 +173,7 @@ pub enum CanonicalTyVarKind {\n /// After we execute a query with a canonicalized key, we get back a\n /// `Canonical<QueryResponse<..>>`. You can use\n /// `instantiate_query_result` to access the data in this result.\n-#[derive(Clone, Debug, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct QueryResponse<'tcx, R> {\n     pub var_values: CanonicalVarValues<'tcx>,\n     pub region_constraints: QueryRegionConstraints<'tcx>,\n@@ -187,7 +187,7 @@ pub struct QueryResponse<'tcx, R> {\n     pub value: R,\n }\n \n-#[derive(Clone, Debug, Default, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, Default, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct QueryRegionConstraints<'tcx> {\n     pub outlives: Vec<QueryOutlivesConstraint<'tcx>>,\n     pub member_constraints: Vec<MemberConstraint<'tcx>>,\n@@ -293,15 +293,15 @@ impl<'tcx, V> Canonical<'tcx, V> {\n pub type QueryOutlivesConstraint<'tcx> =\n     ty::Binder<'tcx, ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>>;\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     for <'tcx> {\n         crate::infer::canonical::Certainty,\n         crate::infer::canonical::CanonicalVarInfo<'tcx>,\n         crate::infer::canonical::CanonicalVarKind<'tcx>,\n     }\n }\n \n-TrivialTypeFoldableImpls! {\n+TrivialTypeTraversalImpls! {\n     for <'tcx> {\n         crate::infer::canonical::CanonicalVarInfos<'tcx>,\n     }"}, {"sha": "55e00c4c0d8ef813093915356477db9dbc2e2e61", "filename": "compiler/rustc_middle/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -13,7 +13,7 @@ use rustc_span::Span;\n /// ```text\n /// R0 member of [O1..On]\n /// ```\n-#[derive(Debug, Clone, HashStable, TypeFoldable, Lift)]\n+#[derive(Debug, Clone, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct MemberConstraint<'tcx> {\n     /// The `DefId` of the opaque type causing this constraint: used for error reporting.\n     pub opaque_type_def_id: DefId,"}, {"sha": "0e85c60a363028f97befccb8ac51bb3fdf1bfc78", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -18,7 +18,7 @@ macro_rules! span_bug {\n }\n \n ///////////////////////////////////////////////////////////////////////////\n-// Lift and TypeFoldable macros\n+// Lift and TypeFoldable/TypeVisitable macros\n //\n // When possible, use one of these (relatively) convenient macros to write\n // the impls for you.\n@@ -48,7 +48,7 @@ macro_rules! CloneLiftImpls {\n /// Used for types that are `Copy` and which **do not care arena\n /// allocated data** (i.e., don't need to be folded).\n #[macro_export]\n-macro_rules! TrivialTypeFoldableImpls {\n+macro_rules! TrivialTypeTraversalImpls {\n     (for <$tcx:lifetime> { $($ty:ty,)+ }) => {\n         $(\n             impl<$tcx> $crate::ty::fold::TypeFoldable<$tcx> for $ty {\n@@ -58,8 +58,10 @@ macro_rules! TrivialTypeFoldableImpls {\n                 ) -> ::std::result::Result<$ty, F::Error> {\n                     Ok(self)\n                 }\n+            }\n \n-                fn visit_with<F: $crate::ty::fold::TypeVisitor<$tcx>>(\n+            impl<$tcx> $crate::ty::visit::TypeVisitable<$tcx> for $ty {\n+                fn visit_with<F: $crate::ty::visit::TypeVisitor<$tcx>>(\n                     &self,\n                     _: &mut F)\n                     -> ::std::ops::ControlFlow<F::BreakTy>\n@@ -71,7 +73,7 @@ macro_rules! TrivialTypeFoldableImpls {\n     };\n \n     ($($ty:ty,)+) => {\n-        TrivialTypeFoldableImpls! {\n+        TrivialTypeTraversalImpls! {\n             for <'tcx> {\n                 $($ty,)+\n             }\n@@ -80,15 +82,15 @@ macro_rules! TrivialTypeFoldableImpls {\n }\n \n #[macro_export]\n-macro_rules! TrivialTypeFoldableAndLiftImpls {\n+macro_rules! TrivialTypeTraversalAndLiftImpls {\n     ($($t:tt)*) => {\n-        TrivialTypeFoldableImpls! { $($t)* }\n+        TrivialTypeTraversalImpls! { $($t)* }\n         CloneLiftImpls! { $($t)* }\n     }\n }\n \n #[macro_export]\n-macro_rules! EnumTypeFoldableImpl {\n+macro_rules! EnumTypeTraversalImpl {\n     (impl<$($p:tt),*> TypeFoldable<$tcx:tt> for $s:path {\n         $($variants:tt)*\n     } $(where $($wc:tt)*)*) => {\n@@ -99,14 +101,22 @@ macro_rules! EnumTypeFoldableImpl {\n                 self,\n                 folder: &mut V,\n             ) -> ::std::result::Result<Self, V::Error> {\n-                EnumTypeFoldableImpl!(@FoldVariants(self, folder) input($($variants)*) output())\n+                EnumTypeTraversalImpl!(@FoldVariants(self, folder) input($($variants)*) output())\n             }\n+        }\n+    };\n \n-            fn visit_with<V: $crate::ty::fold::TypeVisitor<$tcx>>(\n+    (impl<$($p:tt),*> TypeVisitable<$tcx:tt> for $s:path {\n+        $($variants:tt)*\n+    } $(where $($wc:tt)*)*) => {\n+        impl<$($p),*> $crate::ty::visit::TypeVisitable<$tcx> for $s\n+            $(where $($wc)*)*\n+        {\n+            fn visit_with<V: $crate::ty::visit::TypeVisitor<$tcx>>(\n                 &self,\n                 visitor: &mut V,\n             ) -> ::std::ops::ControlFlow<V::BreakTy> {\n-                EnumTypeFoldableImpl!(@VisitVariants(self, visitor) input($($variants)*) output())\n+                EnumTypeTraversalImpl!(@VisitVariants(self, visitor) input($($variants)*) output())\n             }\n         }\n     };\n@@ -120,7 +130,7 @@ macro_rules! EnumTypeFoldableImpl {\n     (@FoldVariants($this:expr, $folder:expr)\n      input( ($variant:path) ( $($variant_arg:ident),* ) , $($input:tt)*)\n      output( $($output:tt)*) ) => {\n-        EnumTypeFoldableImpl!(\n+        EnumTypeTraversalImpl!(\n             @FoldVariants($this, $folder)\n                 input($($input)*)\n                 output(\n@@ -137,7 +147,7 @@ macro_rules! EnumTypeFoldableImpl {\n     (@FoldVariants($this:expr, $folder:expr)\n      input( ($variant:path) { $($variant_arg:ident),* $(,)? } , $($input:tt)*)\n      output( $($output:tt)*) ) => {\n-        EnumTypeFoldableImpl!(\n+        EnumTypeTraversalImpl!(\n             @FoldVariants($this, $folder)\n                 input($($input)*)\n                 output(\n@@ -155,7 +165,7 @@ macro_rules! EnumTypeFoldableImpl {\n     (@FoldVariants($this:expr, $folder:expr)\n      input( ($variant:path), $($input:tt)*)\n      output( $($output:tt)*) ) => {\n-        EnumTypeFoldableImpl!(\n+        EnumTypeTraversalImpl!(\n             @FoldVariants($this, $folder)\n                 input($($input)*)\n                 output(\n@@ -174,12 +184,12 @@ macro_rules! EnumTypeFoldableImpl {\n     (@VisitVariants($this:expr, $visitor:expr)\n      input( ($variant:path) ( $($variant_arg:ident),* ) , $($input:tt)*)\n      output( $($output:tt)*) ) => {\n-        EnumTypeFoldableImpl!(\n+        EnumTypeTraversalImpl!(\n             @VisitVariants($this, $visitor)\n                 input($($input)*)\n                 output(\n                     $variant ( $($variant_arg),* ) => {\n-                        $($crate::ty::fold::TypeFoldable::visit_with(\n+                        $($crate::ty::visit::TypeVisitable::visit_with(\n                             $variant_arg, $visitor\n                         )?;)*\n                         ::std::ops::ControlFlow::CONTINUE\n@@ -192,12 +202,12 @@ macro_rules! EnumTypeFoldableImpl {\n     (@VisitVariants($this:expr, $visitor:expr)\n      input( ($variant:path) { $($variant_arg:ident),* $(,)? } , $($input:tt)*)\n      output( $($output:tt)*) ) => {\n-        EnumTypeFoldableImpl!(\n+        EnumTypeTraversalImpl!(\n             @VisitVariants($this, $visitor)\n                 input($($input)*)\n                 output(\n                     $variant { $($variant_arg),* } => {\n-                        $($crate::ty::fold::TypeFoldable::visit_with(\n+                        $($crate::ty::visit::TypeVisitable::visit_with(\n                             $variant_arg, $visitor\n                         )?;)*\n                         ::std::ops::ControlFlow::CONTINUE\n@@ -210,7 +220,7 @@ macro_rules! EnumTypeFoldableImpl {\n     (@VisitVariants($this:expr, $visitor:expr)\n      input( ($variant:path), $($input:tt)*)\n      output( $($output:tt)*) ) => {\n-        EnumTypeFoldableImpl!(\n+        EnumTypeTraversalImpl!(\n             @VisitVariants($this, $visitor)\n                 input($($input)*)\n                 output("}, {"sha": "efa9464529e71ca14473852c3b6abb4cffdb04db", "filename": "compiler/rustc_middle/src/mir/coverage.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -100,7 +100,7 @@ impl From<InjectedExpressionId> for ExpressionOperandId {\n     }\n }\n \n-#[derive(Clone, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n+#[derive(Clone, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable, TypeVisitable)]\n pub enum CoverageKind {\n     Counter {\n         function_source_hash: u64,\n@@ -148,18 +148,8 @@ impl Debug for CoverageKind {\n     }\n }\n \n-#[derive(\n-    Clone,\n-    TyEncodable,\n-    TyDecodable,\n-    Hash,\n-    HashStable,\n-    TypeFoldable,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord\n-)]\n+#[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct CodeRegion {\n     pub file_name: Symbol,\n     pub start_line: u32,\n@@ -178,7 +168,8 @@ impl Debug for CodeRegion {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum Op {\n     Subtract,\n     Add,"}, {"sha": "f97bf2883b3691b3f9b10f5899dd2b629f25899c", "filename": "compiler/rustc_middle/src/mir/graph_cyclic_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraph_cyclic_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraph_cyclic_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraph_cyclic_cache.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -58,6 +58,6 @@ impl<CTX> HashStable<CTX> for GraphIsCyclicCache {\n     }\n }\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     GraphIsCyclicCache,\n }"}, {"sha": "2a1fd6f736e915604dc2b6efd7be1e902c9a42e5", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -29,7 +29,7 @@ impl From<ErrorGuaranteed> for ErrorHandled {\n     }\n }\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     ErrorHandled,\n }\n "}, {"sha": "786927e2dad70766a974cb8e046e1bb8747dc9ff", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,8 +1,8 @@\n use super::{ErrorHandled, EvalToConstValueResult, EvalToValTreeResult, GlobalId};\n \n use crate::mir;\n-use crate::ty::fold::TypeFoldable;\n use crate::ty::subst::InternalSubsts;\n+use crate::ty::visit::TypeVisitable;\n use crate::ty::{self, query::TyCtxtAt, query::TyCtxtEnsure, TyCtxt};\n use rustc_hir::def_id::DefId;\n use rustc_span::{Span, DUMMY_SP};"}, {"sha": "e7d7317456c7400683a7bdbf55397a7ab440add6", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -8,9 +8,10 @@ use crate::mir::interpret::{\n use crate::mir::traversal::PostorderCache;\n use crate::mir::visit::MirVisitable;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n+use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n+use crate::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n use crate::ty::{self, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, ScalarInt, UserTypeAnnotationIndex};\n \n@@ -68,6 +69,7 @@ pub use terminator::*;\n \n pub mod traversal;\n mod type_foldable;\n+mod type_visitable;\n pub mod visit;\n \n pub use self::generic_graph::graphviz_safe_def_name;\n@@ -136,7 +138,7 @@ impl MirPhase {\n \n /// Where a specific `mir::Body` comes from.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-#[derive(HashStable, TyEncodable, TyDecodable, TypeFoldable)]\n+#[derive(HashStable, TyEncodable, TyDecodable, TypeFoldable, TypeVisitable)]\n pub struct MirSource<'tcx> {\n     pub instance: InstanceDef<'tcx>,\n \n@@ -166,7 +168,7 @@ impl<'tcx> MirSource<'tcx> {\n     }\n }\n \n-#[derive(Clone, TyEncodable, TyDecodable, Debug, HashStable, TypeFoldable)]\n+#[derive(Clone, TyEncodable, TyDecodable, Debug, HashStable, TypeFoldable, TypeVisitable)]\n pub struct GeneratorInfo<'tcx> {\n     /// The yield type of the function, if it is a generator.\n     pub yield_ty: Option<Ty<'tcx>>,\n@@ -183,7 +185,7 @@ pub struct GeneratorInfo<'tcx> {\n }\n \n /// The lowered representation of a single function.\n-#[derive(Clone, TyEncodable, TyDecodable, Debug, HashStable, TypeFoldable)]\n+#[derive(Clone, TyEncodable, TyDecodable, Debug, HashStable, TypeFoldable, TypeVisitable)]\n pub struct Body<'tcx> {\n     /// A list of basic blocks. References to basic block use a newtyped index type [`BasicBlock`]\n     /// that indexes into this vector.\n@@ -601,7 +603,7 @@ impl<'tcx> IndexMut<BasicBlock> for Body<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, HashStable, TypeFoldable, TypeVisitable)]\n pub enum ClearCrossCrate<T> {\n     Clear,\n     Set(T),\n@@ -762,7 +764,7 @@ pub enum ImplicitSelfKind {\n     None,\n }\n \n-TrivialTypeFoldableAndLiftImpls! { BindingForm<'tcx>, }\n+TrivialTypeTraversalAndLiftImpls! { BindingForm<'tcx>, }\n \n mod binding_form_impl {\n     use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -807,7 +809,7 @@ pub struct BlockTailInfo {\n ///\n /// This can be a binding declared by the user, a temporary inserted by the compiler, a function\n /// argument, or the return place.\n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub struct LocalDecl<'tcx> {\n     /// Whether this is a mutable binding (i.e., `let x` or `let mut x`).\n     ///\n@@ -942,7 +944,7 @@ static_assert_size!(LocalDecl<'_>, 56);\n ///\n /// Not used for non-StaticRef temporaries, the return place, or anonymous\n /// function parameters.\n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub enum LocalInfo<'tcx> {\n     /// A user-defined local variable or function parameter\n     ///\n@@ -1081,7 +1083,7 @@ impl<'tcx> LocalDecl<'tcx> {\n     }\n }\n \n-#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub enum VarDebugInfoContents<'tcx> {\n     /// NOTE(eddyb) There's an unenforced invariant that this `Place` is\n     /// based on a `Local`, not a `Static`, and contains no indexing.\n@@ -1099,7 +1101,7 @@ impl<'tcx> Debug for VarDebugInfoContents<'tcx> {\n }\n \n /// Debug information pertaining to a user variable.\n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub struct VarDebugInfo<'tcx> {\n     pub name: Symbol,\n \n@@ -1155,7 +1157,7 @@ impl BasicBlock {\n // BasicBlockData\n \n /// See [`BasicBlock`] for documentation on what basic blocks are at a high level.\n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub struct BasicBlockData<'tcx> {\n     /// List of statements in this block.\n     pub statements: Vec<Statement<'tcx>>,\n@@ -1392,7 +1394,7 @@ impl<O: fmt::Debug> fmt::Debug for AssertKind<O> {\n ///////////////////////////////////////////////////////////////////////////\n // Statements\n \n-#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub struct Statement<'tcx> {\n     pub source_info: SourceInfo,\n     pub kind: StatementKind<'tcx>,\n@@ -1758,7 +1760,7 @@ impl SourceScope {\n     }\n }\n \n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub struct SourceScopeData<'tcx> {\n     pub span: Span,\n     pub parent_scope: Option<SourceScope>,\n@@ -2524,7 +2526,7 @@ impl<'tcx> ConstantKind<'tcx> {\n /// The first will lead to the constraint `w: &'1 str` (for some\n /// inferred region `'1`). The second will lead to the constraint `w:\n /// &'static str`.\n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub struct UserTypeProjections {\n     pub contents: Vec<(UserTypeProjection, Span)>,\n }\n@@ -2641,7 +2643,7 @@ impl UserTypeProjection {\n     }\n }\n \n-TrivialTypeFoldableAndLiftImpls! { ProjectionKind, }\n+TrivialTypeTraversalAndLiftImpls! { ProjectionKind, }\n \n impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n@@ -2650,7 +2652,9 @@ impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n             projs: self.projs.try_fold_with(folder)?,\n         })\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for UserTypeProjection {\n     fn visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<Vs::BreakTy> {\n         self.base.visit_with(visitor)\n         // Note: there's nothing in `self.proj` to visit."}, {"sha": "5f1fadaf3bc4ceafe376b5fe3590d07589ad53ef", "filename": "compiler/rustc_middle/src/mir/predecessors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -73,6 +73,6 @@ impl<CTX> HashStable<CTX> for PredecessorCache {\n     }\n }\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     PredecessorCache,\n }"}, {"sha": "620f0380d53b777088a599ec6283083194caffe9", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -161,7 +161,7 @@ rustc_index::newtype_index! {\n }\n \n /// The layout of generator state.\n-#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub struct GeneratorLayout<'tcx> {\n     /// The type of every local stored inside the generator.\n     pub field_tys: IndexVec<GeneratorSavedLocal, Ty<'tcx>>,"}, {"sha": "d1f3e6b6fe6bd5d2d213032a29e92f0341185db8", "filename": "compiler/rustc_middle/src/mir/switch_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -73,6 +73,6 @@ impl<CTX> HashStable<CTX> for SwitchSourceCache {\n     }\n }\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     SwitchSourceCache,\n }"}, {"sha": "5d4f3ea9e4ca4d6169b070ebc80cf54591bebba2", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -179,7 +179,8 @@ pub enum BorrowKind {\n /// Not all of these are allowed at every [`MirPhase`]. Check the documentation there to see which\n /// ones you do not have to worry about. The MIR validator will generally enforce such restrictions,\n /// causing an ICE if they are violated.\n-#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum StatementKind<'tcx> {\n     /// Assign statements roughly correspond to an assignment in Rust proper (`x = ...`) except\n     /// without the possibility of dropping the previous value (that must be done separately, if at\n@@ -376,13 +377,15 @@ pub enum FakeReadCause {\n     ForIndex,\n }\n \n-#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct Coverage {\n     pub kind: CoverageKind,\n     pub code_region: Option<CodeRegion>,\n }\n \n-#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct CopyNonOverlapping<'tcx> {\n     pub src: Operand<'tcx>,\n     pub dst: Operand<'tcx>,\n@@ -672,7 +675,8 @@ pub enum AssertKind<O> {\n     ResumedAfterPanic(GeneratorKind),\n }\n \n-#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum InlineAsmOperand<'tcx> {\n     In {\n         reg: InlineAsmRegOrRegClass,"}, {"sha": "c99faf80187edae9195e4777e1269534c54ef64b", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -9,7 +9,7 @@ use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir as hir;\n use rustc_target::abi::VariantIdx;\n \n-#[derive(Copy, Clone, Debug, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable)]\n pub struct PlaceTy<'tcx> {\n     pub ty: Ty<'tcx>,\n     /// Downcast to a particular variant of an enum or a generator, if included."}, {"sha": "30648679daebfd4ade88bb8bea85e8e80b0ded03", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -384,6 +384,6 @@ impl<CTX> HashStable<CTX> for PostorderCache {\n     }\n }\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     PostorderCache,\n }"}, {"sha": "3c9850a9eb3af06e003aa964f5dd191640eb31da", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 1, "deletions": 153, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -4,7 +4,7 @@ use super::*;\n use crate::ty;\n use rustc_data_structures::functor::IdFunctor;\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     BlockTailInfo,\n     MirPhase,\n     SourceInfo,\n@@ -89,65 +89,12 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n         };\n         Ok(Terminator { source_info: self.source_info, kind })\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        use crate::mir::TerminatorKind::*;\n-\n-        match self.kind {\n-            SwitchInt { ref discr, switch_ty, .. } => {\n-                discr.visit_with(visitor)?;\n-                switch_ty.visit_with(visitor)\n-            }\n-            Drop { ref place, .. } => place.visit_with(visitor),\n-            DropAndReplace { ref place, ref value, .. } => {\n-                place.visit_with(visitor)?;\n-                value.visit_with(visitor)\n-            }\n-            Yield { ref value, .. } => value.visit_with(visitor),\n-            Call { ref func, ref args, ref destination, .. } => {\n-                destination.visit_with(visitor)?;\n-                func.visit_with(visitor)?;\n-                args.visit_with(visitor)\n-            }\n-            Assert { ref cond, ref msg, .. } => {\n-                cond.visit_with(visitor)?;\n-                use AssertKind::*;\n-                match msg {\n-                    BoundsCheck { ref len, ref index } => {\n-                        len.visit_with(visitor)?;\n-                        index.visit_with(visitor)\n-                    }\n-                    Overflow(_, l, r) => {\n-                        l.visit_with(visitor)?;\n-                        r.visit_with(visitor)\n-                    }\n-                    OverflowNeg(op) | DivisionByZero(op) | RemainderByZero(op) => {\n-                        op.visit_with(visitor)\n-                    }\n-                    ResumedAfterReturn(_) | ResumedAfterPanic(_) => ControlFlow::CONTINUE,\n-                }\n-            }\n-            InlineAsm { ref operands, .. } => operands.visit_with(visitor),\n-            Goto { .. }\n-            | Resume\n-            | Abort\n-            | Return\n-            | GeneratorDrop\n-            | Unreachable\n-            | FalseEdge { .. }\n-            | FalseUnwind { .. } => ControlFlow::CONTINUE,\n-        }\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for GeneratorKind {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Place<'tcx> {\n@@ -157,21 +104,12 @@ impl<'tcx> TypeFoldable<'tcx> for Place<'tcx> {\n             projection: self.projection.try_fold_with(folder)?,\n         })\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.local.visit_with(visitor)?;\n-        self.projection.visit_with(visitor)\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<PlaceElem<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_place_elems(v))\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.iter().try_for_each(|t| t.visit_with(visitor))\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n@@ -224,55 +162,6 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n             }\n         })\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        use crate::mir::Rvalue::*;\n-        match *self {\n-            Use(ref op) => op.visit_with(visitor),\n-            Repeat(ref op, _) => op.visit_with(visitor),\n-            ThreadLocalRef(did) => did.visit_with(visitor),\n-            Ref(region, _, ref place) => {\n-                region.visit_with(visitor)?;\n-                place.visit_with(visitor)\n-            }\n-            AddressOf(_, ref place) => place.visit_with(visitor),\n-            Len(ref place) => place.visit_with(visitor),\n-            Cast(_, ref op, ty) => {\n-                op.visit_with(visitor)?;\n-                ty.visit_with(visitor)\n-            }\n-            BinaryOp(_, box (ref rhs, ref lhs)) | CheckedBinaryOp(_, box (ref rhs, ref lhs)) => {\n-                rhs.visit_with(visitor)?;\n-                lhs.visit_with(visitor)\n-            }\n-            UnaryOp(_, ref val) => val.visit_with(visitor),\n-            Discriminant(ref place) => place.visit_with(visitor),\n-            NullaryOp(_, ty) => ty.visit_with(visitor),\n-            Aggregate(ref kind, ref fields) => {\n-                match **kind {\n-                    AggregateKind::Array(ty) => {\n-                        ty.visit_with(visitor)?;\n-                    }\n-                    AggregateKind::Tuple => {}\n-                    AggregateKind::Adt(_, _, substs, user_ty, _) => {\n-                        substs.visit_with(visitor)?;\n-                        user_ty.visit_with(visitor)?;\n-                    }\n-                    AggregateKind::Closure(_, substs) => {\n-                        substs.visit_with(visitor)?;\n-                    }\n-                    AggregateKind::Generator(_, substs, _) => {\n-                        substs.visit_with(visitor)?;\n-                    }\n-                }\n-                fields.visit_with(visitor)\n-            }\n-            ShallowInitBox(ref op, ty) => {\n-                op.visit_with(visitor)?;\n-                ty.visit_with(visitor)\n-            }\n-        }\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Operand<'tcx> {\n@@ -283,13 +172,6 @@ impl<'tcx> TypeFoldable<'tcx> for Operand<'tcx> {\n             Operand::Constant(c) => Operand::Constant(c.try_fold_with(folder)?),\n         })\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        match *self {\n-            Operand::Copy(ref place) | Operand::Move(ref place) => place.visit_with(visitor),\n-            Operand::Constant(ref c) => c.visit_with(visitor),\n-        }\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for PlaceElem<'tcx> {\n@@ -307,43 +189,24 @@ impl<'tcx> TypeFoldable<'tcx> for PlaceElem<'tcx> {\n             Subslice { from, to, from_end } => Subslice { from, to, from_end },\n         })\n     }\n-\n-    fn visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<Vs::BreakTy> {\n-        use crate::mir::ProjectionElem::*;\n-\n-        match self {\n-            Field(_, ty) => ty.visit_with(visitor),\n-            Index(v) => v.visit_with(visitor),\n-            _ => ControlFlow::CONTINUE,\n-        }\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Field {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for GeneratorSavedLocal {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n-    }\n }\n \n impl<'tcx, R: Idx, C: Idx> TypeFoldable<'tcx> for BitMatrix<R, C> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n@@ -354,21 +217,13 @@ impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n             literal: self.literal.try_fold_with(folder)?,\n         })\n     }\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.literal.visit_with(visitor)?;\n-        self.user_ty.visit_with(visitor)\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ConstantKind<'tcx> {\n     #[inline(always)]\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_mir_const(self)\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        visitor.visit_mir_const(*self)\n-    }\n }\n \n impl<'tcx> TypeSuperFoldable<'tcx> for ConstantKind<'tcx> {\n@@ -381,11 +236,4 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ConstantKind<'tcx> {\n             ConstantKind::Val(v, t) => Ok(ConstantKind::Val(v, t.try_fold_with(folder)?)),\n         }\n     }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        match *self {\n-            ConstantKind::Ty(c) => c.visit_with(visitor),\n-            ConstantKind::Val(_, t) => t.visit_with(visitor),\n-        }\n-    }\n }"}, {"sha": "d52ae5fac6796650299876168d274fd1ceb3e2b9", "filename": "compiler/rustc_middle/src/mir/type_visitable.rs", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -0,0 +1,186 @@\n+//! `TypeVisitable` implementations for MIR types\n+\n+use super::*;\n+use crate::ty;\n+\n+impl<'tcx> TypeVisitable<'tcx> for Terminator<'tcx> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        use crate::mir::TerminatorKind::*;\n+\n+        match self.kind {\n+            SwitchInt { ref discr, switch_ty, .. } => {\n+                discr.visit_with(visitor)?;\n+                switch_ty.visit_with(visitor)\n+            }\n+            Drop { ref place, .. } => place.visit_with(visitor),\n+            DropAndReplace { ref place, ref value, .. } => {\n+                place.visit_with(visitor)?;\n+                value.visit_with(visitor)\n+            }\n+            Yield { ref value, .. } => value.visit_with(visitor),\n+            Call { ref func, ref args, ref destination, .. } => {\n+                destination.visit_with(visitor)?;\n+                func.visit_with(visitor)?;\n+                args.visit_with(visitor)\n+            }\n+            Assert { ref cond, ref msg, .. } => {\n+                cond.visit_with(visitor)?;\n+                use AssertKind::*;\n+                match msg {\n+                    BoundsCheck { ref len, ref index } => {\n+                        len.visit_with(visitor)?;\n+                        index.visit_with(visitor)\n+                    }\n+                    Overflow(_, l, r) => {\n+                        l.visit_with(visitor)?;\n+                        r.visit_with(visitor)\n+                    }\n+                    OverflowNeg(op) | DivisionByZero(op) | RemainderByZero(op) => {\n+                        op.visit_with(visitor)\n+                    }\n+                    ResumedAfterReturn(_) | ResumedAfterPanic(_) => ControlFlow::CONTINUE,\n+                }\n+            }\n+            InlineAsm { ref operands, .. } => operands.visit_with(visitor),\n+            Goto { .. }\n+            | Resume\n+            | Abort\n+            | Return\n+            | GeneratorDrop\n+            | Unreachable\n+            | FalseEdge { .. }\n+            | FalseUnwind { .. } => ControlFlow::CONTINUE,\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for GeneratorKind {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n+        ControlFlow::CONTINUE\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for Place<'tcx> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.local.visit_with(visitor)?;\n+        self.projection.visit_with(visitor)\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for &'tcx ty::List<PlaceElem<'tcx>> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.iter().try_for_each(|t| t.visit_with(visitor))\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for Rvalue<'tcx> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        use crate::mir::Rvalue::*;\n+        match *self {\n+            Use(ref op) => op.visit_with(visitor),\n+            Repeat(ref op, _) => op.visit_with(visitor),\n+            ThreadLocalRef(did) => did.visit_with(visitor),\n+            Ref(region, _, ref place) => {\n+                region.visit_with(visitor)?;\n+                place.visit_with(visitor)\n+            }\n+            AddressOf(_, ref place) => place.visit_with(visitor),\n+            Len(ref place) => place.visit_with(visitor),\n+            Cast(_, ref op, ty) => {\n+                op.visit_with(visitor)?;\n+                ty.visit_with(visitor)\n+            }\n+            BinaryOp(_, box (ref rhs, ref lhs)) | CheckedBinaryOp(_, box (ref rhs, ref lhs)) => {\n+                rhs.visit_with(visitor)?;\n+                lhs.visit_with(visitor)\n+            }\n+            UnaryOp(_, ref val) => val.visit_with(visitor),\n+            Discriminant(ref place) => place.visit_with(visitor),\n+            NullaryOp(_, ty) => ty.visit_with(visitor),\n+            Aggregate(ref kind, ref fields) => {\n+                match **kind {\n+                    AggregateKind::Array(ty) => {\n+                        ty.visit_with(visitor)?;\n+                    }\n+                    AggregateKind::Tuple => {}\n+                    AggregateKind::Adt(_, _, substs, user_ty, _) => {\n+                        substs.visit_with(visitor)?;\n+                        user_ty.visit_with(visitor)?;\n+                    }\n+                    AggregateKind::Closure(_, substs) => {\n+                        substs.visit_with(visitor)?;\n+                    }\n+                    AggregateKind::Generator(_, substs, _) => {\n+                        substs.visit_with(visitor)?;\n+                    }\n+                }\n+                fields.visit_with(visitor)\n+            }\n+            ShallowInitBox(ref op, ty) => {\n+                op.visit_with(visitor)?;\n+                ty.visit_with(visitor)\n+            }\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for Operand<'tcx> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        match *self {\n+            Operand::Copy(ref place) | Operand::Move(ref place) => place.visit_with(visitor),\n+            Operand::Constant(ref c) => c.visit_with(visitor),\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for PlaceElem<'tcx> {\n+    fn visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<Vs::BreakTy> {\n+        use crate::mir::ProjectionElem::*;\n+\n+        match self {\n+            Field(_, ty) => ty.visit_with(visitor),\n+            Index(v) => v.visit_with(visitor),\n+            _ => ControlFlow::CONTINUE,\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for Field {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n+        ControlFlow::CONTINUE\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for GeneratorSavedLocal {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n+        ControlFlow::CONTINUE\n+    }\n+}\n+\n+impl<'tcx, R: Idx, C: Idx> TypeVisitable<'tcx> for BitMatrix<R, C> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n+        ControlFlow::CONTINUE\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for Constant<'tcx> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.literal.visit_with(visitor)?;\n+        self.user_ty.visit_with(visitor)\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for ConstantKind<'tcx> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        visitor.visit_mir_const(*self)\n+    }\n+}\n+\n+impl<'tcx> TypeSuperVisitable<'tcx> for ConstantKind<'tcx> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        match *self {\n+            ConstantKind::Ty(c) => c.visit_with(visitor),\n+            ConstantKind::Val(_, t) => t.visit_with(visitor),\n+        }\n+    }\n+}"}, {"sha": "03c11c2863fbbd6728a10f135266b26be4a45c89", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -191,18 +191,8 @@ pub enum StmtKind<'tcx> {\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(Expr<'_>, 104);\n \n-#[derive(\n-    Clone,\n-    Debug,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    HashStable,\n-    TyEncodable,\n-    TyDecodable,\n-    TypeFoldable\n-)]\n+#[derive(Clone, Debug, Copy, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct LocalVarId(pub hir::HirId);\n \n /// A THIR expression."}, {"sha": "527dbd1cd090aa71ebdf677c498a3a93133903a9", "filename": "compiler/rustc_middle/src/thir/abstract_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -42,7 +42,7 @@ impl From<ErrorGuaranteed> for NotConstEvaluatable {\n     }\n }\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     NotConstEvaluatable,\n }\n "}, {"sha": "6d4af8bea628100b74e7c58f97b14a35289e428b", "filename": "compiler/rustc_middle/src/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -390,7 +390,7 @@ impl<'tcx> chalk_ir::interner::HasInterner for RustInterner<'tcx> {\n }\n \n /// A chalk environment and goal.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable, TypeVisitable)]\n pub struct ChalkEnvironmentAndGoal<'tcx> {\n     pub environment: &'tcx ty::List<ty::Predicate<'tcx>>,\n     pub goal: ty::Predicate<'tcx>,"}, {"sha": "eee44df8645efedadbc4ae6d1f5555324351d367", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -523,7 +523,7 @@ pub struct DerivedObligationCause<'tcx> {\n     pub parent_code: InternedObligationCauseCode<'tcx>,\n }\n \n-#[derive(Clone, Debug, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, TypeFoldable, TypeVisitable, Lift)]\n pub enum SelectionError<'tcx> {\n     /// The trait is not implemented.\n     Unimplemented,\n@@ -592,7 +592,8 @@ pub type SelectionResult<'tcx, T> = Result<Option<T>, SelectionError<'tcx>>;\n /// ### The type parameter `N`\n ///\n /// See explanation on `ImplSourceUserDefinedData`.\n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum ImplSource<'tcx, N> {\n     /// ImplSource identifying a particular impl.\n     UserDefined(ImplSourceUserDefinedData<'tcx, N>),\n@@ -753,14 +754,16 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n /// is `Obligation`, as one might expect. During codegen, however, this\n /// is `()`, because codegen only requires a shallow resolution of an\n /// impl, and nested obligations are satisfied later.\n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceUserDefinedData<'tcx, N> {\n     pub impl_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceGeneratorData<'tcx, N> {\n     pub generator_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n@@ -769,7 +772,8 @@ pub struct ImplSourceGeneratorData<'tcx, N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceClosureData<'tcx, N> {\n     pub closure_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n@@ -778,13 +782,15 @@ pub struct ImplSourceClosureData<'tcx, N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceAutoImplData<N> {\n     pub trait_def_id: DefId,\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceTraitUpcastingData<'tcx, N> {\n     /// `Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.\n     pub upcast_trait_ref: ty::PolyTraitRef<'tcx>,\n@@ -798,12 +804,14 @@ pub struct ImplSourceTraitUpcastingData<'tcx, N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceBuiltinData<N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(PartialEq, Eq, Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(PartialEq, Eq, Clone, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceObjectData<'tcx, N> {\n     /// `Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.\n     pub upcast_trait_ref: ty::PolyTraitRef<'tcx>,\n@@ -817,7 +825,8 @@ pub struct ImplSourceObjectData<'tcx, N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceFnPointerData<'tcx, N> {\n     pub fn_ty: Ty<'tcx>,\n     pub nested: Vec<N>,\n@@ -830,12 +839,14 @@ pub struct ImplSourceDiscriminantKindData;\n #[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]\n pub struct ImplSourcePointeeData;\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceConstDestructData<N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceTraitAliasData<'tcx, N> {\n     pub alias_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,"}, {"sha": "937b166d484b388c7bea7114e321bab4aeab6b59", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -24,7 +24,8 @@ pub mod type_op {\n     use rustc_hir::def_id::DefId;\n     use std::fmt;\n \n-    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n+    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, Lift)]\n+    #[derive(TypeFoldable, TypeVisitable)]\n     pub struct AscribeUserType<'tcx> {\n         pub mir_ty: Ty<'tcx>,\n         pub def_id: DefId,\n@@ -37,19 +38,22 @@ pub mod type_op {\n         }\n     }\n \n-    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n+    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, Lift)]\n+    #[derive(TypeFoldable, TypeVisitable)]\n     pub struct Eq<'tcx> {\n         pub a: Ty<'tcx>,\n         pub b: Ty<'tcx>,\n     }\n \n-    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n+    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, Lift)]\n+    #[derive(TypeFoldable, TypeVisitable)]\n     pub struct Subtype<'tcx> {\n         pub sub: Ty<'tcx>,\n         pub sup: Ty<'tcx>,\n     }\n \n-    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n+    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, Lift)]\n+    #[derive(TypeFoldable, TypeVisitable)]\n     pub struct ProvePredicate<'tcx> {\n         pub predicate: Predicate<'tcx>,\n     }\n@@ -60,7 +64,8 @@ pub mod type_op {\n         }\n     }\n \n-    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n+    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, Lift)]\n+    #[derive(TypeFoldable, TypeVisitable)]\n     pub struct Normalize<T> {\n         pub value: T,\n     }\n@@ -107,7 +112,7 @@ impl<'tcx> From<TypeError<'tcx>> for NoSolution {\n     }\n }\n \n-#[derive(Clone, Debug, Default, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, Default, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct DropckOutlivesResult<'tcx> {\n     pub kinds: Vec<GenericArg<'tcx>>,\n     pub overflows: Vec<Ty<'tcx>>,\n@@ -208,7 +213,7 @@ pub struct MethodAutoderefBadTy<'tcx> {\n }\n \n /// Result from the `normalize_projection_ty` query.\n-#[derive(Clone, Debug, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct NormalizationResult<'tcx> {\n     /// Result of normalization.\n     pub normalized_ty: Ty<'tcx>,\n@@ -221,7 +226,7 @@ pub struct NormalizationResult<'tcx> {\n /// case they are called implied bounds). They are fed to the\n /// `OutlivesEnv` which in turn is supplied to the region checker and\n /// other parts of the inference system.\n-#[derive(Clone, Debug, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, TypeFoldable, TypeVisitable, Lift)]\n pub enum OutlivesBound<'tcx> {\n     RegionSubRegion(ty::Region<'tcx>, ty::Region<'tcx>),\n     RegionSubParam(ty::Region<'tcx>, ty::ParamTy),"}, {"sha": "34703b6282042d1a96754e9ba1307bc29d9de09c", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -103,7 +103,7 @@ pub type EvaluationCache<'tcx> = Cache<\n /// required for associated types to work in default impls, as the bounds\n /// are visible both as projection bounds and as where-clauses from the\n /// parameter environment.\n-#[derive(PartialEq, Eq, Debug, Clone, TypeFoldable)]\n+#[derive(PartialEq, Eq, Debug, Clone, TypeFoldable, TypeVisitable)]\n pub enum SelectionCandidate<'tcx> {\n     BuiltinCandidate {\n         /// `false` if there are no *further* obligations.\n@@ -283,7 +283,7 @@ impl From<ErrorGuaranteed> for OverflowError {\n     }\n }\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     OverflowError,\n }\n "}, {"sha": "3c1d0061ae1279c7ea281d2eb2f38744b3995de7", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,5 +1,5 @@\n use crate::ty::fast_reject::SimplifiedType;\n-use crate::ty::fold::TypeFoldable;\n+use crate::ty::visit::TypeVisitable;\n use crate::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::ErrorGuaranteed;"}, {"sha": "8f1a1564fc8e87863916c544b107a372c7d38d51", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -129,7 +129,7 @@ impl<N: fmt::Debug> fmt::Debug for traits::ImplSourceConstDestructData<N> {\n ///////////////////////////////////////////////////////////////////////////\n // Lift implementations\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     super::IfExpressionCause,\n     super::ImplSourceDiscriminantKindData,\n     super::ImplSourcePointeeData,"}, {"sha": "d36cf2fe3f8d050da22ebbb93513e873b201bf28", "filename": "compiler/rustc_middle/src/ty/adjustment.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -77,7 +77,7 @@ pub enum PointerCast {\n ///    At some point, of course, `Box` should move out of the compiler, in which\n ///    case this is analogous to transforming a struct. E.g., `Box<[i32; 4]>` ->\n ///    `Box<[i32]>` is an `Adjust::Unsize` with the target `Box<[i32]>`.\n-#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub struct Adjustment<'tcx> {\n     pub kind: Adjust<'tcx>,\n     pub target: Ty<'tcx>,\n@@ -89,7 +89,7 @@ impl<'tcx> Adjustment<'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub enum Adjust<'tcx> {\n     /// Go from ! to any type.\n     NeverToAny,\n@@ -107,7 +107,8 @@ pub enum Adjust<'tcx> {\n /// call, with the signature `&'a T -> &'a U` or `&'a mut T -> &'a mut U`.\n /// The target type is `U` in both cases, with the region and mutability\n /// being those shared by both the receiver and the returned reference.\n-#[derive(Copy, Clone, PartialEq, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, PartialEq, Debug, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct OverloadedDeref<'tcx> {\n     pub region: ty::Region<'tcx>,\n     pub mutbl: hir::Mutability,\n@@ -165,7 +166,8 @@ impl From<AutoBorrowMutability> for hir::Mutability {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, PartialEq, Debug, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum AutoBorrow<'tcx> {\n     /// Converts from T to &T.\n     Ref(ty::Region<'tcx>, AutoBorrowMutability),"}, {"sha": "3d65429f2e53cd97dd8643d525577af51160f902", "filename": "compiler/rustc_middle/src/ty/binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fbinding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fbinding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fbinding.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -8,7 +8,7 @@ pub enum BindingMode {\n     BindByValue(Mutability),\n }\n \n-TrivialTypeFoldableAndLiftImpls! { BindingMode, }\n+TrivialTypeTraversalAndLiftImpls! { BindingMode, }\n \n impl BindingMode {\n     pub fn convert(ba: BindingAnnotation) -> BindingMode {"}, {"sha": "f5ce43f3afb69bbc0f13f25c48f682a4e3d2bb15", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -18,26 +18,17 @@ use self::BorrowKind::*;\n // This represents accessing self in the closure structure\n pub const CAPTURE_STRUCT_LOCAL: mir::Local = mir::Local::from_u32(1);\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    TyEncodable,\n-    TyDecodable,\n-    TypeFoldable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct UpvarPath {\n     pub hir_id: hir::HirId,\n }\n \n /// Upvars do not get their own `NodeId`. Instead, we use the pair of\n /// the original var ID (that is, the root variable that is referenced\n /// by the upvar) and the ID of the closure expression.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct UpvarId {\n     pub var_path: UpvarPath,\n     pub closure_expr_id: LocalDefId,\n@@ -51,7 +42,8 @@ impl UpvarId {\n \n /// Information describing the capture of an upvar. This is computed\n /// during `typeck`, specifically by `regionck`.\n-#[derive(PartialEq, Clone, Debug, Copy, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n+#[derive(PartialEq, Clone, Debug, Copy, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum UpvarCapture {\n     /// Upvar is captured by value. This is always true when the\n     /// closure is labeled `move`, but can also be true in other cases\n@@ -139,7 +131,8 @@ impl<'tcx> ClosureKind {\n }\n \n /// A composite describing a `Place` that is captured by a closure.\n-#[derive(PartialEq, Clone, Debug, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n+#[derive(PartialEq, Clone, Debug, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct CapturedPlace<'tcx> {\n     /// The `Place` that is captured.\n     pub place: HirPlace<'tcx>,\n@@ -284,7 +277,8 @@ pub fn is_ancestor_or_same_capture(\n /// Part of `MinCaptureInformationMap`; describes the capture kind (&, &mut, move)\n /// for a particular capture as well as identifying the part of the source code\n /// that triggered this capture to occur.\n-#[derive(PartialEq, Clone, Debug, Copy, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n+#[derive(PartialEq, Clone, Debug, Copy, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct CaptureInfo {\n     /// Expr Id pointing to use that resulted in selecting the current capture kind\n     ///\n@@ -362,7 +356,8 @@ pub fn place_to_string_for_capture<'tcx>(tcx: TyCtxt<'tcx>, place: &HirPlace<'tc\n     curr_string\n }\n \n-#[derive(Clone, PartialEq, Debug, TyEncodable, TyDecodable, TypeFoldable, Copy, HashStable)]\n+#[derive(Clone, PartialEq, Debug, TyEncodable, TyDecodable, Copy, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum BorrowKind {\n     /// Data must be immutable and is aliasable.\n     ImmBorrow,"}, {"sha": "a4e7a12bba3232b5526b7ea107c6c38e401d00a2", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -2,7 +2,7 @@ use crate::mir::interpret::LitToConstInput;\n use crate::mir::ConstantKind;\n use crate::ty::{\n     self, InlineConstSubsts, InlineConstSubstsParts, InternalSubsts, ParamEnv, ParamEnvAnd, Ty,\n-    TyCtxt, TypeFoldable,\n+    TyCtxt, TypeVisitable,\n };\n use rustc_data_structures::intern::Interned;\n use rustc_errors::ErrorGuaranteed;"}, {"sha": "cb0137d2e5e09c8b8f84cf5dee284db3873b0113", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -4,7 +4,7 @@ use crate::mir::interpret::{AllocId, ConstValue, Scalar};\n use crate::mir::Promoted;\n use crate::ty::subst::{InternalSubsts, SubstsRef};\n use crate::ty::ParamEnv;\n-use crate::ty::{self, TyCtxt, TypeFoldable};\n+use crate::ty::{self, TyCtxt, TypeVisitable};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;"}, {"sha": "1468e1407ffb1cc63ba4b49cfc625d30a80bf40c", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -390,7 +390,7 @@ impl<'a, V> LocalTableInContextMut<'a, V> {\n /// Here, we would store the type `T`, the span of the value `x`, the \"scope-span\" for\n /// the scope that contains `x`, the expr `T` evaluated from, and the span of `foo.await`.\n #[derive(TyEncodable, TyDecodable, Clone, Debug, Eq, Hash, PartialEq, HashStable)]\n-#[derive(TypeFoldable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct GeneratorInteriorTypeCause<'tcx> {\n     /// Type of the captured binding.\n     pub ty: Ty<'tcx>,\n@@ -871,7 +871,7 @@ rustc_index::newtype_index! {\n pub type CanonicalUserTypeAnnotations<'tcx> =\n     IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;\n \n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct CanonicalUserTypeAnnotation<'tcx> {\n     pub user_ty: CanonicalUserType<'tcx>,\n     pub span: Span,\n@@ -931,7 +931,7 @@ impl<'tcx> CanonicalUserType<'tcx> {\n /// from constants that are named via paths, like `Foo::<A>::new` and\n /// so forth.\n #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable, Lift)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub enum UserType<'tcx> {\n     Ty(Ty<'tcx>),\n "}, {"sha": "25bc6dc6167845e052575a5fffb833a4116cad3e", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -3,8 +3,8 @@\n use std::ops::ControlFlow;\n \n use crate::ty::{\n-    fold::TypeFoldable, Const, ConstKind, DefIdTree, ExistentialPredicate, InferTy,\n-    PolyTraitPredicate, Ty, TyCtxt, TypeSuperFoldable, TypeVisitor,\n+    visit::TypeVisitable, Const, ConstKind, DefIdTree, ExistentialPredicate, InferTy,\n+    PolyTraitPredicate, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n };\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -87,7 +87,7 @@ pub trait IsSuggestable<'tcx> {\n \n impl<'tcx, T> IsSuggestable<'tcx> for T\n where\n-    T: TypeFoldable<'tcx>,\n+    T: TypeVisitable<'tcx>,\n {\n     fn is_suggestable(self, tcx: TyCtxt<'tcx>) -> bool {\n         self.visit_with(&mut IsSuggestableVisitor { tcx }).is_continue()"}, {"sha": "f39fa363a160ed8ef4c15c4eefc8d93b5b61180f", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,5 +1,6 @@\n use crate::mir;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use crate::ty::visit::TypeVisitable;\n use crate::ty::{self, Ty, TyCtxt, TypeFlags};\n \n pub(super) fn provide(providers: &mut ty::query::Providers) {"}, {"sha": "9796b152911b7ffa136d5875c252d04e4895d0ba", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -13,7 +13,7 @@ use rustc_target::spec::abi;\n use std::borrow::Cow;\n use std::fmt;\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable, TypeVisitable)]\n pub struct ExpectedFound<T> {\n     pub expected: T,\n     pub found: T,\n@@ -30,7 +30,7 @@ impl<T> ExpectedFound<T> {\n }\n \n // Data structures used in type unification\n-#[derive(Clone, Debug, TypeFoldable)]\n+#[derive(Clone, Debug, TypeFoldable, TypeVisitable)]\n pub enum TypeError<'tcx> {\n     Mismatch,\n     ConstnessMismatch(ExpectedFound<ty::BoundConstness>),"}, {"sha": "8d019a3bad8cc7d4c263b507122c41c34a7806f0", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,6 +1,6 @@\n use crate::mir::Mutability;\n use crate::ty::subst::GenericArgKind;\n-use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, Ty, TyCtxt, TypeVisitable};\n use rustc_hir::def_id::DefId;\n use std::fmt::Debug;\n use std::hash::Hash;"}, {"sha": "f8893ae29f58ee8eb0f7ae8f9e1d93fece10a516", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 35, "deletions": 733, "changes": 768, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,76 +1,60 @@\n-//! A generalized traversal mechanism for complex data structures that contain\n-//! type information.\n+//! A folding traversal mechanism for complex data structures that contain type\n+//! information.\n //!\n-//! There are two types of traversal.\n-//! - Folding. This is a modifying traversal. It consumes the data structure,\n-//!   producing a (possibly) modified version of it. Both fallible and\n-//!   infallible versions are available. The name is potentially\n-//!   confusing, because this traversal is more like `Iterator::map` than\n-//!   `Iterator::fold`.\n-//! - Visiting. This is a read-only traversal of the data structure.\n+//! This is a modifying traversal. It consumes the data structure, producing a\n+//! (possibly) modified version of it. Both fallible and infallible versions are\n+//! available. The name is potentially confusing, because this traversal is more\n+//! like `Iterator::map` than `Iterator::fold`.\n //!\n-//! These traversals have limited flexibility. Only a small number of \"types of\n+//! This traversal has limited flexibility. Only a small number of \"types of\n //! interest\" within the complex data structures can receive custom\n-//! modification (when folding) or custom visitation (when visiting). These are\n-//! the ones containing the most important type-related information, such as\n-//! `Ty`, `Predicate`, `Region`, and `Const`.\n+//! modification. These are the ones containing the most important type-related\n+//! information, such as `Ty`, `Predicate`, `Region`, and `Const`.\n //!\n-//! There are three traits involved in each traversal type.\n-//! - `TypeFoldable`. This is implemented once for many types. This includes\n-//!   both:\n+//! There are three groups of traits involved in each traversal.\n+//! - `TypeFoldable`. This is implemented once for many types, including:\n //!   - Types of interest, for which the the methods delegate to the\n-//!     folder/visitor.\n+//!     folder.\n //!   - All other types, including generic containers like `Vec` and `Option`.\n-//!     It defines a \"skeleton\" of how they should be traversed, for both\n-//!     folding and visiting.\n+//!     It defines a \"skeleton\" of how they should be folded.\n //! - `TypeSuperFoldable`. This is implemented only for each type of interest,\n-//!   and defines the traversal \"skeleton\" for these types.\n-//! - `TypeFolder`/`FallibleTypeFolder` (for infallible/fallible folding\n-//!   traversals) or `TypeVisitor` (for visiting traversals). One of these is\n-//!   implemented for each folder/visitor. This defines how types of interest\n-//!   are folded/visited.\n+//!   and defines the folding \"skeleton\" for these types.\n+//! - `TypeFolder`/`FallibleTypeFolder. One of these is implemented for each\n+//!   folder. This defines how types of interest are folded.\n //!\n-//! This means each traversal is a mixture of (a) generic traversal operations,\n-//! and (b) custom fold/visit operations that are specific to the\n-//! folder/visitor.\n+//! This means each fold is a mixture of (a) generic folding operations, and (b)\n+//! custom fold operations that are specific to the folder.\n //! - The `TypeFoldable` impls handle most of the traversal, and call into\n-//!   `TypeFolder`/`FallibleTypeFolder`/`TypeVisitor` when they encounter a\n-//!   type of interest.\n-//! - A `TypeFolder`/`FallibleTypeFolder`/`TypeVisitor` may call into another\n-//!   `TypeFoldable` impl, because some of the types of interest are recursive\n-//!   and can contain other types of interest.\n-//! - A `TypeFolder`/`FallibleTypeFolder`/`TypeVisitor` may also call into\n-//!   a `TypeSuperFoldable` impl, because each folder/visitor might provide\n-//!   custom handling only for some types of interest, or only for some\n-//!   variants of each type of interest, and then use default traversal for the\n-//!   remaining cases.\n+//!   `TypeFolder`/`FallibleTypeFolder` when they encounter a type of interest.\n+//! - A `TypeFolder`/`FallibleTypeFolder` may call into another `TypeFoldable`\n+//!   impl, because some of the types of interest are recursive and can contain\n+//!   other types of interest.\n+//! - A `TypeFolder`/`FallibleTypeFolder` may also call into a `TypeSuperFoldable`\n+//!   impl, because each folder might provide custom handling only for some types\n+//!   of interest, or only for some variants of each type of interest, and then\n+//!   use default traversal for the remaining cases.\n //!\n //! For example, if you have `struct S(Ty, U)` where `S: TypeFoldable` and `U:\n-//! TypeFoldable`, and an instance `s = S(ty, u)`, it would be visited like so:\n+//! TypeFoldable`, and an instance `s = S(ty, u)`, it would be folded like so:\n //! ```text\n-//! s.visit_with(visitor) calls\n-//! - ty.visit_with(visitor) calls\n-//!   - visitor.visit_ty(ty) may call\n-//!     - ty.super_visit_with(visitor)\n-//! - u.visit_with(visitor)\n+//! s.fold_with(folder) calls\n+//! - ty.fold_with(folder) calls\n+//!   - folder.fold_ty(ty) may call\n+//!     - ty.super_fold_with(folder)\n+//! - u.fold_with(folder)\n //! ```\n use crate::mir;\n-use crate::ty::{self, flags::FlagComputation, Binder, Ty, TyCtxt, TypeFlags};\n-use rustc_errors::ErrorGuaranteed;\n+use crate::ty::{self, Binder, Ty, TyCtxt, TypeVisitable};\n use rustc_hir::def_id::DefId;\n \n-use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::sso::SsoHashSet;\n use std::collections::BTreeMap;\n-use std::fmt;\n-use std::ops::ControlFlow;\n \n-/// This trait is implemented for every type that can be folded/visited,\n+/// This trait is implemented for every type that can be folded,\n /// providing the skeleton of the traversal.\n ///\n /// To implement this conveniently, use the derive macro located in\n /// `rustc_macros`.\n-pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n+pub trait TypeFoldable<'tcx>: TypeVisitable<'tcx> {\n     /// The entry point for folding. To fold a value `t` with a folder `f`\n     /// call: `t.try_fold_with(f)`.\n     ///\n@@ -89,115 +73,6 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n         self.try_fold_with(folder).into_ok()\n     }\n-\n-    /// The entry point for visiting. To visit a value `t` with a visitor `v`\n-    /// call: `t.visit_with(v)`.\n-    ///\n-    /// For most types, this just traverses the value, calling `visit_with` on\n-    /// each field/element.\n-    ///\n-    /// For types of interest (such as `Ty`), the implementation of this method\n-    /// that calls a visitor method specifically for that type (such as\n-    /// `V::visit_ty`). This is where control transfers from `TypeFoldable` to\n-    /// `TypeVisitor`.\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n-\n-    /// Returns `true` if `self` has any late-bound regions that are either\n-    /// bound by `binder` or bound by some binder outside of `binder`.\n-    /// If `binder` is `ty::INNERMOST`, this indicates whether\n-    /// there are any late-bound regions that appear free.\n-    fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {\n-        self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()\n-    }\n-\n-    /// Returns `true` if this `self` has any regions that escape `binder` (and\n-    /// hence are not bound by it).\n-    fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {\n-        self.has_vars_bound_at_or_above(binder.shifted_in(1))\n-    }\n-\n-    fn has_escaping_bound_vars(&self) -> bool {\n-        self.has_vars_bound_at_or_above(ty::INNERMOST)\n-    }\n-\n-    #[instrument(level = \"trace\")]\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)\n-    }\n-    fn has_projections(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_PROJECTION)\n-    }\n-    fn has_opaque_types(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)\n-    }\n-    fn references_error(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_ERROR)\n-    }\n-    fn error_reported(&self) -> Option<ErrorGuaranteed> {\n-        if self.references_error() {\n-            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n-        } else {\n-            None\n-        }\n-    }\n-    fn has_param_types_or_consts(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)\n-    }\n-    fn has_infer_regions(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_RE_INFER)\n-    }\n-    fn has_infer_types(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_TY_INFER)\n-    }\n-    fn has_infer_types_or_consts(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)\n-    }\n-    fn needs_infer(&self) -> bool {\n-        self.has_type_flags(TypeFlags::NEEDS_INFER)\n-    }\n-    fn has_placeholders(&self) -> bool {\n-        self.has_type_flags(\n-            TypeFlags::HAS_RE_PLACEHOLDER\n-                | TypeFlags::HAS_TY_PLACEHOLDER\n-                | TypeFlags::HAS_CT_PLACEHOLDER,\n-        )\n-    }\n-    fn needs_subst(&self) -> bool {\n-        self.has_type_flags(TypeFlags::NEEDS_SUBST)\n-    }\n-    /// \"Free\" regions in this context means that it has any region\n-    /// that is not (a) erased or (b) late-bound.\n-    fn has_free_regions(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)\n-    }\n-\n-    fn has_erased_regions(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_RE_ERASED)\n-    }\n-\n-    /// True if there are any un-erased free regions.\n-    fn has_erasable_regions(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)\n-    }\n-\n-    /// Indicates whether this value references only 'global'\n-    /// generic parameters that are the same regardless of what fn we are\n-    /// in. This is used for caching.\n-    fn is_global(&self) -> bool {\n-        !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)\n-    }\n-\n-    /// True if there are any late-bound regions\n-    fn has_late_bound_regions(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)\n-    }\n-\n-    /// Indicates whether this value still has parameters/placeholders/inference variables\n-    /// which could be replaced later, in a way that would change the results of `impl`\n-    /// specialization.\n-    fn still_further_specializable(&self) -> bool {\n-        self.has_type_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE)\n-    }\n }\n \n // This trait is implemented for types of interest.\n@@ -219,14 +94,6 @@ pub trait TypeSuperFoldable<'tcx>: TypeFoldable<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n         self.try_super_fold_with(folder).into_ok()\n     }\n-\n-    /// Provides a default visit for a type of interest. This should only be\n-    /// called within `TypeVisitor` methods, when a non-custom traversal is\n-    /// desired for the value of the type of interest passed to that method.\n-    /// For example, in `MyVisitor::visit_ty(ty)`, it is valid to call\n-    /// `ty.super_visit_with(self)`, but any other visiting should be done\n-    /// with `xyz.visit_with(self)`.\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n }\n \n /// This trait is implemented for every infallible folding traversal. There is\n@@ -376,44 +243,6 @@ where\n     }\n }\n \n-/// This trait is implemented for every visiting traversal. There is a visit\n-/// method defined for every type of interest. Each such method has a default\n-/// that recurses into the type's fields in a non-custom fashion.\n-pub trait TypeVisitor<'tcx>: Sized {\n-    type BreakTy = !;\n-\n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n-        &mut self,\n-        t: &Binder<'tcx, T>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        t.super_visit_with(self)\n-    }\n-\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        t.super_visit_with(self)\n-    }\n-\n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        r.super_visit_with(self)\n-    }\n-\n-    fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        c.super_visit_with(self)\n-    }\n-\n-    fn visit_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        uv.super_visit_with(self)\n-    }\n-\n-    fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        p.super_visit_with(self)\n-    }\n-\n-    fn visit_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        c.super_visit_with(self)\n-    }\n-}\n-\n ///////////////////////////////////////////////////////////////////////////\n // Some sample folders\n \n@@ -472,99 +301,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     {\n         value.fold_with(&mut RegionFolder::new(self, &mut f))\n     }\n-\n-    /// Invoke `callback` on every region appearing free in `value`.\n-    pub fn for_each_free_region(\n-        self,\n-        value: &impl TypeFoldable<'tcx>,\n-        mut callback: impl FnMut(ty::Region<'tcx>),\n-    ) {\n-        self.any_free_region_meets(value, |r| {\n-            callback(r);\n-            false\n-        });\n-    }\n-\n-    /// Returns `true` if `callback` returns true for every region appearing free in `value`.\n-    pub fn all_free_regions_meet(\n-        self,\n-        value: &impl TypeFoldable<'tcx>,\n-        mut callback: impl FnMut(ty::Region<'tcx>) -> bool,\n-    ) -> bool {\n-        !self.any_free_region_meets(value, |r| !callback(r))\n-    }\n-\n-    /// Returns `true` if `callback` returns true for some region appearing free in `value`.\n-    pub fn any_free_region_meets(\n-        self,\n-        value: &impl TypeFoldable<'tcx>,\n-        callback: impl FnMut(ty::Region<'tcx>) -> bool,\n-    ) -> bool {\n-        struct RegionVisitor<F> {\n-            /// The index of a binder *just outside* the things we have\n-            /// traversed. If we encounter a bound region bound by this\n-            /// binder or one outer to it, it appears free. Example:\n-            ///\n-            /// ```ignore (illustrative)\n-            ///       for<'a> fn(for<'b> fn(), T)\n-            /// // ^          ^          ^     ^\n-            /// // |          |          |     | here, would be shifted in 1\n-            /// // |          |          | here, would be shifted in 2\n-            /// // |          | here, would be `INNERMOST` shifted in by 1\n-            /// // | here, initially, binder would be `INNERMOST`\n-            /// ```\n-            ///\n-            /// You see that, initially, *any* bound value is free,\n-            /// because we've not traversed any binders. As we pass\n-            /// through a binder, we shift the `outer_index` by 1 to\n-            /// account for the new binder that encloses us.\n-            outer_index: ty::DebruijnIndex,\n-            callback: F,\n-        }\n-\n-        impl<'tcx, F> TypeVisitor<'tcx> for RegionVisitor<F>\n-        where\n-            F: FnMut(ty::Region<'tcx>) -> bool,\n-        {\n-            type BreakTy = ();\n-\n-            fn visit_binder<T: TypeFoldable<'tcx>>(\n-                &mut self,\n-                t: &Binder<'tcx, T>,\n-            ) -> ControlFlow<Self::BreakTy> {\n-                self.outer_index.shift_in(1);\n-                let result = t.super_visit_with(self);\n-                self.outer_index.shift_out(1);\n-                result\n-            }\n-\n-            fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                match *r {\n-                    ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {\n-                        ControlFlow::CONTINUE\n-                    }\n-                    _ => {\n-                        if (self.callback)(r) {\n-                            ControlFlow::BREAK\n-                        } else {\n-                            ControlFlow::CONTINUE\n-                        }\n-                    }\n-                }\n-            }\n-\n-            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                // We're only interested in types involving regions\n-                if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {\n-                    ty.super_visit_with(self)\n-                } else {\n-                    ControlFlow::CONTINUE\n-                }\n-            }\n-        }\n-\n-        value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()\n-    }\n }\n \n /// Folds over the substructure of a type, visiting its component\n@@ -861,45 +597,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         )\n     }\n \n-    /// Returns a set of all late-bound regions that are constrained\n-    /// by `value`, meaning that if we instantiate those LBR with\n-    /// variables and equate `value` with something else, those\n-    /// variables will also be equated.\n-    pub fn collect_constrained_late_bound_regions<T>(\n-        self,\n-        value: &Binder<'tcx, T>,\n-    ) -> FxHashSet<ty::BoundRegionKind>\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        self.collect_late_bound_regions(value, true)\n-    }\n-\n-    /// Returns a set of all late-bound regions that appear in `value` anywhere.\n-    pub fn collect_referenced_late_bound_regions<T>(\n-        self,\n-        value: &Binder<'tcx, T>,\n-    ) -> FxHashSet<ty::BoundRegionKind>\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        self.collect_late_bound_regions(value, false)\n-    }\n-\n-    fn collect_late_bound_regions<T>(\n-        self,\n-        value: &Binder<'tcx, T>,\n-        just_constraint: bool,\n-    ) -> FxHashSet<ty::BoundRegionKind>\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        let mut collector = LateBoundRegionsCollector::new(just_constraint);\n-        let result = value.as_ref().skip_binder().visit_with(&mut collector);\n-        assert!(result.is_continue()); // should never have stopped early\n-        collector.regions\n-    }\n-\n     /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also\n     /// method lookup and a few other places where precise region relationships are not required.\n     pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T\n@@ -940,103 +637,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-pub struct ValidateBoundVars<'tcx> {\n-    bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n-    binder_index: ty::DebruijnIndex,\n-    // We may encounter the same variable at different levels of binding, so\n-    // this can't just be `Ty`\n-    visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,\n-}\n-\n-impl<'tcx> ValidateBoundVars<'tcx> {\n-    pub fn new(bound_vars: &'tcx ty::List<ty::BoundVariableKind>) -> Self {\n-        ValidateBoundVars {\n-            bound_vars,\n-            binder_index: ty::INNERMOST,\n-            visited: SsoHashSet::default(),\n-        }\n-    }\n-}\n-\n-impl<'tcx> TypeVisitor<'tcx> for ValidateBoundVars<'tcx> {\n-    type BreakTy = ();\n-\n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n-        &mut self,\n-        t: &Binder<'tcx, T>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        self.binder_index.shift_in(1);\n-        let result = t.super_visit_with(self);\n-        self.binder_index.shift_out(1);\n-        result\n-    }\n-\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if t.outer_exclusive_binder() < self.binder_index\n-            || !self.visited.insert((self.binder_index, t))\n-        {\n-            return ControlFlow::BREAK;\n-        }\n-        match *t.kind() {\n-            ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n-                if self.bound_vars.len() <= bound_ty.var.as_usize() {\n-                    bug!(\"Not enough bound vars: {:?} not found in {:?}\", t, self.bound_vars);\n-                }\n-                let list_var = self.bound_vars[bound_ty.var.as_usize()];\n-                match list_var {\n-                    ty::BoundVariableKind::Ty(kind) => {\n-                        if kind != bound_ty.kind {\n-                            bug!(\n-                                \"Mismatched type kinds: {:?} doesn't var in list {:?}\",\n-                                bound_ty.kind,\n-                                list_var\n-                            );\n-                        }\n-                    }\n-                    _ => {\n-                        bug!(\"Mismatched bound variable kinds! Expected type, found {:?}\", list_var)\n-                    }\n-                }\n-            }\n-\n-            _ => (),\n-        };\n-\n-        t.super_visit_with(self)\n-    }\n-\n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match *r {\n-            ty::ReLateBound(index, br) if index == self.binder_index => {\n-                if self.bound_vars.len() <= br.var.as_usize() {\n-                    bug!(\"Not enough bound vars: {:?} not found in {:?}\", br, self.bound_vars);\n-                }\n-                let list_var = self.bound_vars[br.var.as_usize()];\n-                match list_var {\n-                    ty::BoundVariableKind::Region(kind) => {\n-                        if kind != br.kind {\n-                            bug!(\n-                                \"Mismatched region kinds: {:?} doesn't match var ({:?}) in list ({:?})\",\n-                                br.kind,\n-                                list_var,\n-                                self.bound_vars\n-                            );\n-                        }\n-                    }\n-                    _ => bug!(\n-                        \"Mismatched bound variable kinds! Expected region, found {:?}\",\n-                        list_var\n-                    ),\n-                }\n-            }\n-\n-            _ => (),\n-        };\n-\n-        r.super_visit_with(self)\n-    }\n-}\n-\n ///////////////////////////////////////////////////////////////////////////\n // Shifter\n //\n@@ -1141,301 +741,3 @@ where\n \n     value.fold_with(&mut Shifter::new(tcx, amount))\n }\n-\n-#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n-struct FoundEscapingVars;\n-\n-/// An \"escaping var\" is a bound var whose binder is not part of `t`. A bound var can be a\n-/// bound region or a bound type.\n-///\n-/// So, for example, consider a type like the following, which has two binders:\n-///\n-///    for<'a> fn(x: for<'b> fn(&'a isize, &'b isize))\n-///    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ outer scope\n-///                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~  inner scope\n-///\n-/// This type has *bound regions* (`'a`, `'b`), but it does not have escaping regions, because the\n-/// binders of both `'a` and `'b` are part of the type itself. However, if we consider the *inner\n-/// fn type*, that type has an escaping region: `'a`.\n-///\n-/// Note that what I'm calling an \"escaping var\" is often just called a \"free var\". However,\n-/// we already use the term \"free var\". It refers to the regions or types that we use to represent\n-/// bound regions or type params on a fn definition while we are type checking its body.\n-///\n-/// To clarify, conceptually there is no particular difference between\n-/// an \"escaping\" var and a \"free\" var. However, there is a big\n-/// difference in practice. Basically, when \"entering\" a binding\n-/// level, one is generally required to do some sort of processing to\n-/// a bound var, such as replacing it with a fresh/placeholder\n-/// var, or making an entry in the environment to represent the\n-/// scope to which it is attached, etc. An escaping var represents\n-/// a bound var for which this processing has not yet been done.\n-struct HasEscapingVarsVisitor {\n-    /// Anything bound by `outer_index` or \"above\" is escaping.\n-    outer_index: ty::DebruijnIndex,\n-}\n-\n-impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n-    type BreakTy = FoundEscapingVars;\n-\n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n-        &mut self,\n-        t: &Binder<'tcx, T>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        self.outer_index.shift_in(1);\n-        let result = t.super_visit_with(self);\n-        self.outer_index.shift_out(1);\n-        result\n-    }\n-\n-    #[inline]\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        // If the outer-exclusive-binder is *strictly greater* than\n-        // `outer_index`, that means that `t` contains some content\n-        // bound at `outer_index` or above (because\n-        // `outer_exclusive_binder` is always 1 higher than the\n-        // content in `t`). Therefore, `t` has some escaping vars.\n-        if t.outer_exclusive_binder() > self.outer_index {\n-            ControlFlow::Break(FoundEscapingVars)\n-        } else {\n-            ControlFlow::CONTINUE\n-        }\n-    }\n-\n-    #[inline]\n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        // If the region is bound by `outer_index` or anything outside\n-        // of outer index, then it escapes the binders we have\n-        // visited.\n-        if r.bound_at_or_above_binder(self.outer_index) {\n-            ControlFlow::Break(FoundEscapingVars)\n-        } else {\n-            ControlFlow::CONTINUE\n-        }\n-    }\n-\n-    fn visit_const(&mut self, ct: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        // we don't have a `visit_infer_const` callback, so we have to\n-        // hook in here to catch this case (annoying...), but\n-        // otherwise we do want to remember to visit the rest of the\n-        // const, as it has types/regions embedded in a lot of other\n-        // places.\n-        match ct.kind() {\n-            ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {\n-                ControlFlow::Break(FoundEscapingVars)\n-            }\n-            _ => ct.super_visit_with(self),\n-        }\n-    }\n-\n-    #[inline]\n-    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if predicate.outer_exclusive_binder() > self.outer_index {\n-            ControlFlow::Break(FoundEscapingVars)\n-        } else {\n-            ControlFlow::CONTINUE\n-        }\n-    }\n-}\n-\n-#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n-struct FoundFlags;\n-\n-// FIXME: Optimize for checking for infer flags\n-struct HasTypeFlagsVisitor {\n-    flags: ty::TypeFlags,\n-}\n-\n-impl std::fmt::Debug for HasTypeFlagsVisitor {\n-    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        self.flags.fmt(fmt)\n-    }\n-}\n-\n-impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n-    type BreakTy = FoundFlags;\n-\n-    #[inline]\n-    #[instrument(skip(self), level = \"trace\")]\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        let flags = t.flags();\n-        trace!(t.flags=?t.flags());\n-        if flags.intersects(self.flags) {\n-            ControlFlow::Break(FoundFlags)\n-        } else {\n-            ControlFlow::CONTINUE\n-        }\n-    }\n-\n-    #[inline]\n-    #[instrument(skip(self), level = \"trace\")]\n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        let flags = r.type_flags();\n-        trace!(r.flags=?flags);\n-        if flags.intersects(self.flags) {\n-            ControlFlow::Break(FoundFlags)\n-        } else {\n-            ControlFlow::CONTINUE\n-        }\n-    }\n-\n-    #[inline]\n-    #[instrument(level = \"trace\")]\n-    fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        let flags = FlagComputation::for_const(c);\n-        trace!(r.flags=?flags);\n-        if flags.intersects(self.flags) {\n-            ControlFlow::Break(FoundFlags)\n-        } else {\n-            ControlFlow::CONTINUE\n-        }\n-    }\n-\n-    #[inline]\n-    #[instrument(level = \"trace\")]\n-    fn visit_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        let flags = FlagComputation::for_unevaluated_const(uv);\n-        trace!(r.flags=?flags);\n-        if flags.intersects(self.flags) {\n-            ControlFlow::Break(FoundFlags)\n-        } else {\n-            ControlFlow::CONTINUE\n-        }\n-    }\n-\n-    #[inline]\n-    #[instrument(level = \"trace\")]\n-    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        debug!(\n-            \"HasTypeFlagsVisitor: predicate={:?} predicate.flags={:?} self.flags={:?}\",\n-            predicate,\n-            predicate.flags(),\n-            self.flags\n-        );\n-        if predicate.flags().intersects(self.flags) {\n-            ControlFlow::Break(FoundFlags)\n-        } else {\n-            ControlFlow::CONTINUE\n-        }\n-    }\n-}\n-\n-/// Collects all the late-bound regions at the innermost binding level\n-/// into a hash set.\n-struct LateBoundRegionsCollector {\n-    current_index: ty::DebruijnIndex,\n-    regions: FxHashSet<ty::BoundRegionKind>,\n-\n-    /// `true` if we only want regions that are known to be\n-    /// \"constrained\" when you equate this type with another type. In\n-    /// particular, if you have e.g., `&'a u32` and `&'b u32`, equating\n-    /// them constraints `'a == 'b`. But if you have `<&'a u32 as\n-    /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those\n-    /// types may mean that `'a` and `'b` don't appear in the results,\n-    /// so they are not considered *constrained*.\n-    just_constrained: bool,\n-}\n-\n-impl LateBoundRegionsCollector {\n-    fn new(just_constrained: bool) -> Self {\n-        LateBoundRegionsCollector {\n-            current_index: ty::INNERMOST,\n-            regions: Default::default(),\n-            just_constrained,\n-        }\n-    }\n-}\n-\n-impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n-        &mut self,\n-        t: &Binder<'tcx, T>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        self.current_index.shift_in(1);\n-        let result = t.super_visit_with(self);\n-        self.current_index.shift_out(1);\n-        result\n-    }\n-\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        // if we are only looking for \"constrained\" region, we have to\n-        // ignore the inputs to a projection, as they may not appear\n-        // in the normalized form\n-        if self.just_constrained {\n-            if let ty::Projection(..) = t.kind() {\n-                return ControlFlow::CONTINUE;\n-            }\n-        }\n-\n-        t.super_visit_with(self)\n-    }\n-\n-    fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        // if we are only looking for \"constrained\" region, we have to\n-        // ignore the inputs of an unevaluated const, as they may not appear\n-        // in the normalized form\n-        if self.just_constrained {\n-            if let ty::ConstKind::Unevaluated(..) = c.kind() {\n-                return ControlFlow::CONTINUE;\n-            }\n-        }\n-\n-        c.super_visit_with(self)\n-    }\n-\n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if let ty::ReLateBound(debruijn, br) = *r {\n-            if debruijn == self.current_index {\n-                self.regions.insert(br.kind);\n-            }\n-        }\n-        ControlFlow::CONTINUE\n-    }\n-}\n-\n-/// Finds the max universe present\n-pub struct MaxUniverse {\n-    max_universe: ty::UniverseIndex,\n-}\n-\n-impl MaxUniverse {\n-    pub fn new() -> Self {\n-        MaxUniverse { max_universe: ty::UniverseIndex::ROOT }\n-    }\n-\n-    pub fn max_universe(self) -> ty::UniverseIndex {\n-        self.max_universe\n-    }\n-}\n-\n-impl<'tcx> TypeVisitor<'tcx> for MaxUniverse {\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if let ty::Placeholder(placeholder) = t.kind() {\n-            self.max_universe = ty::UniverseIndex::from_u32(\n-                self.max_universe.as_u32().max(placeholder.universe.as_u32()),\n-            );\n-        }\n-\n-        t.super_visit_with(self)\n-    }\n-\n-    fn visit_const(&mut self, c: ty::consts::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if let ty::ConstKind::Placeholder(placeholder) = c.kind() {\n-            self.max_universe = ty::UniverseIndex::from_u32(\n-                self.max_universe.as_u32().max(placeholder.universe.as_u32()),\n-            );\n-        }\n-\n-        c.super_visit_with(self)\n-    }\n-\n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if let ty::RePlaceholder(placeholder) = *r {\n-            self.max_universe = ty::UniverseIndex::from_u32(\n-                self.max_universe.as_u32().max(placeholder.universe.as_u32()),\n-            );\n-        }\n-\n-        ControlFlow::CONTINUE\n-    }\n-}"}, {"sha": "391abdbe84c5af9fbfac581764a2dd1ac1c7e93c", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,7 +1,9 @@\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{InternalSubsts, Subst};\n-use crate::ty::{self, EarlyBinder, SubstsRef, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n+use crate::ty::{\n+    self, EarlyBinder, SubstsRef, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitable,\n+};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::{CrateNum, DefId};\n@@ -25,7 +27,7 @@ pub struct Instance<'tcx> {\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n-#[derive(TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub enum InstanceDef<'tcx> {\n     /// A user-defined callable item.\n     ///"}, {"sha": "eb675444362094431b11bc379df9a2b2fe905676", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -2,7 +2,7 @@ use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir::{GeneratorLayout, GeneratorSavedLocal};\n use crate::ty::normalize_erasing_regions::NormalizationError;\n use crate::ty::subst::Subst;\n-use crate::ty::{self, subst::SubstsRef, EarlyBinder, ReprOptions, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, subst::SubstsRef, EarlyBinder, ReprOptions, Ty, TyCtxt, TypeVisitable};\n use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_hir as hir;"}, {"sha": "3a795af2121d0e409640353eb36da77e0b4f89de", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 25, "deletions": 53, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -9,9 +9,8 @@\n //!\n //! [\"The `ty` module: representing types\"]: https://rustc-dev-guide.rust-lang.org/ty.html\n \n-pub use self::fold::{\n-    FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitor,\n-};\n+pub use self::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable};\n+pub use self::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n pub use self::AssocItemContainer::*;\n pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n@@ -110,6 +109,7 @@ pub mod relate;\n pub mod subst;\n pub mod trait_def;\n pub mod util;\n+pub mod visit;\n pub mod vtable;\n pub mod walk;\n \n@@ -206,32 +206,22 @@ impl MainDefinition {\n /// The \"header\" of an impl is everything outside the body: a Self type, a trait\n /// ref (in the case of a trait impl), and a set of predicates (from the\n /// bounds / where-clauses).\n-#[derive(Clone, Debug, TypeFoldable)]\n+#[derive(Clone, Debug, TypeFoldable, TypeVisitable)]\n pub struct ImplHeader<'tcx> {\n     pub impl_def_id: DefId,\n     pub self_ty: Ty<'tcx>,\n     pub trait_ref: Option<TraitRef<'tcx>>,\n     pub predicates: Vec<Predicate<'tcx>>,\n }\n \n-#[derive(Copy, Clone, Debug, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable)]\n pub enum ImplSubject<'tcx> {\n     Trait(TraitRef<'tcx>),\n     Inherent(Ty<'tcx>),\n }\n \n-#[derive(\n-    Copy,\n-    Clone,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    TyEncodable,\n-    TyDecodable,\n-    HashStable,\n-    Debug,\n-    TypeFoldable\n-)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable, Debug)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum ImplPolarity {\n     /// `impl Trait for Type`\n     Positive,\n@@ -307,18 +297,8 @@ impl fmt::Display for BoundConstness {\n     }\n }\n \n-#[derive(\n-    Clone,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    Copy,\n-    Hash,\n-    TyEncodable,\n-    TyDecodable,\n-    HashStable,\n-    TypeFoldable\n-)]\n+#[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ClosureSizeProfileData<'tcx> {\n     /// Tuple containing the types of closure captures before the feature `capture_disjoint_fields`\n     pub before_feature_tys: Ty<'tcx>,\n@@ -618,7 +598,7 @@ impl rustc_errors::IntoDiagnosticArg for Predicate<'_> {\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub enum PredicateKind<'tcx> {\n     /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be\n     /// the `Self` type of the trait reference and `A`, `B`, and `C`\n@@ -790,7 +770,7 @@ impl<'tcx> Predicate<'tcx> {\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct TraitPredicate<'tcx> {\n     pub trait_ref: TraitRef<'tcx>,\n \n@@ -869,7 +849,7 @@ impl<'tcx> PolyTraitPredicate<'tcx> {\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`\n pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;\n pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;\n@@ -880,7 +860,7 @@ pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicat\n /// whether the `a` type is the type that we should label as \"expected\" when\n /// presenting user diagnostics.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct SubtypePredicate<'tcx> {\n     pub a_is_expected: bool,\n     pub a: Ty<'tcx>,\n@@ -890,15 +870,15 @@ pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;\n \n /// Encodes that we have to coerce *from* the `a` type to the `b` type.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct CoercePredicate<'tcx> {\n     pub a: Ty<'tcx>,\n     pub b: Ty<'tcx>,\n }\n pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub enum Term<'tcx> {\n     Ty(Ty<'tcx>),\n     Const(Const<'tcx>),\n@@ -946,7 +926,7 @@ impl<'tcx> Term<'tcx> {\n /// Form #2 eventually yields one of these `ProjectionPredicate`\n /// instances to normalize the LHS.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct ProjectionPredicate<'tcx> {\n     pub projection_ty: ProjectionTy<'tcx>,\n     pub term: Term<'tcx>,\n@@ -1090,7 +1070,7 @@ impl<'tcx> Predicate<'tcx> {\n /// `[[], [U:Bar<T>]]`. Now if there were some particular reference\n /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],\n /// [usize:Bar<isize>]]`.\n-#[derive(Clone, Debug, TypeFoldable)]\n+#[derive(Clone, Debug, TypeFoldable, TypeVisitable)]\n pub struct InstantiatedPredicates<'tcx> {\n     pub predicates: Vec<Predicate<'tcx>>,\n     pub spans: Vec<Span>,\n@@ -1106,24 +1086,14 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n     }\n }\n \n-#[derive(\n-    Copy,\n-    Clone,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    HashStable,\n-    TyEncodable,\n-    TyDecodable,\n-    TypeFoldable,\n-    Lift\n-)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct OpaqueTypeKey<'tcx> {\n     pub def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n }\n \n-#[derive(Copy, Clone, Debug, TypeFoldable, HashStable, TyEncodable, TyDecodable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable, HashStable, TyEncodable, TyDecodable)]\n pub struct OpaqueHiddenType<'tcx> {\n     /// The span of this particular definition of the opaque type. So\n     /// for example:\n@@ -1259,7 +1229,7 @@ pub type PlaceholderConst<'tcx> = Placeholder<BoundConst<'tcx>>;\n /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.\n /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`\n /// to get the type of `did`.\n-#[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable, Lift, TyEncodable, TyDecodable)]\n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n #[derive(Hash, HashStable)]\n pub struct WithOptConstParam<T> {\n@@ -1415,7 +1385,9 @@ impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n             self.constness().try_fold_with(folder)?,\n         ))\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ParamEnv<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.caller_bounds().visit_with(visitor)?;\n         self.reveal().visit_with(visitor)?;\n@@ -1542,7 +1514,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// `where Box<u32>: Copy`, which are clearly never\n     /// satisfiable. We generally want to behave as if they were true,\n     /// although the surrounding function is never reachable.\n-    pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {\n+    pub fn and<T: TypeVisitable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {\n         match self.reveal() {\n             Reveal::UserFacing => ParamEnvAnd { param_env: self, value },\n \n@@ -1575,7 +1547,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable, TypeVisitable)]\n pub struct ParamEnvAnd<'tcx, T> {\n     pub param_env: ParamEnv<'tcx>,\n     pub value: T,"}, {"sha": "887236c484bcbd84f8c436ca76f04f5c19f33180", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -2,7 +2,7 @@ use crate::mir::interpret::{AllocRange, GlobalAlloc, Pointer, Provenance, Scalar\n use crate::ty::subst::{GenericArg, GenericArgKind, Subst};\n use crate::ty::{\n     self, ConstInt, DefIdTree, ParamConst, ScalarInt, Term, Ty, TyCtxt, TypeFoldable,\n-    TypeSuperFoldable,\n+    TypeSuperFoldable, TypeSuperVisitable, TypeVisitable,\n };\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n@@ -2277,14 +2277,14 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n \n     fn prepare_late_bound_region_info<T>(&mut self, value: &ty::Binder<'tcx, T>)\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeVisitable<'tcx>,\n     {\n         struct LateBoundRegionNameCollector<'a, 'tcx> {\n             used_region_names: &'a mut FxHashSet<Symbol>,\n             type_collector: SsoHashSet<Ty<'tcx>>,\n         }\n \n-        impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector<'_, 'tcx> {\n+        impl<'tcx> ty::visit::TypeVisitor<'tcx> for LateBoundRegionNameCollector<'_, 'tcx> {\n             type BreakTy = ();\n \n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -2388,7 +2388,7 @@ macro_rules! define_print_and_forward_display {\n /// Wrapper type for `ty::TraitRef` which opts-in to pretty printing only\n /// the trait path. That is, it will print `Trait<U>` instead of\n /// `<T as Trait<U>>`.\n-#[derive(Copy, Clone, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, TypeFoldable, TypeVisitable, Lift)]\n pub struct TraitRefPrintOnlyTraitPath<'tcx>(ty::TraitRef<'tcx>);\n \n impl<'tcx> fmt::Debug for TraitRefPrintOnlyTraitPath<'tcx> {\n@@ -2400,7 +2400,7 @@ impl<'tcx> fmt::Debug for TraitRefPrintOnlyTraitPath<'tcx> {\n /// Wrapper type for `ty::TraitRef` which opts-in to pretty printing only\n /// the trait name. That is, it will print `Trait` instead of\n /// `<T as Trait<U>>`.\n-#[derive(Copy, Clone, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, TypeFoldable, TypeVisitable, Lift)]\n pub struct TraitRefPrintOnlyTraitName<'tcx>(ty::TraitRef<'tcx>);\n \n impl<'tcx> fmt::Debug for TraitRefPrintOnlyTraitName<'tcx> {\n@@ -2425,7 +2425,7 @@ impl<'tcx> ty::Binder<'tcx, ty::TraitRef<'tcx>> {\n     }\n }\n \n-#[derive(Copy, Clone, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, TypeFoldable, TypeVisitable, Lift)]\n pub struct TraitPredPrintModifiersAndPath<'tcx>(ty::TraitPredicate<'tcx>);\n \n impl<'tcx> fmt::Debug for TraitPredPrintModifiersAndPath<'tcx> {"}, {"sha": "818affa7113a17c5abb644ad7ab36db2692b1854", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -345,7 +345,7 @@ impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {\n     }\n }\n \n-#[derive(Copy, Debug, Clone, TypeFoldable)]\n+#[derive(Copy, Debug, Clone, TypeFoldable, TypeVisitable)]\n struct GeneratorWitness<'tcx>(&'tcx ty::List<Ty<'tcx>>);\n \n impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {"}, {"sha": "1b4008019fbc58a039d9f73547627a7e2cfdfdb4", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 84, "deletions": 5, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -4,8 +4,9 @@\n \n use crate::mir::interpret;\n use crate::mir::ProjectionKind;\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n+use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n+use crate::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n use crate::ty::{self, InferConst, Lift, Term, Ty, TyCtxt};\n use rustc_data_structures::functor::IdFunctor;\n use rustc_hir as hir;\n@@ -183,7 +184,7 @@ impl<'tcx> fmt::Debug for ty::PredicateKind<'tcx> {\n // For things that don't carry any arena-allocated data (and are\n // copy...), just add them to this list.\n \n-TrivialTypeFoldableAndLiftImpls! {\n+TrivialTypeTraversalAndLiftImpls! {\n     (),\n     bool,\n     usize,\n@@ -452,7 +453,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::PredicateKind<'a> {\n \n impl<'a, 'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::Binder<'a, T>\n where\n-    <T as Lift<'tcx>>::Lifted: TypeFoldable<'tcx>,\n+    <T as Lift<'tcx>>::Lifted: TypeVisitable<'tcx>,\n {\n     type Lifted = ty::Binder<'tcx, T::Lifted>;\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n@@ -651,7 +652,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::AdtDef<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ty::AdtDef<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n@@ -664,7 +667,9 @@ impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for\n     ) -> Result<(T, U), F::Error> {\n         Ok((self.0.try_fold_with(folder)?, self.1.try_fold_with(folder)?))\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>, U: TypeVisitable<'tcx>> TypeVisitable<'tcx> for (T, U) {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.0.visit_with(visitor)?;\n         self.1.visit_with(visitor)\n@@ -684,27 +689,43 @@ impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>>\n             self.2.try_fold_with(folder)?,\n         ))\n     }\n+}\n \n+impl<'tcx, A: TypeVisitable<'tcx>, B: TypeVisitable<'tcx>, C: TypeVisitable<'tcx>>\n+    TypeVisitable<'tcx> for (A, B, C)\n+{\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.0.visit_with(visitor)?;\n         self.1.visit_with(visitor)?;\n         self.2.visit_with(visitor)\n     }\n }\n \n-EnumTypeFoldableImpl! {\n+EnumTypeTraversalImpl! {\n     impl<'tcx, T> TypeFoldable<'tcx> for Option<T> {\n         (Some)(a),\n         (None),\n     } where T: TypeFoldable<'tcx>\n }\n+EnumTypeTraversalImpl! {\n+    impl<'tcx, T> TypeVisitable<'tcx> for Option<T> {\n+        (Some)(a),\n+        (None),\n+    } where T: TypeVisitable<'tcx>\n+}\n \n-EnumTypeFoldableImpl! {\n+EnumTypeTraversalImpl! {\n     impl<'tcx, T, E> TypeFoldable<'tcx> for Result<T, E> {\n         (Ok)(a),\n         (Err)(a),\n     } where T: TypeFoldable<'tcx>, E: TypeFoldable<'tcx>,\n }\n+EnumTypeTraversalImpl! {\n+    impl<'tcx, T, E> TypeVisitable<'tcx> for Result<T, E> {\n+        (Ok)(a),\n+        (Err)(a),\n+    } where T: TypeVisitable<'tcx>, E: TypeVisitable<'tcx>,\n+}\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n@@ -744,7 +765,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n             Ok(Rc::from_raw(Rc::into_raw(unique).cast()))\n         }\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Rc<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n@@ -788,7 +811,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Arc<T> {\n             Ok(Arc::from_raw(Arc::into_raw(unique).cast()))\n         }\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Arc<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n@@ -798,7 +823,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|value| value.try_fold_with(folder))\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Box<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n@@ -808,7 +835,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|t| t.try_fold_with(folder))\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Vec<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n@@ -818,7 +847,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|t| t.try_fold_with(folder))\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Box<[T]> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n@@ -828,7 +859,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::EarlyBinder<T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_bound(|ty| ty.try_fold_with(folder))\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for ty::EarlyBinder<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.as_ref().0.visit_with(visitor)\n     }\n@@ -838,7 +871,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<'tcx, T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_binder(self)\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for ty::Binder<'tcx, T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_binder(self)\n     }\n@@ -851,7 +886,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeSuperFoldable<'tcx> for ty::Binder<'tcx, T\n     ) -> Result<Self, F::Error> {\n         self.try_map_bound(|ty| ty.try_fold_with(folder))\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>> TypeSuperVisitable<'tcx> for ty::Binder<'tcx, T> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.as_ref().skip_binder().visit_with(visitor)\n     }\n@@ -861,7 +898,11 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::Existentia\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_poly_existential_predicates(v))\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx>\n+    for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>\n+{\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|p| p.visit_with(visitor))\n     }\n@@ -871,7 +912,9 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_projs(v))\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for &'tcx ty::List<ProjectionKind> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n@@ -903,7 +946,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n             },\n         })\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ty::instance::Instance<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         use crate::ty::InstanceDef::*;\n         self.substs.visit_with(visitor)?;\n@@ -929,7 +974,9 @@ impl<'tcx> TypeFoldable<'tcx> for interpret::GlobalId<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(Self { instance: self.instance.try_fold_with(folder)?, promoted: self.promoted })\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for interpret::GlobalId<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.instance.visit_with(visitor)\n     }\n@@ -939,7 +986,9 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_ty(self)\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for Ty<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_ty(*self)\n     }\n@@ -989,7 +1038,9 @@ impl<'tcx> TypeSuperFoldable<'tcx> for Ty<'tcx> {\n \n         Ok(if *self.kind() == kind { self } else { folder.tcx().mk_ty(kind) })\n     }\n+}\n \n+impl<'tcx> TypeSuperVisitable<'tcx> for Ty<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.kind() {\n             ty::RawPtr(ref tm) => tm.visit_with(visitor),\n@@ -1037,7 +1088,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_region(self)\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ty::Region<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_region(*self)\n     }\n@@ -1050,7 +1103,9 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Region<'tcx> {\n     ) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n+}\n \n+impl<'tcx> TypeSuperVisitable<'tcx> for ty::Region<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n@@ -1060,7 +1115,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_predicate(self)\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ty::Predicate<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_predicate(*self)\n     }\n@@ -1082,7 +1139,9 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Predicate<'tcx> {\n         let new = self.kind().try_fold_with(folder)?;\n         Ok(folder.tcx().reuse_or_mk_predicate(self, new))\n     }\n+}\n \n+impl<'tcx> TypeSuperVisitable<'tcx> for ty::Predicate<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.kind().visit_with(visitor)\n     }\n@@ -1092,7 +1151,9 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_predicates(v))\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|p| p.visit_with(visitor))\n     }\n@@ -1102,7 +1163,9 @@ impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T>\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|x| x.try_fold_with(folder))\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>, I: Idx> TypeVisitable<'tcx> for IndexVec<I, T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n@@ -1112,7 +1175,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Const<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_const(self)\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ty::Const<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_const(*self)\n     }\n@@ -1131,7 +1196,9 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Const<'tcx> {\n             Ok(self)\n         }\n     }\n+}\n \n+impl<'tcx> TypeSuperVisitable<'tcx> for ty::Const<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.ty().visit_with(visitor)?;\n         self.kind().visit_with(visitor)\n@@ -1150,7 +1217,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n             | ty::ConstKind::Error(_) => self,\n         })\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ty::ConstKind<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match *self {\n             ty::ConstKind::Infer(ic) => ic.visit_with(visitor),\n@@ -1168,7 +1237,9 @@ impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for InferConst<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n@@ -1178,7 +1249,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_unevaluated(self)\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ty::Unevaluated<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_unevaluated(*self)\n     }\n@@ -1195,7 +1268,9 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Unevaluated<'tcx> {\n             promoted: self.promoted,\n         })\n     }\n+}\n \n+impl<'tcx> TypeSuperVisitable<'tcx> for ty::Unevaluated<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.substs.visit_with(visitor)\n     }\n@@ -1205,7 +1280,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx, ()> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self.expand().try_fold_with(folder)?.shrink())\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ty::Unevaluated<'tcx, ()> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.expand().visit_with(visitor)\n     }\n@@ -1215,7 +1292,9 @@ impl<'tcx> TypeFoldable<'tcx> for hir::Constness {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for hir::Constness {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }"}, {"sha": "815e39aab571535987472c823d0bafded31b1d78", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -3,11 +3,11 @@\n #![allow(rustc::usage_of_ty_tykind)]\n \n use crate::infer::canonical::Canonical;\n-use crate::ty::fold::ValidateBoundVars;\n use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n+use crate::ty::visit::ValidateBoundVars;\n use crate::ty::InferTy::*;\n use crate::ty::{\n-    self, AdtDef, DefIdTree, Discr, Term, Ty, TyCtxt, TypeFlags, TypeFoldable, TypeSuperFoldable,\n+    self, AdtDef, DefIdTree, Discr, Term, Ty, TyCtxt, TypeFlags, TypeSuperVisitable, TypeVisitable,\n     TypeVisitor,\n };\n use crate::ty::{List, ParamEnv};\n@@ -38,7 +38,7 @@ pub type TyKind<'tcx> = IrTyKind<TyCtxt<'tcx>>;\n pub type RegionKind<'tcx> = IrRegionKind<TyCtxt<'tcx>>;\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable, Lift)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct TypeAndMut<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub mutbl: hir::Mutability,\n@@ -201,7 +201,7 @@ static_assert_size!(TyKind<'_>, 32);\n /// * `GR`: The \"return type\", which is the type of value returned upon\n ///   completion of the generator.\n /// * `GW`: The \"generator witness\".\n-#[derive(Copy, Clone, Debug, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable)]\n pub struct ClosureSubsts<'tcx> {\n     /// Lifetime and type parameters from the enclosing function,\n     /// concatenated with a tuple containing the types of the upvars.\n@@ -328,7 +328,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n }\n \n /// Similar to `ClosureSubsts`; see the above documentation for more.\n-#[derive(Copy, Clone, Debug, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable)]\n pub struct GeneratorSubsts<'tcx> {\n     pub substs: SubstsRef<'tcx>,\n }\n@@ -608,7 +608,7 @@ impl<'tcx> UpvarSubsts<'tcx> {\n /// type of the constant. The reason that `R` is represented as an extra type parameter\n /// is the same reason that [`ClosureSubsts`] have `CS` and `U` as type parameters:\n /// inline const can reference lifetimes that are internal to the creating function.\n-#[derive(Copy, Clone, Debug, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable)]\n pub struct InlineConstSubsts<'tcx> {\n     /// Generic parameters from the enclosing item,\n     /// concatenated with the inferred type of the constant.\n@@ -655,7 +655,7 @@ impl<'tcx> InlineConstSubsts<'tcx> {\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub enum ExistentialPredicate<'tcx> {\n     /// E.g., `Iterator`.\n     Trait(ExistentialTraitRef<'tcx>),\n@@ -781,7 +781,7 @@ impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {\n /// Trait references also appear in object types like `Foo<U>`, but in\n /// that case the `Self` parameter is absent from the substitutions.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct TraitRef<'tcx> {\n     pub def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n@@ -853,7 +853,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n /// The substitutions don't include the erased `Self`, only trait\n /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct ExistentialTraitRef<'tcx> {\n     pub def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n@@ -986,7 +986,7 @@ pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);\n \n impl<'tcx, T> Binder<'tcx, T>\n where\n-    T: TypeFoldable<'tcx>,\n+    T: TypeVisitable<'tcx>,\n {\n     /// Wraps `value` in a binder, asserting that `value` does not\n     /// contain any bound vars that would be bound by the\n@@ -1050,14 +1050,14 @@ impl<'tcx, T> Binder<'tcx, T> {\n         Binder(value, self.1)\n     }\n \n-    pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>\n+    pub fn map_bound_ref<F, U: TypeVisitable<'tcx>>(&self, f: F) -> Binder<'tcx, U>\n     where\n         F: FnOnce(&T) -> U,\n     {\n         self.as_ref().map_bound(f)\n     }\n \n-    pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>\n+    pub fn map_bound<F, U: TypeVisitable<'tcx>>(self, f: F) -> Binder<'tcx, U>\n     where\n         F: FnOnce(T) -> U,\n     {\n@@ -1069,7 +1069,7 @@ impl<'tcx, T> Binder<'tcx, T> {\n         Binder(value, self.1)\n     }\n \n-    pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>\n+    pub fn try_map_bound<F, U: TypeVisitable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>\n     where\n         F: FnOnce(T) -> Result<U, E>,\n     {\n@@ -1092,7 +1092,7 @@ impl<'tcx, T> Binder<'tcx, T> {\n     /// in `bind`. This may be (debug) asserted in the future.\n     pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>\n     where\n-        U: TypeFoldable<'tcx>,\n+        U: TypeVisitable<'tcx>,\n     {\n         if cfg!(debug_assertions) {\n             let mut validator = ValidateBoundVars::new(self.bound_vars());\n@@ -1113,7 +1113,7 @@ impl<'tcx, T> Binder<'tcx, T> {\n     /// would not be that useful.)\n     pub fn no_bound_vars(self) -> Option<T>\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeVisitable<'tcx>,\n     {\n         if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }\n     }\n@@ -1143,7 +1143,7 @@ impl<'tcx, T> Binder<'tcx, Option<T>> {\n /// Represents the projection of an associated type. In explicit UFCS\n /// form this would be written `<T as Trait<..>>::N`.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct ProjectionTy<'tcx> {\n     /// The parameters of the associated item.\n     pub substs: SubstsRef<'tcx>,\n@@ -1192,7 +1192,7 @@ impl<'tcx> ProjectionTy<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable)]\n pub struct GenSig<'tcx> {\n     pub resume_ty: Ty<'tcx>,\n     pub yield_ty: Ty<'tcx>,\n@@ -1208,7 +1208,7 @@ pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;\n /// - `output`: is the return type.\n /// - `c_variadic`: indicates whether this is a C-variadic function.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct FnSig<'tcx> {\n     pub inputs_and_output: &'tcx List<Ty<'tcx>>,\n     pub c_variadic: bool,\n@@ -1385,7 +1385,7 @@ impl From<BoundVar> for BoundTy {\n \n /// A `ProjectionPredicate` for an `ExistentialTraitRef`.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct ExistentialProjection<'tcx> {\n     pub item_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,"}, {"sha": "3a524d7b0f30716fb448006d0bddd374141cbe04", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -2,10 +2,9 @@\n \n use crate::mir;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n-use crate::ty::fold::{\n-    FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitor,\n-};\n+use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable};\n use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n+use crate::ty::visit::{TypeVisitable, TypeVisitor};\n use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n use rustc_data_structures::intern::{Interned, WithStableHash};\n@@ -205,7 +204,9 @@ impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {\n             GenericArgKind::Const(ct) => ct.try_fold_with(folder).map(Into::into),\n         }\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for GenericArg<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.visit_with(visitor),\n@@ -449,7 +450,9 @@ impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n             _ => ty::util::fold_list(self, folder, |tcx, v| tcx.intern_substs(v)),\n         }\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for SubstsRef<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n@@ -485,7 +488,9 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n             _ => ty::util::fold_list(self, folder, |tcx, v| tcx.intern_type_list(v)),\n         }\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n@@ -722,7 +727,7 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n /// Stores the user-given substs to reach some fully qualified path\n /// (e.g., `<T>::Item` or `<T as Trait>::Item`).\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable, Lift)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct UserSubsts<'tcx> {\n     /// The substitutions for the item as given by the user.\n     pub substs: SubstsRef<'tcx>,\n@@ -749,7 +754,7 @@ pub struct UserSubsts<'tcx> {\n /// the self type, giving `Foo<?A>`. Finally, we unify that with\n /// the self type here, which contains `?A` to be `&'static u32`\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable, Lift)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct UserSelfTy<'tcx> {\n     pub impl_def_id: DefId,\n     pub self_ty: Ty<'tcx>,"}, {"sha": "826c16dda4aa7dc443e29e13066a9bff26d8a298", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,6 +1,6 @@\n use crate::traits::specialization_graph;\n use crate::ty::fast_reject::{self, SimplifiedType, TreatParams};\n-use crate::ty::fold::TypeFoldable;\n+use crate::ty::visit::TypeVisitable;\n use crate::ty::{Ident, Ty, TyCtxt};\n use hir::def_id::LOCAL_CRATE;\n use rustc_hir as hir;"}, {"sha": "3a876df84c287982e8e3ae3224a8324cfdd62285", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -6,6 +6,7 @@ use crate::ty::query::TyCtxtAt;\n use crate::ty::subst::{GenericArgKind, Subst, SubstsRef};\n use crate::ty::{\n     self, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n+    TypeVisitable,\n };\n use rustc_apfloat::Float as _;\n use rustc_ast as ast;"}, {"sha": "5365067209af98042864cd0a8410a0a20170e722", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "added", "additions": 745, "deletions": 0, "changes": 745, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -0,0 +1,745 @@\n+//! A visiting traversal mechanism for complex data structures that contain type\n+//! information.\n+//!\n+//! This is a read-only traversal of the data structure.\n+//!\n+//! This traversal has limited flexibility. Only a small number of \"types of\n+//! interest\" within the complex data structures can receive custom\n+//! visitation. These are the ones containing the most important type-related\n+//! information, such as `Ty`, `Predicate`, `Region`, and `Const`.\n+//!\n+//! There are three groups of traits involved in each traversal.\n+//! - `TypeVisitable`. This is implemented once for many types, including:\n+//!   - Types of interest, for which the the methods delegate to the\n+//!     visitor.\n+//!   - All other types, including generic containers like `Vec` and `Option`.\n+//!     It defines a \"skeleton\" of how they should be visited.\n+//! - `TypeSuperVisitable`. This is implemented only for each type of interest,\n+//!   and defines the visiting \"skeleton\" for these types.\n+//! - `TypeVisitor`. This is implemented for each visitor. This defines how\n+//!   types of interest are visited.\n+//!\n+//! This means each visit is a mixture of (a) generic visiting operations, and (b)\n+//! custom visit operations that are specific to the visitor.\n+//! - The `TypeVisitable` impls handle most of the traversal, and call into\n+//!   `TypeVisitor` when they encounter a type of interest.\n+//! - A `TypeVisitor` may call into another `TypeVisitable` impl, because some of\n+//!   the types of interest are recursive and can contain other types of interest.\n+//! - A `TypeVisitor` may also call into a `TypeSuperVisitable` impl, because each\n+//!   visitor might provide custom handling only for some types of interest, or\n+//!   only for some variants of each type of interest, and then use default\n+//!   traversal for the remaining cases.\n+//!\n+//! For example, if you have `struct S(Ty, U)` where `S: TypeVisitable` and `U:\n+//! TypeVisitable`, and an instance `s = S(ty, u)`, it would be visited like so:\n+//! ```text\n+//! s.visit_with(visitor) calls\n+//! - ty.visit_with(visitor) calls\n+//!   - visitor.visit_ty(ty) may call\n+//!     - ty.super_visit_with(visitor)\n+//! - u.visit_with(visitor)\n+//! ```\n+use crate::mir;\n+use crate::ty::{self, flags::FlagComputation, Binder, Ty, TyCtxt, TypeFlags};\n+use rustc_errors::ErrorGuaranteed;\n+\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::sso::SsoHashSet;\n+use std::fmt;\n+use std::ops::ControlFlow;\n+\n+/// This trait is implemented for every type that can be visited,\n+/// providing the skeleton of the traversal.\n+///\n+/// To implement this conveniently, use the derive macro located in\n+/// `rustc_macros`.\n+pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n+    /// The entry point for visiting. To visit a value `t` with a visitor `v`\n+    /// call: `t.visit_with(v)`.\n+    ///\n+    /// For most types, this just traverses the value, calling `visit_with` on\n+    /// each field/element.\n+    ///\n+    /// For types of interest (such as `Ty`), the implementation of this method\n+    /// that calls a visitor method specifically for that type (such as\n+    /// `V::visit_ty`). This is where control transfers from `TypeFoldable` to\n+    /// `TypeVisitor`.\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n+\n+    /// Returns `true` if `self` has any late-bound regions that are either\n+    /// bound by `binder` or bound by some binder outside of `binder`.\n+    /// If `binder` is `ty::INNERMOST`, this indicates whether\n+    /// there are any late-bound regions that appear free.\n+    fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {\n+        self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()\n+    }\n+\n+    /// Returns `true` if this `self` has any regions that escape `binder` (and\n+    /// hence are not bound by it).\n+    fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {\n+        self.has_vars_bound_at_or_above(binder.shifted_in(1))\n+    }\n+\n+    fn has_escaping_bound_vars(&self) -> bool {\n+        self.has_vars_bound_at_or_above(ty::INNERMOST)\n+    }\n+\n+    #[instrument(level = \"trace\")]\n+    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n+        self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)\n+    }\n+    fn has_projections(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_PROJECTION)\n+    }\n+    fn has_opaque_types(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)\n+    }\n+    fn references_error(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_ERROR)\n+    }\n+    fn error_reported(&self) -> Option<ErrorGuaranteed> {\n+        if self.references_error() {\n+            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n+        } else {\n+            None\n+        }\n+    }\n+    fn has_param_types_or_consts(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)\n+    }\n+    fn has_infer_regions(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_RE_INFER)\n+    }\n+    fn has_infer_types(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_INFER)\n+    }\n+    fn has_infer_types_or_consts(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)\n+    }\n+    fn needs_infer(&self) -> bool {\n+        self.has_type_flags(TypeFlags::NEEDS_INFER)\n+    }\n+    fn has_placeholders(&self) -> bool {\n+        self.has_type_flags(\n+            TypeFlags::HAS_RE_PLACEHOLDER\n+                | TypeFlags::HAS_TY_PLACEHOLDER\n+                | TypeFlags::HAS_CT_PLACEHOLDER,\n+        )\n+    }\n+    fn needs_subst(&self) -> bool {\n+        self.has_type_flags(TypeFlags::NEEDS_SUBST)\n+    }\n+    /// \"Free\" regions in this context means that it has any region\n+    /// that is not (a) erased or (b) late-bound.\n+    fn has_free_regions(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)\n+    }\n+\n+    fn has_erased_regions(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_RE_ERASED)\n+    }\n+\n+    /// True if there are any un-erased free regions.\n+    fn has_erasable_regions(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)\n+    }\n+\n+    /// Indicates whether this value references only 'global'\n+    /// generic parameters that are the same regardless of what fn we are\n+    /// in. This is used for caching.\n+    fn is_global(&self) -> bool {\n+        !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)\n+    }\n+\n+    /// True if there are any late-bound regions\n+    fn has_late_bound_regions(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)\n+    }\n+\n+    /// Indicates whether this value still has parameters/placeholders/inference variables\n+    /// which could be replaced later, in a way that would change the results of `impl`\n+    /// specialization.\n+    fn still_further_specializable(&self) -> bool {\n+        self.has_type_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE)\n+    }\n+}\n+\n+pub trait TypeSuperVisitable<'tcx>: TypeVisitable<'tcx> {\n+    /// Provides a default visit for a type of interest. This should only be\n+    /// called within `TypeVisitor` methods, when a non-custom traversal is\n+    /// desired for the value of the type of interest passed to that method.\n+    /// For example, in `MyVisitor::visit_ty(ty)`, it is valid to call\n+    /// `ty.super_visit_with(self)`, but any other visiting should be done\n+    /// with `xyz.visit_with(self)`.\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n+}\n+\n+/// This trait is implemented for every visiting traversal. There is a visit\n+/// method defined for every type of interest. Each such method has a default\n+/// that recurses into the type's fields in a non-custom fashion.\n+pub trait TypeVisitor<'tcx>: Sized {\n+    type BreakTy = !;\n+\n+    fn visit_binder<T: TypeVisitable<'tcx>>(\n+        &mut self,\n+        t: &Binder<'tcx, T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n+        t.super_visit_with(self)\n+    }\n+\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        t.super_visit_with(self)\n+    }\n+\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        r.super_visit_with(self)\n+    }\n+\n+    fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        c.super_visit_with(self)\n+    }\n+\n+    fn visit_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        uv.super_visit_with(self)\n+    }\n+\n+    fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        p.super_visit_with(self)\n+    }\n+\n+    fn visit_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        c.super_visit_with(self)\n+    }\n+}\n+\n+///////////////////////////////////////////////////////////////////////////\n+// Region folder\n+\n+impl<'tcx> TyCtxt<'tcx> {\n+    /// Invoke `callback` on every region appearing free in `value`.\n+    pub fn for_each_free_region(\n+        self,\n+        value: &impl TypeVisitable<'tcx>,\n+        mut callback: impl FnMut(ty::Region<'tcx>),\n+    ) {\n+        self.any_free_region_meets(value, |r| {\n+            callback(r);\n+            false\n+        });\n+    }\n+\n+    /// Returns `true` if `callback` returns true for every region appearing free in `value`.\n+    pub fn all_free_regions_meet(\n+        self,\n+        value: &impl TypeVisitable<'tcx>,\n+        mut callback: impl FnMut(ty::Region<'tcx>) -> bool,\n+    ) -> bool {\n+        !self.any_free_region_meets(value, |r| !callback(r))\n+    }\n+\n+    /// Returns `true` if `callback` returns true for some region appearing free in `value`.\n+    pub fn any_free_region_meets(\n+        self,\n+        value: &impl TypeVisitable<'tcx>,\n+        callback: impl FnMut(ty::Region<'tcx>) -> bool,\n+    ) -> bool {\n+        struct RegionVisitor<F> {\n+            /// The index of a binder *just outside* the things we have\n+            /// traversed. If we encounter a bound region bound by this\n+            /// binder or one outer to it, it appears free. Example:\n+            ///\n+            /// ```ignore (illustrative)\n+            ///       for<'a> fn(for<'b> fn(), T)\n+            /// // ^          ^          ^     ^\n+            /// // |          |          |     | here, would be shifted in 1\n+            /// // |          |          | here, would be shifted in 2\n+            /// // |          | here, would be `INNERMOST` shifted in by 1\n+            /// // | here, initially, binder would be `INNERMOST`\n+            /// ```\n+            ///\n+            /// You see that, initially, *any* bound value is free,\n+            /// because we've not traversed any binders. As we pass\n+            /// through a binder, we shift the `outer_index` by 1 to\n+            /// account for the new binder that encloses us.\n+            outer_index: ty::DebruijnIndex,\n+            callback: F,\n+        }\n+\n+        impl<'tcx, F> TypeVisitor<'tcx> for RegionVisitor<F>\n+        where\n+            F: FnMut(ty::Region<'tcx>) -> bool,\n+        {\n+            type BreakTy = ();\n+\n+            fn visit_binder<T: TypeVisitable<'tcx>>(\n+                &mut self,\n+                t: &Binder<'tcx, T>,\n+            ) -> ControlFlow<Self::BreakTy> {\n+                self.outer_index.shift_in(1);\n+                let result = t.super_visit_with(self);\n+                self.outer_index.shift_out(1);\n+                result\n+            }\n+\n+            fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+                match *r {\n+                    ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {\n+                        ControlFlow::CONTINUE\n+                    }\n+                    _ => {\n+                        if (self.callback)(r) {\n+                            ControlFlow::BREAK\n+                        } else {\n+                            ControlFlow::CONTINUE\n+                        }\n+                    }\n+                }\n+            }\n+\n+            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+                // We're only interested in types involving regions\n+                if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {\n+                    ty.super_visit_with(self)\n+                } else {\n+                    ControlFlow::CONTINUE\n+                }\n+            }\n+        }\n+\n+        value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()\n+    }\n+\n+    /// Returns a set of all late-bound regions that are constrained\n+    /// by `value`, meaning that if we instantiate those LBR with\n+    /// variables and equate `value` with something else, those\n+    /// variables will also be equated.\n+    pub fn collect_constrained_late_bound_regions<T>(\n+        self,\n+        value: &Binder<'tcx, T>,\n+    ) -> FxHashSet<ty::BoundRegionKind>\n+    where\n+        T: TypeVisitable<'tcx>,\n+    {\n+        self.collect_late_bound_regions(value, true)\n+    }\n+\n+    /// Returns a set of all late-bound regions that appear in `value` anywhere.\n+    pub fn collect_referenced_late_bound_regions<T>(\n+        self,\n+        value: &Binder<'tcx, T>,\n+    ) -> FxHashSet<ty::BoundRegionKind>\n+    where\n+        T: TypeVisitable<'tcx>,\n+    {\n+        self.collect_late_bound_regions(value, false)\n+    }\n+\n+    fn collect_late_bound_regions<T>(\n+        self,\n+        value: &Binder<'tcx, T>,\n+        just_constraint: bool,\n+    ) -> FxHashSet<ty::BoundRegionKind>\n+    where\n+        T: TypeVisitable<'tcx>,\n+    {\n+        let mut collector = LateBoundRegionsCollector::new(just_constraint);\n+        let result = value.as_ref().skip_binder().visit_with(&mut collector);\n+        assert!(result.is_continue()); // should never have stopped early\n+        collector.regions\n+    }\n+}\n+\n+pub struct ValidateBoundVars<'tcx> {\n+    bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n+    binder_index: ty::DebruijnIndex,\n+    // We may encounter the same variable at different levels of binding, so\n+    // this can't just be `Ty`\n+    visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,\n+}\n+\n+impl<'tcx> ValidateBoundVars<'tcx> {\n+    pub fn new(bound_vars: &'tcx ty::List<ty::BoundVariableKind>) -> Self {\n+        ValidateBoundVars {\n+            bound_vars,\n+            binder_index: ty::INNERMOST,\n+            visited: SsoHashSet::default(),\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for ValidateBoundVars<'tcx> {\n+    type BreakTy = ();\n+\n+    fn visit_binder<T: TypeVisitable<'tcx>>(\n+        &mut self,\n+        t: &Binder<'tcx, T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n+        self.binder_index.shift_in(1);\n+        let result = t.super_visit_with(self);\n+        self.binder_index.shift_out(1);\n+        result\n+    }\n+\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if t.outer_exclusive_binder() < self.binder_index\n+            || !self.visited.insert((self.binder_index, t))\n+        {\n+            return ControlFlow::BREAK;\n+        }\n+        match *t.kind() {\n+            ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n+                if self.bound_vars.len() <= bound_ty.var.as_usize() {\n+                    bug!(\"Not enough bound vars: {:?} not found in {:?}\", t, self.bound_vars);\n+                }\n+                let list_var = self.bound_vars[bound_ty.var.as_usize()];\n+                match list_var {\n+                    ty::BoundVariableKind::Ty(kind) => {\n+                        if kind != bound_ty.kind {\n+                            bug!(\n+                                \"Mismatched type kinds: {:?} doesn't var in list {:?}\",\n+                                bound_ty.kind,\n+                                list_var\n+                            );\n+                        }\n+                    }\n+                    _ => {\n+                        bug!(\"Mismatched bound variable kinds! Expected type, found {:?}\", list_var)\n+                    }\n+                }\n+            }\n+\n+            _ => (),\n+        };\n+\n+        t.super_visit_with(self)\n+    }\n+\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        match *r {\n+            ty::ReLateBound(index, br) if index == self.binder_index => {\n+                if self.bound_vars.len() <= br.var.as_usize() {\n+                    bug!(\"Not enough bound vars: {:?} not found in {:?}\", br, self.bound_vars);\n+                }\n+                let list_var = self.bound_vars[br.var.as_usize()];\n+                match list_var {\n+                    ty::BoundVariableKind::Region(kind) => {\n+                        if kind != br.kind {\n+                            bug!(\n+                                \"Mismatched region kinds: {:?} doesn't match var ({:?}) in list ({:?})\",\n+                                br.kind,\n+                                list_var,\n+                                self.bound_vars\n+                            );\n+                        }\n+                    }\n+                    _ => bug!(\n+                        \"Mismatched bound variable kinds! Expected region, found {:?}\",\n+                        list_var\n+                    ),\n+                }\n+            }\n+\n+            _ => (),\n+        };\n+\n+        r.super_visit_with(self)\n+    }\n+}\n+\n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n+struct FoundEscapingVars;\n+\n+/// An \"escaping var\" is a bound var whose binder is not part of `t`. A bound var can be a\n+/// bound region or a bound type.\n+///\n+/// So, for example, consider a type like the following, which has two binders:\n+///\n+///    for<'a> fn(x: for<'b> fn(&'a isize, &'b isize))\n+///    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ outer scope\n+///                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~  inner scope\n+///\n+/// This type has *bound regions* (`'a`, `'b`), but it does not have escaping regions, because the\n+/// binders of both `'a` and `'b` are part of the type itself. However, if we consider the *inner\n+/// fn type*, that type has an escaping region: `'a`.\n+///\n+/// Note that what I'm calling an \"escaping var\" is often just called a \"free var\". However,\n+/// we already use the term \"free var\". It refers to the regions or types that we use to represent\n+/// bound regions or type params on a fn definition while we are type checking its body.\n+///\n+/// To clarify, conceptually there is no particular difference between\n+/// an \"escaping\" var and a \"free\" var. However, there is a big\n+/// difference in practice. Basically, when \"entering\" a binding\n+/// level, one is generally required to do some sort of processing to\n+/// a bound var, such as replacing it with a fresh/placeholder\n+/// var, or making an entry in the environment to represent the\n+/// scope to which it is attached, etc. An escaping var represents\n+/// a bound var for which this processing has not yet been done.\n+struct HasEscapingVarsVisitor {\n+    /// Anything bound by `outer_index` or \"above\" is escaping.\n+    outer_index: ty::DebruijnIndex,\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n+    type BreakTy = FoundEscapingVars;\n+\n+    fn visit_binder<T: TypeVisitable<'tcx>>(\n+        &mut self,\n+        t: &Binder<'tcx, T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n+        self.outer_index.shift_in(1);\n+        let result = t.super_visit_with(self);\n+        self.outer_index.shift_out(1);\n+        result\n+    }\n+\n+    #[inline]\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        // If the outer-exclusive-binder is *strictly greater* than\n+        // `outer_index`, that means that `t` contains some content\n+        // bound at `outer_index` or above (because\n+        // `outer_exclusive_binder` is always 1 higher than the\n+        // content in `t`). Therefore, `t` has some escaping vars.\n+        if t.outer_exclusive_binder() > self.outer_index {\n+            ControlFlow::Break(FoundEscapingVars)\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n+    }\n+\n+    #[inline]\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        // If the region is bound by `outer_index` or anything outside\n+        // of outer index, then it escapes the binders we have\n+        // visited.\n+        if r.bound_at_or_above_binder(self.outer_index) {\n+            ControlFlow::Break(FoundEscapingVars)\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n+    }\n+\n+    fn visit_const(&mut self, ct: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        // we don't have a `visit_infer_const` callback, so we have to\n+        // hook in here to catch this case (annoying...), but\n+        // otherwise we do want to remember to visit the rest of the\n+        // const, as it has types/regions embedded in a lot of other\n+        // places.\n+        match ct.kind() {\n+            ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {\n+                ControlFlow::Break(FoundEscapingVars)\n+            }\n+            _ => ct.super_visit_with(self),\n+        }\n+    }\n+\n+    #[inline]\n+    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if predicate.outer_exclusive_binder() > self.outer_index {\n+            ControlFlow::Break(FoundEscapingVars)\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n+    }\n+}\n+\n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n+struct FoundFlags;\n+\n+// FIXME: Optimize for checking for infer flags\n+struct HasTypeFlagsVisitor {\n+    flags: ty::TypeFlags,\n+}\n+\n+impl std::fmt::Debug for HasTypeFlagsVisitor {\n+    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        self.flags.fmt(fmt)\n+    }\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n+    type BreakTy = FoundFlags;\n+\n+    #[inline]\n+    #[instrument(skip(self), level = \"trace\")]\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        let flags = t.flags();\n+        trace!(t.flags=?t.flags());\n+        if flags.intersects(self.flags) {\n+            ControlFlow::Break(FoundFlags)\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n+    }\n+\n+    #[inline]\n+    #[instrument(skip(self), level = \"trace\")]\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        let flags = r.type_flags();\n+        trace!(r.flags=?flags);\n+        if flags.intersects(self.flags) {\n+            ControlFlow::Break(FoundFlags)\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n+    }\n+\n+    #[inline]\n+    #[instrument(level = \"trace\")]\n+    fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        let flags = FlagComputation::for_const(c);\n+        trace!(r.flags=?flags);\n+        if flags.intersects(self.flags) {\n+            ControlFlow::Break(FoundFlags)\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n+    }\n+\n+    #[inline]\n+    #[instrument(level = \"trace\")]\n+    fn visit_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        let flags = FlagComputation::for_unevaluated_const(uv);\n+        trace!(r.flags=?flags);\n+        if flags.intersects(self.flags) {\n+            ControlFlow::Break(FoundFlags)\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n+    }\n+\n+    #[inline]\n+    #[instrument(level = \"trace\")]\n+    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        debug!(\n+            \"HasTypeFlagsVisitor: predicate={:?} predicate.flags={:?} self.flags={:?}\",\n+            predicate,\n+            predicate.flags(),\n+            self.flags\n+        );\n+        if predicate.flags().intersects(self.flags) {\n+            ControlFlow::Break(FoundFlags)\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n+    }\n+}\n+\n+/// Collects all the late-bound regions at the innermost binding level\n+/// into a hash set.\n+struct LateBoundRegionsCollector {\n+    current_index: ty::DebruijnIndex,\n+    regions: FxHashSet<ty::BoundRegionKind>,\n+\n+    /// `true` if we only want regions that are known to be\n+    /// \"constrained\" when you equate this type with another type. In\n+    /// particular, if you have e.g., `&'a u32` and `&'b u32`, equating\n+    /// them constraints `'a == 'b`. But if you have `<&'a u32 as\n+    /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those\n+    /// types may mean that `'a` and `'b` don't appear in the results,\n+    /// so they are not considered *constrained*.\n+    just_constrained: bool,\n+}\n+\n+impl LateBoundRegionsCollector {\n+    fn new(just_constrained: bool) -> Self {\n+        LateBoundRegionsCollector {\n+            current_index: ty::INNERMOST,\n+            regions: Default::default(),\n+            just_constrained,\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n+    fn visit_binder<T: TypeVisitable<'tcx>>(\n+        &mut self,\n+        t: &Binder<'tcx, T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n+        self.current_index.shift_in(1);\n+        let result = t.super_visit_with(self);\n+        self.current_index.shift_out(1);\n+        result\n+    }\n+\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        // if we are only looking for \"constrained\" region, we have to\n+        // ignore the inputs to a projection, as they may not appear\n+        // in the normalized form\n+        if self.just_constrained {\n+            if let ty::Projection(..) = t.kind() {\n+                return ControlFlow::CONTINUE;\n+            }\n+        }\n+\n+        t.super_visit_with(self)\n+    }\n+\n+    fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        // if we are only looking for \"constrained\" region, we have to\n+        // ignore the inputs of an unevaluated const, as they may not appear\n+        // in the normalized form\n+        if self.just_constrained {\n+            if let ty::ConstKind::Unevaluated(..) = c.kind() {\n+                return ControlFlow::CONTINUE;\n+            }\n+        }\n+\n+        c.super_visit_with(self)\n+    }\n+\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if let ty::ReLateBound(debruijn, br) = *r {\n+            if debruijn == self.current_index {\n+                self.regions.insert(br.kind);\n+            }\n+        }\n+        ControlFlow::CONTINUE\n+    }\n+}\n+\n+/// Finds the max universe present\n+pub struct MaxUniverse {\n+    max_universe: ty::UniverseIndex,\n+}\n+\n+impl MaxUniverse {\n+    pub fn new() -> Self {\n+        MaxUniverse { max_universe: ty::UniverseIndex::ROOT }\n+    }\n+\n+    pub fn max_universe(self) -> ty::UniverseIndex {\n+        self.max_universe\n+    }\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for MaxUniverse {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if let ty::Placeholder(placeholder) = t.kind() {\n+            self.max_universe = ty::UniverseIndex::from_u32(\n+                self.max_universe.as_u32().max(placeholder.universe.as_u32()),\n+            );\n+        }\n+\n+        t.super_visit_with(self)\n+    }\n+\n+    fn visit_const(&mut self, c: ty::consts::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if let ty::ConstKind::Placeholder(placeholder) = c.kind() {\n+            self.max_universe = ty::UniverseIndex::from_u32(\n+                self.max_universe.as_u32().max(placeholder.universe.as_u32()),\n+            );\n+        }\n+\n+        c.super_visit_with(self)\n+    }\n+\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if let ty::RePlaceholder(placeholder) = *r {\n+            self.max_universe = ty::UniverseIndex::from_u32(\n+                self.max_universe.as_u32().max(placeholder.universe.as_u32()),\n+            );\n+        }\n+\n+        ControlFlow::CONTINUE\n+    }\n+}"}, {"sha": "e6d42af9817a1551fd570aff5c317c56a47ce808", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::*;\n use rustc_middle::thir::{BindingMode, Expr, ExprId, LintLevel, LocalVarId, PatKind, Thir};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeckResults};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable, TypeckResults};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_span::Symbol;"}, {"sha": "070e563f396319cfec6a75fe27011dc656997852", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -19,7 +19,7 @@ use rustc_middle::mir::{\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{\n-    self, ConstKind, EarlyBinder, Instance, ParamEnv, Ty, TyCtxt, TypeFoldable,\n+    self, ConstKind, EarlyBinder, Instance, ParamEnv, Ty, TyCtxt, TypeVisitable,\n };\n use rustc_span::{def_id::DefId, Span};\n use rustc_target::abi::{HasDataLayout, Size, TargetDataLayout};"}, {"sha": "e3ab42d09efff522692670244d93315ff426a8bb", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -18,7 +18,8 @@ use rustc_middle::mir::{\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{\n-    self, ConstInt, ConstKind, EarlyBinder, Instance, ParamEnv, ScalarInt, Ty, TyCtxt, TypeFoldable,\n+    self, ConstInt, ConstKind, EarlyBinder, Instance, ParamEnv, ScalarInt, Ty, TyCtxt,\n+    TypeVisitable,\n };\n use rustc_session::lint;\n use rustc_span::{def_id::DefId, Span};"}, {"sha": "a3a35f95071e93a8281234b1c7569b5fcc4d3e38", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::mir::TerminatorKind;\n-use rustc_middle::ty::TypeFoldable;\n+use rustc_middle::ty::TypeVisitable;\n use rustc_middle::ty::{self, subst::SubstsRef, InstanceDef, TyCtxt};\n use rustc_session::Limit;\n "}, {"sha": "9776cd0ab8bc9898f4be29ccdb26fc8d3e8a58b4", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -28,7 +28,7 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::Visitor as _;\n use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPass, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n use rustc_span::{Span, Symbol};\n \n #[macro_use]"}, {"sha": "b3ac0f4cbeaa48b972ba605c2a88cb541f4899db", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -194,7 +194,9 @@ use rustc_middle::mir::{self, Local, Location};\n use rustc_middle::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n-use rustc_middle::ty::{self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable, VtblEntry};\n+use rustc_middle::ty::{\n+    self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable, TypeVisitable, VtblEntry,\n+};\n use rustc_middle::{middle::codegen_fn_attrs::CodegenFnAttrFlags, mir::visit::TyContext};\n use rustc_session::config::EntryFnType;\n use rustc_session::lint::builtin::LARGE_ASSIGNMENTS;"}, {"sha": "9190e5fe4eb08e00ec33c1c41ed96186366f71d2", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::middle::exported_symbols::{SymbolExportInfo, SymbolExportLevel\n use rustc_middle::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, Linkage, Visibility};\n use rustc_middle::mir::mono::{InstantiationMode, MonoItem};\n use rustc_middle::ty::print::characteristic_def_id_of_type;\n-use rustc_middle::ty::{self, fold::TypeFoldable, DefIdTree, InstanceDef, TyCtxt};\n+use rustc_middle::ty::{self, visit::TypeVisitable, DefIdTree, InstanceDef, TyCtxt};\n use rustc_span::symbol::Symbol;\n \n use super::PartitioningCx;"}, {"sha": "aaa924d7fa0deca6e17644e123e44bea5b2bf138", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -13,9 +13,9 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::{\n     self,\n-    fold::{TypeFoldable, TypeSuperFoldable, TypeVisitor},\n     query::Providers,\n     subst::SubstsRef,\n+    visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor},\n     Const, Ty, TyCtxt,\n };\n use rustc_span::symbol::sym;"}, {"sha": "cd91e402cac476dfbd62529097218d3849918fc4", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -27,7 +27,7 @@ use rustc_middle::thir::abstract_const::Node as ACNode;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, Const, DefIdTree, GenericParamDefKind};\n-use rustc_middle::ty::{TraitRef, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n+use rustc_middle::ty::{TraitRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n use rustc_session::lint;\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, Ident};\n@@ -80,7 +80,7 @@ trait DefIdVisitor<'tcx> {\n             dummy: Default::default(),\n         }\n     }\n-    fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<Self::BreakTy> {\n+    fn visit(&mut self, ty_fragment: impl TypeVisitable<'tcx>) -> ControlFlow<Self::BreakTy> {\n         ty_fragment.visit_with(&mut self.skeleton())\n     }\n     fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "470438471cb96cdc80eb26b597d5968a7fd8c4bf", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -3,7 +3,7 @@ use rustc_hir::def_id::CrateNum;\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_middle::ty::print::{PrettyPrinter, Print, Printer};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, Instance, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, Instance, Ty, TyCtxt, TypeVisitable};\n use rustc_middle::util::common::record_time;\n \n use tracing::debug;"}, {"sha": "13229a3995c220bae7660e1822da970b644c3c8d", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::print::{Print, Printer};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{\n-    self, EarlyBinder, FloatTy, Instance, IntTy, Ty, TyCtxt, TypeFoldable, UintTy,\n+    self, EarlyBinder, FloatTy, Instance, IntTy, Ty, TyCtxt, TypeVisitable, UintTy,\n };\n use rustc_span::symbol::kw;\n use rustc_target::abi::call::FnAbi;\n@@ -240,7 +240,7 @@ impl<'tcx> SymbolMangler<'tcx> {\n         print_value: impl FnOnce(&'a mut Self, &T) -> Result<&'a mut Self, !>,\n     ) -> Result<&'a mut Self, !>\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeVisitable<'tcx>,\n     {\n         let regions = if value.has_late_bound_regions() {\n             self.tcx.collect_referenced_late_bound_regions(value)"}, {"sha": "8b7e8984a8adbf359b4be7882198932deea4413a", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::{self, TraitRef, Ty, TyCtxt};\n-use rustc_middle::ty::{ToPredicate, TypeFoldable};\n+use rustc_middle::ty::{ToPredicate, TypeVisitable};\n use rustc_session::Limit;\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::Span;"}, {"sha": "9d30374f8b8aeac6bb0641558454f4f1c9c0bf46", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::infer::canonical::{Canonical, CanonicalizedQueryResponse, Quer\n use rustc_middle::traits::query::Fallible;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::ToPredicate;\n-use rustc_middle::ty::{self, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TypeFoldable, TypeVisitable};\n use rustc_span::{Span, DUMMY_SP};\n \n use std::fmt::Debug;"}, {"sha": "d290f7b074cb5a894d89d704c227324ae5afa762", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -9,6 +9,7 @@ use rustc_infer::infer::{InferCtxt, TyCtxtInferExt as _};\n use rustc_infer::traits::{Obligation, ObligationCause, TraitEngine};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts};\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, OpaqueHiddenType, OpaqueTypeKey, ToPredicate, Ty, TyCtxt};\n use rustc_span::Span;\n "}, {"sha": "65ff9ceb67ecbbabb52db70271b970fe6649f4d8", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -8,6 +8,7 @@ use crate::infer::InferCtxt;\n use crate::traits::project::ProjectAndUnifyResult;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{Region, RegionVid, Term};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};"}, {"sha": "9ef7ac9a8e04af75f8160168811c547666c4833a", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -8,7 +8,7 @@ use crate::traits::{\n     PredicateObligation, SelectionError, TraitEngine,\n };\n use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n-use rustc_middle::ty::{self, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TypeVisitable};\n \n pub struct FulfillmentContext<'tcx> {\n     obligations: FxIndexSet<PredicateObligation<'tcx>>,"}, {"sha": "f933f1c3c94a75d14019118aa33c83719338be6f", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -20,8 +20,8 @@ use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::{util, TraitEngine};\n use rustc_middle::traits::specialization_graph::OverlapMode;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n-use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::Subst;\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, ImplSubject, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;"}, {"sha": "f9b4a1583cc741004100b065f9e0b48def6fa5c5", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::mir::interpret::{ErrorHandled, LitToConstError, LitToConstInpu\n use rustc_middle::thir;\n use rustc_middle::thir::abstract_const::{self, Node, NodeId, NotConstEvaluatable};\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, DelaySpanBugEmitted, EarlyBinder, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, DelaySpanBugEmitted, EarlyBinder, TyCtxt, TypeVisitable};\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::Span;"}, {"sha": "8fd58f3ce1abc37b1768d19edb78a7e5bc35224e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -30,6 +30,7 @@ use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::{\n     self, SubtypePredicate, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeFoldable,\n+    TypeVisitable,\n };\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{ExpnKind, Span, DUMMY_SP};"}, {"sha": "31d54b5b403937fe5e129f3da8474ec045491333", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -24,7 +24,7 @@ use rustc_middle::hir::map;\n use rustc_middle::ty::{\n     self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n     GeneratorDiagnosticData, GeneratorInteriorTypeCause, Infer, InferTy, IsSuggestable,\n-    ToPredicate, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n+    ToPredicate, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitable,\n };\n use rustc_middle::ty::{TypeAndMut, TypeckResults};\n use rustc_session::Limit;"}, {"sha": "78600652254f1f10ffa7a61fde11c4e8e6904d84", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::thir::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::ToPredicate;\n-use rustc_middle::ty::{self, Binder, Const, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Binder, Const, Ty, TypeVisitable};\n use std::marker::PhantomData;\n \n use super::const_evaluatable;"}, {"sha": "dd2769c7186981273fa6c87d4be513d348cab8d4", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -5,7 +5,7 @@ use crate::traits::{self, ObligationCause};\n \n use rustc_hir as hir;\n use rustc_infer::infer::TyCtxtInferExt;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n \n use crate::traits::error_reporting::InferCtxtExt;\n "}, {"sha": "74d2eb17b6b30e1fc6e2e54d53667c6f822c99b3", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -32,6 +32,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, GenericParamDefKind, ToPredicate, Ty, TyCtxt, VtblEntry};\n use rustc_span::{sym, Span};\n use smallvec::SmallVec;"}, {"sha": "ac1811244ca5e6167b09c81674e0e8255e02a4d2", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -19,7 +19,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, Subst};\n use rustc_middle::ty::{\n-    self, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor,\n+    self, EarlyBinder, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_middle::ty::{Predicate, ToPredicate};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n@@ -731,7 +731,7 @@ fn receiver_is_dispatchable<'tcx>(\n     })\n }\n \n-fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n+fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n     tcx: TyCtxt<'tcx>,\n     trait_def_id: DefId,\n     value: T,"}, {"sha": "b3e7fbb35782860a847a54968614d9a58084434d", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -29,8 +29,9 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::traits::select::OverflowError;\n-use rustc_middle::ty::fold::{MaxUniverse, TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::subst::Subst;\n+use rustc_middle::ty::visit::{MaxUniverse, TypeVisitable};\n use rustc_middle::ty::{self, EarlyBinder, Term, ToPredicate, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n \n@@ -359,7 +360,7 @@ where\n     result\n }\n \n-pub(crate) fn needs_normalization<'tcx, T: TypeFoldable<'tcx>>(value: &T, reveal: Reveal) -> bool {\n+pub(crate) fn needs_normalization<'tcx, T: TypeVisitable<'tcx>>(value: &T, reveal: Reveal) -> bool {\n     match reveal {\n         Reveal::UserFacing => value\n             .has_type_flags(ty::TypeFlags::HAS_TY_PROJECTION | ty::TypeFlags::HAS_CT_PROJECTION),"}, {"sha": "eccfb3477b9dd00e6726bc8f3a3033d528dca021", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -14,6 +14,7 @@ use rustc_infer::traits::Normalized;\n use rustc_middle::mir;\n use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::subst::Subst;\n+use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitor};\n \n use std::ops::ControlFlow;\n@@ -108,7 +109,7 @@ struct MaxEscapingBoundVarVisitor {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for MaxEscapingBoundVarVisitor {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n+    fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {"}, {"sha": "2a3319f0f26fbc15d29da71fe9c07d7f5f5fcf78", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -3,7 +3,7 @@ use crate::traits::query::Fallible;\n use rustc_infer::traits::query::OutlivesBound;\n use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, HashStable, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, Debug, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct ImpliedOutlivesBounds<'tcx> {\n     pub ty: Ty<'tcx>,\n }"}, {"sha": "b63382429d0aa394baa4e4cee2464f781274e2b0", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -3,7 +3,7 @@ use crate::traits::query::dropck_outlives::{trivial_dropck_outlives, DropckOutli\n use crate::traits::query::Fallible;\n use rustc_middle::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, HashStable, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, Debug, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct DropckOutlives<'tcx> {\n     dropped_ty: Ty<'tcx>,\n }"}, {"sha": "0f7af41cfe3ff5b0b320e2f7861afdee1dcf6b6e", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -12,7 +12,7 @@ use rustc_infer::traits::TraitEngine;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n use rustc_lint_defs::builtin::DEREF_INTO_DYN_SUPERTRAIT;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self, ToPredicate, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TypeVisitable};\n use rustc_target::spec::abi::Abi;\n \n use crate::traits;"}, {"sha": "596ee43562234421e37fe7153cdbe3d1bc22fa61", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -39,7 +39,7 @@ use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n-use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable, TypeVisitable};\n use rustc_span::symbol::sym;\n \n use std::cell::{Cell, RefCell};"}, {"sha": "fcb73b43fa8a1354aa9c09faf010a8701da67d9b", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -4,7 +4,7 @@ use crate::traits;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::fast_reject::{self, SimplifiedType, TreatParams};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n \n pub use rustc_middle::traits::specialization_graph::*;\n "}, {"sha": "f3ae34ce30a4883fb9c300bd03907f1d74246e0c", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n use rustc_span::Span;\n use std::ops::ControlFlow;\n "}, {"sha": "3170b29ee69733777702926ac673cbfa480f0c62", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -6,7 +6,7 @@ use smallvec::SmallVec;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, Subst, SubstsRef};\n-use rustc_middle::ty::{self, EarlyBinder, ImplSubject, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, EarlyBinder, ImplSubject, ToPredicate, Ty, TyCtxt, TypeVisitable};\n \n use super::{Normalized, Obligation, ObligationCause, PredicateObligation, SelectionContext};\n pub use rustc_infer::traits::{self, util::*};"}, {"sha": "d43b3c9091fc6a9d6659bbb1cc19f2f134921fb4", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -5,7 +5,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeVisitable};\n use rustc_span::Span;\n \n use std::iter;"}, {"sha": "c7c604e14e3ee4d235ffc5db02c1b7b1c82d0247", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -35,7 +35,8 @@ use rustc_ast::ast;\n use rustc_middle::traits::{ChalkEnvironmentAndGoal, ChalkRustInterner as RustInterner};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{\n-    self, Binder, Region, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitor,\n+    self, Binder, Region, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n+    TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_span::def_id::DefId;\n \n@@ -896,7 +897,7 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n+    fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {"}, {"sha": "db7ea4253e36c86454addb406e20a8fdb6ded972", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::infer::canonical::{CanonicalTyVarKind, CanonicalVarKind};\n use rustc_middle::traits::ChalkRustInterner;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::GenericArg;\n-use rustc_middle::ty::{self, BoundVar, ParamTy, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, BoundVar, ParamTy, TyCtxt, TypeFoldable, TypeVisitable};\n \n use rustc_infer::infer::canonical::{\n     Canonical, CanonicalVarValues, Certainty, QueryRegionConstraints, QueryResponse,"}, {"sha": "c7cac8fca899bf23441fa56ad6c469074a3abb79", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -9,7 +9,7 @@ use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::query::OutlivesBound;\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n use rustc_span::source_map::DUMMY_SP;\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n use rustc_trait_selection::traits::query::{CanonicalTyGoal, Fallible, NoSolution};"}, {"sha": "5e58f2379827ebded1a3173a75b208ba8fc54615", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -4,7 +4,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::traits::CodegenObligationError;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{\n-    self, Binder, Instance, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor,\n+    self, Binder, Instance, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_span::{sym, DUMMY_SP};\n use rustc_trait_selection::traits;\n@@ -56,7 +56,7 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n     type BreakTy = ();\n \n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n+    fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {"}, {"sha": "703277ec66ae6c06edae7a159011aea06bc306ef", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -28,7 +28,7 @@ use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{\n-    self, Const, DefIdTree, EarlyBinder, IsSuggestable, Ty, TyCtxt, TypeFoldable,\n+    self, Const, DefIdTree, EarlyBinder, IsSuggestable, Ty, TyCtxt, TypeVisitable,\n };\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECTS};\n use rustc_span::edition::Edition;"}, {"sha": "deaadf0e5c84a3392c62911cbc8341768f1cd65a", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n use rustc_hir::{self as hir, ExprKind};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::traits::Obligation;\n-use rustc_middle::ty::{self, ToPredicate, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TypeVisitable};\n use rustc_span::Span;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{"}, {"sha": "2c8be88ef6c929343d01c5ba374539dda7efa269", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability,\n };\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use rustc_target::spec::abi;"}, {"sha": "66dd5582490523b870494f083175cf13b9d33be2", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -40,7 +40,7 @@ use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::cast::{CastKind, CastTy};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, Ty, TypeAndMut, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TypeAndMut, TypeVisitable};\n use rustc_session::lint;\n use rustc_session::Session;\n use rustc_span::symbol::sym;"}, {"sha": "6ed2ce155d92337bcc1fc8c4b4cf262f00d6110e", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -21,7 +21,9 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n-use rustc_middle::ty::{self, ParamEnv, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n+use rustc_middle::ty::{\n+    self, ParamEnv, ToPredicate, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n+};\n use rustc_session::lint::builtin::{UNINHABITED_STATIC, UNSUPPORTED_CALLING_CONVENTIONS};\n use rustc_span::symbol::sym;\n use rustc_span::{self, Span};\n@@ -522,7 +524,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n \n     struct FoundParentLifetime;\n     struct FindParentLifetimeVisitor<'tcx>(&'tcx ty::Generics);\n-    impl<'tcx> ty::fold::TypeVisitor<'tcx> for FindParentLifetimeVisitor<'tcx> {\n+    impl<'tcx> ty::visit::TypeVisitor<'tcx> for FindParentLifetimeVisitor<'tcx> {\n         type BreakTy = FoundParentLifetime;\n \n         fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -556,7 +558,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n         selftys: Vec<(Span, Option<String>)>,\n     }\n \n-    impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n+    impl<'tcx> ty::visit::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n         type BreakTy = Ty<'tcx>;\n \n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -1595,7 +1597,7 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) -> E\n                 .filter(|(_, ty)| !matches!(ty.kind(), ty::Never))\n             {\n                 struct OpaqueTypeCollector(Vec<DefId>);\n-                impl<'tcx> ty::fold::TypeVisitor<'tcx> for OpaqueTypeCollector {\n+                impl<'tcx> ty::visit::TypeVisitor<'tcx> for OpaqueTypeCollector {\n                     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                         match *t.kind() {\n                             ty::Opaque(def, _) => {"}, {"sha": "1681e6af8123930b0dd62b1d8779186e3fc47d76", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -10,8 +10,8 @@ use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_infer::infer::{InferOk, InferResult};\n-use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::InternalSubsts;\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::source_map::Span;\n use rustc_target::spec::abi::Abi;"}, {"sha": "acd7e4a92dcc98c75e10e0485541f26d9dfc30ce", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -50,9 +50,9 @@ use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast,\n };\n use rustc_middle::ty::error::TypeError;\n-use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::relate::RelateResult;\n use rustc_middle::ty::subst::SubstsRef;\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, ToPredicate, Ty, TypeAndMut};\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;"}, {"sha": "45ea04f2342889da9a88df839473013abfd3519c", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -44,7 +44,7 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase};\n use rustc_middle::ty::error::TypeError::FieldMisMatch;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, AdtKind, DefIdTree, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, AdtKind, DefIdTree, Ty, TypeVisitable};\n use rustc_session::parse::feature_err;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;"}, {"sha": "f3341e72e7362d9741914116ae34485223f806a4", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -23,6 +23,7 @@ use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{\n     self, GenericArgKind, InternalSubsts, Subst, SubstsRef, UserSelfTy, UserSubsts,\n };\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{\n     self, AdtKind, CanonicalUserType, DefIdTree, EarlyBinder, GenericParamDefKind, ToPolyTraitRef,\n     ToPredicate, Ty, UserType,\n@@ -557,7 +558,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // sufficiently enforced with erased regions. =)\n     fn can_contain_user_lifetime_bounds<T>(t: T) -> bool\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeVisitable<'tcx>,\n     {\n         t.has_free_regions() || t.has_projections() || t.has_infer_types()\n     }"}, {"sha": "1794446e92aa5251e9d880f213fd683aa9268f50", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -24,7 +24,7 @@ use rustc_infer::infer::error_reporting::{FailureCode, ObligationCauseExt};\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::TypeTrace;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n-use rustc_middle::ty::fold::TypeFoldable;\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, IsSuggestable, Ty, TyCtxt};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;"}, {"sha": "05bcc710e16258977dad795ed29b2ba1b55ca9e7", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -15,8 +15,8 @@ use rustc_hir::def_id::DefId;\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::GenericArgKind;\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Const, Ty, TyCtxt};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;"}, {"sha": "2ce258cf69c7aa97732a98363c843018f2fa9482", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -8,6 +8,7 @@ use rustc_hir::HirIdMap;\n use rustc_infer::infer;\n use rustc_infer::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use rustc_middle::ty::fold::TypeFoldable;\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::{self, Span};\n use rustc_trait_selection::infer::InferCtxtExt as _;"}, {"sha": "cc91f2431e07660ea71a05fdba47c0e4da9de038", "filename": "compiler/rustc_typeck/src/check/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_index::vec::Idx;\n use rustc_middle::ty::layout::{LayoutError, SizeSkeleton};\n-use rustc_middle::ty::{self, Article, FloatTy, InferTy, IntTy, Ty, TyCtxt, TypeFoldable, UintTy};\n+use rustc_middle::ty::{self, Article, FloatTy, InferTy, IntTy, Ty, TyCtxt, TypeVisitable, UintTy};\n use rustc_session::lint;\n use rustc_span::{Span, Symbol, DUMMY_SP};\n use rustc_target::abi::{Pointer, VariantIdx};"}, {"sha": "e29f0275bf48da791dc9095e8170cd7813c2dedc", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -21,7 +21,7 @@ use rustc_infer::infer::{self, InferOk};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{self, ToPredicate, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TypeVisitable};\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use rustc_trait_selection::traits;"}, {"sha": "e9b91414a07ab5fea6f6e828691026229c1b3553", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -21,7 +21,9 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{self, EarlyBinder, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{\n+    self, EarlyBinder, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeVisitable,\n+};\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::lev_distance::{"}, {"sha": "e7a2b32571c461096b3e87711693ec86258b3bfd", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::traits::util::supertraits;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::print::with_crate_prefix;\n use rustc_middle::ty::ToPolyTraitRef;\n-use rustc_middle::ty::{self, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, DefIdTree, ToPredicate, Ty, TyCtxt, TypeVisitable};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{lev_distance, source_map, ExpnKind, FileName, MacroKind, Span};\n use rustc_trait_selection::traits::error_reporting::on_unimplemented::InferCtxtExt as _;"}, {"sha": "42893789957f4fd1609e863fd82110e85e7b2933", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability,\n };\n use rustc_middle::ty::{\n-    self, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitor,\n+    self, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{sym, Ident};"}, {"sha": "fbfbfba5c2ad21c9407105425a27467fc6a1bac8", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::{HirId, Pat, PatKind};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::middle::stability::EvalResult;\n-use rustc_middle::ty::{self, Adt, BindingMode, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Adt, BindingMode, Ty, TypeVisitable};\n use rustc_session::lint::builtin::NON_EXHAUSTIVE_OMITTED_PATTERNS;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;"}, {"sha": "84a8cc431f4d7b5e7cdf1d193d1414c30361415a", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n     self, AdtKind, DefIdTree, EarlyBinder, GenericParamDefKind, ToPredicate, Ty, TyCtxt,\n-    TypeFoldable, TypeSuperFoldable, TypeVisitor,\n+    TypeFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -1369,7 +1369,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n             struct CountParams {\n                 params: FxHashSet<u32>,\n             }\n-            impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams {\n+            impl<'tcx> ty::visit::TypeVisitor<'tcx> for CountParams {\n                 type BreakTy = ();\n \n                 fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "41d241f84aceaf7f7e098d9b40706a2587479ee6", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -15,6 +15,7 @@ use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable};\n use rustc_middle::ty::{self, ClosureSizeProfileData, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;"}, {"sha": "d532050d05035417069c0e443c933f9b9c081fd6", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -11,7 +11,7 @@ use rustc_infer::infer;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::adjustment::CoerceUnsizedInfo;\n-use rustc_middle::ty::{self, suggest_constraining_type_params, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, suggest_constraining_type_params, Ty, TyCtxt, TypeVisitable};\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::misc::{can_type_implement_copy, CopyImplementationError};\n use rustc_trait_selection::traits::predicate_for_trait_def;"}, {"sha": "623c2a15232de26a98a3b39aa0d4a3a1c412dc79", "filename": "compiler/rustc_typeck/src/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -8,7 +8,7 @@\n use rustc_errors::struct_span_err;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n "}, {"sha": "ef0a9a27a016a7e86750a3169de9de4922afe2e7", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IgnoreRegions;\n use rustc_middle::ty::{\n-    self, ImplPolarity, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor,\n+    self, ImplPolarity, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_session::lint;\n use rustc_span::def_id::{DefId, LocalDefId};"}, {"sha": "f942a4fb53a261aff64781c2b3138bab25ae5567", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::{HirId, Node};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IntTypeExt;\n-use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitable};\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n "}, {"sha": "8428e46640671e2dcca2082db884d6fc41b2c714", "filename": "compiler/rustc_typeck/src/constrained_generic_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeSuperFoldable, TypeVisitor};\n+use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::source_map::Span;\n use std::ops::ControlFlow;\n@@ -43,7 +43,7 @@ pub fn parameters_for_impl<'tcx>(\n /// of parameters whose values are needed in order to constrain `ty` - these\n /// differ, with the latter being a superset, in the presence of projections.\n pub fn parameters_for<'tcx>(\n-    t: &impl TypeFoldable<'tcx>,\n+    t: &impl TypeVisitable<'tcx>,\n     include_nonconstraining: bool,\n ) -> Vec<Parameter> {\n     let mut collector = ParameterCollector { parameters: vec![], include_nonconstraining };"}, {"sha": "e7ca70de4ba717923abe601b55179012e213c12c", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -16,7 +16,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n use rustc_span::Span;\n \n use std::collections::hash_map::Entry::{Occupied, Vacant};"}, {"sha": "c46b825f4578db25282d0b20fd853eb6f3946123", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -75,7 +75,7 @@ use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::specialization_graph::Node;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n use rustc_span::Span;\n use rustc_trait_selection::traits::{self, translate_substs, wf};\n "}, {"sha": "ced919f66db41996e07877cd329ca6da5bfc7922", "filename": "compiler/rustc_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -51,6 +51,7 @@\n use rustc_middle::hir::place::*;\n use rustc_middle::ty::adjustment;\n use rustc_middle::ty::fold::TypeFoldable;\n+use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n use rustc_data_structures::fx::FxIndexMap;"}, {"sha": "324df313ef1d8bbc49370e6c4f389207304cadc6", "filename": "compiler/rustc_typeck/src/structured_errors/missing_cast_for_variadic_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,6 +1,6 @@\n use crate::structured_errors::StructuredDiagnostic;\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId, ErrorGuaranteed};\n-use rustc_middle::ty::{Ty, TypeFoldable};\n+use rustc_middle::ty::{Ty, TypeVisitable};\n use rustc_session::Session;\n use rustc_span::Span;\n "}, {"sha": "bb608805488ef1850755e0009d1ab097551d381b", "filename": "compiler/rustc_typeck/src/structured_errors/sized_unsized_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -1,6 +1,6 @@\n use crate::structured_errors::StructuredDiagnostic;\n use rustc_errors::{DiagnosticBuilder, DiagnosticId, ErrorGuaranteed};\n-use rustc_middle::ty::{Ty, TypeFoldable};\n+use rustc_middle::ty::{Ty, TypeVisitable};\n use rustc_session::Session;\n use rustc_span::Span;\n "}, {"sha": "0f4a2f79ac5d7a95c173fcf3d72593486ad324e5", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -15,7 +15,7 @@ use rustc_hir::{\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeckResults};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable, TypeckResults};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::sym, Span, Symbol};\n use rustc_trait_selection::infer::InferCtxtExt;"}, {"sha": "42fac550ec69c4af85f9e6cb76e6f37bdaadc163", "filename": "src/tools/clippy/clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -12,7 +12,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, ClosureKind, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, ClosureKind, Ty, TypeVisitable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n "}, {"sha": "4db103bbc1305ace26d744ecfb4d53113dc8dab9", "filename": "src/tools/clippy/clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint;\n use clippy_utils::trait_ref_of_method;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::TypeFoldable;\n+use rustc_middle::ty::TypeVisitable;\n use rustc_middle::ty::{Adt, Array, Ref, Slice, Tuple, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;"}, {"sha": "0cbef1c95fe95ba4a15b565d2cbc147593cf6b50", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::{HirIdMap, HirIdSet};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::FakeReadCause;\n-use rustc_middle::ty::{self, TypeFoldable};\n+use rustc_middle::ty::{self, TypeVisitable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::kw;\n use rustc_span::{sym, Span};"}, {"sha": "6d0b9a0f03fa89160df15b4700fec428033e7b3f", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::mir::{\n     visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor as _},\n     Mutability,\n };\n-use rustc_middle::ty::{self, fold::TypeVisitor, Ty};\n+use rustc_middle::ty::{self, visit::TypeVisitor, Ty};\n use rustc_mir_dataflow::{Analysis, AnalysisDomain, CallReturnPlaces, GenKill, GenKillAnalysis, ResultsCursor};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};"}, {"sha": "5eb03275b8ec1663e5061618c95dd9d63e1e9443", "filename": "src/tools/clippy/clippy_lints/src/transmute/transmute_ptr_to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::{meets_msrv, msrvs, sugg};\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, Expr, GenericArg, Mutability, Path, TyKind};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TypeVisitable};\n use rustc_semver::RustcVersion;\n \n /// Checks for `transmute_ptr_to_ref` lint."}, {"sha": "8122cd716e01183a362b4a091b23fbf8d1d150c1", "filename": "src/tools/clippy/clippy_lints/src/transmute/useless_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::sugg;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TypeVisitable};\n \n /// Checks for `useless_transmute` lint.\n /// Returns `true` if it's triggered, otherwise returns `false`."}, {"sha": "b2f536ca7815b7e155f4dfc5a4052dceebdb97ce", "filename": "src/tools/clippy/clippy_lints/src/types/vec_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, GenericArg, QPath, TyKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::layout::LayoutOf;\n-use rustc_middle::ty::TypeFoldable;\n+use rustc_middle::ty::TypeVisitable;\n use rustc_span::symbol::sym;\n use rustc_typeck::hir_ty_to_ty;\n "}, {"sha": "cf509455aad0aeea766170e78a53aedc94377699", "filename": "src/tools/clippy/clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{Expr, ExprKind, PatKind, Stmt, StmtKind};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Ty, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, Ty, TypeVisitable, TypeSuperVisitable, TypeVisitor};\n \n use super::LET_UNIT_VALUE;\n "}, {"sha": "8dc43c0e29436d369b05d50d0880da07477352b3", "filename": "src/tools/clippy/clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -4,7 +4,7 @@ use if_chain::if_chain;\n use rustc_hir::{self as hir, HirId, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::layout::LayoutOf as _;\n-use rustc_middle::ty::{Adt, Ty, TypeFoldable};\n+use rustc_middle::ty::{Adt, Ty, TypeVisitable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n use rustc_typeck::hir_ty_to_ty;"}, {"sha": "1b32f0aaeb8df141c79a18a389109c772873768d", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -93,7 +93,7 @@ use rustc_middle::ty::fast_reject::SimplifiedTypeGen::{\n     ArraySimplifiedType, BoolSimplifiedType, CharSimplifiedType, FloatSimplifiedType, IntSimplifiedType,\n     PtrSimplifiedType, SliceSimplifiedType, StrSimplifiedType, UintSimplifiedType,\n };\n-use rustc_middle::ty::{layout::IntegerExt, BorrowKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeFoldable, UpvarCapture};\n+use rustc_middle::ty::{layout::IntegerExt, BorrowKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeVisitable, UpvarCapture};\n use rustc_middle::ty::{FloatTy, IntTy, UintTy};\n use rustc_semver::RustcVersion;\n use rustc_session::Session;"}, {"sha": "a426fa1b0ffcfc927eb90dc075162f04dae1c21c", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{\n     self, AdtDef, Binder, BoundRegion, DefIdTree, FnSig, IntTy, ParamEnv, Predicate, PredicateKind, ProjectionTy,\n-    Region, RegionKind, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor, UintTy, VariantDef, VariantDiscr,\n+    Region, RegionKind, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy, VariantDef, VariantDiscr,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n@@ -765,7 +765,7 @@ pub fn for_each_top_level_late_bound_region<B>(\n                 ControlFlow::Continue(())\n             }\n         }\n-        fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<'tcx, T>) -> ControlFlow<Self::BreakTy> {\n+        fn visit_binder<T: TypeVisitable<'tcx>>(&mut self, t: &Binder<'tcx, T>) -> ControlFlow<Self::BreakTy> {\n             self.index += 1;\n             let res = t.super_visit_with(self);\n             self.index -= 1;"}]}