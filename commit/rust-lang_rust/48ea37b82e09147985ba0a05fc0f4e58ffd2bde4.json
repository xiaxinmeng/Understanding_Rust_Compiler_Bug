{"sha": "48ea37b82e09147985ba0a05fc0f4e58ffd2bde4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZWEzN2I4MmUwOTE0Nzk4NWJhMGEwNWZjMGY0ZTU4ZmZkMmJkZTQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-29T00:33:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-29T00:33:16Z"}, "message": "Rollup merge of #72636 - marmeladema:resolver-outputs-def-id, r=petrochenkov\n\nCleanup `Resolver::<clone|into>_outputs` methods\n\nFollow-up cleanup work of https://github.com/rust-lang/rust/pull/72402\n\nFirst commit has been split out from https://github.com/rust-lang/rust/pull/72552\n\nr? @ecstatic-morse", "tree": {"sha": "7716bcbb1199907865b7c18d7526271c04c12cdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7716bcbb1199907865b7c18d7526271c04c12cdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0FhMCRBK7hj4Ov3rIwAAdHIIAFAxBAvUZ2F69gd+CPJDks2S\n6Q9/WNcAtKy0+OjFs+Df0Bs008ondNDi1I6H0lmFcxTv3GgZvjRBPAPdmQ3EVzns\n5FiYBV8yt6wswizJ9ICV+7SInFKLR6mI9ZNgIt0Fm4oLyoLyw0nHqpZLI13ghZJL\nJ3wSvaJnCt7zTQ/WjpsLc1kZuXxdbMMvuFIE4kITj7nPn+OWyWoIUIrHnwso712F\nJsecT1d1m+/LhUgvdtgJzyw89gdLN94q6QSotC7ijUOUGdm+wYDFmP6KLDOw9dYT\nCCFchgVwyE+lSUBzZp5/6zTJ6FivEZoj2ZWD+LmiokEzJBbyXi7CJYev5HSSPcs=\n=i5ef\n-----END PGP SIGNATURE-----\n", "payload": "tree 7716bcbb1199907865b7c18d7526271c04c12cdc\nparent 235f3827316200db2ce4b535507528725cfeb7a3\nparent 81f8ee458b10762e3c4b3389d373a5a26c1d8fb7\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590712396 +0200\ncommitter GitHub <noreply@github.com> 1590712396 +0200\n\nRollup merge of #72636 - marmeladema:resolver-outputs-def-id, r=petrochenkov\n\nCleanup `Resolver::<clone|into>_outputs` methods\n\nFollow-up cleanup work of https://github.com/rust-lang/rust/pull/72402\n\nFirst commit has been split out from https://github.com/rust-lang/rust/pull/72552\n\nr? @ecstatic-morse\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4", "html_url": "https://github.com/rust-lang/rust/commit/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "235f3827316200db2ce4b535507528725cfeb7a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/235f3827316200db2ce4b535507528725cfeb7a3", "html_url": "https://github.com/rust-lang/rust/commit/235f3827316200db2ce4b535507528725cfeb7a3"}, {"sha": "81f8ee458b10762e3c4b3389d373a5a26c1d8fb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/81f8ee458b10762e3c4b3389d373a5a26c1d8fb7", "html_url": "https://github.com/rust-lang/rust/commit/81f8ee458b10762e3c4b3389d373a5a26c1d8fb7"}], "stats": {"total": 123, "additions": 44, "deletions": 79}, "files": [{"sha": "35cff668581dde93afe41973e5bbc52f5fef852e", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=48ea37b82e09147985ba0a05fc0f4e58ffd2bde4", "patch": "@@ -10,7 +10,6 @@ pub use rustc_ast::ast::{CaptureBy, Movability, Mutability};\n use rustc_ast::ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_ast::node_id::NodeMap;\n use rustc_ast::util::parser::ExprPrecedence;\n-use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_macros::HashStable_Generic;\n use rustc_span::source_map::{SourceMap, Spanned};\n@@ -2664,10 +2663,6 @@ impl<ID> TraitCandidate<ID> {\n // Trait method resolution\n pub type TraitMap<ID = HirId> = NodeMap<Vec<TraitCandidate<ID>>>;\n \n-// Map from the NodeId of a glob import to a list of items which are actually\n-// imported.\n-pub type GlobMap = NodeMap<FxHashSet<Symbol>>;\n-\n #[derive(Copy, Clone, Debug, HashStable_Generic)]\n pub enum Node<'hir> {\n     Param(&'hir Param<'hir>),"}, {"sha": "1e27f1549112a6562fdc86034a023e49987354de", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=48ea37b82e09147985ba0a05fc0f4e58ffd2bde4", "patch": "@@ -169,7 +169,6 @@ impl<'hir> Map<'hir> {\n         })\n     }\n \n-    // FIXME(eddyb) this function can and should return `LocalDefId`.\n     #[inline]\n     pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {\n         self.opt_local_def_id(hir_id).unwrap_or_else(|| {\n@@ -192,11 +191,6 @@ impl<'hir> Map<'hir> {\n         self.tcx.definitions.opt_local_def_id(node)\n     }\n \n-    #[inline]\n-    pub fn as_local_node_id(&self, def_id: DefId) -> Option<NodeId> {\n-        self.tcx.definitions.as_local_node_id(def_id)\n-    }\n-\n     #[inline]\n     pub fn as_local_hir_id(&self, def_id: LocalDefId) -> HirId {\n         self.tcx.definitions.as_local_hir_id(def_id)"}, {"sha": "85451bf6538e44406d586b64bdcbcbdfd23ec189", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=48ea37b82e09147985ba0a05fc0f4e58ffd2bde4", "patch": "@@ -973,7 +973,9 @@ rustc_queries! {\n             desc { \"fetching what a crate is named\" }\n         }\n         query item_children(_: DefId) -> &'tcx [Export<hir::HirId>] {}\n-        query extern_mod_stmt_cnum(_: DefId) -> Option<CrateNum> {}\n+        query extern_mod_stmt_cnum(_: LocalDefId) -> Option<CrateNum> {\n+            desc { \"fetching extern module statement\" }\n+        }\n \n         query get_lib_features(_: CrateNum) -> LibFeatures {\n             storage(ArenaCacheSelector<'tcx>)\n@@ -1040,7 +1042,7 @@ rustc_queries! {\n             desc { |tcx| \"maybe_unused_trait_import for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n         }\n         query maybe_unused_extern_crates(_: CrateNum)\n-            -> &'tcx [(DefId, Span)] {\n+            -> &'tcx [(LocalDefId, Span)] {\n             eval_always\n             desc { \"looking up all possibly unused extern crates\" }\n         }"}, {"sha": "7a2001448419099e588d44657a5ad7ce7e227d4d", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=48ea37b82e09147985ba0a05fc0f4e58ffd2bde4", "patch": "@@ -925,7 +925,7 @@ pub struct GlobalCtxt<'tcx> {\n     pub consts: CommonConsts<'tcx>,\n \n     /// Resolutions of `extern crate` items produced by resolver.\n-    extern_crate_map: FxHashMap<DefId, CrateNum>,\n+    extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n \n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n@@ -944,7 +944,7 @@ pub struct GlobalCtxt<'tcx> {\n     pub queries: query::Queries<'tcx>,\n \n     maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n-    maybe_unused_extern_crates: Vec<(DefId, Span)>,\n+    maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n     /// A map of glob use to a set of names it actually imports. Currently only\n     /// used in save-analysis.\n     glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,"}, {"sha": "01517ab25a24ac4fe49dcd700826ca658da3ded7", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=48ea37b82e09147985ba0a05fc0f4e58ffd2bde4", "patch": "@@ -120,10 +120,10 @@ mod sty;\n pub struct ResolverOutputs {\n     pub definitions: rustc_hir::definitions::Definitions,\n     pub cstore: Box<CrateStoreDyn>,\n-    pub extern_crate_map: FxHashMap<DefId, CrateNum>,\n+    pub extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     pub trait_map: FxHashMap<hir::HirId, Vec<hir::TraitCandidate<hir::HirId>>>,\n     pub maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n-    pub maybe_unused_extern_crates: Vec<(DefId, Span)>,\n+    pub maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n     pub export_map: ExportMap<hir::HirId>,\n     pub glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     /// Extern prelude entries. The value is `true` if the entry was introduced"}, {"sha": "92ea119d9a458c260865b73fc92c3b188a6a77f0", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=48ea37b82e09147985ba0a05fc0f4e58ffd2bde4", "patch": "@@ -130,7 +130,7 @@ impl<'a> Resolver<'a> {\n             Some(def_id) => def_id,\n             None => return self.ast_transform_scopes.get(&expn_id).unwrap_or(&self.graph_root),\n         };\n-        if let Some(id) = self.definitions.as_local_node_id(def_id) {\n+        if let Some(id) = def_id.as_local() {\n             self.local_macro_def_scopes[&id]\n         } else {\n             let module_def_id = ty::DefIdTree::parent(&*self, def_id).unwrap();\n@@ -640,9 +640,10 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 } else if orig_name == Some(kw::SelfLower) {\n                     self.r.graph_root\n                 } else {\n+                    let def_id = self.r.definitions.local_def_id(item.id);\n                     let crate_id =\n                         self.r.crate_loader.process_extern_crate(item, &self.r.definitions);\n-                    self.r.extern_crate_map.insert(item.id, crate_id);\n+                    self.r.extern_crate_map.insert(def_id, crate_id);\n                     self.r.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX })\n                 };\n \n@@ -1173,10 +1174,10 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             _ => unreachable!(),\n         };\n \n-        let def_id = self.r.definitions.local_def_id(item.id).to_def_id();\n-        let res = Res::Def(DefKind::Macro(ext.macro_kind()), def_id);\n-        self.r.macro_map.insert(def_id, ext);\n-        self.r.local_macro_def_scopes.insert(item.id, parent_scope.module);\n+        let def_id = self.r.definitions.local_def_id(item.id);\n+        let res = Res::Def(DefKind::Macro(ext.macro_kind()), def_id.to_def_id());\n+        self.r.macro_map.insert(def_id.to_def_id(), ext);\n+        self.r.local_macro_def_scopes.insert(def_id, parent_scope.module);\n \n         if macro_rules {\n             let ident = ident.normalize_to_macros_2_0();"}, {"sha": "cc0e97aeb14300ce1cf8fa8a47cb2ac1ea8d3766", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=48ea37b82e09147985ba0a05fc0f4e58ffd2bde4", "patch": "@@ -64,16 +64,17 @@ impl<'a, 'b> UnusedImportCheckVisitor<'a, 'b> {\n     fn check_import(&mut self, id: ast::NodeId) {\n         let mut used = false;\n         self.r.per_ns(|this, ns| used |= this.used_imports.contains(&(id, ns)));\n+        let def_id = self.r.definitions.local_def_id(id);\n         if !used {\n-            if self.r.maybe_unused_trait_imports.contains(&id) {\n+            if self.r.maybe_unused_trait_imports.contains(&def_id) {\n                 // Check later.\n                 return;\n             }\n             self.unused_import(self.base_id).add(id);\n         } else {\n             // This trait import is definitely used, in a way other than\n             // method resolution.\n-            self.r.maybe_unused_trait_imports.remove(&id);\n+            self.r.maybe_unused_trait_imports.remove(&def_id);\n             if let Some(i) = self.unused_imports.get_mut(&self.base_id) {\n                 i.unused.remove(&id);\n             }\n@@ -245,7 +246,8 @@ impl Resolver<'_> {\n                     }\n                 }\n                 ImportKind::ExternCrate { .. } => {\n-                    self.maybe_unused_extern_crates.push((import.id, import.span));\n+                    let def_id = self.definitions.local_def_id(import.id);\n+                    self.maybe_unused_extern_crates.push((def_id, import.span));\n                 }\n                 ImportKind::MacroUse => {\n                     let msg = \"unused `#[macro_use]` import\";"}, {"sha": "f04813cf3bc7f02cafc7426198fc936271b9bfc7", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=48ea37b82e09147985ba0a05fc0f4e58ffd2bde4", "patch": "@@ -2209,7 +2209,8 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     ) -> SmallVec<[NodeId; 1]> {\n         let mut import_ids = smallvec![];\n         while let NameBindingKind::Import { import, binding, .. } = kind {\n-            self.r.maybe_unused_trait_imports.insert(import.id);\n+            let id = self.r.definitions.local_def_id(import.id);\n+            self.r.maybe_unused_trait_imports.insert(id);\n             self.r.add_to_glob_map(&import, trait_name);\n             import_ids.push(import.id);\n             kind = &binding.kind;"}, {"sha": "015f1b6315c19cd5781b3d6bac8c832fb92998d5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 16, "deletions": 47, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=48ea37b82e09147985ba0a05fc0f4e58ffd2bde4", "patch": "@@ -37,7 +37,7 @@ use rustc_hir::def::{self, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::definitions::{DefKey, Definitions};\n use rustc_hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n-use rustc_hir::{GlobMap, TraitMap};\n+use rustc_hir::TraitMap;\n use rustc_metadata::creader::{CStore, CrateLoader};\n use rustc_middle::hir::exports::ExportMap;\n use rustc_middle::middle::cstore::{CrateStore, MetadataLoaderDyn};\n@@ -866,7 +866,7 @@ pub struct Resolver<'a> {\n     label_res_map: NodeMap<NodeId>,\n \n     /// `CrateNum` resolutions of `extern crate` items.\n-    extern_crate_map: NodeMap<CrateNum>,\n+    extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     export_map: ExportMap<NodeId>,\n     trait_map: TraitMap<NodeId>,\n \n@@ -895,11 +895,11 @@ pub struct Resolver<'a> {\n     underscore_disambiguator: u32,\n \n     /// Maps glob imports to the names of items actually imported.\n-    glob_map: GlobMap,\n+    glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n \n     used_imports: FxHashSet<(NodeId, Namespace)>,\n-    maybe_unused_trait_imports: NodeSet,\n-    maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n+    maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n+    maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n \n     /// Privacy errors are delayed until the end in order to deduplicate them.\n     privacy_errors: Vec<PrivacyError<'a>>,\n@@ -924,7 +924,7 @@ pub struct Resolver<'a> {\n     dummy_ext_bang: Lrc<SyntaxExtension>,\n     dummy_ext_derive: Lrc<SyntaxExtension>,\n     non_macro_attrs: [Lrc<SyntaxExtension>; 2],\n-    local_macro_def_scopes: FxHashMap<NodeId, Module<'a>>,\n+    local_macro_def_scopes: FxHashMap<LocalDefId, Module<'a>>,\n     ast_transform_scopes: FxHashMap<ExpnId, Module<'a>>,\n     unused_macros: NodeMap<Span>,\n     proc_macro_stubs: NodeSet,\n@@ -1269,11 +1269,7 @@ impl<'a> Resolver<'a> {\n \n     pub fn into_outputs(self) -> ResolverOutputs {\n         let definitions = self.definitions;\n-        let extern_crate_map = self\n-            .extern_crate_map\n-            .into_iter()\n-            .map(|(k, v)| (definitions.local_def_id(k).to_def_id(), v))\n-            .collect();\n+        let extern_crate_map = self.extern_crate_map;\n         let export_map = self\n             .export_map\n             .into_iter()\n@@ -1298,21 +1294,9 @@ impl<'a> Resolver<'a> {\n                 )\n             })\n             .collect();\n-        let maybe_unused_trait_imports = self\n-            .maybe_unused_trait_imports\n-            .into_iter()\n-            .map(|id| definitions.local_def_id(id))\n-            .collect();\n-        let maybe_unused_extern_crates = self\n-            .maybe_unused_extern_crates\n-            .into_iter()\n-            .map(|(id, sp)| (definitions.local_def_id(id).to_def_id(), sp))\n-            .collect();\n-        let glob_map = self\n-            .glob_map\n-            .into_iter()\n-            .map(|(id, names)| (definitions.local_def_id(id), names))\n-            .collect();\n+        let maybe_unused_trait_imports = self.maybe_unused_trait_imports;\n+        let maybe_unused_extern_crates = self.maybe_unused_extern_crates;\n+        let glob_map = self.glob_map;\n         ResolverOutputs {\n             definitions: definitions,\n             cstore: Box::new(self.crate_loader.into_cstore()),\n@@ -1334,11 +1318,7 @@ impl<'a> Resolver<'a> {\n         ResolverOutputs {\n             definitions: self.definitions.clone(),\n             cstore: Box::new(self.cstore().clone()),\n-            extern_crate_map: self\n-                .extern_crate_map\n-                .iter()\n-                .map(|(&k, &v)| (self.definitions.local_def_id(k).to_def_id(), v))\n-                .collect(),\n+            extern_crate_map: self.extern_crate_map.clone(),\n             export_map: self\n                 .export_map\n                 .iter()\n@@ -1366,21 +1346,9 @@ impl<'a> Resolver<'a> {\n                     )\n                 })\n                 .collect(),\n-            glob_map: self\n-                .glob_map\n-                .iter()\n-                .map(|(&id, names)| (self.definitions.local_def_id(id), names.clone()))\n-                .collect(),\n-            maybe_unused_trait_imports: self\n-                .maybe_unused_trait_imports\n-                .iter()\n-                .map(|&id| self.definitions.local_def_id(id))\n-                .collect(),\n-            maybe_unused_extern_crates: self\n-                .maybe_unused_extern_crates\n-                .iter()\n-                .map(|&(id, sp)| (self.definitions.local_def_id(id).to_def_id(), sp))\n-                .collect(),\n+            glob_map: self.glob_map.clone(),\n+            maybe_unused_trait_imports: self.maybe_unused_trait_imports.clone(),\n+            maybe_unused_extern_crates: self.maybe_unused_extern_crates.clone(),\n             extern_prelude: self\n                 .extern_prelude\n                 .iter()\n@@ -1522,7 +1490,8 @@ impl<'a> Resolver<'a> {\n     #[inline]\n     fn add_to_glob_map(&mut self, import: &Import<'_>, ident: Ident) {\n         if import.is_glob() {\n-            self.glob_map.entry(import.id).or_default().insert(ident.name);\n+            let def_id = self.definitions.local_def_id(import.id);\n+            self.glob_map.entry(def_id).or_default().insert(ident.name);\n         }\n     }\n "}, {"sha": "eaaff70472bfb212e2c59e661ca9946b780587ac", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea37b82e09147985ba0a05fc0f4e58ffd2bde4/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=48ea37b82e09147985ba0a05fc0f4e58ffd2bde4", "patch": "@@ -1,7 +1,7 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, DefIdSet, LocalDefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint;\n@@ -70,7 +70,7 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n     // Collect first the crates that are completely unused.  These we\n     // can always suggest removing (no matter which edition we are\n     // in).\n-    let unused_extern_crates: FxHashMap<DefId, Span> = tcx\n+    let unused_extern_crates: FxHashMap<LocalDefId, Span> = tcx\n         .maybe_unused_extern_crates(LOCAL_CRATE)\n         .iter()\n         .filter(|&&(def_id, _)| {\n@@ -88,7 +88,7 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n             // Note that if we carry through to the `extern_mod_stmt_cnum` query\n             // below it'll cause a panic because `def_id` is actually bogus at this\n             // point in time otherwise.\n-            if tcx.hir().find(tcx.hir().as_local_hir_id(def_id.expect_local())).is_none() {\n+            if tcx.hir().find(tcx.hir().as_local_hir_id(def_id)).is_none() {\n                 return false;\n             }\n             true\n@@ -112,13 +112,14 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n     });\n \n     for extern_crate in &crates_to_lint {\n-        let id = tcx.hir().as_local_hir_id(extern_crate.def_id.expect_local());\n+        let def_id = extern_crate.def_id.expect_local();\n+        let id = tcx.hir().as_local_hir_id(def_id);\n         let item = tcx.hir().expect_item(id);\n \n         // If the crate is fully unused, we suggest removing it altogether.\n         // We do this in any edition.\n         if extern_crate.warn_if_unused {\n-            if let Some(&span) = unused_extern_crates.get(&extern_crate.def_id) {\n+            if let Some(&span) = unused_extern_crates.get(&def_id) {\n                 tcx.struct_span_lint_hir(lint, id, span, |lint| {\n                     // Removal suggestion span needs to include attributes (Issue #54400)\n                     let span_with_attrs = tcx"}]}