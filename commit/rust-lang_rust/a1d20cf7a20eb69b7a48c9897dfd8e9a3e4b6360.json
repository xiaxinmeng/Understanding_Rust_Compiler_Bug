{"sha": "a1d20cf7a20eb69b7a48c9897dfd8e9a3e4b6360", "node_id": "C_kwDOAAsO6NoAKGExZDIwY2Y3YTIwZWI2OWI3YTQ4Yzk4OTdkZmQ4ZTlhM2U0YjYzNjA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-14T12:30:16Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-04T09:01:44Z"}, "message": "Another AppendOnlyVec", "tree": {"sha": "2343cece877ce2843c69dcf8d112e518c0805cda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2343cece877ce2843c69dcf8d112e518c0805cda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1d20cf7a20eb69b7a48c9897dfd8e9a3e4b6360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d20cf7a20eb69b7a48c9897dfd8e9a3e4b6360", "html_url": "https://github.com/rust-lang/rust/commit/a1d20cf7a20eb69b7a48c9897dfd8e9a3e4b6360", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1d20cf7a20eb69b7a48c9897dfd8e9a3e4b6360/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8", "html_url": "https://github.com/rust-lang/rust/commit/7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "aefaa8519d5364d8f063e377597afc948799a762", "filename": "compiler/rustc_data_structures/src/sync/vec.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a1d20cf7a20eb69b7a48c9897dfd8e9a3e4b6360/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d20cf7a20eb69b7a48c9897dfd8e9a3e4b6360/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs?ref=a1d20cf7a20eb69b7a48c9897dfd8e9a3e4b6360", "patch": "@@ -75,20 +75,31 @@ impl<T: Copy> AppendOnlyVec<T> {\n         #[cfg(parallel_compiler)]\n         return self.vec.get(i);\n     }\n+\n+    pub fn iter_enumerated(&self) -> impl Iterator<Item = (usize, T)> + '_ {\n+        (0..)\n+            .map(|i| (i, self.get(i)))\n+            .take_while(|(_, o)| o.is_some())\n+            .filter_map(|(i, o)| Some((i, o?)))\n+    }\n+\n+    pub fn iter(&self) -> impl Iterator<Item = T> + '_ {\n+        (0..).map(|i| self.get(i)).take_while(|o| o.is_some()).filter_map(|o| o)\n+    }\n }\n \n impl<T: Copy + PartialEq> AppendOnlyVec<T> {\n     pub fn contains(&self, val: T) -> bool {\n-        for i in 0.. {\n-            match self.get(i) {\n-                None => return false,\n-                Some(v) => {\n-                    if val == v {\n-                        return true;\n-                    }\n-                }\n-            }\n+        self.iter_enumerated().any(|(_, v)| v == val)\n+    }\n+}\n+\n+impl<A: Copy> FromIterator<A> for AppendOnlyVec<A> {\n+    fn from_iter<T: IntoIterator<Item = A>>(iter: T) -> Self {\n+        let this = Self::new();\n+        for val in iter {\n+            this.push(val);\n         }\n-        false\n+        this\n     }\n }"}, {"sha": "23aceca06223a01142ed448da5a0cda2d025a59d", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1d20cf7a20eb69b7a48c9897dfd8e9a3e4b6360/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d20cf7a20eb69b7a48c9897dfd8e9a3e4b6360/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=a1d20cf7a20eb69b7a48c9897dfd8e9a3e4b6360", "patch": "@@ -185,7 +185,7 @@ impl CStore {\n     fn push_dependencies_in_postorder(&self, deps: &mut Vec<CrateNum>, cnum: CrateNum) {\n         if !deps.contains(&cnum) {\n             let data = self.get_crate_data(cnum);\n-            for &dep in data.dependencies().iter() {\n+            for dep in data.dependencies() {\n                 if dep != cnum {\n                     self.push_dependencies_in_postorder(deps, dep);\n                 }\n@@ -605,7 +605,7 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n         if cmeta.update_extern_crate(extern_crate) {\n             // Propagate the extern crate info to dependencies if it was updated.\n             let extern_crate = ExternCrate { dependency_of: cnum, ..extern_crate };\n-            for &dep_cnum in cmeta.dependencies().iter() {\n+            for dep_cnum in cmeta.dependencies() {\n                 self.update_extern_crate(dep_cnum, extern_crate);\n             }\n         }"}, {"sha": "21ac7e201f9a38ec9c2889f0b5406ad4f572fda9", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a1d20cf7a20eb69b7a48c9897dfd8e9a3e4b6360/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d20cf7a20eb69b7a48c9897dfd8e9a3e4b6360/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=a1d20cf7a20eb69b7a48c9897dfd8e9a3e4b6360", "patch": "@@ -7,7 +7,7 @@ use rustc_ast as ast;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::{Lock, LockGuard, Lrc, OnceCell};\n+use rustc_data_structures::sync::{AppendOnlyVec, Lock, Lrc, OnceCell};\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::proc_macro::{AttrProcMacro, BangProcMacro, DeriveProcMacro};\n@@ -109,7 +109,7 @@ pub(crate) struct CrateMetadata {\n     /// IDs as they are seen from the current compilation session.\n     cnum_map: CrateNumMap,\n     /// Same ID set as `cnum_map` plus maybe some injected crates like panic runtime.\n-    dependencies: Lock<Vec<CrateNum>>,\n+    dependencies: AppendOnlyVec<CrateNum>,\n     /// How to link (or not link) this crate to the currently compiled crate.\n     dep_kind: Lock<CrateDepKind>,\n     /// Filesystem location of this crate.\n@@ -1594,7 +1594,7 @@ impl CrateMetadata {\n             .collect();\n         let alloc_decoding_state =\n             AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());\n-        let dependencies = Lock::new(cnum_map.iter().cloned().collect());\n+        let dependencies = cnum_map.iter().copied().collect();\n \n         // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation\n         // that does not copy any data. It just does some data verification.\n@@ -1634,12 +1634,12 @@ impl CrateMetadata {\n         cdata\n     }\n \n-    pub(crate) fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {\n-        self.dependencies.borrow()\n+    pub(crate) fn dependencies(&self) -> impl Iterator<Item = CrateNum> + '_ {\n+        self.dependencies.iter()\n     }\n \n     pub(crate) fn add_dependency(&self, cnum: CrateNum) {\n-        self.dependencies.borrow_mut().push(cnum);\n+        self.dependencies.push(cnum);\n     }\n \n     pub(crate) fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {"}]}