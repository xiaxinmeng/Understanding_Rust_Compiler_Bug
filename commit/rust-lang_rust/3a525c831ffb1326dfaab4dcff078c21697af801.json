{"sha": "3a525c831ffb1326dfaab4dcff078c21697af801", "node_id": "C_kwDOAAsO6NoAKDNhNTI1YzgzMWZmYjEzMjZkZmFhYjRkY2ZmMDc4YzIxNjk3YWY4MDE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-02T18:10:10Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-02T18:10:10Z"}, "message": "internal: Handle macro calls better in highlighting", "tree": {"sha": "671c6954526a2c5a0517f646b9256db101ffad41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/671c6954526a2c5a0517f646b9256db101ffad41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a525c831ffb1326dfaab4dcff078c21697af801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a525c831ffb1326dfaab4dcff078c21697af801", "html_url": "https://github.com/rust-lang/rust/commit/3a525c831ffb1326dfaab4dcff078c21697af801", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a525c831ffb1326dfaab4dcff078c21697af801/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "367cd5ce9b7392b0898d4ac625e7266a3df5292a", "url": "https://api.github.com/repos/rust-lang/rust/commits/367cd5ce9b7392b0898d4ac625e7266a3df5292a", "html_url": "https://github.com/rust-lang/rust/commit/367cd5ce9b7392b0898d4ac625e7266a3df5292a"}], "stats": {"total": 310, "additions": 151, "deletions": 159}, "files": [{"sha": "a908cdb718b19517e42776eff47b3bfc53f03415", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 73, "deletions": 94, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=3a525c831ffb1326dfaab4dcff078c21697af801", "patch": "@@ -13,11 +13,11 @@ mod html;\n mod tests;\n \n use hir::{InFile, Name, Semantics};\n-use ide_db::{RootDatabase, SymbolKind};\n+use ide_db::RootDatabase;\n use rustc_hash::FxHashMap;\n use syntax::{\n     ast::{self, HasFormatSpecifier},\n-    match_ast, AstNode, AstToken, Direction, NodeOrToken,\n+    AstNode, AstToken, NodeOrToken,\n     SyntaxKind::*,\n     SyntaxNode, TextRange, WalkEvent, T,\n };\n@@ -100,7 +100,8 @@ pub struct HlRange {\n // colon:: Emitted for the `:` token.\n // comma:: Emitted for the `,` token.\n // dot:: Emitted for the `.` token.\n-// Semi:: Emitted for the `;` token.\n+// semi:: Emitted for the `;` token.\n+// macroBang:: Emitted for the `!` token in macro calls.\n //\n // //-\n //\n@@ -209,107 +210,94 @@ fn traverse(\n     // Walk all nodes, keeping track of whether we are inside a macro or not.\n     // If in macro, expand it first and highlight the expanded code.\n     for event in root.value.preorder_with_tokens() {\n-        let event_range = match &event {\n+        let range = match &event {\n             WalkEvent::Enter(it) | WalkEvent::Leave(it) => it.text_range(),\n         };\n \n         // Element outside of the viewport, no need to highlight\n-        if range_to_highlight.intersect(event_range).is_none() {\n+        if range_to_highlight.intersect(range).is_none() {\n             continue;\n         }\n \n+        // set macro and attribute highlighting states\n         match event.clone() {\n-            WalkEvent::Enter(NodeOrToken::Node(node)) => {\n-                match_ast! {\n-                    match node {\n-                        ast::MacroCall(mcall) => {\n-                            if let Some(range) = macro_call_range(&mcall) {\n-                                hl.add(HlRange {\n-                                    range,\n-                                    highlight: HlTag::Symbol(SymbolKind::Macro).into(),\n-                                    binding_hash: None,\n-                                });\n-                            }\n-                            current_macro_call = Some(mcall);\n-                            continue;\n-                        },\n-                        ast::Macro(mac) => {\n-                            macro_highlighter.init();\n-                            current_macro = Some(mac);\n-                            continue;\n-                        },\n-                        ast::Item(item) => {\n-                            if sema.is_attr_macro_call(&item) {\n-                                current_attr_call = Some(item);\n-                            }\n-                        },\n-                        ast::Attr(__) => inside_attribute = true,\n-                        _ => ()\n-                    }\n+            WalkEvent::Enter(NodeOrToken::Node(node)) => match ast::Item::cast(node.clone()) {\n+                Some(ast::Item::MacroCall(mcall)) => {\n+                    current_macro_call = Some(mcall);\n+                    continue;\n                 }\n-            }\n-            WalkEvent::Leave(NodeOrToken::Node(node)) => {\n-                match_ast! {\n-                    match node {\n-                        ast::MacroCall(mcall) => {\n-                            assert_eq!(current_macro_call, Some(mcall));\n-                            current_macro_call = None;\n-                        },\n-                        ast::Macro(mac) => {\n-                            assert_eq!(current_macro, Some(mac));\n-                            current_macro = None;\n-                            macro_highlighter = MacroHighlighter::default();\n-                        },\n-                        ast::Item(item) => {\n-                            if current_attr_call == Some(item) {\n-                                current_attr_call = None;\n-                            }\n-                        },\n-                        ast::Attr(__) => inside_attribute = false,\n-                        _ => ()\n-                    }\n+                Some(ast::Item::MacroRules(mac)) => {\n+                    macro_highlighter.init();\n+                    current_macro = Some(mac.into());\n+                    continue;\n                 }\n-            }\n+                Some(ast::Item::MacroDef(mac)) => {\n+                    macro_highlighter.init();\n+                    current_macro = Some(mac.into());\n+                    continue;\n+                }\n+                Some(item) if sema.is_attr_macro_call(&item) => current_attr_call = Some(item),\n+                None if ast::Attr::can_cast(node.kind()) => inside_attribute = true,\n+                _ => (),\n+            },\n+            WalkEvent::Leave(NodeOrToken::Node(node)) => match ast::Item::cast(node.clone()) {\n+                Some(ast::Item::MacroCall(mcall)) => {\n+                    assert_eq!(current_macro_call, Some(mcall));\n+                    current_macro_call = None;\n+                }\n+                Some(ast::Item::MacroRules(mac)) => {\n+                    assert_eq!(current_macro, Some(mac.into()));\n+                    current_macro = None;\n+                    macro_highlighter = MacroHighlighter::default();\n+                }\n+                Some(ast::Item::MacroDef(mac)) => {\n+                    assert_eq!(current_macro, Some(mac.into()));\n+                    current_macro = None;\n+                    macro_highlighter = MacroHighlighter::default();\n+                }\n+                Some(item) if current_attr_call.as_ref().map_or(false, |it| *it == item) => {\n+                    current_attr_call = None\n+                }\n+                None if ast::Attr::can_cast(node.kind()) => inside_attribute = false,\n+                _ => (),\n+            },\n             _ => (),\n         }\n \n         let element = match event {\n             WalkEvent::Enter(it) => it,\n-            WalkEvent::Leave(it) => {\n-                if let Some(node) = it.as_node() {\n-                    inject::doc_comment(hl, sema, root.with_value(node));\n-                }\n+            WalkEvent::Leave(NodeOrToken::Token(_)) => continue,\n+            WalkEvent::Leave(NodeOrToken::Node(node)) => {\n+                inject::doc_comment(hl, sema, root.with_value(&node));\n                 continue;\n             }\n         };\n \n-        let range = element.text_range();\n-\n         if current_macro.is_some() {\n             if let Some(tok) = element.as_token() {\n                 macro_highlighter.advance(tok);\n             }\n         }\n \n-        let descend_token = (current_macro_call.is_some() || current_attr_call.is_some())\n-            && element.kind() != COMMENT;\n+        // only attempt to descend if we are inside a macro call or attribute\n+        // as calling `descend_into_macros_single` gets rather expensive if done for every single token\n+        let descend_token = current_macro_call.is_some() || current_attr_call.is_some();\n         let element_to_highlight = if descend_token {\n-            // Inside a macro -- expand it first\n-            let token = match element.clone().into_token() {\n-                Some(it) if current_macro_call.is_some() => {\n-                    let not_in_tt = it.parent().map_or(true, |it| it.kind() != TOKEN_TREE);\n-                    if not_in_tt {\n-                        continue;\n-                    }\n-                    it\n-                }\n-                Some(it) => it,\n-                _ => continue,\n+            let token = match &element {\n+                NodeOrToken::Node(_) => continue,\n+                NodeOrToken::Token(tok) => tok.clone(),\n+            };\n+            let in_mcall_outside_tt = current_macro_call.is_some()\n+                && token.parent().as_ref().map(SyntaxNode::kind) != Some(TOKEN_TREE);\n+            let token = match in_mcall_outside_tt {\n+                // not in the macros token tree, don't attempt to descend\n+                true => token,\n+                false => sema.descend_into_macros_single(token),\n             };\n-            let token = sema.descend_into_macros_single(token);\n             match token.parent() {\n                 Some(parent) => {\n-                    // We only care Name and Name_ref\n+                    // Names and NameRefs have special semantics, use them instead of the tokens\n+                    // as otherwise we won't ever visit them\n                     match (token.kind(), parent.kind()) {\n                         (T![ident], NAME | NAME_REF) => parent.into(),\n                         (T![self] | T![super] | T![crate], NAME_REF) => parent.into(),\n@@ -323,10 +311,14 @@ fn traverse(\n             element.clone()\n         };\n \n-        if macro_highlighter.highlight(element_to_highlight.clone()).is_some() {\n+        // FIXME: do proper macro def highlighting https://github.com/rust-analyzer/rust-analyzer/issues/6232\n+        // Skip metavariables from being highlighted to prevent keyword highlighting in them\n+        if macro_highlighter.highlight(&element_to_highlight).is_some() {\n             continue;\n         }\n \n+        // string highlight injections, note this does not use the descended element as proc-macros\n+        // can rewrite string literals which invalidates our indices\n         if let (Some(token), Some(token_to_highlight)) =\n             (element.into_token(), element_to_highlight.as_token())\n         {\n@@ -354,13 +346,15 @@ fn traverse(\n             }\n         }\n \n-        if let Some((mut highlight, binding_hash)) = highlight::element(\n+        // do the normal highlighting\n+        let element = highlight::element(\n             sema,\n             krate,\n             &mut bindings_shadow_count,\n             syntactic_name_ref_highlighting,\n-            element_to_highlight.clone(),\n-        ) {\n+            element_to_highlight,\n+        );\n+        if let Some((mut highlight, binding_hash)) = element {\n             if inside_attribute {\n                 highlight |= HlMod::Attribute\n             }\n@@ -369,18 +363,3 @@ fn traverse(\n         }\n     }\n }\n-\n-fn macro_call_range(macro_call: &ast::MacroCall) -> Option<TextRange> {\n-    let path = macro_call.path()?;\n-    let name_ref = path.segment()?.name_ref()?;\n-\n-    let range_start = name_ref.syntax().text_range().start();\n-    let mut range_end = name_ref.syntax().text_range().end();\n-    for sibling in path.syntax().siblings_with_tokens(Direction::Next) {\n-        if let T![!] | T![ident] = sibling.kind() {\n-            range_end = sibling.text_range().end();\n-        }\n-    }\n-\n-    Some(TextRange::new(range_start, range_end))\n-}"}, {"sha": "54b4bcf7c365d54ea0484791c86784302045790d", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=3a525c831ffb1326dfaab4dcff078c21697af801", "patch": "@@ -81,7 +81,7 @@ fn token(\n                 T![::] | T![->] | T![=>] | T![..] | T![=] | T![@] | T![.] => {\n                     HlOperator::Other.into()\n                 }\n-                T![!] if parent_matches::<ast::MacroCall>(&token) => SymbolKind::Macro.into(),\n+                T![!] if parent_matches::<ast::MacroCall>(&token) => HlPunct::MacroBang.into(),\n                 T![!] if parent_matches::<ast::NeverType>(&token) => HlTag::BuiltinType.into(),\n                 T![!] if parent_matches::<ast::PrefixExpr>(&token) => HlOperator::Logical.into(),\n                 T![*] if parent_matches::<ast::PtrType>(&token) => HlTag::Keyword.into(),"}, {"sha": "7f2d61a0bd30b187310e85b5b1a325f4e021bc91", "filename": "crates/ide/src/syntax_highlighting/macro_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fmacro_.rs?ref=3a525c831ffb1326dfaab4dcff078c21697af801", "patch": "@@ -19,7 +19,7 @@ impl MacroHighlighter {\n         }\n     }\n \n-    pub(super) fn highlight(&self, element: SyntaxElement) -> Option<HlRange> {\n+    pub(super) fn highlight(&self, element: &SyntaxElement) -> Option<HlRange> {\n         if let Some(state) = self.state.as_ref() {\n             if matches!(state.rule_state, RuleState::Matcher | RuleState::Expander) {\n                 if let Some(range) = is_metavariable(element) {\n@@ -115,7 +115,7 @@ fn update_macro_state(state: &mut MacroMatcherParseState, tok: &SyntaxToken) {\n     }\n }\n \n-fn is_metavariable(element: SyntaxElement) -> Option<TextRange> {\n+fn is_metavariable(element: &SyntaxElement) -> Option<TextRange> {\n     let tok = element.as_token()?;\n     match tok.kind() {\n         kind if kind == SyntaxKind::IDENT || kind.is_keyword() => {"}, {"sha": "bdf484e01f7eed2833a6ac0ff7d2648ef3109b99", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=3a525c831ffb1326dfaab4dcff078c21697af801", "patch": "@@ -102,6 +102,8 @@ pub enum HlPunct {\n     Colon,\n     /// ;\n     Semi,\n+    /// ! (only for macro calls)\n+    MacroBang,\n     ///\n     Other,\n }\n@@ -167,6 +169,7 @@ impl HlTag {\n                 HlPunct::Dot => \"dot\",\n                 HlPunct::Colon => \"colon\",\n                 HlPunct::Semi => \"semicolon\",\n+                HlPunct::MacroBang => \"macro_bang\",\n                 HlPunct::Other => \"punctuation\",\n             },\n             HlTag::NumericLiteral => \"numeric_literal\","}, {"sha": "a3f3b4d6b82137edc8414b3f7e5857d63a79763b", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=3a525c831ffb1326dfaab4dcff078c21697af801", "patch": "@@ -89,7 +89,7 @@\n     <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">foo</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// </span><span class=\"comment injected\">// calls bar on foo</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"macro injected\">assert!</span><span class=\"parenthesis injected\">(</span><span class=\"none injected\">foo</span><span class=\"operator injected\">.</span><span class=\"none injected\">bar</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"module injected\">assert</span><span class=\"macro_bang injected\">!</span><span class=\"parenthesis injected\">(</span><span class=\"none injected\">foo</span><span class=\"operator injected\">.</span><span class=\"none injected\">bar</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">bar</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"variable injected\">foo</span><span class=\"operator injected\">.</span><span class=\"field injected\">bar</span><span class=\"none injected\"> </span><span class=\"logical injected\">||</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"constant injected\">bar</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n@@ -129,7 +129,7 @@\n \n <span class=\"comment documentation\">/// ```</span>\n <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">macro_rules</span><span class=\"punctuation injected\">!</span><span class=\"none injected\"> </span><span class=\"macro declaration injected\">noop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"none injected\"> </span><span class=\"parenthesis injected\">(</span><span class=\"punctuation injected\">$</span><span class=\"none injected\">expr</span><span class=\"colon injected\">:</span><span class=\"none injected\">expr</span><span class=\"parenthesis injected\">)</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"angle injected\">&gt;</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">$</span><span class=\"none injected\">expr </span><span class=\"brace injected\">}</span><span class=\"brace injected\">}</span>\n-<span class=\"comment documentation\">/// </span><span class=\"macro injected\">noop!</span><span class=\"parenthesis injected\">(</span><span class=\"numeric_literal injected\">1</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n+<span class=\"comment documentation\">/// </span><span class=\"macro injected\">noop</span><span class=\"macro_bang injected\">!</span><span class=\"parenthesis injected\">(</span><span class=\"numeric_literal injected\">1</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">noop</span> <span class=\"brace\">{</span>\n     <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>expr<span class=\"colon\">:</span>expr<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n@@ -149,7 +149,7 @@\n <span class=\"comment documentation\">///</span>\n <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span><span class=\"attribute_bracket attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute_bracket attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"comma attribute\">,</span><span class=\"attribute_bracket attribute\"> </span><span class=\"none attribute\">doc</span><span class=\"attribute_bracket attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute_bracket attribute\"> </span><span class=\"string_literal attribute\">\"```rust\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span><span class=\"attribute_bracket attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute_bracket attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute_bracket attribute\"> </span><span class=\"none attribute\">doc</span><span class=\"attribute_bracket attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute_bracket attribute\"> </span><span class=\"string_literal attribute\">\"```ignore\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n-<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"function injected\">example</span><span class=\"parenthesis injected\">(</span><span class=\"operator injected\">&</span><span class=\"none injected\">alloc::</span><span class=\"macro injected\">vec!</span><span class=\"bracket injected\">[</span><span class=\"numeric_literal injected\">1</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">2</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">3</span><span class=\"bracket injected\">]</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n+<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"function injected\">example</span><span class=\"parenthesis injected\">(</span><span class=\"operator injected\">&</span><span class=\"module injected\">alloc</span><span class=\"operator injected\">::</span><span class=\"module injected\">vec</span><span class=\"macro_bang injected\">!</span><span class=\"bracket injected\">[</span><span class=\"numeric_literal injected\">1</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">2</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">3</span><span class=\"bracket injected\">]</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration public\">mix_and_match</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n "}, {"sha": "f4134fee4aa307eb945110287ce79f3ccd4baf2d", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_injection.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html?ref=3a525c831ffb1326dfaab4dcff078c21697af801", "patch": "@@ -46,7 +46,7 @@\n     <span class=\"function\">fixture</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">r#\"</span>\n         <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Foo</span> <span class=\"brace\">{</span>\n             <span class=\"keyword\">fn</span> <span class=\"function associated declaration static trait\">foo</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-                <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"2 + 2 = {}\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">4</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+                <span class=\"unresolved_reference\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"2 + 2 = {}\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">4</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n             <span class=\"brace\">}</span>\n         <span class=\"brace\">}</span><span class=\"string_literal\">\"#</span>\n     <span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>"}, {"sha": "41cb3903d673ce5c6d4b494d9ecaf0a47cabc9c0", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=3a525c831ffb1326dfaab4dcff078c21697af801", "patch": "@@ -92,58 +92,58 @@\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"comment\">// from https://doc.rust-lang.org/std/fmt/index.html</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>                 <span class=\"comment\">// =&gt; \"Hello\"</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"world\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"Hello, world!\"</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"The number is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"The number is 1\"</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"parenthesis\">(</span><span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">4</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>          <span class=\"comment\">// =&gt; \"(3, 4)\"</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">value</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> value<span class=\"operator\">=</span><span class=\"numeric_literal\">4</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>      <span class=\"comment\">// =&gt; \"4\"</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>           <span class=\"comment\">// =&gt; \"1 2\"</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">4</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">42</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>             <span class=\"comment\">// =&gt; \"0042\" with leading zerosV</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"2 1 1 2\"</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">argument</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> argument <span class=\"operator\">=</span> <span class=\"string_literal\">\"test\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"test\"</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"comma\">,</span> name <span class=\"operator\">=</span> <span class=\"numeric_literal\">2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>          <span class=\"comment\">// =&gt; \"2 1\"</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">a</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">c</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">b</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> a<span class=\"operator\">=</span><span class=\"string_literal\">\"a\"</span><span class=\"comma\">,</span> b<span class=\"operator\">=</span><span class=\"char_literal\">'b'</span><span class=\"comma\">,</span> c<span class=\"operator\">=</span><span class=\"numeric_literal\">3</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>  <span class=\"comment\">// =&gt; \"a 3 b\"</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"{{</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">}}\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>                       <span class=\"comment\">// =&gt; \"{2}\"</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">width</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> width <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">-</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">^</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">+</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">27</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">-</span><span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">10</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">27</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>    <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>   <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"variable\">number</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"variable\">prec</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> prec <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> number <span class=\"operator\">=</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 fractional digits\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"numeric_literal\">1234.56</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 characters\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">8</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 right-aligned characters\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello {{}}\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"{{ Hello\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>                 <span class=\"comment\">// =&gt; \"Hello\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"world\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"Hello, world!\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"The number is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"The number is 1\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"parenthesis\">(</span><span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">4</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>          <span class=\"comment\">// =&gt; \"(3, 4)\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">value</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> value<span class=\"operator\">=</span><span class=\"numeric_literal\">4</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>      <span class=\"comment\">// =&gt; \"4\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>           <span class=\"comment\">// =&gt; \"1 2\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">4</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">42</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>             <span class=\"comment\">// =&gt; \"0042\" with leading zerosV</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"2 1 1 2\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">argument</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> argument <span class=\"operator\">=</span> <span class=\"string_literal\">\"test\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"test\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"comma\">,</span> name <span class=\"operator\">=</span> <span class=\"numeric_literal\">2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>          <span class=\"comment\">// =&gt; \"2 1\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">a</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">c</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">b</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> a<span class=\"operator\">=</span><span class=\"string_literal\">\"a\"</span><span class=\"comma\">,</span> b<span class=\"operator\">=</span><span class=\"char_literal\">'b'</span><span class=\"comma\">,</span> c<span class=\"operator\">=</span><span class=\"numeric_literal\">3</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>  <span class=\"comment\">// =&gt; \"a 3 b\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"{{</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">}}\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>                       <span class=\"comment\">// =&gt; \"{2}\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">width</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> width <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">-</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">^</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">+</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">27</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">-</span><span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">10</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">27</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>    <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>   <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"variable\">number</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"variable\">prec</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> prec <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> number <span class=\"operator\">=</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 fractional digits\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"numeric_literal\">1234.56</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 characters\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">8</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 right-aligned characters\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello {{}}\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"{{ Hello\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">r\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"world\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">r\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"world\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n     <span class=\"comment\">// escape sequences</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello</span><span class=\"escape_sequence\">\\n</span><span class=\"string_literal\">World\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">\\u{48}</span><span class=\"escape_sequence\">\\x65</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6F</span><span class=\"string_literal\"> World\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello</span><span class=\"escape_sequence\">\\n</span><span class=\"string_literal\">World\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">\\u{48}</span><span class=\"escape_sequence\">\\x65</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6F</span><span class=\"string_literal\"> World\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"escape_sequence\">\\x41</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> A <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">\u043d\u0438\u0447\u043e\u0441\u0438</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> \u043d\u0438\u0447\u043e\u0441\u0438 <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"escape_sequence\">\\x41</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> A <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">\u043d\u0438\u0447\u043e\u0441\u0438</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> \u043d\u0438\u0447\u043e\u0441\u0438 <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">x</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> \"</span><span class=\"comma\">,</span> <span class=\"unresolved_reference\">thingy</span><span class=\"comma\">,</span> <span class=\"unresolved_reference\">n2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">panic!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">panic!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"more </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">assert!</span><span class=\"parenthesis\">(</span><span class=\"bool_literal\">true</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">assert!</span><span class=\"parenthesis\">(</span><span class=\"bool_literal\">true</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> asdasd\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">toho!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">fmt\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">asm!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"mov eax, </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">format_args!</span><span class=\"parenthesis\">(</span>concat<span class=\"punctuation\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"{}\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">x</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> \"</span><span class=\"comma\">,</span> <span class=\"unresolved_reference\">thingy</span><span class=\"comma\">,</span> <span class=\"unresolved_reference\">n2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">panic</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">panic</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"more </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">assert</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"bool_literal\">true</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">assert</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"bool_literal\">true</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> asdasd\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">toho</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">fmt\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">asm</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"mov eax, </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">format_args</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span>concat<span class=\"punctuation\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"{}\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "185f137b8a5ccc1b7ec113808fa9d05c5cf0a21c", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=3a525c831ffb1326dfaab4dcff078c21697af801", "patch": "@@ -56,7 +56,7 @@\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">Fn</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span><span class=\"colon\">:</span> <span class=\"trait public\">FnMut</span><span class=\"angle\">&lt;</span><span class=\"type_param\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-proc_macros::<span class=\"macro\">mirror!</span> <span class=\"brace\">{</span>\n+<span class=\"module crate_root library\">proc_macros</span><span class=\"operator\">::</span><span class=\"function library\">mirror</span><span class=\"macro_bang\">!</span> <span class=\"brace\">{</span>\n     <span class=\"brace\">{</span>\n         <span class=\"comma\">,</span><span class=\"builtin_type\">i32</span> <span class=\"colon\">:</span><span class=\"field declaration public\">x</span> <span class=\"keyword\">pub</span>\n         <span class=\"comma\">,</span><span class=\"builtin_type\">i32</span> <span class=\"colon\">:</span><span class=\"field declaration public\">y</span> <span class=\"keyword\">pub</span>\n@@ -138,7 +138,7 @@\n     <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>tt<span class=\"colon\">:</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"macro\">def_fn!</span> <span class=\"brace\">{</span>\n+<span class=\"macro\">def_fn</span><span class=\"macro_bang\">!</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n         <span class=\"numeric_literal\">100</span>\n     <span class=\"brace\">}</span>\n@@ -170,8 +170,8 @@\n \n <span class=\"comment\">// comment</span>\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello, {}!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">dont_color_me_braces!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"unresolved_reference\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello, {}!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">dont_color_me_braces</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">vec</span> <span class=\"operator\">=</span> <span class=\"unresolved_reference\">Vec</span><span class=\"operator\">::</span><span class=\"unresolved_reference\">new</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword control\">if</span> <span class=\"bool_literal\">true</span> <span class=\"brace\">{</span>\n@@ -183,7 +183,7 @@\n         <span class=\"comment\">// Do nothing</span>\n     <span class=\"brace\">}</span>\n \n-    <span class=\"macro\">noop!</span><span class=\"parenthesis\">(</span><span class=\"macro\">noop</span><span class=\"macro\">!</span><span class=\"parenthesis\">(</span><span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">noop</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"macro\">noop</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">42</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">x</span> <span class=\"arithmetic mutable\">+=</span> <span class=\"numeric_literal\">1</span><span class=\"semicolon\">;</span>\n@@ -228,7 +228,7 @@\n <span class=\"keyword\">impl</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"angle\">&gt;</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"type_param\">T</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">fn</span> <span class=\"function associated consuming declaration\">and</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">U</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"self_keyword declaration\">self</span><span class=\"comma\">,</span> <span class=\"value_param declaration\">other</span><span class=\"colon\">:</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"type_param\">U</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"parenthesis\">(</span><span class=\"type_param\">T</span><span class=\"comma\">,</span> <span class=\"type_param\">U</span><span class=\"parenthesis\">)</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n         <span class=\"keyword control\">match</span> <span class=\"value_param\">other</span> <span class=\"brace\">{</span>\n-            <span class=\"enum_variant\">None</span> <span class=\"operator\">=&gt;</span> <span class=\"macro\">unimplemented!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n+            <span class=\"enum_variant\">None</span> <span class=\"operator\">=&gt;</span> <span class=\"unresolved_reference\">unimplemented</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n             <span class=\"variable declaration\">Nope</span> <span class=\"operator\">=&gt;</span> <span class=\"variable\">Nope</span><span class=\"comma\">,</span>\n         <span class=\"brace\">}</span>\n     <span class=\"brace\">}</span>\n@@ -242,7 +242,7 @@\n <span class=\"keyword async\">async</span> <span class=\"keyword\">fn</span> <span class=\"function async declaration\">async_main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">f1</span> <span class=\"operator\">=</span> <span class=\"function async\">learn_and_sing</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">f2</span> <span class=\"operator\">=</span> <span class=\"unresolved_reference\">dance</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    futures::<span class=\"macro\">join!</span><span class=\"parenthesis\">(</span>f1<span class=\"comma\">,</span> f2<span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"unresolved_reference\">futures</span><span class=\"operator\">::</span><span class=\"unresolved_reference\">join</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span>f1<span class=\"comma\">,</span> f2<span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">use_foo_items</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n@@ -254,15 +254,15 @@\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">control_flow</span> <span class=\"operator\">=</span> <span class=\"module crate_root library\">foo</span><span class=\"operator\">::</span><span class=\"function library\">identity</span><span class=\"parenthesis\">(</span><span class=\"module crate_root library\">foo</span><span class=\"operator\">::</span><span class=\"enum library\">ControlFlow</span><span class=\"operator\">::</span><span class=\"enum_variant library\">Continue</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n     <span class=\"keyword control\">if</span> <span class=\"variable\">control_flow</span><span class=\"operator\">.</span><span class=\"function associated consuming library\">should_die</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-        foo::<span class=\"macro\">die!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+        <span class=\"module crate_root library\">foo</span><span class=\"operator\">::</span><span class=\"unresolved_reference\">die</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">pub</span> <span class=\"keyword\">enum</span> <span class=\"enum declaration public\">Bool</span> <span class=\"brace\">{</span> <span class=\"enum_variant declaration public\">True</span><span class=\"comma\">,</span> <span class=\"enum_variant declaration public\">False</span> <span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"enum public\">Bool</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function associated consuming declaration public\">to_primitive</span><span class=\"parenthesis\">(</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"brace\">{</span>\n-        <span class=\"macro\">matches!</span><span class=\"parenthesis\">(</span>self<span class=\"comma\">,</span> Self<span class=\"colon\">:</span><span class=\"colon\">:</span>True<span class=\"parenthesis\">)</span>\n+        <span class=\"unresolved_reference\">matches</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span>self<span class=\"comma\">,</span> Self<span class=\"colon\">:</span><span class=\"colon\">:</span>True<span class=\"parenthesis\">)</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n <span class=\"keyword\">const</span> <span class=\"constant declaration\">USAGE_OF_BOOL</span><span class=\"colon\">:</span><span class=\"builtin_type\">bool</span> <span class=\"operator\">=</span> <span class=\"enum public\">Bool</span><span class=\"operator\">::</span><span class=\"enum_variant public\">True</span><span class=\"operator\">.</span><span class=\"function associated consuming public\">to_primitive</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>"}, {"sha": "c6322327a5ee5c5fade32cf508e2136336051398", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=3a525c831ffb1326dfaab4dcff078c21697af801", "patch": "@@ -61,6 +61,7 @@ define_semantic_token_types![\n     (LABEL, \"label\"),\n     (LIFETIME, \"lifetime\"),\n     (LOGICAL, \"logical\"),\n+    (MACRO_BANG, \"macroBang\"),\n     (OPERATOR, \"operator\"),\n     (PARENTHESIS, \"parenthesis\"),\n     (PUNCTUATION, \"punctuation\"),"}, {"sha": "f0de166d8b59d3b4abb2b61db5b71afcb422f402", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a525c831ffb1326dfaab4dcff078c21697af801/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=3a525c831ffb1326dfaab4dcff078c21697af801", "patch": "@@ -539,6 +539,7 @@ fn semantic_token_type_and_modifiers(\n             HlPunct::Colon => semantic_tokens::COLON,\n             HlPunct::Semi => semantic_tokens::SEMICOLON,\n             HlPunct::Other => semantic_tokens::PUNCTUATION,\n+            HlPunct::MacroBang => semantic_tokens::MACRO_BANG,\n         },\n     };\n "}, {"sha": "57757553a7c382a3e62836442542e78d58d5e316", "filename": "editors/code/package.json", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a525c831ffb1326dfaab4dcff078c21697af801/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/3a525c831ffb1326dfaab4dcff078c21697af801/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=3a525c831ffb1326dfaab4dcff078c21697af801", "patch": "@@ -1240,6 +1240,11 @@\n                 \"description\": \"Style for logic operators\",\n                 \"superType\": \"operator\"\n             },\n+            {\n+                \"id\": \"macroBang\",\n+                \"description\": \"Style for the ! token of macro calls\",\n+                \"superType\": \"punctuation\"\n+            },\n             {\n                 \"id\": \"operator\",\n                 \"description\": \"Style for operators\",\n@@ -1378,6 +1383,9 @@\n                     \"lifetime\": [\n                         \"storage.modifier.lifetime.rust\"\n                     ],\n+                    \"macroBang\": [\n+                        \"entity.name.function.macro.rust\"\n+                    ],\n                     \"method\": [\n                         \"entity.name.function.rust\"\n                     ],"}]}