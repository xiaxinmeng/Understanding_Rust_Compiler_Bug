{"sha": "154bf8e1afafed035b769955ed81490dca62a50a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NGJmOGUxYWZhZmVkMDM1Yjc2OTk1NWVkODE0OTBkY2E2MmE1MGE=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-01-22T04:05:18Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-01-22T04:05:18Z"}, "message": "Cargo fmt", "tree": {"sha": "8b9830f2f66c58ff9ba13a8cde18e2c5a4d4e1bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b9830f2f66c58ff9ba13a8cde18e2c5a4d4e1bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/154bf8e1afafed035b769955ed81490dca62a50a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/154bf8e1afafed035b769955ed81490dca62a50a", "html_url": "https://github.com/rust-lang/rust/commit/154bf8e1afafed035b769955ed81490dca62a50a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/154bf8e1afafed035b769955ed81490dca62a50a/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa6892eb6389dbcdf8037670bd480767a61b5a8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6892eb6389dbcdf8037670bd480767a61b5a8d", "html_url": "https://github.com/rust-lang/rust/commit/fa6892eb6389dbcdf8037670bd480767a61b5a8d"}], "stats": {"total": 199, "additions": 98, "deletions": 101}, "files": [{"sha": "66ee49297a3649182bc4a5e71f6d62038ca9b5f2", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -453,7 +453,7 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n \n         return Ok(Operation::Stdin {\n             input: buffer,\n-            config_path: config_path,\n+            config_path,\n         });\n     }\n \n@@ -469,8 +469,8 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n         .collect();\n \n     Ok(Operation::Format {\n-        files: files,\n-        config_path: config_path,\n-        minimal_config_path: minimal_config_path,\n+        files,\n+        config_path,\n+        minimal_config_path,\n     })\n }"}, {"sha": "fcb985ebf1247c8b73c9b868f49379210231d347", "filename": "src/closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -244,7 +244,7 @@ fn rewrite_closure_fn_decl(\n     };\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: SeparatorTactic::Never,\n         separator_place: SeparatorPlace::Back,"}, {"sha": "edcd5153fc37b0e617e0f1a84fbc566e4fbeea2c", "filename": "src/comment.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -285,11 +285,11 @@ fn rewrite_comment_inner(\n     let mut fmt = StringFormat {\n         opener: \"\",\n         closer: \"\",\n-        line_start: line_start,\n+        line_start,\n         line_end: \"\",\n         shape: Shape::legacy(max_chars, fmt_indent),\n         trim_end: true,\n-        config: config,\n+        config,\n     };\n \n     let line_breaks = count_newlines(orig.trim_right());\n@@ -895,7 +895,7 @@ pub struct CommentCodeSlices<'a> {\n impl<'a> CommentCodeSlices<'a> {\n     pub fn new(slice: &'a str) -> CommentCodeSlices<'a> {\n         CommentCodeSlices {\n-            slice: slice,\n+            slice,\n             last_slice_kind: CodeCharKind::Comment,\n             last_slice_end: 0,\n         }\n@@ -1019,7 +1019,7 @@ impl<'a> CommentReducer<'a> {\n         let is_block = comment.starts_with(\"/*\");\n         let comment = remove_comment_header(comment);\n         CommentReducer {\n-            is_block: is_block,\n+            is_block,\n             at_start_line: false, // There are no supplementary '*' on the first line\n             iter: comment.chars(),\n         }"}, {"sha": "d59e383389ff9498f3df8346a54d820f3ff0fc5d", "filename": "src/expr.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -441,7 +441,7 @@ pub fn rewrite_array<T: Rewrite + Spanned + ToExpr>(\n     let ends_with_newline = tactic.ends_with_newline(context.config.indent_style());\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if trailing_comma {\n             SeparatorTactic::Always\n@@ -462,7 +462,7 @@ pub fn rewrite_array<T: Rewrite + Spanned + ToExpr>(\n         },\n         separator_place: SeparatorPlace::Back,\n         shape: nested_shape,\n-        ends_with_newline: ends_with_newline,\n+        ends_with_newline,\n         preserve_newline: false,\n         config: context.config,\n     };\n@@ -779,19 +779,19 @@ impl<'a> ControlFlow<'a> {\n     ) -> ControlFlow<'a> {\n         ControlFlow {\n             cond: Some(cond),\n-            block: block,\n-            else_block: else_block,\n+            block,\n+            else_block,\n             label: None,\n-            pat: pat,\n+            pat,\n             keyword: \"if\",\n             matcher: match pat {\n                 Some(..) => \"let\",\n                 None => \"\",\n             },\n             connector: \" =\",\n-            allow_single_line: allow_single_line,\n-            nested_if: nested_if,\n-            span: span,\n+            allow_single_line,\n+            nested_if,\n+            span,\n         }\n     }\n \n@@ -802,16 +802,16 @@ impl<'a> ControlFlow<'a> {\n     ) -> ControlFlow<'a> {\n         ControlFlow {\n             cond: None,\n-            block: block,\n+            block,\n             else_block: None,\n-            label: label,\n+            label,\n             pat: None,\n             keyword: \"loop\",\n             matcher: \"\",\n             connector: \"\",\n             allow_single_line: false,\n             nested_if: false,\n-            span: span,\n+            span,\n         }\n     }\n \n@@ -824,10 +824,10 @@ impl<'a> ControlFlow<'a> {\n     ) -> ControlFlow<'a> {\n         ControlFlow {\n             cond: Some(cond),\n-            block: block,\n+            block,\n             else_block: None,\n-            label: label,\n-            pat: pat,\n+            label,\n+            pat,\n             keyword: \"while\",\n             matcher: match pat {\n                 Some(..) => \"let\",\n@@ -836,7 +836,7 @@ impl<'a> ControlFlow<'a> {\n             connector: \" =\",\n             allow_single_line: false,\n             nested_if: false,\n-            span: span,\n+            span,\n         }\n     }\n \n@@ -849,16 +849,16 @@ impl<'a> ControlFlow<'a> {\n     ) -> ControlFlow<'a> {\n         ControlFlow {\n             cond: Some(cond),\n-            block: block,\n+            block,\n             else_block: None,\n-            label: label,\n+            label,\n             pat: Some(pat),\n             keyword: \"for\",\n             matcher: \"\",\n             connector: \" in\",\n             allow_single_line: false,\n             nested_if: false,\n-            span: span,\n+            span,\n         }\n     }\n \n@@ -1484,7 +1484,7 @@ fn rewrite_match_pattern(\n         )\n     };\n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \" |\",\n         trailing_separator: SeparatorTactic::Never,\n         separator_place: context.config.binop_separator(),\n@@ -1988,7 +1988,7 @@ where\n     );\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if force_trailing_comma {\n             SeparatorTactic::Always\n@@ -2671,11 +2671,11 @@ where\n         nested_shape.width,\n     );\n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: SeparatorTactic::Never,\n         separator_place: SeparatorPlace::Back,\n-        shape: shape,\n+        shape,\n         ends_with_newline: false,\n         preserve_newline: false,\n         config: context.config,"}, {"sha": "028c631b1b97eed86216efbf096e8b06b3d9858a", "filename": "src/file_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -34,7 +34,7 @@ impl<'a> From<&'a LineRange> for Range {\n \n impl Range {\n     pub fn new(lo: usize, hi: usize) -> Range {\n-        Range { lo: lo, hi: hi }\n+        Range { lo, hi }\n     }\n \n     fn is_empty(self) -> bool {"}, {"sha": "2fd851430444740f7c1b6a9c9af34ed3fbeae10e", "filename": "src/imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -284,7 +284,7 @@ fn rewrite_imports(\n         separator: \"\",\n         trailing_separator: SeparatorTactic::Never,\n         separator_place: SeparatorPlace::Back,\n-        shape: shape,\n+        shape,\n         ends_with_newline: true,\n         preserve_newline: false,\n         config: context.config,\n@@ -537,7 +537,7 @@ fn rewrite_nested_use_tree(\n         && tactic != DefinitiveListTactic::Horizontal;\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if ends_with_newline {\n             context.config.trailing_comma()\n@@ -546,7 +546,7 @@ fn rewrite_nested_use_tree(\n         },\n         separator_place: SeparatorPlace::Back,\n         shape: nested_shape,\n-        ends_with_newline: ends_with_newline,\n+        ends_with_newline,\n         preserve_newline: true,\n         config: context.config,\n     };"}, {"sha": "2efd61a3d7d458851c4f05770134a368b15264b9", "filename": "src/issues.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -90,8 +90,8 @@ impl BadIssueSeeker {\n                 todo_idx: 0,\n                 fixme_idx: 0,\n             },\n-            report_todo: report_todo,\n-            report_fixme: report_fixme,\n+            report_todo,\n+            report_fixme,\n         }\n     }\n \n@@ -169,8 +169,8 @@ impl BadIssueSeeker {\n         }\n \n         Seeking::Issue {\n-            todo_idx: todo_idx,\n-            fixme_idx: fixme_idx,\n+            todo_idx,\n+            fixme_idx,\n         }\n     }\n \n@@ -213,10 +213,7 @@ impl BadIssueSeeker {\n             NumberPart::CloseParen => {}\n         }\n \n-        self.state = Seeking::Number {\n-            part: part,\n-            issue: issue,\n-        };\n+        self.state = Seeking::Number { part, issue };\n \n         IssueClassification::None\n     }"}, {"sha": "fdd769ef2895d63932deeda047195dc37acec407", "filename": "src/items.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -138,7 +138,7 @@ impl<'a> Item<'a> {\n                 .iter()\n                 .map(|i| BodyElement::ForeignItem(i))\n                 .collect(),\n-            span: span,\n+            span,\n         }\n     }\n }\n@@ -169,8 +169,8 @@ impl<'a> FnSig<'a> {\n         vis: ast::Visibility,\n     ) -> FnSig<'a> {\n         FnSig {\n-            decl: decl,\n-            generics: generics,\n+            decl,\n+            generics,\n             abi: abi::Abi::Rust,\n             constness: ast::Constness::NotConst,\n             defaultness: ast::Defaultness::Final,\n@@ -189,7 +189,7 @@ impl<'a> FnSig<'a> {\n             defaultness: ast::Defaultness::Final,\n             abi: method_sig.abi,\n             decl: &*method_sig.decl,\n-            generics: generics,\n+            generics,\n             visibility: ast::Visibility::Inherited,\n         }\n     }\n@@ -202,12 +202,12 @@ impl<'a> FnSig<'a> {\n     ) -> FnSig<'a> {\n         match *fn_kind {\n             visit::FnKind::ItemFn(_, unsafety, constness, abi, visibility, _) => FnSig {\n-                decl: decl,\n-                generics: generics,\n-                abi: abi,\n+                decl,\n+                generics,\n+                abi,\n                 constness: constness.node,\n                 defaultness: defualtness,\n-                unsafety: unsafety,\n+                unsafety,\n                 visibility: visibility.clone(),\n             },\n             visit::FnKind::Method(_, method_sig, vis, _) => {\n@@ -510,7 +510,7 @@ impl<'a> FmtVisitor<'a> {\n             separator: \",\",\n             trailing_separator: self.config.trailing_comma(),\n             separator_place: SeparatorPlace::Back,\n-            shape: shape,\n+            shape,\n             ends_with_newline: true,\n             preserve_newline: true,\n             config: self.config,\n@@ -895,10 +895,10 @@ impl<'a> StructParts<'a> {\n             _ => unreachable!(),\n         };\n         StructParts {\n-            prefix: prefix,\n+            prefix,\n             ident: item.ident,\n             vis: &item.vis,\n-            def: def,\n+            def,\n             generics: Some(generics),\n             span: item.span,\n         }\n@@ -1509,11 +1509,11 @@ impl<'a> StaticParts<'a> {\n             _ => unreachable!(),\n         };\n         StaticParts {\n-            prefix: prefix,\n+            prefix,\n             vis: &item.vis,\n             ident: item.ident,\n-            ty: ty,\n-            mutability: mutability,\n+            ty,\n+            mutability,\n             expr_opt: Some(expr),\n             defaultness: None,\n             span: item.span,\n@@ -1529,7 +1529,7 @@ impl<'a> StaticParts<'a> {\n             prefix: \"const\",\n             vis: &ast::Visibility::Inherited,\n             ident: ti.ident,\n-            ty: ty,\n+            ty,\n             mutability: ast::Mutability::Immutable,\n             expr_opt: expr_opt.as_ref(),\n             defaultness: None,\n@@ -1546,7 +1546,7 @@ impl<'a> StaticParts<'a> {\n             prefix: \"const\",\n             vis: &ii.vis,\n             ident: ii.ident,\n-            ty: ty,\n+            ty,\n             mutability: ast::Mutability::Immutable,\n             expr_opt: Some(expr),\n             defaultness: Some(ii.defaultness),\n@@ -1818,7 +1818,7 @@ fn rewrite_fn_base(\n     let one_line_budget = context.budget(used_width + overhead);\n     let shape = Shape {\n         width: one_line_budget,\n-        indent: indent,\n+        indent,\n         offset: used_width,\n     };\n     let fd = fn_sig.decl;\n@@ -2085,8 +2085,8 @@ struct WhereClauseOption {\n impl WhereClauseOption {\n     pub fn new(suppress_comma: bool, snuggle: bool) -> WhereClauseOption {\n         WhereClauseOption {\n-            suppress_comma: suppress_comma,\n-            snuggle: snuggle,\n+            suppress_comma,\n+            snuggle,\n             compress_where: false,\n         }\n     }\n@@ -2233,7 +2233,7 @@ fn rewrite_args(\n     debug!(\"rewrite_args: budget: {}, tactic: {:?}\", budget, tactic);\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if variadic {\n             SeparatorTactic::Never\n@@ -2404,15 +2404,15 @@ where\n         one_line_budget,\n     );\n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if context.config.indent_style() == IndentStyle::Visual {\n             SeparatorTactic::Never\n         } else {\n             context.config.trailing_comma()\n         },\n         separator_place: SeparatorPlace::Back,\n-        shape: shape,\n+        shape,\n         ends_with_newline: tactic.ends_with_newline(context.config.indent_style()),\n         preserve_newline: true,\n         config: context.config,\n@@ -2637,7 +2637,7 @@ fn rewrite_where_clause(\n     }\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: comma_tactic,\n         separator_place: SeparatorPlace::Back,"}, {"sha": "ec846de04dbd9dd6d298ea321155cf30d13f6f02", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -448,7 +448,7 @@ fn format_lines(\n                         line: cur_line,\n                         kind: error_kind,\n                         is_comment: kind.is_comment(),\n-                        is_string: is_string,\n+                        is_string,\n                         line_buffer: line_buffer.clone(),\n                     });\n                 }"}, {"sha": "aa1e0b430ef745b851ad3ae0d42871dc128d24d7", "filename": "src/lists.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -690,15 +690,15 @@ where\n             };\n \n             ListItem {\n-                pre_comment: pre_comment,\n-                pre_comment_style: pre_comment_style,\n+                pre_comment,\n+                pre_comment_style,\n                 item: if self.inner.peek().is_none() && self.leave_last {\n                     None\n                 } else {\n                     (self.get_item_string)(&item)\n                 },\n-                post_comment: post_comment,\n-                new_lines: new_lines,\n+                post_comment,\n+                new_lines,\n             }\n         })\n     }\n@@ -724,16 +724,16 @@ where\n     F3: Fn(&T) -> Option<String>,\n {\n     ListItems {\n-        codemap: codemap,\n+        codemap,\n         inner: inner.peekable(),\n-        get_lo: get_lo,\n-        get_hi: get_hi,\n-        get_item_string: get_item_string,\n-        prev_span_end: prev_span_end,\n-        next_span_start: next_span_start,\n-        terminator: terminator,\n-        separator: separator,\n-        leave_last: leave_last,\n+        get_lo,\n+        get_hi,\n+        get_item_string,\n+        prev_span_end,\n+        next_span_start,\n+        terminator,\n+        separator,\n+        leave_last,\n     }\n }\n \n@@ -841,16 +841,16 @@ pub fn struct_lit_formatting<'a>(\n     let ends_with_newline = context.config.indent_style() != IndentStyle::Visual\n         && tactic == DefinitiveListTactic::Vertical;\n     ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if force_no_trailing_comma {\n             SeparatorTactic::Never\n         } else {\n             context.config.trailing_comma()\n         },\n         separator_place: SeparatorPlace::Back,\n-        shape: shape,\n-        ends_with_newline: ends_with_newline,\n+        shape,\n+        ends_with_newline,\n         preserve_newline: true,\n         config: context.config,\n     }"}, {"sha": "1a2f570f89efdad8d2161db70107b51e7271d217", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -31,7 +31,7 @@ pub struct Mismatch {\n impl Mismatch {\n     fn new(line_number: u32) -> Mismatch {\n         Mismatch {\n-            line_number: line_number,\n+            line_number,\n             lines: Vec::new(),\n         }\n     }"}, {"sha": "8fe2e2b18c0b1e7b653a6ad485041fd0ffc1e98d", "filename": "src/shape.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshape.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -29,8 +29,8 @@ const INDENT_BUFFER: &str =\n impl Indent {\n     pub fn new(block_indent: usize, alignment: usize) -> Indent {\n         Indent {\n-            block_indent: block_indent,\n-            alignment: alignment,\n+            block_indent,\n+            alignment,\n         }\n     }\n \n@@ -161,16 +161,16 @@ impl Shape {\n     //        |<--->|    width\n     pub fn legacy(width: usize, indent: Indent) -> Shape {\n         Shape {\n-            width: width,\n-            indent: indent,\n+            width,\n+            indent,\n             offset: indent.alignment,\n         }\n     }\n \n     pub fn indented(indent: Indent, config: &Config) -> Shape {\n         Shape {\n             width: config.max_width().checked_sub(indent.width()).unwrap_or(0),\n-            indent: indent,\n+            indent,\n             offset: indent.alignment,\n         }\n     }\n@@ -187,9 +187,9 @@ impl Shape {\n \n     pub fn offset(width: usize, indent: Indent, offset: usize) -> Shape {\n         Shape {\n-            width: width,\n-            indent: indent,\n-            offset: offset,\n+            width,\n+            indent,\n+            offset,\n         }\n     }\n "}, {"sha": "2386d90ec8af8e581f19f862b74f4d7530d638fb", "filename": "src/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -36,9 +36,9 @@ impl<'a> StringFormat<'a> {\n             closer: \"\\\"\",\n             line_start: \" \",\n             line_end: \"\\\\\",\n-            shape: shape,\n+            shape,\n             trim_end: false,\n-            config: config,\n+            config,\n         }\n     }\n }"}, {"sha": "a7472567a81bc246d2f02f18c30b9b039e945736", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -352,7 +352,7 @@ where\n     );\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if !context.use_block_indent() || variadic {\n             SeparatorTactic::Never"}, {"sha": "2ccb5d813393dab95be3a5ea60bb5f9919423a35", "filename": "src/vertical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -247,7 +247,7 @@ fn rewrite_aligned_items_inner<T: AlignedItem>(\n     );\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: context.config.trailing_comma(),\n         separator_place: SeparatorPlace::Back,"}, {"sha": "83d5bca40523da77405ce61118bea6e86b6a52e0", "filename": "src/visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -576,14 +576,14 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         snippet_provider: &'a SnippetProvider,\n     ) -> FmtVisitor<'a> {\n         FmtVisitor {\n-            parse_session: parse_session,\n+            parse_session,\n             codemap: parse_session.codemap(),\n             buffer: String::with_capacity(snippet_provider.big_snippet.len() * 2),\n             last_pos: BytePos(0),\n             block_indent: Indent::empty(),\n-            config: config,\n+            config,\n             is_if_else_block: false,\n-            snippet_provider: snippet_provider,\n+            snippet_provider,\n             line_number: 0,\n             skipped_range: vec![],\n         }"}, {"sha": "54ad25b1b377619672b89d59914770b0bf40edc7", "filename": "tests/target/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/tests%2Ftarget%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/tests%2Ftarget%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -147,7 +147,7 @@ fn issue470() {\n                             hair::PatternRef::Hair(pattern),\n                             &lvalue,\n                         );\n-                        ArgDecl { ty: ty }\n+                        ArgDecl { ty }\n                     },\n                 );\n             }"}, {"sha": "5895c74bcc9f1d5dcff6a118e8778ac25c0e6fa8", "filename": "tests/target/impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154bf8e1afafed035b769955ed81490dca62a50a/tests%2Ftarget%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154bf8e1afafed035b769955ed81490dca62a50a/tests%2Ftarget%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpl.rs?ref=154bf8e1afafed035b769955ed81490dca62a50a", "patch": "@@ -13,7 +13,7 @@ where\n     pub fn new(value: V) -> Self {\n         Test {\n             cloned_value: value.clone(),\n-            value: value,\n+            value,\n         }\n     }\n }"}]}