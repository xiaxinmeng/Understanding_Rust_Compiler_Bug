{"sha": "0441525690640ff374313fa5651a97829b0ea85a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NDE1MjU2OTA2NDBmZjM3NDMxM2ZhNTY1MWE5NzgyOWIwZWE4NWE=", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2020-04-15T15:24:13Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2020-04-15T15:24:13Z"}, "message": "Merge remote-tracking branch 'upstream/master' into clippy-fix", "tree": {"sha": "d1d4ecade6f2c3be990bb73dba38350818f7b427", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1d4ecade6f2c3be990bb73dba38350818f7b427"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0441525690640ff374313fa5651a97829b0ea85a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0441525690640ff374313fa5651a97829b0ea85a", "html_url": "https://github.com/rust-lang/rust/commit/0441525690640ff374313fa5651a97829b0ea85a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0441525690640ff374313fa5651a97829b0ea85a/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "680cc2f25848721eca3a2332c48b13c02e027dbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/680cc2f25848721eca3a2332c48b13c02e027dbc", "html_url": "https://github.com/rust-lang/rust/commit/680cc2f25848721eca3a2332c48b13c02e027dbc"}, {"sha": "c496f4e63f5621872060b21793c5ec4ddf0e4a35", "url": "https://api.github.com/repos/rust-lang/rust/commits/c496f4e63f5621872060b21793c5ec4ddf0e4a35", "html_url": "https://github.com/rust-lang/rust/commit/c496f4e63f5621872060b21793c5ec4ddf0e4a35"}], "stats": {"total": 5012, "additions": 2940, "deletions": 2072}, "files": [{"sha": "90cf33053c77587326cfec3e29e0f6caa73db1ca", "filename": ".gitattributes", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitattributes?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,3 @@\n-[attr]rust text eol=lf whitespace=tab-in-indent,trailing-space,tabwidth=4\n-\n * text=auto eol=lf\n-*.rs rust\n+*.rs text eol=lf whitespace=tab-in-indent,trailing-space,tabwidth=4\n *.fixed linguist-language=Rust"}, {"sha": "3f425e5b7258d52580b162ba1b6aecac643d8191", "filename": ".github/deploy.sh", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/.github%2Fdeploy.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/.github%2Fdeploy.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fdeploy.sh?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -17,6 +17,11 @@ if [[ -n $TAG_NAME ]]; then\n   ln -s \"$TAG_NAME\" out/stable\n fi\n \n+if [[ $BETA = \"true\" ]]; then\n+  echo \"Update documentation for the beta release\"\n+  cp -r out/master out/beta\n+fi\n+\n # Generate version index that is shown as root index page\n cp util/gh-pages/versions.html out/index.html\n \n@@ -35,12 +40,15 @@ fi\n \n if [[ -n $TAG_NAME ]]; then\n   # Add the new dir\n-  git add $TAG_NAME\n+  git add \"$TAG_NAME\"\n   # Update the symlink\n   git add stable\n   # Update versions file\n   git add versions.json\n   git commit -m \"Add documentation for ${TAG_NAME} release: ${SHA}\"\n+elif [[ $BETA = \"true\" ]]; then\n+  git add beta\n+  git commit -m \"Automatic deploy to GitHub Pages (beta): ${SHA}\"\n else\n   git add .\n   git commit -m \"Automatic deploy to GitHub Pages: ${SHA}\""}, {"sha": "3b1774e03bcf2241da8e9338008a376f5a1cbdf0", "filename": ".github/workflows/clippy_bors.yml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_bors.yml?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -234,7 +234,8 @@ jobs:\n         - 'rust-lang/cargo'\n         - 'rust-lang/rls'\n         - 'rust-lang/chalk'\n-        - 'rust-lang/rustfmt'\n+        # FIXME: Disabled until https://github.com/rust-lang/rust/issues/71077 is fixed\n+        # - 'rust-lang/rustfmt'\n         - 'Marwes/combine'\n         - 'Geal/nom'\n         - 'rust-lang/stdarch'"}, {"sha": "ffb88cdb4d9fc03dd7b8c19357da01d274a6373a", "filename": ".github/workflows/clippy_dev.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/.github%2Fworkflows%2Fclippy_dev.yml", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/.github%2Fworkflows%2Fclippy_dev.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_dev.yml?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -38,8 +38,8 @@ jobs:\n       run: cargo build --features deny-warnings\n       working-directory: clippy_dev\n \n-    - name: Test limit-stderr-length\n-      run: cargo dev --limit-stderr-length\n+    - name: Test limit_stderr_length\n+      run: cargo dev limit_stderr_length\n \n     - name: Test update_lints\n       run: cargo dev update_lints --check"}, {"sha": "10033daf0aedb428e9dc1f71a3f072f57aa3f468", "filename": ".github/workflows/deploy.yml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/.github%2Fworkflows%2Fdeploy.yml", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/.github%2Fworkflows%2Fdeploy.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fdeploy.yml?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -4,6 +4,7 @@ on:\n   push:\n     branches:\n       - master\n+      - beta\n     tags:\n       - rust-1.**\n \n@@ -34,6 +35,9 @@ jobs:\n       run: |\n         TAG=$(basename ${{ github.ref }})\n         echo \"::set-env name=TAG_NAME::$TAG\"\n+    - name: Set beta to true\n+      if: github.ref == 'refs/heads/beta'\n+      run: echo \"::set-env name=BETA::true\"\n     - name: Deploy\n       run: |\n         eval \"$(ssh-agent -s)\""}, {"sha": "b7ac3cace2048a7684cc55d20af461770b361f2c", "filename": "CHANGELOG.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1271,6 +1271,7 @@ Released 2018-09-13\n [`float_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_arithmetic\n [`float_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp\n [`float_cmp_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp_const\n+[`fn_address_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_address_comparisons\n [`fn_params_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_params_excessive_bools\n [`fn_to_numeric_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n [`fn_to_numeric_cast_with_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_with_truncation\n@@ -1432,6 +1433,7 @@ Released 2018-09-13\n [`range_plus_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_plus_one\n [`range_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_step_by_zero\n [`range_zip_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_zip_with_len\n+[`redundant_allocation`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation\n [`redundant_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\n [`redundant_closure`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n [`redundant_closure_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_call\n@@ -1446,6 +1448,7 @@ Released 2018-09-13\n [`replace_consts`]: https://rust-lang.github.io/rust-clippy/master/index.html#replace_consts\n [`rest_pat_in_fully_bound_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#rest_pat_in_fully_bound_structs\n [`result_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_expect_used\n+[`result_map_or_into_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_or_into_option\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n [`result_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unwrap_or_else\n [`result_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unwrap_used\n@@ -1540,6 +1543,7 @@ Released 2018-09-13\n [`vec_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#vec_box\n [`verbose_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#verbose_bit_mask\n [`verbose_file_reads`]: https://rust-lang.github.io/rust-clippy/master/index.html#verbose_file_reads\n+[`vtable_address_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#vtable_address_comparisons\n [`while_immutable_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_immutable_condition\n [`while_let_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_let_loop\n [`while_let_on_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_let_on_iterator"}, {"sha": "50a5ee8bbf3c83bc0e583927d97ace463b3a3794", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -36,7 +36,8 @@ High level approach:\n \n ### Finding something to fix/improve\n \n-All issues on Clippy are mentored, if you want help with a bug just ask @Manishearth, @llogiq, @mcarton or @oli-obk.\n+All issues on Clippy are mentored, if you want help with a bug just ask\n+@Manishearth, @flip1995, @phansch or @yaahc.\n \n Some issues are easier than others. The [`good first issue`] label can be used to find the easy issues.\n If you want to work on an issue, please leave a comment so that we can assign it to you!\n@@ -70,24 +71,22 @@ an AST expression). `match_def_path()` in Clippy's `utils` module can also be us\n [`T-AST`]: https://github.com/rust-lang/rust-clippy/labels/T-AST\n [`T-middle`]: https://github.com/rust-lang/rust-clippy/labels/T-middle\n [`E-medium`]: https://github.com/rust-lang/rust-clippy/labels/E-medium\n-[`ty`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty\n+[`ty`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty\n [nodes in the AST docs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/\n [deep-nesting]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/mem_forget.rs#L29-L43\n [if_chain]: https://docs.rs/if_chain/*/if_chain\n [nest-less]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/bit_mask.rs#L124-L150\n \n ## Writing code\n \n-Have a look at the [docs for writing lints][adding_lints] for more details. [Llogiq's blog post on lints]\n-is also a nice primer to lint-writing, though it does get into advanced stuff and may be a bit outdated.\n+Have a look at the [docs for writing lints][adding_lints] for more details.\n \n If you want to add a new lint or change existing ones apart from bugfixing, it's\n also a good idea to give the [stability guarantees][rfc_stability] and\n [lint categories][rfc_lint_cats] sections of the [Clippy 1.0 RFC][clippy_rfc] a\n quick read.\n \n [adding_lints]: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md\n-[Llogiq's blog post on lints]: https://llogiq.github.io/2015/06/04/workflows.html\n [clippy_rfc]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md\n [rfc_stability]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#stability-guarantees\n [rfc_lint_cats]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#lint-audit-and-categories\n@@ -223,7 +222,7 @@ You can find the Clippy bors queue [here][homu_queue].\n If you have @bors permissions, you can find an overview of the available\n commands [here][homu_instructions].\n \n-[triage]: https://forge.rust-lang.org/triage-procedure.html\n+[triage]: https://forge.rust-lang.org/release/triage-procedure.html\n [l-crash]: https://github.com/rust-lang/rust-clippy/labels/L-crash%20%3Aboom%3A\n [l-bug]: https://github.com/rust-lang/rust-clippy/labels/L-bug%20%3Abeetle%3A\n [homu]: https://github.com/rust-lang/homu"}, {"sha": "7b07fde43992f57ef108dd454e1d1ebddc7583bf", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -42,7 +42,7 @@ lazy_static = \"1.0\"\n \n [dev-dependencies]\n cargo_metadata = \"0.9.0\"\n-compiletest_rs = { version = \"0.4.0\", features = [\"tmp\"] }\n+compiletest_rs = { version = \"0.5.0\", features = [\"tmp\"] }\n tester = \"0.7\"\n lazy_static = \"1.0\"\n clippy-mini-macro-test = { version = \"0.2\", path = \"mini-macro\" }"}, {"sha": "2a30f5e8e530da555be5e391d62fff7d3665b96b", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -5,7 +5,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 362 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are over 350 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n \n@@ -90,14 +90,6 @@ Note that this is still experimental and only supported on the nightly channel:\n cargo fix -Z unstable-options --clippy\n ```\n \n-#### Running only a single lint\n-\n-If you care only about the warnings of a single lint and want to ignore everything else, you\n-can first deny all the clippy lints and then explicitly enable the lint(s) you care about:\n-````\n-cargo clippy -- -Aclippy::all -Wclippy::useless_format\n-````\n-\n ### Running Clippy from the command line without installing it\n \n To have cargo compile your crate with Clippy without Clippy installation\n@@ -183,6 +175,8 @@ If you do not want to include your lint levels in your code, you can globally en\n flags to Clippy during the run: `cargo clippy -- -A clippy::lint_name` will run Clippy with `lint_name` disabled and\n `cargo clippy -- -W clippy::lint_name` will run it with that enabled. This also works with lint groups. For example you\n can run Clippy with warnings for all lints enabled: `cargo clippy -- -W clippy::pedantic`\n+If you care only about a single lint, you can allow all others and then explicitly reenable\n+the lint(s) you are interested in: `cargo clippy -- -Aclippy::all -Wclippy::useless_format -Wclippy::...`\n \n ## Contributing\n "}, {"sha": "c861efc8afb5032e42c0a8592a0eb1ff26c5e6a6", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -7,7 +7,7 @@ edition = \"2018\"\n [dependencies]\n bytecount = \"0.6\"\n clap = \"2.33\"\n-itertools = \"0.8\"\n+itertools = \"0.9\"\n regex = \"1\"\n lazy_static = \"1.0\"\n shell-escape = \"0.1\""}, {"sha": "6ae3f58c1f2ada5a24893ee825872c9cfa1d8c2d", "filename": "clippy_dev/src/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Ffmt.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,4 +1,4 @@\n-use clippy_dev::clippy_project_root;\n+use crate::clippy_project_root;\n use shell_escape::escape;\n use std::ffi::OsStr;\n use std::io;"}, {"sha": "1f8510f43a61daea0d05388b567505303708e308", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 58, "deletions": 75, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -9,6 +9,11 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use walkdir::WalkDir;\n \n+pub mod fmt;\n+pub mod new_lint;\n+pub mod stderr_length_check;\n+pub mod update_lints;\n+\n lazy_static! {\n     static ref DEC_CLIPPY_LINT_RE: Regex = Regex::new(\n         r#\"(?x)\n@@ -57,110 +62,89 @@ impl Lint {\n     }\n \n     /// Returns all non-deprecated lints and non-internal lints\n-    pub fn usable_lints(lints: impl Iterator<Item = Self>) -> impl Iterator<Item = Self> {\n-        lints.filter(|l| l.deprecation.is_none() && !l.is_internal())\n+    #[must_use]\n+    pub fn usable_lints(lints: &[Self]) -> Vec<Self> {\n+        lints\n+            .iter()\n+            .filter(|l| l.deprecation.is_none() && !l.group.starts_with(\"internal\"))\n+            .cloned()\n+            .collect()\n     }\n \n     /// Returns all internal lints (not `internal_warn` lints)\n-    pub fn internal_lints(lints: impl Iterator<Item = Self>) -> impl Iterator<Item = Self> {\n-        lints.filter(|l| l.group == \"internal\")\n+    #[must_use]\n+    pub fn internal_lints(lints: &[Self]) -> Vec<Self> {\n+        lints.iter().filter(|l| l.group == \"internal\").cloned().collect()\n     }\n \n-    /// Returns the lints in a `HashMap`, grouped by the different lint groups\n+    /// Returns all deprecated lints\n     #[must_use]\n-    pub fn by_lint_group(lints: impl Iterator<Item = Self>) -> HashMap<String, Vec<Self>> {\n-        lints.map(|lint| (lint.group.to_string(), lint)).into_group_map()\n+    pub fn deprecated_lints(lints: &[Self]) -> Vec<Self> {\n+        lints.iter().filter(|l| l.deprecation.is_some()).cloned().collect()\n     }\n \n+    /// Returns the lints in a `HashMap`, grouped by the different lint groups\n     #[must_use]\n-    pub fn is_internal(&self) -> bool {\n-        self.group.starts_with(\"internal\")\n+    pub fn by_lint_group(lints: impl Iterator<Item = Self>) -> HashMap<String, Vec<Self>> {\n+        lints.map(|lint| (lint.group.to_string(), lint)).into_group_map()\n     }\n }\n \n /// Generates the Vec items for `register_lint_group` calls in `clippy_lints/src/lib.rs`.\n #[must_use]\n-pub fn gen_lint_group_list(lints: Vec<Lint>) -> Vec<String> {\n+pub fn gen_lint_group_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n     lints\n-        .into_iter()\n-        .filter_map(|l| {\n-            if l.deprecation.is_some() {\n-                None\n-            } else {\n-                Some(format!(\"        LintId::of(&{}::{}),\", l.module, l.name.to_uppercase()))\n-            }\n-        })\n+        .map(|l| format!(\"        LintId::of(&{}::{}),\", l.module, l.name.to_uppercase()))\n         .sorted()\n         .collect::<Vec<String>>()\n }\n \n /// Generates the `pub mod module_name` list in `clippy_lints/src/lib.rs`.\n #[must_use]\n-pub fn gen_modules_list(lints: Vec<Lint>) -> Vec<String> {\n+pub fn gen_modules_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n     lints\n-        .into_iter()\n-        .filter_map(|l| {\n-            if l.is_internal() || l.deprecation.is_some() {\n-                None\n-            } else {\n-                Some(l.module)\n-            }\n-        })\n+        .map(|l| &l.module)\n         .unique()\n-        .map(|module| format!(\"pub mod {};\", module))\n+        .map(|module| format!(\"mod {};\", module))\n         .sorted()\n         .collect::<Vec<String>>()\n }\n \n /// Generates the list of lint links at the bottom of the README\n #[must_use]\n-pub fn gen_changelog_lint_list(lints: Vec<Lint>) -> Vec<String> {\n-    let mut lint_list_sorted: Vec<Lint> = lints;\n-    lint_list_sorted.sort_by_key(|l| l.name.clone());\n-    lint_list_sorted\n-        .iter()\n-        .filter_map(|l| {\n-            if l.is_internal() {\n-                None\n-            } else {\n-                Some(format!(\"[`{}`]: {}#{}\", l.name, DOCS_LINK, l.name))\n-            }\n-        })\n+pub fn gen_changelog_lint_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n+    lints\n+        .sorted_by_key(|l| &l.name)\n+        .map(|l| format!(\"[`{}`]: {}#{}\", l.name, DOCS_LINK, l.name))\n         .collect()\n }\n \n /// Generates the `register_removed` code in `./clippy_lints/src/lib.rs`.\n #[must_use]\n-pub fn gen_deprecated(lints: &[Lint]) -> Vec<String> {\n+pub fn gen_deprecated<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n     lints\n-        .iter()\n-        .filter_map(|l| {\n-            l.clone().deprecation.map(|depr_text| {\n-                vec![\n-                    \"    store.register_removed(\".to_string(),\n-                    format!(\"        \\\"clippy::{}\\\",\", l.name),\n-                    format!(\"        \\\"{}\\\",\", depr_text),\n-                    \"    );\".to_string(),\n-                ]\n-            })\n+        .flat_map(|l| {\n+            l.deprecation\n+                .clone()\n+                .map(|depr_text| {\n+                    vec![\n+                        \"    store.register_removed(\".to_string(),\n+                        format!(\"        \\\"clippy::{}\\\",\", l.name),\n+                        format!(\"        \\\"{}\\\",\", depr_text),\n+                        \"    );\".to_string(),\n+                    ]\n+                })\n+                .expect(\"only deprecated lints should be passed\")\n         })\n-        .flatten()\n         .collect::<Vec<String>>()\n }\n \n #[must_use]\n-pub fn gen_register_lint_list(lints: &[Lint]) -> Vec<String> {\n+pub fn gen_register_lint_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n     let pre = \"    store.register_lints(&[\".to_string();\n     let post = \"    ]);\".to_string();\n     let mut inner = lints\n-        .iter()\n-        .filter_map(|l| {\n-            if !l.is_internal() && l.deprecation.is_none() {\n-                Some(format!(\"        &{}::{},\", l.module, l.name.to_uppercase()))\n-            } else {\n-                None\n-            }\n-        })\n+        .map(|l| format!(\"        &{}::{},\", l.module, l.name.to_uppercase()))\n         .sorted()\n         .collect::<Vec<String>>();\n     inner.insert(0, pre);\n@@ -434,7 +418,7 @@ fn test_usable_lints() {\n         None,\n         \"module_name\",\n     )];\n-    assert_eq!(expected, Lint::usable_lints(lints.into_iter()).collect::<Vec<Lint>>());\n+    assert_eq!(expected, Lint::usable_lints(&lints));\n }\n \n #[test]\n@@ -464,13 +448,12 @@ fn test_gen_changelog_lint_list() {\n     let lints = vec![\n         Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n         Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"incorrect_internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n     ];\n     let expected = vec![\n         format!(\"[`should_assert_eq`]: {}#should_assert_eq\", DOCS_LINK.to_string()),\n         format!(\"[`should_assert_eq2`]: {}#should_assert_eq2\", DOCS_LINK.to_string()),\n     ];\n-    assert_eq!(expected, gen_changelog_lint_list(lints));\n+    assert_eq!(expected, gen_changelog_lint_list(lints.iter()));\n }\n \n #[test]\n@@ -490,7 +473,6 @@ fn test_gen_deprecated() {\n             Some(\"will be removed\"),\n             \"module_name\",\n         ),\n-        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n     ];\n     let expected: Vec<String> = vec![\n         \"    store.register_removed(\",\n@@ -505,36 +487,37 @@ fn test_gen_deprecated() {\n     .into_iter()\n     .map(String::from)\n     .collect();\n-    assert_eq!(expected, gen_deprecated(&lints));\n+    assert_eq!(expected, gen_deprecated(lints.iter()));\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_gen_deprecated_fail() {\n+    let lints = vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")];\n+    let _ = gen_deprecated(lints.iter());\n }\n \n #[test]\n fn test_gen_modules_list() {\n     let lints = vec![\n         Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", Some(\"abc\"), \"deprecated\"),\n         Lint::new(\"incorrect_stuff\", \"group3\", \"abc\", None, \"another_module\"),\n-        Lint::new(\"incorrect_internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n-    ];\n-    let expected = vec![\n-        \"pub mod another_module;\".to_string(),\n-        \"pub mod module_name;\".to_string(),\n     ];\n-    assert_eq!(expected, gen_modules_list(lints));\n+    let expected = vec![\"mod another_module;\".to_string(), \"mod module_name;\".to_string()];\n+    assert_eq!(expected, gen_modules_list(lints.iter()));\n }\n \n #[test]\n fn test_gen_lint_group_list() {\n     let lints = vec![\n         Lint::new(\"abc\", \"group1\", \"abc\", None, \"module_name\"),\n         Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", Some(\"abc\"), \"deprecated\"),\n         Lint::new(\"internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n     ];\n     let expected = vec![\n         \"        LintId::of(&module_name::ABC),\".to_string(),\n         \"        LintId::of(&module_name::INTERNAL),\".to_string(),\n         \"        LintId::of(&module_name::SHOULD_ASSERT_EQ),\".to_string(),\n     ];\n-    assert_eq!(expected, gen_lint_group_list(lints));\n+    assert_eq!(expected, gen_lint_group_list(lints.iter()));\n }"}, {"sha": "d99235f7c07a7cf649498f5266468fdd89b49cfb", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 11, "deletions": 185, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,21 +1,7 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n \n use clap::{App, Arg, SubCommand};\n-use clippy_dev::{\n-    gather_all, gen_changelog_lint_list, gen_deprecated, gen_lint_group_list, gen_modules_list, gen_register_lint_list,\n-    replace_region_in_file, Lint, DOCS_LINK,\n-};\n-use std::path::Path;\n-\n-mod fmt;\n-mod new_lint;\n-mod stderr_length_check;\n-\n-#[derive(Clone, Copy, PartialEq)]\n-enum UpdateMode {\n-    Check,\n-    Change,\n-}\n+use clippy_dev::{fmt, new_lint, stderr_length_check, update_lints};\n \n fn main() {\n     let matches = App::new(\"Clippy developer tooling\")\n@@ -97,28 +83,23 @@ fn main() {\n                         .takes_value(true),\n                 ),\n         )\n-        .arg(\n-            Arg::with_name(\"limit-stderr-length\")\n-                .long(\"limit-stderr-length\")\n-                .help(\"Ensures that stderr files do not grow longer than a certain amount of lines.\"),\n+        .subcommand(\n+            SubCommand::with_name(\"limit_stderr_length\")\n+                .about(\"Ensures that stderr files do not grow longer than a certain amount of lines.\"),\n         )\n         .get_matches();\n \n-    if matches.is_present(\"limit-stderr-length\") {\n-        stderr_length_check::check();\n-    }\n-\n     match matches.subcommand() {\n         (\"fmt\", Some(matches)) => {\n             fmt::run(matches.is_present(\"check\"), matches.is_present(\"verbose\"));\n         },\n         (\"update_lints\", Some(matches)) => {\n             if matches.is_present(\"print-only\") {\n-                print_lints();\n+                update_lints::print_lints();\n             } else if matches.is_present(\"check\") {\n-                update_lints(UpdateMode::Check);\n+                update_lints::run(update_lints::UpdateMode::Check);\n             } else {\n-                update_lints(UpdateMode::Change);\n+                update_lints::run(update_lints::UpdateMode::Change);\n             }\n         },\n         (\"new_lint\", Some(matches)) => {\n@@ -127,168 +108,13 @@ fn main() {\n                 matches.value_of(\"name\"),\n                 matches.value_of(\"category\"),\n             ) {\n-                Ok(_) => update_lints(UpdateMode::Change),\n+                Ok(_) => update_lints::run(update_lints::UpdateMode::Change),\n                 Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n             }\n         },\n-        _ => {},\n-    }\n-}\n-\n-fn print_lints() {\n-    let lint_list = gather_all();\n-    let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list).collect();\n-    let usable_lint_count = usable_lints.len();\n-    let grouped_by_lint_group = Lint::by_lint_group(usable_lints.into_iter());\n-\n-    for (lint_group, mut lints) in grouped_by_lint_group {\n-        if lint_group == \"Deprecated\" {\n-            continue;\n-        }\n-        println!(\"\\n## {}\", lint_group);\n-\n-        lints.sort_by_key(|l| l.name.clone());\n-\n-        for lint in lints {\n-            println!(\n-                \"* [{}]({}#{}) ({})\",\n-                lint.name,\n-                clippy_dev::DOCS_LINK,\n-                lint.name,\n-                lint.desc\n-            );\n-        }\n-    }\n-\n-    println!(\"there are {} lints\", usable_lint_count);\n-}\n-\n-#[allow(clippy::too_many_lines)]\n-fn update_lints(update_mode: UpdateMode) {\n-    let lint_list: Vec<Lint> = gather_all().collect();\n-\n-    let internal_lints = Lint::internal_lints(lint_list.clone().into_iter());\n-\n-    let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list.clone().into_iter()).collect();\n-    let usable_lint_count = usable_lints.len();\n-\n-    let mut sorted_usable_lints = usable_lints.clone();\n-    sorted_usable_lints.sort_by_key(|lint| lint.name.clone());\n-\n-    let mut file_change = replace_region_in_file(\n-        Path::new(\"src/lintlist/mod.rs\"),\n-        \"begin lint list\",\n-        \"end lint list\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || {\n-            format!(\n-                \"pub const ALL_LINTS: [Lint; {}] = {:#?};\",\n-                sorted_usable_lints.len(),\n-                sorted_usable_lints\n-            )\n-            .lines()\n-            .map(ToString::to_string)\n-            .collect::<Vec<_>>()\n-        },\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"README.md\"),\n-        &format!(r#\"\\[There are \\d+ lints included in this crate!\\]\\({}\\)\"#, DOCS_LINK),\n-        \"\",\n-        true,\n-        update_mode == UpdateMode::Change,\n-        || {\n-            vec![format!(\n-                \"[There are {} lints included in this crate!]({})\",\n-                usable_lint_count, DOCS_LINK\n-            )]\n+        (\"limit_stderr_length\", _) => {\n+            stderr_length_check::check();\n         },\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"CHANGELOG.md\"),\n-        \"<!-- begin autogenerated links to lint list -->\",\n-        \"<!-- end autogenerated links to lint list -->\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_changelog_lint_list(lint_list.clone()),\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        \"begin deprecated lints\",\n-        \"end deprecated lints\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_deprecated(&lint_list),\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        \"begin register lints\",\n-        \"end register lints\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_register_lint_list(&lint_list),\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        \"begin lints modules\",\n-        \"end lints modules\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_modules_list(lint_list.clone()),\n-    )\n-    .changed;\n-\n-    // Generate lists of lints in the clippy::all lint group\n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        r#\"store.register_group\\(true, \"clippy::all\"\"#,\n-        r#\"\\]\\);\"#,\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || {\n-            // clippy::all should only include the following lint groups:\n-            let all_group_lints = usable_lints\n-                .clone()\n-                .into_iter()\n-                .filter(|l| {\n-                    l.group == \"correctness\" || l.group == \"style\" || l.group == \"complexity\" || l.group == \"perf\"\n-                })\n-                .collect();\n-\n-            gen_lint_group_list(all_group_lints)\n-        },\n-    )\n-    .changed;\n-\n-    // Generate the list of lints for all other lint groups\n-    for (lint_group, lints) in Lint::by_lint_group(usable_lints.into_iter().chain(internal_lints)) {\n-        file_change |= replace_region_in_file(\n-            Path::new(\"clippy_lints/src/lib.rs\"),\n-            &format!(\"store.register_group\\\\(true, \\\"clippy::{}\\\"\", lint_group),\n-            r#\"\\]\\);\"#,\n-            false,\n-            update_mode == UpdateMode::Change,\n-            || gen_lint_group_list(lints.clone()),\n-        )\n-        .changed;\n-    }\n-\n-    if update_mode == UpdateMode::Check && file_change {\n-        println!(\n-            \"Not all lints defined properly. \\\n-             Please run `cargo dev update_lints` to make sure all lints are defined properly.\"\n-        );\n-        std::process::exit(1);\n+        _ => {},\n     }\n }"}, {"sha": "44b2a5383d2113f367c1a6262e351b236ea33e16", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,10 +1,15 @@\n-use clippy_dev::clippy_project_root;\n+use crate::clippy_project_root;\n use std::fs::{File, OpenOptions};\n use std::io;\n use std::io::prelude::*;\n use std::io::ErrorKind;\n use std::path::Path;\n \n+/// Creates files required to implement and test a new lint and runs `update_lints`.\n+///\n+/// # Errors\n+///\n+/// This function errors, if the files couldn't be created\n pub fn create(pass: Option<&str>, lint_name: Option<&str>, category: Option<&str>) -> Result<(), io::Error> {\n     let pass = pass.expect(\"`pass` argument is validated by clap\");\n     let lint_name = lint_name.expect(\"`name` argument is validated by clap\");"}, {"sha": "e02b6f7da5f7b66e7653403d2f823984eb000ce4", "filename": "clippy_dev/src/stderr_length_check.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fstderr_length_check.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,11 +1,9 @@\n+use crate::clippy_project_root;\n use std::ffi::OsStr;\n use std::fs;\n use std::path::{Path, PathBuf};\n-\n use walkdir::WalkDir;\n \n-use clippy_dev::clippy_project_root;\n-\n // The maximum length allowed for stderr files.\n //\n // We limit this because small files are easier to deal with than bigger files."}, {"sha": "a9a7092994269b7cc84075756d74f0eda57a3af0", "filename": "clippy_dev/src/update_lints.rs", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -0,0 +1,162 @@\n+use crate::{\n+    gather_all, gen_changelog_lint_list, gen_deprecated, gen_lint_group_list, gen_modules_list, gen_register_lint_list,\n+    replace_region_in_file, Lint, DOCS_LINK,\n+};\n+use std::path::Path;\n+\n+#[derive(Clone, Copy, PartialEq)]\n+pub enum UpdateMode {\n+    Check,\n+    Change,\n+}\n+\n+#[allow(clippy::too_many_lines)]\n+pub fn run(update_mode: UpdateMode) {\n+    let lint_list: Vec<Lint> = gather_all().collect();\n+\n+    let internal_lints = Lint::internal_lints(&lint_list);\n+    let deprecated_lints = Lint::deprecated_lints(&lint_list);\n+    let usable_lints = Lint::usable_lints(&lint_list);\n+    let mut sorted_usable_lints = usable_lints.clone();\n+    sorted_usable_lints.sort_by_key(|lint| lint.name.clone());\n+\n+    let usable_lint_count = round_to_fifty(usable_lints.len());\n+\n+    let mut file_change = replace_region_in_file(\n+        Path::new(\"src/lintlist/mod.rs\"),\n+        \"begin lint list\",\n+        \"end lint list\",\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || {\n+            format!(\"pub static ref ALL_LINTS: Vec<Lint> = vec!{:#?};\", sorted_usable_lints)\n+                .lines()\n+                .map(ToString::to_string)\n+                .collect::<Vec<_>>()\n+        },\n+    )\n+    .changed;\n+\n+    file_change |= replace_region_in_file(\n+        Path::new(\"README.md\"),\n+        &format!(\n+            r#\"\\[There are over \\d+ lints included in this crate!\\]\\({}\\)\"#,\n+            DOCS_LINK\n+        ),\n+        \"\",\n+        true,\n+        update_mode == UpdateMode::Change,\n+        || {\n+            vec![format!(\n+                \"[There are over {} lints included in this crate!]({})\",\n+                usable_lint_count, DOCS_LINK\n+            )]\n+        },\n+    )\n+    .changed;\n+\n+    file_change |= replace_region_in_file(\n+        Path::new(\"CHANGELOG.md\"),\n+        \"<!-- begin autogenerated links to lint list -->\",\n+        \"<!-- end autogenerated links to lint list -->\",\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || gen_changelog_lint_list(usable_lints.iter().chain(deprecated_lints.iter())),\n+    )\n+    .changed;\n+\n+    file_change |= replace_region_in_file(\n+        Path::new(\"clippy_lints/src/lib.rs\"),\n+        \"begin deprecated lints\",\n+        \"end deprecated lints\",\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || gen_deprecated(deprecated_lints.iter()),\n+    )\n+    .changed;\n+\n+    file_change |= replace_region_in_file(\n+        Path::new(\"clippy_lints/src/lib.rs\"),\n+        \"begin register lints\",\n+        \"end register lints\",\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || gen_register_lint_list(usable_lints.iter().chain(internal_lints.iter())),\n+    )\n+    .changed;\n+\n+    file_change |= replace_region_in_file(\n+        Path::new(\"clippy_lints/src/lib.rs\"),\n+        \"begin lints modules\",\n+        \"end lints modules\",\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || gen_modules_list(usable_lints.iter()),\n+    )\n+    .changed;\n+\n+    // Generate lists of lints in the clippy::all lint group\n+    file_change |= replace_region_in_file(\n+        Path::new(\"clippy_lints/src/lib.rs\"),\n+        r#\"store.register_group\\(true, \"clippy::all\"\"#,\n+        r#\"\\]\\);\"#,\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || {\n+            // clippy::all should only include the following lint groups:\n+            let all_group_lints = usable_lints.iter().filter(|l| {\n+                l.group == \"correctness\" || l.group == \"style\" || l.group == \"complexity\" || l.group == \"perf\"\n+            });\n+\n+            gen_lint_group_list(all_group_lints)\n+        },\n+    )\n+    .changed;\n+\n+    // Generate the list of lints for all other lint groups\n+    for (lint_group, lints) in Lint::by_lint_group(usable_lints.into_iter().chain(internal_lints)) {\n+        file_change |= replace_region_in_file(\n+            Path::new(\"clippy_lints/src/lib.rs\"),\n+            &format!(\"store.register_group\\\\(true, \\\"clippy::{}\\\"\", lint_group),\n+            r#\"\\]\\);\"#,\n+            false,\n+            update_mode == UpdateMode::Change,\n+            || gen_lint_group_list(lints.iter()),\n+        )\n+        .changed;\n+    }\n+\n+    if update_mode == UpdateMode::Check && file_change {\n+        println!(\n+            \"Not all lints defined properly. \\\n+             Please run `cargo dev update_lints` to make sure all lints are defined properly.\"\n+        );\n+        std::process::exit(1);\n+    }\n+}\n+\n+pub fn print_lints() {\n+    let lint_list: Vec<Lint> = gather_all().collect();\n+    let usable_lints = Lint::usable_lints(&lint_list);\n+    let usable_lint_count = usable_lints.len();\n+    let grouped_by_lint_group = Lint::by_lint_group(usable_lints.into_iter());\n+\n+    for (lint_group, mut lints) in grouped_by_lint_group {\n+        if lint_group == \"Deprecated\" {\n+            continue;\n+        }\n+        println!(\"\\n## {}\", lint_group);\n+\n+        lints.sort_by_key(|l| l.name.clone());\n+\n+        for lint in lints {\n+            println!(\"* [{}]({}#{}) ({})\", lint.name, DOCS_LINK, lint.name, lint.desc);\n+        }\n+    }\n+\n+    println!(\"there are {} lints\", usable_lint_count);\n+}\n+\n+fn round_to_fifty(count: usize) -> usize {\n+    count / 50 * 50\n+}"}, {"sha": "4d8bbcd310240df6de2cd1a0da5fd75db729701d", "filename": "clippy_lints/src/as_conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fas_conversions.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,6 +1,6 @@\n-use rustc::lint::in_external_macro;\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::span_lint_and_help;"}, {"sha": "c60577e8b2dabe8adbd4096ce3250fe88238ca5c", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -3,11 +3,11 @@ use crate::utils::{\n };\n use crate::utils::{higher, sugg};\n use if_chain::if_chain;\n-use rustc::hir::map::Map;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -77,7 +77,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n             },\n             hir::ExprKind::Assign(assignee, e, _) => {\n                 if let hir::ExprKind::Binary(op, l, r) = &e.kind {\n-                    #[allow(clippy::cognitive_complexity)]\n                     let lint = |assignee: &hir::Expr<'_>, rhs: &hir::Expr<'_>| {\n                         let ty = cx.tables.expr_ty(assignee);\n                         let rty = cx.tables.expr_ty(rhs);"}, {"sha": "d9ff1fe0a1d0dab4f4520706b24fced957267f7c", "filename": "clippy_lints/src/atomic_ordering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fatomic_ordering.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,9 +1,9 @@\n use crate::utils::{match_def_path, span_lint_and_help};\n use if_chain::if_chain;\n-use rustc::ty;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {"}, {"sha": "a406b141c36df3909790f5d545e1c2e2934b2cbf", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -6,15 +6,15 @@ use crate::utils::{\n     span_lint_and_then, without_block_comments,\n };\n use if_chain::if_chain;\n-use rustc::lint::in_external_macro;\n-use rustc::ty;\n use rustc_ast::ast::{AttrKind, AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_errors::Applicability;\n use rustc_hir::{\n     Block, Expr, ExprKind, ImplItem, ImplItemKind, Item, ItemKind, StmtKind, TraitFn, TraitItem, TraitItemKind,\n };\n use rustc_lint::{CheckLintNameResult, EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;"}, {"sha": "db7b5e54a2d88d7855790141f3cd93709a03a671", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -87,7 +87,7 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// ```rust\n     /// # let x = 1;\n-    /// if x & 0x1111 == 0 { }\n+    /// if x & 0b1111 == 0 { }\n     /// ```\n     pub VERBOSE_BIT_MASK,\n     style,"}, {"sha": "9e533eaa32c93a08e5866245f52741238378af52", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,10 +1,10 @@\n use crate::utils::{differing_macro_contexts, higher, snippet_block_with_applicability, span_lint, span_lint_and_sugg};\n-use rustc::hir::map::Map;\n-use rustc::lint::in_external_macro;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{BlockCheckMode, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {"}, {"sha": "f16d10fde9297aaeca9cd4e3bf8b3fc1d2021f0c", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,14 +1,14 @@\n use crate::utils::{\n-    get_trait_def_id, implements_trait, in_macro, match_type, paths, snippet_opt, span_lint_and_sugg,\n+    get_trait_def_id, implements_trait, in_macro, is_type_diagnostic_item, paths, snippet_opt, span_lint_and_sugg,\n     span_lint_and_then, SpanlessEq,\n };\n use if_chain::if_chain;\n-use rustc::hir::map::Map;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{BinOpKind, Body, Expr, ExprKind, FnDecl, HirId, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n@@ -249,7 +249,9 @@ fn simplify_not(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> Option<String> {\n         },\n         ExprKind::MethodCall(path, _, args) if args.len() == 1 => {\n             let type_of_receiver = cx.tables.expr_ty(&args[0]);\n-            if !match_type(cx, type_of_receiver, &paths::OPTION) && !match_type(cx, type_of_receiver, &paths::RESULT) {\n+            if !is_type_diagnostic_item(cx, type_of_receiver, sym!(option_type))\n+                && !is_type_diagnostic_item(cx, type_of_receiver, sym!(result_type))\n+            {\n                 return None;\n             }\n             METHODS_WITH_NEGATION"}, {"sha": "91d3e47d7870c21ab7f6034e0d9c7f56dfeac100", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -3,11 +3,11 @@ use crate::utils::{\n     span_lint_and_sugg, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n-use rustc::ty;\n use rustc_ast::ast::{Name, UintTy};\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {"}, {"sha": "d9776dd50a836add3ab5635534b41bbe225c6180", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,11 +1,11 @@\n //! lint on manually implemented checked conversions that could be transformed into `try_from`\n \n use if_chain::if_chain;\n-use rustc::lint::in_external_macro;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOp, BinOpKind, Expr, ExprKind, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::{snippet_with_applicability, span_lint_and_sugg, SpanlessEq};\n@@ -21,7 +21,7 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # let foo: u32 = 5;\n     /// # let _ =\n-    /// foo <= i32::max_value() as u32\n+    /// foo <= i32::MAX as u32\n     /// # ;\n     /// ```\n     ///\n@@ -179,7 +179,7 @@ impl ConversionType {\n     }\n }\n \n-/// Check for `expr <= (to_type::max_value() as from_type)`\n+/// Check for `expr <= (to_type::MAX as from_type)`\n fn check_upper_bound<'tcx>(expr: &'tcx Expr<'tcx>) -> Option<Conversion<'tcx>> {\n     if_chain! {\n          if let ExprKind::Binary(ref op, ref left, ref right) = &expr.kind;\n@@ -194,7 +194,7 @@ fn check_upper_bound<'tcx>(expr: &'tcx Expr<'tcx>) -> Option<Conversion<'tcx>> {\n     }\n }\n \n-/// Check for `expr >= 0|(to_type::min_value() as from_type)`\n+/// Check for `expr >= 0|(to_type::MIN as from_type)`\n fn check_lower_bound<'tcx>(expr: &'tcx Expr<'tcx>) -> Option<Conversion<'tcx>> {\n     fn check_function<'a>(candidate: &'a Expr<'a>, check: &'a Expr<'a>) -> Option<Conversion<'a>> {\n         (check_lower_bound_zero(candidate, check)).or_else(|| (check_lower_bound_min(candidate, check)))\n@@ -222,7 +222,7 @@ fn check_lower_bound_zero<'a>(candidate: &'a Expr<'_>, check: &'a Expr<'_>) -> O\n     }\n }\n \n-/// Check for `expr >= (to_type::min_value() as from_type)`\n+/// Check for `expr >= (to_type::MIN as from_type)`\n fn check_lower_bound_min<'a>(candidate: &'a Expr<'_>, check: &'a Expr<'_>) -> Option<Conversion<'a>> {\n     if let Some((from, to)) = get_types_from_cast(check, MIN_VALUE, SINTS) {\n         Conversion::try_new(candidate, from, to)"}, {"sha": "93a394b79e55b29663b260d4ca769429c8c9d390", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,15 +1,15 @@\n //! calculate cognitive complexity and warn about overly complex functions\n \n-use rustc::hir::map::Map;\n use rustc_ast::ast::Attribute;\n use rustc_hir::intravisit::{walk_expr, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::hir::map::Map;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::BytePos;\n \n-use crate::utils::{match_type, paths, snippet_opt, span_lint_and_help, LimitStack};\n+use crate::utils::{is_type_diagnostic_item, snippet_opt, span_lint_and_help, LimitStack};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for methods with high cognitive complexity.\n@@ -22,7 +22,7 @@ declare_clippy_lint! {\n     ///\n     /// **Example:** No. You'll see it when you get the warning.\n     pub COGNITIVE_COMPLEXITY,\n-    complexity,\n+    nursery,\n     \"functions that should be split up into multiple functions\"\n }\n \n@@ -61,7 +61,7 @@ impl CognitiveComplexity {\n         helper.visit_expr(expr);\n         let CCHelper { cc, returns } = helper;\n         let ret_ty = cx.tables.node_type(expr.hir_id);\n-        let ret_adjust = if match_type(cx, ret_ty, &paths::RESULT) {\n+        let ret_adjust = if is_type_diagnostic_item(cx, ret_ty, sym!(result_type)) {\n             returns\n         } else {\n             #[allow(clippy::integer_division)]"}, {"sha": "b916071291581f13c0afade460ce54f653cae2ec", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 66, "deletions": 5, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -2,14 +2,14 @@\n \n use crate::utils::{clip, higher, sext, unsext};\n use if_chain::if_chain;\n-use rustc::ty::subst::{Subst, SubstsRef};\n-use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::{bug, span_bug};\n use rustc_ast::ast::{FloatTy, LitFloatType, LitKind};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOp, BinOpKind, Block, Expr, ExprKind, HirId, QPath, UnOp};\n use rustc_lint::LateContext;\n+use rustc_middle::ty::subst::{Subst, SubstsRef};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::{bug, span_bug};\n use rustc_span::symbol::Symbol;\n use std::cmp::Ordering::{self, Equal};\n use std::convert::TryInto;\n@@ -268,6 +268,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                     }\n                 }\n             },\n+            ExprKind::Index(ref arr, ref index) => self.index(arr, index),\n             // TODO: add other expressions.\n             _ => None,\n         }\n@@ -333,7 +334,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                     .tcx\n                     .const_eval_resolve(self.param_env, def_id, substs, None, None)\n                     .ok()\n-                    .map(|val| rustc::ty::Const::from_value(self.lcx.tcx, val, ty))?;\n+                    .map(|val| rustc_middle::ty::Const::from_value(self.lcx.tcx, val, ty))?;\n                 let result = miri_to_const(&result);\n                 if result.is_some() {\n                     self.needed_resolution = true;\n@@ -345,6 +346,31 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n         }\n     }\n \n+    fn index(&mut self, lhs: &'_ Expr<'_>, index: &'_ Expr<'_>) -> Option<Constant> {\n+        let lhs = self.expr(lhs);\n+        let index = self.expr(index);\n+\n+        match (lhs, index) {\n+            (Some(Constant::Vec(vec)), Some(Constant::Int(index))) => match vec[index as usize] {\n+                Constant::F32(x) => Some(Constant::F32(x)),\n+                Constant::F64(x) => Some(Constant::F64(x)),\n+                _ => None,\n+            },\n+            (Some(Constant::Vec(vec)), _) => {\n+                if !vec.is_empty() && vec.iter().all(|x| *x == vec[0]) {\n+                    match vec[0] {\n+                        Constant::F32(x) => Some(Constant::F32(x)),\n+                        Constant::F64(x) => Some(Constant::F64(x)),\n+                        _ => None,\n+                    }\n+                } else {\n+                    None\n+                }\n+            },\n+            _ => None,\n+        }\n+    }\n+\n     /// A block can only yield a constant if it only has one constant expression.\n     fn block(&mut self, block: &Block<'_>) -> Option<Constant> {\n         if block.stmts.is_empty() {\n@@ -460,7 +486,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n }\n \n pub fn miri_to_const(result: &ty::Const<'_>) -> Option<Constant> {\n-    use rustc::mir::interpret::{ConstValue, Scalar};\n+    use rustc_middle::mir::interpret::{ConstValue, Scalar};\n     match result.val {\n         ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data: d, .. })) => match result.ty.kind {\n             ty::Bool => Some(Constant::Bool(d == 1)),\n@@ -492,6 +518,41 @@ pub fn miri_to_const(result: &ty::Const<'_>) -> Option<Constant> {\n             },\n             _ => None,\n         },\n+        ty::ConstKind::Value(ConstValue::ByRef { alloc, offset: _ }) => match result.ty.kind {\n+            ty::Array(sub_type, len) => match sub_type.kind {\n+                ty::Float(FloatTy::F32) => match miri_to_const(len) {\n+                    Some(Constant::Int(len)) => alloc\n+                        .inspect_with_undef_and_ptr_outside_interpreter(0..(4 * len as usize))\n+                        .to_owned()\n+                        .chunks(4)\n+                        .map(|chunk| {\n+                            Some(Constant::F32(f32::from_le_bytes(\n+                                chunk.try_into().expect(\"this shouldn't happen\"),\n+                            )))\n+                        })\n+                        .collect::<Option<Vec<Constant>>>()\n+                        .map(Constant::Vec),\n+                    _ => None,\n+                },\n+                ty::Float(FloatTy::F64) => match miri_to_const(len) {\n+                    Some(Constant::Int(len)) => alloc\n+                        .inspect_with_undef_and_ptr_outside_interpreter(0..(8 * len as usize))\n+                        .to_owned()\n+                        .chunks(8)\n+                        .map(|chunk| {\n+                            Some(Constant::F64(f64::from_le_bytes(\n+                                chunk.try_into().expect(\"this shouldn't happen\"),\n+                            )))\n+                        })\n+                        .collect::<Option<Vec<Constant>>>()\n+                        .map(Constant::Vec),\n+                    _ => None,\n+                },\n+                // FIXME: implement other array type conversions.\n+                _ => None,\n+            },\n+            _ => None,\n+        },\n         // FIXME: implement other conversions.\n         _ => None,\n     }"}, {"sha": "383ee1164a2e6e700514ab9d80aa2c9d79b67f6c", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,9 +1,9 @@\n use crate::utils::{get_parent_expr, higher, if_sequence, same_tys, snippet, span_lint_and_note, span_lint_and_then};\n use crate::utils::{SpanlessEq, SpanlessHash};\n-use rustc::ty::Ty;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{Arm, Block, Expr, ExprKind, MatchSource, Pat, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::Ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Symbol;\n use std::collections::hash_map::Entry;"}, {"sha": "635d609c382890f1a04ae880afdaf965f535c6f6", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,8 +1,8 @@\n use if_chain::if_chain;\n-use rustc::ty;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::{any_parent_is_automatically_derived, match_def_path, paths, span_lint_and_sugg};"}, {"sha": "6e8ca647dd7ae930e9c7dde397c4ae78e0178314", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -147,3 +147,11 @@ declare_deprecated_lint! {\n     pub UNUSED_LABEL,\n     \"this lint has been uplifted to rustc and is now called `unused_labels`\"\n }\n+\n+declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** Associated-constants are now preferred.\n+    pub REPLACE_CONSTS,\n+    \"associated-constants `MIN`/`MAX` of integers are prefer to `{min,max}_value()` and module constants\"\n+}"}, {"sha": "a24cfa89ec2e9f6daa789370f9dba8943b71c846", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,9 +1,9 @@\n use crate::utils::paths;\n use crate::utils::{is_automatically_derived, is_copy, match_path, span_lint_and_then};\n use if_chain::if_chain;\n-use rustc::ty::{self, Ty};\n use rustc_hir::{Item, ItemKind, TraitRef};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n@@ -94,7 +94,8 @@ fn check_hash_peq<'a, 'tcx>(\n     if_chain! {\n         if match_path(&trait_ref.path, &paths::HASH);\n         if let Some(peq_trait_def_id) = cx.tcx.lang_items().eq_trait();\n-        if !&trait_ref.trait_def_id().is_local();\n+        if let Some(def_id) = &trait_ref.trait_def_id();\n+        if !def_id.is_local();\n         then {\n             // Look for the PartialEq implementations for `ty`\n             cx.tcx.for_each_relevant_impl(peq_trait_def_id, ty, |impl_id| {"}, {"sha": "926bd8ed001f631130ddcdd63eaa7a5b61f868ab", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,12 +1,12 @@\n-use crate::utils::{implements_trait, is_entrypoint_fn, match_type, paths, return_ty, span_lint};\n+use crate::utils::{implements_trait, is_entrypoint_fn, is_type_diagnostic_item, return_ty, span_lint};\n use if_chain::if_chain;\n use itertools::Itertools;\n-use rustc::lint::in_external_macro;\n-use rustc::ty;\n use rustc_ast::ast::{AttrKind, Attribute};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{BytePos, MultiSpan, Span};\n use rustc_span::Pos;\n@@ -217,7 +217,7 @@ fn lint_for_missing_headers<'a, 'tcx>(\n         );\n     }\n     if !headers.errors {\n-        if match_type(cx, return_ty(cx, hir_id), &paths::RESULT) {\n+        if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(result_type)) {\n             span_lint(\n                 cx,\n                 MISSING_ERRORS_DOC,\n@@ -229,13 +229,13 @@ fn lint_for_missing_headers<'a, 'tcx>(\n                 if let Some(body_id) = body_id;\n                 if let Some(future) = cx.tcx.lang_items().future_trait();\n                 let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n-                let mir = cx.tcx.optimized_mir(def_id);\n+                let mir = cx.tcx.optimized_mir(def_id.to_def_id());\n                 let ret_ty = mir.return_ty();\n                 if implements_trait(cx, ret_ty, future, &[]);\n                 if let ty::Opaque(_, subs) = ret_ty.kind;\n                 if let Some(gen) = subs.types().next();\n                 if let ty::Generator(_, subs, _) = gen.kind;\n-                if match_type(cx, subs.as_generator().return_ty(), &paths::RESULT);\n+                if is_type_diagnostic_item(cx, subs.as_generator().return_ty(), sym!(result_type));\n                 then {\n                     span_lint(\n                         cx,"}, {"sha": "9a60b2f027abe3ebca34868c8e762370da6de7d5", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,8 +1,8 @@\n use crate::utils::{is_copy, match_def_path, paths, qpath_res, span_lint_and_note};\n use if_chain::if_chain;\n-use rustc::ty;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {"}, {"sha": "fb10ca48074ed10efc228422674221771d5536b5", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,8 +1,8 @@\n //! Lint on if expressions with an else if, but without a final else branch.\n \n-use rustc::lint::in_external_macro;\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::span_lint_and_help;"}, {"sha": "65c9d08a6bd83dfe2261835368576e7922aa7cd4", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -2,11 +2,11 @@ use crate::utils::SpanlessEq;\n use crate::utils::{get_item_name, higher, match_type, paths, snippet, snippet_opt};\n use crate::utils::{snippet_with_applicability, span_lint_and_then, walk_ptrs_ty};\n use if_chain::if_chain;\n-use rustc::hir::map::Map;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{BorrowKind, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n "}, {"sha": "a1fed3fb6e205595ae9edccff2e49124ace435fb", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -3,11 +3,11 @@\n \n use crate::consts::{miri_to_const, Constant};\n use crate::utils::span_lint;\n-use rustc::ty;\n-use rustc::ty::util::IntTypeExt;\n use rustc_ast::ast::{IntTy, UintTy};\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_middle::ty::util::IntTypeExt;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::convert::TryFrom;\n \n@@ -46,12 +46,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n             for var in def.variants {\n                 if let Some(anon_const) = &var.disr_expr {\n                     let def_id = cx.tcx.hir().body_owner_def_id(anon_const.body);\n-                    let mut ty = cx.tcx.type_of(def_id);\n+                    let mut ty = cx.tcx.type_of(def_id.to_def_id());\n                     let constant = cx\n                         .tcx\n-                        .const_eval_poly(def_id)\n+                        .const_eval_poly(def_id.to_def_id())\n                         .ok()\n-                        .map(|val| rustc::ty::Const::from_value(cx.tcx, val, ty));\n+                        .map(|val| rustc_middle::ty::Const::from_value(cx.tcx, val, ty));\n                     if let Some(Constant::Int(val)) = constant.and_then(miri_to_const) {\n                         if let ty::Adt(adt, _) = ty.kind {\n                             if adt.is_enum() {"}, {"sha": "1ec60a0e6e67ac9e00c42e4920d438fafd25ad8c", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,11 +1,11 @@\n-use rustc::ty::layout::LayoutOf;\n-use rustc::ty::{self, Ty};\n use rustc_hir::intravisit;\n use rustc_hir::{self, Body, FnDecl, HirId, HirIdSet, ItemKind, Node};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n+use rustc_target::abi::LayoutOf;\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, Place, PlaceBase};\n \n use crate::utils::span_lint;\n@@ -92,7 +92,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxedLocal {\n }\n \n // TODO: Replace with Map::is_argument(..) when it's fixed\n-fn is_argument(map: rustc::hir::map::Map<'_>, id: HirId) -> bool {\n+fn is_argument(map: rustc_middle::hir::map::Map<'_>, id: HirId) -> bool {\n     match map.find(id) {\n         Some(Node::Binding(_)) => (),\n         _ => return false,"}, {"sha": "1a1a40902c2d8cac7c1dda28ca8795ca166467f8", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,9 +1,9 @@\n use if_chain::if_chain;\n-use rustc::lint::in_external_macro;\n-use rustc::ty::{self, Ty};\n use rustc_errors::Applicability;\n use rustc_hir::{def_id, Expr, ExprKind, Param, PatKind, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::{"}, {"sha": "48b761260a5527225385edd9e0114ce7b7da8990", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,10 +1,10 @@\n use crate::utils::{get_parent_expr, span_lint, span_lint_and_note};\n use if_chain::if_chain;\n-use rustc::hir::map::Map;\n-use rustc::ty;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{def, BinOpKind, Block, Expr, ExprKind, Guard, HirId, Local, Node, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {"}, {"sha": "8e45a09b489e384beea9302497a97ae76cacffcd", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,10 +1,12 @@\n-use crate::utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT, OPTION, RESULT};\n-use crate::utils::{is_expn_of, match_def_path, method_chain_args, span_lint_and_then, walk_ptrs_ty};\n+use crate::utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT};\n+use crate::utils::{\n+    is_expn_of, is_type_diagnostic_item, match_def_path, method_chain_args, span_lint_and_then, walk_ptrs_ty,\n+};\n use if_chain::if_chain;\n-use rustc::hir::map::Map;\n-use rustc::ty::{self, Ty};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n@@ -76,7 +78,9 @@ fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_it\n             // check for `unwrap`\n             if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n                 let reciever_ty = walk_ptrs_ty(self.tables.expr_ty(&arglists[0][0]));\n-                if match_type(self.lcx, reciever_ty, &OPTION) || match_type(self.lcx, reciever_ty, &RESULT) {\n+                if is_type_diagnostic_item(self.lcx, reciever_ty, sym!(option_type))\n+                    || is_type_diagnostic_item(self.lcx, reciever_ty, sym!(result_type))\n+                {\n                     self.result.push(expr.span);\n                 }\n             }\n@@ -124,10 +128,3 @@ fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_it\n         }\n     }\n }\n-\n-fn match_type(cx: &LateContext<'_, '_>, ty: Ty<'_>, path: &[&str]) -> bool {\n-    match ty.kind {\n-        ty::Adt(adt, _) => match_def_path(cx, adt.did, path),\n-        _ => false,\n-    }\n-}"}, {"sha": "3a52b1d3fc20bdd2580e38e052fb0614f8313e03", "filename": "clippy_lints/src/float_literal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_literal.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,12 +1,12 @@\n use crate::utils::{numeric_literal, span_lint_and_sugg};\n use if_chain::if_chain;\n-use rustc::ty;\n use rustc_ast::ast::{FloatTy, LitFloatType, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use std::{f32, f64, fmt};\n+use std::fmt;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for float literals with a precision greater"}, {"sha": "86317fb8bd5c4767b9ed5d7a4e9543b7fc8ed17c", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -4,10 +4,10 @@ use crate::consts::{\n };\n use crate::utils::{higher, numeric_literal, span_lint_and_sugg, sugg, SpanlessEq};\n use if_chain::if_chain;\n-use rustc::ty;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n "}, {"sha": "30795f537ea19f9594c60ac4aedf7286bfa31304", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -91,7 +91,7 @@ fn on_argumentv1_new<'a, 'tcx>(\n         if pats.len() == 1;\n         then {\n             let ty = walk_ptrs_ty(cx.tables.pat_ty(&pats[0]));\n-            if ty.kind != rustc::ty::Str && !match_type(cx, ty, &paths::STRING) {\n+            if ty.kind != rustc_middle::ty::Str && !match_type(cx, ty, &paths::STRING) {\n                 return None;\n             }\n             if let ExprKind::Lit(ref lit) = format_args.kind {"}, {"sha": "8f5f82b0a2ce95b93ae623a0edb4b00b6af7049b", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,8 +1,8 @@\n use crate::utils::{differing_macro_contexts, snippet_opt, span_lint_and_help, span_lint_and_note};\n use if_chain::if_chain;\n-use rustc::lint::in_external_macro;\n use rustc_ast::ast::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n "}, {"sha": "cf1b65a0166cdcd3064cdf47c87a70b6859f3c08", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -3,16 +3,16 @@ use crate::utils::{\n     must_use_attr, qpath_res, return_ty, snippet, snippet_opt, span_lint, span_lint_and_help, span_lint_and_then,\n     trait_ref_of_method, type_is_unsafe_function,\n };\n-use rustc::hir::map::Map;\n-use rustc::lint::in_external_macro;\n-use rustc::ty::{self, Ty};\n use rustc_ast::ast::Attribute;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit;\n use rustc_hir::{def::Res, def_id::DefId};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_target::spec::abi::Abi;"}, {"sha": "c32e0a2290d12c10caa16f6f6e18223bd56fe421", "filename": "clippy_lints/src/get_last_with_len.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fget_last_with_len.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -8,7 +8,6 @@ use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::Symbol;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for using `x.get(x.len() - 1)` instead of\n@@ -51,12 +50,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for GetLastWithLen {\n             if let ExprKind::MethodCall(ref path, _, ref args) = expr.kind;\n \n             // Method name is \"get\"\n-            if path.ident.name == Symbol::intern(\"get\");\n+            if path.ident.name == sym!(get);\n \n             // Argument 0 (the struct we're calling the method on) is a vector\n             if let Some(struct_calling_on) = args.get(0);\n             let struct_ty = cx.tables.expr_ty(struct_calling_on);\n-            if is_type_diagnostic_item(cx, struct_ty, Symbol::intern(\"vec_type\"));\n+            if is_type_diagnostic_item(cx, struct_ty, sym!(vec_type));\n \n             // Argument to \"get\" is a subtraction\n             if let Some(get_index_arg) = args.get(1);\n@@ -71,7 +70,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for GetLastWithLen {\n \n             // LHS of subtraction is \"x.len()\"\n             if let ExprKind::MethodCall(arg_lhs_path, _, lhs_args) = &lhs.kind;\n-            if arg_lhs_path.ident.name == Symbol::intern(\"len\");\n+            if arg_lhs_path.ident.name == sym!(len);\n             if let Some(arg_lhs_struct) = lhs_args.get(0);\n \n             // The two vectors referenced (x in x.get(...) and in x.len())"}, {"sha": "088e4ab1921fb8a31f0d38397521dbb1cbeb2486", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,6 +1,6 @@\n-use rustc::ty;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n "}, {"sha": "9b13f7609247a26f122252b9d97ac34dbd1c8b08", "filename": "clippy_lints/src/if_let_some_result.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,7 +1,7 @@\n-use crate::utils::{match_type, method_chain_args, paths, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{is_type_diagnostic_item, method_chain_args, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{print, Expr, ExprKind, MatchSource, PatKind, QPath};\n+use rustc_hir::{Expr, ExprKind, MatchSource, PatKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -45,8 +45,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OkIfLet {\n             if let ExprKind::MethodCall(_, ok_span, ref result_types) = op.kind; //check is expr.ok() has type Result<T,E>.ok()\n             if let PatKind::TupleStruct(QPath::Resolved(_, ref x), ref y, _)  = body[0].pat.kind; //get operation\n             if method_chain_args(op, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;\n-            let is_result_type = match_type(cx, cx.tables.expr_ty(&result_types[0]), &paths::RESULT);\n-            if print::to_string(print::NO_ANN, |s| s.print_path(x, false)) == \"Some\" && is_result_type;\n+            if is_type_diagnostic_item(cx, cx.tables.expr_ty(&result_types[0]), sym!(result_type));\n+            if rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_path(x, false)) == \"Some\";\n \n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}, {"sha": "271df5b03e385071b2ebfb5cdf3001cbb88156ac", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,9 +1,9 @@\n //! lint on if branches that could be swapped so no `!` operation is necessary\n //! on the condition\n \n-use rustc::lint::in_external_macro;\n use rustc_ast::ast::{BinOpKind, Expr, ExprKind, UnOp};\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::span_lint_and_help;"}, {"sha": "8b87f4c896adc8dd28ce3e76337c9d6c4732a80a", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -135,11 +135,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitReturn {\n         let def_id = cx.tcx.hir().body_owner_def_id(body.id());\n \n         // Building MIR for `fn`s with unsatisfiable preds results in ICE.\n-        if fn_has_unsatisfiable_preds(cx, def_id) {\n+        if fn_has_unsatisfiable_preds(cx, def_id.to_def_id()) {\n             return;\n         }\n \n-        let mir = cx.tcx.optimized_mir(def_id);\n+        let mir = cx.tcx.optimized_mir(def_id.to_def_id());\n \n         // checking return type through MIR, HIR is not able to determine inferred closure return types\n         // make sure it's not a macro"}, {"sha": "a2b1085a36e628dc352b93b92f6e8dce988f5dd1", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -2,10 +2,10 @@\n \n use crate::consts::{constant, Constant};\n use crate::utils::{higher, span_lint, span_lint_and_help};\n-use rustc::ty;\n use rustc_ast::ast::RangeLimits;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {"}, {"sha": "00bbba64841a997b5eabd36c4f9d67c955413414", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,21 +1,24 @@\n //! lint when there is a large size difference between variants on an enum\n \n use crate::utils::{snippet_opt, span_lint_and_then};\n-use rustc::ty::layout::LayoutOf;\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind, VariantData};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_target::abi::LayoutOf;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for large size differences between variants on\n     /// `enum`s.\n     ///\n     /// **Why is this bad?** Enum size is bounded by the largest variant. Having a\n-    /// large variant\n-    /// can penalize the memory layout of that enum.\n+    /// large variant can penalize the memory layout of that enum.\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:** This lint obviously cannot take the distribution of\n+    /// variants in your running program into account. It is possible that the\n+    /// smaller variants make up less than 1% of all instances, in which case\n+    /// the overhead is negligible and the boxing is counter-productive. Always\n+    /// measure the change this lint suggests.\n     ///\n     /// **Example:**\n     /// ```rust\n@@ -52,8 +55,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n             let ty = cx.tcx.type_of(did);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n \n-            let mut smallest_variant: Option<(_, _)> = None;\n             let mut largest_variant: Option<(_, _)> = None;\n+            let mut second_variant: Option<(_, _)> = None;\n \n             for (i, variant) in adt.variants.iter().enumerate() {\n                 let size: u64 = variant\n@@ -69,12 +72,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n \n                 let grouped = (size, (i, variant));\n \n-                update_if(&mut smallest_variant, grouped, |a, b| b.0 <= a.0);\n-                update_if(&mut largest_variant, grouped, |a, b| b.0 >= a.0);\n+                if grouped.0 >= largest_variant.map_or(0, |x| x.0) {\n+                    second_variant = largest_variant;\n+                    largest_variant = Some(grouped);\n+                }\n             }\n \n-            if let (Some(smallest), Some(largest)) = (smallest_variant, largest_variant) {\n-                let difference = largest.0 - smallest.0;\n+            if let (Some(largest), Some(second)) = (largest_variant, second_variant) {\n+                let difference = largest.0 - second.0;\n \n                 if difference > self.maximum_size_difference_allowed {\n                     let (i, variant) = largest.1;\n@@ -114,16 +119,3 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n         }\n     }\n }\n-\n-fn update_if<T, F>(old: &mut Option<T>, new: T, f: F)\n-where\n-    F: Fn(&T, &T) -> bool,\n-{\n-    if let Some(ref mut val) = *old {\n-        if f(val, &new) {\n-            *val = new;\n-        }\n-    } else {\n-        *old = Some(new);\n-    }\n-}"}, {"sha": "f67fce9697af3694c5e72bdd0857248134bf10f5", "filename": "clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,7 +1,7 @@\n-use rustc::mir::interpret::ConstValue;\n-use rustc::ty::{self, ConstKind};\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::mir::interpret::ConstValue;\n+use rustc_middle::ty::{self, ConstKind};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n use if_chain::if_chain;"}, {"sha": "5d94013cb65d80b81cc5afbb04cc17ea9696d32f", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,11 +1,11 @@\n use crate::utils::{get_item_name, snippet_with_applicability, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n-use rustc::ty;\n use rustc_ast::ast::{LitKind, Name};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{AssocItemKind, BinOpKind, Expr, ExprKind, ImplItemRef, Item, ItemKind, TraitItemRef};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{Span, Spanned};\n \n@@ -121,7 +121,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item<'_>, trait_items: &[TraitItemRef]) {\n     fn is_named_self(cx: &LateContext<'_, '_>, item: &TraitItemRef, name: &str) -> bool {\n         item.ident.name.as_str() == name\n-            && if let AssocItemKind::Method { has_self } = item.kind {\n+            && if let AssocItemKind::Fn { has_self } = item.kind {\n                 has_self && {\n                     let did = cx.tcx.hir().local_def_id(item.id.hir_id);\n                     cx.tcx.fn_sig(did).inputs().skip_binder().len() == 1\n@@ -149,8 +149,8 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item<'_>, trait_i\n             .iter()\n             .flat_map(|&i| cx.tcx.associated_items(i).in_definition_order())\n             .any(|i| {\n-                i.kind == ty::AssocKind::Method\n-                    && i.method_has_self_argument\n+                i.kind == ty::AssocKind::Fn\n+                    && i.fn_has_self_parameter\n                     && i.ident.name == sym!(is_empty)\n                     && cx.tcx.fn_sig(i.def_id).inputs().skip_binder().len() == 1\n             });\n@@ -172,7 +172,7 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item<'_>, trait_i\n fn check_impl_items(cx: &LateContext<'_, '_>, item: &Item<'_>, impl_items: &[ImplItemRef<'_>]) {\n     fn is_named_self(cx: &LateContext<'_, '_>, item: &ImplItemRef<'_>, name: &str) -> bool {\n         item.ident.name.as_str() == name\n-            && if let AssocItemKind::Method { has_self } = item.kind {\n+            && if let AssocItemKind::Fn { has_self } = item.kind {\n                 has_self && {\n                     let did = cx.tcx.hir().local_def_id(item.id.hir_id);\n                     cx.tcx.fn_sig(did).inputs().skip_binder().len() == 1\n@@ -261,7 +261,7 @@ fn check_len(\n fn has_is_empty(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n     /// Gets an `AssocItem` and return true if it matches `is_empty(self)`.\n     fn is_is_empty(cx: &LateContext<'_, '_>, item: &ty::AssocItem) -> bool {\n-        if let ty::AssocKind::Method = item.kind {\n+        if let ty::AssocKind::Fn = item.kind {\n             if item.ident.name.as_str() == \"is_empty\" {\n                 let sig = cx.tcx.fn_sig(item.def_id);\n                 let ty = sig.skip_binder();"}, {"sha": "dbf86ba312438ec8b82f059a26b6ff6298f2c368", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,12 +1,12 @@\n use crate::utils::{higher, qpath_res, snippet, span_lint_and_then};\n use if_chain::if_chain;\n-use rustc::hir::map::Map;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit;\n use rustc_hir::BindingAnnotation;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {"}, {"sha": "f8f84f3d42d02c8d1399daa8028c5858c7a4f986", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,7 +1,8 @@\n use if_chain::if_chain;\n-use rustc::lint::in_external_macro;\n-use rustc_hir::{PatKind, Stmt, StmtKind};\n+use rustc_hir::{Local, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::{is_must_use_func_call, is_must_use_ty, match_type, paths, span_lint_and_help};\n@@ -66,22 +67,28 @@ const SYNC_GUARD_PATHS: [&[&str]; 3] = [\n ];\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n-    fn check_stmt(&mut self, cx: &LateContext<'_, '_>, stmt: &Stmt<'_>) {\n-        if in_external_macro(cx.tcx.sess, stmt.span) {\n+    fn check_local(&mut self, cx: &LateContext<'_, '_>, local: &Local<'_>) {\n+        if in_external_macro(cx.tcx.sess, local.span) {\n             return;\n         }\n \n         if_chain! {\n-            if let StmtKind::Local(ref local) = stmt.kind;\n             if let PatKind::Wild = local.pat.kind;\n             if let Some(ref init) = local.init;\n             then {\n-                let check_ty = |ty| SYNC_GUARD_PATHS.iter().any(|path| match_type(cx, ty, path));\n-                if cx.tables.expr_ty(init).walk().any(check_ty) {\n+                let init_ty = cx.tables.expr_ty(init);\n+                let contains_sync_guard = init_ty.walk().any(|inner| match inner.unpack() {\n+                    GenericArgKind::Type(inner_ty) => {\n+                        SYNC_GUARD_PATHS.iter().any(|path| match_type(cx, inner_ty, path))\n+                    },\n+\n+                    GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n+                });\n+                if contains_sync_guard {\n                     span_lint_and_help(\n                         cx,\n                         LET_UNDERSCORE_LOCK,\n-                        stmt.span,\n+                        local.span,\n                         \"non-binding let on a synchronization lock\",\n                         \"consider using an underscore-prefixed named \\\n                             binding or dropping explicitly with `std::mem::drop`\"\n@@ -90,15 +97,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n                     span_lint_and_help(\n                         cx,\n                         LET_UNDERSCORE_MUST_USE,\n-                        stmt.span,\n+                        local.span,\n                         \"non-binding let on an expression with `#[must_use]` type\",\n                         \"consider explicitly using expression value\"\n                     )\n                 } else if is_must_use_func_call(cx, init) {\n                     span_lint_and_help(\n                         cx,\n                         LET_UNDERSCORE_MUST_USE,\n-                        stmt.span,\n+                        local.span,\n                         \"non-binding let on a result of a `#[must_use]` function\",\n                         \"consider explicitly using function result\"\n                     )"}, {"sha": "cb9fcfca8a1c3d0749c5332bc6e54832ce301f71", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 187, "deletions": 173, "changes": 360, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -18,8 +18,6 @@\n #[allow(unused_extern_crates)]\n extern crate fmt_macros;\n #[allow(unused_extern_crates)]\n-extern crate rustc;\n-#[allow(unused_extern_crates)]\n extern crate rustc_ast;\n #[allow(unused_extern_crates)]\n extern crate rustc_ast_pretty;\n@@ -34,6 +32,8 @@ extern crate rustc_errors;\n #[allow(unused_extern_crates)]\n extern crate rustc_hir;\n #[allow(unused_extern_crates)]\n+extern crate rustc_hir_pretty;\n+#[allow(unused_extern_crates)]\n extern crate rustc_index;\n #[allow(unused_extern_crates)]\n extern crate rustc_infer;\n@@ -42,6 +42,8 @@ extern crate rustc_lexer;\n #[allow(unused_extern_crates)]\n extern crate rustc_lint;\n #[allow(unused_extern_crates)]\n+extern crate rustc_middle;\n+#[allow(unused_extern_crates)]\n extern crate rustc_mir;\n #[allow(unused_extern_crates)]\n extern crate rustc_parse;\n@@ -80,7 +82,7 @@ use rustc_session::Session;\n /// ```\n /// # #![feature(rustc_private)]\n /// # #[allow(unused_extern_crates)]\n-/// # extern crate rustc;\n+/// # extern crate rustc_middle;\n /// # #[allow(unused_extern_crates)]\n /// # extern crate rustc_session;\n /// # #[macro_use]\n@@ -168,157 +170,157 @@ mod consts;\n mod utils;\n \n // begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n-pub mod approx_const;\n-pub mod arithmetic;\n-pub mod as_conversions;\n-pub mod assertions_on_constants;\n-pub mod assign_ops;\n-pub mod atomic_ordering;\n-pub mod attrs;\n-pub mod bit_mask;\n-pub mod blacklisted_name;\n-pub mod block_in_if_condition;\n-pub mod booleans;\n-pub mod bytecount;\n-pub mod cargo_common_metadata;\n-pub mod checked_conversions;\n-pub mod cognitive_complexity;\n-pub mod collapsible_if;\n-pub mod comparison_chain;\n-pub mod copies;\n-pub mod copy_iterator;\n-pub mod dbg_macro;\n-pub mod default_trait_access;\n-pub mod derive;\n-pub mod doc;\n-pub mod double_comparison;\n-pub mod double_parens;\n-pub mod drop_bounds;\n-pub mod drop_forget_ref;\n-pub mod duration_subsec;\n-pub mod else_if_without_else;\n-pub mod empty_enum;\n-pub mod entry;\n-pub mod enum_clike;\n-pub mod enum_variants;\n-pub mod eq_op;\n-pub mod erasing_op;\n-pub mod escape;\n-pub mod eta_reduction;\n-pub mod eval_order_dependence;\n-pub mod excessive_bools;\n-pub mod exit;\n-pub mod explicit_write;\n-pub mod fallible_impl_from;\n-pub mod float_literal;\n-pub mod floating_point_arithmetic;\n-pub mod format;\n-pub mod formatting;\n-pub mod functions;\n-pub mod get_last_with_len;\n-pub mod identity_conversion;\n-pub mod identity_op;\n-pub mod if_let_some_result;\n-pub mod if_not_else;\n-pub mod implicit_return;\n-pub mod indexing_slicing;\n-pub mod infinite_iter;\n-pub mod inherent_impl;\n-pub mod inherent_to_string;\n-pub mod inline_fn_without_body;\n-pub mod int_plus_one;\n-pub mod integer_division;\n-pub mod items_after_statements;\n-pub mod large_enum_variant;\n-pub mod large_stack_arrays;\n-pub mod len_zero;\n-pub mod let_if_seq;\n-pub mod let_underscore;\n-pub mod lifetimes;\n-pub mod literal_representation;\n-pub mod loops;\n-pub mod macro_use;\n-pub mod main_recursion;\n-pub mod map_clone;\n-pub mod map_unit_fn;\n-pub mod matches;\n-pub mod mem_discriminant;\n-pub mod mem_forget;\n-pub mod mem_replace;\n-pub mod methods;\n-pub mod minmax;\n-pub mod misc;\n-pub mod misc_early;\n-pub mod missing_const_for_fn;\n-pub mod missing_doc;\n-pub mod missing_inline;\n-pub mod modulo_arithmetic;\n-pub mod multiple_crate_versions;\n-pub mod mut_key;\n-pub mod mut_mut;\n-pub mod mut_reference;\n-pub mod mutable_debug_assertion;\n-pub mod mutex_atomic;\n-pub mod needless_bool;\n-pub mod needless_borrow;\n-pub mod needless_borrowed_ref;\n-pub mod needless_continue;\n-pub mod needless_pass_by_value;\n-pub mod needless_update;\n-pub mod neg_cmp_op_on_partial_ord;\n-pub mod neg_multiply;\n-pub mod new_without_default;\n-pub mod no_effect;\n-pub mod non_copy_const;\n-pub mod non_expressive_names;\n-pub mod open_options;\n-pub mod option_env_unwrap;\n-pub mod overflow_check_conditional;\n-pub mod panic_unimplemented;\n-pub mod partialeq_ne_impl;\n-pub mod path_buf_push_overwrite;\n-pub mod precedence;\n-pub mod ptr;\n-pub mod ptr_offset_with_cast;\n-pub mod question_mark;\n-pub mod ranges;\n-pub mod redundant_clone;\n-pub mod redundant_field_names;\n-pub mod redundant_pattern_matching;\n-pub mod redundant_pub_crate;\n-pub mod redundant_static_lifetimes;\n-pub mod reference;\n-pub mod regex;\n-pub mod replace_consts;\n-pub mod returns;\n-pub mod serde_api;\n-pub mod shadow;\n-pub mod single_component_path_imports;\n-pub mod slow_vector_initialization;\n-pub mod strings;\n-pub mod suspicious_trait_impl;\n-pub mod swap;\n-pub mod tabs_in_doc_comments;\n-pub mod temporary_assignment;\n-pub mod to_digit_is_some;\n-pub mod trait_bounds;\n-pub mod transmute;\n-pub mod transmuting_null;\n-pub mod trivially_copy_pass_by_ref;\n-pub mod try_err;\n-pub mod types;\n-pub mod unicode;\n-pub mod unsafe_removed_from_name;\n-pub mod unused_io_amount;\n-pub mod unused_self;\n-pub mod unwrap;\n-pub mod use_self;\n-pub mod vec;\n-pub mod verbose_file_reads;\n-pub mod wildcard_dependencies;\n-pub mod wildcard_imports;\n-pub mod write;\n-pub mod zero_div_zero;\n+mod approx_const;\n+mod arithmetic;\n+mod as_conversions;\n+mod assertions_on_constants;\n+mod assign_ops;\n+mod atomic_ordering;\n+mod attrs;\n+mod bit_mask;\n+mod blacklisted_name;\n+mod block_in_if_condition;\n+mod booleans;\n+mod bytecount;\n+mod cargo_common_metadata;\n+mod checked_conversions;\n+mod cognitive_complexity;\n+mod collapsible_if;\n+mod comparison_chain;\n+mod copies;\n+mod copy_iterator;\n+mod dbg_macro;\n+mod default_trait_access;\n+mod derive;\n+mod doc;\n+mod double_comparison;\n+mod double_parens;\n+mod drop_bounds;\n+mod drop_forget_ref;\n+mod duration_subsec;\n+mod else_if_without_else;\n+mod empty_enum;\n+mod entry;\n+mod enum_clike;\n+mod enum_variants;\n+mod eq_op;\n+mod erasing_op;\n+mod escape;\n+mod eta_reduction;\n+mod eval_order_dependence;\n+mod excessive_bools;\n+mod exit;\n+mod explicit_write;\n+mod fallible_impl_from;\n+mod float_literal;\n+mod floating_point_arithmetic;\n+mod format;\n+mod formatting;\n+mod functions;\n+mod get_last_with_len;\n+mod identity_conversion;\n+mod identity_op;\n+mod if_let_some_result;\n+mod if_not_else;\n+mod implicit_return;\n+mod indexing_slicing;\n+mod infinite_iter;\n+mod inherent_impl;\n+mod inherent_to_string;\n+mod inline_fn_without_body;\n+mod int_plus_one;\n+mod integer_division;\n+mod items_after_statements;\n+mod large_enum_variant;\n+mod large_stack_arrays;\n+mod len_zero;\n+mod let_if_seq;\n+mod let_underscore;\n+mod lifetimes;\n+mod literal_representation;\n+mod loops;\n+mod macro_use;\n+mod main_recursion;\n+mod map_clone;\n+mod map_unit_fn;\n+mod matches;\n+mod mem_discriminant;\n+mod mem_forget;\n+mod mem_replace;\n+mod methods;\n+mod minmax;\n+mod misc;\n+mod misc_early;\n+mod missing_const_for_fn;\n+mod missing_doc;\n+mod missing_inline;\n+mod modulo_arithmetic;\n+mod multiple_crate_versions;\n+mod mut_key;\n+mod mut_mut;\n+mod mut_reference;\n+mod mutable_debug_assertion;\n+mod mutex_atomic;\n+mod needless_bool;\n+mod needless_borrow;\n+mod needless_borrowed_ref;\n+mod needless_continue;\n+mod needless_pass_by_value;\n+mod needless_update;\n+mod neg_cmp_op_on_partial_ord;\n+mod neg_multiply;\n+mod new_without_default;\n+mod no_effect;\n+mod non_copy_const;\n+mod non_expressive_names;\n+mod open_options;\n+mod option_env_unwrap;\n+mod overflow_check_conditional;\n+mod panic_unimplemented;\n+mod partialeq_ne_impl;\n+mod path_buf_push_overwrite;\n+mod precedence;\n+mod ptr;\n+mod ptr_offset_with_cast;\n+mod question_mark;\n+mod ranges;\n+mod redundant_clone;\n+mod redundant_field_names;\n+mod redundant_pattern_matching;\n+mod redundant_pub_crate;\n+mod redundant_static_lifetimes;\n+mod reference;\n+mod regex;\n+mod returns;\n+mod serde_api;\n+mod shadow;\n+mod single_component_path_imports;\n+mod slow_vector_initialization;\n+mod strings;\n+mod suspicious_trait_impl;\n+mod swap;\n+mod tabs_in_doc_comments;\n+mod temporary_assignment;\n+mod to_digit_is_some;\n+mod trait_bounds;\n+mod transmute;\n+mod transmuting_null;\n+mod trivially_copy_pass_by_ref;\n+mod try_err;\n+mod types;\n+mod unicode;\n+mod unnamed_address;\n+mod unsafe_removed_from_name;\n+mod unused_io_amount;\n+mod unused_self;\n+mod unwrap;\n+mod use_self;\n+mod vec;\n+mod verbose_file_reads;\n+mod wildcard_dependencies;\n+mod wildcard_imports;\n+mod write;\n+mod zero_div_zero;\n // end lints modules, do not remove this comment, it\u2019s used in `update_lints`\n \n pub use crate::utils::conf::Conf;\n@@ -468,6 +470,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         \"clippy::unused_label\",\n         \"this lint has been uplifted to rustc and is now called `unused_labels`\",\n     );\n+    store.register_removed(\n+        \"clippy::replace_consts\",\n+        \"associated-constants `MIN`/`MAX` of integers are prefer to `{min,max}_value()` and module constants\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n@@ -660,6 +666,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::OPTION_UNWRAP_USED,\n         &methods::OR_FUN_CALL,\n         &methods::RESULT_EXPECT_USED,\n+        &methods::RESULT_MAP_OR_INTO_OPTION,\n         &methods::RESULT_MAP_UNWRAP_OR_ELSE,\n         &methods::RESULT_UNWRAP_USED,\n         &methods::SEARCH_IS_SOME,\n@@ -753,7 +760,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &regex::INVALID_REGEX,\n         &regex::REGEX_MACRO,\n         &regex::TRIVIAL_REGEX,\n-        &replace_consts::REPLACE_CONSTS,\n         &returns::LET_AND_RETURN,\n         &returns::NEEDLESS_RETURN,\n         &returns::UNUSED_UNIT,\n@@ -806,6 +812,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &types::LET_UNIT_VALUE,\n         &types::LINKEDLIST,\n         &types::OPTION_OPTION,\n+        &types::REDUNDANT_ALLOCATION,\n         &types::TYPE_COMPLEXITY,\n         &types::UNIT_ARG,\n         &types::UNIT_CMP,\n@@ -814,12 +821,20 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unicode::NON_ASCII_LITERAL,\n         &unicode::UNICODE_NOT_NFC,\n         &unicode::ZERO_WIDTH_SPACE,\n+        &unnamed_address::FN_ADDRESS_COMPARISONS,\n+        &unnamed_address::VTABLE_ADDRESS_COMPARISONS,\n         &unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n         &unused_io_amount::UNUSED_IO_AMOUNT,\n         &unused_self::UNUSED_SELF,\n         &unwrap::PANICKING_UNWRAP,\n         &unwrap::UNNECESSARY_UNWRAP,\n         &use_self::USE_SELF,\n+        &utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n+        &utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n+        &utils::internal_lints::DEFAULT_LINT,\n+        &utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n+        &utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n+        &utils::internal_lints::PRODUCE_ICE,\n         &vec::USELESS_VEC,\n         &verbose_file_reads::VERBOSE_FILE_READS,\n         &wildcard_dependencies::WILDCARD_DEPENDENCIES,\n@@ -951,7 +966,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box identity_conversion::IdentityConversion::default());\n     store.register_late_pass(|| box types::ImplicitHasher);\n     store.register_late_pass(|| box fallible_impl_from::FallibleImplFrom);\n-    store.register_late_pass(|| box replace_consts::ReplaceConsts);\n     store.register_late_pass(|| box types::UnitArg);\n     store.register_late_pass(|| box double_comparison::DoubleComparisons);\n     store.register_late_pass(|| box question_mark::QuestionMark);\n@@ -1024,6 +1038,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box macro_use::MacroUseImports);\n     store.register_late_pass(|| box verbose_file_reads::VerboseFileReads);\n     store.register_late_pass(|| box redundant_pub_crate::RedundantPubCrate::default());\n+    store.register_late_pass(|| box unnamed_address::UnnamedAddress);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1062,6 +1077,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&shadow::SHADOW_REUSE),\n         LintId::of(&shadow::SHADOW_SAME),\n         LintId::of(&strings::STRING_ADD),\n+        LintId::of(&verbose_file_reads::VERBOSE_FILE_READS),\n         LintId::of(&write::PRINT_STDOUT),\n         LintId::of(&write::USE_DEBUG),\n     ]);\n@@ -1089,13 +1105,15 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&items_after_statements::ITEMS_AFTER_STATEMENTS),\n         LintId::of(&large_stack_arrays::LARGE_STACK_ARRAYS),\n         LintId::of(&literal_representation::LARGE_DIGIT_GROUPS),\n+        LintId::of(&literal_representation::UNREADABLE_LITERAL),\n         LintId::of(&loops::EXPLICIT_INTO_ITER_LOOP),\n         LintId::of(&loops::EXPLICIT_ITER_LOOP),\n         LintId::of(&macro_use::MACRO_USE_IMPORTS),\n         LintId::of(&matches::SINGLE_MATCH_ELSE),\n         LintId::of(&methods::FILTER_MAP),\n         LintId::of(&methods::FILTER_MAP_NEXT),\n         LintId::of(&methods::FIND_MAP),\n+        LintId::of(&methods::INEFFICIENT_TO_STRING),\n         LintId::of(&methods::MAP_FLATTEN),\n         LintId::of(&methods::OPTION_MAP_UNWRAP_OR),\n         LintId::of(&methods::OPTION_MAP_UNWRAP_OR_ELSE),\n@@ -1107,17 +1125,20 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&needless_pass_by_value::NEEDLESS_PASS_BY_VALUE),\n         LintId::of(&non_expressive_names::SIMILAR_NAMES),\n         LintId::of(&ranges::RANGE_PLUS_ONE),\n-        LintId::of(&replace_consts::REPLACE_CONSTS),\n         LintId::of(&shadow::SHADOW_UNRELATED),\n         LintId::of(&strings::STRING_ADD_ASSIGN),\n         LintId::of(&trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n+        LintId::of(&trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF),\n         LintId::of(&types::CAST_LOSSLESS),\n         LintId::of(&types::CAST_POSSIBLE_TRUNCATION),\n         LintId::of(&types::CAST_POSSIBLE_WRAP),\n         LintId::of(&types::CAST_PRECISION_LOSS),\n         LintId::of(&types::CAST_SIGN_LOSS),\n+        LintId::of(&types::IMPLICIT_HASHER),\n         LintId::of(&types::INVALID_UPCAST_COMPARISONS),\n+        LintId::of(&types::LET_UNIT_VALUE),\n         LintId::of(&types::LINKEDLIST),\n+        LintId::of(&types::OPTION_OPTION),\n         LintId::of(&unicode::NON_ASCII_LITERAL),\n         LintId::of(&unicode::UNICODE_NOT_NFC),\n         LintId::of(&unused_self::UNUSED_SELF),\n@@ -1153,7 +1174,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&booleans::LOGIC_BUG),\n         LintId::of(&booleans::NONMINIMAL_BOOL),\n         LintId::of(&bytecount::NAIVE_BYTECOUNT),\n-        LintId::of(&cognitive_complexity::COGNITIVE_COMPLEXITY),\n         LintId::of(&collapsible_if::COLLAPSIBLE_IF),\n         LintId::of(&comparison_chain::COMPARISON_CHAIN),\n         LintId::of(&copies::IFS_SAME_COND),\n@@ -1210,7 +1230,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&lifetimes::NEEDLESS_LIFETIMES),\n         LintId::of(&literal_representation::INCONSISTENT_DIGIT_GROUPING),\n         LintId::of(&literal_representation::MISTYPED_LITERAL_SUFFIXES),\n-        LintId::of(&literal_representation::UNREADABLE_LITERAL),\n         LintId::of(&loops::EMPTY_LOOP),\n         LintId::of(&loops::EXPLICIT_COUNTER_LOOP),\n         LintId::of(&loops::FOR_KV_MAP),\n@@ -1250,7 +1269,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::EXPECT_FUN_CALL),\n         LintId::of(&methods::FILTER_NEXT),\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n-        LintId::of(&methods::INEFFICIENT_TO_STRING),\n         LintId::of(&methods::INTO_ITER_ON_REF),\n         LintId::of(&methods::ITERATOR_STEP_BY_ZERO),\n         LintId::of(&methods::ITER_CLONED_COLLECT),\n@@ -1264,6 +1282,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::OPTION_AS_REF_DEREF),\n         LintId::of(&methods::OPTION_MAP_OR_NONE),\n         LintId::of(&methods::OR_FUN_CALL),\n+        LintId::of(&methods::RESULT_MAP_OR_INTO_OPTION),\n         LintId::of(&methods::SEARCH_IS_SOME),\n         LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n         LintId::of(&methods::SINGLE_CHAR_PATTERN),\n@@ -1356,7 +1375,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&transmute::UNSOUND_COLLECTION_TRANSMUTE),\n         LintId::of(&transmute::WRONG_TRANSMUTE),\n         LintId::of(&transmuting_null::TRANSMUTING_NULL),\n-        LintId::of(&trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF),\n         LintId::of(&try_err::TRY_ERR),\n         LintId::of(&types::ABSURD_EXTREME_COMPARISONS),\n         LintId::of(&types::BORROWED_BOX),\n@@ -1366,21 +1384,20 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::CHAR_LIT_AS_U8),\n         LintId::of(&types::FN_TO_NUMERIC_CAST),\n         LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n-        LintId::of(&types::IMPLICIT_HASHER),\n-        LintId::of(&types::LET_UNIT_VALUE),\n-        LintId::of(&types::OPTION_OPTION),\n+        LintId::of(&types::REDUNDANT_ALLOCATION),\n         LintId::of(&types::TYPE_COMPLEXITY),\n         LintId::of(&types::UNIT_ARG),\n         LintId::of(&types::UNIT_CMP),\n         LintId::of(&types::UNNECESSARY_CAST),\n         LintId::of(&types::VEC_BOX),\n         LintId::of(&unicode::ZERO_WIDTH_SPACE),\n+        LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n+        LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n         LintId::of(&unwrap::PANICKING_UNWRAP),\n         LintId::of(&unwrap::UNNECESSARY_UNWRAP),\n         LintId::of(&vec::USELESS_VEC),\n-        LintId::of(&verbose_file_reads::VERBOSE_FILE_READS),\n         LintId::of(&write::PRINTLN_EMPTY_STRING),\n         LintId::of(&write::PRINT_LITERAL),\n         LintId::of(&write::PRINT_WITH_NEWLINE),\n@@ -1418,7 +1435,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&len_zero::LEN_ZERO),\n         LintId::of(&let_if_seq::USELESS_LET_IF_SEQ),\n         LintId::of(&literal_representation::INCONSISTENT_DIGIT_GROUPING),\n-        LintId::of(&literal_representation::UNREADABLE_LITERAL),\n         LintId::of(&loops::EMPTY_LOOP),\n         LintId::of(&loops::FOR_KV_MAP),\n         LintId::of(&loops::NEEDLESS_RANGE_LOOP),\n@@ -1443,6 +1459,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::NEW_RET_NO_SELF),\n         LintId::of(&methods::OK_EXPECT),\n         LintId::of(&methods::OPTION_MAP_OR_NONE),\n+        LintId::of(&methods::RESULT_MAP_OR_INTO_OPTION),\n         LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n         LintId::of(&methods::STRING_EXTEND_CHARS),\n         LintId::of(&methods::UNNECESSARY_FOLD),\n@@ -1478,8 +1495,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&try_err::TRY_ERR),\n         LintId::of(&types::FN_TO_NUMERIC_CAST),\n         LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n-        LintId::of(&types::IMPLICIT_HASHER),\n-        LintId::of(&types::LET_UNIT_VALUE),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n         LintId::of(&write::PRINTLN_EMPTY_STRING),\n         LintId::of(&write::PRINT_LITERAL),\n@@ -1493,7 +1508,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&assign_ops::MISREFACTORED_ASSIGN_OP),\n         LintId::of(&attrs::DEPRECATED_CFG_ATTR),\n         LintId::of(&booleans::NONMINIMAL_BOOL),\n-        LintId::of(&cognitive_complexity::COGNITIVE_COMPLEXITY),\n         LintId::of(&double_comparison::DOUBLE_COMPARISONS),\n         LintId::of(&double_parens::DOUBLE_PARENS),\n         LintId::of(&duration_subsec::DURATION_SUBSEC),\n@@ -1557,13 +1571,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&transmute::TRANSMUTE_PTR_TO_REF),\n         LintId::of(&types::BORROWED_BOX),\n         LintId::of(&types::CHAR_LIT_AS_U8),\n-        LintId::of(&types::OPTION_OPTION),\n         LintId::of(&types::TYPE_COMPLEXITY),\n         LintId::of(&types::UNIT_ARG),\n         LintId::of(&types::UNNECESSARY_CAST),\n         LintId::of(&types::VEC_BOX),\n         LintId::of(&unwrap::UNNECESSARY_UNWRAP),\n-        LintId::of(&verbose_file_reads::VERBOSE_FILE_READS),\n         LintId::of(&zero_div_zero::ZERO_DIVIDED_BY_ZERO),\n     ]);\n \n@@ -1630,6 +1642,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::CAST_REF_TO_MUT),\n         LintId::of(&types::UNIT_CMP),\n         LintId::of(&unicode::ZERO_WIDTH_SPACE),\n+        LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n+        LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n         LintId::of(&unwrap::PANICKING_UNWRAP),\n     ]);\n@@ -1642,16 +1656,15 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::MANUAL_MEMCPY),\n         LintId::of(&loops::NEEDLESS_COLLECT),\n         LintId::of(&methods::EXPECT_FUN_CALL),\n-        LintId::of(&methods::INEFFICIENT_TO_STRING),\n         LintId::of(&methods::ITER_NTH),\n         LintId::of(&methods::OR_FUN_CALL),\n         LintId::of(&methods::SINGLE_CHAR_PATTERN),\n         LintId::of(&misc::CMP_OWNED),\n         LintId::of(&mutex_atomic::MUTEX_ATOMIC),\n         LintId::of(&redundant_clone::REDUNDANT_CLONE),\n         LintId::of(&slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n-        LintId::of(&trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF),\n         LintId::of(&types::BOX_VEC),\n+        LintId::of(&types::REDUNDANT_ALLOCATION),\n         LintId::of(&vec::USELESS_VEC),\n     ]);\n \n@@ -1663,6 +1676,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n \n     store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n         LintId::of(&attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n+        LintId::of(&cognitive_complexity::COGNITIVE_COMPLEXITY),\n         LintId::of(&fallible_impl_from::FALLIBLE_IMPL_FROM),\n         LintId::of(&floating_point_arithmetic::IMPRECISE_FLOPS),\n         LintId::of(&floating_point_arithmetic::SUBOPTIMAL_FLOPS),"}, {"sha": "d80ad47ab2468d5f6c9f4f0d3a41ee33ee479861", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,3 @@\n-use rustc::hir::map::Map;\n-use rustc::lint::in_external_macro;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{\n@@ -11,13 +9,14 @@ use rustc_hir::{\n     ItemKind, Lifetime, LifetimeName, ParamName, QPath, TraitBoundModifier, TraitFn, TraitItem, TraitItemKind, Ty,\n     TyKind, WhereClause, WherePredicate,\n };\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::kw;\n \n use crate::reexport::Name;\n-use crate::utils::{last_path_segment, span_lint, trait_ref_of_method};\n+use crate::utils::{in_macro, last_path_segment, span_lint, trait_ref_of_method};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for lifetime annotations which can be removed by\n@@ -125,7 +124,7 @@ fn check_fn_inner<'a, 'tcx>(\n     span: Span,\n     report_extra_lifetimes: bool,\n ) {\n-    if in_external_macro(cx.sess(), span) || has_where_lifetimes(cx, &generics.where_clause) {\n+    if in_macro(span) || has_where_lifetimes(cx, &generics.where_clause) {\n         return;\n     }\n "}, {"sha": "ec7c4531ed7169c770ddb2ce0d17dae648d9ab60", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -7,10 +7,10 @@ use crate::utils::{\n     snippet_opt, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n-use rustc::lint::in_external_macro;\n use rustc_ast::ast::{Expr, ExprKind, Lit, LitKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n@@ -27,7 +27,7 @@ declare_clippy_lint! {\n     /// let x: u64 = 61864918973511;\n     /// ```\n     pub UNREADABLE_LITERAL,\n-    style,\n+    pedantic,\n     \"long integer literal without underscores\"\n }\n \n@@ -186,6 +186,9 @@ impl EarlyLintPass for LiteralDigitGrouping {\n     }\n }\n \n+// Length of each UUID hyphenated group in hex digits.\n+const UUID_GROUP_LENS: [usize; 5] = [8, 4, 4, 4, 12];\n+\n impl LiteralDigitGrouping {\n     fn check_lit(cx: &EarlyContext<'_>, lit: &Lit) {\n         if_chain! {\n@@ -196,6 +199,10 @@ impl LiteralDigitGrouping {\n                     return;\n                 }\n \n+                if Self::is_literal_uuid_formatted(&mut num_lit) {\n+                    return;\n+                }\n+\n                 let result = (|| {\n \n                     let integral_group_size = Self::get_group_size(num_lit.integer.split('_'))?;\n@@ -266,6 +273,28 @@ impl LiteralDigitGrouping {\n         }\n     }\n \n+    /// Checks whether the numeric literal matches the formatting of a UUID.\n+    ///\n+    /// Returns `true` if the radix is hexadecimal, and the groups match the\n+    /// UUID format of 8-4-4-4-12.\n+    fn is_literal_uuid_formatted(num_lit: &mut NumericLiteral<'_>) -> bool {\n+        if num_lit.radix != Radix::Hexadecimal {\n+            return false;\n+        }\n+\n+        // UUIDs should not have a fraction\n+        if num_lit.fraction.is_some() {\n+            return false;\n+        }\n+\n+        let group_sizes: Vec<usize> = num_lit.integer.split('_').map(str::len).collect();\n+        if UUID_GROUP_LENS.len() == group_sizes.len() {\n+            UUID_GROUP_LENS.iter().zip(&group_sizes).all(|(&a, &b)| a == b)\n+        } else {\n+            false\n+        }\n+    }\n+\n     /// Given the sizes of the digit groups of both integral and fractional\n     /// parts, and the length\n     /// of both parts, determine if the digits have been grouped consistently."}, {"sha": "66bc1cb3dc420a62b2e278386ad0ae8c5b7eb583", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -11,10 +11,6 @@ use crate::utils::{\n use crate::utils::{is_type_diagnostic_item, qpath_res, same_tys, sext, sugg};\n use if_chain::if_chain;\n use itertools::Itertools;\n-use rustc::hir::map::Map;\n-use rustc::lint::in_external_macro;\n-use rustc::middle::region;\n-use rustc::ty::{self, Ty};\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n@@ -26,9 +22,13 @@ use rustc_hir::{\n };\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::middle::region;\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n-use rustc_span::{BytePos, Symbol};\n+use rustc_span::BytePos;\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, Place, PlaceBase};\n use std::iter::{once, Iterator};\n use std::mem;\n@@ -654,15 +654,15 @@ fn combine_branches(b1: NeverLoopResult, b2: NeverLoopResult) -> NeverLoopResult\n \n fn never_loop_block(block: &Block<'_>, main_loop_id: HirId) -> NeverLoopResult {\n     let stmts = block.stmts.iter().map(stmt_to_expr);\n-    let expr = once(block.expr.as_ref().map(|p| &**p));\n+    let expr = once(block.expr.as_deref());\n     let mut iter = stmts.chain(expr).filter_map(|e| e);\n     never_loop_expr_seq(&mut iter, main_loop_id)\n }\n \n fn stmt_to_expr<'tcx>(stmt: &Stmt<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n     match stmt.kind {\n         StmtKind::Semi(ref e, ..) | StmtKind::Expr(ref e, ..) => Some(e),\n-        StmtKind::Local(ref local) => local.init.as_ref().map(|p| &**p),\n+        StmtKind::Local(ref local) => local.init.as_deref(),\n         _ => None,\n     }\n }\n@@ -720,7 +720,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n         ExprKind::Struct(_, _, None)\n         | ExprKind::Yield(_, _)\n         | ExprKind::Closure(_, _, _, _, _)\n-        | ExprKind::InlineAsm(_)\n+        | ExprKind::LlvmInlineAsm(_)\n         | ExprKind::Path(_)\n         | ExprKind::Lit(_)\n         | ExprKind::Err => NeverLoopResult::Otherwise,\n@@ -804,7 +804,7 @@ fn is_slice_like<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'_>) -> bool {\n         _ => false,\n     };\n \n-    is_slice || is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\")) || match_type(cx, ty, &paths::VEC_DEQUE)\n+    is_slice || is_type_diagnostic_item(cx, ty, sym!(vec_type)) || match_type(cx, ty, &paths::VEC_DEQUE)\n }\n \n fn get_fixed_offset_var<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr<'_>, var: HirId) -> Option<FixedOffsetVar> {\n@@ -922,7 +922,7 @@ fn get_indexed_assignments<'a, 'tcx>(\n             .chain(expr.as_ref().into_iter().map(|e| Some(get_assignment(cx, &*e, var))))\n             .filter_map(|op| op)\n             .collect::<Option<Vec<_>>>()\n-            .unwrap_or_else(|| vec![])\n+            .unwrap_or_default()\n     } else {\n         get_assignment(cx, body, var).into_iter().collect()\n     }\n@@ -1392,7 +1392,7 @@ fn check_for_loop_arg(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>, e\n /// Checks for `for` loops over `Option`s and `Result`s.\n fn check_arg_type(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     let ty = cx.tables.expr_ty(arg);\n-    if match_type(cx, ty, &paths::OPTION) {\n+    if is_type_diagnostic_item(cx, ty, sym!(option_type)) {\n         span_lint_and_help(\n             cx,\n             FOR_LOOP_OVER_OPTION,\n@@ -1408,7 +1408,7 @@ fn check_arg_type(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n                 snippet(cx, arg.span, \"_\")\n             ),\n         );\n-    } else if match_type(cx, ty, &paths::RESULT) {\n+    } else if is_type_diagnostic_item(cx, ty, sym!(result_type)) {\n         span_lint_and_help(\n             cx,\n             FOR_LOOP_OVER_RESULT,\n@@ -1955,7 +1955,7 @@ fn is_ref_iterable_type(cx: &LateContext<'_, '_>, e: &Expr<'_>) -> bool {\n     // will allow further borrows afterwards\n     let ty = cx.tables.expr_ty(e);\n     is_iterable_array(ty, cx) ||\n-    is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\")) ||\n+    is_type_diagnostic_item(cx, ty, sym!(vec_type)) ||\n     match_type(cx, ty, &paths::LINKED_LIST) ||\n     match_type(cx, ty, &paths::HASHMAP) ||\n     match_type(cx, ty, &paths::HASHSET) ||\n@@ -2465,7 +2465,7 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'a, '\n         if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n         then {\n             let ty = cx.tables.node_type(ty.hir_id);\n-            if is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\")) ||\n+            if is_type_diagnostic_item(cx, ty, sym!(vec_type)) ||\n                 match_type(cx, ty, &paths::VEC_DEQUE) ||\n                 match_type(cx, ty, &paths::BTREEMAP) ||\n                 match_type(cx, ty, &paths::HASHMAP) {"}, {"sha": "5c5cf8015f408e256d05dd66e90842e04fab53bd", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,13 +1,13 @@\n use crate::utils::paths;\n use crate::utils::{\n-    is_copy, match_trait_method, match_type, remove_blocks, snippet_with_applicability, span_lint_and_sugg,\n+    is_copy, is_type_diagnostic_item, match_trait_method, remove_blocks, snippet_with_applicability, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n-use rustc::ty;\n use rustc_ast::ast::Ident;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n@@ -52,7 +52,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MapClone {\n             if args.len() == 2;\n             if method.ident.as_str() == \"map\";\n             let ty = cx.tables.expr_ty(&args[0]);\n-            if match_type(cx, ty, &paths::OPTION) || match_trait_method(cx, e, &paths::ITERATOR);\n+            if is_type_diagnostic_item(cx, ty, sym!(option_type)) || match_trait_method(cx, e, &paths::ITERATOR);\n             if let hir::ExprKind::Closure(_, _, body_id, _, _) = args[1].kind;\n             let closure_body = cx.tcx.hir().body(body_id);\n             let closure_expr = remove_blocks(&closure_body.value);"}, {"sha": "ba10319ff46101bdbd2a47faa62c4f4228f80552", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,10 +1,9 @@\n-use crate::utils::paths;\n-use crate::utils::{iter_input_pats, match_type, method_chain_args, snippet, span_lint_and_then};\n+use crate::utils::{is_type_diagnostic_item, iter_input_pats, method_chain_args, snippet, span_lint_and_then};\n use if_chain::if_chain;\n-use rustc::ty::{self, Ty};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n@@ -206,9 +205,9 @@ fn suggestion_msg(function_type: &str, map_type: &str) -> String {\n fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt<'_>, expr: &hir::Expr<'_>, map_args: &[hir::Expr<'_>]) {\n     let var_arg = &map_args[0];\n \n-    let (map_type, variant, lint) = if match_type(cx, cx.tables.expr_ty(var_arg), &paths::OPTION) {\n+    let (map_type, variant, lint) = if is_type_diagnostic_item(cx, cx.tables.expr_ty(var_arg), sym!(option_type)) {\n         (\"Option\", \"Some\", OPTION_MAP_UNIT_FN)\n-    } else if match_type(cx, cx.tables.expr_ty(var_arg), &paths::RESULT) {\n+    } else if is_type_diagnostic_item(cx, cx.tables.expr_ty(var_arg), sym!(result_type)) {\n         (\"Result\", \"Ok\", RESULT_MAP_UNIT_FN)\n     } else {\n         return;"}, {"sha": "206a842d21ca9f82a29c45da71dda075ba5d0b9b", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 56, "deletions": 12, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -3,22 +3,22 @@ use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::usage::is_unused;\n use crate::utils::{\n-    expr_block, get_arg_name, get_parent_expr, in_macro, indent_of, is_allowed, is_expn_of, is_refutable, is_wild,\n-    match_qpath, match_type, match_var, multispan_sugg, remove_blocks, snippet, snippet_block,\n-    snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then,\n-    walk_ptrs_ty,\n+    expr_block, get_arg_name, get_parent_expr, in_macro, indent_of, is_allowed, is_expn_of, is_refutable,\n+    is_type_diagnostic_item, is_wild, match_qpath, match_type, match_var, multispan_sugg, remove_blocks, snippet,\n+    snippet_block, snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n+    span_lint_and_then, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n-use rustc::lint::in_external_macro;\n-use rustc::ty::{self, Ty};\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::def::CtorKind;\n use rustc_hir::{\n-    print, Arm, BindingAnnotation, Block, BorrowKind, Expr, ExprKind, Local, MatchSource, Mutability, Node, Pat,\n-    PatKind, QPath, RangeEnd,\n+    Arm, BindingAnnotation, Block, BorrowKind, Expr, ExprKind, Local, MatchSource, Mutability, Node, Pat, PatKind,\n+    QPath, RangeEnd,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use std::cmp::Ordering;\n@@ -447,6 +447,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Matches {\n #[rustfmt::skip]\n fn check_single_match(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr: &Expr<'_>) {\n     if arms.len() == 2 && arms[0].guard.is_none() && arms[1].guard.is_none() {\n+        if in_macro(expr.span) {\n+            // Don't lint match expressions present in\n+            // macro_rules! block\n+            return;\n+        }\n         if let PatKind::Or(..) = arms[0].pat.kind {\n             // don't lint for or patterns for now, this makes\n             // the lint noisy in unnecessary situations\n@@ -536,10 +541,12 @@ fn check_single_match_opt_like(\n             if !inner.iter().all(is_wild) {\n                 return;\n             }\n-            print::to_string(print::NO_ANN, |s| s.print_qpath(path, false))\n+            rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_qpath(path, false))\n         },\n         PatKind::Binding(BindingAnnotation::Unannotated, .., ident, None) => ident.to_string(),\n-        PatKind::Path(ref path) => print::to_string(print::NO_ANN, |s| s.print_qpath(path, false)),\n+        PatKind::Path(ref path) => {\n+            rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_qpath(path, false))\n+        },\n         _ => return,\n     };\n \n@@ -635,10 +642,10 @@ fn check_overlapping_arms<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ex: &'tcx Expr<'\n \n fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n     let ex_ty = walk_ptrs_ty(cx.tables.expr_ty(ex));\n-    if match_type(cx, ex_ty, &paths::RESULT) {\n+    if is_type_diagnostic_item(cx, ex_ty, sym!(result_type)) {\n         for arm in arms {\n             if let PatKind::TupleStruct(ref path, ref inner, _) = arm.pat.kind {\n-                let path_str = print::to_string(print::NO_ANN, |s| s.print_qpath(path, false));\n+                let path_str = rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_qpath(path, false));\n                 if path_str == \"Err\" {\n                     let mut matching_wild = inner.iter().any(is_wild);\n                     let mut ident_bind_name = String::from(\"_\");\n@@ -1190,3 +1197,40 @@ where\n \n     None\n }\n+\n+#[test]\n+fn test_overlapping() {\n+    use rustc_span::source_map::DUMMY_SP;\n+\n+    let sp = |s, e| SpannedRange {\n+        span: DUMMY_SP,\n+        node: (s, e),\n+    };\n+\n+    assert_eq!(None, overlapping::<u8>(&[]));\n+    assert_eq!(None, overlapping(&[sp(1, Bound::Included(4))]));\n+    assert_eq!(\n+        None,\n+        overlapping(&[sp(1, Bound::Included(4)), sp(5, Bound::Included(6))])\n+    );\n+    assert_eq!(\n+        None,\n+        overlapping(&[\n+            sp(1, Bound::Included(4)),\n+            sp(5, Bound::Included(6)),\n+            sp(10, Bound::Included(11))\n+        ],)\n+    );\n+    assert_eq!(\n+        Some((&sp(1, Bound::Included(4)), &sp(3, Bound::Included(6)))),\n+        overlapping(&[sp(1, Bound::Included(4)), sp(3, Bound::Included(6))])\n+    );\n+    assert_eq!(\n+        Some((&sp(5, Bound::Included(6)), &sp(6, Bound::Included(11)))),\n+        overlapping(&[\n+            sp(1, Bound::Included(4)),\n+            sp(5, Bound::Included(6)),\n+            sp(6, Bound::Included(11))\n+        ],)\n+    );\n+}"}, {"sha": "0bd4c4805b34c3d2f4d285a0963d136a720271c0", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -3,12 +3,13 @@ use crate::utils::{\n     span_lint_and_sugg, span_lint_and_then,\n };\n use if_chain::if_chain;\n-use rustc::lint::in_external_macro;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `mem::replace()` on an `Option` with\n@@ -141,15 +142,15 @@ fn check_replace_with_uninit(cx: &LateContext<'_, '_>, src: &Expr<'_>, expr_span\n             if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n             if let Some(repl_def_id) = cx.tables.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n             then {\n-                if match_def_path(cx, repl_def_id, &paths::MEM_UNINITIALIZED) {\n+                if cx.tcx.is_diagnostic_item(sym::mem_uninitialized, repl_def_id) {\n                     span_lint_and_help(\n                         cx,\n                         MEM_REPLACE_WITH_UNINIT,\n                         expr_span,\n                         \"replacing with `mem::uninitialized()`\",\n                         \"consider using the `take_mut` crate instead\",\n                     );\n-                } else if match_def_path(cx, repl_def_id, &paths::MEM_ZEROED) &&\n+                } else if cx.tcx.is_diagnostic_item(sym::mem_zeroed, repl_def_id) &&\n                         !cx.tables.expr_ty(src).is_primitive() {\n                     span_lint_and_help(\n                         cx,"}, {"sha": "495f42700eeb563380b4a474d853fa8f4cd5f6ea", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,10 +1,10 @@\n use super::INEFFICIENT_TO_STRING;\n use crate::utils::{match_def_path, paths, snippet_with_applicability, span_lint_and_then, walk_ptrs_ty_depth};\n use if_chain::if_chain;\n-use rustc::ty::{self, Ty};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, Ty};\n \n /// Checks for the `INEFFICIENT_TO_STRING` lint\n pub fn lint<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &hir::Expr<'_>, arg: &hir::Expr<'_>, arg_ty: Ty<'tcx>) {"}, {"sha": "5255fec2cec5f4677fbbf17887f1016255d29404", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 241, "deletions": 114, "changes": 355, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -8,17 +8,18 @@ use std::fmt;\n use std::iter;\n \n use if_chain::if_chain;\n-use rustc::hir::map::Map;\n-use rustc::lint::in_external_macro;\n-use rustc::ty::{self, Predicate, Ty};\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::subst::GenericArgKind;\n+use rustc_middle::ty::{self, Predicate, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::{sym, Symbol, SymbolStr};\n+use rustc_span::symbol::{sym, SymbolStr};\n \n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n@@ -330,6 +331,32 @@ declare_clippy_lint! {\n     \"using `Option.map_or(None, f)`, which is more succinctly expressed as `and_then(f)`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `_.map_or(None, Some)`.\n+    ///\n+    /// **Why is this bad?** Readability, this can be written more concisely as\n+    /// `_.ok()`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// Bad:\n+    /// ```rust\n+    /// # let r: Result<u32, &str> = Ok(1);\n+    /// assert_eq!(Some(1), r.map_or(None, Some));\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust\n+    /// # let r: Result<u32, &str> = Ok(1);\n+    /// assert_eq!(Some(1), r.ok());\n+    /// ```\n+    pub RESULT_MAP_OR_INTO_OPTION,\n+    style,\n+    \"using `Result.map_or(None, Some)`, which is more succinctly expressed as `ok()`\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `_.and_then(|x| Some(y))`.\n     ///\n@@ -698,12 +725,12 @@ declare_clippy_lint! {\n     /// [\"foo\", \"bar\"].iter().map(|&s| s.to_string());\n     /// ```\n     pub INEFFICIENT_TO_STRING,\n-    perf,\n+    pedantic,\n     \"using `to_string` on `&&T` where `T: ToString`\"\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `new` not returning `Self`.\n+    /// **What it does:** Checks for `new` not returning a type that contains `Self`.\n     ///\n     /// **Why is this bad?** As a convention, `new` methods are used to make a new\n     /// instance of a type.\n@@ -720,9 +747,31 @@ declare_clippy_lint! {\n     ///     }\n     /// }\n     /// ```\n+    ///\n+    /// ```rust\n+    /// # struct Foo;\n+    /// # struct FooError;\n+    /// impl Foo {\n+    ///     // Good. Return type contains `Self`\n+    ///     fn new() -> Result<Foo, FooError> {\n+    ///         # Ok(Foo)\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// ```rust\n+    /// # struct Foo;\n+    /// struct Bar(Foo);\n+    /// impl Foo {\n+    ///     // Bad. The type name must contain `Self`.\n+    ///     fn new() -> Bar {\n+    ///         # Bar(Foo)\n+    ///     }\n+    /// }\n+    /// ```\n     pub NEW_RET_NO_SELF,\n     style,\n-    \"not returning `Self` in a `new` method\"\n+    \"not returning type containing `Self` in a `new` method\"\n }\n \n declare_clippy_lint! {\n@@ -1137,8 +1186,8 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # let y: u32 = 0;\n     /// # let x: u32 = 100;\n-    /// let add = x.checked_add(y).unwrap_or(u32::max_value());\n-    /// let sub = x.checked_sub(y).unwrap_or(u32::min_value());\n+    /// let add = x.checked_add(y).unwrap_or(u32::MAX);\n+    /// let sub = x.checked_sub(y).unwrap_or(u32::MIN);\n     /// ```\n     ///\n     /// can be written using dedicated methods for saturating addition/subtraction as:\n@@ -1248,6 +1297,7 @@ declare_lint_pass!(Methods => [\n     OPTION_MAP_UNWRAP_OR,\n     OPTION_MAP_UNWRAP_OR_ELSE,\n     RESULT_MAP_UNWRAP_OR_ELSE,\n+    RESULT_MAP_OR_INTO_OPTION,\n     OPTION_MAP_OR_NONE,\n     OPTION_AND_THEN_SOME,\n     OR_FUN_CALL,\n@@ -1289,7 +1339,7 @@ declare_lint_pass!(Methods => [\n ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n-    #[allow(clippy::cognitive_complexity, clippy::too_many_lines)]\n+    #[allow(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if in_macro(expr.span) {\n             return;\n@@ -1407,7 +1457,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id);\n         let item = cx.tcx.hir().expect_item(parent);\n         let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n-        let ty = cx.tcx.type_of(def_id);\n+        let self_ty = cx.tcx.type_of(def_id);\n         if_chain! {\n             if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind;\n             if let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.hir().body(id)).next();\n@@ -1425,11 +1475,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             then {\n                 if cx.access_levels.is_exported(impl_item.hir_id) {\n                 // check missing trait implementations\n-                    for &(method_name, n_args, self_kind, out_type, trait_name) in &TRAIT_METHODS {\n+                    for &(method_name, n_args, fn_header, self_kind, out_type, trait_name) in &TRAIT_METHODS {\n                         if name == method_name &&\n-                        sig.decl.inputs.len() == n_args &&\n-                        out_type.matches(cx, &sig.decl.output) &&\n-                        self_kind.matches(cx, ty, first_arg_ty) {\n+                            sig.decl.inputs.len() == n_args &&\n+                            out_type.matches(cx, &sig.decl.output) &&\n+                            self_kind.matches(cx, self_ty, first_arg_ty) &&\n+                            fn_header_equals(*fn_header, sig.header) {\n                             span_lint(cx, SHOULD_IMPLEMENT_TRAIT, impl_item.span, &format!(\n                                 \"defining a method called `{}` on this type; consider implementing \\\n                                 the `{}` trait or choosing a less ambiguous name\", name, trait_name));\n@@ -1441,7 +1492,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n                     .iter()\n                     .find(|(ref conv, _)| conv.check(&name))\n                 {\n-                    if !self_kinds.iter().any(|k| k.matches(cx, ty, first_arg_ty)) {\n+                    if !self_kinds.iter().any(|k| k.matches(cx, self_ty, first_arg_ty)) {\n                         let lint = if item.vis.node.is_pub() {\n                             WRONG_PUB_SELF_CONVENTION\n                         } else {\n@@ -1471,8 +1522,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n         if let hir::ImplItemKind::Fn(_, _) = impl_item.kind {\n             let ret_ty = return_ty(cx, impl_item.hir_id);\n \n+            let contains_self_ty = |ty: Ty<'tcx>| {\n+                ty.walk().any(|inner| match inner.unpack() {\n+                    GenericArgKind::Type(inner_ty) => same_tys(cx, self_ty, inner_ty),\n+\n+                    GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n+                })\n+            };\n+\n             // walk the return type and check for Self (this does not check associated types)\n-            if ret_ty.walk().any(|inner_type| same_tys(cx, ty, inner_type)) {\n+            if contains_self_ty(ret_ty) {\n                 return;\n             }\n \n@@ -1486,18 +1545,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n                             let associated_type = binder.skip_binder();\n \n                             // walk the associated type and check for Self\n-                            for inner_type in associated_type.walk() {\n-                                if same_tys(cx, ty, inner_type) {\n-                                    return;\n-                                }\n+                            if contains_self_ty(associated_type) {\n+                                return;\n                             }\n                         },\n                         (_, _) => {},\n                     }\n                 }\n             }\n \n-            if name == \"new\" && !same_tys(cx, ret_ty, ty) {\n+            if name == \"new\" && !same_tys(cx, ret_ty, self_ty) {\n                 span_lint(\n                     cx,\n                     NEW_RET_NO_SELF,\n@@ -1801,9 +1858,9 @@ fn lint_expect_fun_call(\n     }\n \n     let receiver_type = cx.tables.expr_ty_adjusted(&args[0]);\n-    let closure_args = if match_type(cx, receiver_type, &paths::OPTION) {\n+    let closure_args = if is_type_diagnostic_item(cx, receiver_type, sym!(option_type)) {\n         \"||\"\n-    } else if match_type(cx, receiver_type, &paths::RESULT) {\n+    } else if is_type_diagnostic_item(cx, receiver_type, sym!(result_type)) {\n         \"|_|\"\n     } else {\n         return;\n@@ -1912,9 +1969,10 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, arg: &hir:\n             match &cx.tcx.hir().get(parent) {\n                 hir::Node::Expr(parent) => match parent.kind {\n                     // &*x is a nop, &x.clone() is not\n-                    hir::ExprKind::AddrOf(..) |\n+                    hir::ExprKind::AddrOf(..) => return,\n                     // (*x).func() is useless, x.clone().func() can work in case func borrows mutably\n-                    hir::ExprKind::MethodCall(..) => return,\n+                    hir::ExprKind::MethodCall(_, _, parent_args) if expr.hir_id == parent_args[0].hir_id => return,\n+\n                     _ => {},\n                 },\n                 hir::Node::Stmt(stmt) => {\n@@ -1962,9 +2020,9 @@ fn lint_clone_on_ref_ptr(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, arg: &h\n     let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(arg));\n \n     if let ty::Adt(_, subst) = obj_ty.kind {\n-        let caller_type = if match_type(cx, obj_ty, &paths::RC) {\n+        let caller_type = if is_type_diagnostic_item(cx, obj_ty, sym::Rc) {\n             \"Rc\"\n-        } else if match_type(cx, obj_ty, &paths::ARC) {\n+        } else if is_type_diagnostic_item(cx, obj_ty, sym::Arc) {\n             \"Arc\"\n         } else if match_type(cx, obj_ty, &paths::WEAK_RC) || match_type(cx, obj_ty, &paths::WEAK_ARC) {\n             \"Weak\"\n@@ -2031,7 +2089,7 @@ fn lint_cstring_as_ptr(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, source: &\n     if_chain! {\n         let source_type = cx.tables.expr_ty(source);\n         if let ty::Adt(def, substs) = source_type.kind;\n-        if match_def_path(cx, def.did, &paths::RESULT);\n+        if cx.tcx.is_diagnostic_item(sym!(result_type), def.did);\n         if match_type(cx, substs.type_at(0), &paths::CSTRING);\n         then {\n             span_lint_and_then(\n@@ -2053,7 +2111,7 @@ fn lint_iter_cloned_collect<'a, 'tcx>(\n     iter_args: &'tcx [hir::Expr<'_>],\n ) {\n     if_chain! {\n-        if is_type_diagnostic_item(cx, cx.tables.expr_ty(expr), Symbol::intern(\"vec_type\"));\n+        if is_type_diagnostic_item(cx, cx.tables.expr_ty(expr), sym!(vec_type));\n         if let Some(slice) = derefs_to_slice(cx, &iter_args[0], cx.tables.expr_ty(&iter_args[0]));\n         if let Some(to_replace) = expr.span.trim_start(slice.span.source_callsite());\n \n@@ -2182,7 +2240,7 @@ fn lint_iter_nth<'a, 'tcx>(\n     let mut_str = if is_mut { \"_mut\" } else { \"\" };\n     let caller_type = if derefs_to_slice(cx, &iter_args[0], cx.tables.expr_ty(&iter_args[0])).is_some() {\n         \"slice\"\n-    } else if is_type_diagnostic_item(cx, cx.tables.expr_ty(&iter_args[0]), Symbol::intern(\"vec_type\")) {\n+    } else if is_type_diagnostic_item(cx, cx.tables.expr_ty(&iter_args[0]), sym!(vec_type)) {\n         \"Vec\"\n     } else if match_type(cx, cx.tables.expr_ty(&iter_args[0]), &paths::VEC_DEQUE) {\n         \"VecDeque\"\n@@ -2239,7 +2297,7 @@ fn lint_get_unwrap<'a, 'tcx>(\n     let caller_type = if derefs_to_slice(cx, &get_args[0], expr_ty).is_some() {\n         needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"slice\"\n-    } else if is_type_diagnostic_item(cx, expr_ty, Symbol::intern(\"vec_type\")) {\n+    } else if is_type_diagnostic_item(cx, expr_ty, sym!(vec_type)) {\n         needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"Vec\"\n     } else if match_type(cx, expr_ty, &paths::VEC_DEQUE) {\n@@ -2320,7 +2378,7 @@ fn derefs_to_slice<'a, 'tcx>(\n         match ty.kind {\n             ty::Slice(_) => true,\n             ty::Adt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n-            ty::Adt(..) => is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\")),\n+            ty::Adt(..) => is_type_diagnostic_item(cx, ty, sym!(vec_type)),\n             ty::Array(_, size) => {\n                 if let Some(size) = size.try_eval_usize(cx.tcx, cx.param_env) {\n                     size < 32\n@@ -2359,9 +2417,9 @@ fn derefs_to_slice<'a, 'tcx>(\n fn lint_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, unwrap_args: &[hir::Expr<'_>]) {\n     let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(&unwrap_args[0]));\n \n-    let mess = if match_type(cx, obj_ty, &paths::OPTION) {\n+    let mess = if is_type_diagnostic_item(cx, obj_ty, sym!(option_type)) {\n         Some((OPTION_UNWRAP_USED, \"an Option\", \"None\"))\n-    } else if match_type(cx, obj_ty, &paths::RESULT) {\n+    } else if is_type_diagnostic_item(cx, obj_ty, sym!(result_type)) {\n         Some((RESULT_UNWRAP_USED, \"a Result\", \"Err\"))\n     } else {\n         None\n@@ -2386,9 +2444,9 @@ fn lint_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, unwrap_args: &[hi\n fn lint_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, expect_args: &[hir::Expr<'_>]) {\n     let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(&expect_args[0]));\n \n-    let mess = if match_type(cx, obj_ty, &paths::OPTION) {\n+    let mess = if is_type_diagnostic_item(cx, obj_ty, sym!(option_type)) {\n         Some((OPTION_EXPECT_USED, \"an Option\", \"None\"))\n-    } else if match_type(cx, obj_ty, &paths::RESULT) {\n+    } else if is_type_diagnostic_item(cx, obj_ty, sym!(result_type)) {\n         Some((RESULT_EXPECT_USED, \"a Result\", \"Err\"))\n     } else {\n         None\n@@ -2409,7 +2467,7 @@ fn lint_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, expect_args: &[hi\n fn lint_ok_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, ok_args: &[hir::Expr<'_>]) {\n     if_chain! {\n         // lint if the caller of `ok()` is a `Result`\n-        if match_type(cx, cx.tables.expr_ty(&ok_args[0]), &paths::RESULT);\n+        if is_type_diagnostic_item(cx, cx.tables.expr_ty(&ok_args[0]), sym!(result_type));\n         let result_type = cx.tables.expr_ty(&ok_args[0]);\n         if let Some(error_type) = get_error_type(cx, result_type);\n         if has_debug_impl(error_type, cx);\n@@ -2455,8 +2513,8 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n     unwrap_args: &'tcx [hir::Expr<'_>],\n ) {\n     // lint if the caller of `map()` is an `Option`\n-    let is_option = match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::OPTION);\n-    let is_result = match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::RESULT);\n+    let is_option = is_type_diagnostic_item(cx, cx.tables.expr_ty(&map_args[0]), sym!(option_type));\n+    let is_result = is_type_diagnostic_item(cx, cx.tables.expr_ty(&map_args[0]), sym!(result_type));\n \n     if is_option || is_result {\n         // Don't make a suggestion that may fail to compile due to mutably borrowing\n@@ -2517,38 +2575,78 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n     }\n }\n \n-/// lint use of `_.map_or(None, _)` for `Option`s\n+/// lint use of `_.map_or(None, _)` for `Option`s and `Result`s\n fn lint_map_or_none<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     expr: &'tcx hir::Expr<'_>,\n     map_or_args: &'tcx [hir::Expr<'_>],\n ) {\n-    if match_type(cx, cx.tables.expr_ty(&map_or_args[0]), &paths::OPTION) {\n-        // check if the first non-self argument to map_or() is None\n-        let map_or_arg_is_none = if let hir::ExprKind::Path(ref qpath) = map_or_args[1].kind {\n+    let is_option = is_type_diagnostic_item(cx, cx.tables.expr_ty(&map_or_args[0]), sym!(option_type));\n+    let is_result = is_type_diagnostic_item(cx, cx.tables.expr_ty(&map_or_args[0]), sym!(result_type));\n+\n+    // There are two variants of this `map_or` lint:\n+    // (1) using `map_or` as an adapter from `Result<T,E>` to `Option<T>`\n+    // (2) using `map_or` as a combinator instead of `and_then`\n+    //\n+    // (For this lint) we don't care if any other type calls `map_or`\n+    if !is_option && !is_result {\n+        return;\n+    }\n+\n+    let (lint_name, msg, instead, hint) = {\n+        let default_arg_is_none = if let hir::ExprKind::Path(ref qpath) = map_or_args[1].kind {\n             match_qpath(qpath, &paths::OPTION_NONE)\n+        } else {\n+            return;\n+        };\n+\n+        if !default_arg_is_none {\n+            // nothing to lint!\n+            return;\n+        }\n+\n+        let f_arg_is_some = if let hir::ExprKind::Path(ref qpath) = map_or_args[2].kind {\n+            match_qpath(qpath, &paths::OPTION_SOME)\n         } else {\n             false\n         };\n \n-        if map_or_arg_is_none {\n-            // lint message\n+        if is_option {\n+            let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n+            let func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n             let msg = \"called `map_or(None, f)` on an `Option` value. This can be done more directly by calling \\\n                        `and_then(f)` instead\";\n-            let map_or_self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n-            let map_or_func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n-            let hint = format!(\"{0}.and_then({1})\", map_or_self_snippet, map_or_func_snippet);\n-            span_lint_and_sugg(\n-                cx,\n+            (\n                 OPTION_MAP_OR_NONE,\n-                expr.span,\n                 msg,\n                 \"try using `and_then` instead\",\n-                hint,\n-                Applicability::MachineApplicable,\n-            );\n+                format!(\"{0}.and_then({1})\", self_snippet, func_snippet),\n+            )\n+        } else if f_arg_is_some {\n+            let msg = \"called `map_or(None, Some)` on a `Result` value. This can be done more directly by calling \\\n+                       `ok()` instead\";\n+            let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n+            (\n+                RESULT_MAP_OR_INTO_OPTION,\n+                msg,\n+                \"try using `ok` instead\",\n+                format!(\"{0}.ok()\", self_snippet),\n+            )\n+        } else {\n+            // nothing to lint!\n+            return;\n         }\n-    }\n+    };\n+\n+    span_lint_and_sugg(\n+        cx,\n+        lint_name,\n+        expr.span,\n+        msg,\n+        instead,\n+        hint,\n+        Applicability::MachineApplicable,\n+    );\n }\n \n /// Lint use of `_.and_then(|x| Some(y))` for `Option`s\n@@ -3133,10 +3231,7 @@ fn is_maybe_uninit_ty_valid(cx: &LateContext<'_, '_>, ty: Ty<'_>) -> bool {\n     match ty.kind {\n         ty::Array(ref component, _) => is_maybe_uninit_ty_valid(cx, component),\n         ty::Tuple(ref types) => types.types().all(|ty| is_maybe_uninit_ty_valid(cx, ty)),\n-        ty::Adt(ref adt, _) => {\n-            // needs to be a MaybeUninit\n-            match_def_path(cx, adt.did, &paths::MEM_MAYBEUNINIT)\n-        },\n+        ty::Adt(ref adt, _) => match_def_path(cx, adt.did, &paths::MEM_MAYBEUNINIT),\n         _ => false,\n     }\n }\n@@ -3159,6 +3254,8 @@ fn lint_option_as_ref_deref<'a, 'tcx>(\n     map_args: &[hir::Expr<'_>],\n     is_mut: bool,\n ) {\n+    let same_mutability = |m| (is_mut && m == &hir::Mutability::Mut) || (!is_mut && m == &hir::Mutability::Not);\n+\n     let option_ty = cx.tables.expr_ty(&as_ref_args[0]);\n     if !match_type(cx, option_ty, &paths::OPTION) {\n         return;\n@@ -3181,39 +3278,56 @@ fn lint_option_as_ref_deref<'a, 'tcx>(\n         hir::ExprKind::Closure(_, _, body_id, _, _) => {\n             let closure_body = cx.tcx.hir().body(body_id);\n             let closure_expr = remove_blocks(&closure_body.value);\n-            if_chain! {\n-                if let hir::ExprKind::MethodCall(_, _, args) = &closure_expr.kind;\n-                if args.len() == 1;\n-                if let hir::ExprKind::Path(qpath) = &args[0].kind;\n-                if let hir::def::Res::Local(local_id) = cx.tables.qpath_res(qpath, args[0].hir_id);\n-                if closure_body.params[0].pat.hir_id == local_id;\n-                let adj = cx.tables.expr_adjustments(&args[0]).iter().map(|x| &x.kind).collect::<Box<[_]>>();\n-                if let [ty::adjustment::Adjust::Deref(None), ty::adjustment::Adjust::Borrow(_)] = *adj;\n-                then {\n-                    let method_did = cx.tables.type_dependent_def_id(closure_expr.hir_id).unwrap();\n-                    deref_aliases.iter().any(|path| match_def_path(cx, method_did, path))\n-                } else {\n-                    false\n-                }\n+\n+            match &closure_expr.kind {\n+                hir::ExprKind::MethodCall(_, _, args) => {\n+                    if_chain! {\n+                        if args.len() == 1;\n+                        if let hir::ExprKind::Path(qpath) = &args[0].kind;\n+                        if let hir::def::Res::Local(local_id) = cx.tables.qpath_res(qpath, args[0].hir_id);\n+                        if closure_body.params[0].pat.hir_id == local_id;\n+                        let adj = cx.tables.expr_adjustments(&args[0]).iter().map(|x| &x.kind).collect::<Box<[_]>>();\n+                        if let [ty::adjustment::Adjust::Deref(None), ty::adjustment::Adjust::Borrow(_)] = *adj;\n+                        then {\n+                            let method_did = cx.tables.type_dependent_def_id(closure_expr.hir_id).unwrap();\n+                            deref_aliases.iter().any(|path| match_def_path(cx, method_did, path))\n+                        } else {\n+                            false\n+                        }\n+                    }\n+                },\n+                hir::ExprKind::AddrOf(hir::BorrowKind::Ref, m, ref inner) if same_mutability(m) => {\n+                    if_chain! {\n+                        if let hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner1) = inner.kind;\n+                        if let hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner2) = inner1.kind;\n+                        if let hir::ExprKind::Path(ref qpath) = inner2.kind;\n+                        if let hir::def::Res::Local(local_id) = cx.tables.qpath_res(qpath, inner2.hir_id);\n+                        then {\n+                            closure_body.params[0].pat.hir_id == local_id\n+                        } else {\n+                            false\n+                        }\n+                    }\n+                },\n+                _ => false,\n             }\n         },\n-\n         _ => false,\n     };\n \n     if is_deref {\n         let current_method = if is_mut {\n-            \".as_mut().map(DerefMut::deref_mut)\"\n+            format!(\".as_mut().map({})\", snippet(cx, map_args[1].span, \"..\"))\n         } else {\n-            \".as_ref().map(Deref::deref)\"\n+            format!(\".as_ref().map({})\", snippet(cx, map_args[1].span, \"..\"))\n         };\n         let method_hint = if is_mut { \"as_deref_mut\" } else { \"as_deref\" };\n         let hint = format!(\"{}.{}()\", snippet(cx, as_ref_args[0].span, \"..\"), method_hint);\n         let suggestion = format!(\"try using {} instead\", method_hint);\n \n         let msg = format!(\n-            \"called `{0}` (or with one of deref aliases) on an Option value. \\\n-             This can be done more directly by calling `{1}` instead\",\n+            \"called `{0}` on an Option value. This can be done more directly \\\n+            by calling `{1}` instead\",\n             current_method, hint\n         );\n         span_lint_and_sugg(\n@@ -3231,7 +3345,7 @@ fn lint_option_as_ref_deref<'a, 'tcx>(\n /// Given a `Result<T, E>` type, return its error type (`E`).\n fn get_error_type<'a>(cx: &LateContext<'_, '_>, ty: Ty<'a>) -> Option<Ty<'a>> {\n     match ty.kind {\n-        ty::Adt(_, substs) if match_type(cx, ty, &paths::RESULT) => substs.types().nth(1),\n+        ty::Adt(_, substs) if is_type_diagnostic_item(cx, ty, sym!(result_type)) => substs.types().nth(1),\n         _ => None,\n     }\n }\n@@ -3259,38 +3373,45 @@ const CONVENTIONS: [(Convention, &[SelfKind]); 7] = [\n     (Convention::StartsWith(\"to_\"), &[SelfKind::Ref]),\n ];\n \n+const FN_HEADER: hir::FnHeader = hir::FnHeader {\n+    unsafety: hir::Unsafety::Normal,\n+    constness: hir::Constness::NotConst,\n+    asyncness: hir::IsAsync::NotAsync,\n+    abi: rustc_target::spec::abi::Abi::Rust,\n+};\n+\n #[rustfmt::skip]\n-const TRAIT_METHODS: [(&str, usize, SelfKind, OutType, &str); 30] = [\n-    (\"add\", 2, SelfKind::Value, OutType::Any, \"std::ops::Add\"),\n-    (\"as_mut\", 1, SelfKind::RefMut, OutType::Ref, \"std::convert::AsMut\"),\n-    (\"as_ref\", 1, SelfKind::Ref, OutType::Ref, \"std::convert::AsRef\"),\n-    (\"bitand\", 2, SelfKind::Value, OutType::Any, \"std::ops::BitAnd\"),\n-    (\"bitor\", 2, SelfKind::Value, OutType::Any, \"std::ops::BitOr\"),\n-    (\"bitxor\", 2, SelfKind::Value, OutType::Any, \"std::ops::BitXor\"),\n-    (\"borrow\", 1, SelfKind::Ref, OutType::Ref, \"std::borrow::Borrow\"),\n-    (\"borrow_mut\", 1, SelfKind::RefMut, OutType::Ref, \"std::borrow::BorrowMut\"),\n-    (\"clone\", 1, SelfKind::Ref, OutType::Any, \"std::clone::Clone\"),\n-    (\"cmp\", 2, SelfKind::Ref, OutType::Any, \"std::cmp::Ord\"),\n-    (\"default\", 0, SelfKind::No, OutType::Any, \"std::default::Default\"),\n-    (\"deref\", 1, SelfKind::Ref, OutType::Ref, \"std::ops::Deref\"),\n-    (\"deref_mut\", 1, SelfKind::RefMut, OutType::Ref, \"std::ops::DerefMut\"),\n-    (\"div\", 2, SelfKind::Value, OutType::Any, \"std::ops::Div\"),\n-    (\"drop\", 1, SelfKind::RefMut, OutType::Unit, \"std::ops::Drop\"),\n-    (\"eq\", 2, SelfKind::Ref, OutType::Bool, \"std::cmp::PartialEq\"),\n-    (\"from_iter\", 1, SelfKind::No, OutType::Any, \"std::iter::FromIterator\"),\n-    (\"from_str\", 1, SelfKind::No, OutType::Any, \"std::str::FromStr\"),\n-    (\"hash\", 2, SelfKind::Ref, OutType::Unit, \"std::hash::Hash\"),\n-    (\"index\", 2, SelfKind::Ref, OutType::Ref, \"std::ops::Index\"),\n-    (\"index_mut\", 2, SelfKind::RefMut, OutType::Ref, \"std::ops::IndexMut\"),\n-    (\"into_iter\", 1, SelfKind::Value, OutType::Any, \"std::iter::IntoIterator\"),\n-    (\"mul\", 2, SelfKind::Value, OutType::Any, \"std::ops::Mul\"),\n-    (\"neg\", 1, SelfKind::Value, OutType::Any, \"std::ops::Neg\"),\n-    (\"next\", 1, SelfKind::RefMut, OutType::Any, \"std::iter::Iterator\"),\n-    (\"not\", 1, SelfKind::Value, OutType::Any, \"std::ops::Not\"),\n-    (\"rem\", 2, SelfKind::Value, OutType::Any, \"std::ops::Rem\"),\n-    (\"shl\", 2, SelfKind::Value, OutType::Any, \"std::ops::Shl\"),\n-    (\"shr\", 2, SelfKind::Value, OutType::Any, \"std::ops::Shr\"),\n-    (\"sub\", 2, SelfKind::Value, OutType::Any, \"std::ops::Sub\"),\n+const TRAIT_METHODS: [(&str, usize, &hir::FnHeader, SelfKind, OutType, &str); 30] = [\n+    (\"add\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Add\"),\n+    (\"as_mut\", 1, &FN_HEADER, SelfKind::RefMut, OutType::Ref, \"std::convert::AsMut\"),\n+    (\"as_ref\", 1, &FN_HEADER, SelfKind::Ref, OutType::Ref, \"std::convert::AsRef\"),\n+    (\"bitand\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::BitAnd\"),\n+    (\"bitor\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::BitOr\"),\n+    (\"bitxor\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::BitXor\"),\n+    (\"borrow\", 1, &FN_HEADER, SelfKind::Ref, OutType::Ref, \"std::borrow::Borrow\"),\n+    (\"borrow_mut\", 1, &FN_HEADER, SelfKind::RefMut, OutType::Ref, \"std::borrow::BorrowMut\"),\n+    (\"clone\", 1, &FN_HEADER, SelfKind::Ref, OutType::Any, \"std::clone::Clone\"),\n+    (\"cmp\", 2, &FN_HEADER, SelfKind::Ref, OutType::Any, \"std::cmp::Ord\"),\n+    (\"default\", 0, &FN_HEADER, SelfKind::No, OutType::Any, \"std::default::Default\"),\n+    (\"deref\", 1, &FN_HEADER, SelfKind::Ref, OutType::Ref, \"std::ops::Deref\"),\n+    (\"deref_mut\", 1, &FN_HEADER, SelfKind::RefMut, OutType::Ref, \"std::ops::DerefMut\"),\n+    (\"div\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Div\"),\n+    (\"drop\", 1, &FN_HEADER, SelfKind::RefMut, OutType::Unit, \"std::ops::Drop\"),\n+    (\"eq\", 2, &FN_HEADER, SelfKind::Ref, OutType::Bool, \"std::cmp::PartialEq\"),\n+    (\"from_iter\", 1, &FN_HEADER, SelfKind::No, OutType::Any, \"std::iter::FromIterator\"),\n+    (\"from_str\", 1, &FN_HEADER, SelfKind::No, OutType::Any, \"std::str::FromStr\"),\n+    (\"hash\", 2, &FN_HEADER, SelfKind::Ref, OutType::Unit, \"std::hash::Hash\"),\n+    (\"index\", 2, &FN_HEADER, SelfKind::Ref, OutType::Ref, \"std::ops::Index\"),\n+    (\"index_mut\", 2, &FN_HEADER, SelfKind::RefMut, OutType::Ref, \"std::ops::IndexMut\"),\n+    (\"into_iter\", 1, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::iter::IntoIterator\"),\n+    (\"mul\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Mul\"),\n+    (\"neg\", 1, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Neg\"),\n+    (\"next\", 1, &FN_HEADER, SelfKind::RefMut, OutType::Any, \"std::iter::Iterator\"),\n+    (\"not\", 1, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Not\"),\n+    (\"rem\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Rem\"),\n+    (\"shl\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Shl\"),\n+    (\"shr\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Shr\"),\n+    (\"sub\", 2, &FN_HEADER, SelfKind::Value, OutType::Any, \"std::ops::Sub\"),\n ];\n \n #[rustfmt::skip]\n@@ -3324,12 +3445,12 @@ enum SelfKind {\n \n impl SelfKind {\n     fn matches<'a>(self, cx: &LateContext<'_, 'a>, parent_ty: Ty<'a>, ty: Ty<'a>) -> bool {\n-        fn matches_value(parent_ty: Ty<'_>, ty: Ty<'_>) -> bool {\n+        fn matches_value<'a>(cx: &LateContext<'_, 'a>, parent_ty: Ty<'_>, ty: Ty<'_>) -> bool {\n             if ty == parent_ty {\n                 true\n             } else if ty.is_box() {\n                 ty.boxed_ty() == parent_ty\n-            } else if ty.is_rc() || ty.is_arc() {\n+            } else if is_type_diagnostic_item(cx, ty, sym::Rc) || is_type_diagnostic_item(cx, ty, sym::Arc) {\n                 if let ty::Adt(_, substs) = ty.kind {\n                     substs.types().next().map_or(false, |t| t == parent_ty)\n                 } else {\n@@ -3363,7 +3484,7 @@ impl SelfKind {\n         }\n \n         match self {\n-            Self::Value => matches_value(parent_ty, ty),\n+            Self::Value => matches_value(cx, parent_ty, ty),\n             Self::Ref => matches_ref(cx, hir::Mutability::Not, parent_ty, ty) || ty == parent_ty && is_copy(cx, ty),\n             Self::RefMut => matches_ref(cx, hir::Mutability::Mut, parent_ty, ty),\n             Self::No => ty != parent_ty,\n@@ -3503,3 +3624,9 @@ fn lint_filetype_is_file(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, args: &\n     let help_msg = format!(\"use `{}FileType::is_dir()` instead\", help_unary);\n     span_lint_and_help(cx, FILETYPE_IS_FILE, span, &lint_msg, &help_msg);\n }\n+\n+fn fn_header_equals(expected: hir::FnHeader, actual: hir::FnHeader) -> bool {\n+    expected.constness == actual.constness\n+        && expected.unsafety == actual.unsafety\n+        && expected.asyncness == actual.asyncness\n+}"}, {"sha": "35d481cf666e2d3926f704834b7e17a04bb62730", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,11 +1,11 @@\n-use crate::utils::{differing_macro_contexts, paths, snippet_with_applicability, span_lint_and_then};\n-use crate::utils::{is_copy, match_type};\n-use rustc::hir::map::Map;\n+use crate::utils::{differing_macro_contexts, snippet_with_applicability, span_lint_and_then};\n+use crate::utils::{is_copy, is_type_diagnostic_item};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n use rustc_hir::{self, HirId, Path};\n use rustc_lint::LateContext;\n+use rustc_middle::hir::map::Map;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n \n@@ -20,7 +20,7 @@ pub(super) fn lint<'a, 'tcx>(\n     map_span: Span,\n ) {\n     // lint if the caller of `map()` is an `Option`\n-    if match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::OPTION) {\n+    if is_type_diagnostic_item(cx, cx.tables.expr_ty(&map_args[0]), sym!(option_type)) {\n         if !is_copy(cx, cx.tables.expr_ty(&unwrap_args[1])) {\n             // Do not lint if the `map` argument uses identifiers in the `map`\n             // argument that are also used in the `unwrap_or` argument"}, {"sha": "41c9ce7cda3e61ab780854fd44c566e5be870523", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,11 +1,11 @@\n use crate::utils::paths;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{match_qpath, match_trait_method, span_lint};\n-use rustc::hir::map::Map;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_lint::LateContext;\n+use rustc_middle::hir::map::Map;\n \n use if_chain::if_chain;\n "}, {"sha": "58a5a29eb16bc8f70bf793e749e537aaae7a6a52", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 62, "deletions": 21, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,4 @@\n use if_chain::if_chain;\n-use rustc::ty;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n@@ -8,6 +7,7 @@ use rustc_hir::{\n     TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{ExpnKind, Span};\n \n@@ -57,10 +57,9 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// # use core::f32::NAN;\n     /// # let x = 1.0;\n     ///\n-    /// if x == NAN { }\n+    /// if x == f32::NAN { }\n     /// ```\n     pub CMP_NAN,\n     correctness,\n@@ -370,26 +369,28 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                             return;\n                         }\n                     }\n-                    let (lint, msg) = if is_named_constant(cx, left) || is_named_constant(cx, right) {\n-                        (FLOAT_CMP_CONST, \"strict comparison of `f32` or `f64` constant\")\n-                    } else {\n-                        (FLOAT_CMP, \"strict comparison of `f32` or `f64`\")\n-                    };\n+                    let is_comparing_arrays = is_array(cx, left) || is_array(cx, right);\n+                    let (lint, msg) = get_lint_and_message(\n+                        is_named_constant(cx, left) || is_named_constant(cx, right),\n+                        is_comparing_arrays,\n+                    );\n                     span_lint_and_then(cx, lint, expr.span, msg, |db| {\n                         let lhs = Sugg::hir(cx, left, \"..\");\n                         let rhs = Sugg::hir(cx, right, \"..\");\n \n-                        db.span_suggestion(\n-                            expr.span,\n-                            \"consider comparing them within some error\",\n-                            format!(\n-                                \"({}).abs() {} error\",\n-                                lhs - rhs,\n-                                if op == BinOpKind::Eq { '<' } else { '>' }\n-                            ),\n-                            Applicability::HasPlaceholders, // snippet\n-                        );\n-                        db.span_note(expr.span, \"`std::f32::EPSILON` and `std::f64::EPSILON` are available.\");\n+                        if !is_comparing_arrays {\n+                            db.span_suggestion(\n+                                expr.span,\n+                                \"consider comparing them within some error\",\n+                                format!(\n+                                    \"({}).abs() {} error\",\n+                                    lhs - rhs,\n+                                    if op == BinOpKind::Eq { '<' } else { '>' }\n+                                ),\n+                                Applicability::HasPlaceholders, // snippet\n+                            );\n+                        }\n+                        db.note(\"`f32::EPSILON` and `f64::EPSILON` are available for the `error`\");\n                     });\n                 } else if op == BinOpKind::Rem && is_integer_const(cx, right, 1) {\n                     span_lint(cx, MODULO_ONE, expr.span, \"any number modulo 1 will be 0\");\n@@ -441,6 +442,31 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n     }\n }\n \n+fn get_lint_and_message(\n+    is_comparing_constants: bool,\n+    is_comparing_arrays: bool,\n+) -> (&'static rustc_lint::Lint, &'static str) {\n+    if is_comparing_constants {\n+        (\n+            FLOAT_CMP_CONST,\n+            if is_comparing_arrays {\n+                \"strict comparison of `f32` or `f64` constant arrays\"\n+            } else {\n+                \"strict comparison of `f32` or `f64` constant\"\n+            },\n+        )\n+    } else {\n+        (\n+            FLOAT_CMP,\n+            if is_comparing_arrays {\n+                \"strict comparison of `f32` or `f64` arrays\"\n+            } else {\n+                \"strict comparison of `f32` or `f64`\"\n+            },\n+        )\n+    }\n+}\n+\n fn check_nan(cx: &LateContext<'_, '_>, expr: &Expr<'_>, cmp_expr: &Expr<'_>) {\n     if_chain! {\n         if !in_constant(cx, cmp_expr.hir_id);\n@@ -457,7 +483,7 @@ fn check_nan(cx: &LateContext<'_, '_>, expr: &Expr<'_>, cmp_expr: &Expr<'_>) {\n                     cx,\n                     CMP_NAN,\n                     cmp_expr.span,\n-                    \"doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\",\n+                    \"doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\",\n                 );\n             }\n         }\n@@ -476,6 +502,11 @@ fn is_allowed<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) -> boo\n     match constant(cx, cx.tables, expr) {\n         Some((Constant::F32(f), _)) => f == 0.0 || f.is_infinite(),\n         Some((Constant::F64(f), _)) => f == 0.0 || f.is_infinite(),\n+        Some((Constant::Vec(vec), _)) => vec.iter().all(|f| match f {\n+            Constant::F32(f) => *f == 0.0 || (*f).is_infinite(),\n+            Constant::F64(f) => *f == 0.0 || (*f).is_infinite(),\n+            _ => false,\n+        }),\n         _ => false,\n     }\n }\n@@ -500,7 +531,17 @@ fn is_signum(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n }\n \n fn is_float(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n-    matches!(walk_ptrs_ty(cx.tables.expr_ty(expr)).kind, ty::Float(_))\n+    let value = &walk_ptrs_ty(cx.tables.expr_ty(expr)).kind;\n+\n+    if let ty::Array(arr_ty, _) = value {\n+        return matches!(arr_ty.kind, ty::Float(_));\n+    };\n+\n+    matches!(value, ty::Float(_))\n+}\n+\n+fn is_array(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+    matches!(&walk_ptrs_ty(cx.tables.expr_ty(expr)).kind, ty::Array(_, _))\n }\n \n fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr<'_>, other: &Expr<'_>) {"}, {"sha": "b3244453d6baa4e8d75636642b4b728fc12e781d", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -3,7 +3,6 @@ use crate::utils::{\n     span_lint_and_then,\n };\n use if_chain::if_chain;\n-use rustc::lint::in_external_macro;\n use rustc_ast::ast::{\n     BindingMode, Block, Expr, ExprKind, GenericParamKind, Generics, Lit, LitFloatType, LitIntType, LitKind, Mutability,\n     NodeId, Pat, PatKind, StmtKind, UnOp,\n@@ -12,6 +11,7 @@ use rustc_ast::visit::{walk_expr, FnKind, Visitor};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n "}, {"sha": "0b235bdfe3cae6c8413a6e47033279cd8d6431a7", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,9 +1,9 @@\n use crate::utils::{fn_has_unsatisfiable_preds, has_drop, is_entrypoint_fn, span_lint, trait_ref_of_method};\n-use rustc::lint::in_external_macro;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::lint::in_external_macro;\n use rustc_mir::transform::qualify_min_const_fn::is_min_const_fn;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;"}, {"sha": "2eefb6bbaf4245b2ec30d66a2f4ff53738a24f47", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -7,11 +7,11 @@\n \n use crate::utils::span_lint;\n use if_chain::if_chain;\n-use rustc::ty;\n use rustc_ast::ast::{self, MetaItem, MetaItemKind};\n use rustc_ast::attr;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n "}, {"sha": "9fc26047d88804f4625cca0e6d223dfe5ed1d918", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -81,7 +81,7 @@ declare_lint_pass!(MissingInline => [MISSING_INLINE_IN_PUBLIC_ITEMS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item<'_>) {\n-        if rustc::lint::in_external_macro(cx.sess(), it.span) || is_executable(cx) {\n+        if rustc_middle::lint::in_external_macro(cx.sess(), it.span) || is_executable(cx) {\n             return;\n         }\n \n@@ -130,8 +130,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n-        use rustc::ty::{ImplContainer, TraitContainer};\n-        if rustc::lint::in_external_macro(cx.sess(), impl_item.span) || is_executable(cx) {\n+        use rustc_middle::ty::{ImplContainer, TraitContainer};\n+        if rustc_middle::lint::in_external_macro(cx.sess(), impl_item.span) || is_executable(cx) {\n             return;\n         }\n "}, {"sha": "b24d5c1fc8ed15b27a30399c46514c575deacc14", "filename": "clippy_lints/src/modulo_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,9 +1,9 @@\n use crate::consts::{constant, Constant};\n use crate::utils::{sext, span_lint_and_then};\n use if_chain::if_chain;\n-use rustc::ty::{self};\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{self};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::fmt::Display;\n "}, {"sha": "0b9b7e1b8cc1b3e8e951d2f97dc43ff080390638", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{match_def_path, paths, span_lint, trait_ref_of_method, walk_ptrs_ty};\n-use rustc::ty::{Adt, Array, RawPtr, Ref, Slice, Tuple, Ty, TypeAndMut};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{Adt, Array, RawPtr, Ref, Slice, Tuple, Ty, TypeAndMut};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n "}, {"sha": "f7a20a74b85e21d2e04ddb2399c24dff18a233f8", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,10 +1,10 @@\n use crate::utils::{higher, span_lint};\n-use rustc::hir::map::Map;\n-use rustc::lint::in_external_macro;\n-use rustc::ty;\n use rustc_hir as hir;\n use rustc_hir::intravisit;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {"}, {"sha": "e5680482e5bfba5251f8151c5c869f83b2163670", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,8 +1,8 @@\n use crate::utils::span_lint;\n-use rustc::ty::subst::Subst;\n-use rustc::ty::{self, Ty};\n-use rustc_hir::{print, BorrowKind, Expr, ExprKind, Mutability};\n+use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::subst::Subst;\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -34,7 +34,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnecessaryMutPassed {\n                         cx,\n                         arguments,\n                         cx.tables.expr_ty(fn_expr),\n-                        &print::to_string(print::NO_ANN, |s| s.print_qpath(path, false)),\n+                        &rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_qpath(path, false)),\n                     );\n                 }\n             },"}, {"sha": "119e0905ff442f32a5ecec979165c7951cf1681d", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,10 +1,10 @@\n use crate::utils::{is_direct_expn_of, span_lint};\n use if_chain::if_chain;\n-use rustc::hir::map::Map;\n-use rustc::ty;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{BorrowKind, Expr, ExprKind, MatchSource, Mutability, StmtKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n@@ -53,7 +53,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DebugAssertWithMutCall {\n }\n \n //HACK(hellow554): remove this when #4694 is implemented\n-#[allow(clippy::cognitive_complexity)]\n fn extract_call<'a, 'tcx>(cx: &'a LateContext<'a, 'tcx>, e: &'tcx Expr<'_>) -> Option<Span> {\n     if_chain! {\n         if let ExprKind::Block(ref block, _) = e.kind;"}, {"sha": "de8feee76baa45c662faadfacd57f046af471d6f", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -3,10 +3,10 @@\n //! This lint is **warn** by default\n \n use crate::utils::{match_type, paths, span_lint};\n-use rustc::ty::{self, Ty};\n use rustc_ast::ast;\n use rustc_hir::Expr;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {"}, {"sha": "efa77db822dd039215796cfd100dec22baf9160b", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -3,13 +3,15 @@\n //! This lint is **warn** by default\n \n use crate::utils::sugg::Sugg;\n-use crate::utils::{higher, parent_node_is_if_expr, span_lint, span_lint_and_sugg};\n+use crate::utils::{higher, parent_node_is_if_expr, snippet_with_applicability, span_lint, span_lint_and_sugg};\n+use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Block, Expr, ExprKind, StmtKind};\n+use rustc_hir::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n+use rustc_span::Span;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for expressions of the form `if c { true } else {\n@@ -188,6 +190,34 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n     }\n }\n \n+struct ExpressionInfoWithSpan {\n+    one_side_is_unary_not: bool,\n+    left_span: Span,\n+    right_span: Span,\n+}\n+\n+fn is_unary_not(e: &Expr<'_>) -> (bool, Span) {\n+    if_chain! {\n+        if let ExprKind::Unary(unop, operand) = e.kind;\n+        if let UnOp::UnNot = unop;\n+        then {\n+            return (true, operand.span);\n+        }\n+    };\n+    (false, e.span)\n+}\n+\n+fn one_side_is_unary_not<'tcx>(left_side: &'tcx Expr<'_>, right_side: &'tcx Expr<'_>) -> ExpressionInfoWithSpan {\n+    let left = is_unary_not(left_side);\n+    let right = is_unary_not(right_side);\n+\n+    ExpressionInfoWithSpan {\n+        one_side_is_unary_not: left.0 != right.0,\n+        left_span: left.1,\n+        right_span: right.1,\n+    }\n+}\n+\n fn check_comparison<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     e: &'tcx Expr<'_>,\n@@ -199,10 +229,30 @@ fn check_comparison<'a, 'tcx>(\n ) {\n     use self::Expression::{Bool, Other};\n \n-    if let ExprKind::Binary(_, ref left_side, ref right_side) = e.kind {\n+    if let ExprKind::Binary(op, ref left_side, ref right_side) = e.kind {\n         let (l_ty, r_ty) = (cx.tables.expr_ty(left_side), cx.tables.expr_ty(right_side));\n         if l_ty.is_bool() && r_ty.is_bool() {\n             let mut applicability = Applicability::MachineApplicable;\n+\n+            if let BinOpKind::Eq = op.node {\n+                let expression_info = one_side_is_unary_not(&left_side, &right_side);\n+                if expression_info.one_side_is_unary_not {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        BOOL_COMPARISON,\n+                        e.span,\n+                        \"This comparison might be written more concisely\",\n+                        \"try simplifying it as shown\",\n+                        format!(\n+                            \"{} != {}\",\n+                            snippet_with_applicability(cx, expression_info.left_span, \"..\", &mut applicability),\n+                            snippet_with_applicability(cx, expression_info.right_span, \"..\", &mut applicability)\n+                        ),\n+                        applicability,\n+                    )\n+                }\n+            }\n+\n             match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n                 (Bool(true), Other) => left_true.map_or((), |(h, m)| {\n                     suggest_bool_comparison(cx, e, right_side, applicability, m, h)"}, {"sha": "422254bb007d738d3513bafdae81970f64292b68", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -4,11 +4,11 @@\n \n use crate::utils::{snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n-use rustc::ty;\n-use rustc::ty::adjustment::{Adjust, Adjustment};\n use rustc_errors::Applicability;\n use rustc_hir::{BindingAnnotation, BorrowKind, Expr, ExprKind, HirId, Item, Mutability, Pat, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {"}, {"sha": "a76776e45a818c46d20413a990843eec77a1b588", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -4,16 +4,16 @@ use crate::utils::{\n     snippet, snippet_opt, span_lint_and_then,\n };\n use if_chain::if_chain;\n-use rustc::ty::{self, TypeFoldable};\n use rustc_ast::ast::Attribute;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{BindingAnnotation, Body, FnDecl, GenericArg, HirId, ItemKind, Node, PatKind, QPath, TyKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{self, TypeFoldable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{Span, Symbol};\n+use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::misc::can_type_implement_copy;\n@@ -113,8 +113,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n         let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds.to_vec())\n             .filter(|p| !p.is_global())\n-            .filter_map(|pred| {\n-                if let ty::Predicate::Trait(poly_trait_ref, _) = pred {\n+            .filter_map(|obligation| {\n+                if let ty::Predicate::Trait(poly_trait_ref, _) = obligation.predicate {\n                     if poly_trait_ref.def_id() == sized_trait || poly_trait_ref.skip_binder().has_escaping_bound_vars()\n                     {\n                         return None;\n@@ -214,7 +214,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n                         let deref_span = spans_need_deref.get(&canonical_id);\n                         if_chain! {\n-                            if is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\"));\n+                            if is_type_diagnostic_item(cx, ty, sym!(vec_type));\n                             if let Some(clone_spans) =\n                                 get_spans(cx, Some(body.id()), idx, &[(\"clone\", \".to_owned()\")]);\n                             if let TyKind::Path(QPath::Resolved(_, ref path)) = input.kind;"}, {"sha": "4b2586877e562a0f84b6a88308b22ddeeb4d7bf6", "filename": "clippy_lints/src/needless_update.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_update.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::span_lint;\n-use rustc::ty;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {"}, {"sha": "54536ed57d3e9ba9753a7e4152b70fdf94eb797e", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,7 +1,7 @@\n use if_chain::if_chain;\n-use rustc::lint::in_external_macro;\n use rustc_hir::{BinOpKind, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::{self, paths, span_lint};\n@@ -25,13 +25,13 @@ declare_clippy_lint! {\n     ///\n     /// // Bad\n     /// let a = 1.0;\n-    /// let b = std::f64::NAN;\n+    /// let b = f64::NAN;\n     ///\n     /// let _not_less_or_equal = !(a <= b);\n     ///\n     /// // Good\n     /// let a = 1.0;\n-    /// let b = std::f64::NAN;\n+    /// let b = f64::NAN;\n     ///\n     /// let _not_less_or_equal = match a.partial_cmp(&b) {\n     ///     None | Some(Ordering::Greater) => true,"}, {"sha": "9d065005c99d7697d245afc1f4c0fbeeaf2948ce", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -2,13 +2,13 @@ use crate::utils::paths;\n use crate::utils::sugg::DiagnosticBuilderExt;\n use crate::utils::{get_trait_def_id, implements_trait, return_ty, same_tys, span_lint_hir_and_then};\n use if_chain::if_chain;\n-use rustc::lint::in_external_macro;\n-use rustc::ty::{self, Ty};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::HirIdSet;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n \n@@ -100,7 +100,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n         } = item.kind\n         {\n             for assoc_item in items {\n-                if let hir::AssocItemKind::Method { has_self: false } = assoc_item.kind {\n+                if let hir::AssocItemKind::Fn { has_self: false } = assoc_item.kind {\n                     let impl_item = cx.tcx.hir().impl_item(assoc_item.id);\n                     if in_external_macro(cx.sess(), impl_item.span) {\n                         return;"}, {"sha": "744cade461c0abc183367b5c33706690052453c8", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -4,11 +4,11 @@\n \n use std::ptr;\n \n-use rustc::ty::adjustment::Adjust;\n-use rustc::ty::{Ty, TypeFlags};\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{Expr, ExprKind, ImplItem, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass, Lint};\n+use rustc_middle::ty::adjustment::Adjust;\n+use rustc_middle::ty::{Ty, TypeFlags};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{InnerSpan, Span, DUMMY_SP};\n use rustc_typeck::hir_ty_to_ty;"}, {"sha": "949ad0510d34b895a058debd7b1188d48f1ce807", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -6,16 +6,16 @@ use crate::utils::{\n     walk_ptrs_hir_ty,\n };\n use if_chain::if_chain;\n-use rustc::ty;\n use rustc_errors::Applicability;\n use rustc_hir::{\n     BinOpKind, BodyId, Expr, ExprKind, FnDecl, FnRetTy, GenericArg, HirId, ImplItem, ImplItemKind, Item, ItemKind,\n     Lifetime, MutTy, Mutability, Node, PathSegment, QPath, TraitFn, TraitItem, TraitItemKind, Ty, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n-use rustc_span::{MultiSpan, Symbol};\n+use rustc_span::MultiSpan;\n use std::borrow::Cow;\n \n declare_clippy_lint! {\n@@ -153,7 +153,7 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_\n \n     for (idx, (arg, ty)) in decl.inputs.iter().zip(fn_ty.inputs()).enumerate() {\n         if let ty::Ref(_, ty, Mutability::Not) = ty.kind {\n-            if is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\")) {\n+            if is_type_diagnostic_item(cx, ty, sym!(vec_type)) {\n                 let mut ty_snippet = None;\n                 if_chain! {\n                     if let TyKind::Path(QPath::Resolved(_, ref path)) = walk_ptrs_hir_ty(arg).kind;"}, {"sha": "28c1d97530938b2a37f9c0c99f0f03fa85241ede", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -5,10 +5,10 @@ use rustc_hir::{def, BindingAnnotation, Block, Expr, ExprKind, MatchSource, PatK\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::paths::{OPTION, OPTION_NONE};\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    higher, match_def_path, match_qpath, match_type, snippet_with_applicability, span_lint_and_sugg, SpanlessEq,\n+    higher, is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet_with_applicability,\n+    span_lint_and_sugg, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -141,7 +141,7 @@ impl QuestionMark {\n     fn is_option(cx: &LateContext<'_, '_>, expression: &Expr<'_>) -> bool {\n         let expr_ty = cx.tables.expr_ty(expression);\n \n-        match_type(cx, expr_ty, &OPTION)\n+        is_type_diagnostic_item(cx, expr_ty, sym!(option_type))\n     }\n \n     fn expression_returns_none(cx: &LateContext<'_, '_>, expression: &Expr<'_>) -> bool {\n@@ -158,7 +158,7 @@ impl QuestionMark {\n                 if let Res::Def(DefKind::Ctor(def::CtorOf::Variant, def::CtorKind::Const), def_id) =\n                     cx.tables.qpath_res(qp, expression.hir_id)\n                 {\n-                    return match_def_path(cx, def_id, &OPTION_NONE);\n+                    return match_def_path(cx, def_id, &paths::OPTION_NONE);\n                 }\n \n                 false"}, {"sha": "aedbafd408b0ef091123988216520113ce2e37d1", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -3,19 +3,19 @@ use crate::utils::{\n     span_lint_hir_and_then, walk_ptrs_ty_depth,\n };\n use if_chain::if_chain;\n-use rustc::mir::{\n-    self, traversal,\n-    visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor as _},\n-};\n-use rustc::ty::{self, fold::TypeVisitor, Ty};\n use rustc_data_structures::{fx::FxHashMap, transitive_relation::TransitiveRelation};\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{def_id, Body, FnDecl, HirId};\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_mir::dataflow::generic::{Analysis, AnalysisDomain, GenKill, GenKillAnalysis, ResultsCursor};\n+use rustc_middle::mir::{\n+    self, traversal,\n+    visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor as _},\n+};\n+use rustc_middle::ty::{self, fold::TypeVisitor, Ty};\n use rustc_mir::dataflow::BottomValue;\n+use rustc_mir::dataflow::{Analysis, AnalysisDomain, GenKill, GenKillAnalysis, ResultsCursor};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n use std::convert::TryFrom;\n@@ -80,20 +80,20 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n         let def_id = cx.tcx.hir().body_owner_def_id(body.id());\n \n         // Building MIR for `fn`s with unsatisfiable preds results in ICE.\n-        if fn_has_unsatisfiable_preds(cx, def_id) {\n+        if fn_has_unsatisfiable_preds(cx, def_id.to_def_id()) {\n             return;\n         }\n \n-        let mir = cx.tcx.optimized_mir(def_id);\n+        let mir = cx.tcx.optimized_mir(def_id.to_def_id());\n         let mir_read_only = mir.unwrap_read_only();\n \n         let maybe_storage_live_result = MaybeStorageLive\n-            .into_engine(cx.tcx, mir, def_id)\n+            .into_engine(cx.tcx, mir, def_id.to_def_id())\n             .iterate_to_fixpoint()\n             .into_results_cursor(mir);\n         let mut possible_borrower = {\n             let mut vis = PossibleBorrowerVisitor::new(cx, mir);\n-            vis.visit_body(mir_read_only);\n+            vis.visit_body(&mir_read_only);\n             vis.into_map(cx, maybe_storage_live_result)\n         };\n \n@@ -335,22 +335,27 @@ fn base_local_and_movability<'tcx>(\n     mir: &mir::Body<'tcx>,\n     place: mir::Place<'tcx>,\n ) -> Option<(mir::Local, CannotMoveOut)> {\n-    use rustc::mir::PlaceRef;\n+    use rustc_middle::mir::PlaceRef;\n \n     // Dereference. You cannot move things out from a borrowed value.\n     let mut deref = false;\n     // Accessing a field of an ADT that has `Drop`. Moving the field out will cause E0509.\n     let mut field = false;\n+    // If projection is a slice index then clone can be removed only if the\n+    // underlying type implements Copy\n+    let mut slice = false;\n \n     let PlaceRef { local, mut projection } = place.as_ref();\n     while let [base @ .., elem] = projection {\n         projection = base;\n         deref |= matches!(elem, mir::ProjectionElem::Deref);\n         field |= matches!(elem, mir::ProjectionElem::Field(..))\n             && has_drop(cx, mir::Place::ty_from(local, projection, &mir.local_decls, cx.tcx).ty);\n+        slice |= matches!(elem, mir::ProjectionElem::Index(..))\n+            && !is_copy(cx, mir::Place::ty_from(local, projection, &mir.local_decls, cx.tcx).ty);\n     }\n \n-    Some((local, deref || field))\n+    Some((local, deref || field || slice))\n }\n \n struct LocalUseVisitor {\n@@ -437,7 +442,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeStorageLive {\n         _block: mir::BasicBlock,\n         _func: &mir::Operand<'tcx>,\n         _args: &[mir::Operand<'tcx>],\n-        _return_place: &mir::Place<'tcx>,\n+        _return_place: mir::Place<'tcx>,\n     ) {\n         // Nothing to do when a call returns successfully\n     }\n@@ -556,7 +561,7 @@ impl TypeVisitor<'_> for ContainsRegion {\n }\n \n fn rvalue_locals(rvalue: &mir::Rvalue<'_>, mut visit: impl FnMut(mir::Local)) {\n-    use rustc::mir::Rvalue::{Aggregate, BinaryOp, Cast, CheckedBinaryOp, Repeat, UnaryOp, Use};\n+    use rustc_middle::mir::Rvalue::{Aggregate, BinaryOp, Cast, CheckedBinaryOp, Repeat, UnaryOp, Use};\n \n     let mut visit_op = |op: &mir::Operand<'_>| match op {\n         mir::Operand::Copy(p) | mir::Operand::Move(p) => visit(p.local),"}, {"sha": "aca1ebbd5080fbf281625d0f495626426b35cb9e", "filename": "clippy_lints/src/replace_consts.rs", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/680cc2f25848721eca3a2332c48b13c02e027dbc/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680cc2f25848721eca3a2332c48b13c02e027dbc/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=680cc2f25848721eca3a2332c48b13c02e027dbc", "patch": "@@ -1,103 +0,0 @@\n-use crate::utils::{match_def_path, span_lint_and_sugg};\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::{Expr, ExprKind, Node};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of standard library\n-    /// `const`s that could be replaced by `const fn`s.\n-    ///\n-    /// **Why is this bad?** `const fn`s exist\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    /// let x = std::u32::MIN;\n-    /// let y = std::u32::MAX;\n-    /// ```\n-    ///\n-    /// Could be written:\n-    ///\n-    /// ```rust\n-    /// let x = u32::min_value();\n-    /// let y = u32::max_value();\n-    /// ```\n-    pub REPLACE_CONSTS,\n-    pedantic,\n-    \"Lint usages of standard library `const`s that could be replaced by `const fn`s\"\n-}\n-\n-declare_lint_pass!(ReplaceConsts => [REPLACE_CONSTS]);\n-\n-fn in_pattern(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n-    let map = &cx.tcx.hir();\n-    let parent_id = map.get_parent_node(expr.hir_id);\n-\n-    if let Some(node) = map.find(parent_id) {\n-        if let Node::Pat(_) = node {\n-            return true;\n-        }\n-    }\n-\n-    false\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ReplaceConsts {\n-    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if let ExprKind::Path(ref qp) = expr.kind;\n-            if let Res::Def(DefKind::Const, def_id) = cx.tables.qpath_res(qp, expr.hir_id);\n-            // Do not lint within patterns as function calls are disallowed in them\n-            if !in_pattern(cx, expr);\n-            then {\n-                for &(ref const_path, repl_snip) in &REPLACEMENTS {\n-                    if match_def_path(cx, def_id, const_path) {\n-                        span_lint_and_sugg(\n-                            cx,\n-                            REPLACE_CONSTS,\n-                            expr.span,\n-                            &format!(\"using `{}`\", const_path.last().expect(\"empty path\")),\n-                            \"try this\",\n-                            repl_snip.to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                        return;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-const REPLACEMENTS: [([&str; 3], &str); 24] = [\n-    // Min\n-    ([\"core\", \"isize\", \"MIN\"], \"isize::min_value()\"),\n-    ([\"core\", \"i8\", \"MIN\"], \"i8::min_value()\"),\n-    ([\"core\", \"i16\", \"MIN\"], \"i16::min_value()\"),\n-    ([\"core\", \"i32\", \"MIN\"], \"i32::min_value()\"),\n-    ([\"core\", \"i64\", \"MIN\"], \"i64::min_value()\"),\n-    ([\"core\", \"i128\", \"MIN\"], \"i128::min_value()\"),\n-    ([\"core\", \"usize\", \"MIN\"], \"usize::min_value()\"),\n-    ([\"core\", \"u8\", \"MIN\"], \"u8::min_value()\"),\n-    ([\"core\", \"u16\", \"MIN\"], \"u16::min_value()\"),\n-    ([\"core\", \"u32\", \"MIN\"], \"u32::min_value()\"),\n-    ([\"core\", \"u64\", \"MIN\"], \"u64::min_value()\"),\n-    ([\"core\", \"u128\", \"MIN\"], \"u128::min_value()\"),\n-    // Max\n-    ([\"core\", \"isize\", \"MAX\"], \"isize::max_value()\"),\n-    ([\"core\", \"i8\", \"MAX\"], \"i8::max_value()\"),\n-    ([\"core\", \"i16\", \"MAX\"], \"i16::max_value()\"),\n-    ([\"core\", \"i32\", \"MAX\"], \"i32::max_value()\"),\n-    ([\"core\", \"i64\", \"MAX\"], \"i64::max_value()\"),\n-    ([\"core\", \"i128\", \"MAX\"], \"i128::max_value()\"),\n-    ([\"core\", \"usize\", \"MAX\"], \"usize::max_value()\"),\n-    ([\"core\", \"u8\", \"MAX\"], \"u8::max_value()\"),\n-    ([\"core\", \"u16\", \"MAX\"], \"u16::max_value()\"),\n-    ([\"core\", \"u32\", \"MAX\"], \"u32::max_value()\"),\n-    ([\"core\", \"u64\", \"MAX\"], \"u64::max_value()\"),\n-    ([\"core\", \"u128\", \"MAX\"], \"u128::max_value()\"),\n-];"}, {"sha": "ef1a1d7ac297308db06ab049b1e23a4799b6b3bf", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,9 +1,9 @@\n use if_chain::if_chain;\n-use rustc::lint::in_external_macro;\n use rustc_ast::ast;\n use rustc_ast::visit::FnKind;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::BytePos;"}, {"sha": "9b5c3306f3a971ae80fe8d4db7bc714013f62a85", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,13 +1,13 @@\n use crate::reexport::Name;\n use crate::utils::{contains_name, higher, iter_input_pats, snippet, span_lint_and_then};\n-use rustc::lint::in_external_macro;\n-use rustc::ty;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n     Block, Body, Expr, ExprKind, FnDecl, Guard, HirId, Local, MutTy, Pat, PatKind, Path, QPath, StmtKind, Ty, TyKind,\n     UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n "}, {"sha": "b308692b849762f177d377c8101dcf6f499c3782", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,12 +1,12 @@\n use crate::utils::sugg::Sugg;\n use crate::utils::{get_enclosing_block, match_qpath, span_lint_and_then, SpanlessEq};\n use if_chain::if_chain;\n-use rustc::hir::map::Map;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_block, walk_expr, walk_stmt, NestedVisitorMap, Visitor};\n use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, HirId, PatKind, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, Lint};\n+use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Symbol;\n "}, {"sha": "bb41e964d13494015d233f3468720720fc21bbe0", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,7 +1,7 @@\n-use rustc::lint::in_external_macro;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n "}, {"sha": "f1e223d9a48c65c95268893cac55b88854afcb68", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,9 +1,9 @@\n use crate::utils::{get_trait_def_id, span_lint, trait_ref_of_method};\n use if_chain::if_chain;\n-use rustc::hir::map::Map;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -54,7 +54,7 @@ declare_lint_pass!(SuspiciousImpl => [SUSPICIOUS_ARITHMETIC_IMPL, SUSPICIOUS_OP_\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SuspiciousImpl {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if let hir::ExprKind::Binary(binop, _, _) = expr.kind {\n+        if let hir::ExprKind::Binary(binop, _, _) | hir::ExprKind::AssignOp(binop, ..) = expr.kind {\n             match binop.node {\n                 hir::BinOpKind::Eq\n                 | hir::BinOpKind::Lt\n@@ -65,14 +65,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SuspiciousImpl {\n                 _ => {},\n             }\n             // Check if the binary expression is part of another bi/unary expression\n-            // as a child node\n+            // or operator assignment as a child node\n             let mut parent_expr = cx.tcx.hir().get_parent_node(expr.hir_id);\n             while parent_expr != hir::CRATE_HIR_ID {\n                 if let hir::Node::Expr(e) = cx.tcx.hir().get(parent_expr) {\n                     match e.kind {\n                         hir::ExprKind::Binary(..)\n                         | hir::ExprKind::Unary(hir::UnOp::UnNot, _)\n-                        | hir::ExprKind::Unary(hir::UnOp::UnNeg, _) => return,\n+                        | hir::ExprKind::Unary(hir::UnOp::UnNeg, _)\n+                        | hir::ExprKind::AssignOp(..) => return,\n                         _ => {},\n                     }\n                 }\n@@ -191,7 +192,8 @@ impl<'a, 'tcx> Visitor<'tcx> for BinaryExprVisitor {\n         match expr.kind {\n             hir::ExprKind::Binary(..)\n             | hir::ExprKind::Unary(hir::UnOp::UnNot, _)\n-            | hir::ExprKind::Unary(hir::UnOp::UnNeg, _) => self.in_binary_expr = true,\n+            | hir::ExprKind::Unary(hir::UnOp::UnNeg, _)\n+            | hir::ExprKind::AssignOp(..) => self.in_binary_expr = true,\n             _ => {},\n         }\n "}, {"sha": "94d8296a9bedf57f56da6313825006188fbbf57e", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -4,12 +4,11 @@ use crate::utils::{\n     span_lint_and_then, walk_ptrs_ty, SpanlessEq,\n };\n use if_chain::if_chain;\n-use rustc::ty;\n use rustc_errors::Applicability;\n use rustc_hir::{Block, Expr, ExprKind, PatKind, QPath, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::Symbol;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for manual swapping.\n@@ -199,7 +198,7 @@ fn check_for_slice<'a>(cx: &LateContext<'_, '_>, lhs1: &'a Expr<'_>, lhs2: &'a E\n \n                 if matches!(ty.kind, ty::Slice(_))\n                     || matches!(ty.kind, ty::Array(_, _))\n-                    || is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\"))\n+                    || is_type_diagnostic_item(cx, ty, sym!(vec_type))\n                     || match_type(cx, ty, &paths::VEC_DEQUE)\n                 {\n                     return Slice::Swappable(lhs1, idx1, idx2);"}, {"sha": "c6302ca03d918ddee1fbc9ad93a94ee6fc8d79ac", "filename": "clippy_lints/src/to_digit_is_some.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_digit_is_some.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,9 +1,9 @@\n use crate::utils::{match_def_path, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n-use rustc::ty;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {"}, {"sha": "075df19a71e289aabcda714b1d0b782ae46108a0", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,6 @@\n-use crate::utils::{in_macro, snippet, span_lint_and_help, SpanlessHash};\n+use crate::utils::{in_macro, snippet, snippet_with_applicability, span_lint_and_help, SpanlessHash};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::Applicability;\n use rustc_hir::{GenericBound, Generics, WherePredicate};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -41,6 +42,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n             hasher.finish()\n         };\n         let mut map = FxHashMap::default();\n+        let mut applicability = Applicability::MaybeIncorrect;\n         for bound in gen.where_clause.predicates {\n             if let WherePredicate::BoundPredicate(ref p) = bound {\n                 let h = hash(&p.bounded_ty);\n@@ -52,13 +54,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n                     for b in v.iter() {\n                         if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n                             let path = &poly_trait_ref.trait_ref.path;\n-                            hint_string.push_str(&format!(\" {} +\", path));\n+                            hint_string.push_str(&format!(\n+                                \" {} +\",\n+                                snippet_with_applicability(cx, path.span, \"..\", &mut applicability)\n+                            ));\n                         }\n                     }\n                     for b in p.bounds.iter() {\n                         if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n                             let path = &poly_trait_ref.trait_ref.path;\n-                            hint_string.push_str(&format!(\" {} +\", path));\n+                            hint_string.push_str(&format!(\n+                                \" {} +\",\n+                                snippet_with_applicability(cx, path.span, \"..\", &mut applicability)\n+                            ));\n                         }\n                     }\n                     hint_string.truncate(hint_string.len() - 2);"}, {"sha": "3220bd9b9e2de81568d384efaecc96f599b1f1cb", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -2,11 +2,11 @@ use crate::utils::{\n     is_normalizable, last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then, sugg,\n };\n use if_chain::if_chain;\n-use rustc::ty::{self, Ty};\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, GenericArg, Mutability, QPath, TyKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::borrow::Cow;\n "}, {"sha": "1d0332c580500f73433486c69fe798ee57cd07b5", "filename": "clippy_lints/src/transmuting_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmuting_null.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,10 +1,10 @@\n use crate::consts::{constant_context, Constant};\n use crate::utils::{match_qpath, paths, span_lint};\n use if_chain::if_chain;\n-use rustc::lint::in_external_macro;\n use rustc_ast::ast::LitKind;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {"}, {"sha": "2c101220c5d6897f943b0799d615993283d2194e", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -2,12 +2,12 @@ use std::cmp;\n \n use crate::utils::{is_copy, is_self_ty, snippet, span_lint_and_sugg};\n use if_chain::if_chain;\n-use rustc::ty;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId, ItemKind, MutTy, Mutability, Node};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::config::Config as SessionConfig;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -49,7 +49,7 @@ declare_clippy_lint! {\n     /// fn foo(v: u32) {}\n     /// ```\n     pub TRIVIALLY_COPY_PASS_BY_REF,\n-    perf,\n+    pedantic,\n     \"functions taking small copyable arguments by reference\"\n }\n "}, {"sha": "7018fa6804ba71949c7892daf05d3c21ddbe4168", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,10 +1,10 @@\n use crate::utils::{match_qpath, paths, snippet, snippet_with_macro_callsite, span_lint_and_sugg};\n use if_chain::if_chain;\n-use rustc::lint::in_external_macro;\n-use rustc::ty::Ty;\n use rustc_errors::Applicability;\n use rustc_hir::{Arm, Expr, ExprKind, MatchSource};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::Ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {"}, {"sha": "14f4ea154ebbf9a0c0a2cc8c7d8fbbed06ee45d0", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 127, "deletions": 22, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -5,10 +5,6 @@ use std::cmp::Ordering;\n use std::collections::BTreeMap;\n \n use if_chain::if_chain;\n-use rustc::hir::map::Map;\n-use rustc::lint::in_external_macro;\n-use rustc::ty::layout::LayoutOf;\n-use rustc::ty::{self, InferTy, Ty, TyCtxt, TypeckTables};\n use rustc_ast::ast::{FloatTy, IntTy, LitFloatType, LitIntType, LitKind, UintTy};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -19,10 +15,14 @@ use rustc_hir::{\n     TraitItem, TraitItemKind, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::{self, InferTy, Ty, TyCtxt, TypeckTables};\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::sym;\n+use rustc_target::abi::LayoutOf;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::hir_ty_to_ty;\n \n@@ -99,16 +99,33 @@ declare_clippy_lint! {\n     /// represents an optional optional value which is logically the same thing as an optional\n     /// value but has an unneeded extra level of wrapping.\n     ///\n+    /// If you have a case where `Some(Some(_))`, `Some(None)` and `None` are distinct cases,\n+    /// consider a custom `enum` instead, with clear names for each case.\n+    ///\n     /// **Known problems:** None.\n     ///\n     /// **Example**\n     /// ```rust\n-    /// fn x() -> Option<Option<u32>> {\n+    /// fn get_data() -> Option<Option<u32>> {\n     ///     None\n     /// }\n     /// ```\n+    ///\n+    /// Better:\n+    ///\n+    /// ```rust\n+    /// pub enum Contents {\n+    ///     Data(Vec<u8>), // Was Some(Some(Vec<u8>))\n+    ///     NotYetFetched, // Was Some(None)\n+    ///     None,          // Was None\n+    /// }\n+    ///\n+    /// fn get_data() -> Contents {\n+    ///     Contents::None\n+    /// }\n+    /// ```\n     pub OPTION_OPTION,\n-    complexity,\n+    pedantic,\n     \"usage of `Option<Option<T>>`\"\n }\n \n@@ -171,11 +188,35 @@ declare_clippy_lint! {\n     \"a borrow of a boxed type\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for use of redundant allocations anywhere in the code.\n+    ///\n+    /// **Why is this bad?** Expressions such as `Rc<&T>`, `Rc<Rc<T>>`, `Rc<Box<T>>`, `Box<&T>`\n+    /// add an unnecessary level of indirection.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// # use std::rc::Rc;\n+    /// fn foo(bar: Rc<&usize>) {}\n+    /// ```\n+    ///\n+    /// Better:\n+    ///\n+    /// ```rust\n+    /// fn foo(bar: &usize) {}\n+    /// ```\n+    pub REDUNDANT_ALLOCATION,\n+    perf,\n+    \"redundant allocation\"\n+}\n+\n pub struct Types {\n     vec_box_size_threshold: u64,\n }\n \n-impl_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX]);\n+impl_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Types {\n     fn check_fn(\n@@ -217,7 +258,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Types {\n }\n \n /// Checks if `qpath` has last segment with type parameter matching `path`\n-fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath<'_>, path: &[&str]) -> bool {\n+fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath<'_>, path: &[&str]) -> Option<Span> {\n     let last = last_path_segment(qpath);\n     if_chain! {\n         if let Some(ref params) = last.args;\n@@ -230,10 +271,27 @@ fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath<'_>, path: &[&st\n         if let Some(did) = qpath_res(cx, qpath, ty.hir_id).opt_def_id();\n         if match_def_path(cx, did, path);\n         then {\n-            return true;\n+            return Some(ty.span);\n         }\n     }\n-    false\n+    None\n+}\n+\n+fn match_borrows_parameter(_cx: &LateContext<'_, '_>, qpath: &QPath<'_>) -> Option<Span> {\n+    let last = last_path_segment(qpath);\n+    if_chain! {\n+        if let Some(ref params) = last.args;\n+        if !params.parenthesized;\n+        if let Some(ty) = params.args.iter().find_map(|arg| match arg {\n+            GenericArg::Type(ty) => Some(ty),\n+            _ => None,\n+        });\n+        if let TyKind::Rptr(..) = ty.kind;\n+        then {\n+            return Some(ty.span);\n+        }\n+    }\n+    None\n }\n \n impl Types {\n@@ -267,7 +325,19 @@ impl Types {\n                 let res = qpath_res(cx, qpath, hir_id);\n                 if let Some(def_id) = res.opt_def_id() {\n                     if Some(def_id) == cx.tcx.lang_items().owned_box() {\n-                        if match_type_parameter(cx, qpath, &paths::VEC) {\n+                        if let Some(span) = match_borrows_parameter(cx, qpath) {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                REDUNDANT_ALLOCATION,\n+                                hir_ty.span,\n+                                \"usage of `Box<&T>`\",\n+                                \"try\",\n+                                snippet(cx, span, \"..\").to_string(),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return; // don't recurse into the type\n+                        }\n+                        if match_type_parameter(cx, qpath, &paths::VEC).is_some() {\n                             span_lint_and_help(\n                                 cx,\n                                 BOX_VEC,\n@@ -277,7 +347,44 @@ impl Types {\n                             );\n                             return; // don't recurse into the type\n                         }\n-                    } else if cx.tcx.is_diagnostic_item(Symbol::intern(\"vec_type\"), def_id) {\n+                    } else if cx.tcx.is_diagnostic_item(sym::Rc, def_id) {\n+                        if let Some(span) = match_type_parameter(cx, qpath, &paths::RC) {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                REDUNDANT_ALLOCATION,\n+                                hir_ty.span,\n+                                \"usage of `Rc<Rc<T>>`\",\n+                                \"try\",\n+                                snippet(cx, span, \"..\").to_string(),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return; // don't recurse into the type\n+                        }\n+                        if let Some(span) = match_type_parameter(cx, qpath, &paths::BOX) {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                REDUNDANT_ALLOCATION,\n+                                hir_ty.span,\n+                                \"usage of `Rc<Box<T>>`\",\n+                                \"try\",\n+                                snippet(cx, span, \"..\").to_string(),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return; // don't recurse into the type\n+                        }\n+                        if let Some(span) = match_borrows_parameter(cx, qpath) {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                REDUNDANT_ALLOCATION,\n+                                hir_ty.span,\n+                                \"usage of `Rc<&T>`\",\n+                                \"try\",\n+                                snippet(cx, span, \"..\").to_string(),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return; // don't recurse into the type\n+                        }\n+                    } else if cx.tcx.is_diagnostic_item(sym!(vec_type), def_id) {\n                         if_chain! {\n                             // Get the _ part of Vec<_>\n                             if let Some(ref last) = last_path_segment(qpath).args;\n@@ -313,8 +420,8 @@ impl Types {\n                                 return; // don't recurse into the type\n                             }\n                         }\n-                    } else if match_def_path(cx, def_id, &paths::OPTION) {\n-                        if match_type_parameter(cx, qpath, &paths::OPTION) {\n+                    } else if cx.tcx.is_diagnostic_item(sym!(option_type), def_id) {\n+                        if match_type_parameter(cx, qpath, &paths::OPTION).is_some() {\n                             span_lint(\n                                 cx,\n                                 OPTION_OPTION,\n@@ -485,7 +592,7 @@ declare_clippy_lint! {\n     /// };\n     /// ```\n     pub LET_UNIT_VALUE,\n-    style,\n+    pedantic,\n     \"creating a `let` binding to a value of unit type, which usually can't be used afterwards\"\n }\n \n@@ -729,7 +836,7 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// let x = std::u64::MAX;\n+    /// let x = u64::MAX;\n     /// x as f64;\n     /// ```\n     pub CAST_PRECISION_LOSS,\n@@ -796,7 +903,7 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// std::u32::MAX as i32; // will yield a value of `-1`\n+    /// u32::MAX as i32; // will yield a value of `-1`\n     /// ```\n     pub CAST_POSSIBLE_WRAP,\n     pedantic,\n@@ -1644,7 +1751,7 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let vec: Vec<isize> = Vec::new();\n     /// if vec.len() <= 0 {}\n-    /// if 100 > std::i32::MAX {}\n+    /// if 100 > i32::MAX {}\n     /// ```\n     pub ABSURD_EXTREME_COMPARISONS,\n     correctness,\n@@ -1865,8 +1972,6 @@ impl Ord for FullInt {\n }\n \n fn numeric_cast_precast_bounds<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr<'_>) -> Option<(FullInt, FullInt)> {\n-    use std::{i128, i16, i32, i64, i8, isize, u128, u16, u32, u64, u8, usize};\n-\n     if let ExprKind::Cast(ref cast_exp, _) = expr.kind {\n         let pre_cast_ty = cx.tables.expr_ty(cast_exp);\n         let cast_ty = cx.tables.expr_ty(expr);\n@@ -2064,7 +2169,7 @@ declare_clippy_lint! {\n     /// pub fn foo<S: BuildHasher>(map: &mut HashMap<i32, i32, S>) { }\n     /// ```\n     pub IMPLICIT_HASHER,\n-    style,\n+    pedantic,\n     \"missing generalization over different hashers\"\n }\n "}, {"sha": "b6473fc594eec3bbc80d8ac2d678ef28e1d38e19", "filename": "clippy_lints/src/unnamed_address.rs", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Funnamed_address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Funnamed_address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnamed_address.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -0,0 +1,133 @@\n+use crate::utils::{match_def_path, paths, span_lint, span_lint_and_help};\n+use if_chain::if_chain;\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for comparisons with an address of a function item.\n+    ///\n+    /// **Why is this bad?** Function item address is not guaranteed to be unique and could vary\n+    /// between different code generation units. Furthermore different function items could have\n+    /// the same address after being merged together.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// type F = fn();\n+    /// fn a() {}\n+    /// let f: F = a;\n+    /// if f == a {\n+    ///     // ...\n+    /// }\n+    /// ```\n+    pub FN_ADDRESS_COMPARISONS,\n+    correctness,\n+    \"comparison with an address of a function item\"\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for comparisons with an address of a trait vtable.\n+    ///\n+    /// **Why is this bad?** Comparing trait objects pointers compares an vtable addresses which\n+    /// are not guaranteed to be unique and could vary between different code generation units.\n+    /// Furthermore vtables for different types could have the same address after being merged\n+    /// together.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,ignore\n+    /// let a: Rc<dyn Trait> = ...\n+    /// let b: Rc<dyn Trait> = ...\n+    /// if Rc::ptr_eq(&a, &b) {\n+    ///     ...\n+    /// }\n+    /// ```\n+    pub VTABLE_ADDRESS_COMPARISONS,\n+    correctness,\n+    \"comparison with an address of a trait vtable\"\n+}\n+\n+declare_lint_pass!(UnnamedAddress => [FN_ADDRESS_COMPARISONS, VTABLE_ADDRESS_COMPARISONS]);\n+\n+impl LateLintPass<'_, '_> for UnnamedAddress {\n+    fn check_expr(&mut self, cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n+        fn is_comparison(binop: BinOpKind) -> bool {\n+            match binop {\n+                BinOpKind::Eq | BinOpKind::Lt | BinOpKind::Le | BinOpKind::Ne | BinOpKind::Ge | BinOpKind::Gt => true,\n+                _ => false,\n+            }\n+        }\n+\n+        fn is_trait_ptr(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+            match cx.tables.expr_ty_adjusted(expr).kind {\n+                ty::RawPtr(ty::TypeAndMut { ty, .. }) => ty.is_trait(),\n+                _ => false,\n+            }\n+        }\n+\n+        fn is_fn_def(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+            if let ty::FnDef(..) = cx.tables.expr_ty(expr).kind {\n+                true\n+            } else {\n+                false\n+            }\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::Binary(binop, ref left, ref right) = expr.kind;\n+            if is_comparison(binop.node);\n+            if is_trait_ptr(cx, left) && is_trait_ptr(cx, right);\n+            then {\n+                span_lint_and_help(\n+                    cx,\n+                    VTABLE_ADDRESS_COMPARISONS,\n+                    expr.span,\n+                    \"comparing trait object pointers compares a non-unique vtable address\",\n+                    \"consider extracting and comparing data pointers only\",\n+                );\n+            }\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::Call(ref func, [ref _left, ref _right]) = expr.kind;\n+            if let ExprKind::Path(ref func_qpath) = func.kind;\n+            if let Some(def_id) = cx.tables.qpath_res(func_qpath, func.hir_id).opt_def_id();\n+            if match_def_path(cx, def_id, &paths::PTR_EQ) ||\n+                match_def_path(cx, def_id, &paths::RC_PTR_EQ) ||\n+                match_def_path(cx, def_id, &paths::ARC_PTR_EQ);\n+            let ty_param = cx.tables.node_substs(func.hir_id).type_at(0);\n+            if ty_param.is_trait();\n+            then {\n+                span_lint_and_help(\n+                    cx,\n+                    VTABLE_ADDRESS_COMPARISONS,\n+                    expr.span,\n+                    \"comparing trait object pointers compares a non-unique vtable address\",\n+                    \"consider extracting and comparing data pointers only\",\n+                );\n+            }\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::Binary(binop, ref left, ref right) = expr.kind;\n+            if is_comparison(binop.node);\n+            if cx.tables.expr_ty_adjusted(left).is_fn_ptr() &&\n+                cx.tables.expr_ty_adjusted(right).is_fn_ptr();\n+            if is_fn_def(cx, left) || is_fn_def(cx, right);\n+            then {\n+                span_lint(\n+                    cx,\n+                    FN_ADDRESS_COMPARISONS,\n+                    expr.span,\n+                    \"comparing with a non-unique address of a function item\",\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "4483059e9eca409074d5a006b7513e9db8c21fca", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 30, "deletions": 39, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,9 +1,9 @@\n use if_chain::if_chain;\n-use rustc::hir::map::Map;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n-use rustc_hir::{AssocItemKind, HirId, ImplItem, ImplItemKind, ImplItemRef, ItemKind, Path};\n+use rustc_hir::{HirId, ImplItem, ImplItemKind, ItemKind, Path};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::span_lint_and_help;\n@@ -45,45 +45,36 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedSelf {\n             return;\n         }\n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id);\n-        let item = cx.tcx.hir().expect_item(parent);\n-        if let ItemKind::Impl {\n-            of_trait: None,\n-            items: impl_item_refs,\n-            ..\n-        } = item.kind\n-        {\n-            for impl_item_ref in impl_item_refs {\n-                if_chain! {\n-                    if let ImplItemRef {\n-                        kind: AssocItemKind::Method { has_self: true },\n-                        ..\n-                    } = impl_item_ref;\n-                    if let ImplItemKind::Fn(_, body_id) = &impl_item.kind;\n-                    let body = cx.tcx.hir().body(*body_id);\n-                    if !body.params.is_empty();\n-                    then {\n-                        let self_param = &body.params[0];\n-                        let self_hir_id = self_param.pat.hir_id;\n-                        let mut visitor = UnusedSelfVisitor {\n-                            cx,\n-                            uses_self: false,\n-                            self_hir_id: &self_hir_id,\n-                        };\n-                        visitor.visit_body(body);\n-                        if !visitor.uses_self {\n-                            span_lint_and_help(\n-                                cx,\n-                                UNUSED_SELF,\n-                                self_param.span,\n-                                \"unused `self` argument\",\n-                                \"consider refactoring to a associated function\",\n-                            );\n-                            return;\n-                        }\n-                    }\n+        let parent_item = cx.tcx.hir().expect_item(parent);\n+        let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n+        let assoc_item = cx.tcx.associated_item(def_id);\n+        if_chain! {\n+            if let ItemKind::Impl { of_trait: None, .. } = parent_item.kind;\n+            if assoc_item.fn_has_self_parameter;\n+            if let ImplItemKind::Fn(.., body_id) = &impl_item.kind;\n+            let body = cx.tcx.hir().body(*body_id);\n+            if !body.params.is_empty();\n+            then {\n+                let self_param = &body.params[0];\n+                let self_hir_id = self_param.pat.hir_id;\n+                let mut visitor = UnusedSelfVisitor {\n+                    cx,\n+                    uses_self: false,\n+                    self_hir_id: &self_hir_id,\n+                };\n+                visitor.visit_body(body);\n+                if !visitor.uses_self {\n+                    span_lint_and_help(\n+                        cx,\n+                        UNUSED_SELF,\n+                        self_param.span,\n+                        \"unused `self` argument\",\n+                        \"consider refactoring to a associated function\",\n+                    );\n+                    return;\n                 }\n             }\n-        };\n+        }\n     }\n }\n "}, {"sha": "98dc29507c2e98e6b050da07c81e98eebb0db81a", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,10 +1,10 @@\n-use crate::utils::{higher::if_block, match_type, paths, span_lint_and_then, usage::is_potentially_mutated};\n+use crate::utils::{higher::if_block, is_type_diagnostic_item, span_lint_and_then, usage::is_potentially_mutated};\n use if_chain::if_chain;\n-use rustc::hir::map::Map;\n-use rustc::lint::in_external_macro;\n use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{BinOpKind, Body, Expr, ExprKind, FnDecl, HirId, Path, QPath, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n@@ -100,7 +100,7 @@ fn collect_unwrap_info<'a, 'tcx>(\n             if let ExprKind::MethodCall(method_name, _, args) = &expr.kind;\n             if let ExprKind::Path(QPath::Resolved(None, path)) = &args[0].kind;\n             let ty = cx.tables.expr_ty(&args[0]);\n-            if match_type(cx, ty, &paths::OPTION) || match_type(cx, ty, &paths::RESULT);\n+            if is_type_diagnostic_item(cx, ty, sym!(option_type)) || is_type_diagnostic_item(cx, ty, sym!(result_type));\n             let name = method_name.ident.as_str();\n             if [\"is_some\", \"is_none\", \"is_ok\", \"is_err\"].contains(&&*name);\n             then {"}, {"sha": "f8e1aff33e7731f5e887c6a2fa5958b2b7664076", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 46, "deletions": 55, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,8 +1,4 @@\n use if_chain::if_chain;\n-use rustc::hir::map::Map;\n-use rustc::lint::in_external_macro;\n-use rustc::ty;\n-use rustc::ty::{DefIdTree, Ty};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -12,8 +8,13 @@ use rustc_hir::{\n     TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty;\n+use rustc_middle::ty::{DefIdTree, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::kw;\n+use rustc_typeck::hir_ty_to_ty;\n \n use crate::utils::{differing_macro_contexts, span_lint_and_sugg};\n \n@@ -80,37 +81,28 @@ fn span_use_self_lint(cx: &LateContext<'_, '_>, path: &Path<'_>, last_segment: O\n     );\n }\n \n-struct TraitImplTyVisitor<'a, 'tcx> {\n-    item_type: Ty<'tcx>,\n+// FIXME: always use this (more correct) visitor, not just in method signatures.\n+struct SemanticUseSelfVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n-    trait_type_walker: ty::walk::TypeWalker<'tcx>,\n-    impl_type_walker: ty::walk::TypeWalker<'tcx>,\n+    self_ty: Ty<'tcx>,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for TraitImplTyVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for SemanticUseSelfVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn visit_ty(&mut self, t: &'tcx hir::Ty<'_>) {\n-        let trait_ty = self.trait_type_walker.next();\n-        let impl_ty = self.impl_type_walker.next();\n-\n-        if_chain! {\n-            if let TyKind::Path(QPath::Resolved(_, path)) = &t.kind;\n-\n-            // The implementation and trait types don't match which means that\n-            // the concrete type was specified by the implementation\n-            if impl_ty != trait_ty;\n-            if let Some(impl_ty) = impl_ty;\n-            if self.item_type == impl_ty;\n-            then {\n-                match path.res {\n-                    def::Res::SelfTy(..) => {},\n-                    _ => span_use_self_lint(self.cx, path, None)\n-                }\n+    fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'_>) {\n+        if let TyKind::Path(QPath::Resolved(_, path)) = &hir_ty.kind {\n+            match path.res {\n+                def::Res::SelfTy(..) => {},\n+                _ => {\n+                    if hir_ty_to_ty(self.cx.tcx, hir_ty) == self.self_ty {\n+                        span_use_self_lint(self.cx, path, None);\n+                    }\n+                },\n             }\n         }\n \n-        walk_ty(self, t)\n+        walk_ty(self, hir_ty)\n     }\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -120,48 +112,48 @@ impl<'a, 'tcx> Visitor<'tcx> for TraitImplTyVisitor<'a, 'tcx> {\n \n fn check_trait_method_impl_decl<'a, 'tcx>(\n     cx: &'a LateContext<'a, 'tcx>,\n-    item_type: Ty<'tcx>,\n     impl_item: &ImplItem<'_>,\n     impl_decl: &'tcx FnDecl<'_>,\n-    impl_trait_ref: &ty::TraitRef<'_>,\n+    impl_trait_ref: ty::TraitRef<'tcx>,\n ) {\n     let trait_method = cx\n         .tcx\n         .associated_items(impl_trait_ref.def_id)\n-        .find_by_name_and_kind(cx.tcx, impl_item.ident, ty::AssocKind::Method, impl_trait_ref.def_id)\n+        .find_by_name_and_kind(cx.tcx, impl_item.ident, ty::AssocKind::Fn, impl_trait_ref.def_id)\n         .expect(\"impl method matches a trait method\");\n \n     let trait_method_sig = cx.tcx.fn_sig(trait_method.def_id);\n     let trait_method_sig = cx.tcx.erase_late_bound_regions(&trait_method_sig);\n \n-    let impl_method_def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n-    let impl_method_sig = cx.tcx.fn_sig(impl_method_def_id);\n-    let impl_method_sig = cx.tcx.erase_late_bound_regions(&impl_method_sig);\n-\n-    let output_ty = if let FnRetTy::Return(ty) = &impl_decl.output {\n+    let output_hir_ty = if let FnRetTy::Return(ty) = &impl_decl.output {\n         Some(&**ty)\n     } else {\n         None\n     };\n \n-    // `impl_decl_ty` (of type `hir::Ty`) represents the type declared in the signature.\n-    // `impl_ty` (of type `ty:TyS`) is the concrete type that the compiler has determined for\n-    // that declaration. We use `impl_decl_ty` to see if the type was declared as `Self`\n-    // and use `impl_ty` to check its concrete type.\n-    for (impl_decl_ty, (impl_ty, trait_ty)) in impl_decl.inputs.iter().chain(output_ty).zip(\n-        impl_method_sig\n-            .inputs_and_output\n-            .iter()\n-            .zip(trait_method_sig.inputs_and_output),\n-    ) {\n-        let mut visitor = TraitImplTyVisitor {\n-            cx,\n-            item_type,\n-            trait_type_walker: trait_ty.walk(),\n-            impl_type_walker: impl_ty.walk(),\n-        };\n-\n-        visitor.visit_ty(&impl_decl_ty);\n+    // `impl_hir_ty` (of type `hir::Ty`) represents the type written in the signature.\n+    // `trait_ty` (of type `ty::Ty`) is the semantic type for the signature in the trait.\n+    // We use `impl_hir_ty` to see if the type was written as `Self`,\n+    // `hir_ty_to_ty(...)` to check semantic types of paths, and\n+    // `trait_ty` to determine which parts of the signature in the trait, mention\n+    // the type being implemented verbatim (as opposed to `Self`).\n+    for (impl_hir_ty, trait_ty) in impl_decl\n+        .inputs\n+        .iter()\n+        .chain(output_hir_ty)\n+        .zip(trait_method_sig.inputs_and_output)\n+    {\n+        // Check if the input/output type in the trait method specifies the implemented\n+        // type verbatim, and only suggest `Self` if that isn't the case.\n+        // This avoids suggestions to e.g. replace `Vec<u8>` with `Vec<Self>`,\n+        // in an `impl Trait for u8`, when the trait always uses `Vec<u8>`.\n+        // See also https://github.com/rust-lang/rust-clippy/issues/2894.\n+        let self_ty = impl_trait_ref.self_ty();\n+        if !trait_ty.walk().any(|inner| inner == self_ty.into()) {\n+            let mut visitor = SemanticUseSelfVisitor { cx, self_ty };\n+\n+            visitor.visit_ty(&impl_hir_ty);\n+        }\n     }\n }\n \n@@ -197,8 +189,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n                             let impl_item = cx.tcx.hir().impl_item(impl_item_ref.id);\n                             if let ImplItemKind::Fn(FnSig{ decl: impl_decl, .. }, impl_body_id)\n                                     = &impl_item.kind {\n-                                let item_type = cx.tcx.type_of(impl_def_id);\n-                                check_trait_method_impl_decl(cx, item_type, impl_item, impl_decl, &impl_trait_ref);\n+                                check_trait_method_impl_decl(cx, impl_item, impl_decl, impl_trait_ref);\n \n                                 let body = cx.tcx.hir().body(*impl_body_id);\n                                 visitor.visit_body(body);"}, {"sha": "104ea7de5c204ffcd590ce36e6c9037337bc7b07", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,4 +1,5 @@\n use rustc_ast::ast;\n+use rustc_ast::expand::is_proc_macro_attr;\n use rustc_errors::Applicability;\n use rustc_session::Session;\n use std::str::FromStr;\n@@ -123,12 +124,5 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n /// Return true if the attributes contain any of `proc_macro`,\n /// `proc_macro_derive` or `proc_macro_attribute`, false otherwise\n pub fn is_proc_macro(attrs: &[ast::Attribute]) -> bool {\n-    use rustc_span::Symbol;\n-\n-    let syms = [\n-        Symbol::intern(\"proc_macro\"),\n-        Symbol::intern(\"proc_macro_derive\"),\n-        Symbol::intern(\"proc_macro_attribute\"),\n-    ];\n-    attrs.iter().any(|attr| syms.iter().any(move |&s| attr.check_name(s)))\n+    attrs.iter().any(is_proc_macro_attr)\n }"}, {"sha": "0c8f06da9bb3bfc8674d704f1f87f474ebb2346a", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -2,14 +2,14 @@\n //! to generate a clippy lint detecting said code automatically.\n \n use crate::utils::{get_attr, higher};\n-use rustc::hir::map::Map;\n use rustc_ast::ast::{Attribute, LitFloatType, LitKind};\n use rustc_ast::walk_list;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::hir::map::Map;\n use rustc_session::Session;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -468,9 +468,9 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     println!(\"Ret(None) = {};\", current);\n                 }\n             },\n-            ExprKind::InlineAsm(_) => {\n-                println!(\"InlineAsm(_) = {};\", current);\n-                println!(\"    // unimplemented: `ExprKind::InlineAsm` is not further destructured at the moment\");\n+            ExprKind::LlvmInlineAsm(_) => {\n+                println!(\"LlvmInlineAsm(_) = {};\", current);\n+                println!(\"    // unimplemented: `ExprKind::LlvmInlineAsm` is not further destructured at the moment\");\n             },\n             ExprKind::Struct(ref path, ref fields, ref opt_base) => {\n                 let path_pat = self.next(\"path\");"}, {"sha": "409bb2043d4bec5e34c95e251bdc6b2d896aecd3", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -60,7 +60,7 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n /// 6  |     let other_f64_nan = 0.0f64 / 0.0;\n ///    |                         ^^^^^^^^^^^^\n ///    |\n-///    = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+///    = help: Consider using `f64::NAN` if you would like a constant representing NaN\n /// ```\n pub fn span_lint_and_help<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str) {\n     cx.struct_span_lint(lint, span, |ldb| {"}, {"sha": "33fba7df8d33660c13f03e7d397f586f76b09e63", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -5,10 +5,10 @@\n \n use crate::utils::{is_expn_of, match_def_path, match_qpath, paths};\n use if_chain::if_chain;\n-use rustc::ty;\n use rustc_ast::ast;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_middle::ty;\n \n /// Converts a hir binary operator to the corresponding `ast` type.\n #[must_use]\n@@ -280,6 +280,9 @@ pub fn vec_macro<'e>(cx: &LateContext<'_, '_>, expr: &'e hir::Expr<'_>) -> Optio\n \n                 None\n             }\n+            else if match_def_path(cx, fun_def_id, &paths::VEC_NEW) && args.is_empty() {\n+                Some(VecArgs::Vec(&[]))\n+            }\n             else {\n                 None\n             };"}, {"sha": "02b721fd378ff5afb1137f60e16e1e60711e77bc", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,7 +1,5 @@\n use crate::consts::{constant_context, constant_simple};\n use crate::utils::differing_macro_contexts;\n-use rustc::ich::StableHashingContextProvider;\n-use rustc::ty::TypeckTables;\n use rustc_ast::ast::Name;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::{\n@@ -10,6 +8,8 @@ use rustc_hir::{\n     TyKind, TypeBinding,\n };\n use rustc_lint::LateContext;\n+use rustc_middle::ich::StableHashingContextProvider;\n+use rustc_middle::ty::TypeckTables;\n use std::hash::Hash;\n \n /// Type used to check whether two ast are the same. This is different from the\n@@ -474,7 +474,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(a);\n                 self.hash_expr(i);\n             },\n-            ExprKind::InlineAsm(..) | ExprKind::Err => {},\n+            ExprKind::LlvmInlineAsm(..) | ExprKind::Err => {},\n             ExprKind::Lit(ref l) => {\n                 l.node.hash(&mut self.s);\n             },"}, {"sha": "b97fc9547e55a8bb9aa821b8ef0fbe070cd87c3c", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -3,7 +3,6 @@\n use crate::utils::get_attr;\n use rustc_ast::ast::Attribute;\n use rustc_hir as hir;\n-use rustc_hir::print;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::Session;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -50,7 +49,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DeepCodeInspector {\n             hir::VisibilityKind::Crate(_) => println!(\"visible crate wide\"),\n             hir::VisibilityKind::Restricted { ref path, .. } => println!(\n                 \"visible in module `{}`\",\n-                print::to_string(print::NO_ANN, |s| s.print_path(path, false))\n+                rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_path(path, false))\n             ),\n             hir::VisibilityKind::Inherited => println!(\"visibility inherited from outer item\"),\n         }\n@@ -283,10 +282,10 @@ fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, indent: usize) {\n                 print_expr(cx, e, indent + 1);\n             }\n         },\n-        hir::ExprKind::InlineAsm(ref asm) => {\n+        hir::ExprKind::LlvmInlineAsm(ref asm) => {\n             let inputs = &asm.inputs_exprs;\n             let outputs = &asm.outputs_exprs;\n-            println!(\"{}InlineAsm\", ind);\n+            println!(\"{}LlvmInlineAsm\", ind);\n             println!(\"{}inputs:\", ind);\n             for e in inputs.iter() {\n                 print_expr(cx, e, indent + 1);\n@@ -333,7 +332,7 @@ fn print_item(cx: &LateContext<'_, '_>, item: &hir::Item<'_>) {\n         hir::VisibilityKind::Crate(_) => println!(\"visible crate wide\"),\n         hir::VisibilityKind::Restricted { ref path, .. } => println!(\n             \"visible in module `{}`\",\n-            print::to_string(print::NO_ANN, |s| s.print_path(path, false))\n+            rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_path(path, false))\n         ),\n         hir::VisibilityKind::Inherited => println!(\"visibility inherited from outer item\"),\n     }\n@@ -427,7 +426,7 @@ fn print_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat<'_>, indent: usize) {\n             println!(\n                 \"{}name: {}\",\n                 ind,\n-                print::to_string(print::NO_ANN, |s| s.print_qpath(path, false))\n+                rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_qpath(path, false))\n             );\n             println!(\"{}ignore leftover fields: {}\", ind, ignore);\n             println!(\"{}fields:\", ind);\n@@ -444,7 +443,7 @@ fn print_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat<'_>, indent: usize) {\n             println!(\n                 \"{}path: {}\",\n                 ind,\n-                print::to_string(print::NO_ANN, |s| s.print_qpath(path, false))\n+                rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_qpath(path, false))\n             );\n             if let Some(dot_position) = opt_dots_position {\n                 println!(\"{}dot position: {}\", ind, dot_position);"}, {"sha": "bc2200800de38da18e3341f33ca4cf3cf7d3d1dc", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -3,7 +3,6 @@ use crate::utils::{\n     walk_ptrs_ty,\n };\n use if_chain::if_chain;\n-use rustc::hir::map::Map;\n use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, Name, NodeId};\n use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -13,6 +12,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{Crate, Expr, ExprKind, HirId, Item, MutTy, Mutability, Path, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::SymbolStr;"}, {"sha": "f7a91fcdd213a86ce1cb22d8f5664dcbe4dfcf6c", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -25,14 +25,6 @@ use std::borrow::Cow;\n use std::mem;\n \n use if_chain::if_chain;\n-use rustc::hir::map::Map;\n-use rustc::traits;\n-use rustc::ty::{\n-    self,\n-    layout::{self, IntegerExt},\n-    subst::GenericArg,\n-    Binder, Ty, TyCtxt, TypeFoldable,\n-};\n use rustc_ast::ast::{self, Attribute, LitKind};\n use rustc_attr as attr;\n use rustc_errors::Applicability;\n@@ -47,10 +39,14 @@ use rustc_hir::{\n };\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::traits;\n+use rustc_middle::ty::{self, layout::IntegerExt, subst::GenericArg, Binder, Ty, TyCtxt, TypeFoldable};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::symbol::{self, kw, Symbol};\n use rustc_span::{BytePos, Pos, Span, DUMMY_SP};\n+use rustc_target::abi::Integer;\n use rustc_trait_selection::traits::predicate_for_trait_def;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n@@ -230,7 +226,7 @@ pub fn match_qpath(path: &QPath<'_>, segments: &[&str]) -> bool {\n /// }\n ///\n /// if match_path(ty_path, &[\"rustc\", \"lint\", \"Lint\"]) {\n-///     // This is a `rustc::lint::Lint`.\n+///     // This is a `rustc_middle::lint::Lint`.\n /// }\n /// ```\n pub fn match_path(path: &Path<'_>, segments: &[&str]) -> bool {\n@@ -832,7 +828,7 @@ pub fn is_integer_literal(expr: &Expr<'_>, value: u128) -> bool {\n /// Examples of coercions can be found in the Nomicon at\n /// <https://doc.rust-lang.org/nomicon/coercions.html>.\n ///\n-/// See `rustc::ty::adjustment::Adjustment` and `rustc_typeck::check::coercion` for more\n+/// See `rustc_middle::ty::adjustment::Adjustment` and `rustc_typeck::check::coercion` for more\n /// information on adjustments and coercions.\n pub fn is_adjusted(cx: &LateContext<'_, '_>, e: &Expr<'_>) -> bool {\n     cx.tables.adjustments().get(e.hir_id).is_some()\n@@ -1080,9 +1076,7 @@ pub fn get_arg_name(pat: &Pat<'_>) -> Option<ast::Name> {\n }\n \n pub fn int_bits(tcx: TyCtxt<'_>, ity: ast::IntTy) -> u64 {\n-    layout::Integer::from_attr(&tcx, attr::IntType::SignedInt(ity))\n-        .size()\n-        .bits()\n+    Integer::from_attr(&tcx, attr::IntType::SignedInt(ity)).size().bits()\n }\n \n #[allow(clippy::cast_possible_wrap)]\n@@ -1101,9 +1095,7 @@ pub fn unsext(tcx: TyCtxt<'_>, u: i128, ity: ast::IntTy) -> u128 {\n \n /// clip unused bytes\n pub fn clip(tcx: TyCtxt<'_>, u: u128, ity: ast::UintTy) -> u128 {\n-    let bits = layout::Integer::from_attr(&tcx, attr::IntType::UnsignedInt(ity))\n-        .size()\n-        .bits();\n+    let bits = Integer::from_attr(&tcx, attr::IntType::UnsignedInt(ity)).size().bits();\n     let amt = 128 - bits;\n     (u << amt) >> amt\n }\n@@ -1224,14 +1216,16 @@ pub fn match_function_call<'a, 'tcx>(\n /// to avoid crashes on `layout_of`.\n pub fn is_normalizable<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, param_env: ty::ParamEnv<'tcx>, ty: Ty<'tcx>) -> bool {\n     cx.tcx.infer_ctxt().enter(|infcx| {\n-        let cause = rustc::traits::ObligationCause::dummy();\n+        let cause = rustc_middle::traits::ObligationCause::dummy();\n         infcx.at(&cause, param_env).normalize(&ty).is_ok()\n     })\n }\n \n pub fn match_def_path<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, did: DefId, syms: &[&str]) -> bool {\n-    let path = cx.get_def_path(did);\n-    path.len() == syms.len() && path.into_iter().zip(syms.iter()).all(|(a, &b)| a.as_str() == b)\n+    // We have to convert `syms` to `&[Symbol]` here because rustc's `match_def_path`\n+    // accepts only that. We should probably move to Symbols in Clippy as well.\n+    let syms = syms.iter().map(|p| Symbol::intern(p)).collect::<Vec<Symbol>>();\n+    cx.match_def_path(did, &syms)\n }\n \n /// Returns the list of condition expressions and the list of blocks in a\n@@ -1397,7 +1391,12 @@ pub fn fn_has_unsatisfiable_preds(cx: &LateContext<'_, '_>, did: DefId) -> bool\n         .iter()\n         .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None })\n         .collect();\n-    !traits::normalize_and_test_predicates(cx.tcx, traits::elaborate_predicates(cx.tcx, predicates).collect())\n+    !traits::normalize_and_test_predicates(\n+        cx.tcx,\n+        traits::elaborate_predicates(cx.tcx, predicates)\n+            .map(|o| o.predicate)\n+            .collect::<Vec<_>>(),\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "d93f8a1e5609c47379daac3b54a2cb3c6476124d", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,14 +1,18 @@\n //! This module contains paths to types and functions Clippy needs to know\n //! about.\n+//!\n+//! Whenever possible, please consider diagnostic items over hardcoded paths.\n+//! See <https://github.com/rust-lang/rust-clippy/issues/5393> for more information.\n \n pub const ANY_TRAIT: [&str; 3] = [\"std\", \"any\", \"Any\"];\n-pub const ARC: [&str; 3] = [\"alloc\", \"sync\", \"Arc\"];\n+pub const ARC_PTR_EQ: [&str; 4] = [\"alloc\", \"sync\", \"Arc\", \"ptr_eq\"];\n pub const ASMUT_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsMut\"];\n pub const ASREF_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsRef\"];\n pub const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n pub const BEGIN_PANIC_FMT: [&str; 3] = [\"std\", \"panicking\", \"begin_panic_fmt\"];\n pub const BINARY_HEAP: [&str; 4] = [\"alloc\", \"collections\", \"binary_heap\", \"BinaryHeap\"];\n pub const BORROW_TRAIT: [&str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n+pub const BOX: [&str; 3] = [\"alloc\", \"boxed\", \"Box\"];\n pub const BTREEMAP: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\"];\n pub const BTREEMAP_ENTRY: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"map\", \"Entry\"];\n pub const BTREESET: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"set\", \"BTreeSet\"];\n@@ -57,8 +61,6 @@ pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n pub const MEM_MAYBEUNINIT: [&str; 4] = [\"core\", \"mem\", \"maybe_uninit\", \"MaybeUninit\"];\n pub const MEM_MAYBEUNINIT_UNINIT: [&str; 5] = [\"core\", \"mem\", \"maybe_uninit\", \"MaybeUninit\", \"uninit\"];\n pub const MEM_REPLACE: [&str; 3] = [\"core\", \"mem\", \"replace\"];\n-pub const MEM_UNINITIALIZED: [&str; 3] = [\"core\", \"mem\", \"uninitialized\"];\n-pub const MEM_ZEROED: [&str; 3] = [\"core\", \"mem\", \"zeroed\"];\n pub const MUTEX: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n pub const MUTEX_GUARD: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"MutexGuard\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n@@ -74,6 +76,7 @@ pub const PATH: [&str; 3] = [\"std\", \"path\", \"Path\"];\n pub const PATH_BUF: [&str; 3] = [\"std\", \"path\", \"PathBuf\"];\n pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n+pub const PTR_EQ: [&str; 3] = [\"core\", \"ptr\", \"eq\"];\n pub const PTR_NULL: [&str; 2] = [\"ptr\", \"null\"];\n pub const PTR_NULL_MUT: [&str; 2] = [\"ptr\", \"null_mut\"];\n pub const RANGE: [&str; 3] = [\"core\", \"ops\", \"Range\"];\n@@ -90,6 +93,7 @@ pub const RANGE_TO_INCLUSIVE: [&str; 3] = [\"core\", \"ops\", \"RangeToInclusive\"];\n pub const RANGE_TO_INCLUSIVE_STD: [&str; 3] = [\"std\", \"ops\", \"RangeToInclusive\"];\n pub const RANGE_TO_STD: [&str; 3] = [\"std\", \"ops\", \"RangeTo\"];\n pub const RC: [&str; 3] = [\"alloc\", \"rc\", \"Rc\"];\n+pub const RC_PTR_EQ: [&str; 4] = [\"alloc\", \"rc\", \"Rc\", \"ptr_eq\"];\n pub const RECEIVER: [&str; 4] = [\"std\", \"sync\", \"mpsc\", \"Receiver\"];\n pub const REGEX: [&str; 3] = [\"regex\", \"re_unicode\", \"Regex\"];\n pub const REGEX_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"unicode\", \"RegexBuilder\", \"new\"];\n@@ -128,5 +132,6 @@ pub const VEC_AS_MUT_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_mut_slice\"];\n pub const VEC_AS_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_slice\"];\n pub const VEC_DEQUE: [&str; 4] = [\"alloc\", \"collections\", \"vec_deque\", \"VecDeque\"];\n pub const VEC_FROM_ELEM: [&str; 3] = [\"alloc\", \"vec\", \"from_elem\"];\n+pub const VEC_NEW: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"new\"];\n pub const WEAK_ARC: [&str; 3] = [\"alloc\", \"sync\", \"Weak\"];\n pub const WEAK_RC: [&str; 3] = [\"alloc\", \"rc\", \"Weak\"];"}, {"sha": "240bf2449cb5ebbbc928be17beb60bf83e870efb", "filename": "clippy_lints/src/utils/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fptr.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,9 +1,9 @@\n use crate::utils::{get_pat_name, match_var, snippet};\n-use rustc::hir::map::Map;\n use rustc_ast::ast::Name;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{Body, BodyId, Expr, ExprKind, Param};\n use rustc_lint::LateContext;\n+use rustc_middle::hir::map::Map;\n use rustc_span::source_map::Span;\n use std::borrow::Cow;\n "}, {"sha": "8957121a0a55e572e2ec8431f0d2e6d46ee2268a", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -108,7 +108,7 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Call(..)\n             | hir::ExprKind::Field(..)\n             | hir::ExprKind::Index(..)\n-            | hir::ExprKind::InlineAsm(..)\n+            | hir::ExprKind::LlvmInlineAsm(..)\n             | hir::ExprKind::Lit(..)\n             | hir::ExprKind::Loop(..)\n             | hir::ExprKind::MethodCall(..)\n@@ -150,7 +150,7 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::Field(..)\n             | ast::ExprKind::ForLoop(..)\n             | ast::ExprKind::Index(..)\n-            | ast::ExprKind::InlineAsm(..)\n+            | ast::ExprKind::LlvmInlineAsm(..)\n             | ast::ExprKind::Lit(..)\n             | ast::ExprKind::Loop(..)\n             | ast::ExprKind::MacCall(..)"}, {"sha": "1838fa5f8ffa4215acae556634c00243a0938e26", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,13 +1,13 @@\n use crate::utils::match_var;\n-use rustc::hir::map::Map;\n-use rustc::ty;\n use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{Expr, HirId, Path};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::ty;\n use rustc_span::symbol::Ident;\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, Place, PlaceBase};\n "}, {"sha": "1174f421577493b20c80dd230057bda7d116c57a", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,10 +1,10 @@\n use crate::consts::constant;\n use crate::utils::{higher, is_copy, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n-use rustc::ty::{self, Ty};\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n "}, {"sha": "55d7983249ae46a44f50e5dba501e7660fb732e7", "filename": "clippy_lints/src/verbose_file_reads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fverbose_file_reads.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -26,7 +26,7 @@ declare_clippy_lint! {\n     /// let mut bytes = fs::read(\"foo.txt\").unwrap();\n     /// ```\n     pub VERBOSE_FILE_READS,\n-    complexity,\n+    restriction,\n     \"use of `File::read_to_end` or `File::read_to_string`\"\n }\n "}, {"sha": "afd10d9ed53f7f128086d6326ac74d9fe2dcdef8", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -8,8 +8,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n declare_clippy_lint! {\n     /// **What it does:** Checks for `0.0 / 0.0`.\n     ///\n-    /// **Why is this bad?** It's less readable than `std::f32::NAN` or\n-    /// `std::f64::NAN`.\n+    /// **Why is this bad?** It's less readable than `f32::NAN` or `f64::NAN`.\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -19,7 +18,7 @@ declare_clippy_lint! {\n     /// ```\n     pub ZERO_DIVIDED_BY_ZERO,\n     complexity,\n-    \"usage of `0.0 / 0.0` to obtain NaN instead of `std::f32::NAN` or `std::f64::NAN`\"\n+    \"usage of `0.0 / 0.0` to obtain NaN instead of `f32::NAN` or `f64::NAN`\"\n }\n \n declare_lint_pass!(ZeroDiv => [ZERO_DIVIDED_BY_ZERO]);\n@@ -38,7 +37,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ZeroDiv {\n             if Constant::F32(0.0) == lhs_value || Constant::F64(0.0) == lhs_value;\n             if Constant::F32(0.0) == rhs_value || Constant::F64(0.0) == rhs_value;\n             then {\n-                // since we're about to suggest a use of std::f32::NaN or std::f64::NaN,\n+                // since we're about to suggest a use of f32::NAN or f64::NAN,\n                 // match the precision of the literals that are given.\n                 let float_type = match (lhs_value, rhs_value) {\n                     (Constant::F64(_), _)\n@@ -51,7 +50,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ZeroDiv {\n                     expr.span,\n                     \"constant division of `0.0` with `0.0` will always result in NaN\",\n                     &format!(\n-                        \"Consider using `std::{}::NAN` if you would like a constant representing NaN\",\n+                        \"Consider using `{}::NAN` if you would like a constant representing NaN\",\n                         float_type,\n                     ),\n                 );"}, {"sha": "a66d4e66add2ca54a8979409410bd63a35820652", "filename": "doc/adding_lints.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -463,11 +463,11 @@ don't hesitate to ask on [Discord] or in the issue/PR.\n [utils]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/utils/mod.rs\n [if_chain]: https://docs.rs/if_chain/*/if_chain/\n [from_expansion]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html#method.from_expansion\n-[in_external_macro]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/fn.in_external_macro.html\n+[in_external_macro]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/lint/fn.in_external_macro.html\n [span]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html\n [applicability]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/enum.Applicability.html\n [rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/\n-[nightly_docs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/\n+[nightly_docs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/\n [ast]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/index.html\n-[ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/sty/index.html\n+[ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/sty/index.html\n [Discord]: https://discord.gg/rust-lang"}, {"sha": "259696658eababfe7496dfe0907f2d15f72399a6", "filename": "doc/backport.md", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/doc%2Fbackport.md", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/doc%2Fbackport.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fbackport.md?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -0,0 +1,50 @@\n+# Backport Changes\n+\n+Sometimes it is necessary to backport changes to the beta release of Clippy.\n+Backports in Clippy are rare and should be approved by the Clippy team. For\n+example, a backport is done, if a crucial ICE was fixed or a lint is broken to a\n+point, that it has to be disabled, before landing on stable.\n+\n+Backports are done to the `beta` release of Clippy. Backports to stable Clippy\n+releases basically don't exist, since this would require a Rust point release,\n+which is almost never justifiable for a Clippy fix.\n+\n+\n+## Backport the changes\n+\n+Backports are done on the beta branch of the Clippy repository.\n+\n+```bash\n+# Assuming the current directory corresponds to the Clippy repository\n+$ git checkout beta\n+$ git checkout -b backport\n+$ git cherry-pick <SHA>  # `<SHA>` is the commit hash of the commit, that should be backported\n+$ git push origin backport\n+```\n+\n+After this, you can open a PR to the `beta` branch of the Clippy repository.\n+\n+\n+## Update Clippy in the Rust Repository\n+\n+This step must be done, **after** the PR of the previous step was merged.\n+\n+After the backport landed in the Clippy repository, also the Clippy version on\n+the Rust `beta` branch has to be updated.\n+\n+```bash\n+# Assuming the current directory corresponds to the Rust repository\n+$ git checkout beta\n+$ git checkout -b clippy_backport\n+$ pushd src/tools/clippy\n+$ git fetch\n+$ git checkout beta\n+$ popd\n+$ git add src/tools/clippy\n+\u00a7 git commit -m \"Update Clippy\"\n+$ git push origin clippy_backport\n+```\n+\n+After this you can open a PR to the `beta` branch of the Rust repository. In\n+this PR you should tag the Clippy team member, that agreed to the backport or\n+the `@rust-lang/clippy` team. Make sure to add `[beta]` to the title of the PR."}, {"sha": "25ddff4c48ca00a2f2cf19478d009da016b47f89", "filename": "doc/release.md", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/doc%2Frelease.md", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/doc%2Frelease.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frelease.md?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -0,0 +1,101 @@\n+# Release a new Clippy Version\n+\n+_NOTE: This document is probably only relevant to you, if you're a member of the\n+Clippy team._\n+\n+Clippy is released together with stable Rust releases. The dates for these\n+releases can be found at the [Rust Forge]. This document explains the necessary\n+steps to create a Clippy release.\n+\n+1. [Find the Clippy commit](#find-the-clippy-commit)\n+2. [Tag the stable commit](#tag-the-stable-commit)\n+3. [Update `CHANGELOG.md`](#update-changelogmd)\n+4. [Remerge the `beta` branch](#remerge-the-beta-branch)\n+5. [Update the `beta` branch](#update-the-beta-branch)\n+\n+_NOTE: This document is for stable Rust releases, not for point releases. For\n+point releases, step 1. and 2. should be enough._\n+\n+[Rust Forge]: https://forge.rust-lang.org/\n+\n+\n+## Find the Clippy commit\n+\n+The first step is to tag the Clippy commit, that is included in the stable Rust\n+release. This commit can be found in the Rust repository.\n+\n+```bash\n+# Assuming the current directory corresponds to the Rust repository\n+$ git fetch upstream    # `upstream` is the `rust-lang/rust` remote\n+$ git checkout 1.XX.0   # XX should be exchanged with the corresponding version\n+$ git submodule update\n+$ SHA=$(git submodule status src/tools/clippy | awk '{print $1}')\n+```\n+\n+\n+## Tag the stable commit\n+\n+After finding the Clippy commit, it can be tagged with the release number.\n+\n+```bash\n+# Assuming the current directory corresponds to the Clippy repository\n+$ git checkout $SHA\n+$ git tag rust-1.XX.0               # XX should be exchanged with the corresponding version\n+$ git push upstream master --tags   # `upstream` is the `rust-lang/rust-clippy` remote\n+```\n+\n+After this, the release should be available on the Clippy [release page].\n+\n+[release page]: https://github.com/rust-lang/rust-clippy/releases\n+\n+\n+## Update `CHANGELOG.md`\n+\n+For this see the document on [how to update the changelog].\n+\n+[how to update the changelog]: https://github.com/rust-lang/rust-clippy/blob/master/doc/changelog_update.md\n+\n+\n+## Remerge the `beta` branch\n+\n+This step is only necessary, if since the last release something was backported\n+to the beta Rust release. The remerge is then necessary, to make sure that the\n+Clippy commit, that was used by the now stable Rust release, persists in the\n+tree of the Clippy repository.\n+\n+```bash\n+# Assuming `HEAD` is the current `master` branch of rust-lang/rust-clippy\n+$ git checkout -b backport_remerge\n+$ git merge beta\n+$ git diff  # This diff has to be empty, otherwise something with the remerge failed\n+$ git push origin backport_remerge  # This can be pushed to your fork\n+```\n+\n+After this, open a PR to the master branch. In this PR, the commit hash of the\n+`HEAD` of the `beta` branch must exists. In addition to that, no files should\n+be changed by this PR.\n+\n+\n+## Update the `beta` branch\n+\n+This step must be done **after** the PR of the previous step was merged.\n+\n+First, the Clippy commit of the `beta` branch of the Rust repository has to be\n+determined.\n+\n+```bash\n+# Assuming the current directory corresponds to the Rust repository\n+$ git checkout beta\n+$ git submodule update\n+$ BETA_SHA=$(git submodule status src/tools/clippy | awk '{print $1}')\n+```\n+\n+After finding the Clippy commit, the `beta` branch in the Clippy repository can\n+be updated.\n+\n+```bash\n+# Assuming the current directory corresponds to the Clippy repository\n+$ git checkout beta\n+$ git rebase $BETA_SHA\n+$ git push upstream beta [-f]   # This requires a force push, if a remerge was done\n+```"}, {"sha": "6038ed697f91ea7f2ccbec3672c6ac63bb2a695f", "filename": "setup-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/setup-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/setup-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/setup-toolchain.sh?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,4 +1,4 @@\n-#!/bin/bash\n+#!/usr/bin/env bash\n # Set up the appropriate rustc toolchain\n \n set -e"}, {"sha": "2c699998ea90e237cdb708de9eb62507f3d0c60c", "filename": "src/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -5,16 +5,16 @@\n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)\n #[allow(unused_extern_crates)]\n-extern crate rustc;\n-#[allow(unused_extern_crates)]\n extern crate rustc_driver;\n #[allow(unused_extern_crates)]\n extern crate rustc_errors;\n #[allow(unused_extern_crates)]\n extern crate rustc_interface;\n+#[allow(unused_extern_crates)]\n+extern crate rustc_middle;\n \n-use rustc::ty::TyCtxt;\n use rustc_interface::interface;\n+use rustc_middle::ty::TyCtxt;\n use rustc_tools_util::VersionInfo;\n \n use lazy_static::lazy_static;"}, {"sha": "935ea180ebe21d3de3827343f668397c4369bded", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,12 +1,15 @@\n //! This file is managed by `cargo dev update_lints`. Do not edit.\n \n+use lazy_static::lazy_static;\n+\n pub mod lint;\n pub use lint::Level;\n pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n+lazy_static! {\n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 362] = [\n+pub static ref ALL_LINTS: Vec<Lint> = vec![\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -247,7 +250,7 @@ pub const ALL_LINTS: [Lint; 362] = [\n     },\n     Lint {\n         name: \"cognitive_complexity\",\n-        group: \"complexity\",\n+        group: \"nursery\",\n         desc: \"functions that should be split up into multiple functions\",\n         deprecation: None,\n         module: \"cognitive_complexity\",\n@@ -623,6 +626,13 @@ pub const ALL_LINTS: [Lint; 362] = [\n         deprecation: None,\n         module: \"misc\",\n     },\n+    Lint {\n+        name: \"fn_address_comparisons\",\n+        group: \"correctness\",\n+        desc: \"comparison with an address of a function item\",\n+        deprecation: None,\n+        module: \"unnamed_address\",\n+    },\n     Lint {\n         name: \"fn_params_excessive_bools\",\n         group: \"pedantic\",\n@@ -737,7 +747,7 @@ pub const ALL_LINTS: [Lint; 362] = [\n     },\n     Lint {\n         name: \"implicit_hasher\",\n-        group: \"style\",\n+        group: \"pedantic\",\n         desc: \"missing generalization over different hashers\",\n         deprecation: None,\n         module: \"types\",\n@@ -779,7 +789,7 @@ pub const ALL_LINTS: [Lint; 362] = [\n     },\n     Lint {\n         name: \"inefficient_to_string\",\n-        group: \"perf\",\n+        group: \"pedantic\",\n         desc: \"using `to_string` on `&&T` where `T: ToString`\",\n         deprecation: None,\n         module: \"methods\",\n@@ -989,7 +999,7 @@ pub const ALL_LINTS: [Lint; 362] = [\n     },\n     Lint {\n         name: \"let_unit_value\",\n-        group: \"style\",\n+        group: \"pedantic\",\n         desc: \"creating a `let` binding to a value of unit type, which usually can\\'t be used afterwards\",\n         deprecation: None,\n         module: \"types\",\n@@ -1438,7 +1448,7 @@ pub const ALL_LINTS: [Lint; 362] = [\n     Lint {\n         name: \"new_ret_no_self\",\n         group: \"style\",\n-        desc: \"not returning `Self` in a `new` method\",\n+        desc: \"not returning type containing `Self` in a `new` method\",\n         deprecation: None,\n         module: \"methods\",\n     },\n@@ -1556,7 +1566,7 @@ pub const ALL_LINTS: [Lint; 362] = [\n     },\n     Lint {\n         name: \"option_option\",\n-        group: \"complexity\",\n+        group: \"pedantic\",\n         desc: \"usage of `Option<Option<T>>`\",\n         deprecation: None,\n         module: \"types\",\n@@ -1715,6 +1725,13 @@ pub const ALL_LINTS: [Lint; 362] = [\n         deprecation: None,\n         module: \"ranges\",\n     },\n+    Lint {\n+        name: \"redundant_allocation\",\n+        group: \"perf\",\n+        desc: \"redundant allocation\",\n+        deprecation: None,\n+        module: \"types\",\n+    },\n     Lint {\n         name: \"redundant_clone\",\n         group: \"perf\",\n@@ -1792,13 +1809,6 @@ pub const ALL_LINTS: [Lint; 362] = [\n         deprecation: None,\n         module: \"regex\",\n     },\n-    Lint {\n-        name: \"replace_consts\",\n-        group: \"pedantic\",\n-        desc: \"Lint usages of standard library `const`s that could be replaced by `const fn`s\",\n-        deprecation: None,\n-        module: \"replace_consts\",\n-    },\n     Lint {\n         name: \"rest_pat_in_fully_bound_structs\",\n         group: \"restriction\",\n@@ -1813,6 +1823,13 @@ pub const ALL_LINTS: [Lint; 362] = [\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"result_map_or_into_option\",\n+        group: \"style\",\n+        desc: \"using `Result.map_or(None, Some)`, which is more succinctly expressed as `ok()`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"result_map_unit_fn\",\n         group: \"complexity\",\n@@ -2151,7 +2168,7 @@ pub const ALL_LINTS: [Lint; 362] = [\n     },\n     Lint {\n         name: \"trivially_copy_pass_by_ref\",\n-        group: \"perf\",\n+        group: \"pedantic\",\n         desc: \"functions taking small copyable arguments by reference\",\n         deprecation: None,\n         module: \"trivially_copy_pass_by_ref\",\n@@ -2284,7 +2301,7 @@ pub const ALL_LINTS: [Lint; 362] = [\n     },\n     Lint {\n         name: \"unreadable_literal\",\n-        group: \"style\",\n+        group: \"pedantic\",\n         desc: \"long integer literal without underscores\",\n         deprecation: None,\n         module: \"literal_representation\",\n@@ -2410,11 +2427,18 @@ pub const ALL_LINTS: [Lint; 362] = [\n     },\n     Lint {\n         name: \"verbose_file_reads\",\n-        group: \"complexity\",\n+        group: \"restriction\",\n         desc: \"use of `File::read_to_end` or `File::read_to_string`\",\n         deprecation: None,\n         module: \"verbose_file_reads\",\n     },\n+    Lint {\n+        name: \"vtable_address_comparisons\",\n+        group: \"correctness\",\n+        desc: \"comparison with an address of a trait vtable\",\n+        deprecation: None,\n+        module: \"unnamed_address\",\n+    },\n     Lint {\n         name: \"while_immutable_condition\",\n         group: \"correctness\",\n@@ -2509,7 +2533,7 @@ pub const ALL_LINTS: [Lint; 362] = [\n     Lint {\n         name: \"zero_divided_by_zero\",\n         group: \"complexity\",\n-        desc: \"usage of `0.0 / 0.0` to obtain NaN instead of `std::f32::NAN` or `std::f64::NAN`\",\n+        desc: \"usage of `0.0 / 0.0` to obtain NaN instead of `f32::NAN` or `f64::NAN`\",\n         deprecation: None,\n         module: \"zero_div_zero\",\n     },\n@@ -2543,3 +2567,4 @@ pub const ALL_LINTS: [Lint; 362] = [\n     },\n ];\n // end lint list, do not remove this comment, it\u2019s used in `update_lints`\n+}"}, {"sha": "a78273ce0da41238ae7a2f5ee4842b001cc8a61b", "filename": "tests/integration.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fintegration.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -64,6 +64,9 @@ fn integration_test() {\n     } else if stderr.contains(\"query stack during panic\") {\n         panic!(\"query stack during panic in the output\");\n     } else if stderr.contains(\"E0463\") {\n+        // Encountering E0463 (can't find crate for `x`) did _not_ cause the build to fail in the\n+        // past. Even though it should have. That's why we explicitly panic here.\n+        // See PR #3552 and issue #3523 for more background.\n         panic!(\"error: E0463\");\n     } else if stderr.contains(\"E0514\") {\n         panic!(\"incompatible crate versions\");"}, {"sha": "6691c074caf9ed1de8d434922927f1457724b591", "filename": "tests/matches.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/680cc2f25848721eca3a2332c48b13c02e027dbc/tests%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680cc2f25848721eca3a2332c48b13c02e027dbc/tests%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmatches.rs?ref=680cc2f25848721eca3a2332c48b13c02e027dbc", "patch": "@@ -1,42 +0,0 @@\n-#![feature(rustc_private)]\n-\n-extern crate rustc_span;\n-use std::collections::Bound;\n-\n-#[test]\n-fn test_overlapping() {\n-    use clippy_lints::matches::overlapping;\n-    use rustc_span::source_map::DUMMY_SP;\n-\n-    let sp = |s, e| clippy_lints::matches::SpannedRange {\n-        span: DUMMY_SP,\n-        node: (s, e),\n-    };\n-\n-    assert_eq!(None, overlapping::<u8>(&[]));\n-    assert_eq!(None, overlapping(&[sp(1, Bound::Included(4))]));\n-    assert_eq!(\n-        None,\n-        overlapping(&[sp(1, Bound::Included(4)), sp(5, Bound::Included(6))])\n-    );\n-    assert_eq!(\n-        None,\n-        overlapping(&[\n-            sp(1, Bound::Included(4)),\n-            sp(5, Bound::Included(6)),\n-            sp(10, Bound::Included(11))\n-        ],)\n-    );\n-    assert_eq!(\n-        Some((&sp(1, Bound::Included(4)), &sp(3, Bound::Included(6)))),\n-        overlapping(&[sp(1, Bound::Included(4)), sp(3, Bound::Included(6))])\n-    );\n-    assert_eq!(\n-        Some((&sp(5, Bound::Included(6)), &sp(6, Bound::Included(11)))),\n-        overlapping(&[\n-            sp(1, Bound::Included(4)),\n-            sp(5, Bound::Included(6)),\n-            sp(6, Bound::Included(11))\n-        ],)\n-    );\n-}"}, {"sha": "19019a2541631767abf56555c0411d03465af1af", "filename": "tests/ui-toml/toml_trivially_copy/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,6 +1,7 @@\n // normalize-stderr-test \"\\(\\d+ byte\\)\" -> \"(N byte)\"\n // normalize-stderr-test \"\\(limit: \\d+ byte\\)\" -> \"(limit: N byte)\"\n \n+#![deny(clippy::trivially_copy_pass_by_ref)]\n #![allow(clippy::many_single_char_names)]\n \n #[derive(Copy, Clone)]"}, {"sha": "912761a8f009c2dfd2e856d7e62d12ad5113e94c", "filename": "tests/ui-toml/toml_trivially_copy/test.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,13 +1,17 @@\n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/test.rs:14:11\n+  --> $DIR/test.rs:15:11\n    |\n LL | fn bad(x: &u16, y: &Foo) {}\n    |           ^^^^ help: consider passing by value instead: `u16`\n    |\n-   = note: `-D clippy::trivially-copy-pass-by-ref` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/test.rs:4:9\n+   |\n+LL | #![deny(clippy::trivially_copy_pass_by_ref)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/test.rs:14:20\n+  --> $DIR/test.rs:15:20\n    |\n LL | fn bad(x: &u16, y: &Foo) {}\n    |                    ^^^^ help: consider passing by value instead: `Foo`"}, {"sha": "d205b383d1ff64c745e1dd5b2842c22a1f66b570", "filename": "tests/ui/absurd-extreme-comparisons.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -16,17 +16,17 @@ fn main() {\n     u < Z;\n     Z >= u;\n     Z > u;\n-    u > std::u32::MAX;\n-    u >= std::u32::MAX;\n-    std::u32::MAX < u;\n-    std::u32::MAX <= u;\n+    u > u32::MAX;\n+    u >= u32::MAX;\n+    u32::MAX < u;\n+    u32::MAX <= u;\n     1-1 > u;\n     u >= !0;\n     u <= 12 - 2*6;\n     let i: i8 = 0;\n     i < -127 - 1;\n-    std::i8::MAX >= i;\n-    3-7 < std::i32::MIN;\n+    i8::MAX >= i;\n+    3-7 < i32::MIN;\n     let b = false;\n     b >= true;\n     false > b;\n@@ -52,10 +52,10 @@ impl PartialOrd<u32> for U {\n }\n \n pub fn foo(val: U) -> bool {\n-    val > std::u32::MAX\n+    val > u32::MAX\n }\n \n pub fn bar(len: u64) -> bool {\n     // This is OK as we are casting from target sized to fixed size\n-    len >= std::usize::MAX as u64\n+    len >= usize::MAX as u64\n }"}, {"sha": "6de554378aaa97f1d0537bb1b7703ae59b9f46fc", "filename": "tests/ui/absurd-extreme-comparisons.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -42,34 +42,34 @@ LL |     Z > u;\n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:19:5\n    |\n-LL |     u > std::u32::MAX;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     u > u32::MAX;\n+   |     ^^^^^^^^^^^^\n    |\n-   = help: because `std::u32::MAX` is the maximum value for this type, this comparison is always false\n+   = help: because `u32::MAX` is the maximum value for this type, this comparison is always false\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:20:5\n    |\n-LL |     u >= std::u32::MAX;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     u >= u32::MAX;\n+   |     ^^^^^^^^^^^^^\n    |\n-   = help: because `std::u32::MAX` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `u == std::u32::MAX` instead\n+   = help: because `u32::MAX` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `u == u32::MAX` instead\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:21:5\n    |\n-LL |     std::u32::MAX < u;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     u32::MAX < u;\n+   |     ^^^^^^^^^^^^\n    |\n-   = help: because `std::u32::MAX` is the maximum value for this type, this comparison is always false\n+   = help: because `u32::MAX` is the maximum value for this type, this comparison is always false\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:22:5\n    |\n-LL |     std::u32::MAX <= u;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     u32::MAX <= u;\n+   |     ^^^^^^^^^^^^^\n    |\n-   = help: because `std::u32::MAX` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `std::u32::MAX == u` instead\n+   = help: because `u32::MAX` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `u32::MAX == u` instead\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:23:5\n@@ -106,18 +106,18 @@ LL |     i < -127 - 1;\n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:28:5\n    |\n-LL |     std::i8::MAX >= i;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     i8::MAX >= i;\n+   |     ^^^^^^^^^^^^\n    |\n-   = help: because `std::i8::MAX` is the maximum value for this type, this comparison is always true\n+   = help: because `i8::MAX` is the maximum value for this type, this comparison is always true\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:29:5\n    |\n-LL |     3-7 < std::i32::MIN;\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     3-7 < i32::MIN;\n+   |     ^^^^^^^^^^^^^^\n    |\n-   = help: because `std::i32::MIN` is the minimum value for this type, this comparison is always false\n+   = help: because `i32::MIN` is the minimum value for this type, this comparison is always false\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:31:5"}, {"sha": "fb57a0becbb25e81b751bef0e1be0ddb0b559253", "filename": "tests/ui/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,5 @@\n #[warn(clippy::approx_constant)]\n-#[allow(unused, clippy::shadow_unrelated, clippy::similar_names, clippy::unreadable_literal)]\n+#[allow(unused, clippy::shadow_unrelated, clippy::similar_names)]\n fn main() {\n     let my_e = 2.7182;\n     let almost_e = 2.718;"}, {"sha": "21bb5b01e02b5ec683c99f73167e0efd2f964b75", "filename": "tests/ui/auxiliary/proc_macro_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -16,7 +16,7 @@ pub fn derive(_: TokenStream) -> TokenStream {\n     let output = quote! {\n         // Should not trigger `useless_attribute`\n         #[allow(dead_code)]\n-        extern crate rustc;\n+        extern crate rustc_middle;\n     };\n     output\n }"}, {"sha": "9121176475938728696f5cde36e5c52544652d9c", "filename": "tests/ui/bool_comparison.fixed", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fbool_comparison.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fbool_comparison.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -111,3 +111,19 @@ fn issue3703() {\n     if Foo < false {}\n     if false < Foo {}\n }\n+\n+#[allow(dead_code)]\n+fn issue4983() {\n+    let a = true;\n+    let b = false;\n+\n+    if a != b {};\n+    if a != b {};\n+    if a == b {};\n+    if !a == !b {};\n+\n+    if b != a {};\n+    if b != a {};\n+    if b == a {};\n+    if !b == !a {};\n+}"}, {"sha": "01ee35859f0da64c055a3eb6a9b313b77e597cb7", "filename": "tests/ui/bool_comparison.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -111,3 +111,19 @@ fn issue3703() {\n     if Foo < false {}\n     if false < Foo {}\n }\n+\n+#[allow(dead_code)]\n+fn issue4983() {\n+    let a = true;\n+    let b = false;\n+\n+    if a == !b {};\n+    if !a == b {};\n+    if a == b {};\n+    if !a == !b {};\n+\n+    if b == !a {};\n+    if !b == a {};\n+    if b == a {};\n+    if !b == !a {};\n+}"}, {"sha": "eeb1f20ee894d89b0d267ff67bb4098054f6ab04", "filename": "tests/ui/bool_comparison.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fbool_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fbool_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -84,5 +84,29 @@ error: order comparisons between booleans can be simplified\n LL |     if x > y {\n    |        ^^^^^ help: try simplifying it as shown: `x & !y`\n \n-error: aborting due to 14 previous errors\n+error: This comparison might be written more concisely\n+  --> $DIR/bool_comparison.rs:120:8\n+   |\n+LL |     if a == !b {};\n+   |        ^^^^^^^ help: try simplifying it as shown: `a != b`\n+\n+error: This comparison might be written more concisely\n+  --> $DIR/bool_comparison.rs:121:8\n+   |\n+LL |     if !a == b {};\n+   |        ^^^^^^^ help: try simplifying it as shown: `a != b`\n+\n+error: This comparison might be written more concisely\n+  --> $DIR/bool_comparison.rs:125:8\n+   |\n+LL |     if b == !a {};\n+   |        ^^^^^^^ help: try simplifying it as shown: `b != a`\n+\n+error: This comparison might be written more concisely\n+  --> $DIR/bool_comparison.rs:126:8\n+   |\n+LL |     if !b == a {};\n+   |        ^^^^^^^ help: try simplifying it as shown: `b != a`\n+\n+error: aborting due to 18 previous errors\n "}, {"sha": "5bfa256623b6bbcd5b56bb93421b655e417f0d68", "filename": "tests/ui/clone_on_copy_mut.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fclone_on_copy_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fclone_on_copy_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy_mut.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -5,7 +5,6 @@ pub fn dec_read_dec(i: &mut i32) -> i32 {\n     ret\n }\n \n-#[allow(clippy::trivially_copy_pass_by_ref)]\n pub fn minus_1(i: &i32) -> i32 {\n     dec_read_dec(&mut i.clone())\n }"}, {"sha": "64ca52b010a7eb5c5a38db9a3d285d706b2b3656", "filename": "tests/ui/cmp_nan.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,16 +1,16 @@\n-const NAN_F32: f32 = std::f32::NAN;\n-const NAN_F64: f64 = std::f64::NAN;\n+const NAN_F32: f32 = f32::NAN;\n+const NAN_F64: f64 = f64::NAN;\n \n #[warn(clippy::cmp_nan)]\n #[allow(clippy::float_cmp, clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n     let x = 5f32;\n-    x == std::f32::NAN;\n-    x != std::f32::NAN;\n-    x < std::f32::NAN;\n-    x > std::f32::NAN;\n-    x <= std::f32::NAN;\n-    x >= std::f32::NAN;\n+    x == f32::NAN;\n+    x != f32::NAN;\n+    x < f32::NAN;\n+    x > f32::NAN;\n+    x <= f32::NAN;\n+    x >= f32::NAN;\n     x == NAN_F32;\n     x != NAN_F32;\n     x < NAN_F32;\n@@ -19,12 +19,12 @@ fn main() {\n     x >= NAN_F32;\n \n     let y = 0f64;\n-    y == std::f64::NAN;\n-    y != std::f64::NAN;\n-    y < std::f64::NAN;\n-    y > std::f64::NAN;\n-    y <= std::f64::NAN;\n-    y >= std::f64::NAN;\n+    y == f64::NAN;\n+    y != f64::NAN;\n+    y < f64::NAN;\n+    y > f64::NAN;\n+    y <= f64::NAN;\n+    y >= f64::NAN;\n     y == NAN_F64;\n     y != NAN_F64;\n     y < NAN_F64;"}, {"sha": "867516661a539150125313a274e4817b13955e42", "filename": "tests/ui/cmp_nan.stderr", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcmp_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcmp_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,144 +1,144 @@\n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:8:5\n    |\n-LL |     x == std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     x == f32::NAN;\n+   |     ^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cmp-nan` implied by `-D warnings`\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:9:5\n    |\n-LL |     x != std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     x != f32::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:10:5\n    |\n-LL |     x < std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     x < f32::NAN;\n+   |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:11:5\n    |\n-LL |     x > std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     x > f32::NAN;\n+   |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:12:5\n    |\n-LL |     x <= std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     x <= f32::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:13:5\n    |\n-LL |     x >= std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     x >= f32::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:14:5\n    |\n LL |     x == NAN_F32;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:15:5\n    |\n LL |     x != NAN_F32;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:16:5\n    |\n LL |     x < NAN_F32;\n    |     ^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:17:5\n    |\n LL |     x > NAN_F32;\n    |     ^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:18:5\n    |\n LL |     x <= NAN_F32;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:19:5\n    |\n LL |     x >= NAN_F32;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:22:5\n    |\n-LL |     y == std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     y == f64::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:23:5\n    |\n-LL |     y != std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     y != f64::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:24:5\n    |\n-LL |     y < std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     y < f64::NAN;\n+   |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:25:5\n    |\n-LL |     y > std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     y > f64::NAN;\n+   |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:26:5\n    |\n-LL |     y <= std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     y <= f64::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:27:5\n    |\n-LL |     y >= std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     y >= f64::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:28:5\n    |\n LL |     y == NAN_F64;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:29:5\n    |\n LL |     y != NAN_F64;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:30:5\n    |\n LL |     y < NAN_F64;\n    |     ^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:31:5\n    |\n LL |     y > NAN_F64;\n    |     ^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:32:5\n    |\n LL |     y <= NAN_F64;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:33:5\n    |\n LL |     y >= NAN_F64;"}, {"sha": "ce2a1c28c8a80f84c3ab0454d2efc517efa4f7c5", "filename": "tests/ui/collapsible_else_if.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcollapsible_else_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcollapsible_else_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_else_if.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(clippy::cognitive_complexity, clippy::assertions_on_constants)]\n+#![allow(clippy::assertions_on_constants)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "99c40b8d38eb9a79247d25b18e92b48145ef3d31", "filename": "tests/ui/collapsible_else_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcollapsible_else_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcollapsible_else_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_else_if.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(clippy::cognitive_complexity, clippy::assertions_on_constants)]\n+#![allow(clippy::assertions_on_constants)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "561283fc8e73de2b839d10dbf3d3fd22068d091c", "filename": "tests/ui/collapsible_if.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcollapsible_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcollapsible_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(clippy::cognitive_complexity, clippy::assertions_on_constants)]\n+#![allow(clippy::assertions_on_constants)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "dc9d9b451c0f9620d9181936ebbc18bd58fa6a4f", "filename": "tests/ui/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(clippy::cognitive_complexity, clippy::assertions_on_constants)]\n+#![allow(clippy::assertions_on_constants)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "f50714643fd2524905a7166c96d71e0c25687c34", "filename": "tests/ui/crashes/ice-3717.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcrashes%2Fice-3717.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcrashes%2Fice-3717.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3717.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,3 +1,5 @@\n+#![deny(clippy::implicit_hasher)]\n+\n use std::collections::HashSet;\n \n fn main() {}"}, {"sha": "296c95abb96d343f73629910d0f5fab3dd6fd228", "filename": "tests/ui/crashes/ice-3717.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcrashes%2Fice-3717.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcrashes%2Fice-3717.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3717.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,10 +1,14 @@\n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/ice-3717.rs:5:21\n+  --> $DIR/ice-3717.rs:7:21\n    |\n LL | pub fn ice_3717(_: &HashSet<usize>) {\n    |                     ^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::implicit-hasher` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/ice-3717.rs:1:9\n+   |\n+LL | #![deny(clippy::implicit_hasher)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n help: consider adding a type parameter\n    |\n LL | pub fn ice_3717<S: ::std::hash::BuildHasher + Default>(_: &HashSet<usize, S>) {"}, {"sha": "d8fbaa5414664ac7be093ed7efab22a7c939321d", "filename": "tests/ui/crashes/mut_mut_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcrashes%2Fmut_mut_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fcrashes%2Fmut_mut_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fmut_mut_macro.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -16,7 +16,7 @@\n const BAA: *const i32 = 0 as *const i32;\n static mut BAR: *const i32 = BAA;\n static mut FOO: *const i32 = 0 as *const i32;\n-static mut BUH: bool = 42.0 < std::f32::NAN;\n+static mut BUH: bool = 42.0 < f32::NAN;\n \n #[allow(unused_variables, unused_mut)]\n fn main() {\n@@ -32,5 +32,5 @@ fn main() {\n     assert_eq!(*MUT_COUNT, 1);\n     */\n     // FIXME: don't lint in array length, requires `check_body`\n-    //let _ = [\"\"; (42.0 < std::f32::NAN) as usize];\n+    //let _ = [\"\"; (42.0 < f32::NAN) as usize];\n }"}, {"sha": "477a47118d4116587fc6526ca01f3f72edf639e2", "filename": "tests/ui/debug_assert_with_mut_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fdebug_assert_with_mut_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fdebug_assert_with_mut_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdebug_assert_with_mut_call.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -2,7 +2,7 @@\n #![feature(custom_inner_attributes)]\n #![rustfmt::skip]\n #![warn(clippy::debug_assert_with_mut_call)]\n-#![allow(clippy::trivially_copy_pass_by_ref, clippy::cognitive_complexity, clippy::redundant_closure_call)]\n+#![allow(clippy::redundant_closure_call)]\n \n struct S;\n "}, {"sha": "053faae02ce3e0d3aa457083224bb9d32b20ba30", "filename": "tests/ui/default_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fdefault_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fdefault_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_lint.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -2,7 +2,7 @@\n #![feature(rustc_private)]\n \n #[macro_use]\n-extern crate rustc;\n+extern crate rustc_middle;\n #[macro_use]\n extern crate rustc_session;\n extern crate rustc_lint;"}, {"sha": "484aa72d59a25a43c6276ebf4d48dd7ba12e7c01", "filename": "tests/ui/doc_unsafe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fdoc_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fdoc_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -88,7 +88,6 @@ very_unsafe!();\n // we don't lint code from external macros\n undocd_unsafe!();\n \n-#[allow(clippy::let_unit_value)]\n fn main() {\n     unsafe {\n         you_dont_see_me();"}, {"sha": "7d6842f5b54215e75a14fe517752e2ab8fae30d4", "filename": "tests/ui/enum_clike_unportable_variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fenum_clike_unportable_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fenum_clike_unportable_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_clike_unportable_variant.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -24,8 +24,8 @@ enum NonPortableSigned {\n     Y = 0x7FFF_FFFF,\n     Z = 0xFFFF_FFFF,\n     A = 0x1_0000_0000,\n-    B = std::i32::MIN as isize,\n-    C = (std::i32::MIN as isize) - 1,\n+    B = i32::MIN as isize,\n+    C = (i32::MIN as isize) - 1,\n }\n \n enum NonPortableSignedNoHint {"}, {"sha": "71f3f5e083e0d1f67739aa5055b7b0d78a363c26", "filename": "tests/ui/enum_clike_unportable_variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fenum_clike_unportable_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fenum_clike_unportable_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_clike_unportable_variant.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -33,8 +33,8 @@ LL |     A = 0x1_0000_0000,\n error: Clike enum variant discriminant is not portable to 32-bit targets\n   --> $DIR/enum_clike_unportable_variant.rs:28:5\n    |\n-LL |     C = (std::i32::MIN as isize) - 1,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     C = (i32::MIN as isize) - 1,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Clike enum variant discriminant is not portable to 32-bit targets\n   --> $DIR/enum_clike_unportable_variant.rs:34:5"}, {"sha": "1b34c2f74eba1cf41055c0fe3436fea25f79a541", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -6,8 +6,7 @@\n     clippy::redundant_closure_call,\n     clippy::many_single_char_names,\n     clippy::needless_pass_by_value,\n-    clippy::option_map_unit_fn,\n-    clippy::trivially_copy_pass_by_ref\n+    clippy::option_map_unit_fn\n )]\n #![warn(\n     clippy::redundant_closure,"}, {"sha": "4f050bd8479ae90e7784ffc33bd44698c17724df", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -6,8 +6,7 @@\n     clippy::redundant_closure_call,\n     clippy::many_single_char_names,\n     clippy::needless_pass_by_value,\n-    clippy::option_map_unit_fn,\n-    clippy::trivially_copy_pass_by_ref\n+    clippy::option_map_unit_fn\n )]\n #![warn(\n     clippy::redundant_closure,"}, {"sha": "c4713ca8083dd1f1afb28d0dafe2c7fc793d5da3", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,77 +1,77 @@\n error: redundant closure found\n-  --> $DIR/eta.rs:21:27\n+  --> $DIR/eta.rs:20:27\n    |\n LL |     let a = Some(1u8).map(|a| foo(a));\n    |                           ^^^^^^^^^^ help: remove closure as shown: `foo`\n    |\n    = note: `-D clippy::redundant-closure` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:22:10\n+  --> $DIR/eta.rs:21:10\n    |\n LL |     meta(|a| foo(a));\n    |          ^^^^^^^^^^ help: remove closure as shown: `foo`\n \n error: this expression borrows a reference that is immediately dereferenced by the compiler\n-  --> $DIR/eta.rs:25:21\n+  --> $DIR/eta.rs:24:21\n    |\n LL |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n    |                     ^^^ help: change this to: `&2`\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:32:27\n+  --> $DIR/eta.rs:31:27\n    |\n LL |     let e = Some(1u8).map(|a| generic(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `generic`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:75:51\n+  --> $DIR/eta.rs:74:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo());\n    |                                                   ^^^^^^^^^^^ help: remove closure as shown: `TestStruct::foo`\n    |\n    = note: `-D clippy::redundant-closure-for-method-calls` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:77:51\n+  --> $DIR/eta.rs:76:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo());\n    |                                                   ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `TestTrait::trait_foo`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:80:42\n+  --> $DIR/eta.rs:79:42\n    |\n LL |     let e = Some(&mut vec![1, 2, 3]).map(|v| v.clear());\n    |                                          ^^^^^^^^^^^^^ help: remove closure as shown: `std::vec::Vec::clear`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:85:29\n+  --> $DIR/eta.rs:84:29\n    |\n LL |     let e = Some(\"str\").map(|s| s.to_string());\n    |                             ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `std::string::ToString::to_string`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:87:27\n+  --> $DIR/eta.rs:86:27\n    |\n LL |     let e = Some('a').map(|s| s.to_uppercase());\n    |                           ^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_uppercase`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:90:65\n+  --> $DIR/eta.rs:89:65\n    |\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_ascii_uppercase`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:173:27\n+  --> $DIR/eta.rs:172:27\n    |\n LL |     let a = Some(1u8).map(|a| foo_ptr(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `foo_ptr`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:178:27\n+  --> $DIR/eta.rs:177:27\n    |\n LL |     let a = Some(1u8).map(|a| closure(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `closure`"}, {"sha": "ddbf4e98c51ab6921808eb14b64055975b4557e8", "filename": "tests/ui/extra_unused_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fextra_unused_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fextra_unused_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,10 +1,4 @@\n-#![allow(\n-    unused,\n-    dead_code,\n-    clippy::needless_lifetimes,\n-    clippy::needless_pass_by_value,\n-    clippy::trivially_copy_pass_by_ref\n-)]\n+#![allow(unused, dead_code, clippy::needless_lifetimes, clippy::needless_pass_by_value)]\n #![warn(clippy::extra_unused_lifetimes)]\n \n fn empty() {}"}, {"sha": "16bbb1c037d84c6f3a86c442edfc639eddc534ef", "filename": "tests/ui/extra_unused_lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fextra_unused_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fextra_unused_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,25 +1,25 @@\n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:14:14\n+  --> $DIR/extra_unused_lifetimes.rs:8:14\n    |\n LL | fn unused_lt<'a>(x: u8) {}\n    |              ^^\n    |\n    = note: `-D clippy::extra-unused-lifetimes` implied by `-D warnings`\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:16:25\n+  --> $DIR/extra_unused_lifetimes.rs:10:25\n    |\n LL | fn unused_lt_transitive<'a, 'b: 'a>(x: &'b u8) {\n    |                         ^^\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:41:10\n+  --> $DIR/extra_unused_lifetimes.rs:35:10\n    |\n LL |     fn x<'a>(&self) {}\n    |          ^^\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:67:22\n+  --> $DIR/extra_unused_lifetimes.rs:61:22\n    |\n LL |         fn unused_lt<'a>(x: u8) {}\n    |                      ^^"}, {"sha": "60fa7569eb9dd5f14fb0292608534a72d1b1bc20", "filename": "tests/ui/float_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffloat_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffloat_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_arithmetic.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -5,8 +5,7 @@\n     clippy::shadow_unrelated,\n     clippy::no_effect,\n     clippy::unnecessary_operation,\n-    clippy::op_ref,\n-    clippy::trivially_copy_pass_by_ref\n+    clippy::op_ref\n )]\n \n #[rustfmt::skip]"}, {"sha": "1ceffb35beede707299d01555ee718c7ad3bb1ea", "filename": "tests/ui/float_arithmetic.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffloat_arithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffloat_arithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_arithmetic.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,103 +1,103 @@\n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:16:5\n+  --> $DIR/float_arithmetic.rs:15:5\n    |\n LL |     f * 2.0;\n    |     ^^^^^^^\n    |\n    = note: `-D clippy::float-arithmetic` implied by `-D warnings`\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:18:5\n+  --> $DIR/float_arithmetic.rs:17:5\n    |\n LL |     1.0 + f;\n    |     ^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:19:5\n+  --> $DIR/float_arithmetic.rs:18:5\n    |\n LL |     f * 2.0;\n    |     ^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:20:5\n+  --> $DIR/float_arithmetic.rs:19:5\n    |\n LL |     f / 2.0;\n    |     ^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:21:5\n+  --> $DIR/float_arithmetic.rs:20:5\n    |\n LL |     f - 2.0 * 4.2;\n    |     ^^^^^^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:22:5\n+  --> $DIR/float_arithmetic.rs:21:5\n    |\n LL |     -f;\n    |     ^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:24:5\n+  --> $DIR/float_arithmetic.rs:23:5\n    |\n LL |     f += 1.0;\n    |     ^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:25:5\n+  --> $DIR/float_arithmetic.rs:24:5\n    |\n LL |     f -= 1.0;\n    |     ^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:26:5\n+  --> $DIR/float_arithmetic.rs:25:5\n    |\n LL |     f *= 2.0;\n    |     ^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:27:5\n+  --> $DIR/float_arithmetic.rs:26:5\n    |\n LL |     f /= 2.0;\n    |     ^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:33:5\n+  --> $DIR/float_arithmetic.rs:32:5\n    |\n LL |     3.1_f32 + &1.2_f32;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:34:5\n+  --> $DIR/float_arithmetic.rs:33:5\n    |\n LL |     &3.4_f32 + 1.5_f32;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:35:5\n+  --> $DIR/float_arithmetic.rs:34:5\n    |\n LL |     &3.5_f32 + &1.3_f32;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:40:5\n+  --> $DIR/float_arithmetic.rs:39:5\n    |\n LL |     a + f\n    |     ^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:44:5\n+  --> $DIR/float_arithmetic.rs:43:5\n    |\n LL |     f1 + f2\n    |     ^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:48:5\n+  --> $DIR/float_arithmetic.rs:47:5\n    |\n LL |     f1 + f2\n    |     ^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:52:5\n+  --> $DIR/float_arithmetic.rs:51:5\n    |\n LL |     (&f1 + &f2)\n    |     ^^^^^^^^^^^"}, {"sha": "9fa0e5f5c079b5e8bf2b8a0e3f2929f87b45d809", "filename": "tests/ui/float_cmp.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,11 @@\n #![warn(clippy::float_cmp)]\n-#![allow(unused, clippy::no_effect, clippy::unnecessary_operation, clippy::cast_lossless)]\n+#![allow(\n+    unused,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::cast_lossless,\n+    clippy::many_single_char_names\n+)]\n \n use std::ops::Add;\n \n@@ -45,8 +51,8 @@ impl PartialEq for X {\n \n fn main() {\n     ZERO == 0f32; //no error, comparison with zero is ok\n-    1.0f32 != ::std::f32::INFINITY; // also comparison with infinity\n-    1.0f32 != ::std::f32::NEG_INFINITY; // and negative infinity\n+    1.0f32 != f32::INFINITY; // also comparison with infinity\n+    1.0f32 != f32::NEG_INFINITY; // and negative infinity\n     ZERO == 0.0; //no error, comparison with zero is ok\n     ZERO + ZERO != 1.0; //no error, comparison with zero is ok\n \n@@ -77,6 +83,21 @@ fn main() {\n \n     assert_eq!(a, b); // no errors\n \n+    const ZERO_ARRAY: [f32; 2] = [0.0, 0.0];\n+    const NON_ZERO_ARRAY: [f32; 2] = [0.0, 0.1];\n+\n+    let i = 0;\n+    let j = 1;\n+\n+    ZERO_ARRAY[i] == NON_ZERO_ARRAY[j]; // ok, because lhs is zero regardless of i\n+    NON_ZERO_ARRAY[i] == NON_ZERO_ARRAY[j];\n+\n+    let a1: [f32; 1] = [0.0];\n+    let a2: [f32; 1] = [1.1];\n+\n+    a1 == a2;\n+    a1[0] == a2[0];\n+\n     // no errors - comparing signums is ok\n     let x32 = 3.21f32;\n     1.23f32.signum() == x32.signum();"}, {"sha": "2d454e8e70de5ab173e7a0d511f1872f896cdac8", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,39 +1,51 @@\n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:59:5\n+  --> $DIR/float_cmp.rs:65:5\n    |\n LL |     ONE as f64 != 2.0;\n    |     ^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE as f64 - 2.0).abs() > error`\n    |\n    = note: `-D clippy::float-cmp` implied by `-D warnings`\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n-  --> $DIR/float_cmp.rs:59:5\n-   |\n-LL |     ONE as f64 != 2.0;\n-   |     ^^^^^^^^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:64:5\n+  --> $DIR/float_cmp.rs:70:5\n    |\n LL |     x == 1.0;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(x - 1.0).abs() < error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n-  --> $DIR/float_cmp.rs:64:5\n-   |\n-LL |     x == 1.0;\n-   |     ^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:67:5\n+  --> $DIR/float_cmp.rs:73:5\n    |\n LL |     twice(x) != twice(ONE as f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(twice(x) - twice(ONE as f64)).abs() > error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n-  --> $DIR/float_cmp.rs:67:5\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+\n+error: strict comparison of `f32` or `f64`\n+  --> $DIR/float_cmp.rs:93:5\n    |\n-LL |     twice(x) != twice(ONE as f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     NON_ZERO_ARRAY[i] == NON_ZERO_ARRAY[j];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(NON_ZERO_ARRAY[i] - NON_ZERO_ARRAY[j]).abs() < error`\n+   |\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+\n+error: strict comparison of `f32` or `f64` arrays\n+  --> $DIR/float_cmp.rs:98:5\n+   |\n+LL |     a1 == a2;\n+   |     ^^^^^^^^\n+   |\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+\n+error: strict comparison of `f32` or `f64`\n+  --> $DIR/float_cmp.rs:99:5\n+   |\n+LL |     a1[0] == a2[0];\n+   |     ^^^^^^^^^^^^^^ help: consider comparing them within some error: `(a1[0] - a2[0]).abs() < error`\n+   |\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "dfc025558a2f430b35b1624b6cd37c5263dc76c4", "filename": "tests/ui/float_cmp_const.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffloat_cmp_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffloat_cmp_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -37,13 +37,26 @@ fn main() {\n     // no errors, zero and infinity values\n     ONE != 0f32;\n     TWO == 0f32;\n-    ONE != ::std::f32::INFINITY;\n-    ONE == ::std::f32::NEG_INFINITY;\n+    ONE != f32::INFINITY;\n+    ONE == f32::NEG_INFINITY;\n \n     // no errors, but will warn clippy::float_cmp if '#![allow(float_cmp)]' above is removed\n     let w = 1.1;\n     v == w;\n     v != w;\n     v == 1.0;\n     v != 1.0;\n+\n+    const ZERO_ARRAY: [f32; 3] = [0.0, 0.0, 0.0];\n+    const ZERO_INF_ARRAY: [f32; 3] = [0.0, ::std::f32::INFINITY, ::std::f32::NEG_INFINITY];\n+    const NON_ZERO_ARRAY: [f32; 3] = [0.0, 0.1, 0.2];\n+    const NON_ZERO_ARRAY2: [f32; 3] = [0.2, 0.1, 0.0];\n+\n+    // no errors, zero and infinity values\n+    NON_ZERO_ARRAY[0] == NON_ZERO_ARRAY2[1]; // lhs is 0.0\n+    ZERO_ARRAY == NON_ZERO_ARRAY; // lhs is all zeros\n+    ZERO_INF_ARRAY == NON_ZERO_ARRAY; // lhs is all zeros or infinities\n+\n+    // has errors\n+    NON_ZERO_ARRAY == NON_ZERO_ARRAY2;\n }"}, {"sha": "19dc4a284b726744b219bd4aa9f2d55e40fa130a", "filename": "tests/ui/float_cmp_const.stderr", "status": "modified", "additions": 15, "deletions": 35, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffloat_cmp_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffloat_cmp_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -5,83 +5,63 @@ LL |     1f32 == ONE;\n    |     ^^^^^^^^^^^ help: consider comparing them within some error: `(1f32 - ONE).abs() < error`\n    |\n    = note: `-D clippy::float-cmp-const` implied by `-D warnings`\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:20:5\n-   |\n-LL |     1f32 == ONE;\n-   |     ^^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:21:5\n    |\n LL |     TWO == ONE;\n    |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() < error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:21:5\n-   |\n-LL |     TWO == ONE;\n-   |     ^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:22:5\n    |\n LL |     TWO != ONE;\n    |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() > error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:22:5\n-   |\n-LL |     TWO != ONE;\n-   |     ^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:23:5\n    |\n LL |     ONE + ONE == TWO;\n    |     ^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE + ONE - TWO).abs() < error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:23:5\n-   |\n-LL |     ONE + ONE == TWO;\n-   |     ^^^^^^^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:25:5\n    |\n LL |     x as f32 == ONE;\n    |     ^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(x as f32 - ONE).abs() < error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:25:5\n-   |\n-LL |     x as f32 == ONE;\n-   |     ^^^^^^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:28:5\n    |\n LL |     v == ONE;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() < error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:28:5\n-   |\n-LL |     v == ONE;\n-   |     ^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:29:5\n    |\n LL |     v != ONE;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() > error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:29:5\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+\n+error: strict comparison of `f32` or `f64` constant arrays\n+  --> $DIR/float_cmp_const.rs:61:5\n    |\n-LL |     v != ONE;\n-   |     ^^^^^^^^\n+LL |     NON_ZERO_ARRAY == NON_ZERO_ARRAY2;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "362dcb4fd80ca350d3220060fe1139786b68754f", "filename": "tests/ui/fn_address_comparisons.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffn_address_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffn_address_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_address_comparisons.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -0,0 +1,20 @@\n+use std::fmt::Debug;\n+use std::ptr;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+fn a() {}\n+\n+#[warn(clippy::fn_address_comparisons)]\n+fn main() {\n+    type F = fn();\n+    let f: F = a;\n+    let g: F = f;\n+\n+    // These should fail:\n+    let _ = f == a;\n+    let _ = f != a;\n+\n+    // These should be fine:\n+    let _ = f == g;\n+}"}, {"sha": "9c1b5419a4319a7249fe196357db1ddf491cce64", "filename": "tests/ui/fn_address_comparisons.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffn_address_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffn_address_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_address_comparisons.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -0,0 +1,16 @@\n+error: comparing with a non-unique address of a function item\n+  --> $DIR/fn_address_comparisons.rs:15:13\n+   |\n+LL |     let _ = f == a;\n+   |             ^^^^^^\n+   |\n+   = note: `-D clippy::fn-address-comparisons` implied by `-D warnings`\n+\n+error: comparing with a non-unique address of a function item\n+  --> $DIR/fn_address_comparisons.rs:16:13\n+   |\n+LL |     let _ = f != a;\n+   |             ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "5fc84ada9efdd4368f1f6806c4c74dcffabdb917", "filename": "tests/ui/for_loop_fixable.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffor_loop_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffor_loop_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -28,7 +28,6 @@ impl Unrelated {\n     clippy::linkedlist,\n     clippy::shadow_unrelated,\n     clippy::unnecessary_mut_passed,\n-    clippy::cognitive_complexity,\n     clippy::similar_names\n )]\n #[allow(clippy::many_single_char_names, unused_variables)]"}, {"sha": "4165b0dc004942cae3f3fc0ef23b75ed7107d14f", "filename": "tests/ui/for_loop_fixable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffor_loop_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffor_loop_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -28,7 +28,6 @@ impl Unrelated {\n     clippy::linkedlist,\n     clippy::shadow_unrelated,\n     clippy::unnecessary_mut_passed,\n-    clippy::cognitive_complexity,\n     clippy::similar_names\n )]\n #[allow(clippy::many_single_char_names, unused_variables)]"}, {"sha": "cffb4b9f0a9c0bf1eecca85f10488dff5588246f", "filename": "tests/ui/for_loop_fixable.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffor_loop_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffor_loop_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,5 @@\n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop_fixable.rs:39:14\n+  --> $DIR/for_loop_fixable.rs:38:14\n    |\n LL |     for i in 10..0 {\n    |              ^^^^^\n@@ -11,7 +11,7 @@ LL |     for i in (0..10).rev() {\n    |              ^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop_fixable.rs:43:14\n+  --> $DIR/for_loop_fixable.rs:42:14\n    |\n LL |     for i in 10..=0 {\n    |              ^^^^^^\n@@ -22,7 +22,7 @@ LL |     for i in (0..=10).rev() {\n    |              ^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop_fixable.rs:47:14\n+  --> $DIR/for_loop_fixable.rs:46:14\n    |\n LL |     for i in MAX_LEN..0 {\n    |              ^^^^^^^^^^\n@@ -33,7 +33,7 @@ LL |     for i in (0..MAX_LEN).rev() {\n    |              ^^^^^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop_fixable.rs:72:14\n+  --> $DIR/for_loop_fixable.rs:71:14\n    |\n LL |     for i in 10..5 + 4 {\n    |              ^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     for i in (5 + 4..10).rev() {\n    |              ^^^^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop_fixable.rs:76:14\n+  --> $DIR/for_loop_fixable.rs:75:14\n    |\n LL |     for i in (5 + 2)..(3 - 1) {\n    |              ^^^^^^^^^^^^^^^^\n@@ -55,95 +55,95 @@ LL |     for i in ((3 - 1)..(5 + 2)).rev() {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:98:15\n+  --> $DIR/for_loop_fixable.rs:97:15\n    |\n LL |     for _v in vec.iter() {}\n    |               ^^^^^^^^^^ help: to write this more concisely, try: `&vec`\n    |\n    = note: `-D clippy::explicit-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:100:15\n+  --> $DIR/for_loop_fixable.rs:99:15\n    |\n LL |     for _v in vec.iter_mut() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&mut vec`\n \n error: it is more concise to loop over containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:103:15\n+  --> $DIR/for_loop_fixable.rs:102:15\n    |\n LL |     for _v in out_vec.into_iter() {}\n    |               ^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `out_vec`\n    |\n    = note: `-D clippy::explicit-into-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:108:15\n+  --> $DIR/for_loop_fixable.rs:107:15\n    |\n LL |     for _v in [1, 2, 3].iter() {}\n    |               ^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[1, 2, 3]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:112:15\n+  --> $DIR/for_loop_fixable.rs:111:15\n    |\n LL |     for _v in [0; 32].iter() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[0; 32]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:117:15\n+  --> $DIR/for_loop_fixable.rs:116:15\n    |\n LL |     for _v in ll.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&ll`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:120:15\n+  --> $DIR/for_loop_fixable.rs:119:15\n    |\n LL |     for _v in vd.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&vd`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:123:15\n+  --> $DIR/for_loop_fixable.rs:122:15\n    |\n LL |     for _v in bh.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bh`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:126:15\n+  --> $DIR/for_loop_fixable.rs:125:15\n    |\n LL |     for _v in hm.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hm`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:129:15\n+  --> $DIR/for_loop_fixable.rs:128:15\n    |\n LL |     for _v in bt.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bt`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:132:15\n+  --> $DIR/for_loop_fixable.rs:131:15\n    |\n LL |     for _v in hs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hs`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:135:15\n+  --> $DIR/for_loop_fixable.rs:134:15\n    |\n LL |     for _v in bs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bs`\n \n error: it is more concise to loop over containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:310:18\n+  --> $DIR/for_loop_fixable.rs:309:18\n    |\n LL |         for i in iterator.into_iter() {\n    |                  ^^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `iterator`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:330:18\n+  --> $DIR/for_loop_fixable.rs:329:18\n    |\n LL |         for _ in t.into_iter() {}\n    |                  ^^^^^^^^^^^^^ help: to write this more concisely, try: `&t`\n \n error: it is more concise to loop over containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:332:18\n+  --> $DIR/for_loop_fixable.rs:331:18\n    |\n LL |         for _ in r.into_iter() {}\n    |                  ^^^^^^^^^^^^^ help: to write this more concisely, try: `r`"}, {"sha": "179b255e08ca77962bdb5a096333dd4d854b068c", "filename": "tests/ui/for_loop_unfixable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffor_loop_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffor_loop_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_unfixable.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -12,7 +12,6 @@\n     clippy::linkedlist,\n     clippy::shadow_unrelated,\n     clippy::unnecessary_mut_passed,\n-    clippy::cognitive_complexity,\n     clippy::similar_names,\n     unused,\n     dead_code"}, {"sha": "1da8e0f3588d79fd3defd9429ff4bcd91055b61d", "filename": "tests/ui/for_loop_unfixable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffor_loop_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ffor_loop_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_unfixable.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,5 @@\n error[E0425]: cannot find function `f` in this scope\n-  --> $DIR/for_loop_unfixable.rs:37:12\n+  --> $DIR/for_loop_unfixable.rs:36:12\n    |\n LL |         if f(&vec[i], &vec[i]) {\n    |            ^ help: a local variable with a similar name exists: `i`"}, {"sha": "6bbf79edfcf700c75eb9444bb79ea12ef141af17", "filename": "tests/ui/if_same_then_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -78,7 +78,7 @@ fn if_same_then_else() {\n     let _ = if true { 0.0 } else { -0.0 };\n \n     // Different NaNs\n-    let _ = if true { 0.0 / 0.0 } else { std::f32::NAN };\n+    let _ = if true { 0.0 / 0.0 } else { f32::NAN };\n \n     if true {\n         foo();"}, {"sha": "3cc21809264f55b94c7ec5ef2ef5e34c20097205", "filename": "tests/ui/if_same_then_else2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fif_same_then_else2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fif_same_then_else2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else2.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,7 +1,6 @@\n #![warn(clippy::if_same_then_else)]\n #![allow(\n     clippy::blacklisted_name,\n-    clippy::cognitive_complexity,\n     clippy::collapsible_if,\n     clippy::ifs_same_cond,\n     clippy::needless_return\n@@ -87,10 +86,10 @@ fn if_same_then_else2() -> Result<&'static str, ()> {\n \n     // Same NaNs\n     let _ = if true {\n-        std::f32::NAN\n+        f32::NAN\n     } else {\n         //~ ERROR same body as `if` block\n-        std::f32::NAN\n+        f32::NAN\n     };\n \n     if true {"}, {"sha": "f5d087fe128386d6006706af594e780759110ee0", "filename": "tests/ui/if_same_then_else2.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fif_same_then_else2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fif_same_then_else2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else2.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,5 @@\n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:20:12\n+  --> $DIR/if_same_then_else2.rs:19:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -13,7 +13,7 @@ LL | |     }\n    |\n    = note: `-D clippy::if-same-then-else` implied by `-D warnings`\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:11:13\n+  --> $DIR/if_same_then_else2.rs:10:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -26,7 +26,7 @@ LL | |     } else {\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:34:12\n+  --> $DIR/if_same_then_else2.rs:33:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -36,7 +36,7 @@ LL | |     }\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:32:13\n+  --> $DIR/if_same_then_else2.rs:31:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -45,7 +45,7 @@ LL | |     } else {\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:41:12\n+  --> $DIR/if_same_then_else2.rs:40:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -55,7 +55,7 @@ LL | |     }\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:39:13\n+  --> $DIR/if_same_then_else2.rs:38:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -64,26 +64,26 @@ LL | |     } else {\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:91:12\n+  --> $DIR/if_same_then_else2.rs:90:12\n    |\n LL |       } else {\n    |  ____________^\n LL | |         //~ ERROR same body as `if` block\n-LL | |         std::f32::NAN\n+LL | |         f32::NAN\n LL | |     };\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:89:21\n+  --> $DIR/if_same_then_else2.rs:88:21\n    |\n LL |       let _ = if true {\n    |  _____________________^\n-LL | |         std::f32::NAN\n+LL | |         f32::NAN\n LL | |     } else {\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:98:12\n+  --> $DIR/if_same_then_else2.rs:97:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -93,7 +93,7 @@ LL | |     }\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:96:13\n+  --> $DIR/if_same_then_else2.rs:95:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -102,7 +102,7 @@ LL | |     } else {\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:123:12\n+  --> $DIR/if_same_then_else2.rs:122:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -112,7 +112,7 @@ LL | |     }\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:120:20\n+  --> $DIR/if_same_then_else2.rs:119:20\n    |\n LL |       } else if true {\n    |  ____________________^"}, {"sha": "fdcc9a33f55fe93e2d5989f1757b2233c43c3d78", "filename": "tests/ui/implicit_hasher.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,4 +1,5 @@\n // aux-build:implicit_hasher_macros.rs\n+#![deny(clippy::implicit_hasher)]\n #![allow(unused)]\n \n #[macro_use]"}, {"sha": "2b06d661772d28083e71f35e4abe9f7f056fe338", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,10 +1,14 @@\n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:15:35\n+  --> $DIR/implicit_hasher.rs:16:35\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for HashMap<K, V> {\n    |                                   ^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::implicit-hasher` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/implicit_hasher.rs:2:9\n+   |\n+LL | #![deny(clippy::implicit_hasher)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n help: consider adding a type parameter\n    |\n LL | impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<i8> for HashMap<K, V, S> {\n@@ -15,7 +19,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:24:36\n+  --> $DIR/implicit_hasher.rs:25:36\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for (HashMap<K, V>,) {\n    |                                    ^^^^^^^^^^^^^\n@@ -30,7 +34,7 @@ LL |         ((HashMap::default(),), (HashMap::with_capacity_and_hasher(10, Defa\n    |           ^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:29:19\n+  --> $DIR/implicit_hasher.rs:30:19\n    |\n LL | impl Foo<i16> for HashMap<String, String> {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -45,7 +49,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:46:32\n+  --> $DIR/implicit_hasher.rs:47:32\n    |\n LL | impl<T: Hash + Eq> Foo<i8> for HashSet<T> {\n    |                                ^^^^^^^^^^\n@@ -60,7 +64,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:51:19\n+  --> $DIR/implicit_hasher.rs:52:19\n    |\n LL | impl Foo<i16> for HashSet<String> {\n    |                   ^^^^^^^^^^^^^^^\n@@ -75,7 +79,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:68:23\n+  --> $DIR/implicit_hasher.rs:69:23\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                       ^^^^^^^^^^^^^^^^^\n@@ -86,7 +90,7 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _s\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^            ^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:68:53\n+  --> $DIR/implicit_hasher.rs:69:53\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                                     ^^^^^^^^^^^^\n@@ -97,7 +101,7 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set:\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                          ^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:72:43\n+  --> $DIR/implicit_hasher.rs:73:43\n    |\n LL |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n    |                                           ^^^^^^^^^^^^^\n@@ -116,7 +120,7 @@ LL |                 (HashMap::default(), HashMap::with_capacity_and_hasher(10,\n    |                  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:80:33\n+  --> $DIR/implicit_hasher.rs:81:33\n    |\n LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                 ^^^^^^^^^^^^^^^^^\n@@ -131,7 +135,7 @@ LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^            ^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:80:63\n+  --> $DIR/implicit_hasher.rs:81:63\n    |\n LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                                               ^^^^^^^^^^^^"}, {"sha": "b75f10917df18b0a8a5968364172d63ebe9766d2", "filename": "tests/ui/inconsistent_digit_grouping.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finconsistent_digit_grouping.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finconsistent_digit_grouping.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #[warn(clippy::inconsistent_digit_grouping)]\n+#[deny(clippy::unreadable_literal)]\n #[allow(unused_variables, clippy::excessive_precision)]\n fn main() {\n     macro_rules! mac1 {\n@@ -33,6 +34,9 @@ fn main() {\n     // Test suggestion when fraction has no digits\n     let _: f32 = 123_456.;\n \n+    // Test UUID formatted literal\n+    let _: u128 = 0x12345678_1234_1234_1234_123456789012;\n+\n     // Ignore literals in macros\n     let _ = mac1!();\n     let _ = mac2!();"}, {"sha": "79ce38be19bd3e877935a034929cfab0c69dc270", "filename": "tests/ui/inconsistent_digit_grouping.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finconsistent_digit_grouping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finconsistent_digit_grouping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #[warn(clippy::inconsistent_digit_grouping)]\n+#[deny(clippy::unreadable_literal)]\n #[allow(unused_variables, clippy::excessive_precision)]\n fn main() {\n     macro_rules! mac1 {\n@@ -33,6 +34,9 @@ fn main() {\n     // Test suggestion when fraction has no digits\n     let _: f32 = 1_23_456.;\n \n+    // Test UUID formatted literal\n+    let _: u128 = 0x12345678_1234_1234_1234_123456789012;\n+\n     // Ignore literals in macros\n     let _ = mac1!();\n     let _ = mac2!();"}, {"sha": "b8ac915546200718aba29271f5776a380980efe7", "filename": "tests/ui/inconsistent_digit_grouping.stderr", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finconsistent_digit_grouping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finconsistent_digit_grouping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,63 +1,67 @@\n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:25:16\n+  --> $DIR/inconsistent_digit_grouping.rs:26:16\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                ^^^^^^^^ help: consider: `123_456`\n    |\n    = note: `-D clippy::inconsistent-digit-grouping` implied by `-D warnings`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:25:26\n+  --> $DIR/inconsistent_digit_grouping.rs:26:26\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                          ^^^^^^^^^^ help: consider: `12_345_678`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:25:38\n+  --> $DIR/inconsistent_digit_grouping.rs:26:38\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                                      ^^^^^^^^ help: consider: `1_234_567`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:25:48\n+  --> $DIR/inconsistent_digit_grouping.rs:26:48\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                                                ^^^^^^^^^^^^^^ help: consider: `1_234.567_8_f32`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:25:64\n+  --> $DIR/inconsistent_digit_grouping.rs:26:64\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                                                                ^^^^^^^^^^^^^^ help: consider: `1.234_567_8_f32`\n \n error: long literal lacking separators\n-  --> $DIR/inconsistent_digit_grouping.rs:28:13\n+  --> $DIR/inconsistent_digit_grouping.rs:29:13\n    |\n LL |     let _ = 0x100000;\n    |             ^^^^^^^^ help: consider: `0x0010_0000`\n    |\n-   = note: `-D clippy::unreadable-literal` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/inconsistent_digit_grouping.rs:3:8\n+   |\n+LL | #[deny(clippy::unreadable_literal)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: long literal lacking separators\n-  --> $DIR/inconsistent_digit_grouping.rs:29:13\n+  --> $DIR/inconsistent_digit_grouping.rs:30:13\n    |\n LL |     let _ = 0x1000000;\n    |             ^^^^^^^^^ help: consider: `0x0100_0000`\n \n error: long literal lacking separators\n-  --> $DIR/inconsistent_digit_grouping.rs:30:13\n+  --> $DIR/inconsistent_digit_grouping.rs:31:13\n    |\n LL |     let _ = 0x10000000;\n    |             ^^^^^^^^^^ help: consider: `0x1000_0000`\n \n error: long literal lacking separators\n-  --> $DIR/inconsistent_digit_grouping.rs:31:13\n+  --> $DIR/inconsistent_digit_grouping.rs:32:13\n    |\n LL |     let _ = 0x100000000_u64;\n    |             ^^^^^^^^^^^^^^^ help: consider: `0x0001_0000_0000_u64`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:34:18\n+  --> $DIR/inconsistent_digit_grouping.rs:35:18\n    |\n LL |     let _: f32 = 1_23_456.;\n    |                  ^^^^^^^^^ help: consider: `123_456.`"}, {"sha": "1fe688977659d962c5535b4127df8cf546c4852a", "filename": "tests/ui/infinite_iter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,4 @@\n use std::iter::repeat;\n-#[allow(clippy::trivially_copy_pass_by_ref)]\n fn square_is_lower_64(x: &u32) -> bool {\n     x * x < 64\n }"}, {"sha": "5f5e7ac9f253a0e0589dec0a662495f5747d2bb4", "filename": "tests/ui/infinite_iter.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finfinite_iter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finfinite_iter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,29 +1,29 @@\n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:10:5\n+  --> $DIR/infinite_iter.rs:9:5\n    |\n LL |     repeat(0_u8).collect::<Vec<_>>(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/infinite_iter.rs:8:8\n+  --> $DIR/infinite_iter.rs:7:8\n    |\n LL | #[deny(clippy::infinite_iter)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:11:5\n+  --> $DIR/infinite_iter.rs:10:5\n    |\n LL |     (0..8_u32).take_while(square_is_lower_64).cycle().count(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:12:5\n+  --> $DIR/infinite_iter.rs:11:5\n    |\n LL |     (0..8_u64).chain(0..).max(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:17:5\n+  --> $DIR/infinite_iter.rs:16:5\n    |\n LL | /     (0..8_u32)\n LL | |         .rev()\n@@ -33,37 +33,37 @@ LL | |         .for_each(|x| println!(\"{}\", x)); // infinite iter\n    | |________________________________________^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:23:5\n+  --> $DIR/infinite_iter.rs:22:5\n    |\n LL |     (0_usize..).flat_map(|x| 0..x).product::<usize>(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:24:5\n+  --> $DIR/infinite_iter.rs:23:5\n    |\n LL |     (0_u64..).filter(|x| x % 2 == 0).last(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:31:5\n+  --> $DIR/infinite_iter.rs:30:5\n    |\n LL |     (0..).zip((0..).take_while(square_is_lower_64)).count(); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/infinite_iter.rs:29:8\n+  --> $DIR/infinite_iter.rs:28:8\n    |\n LL | #[deny(clippy::maybe_infinite_iter)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:32:5\n+  --> $DIR/infinite_iter.rs:31:5\n    |\n LL |     repeat(42).take_while(|x| *x == 42).chain(0..42).max(); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:33:5\n+  --> $DIR/infinite_iter.rs:32:5\n    |\n LL | /     (1..)\n LL | |         .scan(0, |state, x| {\n@@ -74,31 +74,31 @@ LL | |         .min(); // maybe infinite iter\n    | |______________^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:39:5\n+  --> $DIR/infinite_iter.rs:38:5\n    |\n LL |     (0..).find(|x| *x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:40:5\n+  --> $DIR/infinite_iter.rs:39:5\n    |\n LL |     (0..).position(|x| x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:41:5\n+  --> $DIR/infinite_iter.rs:40:5\n    |\n LL |     (0..).any(|x| x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:42:5\n+  --> $DIR/infinite_iter.rs:41:5\n    |\n LL |     (0..).all(|x| x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:65:31\n+  --> $DIR/infinite_iter.rs:64:31\n    |\n LL |         let _: HashSet<i32> = (0..).collect(); // Infinite iter\n    |                               ^^^^^^^^^^^^^^^"}, {"sha": "72591f12baf852811efbc511a1ee7cf965929fe7", "filename": "tests/ui/infinite_loop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,3 @@\n-#![allow(clippy::trivially_copy_pass_by_ref)]\n-\n fn fn_val(i: i32) -> i32 {\n     unimplemented!()\n }"}, {"sha": "1fcb29eff18e41c05d34873d57bfe2ab77dd7f48", "filename": "tests/ui/infinite_loop.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,5 @@\n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:23:11\n+  --> $DIR/infinite_loop.rs:21:11\n    |\n LL |     while y < 10 {\n    |           ^^^^^^\n@@ -8,71 +8,71 @@ LL |     while y < 10 {\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:28:11\n+  --> $DIR/infinite_loop.rs:26:11\n    |\n LL |     while y < 10 && x < 3 {\n    |           ^^^^^^^^^^^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:35:11\n+  --> $DIR/infinite_loop.rs:33:11\n    |\n LL |     while !cond {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:79:11\n+  --> $DIR/infinite_loop.rs:77:11\n    |\n LL |     while i < 3 {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:84:11\n+  --> $DIR/infinite_loop.rs:82:11\n    |\n LL |     while i < 3 && j > 0 {\n    |           ^^^^^^^^^^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:88:11\n+  --> $DIR/infinite_loop.rs:86:11\n    |\n LL |     while i < 3 {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:103:11\n+  --> $DIR/infinite_loop.rs:101:11\n    |\n LL |     while i < 3 {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:108:11\n+  --> $DIR/infinite_loop.rs:106:11\n    |\n LL |     while i < 3 {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:174:15\n+  --> $DIR/infinite_loop.rs:172:15\n    |\n LL |         while self.count < n {\n    |               ^^^^^^^^^^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:182:11\n+  --> $DIR/infinite_loop.rs:180:11\n    |\n LL |     while y < 10 {\n    |           ^^^^^^\n@@ -82,7 +82,7 @@ LL |     while y < 10 {\n    = help: rewrite it as `if cond { loop { } }`\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:189:11\n+  --> $DIR/infinite_loop.rs:187:11\n    |\n LL |     while y < 10 {\n    |           ^^^^^^"}, {"sha": "2fe32c6ace875c8790f8e302d44d6401cd1a8d79", "filename": "tests/ui/integer_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finteger_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finteger_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finteger_arithmetic.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -5,8 +5,7 @@\n     clippy::shadow_unrelated,\n     clippy::no_effect,\n     clippy::unnecessary_operation,\n-    clippy::op_ref,\n-    clippy::trivially_copy_pass_by_ref\n+    clippy::op_ref\n )]\n \n #[rustfmt::skip]"}, {"sha": "64c44d7ecc7b06bfa3e3d321c8304726a11f3c5b", "filename": "tests/ui/integer_arithmetic.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finteger_arithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Finteger_arithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finteger_arithmetic.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,104 +1,104 @@\n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:15:5\n+  --> $DIR/integer_arithmetic.rs:14:5\n    |\n LL |     1 + i;\n    |     ^^^^^\n    |\n    = note: `-D clippy::integer-arithmetic` implied by `-D warnings`\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:16:5\n+  --> $DIR/integer_arithmetic.rs:15:5\n    |\n LL |     i * 2;\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:17:5\n+  --> $DIR/integer_arithmetic.rs:16:5\n    |\n LL | /     1 %\n LL | |     i / 2; // no error, this is part of the expression in the preceding line\n    | |_________^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:19:5\n+  --> $DIR/integer_arithmetic.rs:18:5\n    |\n LL |     i - 2 + 2 - i;\n    |     ^^^^^^^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:20:5\n+  --> $DIR/integer_arithmetic.rs:19:5\n    |\n LL |     -i;\n    |     ^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:32:5\n+  --> $DIR/integer_arithmetic.rs:31:5\n    |\n LL |     i += 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:33:5\n+  --> $DIR/integer_arithmetic.rs:32:5\n    |\n LL |     i -= 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:34:5\n+  --> $DIR/integer_arithmetic.rs:33:5\n    |\n LL |     i *= 2;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:35:5\n+  --> $DIR/integer_arithmetic.rs:34:5\n    |\n LL |     i /= 2;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:36:5\n+  --> $DIR/integer_arithmetic.rs:35:5\n    |\n LL |     i %= 2;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:82:5\n+  --> $DIR/integer_arithmetic.rs:81:5\n    |\n LL |     3 + &1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:83:5\n+  --> $DIR/integer_arithmetic.rs:82:5\n    |\n LL |     &3 + 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:84:5\n+  --> $DIR/integer_arithmetic.rs:83:5\n    |\n LL |     &3 + &1;\n    |     ^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:89:5\n+  --> $DIR/integer_arithmetic.rs:88:5\n    |\n LL |     a + x\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:93:5\n+  --> $DIR/integer_arithmetic.rs:92:5\n    |\n LL |     x + y\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:97:5\n+  --> $DIR/integer_arithmetic.rs:96:5\n    |\n LL |     x + y\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:101:5\n+  --> $DIR/integer_arithmetic.rs:100:5\n    |\n LL |     (&x + &y)\n    |     ^^^^^^^^^"}, {"sha": "5d659611533a5c42450e753a88317af8828f7eeb", "filename": "tests/ui/large_enum_variant.stderr", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Flarge_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Flarge_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -10,18 +10,6 @@ help: consider boxing the large fields to reduce the total size of the enum\n LL |     B(Box<[i32; 8000]>),\n    |       ^^^^^^^^^^^^^^^^\n \n-error: large size difference between variants\n-  --> $DIR/large_enum_variant.rs:18:5\n-   |\n-LL |     C(T, [i32; 8000]),\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-help: consider boxing the large fields to reduce the total size of the enum\n-  --> $DIR/large_enum_variant.rs:18:5\n-   |\n-LL |     C(T, [i32; 8000]),\n-   |     ^^^^^^^^^^^^^^^^^\n-\n error: large size difference between variants\n   --> $DIR/large_enum_variant.rs:31:5\n    |\n@@ -33,18 +21,6 @@ help: consider boxing the large fields to reduce the total size of the enum\n LL |     ContainingLargeEnum(Box<LargeEnum>),\n    |                         ^^^^^^^^^^^^^^\n \n-error: large size difference between variants\n-  --> $DIR/large_enum_variant.rs:34:5\n-   |\n-LL |     ContainingMoreThanOneField(i32, [i32; 8000], [i32; 9500]),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider boxing the large fields to reduce the total size of the enum\n-  --> $DIR/large_enum_variant.rs:34:5\n-   |\n-LL |     ContainingMoreThanOneField(i32, [i32; 8000], [i32; 9500]),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: large size difference between variants\n   --> $DIR/large_enum_variant.rs:41:5\n    |\n@@ -68,5 +44,5 @@ help: consider boxing the large fields to reduce the total size of the enum\n LL |     StructLikeLarge2 { x: Box<[i32; 8000]> },\n    |                           ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "27dda606067aa7fa8760316cb468c33111d4254e", "filename": "tests/ui/let_underscore_must_use.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Flet_underscore_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Flet_underscore_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_must_use.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -88,4 +88,7 @@ fn main() {\n     let _ = a.map(|_| ());\n \n     let _ = a;\n+\n+    #[allow(clippy::let_underscore_must_use)]\n+    let _ = a;\n }"}, {"sha": "beaef79a340afad2c371352f2dda86f385c95d8c", "filename": "tests/ui/lint_without_lint_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_without_lint_pass.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -2,7 +2,7 @@\n #![feature(rustc_private)]\n \n #[macro_use]\n-extern crate rustc;\n+extern crate rustc_middle;\n #[macro_use]\n extern crate rustc_session;\n extern crate rustc_lint;"}, {"sha": "7880cf36415ff87acc8ba620ceb7712ec8038e35", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -6,6 +6,7 @@\n     clippy::blacklisted_name,\n     clippy::default_trait_access,\n     clippy::missing_docs_in_private_items,\n+    clippy::missing_safety_doc,\n     clippy::non_ascii_literal,\n     clippy::new_without_default,\n     clippy::needless_pass_by_value,\n@@ -83,6 +84,20 @@ impl T {\n     }\n }\n \n+pub struct T1;\n+\n+impl T1 {\n+    // Shouldn't trigger lint as it is unsafe.\n+    pub unsafe fn add(self, rhs: T1) -> T1 {\n+        self\n+    }\n+\n+    // Should not trigger lint since this is an async function.\n+    pub async fn next(&mut self) -> Option<T1> {\n+        None\n+    }\n+}\n+\n struct Lt<'a> {\n     foo: &'a u32,\n }"}, {"sha": "01cf487ac148e77f519563bac11d9a1da659e858", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,5 @@\n error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n-  --> $DIR/methods.rs:38:5\n+  --> $DIR/methods.rs:39:5\n    |\n LL | /     pub fn add(self, other: T) -> T {\n LL | |         self\n@@ -9,7 +9,7 @@ LL | |     }\n    = note: `-D clippy::should-implement-trait` implied by `-D warnings`\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/methods.rs:154:5\n+  --> $DIR/methods.rs:169:5\n    |\n LL | /     fn new() -> i32 {\n LL | |         0\n@@ -19,7 +19,7 @@ LL | |     }\n    = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:173:13\n+  --> $DIR/methods.rs:188:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -28,7 +28,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:176:13\n+  --> $DIR/methods.rs:191:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -38,33 +38,33 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:193:22\n+  --> $DIR/methods.rs:208:22\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x < 0)`\n    |\n    = note: `-D clippy::search-is-some` implied by `-D warnings`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:194:20\n+  --> $DIR/methods.rs:209:20\n    |\n LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| **y == x)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:195:20\n+  --> $DIR/methods.rs:210:20\n    |\n LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| x == 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:196:22\n+  --> $DIR/methods.rs:211:22\n    |\n LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x == 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:199:13\n+  --> $DIR/methods.rs:214:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -74,13 +74,13 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:205:22\n+  --> $DIR/methods.rs:220:22\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:208:13\n+  --> $DIR/methods.rs:223:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -90,13 +90,13 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:214:22\n+  --> $DIR/methods.rs:229:22\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:217:13\n+  --> $DIR/methods.rs:232:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^"}, {"sha": "9556f6f82cc6313d39125487819635ce0b0eed7f", "filename": "tests/ui/must_use_candidates.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fmust_use_candidates.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fmust_use_candidates.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_candidates.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![feature(never_type)]\n-#![allow(unused_mut)]\n+#![allow(unused_mut, clippy::redundant_allocation)]\n #![warn(clippy::must_use_candidate)]\n use std::rc::Rc;\n use std::sync::atomic::{AtomicBool, Ordering};"}, {"sha": "3732422017104ccaf788e747de9c07ac99eb758a", "filename": "tests/ui/must_use_candidates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fmust_use_candidates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fmust_use_candidates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_candidates.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![feature(never_type)]\n-#![allow(unused_mut)]\n+#![allow(unused_mut, clippy::redundant_allocation)]\n #![warn(clippy::must_use_candidate)]\n use std::rc::Rc;\n use std::sync::atomic::{AtomicBool, Ordering};"}, {"sha": "a9a04c8f56b945ca7c0e94b35a211119f7799a2d", "filename": "tests/ui/mut_from_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fmut_from_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fmut_from_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused, clippy::trivially_copy_pass_by_ref)]\n+#![allow(unused)]\n #![warn(clippy::mut_from_ref)]\n \n struct Foo;"}, {"sha": "2d227e6654c36c0f45e6801205dd173f271d546a", "filename": "tests/ui/mut_key.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_key.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,3 @@\n-#![allow(clippy::implicit_hasher)]\n-\n use std::collections::{HashMap, HashSet};\n use std::hash::{Hash, Hasher};\n use std::sync::atomic::{AtomicUsize, Ordering::Relaxed};"}, {"sha": "8d6a259c7e385f307ada794ea2e9ca0f06f01853", "filename": "tests/ui/mut_key.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fmut_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fmut_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_key.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,25 +1,25 @@\n error: mutable key type\n-  --> $DIR/mut_key.rs:29:32\n+  --> $DIR/mut_key.rs:27:32\n    |\n LL | fn should_not_take_this_arg(m: &mut HashMap<Key, usize>, _n: usize) -> HashSet<Key> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(clippy::mutable_key_type)]` on by default\n \n error: mutable key type\n-  --> $DIR/mut_key.rs:29:72\n+  --> $DIR/mut_key.rs:27:72\n    |\n LL | fn should_not_take_this_arg(m: &mut HashMap<Key, usize>, _n: usize) -> HashSet<Key> {\n    |                                                                        ^^^^^^^^^^^^\n \n error: mutable key type\n-  --> $DIR/mut_key.rs:30:5\n+  --> $DIR/mut_key.rs:28:5\n    |\n LL |     let _other: HashMap<Key, bool> = HashMap::new();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: mutable key type\n-  --> $DIR/mut_key.rs:49:22\n+  --> $DIR/mut_key.rs:47:22\n    |\n LL | fn tuples_bad<U>(_m: &mut HashMap<(Key, U), bool>) {}\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "73906121c402efba40d6f13c9cc696d7f669c628", "filename": "tests/ui/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_reference.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused_variables, clippy::trivially_copy_pass_by_ref)]\n+#![allow(unused_variables)]\n \n fn takes_an_immutable_reference(a: &i32) {}\n fn takes_a_mutable_reference(a: &mut i32) {}"}, {"sha": "5ae4a0e79b99d39a9ca852111c09ed7ed313fa51", "filename": "tests/ui/needless_borrow.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fneedless_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fneedless_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(clippy::needless_borrowed_reference)]\n \n-#[allow(clippy::trivially_copy_pass_by_ref)]\n fn x(y: &i32) -> i32 {\n     *y\n }"}, {"sha": "1e281316c8a39c10e053d2d529896c93b19b1400", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(clippy::needless_borrowed_reference)]\n \n-#[allow(clippy::trivially_copy_pass_by_ref)]\n fn x(y: &i32) -> i32 {\n     *y\n }"}, {"sha": "0bfeda7914db70182e39f4eef6d960251d208a8c", "filename": "tests/ui/needless_borrow.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,25 +1,25 @@\n error: this expression borrows a reference that is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:15:15\n+  --> $DIR/needless_borrow.rs:14:15\n    |\n LL |     let c = x(&&a);\n    |               ^^^ help: change this to: `&a`\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow.rs:22:17\n+  --> $DIR/needless_borrow.rs:21:17\n    |\n LL |     if let Some(ref cake) = Some(&5) {}\n    |                 ^^^^^^^^ help: change this to: `cake`\n \n error: this expression borrows a reference that is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:29:15\n+  --> $DIR/needless_borrow.rs:28:15\n    |\n LL |         46 => &&a,\n    |               ^^^ help: change this to: `&a`\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow.rs:52:31\n+  --> $DIR/needless_borrow.rs:51:31\n    |\n LL |     let _ = v.iter().filter(|&ref a| a.is_empty());\n    |                               ^^^^^ help: change this to: `a`"}, {"sha": "913cd004f19f4bd70941f49127930ec902573669", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::needless_lifetimes)]\n-#![allow(dead_code, clippy::needless_pass_by_value, clippy::trivially_copy_pass_by_ref)]\n+#![allow(dead_code, clippy::needless_pass_by_value)]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n "}, {"sha": "35aaecc9ac42372ff23bb38e17837ed659351ecb", "filename": "tests/ui/new_ret_no_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::new_ret_no_self)]\n-#![allow(dead_code, clippy::trivially_copy_pass_by_ref)]\n+#![allow(dead_code)]\n \n fn main() {}\n "}, {"sha": "076692e6445175da398e3ae788c803c5b57ba901", "filename": "tests/ui/option_as_ref_deref.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Foption_as_ref_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Foption_as_ref_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -35,4 +35,7 @@ fn main() {\n     let _ = Some(1_usize).as_ref().map(|x| vc[*x].as_str()); // should not be linted\n \n     let _: Option<&str> = Some(&String::new()).as_ref().map(|x| x.as_str()); // should not be linted\n+\n+    let _ = opt.as_deref();\n+    let _ = opt.as_deref_mut();\n }"}, {"sha": "3bf5f715f8339525b8ad547d75eea77a96b0c1f2", "filename": "tests/ui/option_as_ref_deref.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -38,4 +38,7 @@ fn main() {\n     let _ = Some(1_usize).as_ref().map(|x| vc[*x].as_str()); // should not be linted\n \n     let _: Option<&str> = Some(&String::new()).as_ref().map(|x| x.as_str()); // should not be linted\n+\n+    let _ = opt.as_ref().map(|x| &**x);\n+    let _ = opt.as_mut().map(|x| &mut **x);\n }"}, {"sha": "a106582a633232b4bfcdc95c78308440d2480137", "filename": "tests/ui/option_as_ref_deref.stderr", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Foption_as_ref_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Foption_as_ref_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,12 +1,12 @@\n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n+error: called `.as_ref().map(Deref::deref)` on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:13:13\n    |\n LL |     let _ = opt.clone().as_ref().map(Deref::deref).map(str::len);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.clone().as_deref()`\n    |\n    = note: `-D clippy::option-as-ref-deref` implied by `-D warnings`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n+error: called `.as_ref().map(Deref::deref)` on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:16:13\n    |\n LL |       let _ = opt.clone()\n@@ -16,77 +16,89 @@ LL | |             Deref::deref\n LL | |         )\n    | |_________^ help: try using as_deref instead: `opt.clone().as_deref()`\n \n-error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n+error: called `.as_mut().map(DerefMut::deref_mut)` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n   --> $DIR/option_as_ref_deref.rs:22:13\n    |\n LL |     let _ = opt.as_mut().map(DerefMut::deref_mut);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n+error: called `.as_ref().map(String::as_str)` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:24:13\n    |\n LL |     let _ = opt.as_ref().map(String::as_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n+error: called `.as_ref().map(|x| x.as_str())` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:25:13\n    |\n LL |     let _ = opt.as_ref().map(|x| x.as_str());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n-error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n+error: called `.as_mut().map(String::as_mut_str)` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n   --> $DIR/option_as_ref_deref.rs:26:13\n    |\n LL |     let _ = opt.as_mut().map(String::as_mut_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n \n-error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n+error: called `.as_mut().map(|x| x.as_mut_str())` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n   --> $DIR/option_as_ref_deref.rs:27:13\n    |\n LL |     let _ = opt.as_mut().map(|x| x.as_mut_str());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(CString::new(vec![]).unwrap()).as_deref()` instead\n+error: called `.as_ref().map(CString::as_c_str)` on an Option value. This can be done more directly by calling `Some(CString::new(vec![]).unwrap()).as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:28:13\n    |\n LL |     let _ = Some(CString::new(vec![]).unwrap()).as_ref().map(CString::as_c_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(CString::new(vec![]).unwrap()).as_deref()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(OsString::new()).as_deref()` instead\n+error: called `.as_ref().map(OsString::as_os_str)` on an Option value. This can be done more directly by calling `Some(OsString::new()).as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:29:13\n    |\n LL |     let _ = Some(OsString::new()).as_ref().map(OsString::as_os_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(OsString::new()).as_deref()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(PathBuf::new()).as_deref()` instead\n+error: called `.as_ref().map(PathBuf::as_path)` on an Option value. This can be done more directly by calling `Some(PathBuf::new()).as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:30:13\n    |\n LL |     let _ = Some(PathBuf::new()).as_ref().map(PathBuf::as_path);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(PathBuf::new()).as_deref()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref()` instead\n+error: called `.as_ref().map(Vec::as_slice)` on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:31:13\n    |\n LL |     let _ = Some(Vec::<()>::new()).as_ref().map(Vec::as_slice);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(Vec::<()>::new()).as_deref()`\n \n-error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref_mut()` instead\n+error: called `.as_mut().map(Vec::as_mut_slice)` on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref_mut()` instead\n   --> $DIR/option_as_ref_deref.rs:32:13\n    |\n LL |     let _ = Some(Vec::<()>::new()).as_mut().map(Vec::as_mut_slice);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `Some(Vec::<()>::new()).as_deref_mut()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n+error: called `.as_ref().map(|x| x.deref())` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:34:13\n    |\n LL |     let _ = opt.as_ref().map(|x| x.deref());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n-error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.clone().as_deref_mut()` instead\n+error: called `.as_mut().map(|x| x.deref_mut())` on an Option value. This can be done more directly by calling `opt.clone().as_deref_mut()` instead\n   --> $DIR/option_as_ref_deref.rs:35:13\n    |\n LL |     let _ = opt.clone().as_mut().map(|x| x.deref_mut()).map(|x| x.len());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.clone().as_deref_mut()`\n \n-error: aborting due to 14 previous errors\n+error: called `.as_ref().map(|x| &**x)` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n+  --> $DIR/option_as_ref_deref.rs:42:13\n+   |\n+LL |     let _ = opt.as_ref().map(|x| &**x);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n+\n+error: called `.as_mut().map(|x| &mut **x)` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n+  --> $DIR/option_as_ref_deref.rs:43:13\n+   |\n+LL |     let _ = opt.as_mut().map(|x| &mut **x);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n+\n+error: aborting due to 16 previous errors\n "}, {"sha": "904c50e14039a4067cce2899b7b1f5a7e7232fb0", "filename": "tests/ui/option_option.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Foption_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Foption_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_option.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,3 +1,5 @@\n+#![deny(clippy::option_option)]\n+\n fn input(_: Option<Option<u8>>) {}\n \n fn output() -> Option<Option<u8>> {"}, {"sha": "79db186d7ea77128aef51c329c99711a4f0e8752", "filename": "tests/ui/option_option.stderr", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Foption_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Foption_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_option.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,55 +1,59 @@\n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:1:13\n+  --> $DIR/option_option.rs:3:13\n    |\n LL | fn input(_: Option<Option<u8>>) {}\n    |             ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::option-option` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/option_option.rs:1:9\n+   |\n+LL | #![deny(clippy::option_option)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:3:16\n+  --> $DIR/option_option.rs:5:16\n    |\n LL | fn output() -> Option<Option<u8>> {\n    |                ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:7:27\n+  --> $DIR/option_option.rs:9:27\n    |\n LL | fn output_nested() -> Vec<Option<Option<u8>>> {\n    |                           ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:12:30\n+  --> $DIR/option_option.rs:14:30\n    |\n LL | fn output_nested_nested() -> Option<Option<Option<u8>>> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:17:8\n+  --> $DIR/option_option.rs:19:8\n    |\n LL |     x: Option<Option<u8>>,\n    |        ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:21:23\n+  --> $DIR/option_option.rs:23:23\n    |\n LL |     fn struct_fn() -> Option<Option<u8>> {\n    |                       ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:27:22\n+  --> $DIR/option_option.rs:29:22\n    |\n LL |     fn trait_fn() -> Option<Option<u8>>;\n    |                      ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:31:11\n+  --> $DIR/option_option.rs:33:11\n    |\n LL |     Tuple(Option<Option<u8>>),\n    |           ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:32:17\n+  --> $DIR/option_option.rs:34:17\n    |\n LL |     Struct { x: Option<Option<u8>> },\n    |                 ^^^^^^^^^^^^^^^^^^"}, {"sha": "8ea03fe42616c3339b09befee410f49e71fcd30a", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -53,9 +53,7 @@ fn or_fun_call() {\n     with_default_type.unwrap_or_default();\n \n     let with_vec = Some(vec![1]);\n-    with_vec.unwrap_or_else(|| vec![]);\n-\n-    // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n+    with_vec.unwrap_or_default();\n \n     let without_default = Some(Foo);\n     without_default.unwrap_or_else(Foo::new);"}, {"sha": "7599b945a9137ed63a21cc06ad70aeed0f5f6532", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -55,8 +55,6 @@ fn or_fun_call() {\n     let with_vec = Some(vec![1]);\n     with_vec.unwrap_or(vec![]);\n \n-    // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n-\n     let without_default = Some(Foo);\n     without_default.unwrap_or(Foo::new());\n "}, {"sha": "96d55771e6cef8c236e26836d2564c0a297a1ca3", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -42,38 +42,38 @@ error: use of `unwrap_or` followed by a call to `default`\n LL |     with_default_type.unwrap_or(u64::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n-error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:56:14\n+error: use of `unwrap_or` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:56:5\n    |\n LL |     with_vec.unwrap_or(vec![]);\n-   |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| vec![])`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:61:21\n+  --> $DIR/or_fun_call.rs:59:21\n    |\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:64:19\n+  --> $DIR/or_fun_call.rs:62:19\n    |\n LL |     map.entry(42).or_insert(String::new());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:67:21\n+  --> $DIR/or_fun_call.rs:65:21\n    |\n LL |     btree.entry(42).or_insert(String::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:70:21\n+  --> $DIR/or_fun_call.rs:68:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:95:35\n+  --> $DIR/or_fun_call.rs:93:35\n    |\n LL |     let _ = Some(\"a\".to_string()).or(Some(\"b\".to_string()));\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(\"b\".to_string()))`"}, {"sha": "999a19b289e1816c3ec20af42aa8dc39fa3bbd23", "filename": "tests/ui/outer_expn_data.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fouter_expn_data.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fouter_expn_data.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fouter_expn_data.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -3,9 +3,9 @@\n #![deny(clippy::internal)]\n #![feature(rustc_private)]\n \n-extern crate rustc;\n extern crate rustc_hir;\n extern crate rustc_lint;\n+extern crate rustc_middle;\n #[macro_use]\n extern crate rustc_session;\n use rustc_hir::Expr;"}, {"sha": "5405d475d1accd4b1a49dd4bfea06bcf5464b3dc", "filename": "tests/ui/outer_expn_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fouter_expn_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fouter_expn_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fouter_expn_data.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -3,9 +3,9 @@\n #![deny(clippy::internal)]\n #![feature(rustc_private)]\n \n-extern crate rustc;\n extern crate rustc_hir;\n extern crate rustc_lint;\n+extern crate rustc_middle;\n #[macro_use]\n extern crate rustc_session;\n use rustc_hir::Expr;"}, {"sha": "266358334587d0a6edb4a94e328e77d1a6515c93", "filename": "tests/ui/redundant_allocation.fixed", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fredundant_allocation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fredundant_allocation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -0,0 +1,48 @@\n+// run-rustfix\n+#![warn(clippy::all)]\n+#![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n+#![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n+\n+use std::boxed::Box;\n+use std::rc::Rc;\n+\n+pub struct MyStruct {}\n+\n+pub struct SubT<T> {\n+    foo: T,\n+}\n+\n+pub enum MyEnum {\n+    One,\n+    Two,\n+}\n+\n+// Rc<&T>\n+\n+pub fn test1<T>(foo: &T) {}\n+\n+pub fn test2(foo: &MyStruct) {}\n+\n+pub fn test3(foo: &MyEnum) {}\n+\n+pub fn test4_neg(foo: Rc<SubT<&usize>>) {}\n+\n+// Rc<Rc<T>>\n+\n+pub fn test5(a: Rc<bool>) {}\n+\n+// Rc<Box<T>>\n+\n+pub fn test6(a: Box<bool>) {}\n+\n+// Box<&T>\n+\n+pub fn test7<T>(foo: &T) {}\n+\n+pub fn test8(foo: &MyStruct) {}\n+\n+pub fn test9(foo: &MyEnum) {}\n+\n+pub fn test10_neg(foo: Box<SubT<&usize>>) {}\n+\n+fn main() {}"}, {"sha": "677b3e56d4dcebe5ea58a9996b5cac7c5332cddc", "filename": "tests/ui/redundant_allocation.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -0,0 +1,48 @@\n+// run-rustfix\n+#![warn(clippy::all)]\n+#![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n+#![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n+\n+use std::boxed::Box;\n+use std::rc::Rc;\n+\n+pub struct MyStruct {}\n+\n+pub struct SubT<T> {\n+    foo: T,\n+}\n+\n+pub enum MyEnum {\n+    One,\n+    Two,\n+}\n+\n+// Rc<&T>\n+\n+pub fn test1<T>(foo: Rc<&T>) {}\n+\n+pub fn test2(foo: Rc<&MyStruct>) {}\n+\n+pub fn test3(foo: Rc<&MyEnum>) {}\n+\n+pub fn test4_neg(foo: Rc<SubT<&usize>>) {}\n+\n+// Rc<Rc<T>>\n+\n+pub fn test5(a: Rc<Rc<bool>>) {}\n+\n+// Rc<Box<T>>\n+\n+pub fn test6(a: Rc<Box<bool>>) {}\n+\n+// Box<&T>\n+\n+pub fn test7<T>(foo: Box<&T>) {}\n+\n+pub fn test8(foo: Box<&MyStruct>) {}\n+\n+pub fn test9(foo: Box<&MyEnum>) {}\n+\n+pub fn test10_neg(foo: Box<SubT<&usize>>) {}\n+\n+fn main() {}"}, {"sha": "eaa57ce3024b604243166b7e78bcf1d58dc6f536", "filename": "tests/ui/redundant_allocation.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fredundant_allocation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fredundant_allocation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -0,0 +1,52 @@\n+error: usage of `Rc<&T>`\n+  --> $DIR/redundant_allocation.rs:22:22\n+   |\n+LL | pub fn test1<T>(foo: Rc<&T>) {}\n+   |                      ^^^^^^ help: try: `&T`\n+   |\n+   = note: `-D clippy::redundant-allocation` implied by `-D warnings`\n+\n+error: usage of `Rc<&T>`\n+  --> $DIR/redundant_allocation.rs:24:19\n+   |\n+LL | pub fn test2(foo: Rc<&MyStruct>) {}\n+   |                   ^^^^^^^^^^^^^ help: try: `&MyStruct`\n+\n+error: usage of `Rc<&T>`\n+  --> $DIR/redundant_allocation.rs:26:19\n+   |\n+LL | pub fn test3(foo: Rc<&MyEnum>) {}\n+   |                   ^^^^^^^^^^^ help: try: `&MyEnum`\n+\n+error: usage of `Rc<Rc<T>>`\n+  --> $DIR/redundant_allocation.rs:32:17\n+   |\n+LL | pub fn test5(a: Rc<Rc<bool>>) {}\n+   |                 ^^^^^^^^^^^^ help: try: `Rc<bool>`\n+\n+error: usage of `Rc<Box<T>>`\n+  --> $DIR/redundant_allocation.rs:36:17\n+   |\n+LL | pub fn test6(a: Rc<Box<bool>>) {}\n+   |                 ^^^^^^^^^^^^^ help: try: `Box<bool>`\n+\n+error: usage of `Box<&T>`\n+  --> $DIR/redundant_allocation.rs:40:22\n+   |\n+LL | pub fn test7<T>(foo: Box<&T>) {}\n+   |                      ^^^^^^^ help: try: `&T`\n+\n+error: usage of `Box<&T>`\n+  --> $DIR/redundant_allocation.rs:42:19\n+   |\n+LL | pub fn test8(foo: Box<&MyStruct>) {}\n+   |                   ^^^^^^^^^^^^^^ help: try: `&MyStruct`\n+\n+error: usage of `Box<&T>`\n+  --> $DIR/redundant_allocation.rs:44:19\n+   |\n+LL | pub fn test9(foo: Box<&MyEnum>) {}\n+   |                   ^^^^^^^^^^^^ help: try: `&MyEnum`\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "764c10a6d398feaa87957ed4bdbe7f353f7fb657", "filename": "tests/ui/redundant_clone.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fredundant_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fredundant_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -51,6 +51,7 @@ fn main() {\n     cannot_move_from_type_with_drop();\n     borrower_propagation();\n     not_consumed();\n+    issue_5405();\n }\n \n #[derive(Clone)]\n@@ -160,3 +161,12 @@ fn not_consumed() {\n         println!(\"{}\", x);\n     }\n }\n+\n+#[allow(clippy::clone_on_copy)]\n+fn issue_5405() {\n+    let a: [String; 1] = [String::from(\"foo\")];\n+    let _b: String = a[0].clone();\n+\n+    let c: [usize; 2] = [2, 3];\n+    let _d: usize = c[1].clone();\n+}"}, {"sha": "839747b131d77da22c7d559d0133f7006bd2d246", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -51,6 +51,7 @@ fn main() {\n     cannot_move_from_type_with_drop();\n     borrower_propagation();\n     not_consumed();\n+    issue_5405();\n }\n \n #[derive(Clone)]\n@@ -160,3 +161,12 @@ fn not_consumed() {\n         println!(\"{}\", x);\n     }\n }\n+\n+#[allow(clippy::clone_on_copy)]\n+fn issue_5405() {\n+    let a: [String; 1] = [String::from(\"foo\")];\n+    let _b: String = a[0].clone();\n+\n+    let c: [usize; 2] = [2, 3];\n+    let _d: usize = c[1].clone();\n+}"}, {"sha": "eced198283ce8f5db36ef3fa7c4c2f93d38ec859", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -108,61 +108,61 @@ LL |     let _t = tup.0.clone();\n    |              ^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:60:22\n+  --> $DIR/redundant_clone.rs:61:22\n    |\n LL |         (a.clone(), a.clone())\n    |                      ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:60:21\n+  --> $DIR/redundant_clone.rs:61:21\n    |\n LL |         (a.clone(), a.clone())\n    |                     ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:120:15\n+  --> $DIR/redundant_clone.rs:121:15\n    |\n LL |     let _s = s.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:120:14\n+  --> $DIR/redundant_clone.rs:121:14\n    |\n LL |     let _s = s.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:121:15\n+  --> $DIR/redundant_clone.rs:122:15\n    |\n LL |     let _t = t.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:121:14\n+  --> $DIR/redundant_clone.rs:122:14\n    |\n LL |     let _t = t.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:131:19\n+  --> $DIR/redundant_clone.rs:132:19\n    |\n LL |         let _f = f.clone();\n    |                   ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:131:18\n+  --> $DIR/redundant_clone.rs:132:18\n    |\n LL |         let _f = f.clone();\n    |                  ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:143:14\n+  --> $DIR/redundant_clone.rs:144:14\n    |\n LL |     let y = x.clone().join(\"matthias\");\n    |              ^^^^^^^^ help: remove this\n    |\n note: cloned value is neither consumed nor mutated\n-  --> $DIR/redundant_clone.rs:143:13\n+  --> $DIR/redundant_clone.rs:144:13\n    |\n LL |     let y = x.clone().join(\"matthias\");\n    |             ^^^^^^^^^"}, {"sha": "538fa1ed9cb021341511fbe33f59fb34acc5df29", "filename": "tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -2,7 +2,7 @@\n \n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::unit_arg, clippy::let_unit_value, unused_must_use)]\n+#![allow(clippy::unit_arg, unused_must_use)]\n \n fn main() {\n     Ok::<i32, i32>(42).is_ok();"}, {"sha": "34d2cd62e54e92db0439cf44d2765c4900b2593d", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -2,7 +2,7 @@\n \n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::unit_arg, clippy::let_unit_value, unused_must_use)]\n+#![allow(clippy::unit_arg, unused_must_use)]\n \n fn main() {\n     if let Ok(_) = Ok::<i32, i32>(42) {}"}, {"sha": "13fbb6e2a6eedb86cbb0c185e8ab307a81553853", "filename": "tests/ui/rename.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -5,7 +5,6 @@\n // allow the new lint name here, to test if the new name works\n #![allow(clippy::module_name_repetitions)]\n #![allow(clippy::new_without_default)]\n-#![allow(clippy::cognitive_complexity)]\n #![allow(clippy::redundant_static_lifetimes)]\n // warn for the old lint name here, to test if the renaming worked\n #![warn(clippy::cognitive_complexity)]"}, {"sha": "cbd3b1e91666aa385bedc7c97daff6298d456343", "filename": "tests/ui/rename.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -5,7 +5,6 @@\n // allow the new lint name here, to test if the new name works\n #![allow(clippy::module_name_repetitions)]\n #![allow(clippy::new_without_default)]\n-#![allow(clippy::cognitive_complexity)]\n #![allow(clippy::redundant_static_lifetimes)]\n // warn for the old lint name here, to test if the renaming worked\n #![warn(clippy::cyclomatic_complexity)]"}, {"sha": "a9e803946041e9e8cd269e0fc147f16716c52263", "filename": "tests/ui/rename.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,31 +1,31 @@\n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:11:9\n+  --> $DIR/rename.rs:10:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:13:8\n+  --> $DIR/rename.rs:12:8\n    |\n LL | #[warn(clippy::stutter)]\n    |        ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:16:8\n+  --> $DIR/rename.rs:15:8\n    |\n LL | #[warn(clippy::new_without_default_derive)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:19:8\n+  --> $DIR/rename.rs:18:8\n    |\n LL | #[warn(clippy::const_static_lifetime)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:11:9\n+  --> $DIR/rename.rs:10:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`"}, {"sha": "108474408e0f87e33e2450f775bd56b26a92d6e4", "filename": "tests/ui/replace_consts.fixed", "status": "removed", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/680cc2f25848721eca3a2332c48b13c02e027dbc/tests%2Fui%2Freplace_consts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/680cc2f25848721eca3a2332c48b13c02e027dbc/tests%2Fui%2Freplace_consts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.fixed?ref=680cc2f25848721eca3a2332c48b13c02e027dbc", "patch": "@@ -1,99 +0,0 @@\n-// run-rustfix\n-#![feature(integer_atomics)]\n-#![allow(unused_variables, clippy::blacklisted_name)]\n-#![deny(clippy::replace_consts)]\n-\n-use std::sync::atomic::*;\n-\n-#[rustfmt::skip]\n-fn bad() {\n-    // Min\n-    { let foo = isize::min_value(); };\n-    { let foo = i8::min_value(); };\n-    { let foo = i16::min_value(); };\n-    { let foo = i32::min_value(); };\n-    { let foo = i64::min_value(); };\n-    { let foo = i128::min_value(); };\n-    { let foo = usize::min_value(); };\n-    { let foo = u8::min_value(); };\n-    { let foo = u16::min_value(); };\n-    { let foo = u32::min_value(); };\n-    { let foo = u64::min_value(); };\n-    { let foo = u128::min_value(); };\n-    // Max\n-    { let foo = isize::max_value(); };\n-    { let foo = i8::max_value(); };\n-    { let foo = i16::max_value(); };\n-    { let foo = i32::max_value(); };\n-    { let foo = i64::max_value(); };\n-    { let foo = i128::max_value(); };\n-    { let foo = usize::max_value(); };\n-    { let foo = u8::max_value(); };\n-    { let foo = u16::max_value(); };\n-    { let foo = u32::max_value(); };\n-    { let foo = u64::max_value(); };\n-    { let foo = u128::max_value(); };\n-}\n-\n-#[rustfmt::skip]\n-fn good() {\n-    // Atomic\n-    { let foo = AtomicBool::new(false); };\n-    { let foo = AtomicIsize::new(0); };\n-    { let foo = AtomicI8::new(0); };\n-    { let foo = AtomicI16::new(0); };\n-    { let foo = AtomicI32::new(0); };\n-    { let foo = AtomicI64::new(0); };\n-    { let foo = AtomicUsize::new(0); };\n-    { let foo = AtomicU8::new(0); };\n-    { let foo = AtomicU16::new(0); };\n-    { let foo = AtomicU32::new(0); };\n-    { let foo = AtomicU64::new(0); };\n-    // Min\n-    { let foo = isize::min_value(); };\n-    { let foo = i8::min_value(); };\n-    { let foo = i16::min_value(); };\n-    { let foo = i32::min_value(); };\n-    { let foo = i64::min_value(); };\n-    { let foo = i128::min_value(); };\n-    { let foo = usize::min_value(); };\n-    { let foo = u8::min_value(); };\n-    { let foo = u16::min_value(); };\n-    { let foo = u32::min_value(); };\n-    { let foo = u64::min_value(); };\n-    { let foo = u128::min_value(); };\n-    // Max\n-    { let foo = isize::max_value(); };\n-    { let foo = i8::max_value(); };\n-    { let foo = i16::max_value(); };\n-    { let foo = i32::max_value(); };\n-    { let foo = i64::max_value(); };\n-    { let foo = i128::max_value(); };\n-    { let foo = usize::max_value(); };\n-    { let foo = u8::max_value(); };\n-    { let foo = u16::max_value(); };\n-    { let foo = u32::max_value(); };\n-    { let foo = u64::max_value(); };\n-    { let foo = u128::max_value(); };\n-\n-    let x = 42;\n-\n-    let _ = match x {\n-        std::i8::MIN => -1,\n-        1..=std::i8::MAX => 1,\n-        _ => 0\n-    };\n-\n-    let _ = if let std::i8::MIN = x {\n-        -1\n-    } else if let 1..=std::i8::MAX = x {\n-        1\n-    } else {\n-        0\n-    };\n-}\n-\n-fn main() {\n-    bad();\n-    good();\n-}"}, {"sha": "dae3422a35f002287bda2bc59e59245639175157", "filename": "tests/ui/replace_consts.rs", "status": "removed", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/680cc2f25848721eca3a2332c48b13c02e027dbc/tests%2Fui%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680cc2f25848721eca3a2332c48b13c02e027dbc/tests%2Fui%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.rs?ref=680cc2f25848721eca3a2332c48b13c02e027dbc", "patch": "@@ -1,99 +0,0 @@\n-// run-rustfix\n-#![feature(integer_atomics)]\n-#![allow(unused_variables, clippy::blacklisted_name)]\n-#![deny(clippy::replace_consts)]\n-\n-use std::sync::atomic::*;\n-\n-#[rustfmt::skip]\n-fn bad() {\n-    // Min\n-    { let foo = std::isize::MIN; };\n-    { let foo = std::i8::MIN; };\n-    { let foo = std::i16::MIN; };\n-    { let foo = std::i32::MIN; };\n-    { let foo = std::i64::MIN; };\n-    { let foo = std::i128::MIN; };\n-    { let foo = std::usize::MIN; };\n-    { let foo = std::u8::MIN; };\n-    { let foo = std::u16::MIN; };\n-    { let foo = std::u32::MIN; };\n-    { let foo = std::u64::MIN; };\n-    { let foo = std::u128::MIN; };\n-    // Max\n-    { let foo = std::isize::MAX; };\n-    { let foo = std::i8::MAX; };\n-    { let foo = std::i16::MAX; };\n-    { let foo = std::i32::MAX; };\n-    { let foo = std::i64::MAX; };\n-    { let foo = std::i128::MAX; };\n-    { let foo = std::usize::MAX; };\n-    { let foo = std::u8::MAX; };\n-    { let foo = std::u16::MAX; };\n-    { let foo = std::u32::MAX; };\n-    { let foo = std::u64::MAX; };\n-    { let foo = std::u128::MAX; };\n-}\n-\n-#[rustfmt::skip]\n-fn good() {\n-    // Atomic\n-    { let foo = AtomicBool::new(false); };\n-    { let foo = AtomicIsize::new(0); };\n-    { let foo = AtomicI8::new(0); };\n-    { let foo = AtomicI16::new(0); };\n-    { let foo = AtomicI32::new(0); };\n-    { let foo = AtomicI64::new(0); };\n-    { let foo = AtomicUsize::new(0); };\n-    { let foo = AtomicU8::new(0); };\n-    { let foo = AtomicU16::new(0); };\n-    { let foo = AtomicU32::new(0); };\n-    { let foo = AtomicU64::new(0); };\n-    // Min\n-    { let foo = isize::min_value(); };\n-    { let foo = i8::min_value(); };\n-    { let foo = i16::min_value(); };\n-    { let foo = i32::min_value(); };\n-    { let foo = i64::min_value(); };\n-    { let foo = i128::min_value(); };\n-    { let foo = usize::min_value(); };\n-    { let foo = u8::min_value(); };\n-    { let foo = u16::min_value(); };\n-    { let foo = u32::min_value(); };\n-    { let foo = u64::min_value(); };\n-    { let foo = u128::min_value(); };\n-    // Max\n-    { let foo = isize::max_value(); };\n-    { let foo = i8::max_value(); };\n-    { let foo = i16::max_value(); };\n-    { let foo = i32::max_value(); };\n-    { let foo = i64::max_value(); };\n-    { let foo = i128::max_value(); };\n-    { let foo = usize::max_value(); };\n-    { let foo = u8::max_value(); };\n-    { let foo = u16::max_value(); };\n-    { let foo = u32::max_value(); };\n-    { let foo = u64::max_value(); };\n-    { let foo = u128::max_value(); };\n-\n-    let x = 42;\n-\n-    let _ = match x {\n-        std::i8::MIN => -1,\n-        1..=std::i8::MAX => 1,\n-        _ => 0\n-    };\n-\n-    let _ = if let std::i8::MIN = x {\n-        -1\n-    } else if let 1..=std::i8::MAX = x {\n-        1\n-    } else {\n-        0\n-    };\n-}\n-\n-fn main() {\n-    bad();\n-    good();\n-}"}, {"sha": "458f63953efadd4c1df8e3ca4ce94f6d96704dc2", "filename": "tests/ui/replace_consts.stderr", "status": "removed", "additions": 0, "deletions": 152, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/680cc2f25848721eca3a2332c48b13c02e027dbc/tests%2Fui%2Freplace_consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/680cc2f25848721eca3a2332c48b13c02e027dbc/tests%2Fui%2Freplace_consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.stderr?ref=680cc2f25848721eca3a2332c48b13c02e027dbc", "patch": "@@ -1,152 +0,0 @@\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:11:17\n-   |\n-LL |     { let foo = std::isize::MIN; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `isize::min_value()`\n-   |\n-note: the lint level is defined here\n-  --> $DIR/replace_consts.rs:4:9\n-   |\n-LL | #![deny(clippy::replace_consts)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:12:17\n-   |\n-LL |     { let foo = std::i8::MIN; };\n-   |                 ^^^^^^^^^^^^ help: try this: `i8::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:13:17\n-   |\n-LL |     { let foo = std::i16::MIN; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `i16::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:14:17\n-   |\n-LL |     { let foo = std::i32::MIN; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `i32::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:15:17\n-   |\n-LL |     { let foo = std::i64::MIN; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `i64::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:16:17\n-   |\n-LL |     { let foo = std::i128::MIN; };\n-   |                 ^^^^^^^^^^^^^^ help: try this: `i128::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:17:17\n-   |\n-LL |     { let foo = std::usize::MIN; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `usize::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:18:17\n-   |\n-LL |     { let foo = std::u8::MIN; };\n-   |                 ^^^^^^^^^^^^ help: try this: `u8::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:19:17\n-   |\n-LL |     { let foo = std::u16::MIN; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `u16::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:20:17\n-   |\n-LL |     { let foo = std::u32::MIN; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `u32::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:21:17\n-   |\n-LL |     { let foo = std::u64::MIN; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `u64::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:22:17\n-   |\n-LL |     { let foo = std::u128::MIN; };\n-   |                 ^^^^^^^^^^^^^^ help: try this: `u128::min_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:24:17\n-   |\n-LL |     { let foo = std::isize::MAX; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `isize::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:25:17\n-   |\n-LL |     { let foo = std::i8::MAX; };\n-   |                 ^^^^^^^^^^^^ help: try this: `i8::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:26:17\n-   |\n-LL |     { let foo = std::i16::MAX; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `i16::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:27:17\n-   |\n-LL |     { let foo = std::i32::MAX; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `i32::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:28:17\n-   |\n-LL |     { let foo = std::i64::MAX; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `i64::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:29:17\n-   |\n-LL |     { let foo = std::i128::MAX; };\n-   |                 ^^^^^^^^^^^^^^ help: try this: `i128::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:30:17\n-   |\n-LL |     { let foo = std::usize::MAX; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `usize::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:31:17\n-   |\n-LL |     { let foo = std::u8::MAX; };\n-   |                 ^^^^^^^^^^^^ help: try this: `u8::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:32:17\n-   |\n-LL |     { let foo = std::u16::MAX; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `u16::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:33:17\n-   |\n-LL |     { let foo = std::u32::MAX; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `u32::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:34:17\n-   |\n-LL |     { let foo = std::u64::MAX; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `u64::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:35:17\n-   |\n-LL |     { let foo = std::u128::MAX; };\n-   |                 ^^^^^^^^^^^^^^ help: try this: `u128::max_value()`\n-\n-error: aborting due to 24 previous errors\n-"}, {"sha": "331531b5165f61dce075c4d800d9d806a7dba3e3", "filename": "tests/ui/result_map_or_into_option.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fresult_map_or_into_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fresult_map_or_into_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_or_into_option.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+\n+#![warn(clippy::result_map_or_into_option)]\n+\n+fn main() {\n+    let opt: Result<u32, &str> = Ok(1);\n+    let _ = opt.ok();\n+\n+    let rewrap = |s: u32| -> Option<u32> { Some(s) };\n+\n+    // A non-Some `f` arg should not emit the lint\n+    let opt: Result<u32, &str> = Ok(1);\n+    let _ = opt.map_or(None, rewrap);\n+\n+    // A non-Some `f` closure where the argument is not used as the\n+    // return should not emit the lint\n+    let opt: Result<u32, &str> = Ok(1);\n+    opt.map_or(None, |_x| Some(1));\n+}"}, {"sha": "3058480e2ad3d935c114a144ea504e495d033f7f", "filename": "tests/ui/result_map_or_into_option.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fresult_map_or_into_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fresult_map_or_into_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_or_into_option.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+\n+#![warn(clippy::result_map_or_into_option)]\n+\n+fn main() {\n+    let opt: Result<u32, &str> = Ok(1);\n+    let _ = opt.map_or(None, Some);\n+\n+    let rewrap = |s: u32| -> Option<u32> { Some(s) };\n+\n+    // A non-Some `f` arg should not emit the lint\n+    let opt: Result<u32, &str> = Ok(1);\n+    let _ = opt.map_or(None, rewrap);\n+\n+    // A non-Some `f` closure where the argument is not used as the\n+    // return should not emit the lint\n+    let opt: Result<u32, &str> = Ok(1);\n+    opt.map_or(None, |_x| Some(1));\n+}"}, {"sha": "febf32147d132d3e163e13080e025ccd31d30263", "filename": "tests/ui/result_map_or_into_option.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fresult_map_or_into_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fresult_map_or_into_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_or_into_option.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -0,0 +1,10 @@\n+error: called `map_or(None, Some)` on a `Result` value. This can be done more directly by calling `ok()` instead\n+  --> $DIR/result_map_or_into_option.rs:7:13\n+   |\n+LL |     let _ = opt.map_or(None, Some);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: try using `ok` instead: `opt.ok()`\n+   |\n+   = note: `-D clippy::result-map-or-into-option` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "b197c609d7bfcc7b347c8c8213a556a7365d8e09", "filename": "tests/ui/result_map_unit_fn_unfixable.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fresult_map_unit_fn_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fresult_map_unit_fn_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_unfixable.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -2,6 +2,10 @@\n #![feature(never_type)]\n #![allow(unused)]\n \n+struct HasResult {\n+    field: Result<usize, usize>,\n+}\n+\n fn do_nothing<T>(_: T) {}\n \n fn diverge<T>(_: T) -> ! {\n@@ -14,6 +18,8 @@ fn plus_one(value: usize) -> usize {\n \n #[rustfmt::skip]\n fn result_map_unit_fn() {\n+    let x = HasResult { field: Ok(10) };\n+\n     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n \n     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });"}, {"sha": "b23cc608621d0fa3880ac27766d86d6349c5a76d", "filename": "tests/ui/result_map_unit_fn_unfixable.stderr", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,27 +1,58 @@\n-error[E0425]: cannot find value `x` in this scope\n-  --> $DIR/result_map_unit_fn_unfixable.rs:17:5\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+  --> $DIR/result_map_unit_fn_unfixable.rs:23:5\n    |\n LL |     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n-   |     ^ not found in this scope\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Ok(value) = x.field { ... }`\n+   |\n+   = note: `-D clippy::result-map-unit-fn` implied by `-D warnings`\n \n-error[E0425]: cannot find value `x` in this scope\n-  --> $DIR/result_map_unit_fn_unfixable.rs:19:5\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+  --> $DIR/result_map_unit_fn_unfixable.rs:25:5\n    |\n LL |     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n-   |     ^ not found in this scope\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Ok(value) = x.field { ... }`\n \n-error[E0425]: cannot find value `x` in this scope\n-  --> $DIR/result_map_unit_fn_unfixable.rs:23:5\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+  --> $DIR/result_map_unit_fn_unfixable.rs:29:5\n    |\n-LL |     x.field.map(|value| {\n-   |     ^ not found in this scope\n+LL |        x.field.map(|value| {\n+   |   _____^\n+   |  |_____|\n+   | ||\n+LL | ||         do_nothing(value);\n+LL | ||         do_nothing(value)\n+LL | ||     });\n+   | ||______^- help: try this: `if let Ok(value) = x.field { ... }`\n+   | |_______|\n+   | \n \n-error[E0425]: cannot find value `x` in this scope\n-  --> $DIR/result_map_unit_fn_unfixable.rs:27:5\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+  --> $DIR/result_map_unit_fn_unfixable.rs:33:5\n    |\n LL |     x.field.map(|value| { do_nothing(value); do_nothing(value); });\n-   |     ^ not found in this scope\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Ok(value) = x.field { ... }`\n+\n+error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type\n+  --> $DIR/result_map_unit_fn_unfixable.rs:37:5\n+   |\n+LL |     \"12\".parse::<i32>().map(diverge);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Ok(a) = \"12\".parse::<i32>() { diverge(a) }`\n+\n+error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type\n+  --> $DIR/result_map_unit_fn_unfixable.rs:43:5\n+   |\n+LL |     y.map(do_nothing);\n+   |     ^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Ok(_y) = y { do_nothing(_y) }`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0425`."}, {"sha": "1c55af5dfb673536605d3443bc135b4d49209e65", "filename": "tests/ui/single_match.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -81,4 +81,15 @@ fn single_match_know_enum() {\n     }\n }\n \n-fn main() {}\n+macro_rules! single_match {\n+    ($num:literal) => {\n+        match $num {\n+            15 => println!(\"15\"),\n+            _ => (),\n+        }\n+    };\n+}\n+\n+fn main() {\n+    single_match!(5);\n+}"}, {"sha": "34193be0b75e40b978ae7661c3ab944fe1fd5b90", "filename": "tests/ui/single_match_else.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fsingle_match_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fsingle_match_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match_else.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -18,4 +18,18 @@ fn unwrap_addr() -> Option<&'static ExprNode> {\n     }\n }\n \n-fn main() {}\n+macro_rules! unwrap_addr {\n+    ($expression:expr) => {\n+        match $expression {\n+            ExprNode::ExprAddrOf => Some(&NODE),\n+            _ => {\n+                let x = 5;\n+                None\n+            },\n+        }\n+    };\n+}\n+\n+fn main() {\n+    unwrap_addr!(ExprNode::Unicorns);\n+}"}, {"sha": "1f5b981188706fd579b77f761c5563a79bdaa7f6", "filename": "tests/ui/suspicious_arithmetic_impl.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_arithmetic_impl.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::suspicious_arithmetic_impl)]\n-use std::ops::{Add, AddAssign, Div, Mul, Sub};\n+use std::ops::{Add, AddAssign, BitOrAssign, Div, DivAssign, Mul, MulAssign, Sub};\n \n #[derive(Copy, Clone)]\n struct Foo(u32);\n@@ -18,6 +18,25 @@ impl AddAssign for Foo {\n     }\n }\n \n+impl BitOrAssign for Foo {\n+    fn bitor_assign(&mut self, other: Foo) {\n+        let idx = other.0;\n+        self.0 |= 1 << idx; // OK: BinOpKind::Shl part of AssignOp as child node\n+    }\n+}\n+\n+impl MulAssign for Foo {\n+    fn mul_assign(&mut self, other: Foo) {\n+        self.0 /= other.0;\n+    }\n+}\n+\n+impl DivAssign for Foo {\n+    fn div_assign(&mut self, other: Foo) {\n+        self.0 /= other.0; // OK: BinOpKind::Div == DivAssign\n+    }\n+}\n+\n impl Mul for Foo {\n     type Output = Foo;\n "}, {"sha": "7e42d72c30b2cefd6503f6315ac316e0e372053f", "filename": "tests/ui/suspicious_arithmetic_impl.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -14,5 +14,11 @@ LL |         *self = *self - other;\n    |\n    = note: `#[deny(clippy::suspicious_op_assign_impl)]` on by default\n \n-error: aborting due to 2 previous errors\n+error: Suspicious use of binary operator in `MulAssign` impl\n+  --> $DIR/suspicious_arithmetic_impl.rs:30:16\n+   |\n+LL |         self.0 /= other.0;\n+   |                ^^\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "316426f1cf181788dbc48dba7e69f244f4908531", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,6 +1,7 @@\n // normalize-stderr-test \"\\(\\d+ byte\\)\" -> \"(N byte)\"\n // normalize-stderr-test \"\\(limit: \\d+ byte\\)\" -> \"(limit: N byte)\"\n \n+#![deny(clippy::trivially_copy_pass_by_ref)]\n #![allow(\n     clippy::many_single_char_names,\n     clippy::blacklisted_name,"}, {"sha": "be0914e4a7947f7197002ee591009b0c79fa8abd", "filename": "tests/ui/trivially_copy_pass_by_ref.stderr", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,91 +1,95 @@\n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:11\n+  --> $DIR/trivially_copy_pass_by_ref.rs:51:11\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |           ^^^^ help: consider passing by value instead: `u32`\n    |\n-   = note: `-D clippy::trivially-copy-pass-by-ref` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/trivially_copy_pass_by_ref.rs:4:9\n+   |\n+LL | #![deny(clippy::trivially_copy_pass_by_ref)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:20\n+  --> $DIR/trivially_copy_pass_by_ref.rs:51:20\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |                    ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:29\n+  --> $DIR/trivially_copy_pass_by_ref.rs:51:29\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |                             ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:12\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:12\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |            ^^^^^ help: consider passing by value instead: `self`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:22\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:22\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                      ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:31\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:31\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                               ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:40\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:40\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                                        ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:59:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:60:16\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:59:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:60:25\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:59:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:60:34\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:71:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:72:16\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:71:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:72:25\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:71:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:72:34\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:75:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:76:34\n    |\n LL |     fn trait_method(&self, _foo: &Foo);\n    |                                  ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:79:37\n+  --> $DIR/trivially_copy_pass_by_ref.rs:80:37\n    |\n LL |     fn trait_method2(&self, _color: &Color);\n    |                                     ^^^^^^ help: consider passing by value instead: `Color`"}, {"sha": "f42b884e0f0e546ce0bb95dd5793fbb85dda4e34", "filename": "tests/ui/uninit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Funinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Funinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -2,7 +2,6 @@\n \n use std::mem::MaybeUninit;\n \n-#[allow(clippy::let_unit_value)]\n fn main() {\n     let _: usize = unsafe { MaybeUninit::uninit().assume_init() };\n "}, {"sha": "a37233ecddaee0dd4181bb95e80ecc347d9210e2", "filename": "tests/ui/uninit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Funinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Funinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,13 +1,13 @@\n error: this call for this type may be undefined behavior\n-  --> $DIR/uninit.rs:7:29\n+  --> $DIR/uninit.rs:6:29\n    |\n LL |     let _: usize = unsafe { MaybeUninit::uninit().assume_init() };\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(clippy::uninit_assumed_init)]` on by default\n \n error: this call for this type may be undefined behavior\n-  --> $DIR/uninit.rs:10:31\n+  --> $DIR/uninit.rs:9:31\n    |\n LL |     let _: [u8; 0] = unsafe { MaybeUninit::uninit().assume_init() };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a739cf7ad814eb8f399734e0acdc8db418244be7", "filename": "tests/ui/unit_arg.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Funit_arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Funit_arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::unit_arg)]\n-#![allow(clippy::no_effect, unused_must_use)]\n+#![allow(unused_braces, clippy::no_effect, unused_must_use)]\n \n use std::fmt::Debug;\n "}, {"sha": "d90c49f79de623de06b623664d540e3f2498d4d0", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::unit_arg)]\n-#![allow(clippy::no_effect, unused_must_use)]\n+#![allow(unused_braces, clippy::no_effect, unused_must_use)]\n \n use std::fmt::Debug;\n "}, {"sha": "7a1d031fac4d515d92ab4203297836f86cef5065", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -13,6 +13,10 @@ impl SomeTrait for SomeImpl {}\n \n fn main() {}\n \n+fn is_ascii(ch: char) -> bool {\n+    ch.is_ascii()\n+}\n+\n fn clone_on_copy() {\n     42.clone();\n \n@@ -27,6 +31,11 @@ fn clone_on_copy() {\n     let mut x = 43;\n     let _ = &x.clone(); // ok, getting a ref\n     'a'.clone().make_ascii_uppercase(); // ok, clone and then mutate\n+    is_ascii('z'.clone());\n+\n+    // Issue #5436\n+    let mut vec = Vec::new();\n+    vec.push(42.clone());\n }\n \n fn clone_on_ref_ptr() {"}, {"sha": "7b34ff9e3153395f6d59f12d8ed6432f85ecc435", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,69 +1,81 @@\n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:17:5\n+  --> $DIR/unnecessary_clone.rs:21:5\n    |\n LL |     42.clone();\n    |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n    |\n    = note: `-D clippy::clone-on-copy` implied by `-D warnings`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:21:5\n+  --> $DIR/unnecessary_clone.rs:25:5\n    |\n LL |     (&42).clone();\n    |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:24:5\n+  --> $DIR/unnecessary_clone.rs:28:5\n    |\n LL |     rc.borrow().clone();\n    |     ^^^^^^^^^^^^^^^^^^^ help: try dereferencing it: `*rc.borrow()`\n \n+error: using `clone` on a `Copy` type\n+  --> $DIR/unnecessary_clone.rs:34:14\n+   |\n+LL |     is_ascii('z'.clone());\n+   |              ^^^^^^^^^^^ help: try removing the `clone` call: `'z'`\n+\n+error: using `clone` on a `Copy` type\n+  --> $DIR/unnecessary_clone.rs:38:14\n+   |\n+LL |     vec.push(42.clone());\n+   |              ^^^^^^^^^^ help: try removing the `clone` call: `42`\n+\n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:39:5\n+  --> $DIR/unnecessary_clone.rs:48:5\n    |\n LL |     rc.clone();\n    |     ^^^^^^^^^^ help: try this: `Rc::<bool>::clone(&rc)`\n    |\n    = note: `-D clippy::clone-on-ref-ptr` implied by `-D warnings`\n \n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:42:5\n+  --> $DIR/unnecessary_clone.rs:51:5\n    |\n LL |     arc.clone();\n    |     ^^^^^^^^^^^ help: try this: `Arc::<bool>::clone(&arc)`\n \n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:45:5\n+  --> $DIR/unnecessary_clone.rs:54:5\n    |\n LL |     rcweak.clone();\n    |     ^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&rcweak)`\n \n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:48:5\n+  --> $DIR/unnecessary_clone.rs:57:5\n    |\n LL |     arc_weak.clone();\n    |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&arc_weak)`\n \n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:52:33\n+  --> $DIR/unnecessary_clone.rs:61:33\n    |\n LL |     let _: Arc<dyn SomeTrait> = x.clone();\n    |                                 ^^^^^^^^^ help: try this: `Arc::<SomeImpl>::clone(&x)`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:56:5\n+  --> $DIR/unnecessary_clone.rs:65:5\n    |\n LL |     t.clone();\n    |     ^^^^^^^^^ help: try removing the `clone` call: `t`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:58:5\n+  --> $DIR/unnecessary_clone.rs:67:5\n    |\n LL |     Some(t).clone();\n    |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n \n error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:64:22\n+  --> $DIR/unnecessary_clone.rs:73:22\n    |\n LL |     let z: &Vec<_> = y.clone();\n    |                      ^^^^^^^^^\n@@ -79,10 +91,10 @@ LL |     let z: &Vec<_> = &std::vec::Vec<i32>::clone(y);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:100:20\n+  --> $DIR/unnecessary_clone.rs:109:20\n    |\n LL |         let _: E = a.clone();\n    |                    ^^^^^^^^^ help: try dereferencing it: `*****a`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 14 previous errors\n "}, {"sha": "7a4bbdda1ab273879245443c17e6275c5a240737", "filename": "tests/ui/unused_self.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_self.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -42,6 +42,17 @@ mod unused_self_allow {\n     impl B {\n         fn unused_self_move(self) {}\n     }\n+\n+    struct C {}\n+\n+    #[allow(clippy::unused_self)]\n+    impl C {\n+        #[warn(clippy::unused_self)]\n+        fn some_fn((): ()) {}\n+\n+        // shouldn't trigger\n+        fn unused_self_move(self) {}\n+    }\n }\n \n mod used_self {"}, {"sha": "e356f13d087b1fcdeffbb7a3c4f15d52b55b183e", "filename": "tests/ui/useless_asref.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fuseless_asref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fuseless_asref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n \n #![deny(clippy::useless_asref)]\n-#![allow(clippy::trivially_copy_pass_by_ref)]\n \n use std::fmt::Debug;\n "}, {"sha": "2a80291f5d837b4614de012ac60f9fb1d2b9b256", "filename": "tests/ui/useless_asref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fuseless_asref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fuseless_asref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n \n #![deny(clippy::useless_asref)]\n-#![allow(clippy::trivially_copy_pass_by_ref)]\n \n use std::fmt::Debug;\n "}, {"sha": "5876b54aca8f0e8347995ae6c6ead836768b6a7c", "filename": "tests/ui/useless_asref.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fuseless_asref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fuseless_asref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,5 @@\n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:44:18\n+  --> $DIR/useless_asref.rs:43:18\n    |\n LL |         foo_rstr(rstr.as_ref());\n    |                  ^^^^^^^^^^^^^ help: try this: `rstr`\n@@ -11,61 +11,61 @@ LL | #![deny(clippy::useless_asref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:46:20\n+  --> $DIR/useless_asref.rs:45:20\n    |\n LL |         foo_rslice(rslice.as_ref());\n    |                    ^^^^^^^^^^^^^^^ help: try this: `rslice`\n \n error: this call to `as_mut` does nothing\n-  --> $DIR/useless_asref.rs:50:21\n+  --> $DIR/useless_asref.rs:49:21\n    |\n LL |         foo_mrslice(mrslice.as_mut());\n    |                     ^^^^^^^^^^^^^^^^ help: try this: `mrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:52:20\n+  --> $DIR/useless_asref.rs:51:20\n    |\n LL |         foo_rslice(mrslice.as_ref());\n    |                    ^^^^^^^^^^^^^^^^ help: try this: `mrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:59:20\n+  --> $DIR/useless_asref.rs:58:20\n    |\n LL |         foo_rslice(rrrrrslice.as_ref());\n    |                    ^^^^^^^^^^^^^^^^^^^ help: try this: `rrrrrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:61:18\n+  --> $DIR/useless_asref.rs:60:18\n    |\n LL |         foo_rstr(rrrrrstr.as_ref());\n    |                  ^^^^^^^^^^^^^^^^^ help: try this: `rrrrrstr`\n \n error: this call to `as_mut` does nothing\n-  --> $DIR/useless_asref.rs:66:21\n+  --> $DIR/useless_asref.rs:65:21\n    |\n LL |         foo_mrslice(mrrrrrslice.as_mut());\n    |                     ^^^^^^^^^^^^^^^^^^^^ help: try this: `mrrrrrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:68:20\n+  --> $DIR/useless_asref.rs:67:20\n    |\n LL |         foo_rslice(mrrrrrslice.as_ref());\n    |                    ^^^^^^^^^^^^^^^^^^^^ help: try this: `mrrrrrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:72:16\n+  --> $DIR/useless_asref.rs:71:16\n    |\n LL |     foo_rrrrmr((&&&&MoreRef).as_ref());\n    |                ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&&&&MoreRef)`\n \n error: this call to `as_mut` does nothing\n-  --> $DIR/useless_asref.rs:122:13\n+  --> $DIR/useless_asref.rs:121:13\n    |\n LL |     foo_mrt(mrt.as_mut());\n    |             ^^^^^^^^^^^^ help: try this: `mrt`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:124:12\n+  --> $DIR/useless_asref.rs:123:12\n    |\n LL |     foo_rt(mrt.as_ref());\n    |            ^^^^^^^^^^^^ help: try this: `mrt`"}, {"sha": "b222e2f7976d5a0b953fbeee44669608efff24ff", "filename": "tests/ui/useless_attribute.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fuseless_attribute.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fuseless_attribute.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.fixed?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -11,7 +11,7 @@\n #[allow(unused_imports)]\n #[allow(unused_extern_crates)]\n #[macro_use]\n-extern crate rustc;\n+extern crate rustc_middle;\n \n #[macro_use]\n extern crate proc_macro_derive;"}, {"sha": "3422eace4ab97d81613ab2d27a3082fb174cd2ea", "filename": "tests/ui/useless_attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fuseless_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fuseless_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -11,7 +11,7 @@\n #[allow(unused_imports)]\n #[allow(unused_extern_crates)]\n #[macro_use]\n-extern crate rustc;\n+extern crate rustc_middle;\n \n #[macro_use]\n extern crate proc_macro_derive;"}, {"sha": "c91d96ee18a31972c1856196c149856634d8dbba", "filename": "tests/ui/vtable_address_comparisons.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fvtable_address_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fvtable_address_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvtable_address_comparisons.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -0,0 +1,42 @@\n+use std::fmt::Debug;\n+use std::ptr;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+#[warn(clippy::vtable_address_comparisons)]\n+fn main() {\n+    let a: *const dyn Debug = &1 as &dyn Debug;\n+    let b: *const dyn Debug = &1 as &dyn Debug;\n+\n+    // These should fail:\n+    let _ = a == b;\n+    let _ = a != b;\n+    let _ = a < b;\n+    let _ = a <= b;\n+    let _ = a > b;\n+    let _ = a >= b;\n+    ptr::eq(a, b);\n+\n+    let a = &1 as &dyn Debug;\n+    let b = &1 as &dyn Debug;\n+    ptr::eq(a, b);\n+\n+    let a: Rc<dyn Debug> = Rc::new(1);\n+    Rc::ptr_eq(&a, &a);\n+\n+    let a: Arc<dyn Debug> = Arc::new(1);\n+    Arc::ptr_eq(&a, &a);\n+\n+    // These should be fine:\n+    let a = &1;\n+    ptr::eq(a, a);\n+\n+    let a = Rc::new(1);\n+    Rc::ptr_eq(&a, &a);\n+\n+    let a = Arc::new(1);\n+    Arc::ptr_eq(&a, &a);\n+\n+    let a: &[u8] = b\"\";\n+    ptr::eq(a, a);\n+}"}, {"sha": "76bd57217d784323c9a86f2b2881f033daad7e13", "filename": "tests/ui/vtable_address_comparisons.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fvtable_address_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fvtable_address_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvtable_address_comparisons.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -0,0 +1,83 @@\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:12:13\n+   |\n+LL |     let _ = a == b;\n+   |             ^^^^^^\n+   |\n+   = note: `-D clippy::vtable-address-comparisons` implied by `-D warnings`\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:13:13\n+   |\n+LL |     let _ = a != b;\n+   |             ^^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:14:13\n+   |\n+LL |     let _ = a < b;\n+   |             ^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:15:13\n+   |\n+LL |     let _ = a <= b;\n+   |             ^^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:16:13\n+   |\n+LL |     let _ = a > b;\n+   |             ^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:17:13\n+   |\n+LL |     let _ = a >= b;\n+   |             ^^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:18:5\n+   |\n+LL |     ptr::eq(a, b);\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:22:5\n+   |\n+LL |     ptr::eq(a, b);\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:25:5\n+   |\n+LL |     Rc::ptr_eq(&a, &a);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:28:5\n+   |\n+LL |     Arc::ptr_eq(&a, &a);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "84dfc34db1509d4ca1d9e16e3a8d8eeb0bcb3988", "filename": "tests/ui/while_let_on_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::while_let_on_iterator)]\n-#![allow(clippy::never_loop, clippy::cognitive_complexity)]\n+#![allow(clippy::never_loop)]\n \n fn main() {\n     let mut iter = 1..20;"}, {"sha": "99652ca4470c2a47530812a3b78f0e2381f68ec3", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -1,6 +1,6 @@\n #![warn(clippy::wrong_self_convention)]\n #![warn(clippy::wrong_pub_self_convention)]\n-#![allow(dead_code, clippy::trivially_copy_pass_by_ref)]\n+#![allow(dead_code)]\n \n fn main() {}\n "}, {"sha": "d0e88f3c5a546612a4cb5843fc41c0f2bce24410", "filename": "tests/ui/zero_div_zero.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fzero_div_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/tests%2Fui%2Fzero_div_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.stderr?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -13,7 +13,7 @@ LL |     let nan = 0.0 / 0.0;\n    |               ^^^^^^^^^\n    |\n    = note: `-D clippy::zero-divided-by-zero` implied by `-D warnings`\n-   = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+   = help: Consider using `f64::NAN` if you would like a constant representing NaN\n \n error: equal expressions as operands to `/`\n   --> $DIR/zero_div_zero.rs:5:19\n@@ -27,7 +27,7 @@ error: constant division of `0.0` with `0.0` will always result in NaN\n LL |     let f64_nan = 0.0 / 0.0f64;\n    |                   ^^^^^^^^^^^^\n    |\n-   = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+   = help: Consider using `f64::NAN` if you would like a constant representing NaN\n \n error: equal expressions as operands to `/`\n   --> $DIR/zero_div_zero.rs:6:25\n@@ -41,7 +41,7 @@ error: constant division of `0.0` with `0.0` will always result in NaN\n LL |     let other_f64_nan = 0.0f64 / 0.0;\n    |                         ^^^^^^^^^^^^\n    |\n-   = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+   = help: Consider using `f64::NAN` if you would like a constant representing NaN\n \n error: equal expressions as operands to `/`\n   --> $DIR/zero_div_zero.rs:7:28\n@@ -55,7 +55,7 @@ error: constant division of `0.0` with `0.0` will always result in NaN\n LL |     let one_more_f64_nan = 0.0f64 / 0.0f64;\n    |                            ^^^^^^^^^^^^^^^\n    |\n-   = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+   = help: Consider using `f64::NAN` if you would like a constant representing NaN\n \n error: aborting due to 8 previous errors\n "}, {"sha": "6e810a349bfccb640adbabfd9ce97d258bfd91d0", "filename": "util/gh-pages/versions.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/util%2Fgh-pages%2Fversions.html", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/util%2Fgh-pages%2Fversions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fgh-pages%2Fversions.html?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -65,6 +65,7 @@ <h3 class=\"panel-title\">\n             $scope.versionOrder = function(v) {\n                 if (v === 'master') { return Infinity; }\n                 if (v === 'stable') { return Number.MAX_VALUE; }\n+                if (v === 'beta') { return Number.MAX_VALUE - 1; }\n \n                 return $scope.normalizeVersion(v)\n                     .split('.')"}, {"sha": "5cdc7313f543906479d47f95c6b5be5edd189cc5", "filename": "util/versions.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0441525690640ff374313fa5651a97829b0ea85a/util%2Fversions.py", "raw_url": "https://github.com/rust-lang/rust/raw/0441525690640ff374313fa5651a97829b0ea85a/util%2Fversions.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fversions.py?ref=0441525690640ff374313fa5651a97829b0ea85a", "patch": "@@ -12,6 +12,8 @@ def key(v):\n         return float('inf')\n     if v == 'stable':\n         return sys.maxsize\n+    if v == 'beta':\n+        return sys.maxsize - 1\n \n     v = v.replace('v', '').replace('rust-', '')\n "}]}