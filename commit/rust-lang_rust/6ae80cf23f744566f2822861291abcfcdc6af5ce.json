{"sha": "6ae80cf23f744566f2822861291abcfcdc6af5ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZTgwY2YyM2Y3NDQ1NjZmMjgyMjg2MTI5MWFiY2ZjZGM2YWY1Y2U=", "commit": {"author": {"name": "Jeremy Stucki", "email": "jeremy@myelin.ch", "date": "2019-06-21T16:51:27Z"}, "committer": {"name": "Jeremy Stucki", "email": "stucki.jeremy@gmail.com", "date": "2019-07-03T08:01:01Z"}, "message": "Remove needless lifetimes", "tree": {"sha": "5b36d5eb40c99ee9892b05e6c94e367d3f4d9302", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b36d5eb40c99ee9892b05e6c94e367d3f4d9302"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ae80cf23f744566f2822861291abcfcdc6af5ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEnLVrz+MJS3aQxZ9oj1SKWi7RP1gFAl0cYL0ACgkQj1SKWi7R\nP1jIoQ/+PnsoWXdSjkRHkZAZoApxLGzAZTqPfod3UdKBS3Nvtgog0sKLXa/ch8C/\nnvrVBlxhtUtih9lEGLrn3o8gyWG7b3htgHwSRaye2KkGJC1TB7Lm2pEmU02/Hsvj\n0qfK/aW2upLCGDkqKfMoLUOIvV/FkN0p64q67p0ATVqm60BL4KLP8vpDSUE2xNu8\nQ0+M2xEmyB72BIciVz6JlwLvYHsfdb2BnKsXOWO/JL8afRnvO4cbDBH2fsSlIwpW\nNw0MYOCxHf66JGDU5XAcififCp9vLGhaJvZWNsj6+conv5KzP4FxbBDF2L10bCaR\nkpQICXCFMs+GuvilaOZSXiKKGsGxQ3n12OXo5hD2As8cJUCHdoOnp9jAFDCgYq50\nXm3Yu9czMwIeBJe6Qm5BcIfjeJP9ZRC++qtDPGnzyEpG4v9FcbZ5VAaBIhL7GOpw\nXG2bhqQcQwBgTlvG+JYcMhx7gbgW4JlXLzIxLEF8+l+kYMfevY2NMTaSunU8OeOh\n+fNXyC8rhSoSlNztN8Ook/1Rtm1pURmR5yxKV5FlNmoVJrHlTJM8uKqZXJ3jxGu5\nn06w1wllGTubuJM1LQVx3g+o4F500kfmJFgX4a4MYNOx1+VLstkoRHNf7hkrdt/F\nIHXhRDTXMzQ/ieQQV4nsjd6xg5lV6/yN6li0g4EYT/Fk4IPtDkk=\n=EQum\n-----END PGP SIGNATURE-----", "payload": "tree 5b36d5eb40c99ee9892b05e6c94e367d3f4d9302\nparent 0477e072723438054ef8628ec33223cf94bacb69\nauthor Jeremy Stucki <jeremy@myelin.ch> 1561135887 +0200\ncommitter Jeremy Stucki <stucki.jeremy@gmail.com> 1562140861 +0200\n\nRemove needless lifetimes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae80cf23f744566f2822861291abcfcdc6af5ce", "html_url": "https://github.com/rust-lang/rust/commit/6ae80cf23f744566f2822861291abcfcdc6af5ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ae80cf23f744566f2822861291abcfcdc6af5ce/comments", "author": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0477e072723438054ef8628ec33223cf94bacb69", "url": "https://api.github.com/repos/rust-lang/rust/commits/0477e072723438054ef8628ec33223cf94bacb69", "html_url": "https://github.com/rust-lang/rust/commit/0477e072723438054ef8628ec33223cf94bacb69"}], "stats": {"total": 118, "additions": 59, "deletions": 59}, "files": [{"sha": "2932edd347af5868c6bfcd9646b965e8c15fff90", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -30,7 +30,7 @@ struct LoopScope {\n     break_index: CFGIndex,    // where to go on a `break`\n }\n \n-pub fn construct<'tcx>(tcx: TyCtxt<'tcx>, body: &hir::Body) -> CFG {\n+pub fn construct(tcx: TyCtxt<'_>, body: &hir::Body) -> CFG {\n     let mut graph = graph::Graph::new();\n     let entry = graph.add_node(CFGNodeData::Entry);\n "}, {"sha": "88fc7fbfad51ff7692481533906bf8bf6c03d03a", "filename": "src/librustc/cfg/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fmod.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -49,7 +49,7 @@ pub type CFGNode = graph::Node<CFGNodeData>;\n pub type CFGEdge = graph::Edge<CFGEdgeData>;\n \n impl CFG {\n-    pub fn new<'tcx>(tcx: TyCtxt<'tcx>, body: &hir::Body) -> CFG {\n+    pub fn new(tcx: TyCtxt<'_>, body: &hir::Body) -> CFG {\n         construct::construct(tcx, body)\n     }\n "}, {"sha": "b8c6c1e3723826a19e070d0bc8c1e254d101da7e", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -841,7 +841,7 @@ impl DepGraph {\n     //\n     // This method will only load queries that will end up in the disk cache.\n     // Other queries will not be executed.\n-    pub fn exec_cache_promotions<'tcx>(&self, tcx: TyCtxt<'tcx>) {\n+    pub fn exec_cache_promotions(&self, tcx: TyCtxt<'_>) {\n         let data = self.data.as_ref().unwrap();\n         for prev_index in data.colors.values.indices() {\n             match data.colors.get(prev_index) {"}, {"sha": "a098cd1761236f3171d7a1872b5e7013ccf4c566", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -354,7 +354,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                                          cmt: &mc::cmt_<'tcx>,\n                                          loan_region: ty::Region<'tcx>,\n                                          borrow_span: Span) {\n-        pub fn borrow_of_local_data<'tcx>(cmt: &mc::cmt_<'tcx>) -> bool {\n+        pub fn borrow_of_local_data(cmt: &mc::cmt_<'_>) -> bool {\n             match cmt.cat {\n                 // Borrows of static items is allowed\n                 Categorization::StaticItem => false,"}, {"sha": "8763a6bc066b35f1f4ba0df2b11efdbd9c902b5e", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -53,7 +53,7 @@ pub struct LoanDataFlowOperator;\n \n pub type LoanDataFlow<'tcx> = DataFlowContext<'tcx, LoanDataFlowOperator>;\n \n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_crate(tcx: TyCtxt<'_>) {\n     tcx.par_body_owners(|body_owner_def_id| {\n         tcx.ensure().borrowck(body_owner_def_id);\n     });\n@@ -73,7 +73,7 @@ pub struct AnalysisData<'tcx> {\n     pub move_data: move_data::FlowedMoveData<'tcx>,\n }\n \n-fn borrowck<'tcx>(tcx: TyCtxt<'tcx>, owner_def_id: DefId) -> &'tcx BorrowCheckResult {\n+fn borrowck(tcx: TyCtxt<'_>, owner_def_id: DefId) -> &BorrowCheckResult {\n     assert!(tcx.use_ast_borrowck() || tcx.migrate_borrowck());\n \n     debug!(\"borrowck(body_owner_def_id={:?})\", owner_def_id);"}, {"sha": "b135605cf02d765ab38bf780816a838c2cdcc99b", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -239,9 +239,9 @@ impl<'a> Drop for DiagnosticHandlers<'a> {\n     }\n }\n \n-unsafe extern \"C\" fn report_inline_asm<'a, 'b>(cgcx: &'a CodegenContext<LlvmCodegenBackend>,\n-                                               msg: &'b str,\n-                                               cookie: c_uint) {\n+unsafe extern \"C\" fn report_inline_asm(cgcx: &CodegenContext<LlvmCodegenBackend>,\n+                                       msg: &str,\n+                                       cookie: c_uint) {\n     cgcx.diag_emitter.inline_asm_error(cookie as u32, msg.to_owned());\n }\n "}, {"sha": "b64c9a60d97138d855bb04cc0b8e80a22c8119a6", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -46,10 +46,10 @@ pub fn crates_export_threshold(crate_types: &[config::CrateType]) -> SymbolExpor\n     }\n }\n \n-fn reachable_non_generics_provider<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn reachable_non_generics_provider(\n+    tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> &'tcx DefIdMap<SymbolExportLevel> {\n+) -> &DefIdMap<SymbolExportLevel> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n@@ -157,7 +157,7 @@ fn reachable_non_generics_provider<'tcx>(\n     tcx.arena.alloc(reachable_non_generics)\n }\n \n-fn is_reachable_non_generic_provider_local<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn is_reachable_non_generic_provider_local(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     let export_threshold = threshold(tcx);\n \n     if let Some(&level) = tcx.reachable_non_generics(def_id.krate).get(&def_id) {\n@@ -167,14 +167,14 @@ fn is_reachable_non_generic_provider_local<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefI\n     }\n }\n \n-fn is_reachable_non_generic_provider_extern<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn is_reachable_non_generic_provider_extern(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     tcx.reachable_non_generics(def_id.krate).contains_key(&def_id)\n }\n \n-fn exported_symbols_provider_local<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn exported_symbols_provider_local(\n+    tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> Arc<Vec<(ExportedSymbol<'tcx>, SymbolExportLevel)>> {\n+) -> Arc<Vec<(ExportedSymbol<'_>, SymbolExportLevel)>> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n@@ -273,10 +273,10 @@ fn exported_symbols_provider_local<'tcx>(\n     Arc::new(symbols)\n }\n \n-fn upstream_monomorphizations_provider<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn upstream_monomorphizations_provider(\n+    tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> &'tcx DefIdMap<FxHashMap<SubstsRef<'tcx>, CrateNum>> {\n+) -> &DefIdMap<FxHashMap<SubstsRef<'_>, CrateNum>> {\n     debug_assert!(cnum == LOCAL_CRATE);\n \n     let cnums = tcx.all_crate_nums(LOCAL_CRATE);\n@@ -322,10 +322,10 @@ fn upstream_monomorphizations_provider<'tcx>(\n     tcx.arena.alloc(instances)\n }\n \n-fn upstream_monomorphizations_for_provider<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn upstream_monomorphizations_for_provider(\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> Option<&'tcx FxHashMap<SubstsRef<'tcx>, CrateNum>> {\n+) -> Option<&FxHashMap<SubstsRef<'_>, CrateNum>> {\n     debug_assert!(!def_id.is_local());\n     tcx.upstream_monomorphizations(LOCAL_CRATE).get(&def_id)\n }"}, {"sha": "c9b1c0260e8c36e54b2821e3ac95e1de6b2854d9", "filename": "src/librustc_codegen_ssa/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Fmod.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -10,7 +10,7 @@ pub enum FunctionDebugContext<D> {\n }\n \n impl<D> FunctionDebugContext<D> {\n-    pub fn get_ref<'a>(&'a self, span: Span) -> &'a FunctionDebugContextData<D> {\n+    pub fn get_ref(&self, span: Span) -> &FunctionDebugContextData<D> {\n         match *self {\n             FunctionDebugContext::RegularContext(ref data) => data,\n             FunctionDebugContext::DebugInfoDisabled => {"}, {"sha": "e59085a9e3a95e3ea8fd8a7eb2cbe830e410aed7", "filename": "src/librustc_data_structures/graph/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -26,10 +26,10 @@ pub trait WithSuccessors: DirectedGraph\n where\n     Self: for<'graph> GraphSuccessors<'graph, Item = <Self as DirectedGraph>::Node>,\n {\n-    fn successors<'graph>(\n-        &'graph self,\n+    fn successors(\n+        &self,\n         node: Self::Node,\n-    ) -> <Self as GraphSuccessors<'graph>>::Iter;\n+    ) -> <Self as GraphSuccessors<'_>>::Iter;\n \n     fn depth_first_search(&self, from: Self::Node) -> iterate::DepthFirstSearch<'_, Self>\n     where\n@@ -48,10 +48,10 @@ pub trait WithPredecessors: DirectedGraph\n where\n     Self: for<'graph> GraphPredecessors<'graph, Item = <Self as DirectedGraph>::Node>,\n {\n-    fn predecessors<'graph>(\n-        &'graph self,\n+    fn predecessors(\n+        &self,\n         node: Self::Node,\n-    ) -> <Self as GraphPredecessors<'graph>>::Iter;\n+    ) -> <Self as GraphPredecessors<'_>>::Iter;\n }\n \n pub trait GraphPredecessors<'graph> {"}, {"sha": "9442bb3cdec3b8a11cf73122535d98c569a7f011", "filename": "src/librustc_data_structures/graph/reference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_data_structures%2Fgraph%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_data_structures%2Fgraph%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Freference.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -17,15 +17,15 @@ impl<'graph, G: WithStartNode> WithStartNode for &'graph G {\n }\n \n impl<'graph, G: WithSuccessors> WithSuccessors for &'graph G {\n-    fn successors<'iter>(&'iter self, node: Self::Node) -> <Self as GraphSuccessors<'iter>>::Iter {\n+    fn successors(&self, node: Self::Node) -> <Self as GraphSuccessors<'_>>::Iter {\n         (**self).successors(node)\n     }\n }\n \n impl<'graph, G: WithPredecessors> WithPredecessors for &'graph G {\n-    fn predecessors<'iter>(&'iter self,\n-                           node: Self::Node)\n-                           -> <Self as GraphPredecessors<'iter>>::Iter {\n+    fn predecessors(&self,\n+                    node: Self::Node)\n+                    -> <Self as GraphPredecessors<'_>>::Iter {\n         (**self).predecessors(node)\n     }\n }"}, {"sha": "5ff0cbf58c7970d7b65b442697e67f520e1f0776", "filename": "src/librustc_data_structures/graph/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -51,15 +51,15 @@ impl WithNumNodes for TestGraph {\n }\n \n impl WithPredecessors for TestGraph {\n-    fn predecessors<'graph>(&'graph self,\n-                            node: usize)\n-                            -> <Self as GraphPredecessors<'graph>>::Iter {\n+    fn predecessors(&self,\n+                    node: usize)\n+                    -> <Self as GraphPredecessors<'_>>::Iter {\n         self.predecessors[&node].iter().cloned()\n     }\n }\n \n impl WithSuccessors for TestGraph {\n-    fn successors<'graph>(&'graph self, node: usize) -> <Self as GraphSuccessors<'graph>>::Iter {\n+    fn successors(&self, node: usize) -> <Self as GraphSuccessors>::Iter {\n         self.successors[&node].iter().cloned()\n     }\n }"}, {"sha": "0072fcb22f13e1cd5e1981cbb3f59968c47a6adb", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -87,7 +87,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn mir_borrowck<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> BorrowCheckResult<'tcx> {\n+fn mir_borrowck(tcx: TyCtxt<'_>, def_id: DefId) -> BorrowCheckResult<'_> {\n     let input_body = tcx.mir_validated(def_id);\n     debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def_id));\n "}, {"sha": "b5630251e5830942b194ebc3edcc61c8b3d71a8a", "filename": "src/librustc_mir/borrow_check/nll/constraints/graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -234,10 +234,10 @@ impl<'s, D: ConstraintGraphDirecton> graph::WithNumNodes for RegionGraph<'s, D>\n }\n \n impl<'s, D: ConstraintGraphDirecton> graph::WithSuccessors for RegionGraph<'s, D> {\n-    fn successors<'graph>(\n-        &'graph self,\n+    fn successors(\n+        &self,\n         node: Self::Node,\n-    ) -> <Self as graph::GraphSuccessors<'graph>>::Iter {\n+    ) -> <Self as graph::GraphSuccessors<'_>>::Iter {\n         self.outgoing_regions(node)\n     }\n }"}, {"sha": "538ac6881d90ab8d98b8f72c19cebaa4cc2bebb3", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -130,7 +130,7 @@ pub(super) fn is_active<'tcx>(\n \n /// Determines if a given borrow is borrowing local data\n /// This is called for all Yield statements on movable generators\n-pub(super) fn borrow_of_local_data<'tcx>(place: &Place<'tcx>) -> bool {\n+pub(super) fn borrow_of_local_data(place: &Place<'_>) -> bool {\n     place.iterate(|place_base, place_projection| {\n         match place_base {\n             PlaceBase::Static(..) => return false,"}, {"sha": "f679a00035d76ebfbb37b4ad30975958bf14c837", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -31,7 +31,7 @@ pub enum RvalueFunc {\n /// Determines the category for a given expression. Note that scope\n /// and paren expressions have no category.\n impl Category {\n-    pub fn of<'tcx>(ek: &ExprKind<'tcx>) -> Option<Category> {\n+    pub fn of(ek: &ExprKind<'_>) -> Option<Category> {\n         match *ek {\n             ExprKind::Scope { .. } => None,\n "}, {"sha": "80a035d8287f438222ac63f21eb1d631e86c6921", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -22,7 +22,7 @@ use syntax_pos::Span;\n use super::lints;\n \n /// Construct the MIR for a given `DefId`.\n-pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Body<'tcx> {\n+pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n \n     // Figure out what primary body this item has.\n@@ -171,11 +171,11 @@ pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Body<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // BuildMir -- walks a crate, looking for fn items and methods to build MIR from\n \n-fn liberated_closure_env_ty<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn liberated_closure_env_ty(\n+    tcx: TyCtxt<'_>,\n     closure_expr_id: hir::HirId,\n     body_id: hir::BodyId,\n-) -> Ty<'tcx> {\n+) -> Ty<'_> {\n     let closure_ty = tcx.body_tables(body_id).node_type(closure_expr_id);\n \n     let (closure_def_id, closure_substs) = match closure_ty.sty {\n@@ -485,7 +485,7 @@ macro_rules! unpack {\n     };\n }\n \n-fn should_abort_on_panic<'tcx>(tcx: TyCtxt<'tcx>, fn_def_id: DefId, abi: Abi) -> bool {\n+fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: DefId, abi: Abi) -> bool {\n     // Not callable from C, so we can safely unwind through these\n     if abi == Abi::Rust || abi == Abi::RustCall { return false; }\n "}, {"sha": "dae72ebd52d336aa7d45a1c8c99076bd0cb87d71", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -392,7 +392,7 @@ impl fmt::Debug for Item {\n impl Item {\n     /// Finds the `doc` attribute as a NameValue and returns the corresponding\n     /// value found.\n-    pub fn doc_value<'a>(&'a self) -> Option<&'a str> {\n+    pub fn doc_value(&self) -> Option<&str> {\n         self.attrs.doc_value()\n     }\n     /// Finds all `doc` attributes as NameValues and returns their corresponding values, joined\n@@ -699,11 +699,11 @@ impl<'a> Iterator for ListAttributesIter<'a> {\n \n pub trait AttributesExt {\n     /// Finds an attribute as List and returns the list of attributes nested inside.\n-    fn lists<'a>(&'a self, name: Symbol) -> ListAttributesIter<'a>;\n+    fn lists(&self, name: Symbol) -> ListAttributesIter<'_>;\n }\n \n impl AttributesExt for [ast::Attribute] {\n-    fn lists<'a>(&'a self, name: Symbol) -> ListAttributesIter<'a> {\n+    fn lists(&self, name: Symbol) -> ListAttributesIter<'_> {\n         ListAttributesIter {\n             attrs: self.iter(),\n             current_list: Vec::new().into_iter(),\n@@ -952,7 +952,7 @@ impl Attributes {\n \n     /// Finds the `doc` attribute as a NameValue and returns the corresponding\n     /// value found.\n-    pub fn doc_value<'a>(&'a self) -> Option<&'a str> {\n+    pub fn doc_value(&self) -> Option<&str> {\n         self.doc_strings.first().map(|s| s.as_str())\n     }\n \n@@ -1037,7 +1037,7 @@ impl Hash for Attributes {\n }\n \n impl AttributesExt for Attributes {\n-    fn lists<'a>(&'a self, name: Symbol) -> ListAttributesIter<'a> {\n+    fn lists(&self, name: Symbol) -> ListAttributesIter<'_> {\n         self.other_attrs.lists(name)\n     }\n }"}, {"sha": "12482f7248e90b5eb43a71ea90ecde045eb96ead", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -331,8 +331,8 @@ pub type CombineSubstructureFunc<'a> =\n pub type EnumNonMatchCollapsedFunc<'a> =\n     Box<dyn FnMut(&mut ExtCtxt<'_>, Span, (&[Ident], &[Ident]), &[P<Expr>]) -> P<Expr> + 'a>;\n \n-pub fn combine_substructure<'a>(f: CombineSubstructureFunc<'a>)\n-                                -> RefCell<CombineSubstructureFunc<'a>> {\n+pub fn combine_substructure(f: CombineSubstructureFunc<'_>)\n+                            -> RefCell<CombineSubstructureFunc<'_>> {\n     RefCell::new(f)\n }\n "}, {"sha": "02b02e9b836957336bc51e566dc7d3aa211ef711", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae80cf23f744566f2822861291abcfcdc6af5ce/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=6ae80cf23f744566f2822861291abcfcdc6af5ce", "patch": "@@ -39,10 +39,10 @@ pub enum PathKind {\n }\n \n impl<'a> Path<'a> {\n-    pub fn new<'r>(path: Vec<&'r str>) -> Path<'r> {\n+    pub fn new(path: Vec<&str>) -> Path<'_> {\n         Path::new_(path, None, Vec::new(), PathKind::Std)\n     }\n-    pub fn new_local<'r>(path: &'r str) -> Path<'r> {\n+    pub fn new_local(path: &str) -> Path<'_> {\n         Path::new_(vec![path], None, Vec::new(), PathKind::Local)\n     }\n     pub fn new_<'r>(path: Vec<&'r str>,\n@@ -117,7 +117,7 @@ pub enum Const {\n pub fn borrowed_ptrty<'r>() -> PtrTy<'r> {\n     Borrowed(None, ast::Mutability::Immutable)\n }\n-pub fn borrowed<'r>(ty: Box<Ty<'r>>) -> Ty<'r> {\n+pub fn borrowed(ty: Box<Ty<'_>>) -> Ty<'_> {\n     Ptr(ty, borrowed_ptrty())\n }\n "}]}