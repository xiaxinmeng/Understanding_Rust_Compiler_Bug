{"sha": "2e8c1d13ad75ac569a707be05eff535f1894a23e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlOGMxZDEzYWQ3NWFjNTY5YTcwN2JlMDVlZmY1MzVmMTg5NGEyM2U=", "commit": {"author": {"name": "Christopher Serr", "email": "christopher.serr@gmail.com", "date": "2021-02-01T15:57:04Z"}, "committer": {"name": "Christopher Serr", "email": "christopher.serr@gmail.com", "date": "2021-02-01T15:57:04Z"}, "message": "Don't filter code suggestions on Applicability\n\nI've noticed that there are various suggestions that rust-analyzer seems\nto filter out, even if they make sense.\n\nHere's an example of where it seems like there should be a suggestion,\nbut there isn't:\n\n![https://i.imgur.com/wsjM6iz.png](https://i.imgur.com/wsjM6iz.png)\n\nIt turns out that this specific suggestion is not considered\n`MachineApplicable`, which are the only suggestions that rust-analyzer\naccepts. However if you read the documentation for `MachineApplicable`,\n\nhttps://github.com/rust-lang/rust/blob/b3897e3d1302391ed02efbac1dce8073646b8173/compiler/rustc_lint_defs/src/lib.rs#L27-L29\n\nthen you realize that these are specifically only those suggestions that\nrust-analyzer could even automatically apply (in some distant future,\nbehind some setting or so). Other suggestions that may have some\nsemantic impact do not use `MachineApplicable`. So all other suggestions\nare still intended to be suggested to the user, just not automatically\napplied without the user being consulted.\n\nhttps://github.com/rust-lang/rust/blob/b3897e3d1302391ed02efbac1dce8073646b8173/compiler/rustc_lint_defs/src/lib.rs#L22-L24\n\nSo with that in mind, rust-analyzer should almost definitely not filter\nout `MaybeIncorrect` (which honestly is named horribly, it just means\nthat it's a semantic change, not just a syntactical one).\n\nThen there's `HasPlaceholders` which basically is just another semantic\none, but with placeholders. The user will have to make some adjustments,\nbut the suggestion still is perfectly valid. rust-analyzer could\nprobably detect those placeholders and put proper \"tab through\" markers\nthere for the IDE, but that's not necessary for now.\n\nThen the last one is `Unspecified` which is so unknown that I don't even\nknow how to judge it, meaning that the suggestion should probably also\njust be suggested to the user and then they can decide.\n\nSo with all that in mind, I'm proposing to get rid of the check for\nApplicability entirely.", "tree": {"sha": "27f7d1e82e1415be1b0fc4e359160d3181bfb13e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27f7d1e82e1415be1b0fc4e359160d3181bfb13e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e8c1d13ad75ac569a707be05eff535f1894a23e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e8c1d13ad75ac569a707be05eff535f1894a23e", "html_url": "https://github.com/rust-lang/rust/commit/2e8c1d13ad75ac569a707be05eff535f1894a23e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e8c1d13ad75ac569a707be05eff535f1894a23e/comments", "author": {"login": "CryZe", "id": 1451630, "node_id": "MDQ6VXNlcjE0NTE2MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1451630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CryZe", "html_url": "https://github.com/CryZe", "followers_url": "https://api.github.com/users/CryZe/followers", "following_url": "https://api.github.com/users/CryZe/following{/other_user}", "gists_url": "https://api.github.com/users/CryZe/gists{/gist_id}", "starred_url": "https://api.github.com/users/CryZe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CryZe/subscriptions", "organizations_url": "https://api.github.com/users/CryZe/orgs", "repos_url": "https://api.github.com/users/CryZe/repos", "events_url": "https://api.github.com/users/CryZe/events{/privacy}", "received_events_url": "https://api.github.com/users/CryZe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CryZe", "id": 1451630, "node_id": "MDQ6VXNlcjE0NTE2MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1451630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CryZe", "html_url": "https://github.com/CryZe", "followers_url": "https://api.github.com/users/CryZe/followers", "following_url": "https://api.github.com/users/CryZe/following{/other_user}", "gists_url": "https://api.github.com/users/CryZe/gists{/gist_id}", "starred_url": "https://api.github.com/users/CryZe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CryZe/subscriptions", "organizations_url": "https://api.github.com/users/CryZe/orgs", "repos_url": "https://api.github.com/users/CryZe/repos", "events_url": "https://api.github.com/users/CryZe/events{/privacy}", "received_events_url": "https://api.github.com/users/CryZe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d9bb69990b866bad0b4300972f1706d38329ad3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d9bb69990b866bad0b4300972f1706d38329ad3", "html_url": "https://github.com/rust-lang/rust/commit/2d9bb69990b866bad0b4300972f1706d38329ad3"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "0ed87fe3e098e4d3da4f918bc1c0a95cc54e3448", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e8c1d13ad75ac569a707be05eff535f1894a23e/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e8c1d13ad75ac569a707be05eff535f1894a23e/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=2e8c1d13ad75ac569a707be05eff535f1894a23e", "patch": "@@ -2,7 +2,7 @@\n //! `cargo check` json format to the LSP diagnostic format.\n use std::{collections::HashMap, path::Path};\n \n-use flycheck::{Applicability, DiagnosticLevel, DiagnosticSpan};\n+use flycheck::{DiagnosticLevel, DiagnosticSpan};\n use stdx::format_to;\n \n use crate::{lsp_ext, to_proto::url_from_abs_path};\n@@ -97,9 +97,7 @@ fn map_rust_child_diagnostic(\n \n     let mut edit_map: HashMap<lsp_types::Url, Vec<lsp_types::TextEdit>> = HashMap::new();\n     for &span in &spans {\n-        if let (Some(Applicability::MachineApplicable), Some(suggested_replacement)) =\n-            (&span.suggestion_applicability, &span.suggested_replacement)\n-        {\n+        if let Some(suggested_replacement) = &span.suggested_replacement {\n             let location = location(workspace_root, span);\n             let edit = lsp_types::TextEdit::new(location.range, suggested_replacement.clone());\n             edit_map.entry(location.uri).or_default().push(edit);"}]}