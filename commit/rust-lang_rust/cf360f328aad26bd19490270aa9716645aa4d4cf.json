{"sha": "cf360f328aad26bd19490270aa9716645aa4d4cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMzYwZjMyOGFhZDI2YmQxOTQ5MDI3MGFhOTcxNjY0NWFhNGQ0Y2Y=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-05T02:41:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-14T19:27:07Z"}, "message": "Extract librustc_back from librustc", "tree": {"sha": "9a619808c3dd0040f00507ec4856f7d406eb5907", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a619808c3dd0040f00507ec4856f7d406eb5907"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf360f328aad26bd19490270aa9716645aa4d4cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf360f328aad26bd19490270aa9716645aa4d4cf", "html_url": "https://github.com/rust-lang/rust/commit/cf360f328aad26bd19490270aa9716645aa4d4cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf360f328aad26bd19490270aa9716645aa4d4cf/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3096c2348b463ccdbb1c066b688d487e72e6c73", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3096c2348b463ccdbb1c066b688d487e72e6c73", "html_url": "https://github.com/rust-lang/rust/commit/d3096c2348b463ccdbb1c066b688d487e72e6c73"}], "stats": {"total": 291, "additions": 166, "deletions": 125}, "files": [{"sha": "c95576f6252aa3feca7b16ef2c458ec7de17f04e", "filename": "mk/crates.mk", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf360f328aad26bd19490270aa9716645aa4d4cf/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cf360f328aad26bd19490270aa9716645aa4d4cf/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=cf360f328aad26bd19490270aa9716645aa4d4cf", "patch": "@@ -53,7 +53,8 @@ TARGET_CRATES := libc std green rustuv native flate arena glob term semver \\\n                  uuid serialize sync getopts collections num test time rand \\\n                  url log regex graphviz core rlibc alloc debug rustrt \\\n                  unicode\n-HOST_CRATES := syntax rustc rustdoc fourcc hexfloat regex_macros fmt_macros rustc_llvm\n+HOST_CRATES := syntax rustc rustdoc fourcc hexfloat regex_macros fmt_macros \\\n+\t       rustc_llvm rustc_back\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n \n@@ -71,8 +72,9 @@ DEPS_rustuv := std native:uv native:uv_support\n DEPS_native := std\n DEPS_syntax := std term serialize log fmt_macros debug\n DEPS_rustc := syntax flate arena serialize getopts \\\n-              time log graphviz debug rustc_llvm\n+              time log graphviz debug rustc_llvm rustc_back\n DEPS_rustc_llvm := native:rustllvm libc std\n+DEPS_rustc_back := std syntax rustc_llvm flate log libc\n DEPS_rustdoc := rustc native:hoedown serialize getopts \\\n                 test time debug\n DEPS_flate := std native:miniz"}, {"sha": "8acb610db3f597419a2f309dbe27c39442912b9e", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=cf360f328aad26bd19490270aa9716645aa4d4cf", "patch": "@@ -10,10 +10,10 @@\n \n //! A helper class for dealing with static archives\n \n-use back::link::{get_ar_prog};\n+use super::link::{get_ar_prog};\n use driver::session::Session;\n use metadata::filesearch;\n-use lib::llvm::{ArchiveRef, llvm};\n+use llvm::{ArchiveRef, llvm};\n \n use libc;\n use std::io::process::{Command, ProcessOutput};"}, {"sha": "2112e8d822d38c2deabdb3be92fa1ea02923b8c8", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 92, "deletions": 94, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=cf360f328aad26bd19490270aa9716645aa4d4cf", "patch": "@@ -8,16 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use back::archive::{Archive, METADATA_FILENAME};\n-use back::rpath;\n-use back::svh::Svh;\n+use super::archive::{Archive, METADATA_FILENAME};\n+use super::rpath;\n+use super::svh::Svh;\n use driver::driver::{CrateTranslation, OutputFilenames, Input, FileInput};\n use driver::config::NoDebugInfo;\n use driver::session::Session;\n use driver::config;\n-use lib::llvm::llvm;\n-use lib::llvm::ModuleRef;\n-use lib;\n+use llvm;\n+use llvm::ModuleRef;\n use metadata::common::LinkMeta;\n use metadata::{encoder, cstore, filesearch, csearch, loader, creader};\n use middle::trans::context::CrateContext;\n@@ -55,7 +54,7 @@ pub enum OutputType {\n \n pub fn llvm_err(sess: &Session, msg: String) -> ! {\n     unsafe {\n-        let cstr = llvm::LLVMRustGetLastError();\n+        let cstr = llvm::llvm::LLVMRustGetLastError();\n         if cstr == ptr::null() {\n             sess.fatal(msg.as_slice());\n         } else {\n@@ -70,14 +69,14 @@ pub fn llvm_err(sess: &Session, msg: String) -> ! {\n \n pub fn write_output_file(\n         sess: &Session,\n-        target: lib::llvm::TargetMachineRef,\n-        pm: lib::llvm::PassManagerRef,\n+        target: llvm::TargetMachineRef,\n+        pm: llvm::PassManagerRef,\n         m: ModuleRef,\n         output: &Path,\n-        file_type: lib::llvm::FileType) {\n+        file_type: llvm::FileType) {\n     unsafe {\n         output.with_c_str(|output| {\n-            let result = llvm::LLVMRustWriteOutputFile(\n+            let result = llvm::llvm::LLVMRustWriteOutputFile(\n                     target, pm, m, output, file_type);\n             if !result {\n                 llvm_err(sess, \"could not write output\".to_string());\n@@ -88,18 +87,17 @@ pub fn write_output_file(\n \n pub mod write {\n \n-    use back::lto;\n-    use back::link::{write_output_file, OutputType};\n-    use back::link::{OutputTypeAssembly, OutputTypeBitcode};\n-    use back::link::{OutputTypeExe, OutputTypeLlvmAssembly};\n-    use back::link::{OutputTypeObject};\n+    use super::super::lto;\n+    use super::{write_output_file, OutputType};\n+    use super::{OutputTypeAssembly, OutputTypeBitcode};\n+    use super::{OutputTypeExe, OutputTypeLlvmAssembly};\n+    use super::{OutputTypeObject};\n     use driver::driver::{CrateTranslation, OutputFilenames};\n     use driver::config::NoDebugInfo;\n     use driver::session::Session;\n     use driver::config;\n-    use lib::llvm::llvm;\n-    use lib::llvm::{ModuleRef, TargetMachineRef, PassManagerRef};\n-    use lib;\n+    use llvm;\n+    use llvm::{ModuleRef, TargetMachineRef, PassManagerRef};\n     use util::common::time;\n     use syntax::abi;\n \n@@ -147,15 +145,15 @@ pub mod write {\n \n             if sess.opts.cg.save_temps {\n                 output.with_extension(\"no-opt.bc\").with_c_str(|buf| {\n-                    llvm::LLVMWriteBitcodeToFile(llmod, buf);\n+                    llvm::llvm::LLVMWriteBitcodeToFile(llmod, buf);\n                 })\n             }\n \n             let opt_level = match sess.opts.optimize {\n-              config::No => lib::llvm::CodeGenLevelNone,\n-              config::Less => lib::llvm::CodeGenLevelLess,\n-              config::Default => lib::llvm::CodeGenLevelDefault,\n-              config::Aggressive => lib::llvm::CodeGenLevelAggressive,\n+              config::No => llvm::CodeGenLevelNone,\n+              config::Less => llvm::CodeGenLevelLess,\n+              config::Default => llvm::CodeGenLevelDefault,\n+              config::Aggressive => llvm::CodeGenLevelAggressive,\n             };\n             let use_softfp = sess.opts.cg.soft_float;\n \n@@ -172,10 +170,10 @@ pub mod write {\n             let fdata_sections = ffunction_sections;\n \n             let reloc_model = match sess.opts.cg.relocation_model.as_slice() {\n-                \"pic\" => lib::llvm::RelocPIC,\n-                \"static\" => lib::llvm::RelocStatic,\n-                \"default\" => lib::llvm::RelocDefault,\n-                \"dynamic-no-pic\" => lib::llvm::RelocDynamicNoPic,\n+                \"pic\" => llvm::RelocPIC,\n+                \"static\" => llvm::RelocStatic,\n+                \"default\" => llvm::RelocDefault,\n+                \"dynamic-no-pic\" => llvm::RelocDynamicNoPic,\n                 _ => {\n                     sess.err(format!(\"{} is not a valid relocation mode\",\n                                      sess.opts\n@@ -193,9 +191,9 @@ pub mod write {\n                          .with_c_str(|t| {\n                 sess.opts.cg.target_cpu.as_slice().with_c_str(|cpu| {\n                     target_feature(sess).with_c_str(|features| {\n-                        llvm::LLVMRustCreateTargetMachine(\n+                        llvm::llvm::LLVMRustCreateTargetMachine(\n                             t, cpu, features,\n-                            lib::llvm::CodeModelDefault,\n+                            llvm::CodeModelDefault,\n                             reloc_model,\n                             opt_level,\n                             true /* EnableSegstk */,\n@@ -212,26 +210,26 @@ pub mod write {\n             // does, and are by populated by LLVM's default PassManagerBuilder.\n             // Each manager has a different set of passes, but they also share\n             // some common passes.\n-            let fpm = llvm::LLVMCreateFunctionPassManagerForModule(llmod);\n-            let mpm = llvm::LLVMCreatePassManager();\n+            let fpm = llvm::llvm::LLVMCreateFunctionPassManagerForModule(llmod);\n+            let mpm = llvm::llvm::LLVMCreatePassManager();\n \n             // If we're verifying or linting, add them to the function pass\n             // manager.\n             let addpass = |pass: &str| {\n-                pass.as_slice().with_c_str(|s| llvm::LLVMRustAddPass(fpm, s))\n+                pass.as_slice().with_c_str(|s| llvm::llvm::LLVMRustAddPass(fpm, s))\n             };\n             if !sess.no_verify() { assert!(addpass(\"verify\")); }\n \n             if !sess.opts.cg.no_prepopulate_passes {\n-                llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);\n-                llvm::LLVMRustAddAnalysisPasses(tm, mpm, llmod);\n+                llvm::llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);\n+                llvm::llvm::LLVMRustAddAnalysisPasses(tm, mpm, llmod);\n                 populate_llvm_passes(fpm, mpm, llmod, opt_level,\n                                      trans.no_builtins);\n             }\n \n             for pass in sess.opts.cg.passes.iter() {\n                 pass.as_slice().with_c_str(|s| {\n-                    if !llvm::LLVMRustAddPass(mpm, s) {\n+                    if !llvm::llvm::LLVMRustAddPass(mpm, s) {\n                         sess.warn(format!(\"unknown pass {}, ignoring\",\n                                           *pass).as_slice());\n                     }\n@@ -240,13 +238,13 @@ pub mod write {\n \n             // Finally, run the actual optimization passes\n             time(sess.time_passes(), \"llvm function passes\", (), |()|\n-                 llvm::LLVMRustRunFunctionPassManager(fpm, llmod));\n+                 llvm::llvm::LLVMRustRunFunctionPassManager(fpm, llmod));\n             time(sess.time_passes(), \"llvm module passes\", (), |()|\n-                 llvm::LLVMRunPassManager(mpm, llmod));\n+                 llvm::llvm::LLVMRunPassManager(mpm, llmod));\n \n             // Deallocate managers that we're now done with\n-            llvm::LLVMDisposePassManager(fpm);\n-            llvm::LLVMDisposePassManager(mpm);\n+            llvm::llvm::LLVMDisposePassManager(fpm);\n+            llvm::llvm::LLVMDisposePassManager(mpm);\n \n             // Emit the bytecode if we're either saving our temporaries or\n             // emitting an rlib. Whenever an rlib is created, the bytecode is\n@@ -255,7 +253,7 @@ pub mod write {\n                (sess.crate_types.borrow().contains(&config::CrateTypeRlib) &&\n                 sess.opts.output_types.contains(&OutputTypeExe)) {\n                 output.temp_path(OutputTypeBitcode).with_c_str(|buf| {\n-                    llvm::LLVMWriteBitcodeToFile(llmod, buf);\n+                    llvm::llvm::LLVMWriteBitcodeToFile(llmod, buf);\n                 })\n             }\n \n@@ -265,7 +263,7 @@ pub mod write {\n \n                 if sess.opts.cg.save_temps {\n                     output.with_extension(\"lto.bc\").with_c_str(|buf| {\n-                        llvm::LLVMWriteBitcodeToFile(llmod, buf);\n+                        llvm::llvm::LLVMWriteBitcodeToFile(llmod, buf);\n                     })\n                 }\n             }\n@@ -281,11 +279,11 @@ pub mod write {\n             fn with_codegen(tm: TargetMachineRef, llmod: ModuleRef,\n                             no_builtins: bool, f: |PassManagerRef|) {\n                 unsafe {\n-                    let cpm = llvm::LLVMCreatePassManager();\n-                    llvm::LLVMRustAddAnalysisPasses(tm, cpm, llmod);\n-                    llvm::LLVMRustAddLibraryInfo(cpm, llmod, no_builtins);\n+                    let cpm = llvm::llvm::LLVMCreatePassManager();\n+                    llvm::llvm::LLVMRustAddAnalysisPasses(tm, cpm, llmod);\n+                    llvm::llvm::LLVMRustAddLibraryInfo(cpm, llmod, no_builtins);\n                     f(cpm);\n-                    llvm::LLVMDisposePassManager(cpm);\n+                    llvm::llvm::LLVMDisposePassManager(cpm);\n                 }\n             }\n \n@@ -296,13 +294,13 @@ pub mod write {\n                 match *output_type {\n                     OutputTypeBitcode => {\n                         path.with_c_str(|buf| {\n-                            llvm::LLVMWriteBitcodeToFile(llmod, buf);\n+                            llvm::llvm::LLVMWriteBitcodeToFile(llmod, buf);\n                         })\n                     }\n                     OutputTypeLlvmAssembly => {\n                         path.with_c_str(|output| {\n                             with_codegen(tm, llmod, trans.no_builtins, |cpm| {\n-                                llvm::LLVMRustPrintModule(cpm, llmod, output);\n+                                llvm::llvm::LLVMRustPrintModule(cpm, llmod, output);\n                             })\n                         })\n                     }\n@@ -320,7 +318,7 @@ pub mod write {\n                         };\n                         with_codegen(tm, llmod, trans.no_builtins, |cpm| {\n                             write_output_file(sess, tm, cpm, llmod, &path,\n-                                            lib::llvm::AssemblyFile);\n+                                            llvm::AssemblyFile);\n                         });\n                     }\n                     OutputTypeObject => {\n@@ -338,7 +336,7 @@ pub mod write {\n                     Some(ref path) => {\n                         with_codegen(tm, llmod, trans.no_builtins, |cpm| {\n                             write_output_file(sess, tm, cpm, llmod, path,\n-                                            lib::llvm::ObjectFile);\n+                                            llvm::ObjectFile);\n                         });\n                     }\n                     None => {}\n@@ -350,16 +348,16 @@ pub mod write {\n                                         .with_extension(\"metadata.o\");\n                         write_output_file(sess, tm, cpm,\n                                         trans.metadata_module, &out,\n-                                        lib::llvm::ObjectFile);\n+                                        llvm::ObjectFile);\n                     })\n                 }\n             });\n \n-            llvm::LLVMRustDisposeTargetMachine(tm);\n-            llvm::LLVMDisposeModule(trans.metadata_module);\n-            llvm::LLVMDisposeModule(llmod);\n-            llvm::LLVMContextDispose(llcx);\n-            if sess.time_llvm_passes() { llvm::LLVMRustPrintPassTimings(); }\n+            llvm::llvm::LLVMRustDisposeTargetMachine(tm);\n+            llvm::llvm::LLVMDisposeModule(trans.metadata_module);\n+            llvm::llvm::LLVMDisposeModule(llmod);\n+            llvm::llvm::LLVMContextDispose(llcx);\n+            if sess.time_llvm_passes() { llvm::llvm::LLVMRustPrintPassTimings(); }\n         }\n     }\n \n@@ -426,69 +424,69 @@ pub mod write {\n         }\n \n         INIT.doit(|| {\n-            llvm::LLVMInitializePasses();\n+            llvm::llvm::LLVMInitializePasses();\n \n             // Only initialize the platforms supported by Rust here, because\n             // using --llvm-root will have multiple platforms that rustllvm\n             // doesn't actually link to and it's pointless to put target info\n             // into the registry that Rust cannot generate machine code for.\n-            llvm::LLVMInitializeX86TargetInfo();\n-            llvm::LLVMInitializeX86Target();\n-            llvm::LLVMInitializeX86TargetMC();\n-            llvm::LLVMInitializeX86AsmPrinter();\n-            llvm::LLVMInitializeX86AsmParser();\n-\n-            llvm::LLVMInitializeARMTargetInfo();\n-            llvm::LLVMInitializeARMTarget();\n-            llvm::LLVMInitializeARMTargetMC();\n-            llvm::LLVMInitializeARMAsmPrinter();\n-            llvm::LLVMInitializeARMAsmParser();\n-\n-            llvm::LLVMInitializeMipsTargetInfo();\n-            llvm::LLVMInitializeMipsTarget();\n-            llvm::LLVMInitializeMipsTargetMC();\n-            llvm::LLVMInitializeMipsAsmPrinter();\n-            llvm::LLVMInitializeMipsAsmParser();\n-\n-            llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int,\n+            llvm::llvm::LLVMInitializeX86TargetInfo();\n+            llvm::llvm::LLVMInitializeX86Target();\n+            llvm::llvm::LLVMInitializeX86TargetMC();\n+            llvm::llvm::LLVMInitializeX86AsmPrinter();\n+            llvm::llvm::LLVMInitializeX86AsmParser();\n+\n+            llvm::llvm::LLVMInitializeARMTargetInfo();\n+            llvm::llvm::LLVMInitializeARMTarget();\n+            llvm::llvm::LLVMInitializeARMTargetMC();\n+            llvm::llvm::LLVMInitializeARMAsmPrinter();\n+            llvm::llvm::LLVMInitializeARMAsmParser();\n+\n+            llvm::llvm::LLVMInitializeMipsTargetInfo();\n+            llvm::llvm::LLVMInitializeMipsTarget();\n+            llvm::llvm::LLVMInitializeMipsTargetMC();\n+            llvm::llvm::LLVMInitializeMipsAsmPrinter();\n+            llvm::llvm::LLVMInitializeMipsAsmParser();\n+\n+            llvm::llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int,\n                                          llvm_args.as_ptr());\n         });\n     }\n \n-    unsafe fn populate_llvm_passes(fpm: lib::llvm::PassManagerRef,\n-                                   mpm: lib::llvm::PassManagerRef,\n+    unsafe fn populate_llvm_passes(fpm: llvm::PassManagerRef,\n+                                   mpm: llvm::PassManagerRef,\n                                    llmod: ModuleRef,\n-                                   opt: lib::llvm::CodeGenOptLevel,\n+                                   opt: llvm::CodeGenOptLevel,\n                                    no_builtins: bool) {\n         // Create the PassManagerBuilder for LLVM. We configure it with\n         // reasonable defaults and prepare it to actually populate the pass\n         // manager.\n-        let builder = llvm::LLVMPassManagerBuilderCreate();\n+        let builder = llvm::llvm::LLVMPassManagerBuilderCreate();\n         match opt {\n-            lib::llvm::CodeGenLevelNone => {\n+            llvm::CodeGenLevelNone => {\n                 // Don't add lifetime intrinsics at O0\n-                llvm::LLVMRustAddAlwaysInlinePass(builder, false);\n+                llvm::llvm::LLVMRustAddAlwaysInlinePass(builder, false);\n             }\n-            lib::llvm::CodeGenLevelLess => {\n-                llvm::LLVMRustAddAlwaysInlinePass(builder, true);\n+            llvm::CodeGenLevelLess => {\n+                llvm::llvm::LLVMRustAddAlwaysInlinePass(builder, true);\n             }\n             // numeric values copied from clang\n-            lib::llvm::CodeGenLevelDefault => {\n-                llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder,\n+            llvm::CodeGenLevelDefault => {\n+                llvm::llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder,\n                                                                     225);\n             }\n-            lib::llvm::CodeGenLevelAggressive => {\n-                llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder,\n+            llvm::CodeGenLevelAggressive => {\n+                llvm::llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder,\n                                                                     275);\n             }\n         }\n-        llvm::LLVMPassManagerBuilderSetOptLevel(builder, opt as c_uint);\n-        llvm::LLVMRustAddBuilderLibraryInfo(builder, llmod, no_builtins);\n+        llvm::llvm::LLVMPassManagerBuilderSetOptLevel(builder, opt as c_uint);\n+        llvm::llvm::LLVMRustAddBuilderLibraryInfo(builder, llmod, no_builtins);\n \n         // Use the builder to populate the function/module pass managers.\n-        llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(builder, fpm);\n-        llvm::LLVMPassManagerBuilderPopulateModulePassManager(builder, mpm);\n-        llvm::LLVMPassManagerBuilderDispose(builder);\n+        llvm::llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(builder, fpm);\n+        llvm::llvm::LLVMPassManagerBuilderPopulateModulePassManager(builder, mpm);\n+        llvm::llvm::LLVMPassManagerBuilderDispose(builder);\n     }\n }\n \n@@ -611,7 +609,7 @@ pub fn build_link_meta(sess: &Session, krate: &ast::Crate,\n                        name: String) -> LinkMeta {\n     let r = LinkMeta {\n         crate_name: name,\n-        crate_hash: Svh::calculate(sess, krate),\n+        crate_hash: Svh::calculate(&sess.opts.cg.metadata, krate),\n     };\n     info!(\"{}\", r);\n     return r;"}, {"sha": "cf163cdbb637cc70bda7321a6f3f52646e256c39", "filename": "src/librustc/back/lto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flto.rs?ref=cf360f328aad26bd19490270aa9716645aa4d4cf", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use back::archive::ArchiveRO;\n-use back::link;\n+use super::archive::ArchiveRO;\n+use super::link;\n use driver::session;\n use driver::config;\n-use lib::llvm::{ModuleRef, TargetMachineRef, llvm, True, False};\n+use llvm::{ModuleRef, TargetMachineRef, llvm, True, False};\n use metadata::cstore;\n use util::common::time;\n "}, {"sha": "65124ceff1dbbb0beafb41ff838cdbbb14a05c8a", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=cf360f328aad26bd19490270aa9716645aa4d4cf", "patch": "@@ -42,13 +42,32 @@ extern crate getopts;\n extern crate graphviz;\n extern crate libc;\n extern crate llvm = \"rustc_llvm\";\n+extern crate rustc_back = \"rustc_back\";\n extern crate serialize;\n extern crate time;\n #[phase(plugin, link)] extern crate log;\n #[phase(plugin, link)] extern crate syntax;\n \n mod diagnostics;\n \n+pub mod back {\n+    pub use rustc_back::abi;\n+    pub use rustc_back::arm;\n+    pub use rustc_back::mips;\n+    pub use rustc_back::mipsel;\n+    pub use rustc_back::svh;\n+    pub use rustc_back::target_strs;\n+    pub use rustc_back::x86;\n+    pub use rustc_back::x86_64;\n+\n+    pub mod archive;\n+    pub mod link;\n+    pub mod lto;\n+    pub mod rpath;\n+\n+}\n+>>>>>>> Extract librustc_back from librustc\n+\n pub mod middle {\n     pub mod def;\n     pub mod trans;\n@@ -97,21 +116,6 @@ pub mod front {\n     pub mod show_span;\n }\n \n-pub mod back {\n-    pub mod abi;\n-    pub mod archive;\n-    pub mod arm;\n-    pub mod link;\n-    pub mod lto;\n-    pub mod mips;\n-    pub mod mipsel;\n-    pub mod rpath;\n-    pub mod svh;\n-    pub mod target_strs;\n-    pub mod x86;\n-    pub mod x86_64;\n-}\n-\n pub mod metadata;\n \n pub mod driver;"}, {"sha": "c722beb43ae955c9e7ebdc487638dad5cf422cf2", "filename": "src/librustc_back/abi.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fabi.rs?ref=cf360f328aad26bd19490270aa9716645aa4d4cf", "previous_filename": "src/librustc/back/abi.rs"}, {"sha": "a0730360ec7298c6aa9b41a16eeb6e454f9ef90c", "filename": "src/librustc_back/arm.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farm.rs?ref=cf360f328aad26bd19490270aa9716645aa4d4cf", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use back::target_strs;\n+use target_strs;\n use syntax::abi;\n \n pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t {", "previous_filename": "src/librustc/back/arm.rs"}, {"sha": "5334c49930005c6e1b74e954b8beb845f900f634", "filename": "src/librustc_back/lib.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=cf360f328aad26bd19490270aa9716645aa4d4cf", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_id = \"rustc_back#0.11.0-pre\"]\n+#![crate_name = \"rustc_back\"]\n+#![experimental]\n+#![comment = \"The Rust compiler backend\"]\n+#![license = \"MIT/ASL2\"]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+      html_root_url = \"http://doc.rust-lang.org/\")]\n+\n+#![feature(globs)]\n+#![feature(phase)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n+\n+#[phase(plugin, link)]\n+extern crate log;\n+extern crate syntax;\n+extern crate libc;\n+extern crate flate;\n+\n+pub mod abi;\n+pub mod arm;\n+pub mod mips;\n+pub mod mipsel;\n+pub mod svh;\n+pub mod target_strs;\n+pub mod x86;\n+pub mod x86_64;"}, {"sha": "4176d0e9a6f57a5ac3fddbd4c6f320cb9b6d9909", "filename": "src/librustc_back/mips.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fmips.rs?ref=cf360f328aad26bd19490270aa9716645aa4d4cf", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use back::target_strs;\n+use target_strs;\n use syntax::abi;\n \n pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t {", "previous_filename": "src/librustc/back/mips.rs"}, {"sha": "d3ea9d3aa7237e2facabd94138bc3863bb3a2a17", "filename": "src/librustc_back/mipsel.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Fmipsel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Fmipsel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fmipsel.rs?ref=cf360f328aad26bd19490270aa9716645aa4d4cf", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use back::target_strs;\n+use target_strs;\n use syntax::abi;\n \n pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t {", "previous_filename": "src/librustc/back/mipsel.rs"}, {"sha": "66bc8c740c47fb092225d360b835b027bfe599b9", "filename": "src/librustc_back/svh.rs", "status": "renamed", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=cf360f328aad26bd19490270aa9716645aa4d4cf", "patch": "@@ -53,8 +53,6 @@ use std::iter::range_step;\n use syntax::ast;\n use syntax::visit;\n \n-use driver::session::Session;\n-\n #[deriving(Clone, PartialEq)]\n pub struct Svh {\n     hash: String,\n@@ -70,7 +68,7 @@ impl Svh {\n         self.hash.as_slice()\n     }\n \n-    pub fn calculate(sess: &Session, krate: &ast::Crate) -> Svh {\n+    pub fn calculate(metadata: &Vec<String>, krate: &ast::Crate) -> Svh {\n         // FIXME (#14132): This is better than it used to be, but it still not\n         // ideal. We now attempt to hash only the relevant portions of the\n         // Crate AST as well as the top-level crate attributes. (However,\n@@ -82,7 +80,7 @@ impl Svh {\n         //        avoid collisions.\n         let mut state = SipState::new();\n \n-        for data in sess.opts.cg.metadata.iter() {\n+        for data in metadata.iter() {\n             data.hash(&mut state);\n         }\n ", "previous_filename": "src/librustc/back/svh.rs"}, {"sha": "7928f3d8db098167d7571824ea1b7d5666835a21", "filename": "src/librustc_back/target_strs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Ftarget_strs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Ftarget_strs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget_strs.rs?ref=cf360f328aad26bd19490270aa9716645aa4d4cf", "previous_filename": "src/librustc/back/target_strs.rs"}, {"sha": "b4d67bc98d2e3b14c3a315f43d2814a927965679", "filename": "src/librustc_back/x86.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fx86.rs?ref=cf360f328aad26bd19490270aa9716645aa4d4cf", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-use back::target_strs;\n+use target_strs;\n use syntax::abi;\n \n pub fn get_target_strs(target_triple: String, target_os: abi::Os)", "previous_filename": "src/librustc/back/x86.rs"}, {"sha": "70807edc9960e3c9ec05a623d5235102fd528a71", "filename": "src/librustc_back/x86_64.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf360f328aad26bd19490270aa9716645aa4d4cf/src%2Flibrustc_back%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fx86_64.rs?ref=cf360f328aad26bd19490270aa9716645aa4d4cf", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-use back::target_strs;\n+use target_strs;\n use syntax::abi;\n \n pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t {", "previous_filename": "src/librustc/back/x86_64.rs"}]}