{"sha": "c51cd7a3fdc83df927b5f268e377d1f00d8b01ce", "node_id": "C_kwDOAAsO6NoAKGM1MWNkN2EzZmRjODNkZjkyN2I1ZjI2OGUzNzdkMWYwMGQ4YjAxY2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-23T08:07:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-23T08:07:43Z"}, "message": "Auto merge of #2146 - RalfJung:int2ptr, r=RalfJung\n\nclean up int2ptr code a bit\n\nFollow-up to https://github.com/rust-lang/miri/pull/2059", "tree": {"sha": "8cc4922c19f7283aa5ae369ff929513fe71374e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cc4922c19f7283aa5ae369ff929513fe71374e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c51cd7a3fdc83df927b5f268e377d1f00d8b01ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c51cd7a3fdc83df927b5f268e377d1f00d8b01ce", "html_url": "https://github.com/rust-lang/rust/commit/c51cd7a3fdc83df927b5f268e377d1f00d8b01ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c51cd7a3fdc83df927b5f268e377d1f00d8b01ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab03d32622e7eb44866e178e1180651dd39f73d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab03d32622e7eb44866e178e1180651dd39f73d0", "html_url": "https://github.com/rust-lang/rust/commit/ab03d32622e7eb44866e178e1180651dd39f73d0"}, {"sha": "697dca2e0e62ff7717f991dbcf3a6c6fd952f3a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/697dca2e0e62ff7717f991dbcf3a6c6fd952f3a1", "html_url": "https://github.com/rust-lang/rust/commit/697dca2e0e62ff7717f991dbcf3a6c6fd952f3a1"}], "stats": {"total": 81, "additions": 49, "deletions": 32}, "files": [{"sha": "4850945b4eeb9034674efc7a044004cb3a4105bc", "filename": "src/intptrcast.rs", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c51cd7a3fdc83df927b5f268e377d1f00d8b01ce/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51cd7a3fdc83df927b5f268e377d1f00d8b01ce/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=c51cd7a3fdc83df927b5f268e377d1f00d8b01ce", "patch": "@@ -105,6 +105,8 @@ impl<'mir, 'tcx> GlobalStateInner {\n         trace!(\"Exposing allocation id {:?}\", alloc_id);\n \n         let mut global_state = ecx.machine.intptrcast.borrow_mut();\n+        // In legacy and strict mode, we don't need this, so we can save some cycles\n+        // by not tracking it.\n         if global_state.provenance_mode == ProvenanceMode::Permissive {\n             global_state.exposed.insert(alloc_id);\n         }\n@@ -118,12 +120,17 @@ impl<'mir, 'tcx> GlobalStateInner {\n \n         let global_state = ecx.machine.intptrcast.borrow();\n \n-        // In legacy mode, we have to support int2ptr transmutes,\n-        // so just pretend they do the same thing as a cast.\n-        if global_state.provenance_mode == ProvenanceMode::Legacy {\n-            Self::ptr_from_addr_cast(ecx, addr)\n-        } else {\n-            Pointer::new(None, Size::from_bytes(addr))\n+        match global_state.provenance_mode {\n+            ProvenanceMode::Legacy => {\n+                // In legacy mode, we have to support int2ptr transmutes,\n+                // so just pretend they do the same thing as a cast.\n+                Self::ptr_from_addr_cast(ecx, addr)\n+            }\n+            ProvenanceMode::Permissive | ProvenanceMode::Strict => {\n+                // Both of these modes consider transmuted pointers to be \"invalid\" (`None`\n+                // provenance).\n+                Pointer::new(None, Size::from_bytes(addr))\n+            }\n         }\n     }\n \n@@ -135,18 +142,26 @@ impl<'mir, 'tcx> GlobalStateInner {\n \n         let global_state = ecx.machine.intptrcast.borrow();\n \n-        if global_state.provenance_mode == ProvenanceMode::Strict {\n-            Pointer::new(None, Size::from_bytes(addr))\n-        } else if global_state.provenance_mode == ProvenanceMode::Legacy {\n-            let alloc_id = Self::alloc_id_from_addr(ecx, addr);\n-\n-            Pointer::new(\n-                alloc_id\n-                    .map(|alloc_id| Tag::Concrete(ConcreteTag { alloc_id, sb: SbTag::Untagged })),\n-                Size::from_bytes(addr),\n-            )\n-        } else {\n-            Pointer::new(Some(Tag::Wildcard), Size::from_bytes(addr))\n+        match global_state.provenance_mode {\n+            ProvenanceMode::Legacy => {\n+                // Determine the allocation this points to at cast time.\n+                let alloc_id = Self::alloc_id_from_addr(ecx, addr);\n+                Pointer::new(\n+                    alloc_id.map(|alloc_id| {\n+                        Tag::Concrete(ConcreteTag { alloc_id, sb: SbTag::Untagged })\n+                    }),\n+                    Size::from_bytes(addr),\n+                )\n+            }\n+            ProvenanceMode::Strict => {\n+                // We don't support int2ptr casts in this mode (i.e., we treat them like\n+                // transmutes).\n+                Pointer::new(None, Size::from_bytes(addr))\n+            }\n+            ProvenanceMode::Permissive => {\n+                // This is how wildcard pointers are born.\n+                Pointer::new(Some(Tag::Wildcard), Size::from_bytes(addr))\n+            }\n         }\n     }\n \n@@ -215,6 +230,8 @@ impl<'mir, 'tcx> GlobalStateInner {\n         let alloc_id = if let Tag::Concrete(concrete) = tag {\n             concrete.alloc_id\n         } else {\n+            // A wildcard pointer.\n+            assert_eq!(ecx.machine.intptrcast.borrow().provenance_mode, ProvenanceMode::Permissive);\n             GlobalStateInner::alloc_id_from_addr(ecx, addr.bytes())?\n         };\n "}, {"sha": "0972699e7288666450c444fafc72275f6b372775", "filename": "src/machine.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c51cd7a3fdc83df927b5f268e377d1f00d8b01ce/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51cd7a3fdc83df927b5f268e377d1f00d8b01ce/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=c51cd7a3fdc83df927b5f268e377d1f00d8b01ce", "patch": "@@ -652,19 +652,18 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         intptrcast::GlobalStateInner::ptr_from_addr_transmute(ecx, addr)\n     }\n \n-    #[inline(always)]\n     fn expose_ptr(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         ptr: Pointer<Self::PointerTag>,\n     ) -> InterpResult<'tcx> {\n-        let tag = ptr.provenance;\n-\n-        if let Tag::Concrete(concrete) = tag {\n-            intptrcast::GlobalStateInner::expose_addr(ecx, concrete.alloc_id);\n+        match ptr.provenance {\n+            Tag::Concrete(concrete) =>\n+                intptrcast::GlobalStateInner::expose_addr(ecx, concrete.alloc_id),\n+            Tag::Wildcard => {\n+                // No need to do anything for wildcard pointers as\n+                // their provenances have already been previously exposed.\n+            }\n         }\n-\n-        // No need to do anything for wildcard pointers as\n-        // their provenances have already been previously exposed.\n         Ok(())\n     }\n \n@@ -676,12 +675,13 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     ) -> Option<(AllocId, Size, Self::TagExtra)> {\n         let rel = intptrcast::GlobalStateInner::abs_ptr_to_rel(ecx, ptr);\n \n-        let sb = match ptr.provenance {\n-            Tag::Concrete(ConcreteTag { sb, .. }) => sb,\n-            Tag::Wildcard => SbTag::Untagged,\n-        };\n-\n-        rel.map(|(alloc_id, size)| (alloc_id, size, sb))\n+        rel.map(|(alloc_id, size)| {\n+            let sb = match ptr.provenance {\n+                Tag::Concrete(ConcreteTag { sb, .. }) => sb,\n+                Tag::Wildcard => SbTag::Untagged,\n+            };\n+            (alloc_id, size, sb)\n+        })\n     }\n \n     #[inline(always)]"}]}