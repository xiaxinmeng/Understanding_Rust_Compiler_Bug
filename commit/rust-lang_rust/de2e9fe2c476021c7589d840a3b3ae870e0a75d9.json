{"sha": "de2e9fe2c476021c7589d840a3b3ae870e0a75d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMmU5ZmUyYzQ3NjAyMWM3NTg5ZDg0MGEzYjNhZTg3MGUwYTc1ZDk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-14T21:09:37Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-21T18:56:20Z"}, "message": "Center trim on the span labels and handle unicode", "tree": {"sha": "2bbb1fc1baa293ae10820fac5c080d69ad443723", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bbb1fc1baa293ae10820fac5c080d69ad443723"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de2e9fe2c476021c7589d840a3b3ae870e0a75d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de2e9fe2c476021c7589d840a3b3ae870e0a75d9", "html_url": "https://github.com/rust-lang/rust/commit/de2e9fe2c476021c7589d840a3b3ae870e0a75d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de2e9fe2c476021c7589d840a3b3ae870e0a75d9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45a6be545891f4a8f19f0dce801b67fdccf435ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/45a6be545891f4a8f19f0dce801b67fdccf435ee", "html_url": "https://github.com/rust-lang/rust/commit/45a6be545891f4a8f19f0dce801b67fdccf435ee"}], "stats": {"total": 69, "additions": 41, "deletions": 28}, "files": [{"sha": "d20e700b355a1e97f5b272f120d697d0a58dec79", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 35, "deletions": 22, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/de2e9fe2c476021c7589d840a3b3ae870e0a75d9/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de2e9fe2c476021c7589d840a3b3ae870e0a75d9/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=de2e9fe2c476021c7589d840a3b3ae870e0a75d9", "patch": "@@ -143,11 +143,13 @@ impl Margin {\n                 self.computed_right = self.computed_left + self.column_width;\n             } else if self.label_right - self.span_left <= self.column_width {\n                 // Attempt to fit the code window considering only the spans and labels.\n-                self.computed_left = self.span_left;\n+                let padding_left = (self.column_width - (self.label_right - self.span_left)) / 2;\n+                self.computed_left = self.span_left - padding_left;\n                 self.computed_right = self.computed_left + self.column_width;\n             } else if self.span_right - self.span_left <= self.column_width {\n                 // Attempt to fit the code window considering the spans and labels plus padding.\n-                self.computed_left = self.span_left;\n+                let padding_left = (self.column_width - (self.span_right - self.span_left)) / 2;\n+                self.computed_left = self.span_left - padding_left;\n                 self.computed_right = self.computed_left + self.column_width;\n             } else { // Mostly give up but still don't show the full line.\n                 self.computed_left = self.span_left;\n@@ -360,13 +362,11 @@ impl EmitterWriter {\n     ) {\n         let line_len = source_string.len();\n         // Create the source line we will highlight.\n-        buffer.puts(\n-            line_offset,\n-            code_offset,\n-            // On long lines, we strip the source line\n-            &source_string[margin.left(line_len)..margin.right(line_len)],\n-            Style::Quotation,\n-        );\n+        let left = margin.left(line_len);\n+        let right = margin.right(line_len);\n+        // On long lines, we strip the source line, accounting for unicode.\n+        let code: String = source_string.chars().skip(left).take(right - left).collect();\n+        buffer.puts(line_offset, code_offset, &code, Style::Quotation);\n         if margin.was_cut_left() {\n             // We have stripped some code/whitespace from the beginning, make it clear.\n             buffer.puts(line_offset, code_offset, \"...\", Style::LineNumber);\n@@ -419,6 +419,8 @@ impl EmitterWriter {\n \n         let line_offset = buffer.num_lines();\n \n+        let left = margin.left(source_string.len()); // Left trim\n+\n         self.draw_line(\n             buffer,\n             &source_string,\n@@ -680,15 +682,15 @@ impl EmitterWriter {\n                         '_',\n                         line_offset + pos,\n                         width_offset + depth,\n-                        code_offset + annotation.start_col - margin.computed_left,\n+                        code_offset + annotation.start_col - left,\n                         style,\n                     );\n                 }\n                 _ if self.teach => {\n                     buffer.set_style_range(\n                         line_offset,\n-                        code_offset + annotation.start_col - margin.computed_left,\n-                        code_offset + annotation.end_col - margin.computed_left,\n+                        code_offset + annotation.start_col - left,\n+                        code_offset + annotation.end_col - left,\n                         style,\n                         annotation.is_primary,\n                     );\n@@ -763,15 +765,20 @@ impl EmitterWriter {\n                 Style::LabelSecondary\n             };\n             let (pos, col) = if pos == 0 {\n-                (pos + 1, annotation.end_col + 1 - margin.computed_left)\n+                (pos + 1, if annotation.end_col + 1 > left {\n+                    annotation.end_col + 1 - left\n+                } else {\n+                    0\n+                })\n             } else {\n-                (pos + 2, annotation.start_col - margin.computed_left)\n+                (pos + 2, if annotation.start_col > left {\n+                    annotation.start_col - left\n+                } else {\n+                    0\n+                })\n             };\n             if let Some(ref label) = annotation.label {\n-                buffer.puts(line_offset + pos,\n-                            code_offset + col,\n-                            &label,\n-                            style);\n+                buffer.puts(line_offset + pos, code_offset + col, &label, style);\n             }\n         }\n \n@@ -806,10 +813,16 @@ impl EmitterWriter {\n                 ('-', Style::UnderlineSecondary)\n             };\n             for p in annotation.start_col..annotation.end_col {\n-                buffer.putc(line_offset + 1,\n-                            code_offset + p - margin.computed_left,\n-                            underline,\n-                            style);\n+                buffer.putc(\n+                    line_offset + 1,\n+                    if code_offset + p > left {\n+                        code_offset + p - left\n+                    } else {\n+                        0\n+                    },\n+                    underline,\n+                    style,\n+                );\n             }\n         }\n         annotations_position.iter().filter_map(|&(_, annotation)| {"}, {"sha": "abd9e189a75378d59123d8feec47890d2a69cc3e", "filename": "src/test/ui/terminal-width/non-whitespace-trimming-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de2e9fe2c476021c7589d840a3b3ae870e0a75d9/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de2e9fe2c476021c7589d840a3b3ae870e0a75d9/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.rs?ref=de2e9fe2c476021c7589d840a3b3ae870e0a75d9", "patch": "@@ -1,6 +1,6 @@\n // ignore-tidy-linelength\n \n fn main() {\n-    let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = 42; let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = ();\n+    let _: usize = 0; let _: usize = 1; let _: usize = 2; let _: usize = 3; let _: usize = 4; let _: usize = 5; let _: usize = 6; let _: usize = 7; let _: usize = 8; let _: usize = 9; let _: usize = 10; let _: usize = 11; let _: usize = 12; let _: usize = 13; let _: usize = 14; let _: usize = 15; let _: () = 42; let _: usize = 0; let _: usize = 1; let _: usize = 2; let _: usize = 3; let _: usize = 4; let _: usize = 5; let _: usize = 6; let _: usize = 7; let _: usize = 8; let _: usize = 9; let _: usize = 10; let _: usize = 11; let _: usize = 12; let _: usize = 13; let _: usize = 14; let _: usize = 15;\n //~^ ERROR mismatched types\n }"}, {"sha": "bf1699f5cabbb5d61ac29c8055f749901b780471", "filename": "src/test/ui/terminal-width/non-whitespace-trimming-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de2e9fe2c476021c7589d840a3b3ae870e0a75d9/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de2e9fe2c476021c7589d840a3b3ae870e0a75d9/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr?ref=de2e9fe2c476021c7589d840a3b3ae870e0a75d9", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/non-whitespace-trimming-2.rs:4:241\n+  --> $DIR/non-whitespace-trimming-2.rs:4:311\n    |\n-LL | ... = 42; let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = ();...\n-   |       ^^ expected (), found integer\n+LL | ...; let _: usize = 14; let _: usize = 15; let _: () = 42; let _: usize = 0; let _: usize = 1; let _: usize = 2; let _: usize = 3; let _:...\n+   |                                                        ^^ expected (), found integer\n    |\n    = note: expected type `()`\n               found type `{integer}`"}, {"sha": "622713eb5f6fc432939263c51f2d9c24c4f6ce71", "filename": "src/test/ui/terminal-width/non-whitespace-trimming.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de2e9fe2c476021c7589d840a3b3ae870e0a75d9/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de2e9fe2c476021c7589d840a3b3ae870e0a75d9/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr?ref=de2e9fe2c476021c7589d840a3b3ae870e0a75d9", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/non-whitespace-trimming.rs:4:241\n    |\n-LL | ... = 42; let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = ();\n-   |       ^^ expected (), found integer\n+LL | ...) = (); let _: () = (); let _: () = (); let _: () = 42; let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = ()...\n+   |                                                        ^^ expected (), found integer\n    |\n    = note: expected type `()`\n               found type `{integer}`"}]}