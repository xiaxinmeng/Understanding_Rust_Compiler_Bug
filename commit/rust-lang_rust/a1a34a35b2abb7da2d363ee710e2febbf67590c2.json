{"sha": "a1a34a35b2abb7da2d363ee710e2febbf67590c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYTM0YTM1YjJhYmI3ZGEyZDM2M2VlNzEwZTJmZWJiZjY3NTkwYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-12T00:21:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-12T00:21:28Z"}, "message": "Merge pull request #20915 from csouth3/hash-iters\n\nAdd ExactSizeIterator impls for Hash{Map, Set, Table}\n\nReviewed-by: Gankro", "tree": {"sha": "3ece578f135add6e674898deac733c040e27e283", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ece578f135add6e674898deac733c040e27e283"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1a34a35b2abb7da2d363ee710e2febbf67590c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1a34a35b2abb7da2d363ee710e2febbf67590c2", "html_url": "https://github.com/rust-lang/rust/commit/a1a34a35b2abb7da2d363ee710e2febbf67590c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1a34a35b2abb7da2d363ee710e2febbf67590c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79602e24c85a16a0eae42e1ec5dd59446b79ddab", "url": "https://api.github.com/repos/rust-lang/rust/commits/79602e24c85a16a0eae42e1ec5dd59446b79ddab", "html_url": "https://github.com/rust-lang/rust/commit/79602e24c85a16a0eae42e1ec5dd59446b79ddab"}, {"sha": "c05338793b39539121ce9117d1b341d6529948ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/c05338793b39539121ce9117d1b341d6529948ba", "html_url": "https://github.com/rust-lang/rust/commit/c05338793b39539121ce9117d1b341d6529948ba"}], "stats": {"total": 128, "additions": 98, "deletions": 30}, "files": [{"sha": "80ae3076df37a6ca7fd882e2347afdae4fff5d0b", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 59, "deletions": 15, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a1a34a35b2abb7da2d363ee710e2febbf67590c2/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a34a35b2abb7da2d363ee710e2febbf67590c2/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=a1a34a35b2abb7da2d363ee710e2febbf67590c2", "patch": "@@ -20,7 +20,7 @@ use cmp::{max, Eq, PartialEq};\n use default::Default;\n use fmt::{self, Show};\n use hash::{self, Hash, SipHasher};\n-use iter::{self, Iterator, IteratorExt, FromIterator, Extend, Map};\n+use iter::{self, Iterator, ExactSizeIterator, IteratorExt, FromIterator, Extend, Map};\n use marker::Sized;\n use mem::{self, replace};\n use num::{Int, UnsignedInt};\n@@ -1384,53 +1384,71 @@ impl<'a, K, V> Iterator for Iter<'a, K, V> {\n     type Item = (&'a K, &'a V);\n \n     #[inline] fn next(&mut self) -> Option<(&'a K, &'a V)> { self.inner.next() }\n-    #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n+    #[inline] fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n+}\n+#[stable]\n+impl<'a, K, V> ExactSizeIterator for Iter<'a, K, V> {\n+    #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n \n #[stable]\n impl<'a, K, V> Iterator for IterMut<'a, K, V> {\n     type Item = (&'a K, &'a mut V);\n \n     #[inline] fn next(&mut self) -> Option<(&'a K, &'a mut V)> { self.inner.next() }\n-    #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n+    #[inline] fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n+}\n+#[stable]\n+impl<'a, K, V> ExactSizeIterator for IterMut<'a, K, V> {\n+    #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n \n #[stable]\n impl<K, V> Iterator for IntoIter<K, V> {\n     type Item = (K, V);\n \n     #[inline] fn next(&mut self) -> Option<(K, V)> { self.inner.next() }\n-    #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n+    #[inline] fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n+}\n+#[stable]\n+impl<K, V> ExactSizeIterator for IntoIter<K, V> {\n+    #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n \n #[stable]\n impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     type Item = &'a K;\n \n     #[inline] fn next(&mut self) -> Option<(&'a K)> { self.inner.next() }\n-    #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n+    #[inline] fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n+}\n+#[stable]\n+impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> {\n+    #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n \n #[stable]\n impl<'a, K, V> Iterator for Values<'a, K, V> {\n     type Item = &'a V;\n \n     #[inline] fn next(&mut self) -> Option<(&'a V)> { self.inner.next() }\n-    #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n+    #[inline] fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n+}\n+#[stable]\n+impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {\n+    #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n \n #[stable]\n-impl<'a, K: 'a, V: 'a> Iterator for Drain<'a, K, V> {\n+impl<'a, K, V> Iterator for Drain<'a, K, V> {\n     type Item = (K, V);\n \n-    #[inline]\n-    fn next(&mut self) -> Option<(K, V)> {\n-        self.inner.next()\n-    }\n-    #[inline]\n-    fn size_hint(&self) -> (uint, Option<uint>) {\n-        self.inner.size_hint()\n-    }\n+    #[inline] fn next(&mut self) -> Option<(K, V)> { self.inner.next() }\n+    #[inline] fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n+}\n+#[stable]\n+impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n+    #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n \n #[unstable = \"matches collection reform v2 specification, waiting for dust to settle\"]\n@@ -2135,6 +2153,19 @@ mod test_map {\n         assert_eq!(iter.size_hint(), (3, Some(3)));\n     }\n \n+    #[test]\n+    fn test_iter_len() {\n+        let xs = [(1i, 1i), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n+\n+        let map: HashMap<int, int> = xs.iter().map(|&x| x).collect();\n+\n+        let mut iter = map.iter();\n+\n+        for _ in iter.by_ref().take(3) {}\n+\n+        assert_eq!(iter.len(), 3);\n+    }\n+\n     #[test]\n     fn test_mut_size_hint() {\n         let xs = [(1i, 1i), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n@@ -2148,6 +2179,19 @@ mod test_map {\n         assert_eq!(iter.size_hint(), (3, Some(3)));\n     }\n \n+    #[test]\n+    fn test_iter_mut_len() {\n+        let xs = [(1i, 1i), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n+\n+        let mut map: HashMap<int, int> = xs.iter().map(|&x| x).collect();\n+\n+        let mut iter = map.iter_mut();\n+\n+        for _ in iter.by_ref().take(3) {}\n+\n+        assert_eq!(iter.len(), 3);\n+    }\n+\n     #[test]\n     fn test_index() {\n         let mut map: HashMap<int, int> = HashMap::new();"}, {"sha": "1293f45161d78c2e25bb6bb2af76387710491502", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a1a34a35b2abb7da2d363ee710e2febbf67590c2/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a34a35b2abb7da2d363ee710e2febbf67590c2/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=a1a34a35b2abb7da2d363ee710e2febbf67590c2", "patch": "@@ -18,7 +18,7 @@ use default::Default;\n use fmt::Show;\n use fmt;\n use hash::{self, Hash};\n-use iter::{Iterator, IteratorExt, FromIterator, Map, Chain, Extend};\n+use iter::{Iterator, ExactSizeIterator, IteratorExt, FromIterator, Map, Chain, Extend};\n use ops::{BitOr, BitAnd, BitXor, Sub};\n use option::Option::{Some, None, self};\n \n@@ -837,23 +837,35 @@ impl<'a, K> Iterator for Iter<'a, K> {\n     type Item = &'a K;\n \n     fn next(&mut self) -> Option<&'a K> { self.iter.next() }\n-    fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n+    fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n+}\n+#[stable]\n+impl<'a, K> ExactSizeIterator for Iter<'a, K> {\n+    fn len(&self) -> usize { self.iter.len() }\n }\n \n #[stable]\n impl<K> Iterator for IntoIter<K> {\n     type Item = K;\n \n     fn next(&mut self) -> Option<K> { self.iter.next() }\n-    fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n+    fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n+}\n+#[stable]\n+impl<K> ExactSizeIterator for IntoIter<K> {\n+    fn len(&self) -> usize { self.iter.len() }\n }\n \n #[stable]\n-impl<'a, K: 'a> Iterator for Drain<'a, K> {\n+impl<'a, K> Iterator for Drain<'a, K> {\n     type Item = K;\n \n     fn next(&mut self) -> Option<K> { self.iter.next() }\n-    fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n+    fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n+}\n+#[stable]\n+impl<'a, K> ExactSizeIterator for Drain<'a, K> {\n+    fn len(&self) -> usize { self.iter.len() }\n }\n \n #[stable]\n@@ -875,7 +887,7 @@ impl<'a, T, S, H> Iterator for Intersection<'a, T, S>\n         }\n     }\n \n-    fn size_hint(&self) -> (uint, Option<uint>) {\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n         let (_, upper) = self.iter.size_hint();\n         (0, upper)\n     }\n@@ -900,7 +912,7 @@ impl<'a, T, S, H> Iterator for Difference<'a, T, S>\n         }\n     }\n \n-    fn size_hint(&self) -> (uint, Option<uint>) {\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n         let (_, upper) = self.iter.size_hint();\n         (0, upper)\n     }\n@@ -915,7 +927,7 @@ impl<'a, T, S, H> Iterator for SymmetricDifference<'a, T, S>\n     type Item = &'a T;\n \n     fn next(&mut self) -> Option<&'a T> { self.iter.next() }\n-    fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n+    fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n }\n \n #[stable]\n@@ -927,7 +939,7 @@ impl<'a, T, S, H> Iterator for Union<'a, T, S>\n     type Item = &'a T;\n \n     fn next(&mut self) -> Option<&'a T> { self.iter.next() }\n-    fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n+    fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n }\n \n #[cfg(test)]"}, {"sha": "f28b95dbe95c4b64a605e434116c432693ae5aa2", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a1a34a35b2abb7da2d363ee710e2febbf67590c2/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a34a35b2abb7da2d363ee710e2febbf67590c2/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=a1a34a35b2abb7da2d363ee710e2febbf67590c2", "patch": "@@ -15,7 +15,7 @@ use self::BucketState::*;\n use clone::Clone;\n use cmp;\n use hash::{Hash, Hasher};\n-use iter::{Iterator, count};\n+use iter::{Iterator, ExactSizeIterator, count};\n use marker::{Copy, Sized, self};\n use mem::{min_align_of, size_of};\n use mem;\n@@ -838,10 +838,13 @@ impl<'a, K, V> Iterator for Iter<'a, K, V> {\n         })\n     }\n \n-    fn size_hint(&self) -> (uint, Option<uint>) {\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.elems_left, Some(self.elems_left))\n     }\n }\n+impl<'a, K, V> ExactSizeIterator for Iter<'a, K, V> {\n+    fn len(&self) -> usize { self.elems_left }\n+}\n \n impl<'a, K, V> Iterator for IterMut<'a, K, V> {\n     type Item = (&'a K, &'a mut V);\n@@ -856,10 +859,13 @@ impl<'a, K, V> Iterator for IterMut<'a, K, V> {\n         })\n     }\n \n-    fn size_hint(&self) -> (uint, Option<uint>) {\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.elems_left, Some(self.elems_left))\n     }\n }\n+impl<'a, K, V> ExactSizeIterator for IterMut<'a, K, V> {\n+    fn len(&self) -> usize { self.elems_left }\n+}\n \n impl<K, V> Iterator for IntoIter<K, V> {\n     type Item = (SafeHash, K, V);\n@@ -879,13 +885,16 @@ impl<K, V> Iterator for IntoIter<K, V> {\n         })\n     }\n \n-    fn size_hint(&self) -> (uint, Option<uint>) {\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n         let size = self.table.size();\n         (size, Some(size))\n     }\n }\n+impl<K, V> ExactSizeIterator for IntoIter<K, V> {\n+    fn len(&self) -> usize { self.table.size() }\n+}\n \n-impl<'a, K: 'a, V: 'a> Iterator for Drain<'a, K, V> {\n+impl<'a, K, V> Iterator for Drain<'a, K, V> {\n     type Item = (SafeHash, K, V);\n \n     #[inline]\n@@ -904,11 +913,14 @@ impl<'a, K: 'a, V: 'a> Iterator for Drain<'a, K, V> {\n         })\n     }\n \n-    fn size_hint(&self) -> (uint, Option<uint>) {\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n         let size = self.table.size();\n         (size, Some(size))\n     }\n }\n+impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n+    fn len(&self) -> usize { self.table.size() }\n+}\n \n #[unsafe_destructor]\n impl<'a, K: 'a, V: 'a> Drop for Drain<'a, K, V> {"}]}