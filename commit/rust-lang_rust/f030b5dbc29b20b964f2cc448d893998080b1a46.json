{"sha": "f030b5dbc29b20b964f2cc448d893998080b1a46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMzBiNWRiYzI5YjIwYjk2NGYyY2M0NDhkODkzOTk4MDgwYjFhNDY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-03T10:11:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-03T10:15:39Z"}, "message": "degrade gracefully with empty spans", "tree": {"sha": "14c0faafef67c1d847275ad58dff37d0b92c1675", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14c0faafef67c1d847275ad58dff37d0b92c1675"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f030b5dbc29b20b964f2cc448d893998080b1a46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f030b5dbc29b20b964f2cc448d893998080b1a46", "html_url": "https://github.com/rust-lang/rust/commit/f030b5dbc29b20b964f2cc448d893998080b1a46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f030b5dbc29b20b964f2cc448d893998080b1a46/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d8100a068151512774caf15a6a88766ca9cf434", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d8100a068151512774caf15a6a88766ca9cf434", "html_url": "https://github.com/rust-lang/rust/commit/7d8100a068151512774caf15a6a88766ca9cf434"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "237e6823e0f8752b6693fd8d90b4887c4479f25b", "filename": "src/libsyntax/errors/snippet/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f030b5dbc29b20b964f2cc448d893998080b1a46/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f030b5dbc29b20b964f2cc448d893998080b1a46/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs?ref=f030b5dbc29b20b964f2cc448d893998080b1a46", "patch": "@@ -376,11 +376,21 @@ impl FileInfo {\n         // Basically, although this loses information, multi-line spans just\n         // never look good.\n \n-        let (line, start_col, end_col) = if lines.len() == 1 {\n+        let (line, start_col, mut end_col) = if lines.len() == 1 {\n             (lines[0].line_index, lines[0].start_col, lines[0].end_col)\n         } else {\n             (lines[0].line_index, lines[0].start_col, CharPos(lines[0].start_col.0 + 1))\n         };\n+\n+        // Watch out for \"empty spans\". If we get a span like 6..6, we\n+        // want to just display a `^` at 6, so convert that to\n+        // 6..7. This is degenerate input, but it's best to degrade\n+        // gracefully -- and the parser likes to suply a span like\n+        // that for EOF, in particular.\n+        if start_col == end_col {\n+            end_col.0 += 1;\n+        }\n+\n         let index = self.ensure_source_line(line);\n         self.lines[index].push_annotation(start_col,\n                                           end_col,"}, {"sha": "5a888b488191ba0ea07b45b8e0f65796b796fc8b", "filename": "src/libsyntax/errors/snippet/test.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f030b5dbc29b20b964f2cc448d893998080b1a46/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f030b5dbc29b20b964f2cc448d893998080b1a46/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs?ref=f030b5dbc29b20b964f2cc448d893998080b1a46", "patch": "@@ -519,3 +519,41 @@ fn span_overlap_label3() {\n   |>            ----- bar\n \"#[1..]);\n }\n+\n+#[test]\n+fn span_empty() {\n+    // In one of the unit tests, we found that the parser sometimes\n+    // gives empty spans, and in particular it supplied an EOF span\n+    // like this one, which points at the very end. We want to\n+    // fallback gracefully in this case.\n+\n+    let file_text = r#\"\n+fn main() {\n+    struct Foo;\n+\n+    impl !Sync for Foo {}\n+\n+    unsafe impl Send for &'static Foo {\n+    // error: cross-crate traits with a default impl, like `core::marker::Send`,\n+    //        can only be implemented for a struct/enum type, not\n+    //        `&'static Foo`\n+}\"#;\n+\n+\n+    let cm = Rc::new(CodeMap::new());\n+    let foo = cm.new_filemap_and_lines(\"foo.rs\", file_text);\n+\n+    let mut rbrace_span = cm.span_substr(&foo, file_text, \"}\", 1);\n+    rbrace_span.lo = rbrace_span.hi;\n+\n+    let mut snippet = SnippetData::new(cm.clone(), Some(rbrace_span));\n+    snippet.push(rbrace_span, false, None);\n+    let lines = snippet.render_lines();\n+    let text: String = make_string(&lines);\n+    println!(\"r#\\\"\\n{}\\\"\", text);\n+    assert_eq!(text, &r#\"\n+  --> foo.rs:11:2\n+11 |> }\n+   |>  -\n+\"#[1..]);\n+}"}]}