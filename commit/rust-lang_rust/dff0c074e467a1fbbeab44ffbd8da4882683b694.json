{"sha": "dff0c074e467a1fbbeab44ffbd8da4882683b694", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZjBjMDc0ZTQ2N2ExZmJiZWFiNDRmZmJkOGRhNDg4MjY4M2I2OTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-28T22:55:32Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-05T14:37:11Z"}, "message": "rustc: Move a few more cstore methods to queries\n\nThis comit applies the following changes:\n\n* Deletes the `is_allocator` query as it's no longer used\n* Moves the `is_sanitizer_runtime` method to a query\n* Moves the `is_profiler_runtime` method to a query\n* Moves the `panic_strategy` method to a query\n* Moves the `is_no_builtins` method to a query\n* Deletes the cstore method of `is_compiler_builtins`. The query was added in\n  #42588 but the `CrateStore` method was not deleted\n\nA good bit of these methods were used late in linking during trans so a new\ndedicated structure was created to ship a calculated form of this information\nover to the linker rather than having to ship the whole of `TyCtxt` over to\nlinking.", "tree": {"sha": "08c1104e31ab1dde70b97eb6eaedd7f97dc3bfa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08c1104e31ab1dde70b97eb6eaedd7f97dc3bfa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dff0c074e467a1fbbeab44ffbd8da4882683b694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dff0c074e467a1fbbeab44ffbd8da4882683b694", "html_url": "https://github.com/rust-lang/rust/commit/dff0c074e467a1fbbeab44ffbd8da4882683b694", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dff0c074e467a1fbbeab44ffbd8da4882683b694/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f1ef9ef1181298d46e79d5dde6bafeb6483926f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f1ef9ef1181298d46e79d5dde6bafeb6483926f", "html_url": "https://github.com/rust-lang/rust/commit/2f1ef9ef1181298d46e79d5dde6bafeb6483926f"}], "stats": {"total": 235, "additions": 150, "deletions": 85}, "files": [{"sha": "6000740f2b010cadf76d7f273222522ffe628d7e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=dff0c074e467a1fbbeab44ffbd8da4882683b694", "patch": "@@ -521,16 +521,19 @@ define_dep_nodes!( <'tcx>\n     [] IsMirAvailable(DefId),\n     [] ItemAttrs(DefId),\n     [] FnArgNames(DefId),\n-    [] DylibDepFormats(DefId),\n-    [] IsAllocator(DefId),\n-    [] IsPanicRuntime(DefId),\n-    [] IsCompilerBuiltins(DefId),\n-    [] HasGlobalAllocator(DefId),\n+    [] DylibDepFormats(CrateNum),\n+    [] IsPanicRuntime(CrateNum),\n+    [] IsCompilerBuiltins(CrateNum),\n+    [] HasGlobalAllocator(CrateNum),\n     [] ExternCrate(DefId),\n     [] LintLevels,\n     [] Specializes { impl1: DefId, impl2: DefId },\n     [] InScopeTraits(HirId),\n     [] ModuleExports(HirId),\n+    [] IsSanitizerRuntime(CrateNum),\n+    [] IsProfilerRuntime(CrateNum),\n+    [] GetPanicStrategy(CrateNum),\n+    [] IsNoBuiltins(CrateNum),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "163c75fe97dd6444609de867d681c8b8c877e222", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=dff0c074e467a1fbbeab44ffbd8da4882683b694", "patch": "@@ -44,7 +44,6 @@ use syntax::symbol::Symbol;\n use syntax_pos::Span;\n use rustc_back::target::Target;\n use hir;\n-use rustc_back::PanicStrategy;\n \n pub use self::NativeLibraryKind::*;\n \n@@ -252,10 +251,6 @@ pub trait CrateStore {\n     fn export_macros(&self, cnum: CrateNum);\n     fn lang_items(&self, cnum: CrateNum) -> Vec<(DefIndex, usize)>;\n     fn missing_lang_items(&self, cnum: CrateNum) -> Vec<lang_items::LangItem>;\n-    fn is_compiler_builtins(&self, cnum: CrateNum) -> bool;\n-    fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool;\n-    fn is_profiler_runtime(&self, cnum: CrateNum) -> bool;\n-    fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy;\n     /// The name of the crate as it is referred to in source code of the current\n     /// crate.\n     fn crate_name(&self, cnum: CrateNum) -> Symbol;\n@@ -267,7 +262,6 @@ pub trait CrateStore {\n     fn derive_registrar_fn(&self, cnum: CrateNum) -> Option<DefId>;\n     fn native_libraries(&self, cnum: CrateNum) -> Vec<NativeLibrary>;\n     fn exported_symbols(&self, cnum: CrateNum) -> Vec<DefId>;\n-    fn is_no_builtins(&self, cnum: CrateNum) -> bool;\n \n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey;\n@@ -366,12 +360,6 @@ impl CrateStore for DummyCrateStore {\n         { bug!(\"missing_lang_items\") }\n     fn dep_kind(&self, cnum: CrateNum) -> DepKind { bug!(\"is_explicitly_linked\") }\n     fn export_macros(&self, cnum: CrateNum) { bug!(\"export_macros\") }\n-    fn is_compiler_builtins(&self, cnum: CrateNum) -> bool { bug!(\"is_compiler_builtins\") }\n-    fn is_profiler_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_profiler_runtime\") }\n-    fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_sanitizer_runtime\") }\n-    fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy {\n-        bug!(\"panic_strategy\")\n-    }\n     fn crate_name(&self, cnum: CrateNum) -> Symbol { bug!(\"crate_name\") }\n     fn original_crate_name(&self, cnum: CrateNum) -> Symbol {\n         bug!(\"original_crate_name\")\n@@ -386,7 +374,6 @@ impl CrateStore for DummyCrateStore {\n     fn native_libraries(&self, cnum: CrateNum) -> Vec<NativeLibrary>\n         { bug!(\"native_libraries\") }\n     fn exported_symbols(&self, cnum: CrateNum) -> Vec<DefId> { bug!(\"exported_symbols\") }\n-    fn is_no_builtins(&self, cnum: CrateNum) -> bool { bug!(\"is_no_builtins\") }\n \n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey { bug!(\"def_key\") }"}, {"sha": "323c069ef0c818fe9d47967626f2518bccf6f3a6", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=dff0c074e467a1fbbeab44ffbd8da4882683b694", "patch": "@@ -172,7 +172,7 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         if src.dylib.is_some() {\n             info!(\"adding dylib: {}\", name);\n             add_library(sess, cnum, RequireDynamic, &mut formats);\n-            let deps = tcx.dylib_dependency_formats(cnum.as_def_id());\n+            let deps = tcx.dylib_dependency_formats(cnum);\n             for &(depnum, style) in deps.iter() {\n                 info!(\"adding {:?}: {}\", style,\n                       sess.cstore.crate_name(depnum));\n@@ -215,7 +215,7 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Things like allocators and panic runtimes may not have been activated\n     // quite yet, so do so here.\n     activate_injected_dep(sess.injected_panic_runtime.get(), &mut ret,\n-                          &|cnum| tcx.is_panic_runtime(cnum.as_def_id()));\n+                          &|cnum| tcx.is_panic_runtime(cnum));\n     activate_injected_allocator(sess, &mut ret);\n \n     // When dylib B links to dylib A, then when using B we must also link to A.\n@@ -295,7 +295,7 @@ fn attempt_static<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<DependencyLis\n     // explicitly linked, which is the case for any injected dependency. Handle\n     // that here and activate them.\n     activate_injected_dep(sess.injected_panic_runtime.get(), &mut ret,\n-                          &|cnum| tcx.is_panic_runtime(cnum.as_def_id()));\n+                          &|cnum| tcx.is_panic_runtime(cnum));\n     activate_injected_allocator(sess, &mut ret);\n \n     Some(ret)\n@@ -355,15 +355,15 @@ fn verify_ok<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, list: &[Linkage]) {\n         }\n         let cnum = CrateNum::new(i + 1);\n \n-        if tcx.is_panic_runtime(cnum.as_def_id()) {\n+        if tcx.is_panic_runtime(cnum) {\n             if let Some((prev, _)) = panic_runtime {\n                 let prev_name = sess.cstore.crate_name(prev);\n                 let cur_name = sess.cstore.crate_name(cnum);\n                 sess.err(&format!(\"cannot link together two \\\n                                    panic runtimes: {} and {}\",\n                                   prev_name, cur_name));\n             }\n-            panic_runtime = Some((cnum, sess.cstore.panic_strategy(cnum)));\n+            panic_runtime = Some((cnum, tcx.panic_strategy(cnum)));\n         }\n     }\n \n@@ -395,8 +395,8 @@ fn verify_ok<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, list: &[Linkage]) {\n                 continue\n             }\n             let cnum = CrateNum::new(i + 1);\n-            let found_strategy = sess.cstore.panic_strategy(cnum);\n-            let is_compiler_builtins = sess.cstore.is_compiler_builtins(cnum);\n+            let found_strategy = tcx.panic_strategy(cnum);\n+            let is_compiler_builtins = tcx.is_compiler_builtins(cnum);\n             if is_compiler_builtins || desired_strategy == found_strategy {\n                 continue\n             }"}, {"sha": "20b082552d52a6fbb080f5f8ed851c6b864e9f7c", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=dff0c074e467a1fbbeab44ffbd8da4882683b694", "patch": "@@ -32,6 +32,7 @@ use util::nodemap::{DefIdSet, NodeSet};\n use util::common::{profq_msg, ProfileQueriesMsg};\n \n use rustc_data_structures::indexed_set::IdxSetBuf;\n+use rustc_back::PanicStrategy;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::FxHashMap;\n use std::cell::{RefCell, RefMut, Cell};\n@@ -509,31 +510,25 @@ impl<'tcx> QueryDescription for queries::is_const_fn<'tcx> {\n }\n \n impl<'tcx> QueryDescription for queries::dylib_dependency_formats<'tcx> {\n-    fn describe(_: TyCtxt, _: DefId) -> String {\n+    fn describe(_: TyCtxt, _: CrateNum) -> String {\n         \"dylib dependency formats of crate\".to_string()\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::is_allocator<'tcx> {\n-    fn describe(_: TyCtxt, _: DefId) -> String {\n-        \"checking if the crate is_allocator\".to_string()\n-    }\n-}\n-\n impl<'tcx> QueryDescription for queries::is_panic_runtime<'tcx> {\n-    fn describe(_: TyCtxt, _: DefId) -> String {\n+    fn describe(_: TyCtxt, _: CrateNum) -> String {\n         \"checking if the crate is_panic_runtime\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription for queries::is_compiler_builtins<'tcx> {\n-    fn describe(_: TyCtxt, _: DefId) -> String {\n+    fn describe(_: TyCtxt, _: CrateNum) -> String {\n         \"checking if the crate is_compiler_builtins\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription for queries::has_global_allocator<'tcx> {\n-    fn describe(_: TyCtxt, _: DefId) -> String {\n+    fn describe(_: TyCtxt, _: CrateNum) -> String {\n         \"checking if the crate has_global_allocator\".to_string()\n     }\n }\n@@ -568,6 +563,30 @@ impl<'tcx> QueryDescription for queries::module_exports<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::is_no_builtins<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"test whether a crate has #![no_builtins]\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::panic_strategy<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"query a crate's configured panic strategy\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::is_profiler_runtime<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"query a crate is #![profiler_runtime]\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::is_sanitizer_runtime<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"query a crate is #![sanitizer_runtime]\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1125,21 +1144,23 @@ define_maps! { <'tcx>\n     [] fn layout_raw: layout_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                                   -> Result<&'tcx Layout, LayoutError<'tcx>>,\n \n-    [] fn dylib_dependency_formats: DylibDepFormats(DefId)\n+    [] fn dylib_dependency_formats: DylibDepFormats(CrateNum)\n                                     -> Rc<Vec<(CrateNum, LinkagePreference)>>,\n \n-    [] fn is_allocator: IsAllocator(DefId) -> bool,\n-    [] fn is_panic_runtime: IsPanicRuntime(DefId) -> bool,\n-    [] fn is_compiler_builtins: IsCompilerBuiltins(DefId) -> bool,\n-    [] fn has_global_allocator: HasGlobalAllocator(DefId) -> bool,\n+    [] fn is_panic_runtime: IsPanicRuntime(CrateNum) -> bool,\n+    [] fn is_compiler_builtins: IsCompilerBuiltins(CrateNum) -> bool,\n+    [] fn has_global_allocator: HasGlobalAllocator(CrateNum) -> bool,\n+    [] fn is_sanitizer_runtime: IsSanitizerRuntime(CrateNum) -> bool,\n+    [] fn is_profiler_runtime: IsProfilerRuntime(CrateNum) -> bool,\n+    [] fn panic_strategy: GetPanicStrategy(CrateNum) -> PanicStrategy,\n+    [] fn is_no_builtins: IsNoBuiltins(CrateNum) -> bool,\n \n     [] fn extern_crate: ExternCrate(DefId) -> Rc<Option<ExternCrate>>,\n \n-    [] fn lint_levels: lint_levels(CrateNum) -> Rc<lint::LintLevelMap>,\n-\n     [] fn specializes: specializes_node((DefId, DefId)) -> bool,\n     [] fn in_scope_traits: InScopeTraits(HirId) -> Option<Rc<Vec<TraitCandidate>>>,\n     [] fn module_exports: ModuleExports(HirId) -> Option<Rc<Vec<Export>>>,\n+    [] fn lint_levels: lint_levels_node(CrateNum) -> Rc<lint::LintLevelMap>,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {\n@@ -1212,7 +1233,7 @@ fn layout_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'\n     DepConstructor::Layout\n }\n \n-fn lint_levels<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n+fn lint_levels_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::LintLevels\n }\n "}, {"sha": "76051f382cc0d42b3cdc8cc50b064d71e8f54786", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=dff0c074e467a1fbbeab44ffbd8da4882683b694", "patch": "@@ -27,7 +27,6 @@ use rustc::hir::map::{DefKey, DefPath, DefPathHash};\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::hir::map::definitions::{DefPathTable, GlobalMetaDataKind};\n use rustc::util::nodemap::{NodeSet, DefIdMap};\n-use rustc_back::PanicStrategy;\n \n use std::any::Any;\n use std::rc::Rc;\n@@ -45,9 +44,12 @@ use rustc::hir;\n macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $cdata:ident, $($name:ident => $compute:block)*) => {\n         pub fn provide<$lt>(providers: &mut Providers<$lt>) {\n-            $(fn $name<'a, $lt:$lt>($tcx: TyCtxt<'a, $lt, $lt>, $def_id: DefId)\n+            $(fn $name<'a, $lt:$lt, T>($tcx: TyCtxt<'a, $lt, $lt>, def_id_arg: T)\n                                     -> <ty::queries::$name<$lt> as\n-                                        QueryConfig>::Value {\n+                                        QueryConfig>::Value\n+                where T: IntoDefId,\n+            {\n+                let $def_id = def_id_arg.into_def_id();\n                 assert!(!$def_id.is_local());\n \n                 let def_path_hash = $tcx.def_path_hash($def_id);\n@@ -69,6 +71,18 @@ macro_rules! provide {\n     }\n }\n \n+trait IntoDefId {\n+    fn into_def_id(self) -> DefId;\n+}\n+\n+impl IntoDefId for DefId {\n+    fn into_def_id(self) -> DefId { self }\n+}\n+\n+impl IntoDefId for CrateNum {\n+    fn into_def_id(self) -> DefId { self.as_def_id() }\n+}\n+\n provide! { <'tcx> tcx, def_id, cdata,\n     type_of => { cdata.get_type(def_id.index, tcx) }\n     generics_of => { tcx.alloc_generics(cdata.get_generics(def_id.index)) }\n@@ -143,7 +157,11 @@ provide! { <'tcx> tcx, def_id, cdata,\n     is_panic_runtime => { cdata.is_panic_runtime(&tcx.dep_graph) }\n     is_compiler_builtins => { cdata.is_compiler_builtins(&tcx.dep_graph) }\n     has_global_allocator => { cdata.has_global_allocator(&tcx.dep_graph) }\n+    is_sanitizer_runtime => { cdata.is_sanitizer_runtime(&tcx.dep_graph) }\n+    is_profiler_runtime => { cdata.is_profiler_runtime(&tcx.dep_graph) }\n+    panic_strategy => { cdata.panic_strategy(&tcx.dep_graph) }\n     extern_crate => { Rc::new(cdata.extern_crate.get()) }\n+    is_no_builtins => { cdata.is_no_builtins(&tcx.dep_graph) }\n }\n \n pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n@@ -248,22 +266,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(cnum).get_missing_lang_items(&self.dep_graph)\n     }\n \n-    fn is_compiler_builtins(&self, cnum: CrateNum) -> bool {\n-        self.get_crate_data(cnum).is_compiler_builtins(&self.dep_graph)\n-    }\n-\n-    fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool {\n-        self.get_crate_data(cnum).is_sanitizer_runtime(&self.dep_graph)\n-    }\n-\n-    fn is_profiler_runtime(&self, cnum: CrateNum) -> bool {\n-        self.get_crate_data(cnum).is_profiler_runtime(&self.dep_graph)\n-    }\n-\n-    fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy {\n-        self.get_crate_data(cnum).panic_strategy(&self.dep_graph)\n-    }\n-\n     fn crate_name(&self, cnum: CrateNum) -> Symbol\n     {\n         self.get_crate_data(cnum).name\n@@ -310,10 +312,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(cnum).get_exported_symbols(&self.dep_graph)\n     }\n \n-    fn is_no_builtins(&self, cnum: CrateNum) -> bool {\n-        self.get_crate_data(cnum).is_no_builtins(&self.dep_graph)\n-    }\n-\n     /// Returns the `DefKey` for a given `DefId`. This indicates the\n     /// parent `DefId` as well as some idea of what kind of data the\n     /// `DefId` refers to."}, {"sha": "e69a2322aaaab70ffeb0e6cdc55ac90438070502", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=dff0c074e467a1fbbeab44ffbd8da4882683b694", "patch": "@@ -22,7 +22,7 @@ use rustc::session::Session;\n use rustc::middle::cstore::{LinkMeta, NativeLibrary, LibSource, LinkagePreference,\n                             NativeLibraryKind};\n use rustc::middle::dependency_format::Linkage;\n-use CrateTranslation;\n+use {CrateTranslation, CrateInfo};\n use rustc::util::common::time;\n use rustc::util::fs::fix_windows_verbatim_for_gcc;\n use rustc::dep_graph::{DepKind, DepNode};\n@@ -260,12 +260,12 @@ pub fn each_linked_rlib(sess: &Session,\n /// It's unusual for a crate to not participate in LTO. Typically only\n /// compiler-specific and unstable crates have a reason to not participate in\n /// LTO.\n-pub fn ignored_for_lto(sess: &Session, cnum: CrateNum) -> bool {\n+pub fn ignored_for_lto(info: &CrateInfo, cnum: CrateNum) -> bool {\n     // `#![no_builtins]` crates don't participate in LTO because the state\n     // of builtins gets messed up (our crate isn't tagged with no builtins).\n     // Similarly `#![compiler_builtins]` doesn't participate because we want\n     // those builtins!\n-    sess.cstore.is_no_builtins(cnum) || sess.cstore.is_compiler_builtins(cnum)\n+    info.is_no_builtins.contains(&cnum) || info.compiler_builtins == Some(cnum)\n }\n \n fn out_filename(sess: &Session,\n@@ -634,7 +634,7 @@ fn link_staticlib(sess: &Session,\n         });\n         ab.add_rlib(path,\n                     &name.as_str(),\n-                    sess.lto() && !ignored_for_lto(sess, cnum),\n+                    sess.lto() && !ignored_for_lto(&trans.crate_info, cnum),\n                     skip_object_files).unwrap();\n \n         all_native_libs.extend(sess.cstore.native_libraries(cnum));\n@@ -1001,7 +1001,7 @@ fn link_args(cmd: &mut Linker,\n     // in this DAG so far because they're only dylibs and dylibs can only depend\n     // on other dylibs (e.g. other native deps).\n     add_local_native_libraries(cmd, sess);\n-    add_upstream_rust_crates(cmd, sess, crate_type, tmpdir);\n+    add_upstream_rust_crates(cmd, sess, trans, crate_type, tmpdir);\n     add_upstream_native_libraries(cmd, sess, crate_type);\n \n     // Tell the linker what we're doing.\n@@ -1088,6 +1088,7 @@ fn add_local_native_libraries(cmd: &mut Linker, sess: &Session) {\n // the intermediate rlib version)\n fn add_upstream_rust_crates(cmd: &mut Linker,\n                             sess: &Session,\n+                            trans: &CrateTranslation,\n                             crate_type: config::CrateType,\n                             tmpdir: &Path) {\n     // All of the heavy lifting has previously been accomplished by the\n@@ -1113,22 +1114,22 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n         // symbols from the dylib.\n         let src = sess.cstore.used_crate_source(cnum);\n         match data[cnum.as_usize() - 1] {\n-            _ if sess.cstore.is_profiler_runtime(cnum) => {\n-                add_static_crate(cmd, sess, tmpdir, crate_type, cnum);\n+            _ if trans.crate_info.profiler_runtime == Some(cnum) => {\n+                add_static_crate(cmd, sess, trans, tmpdir, crate_type, cnum);\n             }\n-            _ if sess.cstore.is_sanitizer_runtime(cnum) => {\n+            _ if trans.crate_info.sanitizer_runtime == Some(cnum) => {\n                 link_sanitizer_runtime(cmd, sess, tmpdir, cnum);\n             }\n             // compiler-builtins are always placed last to ensure that they're\n             // linked correctly.\n-            _ if sess.cstore.is_compiler_builtins(cnum) => {\n+            _ if trans.crate_info.compiler_builtins == Some(cnum) => {\n                 assert!(compiler_builtins.is_none());\n                 compiler_builtins = Some(cnum);\n             }\n             Linkage::NotLinked |\n             Linkage::IncludedFromDylib => {}\n             Linkage::Static => {\n-                add_static_crate(cmd, sess, tmpdir, crate_type, cnum);\n+                add_static_crate(cmd, sess, trans, tmpdir, crate_type, cnum);\n             }\n             Linkage::Dynamic => {\n                 add_dynamic_crate(cmd, sess, &src.dylib.unwrap().0)\n@@ -1142,7 +1143,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n     // was already \"included\" in a dylib (e.g. `libstd` when `-C prefer-dynamic`\n     // is used)\n     if let Some(cnum) = compiler_builtins {\n-        add_static_crate(cmd, sess, tmpdir, crate_type, cnum);\n+        add_static_crate(cmd, sess, trans, tmpdir, crate_type, cnum);\n     }\n \n     // Converts a library file-stem into a cc -l argument\n@@ -1228,6 +1229,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n     // we're at the end of the dependency chain.\n     fn add_static_crate(cmd: &mut Linker,\n                         sess: &Session,\n+                        trans: &CrateTranslation,\n                         tmpdir: &Path,\n                         crate_type: config::CrateType,\n                         cnum: CrateNum) {\n@@ -1242,7 +1244,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n             lib.kind == NativeLibraryKind::NativeStatic && !relevant_lib(sess, lib)\n         });\n \n-        if (!sess.lto() || ignored_for_lto(sess, cnum)) &&\n+        if (!sess.lto() || ignored_for_lto(&trans.crate_info, cnum)) &&\n            crate_type != config::CrateTypeDylib &&\n            !skip_native {\n             cmd.link_rlib(&fix_windows_verbatim_for_gcc(cratepath));\n@@ -1284,7 +1286,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n                 // LTO module. Note that `#![no_builtins]` is excluded from LTO,\n                 // though, so we let that object file slide.\n                 let skip_because_lto = sess.lto() && is_rust_object &&\n-                                        !sess.cstore.is_no_builtins(cnum);\n+                                        !trans.crate_info.is_no_builtins.contains(&cnum);\n \n                 if skip_because_cfg_say_so || skip_because_lto {\n                     archive.remove_file(&f);\n@@ -1306,7 +1308,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n             // compiler-builtins crate (e.g. compiler-rt) because it'll get\n             // repeatedly linked anyway.\n             if crate_type == config::CrateTypeDylib &&\n-               !sess.cstore.is_compiler_builtins(cnum) {\n+                trans.crate_info.compiler_builtins != Some(cnum) {\n                 cmd.link_whole_rlib(&fix_windows_verbatim_for_gcc(&dst));\n             } else {\n                 cmd.link_rlib(&fix_windows_verbatim_for_gcc(&dst));"}, {"sha": "729573a0f3a48dc95b220ec5c2dc297a5cec640d", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=dff0c074e467a1fbbeab44ffbd8da4882683b694", "patch": "@@ -128,8 +128,7 @@ impl ExportedSymbols {\n             // Down below we'll hardwire all of the symbols to the `Rust` export\n             // level instead.\n             let special_runtime_crate =\n-                tcx.is_panic_runtime(cnum.as_def_id()) ||\n-                tcx.sess.cstore.is_compiler_builtins(cnum);\n+                tcx.is_panic_runtime(cnum) || tcx.is_compiler_builtins(cnum);\n \n             let crate_exports = tcx\n                 .sess"}, {"sha": "ed7a745e440b58782762839679c9eaa6f372cc5c", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=dff0c074e467a1fbbeab44ffbd8da4882683b694", "patch": "@@ -22,6 +22,7 @@ use llvm;\n use llvm::{ModuleRef, TargetMachineRef, PassManagerRef, DiagnosticInfoRef};\n use llvm::SMDiagnosticRef;\n use {CrateTranslation, ModuleSource, ModuleTranslation, CompiledModule, ModuleKind};\n+use CrateInfo;\n use rustc::hir::def_id::CrateNum;\n use rustc::util::common::{time, time_depth, set_time_depth, path2cstr, print_time_passes_entry};\n use rustc::util::fs::{link_or_copy, rename_or_copy_remove};\n@@ -675,6 +676,7 @@ pub fn start_async_translation(sess: &Session,\n                                no_builtins: bool,\n                                windows_subsystem: Option<String>,\n                                linker_info: LinkerInfo,\n+                               crate_info: CrateInfo,\n                                no_integrated_as: bool)\n                                -> OngoingCrateTranslation {\n     let output_types_override = if no_integrated_as {\n@@ -774,6 +776,7 @@ pub fn start_async_translation(sess: &Session,\n     let (coordinator_send, coordinator_receive) = channel();\n \n     let coordinator_thread = start_executing_work(sess,\n+                                                  &crate_info,\n                                                   shared_emitter,\n                                                   trans_worker_send,\n                                                   coordinator_send.clone(),\n@@ -788,6 +791,7 @@ pub fn start_async_translation(sess: &Session,\n         windows_subsystem,\n         linker_info,\n         no_integrated_as,\n+        crate_info,\n \n         regular_module_config: modules_config,\n         metadata_module_config: metadata_config,\n@@ -1101,6 +1105,7 @@ enum MainThreadWorkerState {\n }\n \n fn start_executing_work(sess: &Session,\n+                        crate_info: &CrateInfo,\n                         shared_emitter: SharedEmitter,\n                         trans_worker_send: Sender<Message>,\n                         coordinator_send: Sender<Message>,\n@@ -1126,7 +1131,7 @@ fn start_executing_work(sess: &Session,\n \n     let mut each_linked_rlib_for_lto = Vec::new();\n     drop(link::each_linked_rlib(sess, &mut |cnum, path| {\n-        if link::ignored_for_lto(sess, cnum) {\n+        if link::ignored_for_lto(crate_info, cnum) {\n             return\n         }\n         each_linked_rlib_for_lto.push((cnum, path.to_path_buf()));\n@@ -1802,6 +1807,7 @@ pub struct OngoingCrateTranslation {\n     windows_subsystem: Option<String>,\n     linker_info: LinkerInfo,\n     no_integrated_as: bool,\n+    crate_info: CrateInfo,\n \n     output_filenames: OutputFilenames,\n     regular_module_config: ModuleConfig,\n@@ -1850,6 +1856,7 @@ impl OngoingCrateTranslation {\n             metadata: self.metadata,\n             windows_subsystem: self.windows_subsystem,\n             linker_info: self.linker_info,\n+            crate_info: self.crate_info,\n \n             modules: compiled_modules.modules,\n             allocator_module: compiled_modules.allocator_module,"}, {"sha": "3da8d07f9d796da422ef5752ba6163a39c0a22c6", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=dff0c074e467a1fbbeab44ffbd8da4882683b694", "patch": "@@ -75,6 +75,7 @@ use type_::Type;\n use type_of;\n use value::Value;\n use rustc::util::nodemap::{NodeSet, FxHashMap, FxHashSet};\n+use CrateInfo;\n \n use libc::c_uint;\n use std::ffi::{CStr, CString};\n@@ -970,6 +971,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     } else {\n         None\n     };\n+    let crate_info = CrateInfo::new(tcx);\n \n     // Skip crate items and just output metadata in -Z no-trans mode.\n     if tcx.sess.opts.debugging_opts.no_trans ||\n@@ -987,6 +989,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             no_builtins,\n             None,\n             linker_info,\n+            crate_info,\n             false);\n \n         ongoing_translation.submit_pre_translated_module_to_llvm(tcx.sess, metadata_module, true);\n@@ -1039,6 +1042,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         no_builtins,\n         windows_subsystem,\n         linker_info,\n+        crate_info,\n         no_integrated_as);\n \n     // Translate an allocator shim, if any\n@@ -1502,3 +1506,35 @@ fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a\n \n     (translation_items, codegen_units)\n }\n+\n+impl CrateInfo {\n+    pub fn new(tcx: TyCtxt) -> CrateInfo {\n+        let mut info = CrateInfo {\n+            panic_runtime: None,\n+            compiler_builtins: None,\n+            profiler_runtime: None,\n+            sanitizer_runtime: None,\n+            is_no_builtins: FxHashSet(),\n+        };\n+\n+        for cnum in tcx.sess.cstore.crates() {\n+            if tcx.is_panic_runtime(cnum) {\n+                info.panic_runtime = Some(cnum);\n+            }\n+            if tcx.is_compiler_builtins(cnum) {\n+                info.compiler_builtins = Some(cnum);\n+            }\n+            if tcx.is_profiler_runtime(cnum) {\n+                info.profiler_runtime = Some(cnum);\n+            }\n+            if tcx.is_sanitizer_runtime(cnum) {\n+                info.sanitizer_runtime = Some(cnum);\n+            }\n+            if tcx.is_no_builtins(cnum) {\n+                info.is_no_builtins.insert(cnum);\n+            }\n+        }\n+\n+        return info\n+    }\n+}"}, {"sha": "42aa47436c8b5f8d88fd11b6cfff2b6d514e1019", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=dff0c074e467a1fbbeab44ffbd8da4882683b694", "patch": "@@ -65,6 +65,8 @@ pub use back::symbol_names::provide;\n \n pub use metadata::LlvmMetadataLoader;\n pub use llvm_util::{init, target_features, print_version, print_passes, print, enable_llvm_debug};\n+use rustc::hir::def_id::CrateNum;\n+use rustc::util::nodemap::FxHashSet;\n \n pub mod back {\n     mod archive;\n@@ -216,7 +218,17 @@ pub struct CrateTranslation {\n     pub link: rustc::middle::cstore::LinkMeta,\n     pub metadata: rustc::middle::cstore::EncodedMetadata,\n     windows_subsystem: Option<String>,\n-    linker_info: back::linker::LinkerInfo\n+    linker_info: back::linker::LinkerInfo,\n+    crate_info: CrateInfo,\n+}\n+\n+// Misc info we load from metadata to persist beyond the tcx\n+pub struct CrateInfo {\n+    panic_runtime: Option<CrateNum>,\n+    compiler_builtins: Option<CrateNum>,\n+    profiler_runtime: Option<CrateNum>,\n+    sanitizer_runtime: Option<CrateNum>,\n+    is_no_builtins: FxHashSet<CrateNum>,\n }\n \n __build_diagnostic_array! { librustc_trans, DIAGNOSTICS }"}, {"sha": "eca7aabb46db2e7f3a6b85230247cb3a776a9ea5", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff0c074e467a1fbbeab44ffbd8da4882683b694/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=dff0c074e467a1fbbeab44ffbd8da4882683b694", "patch": "@@ -74,7 +74,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.hir.krate().visit_all_item_likes(&mut visitor);\n \n     for &(id, span) in &tcx.maybe_unused_extern_crates {\n-        let cnum = tcx.sess.cstore.extern_mod_stmt_cnum(id).unwrap().as_def_id();\n+        let cnum = tcx.sess.cstore.extern_mod_stmt_cnum(id).unwrap();\n         if !tcx.is_compiler_builtins(cnum)\n             && !tcx.is_panic_runtime(cnum)\n             && !tcx.has_global_allocator(cnum) {"}]}