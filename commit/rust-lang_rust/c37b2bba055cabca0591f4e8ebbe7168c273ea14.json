{"sha": "c37b2bba055cabca0591f4e8ebbe7168c273ea14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzN2IyYmJhMDU1Y2FiY2EwNTkxZjRlOGViYmU3MTY4YzI3M2VhMTQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-16T21:22:27Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-16T21:22:27Z"}, "message": "Add call frames to track offsets of values in the value stack.", "tree": {"sha": "3249a80f8622a3581440a4cc4d8be4266f2777de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3249a80f8622a3581440a4cc4d8be4266f2777de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c37b2bba055cabca0591f4e8ebbe7168c273ea14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c37b2bba055cabca0591f4e8ebbe7168c273ea14", "html_url": "https://github.com/rust-lang/rust/commit/c37b2bba055cabca0591f4e8ebbe7168c273ea14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c37b2bba055cabca0591f4e8ebbe7168c273ea14/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa1c04f19419a4239d7f427c47e829625c18ef7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa1c04f19419a4239d7f427c47e829625c18ef7b", "html_url": "https://github.com/rust-lang/rust/commit/fa1c04f19419a4239d7f427c47e829625c18ef7b"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "3da416de8148fb5333d0575c205b8407b55dc71e", "filename": "src/interpreter.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c37b2bba055cabca0591f4e8ebbe7168c273ea14/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37b2bba055cabca0591f4e8ebbe7168c273ea14/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=c37b2bba055cabca0591f4e8ebbe7168c273ea14", "patch": "@@ -13,29 +13,42 @@ enum Value {\n     Int(i64), // FIXME: Should be bit-width aware.\n }\n \n-struct Interpreter {\n-    stack: Vec<Value>,\n+#[derive(Debug)]\n+struct Frame {\n+    offset: usize,\n+    num_args: usize,\n     num_vars: usize,\n     num_temps: usize,\n }\n \n+struct Interpreter {\n+    value_stack: Vec<Value>,\n+    call_stack: Vec<Frame>,\n+}\n+\n impl Interpreter {\n     fn new() -> Self {\n         Interpreter {\n-            stack: Vec::new(),\n-            num_vars: 0,\n-            num_temps: 0,\n+            value_stack: Vec::new(),\n+            call_stack: Vec::new(),\n         }\n     }\n \n-    fn run(&mut self, mir: &Mir) -> Value {\n-        let start_block = mir.basic_block_data(mir::START_BLOCK);\n-\n-        self.num_vars = mir.var_decls.len();\n-        self.num_temps = mir.temp_decls.len();\n+    fn call(&mut self, mir: &Mir, _args: &[Value]) -> Value {\n+        self.call_stack.push(Frame {\n+            offset: self.value_stack.len(),\n+            num_args: mir.arg_decls.len(),\n+            num_vars: mir.var_decls.len(),\n+            num_temps: mir.temp_decls.len(),\n+        });\n+\n+        {\n+            let frame = self.call_stack.last().unwrap();\n+            let frame_size = 1 + frame.num_args + frame.num_vars + frame.num_temps;\n+            self.value_stack.extend(iter::repeat(Value::Uninit).take(frame_size));\n+        }\n \n-        self.stack.extend(\n-            iter::repeat(Value::Uninit).take(1 + self.num_vars + self.num_temps));\n+        let start_block = mir.basic_block_data(mir::START_BLOCK);\n \n         for stmt in &start_block.statements {\n             use rustc_mir::repr::StatementKind::*;\n@@ -44,7 +57,7 @@ impl Interpreter {\n                 Assign(ref lvalue, ref rvalue) => {\n                     let index = self.eval_lvalue(lvalue);\n                     let value = self.eval_rvalue(rvalue);\n-                    self.stack[index] = value;\n+                    self.value_stack[index] = value;\n                 }\n \n                 Drop(_kind, ref _lv) => {\n@@ -53,16 +66,19 @@ impl Interpreter {\n             }\n         }\n \n-        self.stack[self.eval_lvalue(&mir::Lvalue::ReturnPointer)].clone()\n+        self.value_stack[self.eval_lvalue(&mir::Lvalue::ReturnPointer)].clone()\n     }\n \n     fn eval_lvalue(&self, lvalue: &mir::Lvalue) -> usize {\n         use rustc_mir::repr::Lvalue::*;\n \n+        let frame = self.call_stack.last().expect(\"missing call frame\");\n+\n         match *lvalue {\n-            Var(i) => 1 + i as usize,\n-            Temp(i) => 1 + self.num_vars + i as usize,\n-            ReturnPointer => 0,\n+            ReturnPointer => frame.offset,\n+            Arg(i)  => frame.offset + 1 + i as usize,\n+            Var(i)  => frame.offset + 1 + frame.num_args + i as usize,\n+            Temp(i) => frame.offset + 1 + frame.num_args + frame.num_vars + i as usize,\n             _ => unimplemented!(),\n         }\n     }\n@@ -117,7 +133,7 @@ impl Interpreter {\n         use rustc_mir::repr::Operand::*;\n \n         match *op {\n-            Consume(ref lvalue) => self.stack[self.eval_lvalue(lvalue)].clone(),\n+            Consume(ref lvalue) => self.value_stack[self.eval_lvalue(lvalue)].clone(),\n \n             Constant(ref constant) => {\n                 match constant.literal {\n@@ -153,7 +169,7 @@ pub fn interpret_start_points<'tcx>(tcx: &ty::ctxt<'tcx>, mir_map: &MirMap<'tcx>\n \n                 println!(\"Interpreting: {}\", item.name);\n                 let mut interpreter = Interpreter::new();\n-                let val = interpreter.run(mir);\n+                let val = interpreter.call(mir, &[]);\n                 let val_str = format!(\"{:?}\", val);\n \n                 if !check_expected(&val_str, attr) {"}]}