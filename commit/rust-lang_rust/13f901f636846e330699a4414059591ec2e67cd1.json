{"sha": "13f901f636846e330699a4414059591ec2e67cd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZjkwMWY2MzY4NDZlMzMwNjk5YTQ0MTQwNTk1OTFlYzJlNjdjZDE=", "commit": {"author": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-22T06:31:32Z"}, "committer": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-24T11:34:00Z"}, "message": "SSR: Move search code into a submodule\n\nAlso renamed find_matches to slow_scan_node to reflect that it's a slow\nway to do things. Actually the name came from a later commit and\nprobably makes more sense once there's an alternative.", "tree": {"sha": "8e98d8b52169db9aa744b280802064165f660ec4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e98d8b52169db9aa744b280802064165f660ec4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13f901f636846e330699a4414059591ec2e67cd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13f901f636846e330699a4414059591ec2e67cd1", "html_url": "https://github.com/rust-lang/rust/commit/13f901f636846e330699a4414059591ec2e67cd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13f901f636846e330699a4414059591ec2e67cd1/comments", "author": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "113abbeefee671266d2d9bebdbd517eb8b802ef8", "url": "https://api.github.com/repos/rust-lang/rust/commits/113abbeefee671266d2d9bebdbd517eb8b802ef8", "html_url": "https://github.com/rust-lang/rust/commit/113abbeefee671266d2d9bebdbd517eb8b802ef8"}], "stats": {"total": 104, "additions": 56, "deletions": 48}, "files": [{"sha": "dac73c07c62dfe730763e4399c56e2ed7efe8fad", "filename": "crates/ra_ssr/src/lib.rs", "status": "modified", "additions": 2, "deletions": 48, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/13f901f636846e330699a4414059591ec2e67cd1/crates%2Fra_ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f901f636846e330699a4414059591ec2e67cd1/crates%2Fra_ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Flib.rs?ref=13f901f636846e330699a4414059591ec2e67cd1", "patch": "@@ -6,6 +6,7 @@\n mod matching;\n mod parsing;\n mod replacing;\n+mod search;\n #[macro_use]\n mod errors;\n #[cfg(test)]\n@@ -83,7 +84,7 @@ impl<'db> MatchFinder<'db> {\n         let file = self.sema.parse(file_id);\n         let code = file.syntax();\n         let mut matches = SsrMatches::default();\n-        self.find_matches(code, &None, &mut matches);\n+        self.slow_scan_node(code, &None, &mut matches.matches);\n         matches\n     }\n \n@@ -120,53 +121,6 @@ impl<'db> MatchFinder<'db> {\n         }\n     }\n \n-    fn find_matches(\n-        &self,\n-        code: &SyntaxNode,\n-        restrict_range: &Option<FileRange>,\n-        matches_out: &mut SsrMatches,\n-    ) {\n-        for rule in &self.rules {\n-            if let Ok(mut m) = matching::get_match(false, rule, &code, restrict_range, &self.sema) {\n-                // Continue searching in each of our placeholders.\n-                for placeholder_value in m.placeholder_values.values_mut() {\n-                    if let Some(placeholder_node) = &placeholder_value.node {\n-                        // Don't search our placeholder if it's the entire matched node, otherwise we'd\n-                        // find the same match over and over until we got a stack overflow.\n-                        if placeholder_node != code {\n-                            self.find_matches(\n-                                placeholder_node,\n-                                restrict_range,\n-                                &mut placeholder_value.inner_matches,\n-                            );\n-                        }\n-                    }\n-                }\n-                matches_out.matches.push(m);\n-                return;\n-            }\n-        }\n-        // If we've got a macro call, we already tried matching it pre-expansion, which is the only\n-        // way to match the whole macro, now try expanding it and matching the expansion.\n-        if let Some(macro_call) = ast::MacroCall::cast(code.clone()) {\n-            if let Some(expanded) = self.sema.expand(&macro_call) {\n-                if let Some(tt) = macro_call.token_tree() {\n-                    // When matching within a macro expansion, we only want to allow matches of\n-                    // nodes that originated entirely from within the token tree of the macro call.\n-                    // i.e. we don't want to match something that came from the macro itself.\n-                    self.find_matches(\n-                        &expanded,\n-                        &Some(self.sema.original_range(tt.syntax())),\n-                        matches_out,\n-                    );\n-                }\n-            }\n-        }\n-        for child in code.children() {\n-            self.find_matches(&child, restrict_range, matches_out);\n-        }\n-    }\n-\n     fn output_debug_for_nodes_at_range(\n         &self,\n         node: &SyntaxNode,"}, {"sha": "6f21452ac41272d83f3fb0309cb6a4da8e42d52a", "filename": "crates/ra_ssr/src/search.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/13f901f636846e330699a4414059591ec2e67cd1/crates%2Fra_ssr%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f901f636846e330699a4414059591ec2e67cd1/crates%2Fra_ssr%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fsearch.rs?ref=13f901f636846e330699a4414059591ec2e67cd1", "patch": "@@ -0,0 +1,54 @@\n+//! Searching for matches.\n+\n+use crate::{matching, Match, MatchFinder};\n+use ra_db::FileRange;\n+use ra_syntax::{ast, AstNode, SyntaxNode};\n+\n+impl<'db> MatchFinder<'db> {\n+    pub(crate) fn slow_scan_node(\n+        &self,\n+        code: &SyntaxNode,\n+        restrict_range: &Option<FileRange>,\n+        matches_out: &mut Vec<Match>,\n+    ) {\n+        for rule in &self.rules {\n+            if let Ok(mut m) = matching::get_match(false, rule, &code, restrict_range, &self.sema) {\n+                // Continue searching in each of our placeholders.\n+                for placeholder_value in m.placeholder_values.values_mut() {\n+                    if let Some(placeholder_node) = &placeholder_value.node {\n+                        // Don't search our placeholder if it's the entire matched node, otherwise we'd\n+                        // find the same match over and over until we got a stack overflow.\n+                        if placeholder_node != code {\n+                            self.slow_scan_node(\n+                                placeholder_node,\n+                                restrict_range,\n+                                &mut placeholder_value.inner_matches.matches,\n+                            );\n+                        }\n+                    }\n+                }\n+                matches_out.push(m);\n+                return;\n+            }\n+        }\n+        // If we've got a macro call, we already tried matching it pre-expansion, which is the only\n+        // way to match the whole macro, now try expanding it and matching the expansion.\n+        if let Some(macro_call) = ast::MacroCall::cast(code.clone()) {\n+            if let Some(expanded) = self.sema.expand(&macro_call) {\n+                if let Some(tt) = macro_call.token_tree() {\n+                    // When matching within a macro expansion, we only want to allow matches of\n+                    // nodes that originated entirely from within the token tree of the macro call.\n+                    // i.e. we don't want to match something that came from the macro itself.\n+                    self.slow_scan_node(\n+                        &expanded,\n+                        &Some(self.sema.original_range(tt.syntax())),\n+                        matches_out,\n+                    );\n+                }\n+            }\n+        }\n+        for child in code.children() {\n+            self.slow_scan_node(&child, restrict_range, matches_out);\n+        }\n+    }\n+}"}]}