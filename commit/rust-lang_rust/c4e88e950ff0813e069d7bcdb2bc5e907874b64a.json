{"sha": "c4e88e950ff0813e069d7bcdb2bc5e907874b64a", "node_id": "C_kwDOAAsO6NoAKGM0ZTg4ZTk1MGZmMDgxM2UwNjlkN2JjZGIyYmM1ZTkwNzg3NGI2NGE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-16T10:17:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-16T10:17:15Z"}, "message": "Merge #10555\n\n10555: minor: Hide private methods in `generate_delegate_methods` r=lnicola a=lnicola\n\nFixes #10553\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "de1108c412f820b887c88129cf584955c55a6f60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de1108c412f820b887c88129cf584955c55a6f60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4e88e950ff0813e069d7bcdb2bc5e907874b64a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhaqarCRBK7hj4Ov3rIwAAd9MIAKtJVM7iYcfcO25Zbhbkvoyg\nPNAb2ve9hOUqym7sPRA5HpyfmO1urzf0swr1pXmC4CJHPI6xnT3S9+IT4zg6EpxK\nLVDQGG/k0/iFJXtwFi21PWsO7czY0Q8G0LW1vzwpbi3Lc9pZpeFlxcB0+C9FTqCt\nFKAyxJvl8eE7JNTMQ2UNJUbxdNQAIM1f4Gqb842bo2DCSTyGmxu1mmImIhNBwdW6\nCFhMern12zcF7NoRp7HIYM5PdsaZBntlLBXTYcOYIZIXrfn5qRcwL9jwEnxjCXON\nXNiQv6ElZ8Cl8xOtU2+RQ9CLGU64rpY8jbEJd2A0Y+Hx5rUptDsex0IzfMFgvBU=\n=HJCk\n-----END PGP SIGNATURE-----\n", "payload": "tree de1108c412f820b887c88129cf584955c55a6f60\nparent 6c7526d308a8a9c04318c19c5df626723f69ec23\nparent cd0c45fdbca52e4e0f8ee3ffa01574c87abd038c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634379435 +0000\ncommitter GitHub <noreply@github.com> 1634379435 +0000\n\nMerge #10555\n\n10555: minor: Hide private methods in `generate_delegate_methods` r=lnicola a=lnicola\n\nFixes #10553\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e88e950ff0813e069d7bcdb2bc5e907874b64a", "html_url": "https://github.com/rust-lang/rust/commit/c4e88e950ff0813e069d7bcdb2bc5e907874b64a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4e88e950ff0813e069d7bcdb2bc5e907874b64a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c7526d308a8a9c04318c19c5df626723f69ec23", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c7526d308a8a9c04318c19c5df626723f69ec23", "html_url": "https://github.com/rust-lang/rust/commit/6c7526d308a8a9c04318c19c5df626723f69ec23"}, {"sha": "cd0c45fdbca52e4e0f8ee3ffa01574c87abd038c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd0c45fdbca52e4e0f8ee3ffa01574c87abd038c", "html_url": "https://github.com/rust-lang/rust/commit/cd0c45fdbca52e4e0f8ee3ffa01574c87abd038c"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "090dab946ab50fd70416d6d5a73ff70d0057a5aa", "filename": "crates/ide_assists/src/handlers/generate_delegate_methods.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c4e88e950ff0813e069d7bcdb2bc5e907874b64a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e88e950ff0813e069d7bcdb2bc5e907874b64a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs?ref=c4e88e950ff0813e069d7bcdb2bc5e907874b64a", "patch": "@@ -1,5 +1,5 @@\n-use hir::{self, HasCrate, HasSource};\n-use syntax::ast::{self, make, AstNode, HasGenericParams, HasName, HasVisibility};\n+use hir::{self, HasCrate, HasSource, HasVisibility};\n+use syntax::ast::{self, make, AstNode, HasGenericParams, HasName, HasVisibility as _};\n \n use crate::{\n     utils::{convert_param_list_to_arg_list, find_struct_impl, render_snippet, Cursor},\n@@ -45,6 +45,7 @@ use syntax::ast::edit::AstNodeEdit;\n pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n     let strukt_name = strukt.name()?;\n+    let current_module = ctx.sema.scope(strukt.syntax()).module()?;\n \n     let (field_name, field_ty) = match ctx.find_node_at_offset::<ast::RecordField>() {\n         Some(field) => {\n@@ -66,7 +67,7 @@ pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext)\n     let mut methods = vec![];\n     sema_field_ty.iterate_assoc_items(ctx.db(), krate, |item| {\n         if let hir::AssocItem::Function(f) = item {\n-            if f.self_param(ctx.db()).is_some() {\n+            if f.self_param(ctx.db()).is_some() && f.is_visible_from(ctx.db(), current_module) {\n                 methods.push(f)\n             }\n         }\n@@ -170,7 +171,7 @@ pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext)\n \n #[cfg(test)]\n mod tests {\n-    use crate::tests::check_assist;\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n \n@@ -311,4 +312,24 @@ impl<T> Person<T> {\n }\"#,\n         );\n     }\n+\n+    #[test]\n+    fn test_generate_delegate_visibility() {\n+        check_assist_not_applicable(\n+            generate_delegate_methods,\n+            r#\"\n+mod m {\n+    pub struct Age(u8);\n+    impl Age {\n+        fn age(&self) -> u8 {\n+            self.0\n+        }\n+    }\n+}\n+\n+struct Person {\n+    ag$0e: m::Age,\n+}\"#,\n+        )\n+    }\n }"}]}