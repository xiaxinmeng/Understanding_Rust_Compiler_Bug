{"sha": "1c5b2c7d03d684227279877a813fdf16790e4552", "node_id": "C_kwDOAAsO6NoAKDFjNWIyYzdkMDNkNjg0MjI3Mjc5ODc3YTgxM2ZkZjE2NzkwZTQ1NTI", "commit": {"author": {"name": "Morgan Thomas", "email": "corp@m0rg.dev", "date": "2022-03-12T01:17:01Z"}, "committer": {"name": "Morgan Thomas", "email": "corp@m0rg.dev", "date": "2022-03-12T01:55:25Z"}, "message": "- Break out functionality related to rendering struct completions into `crates/ide_completion/src/render/compound.rs`\n- Add support for placeholder completions in tuple structs\n- Denote tuple struct completions with `(\u2026)` instead of ` {\u2026}`\n- Show struct completions as their type (`Struct { field: Type }`) in the completion menu instead of raw snippet text (`Struct { field: ${1:()} }$0`)", "tree": {"sha": "8a39ebbeebe0f78ad39905648d85c358508f5507", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a39ebbeebe0f78ad39905648d85c358508f5507"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c5b2c7d03d684227279877a813fdf16790e4552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c5b2c7d03d684227279877a813fdf16790e4552", "html_url": "https://github.com/rust-lang/rust/commit/1c5b2c7d03d684227279877a813fdf16790e4552", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c5b2c7d03d684227279877a813fdf16790e4552/comments", "author": {"login": "m0rg-dev", "id": 38578268, "node_id": "MDQ6VXNlcjM4NTc4MjY4", "avatar_url": "https://avatars.githubusercontent.com/u/38578268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m0rg-dev", "html_url": "https://github.com/m0rg-dev", "followers_url": "https://api.github.com/users/m0rg-dev/followers", "following_url": "https://api.github.com/users/m0rg-dev/following{/other_user}", "gists_url": "https://api.github.com/users/m0rg-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/m0rg-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m0rg-dev/subscriptions", "organizations_url": "https://api.github.com/users/m0rg-dev/orgs", "repos_url": "https://api.github.com/users/m0rg-dev/repos", "events_url": "https://api.github.com/users/m0rg-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/m0rg-dev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m0rg-dev", "id": 38578268, "node_id": "MDQ6VXNlcjM4NTc4MjY4", "avatar_url": "https://avatars.githubusercontent.com/u/38578268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m0rg-dev", "html_url": "https://github.com/m0rg-dev", "followers_url": "https://api.github.com/users/m0rg-dev/followers", "following_url": "https://api.github.com/users/m0rg-dev/following{/other_user}", "gists_url": "https://api.github.com/users/m0rg-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/m0rg-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m0rg-dev/subscriptions", "organizations_url": "https://api.github.com/users/m0rg-dev/orgs", "repos_url": "https://api.github.com/users/m0rg-dev/repos", "events_url": "https://api.github.com/users/m0rg-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/m0rg-dev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "224a255c5a7c75efb5567fc38b3772c5dbb094c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/224a255c5a7c75efb5567fc38b3772c5dbb094c4", "html_url": "https://github.com/rust-lang/rust/commit/224a255c5a7c75efb5567fc38b3772c5dbb094c4"}], "stats": {"total": 190, "additions": 120, "deletions": 70}, "files": [{"sha": "8003d200f96cc684d2d9d57edd0f1a045dad16da", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c5b2c7d03d684227279877a813fdf16790e4552/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5b2c7d03d684227279877a813fdf16790e4552/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=1c5b2c7d03d684227279877a813fdf16790e4552", "patch": "@@ -8,6 +8,7 @@ pub(crate) mod const_;\n pub(crate) mod pattern;\n pub(crate) mod type_alias;\n pub(crate) mod struct_literal;\n+pub(crate) mod compound;\n \n mod builder_ext;\n "}, {"sha": "586bb92a8ec2619219515d089460829397e6fd0e", "filename": "crates/ide_completion/src/render/compound.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/1c5b2c7d03d684227279877a813fdf16790e4552/crates%2Fide_completion%2Fsrc%2Frender%2Fcompound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5b2c7d03d684227279877a813fdf16790e4552/crates%2Fide_completion%2Fsrc%2Frender%2Fcompound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fcompound.rs?ref=1c5b2c7d03d684227279877a813fdf16790e4552", "patch": "@@ -0,0 +1,93 @@\n+//! Code common to structs, unions, and enum variants.\n+\n+use crate::render::RenderContext;\n+use hir::{db::HirDatabase, HasAttrs, HasVisibility, HirDisplay};\n+use ide_db::SnippetCap;\n+use itertools::Itertools;\n+\n+/// A rendered struct, union, or enum variant, split into fields for actual\n+/// auto-completion (`literal`, using `field: ()`) and display in the\n+/// completions menu (`detail`, using `field: type`).\n+pub(crate) struct RenderedCompound {\n+    pub literal: String,\n+    pub detail: String,\n+}\n+\n+/// Render a record type (or sub-type) to a `RenderedCompound`. Use `None` for\n+/// the `name` argument for an anonymous type.\n+pub(crate) fn render_record(\n+    db: &dyn HirDatabase,\n+    snippet_cap: Option<SnippetCap>,\n+    fields: &[hir::Field],\n+    name: Option<&str>,\n+) -> RenderedCompound {\n+    let fields = fields.iter();\n+\n+    let (completions, types): (Vec<_>, Vec<_>) = fields\n+        .enumerate()\n+        .map(|(idx, field)| {\n+            (\n+                if snippet_cap.is_some() {\n+                    format!(\"{}: ${{{}:()}}\", field.name(db), idx + 1)\n+                } else {\n+                    format!(\"{}: ()\", field.name(db))\n+                },\n+                format!(\"{}: {}\", field.name(db), field.ty(db).display(db)),\n+            )\n+        })\n+        .unzip();\n+    RenderedCompound {\n+        literal: format!(\"{} {{ {} }}\", name.unwrap_or(\"\"), completions.iter().format(\", \")),\n+        detail: format!(\"{} {{ {} }}\", name.unwrap_or(\"\"), types.iter().format(\", \")),\n+    }\n+}\n+\n+/// Render a tuple type (or sub-type) to a `RenderedCompound`. Use `None` for\n+/// the `name` argument for an anonymous type.\n+pub(crate) fn render_tuple(\n+    db: &dyn HirDatabase,\n+    snippet_cap: Option<SnippetCap>,\n+    fields: &[hir::Field],\n+    name: Option<&str>,\n+) -> RenderedCompound {\n+    let fields = fields.iter();\n+\n+    let (completions, types): (Vec<_>, Vec<_>) = fields\n+        .enumerate()\n+        .map(|(idx, field)| {\n+            (\n+                if snippet_cap.is_some() {\n+                    format!(\"${{{}:()}}\", (idx + 1).to_string())\n+                } else {\n+                    \"()\".to_string()\n+                },\n+                field.ty(db).display(db).to_string(),\n+            )\n+        })\n+        .unzip();\n+    RenderedCompound {\n+        literal: format!(\"{}({})\", name.unwrap_or(\"\"), completions.iter().format(\", \")),\n+        detail: format!(\"{}({})\", name.unwrap_or(\"\"), types.iter().format(\", \")),\n+    }\n+}\n+\n+/// Find all the visible fields in a `HasAttrs`. Returns the list of visible\n+/// fields, plus a boolean for whether the list is comprehensive (contains no\n+/// private fields and is not marked `#[non_exhaustive]`).\n+pub(crate) fn visible_fields(\n+    ctx: &RenderContext<'_>,\n+    fields: &[hir::Field],\n+    item: impl HasAttrs,\n+) -> Option<(Vec<hir::Field>, bool)> {\n+    let module = ctx.completion.module?;\n+    let n_fields = fields.len();\n+    let fields = fields\n+        .iter()\n+        .filter(|field| field.is_visible_from(ctx.db(), module))\n+        .copied()\n+        .collect::<Vec<_>>();\n+\n+    let fields_omitted =\n+        n_fields - fields.len() > 0 || item.attrs(ctx.db()).by_key(\"non_exhaustive\").exists();\n+    Some((fields, fields_omitted))\n+}"}, {"sha": "124b465773a97901fa3f6e91b838f50b79e58ef7", "filename": "crates/ide_completion/src/render/struct_literal.rs", "status": "modified", "additions": 25, "deletions": 69, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/1c5b2c7d03d684227279877a813fdf16790e4552/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5b2c7d03d684227279877a813fdf16790e4552/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs?ref=1c5b2c7d03d684227279877a813fdf16790e4552", "patch": "@@ -1,11 +1,13 @@\n //! Renderer for `struct` literal.\n \n-use hir::{db::HirDatabase, HasAttrs, HasVisibility, Name, StructKind};\n-use ide_db::SnippetCap;\n-use itertools::Itertools;\n+use hir::{HasAttrs, Name, StructKind};\n use syntax::SmolStr;\n \n-use crate::{render::RenderContext, CompletionItem, CompletionItemKind};\n+use crate::{\n+    render::compound::{render_record, render_tuple, visible_fields, RenderedCompound},\n+    render::RenderContext,\n+    CompletionItem, CompletionItemKind,\n+};\n \n pub(crate) fn render_struct_literal(\n     ctx: RenderContext<'_>,\n@@ -25,29 +27,34 @@ pub(crate) fn render_struct_literal(\n \n     let name = local_name.unwrap_or_else(|| strukt.name(ctx.db())).to_smol_str();\n \n-    let literal = render_literal(&ctx, path, &name, strukt.kind(ctx.db()), &visible_fields)?;\n+    let rendered = render_literal(&ctx, path, &name, strukt.kind(ctx.db()), &visible_fields)?;\n \n-    Some(build_completion(ctx, name, literal, strukt))\n+    Some(build_completion(&ctx, name, rendered, strukt.kind(ctx.db()), strukt))\n }\n \n fn build_completion(\n-    ctx: RenderContext<'_>,\n+    ctx: &RenderContext<'_>,\n     name: SmolStr,\n-    literal: String,\n+    rendered: RenderedCompound,\n+    kind: StructKind,\n     def: impl HasAttrs + Copy,\n ) -> CompletionItem {\n     let mut item = CompletionItem::new(\n         CompletionItemKind::Snippet,\n         ctx.source_range(),\n-        SmolStr::from_iter([&name, \" {\u2026}\"]),\n+        match kind {\n+            StructKind::Tuple => SmolStr::from_iter([&name, \"(\u2026)\"]),\n+            _ => SmolStr::from_iter([&name, \" {\u2026}\"]),\n+        },\n     );\n+\n     item.set_documentation(ctx.docs(def))\n         .set_deprecated(ctx.is_deprecated(def))\n-        .detail(&literal)\n+        .detail(&rendered.detail)\n         .set_relevance(ctx.completion_relevance());\n     match ctx.snippet_cap() {\n-        Some(snippet_cap) => item.insert_snippet(snippet_cap, literal),\n-        None => item.insert_text(literal),\n+        Some(snippet_cap) => item.insert_snippet(snippet_cap, rendered.literal),\n+        None => item.insert_text(rendered.literal),\n     };\n     item.build()\n }\n@@ -58,7 +65,7 @@ fn render_literal(\n     name: &str,\n     kind: StructKind,\n     fields: &[hir::Field],\n-) -> Option<String> {\n+) -> Option<RenderedCompound> {\n     let path_string;\n \n     let qualified_name = if let Some(path) = path {\n@@ -68,69 +75,18 @@ fn render_literal(\n         name\n     };\n \n-    let mut literal = match kind {\n+    let mut rendered = match kind {\n         StructKind::Tuple if ctx.snippet_cap().is_some() => {\n-            render_tuple_as_literal(fields, qualified_name)\n+            render_tuple(ctx.db(), ctx.snippet_cap(), fields, Some(qualified_name))\n         }\n         StructKind::Record => {\n-            render_record_as_literal(ctx.db(), ctx.snippet_cap(), fields, qualified_name)\n+            render_record(ctx.db(), ctx.snippet_cap(), fields, Some(qualified_name))\n         }\n         _ => return None,\n     };\n \n     if ctx.snippet_cap().is_some() {\n-        literal.push_str(\"$0\");\n+        rendered.literal.push_str(\"$0\");\n     }\n-    Some(literal)\n-}\n-\n-fn render_record_as_literal(\n-    db: &dyn HirDatabase,\n-    snippet_cap: Option<SnippetCap>,\n-    fields: &[hir::Field],\n-    name: &str,\n-) -> String {\n-    let fields = fields.iter();\n-    if snippet_cap.is_some() {\n-        format!(\n-            \"{name} {{ {} }}\",\n-            fields\n-                .enumerate()\n-                .map(|(idx, field)| format!(\"{}: ${{{}:()}}\", field.name(db), idx + 1))\n-                .format(\", \"),\n-            name = name\n-        )\n-    } else {\n-        format!(\n-            \"{name} {{ {} }}\",\n-            fields.map(|field| format!(\"{}: ()\", field.name(db))).format(\", \"),\n-            name = name\n-        )\n-    }\n-}\n-\n-fn render_tuple_as_literal(fields: &[hir::Field], name: &str) -> String {\n-    format!(\n-        \"{name}({})\",\n-        fields.iter().enumerate().map(|(idx, _)| format!(\"${}\", idx + 1)).format(\", \"),\n-        name = name\n-    )\n-}\n-\n-fn visible_fields(\n-    ctx: &RenderContext<'_>,\n-    fields: &[hir::Field],\n-    item: impl HasAttrs,\n-) -> Option<(Vec<hir::Field>, bool)> {\n-    let module = ctx.completion.module?;\n-    let n_fields = fields.len();\n-    let fields = fields\n-        .iter()\n-        .filter(|field| field.is_visible_from(ctx.db(), module))\n-        .copied()\n-        .collect::<Vec<_>>();\n-\n-    let fields_omitted =\n-        n_fields - fields.len() > 0 || item.attrs(ctx.db()).by_key(\"non_exhaustive\").exists();\n-    Some((fields, fields_omitted))\n+    Some(rendered)\n }"}, {"sha": "87d0d853b6f0e787d53722ab11cfbd74aa783d1e", "filename": "crates/ide_completion/src/tests/record.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c5b2c7d03d684227279877a813fdf16790e4552/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5b2c7d03d684227279877a813fdf16790e4552/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs?ref=1c5b2c7d03d684227279877a813fdf16790e4552", "patch": "@@ -166,7 +166,7 @@ fn main() {\n             kw true\n             kw false\n             kw return\n-            sn Foo {\u2026}              Foo { foo1: ${1:()}, foo2: ${2:()} }$0\n+            sn Foo {\u2026}              Foo { foo1: u32, foo2: u32 }\n             fd ..Default::default()\n             fd foo1                 u32\n             fd foo2                 u32"}]}