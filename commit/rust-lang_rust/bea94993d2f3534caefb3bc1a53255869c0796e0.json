{"sha": "bea94993d2f3534caefb3bc1a53255869c0796e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYTk0OTkzZDJmMzUzNGNhZWZiM2JjMWE1MzI1NTg2OWMwNzk2ZTA=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-04-16T21:33:38Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-04-23T16:19:33Z"}, "message": "rustc: Remove root_map entirely", "tree": {"sha": "686658e8d825d2bd6f2e64f21be71268a067fec4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/686658e8d825d2bd6f2e64f21be71268a067fec4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bea94993d2f3534caefb3bc1a53255869c0796e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bea94993d2f3534caefb3bc1a53255869c0796e0", "html_url": "https://github.com/rust-lang/rust/commit/bea94993d2f3534caefb3bc1a53255869c0796e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bea94993d2f3534caefb3bc1a53255869c0796e0/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4871a16c2773492548a289258b47c5b93eced8d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4871a16c2773492548a289258b47c5b93eced8d3", "html_url": "https://github.com/rust-lang/rust/commit/4871a16c2773492548a289258b47c5b93eced8d3"}], "stats": {"total": 81, "additions": 33, "deletions": 48}, "files": [{"sha": "cadb3a3fea447f42c1fe3a8d163a165878319ca6", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 33, "deletions": 48, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/bea94993d2f3534caefb3bc1a53255869c0796e0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea94993d2f3534caefb3bc1a53255869c0796e0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=bea94993d2f3534caefb3bc1a53255869c0796e0", "patch": "@@ -21,7 +21,7 @@ use middle::dataflow::DataFlowOperator;\n use util::nodemap::{NodeMap, NodeSet};\n use util::ppaux::{note_and_explain_region, Repr, UserString};\n \n-use std::cell::RefCell;\n+use std::cell::{Cell, RefCell};\n use std::ops::{BitOr, BitAnd};\n use std::rc::Rc;\n use std::strbuf::StrBuf;\n@@ -79,19 +79,39 @@ pub fn check_crate(tcx: &ty::ctxt,\n                    moves_map: &NodeSet,\n                    moved_variables_set: &NodeSet,\n                    capture_map: &moves::CaptureMap,\n-                   krate: &ast::Crate)\n-                   -> root_map {\n+                   krate: &ast::Crate) {\n     let mut bccx = BorrowckCtxt {\n         tcx: tcx,\n         moves_map: moves_map,\n         moved_variables_set: moved_variables_set,\n         capture_map: capture_map,\n-        root_map: RefCell::new(HashMap::new())\n+        stats: @BorrowStats {\n+            loaned_paths_same: Cell::new(0),\n+            loaned_paths_imm: Cell::new(0),\n+            stable_paths: Cell::new(0),\n+            guaranteed_paths: Cell::new(0),\n+        }\n     };\n \n     visit::walk_crate(&mut bccx, krate, ());\n \n-    return bccx.root_map.unwrap();\n+    if tcx.sess.borrowck_stats() {\n+        println!(\"--- borrowck stats ---\");\n+        println!(\"paths requiring guarantees: {}\",\n+                 bccx.stats.guaranteed_paths.get());\n+        println!(\"paths requiring loans     : {}\",\n+                 make_stat(&bccx, bccx.stats.loaned_paths_same.get()));\n+        println!(\"paths requiring imm loans : {}\",\n+                 make_stat(&bccx, bccx.stats.loaned_paths_imm.get()));\n+        println!(\"stable paths              : {}\",\n+                 make_stat(&bccx, bccx.stats.stable_paths.get()));\n+    }\n+\n+    fn make_stat(bccx: &BorrowckCtxt, stat: uint) -> ~str {\n+        let stat_f = stat as f64;\n+        let total = bccx.stats.guaranteed_paths.get() as f64;\n+        format!(\"{} ({:.0f}%)\", stat  , stat_f * 100.0 / total)\n+    }\n }\n \n fn borrowck_item(this: &mut BorrowckCtxt, item: &ast::Item) {\n@@ -150,26 +170,16 @@ pub struct BorrowckCtxt<'a> {\n     moves_map: &'a NodeSet,\n     moved_variables_set: &'a NodeSet,\n     capture_map: &'a moves::CaptureMap,\n-    root_map: RefCell<root_map>,\n+\n+    // Statistics:\n+    stats: @BorrowStats\n }\n \n-// The keys to the root map combine the `id` of the deref expression\n-// with the number of types that it is *autodereferenced*. So, for\n-// example, imagine I have a variable `x: @@@T` and an expression\n-// `(*x).f`.  This will have 3 derefs, one explicit and then two\n-// autoderefs. These are the relevant `root_map_key` values that could\n-// appear:\n-//\n-//    {id:*x, derefs:0} --> roots `x` (type: @@@T, due to explicit deref)\n-//    {id:*x, derefs:1} --> roots `*x` (type: @@T, due to autoderef #1)\n-//    {id:*x, derefs:2} --> roots `**x` (type: @T, due to autoderef #2)\n-//\n-// Note that there is no entry with derefs:3---the type of that expression\n-// is T, which is not a box.\n-#[deriving(Eq, TotalEq, Hash)]\n-pub struct root_map_key {\n-    pub id: ast::NodeId,\n-    pub derefs: uint\n+pub struct BorrowStats {\n+    loaned_paths_same: Cell<uint>,\n+    loaned_paths_imm: Cell<uint>,\n+    stable_paths: Cell<uint>,\n+    guaranteed_paths: Cell<uint>,\n }\n \n pub type BckResult<T> = Result<T, BckError>;\n@@ -317,31 +327,6 @@ impl Repr for RestrictionSet {\n     }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-// Rooting of managed boxes\n-//\n-// When we borrow the interior of a managed box, it is sometimes\n-// necessary to *root* the box, meaning to stash a copy of the box\n-// somewhere that the garbage collector will find it. This ensures\n-// that the box is not collected for the lifetime of the borrow.\n-//\n-// As part of this rooting, we sometimes also freeze the box at\n-// runtime, meaning that we dynamically detect when the box is\n-// borrowed in incompatible ways.\n-//\n-// Both of these actions are driven through the `root_map`, which maps\n-// from a node to the dynamic rooting action that should be taken when\n-// that node executes. The node is identified through a\n-// `root_map_key`, which pairs a node-id and a deref count---the\n-// problem is that sometimes the box that needs to be rooted is only\n-// uncovered after a certain number of auto-derefs.\n-\n-pub struct RootInfo {\n-    pub scope: ast::NodeId,\n-}\n-\n-pub type root_map = HashMap<root_map_key, RootInfo>;\n-\n ///////////////////////////////////////////////////////////////////////////\n // Errors\n "}]}