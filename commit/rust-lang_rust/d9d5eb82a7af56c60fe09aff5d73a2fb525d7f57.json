{"sha": "d9d5eb82a7af56c60fe09aff5d73a2fb525d7f57", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZDVlYjgyYTdhZjU2YzYwZmUwOWFmZjVkNzNhMmZiNTI1ZDdmNTc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-19T18:25:40Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-19T18:25:40Z"}, "message": "rustc: Allow glue to be emitted even for scalar types; this is necessary to support compare glue", "tree": {"sha": "0fae40ea2e09a6deefe3870768882c2852faa93c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fae40ea2e09a6deefe3870768882c2852faa93c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9d5eb82a7af56c60fe09aff5d73a2fb525d7f57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9d5eb82a7af56c60fe09aff5d73a2fb525d7f57", "html_url": "https://github.com/rust-lang/rust/commit/d9d5eb82a7af56c60fe09aff5d73a2fb525d7f57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9d5eb82a7af56c60fe09aff5d73a2fb525d7f57/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6599b310f704f864b8c6eb48f972357785bf592b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6599b310f704f864b8c6eb48f972357785bf592b", "html_url": "https://github.com/rust-lang/rust/commit/6599b310f704f864b8c6eb48f972357785bf592b"}], "stats": {"total": 71, "additions": 33, "deletions": 38}, "files": [{"sha": "bb8ecd9c66ddffd6a1af8be0830c7af1bd44886c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 33, "deletions": 38, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d9d5eb82a7af56c60fe09aff5d73a2fb525d7f57/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d5eb82a7af56c60fe09aff5d73a2fb525d7f57/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=d9d5eb82a7af56c60fe09aff5d73a2fb525d7f57", "patch": "@@ -1694,53 +1694,48 @@ fn make_generic_glue(@local_ctxt cx,\n     auto bcx = new_top_block_ctxt(fcx);\n     auto lltop = bcx.llbb;\n \n-    if (!ty.type_is_scalar(t)) {\n-\n-        // Any nontrivial glue is with values passed *by alias*; this is a\n-        // requirement since in many contexts glue is invoked indirectly and\n-        // the caller has no idea if it's dealing with something that can be\n-        // passed by value.\n+    // Any nontrivial glue is with values passed *by alias*; this is a\n+    // requirement since in many contexts glue is invoked indirectly and\n+    // the caller has no idea if it's dealing with something that can be\n+    // passed by value.\n \n-        auto llty;\n-        if (ty.type_has_dynamic_size(t)) {\n-            llty = T_ptr(T_i8());\n-        } else {\n-            llty = T_ptr(type_of(cx.ccx, t));\n-        }\n+    auto llty;\n+    if (ty.type_has_dynamic_size(t)) {\n+        llty = T_ptr(T_i8());\n+    } else {\n+        llty = T_ptr(type_of(cx.ccx, t));\n+    }\n \n-        auto ty_param_count = _vec.len[uint](ty_params);\n+    auto ty_param_count = _vec.len[uint](ty_params);\n \n-        auto lltyparams = llvm.LLVMGetParam(llfn, 3u);\n+    auto lltyparams = llvm.LLVMGetParam(llfn, 3u);\n \n-        auto lltydescs = _vec.empty_mut[ValueRef]();\n-        auto p = 0u;\n-        while (p < ty_param_count) {\n-            auto llparam = bcx.build.GEP(lltyparams, vec(C_int(p as int)));\n-            llparam = bcx.build.Load(llparam);\n-            _vec.grow_set[ValueRef](lltydescs, ty_params.(p), 0 as ValueRef,\n-                                    llparam);\n-            p += 1u;\n-        }\n-        bcx.fcx.lltydescs = _vec.freeze[ValueRef](lltydescs);\n+    auto lltydescs = _vec.empty_mut[ValueRef]();\n+    auto p = 0u;\n+    while (p < ty_param_count) {\n+        auto llparam = bcx.build.GEP(lltyparams, vec(C_int(p as int)));\n+        llparam = bcx.build.Load(llparam);\n+        _vec.grow_set[ValueRef](lltydescs, ty_params.(p), 0 as ValueRef,\n+                                llparam);\n+        p += 1u;\n+    }\n+    bcx.fcx.lltydescs = _vec.freeze[ValueRef](lltydescs);\n \n-        auto llrawptr0 = llvm.LLVMGetParam(llfn, 4u);\n-        auto llval0 = bcx.build.BitCast(llrawptr0, llty);\n+    auto llrawptr0 = llvm.LLVMGetParam(llfn, 4u);\n+    auto llval0 = bcx.build.BitCast(llrawptr0, llty);\n \n-        alt (helper) {\n-            case (mgghf_single(?single_fn)) {\n-                single_fn(bcx, llval0, t);\n-            }\n-            case (mgghf_cmp) {\n-                auto llrawptr1 = llvm.LLVMGetParam(llfn, 5u);\n-                auto llval1 = bcx.build.BitCast(llrawptr0, llty);\n+    alt (helper) {\n+        case (mgghf_single(?single_fn)) {\n+            single_fn(bcx, llval0, t);\n+        }\n+        case (mgghf_cmp) {\n+            auto llrawptr1 = llvm.LLVMGetParam(llfn, 5u);\n+            auto llval1 = bcx.build.BitCast(llrawptr0, llty);\n \n-                auto llcmpval = llvm.LLVMGetParam(llfn, 6u);\n+            auto llcmpval = llvm.LLVMGetParam(llfn, 6u);\n \n-                make_cmp_glue(bcx, llval0, llval1, t, llcmpval);\n-            }\n+            make_cmp_glue(bcx, llval0, llval1, t, llcmpval);\n         }\n-    } else {\n-        bcx.build.RetVoid();\n     }\n \n     // Tie up the llallocas -> lltop edge."}]}