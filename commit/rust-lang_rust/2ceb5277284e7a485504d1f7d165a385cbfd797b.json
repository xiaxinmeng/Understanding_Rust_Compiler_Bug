{"sha": "2ceb5277284e7a485504d1f7d165a385cbfd797b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZWI1Mjc3Mjg0ZTdhNDg1NTA0ZDFmN2QxNjVhMzg1Y2JmZDc5N2I=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-31T10:42:30Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-31T10:42:30Z"}, "message": "Remove the cold block optimization\n\nIt isn't effective with the new backend framework", "tree": {"sha": "cd99ba86ba9205f49fccda21f6b6bc18ad8894a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd99ba86ba9205f49fccda21f6b6bc18ad8894a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ceb5277284e7a485504d1f7d165a385cbfd797b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ceb5277284e7a485504d1f7d165a385cbfd797b", "html_url": "https://github.com/rust-lang/rust/commit/2ceb5277284e7a485504d1f7d165a385cbfd797b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ceb5277284e7a485504d1f7d165a385cbfd797b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a793be8ee8895538e99acc2a855d9c4ae145fc78", "url": "https://api.github.com/repos/rust-lang/rust/commits/a793be8ee8895538e99acc2a855d9c4ae145fc78", "html_url": "https://github.com/rust-lang/rust/commit/a793be8ee8895538e99acc2a855d9c4ae145fc78"}], "stats": {"total": 57, "additions": 4, "deletions": 53}, "files": [{"sha": "f898348f97bc0b4c91db3b5995fc7376b2087936", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ceb5277284e7a485504d1f7d165a385cbfd797b/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceb5277284e7a485504d1f7d165a385cbfd797b/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=2ceb5277284e7a485504d1f7d165a385cbfd797b", "patch": "@@ -295,7 +295,6 @@ pub(crate) fn codegen_fn_prelude<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, start_\n pub(crate) fn codegen_terminator_call<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     span: Span,\n-    current_block: Block,\n     func: &Operand<'tcx>,\n     args: &[Operand<'tcx>],\n     destination: Option<(Place<'tcx>, BasicBlock)>,\n@@ -357,7 +356,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         .map(|inst| fx.tcx.codegen_fn_attrs(inst.def_id()).flags.contains(CodegenFnAttrFlags::COLD))\n         .unwrap_or(false);\n     if is_cold {\n-        fx.cold_blocks.insert(current_block);\n+        // FIXME Mark current_block block as cold once Cranelift supports it\n     }\n \n     // Unpack arguments tuple for closures"}, {"sha": "c4e0c9676f693e4264a2e72737a7e0f158a39c85", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2ceb5277284e7a485504d1f7d165a385cbfd797b/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceb5277284e7a485504d1f7d165a385cbfd797b/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=2ceb5277284e7a485504d1f7d165a385cbfd797b", "patch": "@@ -55,7 +55,6 @@ pub(crate) fn codegen_fn<'tcx>(cx: &mut crate::CodegenCx<'_, 'tcx>, instance: In\n         block_map,\n         local_map: IndexVec::with_capacity(mir.local_decls.len()),\n         caller_location: None, // set by `codegen_fn_prelude`\n-        cold_blocks: EntitySet::new(),\n \n         clif_comments,\n         source_info_set: indexmap::IndexSet::new(),\n@@ -90,7 +89,6 @@ pub(crate) fn codegen_fn<'tcx>(cx: &mut crate::CodegenCx<'_, 'tcx>, instance: In\n     let mut clif_comments = fx.clif_comments;\n     let source_info_set = fx.source_info_set;\n     let local_map = fx.local_map;\n-    let cold_blocks = fx.cold_blocks;\n \n     // Store function in context\n     let context = &mut cx.cached_context;\n@@ -107,7 +105,6 @@ pub(crate) fn codegen_fn<'tcx>(cx: &mut crate::CodegenCx<'_, 'tcx>, instance: In\n             tcx,\n             instance,\n             context,\n-            &cold_blocks,\n             &mut clif_comments,\n         );\n     });\n@@ -205,9 +202,8 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n             // Unwinding after panicking is not supported\n             continue;\n \n-            // FIXME once unwinding is supported uncomment next lines\n-            // // Unwinding is unlikely to happen, so mark cleanup block's as cold.\n-            // fx.cold_blocks.insert(block);\n+            // FIXME Once unwinding is supported and Cranelift supports marking blocks as cold, do\n+            // so for cleanup blocks.\n         }\n \n         fx.bcx.ins().nop();\n@@ -262,7 +258,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n \n                 let target = fx.get_block(*target);\n                 let failure = fx.bcx.create_block();\n-                fx.cold_blocks.insert(failure);\n+                // FIXME Mark failure block as cold once Cranelift supports it\n \n                 if *expected {\n                     fx.bcx.ins().brz(cond, failure, &[]);\n@@ -358,7 +354,6 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n                     crate::abi::codegen_terminator_call(\n                         fx,\n                         *fn_span,\n-                        block,\n                         func,\n                         args,\n                         *destination,"}, {"sha": "fe6cf9a3b01e53b79fc6ec4350ab0b4961425d96", "filename": "src/common.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ceb5277284e7a485504d1f7d165a385cbfd797b/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceb5277284e7a485504d1f7d165a385cbfd797b/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=2ceb5277284e7a485504d1f7d165a385cbfd797b", "patch": "@@ -242,9 +242,6 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx> {\n     /// When `#[track_caller]` is used, the implicit caller location is stored in this variable.\n     pub(crate) caller_location: Option<CValue<'tcx>>,\n \n-    /// See [`crate::optimize::code_layout`] for more information.\n-    pub(crate) cold_blocks: EntitySet<Block>,\n-\n     pub(crate) clif_comments: crate::pretty_clif::CommentWriter,\n     pub(crate) source_info_set: indexmap::IndexSet<SourceInfo>,\n "}, {"sha": "8f4dede33ef4408f9458e9df05e3fae95f1c7e21", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ceb5277284e7a485504d1f7d165a385cbfd797b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceb5277284e7a485504d1f7d165a385cbfd797b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2ceb5277284e7a485504d1f7d165a385cbfd797b", "patch": "@@ -87,7 +87,6 @@ mod prelude {\n \n     pub(crate) use rustc_index::vec::Idx;\n \n-    pub(crate) use cranelift_codegen::entity::EntitySet;\n     pub(crate) use cranelift_codegen::ir::condcodes::{FloatCC, IntCC};\n     pub(crate) use cranelift_codegen::ir::function::Function;\n     pub(crate) use cranelift_codegen::ir::types;"}, {"sha": "ca9ff15ec10ffee9967d95ccf086ab0e345ba1fe", "filename": "src/optimize/code_layout.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a793be8ee8895538e99acc2a855d9c4ae145fc78/src%2Foptimize%2Fcode_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a793be8ee8895538e99acc2a855d9c4ae145fc78/src%2Foptimize%2Fcode_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fcode_layout.rs?ref=a793be8ee8895538e99acc2a855d9c4ae145fc78", "patch": "@@ -1,34 +0,0 @@\n-//! This optimization moves cold code to the end of the function.\n-//!\n-//! Some code is executed much less often than other code. For example panicking or the\n-//! landingpads for unwinding. By moving this cold code to the end of the function the average\n-//! amount of jumps is reduced and the code locality is improved.\n-//!\n-//! # Undefined behaviour\n-//!\n-//! This optimization doesn't assume anything that isn't already assumed by Cranelift itself.\n-\n-use crate::prelude::*;\n-\n-pub(super) fn optimize_function(ctx: &mut Context, cold_blocks: &EntitySet<Block>) {\n-    // FIXME Move the block in place instead of remove and append once\n-    // bytecodealliance/cranelift#1339 is implemented.\n-\n-    let mut block_insts = FxHashMap::default();\n-    for block in cold_blocks.keys().filter(|&block| cold_blocks.contains(block)) {\n-        let insts = ctx.func.layout.block_insts(block).collect::<Vec<_>>();\n-        for &inst in &insts {\n-            ctx.func.layout.remove_inst(inst);\n-        }\n-        block_insts.insert(block, insts);\n-        ctx.func.layout.remove_block(block);\n-    }\n-\n-    // And then append them at the back again.\n-    for block in cold_blocks.keys().filter(|&block| cold_blocks.contains(block)) {\n-        ctx.func.layout.append_block(block);\n-        for inst in block_insts.remove(&block).unwrap() {\n-            ctx.func.layout.append_inst(inst, block);\n-        }\n-    }\n-}"}, {"sha": "137fb5f77313cbae7d39c54291a383fa9e7e2357", "filename": "src/optimize/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ceb5277284e7a485504d1f7d165a385cbfd797b/src%2Foptimize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceb5277284e7a485504d1f7d165a385cbfd797b/src%2Foptimize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fmod.rs?ref=2ceb5277284e7a485504d1f7d165a385cbfd797b", "patch": "@@ -2,21 +2,16 @@\n \n use crate::prelude::*;\n \n-mod code_layout;\n pub(crate) mod peephole;\n \n pub(crate) fn optimize_function<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: Instance<'tcx>,\n     ctx: &mut Context,\n-    cold_blocks: &EntitySet<Block>,\n     clif_comments: &mut crate::pretty_clif::CommentWriter,\n ) {\n     // FIXME classify optimizations over opt levels once we have more\n \n-    // The code_layout optimization is very cheap.\n-    self::code_layout::optimize_function(ctx, cold_blocks);\n-\n     crate::pretty_clif::write_clif_file(tcx, \"preopt\", None, instance, &ctx, &*clif_comments);\n     crate::base::verify_func(tcx, &*clif_comments, &ctx.func);\n }"}]}