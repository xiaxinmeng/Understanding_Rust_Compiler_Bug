{"sha": "2cdbd5eb4255974db204819f9aa49c00b15a6d23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZGJkNWViNDI1NTk3NGRiMjA0ODE5ZjlhYTQ5YzAwYjE1YTZkMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-03T17:41:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-03T17:41:14Z"}, "message": "Auto merge of #38079 - BurntSushi:attrtarget, r=alexcrichton\n\nAdd new #[target_feature = \"...\"] attribute.\n\nThis commit adds a new attribute that instructs the compiler to emit\ntarget specific code for a single function. For example, the following\nfunction is permitted to use instructions that are part of SSE 4.2:\n\n    #[target_feature = \"+sse4.2\"]\n    fn foo() { ... }\n\nIn particular, use of this attribute does not require setting the\n-C target-feature or -C target-cpu options on rustc.\n\nThis attribute does not have any protections built into it. For example,\nnothing stops one from calling the above `foo` function on hosts without\nSSE 4.2 support. Doing so may result in a SIGILL.\n\nI've also expanded the x86 target feature whitelist.", "tree": {"sha": "700af30689a3fd50162761b8c5c2f9eff8c35808", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/700af30689a3fd50162761b8c5c2f9eff8c35808"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cdbd5eb4255974db204819f9aa49c00b15a6d23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cdbd5eb4255974db204819f9aa49c00b15a6d23", "html_url": "https://github.com/rust-lang/rust/commit/2cdbd5eb4255974db204819f9aa49c00b15a6d23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cdbd5eb4255974db204819f9aa49c00b15a6d23/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "890085450a495678622178a471afd630fe15f0f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/890085450a495678622178a471afd630fe15f0f5", "html_url": "https://github.com/rust-lang/rust/commit/890085450a495678622178a471afd630fe15f0f5"}, {"sha": "80ef1dbf2d51d2f2fd039d98a9150d2614e775b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/80ef1dbf2d51d2f2fd039d98a9150d2614e775b0", "html_url": "https://github.com/rust-lang/rust/commit/80ef1dbf2d51d2f2fd039d98a9150d2614e775b0"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "124e7aafcc5158b75b2fb4416f6f5a60d5199104", "filename": "src/librustc_driver/target_features.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2cdbd5eb4255974db204819f9aa49c00b15a6d23/src%2Flibrustc_driver%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdbd5eb4255974db204819f9aa49c00b15a6d23/src%2Flibrustc_driver%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftarget_features.rs?ref=2cdbd5eb4255974db204819f9aa49c00b15a6d23", "patch": "@@ -24,7 +24,8 @@ const ARM_WHITELIST: &'static [&'static str] = &[\"neon\\0\", \"vfp2\\0\", \"vfp3\\0\", \"\n \n const X86_WHITELIST: &'static [&'static str] = &[\"avx\\0\", \"avx2\\0\", \"bmi\\0\", \"bmi2\\0\", \"sse\\0\",\n                                                  \"sse2\\0\", \"sse3\\0\", \"sse4.1\\0\", \"sse4.2\\0\",\n-                                                 \"ssse3\\0\", \"tbm\\0\"];\n+                                                 \"ssse3\\0\", \"tbm\\0\", \"lzcnt\\0\", \"popcnt\\0\",\n+                                                 \"sse4a\\0\"];\n \n /// Add `target_feature = \"...\"` cfgs for a variety of platform\n /// specific features (SSE, NEON etc.)."}, {"sha": "0effceb0425c587da8bae7535cffb75ea93bccac", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2cdbd5eb4255974db204819f9aa49c00b15a6d23/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdbd5eb4255974db204819f9aa49c00b15a6d23/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=2cdbd5eb4255974db204819f9aa49c00b15a6d23", "patch": "@@ -66,13 +66,13 @@ impl LLVMRustResult {\n \n pub fn AddFunctionAttrStringValue(llfn: ValueRef,\n                                   idx: AttributePlace,\n-                                  attr: &'static str,\n-                                  value: &'static str) {\n+                                  attr: &CStr,\n+                                  value: &CStr) {\n     unsafe {\n         LLVMRustAddFunctionAttrStringValue(llfn,\n                                            idx.as_uint(),\n-                                           attr.as_ptr() as *const _,\n-                                           value.as_ptr() as *const _)\n+                                           attr.as_ptr(),\n+                                           value.as_ptr())\n     }\n }\n "}, {"sha": "efdd1b736f0e7ae77b8b14b69f1e5e89c53c414f", "filename": "src/librustc_trans/attributes.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2cdbd5eb4255974db204819f9aa49c00b15a6d23/src%2Flibrustc_trans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdbd5eb4255974db204819f9aa49c00b15a6d23/src%2Flibrustc_trans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fattributes.rs?ref=2cdbd5eb4255974db204819f9aa49c00b15a6d23", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n //! Set and unset common attributes on LLVM values.\n \n+use std::ffi::{CStr, CString};\n+\n use llvm::{self, Attribute, ValueRef};\n use llvm::AttributePlace::Function;\n pub use syntax::attr::InlineAttr;\n@@ -61,10 +63,8 @@ pub fn set_frame_pointer_elimination(ccx: &CrateContext, llfn: ValueRef) {\n     // parameter.\n     if ccx.sess().must_not_eliminate_frame_pointers() {\n         llvm::AddFunctionAttrStringValue(\n-            llfn,\n-            llvm::AttributePlace::Function,\n-            \"no-frame-pointer-elim\\0\",\n-            \"true\\0\")\n+            llfn, llvm::AttributePlace::Function,\n+            cstr(\"no-frame-pointer-elim\\0\"), cstr(\"true\\0\"));\n     }\n }\n \n@@ -75,9 +75,17 @@ pub fn from_fn_attrs(ccx: &CrateContext, attrs: &[ast::Attribute], llfn: ValueRe\n     inline(llfn, find_inline_attr(Some(ccx.sess().diagnostic()), attrs));\n \n     set_frame_pointer_elimination(ccx, llfn);\n-\n+    let mut target_features = vec![];\n     for attr in attrs {\n-        if attr.check_name(\"cold\") {\n+        if attr.check_name(\"target_feature\") {\n+            if let Some(val) = attr.value_str() {\n+                for feat in val.as_str().split(\",\").map(|f| f.trim()) {\n+                    if !feat.is_empty() && !feat.contains('\\0') {\n+                        target_features.push(feat.to_string());\n+                    }\n+                }\n+            }\n+        } else if attr.check_name(\"cold\") {\n             Attribute::Cold.apply_llfn(Function, llfn);\n         } else if attr.check_name(\"naked\") {\n             naked(llfn, true);\n@@ -88,4 +96,14 @@ pub fn from_fn_attrs(ccx: &CrateContext, attrs: &[ast::Attribute], llfn: ValueRe\n             unwind(llfn, true);\n         }\n     }\n+    if !target_features.is_empty() {\n+        let val = CString::new(target_features.join(\",\")).unwrap();\n+        llvm::AddFunctionAttrStringValue(\n+            llfn, llvm::AttributePlace::Function,\n+            cstr(\"target-features\\0\"), &val);\n+    }\n+}\n+\n+fn cstr(s: &'static str) -> &CStr {\n+    CStr::from_bytes_with_nul(s.as_bytes()).expect(\"null-terminated string\")\n }"}, {"sha": "1b2c2869cb8e1aad26e6d72f543bd371b8ef850d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2cdbd5eb4255974db204819f9aa49c00b15a6d23/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdbd5eb4255974db204819f9aa49c00b15a6d23/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=2cdbd5eb4255974db204819f9aa49c00b15a6d23", "patch": "@@ -316,6 +316,9 @@ declare_features! (\n \n     // Allows `break {expr}` with a value inside `loop`s.\n     (active, loop_break_value, \"1.14.0\", Some(37339)),\n+\n+    // Allows #[target_feature(...)]\n+    (active, target_feature, \"1.15.0\", None),\n );\n \n declare_features! (\n@@ -664,6 +667,10 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                  \"the `#[naked]` attribute \\\n                                   is an experimental feature\",\n                                  cfg_fn!(naked_functions))),\n+    (\"target_feature\", Whitelisted, Gated(\n+        Stability::Unstable, \"target_feature\",\n+        \"the `#[target_feature]` attribute is an experimental feature\",\n+        cfg_fn!(target_feature))),\n     (\"export_name\", Whitelisted, Ungated),\n     (\"inline\", Whitelisted, Ungated),\n     (\"link\", Whitelisted, Ungated),"}, {"sha": "da2e41a0f5e422347b8643fa42b683f2f517a25b", "filename": "src/test/compile-fail/gated-target_feature.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2cdbd5eb4255974db204819f9aa49c00b15a6d23/src%2Ftest%2Fcompile-fail%2Fgated-target_feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdbd5eb4255974db204819f9aa49c00b15a6d23/src%2Ftest%2Fcompile-fail%2Fgated-target_feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-target_feature.rs?ref=2cdbd5eb4255974db204819f9aa49c00b15a6d23", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[target_feature = \"+sse2\"]\n+//~^ the `#[target_feature]` attribute is an experimental feature\n+fn foo() {}"}]}