{"sha": "92c4c077a0be758246475ffcacafee0060885b9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYzRjMDc3YTBiZTc1ODI0NjQ3NWZmY2FjYWZlZTAwNjA4ODViOWY=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-14T02:07:43Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-14T02:07:43Z"}, "message": "syntax: Remove use of Either in parse.rs\n\nThe arg or capture type alias was actually never used for the capture\ncase, so the code is simplified with `Either<arg, ()>` replaced by `arg`", "tree": {"sha": "318093cce99c99dca359b970826203fe488c087b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/318093cce99c99dca359b970826203fe488c087b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92c4c077a0be758246475ffcacafee0060885b9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92c4c077a0be758246475ffcacafee0060885b9f", "html_url": "https://github.com/rust-lang/rust/commit/92c4c077a0be758246475ffcacafee0060885b9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92c4c077a0be758246475ffcacafee0060885b9f/comments", "author": null, "committer": null, "parents": [{"sha": "150b4ffcccbaf6f85b4b3f5be76305edb963689f", "url": "https://api.github.com/repos/rust-lang/rust/commits/150b4ffcccbaf6f85b4b3f5be76305edb963689f", "html_url": "https://github.com/rust-lang/rust/commit/150b4ffcccbaf6f85b4b3f5be76305edb963689f"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "bcd5005492b1bf4371a8fb215bb847cc736d5393", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/92c4c077a0be758246475ffcacafee0060885b9f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4c077a0be758246475ffcacafee0060885b9f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=92c4c077a0be758246475ffcacafee0060885b9f", "patch": "@@ -80,8 +80,6 @@ use parse::{new_sub_parser_from_file, ParseSess};\n use opt_vec;\n use opt_vec::OptVec;\n \n-use std::either::Either;\n-use std::either;\n use std::hashmap::HashSet;\n use std::util;\n use std::vec;\n@@ -94,7 +92,6 @@ enum restriction {\n     RESTRICT_NO_BAR_OR_DOUBLEBAR_OP,\n }\n \n-type arg_or_capture_item = Either<arg, ()>;\n type item_info = (Ident, item_, Option<~[Attribute]>);\n \n /// How to parse a path. There are four different kinds of paths, all of which\n@@ -936,7 +933,7 @@ impl Parser {\n             let (explicit_self, d) = do self.parse_fn_decl_with_self() |p| {\n                 // This is somewhat dubious; We don't want to allow argument\n                 // names to be left off if there is a definition...\n-                either::Left(p.parse_arg_general(false))\n+                p.parse_arg_general(false)\n             };\n \n             let hi = p.last_span.hi;\n@@ -1290,12 +1287,12 @@ impl Parser {\n     }\n \n     // parse a single function argument\n-    pub fn parse_arg(&self) -> arg_or_capture_item {\n-        either::Left(self.parse_arg_general(true))\n+    pub fn parse_arg(&self) -> arg {\n+        self.parse_arg_general(true)\n     }\n \n     // parse an argument in a lambda header e.g. |arg, arg|\n-    pub fn parse_fn_block_arg(&self) -> arg_or_capture_item {\n+    pub fn parse_fn_block_arg(&self) -> arg {\n         self.parse_arg_mode();\n         let is_mutbl = self.eat_keyword(keywords::Mut);\n         let pat = self.parse_pat();\n@@ -1308,12 +1305,12 @@ impl Parser {\n                 span: mk_sp(self.span.lo, self.span.hi),\n             }\n         };\n-        either::Left(ast::arg {\n+        ast::arg {\n             is_mutbl: is_mutbl,\n             ty: t,\n             pat: pat,\n             id: ast::DUMMY_NODE_ID\n-        })\n+        }\n     }\n \n     pub fn maybe_parse_fixed_vstore(&self) -> Option<@ast::Expr> {\n@@ -3500,19 +3497,17 @@ impl Parser {\n \n     // parse the argument list and result type of a function declaration\n     pub fn parse_fn_decl(&self) -> fn_decl {\n-        let args_or_capture_items: ~[arg_or_capture_item] =\n+        let args: ~[arg] =\n             self.parse_unspanned_seq(\n                 &token::LPAREN,\n                 &token::RPAREN,\n                 seq_sep_trailing_disallowed(token::COMMA),\n                 |p| p.parse_arg()\n             );\n \n-        let inputs = either::lefts(args_or_capture_items.move_iter()).collect();\n-\n         let (ret_style, ret_ty) = self.parse_ret_ty();\n         ast::fn_decl {\n-            inputs: inputs,\n+            inputs: args,\n             output: ret_ty,\n             cf: ret_style,\n         }\n@@ -3542,7 +3537,7 @@ impl Parser {\n     fn parse_fn_decl_with_self(\n         &self,\n         parse_arg_fn:\n-        &fn(&Parser) -> arg_or_capture_item\n+        &fn(&Parser) -> arg\n     ) -> (explicit_self, fn_decl) {\n         fn maybe_parse_explicit_self(\n             cnstr: &fn(v: Mutability) -> ast::explicit_self_,\n@@ -3650,20 +3645,20 @@ impl Parser {\n         };\n \n         // If we parsed a self type, expect a comma before the argument list.\n-        let args_or_capture_items;\n+        let fn_inputs;\n         if explicit_self != sty_static {\n             match *self.token {\n                 token::COMMA => {\n                     self.bump();\n                     let sep = seq_sep_trailing_disallowed(token::COMMA);\n-                    args_or_capture_items = self.parse_seq_to_before_end(\n+                    fn_inputs = self.parse_seq_to_before_end(\n                         &token::RPAREN,\n                         sep,\n                         parse_arg_fn\n                     );\n                 }\n                 token::RPAREN => {\n-                    args_or_capture_items = ~[];\n+                    fn_inputs = ~[];\n                 }\n                 _ => {\n                     self.fatal(\n@@ -3676,7 +3671,7 @@ impl Parser {\n             }\n         } else {\n             let sep = seq_sep_trailing_disallowed(token::COMMA);\n-            args_or_capture_items = self.parse_seq_to_before_end(\n+            fn_inputs = self.parse_seq_to_before_end(\n                 &token::RPAREN,\n                 sep,\n                 parse_arg_fn\n@@ -3687,11 +3682,10 @@ impl Parser {\n \n         let hi = self.span.hi;\n \n-        let inputs = either::lefts(args_or_capture_items.move_iter()).collect();\n         let (ret_style, ret_ty) = self.parse_ret_ty();\n \n         let fn_decl = ast::fn_decl {\n-            inputs: inputs,\n+            inputs: fn_inputs,\n             output: ret_ty,\n             cf: ret_style\n         };\n@@ -3720,7 +3714,7 @@ impl Parser {\n         };\n \n         ast::fn_decl {\n-            inputs: either::lefts(inputs_captures.move_iter()).collect(),\n+            inputs: inputs_captures,\n             output: output,\n             cf: return_val,\n         }"}]}