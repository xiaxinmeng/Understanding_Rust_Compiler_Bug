{"sha": "51baaf298d4ac56036062786bf070aeab7ab8e79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYmFhZjI5OGQ0YWM1NjAzNjA2Mjc4NmJmMDcwYWVhYjdhYjhlNzk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T10:09:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T10:09:21Z"}, "message": "Rename with_ast -> with_value", "tree": {"sha": "bd923b623ffe43df04ef00e1f0662c00c0d919d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd923b623ffe43df04ef00e1f0662c00c0d919d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51baaf298d4ac56036062786bf070aeab7ab8e79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51baaf298d4ac56036062786bf070aeab7ab8e79", "html_url": "https://github.com/rust-lang/rust/commit/51baaf298d4ac56036062786bf070aeab7ab8e79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51baaf298d4ac56036062786bf070aeab7ab8e79/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa50b16cb2309c0c4fcb4e90378993a1f3d2ffb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa50b16cb2309c0c4fcb4e90378993a1f3d2ffb6", "html_url": "https://github.com/rust-lang/rust/commit/fa50b16cb2309c0c4fcb4e90378993a1f3d2ffb6"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "a1c1daacdb7e5db4a0db68e7ee7515ceb454fb5e", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/51baaf298d4ac56036062786bf070aeab7ab8e79/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51baaf298d4ac56036062786bf070aeab7ab8e79/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=51baaf298d4ac56036062786bf070aeab7ab8e79", "patch": "@@ -33,19 +33,19 @@ fn try_get_resolver_for_node(db: &impl HirDatabase, node: Source<&SyntaxNode>) -\n     match_ast! {\n         match (node.value) {\n             ast::Module(it) => {\n-                let src = node.with_ast(it);\n+                let src = node.with_value(it);\n                 Some(crate::Module::from_declaration(db, src)?.resolver(db))\n             },\n              ast::SourceFile(it) => {\n-                let src = node.with_ast(crate::ModuleSource::SourceFile(it));\n+                let src = node.with_value(crate::ModuleSource::SourceFile(it));\n                 Some(crate::Module::from_definition(db, src)?.resolver(db))\n             },\n             ast::StructDef(it) => {\n-                let src = node.with_ast(it);\n+                let src = node.with_value(it);\n                 Some(Struct::from_source(db, src)?.resolver(db))\n             },\n             ast::EnumDef(it) => {\n-                let src = node.with_ast(it);\n+                let src = node.with_value(it);\n                 Some(Enum::from_source(db, src)?.resolver(db))\n             },\n             _ => match node.value.kind() {\n@@ -157,7 +157,7 @@ impl SourceAnalyzer {\n             let scopes = def.expr_scopes(db);\n             let scope = match offset {\n                 None => scope_for(&scopes, &source_map, node),\n-                Some(offset) => scope_for_offset(&scopes, &source_map, node.with_ast(offset)),\n+                Some(offset) => scope_for_offset(&scopes, &source_map, node.with_value(offset)),\n             };\n             let resolver = expr::resolver_for_scope(db, def, scope);\n             SourceAnalyzer {\n@@ -173,7 +173,7 @@ impl SourceAnalyzer {\n                 resolver: node\n                     .value\n                     .ancestors()\n-                    .find_map(|it| try_get_resolver_for_node(db, node.with_ast(&it)))\n+                    .find_map(|it| try_get_resolver_for_node(db, node.with_value(&it)))\n                     .unwrap_or_default(),\n                 body_owner: None,\n                 body_source_map: None,"}, {"sha": "1389f64ce96123b39c8bc61314240cab189f04fd", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51baaf298d4ac56036062786bf070aeab7ab8e79/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51baaf298d4ac56036062786bf070aeab7ab8e79/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=51baaf298d4ac56036062786bf070aeab7ab8e79", "patch": "@@ -174,7 +174,7 @@ impl ExpansionInfo {\n \n         let token = algo::find_covering_element(&self.expanded.value, range).into_token()?;\n \n-        Some(self.expanded.with_ast(token))\n+        Some(self.expanded.with_value(token))\n     }\n \n     pub fn map_token_up(&self, token: Source<&SyntaxToken>) -> Option<Source<SyntaxToken>> {\n@@ -192,7 +192,7 @@ impl ExpansionInfo {\n             range + tt.value.syntax().text_range().start(),\n         )\n         .into_token()?;\n-        Some(tt.with_ast(token))\n+        Some(tt.with_value(token))\n     }\n }\n \n@@ -259,15 +259,15 @@ impl<T> Source<T> {\n     }\n \n     // Similarly, naming here is stupid...\n-    pub fn with_ast<U>(&self, value: U) -> Source<U> {\n+    pub fn with_value<U>(&self, value: U) -> Source<U> {\n         Source::new(self.file_id, value)\n     }\n \n     pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n         Source::new(self.file_id, f(self.value))\n     }\n     pub fn as_ref(&self) -> Source<&T> {\n-        self.with_ast(&self.value)\n+        self.with_value(&self.value)\n     }\n     pub fn file_syntax(&self, db: &impl db::AstDatabase) -> SyntaxNode {\n         db.parse_or_expand(self.file_id).expect(\"source created from invalid file\")"}, {"sha": "6ac60722b9a00a37afa32776b8515e3052091426", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/51baaf298d4ac56036062786bf070aeab7ab8e79/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51baaf298d4ac56036062786bf070aeab7ab8e79/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=51baaf298d4ac56036062786bf070aeab7ab8e79", "patch": "@@ -148,7 +148,7 @@ impl NavigationTarget {\n         //FIXME: use `_` instead of empty string\n         let name = node.value.name().map(|it| it.text().clone()).unwrap_or_default();\n         let focus_range =\n-            node.value.name().map(|it| original_range(db, node.with_ast(it.syntax())).range);\n+            node.value.name().map(|it| original_range(db, node.with_value(it.syntax())).range);\n         let frange = original_range(db, node.map(|it| it.syntax()));\n \n         NavigationTarget::from_syntax(\n@@ -232,7 +232,7 @@ impl ToNav for hir::Module {\n         let name = self.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n         match &src.value {\n             ModuleSource::SourceFile(node) => {\n-                let frange = original_range(db, src.with_ast(node.syntax()));\n+                let frange = original_range(db, src.with_value(node.syntax()));\n \n                 NavigationTarget::from_syntax(\n                     frange.file_id,\n@@ -245,7 +245,7 @@ impl ToNav for hir::Module {\n                 )\n             }\n             ModuleSource::Module(node) => {\n-                let frange = original_range(db, src.with_ast(node.syntax()));\n+                let frange = original_range(db, src.with_value(node.syntax()));\n \n                 NavigationTarget::from_syntax(\n                     frange.file_id,\n@@ -285,12 +285,12 @@ impl ToNav for hir::StructField {\n         match &src.value {\n             FieldSource::Named(it) => NavigationTarget::from_named(\n                 db,\n-                src.with_ast(it),\n+                src.with_value(it),\n                 it.doc_comment_text(),\n                 it.short_label(),\n             ),\n             FieldSource::Pos(it) => {\n-                let frange = original_range(db, src.with_ast(it.syntax()));\n+                let frange = original_range(db, src.with_value(it.syntax()));\n                 NavigationTarget::from_syntax(\n                     frange.file_id,\n                     \"\".into(),"}, {"sha": "0ad125a9e34bfb707e94f09172ebbb017803d85b", "filename": "crates/ra_ide_api/src/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51baaf298d4ac56036062786bf070aeab7ab8e79/crates%2Fra_ide_api%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51baaf298d4ac56036062786bf070aeab7ab8e79/crates%2Fra_ide_api%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fexpand.rs?ref=51baaf298d4ac56036062786bf070aeab7ab8e79", "patch": "@@ -28,7 +28,7 @@ pub(crate) fn original_range(db: &RootDatabase, node: Source<&SyntaxNode>) -> Fi\n         .value\n         .descendants_with_tokens()\n         .filter_map(|it| it.into_token())\n-        .find_map(|it| expansion.map_token_up(node.with_ast(&it)));\n+        .find_map(|it| expansion.map_token_up(node.with_value(&it)));\n \n     match token {\n         Some(it) => {\n@@ -54,7 +54,7 @@ pub(crate) fn descend_into_macros(\n             return None;\n         }\n         let source_analyzer =\n-            hir::SourceAnalyzer::new(db, token.with_ast(token.value.parent()).as_ref(), None);\n+            hir::SourceAnalyzer::new(db, token.with_value(token.value.parent()).as_ref(), None);\n         let exp = source_analyzer.expand(db, &macro_call)?;\n         exp.map_token_down(db, token.as_ref())\n     })"}, {"sha": "b6c72efdfff7ab2e2909d606f3ded824c83070dc", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/51baaf298d4ac56036062786bf070aeab7ab8e79/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51baaf298d4ac56036062786bf070aeab7ab8e79/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=51baaf298d4ac56036062786bf070aeab7ab8e79", "patch": "@@ -25,11 +25,11 @@ pub(crate) fn goto_definition(\n     let res = match_ast! {\n         match (token.value.parent()) {\n             ast::NameRef(name_ref) => {\n-                let navs = reference_definition(db, token.with_ast(&name_ref)).to_vec();\n+                let navs = reference_definition(db, token.with_value(&name_ref)).to_vec();\n                 RangeInfo::new(name_ref.syntax().text_range(), navs.to_vec())\n             },\n             ast::Name(name) => {\n-                let navs = name_definition(db, token.with_ast(&name))?;\n+                let navs = name_definition(db, token.with_value(&name))?;\n                 RangeInfo::new(name.syntax().text_range(), navs)\n \n             },\n@@ -99,15 +99,15 @@ pub(crate) fn name_definition(\n \n     if let Some(module) = ast::Module::cast(parent.clone()) {\n         if module.has_semi() {\n-            let src = name.with_ast(module);\n+            let src = name.with_value(module);\n             if let Some(child_module) = hir::Module::from_declaration(db, src) {\n                 let nav = child_module.to_nav(db);\n                 return Some(vec![nav]);\n             }\n         }\n     }\n \n-    if let Some(nav) = named_target(db, name.with_ast(&parent)) {\n+    if let Some(nav) = named_target(db, name.with_value(&parent)) {\n         return Some(vec![nav]);\n     }\n \n@@ -120,87 +120,87 @@ fn named_target(db: &RootDatabase, node: Source<&SyntaxNode>) -> Option<Navigati\n             ast::StructDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.with_ast(&it),\n+                    node.with_value(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::EnumDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.with_ast(&it),\n+                    node.with_value(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::EnumVariant(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.with_ast(&it),\n+                    node.with_value(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::FnDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.with_ast(&it),\n+                    node.with_value(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::TypeAliasDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.with_ast(&it),\n+                    node.with_value(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::ConstDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.with_ast(&it),\n+                    node.with_value(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::StaticDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.with_ast(&it),\n+                    node.with_value(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::TraitDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.with_ast(&it),\n+                    node.with_value(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::RecordFieldDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.with_ast(&it),\n+                    node.with_value(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::Module(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.with_ast(&it),\n+                    node.with_value(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::MacroCall(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.with_ast(&it),\n+                    node.with_value(&it),\n                     it.doc_comment_text(),\n                     None,\n                 ))"}, {"sha": "28a83a3e2a31522d61b000bc36d6ca4e0c8b6195", "filename": "crates/ra_ide_api/src/goto_type_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51baaf298d4ac56036062786bf070aeab7ab8e79/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51baaf298d4ac56036062786bf070aeab7ab8e79/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs?ref=51baaf298d4ac56036062786bf070aeab7ab8e79", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn goto_type_definition(\n             .find(|n| ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some())\n     })?;\n \n-    let analyzer = hir::SourceAnalyzer::new(db, token.with_ast(&node), None);\n+    let analyzer = hir::SourceAnalyzer::new(db, token.with_value(&node), None);\n \n     let ty: hir::Ty = if let Some(ty) =\n         ast::Expr::cast(node.clone()).and_then(|e| analyzer.type_of(db, &e))"}, {"sha": "ae87ab9f91eb0a69332e25c5da92437b20493544", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51baaf298d4ac56036062786bf070aeab7ab8e79/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51baaf298d4ac56036062786bf070aeab7ab8e79/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=51baaf298d4ac56036062786bf070aeab7ab8e79", "patch": "@@ -174,7 +174,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n             ast::NameRef(name_ref) => {\n                 let mut no_fallback = false;\n                 if let Some(name_kind) =\n-                    classify_name_ref(db, token.with_ast(&name_ref)).map(|d| d.kind)\n+                    classify_name_ref(db, token.with_value(&name_ref)).map(|d| d.kind)\n                 {\n                     res.extend(hover_text_from_name_kind(db, name_kind, &mut no_fallback))\n                 }\n@@ -196,7 +196,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                 }\n             },\n             ast::Name(name) => {\n-                if let Some(name_kind) = classify_name(db, token.with_ast(&name)).map(|d| d.kind) {\n+                if let Some(name_kind) = classify_name(db, token.with_value(&name)).map(|d| d.kind) {\n                     res.extend(hover_text_from_name_kind(db, name_kind, &mut true));\n                 }\n "}, {"sha": "4a4b030f89d353bd4f5894afec9bb7a49cb98dff", "filename": "crates/ra_ide_api/src/references/classify.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/51baaf298d4ac56036062786bf070aeab7ab8e79/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51baaf298d4ac56036062786bf070aeab7ab8e79/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs?ref=51baaf298d4ac56036062786bf070aeab7ab8e79", "patch": "@@ -18,7 +18,7 @@ pub(crate) fn classify_name(db: &RootDatabase, name: Source<&ast::Name>) -> Opti\n     match_ast! {\n         match parent {\n             ast::BindPat(it) => {\n-                let src = name.with_ast(it);\n+                let src = name.with_value(it);\n                 let local = hir::Local::from_source(db, src)?;\n                 Some(NameDefinition {\n                     visibility: None,\n@@ -28,50 +28,50 @@ pub(crate) fn classify_name(db: &RootDatabase, name: Source<&ast::Name>) -> Opti\n             },\n             ast::RecordFieldDef(it) => {\n                 let ast = hir::FieldSource::Named(it);\n-                let src = name.with_ast(ast);\n+                let src = name.with_value(ast);\n                 let field = hir::StructField::from_source(db, src)?;\n                 Some(from_struct_field(db, field))\n             },\n             ast::Module(it) => {\n                 let def = {\n                     if !it.has_semi() {\n                         let ast = hir::ModuleSource::Module(it);\n-                        let src = name.with_ast(ast);\n+                        let src = name.with_value(ast);\n                         hir::Module::from_definition(db, src)\n                     } else {\n-                        let src = name.with_ast(it);\n+                        let src = name.with_value(it);\n                         hir::Module::from_declaration(db, src)\n                     }\n                 }?;\n                 Some(from_module_def(db, def.into(), None))\n             },\n             ast::StructDef(it) => {\n-                let src = name.with_ast(it);\n+                let src = name.with_value(it);\n                 let def = hir::Struct::from_source(db, src)?;\n                 Some(from_module_def(db, def.into(), None))\n             },\n             ast::EnumDef(it) => {\n-                let src = name.with_ast(it);\n+                let src = name.with_value(it);\n                 let def = hir::Enum::from_source(db, src)?;\n                 Some(from_module_def(db, def.into(), None))\n             },\n             ast::TraitDef(it) => {\n-                let src = name.with_ast(it);\n+                let src = name.with_value(it);\n                 let def = hir::Trait::from_source(db, src)?;\n                 Some(from_module_def(db, def.into(), None))\n             },\n             ast::StaticDef(it) => {\n-                let src = name.with_ast(it);\n+                let src = name.with_value(it);\n                 let def = hir::Static::from_source(db, src)?;\n                 Some(from_module_def(db, def.into(), None))\n             },\n             ast::EnumVariant(it) => {\n-                let src = name.with_ast(it);\n+                let src = name.with_value(it);\n                 let def = hir::EnumVariant::from_source(db, src)?;\n                 Some(from_module_def(db, def.into(), None))\n             },\n             ast::FnDef(it) => {\n-                let src = name.with_ast(it);\n+                let src = name.with_value(it);\n                 let def = hir::Function::from_source(db, src)?;\n                 if parent.parent().and_then(ast::ItemList::cast).is_some() {\n                     Some(from_assoc_item(db, def.into()))\n@@ -80,7 +80,7 @@ pub(crate) fn classify_name(db: &RootDatabase, name: Source<&ast::Name>) -> Opti\n                 }\n             },\n             ast::ConstDef(it) => {\n-                let src = name.with_ast(it);\n+                let src = name.with_value(it);\n                 let def = hir::Const::from_source(db, src)?;\n                 if parent.parent().and_then(ast::ItemList::cast).is_some() {\n                     Some(from_assoc_item(db, def.into()))\n@@ -89,7 +89,7 @@ pub(crate) fn classify_name(db: &RootDatabase, name: Source<&ast::Name>) -> Opti\n                 }\n             },\n             ast::TypeAliasDef(it) => {\n-                let src = name.with_ast(it);\n+                let src = name.with_value(it);\n                 let def = hir::TypeAlias::from_source(db, src)?;\n                 if parent.parent().and_then(ast::ItemList::cast).is_some() {\n                     Some(from_assoc_item(db, def.into()))\n@@ -98,11 +98,11 @@ pub(crate) fn classify_name(db: &RootDatabase, name: Source<&ast::Name>) -> Opti\n                 }\n             },\n             ast::MacroCall(it) => {\n-                let src = name.with_ast(it);\n+                let src = name.with_value(it);\n                 let def = hir::MacroDef::from_source(db, src.clone())?;\n \n                 let module_src = ModuleSource::from_child_node(db, src.as_ref().map(|it| it.syntax()));\n-                let module = Module::from_definition(db, src.with_ast(module_src))?;\n+                let module = Module::from_definition(db, src.with_value(module_src))?;\n \n                 Some(NameDefinition {\n                     visibility: None,\n@@ -149,9 +149,9 @@ pub(crate) fn classify_name_ref(\n         }\n     }\n \n-    let ast = ModuleSource::from_child_node(db, name_ref.with_ast(&parent));\n+    let ast = ModuleSource::from_child_node(db, name_ref.with_value(&parent));\n     // FIXME: find correct container and visibility for each case\n-    let container = Module::from_definition(db, name_ref.with_ast(ast))?;\n+    let container = Module::from_definition(db, name_ref.with_value(ast))?;\n     let visibility = None;\n \n     if let Some(macro_call) = parent.ancestors().find_map(ast::MacroCall::cast) {"}]}