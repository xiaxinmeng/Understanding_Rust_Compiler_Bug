{"sha": "227b46bdede794d5c8476b810bb1c30926bd9c04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyN2I0NmJkZWRlNzk0ZDVjODQ3NmI4MTBiYjFjMzA5MjZiZDljMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-29T05:21:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-29T05:21:29Z"}, "message": "Auto merge of #23810 - sfackler:debug-collections, r=alexcrichton\n\nThe collections debug helpers no longer prefix output with the\r\ncollection name, in line with the current conventions for Debug\r\nimplementations. Implementations that want to preserve the current\r\nbehavior can simply add a `try!(write!(fmt, \"TypeName \"));` at the\r\nbeginning of the `fmt` method.\r\n\r\n[breaking-change]", "tree": {"sha": "50a0c0dde28dd4deea02c40cf90c713a3075313a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50a0c0dde28dd4deea02c40cf90c713a3075313a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/227b46bdede794d5c8476b810bb1c30926bd9c04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/227b46bdede794d5c8476b810bb1c30926bd9c04", "html_url": "https://github.com/rust-lang/rust/commit/227b46bdede794d5c8476b810bb1c30926bd9c04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/227b46bdede794d5c8476b810bb1c30926bd9c04/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27af78c6dddc95c7c82dc21926d6ea81562e1211", "url": "https://api.github.com/repos/rust-lang/rust/commits/27af78c6dddc95c7c82dc21926d6ea81562e1211", "html_url": "https://github.com/rust-lang/rust/commit/27af78c6dddc95c7c82dc21926d6ea81562e1211"}, {"sha": "3c0c8fc43a6dddda37c9e833279e0f8859a05f1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c0c8fc43a6dddda37c9e833279e0f8859a05f1c", "html_url": "https://github.com/rust-lang/rust/commit/3c0c8fc43a6dddda37c9e833279e0f8859a05f1c"}], "stats": {"total": 419, "additions": 259, "deletions": 160}, "files": [{"sha": "e1d007f0ac49739e21a33f60929e5fa0b7f5b19a", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=227b46bdede794d5c8476b810bb1c30926bd9c04", "patch": "@@ -904,14 +904,7 @@ impl<K: Ord, V: Ord> Ord for BTreeMap<K, V> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Debug, V: Debug> Debug for BTreeMap<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"{{\"));\n-\n-        for (i, (k, v)) in self.iter().enumerate() {\n-            if i != 0 { try!(write!(f, \", \")); }\n-            try!(write!(f, \"{:?}: {:?}\", *k, *v));\n-        }\n-\n-        write!(f, \"}}\")\n+        self.iter().fold(f.debug_map(), |b, (k, v)| b.entry(k, v)).finish()\n     }\n }\n "}, {"sha": "840110b5b276fffc7822d69d345db5e7ed9894d9", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=227b46bdede794d5c8476b810bb1c30926bd9c04", "patch": "@@ -628,14 +628,7 @@ impl<'a, 'b, T: Ord + Clone> BitOr<&'b BTreeSet<T>> for &'a BTreeSet<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Debug> Debug for BTreeSet<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"{{\"));\n-\n-        for (i, x) in self.iter().enumerate() {\n-            if i != 0 { try!(write!(f, \", \")); }\n-            try!(write!(f, \"{:?}\", *x));\n-        }\n-\n-        write!(f, \"}}\")\n+        self.iter().fold(f.debug_set(), |b, e| b.entry(e)).finish()\n     }\n }\n "}, {"sha": "c769b3df37f627548150961962c00aa8500c6c39", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=227b46bdede794d5c8476b810bb1c30926bd9c04", "patch": "@@ -40,6 +40,7 @@\n #![feature(str_char)]\n #![feature(convert)]\n #![feature(slice_patterns)]\n+#![feature(debug_builders)]\n #![cfg_attr(test, feature(rand, rustc_private, test, hash, collections))]\n #![cfg_attr(test, allow(deprecated))] // rand\n "}, {"sha": "52da4902b758cf1c31721072a8c6636ed2ed6a70", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=227b46bdede794d5c8476b810bb1c30926bd9c04", "patch": "@@ -927,14 +927,7 @@ impl<A: Clone> Clone for LinkedList<A> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: fmt::Debug> fmt::Debug for LinkedList<A> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"[\"));\n-\n-        for (i, e) in self.iter().enumerate() {\n-            if i != 0 { try!(write!(f, \", \")); }\n-            try!(write!(f, \"{:?}\", *e));\n-        }\n-\n-        write!(f, \"]\")\n+        self.iter().fold(f.debug_list(), |b, e| b.entry(e)).finish()\n     }\n }\n "}, {"sha": "f61a7f2d30c62cd418b949bd0b301b2ee13a06d3", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 85, "deletions": 53, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=227b46bdede794d5c8476b810bb1c30926bd9c04", "patch": "@@ -177,64 +177,107 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     }\n }\n \n+struct DebugInner<'a, 'b: 'a> {\n+    fmt: &'a mut fmt::Formatter<'b>,\n+    result: fmt::Result,\n+    has_fields: bool,\n+}\n+\n+impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n+    fn entry(&mut self, entry: &fmt::Debug) {\n+        self.result = self.result.and_then(|_| {\n+            if self.is_pretty() {\n+                let mut writer = PadAdapter::new(self.fmt);\n+                let prefix = if self.has_fields { \",\" } else { \"\" };\n+                fmt::write(&mut writer, format_args!(\"{}\\n{:#?}\", prefix, entry))\n+            } else {\n+                let prefix = if self.has_fields { \", \" } else { \"\" };\n+                write!(self.fmt, \"{}{:?}\", prefix, entry)\n+            }\n+        });\n+\n+        self.has_fields = true;\n+    }\n+\n+    pub fn finish(&mut self) {\n+        let prefix = if self.is_pretty() && self.has_fields { \"\\n\" } else { \"\" };\n+        self.result = self.result.and_then(|_| self.fmt.write_str(prefix));\n+    }\n+\n+    fn is_pretty(&self) -> bool {\n+        self.fmt.flags() & (1 << (FlagV1::Alternate as usize)) != 0\n+    }\n+}\n+\n /// A struct to help with `fmt::Debug` implementations.\n ///\n /// Constructed by the `Formatter::debug_set` method.\n #[must_use]\n pub struct DebugSet<'a, 'b: 'a> {\n-    fmt: &'a mut fmt::Formatter<'b>,\n-    result: fmt::Result,\n-    has_fields: bool,\n+    inner: DebugInner<'a, 'b>,\n }\n \n-pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> DebugSet<'a, 'b> {\n-    let result = write!(fmt, \"{} {{\", name);\n+pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugSet<'a, 'b> {\n+    let result = write!(fmt, \"{{\");\n     DebugSet {\n-        fmt: fmt,\n-        result: result,\n-        has_fields: false,\n+        inner: DebugInner {\n+            fmt: fmt,\n+            result: result,\n+            has_fields: false,\n+        }\n     }\n }\n \n impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     /// Adds a new entry to the set output.\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     pub fn entry(mut self, entry: &fmt::Debug) -> DebugSet<'a, 'b> {\n-        self.result = self.result.and_then(|_| {\n-            let prefix = if self.has_fields {\n-                \",\"\n-            } else {\n-                \"\"\n-            };\n-\n-            if self.is_pretty() {\n-                let mut writer = PadAdapter::new(self.fmt);\n-                fmt::write(&mut writer, format_args!(\"{}\\n{:#?}\", prefix, entry))\n-            } else {\n-                write!(self.fmt, \"{} {:?}\", prefix, entry)\n-            }\n-        });\n-\n-        self.has_fields = true;\n+        self.inner.entry(entry);\n         self\n     }\n \n     /// Consumes the `DebugSet`, finishing output and returning any error\n     /// encountered.\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n-    pub fn finish(self) -> fmt::Result {\n-        self.result.and_then(|_| {\n-            let end = match (self.has_fields, self.is_pretty()) {\n-                (false, _) => \"}\",\n-                (true, false) => \" }\",\n-                (true, true) => \"\\n}\",\n-            };\n-            self.fmt.write_str(end)\n-        })\n+    pub fn finish(mut self) -> fmt::Result {\n+        self.inner.finish();\n+        self.inner.result.and_then(|_| self.inner.fmt.write_str(\"}\"))\n     }\n+}\n \n-    fn is_pretty(&self) -> bool {\n-        self.fmt.flags() & (1 << (FlagV1::Alternate as usize)) != 0\n+/// A struct to help with `fmt::Debug` implementations.\n+///\n+/// Constructed by the `Formatter::debug_list` method.\n+#[must_use]\n+pub struct DebugList<'a, 'b: 'a> {\n+    inner: DebugInner<'a, 'b>,\n+}\n+\n+pub fn debug_list_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugList<'a, 'b> {\n+    let result = write!(fmt, \"[\");\n+    DebugList {\n+        inner: DebugInner {\n+            fmt: fmt,\n+            result: result,\n+            has_fields: false,\n+        }\n+    }\n+}\n+\n+impl<'a, 'b: 'a> DebugList<'a, 'b> {\n+    /// Adds a new entry to the set output.\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    pub fn entry(mut self, entry: &fmt::Debug) -> DebugList<'a, 'b> {\n+        self.inner.entry(entry);\n+        self\n+    }\n+\n+    /// Consumes the `DebugSet`, finishing output and returning any error\n+    /// encountered.\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    pub fn finish(mut self) -> fmt::Result {\n+        self.inner.finish();\n+        self.inner.result.and_then(|_| self.inner.fmt.write_str(\"]\"))\n     }\n }\n \n@@ -248,8 +291,8 @@ pub struct DebugMap<'a, 'b: 'a> {\n     has_fields: bool,\n }\n \n-pub fn debug_map_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> DebugMap<'a, 'b> {\n-    let result = write!(fmt, \"{} {{\", name);\n+pub fn debug_map_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugMap<'a, 'b> {\n+    let result = write!(fmt, \"{{\");\n     DebugMap {\n         fmt: fmt,\n         result: result,\n@@ -262,37 +305,26 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     pub fn entry(mut self, key: &fmt::Debug, value: &fmt::Debug) -> DebugMap<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n-            let prefix = if self.has_fields {\n-                \",\"\n-            } else {\n-                \"\"\n-            };\n-\n             if self.is_pretty() {\n                 let mut writer = PadAdapter::new(self.fmt);\n+                let prefix = if self.has_fields { \",\" } else { \"\" };\n                 fmt::write(&mut writer, format_args!(\"{}\\n{:#?}: {:#?}\", prefix, key, value))\n             } else {\n-                write!(self.fmt, \"{} {:?}: {:?}\", prefix, key, value)\n+                let prefix = if self.has_fields { \", \" } else { \"\" };\n+                write!(self.fmt, \"{}{:?}: {:?}\", prefix, key, value)\n             }\n         });\n \n         self.has_fields = true;\n-\n         self\n     }\n \n     /// Consumes the `DebugMap`, finishing output and returning any error\n     /// encountered.\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     pub fn finish(self) -> fmt::Result {\n-        self.result.and_then(|_| {\n-            let end = match (self.has_fields, self.is_pretty()) {\n-                (false, _) => \"}\",\n-                (true, false) => \" }\",\n-                (true, true) => \"\\n}\",\n-            };\n-            self.fmt.write_str(end)\n-        })\n+        let prefix = if self.is_pretty() && self.has_fields { \"\\n\" } else { \"\" };\n+        self.result.and_then(|_| write!(self.fmt, \"{}}}\", prefix))\n     }\n \n     fn is_pretty(&self) -> bool {"}, {"sha": "ffb358cdac84d90854623e1dc969473269edeb09", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 40, "deletions": 37, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=227b46bdede794d5c8476b810bb1c30926bd9c04", "patch": "@@ -32,7 +32,7 @@ pub use self::num::radix;\n pub use self::num::Radix;\n pub use self::num::RadixFmt;\n \n-pub use self::builders::{DebugStruct, DebugTuple, DebugSet, DebugMap};\n+pub use self::builders::{DebugStruct, DebugTuple, DebugSet, DebugList, DebugMap};\n \n mod num;\n mod float;\n@@ -644,7 +644,7 @@ impl<'a> Formatter<'a> {\n     /// // prints \"Foo { bar: 10, baz: \"Hello World\" }\"\n     /// println!(\"{:?}\", Foo { bar: 10, baz: \"Hello World\".to_string() });\n     /// ```\n-    #[unstable(feature = \"core\", reason = \"method was just created\")]\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     #[inline]\n     pub fn debug_struct<'b>(&'b mut self, name: &str) -> DebugStruct<'b, 'a> {\n         builders::debug_struct_new(self, name)\n@@ -673,12 +673,38 @@ impl<'a> Formatter<'a> {\n     /// // prints \"Foo(10, \"Hello World\")\"\n     /// println!(\"{:?}\", Foo(10, \"Hello World\".to_string()));\n     /// ```\n-    #[unstable(feature = \"core\", reason = \"method was just created\")]\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     #[inline]\n     pub fn debug_tuple<'b>(&'b mut self, name: &str) -> DebugTuple<'b, 'a> {\n         builders::debug_tuple_new(self, name)\n     }\n \n+    /// Creates a `DebugList` builder designed to assist with creation of\n+    /// `fmt::Debug` implementations for list-like structures.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// # #![feature(debug_builders, core)]\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<i32>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    ///         self.0.iter().fold(fmt.debug_list(), |b, e| b.entry(e)).finish()\n+    ///     }\n+    /// }\n+    ///\n+    /// // prints \"[10, 11]\"\n+    /// println!(\"{:?}\", Foo(vec![10, 11]));\n+    /// ```\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[inline]\n+    pub fn debug_list<'b>(&'b mut self) -> DebugList<'b, 'a> {\n+        builders::debug_list_new(self)\n+    }\n+\n     /// Creates a `DebugSet` builder designed to assist with creation of\n     /// `fmt::Debug` implementations for set-like structures.\n     ///\n@@ -692,21 +718,17 @@ impl<'a> Formatter<'a> {\n     ///\n     /// impl fmt::Debug for Foo {\n     ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-    ///         let mut builder = fmt.debug_set(\"Foo\");\n-    ///         for i in &self.0 {\n-    ///             builder = builder.entry(i);\n-    ///         }\n-    ///         builder.finish()\n+    ///         self.0.iter().fold(fmt.debug_set(), |b, e| b.entry(e)).finish()\n     ///     }\n     /// }\n     ///\n-    /// // prints \"Foo { 10, 11 }\"\n+    /// // prints \"{10, 11}\"\n     /// println!(\"{:?}\", Foo(vec![10, 11]));\n     /// ```\n-    #[unstable(feature = \"core\", reason = \"method was just created\")]\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     #[inline]\n-    pub fn debug_set<'b>(&'b mut self, name: &str) -> DebugSet<'b, 'a> {\n-        builders::debug_set_new(self, name)\n+    pub fn debug_set<'b>(&'b mut self) -> DebugSet<'b, 'a> {\n+        builders::debug_set_new(self)\n     }\n \n     /// Creates a `DebugMap` builder designed to assist with creation of\n@@ -722,21 +744,17 @@ impl<'a> Formatter<'a> {\n     ///\n     /// impl fmt::Debug for Foo {\n     ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-    ///         let mut builder = fmt.debug_map(\"Foo\");\n-    ///         for &(ref key, ref value) in &self.0 {\n-    ///             builder = builder.entry(key, value);\n-    ///         }\n-    ///         builder.finish()\n+    ///         self.0.iter().fold(fmt.debug_map(), |b, &(ref k, ref v)| b.entry(k, v)).finish()\n     ///     }\n     /// }\n     ///\n-    /// // prints \"Foo { \"A\": 10, \"B\": 11 }\"\n+    /// // prints \"{\"A\": 10, \"B\": 11}\"\n     /// println!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)]));\n     /// ```\n-    #[unstable(feature = \"core\", reason = \"method was just created\")]\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     #[inline]\n-    pub fn debug_map<'b>(&'b mut self, name: &str) -> DebugMap<'b, 'a> {\n-        builders::debug_map_new(self, name)\n+    pub fn debug_map<'b>(&'b mut self) -> DebugMap<'b, 'a> {\n+        builders::debug_map_new(self)\n     }\n }\n \n@@ -987,22 +1005,7 @@ impl<'a> Debug for &'a (any::Any+'a) {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Debug> Debug for [T] {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n-        if f.flags & (1 << (FlagV1::Alternate as u32)) == 0 {\n-            try!(write!(f, \"[\"));\n-        }\n-        let mut is_first = true;\n-        for x in self {\n-            if is_first {\n-                is_first = false;\n-            } else {\n-                try!(write!(f, \", \"));\n-            }\n-            try!(write!(f, \"{:?}\", *x))\n-        }\n-        if f.flags & (1 << (FlagV1::Alternate as u32)) == 0 {\n-            try!(write!(f, \"]\"));\n-        }\n-        Ok(())\n+        self.iter().fold(f.debug_list(), |b, e| b.entry(e)).finish()\n     }\n }\n "}, {"sha": "885ee3f9c3be2e19ba39c658719e0a899b578f2b", "filename": "src/libcoretest/fmt/builders.rs", "status": "modified", "additions": 127, "deletions": 30, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibcoretest%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibcoretest%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fbuilders.rs?ref=227b46bdede794d5c8476b810bb1c30926bd9c04", "patch": "@@ -211,12 +211,12 @@ mod debug_map {\n \n         impl fmt::Debug for Foo {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_map(\"Foo\").finish()\n+                fmt.debug_map().finish()\n             }\n         }\n \n-        assert_eq!(\"Foo {}\", format!(\"{:?}\", Foo));\n-        assert_eq!(\"Foo {}\", format!(\"{:#?}\", Foo));\n+        assert_eq!(\"{}\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"{}\", format!(\"{:#?}\", Foo));\n     }\n \n     #[test]\n@@ -225,15 +225,15 @@ mod debug_map {\n \n         impl fmt::Debug for Foo {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_map(\"Foo\")\n+                fmt.debug_map()\n                     .entry(&\"bar\", &true)\n                     .finish()\n             }\n         }\n \n-        assert_eq!(\"Foo { \\\"bar\\\": true }\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"{\\\"bar\\\": true}\", format!(\"{:?}\", Foo));\n         assert_eq!(\n-\"Foo {\n+\"{\n     \\\"bar\\\": true\n }\",\n                    format!(\"{:#?}\", Foo));\n@@ -245,16 +245,16 @@ mod debug_map {\n \n         impl fmt::Debug for Foo {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_map(\"Foo\")\n+                fmt.debug_map()\n                     .entry(&\"bar\", &true)\n                     .entry(&10i32, &format_args!(\"{}/{}\", 10i32, 20i32))\n                     .finish()\n             }\n         }\n \n-        assert_eq!(\"Foo { \\\"bar\\\": true, 10: 10/20 }\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"{\\\"bar\\\": true, 10: 10/20}\", format!(\"{:?}\", Foo));\n         assert_eq!(\n-\"Foo {\n+\"{\n     \\\"bar\\\": true,\n     10: 10/20\n }\",\n@@ -267,7 +267,7 @@ mod debug_map {\n \n         impl fmt::Debug for Foo {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_map(\"Foo\")\n+                fmt.debug_map()\n                     .entry(&\"bar\", &true)\n                     .entry(&10i32, &format_args!(\"{}/{}\", 10i32, 20i32))\n                     .finish()\n@@ -278,23 +278,23 @@ mod debug_map {\n \n         impl fmt::Debug for Bar {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_map(\"Bar\")\n+                fmt.debug_map()\n                     .entry(&\"foo\", &Foo)\n                     .entry(&Foo, &\"world\")\n                     .finish()\n             }\n         }\n \n-        assert_eq!(\"Bar { \\\"foo\\\": Foo { \\\"bar\\\": true, 10: 10/20 }, \\\n-                    Foo { \\\"bar\\\": true, 10: 10/20 }: \\\"world\\\" }\",\n+        assert_eq!(\"{\\\"foo\\\": {\\\"bar\\\": true, 10: 10/20}, \\\n+                    {\\\"bar\\\": true, 10: 10/20}: \\\"world\\\"}\",\n                    format!(\"{:?}\", Bar));\n         assert_eq!(\n-\"Bar {\n-    \\\"foo\\\": Foo {\n+\"{\n+    \\\"foo\\\": {\n         \\\"bar\\\": true,\n         10: 10/20\n     },\n-    Foo {\n+    {\n         \\\"bar\\\": true,\n         10: 10/20\n     }: \\\"world\\\"\n@@ -312,12 +312,12 @@ mod debug_set {\n \n         impl fmt::Debug for Foo {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_set(\"Foo\").finish()\n+                fmt.debug_set().finish()\n             }\n         }\n \n-        assert_eq!(\"Foo {}\", format!(\"{:?}\", Foo));\n-        assert_eq!(\"Foo {}\", format!(\"{:#?}\", Foo));\n+        assert_eq!(\"{}\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"{}\", format!(\"{:#?}\", Foo));\n     }\n \n     #[test]\n@@ -326,15 +326,15 @@ mod debug_set {\n \n         impl fmt::Debug for Foo {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_set(\"Foo\")\n+                fmt.debug_set()\n                     .entry(&true)\n                     .finish()\n             }\n         }\n \n-        assert_eq!(\"Foo { true }\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"{true}\", format!(\"{:?}\", Foo));\n         assert_eq!(\n-\"Foo {\n+\"{\n     true\n }\",\n                    format!(\"{:#?}\", Foo));\n@@ -346,16 +346,16 @@ mod debug_set {\n \n         impl fmt::Debug for Foo {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_set(\"Foo\")\n+                fmt.debug_set()\n                     .entry(&true)\n                     .entry(&format_args!(\"{}/{}\", 10i32, 20i32))\n                     .finish()\n             }\n         }\n \n-        assert_eq!(\"Foo { true, 10/20 }\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"{true, 10/20}\", format!(\"{:?}\", Foo));\n         assert_eq!(\n-\"Foo {\n+\"{\n     true,\n     10/20\n }\",\n@@ -368,7 +368,7 @@ mod debug_set {\n \n         impl fmt::Debug for Foo {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_set(\"Foo\")\n+                fmt.debug_set()\n                     .entry(&true)\n                     .entry(&format_args!(\"{}/{}\", 10i32, 20i32))\n                     .finish()\n@@ -379,18 +379,18 @@ mod debug_set {\n \n         impl fmt::Debug for Bar {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_set(\"Bar\")\n+                fmt.debug_set()\n                     .entry(&Foo)\n                     .entry(&\"world\")\n                     .finish()\n             }\n         }\n \n-        assert_eq!(\"Bar { Foo { true, 10/20 }, \\\"world\\\" }\",\n+        assert_eq!(\"{{true, 10/20}, \\\"world\\\"}\",\n                    format!(\"{:?}\", Bar));\n         assert_eq!(\n-\"Bar {\n-    Foo {\n+\"{\n+    {\n         true,\n         10/20\n     },\n@@ -399,3 +399,100 @@ mod debug_set {\n                    format!(\"{:#?}\", Bar));\n     }\n }\n+\n+mod debug_list {\n+    use std::fmt;\n+\n+    #[test]\n+    fn test_empty() {\n+        struct Foo;\n+\n+        impl fmt::Debug for Foo {\n+            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+                fmt.debug_list().finish()\n+            }\n+        }\n+\n+        assert_eq!(\"[]\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"[]\", format!(\"{:#?}\", Foo));\n+    }\n+\n+    #[test]\n+    fn test_single() {\n+        struct Foo;\n+\n+        impl fmt::Debug for Foo {\n+            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+                fmt.debug_list()\n+                    .entry(&true)\n+                    .finish()\n+            }\n+        }\n+\n+        assert_eq!(\"[true]\", format!(\"{:?}\", Foo));\n+        assert_eq!(\n+\"[\n+    true\n+]\",\n+                   format!(\"{:#?}\", Foo));\n+    }\n+\n+    #[test]\n+    fn test_multiple() {\n+        struct Foo;\n+\n+        impl fmt::Debug for Foo {\n+            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+                fmt.debug_list()\n+                    .entry(&true)\n+                    .entry(&format_args!(\"{}/{}\", 10i32, 20i32))\n+                    .finish()\n+            }\n+        }\n+\n+        assert_eq!(\"[true, 10/20]\", format!(\"{:?}\", Foo));\n+        assert_eq!(\n+\"[\n+    true,\n+    10/20\n+]\",\n+                   format!(\"{:#?}\", Foo));\n+    }\n+\n+    #[test]\n+    fn test_nested() {\n+        struct Foo;\n+\n+        impl fmt::Debug for Foo {\n+            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+                fmt.debug_list()\n+                    .entry(&true)\n+                    .entry(&format_args!(\"{}/{}\", 10i32, 20i32))\n+                    .finish()\n+            }\n+        }\n+\n+        struct Bar;\n+\n+        impl fmt::Debug for Bar {\n+            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+                fmt.debug_list()\n+                    .entry(&Foo)\n+                    .entry(&\"world\")\n+                    .finish()\n+            }\n+        }\n+\n+        assert_eq!(\"[[true, 10/20], \\\"world\\\"]\",\n+                   format!(\"{:?}\", Bar));\n+        assert_eq!(\n+\"[\n+    [\n+        true,\n+        10/20\n+    ],\n+    \\\"world\\\"\n+]\",\n+                   format!(\"{:#?}\", Bar));\n+    }\n+}"}, {"sha": "276959b715dfb3c067c5f9781279547ec91f5d70", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=227b46bdede794d5c8476b810bb1c30926bd9c04", "patch": "@@ -1226,14 +1226,7 @@ impl<K, V, S> Debug for HashMap<K, V, S>\n     where K: Eq + Hash + Debug, V: Debug, S: HashState\n {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"{{\"));\n-\n-        for (i, (k, v)) in self.iter().enumerate() {\n-            if i != 0 { try!(write!(f, \", \")); }\n-            try!(write!(f, \"{:?}: {:?}\", *k, *v));\n-        }\n-\n-        write!(f, \"}}\")\n+        self.iter().fold(f.debug_map(), |b, (k, v)| b.entry(k, v)).finish()\n     }\n }\n "}, {"sha": "9a4b55af4d5f42404adb38e99c33be417464fe01", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=227b46bdede794d5c8476b810bb1c30926bd9c04", "patch": "@@ -612,14 +612,7 @@ impl<T, S> fmt::Debug for HashSet<T, S>\n           S: HashState\n {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"{{\"));\n-\n-        for (i, x) in self.iter().enumerate() {\n-            if i != 0 { try!(write!(f, \", \")); }\n-            try!(write!(f, \"{:?}\", *x));\n-        }\n-\n-        write!(f, \"}}\")\n+        self.iter().fold(f.debug_set(), |b, e| b.entry(e)).finish()\n     }\n }\n "}, {"sha": "b7cb8f9ed50fdcbec680f17db933b23fca299ae4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=227b46bdede794d5c8476b810bb1c30926bd9c04", "patch": "@@ -128,6 +128,7 @@\n #![feature(into_cow)]\n #![feature(slice_patterns)]\n #![feature(std_misc)]\n+#![feature(debug_builders)]\n #![cfg_attr(test, feature(test, rustc_private, std_misc))]\n \n // Don't link to std. We are std."}]}