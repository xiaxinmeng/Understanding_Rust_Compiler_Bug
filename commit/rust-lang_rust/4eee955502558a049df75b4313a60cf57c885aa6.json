{"sha": "4eee955502558a049df75b4313a60cf57c885aa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZWU5NTU1MDI1NThhMDQ5ZGY3NWI0MzEzYTYwY2Y1N2M4ODVhYTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-25T05:41:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-25T05:41:27Z"}, "message": "Auto merge of #66669 - petrochenkov:tup2attr, r=matthewjasper\n\nFix some issues with attributes on unnamed fields\n\nFixes https://github.com/rust-lang/rust/issues/66487\nFixes https://github.com/rust-lang/rust/issues/66555", "tree": {"sha": "54db2aa3938c62e7563f4ff1c69fa14b39da7ccf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54db2aa3938c62e7563f4ff1c69fa14b39da7ccf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eee955502558a049df75b4313a60cf57c885aa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eee955502558a049df75b4313a60cf57c885aa6", "html_url": "https://github.com/rust-lang/rust/commit/4eee955502558a049df75b4313a60cf57c885aa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eee955502558a049df75b4313a60cf57c885aa6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9bacb70f0b19d324a548bd7942692ab18d159a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9bacb70f0b19d324a548bd7942692ab18d159a4", "html_url": "https://github.com/rust-lang/rust/commit/c9bacb70f0b19d324a548bd7942692ab18d159a4"}, {"sha": "f1359c61d302057d82c5276aba86fec1fe326bb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1359c61d302057d82c5276aba86fec1fe326bb8", "html_url": "https://github.com/rust-lang/rust/commit/f1359c61d302057d82c5276aba86fec1fe326bb8"}], "stats": {"total": 68, "additions": 55, "deletions": 13}, "files": [{"sha": "6694ddc53d4f1c377e29fab4b2cac2a2f6af3f6a", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4eee955502558a049df75b4313a60cf57c885aa6/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eee955502558a049df75b4313a60cf57c885aa6/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=4eee955502558a049df75b4313a60cf57c885aa6", "patch": "@@ -746,6 +746,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n \n                 // Record field names for error reporting.\n                 let field_names = struct_def.fields().iter().map(|field| {\n+                    // NOTE: The field may be an expansion placeholder, but expansion sets correct\n+                    // visibilities for unnamed field placeholders specifically, so the constructor\n+                    // visibility should still be determined correctly.\n                     let field_vis = self.resolve_visibility(&field.vis);\n                     if ctor_vis.is_at_least(field_vis, &*self.r) {\n                         ctor_vis = field_vis;"}, {"sha": "dd6b1d2119e3d8970532689cb7e5b8eeaaed3922", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4eee955502558a049df75b4313a60cf57c885aa6/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eee955502558a049df75b4313a60cf57c885aa6/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=4eee955502558a049df75b4313a60cf57c885aa6", "patch": "@@ -80,15 +80,16 @@ impl<'a> DefCollector<'a> {\n     }\n \n     fn collect_field(&mut self, field: &'a StructField, index: Option<usize>) {\n+        let index = |this: &Self| index.unwrap_or_else(|| {\n+            let node_id = NodeId::placeholder_from_expn_id(this.expansion);\n+            this.definitions.placeholder_field_index(node_id)\n+        });\n+\n         if field.is_placeholder {\n+            self.definitions.set_placeholder_field_index(field.id, index(self));\n             self.visit_macro_invoc(field.id);\n         } else {\n-            let name = field.ident.map(|ident| ident.name)\n-                .or_else(|| index.map(sym::integer))\n-                .unwrap_or_else(|| {\n-                    let node_id = NodeId::placeholder_from_expn_id(self.expansion);\n-                    sym::integer(self.definitions.placeholder_field_index(node_id))\n-                });\n+            let name = field.ident.map_or_else(|| sym::integer(index(self)), |ident| ident.name);\n             let def = self.create_def(field.id, DefPathData::ValueNs(name), field.span);\n             self.with_parent(def, |this| visit::walk_struct_field(this, field));\n         }\n@@ -190,9 +191,6 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         // and every such attribute expands into a single field after it's resolved.\n         for (index, field) in data.fields().iter().enumerate() {\n             self.collect_field(field, Some(index));\n-            if field.is_placeholder && field.ident.is_none() {\n-                self.definitions.set_placeholder_field_index(field.id, index);\n-            }\n         }\n     }\n "}, {"sha": "4f05b0147bff41ae8db1ae4918a559c3bb83d33b", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4eee955502558a049df75b4313a60cf57c885aa6/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eee955502558a049df75b4313a60cf57c885aa6/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=4eee955502558a049df75b4313a60cf57c885aa6", "patch": "@@ -86,7 +86,7 @@ macro_rules! ast_fragments {\n                         // mention some macro variable from those arguments even if it's not used.\n                         #[cfg_attr(bootstrap, allow(unused_macros))]\n                         macro _repeating($flat_map_ast_elt) {}\n-                        placeholder(AstFragmentKind::$Kind, *id).$make_ast()\n+                        placeholder(AstFragmentKind::$Kind, *id, None).$make_ast()\n                     })),)?)*\n                     _ => panic!(\"unexpected AST fragment kind\")\n                 }\n@@ -275,6 +275,23 @@ pub enum InvocationKind {\n     },\n }\n \n+impl InvocationKind {\n+    fn placeholder_visibility(&self) -> Option<ast::Visibility> {\n+        // HACK: For unnamed fields placeholders should have the same visibility as the actual\n+        // fields because for tuple structs/variants resolve determines visibilities of their\n+        // constructor using these field visibilities before attributes on them are are expanded.\n+        // The assumption is that the attribute expansion cannot change field visibilities,\n+        // and it holds because only inert attributes are supported in this position.\n+        match self {\n+            InvocationKind::Attr { item: Annotatable::StructField(field), .. } |\n+            InvocationKind::Derive { item: Annotatable::StructField(field), .. } |\n+            InvocationKind::DeriveContainer { item: Annotatable::StructField(field), .. }\n+                if field.ident.is_none() => Some(field.vis.clone()),\n+            _ => None,\n+        }\n+    }\n+}\n+\n impl Invocation {\n     pub fn span(&self) -> Span {\n         match &self.kind {\n@@ -931,6 +948,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n             _ => None,\n         };\n         let expn_id = ExpnId::fresh(expn_data);\n+        let vis = kind.placeholder_visibility();\n         self.invocations.push(Invocation {\n             kind,\n             fragment_kind,\n@@ -940,7 +958,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                 ..self.cx.current_expansion.clone()\n             },\n         });\n-        placeholder(fragment_kind, NodeId::placeholder_from_expn_id(expn_id))\n+        placeholder(fragment_kind, NodeId::placeholder_from_expn_id(expn_id), vis)\n     }\n \n     fn collect_bang(&mut self, mac: ast::Mac, span: Span, kind: AstFragmentKind) -> AstFragment {"}, {"sha": "6cbe8c132457c2a5df9c65990b17cd7c8daff0a3", "filename": "src/libsyntax_expand/placeholders.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4eee955502558a049df75b4313a60cf57c885aa6/src%2Flibsyntax_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eee955502558a049df75b4313a60cf57c885aa6/src%2Flibsyntax_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fplaceholders.rs?ref=4eee955502558a049df75b4313a60cf57c885aa6", "patch": "@@ -12,7 +12,8 @@ use smallvec::{smallvec, SmallVec};\n \n use rustc_data_structures::fx::FxHashMap;\n \n-pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n+pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId, vis: Option<ast::Visibility>)\n+                   -> AstFragment {\n     fn mac_placeholder() -> ast::Mac {\n         ast::Mac {\n             path: ast::Path { span: DUMMY_SP, segments: Vec::new() },\n@@ -26,7 +27,7 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n     let ident = ast::Ident::invalid();\n     let attrs = Vec::new();\n     let generics = ast::Generics::default();\n-    let vis = dummy_spanned(ast::VisibilityKind::Inherited);\n+    let vis = vis.unwrap_or_else(|| dummy_spanned(ast::VisibilityKind::Inherited));\n     let span = DUMMY_SP;\n     let expr_placeholder = || P(ast::Expr {\n         id, span,"}, {"sha": "7edfd0337945b813c4a513d2b4390a1a301e462e", "filename": "src/test/ui/attributes/unnamed-field-attributes-dup.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4eee955502558a049df75b4313a60cf57c885aa6/src%2Ftest%2Fui%2Fattributes%2Funnamed-field-attributes-dup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eee955502558a049df75b4313a60cf57c885aa6/src%2Ftest%2Fui%2Fattributes%2Funnamed-field-attributes-dup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funnamed-field-attributes-dup.rs?ref=4eee955502558a049df75b4313a60cf57c885aa6", "patch": "@@ -0,0 +1,11 @@\n+// Duplicate non-builtin attributes can be used on unnamed fields.\n+\n+// check-pass\n+\n+struct S (\n+    #[rustfmt::skip]\n+    #[rustfmt::skip]\n+    u8\n+);\n+\n+fn main() {}"}, {"sha": "d12155f6d81fdc6b6dcb2aea438278246f849999", "filename": "src/test/ui/attributes/unnamed-field-attributes-vis.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4eee955502558a049df75b4313a60cf57c885aa6/src%2Ftest%2Fui%2Fattributes%2Funnamed-field-attributes-vis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eee955502558a049df75b4313a60cf57c885aa6/src%2Ftest%2Fui%2Fattributes%2Funnamed-field-attributes-vis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funnamed-field-attributes-vis.rs?ref=4eee955502558a049df75b4313a60cf57c885aa6", "patch": "@@ -0,0 +1,11 @@\n+// Unnamed fields don't lose their visibility due to non-builtin attributes on them.\n+\n+// check-pass\n+\n+mod m {\n+    pub struct S(#[rustfmt::skip] pub u8);\n+}\n+\n+fn main() {\n+    m::S(0);\n+}"}]}