{"sha": "e5221f93977922090b0370aff1efdbf5c2d12f6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MjIxZjkzOTc3OTIyMDkwYjAzNzBhZmYxZWZkYmY1YzJkMTJmNmQ=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-20T00:51:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-20T00:51:06Z"}, "message": "Rollup merge of #40241 - Sawyer47:fix-39997, r=alexcrichton\n\nChange how the `0` flag works in format!\n\nNow it always implies right-alignment, so that padding zeroes are placed after the sign (if any) and before the digits. In other words, it always takes precedence over explicitly specified `[[fill]align]`. This also affects the '#' flag: zeroes are placed after the prefix (0b, 0o, 0x) and before the digits.\n\nHere's a short summary of how similar format strings work in Python and Rust:\n\n```\n              :05     :<05    :>05    :^05\nPython 3.6  |-0001| |-1000| |000-1| |0-100|\nRust before |-0001| |-1000| |-0001| |-0100|\nRust after  |-0001| |-0001| |-0001| |-0001|\n\n             :#05x   :<#05x  :>#05x  :^#05x\nPython 3.6  |0x001| |0x100| |000x1| |00x10|\nRust before |0x001| |0x100| |000x1| |0x010|\nRust after  |0x001| |0x001| |0x001| |0x001|\n```\n\nFixes #39997 [breaking-change]", "tree": {"sha": "353e8ce406ecf31f1ab5c42ef7548c238bbaf941", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/353e8ce406ecf31f1ab5c42ef7548c238bbaf941"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5221f93977922090b0370aff1efdbf5c2d12f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5221f93977922090b0370aff1efdbf5c2d12f6d", "html_url": "https://github.com/rust-lang/rust/commit/e5221f93977922090b0370aff1efdbf5c2d12f6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5221f93977922090b0370aff1efdbf5c2d12f6d/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eb9960d3603aadab62b8f0877e87c63f67001d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb9960d3603aadab62b8f0877e87c63f67001d6", "html_url": "https://github.com/rust-lang/rust/commit/6eb9960d3603aadab62b8f0877e87c63f67001d6"}, {"sha": "80654862831e27f249f05bcb50552510f1b5f643", "url": "https://api.github.com/repos/rust-lang/rust/commits/80654862831e27f249f05bcb50552510f1b5f643", "html_url": "https://github.com/rust-lang/rust/commit/80654862831e27f249f05bcb50552510f1b5f643"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "62a88164621913fd494c67488ce5f1c720dada64", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5221f93977922090b0370aff1efdbf5c2d12f6d/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5221f93977922090b0370aff1efdbf5c2d12f6d/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=e5221f93977922090b0370aff1efdbf5c2d12f6d", "patch": "@@ -367,6 +367,10 @@\n //!         like `{:08}` would yield `00000001` for the integer `1`, while the\n //!         same format would yield `-0000001` for the integer `-1`. Notice that\n //!         the negative version has one fewer zero than the positive version.\n+//!         Note that padding zeroes are always placed after the sign (if any)\n+//!         and before the digits. When used together with the `#` flag, a similar\n+//!         rule applies: padding zeroes are inserted after the prefix but before\n+//!         the digits.\n //!\n //! ## Width\n //!"}, {"sha": "0bfab92fa5d5180270491af1fb3e8320b9587da0", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5221f93977922090b0370aff1efdbf5c2d12f6d/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5221f93977922090b0370aff1efdbf5c2d12f6d/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e5221f93977922090b0370aff1efdbf5c2d12f6d", "patch": "@@ -1045,6 +1045,7 @@ impl<'a> Formatter<'a> {\n             // is zero\n             Some(min) if self.sign_aware_zero_pad() => {\n                 self.fill = '0';\n+                self.align = rt::v1::Alignment::Right;\n                 write_prefix(self)?;\n                 self.with_padding(min - width, rt::v1::Alignment::Right, |f| {\n                     f.buf.write_str(buf)\n@@ -1153,8 +1154,9 @@ impl<'a> Formatter<'a> {\n             // for the sign-aware zero padding, we render the sign first and\n             // behave as if we had no sign from the beginning.\n             let mut formatted = formatted.clone();\n-            let mut align = self.align;\n             let old_fill = self.fill;\n+            let old_align = self.align;\n+            let mut align = old_align;\n             if self.sign_aware_zero_pad() {\n                 // a sign always goes first\n                 let sign = unsafe { str::from_utf8_unchecked(formatted.sign) };\n@@ -1165,6 +1167,7 @@ impl<'a> Formatter<'a> {\n                 width = if width < sign.len() { 0 } else { width - sign.len() };\n                 align = rt::v1::Alignment::Right;\n                 self.fill = '0';\n+                self.align = rt::v1::Alignment::Right;\n             }\n \n             // remaining parts go through the ordinary padding process.\n@@ -1177,6 +1180,7 @@ impl<'a> Formatter<'a> {\n                 })\n             };\n             self.fill = old_fill;\n+            self.align = old_align;\n             ret\n         } else {\n             // this is the common case and we take a shortcut"}, {"sha": "cef2f879f9cd74bc69c1209713fdda0ab1a4f48a", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e5221f93977922090b0370aff1efdbf5c2d12f6d/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5221f93977922090b0370aff1efdbf5c2d12f6d/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=e5221f93977922090b0370aff1efdbf5c2d12f6d", "patch": "@@ -160,6 +160,34 @@ pub fn main() {\n     t!(format!(\"{:?}\", -0.0), \"-0\");\n     t!(format!(\"{:?}\", 0.0), \"0\");\n \n+    // sign aware zero padding\n+    t!(format!(\"{:<3}\", 1), \"1  \");\n+    t!(format!(\"{:>3}\", 1), \"  1\");\n+    t!(format!(\"{:^3}\", 1), \" 1 \");\n+    t!(format!(\"{:03}\", 1), \"001\");\n+    t!(format!(\"{:<03}\", 1), \"001\");\n+    t!(format!(\"{:>03}\", 1), \"001\");\n+    t!(format!(\"{:^03}\", 1), \"001\");\n+    t!(format!(\"{:+03}\", 1), \"+01\");\n+    t!(format!(\"{:<+03}\", 1), \"+01\");\n+    t!(format!(\"{:>+03}\", 1), \"+01\");\n+    t!(format!(\"{:^+03}\", 1), \"+01\");\n+    t!(format!(\"{:#05x}\", 1), \"0x001\");\n+    t!(format!(\"{:<#05x}\", 1), \"0x001\");\n+    t!(format!(\"{:>#05x}\", 1), \"0x001\");\n+    t!(format!(\"{:^#05x}\", 1), \"0x001\");\n+    t!(format!(\"{:05}\", 1.2), \"001.2\");\n+    t!(format!(\"{:<05}\", 1.2), \"001.2\");\n+    t!(format!(\"{:>05}\", 1.2), \"001.2\");\n+    t!(format!(\"{:^05}\", 1.2), \"001.2\");\n+    t!(format!(\"{:05}\", -1.2), \"-01.2\");\n+    t!(format!(\"{:<05}\", -1.2), \"-01.2\");\n+    t!(format!(\"{:>05}\", -1.2), \"-01.2\");\n+    t!(format!(\"{:^05}\", -1.2), \"-01.2\");\n+    t!(format!(\"{:+05}\", 1.2), \"+01.2\");\n+    t!(format!(\"{:<+05}\", 1.2), \"+01.2\");\n+    t!(format!(\"{:>+05}\", 1.2), \"+01.2\");\n+    t!(format!(\"{:^+05}\", 1.2), \"+01.2\");\n \n     // Ergonomic format_args!\n     t!(format!(\"{0:x} {0:X}\", 15), \"f F\");"}]}