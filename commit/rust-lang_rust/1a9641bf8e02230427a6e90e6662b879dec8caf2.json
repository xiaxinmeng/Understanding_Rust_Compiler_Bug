{"sha": "1a9641bf8e02230427a6e90e6662b879dec8caf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhOTY0MWJmOGUwMjIzMDQyN2E2ZTkwZTY2NjJiODc5ZGVjOGNhZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-19T04:31:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-19T04:31:47Z"}, "message": "auto merge of #11567 : divtxt/rust/master, r=cmr\n\nI found the boxes diagram in the tutorial misleading about how the enum worked.\r\n\r\nThe current diagram makes it seem that there is a separate Cons struct when there is only one type of struct for the  List type, and Nil is drawn almost as if it's not consuming memory.\r\n\r\nI'm aware of the optimization that happens for this enum which takes advantage of the fact that pointer cannot be null but this is an implementation detail and not the only one that applies here.  I can add a note below the diagram mentioning this if you like.", "tree": {"sha": "24eb5905fbfb7852d53d2d11a11ea4ed8880f03d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24eb5905fbfb7852d53d2d11a11ea4ed8880f03d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a9641bf8e02230427a6e90e6662b879dec8caf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a9641bf8e02230427a6e90e6662b879dec8caf2", "html_url": "https://github.com/rust-lang/rust/commit/1a9641bf8e02230427a6e90e6662b879dec8caf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a9641bf8e02230427a6e90e6662b879dec8caf2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbce62c6bbcb58e19e467f7aa4e15fc5628926d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbce62c6bbcb58e19e467f7aa4e15fc5628926d3", "html_url": "https://github.com/rust-lang/rust/commit/dbce62c6bbcb58e19e467f7aa4e15fc5628926d3"}, {"sha": "8f93d39c75ef7964ea1dfb5cd8155dd29e61b76b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f93d39c75ef7964ea1dfb5cd8155dd29e61b76b", "html_url": "https://github.com/rust-lang/rust/commit/8f93d39c75ef7964ea1dfb5cd8155dd29e61b76b"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "057944484bae9872d8395fd71810fa542b8aaa12", "filename": "doc/tutorial.md", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a9641bf8e02230427a6e90e6662b879dec8caf2/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a9641bf8e02230427a6e90e6662b879dec8caf2/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=1a9641bf8e02230427a6e90e6662b879dec8caf2", "patch": "@@ -1020,10 +1020,15 @@ being destroyed along with the owner. Since the `list` variable above is\n immutable, the whole list is immutable. The memory allocation itself is the\n box, while the owner holds onto a pointer to it:\n \n-      Cons cell        Cons cell        Cons cell\n-    +-----------+    +-----+-----+    +-----+-----+\n-    |  1  |  ~  | -> |  2  |  ~  | -> |  3  |  ~  | -> Nil\n-    +-----------+    +-----+-----+    +-----+-----+\n+              List box             List box           List box            List box\n+            +--------------+    +--------------+    +--------------+    +--------------+\n+    list -> | Cons | 1 | ~ | -> | Cons | 2 | ~ | -> | Cons | 3 | ~ | -> | Nil          |\n+            +--------------+    +--------------+    +--------------+    +--------------+\n+\n+> Note: the above diagram shows the logical contents of the enum. The actual\n+> memory layout of the enum may vary. For example, for the `List` enum shown\n+> above, Rust guarantees that there will be no enum tag field in the actual\n+> structure. See the language reference for more details.\n \n An owned box is a common example of a type with a destructor. The allocated\n memory is cleaned up when the box is destroyed."}]}