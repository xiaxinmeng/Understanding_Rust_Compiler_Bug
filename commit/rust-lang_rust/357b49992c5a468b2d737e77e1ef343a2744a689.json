{"sha": "357b49992c5a468b2d737e77e1ef343a2744a689", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1N2I0OTk5MmM1YTQ2OGIyZDczN2U3N2UxZWYzNDNhMjc0NGE2ODk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-11T13:06:36Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-22T23:29:29Z"}, "message": "let_chains: Add tests for places where let expressions aren't allowed.", "tree": {"sha": "abc3117a2f37426a427193fe7d6ba02cbd137853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abc3117a2f37426a427193fe7d6ba02cbd137853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/357b49992c5a468b2d737e77e1ef343a2744a689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/357b49992c5a468b2d737e77e1ef343a2744a689", "html_url": "https://github.com/rust-lang/rust/commit/357b49992c5a468b2d737e77e1ef343a2744a689", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/357b49992c5a468b2d737e77e1ef343a2744a689/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebea1c2cc0088353d92e65d34fcae2799b50a20f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebea1c2cc0088353d92e65d34fcae2799b50a20f", "html_url": "https://github.com/rust-lang/rust/commit/ebea1c2cc0088353d92e65d34fcae2799b50a20f"}], "stats": {"total": 635, "additions": 635, "deletions": 0}, "files": [{"sha": "d871f2fad235827f6f558dd108cf505274c5fb81", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/357b49992c5a468b2d737e77e1ef343a2744a689/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357b49992c5a468b2d737e77e1ef343a2744a689/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs?ref=357b49992c5a468b2d737e77e1ef343a2744a689", "patch": "@@ -0,0 +1,159 @@\n+// Here we test that `ast_validation` behaves correctly wrt. `let $pats = $expr` expressions.\n+//\n+// We want to make sure that `let` is banned in situations other than:\n+//\n+// expr =\n+//   | ...\n+//   | \"if\" expr_with_let block {\"else\" block}?\n+//   | {label \":\"}? while\" expr_with_let block\n+//   ;\n+//\n+// expr_with_let =\n+//   | \"let\" top_pats \"=\" expr\n+//   | expr_with_let \"&&\" expr_with_let\n+//   | \"(\" expr_with_let \")\"\n+//   | expr\n+//   ;\n+//\n+// To that end, we check some positions which is not part of the language above.\n+\n+#![allow(irrefutable_let_patterns)]\n+\n+use std::ops::Range;\n+\n+fn main() {}\n+\n+fn nested_within_if_expr() {\n+    if &let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+    //~^ ERROR `let` expressions only supported in `if`\n+\n+    if !let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+    if *let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+    if -let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+\n+    fn _check_try_binds_tighter() -> Result<(), ()> {\n+        if let 0 = 0? {}\n+        Ok(())\n+    }\n+    if (let 0 = 0)? {} //~ ERROR `let` expressions are not supported here\n+\n+    if true || let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+    if (true || let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+    if true && (true || let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+    if true || (true && let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+\n+    let mut x = true;\n+    if x = let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+\n+    if true..(let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+    if ..(let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+    if (let 0 = 0).. {} //~ ERROR `let` expressions are not supported here\n+\n+    // Binds as `(let ... = true)..true &&/|| false`.\n+    if let Range { start: _, end: _ } = true..true && false {}\n+    //~^ ERROR `let` expressions are not supported here\n+    if let Range { start: _, end: _ } = true..true || false {}\n+    //~^ ERROR `let` expressions are not supported here\n+\n+    // Binds as `(let Range { start: F, end } = F)..(|| true)`.\n+    const F: fn() -> bool = || true;\n+    if let Range { start: F, end } = F..|| true {}\n+    //~^ ERROR `let` expressions are not supported here\n+\n+    // Binds as `(let Range { start: true, end } = t)..(&&false)`.\n+    let t = &&true;\n+    if let Range { start: true, end } = t..&&false {}\n+    //~^ ERROR `let` expressions are not supported here\n+\n+    if let true = let true = true {} //~ ERROR `let` expressions are not supported here\n+}\n+\n+fn nested_within_while_expr() {\n+    while &let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+\n+    while !let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+    while *let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+    while -let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+\n+    fn _check_try_binds_tighter() -> Result<(), ()> {\n+        while let 0 = 0? {}\n+        Ok(())\n+    }\n+    while (let 0 = 0)? {} //~ ERROR `let` expressions are not supported here\n+\n+    while true || let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+    while (true || let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+    while true && (true || let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+    while true || (true && let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+\n+    let mut x = true;\n+    while x = let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n+\n+    while true..(let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+    while ..(let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+    while (let 0 = 0).. {} //~ ERROR `let` expressions are not supported here\n+\n+    // Binds as `(let ... = true)..true &&/|| false`.\n+    while let Range { start: _, end: _ } = true..true && false {}\n+    //~^ ERROR `let` expressions are not supported here\n+    while let Range { start: _, end: _ } = true..true || false {}\n+    //~^ ERROR `let` expressions are not supported here\n+\n+    // Binds as `(let Range { start: F, end } = F)..(|| true)`.\n+    const F: fn() -> bool = || true;\n+    while let Range { start: F, end } = F..|| true {}\n+    //~^ ERROR `let` expressions are not supported here\n+\n+    // Binds as `(let Range { start: true, end } = t)..(&&false)`.\n+    let t = &&true;\n+    while let Range { start: true, end } = t..&&false {}\n+    //~^ ERROR `let` expressions are not supported here\n+\n+    while let true = let true = true {} //~ ERROR `let` expressions are not supported here\n+}\n+\n+fn not_error_because_clarified_intent() {\n+    if let Range { start: _, end: _ } = (true..true || false) { }\n+\n+    if let Range { start: _, end: _ } = (true..true && false) { }\n+\n+    while let Range { start: _, end: _ } = (true..true || false) { }\n+\n+    while let Range { start: _, end: _ } = (true..true && false) { }\n+}\n+\n+fn outside_if_and_while_expr() {\n+    &let 0 = 0; //~ ERROR `let` expressions are not supported here\n+\n+    !let 0 = 0; //~ ERROR `let` expressions are not supported here\n+    *let 0 = 0; //~ ERROR `let` expressions are not supported here\n+    -let 0 = 0; //~ ERROR `let` expressions are not supported here\n+\n+    fn _check_try_binds_tighter() -> Result<(), ()> {\n+        let 0 = 0?;\n+        Ok(())\n+    }\n+    (let 0 = 0)?; //~ ERROR `let` expressions are not supported here\n+\n+    true || let 0 = 0; //~ ERROR `let` expressions are not supported here\n+    (true || let 0 = 0); //~ ERROR `let` expressions are not supported here\n+    true && (true || let 0 = 0); //~ ERROR `let` expressions are not supported here\n+\n+    let mut x = true;\n+    x = let 0 = 0; //~ ERROR `let` expressions are not supported here\n+\n+    true..(let 0 = 0); //~ ERROR `let` expressions are not supported here\n+    ..(let 0 = 0); //~ ERROR `let` expressions are not supported here\n+    (let 0 = 0)..; //~ ERROR `let` expressions are not supported here\n+\n+    (let Range { start: _, end: _ } = true..true || false);\n+    //~^ ERROR `let` expressions are not supported here\n+\n+    (let true = let true = true);\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+\n+    // Check function tail position.\n+    &let 0 = 0\n+    //~^ ERROR `let` expressions are not supported here\n+}"}, {"sha": "18665e7933dd4fab8a6a4e383794edf5cb967465", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "added", "additions": 476, "deletions": 0, "changes": 476, "blob_url": "https://github.com/rust-lang/rust/blob/357b49992c5a468b2d737e77e1ef343a2744a689/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/357b49992c5a468b2d737e77e1ef343a2744a689/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=357b49992c5a468b2d737e77e1ef343a2744a689", "patch": "@@ -0,0 +1,476 @@\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:27:9\n+   |\n+LL |     if &let 0 = 0 {}\n+   |         ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:30:9\n+   |\n+LL |     if !let 0 = 0 {}\n+   |         ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:31:9\n+   |\n+LL |     if *let 0 = 0 {}\n+   |         ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:32:9\n+   |\n+LL |     if -let 0 = 0 {}\n+   |         ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:38:9\n+   |\n+LL |     if (let 0 = 0)? {}\n+   |         ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:40:16\n+   |\n+LL |     if true || let 0 = 0 {}\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:41:17\n+   |\n+LL |     if (true || let 0 = 0) {}\n+   |                 ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:42:25\n+   |\n+LL |     if true && (true || let 0 = 0) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:43:25\n+   |\n+LL |     if true || (true && let 0 = 0) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:46:12\n+   |\n+LL |     if x = let 0 = 0 {}\n+   |            ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:48:15\n+   |\n+LL |     if true..(let 0 = 0) {}\n+   |               ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:49:11\n+   |\n+LL |     if ..(let 0 = 0) {}\n+   |           ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:50:9\n+   |\n+LL |     if (let 0 = 0).. {}\n+   |         ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:53:8\n+   |\n+LL |     if let Range { start: _, end: _ } = true..true && false {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:55:8\n+   |\n+LL |     if let Range { start: _, end: _ } = true..true || false {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:60:8\n+   |\n+LL |     if let Range { start: F, end } = F..|| true {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:65:8\n+   |\n+LL |     if let Range { start: true, end } = t..&&false {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:68:19\n+   |\n+LL |     if let true = let true = true {}\n+   |                   ^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:72:12\n+   |\n+LL |     while &let 0 = 0 {}\n+   |            ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:74:12\n+   |\n+LL |     while !let 0 = 0 {}\n+   |            ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:75:12\n+   |\n+LL |     while *let 0 = 0 {}\n+   |            ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:76:12\n+   |\n+LL |     while -let 0 = 0 {}\n+   |            ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:82:12\n+   |\n+LL |     while (let 0 = 0)? {}\n+   |            ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:84:19\n+   |\n+LL |     while true || let 0 = 0 {}\n+   |                   ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:85:20\n+   |\n+LL |     while (true || let 0 = 0) {}\n+   |                    ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:86:28\n+   |\n+LL |     while true && (true || let 0 = 0) {}\n+   |                            ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:87:28\n+   |\n+LL |     while true || (true && let 0 = 0) {}\n+   |                            ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:90:15\n+   |\n+LL |     while x = let 0 = 0 {}\n+   |               ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:92:18\n+   |\n+LL |     while true..(let 0 = 0) {}\n+   |                  ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:93:14\n+   |\n+LL |     while ..(let 0 = 0) {}\n+   |              ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:94:12\n+   |\n+LL |     while (let 0 = 0).. {}\n+   |            ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:97:11\n+   |\n+LL |     while let Range { start: _, end: _ } = true..true && false {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:99:11\n+   |\n+LL |     while let Range { start: _, end: _ } = true..true || false {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:104:11\n+   |\n+LL |     while let Range { start: F, end } = F..|| true {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:109:11\n+   |\n+LL |     while let Range { start: true, end } = t..&&false {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:112:22\n+   |\n+LL |     while let true = let true = true {}\n+   |                      ^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:126:6\n+   |\n+LL |     &let 0 = 0;\n+   |      ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:128:6\n+   |\n+LL |     !let 0 = 0;\n+   |      ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:129:6\n+   |\n+LL |     *let 0 = 0;\n+   |      ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:130:6\n+   |\n+LL |     -let 0 = 0;\n+   |      ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:136:6\n+   |\n+LL |     (let 0 = 0)?;\n+   |      ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:138:13\n+   |\n+LL |     true || let 0 = 0;\n+   |             ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:139:14\n+   |\n+LL |     (true || let 0 = 0);\n+   |              ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:140:22\n+   |\n+LL |     true && (true || let 0 = 0);\n+   |                      ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:143:9\n+   |\n+LL |     x = let 0 = 0;\n+   |         ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:145:12\n+   |\n+LL |     true..(let 0 = 0);\n+   |            ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:146:8\n+   |\n+LL |     ..(let 0 = 0);\n+   |        ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:147:6\n+   |\n+LL |     (let 0 = 0)..;\n+   |      ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:149:6\n+   |\n+LL |     (let Range { start: _, end: _ } = true..true || false);\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:152:6\n+   |\n+LL |     (let true = let true = true);\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:152:17\n+   |\n+LL |     (let true = let true = true);\n+   |                 ^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:157:6\n+   |\n+LL |     &let 0 = 0\n+   |      ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions only supported in `if`\n+  --> $DIR/disallowed-positions.rs:27:9\n+   |\n+LL |     if &let 0 = 0 {}\n+   |         ^^^^^^^^^\n+\n+error: aborting due to 53 previous errors\n+"}]}