{"sha": "147b0f94e60f66c73ee1ca1726de97d76721bfda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0N2IwZjk0ZTYwZjY2YzczZWUxY2ExNzI2ZGU5N2Q3NjcyMWJmZGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-04T22:37:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-06T14:35:29Z"}, "message": "Start code_model::Module", "tree": {"sha": "7eca3e190d1de5b3c431585c8c554f03e7f26bb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7eca3e190d1de5b3c431585c8c554f03e7f26bb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/147b0f94e60f66c73ee1ca1726de97d76721bfda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/147b0f94e60f66c73ee1ca1726de97d76721bfda", "html_url": "https://github.com/rust-lang/rust/commit/147b0f94e60f66c73ee1ca1726de97d76721bfda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/147b0f94e60f66c73ee1ca1726de97d76721bfda/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a820dc0ee23051137e4909d4698fe71930c04bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a820dc0ee23051137e4909d4698fe71930c04bc", "html_url": "https://github.com/rust-lang/rust/commit/9a820dc0ee23051137e4909d4698fe71930c04bc"}], "stats": {"total": 90, "additions": 83, "deletions": 7}, "files": [{"sha": "63e2e34e83c03a0040aacd118b79c53e602a538d", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/147b0f94e60f66c73ee1ca1726de97d76721bfda/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147b0f94e60f66c73ee1ca1726de97d76721bfda/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=147b0f94e60f66c73ee1ca1726de97d76721bfda", "patch": "@@ -1,6 +1,6 @@\n use ra_db::{CrateId, Cancelable};\n \n-use crate::{Module, Name, db::HirDatabase};\n+use crate::{Name, db::HirDatabase, DefId};\n \n /// hir::Crate describes a single crate. It's the main inteface with which\n /// crate's dependencies interact. Mostly, it should be just a proxy for the\n@@ -24,3 +24,24 @@ impl Crate {\n         self.root_module_impl(db)\n     }\n }\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Module {\n+    pub(crate) def_id: DefId,\n+}\n+\n+impl Module {\n+    /// Returns the crate this module is part of.\n+    pub fn krate(&self, db: &impl HirDatabase) -> Cancelable<Option<Crate>> {\n+        self.krate_impl(db)\n+    }\n+\n+    pub fn crate_root(&self, db: &impl HirDatabase) -> Cancelable<Module> {\n+        self.crate_root_impl(db)\n+    }\n+\n+    /// Finds a child module with the specified name.\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        self.child_impl(db, name)\n+    }\n+}"}, {"sha": "22079ba3348ef6a3d6649f0bc6b6d1f8846da986", "filename": "crates/ra_hir/src/code_model_impl.rs", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/147b0f94e60f66c73ee1ca1726de97d76721bfda/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147b0f94e60f66c73ee1ca1726de97d76721bfda/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs?ref=147b0f94e60f66c73ee1ca1726de97d76721bfda", "patch": "@@ -1,6 +1,9 @@\n use ra_db::{CrateId, Cancelable};\n \n-use crate::{Module, HirFileId, db::HirDatabase, Crate, CrateDependency, AsName};\n+use crate::{HirFileId, db::HirDatabase, Crate, CrateDependency, AsName, DefId, DefLoc, DefKind, Name};\n+\n+use crate::code_model_api::Module;\n+\n \n impl Crate {\n     pub(crate) fn new(crate_id: CrateId) -> Crate {\n@@ -28,7 +31,59 @@ impl Crate {\n             .modules_with_sources()\n             .find(|(_, src)| src.file_id() == file_id));\n \n-        let module = Module::new(db, source_root_id, module_id)?;\n+        let def_loc = DefLoc {\n+            kind: DefKind::Module,\n+            source_root_id,\n+            module_id,\n+            source_item_id: module_id.source(&module_tree).0,\n+        };\n+        let def_id = def_loc.id(db);\n+\n+        let module = Module::new(def_id);\n+        Ok(Some(module))\n+    }\n+}\n+\n+impl Module {\n+    fn new(def_id: DefId) -> Self {\n+        crate::code_model_api::Module { def_id }\n+    }\n+\n+    pub(crate) fn krate_impl(&self, db: &impl HirDatabase) -> Cancelable<Option<Crate>> {\n+        let root = self.crate_root(db)?;\n+        let loc = root.def_id.loc(db);\n+        let file_id = loc.source_item_id.file_id.as_original_file();\n+\n+        let crate_graph = db.crate_graph();\n+        let crate_id = ctry!(crate_graph.crate_id_for_crate_root(file_id));\n+        Ok(Some(Crate::new(crate_id)))\n+    }\n+\n+    pub(crate) fn crate_root_impl(&self, db: &impl HirDatabase) -> Cancelable<Module> {\n+        let loc = self.def_id.loc(db);\n+        let module_tree = db.module_tree(loc.source_root_id)?;\n+        let module_id = loc.module_id.crate_root(&module_tree);\n+        let def_loc = DefLoc {\n+            module_id,\n+            source_item_id: module_id.source(&module_tree).0,\n+            ..loc\n+        };\n+        let def_id = def_loc.id(db);\n+        let module = Module::new(def_id);\n+        Ok(module)\n+    }\n+    /// Finds a child module with the specified name.\n+    pub fn child_impl(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        let loc = self.def_id.loc(db);\n+        let module_tree = db.module_tree(loc.source_root_id)?;\n+        let child_id = ctry!(loc.module_id.child(&module_tree, name));\n+        let def_loc = DefLoc {\n+            module_id: child_id,\n+            source_item_id: child_id.source(&module_tree).0,\n+            ..loc\n+        };\n+        let def_id = def_loc.id(db);\n+        let module = Module::new(def_id);\n         Ok(Some(module))\n     }\n }"}, {"sha": "f0b673908f83d205a4c7eac5c77557303b643585", "filename": "crates/ra_hir/src/module.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/147b0f94e60f66c73ee1ca1726de97d76721bfda/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147b0f94e60f66c73ee1ca1726de97d76721bfda/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule.rs?ref=147b0f94e60f66c73ee1ca1726de97d76721bfda", "patch": "@@ -224,7 +224,7 @@ impl ModuleTree {\n /// `ModuleSource` is the syntax tree element that produced this module:\n /// either a file, or an inlinde module.\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub struct ModuleSource(SourceItemId);\n+pub struct ModuleSource(pub(crate) SourceItemId);\n \n /// An owned syntax node for a module. Unlike `ModuleSource`,\n /// this holds onto the AST for the whole file.\n@@ -255,12 +255,12 @@ impl ModuleId {\n         let link = self.parent_link(tree)?;\n         Some(tree.links[link].owner)\n     }\n-    fn crate_root(self, tree: &ModuleTree) -> ModuleId {\n+    pub(crate) fn crate_root(self, tree: &ModuleTree) -> ModuleId {\n         generate(Some(self), move |it| it.parent(tree))\n             .last()\n             .unwrap()\n     }\n-    fn child(self, tree: &ModuleTree, name: &Name) -> Option<ModuleId> {\n+    pub(crate) fn child(self, tree: &ModuleTree, name: &Name) -> Option<ModuleId> {\n         let link = tree.mods[self]\n             .children\n             .iter()"}, {"sha": "cd634e42f9626446a14f68bb8f0d262785c337bd", "filename": "crates/ra_hir/src/module/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147b0f94e60f66c73ee1ca1726de97d76721bfda/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147b0f94e60f66c73ee1ca1726de97d76721bfda/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs?ref=147b0f94e60f66c73ee1ca1726de97d76721bfda", "patch": "@@ -346,7 +346,7 @@ where\n                 let krate = Crate::new(crate_id);\n                 for dep in krate.dependencies(self.db) {\n                     if let Some(module) = dep.krate.root_module(self.db)? {\n-                        let def_id = module.def_id(self.db);\n+                        let def_id = module.def_id;\n                         self.add_module_item(\n                             &mut module_items,\n                             dep.name.clone(),"}]}