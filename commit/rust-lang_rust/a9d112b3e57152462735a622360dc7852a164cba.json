{"sha": "a9d112b3e57152462735a622360dc7852a164cba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZDExMmIzZTU3MTUyNDYyNzM1YTYyMjM2MGRjNzg1MmExNjRjYmE=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-06-12T09:19:55Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-07-09T22:50:20Z"}, "message": "libcollections: Use iterators instead of old-style loops.", "tree": {"sha": "631db75203ed0b503d1658f245d51a6971ffa19b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/631db75203ed0b503d1658f245d51a6971ffa19b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9d112b3e57152462735a622360dc7852a164cba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d112b3e57152462735a622360dc7852a164cba", "html_url": "https://github.com/rust-lang/rust/commit/a9d112b3e57152462735a622360dc7852a164cba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9d112b3e57152462735a622360dc7852a164cba/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1eb4ce029735c33431d87dbda965ac711d173987", "url": "https://api.github.com/repos/rust-lang/rust/commits/1eb4ce029735c33431d87dbda965ac711d173987", "html_url": "https://github.com/rust-lang/rust/commit/1eb4ce029735c33431d87dbda965ac711d173987"}], "stats": {"total": 52, "additions": 14, "deletions": 38}, "files": [{"sha": "23be65cc4e21e8077fdc899e2b762cd6119b142b", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 10, "deletions": 34, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a9d112b3e57152462735a622360dc7852a164cba/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d112b3e57152462735a622360dc7852a164cba/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=a9d112b3e57152462735a622360dc7852a164cba", "patch": "@@ -1426,18 +1426,14 @@ mod tests {\n     fn test_small_clear() {\n         let mut b = Bitv::with_capacity(14, true);\n         b.clear();\n-        BitvSet::from_bitv(b).iter().advance(|i| {\n-            fail!(\"found 1 at {:?}\", i)\n-        });\n+        assert!(b.none());\n     }\n \n     #[test]\n     fn test_big_clear() {\n         let mut b = Bitv::with_capacity(140, true);\n         b.clear();\n-        BitvSet::from_bitv(b).iter().advance(|i| {\n-            fail!(\"found 1 at {:?}\", i)\n-        });\n+        assert!(b.none());\n     }\n \n     #[test]\n@@ -1494,14 +1490,9 @@ mod tests {\n         assert!(b.insert(5));\n         assert!(b.insert(3));\n \n-        let mut i = 0;\n         let expected = [3, 5, 11, 77];\n-        a.intersection(&b).advance(|x| {\n-            assert_eq!(x, expected[i]);\n-            i += 1;\n-            true\n-        });\n-        assert_eq!(i, expected.len());\n+        let actual = a.intersection(&b).collect::<Vec<uint>>();\n+        assert_eq!(actual.as_slice(), expected.as_slice());\n     }\n \n     #[test]\n@@ -1518,14 +1509,9 @@ mod tests {\n         assert!(b.insert(3));\n         assert!(b.insert(200));\n \n-        let mut i = 0;\n         let expected = [1, 5, 500];\n-        a.difference(&b).advance(|x| {\n-            assert_eq!(x, expected[i]);\n-            i += 1;\n-            true\n-        });\n-        assert_eq!(i, expected.len());\n+        let actual = a.difference(&b).collect::<Vec<uint>>();\n+        assert_eq!(actual.as_slice(), expected.as_slice());\n     }\n \n     #[test]\n@@ -1544,14 +1530,9 @@ mod tests {\n         assert!(b.insert(14));\n         assert!(b.insert(220));\n \n-        let mut i = 0;\n         let expected = [1, 5, 11, 14, 220];\n-        a.symmetric_difference(&b).advance(|x| {\n-            assert_eq!(x, expected[i]);\n-            i += 1;\n-            true\n-        });\n-        assert_eq!(i, expected.len());\n+        let actual = a.symmetric_difference(&b).collect::<Vec<uint>>();\n+        assert_eq!(actual.as_slice(), expected.as_slice());\n     }\n \n     #[test]\n@@ -1573,14 +1554,9 @@ mod tests {\n         assert!(b.insert(13));\n         assert!(b.insert(19));\n \n-        let mut i = 0;\n         let expected = [1, 3, 5, 9, 11, 13, 19, 24, 160];\n-        a.union(&b).advance(|x| {\n-            assert_eq!(x, expected[i]);\n-            i += 1;\n-            true\n-        });\n-        assert_eq!(i, expected.len());\n+        let actual = a.union(&b).collect::<Vec<uint>>();\n+        assert_eq!(actual.as_slice(), expected.as_slice());\n     }\n \n     #[test]"}, {"sha": "1451bf9d7c7bcedd84b306f518d5494af50286e0", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9d112b3e57152462735a622360dc7852a164cba/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d112b3e57152462735a622360dc7852a164cba/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=a9d112b3e57152462735a622360dc7852a164cba", "patch": "@@ -1770,7 +1770,7 @@ mod test_set {\n     #[test]\n     fn test_intersection() {\n         fn check_intersection(a: &[int], b: &[int], expected: &[int]) {\n-            check(a, b, expected, |x, y, f| x.intersection(y).advance(f))\n+            check(a, b, expected, |x, y, f| x.intersection(y).all(f))\n         }\n \n         check_intersection([], [], []);\n@@ -1786,7 +1786,7 @@ mod test_set {\n     #[test]\n     fn test_difference() {\n         fn check_difference(a: &[int], b: &[int], expected: &[int]) {\n-            check(a, b, expected, |x, y, f| x.difference(y).advance(f))\n+            check(a, b, expected, |x, y, f| x.difference(y).all(f))\n         }\n \n         check_difference([], [], []);\n@@ -1804,7 +1804,7 @@ mod test_set {\n     fn test_symmetric_difference() {\n         fn check_symmetric_difference(a: &[int], b: &[int],\n                                       expected: &[int]) {\n-            check(a, b, expected, |x, y, f| x.symmetric_difference(y).advance(f))\n+            check(a, b, expected, |x, y, f| x.symmetric_difference(y).all(f))\n         }\n \n         check_symmetric_difference([], [], []);\n@@ -1819,7 +1819,7 @@ mod test_set {\n     fn test_union() {\n         fn check_union(a: &[int], b: &[int],\n                                       expected: &[int]) {\n-            check(a, b, expected, |x, y, f| x.union(y).advance(f))\n+            check(a, b, expected, |x, y, f| x.union(y).all(f))\n         }\n \n         check_union([], [], []);"}]}