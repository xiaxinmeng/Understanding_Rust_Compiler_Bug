{"sha": "17284baceeb24dd8e8e7cefa36df1fcf4a6196b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3Mjg0YmFjZWViMjRkZDhlOGU3Y2VmYTM2ZGYxZmNmNGE2MTk2YjQ=", "commit": {"author": {"name": "Luis de Bethencourt", "email": "luisbg@osg.samsung.com", "date": "2017-05-10T15:25:40Z"}, "committer": {"name": "Luis de Bethencourt", "email": "luisbg@osg.samsung.com", "date": "2017-05-11T15:22:32Z"}, "message": "clean tests/ui/cast.rs\n\nCleaning the empty lines for clarity.", "tree": {"sha": "8c60c8ff732f3280bf0d8166bc6c9b962a446bfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c60c8ff732f3280bf0d8166bc6c9b962a446bfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17284baceeb24dd8e8e7cefa36df1fcf4a6196b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17284baceeb24dd8e8e7cefa36df1fcf4a6196b4", "html_url": "https://github.com/rust-lang/rust/commit/17284baceeb24dd8e8e7cefa36df1fcf4a6196b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17284baceeb24dd8e8e7cefa36df1fcf4a6196b4/comments", "author": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34e4c0f9e35e8f18bfe7adac2f01634ed00ad1a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/34e4c0f9e35e8f18bfe7adac2f01634ed00ad1a9", "html_url": "https://github.com/rust-lang/rust/commit/34e4c0f9e35e8f18bfe7adac2f01634ed00ad1a9"}], "stats": {"total": 169, "additions": 78, "deletions": 91}, "files": [{"sha": "19c984818730db2be71fdfd8a7ad6da249ac2229", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/17284baceeb24dd8e8e7cefa36df1fcf4a6196b4/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17284baceeb24dd8e8e7cefa36df1fcf4a6196b4/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=17284baceeb24dd8e8e7cefa36df1fcf4a6196b4", "patch": "@@ -13,30 +13,23 @@ fn main() {\n     1u64 as f64;\n     1i32 as f64; // Should not trigger the lint\n     1u32 as f64; // Should not trigger the lint\n-\n     // Test cast_possible_truncation\n     1f32 as i32;\n     1f32 as u32;\n-\n     1f64 as f32;\n     1i32 as i8;\n     1i32 as u8;\n-\n     1f64 as isize;\n     1f64 as usize;\n-\n-\n     // Test cast_possible_wrap\n     1u8 as i8;\n     1u16 as i16;\n     1u32 as i32;\n     1u64 as i64;\n     1usize as isize;\n-\n     // Test cast_sign_loss\n     1i32 as u32;\n     1isize as usize;\n-\n     // Extra checks for *size\n     // Casting from *size\n     1isize as i8;\n@@ -46,28 +39,22 @@ fn main() {\n     1usize as f32;\n     1isize as i32;\n     1isize as u32;\n-\n     1usize as u32;\n     1usize as i32;\n-\n     // Casting to *size\n     1i64 as isize;\n     1i64 as usize;\n-\n     1u64 as isize;\n-\n     1u64 as usize;\n     1u32 as isize;\n     1u32 as usize; // Should not trigger any lint\n     1i32 as isize; // Neither should this\n     1i32 as usize;\n-\n     // Test cast_unnecessary\n     1i32 as i32;\n     1f32 as f32;\n     false as bool;\n     &1i32 as &i32;\n-\n     // Should not trigger\n     1i32 as i64;\n     let v = vec!(1);"}, {"sha": "e9fd694d121359f3ce4b52ab5c6aed7f51d3c63c", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 78, "deletions": 78, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/17284baceeb24dd8e8e7cefa36df1fcf4a6196b4/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17284baceeb24dd8e8e7cefa36df1fcf4a6196b4/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=17284baceeb24dd8e8e7cefa36df1fcf4a6196b4", "patch": "@@ -41,9 +41,9 @@ error: casting u64 to f64 causes a loss of precision (u64 is 64 bits wide, but f\n    |     ^^^^^^^^^^^\n \n error: casting f32 to i32 may truncate the value\n-  --> $DIR/cast.rs:18:5\n+  --> $DIR/cast.rs:17:5\n    |\n-18 |     1f32 as i32;\n+17 |     1f32 as i32;\n    |     ^^^^^^^^^^^\n    |\n note: lint level defined here\n@@ -53,15 +53,15 @@ note: lint level defined here\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: casting f32 to u32 may truncate the value\n-  --> $DIR/cast.rs:19:5\n+  --> $DIR/cast.rs:18:5\n    |\n-19 |     1f32 as u32;\n+18 |     1f32 as u32;\n    |     ^^^^^^^^^^^\n \n error: casting f32 to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:19:5\n+  --> $DIR/cast.rs:18:5\n    |\n-19 |     1f32 as u32;\n+18 |     1f32 as u32;\n    |     ^^^^^^^^^^^\n    |\n note: lint level defined here\n@@ -71,51 +71,51 @@ note: lint level defined here\n    |                                                       ^^^^^^^^^^^^^^\n \n error: casting f64 to f32 may truncate the value\n-  --> $DIR/cast.rs:21:5\n+  --> $DIR/cast.rs:19:5\n    |\n-21 |     1f64 as f32;\n+19 |     1f64 as f32;\n    |     ^^^^^^^^^^^\n \n error: casting i32 to i8 may truncate the value\n-  --> $DIR/cast.rs:22:5\n+  --> $DIR/cast.rs:20:5\n    |\n-22 |     1i32 as i8;\n+20 |     1i32 as i8;\n    |     ^^^^^^^^^^\n \n error: casting i32 to u8 may lose the sign of the value\n-  --> $DIR/cast.rs:23:5\n+  --> $DIR/cast.rs:21:5\n    |\n-23 |     1i32 as u8;\n+21 |     1i32 as u8;\n    |     ^^^^^^^^^^\n \n error: casting i32 to u8 may truncate the value\n-  --> $DIR/cast.rs:23:5\n+  --> $DIR/cast.rs:21:5\n    |\n-23 |     1i32 as u8;\n+21 |     1i32 as u8;\n    |     ^^^^^^^^^^\n \n error: casting f64 to isize may truncate the value\n-  --> $DIR/cast.rs:25:5\n+  --> $DIR/cast.rs:22:5\n    |\n-25 |     1f64 as isize;\n+22 |     1f64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting f64 to usize may truncate the value\n-  --> $DIR/cast.rs:26:5\n+  --> $DIR/cast.rs:23:5\n    |\n-26 |     1f64 as usize;\n+23 |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting f64 to usize may lose the sign of the value\n-  --> $DIR/cast.rs:26:5\n+  --> $DIR/cast.rs:23:5\n    |\n-26 |     1f64 as usize;\n+23 |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u8 to i8 may wrap around the value\n-  --> $DIR/cast.rs:30:5\n+  --> $DIR/cast.rs:25:5\n    |\n-30 |     1u8 as i8;\n+25 |     1u8 as i8;\n    |     ^^^^^^^^^\n    |\n note: lint level defined here\n@@ -125,175 +125,175 @@ note: lint level defined here\n    |                                                                       ^^^^^^^^^^^^^^^^^^\n \n error: casting u16 to i16 may wrap around the value\n-  --> $DIR/cast.rs:31:5\n+  --> $DIR/cast.rs:26:5\n    |\n-31 |     1u16 as i16;\n+26 |     1u16 as i16;\n    |     ^^^^^^^^^^^\n \n error: casting u32 to i32 may wrap around the value\n-  --> $DIR/cast.rs:32:5\n+  --> $DIR/cast.rs:27:5\n    |\n-32 |     1u32 as i32;\n+27 |     1u32 as i32;\n    |     ^^^^^^^^^^^\n \n error: casting u64 to i64 may wrap around the value\n-  --> $DIR/cast.rs:33:5\n+  --> $DIR/cast.rs:28:5\n    |\n-33 |     1u64 as i64;\n+28 |     1u64 as i64;\n    |     ^^^^^^^^^^^\n \n error: casting usize to isize may wrap around the value\n-  --> $DIR/cast.rs:34:5\n+  --> $DIR/cast.rs:29:5\n    |\n-34 |     1usize as isize;\n+29 |     1usize as isize;\n    |     ^^^^^^^^^^^^^^^\n \n error: casting i32 to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:37:5\n+  --> $DIR/cast.rs:31:5\n    |\n-37 |     1i32 as u32;\n+31 |     1i32 as u32;\n    |     ^^^^^^^^^^^\n \n error: casting isize to usize may lose the sign of the value\n-  --> $DIR/cast.rs:38:5\n+  --> $DIR/cast.rs:32:5\n    |\n-38 |     1isize as usize;\n+32 |     1isize as usize;\n    |     ^^^^^^^^^^^^^^^\n \n error: casting isize to i8 may truncate the value\n-  --> $DIR/cast.rs:42:5\n+  --> $DIR/cast.rs:35:5\n    |\n-42 |     1isize as i8;\n+35 |     1isize as i8;\n    |     ^^^^^^^^^^^^\n \n error: casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:43:5\n+  --> $DIR/cast.rs:36:5\n    |\n-43 |     1isize as f64;\n+36 |     1isize as f64;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:44:5\n+  --> $DIR/cast.rs:37:5\n    |\n-44 |     1usize as f64;\n+37 |     1usize as f64;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:45:5\n+  --> $DIR/cast.rs:38:5\n    |\n-45 |     1isize as f32;\n+38 |     1isize as f32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:46:5\n+  --> $DIR/cast.rs:39:5\n    |\n-46 |     1usize as f32;\n+39 |     1usize as f32;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:47:5\n+  --> $DIR/cast.rs:40:5\n    |\n-47 |     1isize as i32;\n+40 |     1isize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:48:5\n+  --> $DIR/cast.rs:41:5\n    |\n-48 |     1isize as u32;\n+41 |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:48:5\n+  --> $DIR/cast.rs:41:5\n    |\n-48 |     1isize as u32;\n+41 |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:50:5\n+  --> $DIR/cast.rs:42:5\n    |\n-50 |     1usize as u32;\n+42 |     1usize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:51:5\n+  --> $DIR/cast.rs:43:5\n    |\n-51 |     1usize as i32;\n+43 |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:51:5\n+  --> $DIR/cast.rs:43:5\n    |\n-51 |     1usize as i32;\n+43 |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:54:5\n+  --> $DIR/cast.rs:45:5\n    |\n-54 |     1i64 as isize;\n+45 |     1i64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i64 to usize may lose the sign of the value\n-  --> $DIR/cast.rs:55:5\n+  --> $DIR/cast.rs:46:5\n    |\n-55 |     1i64 as usize;\n+46 |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:55:5\n+  --> $DIR/cast.rs:46:5\n    |\n-55 |     1i64 as usize;\n+46 |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:57:5\n+  --> $DIR/cast.rs:47:5\n    |\n-57 |     1u64 as isize;\n+47 |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:57:5\n+  --> $DIR/cast.rs:47:5\n    |\n-57 |     1u64 as isize;\n+47 |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:59:5\n+  --> $DIR/cast.rs:48:5\n    |\n-59 |     1u64 as usize;\n+48 |     1u64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:60:5\n+  --> $DIR/cast.rs:49:5\n    |\n-60 |     1u32 as isize;\n+49 |     1u32 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i32 to usize may lose the sign of the value\n-  --> $DIR/cast.rs:63:5\n+  --> $DIR/cast.rs:52:5\n    |\n-63 |     1i32 as usize;\n+52 |     1i32 as usize;\n    |     ^^^^^^^^^^^^^\n \n warning: casting to the same type is unnecessary (`i32` -> `i32`)\n-  --> $DIR/cast.rs:66:5\n+  --> $DIR/cast.rs:54:5\n    |\n-66 |     1i32 as i32;\n+54 |     1i32 as i32;\n    |     ^^^^^^^^^^^\n    |\n    = note: #[warn(unnecessary_cast)] on by default\n \n warning: casting to the same type is unnecessary (`f32` -> `f32`)\n-  --> $DIR/cast.rs:67:5\n+  --> $DIR/cast.rs:55:5\n    |\n-67 |     1f32 as f32;\n+55 |     1f32 as f32;\n    |     ^^^^^^^^^^^\n    |\n    = note: #[warn(unnecessary_cast)] on by default\n \n warning: casting to the same type is unnecessary (`bool` -> `bool`)\n-  --> $DIR/cast.rs:68:5\n+  --> $DIR/cast.rs:56:5\n    |\n-68 |     false as bool;\n+56 |     false as bool;\n    |     ^^^^^^^^^^^^^\n    |\n    = note: #[warn(unnecessary_cast)] on by default"}]}