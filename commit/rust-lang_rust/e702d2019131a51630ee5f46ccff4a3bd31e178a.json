{"sha": "e702d2019131a51630ee5f46ccff4a3bd31e178a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MDJkMjAxOTEzMWE1MTYzMGVlNWY0NmNjZmY0YTNiZDMxZTE3OGE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-14T22:28:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-15T00:46:36Z"}, "message": "allow immut vars to be moved. enforce mut vars after stage0 in std.", "tree": {"sha": "b742f67c1705289da21297ad89869d3523997494", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b742f67c1705289da21297ad89869d3523997494"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e702d2019131a51630ee5f46ccff4a3bd31e178a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e702d2019131a51630ee5f46ccff4a3bd31e178a", "html_url": "https://github.com/rust-lang/rust/commit/e702d2019131a51630ee5f46ccff4a3bd31e178a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e702d2019131a51630ee5f46ccff4a3bd31e178a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b35875dca67e5dd1e8f986c8528ffbf973fdcbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b35875dca67e5dd1e8f986c8528ffbf973fdcbb", "html_url": "https://github.com/rust-lang/rust/commit/6b35875dca67e5dd1e8f986c8528ffbf973fdcbb"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "d61477368ac71de3b81fc5d0f908eae9998bbb06", "filename": "mk/target.mk", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e702d2019131a51630ee5f46ccff4a3bd31e178a/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e702d2019131a51630ee5f46ccff4a3bd31e178a/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=e702d2019131a51630ee5f46ccff4a3bd31e178a", "patch": "@@ -9,6 +9,13 @@\n # runtime rather than the runtime from the working directory.\n USE_SNAPSHOT_RUNTIME=0\n \n+# Do not use --enforce-mut-vars in stage0, for now, as the snapshot\n+# has an older version of the check.\n+ENFORCE_MUT_VARS_0=\n+ENFORCE_MUT_VARS_1=--enforce-mut-vars\n+ENFORCE_MUT_VARS_2=--enforce-mut-vars\n+ENFORCE_MUT_VARS_3=--enforce-mut-vars\n+\n define TARGET_STAGE_N\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/intrinsics.ll: \\\n@@ -38,7 +45,8 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB): \\\n         $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB) \\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) --enforce-mut-vars -o $$@ $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(ENFORCE_MUT_VARS_$(1)) \\\n+\t\t-o $$@ $$< && touch $$@\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM): \\\n \t\trustllvm/$(2)/$$(CFG_RUSTLLVM)"}, {"sha": "026a9edb6a86d73ab3c9d517ab712dba86a364b3", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e702d2019131a51630ee5f46ccff4a3bd31e178a/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e702d2019131a51630ee5f46ccff4a3bd31e178a/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=e702d2019131a51630ee5f46ccff4a3bd31e178a", "patch": "@@ -339,7 +339,7 @@ fn async_init (\n     lp: uv_loop,\n     async_cb: fn~(uv_handle),\n     after_cb: fn~(uv_handle)) {\n-    let mut msg = msg_async_init(async_cb, after_cb);\n+    let msg = msg_async_init(async_cb, after_cb);\n     let loop_chan = get_loop_chan_from_uv_loop(lp);\n     comm::send(loop_chan, msg);\n }\n@@ -363,7 +363,7 @@ fn close(h: uv_handle, cb: fn~()) {\n }\n \n fn timer_init(lp: uv_loop, after_cb: fn~(uv_handle)) {\n-    let mut msg = msg_timer_init(after_cb);\n+    let msg = msg_timer_init(after_cb);\n     let loop_chan = get_loop_chan_from_uv_loop(lp);\n     comm::send(loop_chan, msg);\n }\n@@ -372,7 +372,7 @@ fn timer_start(the_timer: uv_handle, timeout: u32, repeat:u32,\n                timer_cb: fn~(uv_handle)) {\n     alt the_timer {\n       uv_timer(id, lp) {\n-        let mut msg = msg_timer_start(id, timeout, repeat, timer_cb);\n+        let msg = msg_timer_start(id, timeout, repeat, timer_cb);\n         let loop_chan = get_loop_chan_from_uv_loop(lp);\n         comm::send(loop_chan, msg);\n       }\n@@ -387,7 +387,7 @@ fn timer_stop(the_timer: uv_handle, after_cb: fn~(uv_handle)) {\n     alt the_timer {\n       uv_timer(id, lp) {\n         let loop_chan = get_loop_chan_from_uv_loop(lp);\n-        let mut msg = msg_timer_stop(id, after_cb);\n+        let msg = msg_timer_stop(id, after_cb);\n         comm::send(loop_chan, msg);\n       }\n       _ {"}, {"sha": "5e8a6a1aa45af53f559511b20696d795e9392234", "filename": "src/rustc/middle/mutbl.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e702d2019131a51630ee5f46ccff4a3bd31e178a/src%2Frustc%2Fmiddle%2Fmutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e702d2019131a51630ee5f46ccff4a3bd31e178a/src%2Frustc%2Fmiddle%2Fmutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmutbl.rs?ref=e702d2019131a51630ee5f46ccff4a3bd31e178a", "patch": "@@ -176,7 +176,7 @@ fn visit_expr(cx: @ctx, ex: @expr, &&e: (), v: visit::vt<()>) {\n       expr_fn(_, _, _, cap) {\n         for moved in cap.moves {\n             let def = cx.tcx.def_map.get(moved.id);\n-            alt is_immutable_def(cx, def) {\n+            alt is_illegal_to_modify_def(cx, def, msg_move_out) {\n               some(name) { mk_err(cx, moved.span, msg_move_out, moved.name); }\n               _ { }\n             }\n@@ -192,7 +192,7 @@ fn check_lval(cx: @ctx, dest: @expr, msg: msg) {\n     alt dest.node {\n       expr_path(p) {\n         let def = cx.tcx.def_map.get(dest.id);\n-        alt is_immutable_def(cx, def) {\n+        alt is_illegal_to_modify_def(cx, def, msg) {\n           some(name) { mk_err(cx, dest.span, msg, name); }\n           _ { }\n         }\n@@ -278,7 +278,9 @@ fn check_bind(cx: @ctx, f: @expr, args: [option<@expr>]) {\n     }\n }\n \n-fn is_immutable_def(cx: @ctx, def: def) -> option<str> {\n+// returns some if the def cannot be modified.  the kind of modification is\n+// indicated by `msg`.\n+fn is_illegal_to_modify_def(cx: @ctx, def: def, msg: msg) -> option<str> {\n     alt def {\n       def_fn(_, _) | def_mod(_) | def_native_mod(_) | def_const(_) |\n       def_use(_) {\n@@ -295,15 +297,20 @@ fn is_immutable_def(cx: @ctx, def: def) -> option<str> {\n         let ty = ty::node_id_to_type(cx.tcx, node_id);\n         let proto = ty::ty_fn_proto(ty);\n         ret alt proto {\n-          proto_any | proto_block { is_immutable_def(cx, *inner) }\n-          _ { some(\"upvar\") }\n+          proto_any | proto_block {\n+            is_illegal_to_modify_def(cx, *inner, msg)\n+          }\n+          proto_bare | proto_uniq | proto_box {\n+            some(\"upvar\")\n+          }\n         };\n       }\n \n       // Note: we should *always* allow all local variables to be assigned\n       // here and then guarantee in the typestate pass that immutable local\n       // variables are assigned at most once.  But this requires a new kind of\n       // propagation (def. not assigned), so I didn't do that.\n+      def_local(_, false) if msg == msg_move_out { none }\n       def_local(_, false) if cx.tcx.sess.opts.enforce_mut_vars {\n         some(\"immutable local variable\")\n       }"}]}