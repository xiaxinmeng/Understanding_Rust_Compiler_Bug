{"sha": "af9de99f1262ae0b42e9e4a7d0cf56fa1e429827", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmOWRlOTlmMTI2MmFlMGI0MmU5ZTRhN2QwY2Y1NmZhMWU0Mjk4Mjc=", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-08-25T17:43:00Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-09-07T22:30:58Z"}, "message": "Detect stricter constraints on gats where clauses in impls vs trait", "tree": {"sha": "3cae36b1d527eab2b5285f6ded5ccff0827e95d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cae36b1d527eab2b5285f6ded5ccff0827e95d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827", "html_url": "https://github.com/rust-lang/rust/commit/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdf65053e99e8966f9bd83b5a8491326cb33d638", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf65053e99e8966f9bd83b5a8491326cb33d638", "html_url": "https://github.com/rust-lang/rust/commit/fdf65053e99e8966f9bd83b5a8491326cb33d638"}], "stats": {"total": 203, "additions": 153, "deletions": 50}, "files": [{"sha": "4d789d230913679648560e835cc84ef47e456175", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 57, "deletions": 30, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=af9de99f1262ae0b42e9e4a7d0cf56fa1e429827", "patch": "@@ -2,7 +2,7 @@\n \n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n-use crate::infer::{Subtype, ValuePairs};\n+use crate::infer::{SubregionOrigin, Subtype, ValuePairs};\n use crate::traits::ObligationCauseCode::CompareImplMethodObligation;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n@@ -11,44 +11,52 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_span::{MultiSpan, Span};\n+use rustc_span::{MultiSpan, Span, Symbol};\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when the `impl` doesn't conform to the `trait`.\n     pub(super) fn try_report_impl_not_conforming_to_trait(&self) -> Option<ErrorReported> {\n-        if let Some(ref error) = self.error {\n-            debug!(\"try_report_impl_not_conforming_to_trait {:?}\", error);\n-            if let RegionResolutionError::SubSupConflict(\n-                _,\n-                var_origin,\n-                sub_origin,\n-                _sub,\n-                sup_origin,\n-                _sup,\n-            ) = error.clone()\n-            {\n-                if let (&Subtype(ref sup_trace), &Subtype(ref sub_trace)) =\n-                    (&sup_origin, &sub_origin)\n+        let error = self.error.as_ref()?;\n+        debug!(\"try_report_impl_not_conforming_to_trait {:?}\", error);\n+        if let RegionResolutionError::SubSupConflict(\n+            _,\n+            var_origin,\n+            sub_origin,\n+            _sub,\n+            sup_origin,\n+            _sup,\n+        ) = error.clone()\n+        {\n+            if let (&Subtype(ref sup_trace), &Subtype(ref sub_trace)) = (&sup_origin, &sub_origin) {\n+                if let (\n+                    ValuePairs::Types(sub_expected_found),\n+                    ValuePairs::Types(sup_expected_found),\n+                    CompareImplMethodObligation { trait_item_def_id, .. },\n+                ) = (&sub_trace.values, &sup_trace.values, &sub_trace.cause.code)\n                 {\n-                    if let (\n-                        ValuePairs::Types(sub_expected_found),\n-                        ValuePairs::Types(sup_expected_found),\n-                        CompareImplMethodObligation { trait_item_def_id, .. },\n-                    ) = (&sub_trace.values, &sup_trace.values, &sub_trace.cause.code)\n-                    {\n-                        if sup_expected_found == sub_expected_found {\n-                            self.emit_err(\n-                                var_origin.span(),\n-                                sub_expected_found.expected,\n-                                sub_expected_found.found,\n-                                *trait_item_def_id,\n-                            );\n-                            return Some(ErrorReported);\n-                        }\n+                    if sup_expected_found == sub_expected_found {\n+                        self.emit_err(\n+                            var_origin.span(),\n+                            sub_expected_found.expected,\n+                            sub_expected_found.found,\n+                            *trait_item_def_id,\n+                        );\n+                        return Some(ErrorReported);\n                     }\n                 }\n             }\n         }\n+        if let RegionResolutionError::ConcreteFailure(origin, _, _) = error.clone() {\n+            if let SubregionOrigin::CompareImplTypeObligation {\n+                span,\n+                item_name,\n+                impl_item_def_id,\n+                trait_item_def_id,\n+            } = origin\n+            {\n+                self.emit_associated_type_err(span, item_name, impl_item_def_id, trait_item_def_id);\n+            }\n+        }\n         None\n     }\n \n@@ -107,6 +115,25 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         }\n         err.emit();\n     }\n+\n+    fn emit_associated_type_err(\n+        &self,\n+        span: Span,\n+        item_name: Symbol,\n+        impl_item_def_id: DefId,\n+        trait_item_def_id: DefId,\n+    ) {\n+        let impl_sp = self.tcx().def_span(impl_item_def_id);\n+        let trait_sp = self.tcx().def_span(trait_item_def_id);\n+        let mut err = self\n+            .tcx()\n+            .sess\n+            .struct_span_err(span, &format!(\"`impl` associated type signature for `{}` doesn't match `trait` associated type signature\", item_name));\n+        err.span_label(impl_sp, &format!(\"found\"));\n+        err.span_label(trait_sp, &format!(\"expected\"));\n+\n+        err.emit();\n+    }\n }\n \n struct TypeParamSpanVisitor<'tcx> {"}, {"sha": "5f99a23f86e88b1d2df0045f1f0264e585b27fe2", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=af9de99f1262ae0b42e9e4a7d0cf56fa1e429827", "patch": "@@ -99,6 +99,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     \"...so that the definition in impl matches the definition from the trait\",\n                 );\n             }\n+            infer::CompareImplTypeObligation { span, .. } => {\n+                label_or_note(\n+                    span,\n+                    \"...so that the definition in impl matches the definition from the trait\",\n+                );\n+            }\n         }\n     }\n \n@@ -356,6 +362,18 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 trait_item_def_id,\n                 &format!(\"`{}: {}`\", sup, sub),\n             ),\n+            infer::CompareImplTypeObligation {\n+                span,\n+                item_name,\n+                impl_item_def_id,\n+                trait_item_def_id,\n+            } => self.report_extra_impl_obligation(\n+                span,\n+                item_name,\n+                impl_item_def_id,\n+                trait_item_def_id,\n+                &format!(\"`{}: {}`\", sup, sub),\n+            ),\n         }\n     }\n "}, {"sha": "354b8e26d53d5dcaa466a9adc0208f598bfa3a85", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=af9de99f1262ae0b42e9e4a7d0cf56fa1e429827", "patch": "@@ -427,6 +427,15 @@ pub enum SubregionOrigin<'tcx> {\n         impl_item_def_id: DefId,\n         trait_item_def_id: DefId,\n     },\n+\n+    /// Comparing the signature and requirements of an impl associated type\n+    /// against the containing trait\n+    CompareImplTypeObligation {\n+        span: Span,\n+        item_name: Symbol,\n+        impl_item_def_id: DefId,\n+        trait_item_def_id: DefId,\n+    },\n }\n \n // `SubregionOrigin` is used a lot. Make sure it doesn't unintentionally get bigger.\n@@ -1810,6 +1819,7 @@ impl<'tcx> SubregionOrigin<'tcx> {\n             ReferenceOutlivesReferent(_, a) => a,\n             CallReturn(a) => a,\n             CompareImplMethodObligation { span, .. } => span,\n+            CompareImplTypeObligation { span, .. } => span,\n         }\n     }\n \n@@ -1833,6 +1843,17 @@ impl<'tcx> SubregionOrigin<'tcx> {\n                 trait_item_def_id,\n             },\n \n+            traits::ObligationCauseCode::CompareImplTypeObligation {\n+                item_name,\n+                impl_item_def_id,\n+                trait_item_def_id,\n+            } => SubregionOrigin::CompareImplTypeObligation {\n+                span: cause.span,\n+                item_name,\n+                impl_item_def_id,\n+                trait_item_def_id,\n+            },\n+\n             _ => default(),\n         }\n     }"}, {"sha": "2b52483d1d6a136604b061ac93f53e28e7c2084d", "filename": "src/test/ui/generic-associated-types/impl_bounds.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs?ref=af9de99f1262ae0b42e9e4a7d0cf56fa1e429827", "patch": "@@ -15,7 +15,8 @@ impl<T> Foo for Fooy<T> {\n     type A<'a> where Self: 'static = (&'a ());\n     //~^ ERROR the parameter type `T` may not live long enough\n     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n-    //~^ ERROR lifetime bound not satisfied\n+    //~^ ERROR `impl` associated type\n+    //~| ERROR impl has stricter\n     //~| ERROR lifetime bound not satisfied\n     type C where Self: Copy = String;\n     //~^ ERROR the trait bound `T: Copy` is not satisfied"}, {"sha": "38c7ca7a1a195438d486cfa55db72f93deb6ebfa", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=af9de99f1262ae0b42e9e4a7d0cf56fa1e429827", "patch": "@@ -5,24 +5,25 @@ LL |     type A<'a> where Self: 'static = (&'a ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `T: 'static`...\n-   = note: ...so that the type `Fooy<T>` will meet its required lifetime bounds\n+   = note: ...so that the definition in impl matches the definition from the trait\n \n-error[E0478]: lifetime bound not satisfied\n+error: `impl` associated type signature for `B` doesn't match `trait` associated type signature\n   --> $DIR/impl_bounds.rs:17:5\n    |\n+LL |     type B<'a, 'b> where 'a: 'b;\n+   |     ---------------------------- expected\n+...\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: lifetime parameter instantiated with the lifetime `'b` as defined on the associated item at 17:16\n-  --> $DIR/impl_bounds.rs:17:16\n-   |\n-LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n-   |                ^^\n-note: but lifetime parameter must outlive the lifetime `'a` as defined on the associated item at 17:12\n-  --> $DIR/impl_bounds.rs:17:12\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found\n+\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/impl_bounds.rs:17:5\n    |\n+LL |     type B<'a, 'b> where 'a: 'b;\n+   |     ---------------------------- definition of `B` from trait\n+...\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n-   |            ^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'b: 'a`\n \n error[E0478]: lifetime bound not satisfied\n   --> $DIR/impl_bounds.rs:17:5\n@@ -42,7 +43,7 @@ LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n    |                ^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/impl_bounds.rs:20:5\n+  --> $DIR/impl_bounds.rs:21:5\n    |\n LL |     type C where Self: Copy = String;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n@@ -67,7 +68,7 @@ LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n    |       +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/impl_bounds.rs:22:5\n+  --> $DIR/impl_bounds.rs:23:5\n    |\n LL |     fn d() where Self: Copy {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n@@ -91,7 +92,7 @@ help: consider restricting type parameter `T`\n LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n    |       +++++++++++++++++++\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0277, E0310, E0478.\n-For more information about an error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0276, E0277, E0310, E0478.\n+For more information about an error, try `rustc --explain E0276`."}, {"sha": "e1ff772921104a1cc506b48eb784dfdec5fa03f1", "filename": "src/test/ui/generic-associated-types/issue-86787.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.stderr?ref=af9de99f1262ae0b42e9e4a7d0cf56fa1e429827", "patch": "@@ -9,7 +9,7 @@ LL | |     <Left as HasChildrenOf>::T: 'a,\n LL | |     <Right as HasChildrenOf>::T: 'a\n    | |                                    - help: consider adding a where clause: `, <Left as HasChildrenOf>::T: 'a`\n LL | |     = Either<&'a Left::T, &'a Right::T>;\n-   | |________________________________________^ ...so that the type `<Left as HasChildrenOf>::T` will meet its required lifetime bounds\n+   | |________________________________________^ ...so that the definition in impl matches the definition from the trait\n \n error[E0309]: the associated type `<Right as HasChildrenOf>::T` may not live long enough\n   --> $DIR/issue-86787.rs:23:5\n@@ -22,7 +22,7 @@ LL | |     <Left as HasChildrenOf>::T: 'a,\n LL | |     <Right as HasChildrenOf>::T: 'a\n    | |                                    - help: consider adding a where clause: `, <Right as HasChildrenOf>::T: 'a`\n LL | |     = Either<&'a Left::T, &'a Right::T>;\n-   | |________________________________________^ ...so that the type `<Right as HasChildrenOf>::T` will meet its required lifetime bounds\n+   | |________________________________________^ ...so that the definition in impl matches the definition from the trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fa846516040f39ea4e3fda429587424ff9a23aa3", "filename": "src/test/ui/generic-associated-types/missing-where-clause-on-trait.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.rs?ref=af9de99f1262ae0b42e9e4a7d0cf56fa1e429827", "patch": "@@ -0,0 +1,14 @@\n+// check-fail\n+\n+#![feature(generic_associated_types)]\n+\n+trait Foo {\n+    type Assoc<'a, 'b>;\n+}\n+impl Foo for () {\n+    type Assoc<'a, 'b> where 'a: 'b = ();\n+    //~^ `impl` associated type\n+    //~| impl has stricter\n+}\n+\n+fn main() {}"}, {"sha": "d58209950025625e6ae28f5e6a228fe72f7ad968", "filename": "src/test/ui/generic-associated-types/missing-where-clause-on-trait.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af9de99f1262ae0b42e9e4a7d0cf56fa1e429827/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr?ref=af9de99f1262ae0b42e9e4a7d0cf56fa1e429827", "patch": "@@ -0,0 +1,21 @@\n+error: `impl` associated type signature for `Assoc` doesn't match `trait` associated type signature\n+  --> $DIR/missing-where-clause-on-trait.rs:9:5\n+   |\n+LL |     type Assoc<'a, 'b>;\n+   |     ------------------- expected\n+...\n+LL |     type Assoc<'a, 'b> where 'a: 'b = ();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found\n+\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/missing-where-clause-on-trait.rs:9:5\n+   |\n+LL |     type Assoc<'a, 'b>;\n+   |     ------------------- definition of `Assoc` from trait\n+...\n+LL |     type Assoc<'a, 'b> where 'a: 'b = ();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'a: 'b`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0276`."}]}