{"sha": "c9ced8523bbb90561385aab305232f2167228a83", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5Y2VkODUyM2JiYjkwNTYxMzg1YWFiMzA1MjMyZjIxNjcyMjhhODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-07T03:11:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-07T03:11:06Z"}, "message": "Auto merge of #77626 - tamird:parse-scope-id, r=dtolnay\n\nParse SocketAddrV6::scope_id\n\nr? `@dtolnay`", "tree": {"sha": "5edeca2a3a5de2be241505d1912c61d4ec42341d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5edeca2a3a5de2be241505d1912c61d4ec42341d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9ced8523bbb90561385aab305232f2167228a83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ced8523bbb90561385aab305232f2167228a83", "html_url": "https://github.com/rust-lang/rust/commit/c9ced8523bbb90561385aab305232f2167228a83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9ced8523bbb90561385aab305232f2167228a83/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5779815f896fa6e21c04a5efb378aa6ba009a471", "url": "https://api.github.com/repos/rust-lang/rust/commits/5779815f896fa6e21c04a5efb378aa6ba009a471", "html_url": "https://github.com/rust-lang/rust/commit/5779815f896fa6e21c04a5efb378aa6ba009a471"}, {"sha": "49ade22bd990f5ad9165431a4c974e5d8b0e8732", "url": "https://api.github.com/repos/rust-lang/rust/commits/49ade22bd990f5ad9165431a4c974e5d8b0e8732", "html_url": "https://github.com/rust-lang/rust/commit/49ade22bd990f5ad9165431a4c974e5d8b0e8732"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "e8b89626fbde1f75f637a86fd336d2073ad2bd12", "filename": "library/std/src/net/parser.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c9ced8523bbb90561385aab305232f2167228a83/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ced8523bbb90561385aab305232f2167228a83/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs?ref=c9ced8523bbb90561385aab305232f2167228a83", "patch": "@@ -32,7 +32,7 @@ macro_rules! impl_helper {\n     })*)\n }\n \n-impl_helper! { u8 u16 }\n+impl_helper! { u8 u16 u32 }\n \n struct Parser<'a> {\n     // parsing as ASCII, so can use byte array\n@@ -75,9 +75,12 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Read the next character from the input if it matches the target\n-    fn read_given_char(&mut self, target: char) -> Option<char> {\n-        self.read_atomically(|p| p.read_char().filter(|&c| c == target))\n+    #[must_use]\n+    /// Read the next character from the input if it matches the target.\n+    fn read_given_char(&mut self, target: char) -> Option<()> {\n+        self.read_atomically(|p| {\n+            p.read_char().and_then(|c| if c == target { Some(()) } else { None })\n+        })\n     }\n \n     /// Helper for reading separators in an indexed loop. Reads the separator\n@@ -90,7 +93,7 @@ impl<'a> Parser<'a> {\n     {\n         self.read_atomically(move |p| {\n             if index > 0 {\n-                let _ = p.read_given_char(sep)?;\n+                p.read_given_char(sep)?;\n             }\n             inner(p)\n         })\n@@ -187,8 +190,8 @@ impl<'a> Parser<'a> {\n \n             // read `::` if previous code parsed less than 8 groups\n             // `::` indicates one or more groups of 16 bits of zeros\n-            let _ = p.read_given_char(':')?;\n-            let _ = p.read_given_char(':')?;\n+            p.read_given_char(':')?;\n+            p.read_given_char(':')?;\n \n             // Read the back part of the address. The :: must contain at least one\n             // set of zeroes, so our max length is 7.\n@@ -211,7 +214,15 @@ impl<'a> Parser<'a> {\n     /// Read a : followed by a port in base 10.\n     fn read_port(&mut self) -> Option<u16> {\n         self.read_atomically(|p| {\n-            let _ = p.read_given_char(':')?;\n+            p.read_given_char(':')?;\n+            p.read_number(10, None)\n+        })\n+    }\n+\n+    /// Read a % followed by a scope id in base 10.\n+    fn read_scope_id(&mut self) -> Option<u32> {\n+        self.read_atomically(|p| {\n+            p.read_given_char('%')?;\n             p.read_number(10, None)\n         })\n     }\n@@ -228,12 +239,13 @@ impl<'a> Parser<'a> {\n     /// Read an IPV6 address with a port\n     fn read_socket_addr_v6(&mut self) -> Option<SocketAddrV6> {\n         self.read_atomically(|p| {\n-            let _ = p.read_given_char('[')?;\n+            p.read_given_char('[')?;\n             let ip = p.read_ipv6_addr()?;\n-            let _ = p.read_given_char(']')?;\n+            let scope_id = p.read_scope_id().unwrap_or(0);\n+            p.read_given_char(']')?;\n \n             let port = p.read_port()?;\n-            Some(SocketAddrV6::new(ip, port, 0, 0))\n+            Some(SocketAddrV6::new(ip, port, 0, scope_id))\n         })\n     }\n "}, {"sha": "8d8889cd19d36757d44ae2ecbcd3e5b2a5fd88ce", "filename": "library/std/src/net/parser/tests.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9ced8523bbb90561385aab305232f2167228a83/library%2Fstd%2Fsrc%2Fnet%2Fparser%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ced8523bbb90561385aab305232f2167228a83/library%2Fstd%2Fsrc%2Fnet%2Fparser%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fparser%2Ftests.rs?ref=c9ced8523bbb90561385aab305232f2167228a83", "patch": "@@ -3,6 +3,7 @@ use crate::net::{IpAddr, Ipv4Addr, Ipv6Addr, SocketAddr, SocketAddrV4, SocketAdd\n use crate::str::FromStr;\n \n const PORT: u16 = 8080;\n+const SCOPE_ID: u32 = 1337;\n \n const IPV4: Ipv4Addr = Ipv4Addr::new(192, 168, 0, 1);\n const IPV4_STR: &str = \"192.168.0.1\";\n@@ -13,6 +14,7 @@ const IPV6_STR_FULL: &str = \"2001:db8:0:0:0:0:c0a8:1\";\n const IPV6_STR_COMPRESS: &str = \"2001:db8::c0a8:1\";\n const IPV6_STR_V4: &str = \"2001:db8::192.168.0.1\";\n const IPV6_STR_PORT: &str = \"[2001:db8::c0a8:1]:8080\";\n+const IPV6_STR_PORT_SCOPE_ID: &str = \"[2001:db8::c0a8:1%1337]:8080\";\n \n #[test]\n fn parse_ipv4() {\n@@ -74,8 +76,8 @@ fn parse_socket_v4() {\n \n #[test]\n fn parse_socket_v6() {\n-    let result: SocketAddrV6 = IPV6_STR_PORT.parse().unwrap();\n-    assert_eq!(result, SocketAddrV6::new(IPV6, PORT, 0, 0));\n+    assert_eq!(IPV6_STR_PORT.parse(), Ok(SocketAddrV6::new(IPV6, PORT, 0, 0)));\n+    assert_eq!(IPV6_STR_PORT_SCOPE_ID.parse(), Ok(SocketAddrV6::new(IPV6, PORT, 0, SCOPE_ID)));\n \n     assert!(SocketAddrV6::from_str(IPV4_STR).is_err());\n     assert!(SocketAddrV6::from_str(IPV4_STR_PORT).is_err());"}]}