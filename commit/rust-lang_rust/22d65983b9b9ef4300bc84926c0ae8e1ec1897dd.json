{"sha": "22d65983b9b9ef4300bc84926c0ae8e1ec1897dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZDY1OTgzYjliOWVmNDMwMGJjODQ5MjZjMGFlOGUxZWMxODk3ZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-04T23:06:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-04T23:06:59Z"}, "message": "Auto merge of #43067 - pornel:libdeps, r=nrc\n\nCompact display of static lib dependencies\n\nFixes #33173\n\nInstead of displaying one dependency per line, I've changed the format to display them all in one line.\n\nAs a bonus they're in format of linker flags (`-lfoo`), so the output can be copy&pasted if one is actually going to link as suggested.", "tree": {"sha": "932c256075ce9b398cbe130ec4a5b83cc6c11ec8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/932c256075ce9b398cbe130ec4a5b83cc6c11ec8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22d65983b9b9ef4300bc84926c0ae8e1ec1897dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22d65983b9b9ef4300bc84926c0ae8e1ec1897dd", "html_url": "https://github.com/rust-lang/rust/commit/22d65983b9b9ef4300bc84926c0ae8e1ec1897dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22d65983b9b9ef4300bc84926c0ae8e1ec1897dd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "088216fb997c9cb12ce049bbe7975d1f657551ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/088216fb997c9cb12ce049bbe7975d1f657551ca", "html_url": "https://github.com/rust-lang/rust/commit/088216fb997c9cb12ce049bbe7975d1f657551ca"}, {"sha": "2354089ece7d03f997caf8a9f6ad99d235c8dacb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2354089ece7d03f997caf8a9f6ad99d235c8dacb", "html_url": "https://github.com/rust-lang/rust/commit/2354089ece7d03f997caf8a9f6ad99d235c8dacb"}], "stats": {"total": 59, "additions": 52, "deletions": 7}, "files": [{"sha": "b538c6a6eca7bcefdaf233bd5fa8b675d5237f73", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22d65983b9b9ef4300bc84926c0ae8e1ec1897dd/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d65983b9b9ef4300bc84926c0ae8e1ec1897dd/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=22d65983b9b9ef4300bc84926c0ae8e1ec1897dd", "patch": "@@ -340,6 +340,7 @@ pub enum PrintRequest {\n     RelocationModels,\n     CodeModels,\n     TargetSpec,\n+    NativeStaticLibs,\n }\n \n pub enum Input {\n@@ -1296,7 +1297,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n                                print on stdout\",\n                      \"[crate-name|file-names|sysroot|cfg|target-list|\\\n                        target-cpus|target-features|relocation-models|\\\n-                       code-models|target-spec-json]\"),\n+                       code-models|target-spec-json|native-static-deps]\"),\n         opt::flagmulti_s(\"g\",  \"\",  \"Equivalent to -C debuginfo=2\"),\n         opt::flagmulti_s(\"O\", \"\", \"Equivalent to -C opt-level=2\"),\n         opt::opt_s(\"o\", \"\", \"Write output to <filename>\", \"FILENAME\"),\n@@ -1642,6 +1643,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n             \"target-features\" => PrintRequest::TargetFeatures,\n             \"relocation-models\" => PrintRequest::RelocationModels,\n             \"code-models\" => PrintRequest::CodeModels,\n+            \"native-static-libs\" => PrintRequest::NativeStaticLibs,\n             \"target-spec-json\" => {\n                 if nightly_options::is_unstable_enabled(matches) {\n                     PrintRequest::TargetSpec"}, {"sha": "5011b5379904319a8a8d43b15cbf088a8a271d6b", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22d65983b9b9ef4300bc84926c0ae8e1ec1897dd/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d65983b9b9ef4300bc84926c0ae8e1ec1897dd/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=22d65983b9b9ef4300bc84926c0ae8e1ec1897dd", "patch": "@@ -741,7 +741,9 @@ impl RustcDefaultCalls {\n                         odir: &Option<PathBuf>,\n                         ofile: &Option<PathBuf>)\n                         -> Compilation {\n-        if sess.opts.prints.is_empty() {\n+        // PrintRequest::NativeStaticLibs is special - printed during linking\n+        // (empty iterator returns true)\n+        if sess.opts.prints.iter().all(|&p| p==PrintRequest::NativeStaticLibs) {\n             return Compilation::Continue;\n         }\n \n@@ -851,6 +853,9 @@ impl RustcDefaultCalls {\n                 PrintRequest::TargetCPUs | PrintRequest::TargetFeatures => {\n                     rustc_trans::print(*req, sess);\n                 }\n+                PrintRequest::NativeStaticLibs => {\n+                    println!(\"Native static libs can be printed only during linking\");\n+                }\n             }\n         }\n         return Compilation::Stop;"}, {"sha": "4b56376ad9beac20ab3e8984f08389c221d4d022", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/22d65983b9b9ef4300bc84926c0ae8e1ec1897dd/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d65983b9b9ef4300bc84926c0ae8e1ec1897dd/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=22d65983b9b9ef4300bc84926c0ae8e1ec1897dd", "patch": "@@ -15,7 +15,7 @@ use super::linker::Linker;\n use super::rpath::RPathConfig;\n use super::rpath;\n use metadata::METADATA_FILENAME;\n-use rustc::session::config::{self, NoDebugInfo, OutputFilenames, OutputType};\n+use rustc::session::config::{self, NoDebugInfo, OutputFilenames, OutputType, PrintRequest};\n use rustc::session::filesearch;\n use rustc::session::search_paths::PathKind;\n use rustc::session::Session;\n@@ -647,11 +647,20 @@ fn link_staticlib(sess: &Session,\n     ab.build();\n \n     if !all_native_libs.is_empty() {\n-        sess.note_without_error(\"link against the following native artifacts when linking against \\\n-                                 this static library\");\n-        sess.note_without_error(\"the order and any duplication can be significant on some \\\n-                                 platforms, and so may need to be preserved\");\n+        if sess.opts.prints.contains(&PrintRequest::NativeStaticLibs) {\n+            print_native_static_libs(sess, &all_native_libs);\n+        } else {\n+            // Fallback for backwards compatibility only\n+            print_native_static_libs_legacy(sess, &all_native_libs);\n+        }\n     }\n+}\n+\n+fn print_native_static_libs_legacy(sess: &Session, all_native_libs: &[NativeLibrary]) {\n+    sess.note_without_error(\"link against the following native artifacts when linking against \\\n+                             this static library\");\n+    sess.note_without_error(\"This list will not be printed by default. \\\n+        Please add --print=native-static-libs if you need this information\");\n \n     for lib in all_native_libs.iter().filter(|l| relevant_lib(sess, l)) {\n         let name = match lib.kind {\n@@ -665,6 +674,35 @@ fn link_staticlib(sess: &Session,\n     }\n }\n \n+fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLibrary]) {\n+    let lib_args: Vec<_> = all_native_libs.iter()\n+        .filter(|l| relevant_lib(sess, l))\n+        .filter_map(|lib| match lib.kind {\n+            NativeLibraryKind::NativeStaticNobundle |\n+            NativeLibraryKind::NativeUnknown => {\n+                if sess.target.target.options.is_like_msvc {\n+                    Some(format!(\"{}.lib\", lib.name))\n+                } else {\n+                    Some(format!(\"-l{}\", lib.name))\n+                }\n+            },\n+            NativeLibraryKind::NativeFramework => {\n+                // ld-only syntax, since there are no frameworks in MSVC\n+                Some(format!(\"-framework {}\", lib.name))\n+            },\n+            // These are included, no need to print them\n+            NativeLibraryKind::NativeStatic => None,\n+        })\n+        .collect();\n+    if !lib_args.is_empty() {\n+        sess.note_without_error(\"Link against the following native artifacts when linking \\\n+                                 against this static library. The order and any duplication \\\n+                                 can be significant on some platforms.\");\n+        // Prefix for greppability\n+        sess.note_without_error(&format!(\"native-static-libs: {}\", &lib_args.join(\" \")));\n+    }\n+}\n+\n // Create a dynamic library or executable\n //\n // This will invoke the system linker/cc to create the resulting file. This"}]}