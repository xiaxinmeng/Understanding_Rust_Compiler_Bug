{"sha": "8766c0452c9ae19a041a926820ae400864be6a9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NjZjMDQ1MmM5YWUxOWEwNDFhOTI2ODIwYWU0MDA4NjRiZTZhOWI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-12T21:35:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-12T21:59:57Z"}, "message": "cleanup: Remove `ParseSess::injected_crate_name`", "tree": {"sha": "971bc02e8bc0ebff2bc0d99d864222803764db12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/971bc02e8bc0ebff2bc0d99d864222803764db12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8766c0452c9ae19a041a926820ae400864be6a9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8766c0452c9ae19a041a926820ae400864be6a9b", "html_url": "https://github.com/rust-lang/rust/commit/8766c0452c9ae19a041a926820ae400864be6a9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8766c0452c9ae19a041a926820ae400864be6a9b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9722952f0bed5815cb22cb4878be09fb39f92804", "url": "https://api.github.com/repos/rust-lang/rust/commits/9722952f0bed5815cb22cb4878be09fb39f92804", "html_url": "https://github.com/rust-lang/rust/commit/9722952f0bed5815cb22cb4878be09fb39f92804"}], "stats": {"total": 23, "additions": 7, "deletions": 16}, "files": [{"sha": "d3de2537ae776f5a41435acfd6b7c97c66a7f0f8", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8766c0452c9ae19a041a926820ae400864be6a9b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c0452c9ae19a041a926820ae400864be6a9b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=8766c0452c9ae19a041a926820ae400864be6a9b", "patch": "@@ -109,7 +109,6 @@ pub fn print_crate<'a>(\n     ann: &'a dyn PpAnn,\n     is_expanded: bool,\n     edition: Edition,\n-    has_injected_crate: bool,\n ) -> String {\n     let mut s = State {\n         s: pp::mk_printer(),\n@@ -119,7 +118,7 @@ pub fn print_crate<'a>(\n         insert_extra_parens: true,\n     };\n \n-    if is_expanded && has_injected_crate {\n+    if is_expanded && !krate.attrs.iter().any(|attr| attr.has_name(sym::no_core)) {\n         // We need to print `#![no_std]` (and its feature gate) so that\n         // compiling pretty-printed source won't inject libstd again.\n         // However, we don't want these attributes in the AST because"}, {"sha": "91566ec1ef24540323c9769cbd2f88e3fad78fed", "filename": "compiler/rustc_builtin_macros/src/standard_library_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8766c0452c9ae19a041a926820ae400864be6a9b/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c0452c9ae19a041a926820ae400864be6a9b/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs?ref=8766c0452c9ae19a041a926820ae400864be6a9b", "patch": "@@ -13,12 +13,12 @@ pub fn inject(\n     resolver: &mut dyn ResolverExpand,\n     sess: &Session,\n     alt_std_name: Option<Symbol>,\n-) -> (ast::Crate, Option<Symbol>) {\n+) -> ast::Crate {\n     let rust_2018 = sess.parse_sess.edition >= Edition::Edition2018;\n \n     // the first name in this list is the crate name of the crate with the prelude\n     let names: &[Symbol] = if sess.contains_name(&krate.attrs, sym::no_core) {\n-        return (krate, None);\n+        return krate;\n     } else if sess.contains_name(&krate.attrs, sym::no_std) {\n         if sess.contains_name(&krate.attrs, sym::compiler_builtins) {\n             &[sym::core]\n@@ -81,5 +81,5 @@ pub fn inject(\n \n     krate.module.items.insert(0, use_item);\n \n-    (krate, Some(name))\n+    krate\n }"}, {"sha": "5b35754a9514857a7336dc664bb3895e538d5a39", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8766c0452c9ae19a041a926820ae400864be6a9b/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c0452c9ae19a041a926820ae400864be6a9b/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=8766c0452c9ae19a041a926820ae400864be6a9b", "patch": "@@ -407,7 +407,6 @@ pub fn print_after_parsing(\n                 annotation.pp_ann(),\n                 false,\n                 parse.edition,\n-                parse.injected_crate_name.get().is_some(),\n             )\n         })\n     } else {\n@@ -449,7 +448,6 @@ pub fn print_after_hir_lowering<'tcx>(\n                     annotation.pp_ann(),\n                     true,\n                     parse.edition,\n-                    parse.injected_crate_name.get().is_some(),\n                 )\n             })\n         }"}, {"sha": "f6af4b7d8a44a14f899794e6926f89604902fe48", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8766c0452c9ae19a041a926820ae400864be6a9b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c0452c9ae19a041a926820ae400864be6a9b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=8766c0452c9ae19a041a926820ae400864be6a9b", "patch": "@@ -239,16 +239,12 @@ fn configure_and_expand_inner<'a>(\n \n     krate = sess.time(\"crate_injection\", || {\n         let alt_std_name = sess.opts.alt_std_name.as_ref().map(|s| Symbol::intern(s));\n-        let (krate, name) = rustc_builtin_macros::standard_library_imports::inject(\n+        rustc_builtin_macros::standard_library_imports::inject(\n             krate,\n             &mut resolver,\n             &sess,\n             alt_std_name,\n-        );\n-        if let Some(name) = name {\n-            sess.parse_sess.injected_crate_name.set(name).expect(\"not yet initialized\");\n-        }\n-        krate\n+        )\n     });\n \n     util::check_attr_crate_type(&sess, &krate.attrs, &mut resolver.lint_buffer());"}, {"sha": "5b2a9a341a00bd0bcd2e1421e70ee54779ead327", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8766c0452c9ae19a041a926820ae400864be6a9b/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766c0452c9ae19a041a926820ae400864be6a9b/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=8766c0452c9ae19a041a926820ae400864be6a9b", "patch": "@@ -4,7 +4,7 @@\n use crate::lint::{BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId};\n use rustc_ast::node_id::NodeId;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::sync::{Lock, Lrc, OnceCell};\n+use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{error_code, Applicability, DiagnosticBuilder};\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n@@ -129,7 +129,6 @@ pub struct ParseSess {\n     /// operation token that followed it, but that the parser cannot identify without further\n     /// analysis.\n     pub ambiguous_block_expr_parse: Lock<FxHashMap<Span, Span>>,\n-    pub injected_crate_name: OnceCell<Symbol>,\n     pub gated_spans: GatedSpans,\n     pub symbol_gallery: SymbolGallery,\n     /// The parser has reached `Eof` due to an unclosed brace. Used to silence unnecessary errors.\n@@ -158,7 +157,6 @@ impl ParseSess {\n             source_map,\n             buffered_lints: Lock::new(vec![]),\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n-            injected_crate_name: OnceCell::new(),\n             gated_spans: GatedSpans::default(),\n             symbol_gallery: SymbolGallery::default(),\n             reached_eof: Lock::new(false),"}]}