{"sha": "0513202d25c67ebeb5a02f9fe9dad5dea3296140", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MTMyMDJkMjVjNjdlYmViNWEwMmY5ZmU5ZGFkNWRlYTMyOTYxNDA=", "commit": {"author": {"name": "Darth-Revan", "email": "Kivi.Kirchner@web.de", "date": "2019-07-06T18:13:38Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-07-17T06:58:32Z"}, "message": "Implement lint for inherent to_string() method.", "tree": {"sha": "9189b3aff1ac1e69ccb44be6465381ecc1de0a4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9189b3aff1ac1e69ccb44be6465381ecc1de0a4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0513202d25c67ebeb5a02f9fe9dad5dea3296140", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEdgbJzPSa+gJi9jP1Acg2tkD/37EFAl0uxxkACgkQAcg2tkD/\n37Gl/A//bSmbFP3k1b3MetDHGCsW96qFyDQVE3sRF7EMchpoH0MWNY324ecKAagW\nP6qfYHW8WTTAzTfmKtV3ii4QREnsoTCCGowBagvnALSND+x4Wn802khUb41mSKAv\n9fiHH7VZLLuNVy2nLkRIJrKAOM16645j85U6y578YhH9XqcgsjRqZ53QGiHP71cl\nVTVDbSoL8t7UgiFPqO3E+zaHXHxSXGA0+tIcdb8UTuUIY2GXGpI6uZaRS0/fiSNI\nxp9nQv5B63iIrYJDdrDgXDJRjSM+vPpqm+u0T2+zTjQ72kKGtHzXBLpb3p9Keb+6\nhutjheLdYokUf6mFU4Xrr3qPcA/NBIYSips09SbDsOmHVTniJdW/w00ml9iQgQfd\nHgPeDx8JS90cDa6x500RzfbmPCIXeUkohkx9cV36b7ChHA/9AhzodvDJy44agR4x\n5RAteIBsStpfwdnu1FP1jtuqGKGAOjkHNss2X59JOZ3wsB7mQd3sDLRylvx03EyL\nZjw6RfnNGYlfFrHzmM0Kodkg8sXul6pdHxZmy/0LYvizxTEc1Usj//7a/L7cLVCo\nhvIgK85fRD1qI/V4LnCAjggC3trvY3p9n3ifHPdb9CKkw27c1QJ5+l0VVg3zwS8r\nwbMkUMIoO625ZMu74uoqK/FTzQlszOL7wXu9lz2gpRk6a+GG7xw=\n=So6P\n-----END PGP SIGNATURE-----", "payload": "tree 9189b3aff1ac1e69ccb44be6465381ecc1de0a4d\nparent 7498a5f13c8d47db3e4c2238014d48b79b312888\nauthor Darth-Revan <Kivi.Kirchner@web.de> 1562436818 +0200\ncommitter flip1995 <hello@philkrones.com> 1563346712 +0200\n\nImplement lint for inherent to_string() method.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0513202d25c67ebeb5a02f9fe9dad5dea3296140", "html_url": "https://github.com/rust-lang/rust/commit/0513202d25c67ebeb5a02f9fe9dad5dea3296140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0513202d25c67ebeb5a02f9fe9dad5dea3296140/comments", "author": null, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7498a5f13c8d47db3e4c2238014d48b79b312888", "url": "https://api.github.com/repos/rust-lang/rust/commits/7498a5f13c8d47db3e4c2238014d48b79b312888", "html_url": "https://github.com/rust-lang/rust/commit/7498a5f13c8d47db3e4c2238014d48b79b312888"}], "stats": {"total": 282, "additions": 280, "deletions": 2}, "files": [{"sha": "ff5aebbc892ba200c7254cc9ae88f48ce009526e", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0513202d25c67ebeb5a02f9fe9dad5dea3296140/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0513202d25c67ebeb5a02f9fe9dad5dea3296140/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=0513202d25c67ebeb5a02f9fe9dad5dea3296140", "patch": "@@ -973,6 +973,8 @@ Released 2018-09-13\n [`ineffective_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#ineffective_bit_mask\n [`infallible_destructuring_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#infallible_destructuring_match\n [`infinite_iter`]: https://rust-lang.github.io/rust-clippy/master/index.html#infinite_iter\n+[`inherent_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string\n+[`inherent_to_string_shadow_display`]: https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string_shadow_display\n [`inline_always`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_always\n [`inline_fn_without_body`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_fn_without_body\n [`int_plus_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#int_plus_one"}, {"sha": "1e649d8982fe2ad9e91981c8e5eebb76f3482bae", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0513202d25c67ebeb5a02f9fe9dad5dea3296140/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/0513202d25c67ebeb5a02f9fe9dad5dea3296140/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=0513202d25c67ebeb5a02f9fe9dad5dea3296140", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 306 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 308 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "57ffdf78d11e04f45eca0569b2aa14e80b830c22", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/0513202d25c67ebeb5a02f9fe9dad5dea3296140/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0513202d25c67ebeb5a02f9fe9dad5dea3296140/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=0513202d25c67ebeb5a02f9fe9dad5dea3296140", "patch": "@@ -0,0 +1,148 @@\n+use if_chain::if_chain;\n+use rustc::hir::{ImplItem, ImplItemKind};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n+\n+use crate::utils::{\n+    get_trait_def_id, implements_trait, in_macro_or_desugar, match_type, paths, return_ty, span_help_and_lint,\n+    trait_ref_of_method, walk_ptrs_ty,\n+};\n+\n+declare_clippy_lint! {\n+    /// **What id does:** Checks for the definition of inherent methods with a signature of `to_string(&self) -> String`.\n+    ///\n+    /// **Why is this bad?** This method is also implicitly defined if a type implements the `Display` trait. As the functionality of `Display` is much more versatile, it should be preferred.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// ** Example:**\n+    ///\n+    /// ```rust,ignore\n+    /// // Bad\n+    /// pub struct A;\n+    ///\n+    /// impl A {\n+    ///     pub fn to_string(&self) -> String {\n+    ///         \"I am A\".to_string()\n+    ///     }\n+    /// }\n+    /// // Good\n+    /// use std::fmt;\n+    ///\n+    /// pub struct A;\n+    ///\n+    /// impl fmt::Display for A {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"I am A\")\n+    ///     }\n+    /// }\n+    /// ```\n+    pub INHERENT_TO_STRING,\n+    style,\n+    \"type implements inherent method 'to_string()', but should instead implement the 'Display' trait\"\n+}\n+\n+declare_clippy_lint! {\n+    /// **What id does:** Checks for the definition of inherent methods with a signature of `to_string(&self) -> String` and if the type implementing this method also implements the `Display` trait.\n+    ///\n+    /// **Why is this bad?** This method is also implicitly defined if a type implements the 'Display' trait. The less versatile inherent method will then shadow the implementation introduced by `Display`.\n+    ///\n+    /// **Known problems:** The inherent method will shadow the implementation by `Display`. If they behave differently, this may lead to confusing situations for users of the respective type.\n+    ///\n+    /// ** Example:**\n+    ///\n+    /// ```rust,ignore\n+    /// // Bad\n+    /// use std::fmt;\n+    ///\n+    /// pub struct A;\n+    ///\n+    /// impl A {\n+    ///     pub fn to_string(&self) -> String {\n+    ///         \"I am A\".to_string()\n+    ///     }\n+    /// }\n+    ///\n+    /// impl fmt::Display for A {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"I am A, too\")\n+    ///     }\n+    /// }\n+    /// // Good\n+    /// use std::fmt;\n+    ///\n+    /// pub struct A;\n+    ///\n+    /// impl fmt::Display for A {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"I am A\")\n+    ///     }\n+    /// }\n+    /// ```\n+    pub INHERENT_TO_STRING_SHADOW_DISPLAY,\n+    correctness,\n+    \"type implements inherent method 'to_string()', which gets shadowed by the implementation of the 'Display' trait \"\n+}\n+\n+declare_lint_pass!(InherentToString => [INHERENT_TO_STRING, INHERENT_TO_STRING_SHADOW_DISPLAY]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InherentToString {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx ImplItem) {\n+        if in_macro_or_desugar(impl_item.span) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            // Check if item is a method, called to_string and has a parameter 'self'\n+            if let ImplItemKind::Method(ref signature, _) = impl_item.node;\n+            if impl_item.ident.name.as_str() == \"to_string\";\n+            let decl = &signature.decl;\n+            if decl.implicit_self.has_implicit_self();\n+\n+            // Check if return type is String\n+            if match_type(cx, return_ty(cx, impl_item.hir_id), &paths::STRING);\n+\n+            // Filters instances of to_string which are required by a trait\n+            if trait_ref_of_method(cx, impl_item.hir_id).is_none();\n+\n+            then {\n+                show_lint(cx, impl_item);\n+            }\n+        }\n+    }\n+}\n+\n+fn show_lint(cx: &LateContext<'_, '_>, item: &ImplItem) {\n+    let display_trait_id =\n+        get_trait_def_id(cx, &[\"core\", \"fmt\", \"Display\"]).expect(\"Failed to get trait ID of 'Display'!\");\n+\n+    // Get the real type of 'self'\n+    let fn_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n+    let self_type = cx.tcx.fn_sig(fn_def_id).input(0);\n+    let self_type = walk_ptrs_ty(self_type.skip_binder());\n+\n+    // Emit either a warning or an error\n+    if implements_trait(cx, self_type, display_trait_id, &[]) {\n+        span_help_and_lint(\n+            cx,\n+            INHERENT_TO_STRING_SHADOW_DISPLAY,\n+            item.span,\n+            &format!(\n+                \"type '{}' implements inherent method 'to_string() -> String' which shadows the implementation of 'Display'\",\n+                self_type.to_string()\n+            ),\n+            &format!(\"remove the inherent method from type '{}'\", self_type.to_string())\n+        );\n+    } else {\n+        span_help_and_lint(\n+            cx,\n+            INHERENT_TO_STRING,\n+            item.span,\n+            &format!(\n+                \"implementation of inherent method 'to_string() -> String' for type '{}'\",\n+                self_type.to_string()\n+            ),\n+            &format!(\"implement trait 'Display' for type '{}' instead\", self_type.to_string()),\n+        );\n+    }\n+}"}, {"sha": "de7a213d7a423442c579c0c651c4d8f225e1ddd6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0513202d25c67ebeb5a02f9fe9dad5dea3296140/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0513202d25c67ebeb5a02f9fe9dad5dea3296140/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0513202d25c67ebeb5a02f9fe9dad5dea3296140", "patch": "@@ -195,6 +195,7 @@ pub mod indexing_slicing;\n pub mod infallible_destructuring_match;\n pub mod infinite_iter;\n pub mod inherent_impl;\n+pub mod inherent_to_string;\n pub mod inline_fn_without_body;\n pub mod int_plus_one;\n pub mod integer_division;\n@@ -585,6 +586,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box path_buf_push_overwrite::PathBufPushOverwrite);\n     reg.register_late_lint_pass(box checked_conversions::CheckedConversions);\n     reg.register_late_lint_pass(box integer_division::IntegerDivision);\n+    reg.register_late_lint_pass(box inherent_to_string::InherentToString);\n \n     reg.register_lint_group(\"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -725,6 +727,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n         infallible_destructuring_match::INFALLIBLE_DESTRUCTURING_MATCH,\n         infinite_iter::INFINITE_ITER,\n+        inherent_to_string::INHERENT_TO_STRING,\n+        inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY,\n         inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n         int_plus_one::INT_PLUS_ONE,\n         invalid_ref::INVALID_REF,\n@@ -913,6 +917,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n         formatting::SUSPICIOUS_ELSE_FORMATTING,\n         infallible_destructuring_match::INFALLIBLE_DESTRUCTURING_MATCH,\n+        inherent_to_string::INHERENT_TO_STRING,\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n         len_zero::LEN_ZERO,\n         let_if_seq::USELESS_LET_IF_SEQ,\n@@ -1075,6 +1080,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         functions::NOT_UNSAFE_PTR_ARG_DEREF,\n         indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n         infinite_iter::INFINITE_ITER,\n+        inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY,\n         inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n         invalid_ref::INVALID_REF,\n         literal_representation::MISTYPED_LITERAL_SUFFIXES,"}, {"sha": "59eb92593bdc119f739fff881e37d95da6540f97", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0513202d25c67ebeb5a02f9fe9dad5dea3296140/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0513202d25c67ebeb5a02f9fe9dad5dea3296140/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=0513202d25c67ebeb5a02f9fe9dad5dea3296140", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 306] = [\n+pub const ALL_LINTS: [Lint; 308] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -728,6 +728,20 @@ pub const ALL_LINTS: [Lint; 306] = [\n         deprecation: None,\n         module: \"infinite_iter\",\n     },\n+    Lint {\n+        name: \"inherent_to_string\",\n+        group: \"style\",\n+        desc: \"type implements inherent method \\'to_string()\\', but should instead implement the \\'Display\\' trait\",\n+        deprecation: None,\n+        module: \"inherent_to_string\",\n+    },\n+    Lint {\n+        name: \"inherent_to_string_shadow_display\",\n+        group: \"correctness\",\n+        desc: \"type implements inherent method \\'to_string()\\', which gets shadowed by the implementation of the \\'Display\\' trait \",\n+        deprecation: None,\n+        module: \"inherent_to_string\",\n+    },\n     Lint {\n         name: \"inline_always\",\n         group: \"pedantic\","}, {"sha": "78f24a3c91811785b2d952673a6b80dce0568046", "filename": "tests/ui/inherent_to_string.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/0513202d25c67ebeb5a02f9fe9dad5dea3296140/tests%2Fui%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0513202d25c67ebeb5a02f9fe9dad5dea3296140/tests%2Fui%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finherent_to_string.rs?ref=0513202d25c67ebeb5a02f9fe9dad5dea3296140", "patch": "@@ -0,0 +1,84 @@\n+#![warn(clippy::inherent_to_string)]\n+//#![deny(clippy::inherent_to_string_shadow)]\n+\n+use std::fmt;\n+\n+trait FalsePositive {\n+    fn to_string(&self) -> String;\n+}\n+\n+struct A;\n+struct B;\n+struct C;\n+struct D;\n+struct E;\n+\n+impl A {\n+    // Should be detected; emit warning\n+    fn to_string(&self) -> String {\n+        \"A.to_string()\".to_string()\n+    }\n+\n+    // Should not be detected as it does not match the function signature\n+    fn to_str(&self) -> String {\n+        \"A.to_str()\".to_string()\n+    }\n+}\n+\n+// Should not be detected as it is a free function\n+fn to_string() -> String {\n+    \"free to_string()\".to_string()\n+}\n+\n+impl B {\n+    // Should not be detected, wrong return type\n+    fn to_string(&self) -> i32 {\n+        42\n+    }\n+}\n+\n+impl C {\n+    // Should be detected and emit error as C also implements Display\n+    fn to_string(&self) -> String {\n+        \"C.to_string()\".to_string()\n+    }\n+}\n+\n+impl fmt::Display for C {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"impl Display for C\")\n+    }\n+}\n+\n+impl FalsePositive for D {\n+    // Should not be detected, as it is a trait function\n+    fn to_string(&self) -> String {\n+        \"impl FalsePositive for D\".to_string()\n+    }\n+}\n+\n+impl E {\n+    // Should not be detected, as it is not bound to an instance\n+    fn to_string() -> String {\n+        \"E::to_string()\".to_string()\n+    }\n+}\n+\n+fn main() {\n+    let a = A;\n+    a.to_string();\n+    a.to_str();\n+\n+    to_string();\n+\n+    let b = B;\n+    b.to_string();\n+\n+    let c = C;\n+    C.to_string();\n+\n+    let d = D;\n+    d.to_string();\n+\n+    E::to_string();\n+}"}, {"sha": "85fb06a22656f64529bffce974f347209b0fa6f2", "filename": "tests/ui/inherent_to_string.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0513202d25c67ebeb5a02f9fe9dad5dea3296140/tests%2Fui%2Finherent_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0513202d25c67ebeb5a02f9fe9dad5dea3296140/tests%2Fui%2Finherent_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finherent_to_string.stderr?ref=0513202d25c67ebeb5a02f9fe9dad5dea3296140", "patch": "@@ -0,0 +1,24 @@\n+error: implementation of inherent method 'to_string() -> String' for type 'A'\n+  --> $DIR/inherent_to_string.rs:18:5\n+   |\n+LL | /     fn to_string(&self) -> String {\n+LL | |         \"A.to_string()\".to_string()\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::inherent-to-string` implied by `-D warnings`\n+   = help: implement trait 'Display' for type 'A' instead\n+\n+error: type 'C' implements inherent method 'to_string() -> String' which shadows the implementation of 'Display'\n+  --> $DIR/inherent_to_string.rs:42:5\n+   |\n+LL | /     fn to_string(&self) -> String {\n+LL | |         \"C.to_string()\".to_string()\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: #[deny(clippy::inherent_to_string_shadow_display)] on by default\n+   = help: remove the inherent method from type 'C'\n+\n+error: aborting due to 2 previous errors\n+"}]}