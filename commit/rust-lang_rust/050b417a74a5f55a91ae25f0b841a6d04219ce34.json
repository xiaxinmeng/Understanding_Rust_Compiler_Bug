{"sha": "050b417a74a5f55a91ae25f0b841a6d04219ce34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MGI0MTdhNzRhNWY1NWE5MWFlMjVmMGI4NDFhNmQwNDIxOWNlMzQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-26T12:40:27Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-26T12:40:27Z"}, "message": "Introduce the CallTarget enum", "tree": {"sha": "8ef2b1f2cb6a92f8ed2a8d5470bab757dec9b00d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ef2b1f2cb6a92f8ed2a8d5470bab757dec9b00d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/050b417a74a5f55a91ae25f0b841a6d04219ce34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/050b417a74a5f55a91ae25f0b841a6d04219ce34", "html_url": "https://github.com/rust-lang/rust/commit/050b417a74a5f55a91ae25f0b841a6d04219ce34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/050b417a74a5f55a91ae25f0b841a6d04219ce34/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02db151b0030794deb336e18f6bafab565456844", "url": "https://api.github.com/repos/rust-lang/rust/commits/02db151b0030794deb336e18f6bafab565456844", "html_url": "https://github.com/rust-lang/rust/commit/02db151b0030794deb336e18f6bafab565456844"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "a8596707c8e184de6e1b215b9ba53eab6308e157", "filename": "src/abi/mod.rs", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/050b417a74a5f55a91ae25f0b841a6d04219ce34/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050b417a74a5f55a91ae25f0b841a6d04219ce34/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=050b417a74a5f55a91ae25f0b841a6d04219ce34", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::layout::FnAbiExt;\n use rustc_target::abi::call::{Conv, FnAbi};\n use rustc_target::spec::abi::Abi;\n \n-use cranelift_codegen::ir::AbiParam;\n+use cranelift_codegen::ir::{AbiParam, SigRef};\n use smallvec::smallvec;\n \n use self::pass_mode::*;\n@@ -380,40 +380,53 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         args.iter().map(|arg| codegen_operand(fx, arg)).collect::<Vec<_>>()\n     };\n \n-    //   | indirect call target\n-    //   |         | the first argument to be passed\n-    //   v         v\n+    enum CallTarget {\n+        Direct(FuncRef),\n+        Indirect(SigRef, Value),\n+    }\n+\n     let (func_ref, first_arg) = match instance {\n         // Trait object call\n         Some(Instance { def: InstanceDef::Virtual(_, idx), .. }) => {\n             if fx.clif_comments.enabled() {\n                 let nop_inst = fx.bcx.ins().nop();\n                 fx.add_comment(\n                     nop_inst,\n-                    format!(\"virtual call; self arg pass mode: {:?}\", &fn_abi.args[0],),\n+                    format!(\"virtual call; self arg pass mode: {:?}\", &fn_abi.args[0]),\n                 );\n             }\n+\n             let (ptr, method) = crate::vtable::get_ptr_and_method_ref(fx, args[0], idx);\n-            (Some(method), smallvec![ptr])\n+            let sig = clif_sig_from_fn_abi(fx.tcx, fx.triple(), &fn_abi);\n+            let sig = fx.bcx.import_signature(sig);\n+\n+            (CallTarget::Indirect(sig, method), smallvec![ptr])\n         }\n \n         // Normal call\n-        Some(_) => (\n-            None,\n-            args.get(0)\n-                .map(|arg| adjust_arg_for_abi(fx, *arg, &fn_abi.args[0]))\n-                .unwrap_or(smallvec![]),\n-        ),\n+        Some(instance) => {\n+            let func_ref = fx.get_function_ref(instance);\n+            (\n+                CallTarget::Direct(func_ref),\n+                args.get(0)\n+                    .map(|arg| adjust_arg_for_abi(fx, *arg, &fn_abi.args[0]))\n+                    .unwrap_or(smallvec![]),\n+            )\n+        }\n \n         // Indirect call\n         None => {\n             if fx.clif_comments.enabled() {\n                 let nop_inst = fx.bcx.ins().nop();\n                 fx.add_comment(nop_inst, \"indirect call\");\n             }\n+\n             let func = codegen_operand(fx, func).load_scalar(fx);\n+            let sig = clif_sig_from_fn_abi(fx.tcx, fx.triple(), &fn_abi);\n+            let sig = fx.bcx.import_signature(sig);\n+\n             (\n-                Some(func),\n+                CallTarget::Indirect(sig, func),\n                 args.get(0)\n                     .map(|arg| adjust_arg_for_abi(fx, *arg, &fn_abi.args[0]))\n                     .unwrap_or(smallvec![]),\n@@ -452,14 +465,11 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n                 assert_eq!(fn_abi.args.len(), regular_args_count);\n             }\n \n-            let call_inst = if let Some(func_ref) = func_ref {\n-                let sig = clif_sig_from_fn_abi(fx.tcx, fx.triple(), &fn_abi);\n-                let sig = fx.bcx.import_signature(sig);\n-                fx.bcx.ins().call_indirect(sig, func_ref, &call_args)\n-            } else {\n-                let func_ref =\n-                    fx.get_function_ref(instance.expect(\"non-indirect call on non-FnDef type\"));\n-                fx.bcx.ins().call(func_ref, &call_args)\n+            let call_inst = match func_ref {\n+                CallTarget::Direct(func_ref) => fx.bcx.ins().call(func_ref, &call_args),\n+                CallTarget::Indirect(sig, func_ptr) => {\n+                    fx.bcx.ins().call_indirect(sig, func_ptr, &call_args)\n+                }\n             };\n \n             (call_inst, call_args)"}]}