{"sha": "54f4f396d90e492fe9ede8608fe1a870e21fd10e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZjRmMzk2ZDkwZTQ5MmZlOWVkZTg2MDhmZTFhODcwZTIxZmQxMGU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-08T17:36:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-18T12:47:37Z"}, "message": "convert the `closure_kinds` map to just store the origin information\n\nThe closure kinds themselves are now completely found in the `ClosureSubsts`.", "tree": {"sha": "8d9d2134fa8af23821a479633f8800c0e175d299", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d9d2134fa8af23821a479633f8800c0e175d299"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54f4f396d90e492fe9ede8608fe1a870e21fd10e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54f4f396d90e492fe9ede8608fe1a870e21fd10e", "html_url": "https://github.com/rust-lang/rust/commit/54f4f396d90e492fe9ede8608fe1a870e21fd10e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54f4f396d90e492fe9ede8608fe1a870e21fd10e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb26e30b915ada4debd0d10ad95a9f6348faf4d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb26e30b915ada4debd0d10ad95a9f6348faf4d5", "html_url": "https://github.com/rust-lang/rust/commit/eb26e30b915ada4debd0d10ad95a9f6348faf4d5"}], "stats": {"total": 223, "additions": 108, "deletions": 115}, "files": [{"sha": "36286a3ac883cfd9ea8930ee8281d5c562af07ae", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=54f4f396d90e492fe9ede8608fe1a870e21fd10e", "patch": "@@ -51,6 +51,7 @@\n #![feature(inclusive_range_syntax)]\n #![cfg_attr(windows, feature(libc))]\n #![feature(macro_vis_matcher)]\n+#![feature(match_default_bindings)]\n #![feature(never_type)]\n #![feature(nonzero)]\n #![feature(quote)]"}, {"sha": "1636ab40d39eac04f4d26c60be92bcae70616da4", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=54f4f396d90e492fe9ede8608fe1a870e21fd10e", "patch": "@@ -753,16 +753,16 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             ty::TyClosure(closure_def_id, closure_substs) => {\n                 match self.infcx {\n                     // During upvar inference we may not know the\n-                    // closure kind, just use `Fn`.\n+                    // closure kind, just use the LATTICE_BOTTOM value.\n                     Some(infcx) =>\n                         infcx.closure_kind(closure_def_id, closure_substs)\n-                             .unwrap_or(ty::ClosureKind::Fn),\n+                             .unwrap_or(ty::ClosureKind::LATTICE_BOTTOM),\n \n                     None =>\n                         self.tcx.global_tcx()\n                                 .lift(&closure_substs)\n                                 .expect(\"no inference cx, but inference variables in closure ty\")\n-                                .closure_kind(closure_def_id, self.tcx.global_tcx())\n+                                .closure_kind(closure_def_id, self.tcx.global_tcx()),\n                 }\n             }\n             ref t => span_bug!(span, \"unexpected type for fn in mem_categorization: {:?}\", t),"}, {"sha": "46ec2be4a1f9bf2765347cde135c60652d3fddb2", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=54f4f396d90e492fe9ede8608fe1a870e21fd10e", "patch": "@@ -663,14 +663,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         if let Some(tables) = self.in_progress_tables {\n                             let tables = tables.borrow();\n                             let closure_hir_id = self.tcx.hir.node_to_hir_id(node_id);\n-                            match tables.closure_kinds().get(closure_hir_id) {\n-                                Some(&(ty::ClosureKind::FnOnce, Some((span, name)))) => {\n-                                    err.span_note(span, &format!(\n+                            match (found_kind, tables.closure_kind_origins().get(closure_hir_id)) {\n+                                (ty::ClosureKind::FnOnce, Some((span, name))) => {\n+                                    err.span_note(*span, &format!(\n                                         \"closure is `FnOnce` because it moves the \\\n                                          variable `{}` out of its environment\", name));\n                                 },\n-                                Some(&(ty::ClosureKind::FnMut, Some((span, name)))) => {\n-                                    err.span_note(span, &format!(\n+                                (ty::ClosureKind::FnMut, Some((span, name))) => {\n+                                    err.span_note(*span, &format!(\n                                         \"closure is `FnMut` because it mutates the \\\n                                          variable `{}` here\", name));\n                                 },"}, {"sha": "6bd1a3564b1c097e64cbb5ccfddfe436f5b81a33", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=54f4f396d90e492fe9ede8608fe1a870e21fd10e", "patch": "@@ -359,9 +359,9 @@ pub struct TypeckTables<'tcx> {\n     /// Records the type of each closure.\n     closure_tys: ItemLocalMap<ty::PolyFnSig<'tcx>>,\n \n-    /// Records the kind of each closure and the span and name of the variable\n-    /// that caused the closure to be this kind.\n-    closure_kinds: ItemLocalMap<(ty::ClosureKind, Option<(Span, ast::Name)>)>,\n+    /// Records the reasons that we picked the kind of each closure;\n+    /// not all closures are present in the map.\n+    closure_kind_origins: ItemLocalMap<(Span, ast::Name)>,\n \n     generator_sigs: ItemLocalMap<Option<ty::GenSig<'tcx>>>,\n \n@@ -414,7 +414,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             generator_sigs: ItemLocalMap(),\n             generator_interiors: ItemLocalMap(),\n             closure_tys: ItemLocalMap(),\n-            closure_kinds: ItemLocalMap(),\n+            closure_kind_origins: ItemLocalMap(),\n             liberated_fn_sigs: ItemLocalMap(),\n             fru_field_types: ItemLocalMap(),\n             cast_kinds: ItemLocalMap(),\n@@ -624,19 +624,17 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n     }\n \n-    pub fn closure_kinds(&self) -> LocalTableInContext<(ty::ClosureKind,\n-                                                        Option<(Span, ast::Name)>)> {\n+    pub fn closure_kind_origins(&self) -> LocalTableInContext<(Span, ast::Name)> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n-            data: &self.closure_kinds\n+            data: &self.closure_kind_origins\n         }\n     }\n \n-    pub fn closure_kinds_mut(&mut self)\n-            -> LocalTableInContextMut<(ty::ClosureKind, Option<(Span, ast::Name)>)> {\n+    pub fn closure_kind_origins_mut(&mut self) -> LocalTableInContextMut<(Span, ast::Name)> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n-            data: &mut self.closure_kinds\n+            data: &mut self.closure_kind_origins\n         }\n     }\n \n@@ -733,7 +731,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for TypeckTables<'gcx> {\n             ref pat_adjustments,\n             ref upvar_capture_map,\n             ref closure_tys,\n-            ref closure_kinds,\n+            ref closure_kind_origins,\n             ref liberated_fn_sigs,\n             ref fru_field_types,\n \n@@ -776,7 +774,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for TypeckTables<'gcx> {\n             });\n \n             closure_tys.hash_stable(hcx, hasher);\n-            closure_kinds.hash_stable(hcx, hasher);\n+            closure_kind_origins.hash_stable(hcx, hasher);\n             liberated_fn_sigs.hash_stable(hcx, hasher);\n             fru_field_types.hash_stable(hcx, hasher);\n             cast_kinds.hash_stable(hcx, hasher);"}, {"sha": "450e48f5fdcc76919bc8b4b53af907581bf4dc9a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=54f4f396d90e492fe9ede8608fe1a870e21fd10e", "patch": "@@ -1937,6 +1937,9 @@ pub enum ClosureKind {\n }\n \n impl<'a, 'tcx> ClosureKind {\n+    // This is the initial value used when doing upvar inference.\n+    pub const LATTICE_BOTTOM: ClosureKind = ClosureKind::Fn;\n+\n     pub fn trait_did(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> DefId {\n         match *self {\n             ClosureKind::Fn => tcx.require_lang_item(FnTraitLangItem),"}, {"sha": "36b397bbbe5465002d26c68f70363e2ebaf9cacb", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=54f4f396d90e492fe9ede8608fe1a870e21fd10e", "patch": "@@ -655,10 +655,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     ty::TypeVariants::TyClosure(id, _) => {\n                         let node_id = self.tcx.hir.as_local_node_id(id).unwrap();\n                         let hir_id = self.tcx.hir.node_to_hir_id(node_id);\n-                        if let Some(&(ty::ClosureKind::FnOnce, Some((span, name)))) =\n-                            self.tables.closure_kinds().get(hir_id)\n-                        {\n-                            err.span_note(span, &format!(\n+                        if let Some((span, name)) = self.tables.closure_kind_origins().get(hir_id) {\n+                            err.span_note(*span, &format!(\n                                 \"closure cannot be invoked more than once because \\\n                                 it moves the variable `{}` out of its environment\",\n                                 name"}, {"sha": "c8b71be86f862ef832dfaad95e23f51a39f82405", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=54f4f396d90e492fe9ede8608fe1a870e21fd10e", "patch": "@@ -15,6 +15,7 @@\n \n #![allow(non_camel_case_types)]\n \n+#![feature(match_default_bindings)]\n #![feature(quote)]\n \n #[macro_use] extern crate log;"}, {"sha": "2052160ac47084c1d513af2fd445ea7613defdcf", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=54f4f396d90e492fe9ede8608fe1a870e21fd10e", "patch": "@@ -140,7 +140,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         self.tables.borrow_mut().closure_tys_mut().insert(expr.hir_id, sig);\n         if let Some(kind) = opt_kind {\n-            self.tables.borrow_mut().closure_kinds_mut().insert(expr.hir_id, (kind, None));\n             self.demand_eqtype(expr.span,\n                                kind.to_ty(self.tcx),\n                                substs.closure_kind_ty(expr_def_id, self.tcx));"}, {"sha": "2e0d0ddfc393614047cf04cc84771f449a8534ac", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 81, "deletions": 88, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=54f4f396d90e492fe9ede8608fe1a870e21fd10e", "patch": "@@ -45,16 +45,14 @@ use super::FnCtxt;\n use middle::expr_use_visitor as euv;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Categorization;\n+use rustc::hir::def_id::DefId;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::infer::UpvarRegion;\n use syntax::ast;\n use syntax_pos::Span;\n use rustc::hir;\n use rustc::hir::def_id::LocalDefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc::util::nodemap::FxHashMap;\n-\n-use std::collections::hash_map::Entry;\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn closure_analyze(&self, body: &'gcx hir::Body) {\n@@ -98,7 +96,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         span: Span,\n         body: &hir::Body,\n         capture_clause: hir::CaptureClause,\n-        gen: bool,\n+        is_generator: bool,\n     ) {\n         /*!\n          * Analysis starting point.\n@@ -110,24 +108,24 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             body.id()\n         );\n \n-        let infer_kind = if gen {\n-            false\n-        } else {\n-            match self.tables\n-                .borrow_mut()\n-                .closure_kinds_mut()\n-                .entry(closure_hir_id)\n-            {\n-                Entry::Occupied(_) => false,\n-                Entry::Vacant(entry) => {\n-                    debug!(\"check_closure: adding closure {:?} as Fn\", closure_node_id);\n-                    entry.insert((ty::ClosureKind::Fn, None));\n-                    true\n-                }\n+        // Extract the type of the closure.\n+        let (closure_def_id, closure_substs) = match self.node_ty(closure_hir_id).sty {\n+            ty::TyClosure(def_id, substs) | ty::TyGenerator(def_id, substs, _) => (def_id, substs),\n+            ref t => {\n+                span_bug!(\n+                    span,\n+                    \"type of closure expr {:?} is not a closure {:?}\",\n+                    closure_node_id,\n+                    t\n+                );\n             }\n         };\n \n-        let closure_def_id = self.tcx.hir.local_def_id(closure_node_id);\n+        let infer_kind = if is_generator {\n+            false\n+        } else {\n+            self.closure_kind(closure_def_id, closure_substs).is_none()\n+        };\n \n         self.tcx.with_freevars(closure_node_id, |freevars| {\n             for freevar in freevars {\n@@ -157,24 +155,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         });\n \n-        // Extract the type of the closure.\n-        let (def_id, closure_substs) = match self.node_ty(closure_hir_id).sty {\n-            ty::TyClosure(def_id, substs) | ty::TyGenerator(def_id, substs, _) => (def_id, substs),\n-            ref t => {\n-                span_bug!(\n-                    span,\n-                    \"type of closure expr {:?} is not a closure {:?}\",\n-                    closure_node_id,\n-                    t\n-                );\n-            }\n-        };\n-\n         let body_owner_def_id = self.tcx.hir.body_owner_def_id(body.id());\n         let region_scope_tree = &self.tcx.region_scope_tree(body_owner_def_id);\n         let mut delegate = InferBorrowKind {\n             fcx: self,\n-            adjust_closure_kinds: FxHashMap(),\n+            closure_def_id: closure_def_id,\n+            current_closure_kind: ty::ClosureKind::LATTICE_BOTTOM,\n+            current_origin: None,\n             adjust_upvar_captures: ty::UpvarCaptureMap::default(),\n         };\n         euv::ExprUseVisitor::with_infer(\n@@ -185,22 +172,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             &self.tables.borrow(),\n         ).consume_body(body);\n \n-        // Write the adjusted values back into the main tables.\n         if infer_kind {\n-            let opt_adjusted = delegate.adjust_closure_kinds.remove(&closure_def_id.to_local());\n-            let closure_kind_ty = closure_substs.closure_kind_ty(def_id, self.tcx);\n-            if let Some((kind, origin)) = opt_adjusted {\n+            // Unify the (as yet unbound) type variable in the closure\n+            // substs with the kind we inferred.\n+            let inferred_kind = delegate.current_closure_kind;\n+            let closure_kind_ty = closure_substs.closure_kind_ty(closure_def_id, self.tcx);\n+            self.demand_eqtype(span, inferred_kind.to_ty(self.tcx), closure_kind_ty);\n+\n+            // If we have an origin, store it.\n+            if let Some(origin) = delegate.current_origin {\n                 self.tables\n                     .borrow_mut()\n-                    .closure_kinds_mut()\n-                    .insert(closure_hir_id, (kind, origin));\n-\n-                self.demand_eqtype(span, kind.to_ty(self.tcx), closure_kind_ty);\n-            } else {\n-                // If there are only reads, or no upvars, then the\n-                // default of `Fn` will never *have* to be adjusted, so there will be\n-                // no entry in the map.\n-                self.demand_eqtype(span, ty::ClosureKind::Fn.to_ty(self.tcx), closure_kind_ty);\n+                    .closure_kind_origins_mut()\n+                    .insert(closure_hir_id, origin);\n             }\n         }\n \n@@ -230,19 +214,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             final_upvar_tys\n         );\n         for (upvar_ty, final_upvar_ty) in closure_substs\n-            .upvar_tys(def_id, self.tcx)\n+            .upvar_tys(closure_def_id, self.tcx)\n             .zip(final_upvar_tys)\n         {\n             self.demand_eqtype(span, final_upvar_ty, upvar_ty);\n         }\n \n         // If we are also inferred the closure kind here,\n         // process any deferred resolutions.\n-        if infer_kind {\n-            let deferred_call_resolutions = self.remove_deferred_call_resolutions(closure_def_id);\n-            for deferred_call_resolution in deferred_call_resolutions {\n-                deferred_call_resolution.resolve(self);\n-            }\n+        let deferred_call_resolutions = self.remove_deferred_call_resolutions(closure_def_id);\n+        for deferred_call_resolution in deferred_call_resolutions {\n+            deferred_call_resolution.resolve(self);\n         }\n     }\n \n@@ -294,7 +276,24 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n struct InferBorrowKind<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n-    adjust_closure_kinds: FxHashMap<LocalDefId, (ty::ClosureKind, Option<(Span, ast::Name)>)>,\n+\n+    // The def-id of the closure whose kind and upvar accesses are being inferred.\n+    closure_def_id: DefId,\n+\n+    // The kind that we have inferred that the current closure\n+    // requires. Note that we *always* infer a minimal kind, even if\n+    // we don't always *use* that in the final result (i.e., sometimes\n+    // we've taken the closure kind from the expectations instead, and\n+    // for generators we don't even implement the closure traits\n+    // really).\n+    current_closure_kind: ty::ClosureKind,\n+\n+    // If we modified `current_closure_kind`, this field contains a `Some()` with the\n+    // variable access that caused us to do so.\n+    current_origin: Option<(Span, ast::Name)>,\n+\n+    // For each upvar that we access, we track the minimal kind of\n+    // access we need (ref, ref mut, move, etc).\n     adjust_upvar_captures: ty::UpvarCaptureMap<'tcx>,\n }\n \n@@ -542,42 +541,36 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n             var_name\n         );\n \n-        let closure_kind = self.adjust_closure_kinds\n-            .get(&closure_id)\n-            .cloned()\n-            .or_else(|| {\n-                let closure_id = self.fcx.tcx.hir.local_def_id_to_hir_id(closure_id);\n-                self.fcx\n-                    .tables\n-                    .borrow()\n-                    .closure_kinds()\n-                    .get(closure_id)\n-                    .cloned()\n-            });\n-\n-        if let Some((existing_kind, _)) = closure_kind {\n-            debug!(\n-                \"adjust_closure_kind: closure_id={:?}, existing_kind={:?}, new_kind={:?}\",\n-                closure_id,\n-                existing_kind,\n-                new_kind\n-            );\n-\n-            match (existing_kind, new_kind) {\n-                (ty::ClosureKind::Fn, ty::ClosureKind::Fn) |\n-                (ty::ClosureKind::FnMut, ty::ClosureKind::Fn) |\n-                (ty::ClosureKind::FnMut, ty::ClosureKind::FnMut) |\n-                (ty::ClosureKind::FnOnce, _) => {\n-                    // no change needed\n-                }\n+        // Is this the closure whose kind is currently being inferred?\n+        if closure_id.to_def_id() != self.closure_def_id {\n+            debug!(\"adjust_closure_kind: not current closure\");\n+            return;\n+        }\n \n-                (ty::ClosureKind::Fn, ty::ClosureKind::FnMut) |\n-                (ty::ClosureKind::Fn, ty::ClosureKind::FnOnce) |\n-                (ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n-                    // new kind is stronger than the old kind\n-                    self.adjust_closure_kinds\n-                        .insert(closure_id, (new_kind, Some((upvar_span, var_name))));\n-                }\n+        // closures start out as `Fn`.\n+        let existing_kind = self.current_closure_kind;\n+\n+        debug!(\n+            \"adjust_closure_kind: closure_id={:?}, existing_kind={:?}, new_kind={:?}\",\n+            closure_id,\n+            existing_kind,\n+            new_kind\n+        );\n+\n+        match (existing_kind, new_kind) {\n+            (ty::ClosureKind::Fn, ty::ClosureKind::Fn) |\n+            (ty::ClosureKind::FnMut, ty::ClosureKind::Fn) |\n+            (ty::ClosureKind::FnMut, ty::ClosureKind::FnMut) |\n+            (ty::ClosureKind::FnOnce, _) => {\n+                // no change needed\n+            }\n+\n+            (ty::ClosureKind::Fn, ty::ClosureKind::FnMut) |\n+            (ty::ClosureKind::Fn, ty::ClosureKind::FnOnce) |\n+            (ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n+                // new kind is stronger than the old kind\n+                self.current_closure_kind = new_kind;\n+                self.current_origin = Some((upvar_span, var_name));\n             }\n         }\n     }"}, {"sha": "48af2f0eff715b13b88489656146db60c98c2f75", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f4f396d90e492fe9ede8608fe1a870e21fd10e/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=54f4f396d90e492fe9ede8608fe1a870e21fd10e", "patch": "@@ -252,12 +252,12 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n             self.tables.closure_tys_mut().insert(hir_id, closure_ty);\n         }\n \n-        for (&id, &closure_kind) in fcx_tables.closure_kinds().iter() {\n+        for (&id, &origin) in fcx_tables.closure_kind_origins().iter() {\n             let hir_id = hir::HirId {\n                 owner: common_local_id_root.index,\n                 local_id: id,\n             };\n-            self.tables.closure_kinds_mut().insert(hir_id, closure_kind);\n+            self.tables.closure_kind_origins_mut().insert(hir_id, origin);\n         }\n     }\n "}]}