{"sha": "16e576056440fcf77d43f69f1186c3359e08b291", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZTU3NjA1NjQ0MGZjZjc3ZDQzZjY5ZjExODZjMzM1OWUwOGIyOTE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-15T10:00:16Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-15T10:53:32Z"}, "message": "Fix bug in safe-reference checker\n\nAt some point, a refactor broke the code that handled local declarations\nto no longer descend into the initializer expressions.\n\nCloses #1846", "tree": {"sha": "ef8ef43acaf609942074a46f67ead249a562f587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef8ef43acaf609942074a46f67ead249a562f587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16e576056440fcf77d43f69f1186c3359e08b291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16e576056440fcf77d43f69f1186c3359e08b291", "html_url": "https://github.com/rust-lang/rust/commit/16e576056440fcf77d43f69f1186c3359e08b291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16e576056440fcf77d43f69f1186c3359e08b291/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ff5ba085de572f8efaf501b88eb831d8ee40d47", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff5ba085de572f8efaf501b88eb831d8ee40d47", "html_url": "https://github.com/rust-lang/rust/commit/9ff5ba085de572f8efaf501b88eb831d8ee40d47"}], "stats": {"total": 60, "additions": 24, "deletions": 36}, "files": [{"sha": "2ae8de9abccc5e5a2df8d849170bb63c3a3e49bc", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/16e576056440fcf77d43f69f1186c3359e08b291/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e576056440fcf77d43f69f1186c3359e08b291/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=16e576056440fcf77d43f69f1186c3359e08b291", "patch": "@@ -112,7 +112,7 @@ fn visit_expr(cx: @ctx, ex: @ast::expr, sc: scope, v: vt<scope>) {\n       }\n       ast::expr_alt(input, arms, _) { check_alt(*cx, input, arms, sc, v); }\n       ast::expr_for(decl, seq, blk) {\n-        v.visit_expr(seq, sc, v);\n+        visit_expr(cx, seq, sc, v);\n         check_loop(*cx, sc) {|| check_for(*cx, decl, seq, blk, sc, v); }\n       }\n       ast::expr_path(pt) {\n@@ -125,11 +125,13 @@ fn visit_expr(cx: @ctx, ex: @ast::expr, sc: scope, v: vt<scope>) {\n         handled = false;\n       }\n       ast::expr_move(dest, src) {\n-        check_assign(cx, dest, src, sc, v);\n+        visit_expr(cx, src, sc, v);\n+        check_lval(cx, dest, sc, v);\n         check_lval(cx, src, sc, v);\n       }\n       ast::expr_assign(dest, src) | ast::expr_assign_op(_, dest, src) {\n-        check_assign(cx, dest, src, sc, v);\n+        visit_expr(cx, src, sc, v);\n+        check_lval(cx, dest, sc, v);\n       }\n       ast::expr_if(c, then, els) { check_if(c, then, els, sc, v); }\n       ast::expr_while(_, _) | ast::expr_do_while(_, _) {\n@@ -153,6 +155,8 @@ fn visit_block(cx: @ctx, b: ast::blk, sc: scope, v: vt<scope>) {\n                   some(init) {\n                     if init.op == ast::init_move {\n                         check_lval(cx, init.expr, sc, v);\n+                    } else {\n+                        visit_expr(cx, init.expr, sc, v);\n                     }\n                   }\n                   none { }\n@@ -354,7 +358,7 @@ fn check_alt(cx: ctx, input: @ast::expr, arms: [ast::arm], sc: scope,\n         }\n         *sc.invalid = orig_invalid;\n         visit::visit_arm(a, {bs: new_bs with sc}, v);\n-        all_invalid = append_invalid(all_invalid, *sc.invalid, orig_invalid);\n+        all_invalid = join_invalid(all_invalid, *sc.invalid);\n     }\n     *sc.invalid = all_invalid;\n }\n@@ -423,12 +427,6 @@ fn check_lval(cx: @ctx, dest: @ast::expr, sc: scope, v: vt<scope>) {\n     }\n }\n \n-fn check_assign(cx: @ctx, dest: @ast::expr, src: @ast::expr, sc: scope,\n-                v: vt<scope>) {\n-    visit_expr(cx, src, sc, v);\n-    check_lval(cx, dest, sc, v);\n-}\n-\n fn check_if(c: @ast::expr, then: ast::blk, els: option<@ast::expr>,\n             sc: scope, v: vt<scope>) {\n     v.visit_expr(c, sc, v);\n@@ -437,7 +435,7 @@ fn check_if(c: @ast::expr, then: ast::blk, els: option<@ast::expr>,\n     let then_invalid = *sc.invalid;\n     *sc.invalid = orig_invalid;\n     visit::visit_expr_opt(els, sc, v);\n-    *sc.invalid = append_invalid(*sc.invalid, then_invalid, orig_invalid);\n+    *sc.invalid = join_invalid(*sc.invalid, then_invalid);\n }\n \n fn check_loop(cx: ctx, sc: scope, checker: fn()) {\n@@ -672,24 +670,14 @@ fn find_invalid(id: node_id, lst: list<@invalid>)\n     ret none;\n }\n \n-fn append_invalid(dest: list<@invalid>, src: list<@invalid>,\n-                  stop: list<@invalid>) -> list<@invalid> {\n-    let cur = src, dest = dest;\n-    while cur != stop {\n-        alt cur {\n-          list::cons(head, tail) {\n-            if is_none(find_invalid(head.node_id, dest)) {\n-                dest = list::cons(head, @dest);\n-            }\n-            cur = *tail;\n-          }\n-          list::nil {\n-              fail \"append_invalid: stop doesn't appear to be \\\n-                 a postfix of src\";\n-          }\n-        }\n+fn join_invalid(a: list<@invalid>, b: list<@invalid>) -> list<@invalid> {\n+    let result = a;\n+    list::iter(b) {|elt|\n+        let found = false;\n+        list::iter(a) {|e| if e == elt { found = true; } }\n+        if !found { result = list::cons(elt, @result); }\n     }\n-    ret dest;\n+    result\n }\n \n fn filter_invalid(src: list<@invalid>, bs: [binding]) -> list<@invalid> {"}, {"sha": "9021fe485cb4efcbd229119a5370aca90d4ab7f1", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16e576056440fcf77d43f69f1186c3359e08b291/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e576056440fcf77d43f69f1186c3359e08b291/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=16e576056440fcf77d43f69f1186c3359e08b291", "patch": "@@ -1378,13 +1378,13 @@ fn lookup_glob_in_mod(e: env, info: @indexed_mod, sp: span, id: ident,\n     // absence takes the place of todo()\n     if !info.glob_imported_names.contains_key(id) {\n         info.glob_imported_names.insert(id, glob_resolving(sp));\n-        let val = lookup_in_globs(e, info.glob_imports, sp, id,\n-                                  // kludge\n-                                  (if wanted_ns == ns_val(ns_a_enum)\n-                                  { ns_val(ns_a_enum) }\n-                                  else { ns_val(ns_any_value) }), dr);\n-        let typ = lookup_in_globs(e, info.glob_imports, sp, id, ns_type, dr);\n-        let md = lookup_in_globs(e, info.glob_imports, sp, id, ns_module, dr);\n+        // kludge\n+        let val_ns = if wanted_ns == ns_val(ns_a_enum) { ns_val(ns_a_enum) }\n+                     else { ns_val(ns_any_value) };\n+        let globs = info.glob_imports;\n+        let val = lookup_in_globs(e, globs, sp, id, val_ns, dr);\n+        let typ = lookup_in_globs(e, globs, sp, id, ns_type, dr);\n+        let md = lookup_in_globs(e, globs, sp, id, ns_module, dr);\n         info.glob_imported_names.insert(id, glob_resolved(val, typ, md));\n     }\n     alt info.glob_imported_names.get(id) {"}, {"sha": "c9694739b493cdbfeb47cd7dde5503a4c9f9fcd0", "filename": "src/test/compile-fail/cross-crate-glob-collision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16e576056440fcf77d43f69f1186c3359e08b291/src%2Ftest%2Fcompile-fail%2Fcross-crate-glob-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e576056440fcf77d43f69f1186c3359e08b291/src%2Ftest%2Fcompile-fail%2Fcross-crate-glob-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-crate-glob-collision.rs?ref=16e576056440fcf77d43f69f1186c3359e08b291", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:'member' is glob-imported from multiple different modules\n+// error-pattern: is glob-imported from multiple different modules\n // issue #482\n \n use std;"}]}