{"sha": "a64180f67f148c0d13f30a8137dc4b8cc2b28757", "node_id": "C_kwDOAAsO6NoAKGE2NDE4MGY2N2YxNDhjMGQxM2YzMGE4MTM3ZGM0YjhjYzJiMjg3NTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-06T15:26:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-06T15:26:21Z"}, "message": "Auto merge of #94673 - matthiaskrgr:rollup-2tnifg9, r=matthiaskrgr\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #93412 (Improve rustdoc const bounds)\n - #94617 (Update `itertools`)\n - #94669 (Update -Z unpretty error message)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "75cfefe9f22426e30d3028073485a04567a20794", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75cfefe9f22426e30d3028073485a04567a20794"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a64180f67f148c0d13f30a8137dc4b8cc2b28757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a64180f67f148c0d13f30a8137dc4b8cc2b28757", "html_url": "https://github.com/rust-lang/rust/commit/a64180f67f148c0d13f30a8137dc4b8cc2b28757", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a64180f67f148c0d13f30a8137dc4b8cc2b28757/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d53e19540e7e201042c8b07a236e5351de085a42", "url": "https://api.github.com/repos/rust-lang/rust/commits/d53e19540e7e201042c8b07a236e5351de085a42", "html_url": "https://github.com/rust-lang/rust/commit/d53e19540e7e201042c8b07a236e5351de085a42"}, {"sha": "b7ccab4d401928c755f6876fea5d31c8e0d0fc49", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ccab4d401928c755f6876fea5d31c8e0d0fc49", "html_url": "https://github.com/rust-lang/rust/commit/b7ccab4d401928c755f6876fea5d31c8e0d0fc49"}], "stats": {"total": 283, "additions": 173, "deletions": 110}, "files": [{"sha": "1af01a42afd6a658db4d341faa0b62f901cf7db2", "filename": "Cargo.lock", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a64180f67f148c0d13f30a8137dc4b8cc2b28757/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a64180f67f148c0d13f30a8137dc4b8cc2b28757/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a64180f67f148c0d13f30a8137dc4b8cc2b28757", "patch": "@@ -337,7 +337,7 @@ dependencies = [\n  \"humantime 2.0.1\",\n  \"ignore\",\n  \"im-rc\",\n- \"itertools 0.10.1\",\n+ \"itertools\",\n  \"jobserver\",\n  \"lazy_static\",\n  \"lazycell\",\n@@ -442,7 +442,7 @@ dependencies = [\n  \"flate2\",\n  \"git2\",\n  \"glob\",\n- \"itertools 0.10.1\",\n+ \"itertools\",\n  \"lazy_static\",\n  \"remove_dir_all\",\n  \"serde_json\",\n@@ -560,7 +560,7 @@ dependencies = [\n  \"chalk-ir\",\n  \"ena\",\n  \"indexmap\",\n- \"itertools 0.10.1\",\n+ \"itertools\",\n  \"petgraph\",\n  \"rustc-hash\",\n  \"tracing\",\n@@ -624,7 +624,7 @@ dependencies = [\n  \"filetime\",\n  \"futures 0.3.19\",\n  \"if_chain\",\n- \"itertools 0.10.1\",\n+ \"itertools\",\n  \"num_cpus\",\n  \"parking_lot\",\n  \"quote\",\n@@ -647,7 +647,7 @@ dependencies = [\n  \"cargo_metadata\",\n  \"clap 2.34.0\",\n  \"indoc\",\n- \"itertools 0.10.1\",\n+ \"itertools\",\n  \"opener\",\n  \"regex\",\n  \"shell-escape\",\n@@ -661,7 +661,7 @@ dependencies = [\n  \"cargo_metadata\",\n  \"clippy_utils\",\n  \"if_chain\",\n- \"itertools 0.10.1\",\n+ \"itertools\",\n  \"pulldown-cmark\",\n  \"quine-mc_cluskey\",\n  \"regex-syntax\",\n@@ -1783,15 +1783,6 @@ dependencies = [\n  \"cfg-if 1.0.0\",\n ]\n \n-[[package]]\n-name = \"itertools\"\n-version = \"0.9.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"284f18f85651fe11e8a991b2adb42cb078325c996ed026d994719efcfca1d54b\"\n-dependencies = [\n- \"either\",\n-]\n-\n [[package]]\n name = \"itertools\"\n version = \"0.10.1\"\n@@ -3138,7 +3129,7 @@ dependencies = [\n  \"futures 0.3.19\",\n  \"heck\",\n  \"home\",\n- \"itertools 0.10.1\",\n+ \"itertools\",\n  \"jsonrpc-core\",\n  \"lazy_static\",\n  \"log\",\n@@ -3180,7 +3171,7 @@ dependencies = [\n  \"derive-new\",\n  \"env_logger 0.9.0\",\n  \"fst\",\n- \"itertools 0.10.1\",\n+ \"itertools\",\n  \"json\",\n  \"lazy_static\",\n  \"log\",\n@@ -3411,7 +3402,7 @@ dependencies = [\n name = \"rustc_ast_passes\"\n version = \"0.0.0\"\n dependencies = [\n- \"itertools 0.10.1\",\n+ \"itertools\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n  \"rustc_attr\",\n@@ -3454,7 +3445,7 @@ name = \"rustc_borrowck\"\n version = \"0.0.0\"\n dependencies = [\n  \"either\",\n- \"itertools 0.10.1\",\n+ \"itertools\",\n  \"polonius-engine\",\n  \"rustc_const_eval\",\n  \"rustc_data_structures\",\n@@ -3536,7 +3527,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n  \"cc\",\n- \"itertools 0.10.1\",\n+ \"itertools\",\n  \"jobserver\",\n  \"libc\",\n  \"object 0.28.1\",\n@@ -4019,7 +4010,7 @@ name = \"rustc_mir_transform\"\n version = \"0.0.0\"\n dependencies = [\n  \"coverage_test_macros\",\n- \"itertools 0.10.1\",\n+ \"itertools\",\n  \"rustc_ast\",\n  \"rustc_attr\",\n  \"rustc_const_eval\",\n@@ -4419,7 +4410,7 @@ dependencies = [\n  \"askama\",\n  \"atty\",\n  \"expect-test\",\n- \"itertools 0.10.1\",\n+ \"itertools\",\n  \"minifier\",\n  \"pulldown-cmark\",\n  \"rayon\",\n@@ -4501,7 +4492,7 @@ dependencies = [\n  \"env_logger 0.8.4\",\n  \"getopts\",\n  \"ignore\",\n- \"itertools 0.9.0\",\n+ \"itertools\",\n  \"lazy_static\",\n  \"log\",\n  \"regex\",\n@@ -5181,7 +5172,7 @@ checksum = \"744e9ed5b352340aa47ce033716991b5589e23781acb97cad37d4ea70560f55b\"\n dependencies = [\n  \"combine\",\n  \"indexmap\",\n- \"itertools 0.10.1\",\n+ \"itertools\",\n  \"kstring\",\n  \"serde\",\n ]"}, {"sha": "22742b2adbd4fc3448c10c69f4ad7aa0b45b1908", "filename": "compiler/rustc_ast_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64180f67f148c0d13f30a8137dc4b8cc2b28757/compiler%2Frustc_ast_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a64180f67f148c0d13f30a8137dc4b8cc2b28757/compiler%2Frustc_ast_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2FCargo.toml?ref=a64180f67f148c0d13f30a8137dc4b8cc2b28757", "patch": "@@ -4,7 +4,7 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [dependencies]\n-itertools = \"0.10\"\n+itertools = \"0.10.1\"\n tracing = \"0.1\"\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_attr = { path = \"../rustc_attr\" }"}, {"sha": "0b531623ba6f5e3f08683e14949caedecf6b7d3f", "filename": "compiler/rustc_borrowck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64180f67f148c0d13f30a8137dc4b8cc2b28757/compiler%2Frustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a64180f67f148c0d13f30a8137dc4b8cc2b28757/compiler%2Frustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2FCargo.toml?ref=a64180f67f148c0d13f30a8137dc4b8cc2b28757", "patch": "@@ -8,7 +8,7 @@ doctest = false\n \n [dependencies]\n either = \"1.5.0\"\n-itertools = \"0.10\"\n+itertools = \"0.10.1\"\n tracing = \"0.1\"\n polonius-engine = \"0.13.0\"\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "87d0680bf6f308fa8427b7919e61872f87a76676", "filename": "compiler/rustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64180f67f148c0d13f30a8137dc4b8cc2b28757/compiler%2Frustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a64180f67f148c0d13f30a8137dc4b8cc2b28757/compiler%2Frustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2FCargo.toml?ref=a64180f67f148c0d13f30a8137dc4b8cc2b28757", "patch": "@@ -9,7 +9,7 @@ test = false\n [dependencies]\n bitflags = \"1.2.1\"\n cc = \"1.0.69\"\n-itertools = \"0.10\"\n+itertools = \"0.10.1\"\n tracing = \"0.1\"\n libc = \"0.2.50\"\n jobserver = \"0.1.22\""}, {"sha": "4c1a7eaf6f03b83c6af0c2e6b0c82845cb2074ab", "filename": "compiler/rustc_mir_transform/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64180f67f148c0d13f30a8137dc4b8cc2b28757/compiler%2Frustc_mir_transform%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a64180f67f148c0d13f30a8137dc4b8cc2b28757/compiler%2Frustc_mir_transform%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2FCargo.toml?ref=a64180f67f148c0d13f30a8137dc4b8cc2b28757", "patch": "@@ -7,7 +7,7 @@ edition = \"2021\"\n doctest = false\n \n [dependencies]\n-itertools = \"0.10\"\n+itertools = \"0.10.1\"\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n tracing = \"0.1\"\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "221dc86c1d46d931ad424bfdb2575d44c2e5fd5f", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a64180f67f148c0d13f30a8137dc4b8cc2b28757/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64180f67f148c0d13f30a8137dc4b8cc2b28757/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=a64180f67f148c0d13f30a8137dc4b8cc2b28757", "patch": "@@ -2628,11 +2628,10 @@ fn parse_pretty(debugging_opts: &DebuggingOptions, efmt: ErrorOutputType) -> Opt\n         name => early_error(\n             efmt,\n             &format!(\n-                \"argument to `unpretty` must be one of `normal`, \\\n-                            `expanded`, `identified`, `expanded,identified`, \\\n-                            `expanded,hygiene`, `everybody_loops`, \\\n+                \"argument to `unpretty` must be one of `normal`, `identified`, \\\n+                            `expanded`, `expanded,identified`, `expanded,hygiene`, \\\n                             `ast-tree`, `ast-tree,expanded`, `hir`, `hir,identified`, \\\n-                            `hir,typed`, `hir-tree`, `mir` or `mir-cfg`; got {}\",\n+                            `hir,typed`, `hir-tree`, `thir-tree`, `mir` or `mir-cfg`; got {}\",\n                 name\n             ),\n         ),"}, {"sha": "18a3498e34ebac6d2b12a4689db9c75340e5c30f", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64180f67f148c0d13f30a8137dc4b8cc2b28757/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a64180f67f148c0d13f30a8137dc4b8cc2b28757/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=a64180f67f148c0d13f30a8137dc4b8cc2b28757", "patch": "@@ -17,7 +17,7 @@ serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n smallvec = \"1.6.1\"\n tempfile = \"3\"\n-itertools = \"0.10\"\n+itertools = \"0.10.1\"\n regex = \"1\"\n rustdoc-json-types = { path = \"../rustdoc-json-types\" }\n tracing = \"0.1\""}, {"sha": "a2f48c164652df4c5d351127be6ff6d931e8cf77", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 85, "deletions": 72, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/a64180f67f148c0d13f30a8137dc4b8cc2b28757/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64180f67f148c0d13f30a8137dc4b8cc2b28757/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=a64180f67f148c0d13f30a8137dc4b8cc2b28757", "patch": "@@ -143,11 +143,14 @@ impl Buffer {\n     }\n }\n \n-fn comma_sep<T: fmt::Display>(items: impl Iterator<Item = T>) -> impl fmt::Display {\n+fn comma_sep<T: fmt::Display>(\n+    items: impl Iterator<Item = T>,\n+    space_after_comma: bool,\n+) -> impl fmt::Display {\n     display_fn(move |f| {\n         for (i, item) in items.enumerate() {\n             if i != 0 {\n-                write!(f, \", \")?;\n+                write!(f, \",{}\", if space_after_comma { \" \" } else { \"\" })?;\n             }\n             fmt::Display::fmt(&item, f)?;\n         }\n@@ -248,9 +251,9 @@ impl clean::Generics {\n             }\n \n             if f.alternate() {\n-                write!(f, \"<{:#}>\", comma_sep(real_params.map(|g| g.print(cx))))\n+                write!(f, \"<{:#}>\", comma_sep(real_params.map(|g| g.print(cx)), true))\n             } else {\n-                write!(f, \"&lt;{}&gt;\", comma_sep(real_params.map(|g| g.print(cx))))\n+                write!(f, \"&lt;{}&gt;\", comma_sep(real_params.map(|g| g.print(cx)), true))\n             }\n         })\n     }\n@@ -266,10 +269,80 @@ crate fn print_where_clause<'a, 'tcx: 'a>(\n     end_newline: bool,\n ) -> impl fmt::Display + 'a + Captures<'tcx> {\n     display_fn(move |f| {\n-        if gens.where_predicates.is_empty() {\n+        let mut where_predicates = gens.where_predicates.iter().filter(|pred| {\n+            !matches!(pred, clean::WherePredicate::BoundPredicate { bounds, .. } if bounds.is_empty())\n+        }).map(|pred| {\n+            display_fn(move |f| {\n+                if f.alternate() {\n+                    f.write_str(\" \")?;\n+                } else {\n+                    f.write_str(\"<br>\")?;\n+                }\n+\n+                match pred {\n+                    clean::WherePredicate::BoundPredicate { ty, bounds, bound_params } => {\n+                        let bounds = bounds;\n+                        let for_prefix = if bound_params.is_empty() {\n+                            String::new()\n+                        } else if f.alternate() {\n+                            format!(\n+                                \"for&lt;{:#}&gt; \",\n+                                comma_sep(bound_params.iter().map(|lt| lt.print()), true)\n+                            )\n+                        } else {\n+                            format!(\n+                                \"for&lt;{}&gt; \",\n+                                comma_sep(bound_params.iter().map(|lt| lt.print()), true)\n+                            )\n+                        };\n+\n+                        if f.alternate() {\n+                            write!(\n+                                f,\n+                                \"{}{:#}: {:#}\",\n+                                for_prefix,\n+                                ty.print(cx),\n+                                print_generic_bounds(bounds, cx)\n+                            )\n+                        } else {\n+                            write!(\n+                                f,\n+                                \"{}{}: {}\",\n+                                for_prefix,\n+                                ty.print(cx),\n+                                print_generic_bounds(bounds, cx)\n+                            )\n+                        }\n+                    }\n+                    clean::WherePredicate::RegionPredicate { lifetime, bounds } => {\n+                        write!(\n+                            f,\n+                            \"{}: {}\",\n+                            lifetime.print(),\n+                            bounds\n+                                .iter()\n+                                .map(|b| b.print(cx).to_string())\n+                                .collect::<Vec<_>>()\n+                                .join(\" + \")\n+                        )\n+                    }\n+                    clean::WherePredicate::EqPredicate { lhs, rhs } => {\n+                        if f.alternate() {\n+                            write!(f, \"{:#} == {:#}\", lhs.print(cx), rhs.print(cx),)\n+                        } else {\n+                            write!(f, \"{} == {}\", lhs.print(cx), rhs.print(cx),)\n+                        }\n+                    }\n+                }\n+            })\n+        }).peekable();\n+\n+        if where_predicates.peek().is_none() {\n             return Ok(());\n         }\n+\n         let mut clause = String::new();\n+\n         if f.alternate() {\n             clause.push_str(\" where\");\n         } else {\n@@ -279,72 +352,11 @@ crate fn print_where_clause<'a, 'tcx: 'a>(\n                 clause.push_str(\" <span class=\\\"where\\\">where\");\n             }\n         }\n-        for (i, pred) in gens.where_predicates.iter().enumerate() {\n-            if f.alternate() {\n-                clause.push(' ');\n-            } else {\n-                clause.push_str(\"<br>\");\n-            }\n-\n-            match pred {\n-                clean::WherePredicate::BoundPredicate { ty, bounds, bound_params } => {\n-                    let bounds = bounds;\n-                    let for_prefix = match bound_params.len() {\n-                        0 => String::new(),\n-                        _ if f.alternate() => {\n-                            format!(\n-                                \"for&lt;{:#}&gt; \",\n-                                comma_sep(bound_params.iter().map(|lt| lt.print()))\n-                            )\n-                        }\n-                        _ => format!(\n-                            \"for&lt;{}&gt; \",\n-                            comma_sep(bound_params.iter().map(|lt| lt.print()))\n-                        ),\n-                    };\n-\n-                    if f.alternate() {\n-                        clause.push_str(&format!(\n-                            \"{}{:#}: {:#}\",\n-                            for_prefix,\n-                            ty.print(cx),\n-                            print_generic_bounds(bounds, cx)\n-                        ));\n-                    } else {\n-                        clause.push_str(&format!(\n-                            \"{}{}: {}\",\n-                            for_prefix,\n-                            ty.print(cx),\n-                            print_generic_bounds(bounds, cx)\n-                        ));\n-                    }\n-                }\n-                clean::WherePredicate::RegionPredicate { lifetime, bounds } => {\n-                    clause.push_str(&format!(\n-                        \"{}: {}\",\n-                        lifetime.print(),\n-                        bounds\n-                            .iter()\n-                            .map(|b| b.print(cx).to_string())\n-                            .collect::<Vec<_>>()\n-                            .join(\" + \")\n-                    ));\n-                }\n-                clean::WherePredicate::EqPredicate { lhs, rhs } => {\n-                    if f.alternate() {\n-                        clause.push_str(&format!(\"{:#} == {:#}\", lhs.print(cx), rhs.print(cx),));\n-                    } else {\n-                        clause.push_str(&format!(\"{} == {}\", lhs.print(cx), rhs.print(cx),));\n-                    }\n-                }\n-            }\n \n-            if i < gens.where_predicates.len() - 1 || end_newline {\n-                clause.push(',');\n-            }\n-        }\n+        clause.push_str(&comma_sep(where_predicates, false).to_string());\n \n         if end_newline {\n+            clause.push(',');\n             // add a space so stripping <br> tags and breaking spaces still renders properly\n             if f.alternate() {\n                 clause.push(' ');\n@@ -394,13 +406,13 @@ impl clean::PolyTrait {\n                     write!(\n                         f,\n                         \"for<{:#}> \",\n-                        comma_sep(self.generic_params.iter().map(|g| g.print(cx)))\n+                        comma_sep(self.generic_params.iter().map(|g| g.print(cx)), true)\n                     )?;\n                 } else {\n                     write!(\n                         f,\n                         \"for&lt;{}&gt; \",\n-                        comma_sep(self.generic_params.iter().map(|g| g.print(cx)))\n+                        comma_sep(self.generic_params.iter().map(|g| g.print(cx)), true)\n                     )?;\n                 }\n             }\n@@ -424,7 +436,8 @@ impl clean::GenericBound {\n                 let modifier_str = match modifier {\n                     hir::TraitBoundModifier::None => \"\",\n                     hir::TraitBoundModifier::Maybe => \"?\",\n-                    hir::TraitBoundModifier::MaybeConst => \"~const\",\n+                    // ~const is experimental; do not display those bounds in rustdoc\n+                    hir::TraitBoundModifier::MaybeConst => \"\",\n                 };\n                 if f.alternate() {\n                     write!(f, \"{}{:#}\", modifier_str, ty.print(cx))\n@@ -1111,7 +1124,7 @@ impl clean::BareFunctionDecl {\n                 write!(\n                     f,\n                     \"for&lt;{}&gt; \",\n-                    comma_sep(self.generic_params.iter().map(|g| g.print(cx)))\n+                    comma_sep(self.generic_params.iter().map(|g| g.print(cx)), true)\n                 )\n             } else {\n                 Ok(())"}, {"sha": "215ee228eb857dfba2f05370de52b9390a767dc8", "filename": "src/test/rustdoc/const-generics/generic_const_exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64180f67f148c0d13f30a8137dc4b8cc2b28757/src%2Ftest%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64180f67f148c0d13f30a8137dc4b8cc2b28757/src%2Ftest%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs?ref=a64180f67f148c0d13f30a8137dc4b8cc2b28757", "patch": "@@ -3,5 +3,5 @@\n #![allow(incomplete_features)]\n // make sure that `ConstEvaluatable` predicates dont cause rustdoc to ICE #77647\n // @has foo/struct.Ice.html '//pre[@class=\"rust struct\"]' \\\n-//      'pub struct Ice<const N: usize> where [(); N + 1]: ;'\n+//      'pub struct Ice<const N: usize>;'\n pub struct Ice<const N: usize> where [(); N + 1]:;"}, {"sha": "2adf69f6514cd95a2fe50c27875ec91bcda2bcdf", "filename": "src/test/rustdoc/rfc-2632-const-trait-impl.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a64180f67f148c0d13f30a8137dc4b8cc2b28757/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64180f67f148c0d13f30a8137dc4b8cc2b28757/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs?ref=a64180f67f148c0d13f30a8137dc4b8cc2b28757", "patch": "@@ -0,0 +1,60 @@\n+// Test that we do not currently display `~const` in rustdoc\n+// as that syntax is currently provisional; `~const Drop` has\n+// no effect on stable code so it should be hidden as well.\n+//\n+// To future blessers: make sure that `const_trait_impl` is\n+// stabilized when changing `@!has` to `@has`, and please do\n+// not remove this test.\n+#![feature(const_trait_impl)]\n+#![crate_name = \"foo\"]\n+\n+pub struct S<T>(T);\n+\n+// @!has foo/trait.Tr.html '//pre[@class=\"rust trait\"]/code/a[@class=\"trait\"]' '~const'\n+// @!has - '//pre[@class=\"rust trait\"]/code/a[@class=\"trait\"]' 'Drop'\n+// @has - '//pre[@class=\"rust trait\"]/code/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//pre[@class=\"rust trait\"]/code/span[@class=\"where\"]' '~const'\n+// @!has - '//pre[@class=\"rust trait\"]/code/span[@class=\"where\"]' 'Drop'\n+// @has - '//pre[@class=\"rust trait\"]/code/span[@class=\"where\"]' ': Clone'\n+pub trait Tr<T> {\n+    // @!has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]' '~const'\n+    // @!has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Drop'\n+    // @has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Clone'\n+    // @!has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where\"]' '~const'\n+    // @!has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' 'Drop'\n+    // @has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' ': Clone'\n+    #[default_method_body_is_const]\n+    fn a<A: ~const Drop + ~const Clone>() where Option<A>: ~const Drop + ~const Clone {}\n+}\n+\n+// @!has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]' '~const'\n+// @!has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]/a[@class=\"trait\"]' 'Drop'\n+// @has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]/span[@class=\"where\"]' '~const'\n+// @!has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]/span[@class=\"where fmt-newline\"]' 'Drop'\n+// @has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]/span[@class=\"where fmt-newline\"]' ': Clone'\n+impl<T: ~const Drop + ~const Clone> const Tr<T> for T where Option<T>: ~const Drop + ~const Clone {\n+    fn a<A: ~const Drop + ~const Clone>() where Option<A>: ~const Drop + ~const Clone {}\n+}\n+\n+// @!has foo/fn.foo.html '//pre[@class=\"rust fn\"]/code/a[@class=\"trait\"]' '~const'\n+// @!has - '//pre[@class=\"rust fn\"]/code/a[@class=\"trait\"]' 'Drop'\n+// @has - '//pre[@class=\"rust fn\"]/code/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//pre[@class=\"rust fn\"]/code/span[@class=\"where fmt-newline\"]' '~const'\n+// @!has - '//pre[@class=\"rust fn\"]/code/span[@class=\"where fmt-newline\"]' 'Drop'\n+// @has - '//pre[@class=\"rust fn\"]/code/span[@class=\"where fmt-newline\"]' ': Clone'\n+pub const fn foo<F: ~const Drop + ~const Clone>() where Option<F>: ~const Drop + ~const Clone {\n+    F::a()\n+}\n+\n+impl<T> S<T> {\n+    // @!has foo/struct.S.html '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]' '~const'\n+    // @!has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Drop'\n+    // @has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Clone'\n+    // @!has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/span[@class=\"where\"]' '~const'\n+    // @!has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' 'Drop'\n+    // @has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' ': Clone'\n+    pub const fn foo<B: ~const Drop + ~const Clone>() where B: ~const Drop + ~const Clone {\n+        B::a()\n+    }\n+}"}, {"sha": "d4ca9480bec6231158a5e6eceab4503dbb42512e", "filename": "src/tools/clippy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64180f67f148c0d13f30a8137dc4b8cc2b28757/src%2Ftools%2Fclippy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a64180f67f148c0d13f30a8137dc4b8cc2b28757/src%2Ftools%2Fclippy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCargo.toml?ref=a64180f67f148c0d13f30a8137dc4b8cc2b28757", "patch": "@@ -43,7 +43,7 @@ rustc-workspace-hack = \"1.0\"\n clippy_utils = { path = \"clippy_utils\" }\n derive-new = \"0.5\"\n if_chain = \"1.0\"\n-itertools = \"0.10\"\n+itertools = \"0.10.1\"\n quote = \"1.0\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n syn = { version = \"1.0\", features = [\"full\"] }"}, {"sha": "d133e8cddabc729b96ec2d2617401a771883660a", "filename": "src/tools/clippy/clippy_dev/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64180f67f148c0d13f30a8137dc4b8cc2b28757/src%2Ftools%2Fclippy%2Fclippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a64180f67f148c0d13f30a8137dc4b8cc2b28757/src%2Ftools%2Fclippy%2Fclippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2FCargo.toml?ref=a64180f67f148c0d13f30a8137dc4b8cc2b28757", "patch": "@@ -7,7 +7,7 @@ edition = \"2021\"\n bytecount = \"0.6\"\n clap = \"2.33\"\n indoc = \"1.0\"\n-itertools = \"0.10\"\n+itertools = \"0.10.1\"\n opener = \"0.5\"\n regex = \"1.5\"\n shell-escape = \"0.1\""}, {"sha": "66e61660d313aa150e1fcbb9106fce4d83bc7ffe", "filename": "src/tools/clippy/clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64180f67f148c0d13f30a8137dc4b8cc2b28757/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a64180f67f148c0d13f30a8137dc4b8cc2b28757/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml?ref=a64180f67f148c0d13f30a8137dc4b8cc2b28757", "patch": "@@ -12,7 +12,7 @@ edition = \"2021\"\n cargo_metadata = \"0.14\"\n clippy_utils = { path = \"../clippy_utils\" }\n if_chain = \"1.0\"\n-itertools = \"0.10\"\n+itertools = \"0.10.1\"\n pulldown-cmark = { version = \"0.9\", default-features = false }\n quine-mc_cluskey = \"0.2\"\n regex-syntax = \"0.6\""}, {"sha": "764714638a9787c214227c4580ea4203442f071f", "filename": "src/tools/rustfmt/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64180f67f148c0d13f30a8137dc4b8cc2b28757/src%2Ftools%2Frustfmt%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a64180f67f148c0d13f30a8137dc4b8cc2b28757/src%2Ftools%2Frustfmt%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2FCargo.toml?ref=a64180f67f148c0d13f30a8137dc4b8cc2b28757", "patch": "@@ -33,7 +33,7 @@ rustfmt-format-diff = []\n generic-simd = [\"bytecount/generic-simd\"]\n \n [dependencies]\n-itertools = \"0.9\"\n+itertools = \"0.10.1\"\n toml = \"0.5\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\""}]}