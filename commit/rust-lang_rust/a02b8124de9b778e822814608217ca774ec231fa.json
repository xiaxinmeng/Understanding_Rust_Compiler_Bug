{"sha": "a02b8124de9b778e822814608217ca774ec231fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMmI4MTI0ZGU5Yjc3OGU4MjI4MTQ2MDgyMTdjYTc3NGVjMjMxZmE=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-05T22:10:48Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-05T22:10:48Z"}, "message": "Lint about trivial regexes", "tree": {"sha": "001aad4b0f5e838ad1ace06f6ec2b7f02600db9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/001aad4b0f5e838ad1ace06f6ec2b7f02600db9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a02b8124de9b778e822814608217ca774ec231fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a02b8124de9b778e822814608217ca774ec231fa", "html_url": "https://github.com/rust-lang/rust/commit/a02b8124de9b778e822814608217ca774ec231fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a02b8124de9b778e822814608217ca774ec231fa/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70124cf5917e0b9d6597c3e3f855687182a9d071", "url": "https://api.github.com/repos/rust-lang/rust/commits/70124cf5917e0b9d6597c3e3f855687182a9d071", "html_url": "https://github.com/rust-lang/rust/commit/70124cf5917e0b9d6597c3e3f855687182a9d071"}], "stats": {"total": 111, "additions": 100, "deletions": 11}, "files": [{"sha": "08ad214e6903e84a9c7026c6f01444e5f49024a4", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a02b8124de9b778e822814608217ca774ec231fa/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a02b8124de9b778e822814608217ca774ec231fa/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a02b8124de9b778e822814608217ca774ec231fa", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 112 lints included in this crate:\n+There are 113 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -104,6 +104,7 @@ name\n [string_to_string](https://github.com/Manishearth/rust-clippy/wiki#string_to_string)                           | warn    | calling `String::to_string` which is inefficient\n [temporary_assignment](https://github.com/Manishearth/rust-clippy/wiki#temporary_assignment)                   | warn    | assignments to temporaries\n [toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                           | warn    | An entire binding was declared as `ref`, in a function argument (`fn foo(ref x: Bar)`), or a `let` statement (`let ref x = foo()`). In such cases, it is preferred to take references with `&`.\n+[trivial_regex](https://github.com/Manishearth/rust-clippy/wiki#trivial_regex)                                 | warn    | finds trivial regular expressions in `Regex::new(_)` invocations\n [type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                             | warn    | usage of very complex types; recommends factoring out parts into `type` definitions\n [unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                             | allow   | using a unicode literal not in NFC normal form (see http://www.unicode.org/reports/tr15/ for further information)\n [unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                           | warn    | comparing unit values (which is always `true` or `false`, respectively)"}, {"sha": "33de4d6fb792b0ebb5a8d5a51beb10e438d987da", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a02b8124de9b778e822814608217ca774ec231fa/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b8124de9b778e822814608217ca774ec231fa/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a02b8124de9b778e822814608217ca774ec231fa", "patch": "@@ -257,6 +257,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         ranges::RANGE_STEP_BY_ZERO,\n         ranges::RANGE_ZIP_WITH_LEN,\n         regex::INVALID_REGEX,\n+        regex::TRIVIAL_REGEX,\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n         strings::STRING_LIT_AS_BYTES,"}, {"sha": "0558b77acb034fdec0a52795373b71ea91bc08b8", "filename": "src/regex.rs", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a02b8124de9b778e822814608217ca774ec231fa/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b8124de9b778e822814608217ca774ec231fa/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=a02b8124de9b778e822814608217ca774ec231fa", "patch": "@@ -8,7 +8,7 @@ use rustc::middle::const_eval::{eval_const_expr_partial, ConstVal};\n use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n use rustc::lint::*;\n \n-use utils::{match_path, REGEX_NEW_PATH, span_lint};\n+use utils::{match_path, REGEX_NEW_PATH, span_lint, span_help_and_lint};\n \n /// **What it does:** This lint checks `Regex::new(_)` invocations for correct regex syntax. It is `deny` by default.\n ///\n@@ -23,12 +23,26 @@ declare_lint! {\n     \"finds invalid regular expressions in `Regex::new(_)` invocations\"\n }\n \n+/// **What it does:** This lint checks for `Regex::new(_)` invocations with trivial regex.\n+///\n+/// **Why is this bad?** This can likely be replaced by `==` or `str::starts_with`,\n+/// `str::ends_with` or `std::contains` or other `str` methods.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `Regex::new(\"^foobar\")`\n+declare_lint! {\n+    pub TRIVIAL_REGEX,\n+    Warn,\n+    \"finds trivial regular expressions in `Regex::new(_)` invocations\"\n+}\n+\n #[derive(Copy,Clone)]\n pub struct RegexPass;\n \n impl LintPass for RegexPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(INVALID_REGEX)\n+        lint_array!(INVALID_REGEX, TRIVIAL_REGEX)\n     }\n }\n \n@@ -48,19 +62,26 @@ impl LateLintPass for RegexPass {\n                                   &format!(\"regex syntax error: {}\",\n                                            e.description()));\n                     }\n+                    else if let Some(repl) = is_trivial_regex(r) {\n+                        span_help_and_lint(cx, TRIVIAL_REGEX, args[0].span,\n+                                           &\"trivial regex\",\n+                                           &format!(\"consider using {}\", repl));\n+                    }\n                 }\n-            } else {\n-                if_let_chain!{[\n-                    let Some(r) = const_str(cx, &*args[0]),\n-                    let Err(e) = regex_syntax::Expr::parse(&r)\n-                ], {\n+            } else if let Some(r) = const_str(cx, &*args[0]) {\n+                if let Err(e) = regex_syntax::Expr::parse(&r) {\n                     span_lint(cx,\n                               INVALID_REGEX,\n                               args[0].span,\n                               &format!(\"regex syntax error on position {}: {}\",\n                                        e.position(),\n                                        e.description()));\n-                }}\n+                }\n+                else if let Some(repl) = is_trivial_regex(&r) {\n+                    span_help_and_lint(cx, TRIVIAL_REGEX, args[0].span,\n+                                       &\"trivial regex\",\n+                                       &format!(\"{}\", repl));\n+                }\n             }\n         }}\n     }\n@@ -81,3 +102,26 @@ fn const_str(cx: &LateContext, e: &Expr) -> Option<InternedString> {\n         _ => None\n     }\n }\n+\n+fn is_trivial_regex(s: &str) -> Option<&'static str> {\n+    // some unlikely but valid corner cases\n+    match s {\n+        \"\" | \"^\" | \"$\" => return Some(\"the regex is unlikely to be useful as it is\"),\n+        \"^$\" => return Some(\"consider using `str::is_empty`\"),\n+        _ => (),\n+    }\n+\n+    let (start, end, repl) = match (s.starts_with('^'), s.ends_with('$')) {\n+        (true, true) => (1, s.len()-1, \"consider using `==` on `str`s\"),\n+        (false, true) => (0, s.len()-1, \"consider using `str::ends_with`\"),\n+        (true, false) => (1, s.len(), \"consider using `str::starts_with`\"),\n+        (false, false) => (0, s.len(), \"consider using `str::contains`\"),\n+    };\n+\n+    if !s.chars().take(end).skip(start).any(regex_syntax::is_punct) {\n+        Some(repl)\n+    }\n+    else {\n+        None\n+    }\n+}"}, {"sha": "cd10d47c1bbb00536764127173f7f4e98830c317", "filename": "tests/compile-fail/regex.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a02b8124de9b778e822814608217ca774ec231fa/tests%2Fcompile-fail%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02b8124de9b778e822814608217ca774ec231fa/tests%2Fcompile-fail%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fregex.rs?ref=a02b8124de9b778e822814608217ca774ec231fa", "patch": "@@ -2,15 +2,16 @@\n #![plugin(clippy)]\n \n #![allow(unused)]\n-#![deny(invalid_regex)]\n+#![deny(invalid_regex, trivial_regex)]\n \n extern crate regex;\n \n use regex::Regex;\n \n const OPENING_PAREN : &'static str = \"(\";\n+const NOT_A_REAL_REGEX : &'static str = \"foobar\";\n \n-fn main() {\n+fn syntax_error() {\n     let pipe_in_wrong_position = Regex::new(\"|\");\n     //~^ERROR: regex syntax error: empty alternate\n     let wrong_char_ranice = Regex::new(\"[z-a]\");\n@@ -22,3 +23,45 @@ fn main() {\n     let closing_paren = \")\";\n     let not_linted = Regex::new(closing_paren);\n }\n+\n+fn trivial_regex() {\n+    let trivial_eq = Regex::new(\"^foobar$\");\n+    //~^ERROR: trivial regex\n+    //~|HELP consider using `==` on `str`s\n+\n+    let trivial_starts_with = Regex::new(\"^foobar\");\n+    //~^ERROR: trivial regex\n+    //~|HELP consider using `str::starts_with`\n+\n+    let trivial_ends_with = Regex::new(\"foobar$\");\n+    //~^ERROR: trivial regex\n+    //~|HELP consider using `str::ends_with`\n+\n+    let trivial_contains = Regex::new(\"foobar\");\n+    //~^ERROR: trivial regex\n+    //~|HELP consider using `str::contains`\n+\n+    let trivial_contains = Regex::new(NOT_A_REAL_REGEX);\n+    //~^ERROR: trivial regex\n+    //~|HELP consider using `str::contains`\n+\n+    // unlikely corner cases\n+    let trivial_empty = Regex::new(\"\");\n+    //~^ERROR: trivial regex\n+    //~|HELP the regex is unlikely to be useful\n+\n+    let trivial_empty = Regex::new(\"^$\");\n+    //~^ERROR: trivial regex\n+    //~|HELP consider using `str::is_empty`\n+\n+    // non-trivial regexes\n+    let non_trivial_eq = Regex::new(\"^foo|bar$\");\n+    let non_trivial_starts_with = Regex::new(\"^foo|bar\");\n+    let non_trivial_ends_with = Regex::new(\"^foo|bar\");\n+    let non_trivial_ends_with = Regex::new(\"foo|bar\");\n+}\n+\n+fn main() {\n+    syntax_error();\n+    trivial_regex();\n+}"}]}