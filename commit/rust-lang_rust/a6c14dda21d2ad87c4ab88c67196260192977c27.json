{"sha": "a6c14dda21d2ad87c4ab88c67196260192977c27", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YzE0ZGRhMjFkMmFkODdjNGFiODhjNjcxOTYyNjAxOTI5NzdjMjc=", "commit": {"author": {"name": "Olle Jonsson", "email": "olle.jonsson@gmail.com", "date": "2014-03-16T22:15:55Z"}, "committer": {"name": "Olle Jonsson", "email": "olle.jonsson@gmail.com", "date": "2014-03-24T11:16:15Z"}, "message": "Documentation sprint: Terminfo", "tree": {"sha": "40517e7d221ef71ebae4c77c379e7c6f2836b419", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40517e7d221ef71ebae4c77c379e7c6f2836b419"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6c14dda21d2ad87c4ab88c67196260192977c27", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c14dda21d2ad87c4ab88c67196260192977c27", "html_url": "https://github.com/rust-lang/rust/commit/a6c14dda21d2ad87c4ab88c67196260192977c27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6c14dda21d2ad87c4ab88c67196260192977c27/comments", "author": {"login": "olleolleolle", "id": 211, "node_id": "MDQ6VXNlcjIxMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olleolleolle", "html_url": "https://github.com/olleolleolle", "followers_url": "https://api.github.com/users/olleolleolle/followers", "following_url": "https://api.github.com/users/olleolleolle/following{/other_user}", "gists_url": "https://api.github.com/users/olleolleolle/gists{/gist_id}", "starred_url": "https://api.github.com/users/olleolleolle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olleolleolle/subscriptions", "organizations_url": "https://api.github.com/users/olleolleolle/orgs", "repos_url": "https://api.github.com/users/olleolleolle/repos", "events_url": "https://api.github.com/users/olleolleolle/events{/privacy}", "received_events_url": "https://api.github.com/users/olleolleolle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "olleolleolle", "id": 211, "node_id": "MDQ6VXNlcjIxMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olleolleolle", "html_url": "https://github.com/olleolleolle", "followers_url": "https://api.github.com/users/olleolleolle/followers", "following_url": "https://api.github.com/users/olleolleolle/following{/other_user}", "gists_url": "https://api.github.com/users/olleolleolle/gists{/gist_id}", "starred_url": "https://api.github.com/users/olleolleolle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olleolleolle/subscriptions", "organizations_url": "https://api.github.com/users/olleolleolle/orgs", "repos_url": "https://api.github.com/users/olleolleolle/repos", "events_url": "https://api.github.com/users/olleolleolle/events{/privacy}", "received_events_url": "https://api.github.com/users/olleolleolle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c7f3b850ce11c70d5bef2b2d5155a1f0fdaa421", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7f3b850ce11c70d5bef2b2d5155a1f0fdaa421", "html_url": "https://github.com/rust-lang/rust/commit/2c7f3b850ce11c70d5bef2b2d5155a1f0fdaa421"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "5ccc6bfb91e1f89f9c54ff11dc9360a3699f722a", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a6c14dda21d2ad87c4ab88c67196260192977c27/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c14dda21d2ad87c4ab88c67196260192977c27/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=a6c14dda21d2ad87c4ab88c67196260192977c27", "patch": "@@ -20,6 +20,7 @@\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n #[feature(macro_rules)];\n+#[deny(missing_doc)];\n \n extern crate collections;\n \n@@ -34,7 +35,9 @@ pub mod terminfo;\n \n // FIXME (#2807): Windows support.\n \n+/// Terminal color definitions\n pub mod color {\n+    /// Number for a terminal color\n     pub type Color = u16;\n \n     pub static BLACK:   Color = 0u16;\n@@ -56,8 +59,10 @@ pub mod color {\n     pub static BRIGHT_WHITE:   Color = 15u16;\n }\n \n+/// Terminal attributes\n pub mod attr {\n     /// Terminal attributes for use with term.attr().\n+    ///\n     /// Most attributes can only be turned on and must be turned off with term.reset().\n     /// The ones that can be turned off explicitly take a boolean value.\n     /// Color is also represented as an attribute for convenience.\n@@ -103,13 +108,23 @@ fn cap_for_attr(attr: attr::Attr) -> &'static str {\n     }\n }\n \n+/// A Terminal that knows how many colors it supports, with a reference to its\n+/// parsed TermInfo database record.\n pub struct Terminal<T> {\n     priv num_colors: u16,\n     priv out: T,\n     priv ti: ~TermInfo\n }\n \n impl<T: Writer> Terminal<T> {\n+    /// Returns a wrapped output stream (`Terminal<T>`) as a `Result`.\n+    ///\n+    /// Returns `Err()` if the TERM environment variable is undefined.\n+    /// TERM should be set to something like `xterm-color` or `screen-256color`.\n+    ///\n+    /// Returns `Err()` on failure to open the terminfo database correctly.\n+    /// Also, in the event that the individual terminfo database entry can not\n+    /// be parsed.\n     pub fn new(out: T) -> Result<Terminal<T>, ~str> {\n         let term = match os::getenv(\"TERM\") {\n             Some(t) => t,\n@@ -143,8 +158,8 @@ impl<T: Writer> Terminal<T> {\n     /// If the color is a bright color, but the terminal only supports 8 colors,\n     /// the corresponding normal color will be used instead.\n     ///\n-    /// Returns Ok(true) if the color was set, Ok(false) otherwise, and Err(e)\n-    /// if there was an I/O error\n+    /// Returns `Ok(true)` if the color was set, `Ok(false)` otherwise, and `Err(e)`\n+    /// if there was an I/O error.\n     pub fn fg(&mut self, color: color::Color) -> io::IoResult<bool> {\n         let color = self.dim_if_necessary(color);\n         if self.num_colors > color {\n@@ -166,8 +181,8 @@ impl<T: Writer> Terminal<T> {\n     /// If the color is a bright color, but the terminal only supports 8 colors,\n     /// the corresponding normal color will be used instead.\n     ///\n-    /// Returns Ok(true) if the color was set, Ok(false) otherwise, and Err(e)\n-    /// if there was an I/O error\n+    /// Returns `Ok(true)` if the color was set, `Ok(false)` otherwise, and `Err(e)`\n+    /// if there was an I/O error.\n     pub fn bg(&mut self, color: color::Color) -> io::IoResult<bool> {\n         let color = self.dim_if_necessary(color);\n         if self.num_colors > color {\n@@ -186,8 +201,8 @@ impl<T: Writer> Terminal<T> {\n     }\n \n     /// Sets the given terminal attribute, if supported.\n-    /// Returns Ok(true) if the attribute was supported, Ok(false) otherwise,\n-    /// and Err(e) if there was an I/O error.\n+    /// Returns `Ok(true)` if the attribute was supported, `Ok(false)` otherwise,\n+    /// and `Err(e)` if there was an I/O error.\n     pub fn attr(&mut self, attr: attr::Attr) -> io::IoResult<bool> {\n         match attr {\n             attr::ForegroundColor(c) => self.fg(c),\n@@ -223,6 +238,7 @@ impl<T: Writer> Terminal<T> {\n     }\n \n     /// Resets all terminal attributes and color to the default.\n+    /// Returns `Ok()`.\n     pub fn reset(&mut self) -> io::IoResult<()> {\n         let mut cap = self.ti.strings.find_equiv(&(\"sgr0\"));\n         if cap.is_none() {\n@@ -248,10 +264,13 @@ impl<T: Writer> Terminal<T> {\n         } else { color }\n     }\n \n+    /// Returns the contained stream\n     pub fn unwrap(self) -> T { self.out }\n \n+    /// Gets an immutable reference to the stream inside\n     pub fn get_ref<'a>(&'a self) -> &'a T { &self.out }\n \n+    /// Gets a mutable reference to the stream inside\n     pub fn get_mut<'a>(&'a mut self) -> &'a mut T { &mut self.out }\n }\n "}, {"sha": "978a8a09d0a04d732e0b17f7eac408a898b27584", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a6c14dda21d2ad87c4ab88c67196260192977c27/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c14dda21d2ad87c4ab88c67196260192977c27/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=a6c14dda21d2ad87c4ab88c67196260192977c27", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(missing_doc)];\n+//! Terminfo database interface.\n \n use collections::HashMap;\n \n-/// A parsed terminfo entry.\n+/// A parsed terminfo database entry.\n pub struct TermInfo {\n     /// Names for the terminal\n     priv names: Vec<~str> ,\n@@ -25,7 +25,10 @@ pub struct TermInfo {\n }\n \n pub mod searcher;\n+\n+/// TermInfo format parsing.\n pub mod parser {\n+    //! ncurses-compatible compiled terminfo format parsing (term(5))\n     pub mod compiled;\n }\n pub mod parm;"}, {"sha": "a638a07427123fdf8d91537c20cae1cc165f303e", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6c14dda21d2ad87c4ab88c67196260192977c27/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c14dda21d2ad87c4ab88c67196260192977c27/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=a6c14dda21d2ad87c4ab88c67196260192977c27", "patch": "@@ -38,8 +38,8 @@ enum FormatState {\n }\n \n /// Types of parameters a capability can use\n-#[deriving(Clone)]\n #[allow(missing_doc)]\n+#[deriving(Clone)]\n pub enum Param {\n     String(~str),\n     Number(int)"}, {"sha": "66d322e079f3583ae5684e06faa85de4a61edbcc", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6c14dda21d2ad87c4ab88c67196260192977c27/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c14dda21d2ad87c4ab88c67196260192977c27/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=a6c14dda21d2ad87c4ab88c67196260192977c27", "patch": "@@ -10,7 +10,7 @@\n \n #[allow(non_uppercase_statics)];\n \n-/// ncurses-compatible compiled terminfo format parsing (term(5))\n+//! ncurses-compatible compiled terminfo format parsing (term(5))\n \n use collections::HashMap;\n use std::io;"}, {"sha": "b5792c66a0d9c00eb5cf0b1ea8c25a06dd64efa8", "filename": "src/libterm/terminfo/searcher.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a6c14dda21d2ad87c4ab88c67196260192977c27/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c14dda21d2ad87c4ab88c67196260192977c27/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fsearcher.rs?ref=a6c14dda21d2ad87c4ab88c67196260192977c27", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/// Implement ncurses-compatible database discovery\n-/// Does not support hashed database, only filesystem!\n+//! ncurses-compatible database discovery\n+//!\n+//! Does not support hashed database, only filesystem!\n \n use std::io::File;\n use std::os::getenv;"}]}