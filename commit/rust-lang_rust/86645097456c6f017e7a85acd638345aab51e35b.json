{"sha": "86645097456c6f017e7a85acd638345aab51e35b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NjQ1MDk3NDU2YzZmMDE3ZTdhODVhY2Q2MzgzNDVhYWI1MWUzNWI=", "commit": {"author": {"name": "nathanwhit", "email": "nathan.whitaker01@gmail.com", "date": "2020-04-20T18:01:30Z"}, "committer": {"name": "nathanwhit", "email": "nathan.whitaker01@gmail.com", "date": "2020-04-22T16:21:14Z"}, "message": "Complete unqualified enum variants when possible", "tree": {"sha": "695ba2f1350043e207b94c75e426a781317a7f8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/695ba2f1350043e207b94c75e426a781317a7f8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86645097456c6f017e7a85acd638345aab51e35b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86645097456c6f017e7a85acd638345aab51e35b", "html_url": "https://github.com/rust-lang/rust/commit/86645097456c6f017e7a85acd638345aab51e35b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86645097456c6f017e7a85acd638345aab51e35b/comments", "author": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c61a7b22f70a7359d7bad9509b93a00d73c53bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c61a7b22f70a7359d7bad9509b93a00d73c53bf", "html_url": "https://github.com/rust-lang/rust/commit/6c61a7b22f70a7359d7bad9509b93a00d73c53bf"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "ffa3c01a7d9adeac12a5c7f9534f37df1cc9c875", "filename": "crates/ra_ide/src/completion/complete_unqualified_path.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/86645097456c6f017e7a85acd638345aab51e35b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86645097456c6f017e7a85acd638345aab51e35b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=86645097456c6f017e7a85acd638345aab51e35b", "patch": "@@ -4,20 +4,23 @@ use hir::ScopeDef;\n use test_utils::tested_by;\n \n use crate::completion::{CompletionContext, Completions};\n+use hir::{Adt, ModuleDef};\n use ra_syntax::AstNode;\n \n pub(super) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.is_trivial_path {\n-        return;\n-    }\n-\n-    if ctx.is_pat_binding_or_const\n+    if (!ctx.is_trivial_path && !ctx.is_pat_binding_or_const)\n         || ctx.record_lit_syntax.is_some()\n         || ctx.record_pat_syntax.is_some()\n     {\n         return;\n     }\n \n+    complete_enum_variants(acc, ctx);\n+\n+    if ctx.is_pat_binding_or_const {\n+        return;\n+    }\n+\n     ctx.scope().process_all_names(&mut |name, res| {\n         if ctx.use_item_syntax.is_some() {\n             if let (ScopeDef::Unknown, Some(name_ref)) = (&res, &ctx.name_ref_syntax) {\n@@ -31,6 +34,24 @@ pub(super) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     });\n }\n \n+fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext) {\n+    if let Some(ty) = ctx.expected_type_of(&ctx.token.parent()) {\n+        if let Some(Adt::Enum(enum_data)) = ty.as_adt() {\n+            let variants = enum_data.variants(ctx.db);\n+            let module = enum_data.module(ctx.db);\n+            for variant in variants {\n+                if let Some(path) = module.find_use_path(ctx.db, ModuleDef::from(variant)) {\n+                    // Variants with trivial paths are already added by the existing completion logic,\n+                    // so we should avoid adding these twice\n+                    if path.segments.len() > 1 {\n+                        acc.add_enum_variant(ctx, variant, Some(path.to_string()));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use insta::assert_debug_snapshot;"}]}