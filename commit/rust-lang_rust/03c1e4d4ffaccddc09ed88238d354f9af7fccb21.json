{"sha": "03c1e4d4ffaccddc09ed88238d354f9af7fccb21", "node_id": "C_kwDOAAsO6NoAKDAzYzFlNGQ0ZmZhY2NkZGMwOWVkODgyMzhkMzU0ZjlhZjdmY2NiMjE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-05T13:29:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-05T13:29:09Z"}, "message": "Rollup merge of #108626 - ozkanonur:consistent-json-docs, r=aDotInTheVoid\n\nrustdoc-json: switch from HashMap to FxHashMap to fix non-determinism\n\nUsing `HashMap` in `rustdoc_json_types::Crate` were causing creating randomly ordered objects in the json doc files. Which might cause problems to people who are doing comparison on those files specially in CI pipelines. See https://github.com/rust-lang/rust/issues/103785#issuecomment-1307425590\n\nThis PR fixes that issue and extends the coverage of `tests/run-make/rustdoc-verify-output-files` testing ability.", "tree": {"sha": "bfd923596e7af4db76b2dbac2d16cb1ac41c7a55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfd923596e7af4db76b2dbac2d16cb1ac41c7a55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03c1e4d4ffaccddc09ed88238d354f9af7fccb21", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkBJklCRBK7hj4Ov3rIwAABgEIAHasfqO+yWSBgh/t+kyz6CrJ\nAXLysSXYVe0EgDcjdrNigMyH64hTCkJdLaqQ4vaDn/D+Ungs6Fcx1mbW9IAMsn1M\no9lTzm79zoqu5/kAvW/Y+cCJelM94bwGb7bWnKwfrMqCr+EsI+9huXHWMG33tJZo\nCCRoyTGZPKEHBQQ76R3WnxztViF8dT8HTyX7WmenKsEaJwzm1W/6DoC5Sjw5fsSf\n9H+LcJ6kb7E4VLMzmxe0dR+xGs4ZuaEU9xokao3yhxfoQN+KkPTApJxFcFwYY+EJ\nsvzImFcNcW3qjW6QR3D+M9vrUfBaO+oZI2/1qrsMCmdDcWQJGrIQjWMQrm2LfVk=\n=1xe+\n-----END PGP SIGNATURE-----\n", "payload": "tree bfd923596e7af4db76b2dbac2d16cb1ac41c7a55\nparent f7bd8afa076d02488a3e9415a2bec2373ebbd6c9\nparent 52c71e6e2802a50d34ac4a3e96fc2636a3023eb2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678022949 +0100\ncommitter GitHub <noreply@github.com> 1678022949 +0100\n\nRollup merge of #108626 - ozkanonur:consistent-json-docs, r=aDotInTheVoid\n\nrustdoc-json: switch from HashMap to FxHashMap to fix non-determinism\n\nUsing `HashMap` in `rustdoc_json_types::Crate` were causing creating randomly ordered objects in the json doc files. Which might cause problems to people who are doing comparison on those files specially in CI pipelines. See https://github.com/rust-lang/rust/issues/103785#issuecomment-1307425590\n\nThis PR fixes that issue and extends the coverage of `tests/run-make/rustdoc-verify-output-files` testing ability.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03c1e4d4ffaccddc09ed88238d354f9af7fccb21", "html_url": "https://github.com/rust-lang/rust/commit/03c1e4d4ffaccddc09ed88238d354f9af7fccb21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03c1e4d4ffaccddc09ed88238d354f9af7fccb21/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7bd8afa076d02488a3e9415a2bec2373ebbd6c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7bd8afa076d02488a3e9415a2bec2373ebbd6c9", "html_url": "https://github.com/rust-lang/rust/commit/f7bd8afa076d02488a3e9415a2bec2373ebbd6c9"}, {"sha": "52c71e6e2802a50d34ac4a3e96fc2636a3023eb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/52c71e6e2802a50d34ac4a3e96fc2636a3023eb2", "html_url": "https://github.com/rust-lang/rust/commit/52c71e6e2802a50d34ac4a3e96fc2636a3023eb2"}], "stats": {"total": 64, "additions": 31, "deletions": 33}, "files": [{"sha": "74bb3c8e6c2850760ad52b8299664c423858c62b", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03c1e4d4ffaccddc09ed88238d354f9af7fccb21/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/03c1e4d4ffaccddc09ed88238d354f9af7fccb21/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=03c1e4d4ffaccddc09ed88238d354f9af7fccb21", "patch": "@@ -2287,6 +2287,7 @@ dependencies = [\n  \"anyhow\",\n  \"clap 4.1.4\",\n  \"fs-err\",\n+ \"rustc-hash\",\n  \"rustdoc-json-types\",\n  \"serde\",\n  \"serde_json\",\n@@ -4850,6 +4851,7 @@ dependencies = [\n name = \"rustdoc-json-types\"\n version = \"0.1.0\"\n dependencies = [\n+ \"rustc-hash\",\n  \"serde\",\n  \"serde_json\",\n ]"}, {"sha": "d63caa7ad70109b9c74acdaf19264f2d709ef44b", "filename": "src/rustdoc-json-types/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03c1e4d4ffaccddc09ed88238d354f9af7fccb21/src%2Frustdoc-json-types%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/03c1e4d4ffaccddc09ed88238d354f9af7fccb21/src%2Frustdoc-json-types%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2FCargo.toml?ref=03c1e4d4ffaccddc09ed88238d354f9af7fccb21", "patch": "@@ -8,6 +8,7 @@ path = \"lib.rs\"\n \n [dependencies]\n serde = { version = \"1.0\", features = [\"derive\"] }\n+rustc-hash = \"1.1.0\"\n \n [dev-dependencies]\n serde_json = \"1.0\""}, {"sha": "4c210291b113b1bd2cde6c4a5d4d91882b190032", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/03c1e4d4ffaccddc09ed88238d354f9af7fccb21/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03c1e4d4ffaccddc09ed88238d354f9af7fccb21/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=03c1e4d4ffaccddc09ed88238d354f9af7fccb21", "patch": "@@ -3,10 +3,9 @@\n //! These types are the public API exposed through the `--output-format json` flag. The [`Crate`]\n //! struct is the root of the JSON blob and all other items are contained within.\n \n-use std::collections::HashMap;\n-use std::path::PathBuf;\n-\n+use rustc_hash::FxHashMap;\n use serde::{Deserialize, Serialize};\n+use std::path::PathBuf;\n \n /// rustdoc format-version.\n pub const FORMAT_VERSION: u32 = 24;\n@@ -24,11 +23,11 @@ pub struct Crate {\n     pub includes_private: bool,\n     /// A collection of all items in the local crate as well as some external traits and their\n     /// items that are referenced locally.\n-    pub index: HashMap<Id, Item>,\n+    pub index: FxHashMap<Id, Item>,\n     /// Maps IDs to fully qualified paths and other info helpful for generating links.\n-    pub paths: HashMap<Id, ItemSummary>,\n+    pub paths: FxHashMap<Id, ItemSummary>,\n     /// Maps `crate_id` of items to a crate name and html_root_url if it exists.\n-    pub external_crates: HashMap<u32, ExternalCrate>,\n+    pub external_crates: FxHashMap<u32, ExternalCrate>,\n     /// A single version number to be used in the future when making backwards incompatible changes\n     /// to the JSON output.\n     pub format_version: u32,\n@@ -54,8 +53,8 @@ pub struct ItemSummary {\n     ///\n     /// Note that items can appear in multiple paths, and the one chosen is implementation\n     /// defined. Currently, this is the full path to where the item was defined. Eg\n-    /// [`String`] is currently `[\"alloc\", \"string\", \"String\"]` and [`HashMap`] is\n-    /// `[\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"]`, but this is subject to change.\n+    /// [`String`] is currently `[\"alloc\", \"string\", \"String\"]` and [`HashMap`][`std::collections::HashMap`]\n+    /// is `[\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"]`, but this is subject to change.\n     pub path: Vec<String>,\n     /// Whether this item is a struct, trait, macro, etc.\n     pub kind: ItemKind,\n@@ -80,7 +79,7 @@ pub struct Item {\n     /// Some(\"\") if there is some documentation but it is empty (EG `#[doc = \"\"]`).\n     pub docs: Option<String>,\n     /// This mapping resolves [intra-doc links](https://github.com/rust-lang/rfcs/blob/master/text/1946-intra-rustdoc-links.md) from the docstring to their IDs\n-    pub links: HashMap<String, Id>,\n+    pub links: FxHashMap<String, Id>,\n     /// Stringified versions of the attributes on this item (e.g. `\"#[inline]\"`)\n     pub attrs: Vec<String>,\n     pub deprecation: Option<Deprecation>,"}, {"sha": "1318a1f447620b17e9ab1901cb68a6291c376dac", "filename": "src/tools/jsondoclint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03c1e4d4ffaccddc09ed88238d354f9af7fccb21/src%2Ftools%2Fjsondoclint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/03c1e4d4ffaccddc09ed88238d354f9af7fccb21/src%2Ftools%2Fjsondoclint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2FCargo.toml?ref=03c1e4d4ffaccddc09ed88238d354f9af7fccb21", "patch": "@@ -9,6 +9,7 @@ edition = \"2021\"\n anyhow = \"1.0.62\"\n clap = { version = \"4.0.15\", features = [\"derive\"] }\n fs-err = \"2.8.1\"\n+rustc-hash = \"1.1.0\"\n rustdoc-json-types = { version = \"0.1.0\", path = \"../../rustdoc-json-types\" }\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0.85\""}, {"sha": "95a56a9dfac457a0ed78bfe162cfe670c20ee086", "filename": "src/tools/jsondoclint/src/validator/tests.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/03c1e4d4ffaccddc09ed88238d354f9af7fccb21/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03c1e4d4ffaccddc09ed88238d354f9af7fccb21/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs?ref=03c1e4d4ffaccddc09ed88238d354f9af7fccb21", "patch": "@@ -1,5 +1,4 @@\n-use std::collections::HashMap;\n-\n+use rustc_hash::FxHashMap;\n use rustdoc_json_types::{Crate, Item, ItemKind, ItemSummary, Visibility, FORMAT_VERSION};\n \n use crate::json_find::SelectorPart;\n@@ -27,7 +26,7 @@ fn errors_on_missing_links() {\n         root: id(\"0\"),\n         crate_version: None,\n         includes_private: false,\n-        index: HashMap::from_iter([(\n+        index: FxHashMap::from_iter([(\n             id(\"0\"),\n             Item {\n                 name: Some(\"root\".to_owned()),\n@@ -36,7 +35,7 @@ fn errors_on_missing_links() {\n                 span: None,\n                 visibility: Visibility::Public,\n                 docs: None,\n-                links: HashMap::from_iter([(\"Not Found\".to_owned(), id(\"1\"))]),\n+                links: FxHashMap::from_iter([(\"Not Found\".to_owned(), id(\"1\"))]),\n                 attrs: vec![],\n                 deprecation: None,\n                 inner: ItemEnum::Module(Module {\n@@ -46,8 +45,8 @@ fn errors_on_missing_links() {\n                 }),\n             },\n         )]),\n-        paths: HashMap::new(),\n-        external_crates: HashMap::new(),\n+        paths: FxHashMap::default(),\n+        external_crates: FxHashMap::default(),\n         format_version: rustdoc_json_types::FORMAT_VERSION,\n     };\n \n@@ -73,7 +72,7 @@ fn errors_on_local_in_paths_and_not_index() {\n         root: id(\"0:0:1572\"),\n         crate_version: None,\n         includes_private: false,\n-        index: HashMap::from_iter([\n+        index: FxHashMap::from_iter([\n             (\n                 id(\"0:0:1572\"),\n                 Item {\n@@ -83,7 +82,7 @@ fn errors_on_local_in_paths_and_not_index() {\n                     span: None,\n                     visibility: Visibility::Public,\n                     docs: None,\n-                    links: HashMap::from_iter([((\"prim@i32\".to_owned(), id(\"0:1:1571\")))]),\n+                    links: FxHashMap::from_iter([((\"prim@i32\".to_owned(), id(\"0:1:1571\")))]),\n                     attrs: Vec::new(),\n                     deprecation: None,\n                     inner: ItemEnum::Module(Module {\n@@ -102,22 +101,22 @@ fn errors_on_local_in_paths_and_not_index() {\n                     span: None,\n                     visibility: Visibility::Public,\n                     docs: None,\n-                    links: HashMap::default(),\n+                    links: FxHashMap::default(),\n                     attrs: Vec::new(),\n                     deprecation: None,\n                     inner: ItemEnum::Primitive(Primitive { name: \"i32\".to_owned(), impls: vec![] }),\n                 },\n             ),\n         ]),\n-        paths: HashMap::from_iter([(\n+        paths: FxHashMap::from_iter([(\n             id(\"0:1:1571\"),\n             ItemSummary {\n                 crate_id: 0,\n                 path: vec![\"microcore\".to_owned(), \"i32\".to_owned()],\n                 kind: ItemKind::Primitive,\n             },\n         )]),\n-        external_crates: HashMap::default(),\n+        external_crates: FxHashMap::default(),\n         format_version: rustdoc_json_types::FORMAT_VERSION,\n     };\n \n@@ -137,7 +136,7 @@ fn checks_local_crate_id_is_correct() {\n         root: id(\"root\"),\n         crate_version: None,\n         includes_private: false,\n-        index: HashMap::from_iter([(\n+        index: FxHashMap::from_iter([(\n             id(\"root\"),\n             Item {\n                 id: id(\"root\"),\n@@ -146,7 +145,7 @@ fn checks_local_crate_id_is_correct() {\n                 span: None,\n                 visibility: Visibility::Public,\n                 docs: None,\n-                links: HashMap::default(),\n+                links: FxHashMap::default(),\n                 attrs: Vec::new(),\n                 deprecation: None,\n                 inner: ItemEnum::Module(Module {\n@@ -156,8 +155,8 @@ fn checks_local_crate_id_is_correct() {\n                 }),\n             },\n         )]),\n-        paths: HashMap::default(),\n-        external_crates: HashMap::default(),\n+        paths: FxHashMap::default(),\n+        external_crates: FxHashMap::default(),\n         format_version: FORMAT_VERSION,\n     };\n     check(&krate, &[]);"}, {"sha": "0666122e8abc62d91f817b08fdb02744b0d9d382", "filename": "tests/run-make/rustdoc-verify-output-files/Makefile", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/03c1e4d4ffaccddc09ed88238d354f9af7fccb21/tests%2Frun-make%2Frustdoc-verify-output-files%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/03c1e4d4ffaccddc09ed88238d354f9af7fccb21/tests%2Frun-make%2Frustdoc-verify-output-files%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Frustdoc-verify-output-files%2FMakefile?ref=03c1e4d4ffaccddc09ed88238d354f9af7fccb21", "patch": "@@ -22,15 +22,11 @@ all:\n \t# Check if expected json file is generated\n \t[ -e $(OUTPUT_DIR)/foobar.json ]\n \n-\t# TODO\n-\t# We should re-generate json doc once again and compare the diff with previously\n-\t# generated one. Because layout of json docs changes in each compilation, we can't\n-\t# do that currently.\n-\t#\n-\t# See https://github.com/rust-lang/rust/issues/103785#issuecomment-1307425590 for details.\n+\t# Copy first json output to check if it's exactly same after second compilation\n+\tcp -R $(OUTPUT_DIR)/foobar.json $(TMP_OUTPUT_DIR)/foobar.json\n \n-\t# remove generated json doc\n-\trm $(OUTPUT_DIR)/foobar.json\n+\t# Generate json doc on the same output\n+\t$(RUSTDOC) src/lib.rs --crate-name foobar --crate-type lib --out-dir $(OUTPUT_DIR) -Z unstable-options --output-format json\n \n-\t# Check if json doc compilation broke any of the html files generated previously\n+\t# Check if all docs(including both json and html formats) are still the same after multiple compilations\n \t$(DIFF) -r -q $(OUTPUT_DIR) $(TMP_OUTPUT_DIR)"}]}