{"sha": "b5b3ffe3fc9cfb524a6432ec60a0fc95c514d2e1", "node_id": "C_kwDOAAsO6NoAKGI1YjNmZmUzZmM5Y2ZiNTI0YTY0MzJlYzYwYTBmYzk1YzUxNGQyZTE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-09-18T17:19:13Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-01T10:03:07Z"}, "message": "Remove `LintDiagnosticBuilder`", "tree": {"sha": "636258c7d97ed69790ff0f059ddcd204f5f104ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/636258c7d97ed69790ff0f059ddcd204f5f104ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5b3ffe3fc9cfb524a6432ec60a0fc95c514d2e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b3ffe3fc9cfb524a6432ec60a0fc95c514d2e1", "html_url": "https://github.com/rust-lang/rust/commit/b5b3ffe3fc9cfb524a6432ec60a0fc95c514d2e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5b3ffe3fc9cfb524a6432ec60a0fc95c514d2e1/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d028db9dbd57da78fec667343571459c41562874", "url": "https://api.github.com/repos/rust-lang/rust/commits/d028db9dbd57da78fec667343571459c41562874", "html_url": "https://github.com/rust-lang/rust/commit/d028db9dbd57da78fec667343571459c41562874"}], "stats": {"total": 26, "additions": 1, "deletions": 25}, "files": [{"sha": "4f26ecb1bdda29c2e03ee99705ab0c3148352ea7", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b5b3ffe3fc9cfb524a6432ec60a0fc95c514d2e1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b3ffe3fc9cfb524a6432ec60a0fc95c514d2e1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=b5b3ffe3fc9cfb524a6432ec60a0fc95c514d2e1", "patch": "@@ -629,27 +629,3 @@ macro_rules! struct_span_err {\n macro_rules! error_code {\n     ($code:ident) => {{ $crate::DiagnosticId::Error(stringify!($code).to_owned()) }};\n }\n-\n-/// Wrapper around a `DiagnosticBuilder` for creating lints.\n-pub struct LintDiagnosticBuilder<'a, G: EmissionGuarantee>(DiagnosticBuilder<'a, G>);\n-\n-impl<'a, G: EmissionGuarantee> LintDiagnosticBuilder<'a, G> {\n-    #[rustc_lint_diagnostics]\n-    /// Return the inner `DiagnosticBuilder`, first setting the primary message to `msg`.\n-    pub fn build(mut self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'a, G> {\n-        self.0.set_primary_message(msg);\n-        self.0.set_is_lint();\n-        self.0\n-    }\n-\n-    /// Create a `LintDiagnosticBuilder` from some existing `DiagnosticBuilder`.\n-    pub fn new(err: DiagnosticBuilder<'a, G>) -> LintDiagnosticBuilder<'a, G> {\n-        LintDiagnosticBuilder(err)\n-    }\n-}\n-\n-impl<'a> LintDiagnosticBuilder<'a, ErrorGuaranteed> {\n-    pub fn forget_guarantee(self) -> LintDiagnosticBuilder<'a, ()> {\n-        LintDiagnosticBuilder(self.0.forget_guarantee())\n-    }\n-}"}, {"sha": "646af7e1c6c49a3e1e770ca2bd429f81c8b1e738", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5b3ffe3fc9cfb524a6432ec60a0fc95c514d2e1/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b3ffe3fc9cfb524a6432ec60a0fc95c514d2e1/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=b5b3ffe3fc9cfb524a6432ec60a0fc95c514d2e1", "patch": "@@ -374,7 +374,7 @@ pub use diagnostic::{\n     AddToDiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgFromDisplay,\n     DiagnosticArgValue, DiagnosticId, DiagnosticStyledString, IntoDiagnosticArg, SubDiagnostic,\n };\n-pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee, LintDiagnosticBuilder};\n+pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee};\n use std::backtrace::Backtrace;\n \n /// A handler deals with errors and other compiler output."}]}