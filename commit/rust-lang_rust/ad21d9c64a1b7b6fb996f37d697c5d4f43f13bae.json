{"sha": "ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMjFkOWM2NGExYjdiNmZiOTk2ZjM3ZDY5N2M1ZDRmNDNmMTNiYWU=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-01-23T00:24:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-24T01:37:15Z"}, "message": "Don't reset the chpos/byte_pos to 0 in new_parser_from_source_str.\n\nThis correctly fixes issue #1362.\n\nchpos/byte_pos are now the offsets within a particular file, but\nrather the offsets within a virtual file with is formed by combing all\nof the modules within a crate.  Thus, resetting them to 0 causes an\noverlap and hence, bogus source locations.\n\nFix #1362 by moving chpos/byte_pos to parse_sess so that\nnew_parser_from_source_str has access to them and hence can chose an\ninitial value that is not already been used in the crate.\n\nNote that the trigger for bug 1361 was that syntax/ext/expand.rs calls\nparse_expr_from_source_str (which calls new_parser_from_source_str)\nusing the same codemap as the current crate (and hence causing overlap\nwith files in the crate as new_parser_from_source_str resets the\nchpos/byte_pos to 0).", "tree": {"sha": "20c81c17a0ee2fd2624079984cf235d19722c763", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20c81c17a0ee2fd2624079984cf235d19722c763"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae", "html_url": "https://github.com/rust-lang/rust/commit/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "355edf13e7d41ecdef750b166824422e76c4ef26", "url": "https://api.github.com/repos/rust-lang/rust/commits/355edf13e7d41ecdef750b166824422e76c4ef26", "html_url": "https://github.com/rust-lang/rust/commit/355edf13e7d41ecdef750b166824422e76c4ef26"}], "stats": {"total": 73, "additions": 47, "deletions": 26}, "files": [{"sha": "424d930e35c306472553c2106945b5353e57db17", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae", "patch": "@@ -105,7 +105,9 @@ fn load_pkg(filename: str) -> option::t<pkg> {\n     let sess = @{\n         cm: cm,\n         mutable next_id: 1,\n-        diagnostic: diagnostic::mk_handler(cm, none)\n+        diagnostic: diagnostic::mk_handler(cm, none),\n+        mutable chpos: 0u,\n+        mutable byte_pos: 0u\n     };\n     let c = parser::parse_crate_from_crate_file(filename, [], sess);\n "}, {"sha": "9d8d9ac03b7ba680b3f5f01d810e10b75e9b2ad1", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae", "patch": "@@ -488,7 +488,9 @@ fn build_session(sopts: @session::options, input: str,\n       parse_sess: @{\n           cm: codemap,\n           mutable next_id: 1,\n-          diagnostic: diagnostic_handler\n+          diagnostic: diagnostic_handler,\n+          mutable chpos: 0u,\n+          mutable byte_pos: 0u\n       },\n       codemap: codemap,\n       // For a library crate, this is always none"}, {"sha": "ca7af9e273da85e166825dcbd6b1656a78524cb4", "filename": "src/comp/syntax/parse/eval.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs?ref=ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae", "patch": "@@ -14,8 +14,6 @@ export eval_crate_directives_to_mod;\n type ctx =\n     @{p: parser,\n       sess: parser::parse_sess,\n-      mutable chpos: uint,\n-      mutable byte_pos: uint,\n       cfg: ast::crate_cfg};\n \n fn eval_crate_directives(cx: ctx, cdirs: [@ast::crate_directive], prefix: str,\n@@ -76,12 +74,12 @@ fn parse_companion_mod(cx: ctx, prefix: str, suffix: option::t<str>)\n     if file_exists(modpath) {\n         #debug(\"found companion mod\");\n         let p0 = new_parser_from_file(cx.sess, cx.cfg, modpath,\n-                                     cx.chpos, cx.byte_pos, SOURCE_FILE);\n+                                     SOURCE_FILE);\n         let inner_attrs = parse_inner_attrs_and_next(p0);\n         let first_item_outer_attrs = inner_attrs.next;\n         let m0 = parse_mod_items(p0, token::EOF, first_item_outer_attrs);\n-        cx.chpos = p0.reader.chpos;\n-        cx.byte_pos = p0.reader.pos;\n+        cx.sess.chpos = p0.reader.chpos;\n+        cx.sess.byte_pos = p0.reader.pos;\n         ret (m0.view_items, m0.items, inner_attrs.inner);\n     } else {\n         ret ([], [], []);\n@@ -108,8 +106,7 @@ fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: str,\n                 file_path\n             } else { prefix + std::fs::path_sep() + file_path };\n         let p0 =\n-            new_parser_from_file(cx.sess, cx.cfg, full_path, cx.chpos,\n-                                 cx.byte_pos, SOURCE_FILE);\n+            new_parser_from_file(cx.sess, cx.cfg, full_path, SOURCE_FILE);\n         let inner_attrs = parse_inner_attrs_and_next(p0);\n         let mod_attrs = attrs + inner_attrs.inner;\n         let first_item_outer_attrs = inner_attrs.next;\n@@ -119,8 +116,8 @@ fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: str,\n             syntax::parse::parser::mk_item(p0, cdir.span.lo, cdir.span.hi, id,\n                                            ast::item_mod(m0), mod_attrs);\n         // Thread defids, chpos and byte_pos through the parsers\n-        cx.chpos = p0.reader.chpos;\n-        cx.byte_pos = p0.reader.pos;\n+        cx.sess.chpos = p0.reader.chpos;\n+        cx.sess.byte_pos = p0.reader.pos;\n         items += [i];\n       }\n       ast::cdir_dir_mod(id, cdirs, attrs) {"}, {"sha": "cb7e1144334222f55b3f909495e48ade32c4cb68", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae", "patch": "@@ -25,7 +25,10 @@ enum file_type { CRATE_FILE, SOURCE_FILE, }\n type parse_sess = @{\n     cm: codemap::codemap,\n     mutable next_id: node_id,\n-    diagnostic: diagnostic::handler\n+    diagnostic: diagnostic::handler,\n+    // these two must be kept up to date\n+    mutable chpos: uint,\n+    mutable byte_pos: uint\n };\n \n fn next_node_id(sess: parse_sess) -> node_id {\n@@ -91,7 +94,7 @@ impl parser for parser {\n }\n \n fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n-                        chpos: uint, byte_pos: uint, ftype: file_type) ->\n+                        ftype: file_type) ->\n    parser {\n     let src = alt io::read_whole_file_str(path) {\n       result::ok(src) {\n@@ -102,7 +105,7 @@ fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n         sess.diagnostic.fatal(e)\n       }\n     };\n-    let filemap = codemap::new_filemap(path, chpos, byte_pos);\n+    let filemap = codemap::new_filemap(path, sess.chpos, sess.byte_pos);\n     sess.cm.files += [filemap];\n     let itr = @interner::mk(str::hash, str::eq);\n     let rdr = lexer::new_reader(sess.cm, sess.diagnostic,\n@@ -113,7 +116,7 @@ fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n                               name: str, source: str) -> parser {\n     let ftype = SOURCE_FILE;\n-    let filemap = codemap::new_filemap(name, 0u, 0u);\n+    let filemap = codemap::new_filemap(name, sess.chpos, sess.byte_pos);\n     sess.cm.files += [filemap];\n     let itr = @interner::mk(str::hash, str::eq);\n     let rdr = lexer::new_reader(sess.cm, sess.diagnostic,\n@@ -2482,21 +2485,30 @@ fn parse_native_view(p: parser) -> [@ast::view_item] {\n \n fn parse_crate_from_source_file(input: str, cfg: ast::crate_cfg,\n                                 sess: parse_sess) -> @ast::crate {\n-    let p = new_parser_from_file(sess, cfg, input, 0u, 0u, SOURCE_FILE);\n-    ret parse_crate_mod(p, cfg);\n+    let p = new_parser_from_file(sess, cfg, input, SOURCE_FILE);\n+    let r = parse_crate_mod(p, cfg);\n+    sess.chpos = p.reader.chpos;\n+    sess.byte_pos = p.reader.pos;\n+    ret r;\n }\n \n \n fn parse_expr_from_source_str(name: str, source: str, cfg: ast::crate_cfg,\n                               sess: parse_sess) -> @ast::expr {\n     let p = new_parser_from_source_str(sess, cfg, name, source);\n-    ret parse_expr(p);\n+    let r = parse_expr(p);\n+    sess.chpos = p.reader.chpos;\n+    sess.byte_pos = p.reader.pos;\n+    ret r;\n }\n \n fn parse_crate_from_source_str(name: str, source: str, cfg: ast::crate_cfg,\n                                sess: parse_sess) -> @ast::crate {\n     let p = new_parser_from_source_str(sess, cfg, name, source);\n-    ret parse_crate_mod(p, cfg);\n+    let r = parse_crate_mod(p, cfg);\n+    sess.chpos = p.reader.chpos;\n+    sess.byte_pos = p.reader.pos;\n+    ret r;\n }\n \n // Parses a source module as a crate\n@@ -2589,18 +2601,18 @@ fn parse_crate_directives(p: parser, term: token::token,\n \n fn parse_crate_from_crate_file(input: str, cfg: ast::crate_cfg,\n                                sess: parse_sess) -> @ast::crate {\n-    let p = new_parser_from_file(sess, cfg, input, 0u, 0u, CRATE_FILE);\n+    let p = new_parser_from_file(sess, cfg, input, CRATE_FILE);\n     let lo = p.span.lo;\n     let prefix = std::fs::dirname(p.reader.filemap.name);\n     let leading_attrs = parse_inner_attrs_and_next(p);\n     let crate_attrs = leading_attrs.inner;\n     let first_cdir_attr = leading_attrs.next;\n     let cdirs = parse_crate_directives(p, token::EOF, first_cdir_attr);\n+    sess.chpos = p.reader.chpos;\n+    sess.byte_pos = p.reader.pos;\n     let cx =\n         @{p: p,\n           sess: sess,\n-          mutable chpos: p.reader.chpos,\n-          mutable byte_pos: p.reader.pos,\n           cfg: p.cfg};\n     let (companionmod, _) = fs::splitext(fs::basename(input));\n     let (m, attrs) = eval::eval_crate_directives_to_mod("}, {"sha": "3dbcadb944919a229e7b7285963c79af1ca005d3", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae", "patch": "@@ -419,7 +419,9 @@ fn parse_and_print(code: str) -> str {\n     let sess = @{\n         cm: cm,\n         mutable next_id: 0,\n-        diagnostic: diagnostic::mk_handler(cm, none)\n+        diagnostic: diagnostic::mk_handler(cm, none),\n+        mutable chpos: 0u,\n+        mutable byte_pos: 0u\n     };\n     write_file(filename, code);\n     let crate = parser::parse_crate_from_source_str(\n@@ -566,7 +568,9 @@ fn check_variants(files: [str], cx: context) {\n         let sess = @{\n             cm: cm,\n             mutable next_id: 0,\n-            diagnostic: diagnostic::mk_handler(cm, none)\n+            diagnostic: diagnostic::mk_handler(cm, none),\n+            mutable chpos: 0u,\n+            mutable byte_pos: 0u\n         };\n         let crate =\n             parser::parse_crate_from_source_str("}, {"sha": "8074b47ab5b33f74ca8dc1848ecd09631a21b807", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae", "patch": "@@ -289,7 +289,9 @@ mod test {\n         let parse_sess = @{\n             cm: cm,\n             mutable next_id: 0,\n-            diagnostic: diagnostic::mk_handler(cm, none)\n+            diagnostic: diagnostic::mk_handler(cm, none),\n+            mutable chpos: 0u,\n+            mutable byte_pos: 0u\n         };\n         let parser = parser::new_parser_from_source_str(\n             parse_sess, [], \"-\", source);"}, {"sha": "11eb469e641f95773955f20ecb2efc53a00d2733", "filename": "src/rustdoc/parse.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae/src%2Frustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae/src%2Frustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fparse.rs?ref=ad21d9c64a1b7b6fb996f37d697c5d4f43f13bae", "patch": "@@ -12,7 +12,9 @@ fn new_parse_sess() -> parser::parse_sess {\n     let sess = @{\n         cm: cm,\n         mutable next_id: 1,\n-        diagnostic: diagnostic::mk_handler(cm, none)\n+        diagnostic: diagnostic::mk_handler(cm, none),\n+        mutable chpos: 0u,\n+        mutable byte_pos: 0u\n     };\n     ret sess;\n }"}]}