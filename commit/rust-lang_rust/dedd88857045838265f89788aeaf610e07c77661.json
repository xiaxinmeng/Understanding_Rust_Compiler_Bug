{"sha": "dedd88857045838265f89788aeaf610e07c77661", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZGQ4ODg1NzA0NTgzODI2NWY4OTc4OGFlYWY2MTBlMDdjNzc2NjE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-09T17:06:56Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-09T17:06:56Z"}, "message": "Implement HirDisplay for FnSig\n\nThis could be useful for diagnostics, but isn't used right now", "tree": {"sha": "aef234a140c8cf799e6b735825b806428373ad17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aef234a140c8cf799e6b735825b806428373ad17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dedd88857045838265f89788aeaf610e07c77661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dedd88857045838265f89788aeaf610e07c77661", "html_url": "https://github.com/rust-lang/rust/commit/dedd88857045838265f89788aeaf610e07c77661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dedd88857045838265f89788aeaf610e07c77661/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "243ba330dd962f2d65cf1c8321e5e7d8ba01f03a", "url": "https://api.github.com/repos/rust-lang/rust/commits/243ba330dd962f2d65cf1c8321e5e7d8ba01f03a", "html_url": "https://github.com/rust-lang/rust/commit/243ba330dd962f2d65cf1c8321e5e7d8ba01f03a"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "e774819060dcee9cba1e084e4da461aac8b9e53b", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/dedd88857045838265f89788aeaf610e07c77661/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedd88857045838265f89788aeaf610e07c77661/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=dedd88857045838265f89788aeaf610e07c77661", "patch": "@@ -297,26 +297,7 @@ impl HirDisplay for ApplicationTy {\n             }\n             TypeCtor::FnPtr { is_varargs, .. } => {\n                 let sig = FnSig::from_fn_ptr_substs(&self.parameters, is_varargs);\n-                write!(f, \"fn(\")?;\n-                f.write_joined(sig.params(), \", \")?;\n-                if is_varargs {\n-                    if sig.params().is_empty() {\n-                        write!(f, \"...\")?;\n-                    } else {\n-                        write!(f, \", ...\")?;\n-                    }\n-                }\n-                write!(f, \")\")?;\n-                let ret = sig.ret();\n-                if *ret != Ty::unit() {\n-                    let ret_display = ret.into_displayable(\n-                        f.db,\n-                        f.max_size,\n-                        f.omit_verbose_types,\n-                        f.display_target,\n-                    );\n-                    write!(f, \" -> {}\", ret_display)?;\n-                }\n+                sig.hir_fmt(f)?;\n             }\n             TypeCtor::FnDef(def) => {\n                 let sig = f.db.callable_item_signature(def).subst(&self.parameters);\n@@ -584,6 +565,28 @@ impl HirDisplay for Ty {\n     }\n }\n \n+impl HirDisplay for FnSig {\n+    fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n+        write!(f, \"fn(\")?;\n+        f.write_joined(self.params(), \", \")?;\n+        if self.is_varargs {\n+            if self.params().is_empty() {\n+                write!(f, \"...\")?;\n+            } else {\n+                write!(f, \", ...\")?;\n+            }\n+        }\n+        write!(f, \")\")?;\n+        let ret = self.ret();\n+        if *ret != Ty::unit() {\n+            let ret_display =\n+                ret.into_displayable(f.db, f.max_size, f.omit_verbose_types, f.display_target);\n+            write!(f, \" -> {}\", ret_display)?;\n+        }\n+        Ok(())\n+    }\n+}\n+\n fn write_bounds_like_dyn_trait(\n     predicates: &[GenericPredicate],\n     f: &mut HirFormatter,"}]}