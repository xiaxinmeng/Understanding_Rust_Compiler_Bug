{"sha": "588367b62ec0e6c30cb8d8783644775742da91fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ODM2N2I2MmVjMGU2YzMwY2I4ZDg3ODM2NDQ3NzU3NDJkYTkxZmM=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-26T15:25:14Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-09-02T11:39:54Z"}, "message": "Fix dogfood", "tree": {"sha": "0e1d255ac3babde89e85bdc0260d4c474dbbdac4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e1d255ac3babde89e85bdc0260d4c474dbbdac4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/588367b62ec0e6c30cb8d8783644775742da91fc", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmEwuAoACgkQHKDfKvWd\naKVlrhAA05HWI5Z4EZNPqFwriv34JB8zuapD9TiliwFpOJ+DmSbhhfm82KmthFEV\n5n0iYRGIGHtZZ/R0qlOn4UfKWLe89JbKEnx5gB+xvk3r5OEcYVFCvS0VdCY+uK0N\nnp/f4aQGlSUzVsP6xqaC6wajELM4lLvYOTZYl1XJYZP03FCHzYpOrad+jyMUIMMU\nPLWkZonYkXmT+EUzjuNCh5lAeNshY/cjbpT8396ClRSiDg1K+Yiuv1r7BcebESql\ngVtOiOQ2JyV7hj0uq9shmUVyaHkqD/PowNcpP8BN4l3DMqZs1v8axTjPiA/EYykm\nLT3yx2K/HPHLOBxNqSFWn3b1na3rrfL/7N1SamIQB28y8n9Qi8mkqkFWMoyEzygx\nO5HXkrpzTPwEh2Cy+shFsXDjoTJBYffNP0bh1k/W4iFcFAmg+yDGdg/YNZ0fxKqO\niuZkP/sc+4Sn/GMJ/he5KBsJBtiarE01TLxSaz6So2FtOc0toGTzWEy5MWAj7ray\nGzger3qzQCbLhKMQsKaPLMw2DwhmfQdlZEEkmSgVcHaKvNOA06BcpK7ZR/7s82JO\nhRU5OD7JN6o6YqD3/kkVtokcAfIpDR8nsHt8/hPa81d0syIOXD/lPBUl3c2Yul5U\nDrJAO8Lh4Tx9AESaUai4WaPNjyEiREH5prvFt4/QLtG3RAp1PqM=\n=ALrG\n-----END PGP SIGNATURE-----", "payload": "tree 0e1d255ac3babde89e85bdc0260d4c474dbbdac4\nparent 5722a7dacdfa84d125adaa872dfe2ec0a34e8200\nauthor Cameron Steffen <cam.steffen94@gmail.com> 1629991514 -0500\ncommitter flip1995 <philipp.krones@embecosm.com> 1630582794 +0100\n\nFix dogfood\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/588367b62ec0e6c30cb8d8783644775742da91fc", "html_url": "https://github.com/rust-lang/rust/commit/588367b62ec0e6c30cb8d8783644775742da91fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/588367b62ec0e6c30cb8d8783644775742da91fc/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5722a7dacdfa84d125adaa872dfe2ec0a34e8200", "url": "https://api.github.com/repos/rust-lang/rust/commits/5722a7dacdfa84d125adaa872dfe2ec0a34e8200", "html_url": "https://github.com/rust-lang/rust/commit/5722a7dacdfa84d125adaa872dfe2ec0a34e8200"}], "stats": {"total": 97, "additions": 41, "deletions": 56}, "files": [{"sha": "d834a1d317a0f1d7e9d3344fb764cc3a2ab866d4", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -118,7 +118,7 @@ enum AssertKind {\n fn match_assert_with_message<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<AssertKind> {\n     if_chain! {\n         if let Some(higher::If { cond, then, .. }) = higher::If::hir(expr);\n-        if let ExprKind::Unary(UnOp::Not, ref expr) = cond.kind;\n+        if let ExprKind::Unary(UnOp::Not, expr) = cond.kind;\n         // bind the first argument of the `assert!` macro\n         if let Some((Constant::Bool(is_true), _)) = constant(cx, cx.typeck_results(), expr);\n         // block"}, {"sha": "a643b3eb8f1b8fa32495259cdf90edf613cd4647", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -332,8 +332,6 @@ fn check_powi(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n                         ),\n                         Applicability::MachineApplicable,\n                     );\n-\n-                    return;\n                 }\n             }\n         }"}, {"sha": "77d08081c07f1d2bf07911b33de74f4a9f0148ef", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -26,7 +26,6 @@ pub(super) fn check_item(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n-            return;\n         } else if is_public && !is_proc_macro(cx.sess(), attrs) && !attrs.iter().any(|a| a.has_name(sym::no_mangle)) {\n             check_must_use_candidate(\n                 cx,"}, {"sha": "33eba02dae063c54603a40d192bbb36281271bdc", "filename": "clippy_lints/src/if_let_some_result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -46,8 +46,8 @@ impl<'tcx> LateLintPass<'tcx> for OkIfLet {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! { //begin checking variables\n             if let Some(higher::IfLet { let_pat, let_expr, .. }) = higher::IfLet::hir(cx, expr);\n-            if let ExprKind::MethodCall(_, ok_span, ref result_types, _) = let_expr.kind; //check is expr.ok() has type Result<T,E>.ok(, _)\n-            if let PatKind::TupleStruct(QPath::Resolved(_, ref x), ref y, _)  = let_pat.kind; //get operation\n+            if let ExprKind::MethodCall(_, ok_span, result_types, _) = let_expr.kind; //check is expr.ok() has type Result<T,E>.ok(, _)\n+            if let PatKind::TupleStruct(QPath::Resolved(_, x), y, _)  = let_pat.kind; //get operation\n             if method_chain_args(let_expr, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;\n             if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&result_types[0]), sym::result_type);\n             if rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_path(x, false)) == \"Some\";"}, {"sha": "9c224445b15925bc5be88c6fb6a1cfa215d5513f", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -580,7 +580,7 @@ impl<'tcx> LateLintPass<'tcx> for Loops {\n \n         while_let_on_iterator::check(cx, expr);\n \n-        if let Some(higher::While { if_cond, if_then, .. }) = higher::While::hir(&expr) {\n+        if let Some(higher::While { if_cond, if_then, .. }) = higher::While::hir(expr) {\n             while_immutable_condition::check(cx, if_cond, if_then);\n         }\n "}, {"sha": "1848f5b5de2f2fca48c3f2c1d1d2ce00ce6a9d3a", "filename": "clippy_lints/src/loops/while_let_loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -24,13 +24,13 @@ pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, loop_block: &'\n             }\n         }\n \n-        if let ExprKind::Match(ref matchexpr, ref arms, MatchSource::Normal) = inner.kind {\n+        if let ExprKind::Match(matchexpr, arms, MatchSource::Normal) = inner.kind {\n             if arms.len() == 2\n                 && arms[0].guard.is_none()\n                 && arms[1].guard.is_none()\n-                && is_simple_break_expr(&arms[1].body)\n+                && is_simple_break_expr(arms[1].body)\n             {\n-                could_be_while_let(cx, expr, &arms[0].pat, matchexpr);\n+                could_be_while_let(cx, expr, arms[0].pat, matchexpr);\n             }\n         }\n     }"}, {"sha": "2f1ff567e844f803c7e4f8930aefd1a5f1187eda", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -631,7 +631,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n                 check_match_single_binding(cx, ex, arms, expr);\n             }\n         }\n-        if let ExprKind::Match(ref ex, ref arms, _) = expr.kind {\n+        if let ExprKind::Match(ex, arms, _) = expr.kind {\n             check_match_ref_pats(cx, ex, arms.iter().map(|el| el.pat), expr);\n         }\n         if let Some(higher::IfLet { let_pat, let_expr, .. }) = higher::IfLet::hir(cx, expr) {\n@@ -1194,7 +1194,7 @@ where\n \n     let (first_sugg, msg, title);\n     let span = ex.span.source_callsite();\n-    if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, ref inner) = ex.kind {\n+    if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, inner) = ex.kind {\n         first_sugg = once((span, Sugg::hir_with_macro_callsite(cx, inner, \"..\").to_string()));\n         msg = \"try\";\n         title = \"you don't need to add `&` to both the expression and the patterns\";\n@@ -1205,7 +1205,7 @@ where\n     }\n \n     let remaining_suggs = pats.filter_map(|pat| {\n-        if let PatKind::Ref(ref refp, _) = pat.kind {\n+        if let PatKind::Ref(refp, _) = pat.kind {\n             Some((pat.span, snippet(cx, refp.span, \"..\").to_string()))\n         } else {\n             None\n@@ -1365,7 +1365,7 @@ where\n                 find_bool_lit(&arm.2.kind, is_if_let).map_or(false, |b| b == b0) && arm.3.is_none() && arm.0.is_empty()\n             });\n         then {\n-            if let Some(ref last_pat) = last_pat_opt {\n+            if let Some(last_pat) = last_pat_opt {\n                 if !is_wild(last_pat) {\n                     return false;\n                 }\n@@ -1827,13 +1827,13 @@ mod redundant_pattern_match {\n             ..\n         }) = higher::IfLet::hir(cx, expr)\n         {\n-            find_sugg_for_if_let(cx, expr, let_pat, let_expr, \"if\", if_else.is_some())\n+            find_sugg_for_if_let(cx, expr, let_pat, let_expr, \"if\", if_else.is_some());\n         }\n         if let ExprKind::Match(op, arms, MatchSource::Normal) = &expr.kind {\n-            find_sugg_for_match(cx, expr, op, arms)\n+            find_sugg_for_match(cx, expr, op, arms);\n         }\n         if let Some(higher::WhileLet { let_pat, let_expr, .. }) = higher::WhileLet::hir(expr) {\n-            find_sugg_for_if_let(cx, expr, let_pat, let_expr, \"while\", false)\n+            find_sugg_for_if_let(cx, expr, let_pat, let_expr, \"while\", false);\n         }\n     }\n "}, {"sha": "e7bc24465908b43851b87e2af2483e6ac7758028", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -118,7 +118,7 @@ impl<'tcx> LateLintPass<'tcx> for PatternTypeMismatch {\n             }\n         }\n         if let ExprKind::Let(let_pat, let_expr, _) = expr.kind {\n-            if let Some(ref expr_ty) = cx.typeck_results().node_type_opt(let_expr.hir_id) {\n+            if let Some(expr_ty) = cx.typeck_results().node_type_opt(let_expr.hir_id) {\n                 if in_external_macro(cx.sess(), let_pat.span) {\n                     return;\n                 }"}, {"sha": "e79cd7ed4ec4a969c95a2c0db407735712130d81", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -106,7 +106,7 @@ impl QuestionMark {\n             if let PatKind::Binding(annot, bind_id, _, _) = fields[0].kind;\n             let by_ref = matches!(annot, BindingAnnotation::Ref | BindingAnnotation::RefMut);\n \n-            if let ExprKind::Block(ref block, None) = if_then.kind;\n+            if let ExprKind::Block(block, None) = if_then.kind;\n             if block.stmts.is_empty();\n             if let Some(trailing_expr) = &block.expr;\n             if path_to_local_id(trailing_expr, bind_id);"}, {"sha": "87364a88ed0dcc8267c6e955c64e83874ab38aaf", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -337,7 +337,7 @@ fn check_range_zip_with_len(cx: &LateContext<'_>, path: &PathSegment<'_>, args:\n         // `.iter()` and `.len()` called on same `Path`\n         if let ExprKind::Path(QPath::Resolved(_, iter_path)) = iter_args[0].kind;\n         if let ExprKind::Path(QPath::Resolved(_, len_path)) = len_args[0].kind;\n-        if SpanlessEq::new(cx).eq_path_segments(&iter_path.segments, &len_path.segments);\n+        if SpanlessEq::new(cx).eq_path_segments(iter_path.segments, len_path.segments);\n         then {\n             span_lint(cx,\n                 RANGE_ZIP_WITH_LEN,"}, {"sha": "90e3c3f4b3e98f78121f2d23f43bc4a1c89148f6", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -51,9 +51,7 @@ impl ReturnVisitor {\n \n impl<'ast> ast_visit::Visitor<'ast> for ReturnVisitor {\n     fn visit_expr(&mut self, ex: &'ast ast::Expr) {\n-        if let ast::ExprKind::Ret(_) = ex.kind {\n-            self.found_return = true;\n-        } else if let ast::ExprKind::Try(_) = ex.kind {\n+        if let ast::ExprKind::Ret(_) | ast::ExprKind::Try(_) = ex.kind {\n             self.found_return = true;\n         }\n "}, {"sha": "341b5a61631dff896fb93510799316fb6cb324a3", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -206,13 +206,10 @@ fn check_final_expr<'tcx>(\n         // an if/if let expr, check both exprs\n         // note, if without else is going to be a type checking error anyways\n         // (except for unit type functions) so we don't match it\n-        ExprKind::Match(_, arms, source) => match source {\n-            MatchSource::Normal => {\n-                for arm in arms.iter() {\n-                    check_final_expr(cx, arm.body, Some(arm.body.span), RetReplacement::Block);\n-                }\n-            },\n-            _ => (),\n+        ExprKind::Match(_, arms, MatchSource::Normal) => {\n+            for arm in arms.iter() {\n+                check_final_expr(cx, arm.body, Some(arm.body.span), RetReplacement::Block);\n+            }\n         },\n         ExprKind::DropTemps(expr) => check_final_expr(cx, expr, None, RetReplacement::Empty),\n         _ => (),"}, {"sha": "f4808682b69279dc1e4445d7c00770c030748866", "filename": "clippy_lints/src/unused_async.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_async.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n-use rustc_hir::{Body, Expr, ExprKind, FnDecl, FnHeader, HirId, IsAsync, Item, ItemKind, YieldSource};\n+use rustc_hir::{Body, Expr, ExprKind, FnDecl, FnHeader, HirId, IsAsync, YieldSource};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -57,11 +57,6 @@ impl<'a, 'tcx> Visitor<'tcx> for AsyncFnVisitor<'a, 'tcx> {\n }\n \n impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n-    fn check_item(&mut self, _: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n-        if let ItemKind::Trait(..) = item.kind {\n-            return;\n-        }\n-    }\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'tcx>,"}, {"sha": "43590cc786236f2640c751f69877b3ee4f96ca6b", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -142,7 +142,7 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n                 print_expr(cx, arg, indent + 1);\n             }\n         },\n-        hir::ExprKind::Let(ref pat, ref expr, _) => {\n+        hir::ExprKind::Let(pat, expr, _) => {\n             print_pat(cx, pat, indent + 1);\n             print_expr(cx, expr, indent + 1);\n         },"}, {"sha": "85ff292c53a4d22fe1bb18ed5b1396a1893d696c", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessVec {\n         if_chain! {\n             if let ty::Ref(_, ty, _) = cx.typeck_results().expr_ty_adjusted(expr).kind();\n             if let ty::Slice(..) = ty.kind();\n-            if let ExprKind::AddrOf(BorrowKind::Ref, mutability, ref addressee) = expr.kind;\n+            if let ExprKind::AddrOf(BorrowKind::Ref, mutability, addressee) = expr.kind;\n             if let Some(vec_args) = higher::VecArgs::hir(cx, addressee);\n             then {\n                 self.check_vec_macro(cx, &vec_args, mutability, expr.span);"}, {"sha": "4bb31868bafb9b3c445c73e0df23e36db5c01b80", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -23,16 +23,16 @@ impl<'tcx> ForLoop<'tcx> {\n     #[inline]\n     pub fn hir(expr: &Expr<'tcx>) -> Option<Self> {\n         if_chain! {\n-            if let hir::ExprKind::Match(ref iterexpr, ref arms, hir::MatchSource::ForLoopDesugar) = expr.kind;\n+            if let hir::ExprKind::Match(iterexpr, arms, hir::MatchSource::ForLoopDesugar) = expr.kind;\n             if let Some(first_arm) = arms.get(0);\n-            if let hir::ExprKind::Call(_, ref iterargs) = iterexpr.kind;\n+            if let hir::ExprKind::Call(_, iterargs) = iterexpr.kind;\n             if let Some(first_arg) = iterargs.get(0);\n             if iterargs.len() == 1 && arms.len() == 1 && first_arm.guard.is_none();\n-            if let hir::ExprKind::Loop(ref block, ..) = first_arm.body.kind;\n+            if let hir::ExprKind::Loop(block, ..) = first_arm.body.kind;\n             if block.expr.is_none();\n             if let [ _, _, ref let_stmt, ref body ] = *block.stmts;\n-            if let hir::StmtKind::Local(ref local) = let_stmt.kind;\n-            if let hir::StmtKind::Expr(ref body_expr) = body.kind;\n+            if let hir::StmtKind::Local(local) = let_stmt.kind;\n+            if let hir::StmtKind::Expr(body_expr) = body.kind;\n             then {\n                 return Some(Self {\n                     pat: &*local.pat,\n@@ -189,7 +189,7 @@ impl<'a> Range<'a> {\n         }\n \n         match expr.kind {\n-            hir::ExprKind::Call(ref path, ref args)\n+            hir::ExprKind::Call(path, args)\n                 if matches!(\n                     path.kind,\n                     hir::ExprKind::Path(hir::QPath::LangItem(hir::LangItem::RangeInclusiveNew, _))\n@@ -201,7 +201,7 @@ impl<'a> Range<'a> {\n                     limits: ast::RangeLimits::Closed,\n                 })\n             },\n-            hir::ExprKind::Struct(ref path, ref fields, None) => match path {\n+            hir::ExprKind::Struct(path, fields, None) => match &path {\n                 hir::QPath::LangItem(hir::LangItem::RangeFull, _) => Some(Range {\n                     start: None,\n                     end: None,\n@@ -247,7 +247,7 @@ impl<'a> VecArgs<'a> {\n     /// from `vec!`.\n     pub fn hir(cx: &LateContext<'_>, expr: &'a hir::Expr<'_>) -> Option<VecArgs<'a>> {\n         if_chain! {\n-            if let hir::ExprKind::Call(ref fun, ref args) = expr.kind;\n+            if let hir::ExprKind::Call(fun, args) = expr.kind;\n             if let hir::ExprKind::Path(ref qpath) = fun.kind;\n             if is_expn_of(fun.span, \"vec\").is_some();\n             if let Some(fun_def_id) = cx.qpath_res(qpath, fun.hir_id).opt_def_id();\n@@ -259,10 +259,10 @@ impl<'a> VecArgs<'a> {\n                 else if match_def_path(cx, fun_def_id, &paths::SLICE_INTO_VEC) && args.len() == 1 {\n                     // `vec![a, b, c]` case\n                     if_chain! {\n-                        if let hir::ExprKind::Box(ref boxed) = args[0].kind;\n-                        if let hir::ExprKind::Array(ref args) = boxed.kind;\n+                        if let hir::ExprKind::Box(boxed) = args[0].kind;\n+                        if let hir::ExprKind::Array(args) = boxed.kind;\n                         then {\n-                            return Some(VecArgs::Vec(&*args));\n+                            return Some(VecArgs::Vec(args));\n                         }\n                     }\n \n@@ -566,7 +566,7 @@ pub fn is_from_for_desugar(local: &hir::Local<'_>) -> bool {\n     // }\n     // ```\n     if_chain! {\n-        if let Some(ref expr) = local.init;\n+        if let Some(expr) = local.init;\n         if let hir::ExprKind::Match(_, _, hir::MatchSource::ForLoopDesugar) = expr.kind;\n         then {\n             return true;"}, {"sha": "6e9a1de21eef5cb010d32f668a82565ba1713a35", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -232,9 +232,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&ExprKind::If(lc, lt, ref le), &ExprKind::If(rc, rt, ref re)) => {\n                 self.eq_expr(lc, rc) && self.eq_expr(&**lt, &**rt) && both(le, re, |l, r| self.eq_expr(l, r))\n             },\n-            (&ExprKind::Let(ref lp, ref le, _), &ExprKind::Let(ref rp, ref re, _)) => {\n-                self.eq_pat(lp, rp) && self.eq_expr(le, re)\n-            },\n+            (&ExprKind::Let(lp, le, _), &ExprKind::Let(rp, re, _)) => self.eq_pat(lp, rp) && self.eq_expr(le, re),\n             (&ExprKind::Lit(ref l), &ExprKind::Lit(ref r)) => l.node == r.node,\n             (&ExprKind::Loop(lb, ref ll, ref lls, _), &ExprKind::Loop(rb, ref rl, ref rls, _)) => {\n                 lls == rls && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.ident.name == r.ident.name)\n@@ -668,7 +666,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     }\n                 }\n             },\n-            ExprKind::Let(ref pat, ref expr, _) => {\n+            ExprKind::Let(pat, expr, _) => {\n                 self.hash_expr(expr);\n                 self.hash_pat(pat);\n             },"}, {"sha": "40d7963a5e545152d0e7ebb0be5e1b782509187f", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588367b62ec0e6c30cb8d8783644775742da91fc/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=588367b62ec0e6c30cb8d8783644775742da91fc", "patch": "@@ -1603,13 +1603,13 @@ pub fn if_sequence<'tcx>(mut expr: &'tcx Expr<'tcx>) -> (Vec<&'tcx Expr<'tcx>>,\n \n     while let Some(higher::IfOrIfLet { cond, then, r#else }) = higher::IfOrIfLet::hir(expr) {\n         conds.push(&*cond);\n-        if let ExprKind::Block(ref block, _) = then.kind {\n+        if let ExprKind::Block(block, _) = then.kind {\n             blocks.push(block);\n         } else {\n             panic!(\"ExprKind::If node is not an ExprKind::Block\");\n         }\n \n-        if let Some(ref else_expr) = r#else {\n+        if let Some(else_expr) = r#else {\n             expr = else_expr;\n         } else {\n             break;"}]}