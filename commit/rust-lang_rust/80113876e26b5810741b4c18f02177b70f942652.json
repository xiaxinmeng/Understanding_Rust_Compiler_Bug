{"sha": "80113876e26b5810741b4c18f02177b70f942652", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMTEzODc2ZTI2YjU4MTA3NDFiNGMxOGYwMjE3N2I3MGY5NDI2NTI=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-03-27T15:02:06Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-03-27T15:02:06Z"}, "message": "Simplify", "tree": {"sha": "87c0a485b297f82a762907e0a90cd014c9c81b36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87c0a485b297f82a762907e0a90cd014c9c81b36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80113876e26b5810741b4c18f02177b70f942652", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80113876e26b5810741b4c18f02177b70f942652", "html_url": "https://github.com/rust-lang/rust/commit/80113876e26b5810741b4c18f02177b70f942652", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80113876e26b5810741b4c18f02177b70f942652/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b34c4c002a96d928794f6d870edc0d01398df99", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b34c4c002a96d928794f6d870edc0d01398df99", "html_url": "https://github.com/rust-lang/rust/commit/7b34c4c002a96d928794f6d870edc0d01398df99"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "29fa7d30b4385c7f32921f40a86ce8d793204928", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/80113876e26b5810741b4c18f02177b70f942652/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80113876e26b5810741b4c18f02177b70f942652/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=80113876e26b5810741b4c18f02177b70f942652", "patch": "@@ -40,26 +40,27 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     } else if num_params > 1 {\n         // Count how many parameters into the call we are.\n         if let Some(arg_list) = calling_node.arg_list() {\n-            // Number of arguments specified at the caller site\n-            let mut num_args_of_call = arg_list.args().count();\n-\n-            // If we are calling a method account for the `self` argument.\n-            if has_self {\n-                num_args_of_call = num_args_of_call + 1;\n-            }\n+            // Number of arguments specified at the call site\n+            let num_args_at_callsite = arg_list.args().count();\n \n             let arg_list_range = arg_list.syntax().range();\n             if !arg_list_range.contains_inclusive(position.offset) {\n                 tested_by!(call_info_bad_offset);\n                 return None;\n             }\n \n-            let param = arg_list\n-                .args()\n-                .position(|arg| arg.syntax().range().contains(position.offset))\n-                .or(Some(num_params - 1))\n-                .min(Some(num_args_of_call))\n-                .unwrap();\n+            let mut param = std::cmp::min(\n+                num_args_at_callsite,\n+                arg_list\n+                    .args()\n+                    .take_while(|arg| arg.syntax().range().end() < position.offset)\n+                    .count(),\n+            );\n+\n+            // If we are in a method account for `self`\n+            if has_self {\n+                param = param + 1;\n+            }\n \n             call_info.active_parameter = Some(param);\n         }"}]}