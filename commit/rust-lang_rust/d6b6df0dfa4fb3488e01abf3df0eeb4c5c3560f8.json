{"sha": "d6b6df0dfa4fb3488e01abf3df0eeb4c5c3560f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YjZkZjBkZmE0ZmIzNDg4ZTAxYWJmM2RmMGVlYjRjNWMzNTYwZjg=", "commit": {"author": {"name": "jbranchaud", "email": "jbranchaud@gmail.com", "date": "2014-12-05T06:10:58Z"}, "committer": {"name": "jbranchaud", "email": "jbranchaud@gmail.com", "date": "2014-12-05T21:40:46Z"}, "message": "Add doctests for keys() and values() of the BTreeMap collection.\n\nUpdate keys() and values() for BTreeMap based on @Gankro's comments.\n\nAssign keys and values to variables before doing assertion.", "tree": {"sha": "1a7e2a56eefb9d823abf91aca209c6661a57103a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a7e2a56eefb9d823abf91aca209c6661a57103a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6b6df0dfa4fb3488e01abf3df0eeb4c5c3560f8", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b6df0dfa4fb3488e01abf3df0eeb4c5c3560f8", "html_url": "https://github.com/rust-lang/rust/commit/d6b6df0dfa4fb3488e01abf3df0eeb4c5c3560f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6b6df0dfa4fb3488e01abf3df0eeb4c5c3560f8/comments", "author": {"login": "jbranchaud", "id": 694063, "node_id": "MDQ6VXNlcjY5NDA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/694063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbranchaud", "html_url": "https://github.com/jbranchaud", "followers_url": "https://api.github.com/users/jbranchaud/followers", "following_url": "https://api.github.com/users/jbranchaud/following{/other_user}", "gists_url": "https://api.github.com/users/jbranchaud/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbranchaud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbranchaud/subscriptions", "organizations_url": "https://api.github.com/users/jbranchaud/orgs", "repos_url": "https://api.github.com/users/jbranchaud/repos", "events_url": "https://api.github.com/users/jbranchaud/events{/privacy}", "received_events_url": "https://api.github.com/users/jbranchaud/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbranchaud", "id": 694063, "node_id": "MDQ6VXNlcjY5NDA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/694063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbranchaud", "html_url": "https://github.com/jbranchaud", "followers_url": "https://api.github.com/users/jbranchaud/followers", "following_url": "https://api.github.com/users/jbranchaud/following{/other_user}", "gists_url": "https://api.github.com/users/jbranchaud/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbranchaud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbranchaud/subscriptions", "organizations_url": "https://api.github.com/users/jbranchaud/orgs", "repos_url": "https://api.github.com/users/jbranchaud/repos", "events_url": "https://api.github.com/users/jbranchaud/events{/privacy}", "received_events_url": "https://api.github.com/users/jbranchaud/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "361baabb07b2fb921d0f556d0787b3ea7ef86746", "url": "https://api.github.com/repos/rust-lang/rust/commits/361baabb07b2fb921d0f556d0787b3ea7ef86746", "html_url": "https://github.com/rust-lang/rust/commit/361baabb07b2fb921d0f556d0787b3ea7ef86746"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "b3dc9139eb32462687778072af23c630794ceeb7", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d6b6df0dfa4fb3488e01abf3df0eeb4c5c3560f8/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b6df0dfa4fb3488e01abf3df0eeb4c5c3560f8/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=d6b6df0dfa4fb3488e01abf3df0eeb4c5c3560f8", "patch": "@@ -1068,12 +1068,38 @@ impl<K, V> BTreeMap<K, V> {\n     }\n \n     /// Gets an iterator over the keys of the map.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut a = BTreeMap::new();\n+    /// a.insert(1u, \"a\");\n+    /// a.insert(2u, \"b\");\n+    ///\n+    /// let keys: Vec<uint> = a.keys().cloned().collect();\n+    /// assert_eq!(keys, vec![1u,2,]);\n+    /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn keys<'a>(&'a self) -> Keys<'a, K, V> {\n         self.iter().map(|(k, _)| k)\n     }\n \n     /// Gets an iterator over the values of the map.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut a = BTreeMap::new();\n+    /// a.insert(1u, \"a\");\n+    /// a.insert(2u, \"b\");\n+    ///\n+    /// let values: Vec<&str> = a.values().cloned().collect();\n+    /// assert_eq!(values, vec![\"a\",\"b\"]);\n+    /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn values<'a>(&'a self) -> Values<'a, K, V> {\n         self.iter().map(|(_, v)| v)"}]}