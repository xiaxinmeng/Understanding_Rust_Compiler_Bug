{"sha": "f82ecff4d17ab0f90979294ccf5f5079d9df08eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MmVjZmY0ZDE3YWIwZjkwOTc5Mjk0Y2NmNWY1MDc5ZDlkZjA4ZWI=", "commit": {"author": {"name": "Aaron Power", "email": "theaaronepower@gmail.com", "date": "2019-01-09T15:12:12Z"}, "committer": {"name": "Aaron Power", "email": "theaaronepower@gmail.com", "date": "2019-01-09T15:20:51Z"}, "message": "Updated RELEASES.md for 1.32.0", "tree": {"sha": "f6246c665301e6ec9079978dec82b46b8f042194", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6246c665301e6ec9079978dec82b46b8f042194"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f82ecff4d17ab0f90979294ccf5f5079d9df08eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f82ecff4d17ab0f90979294ccf5f5079d9df08eb", "html_url": "https://github.com/rust-lang/rust/commit/f82ecff4d17ab0f90979294ccf5f5079d9df08eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f82ecff4d17ab0f90979294ccf5f5079d9df08eb/comments", "author": null, "committer": null, "parents": [{"sha": "664c7797f6bfddf9f5e67474c2fd8017f91d7110", "url": "https://api.github.com/repos/rust-lang/rust/commits/664c7797f6bfddf9f5e67474c2fd8017f91d7110", "html_url": "https://github.com/rust-lang/rust/commit/664c7797f6bfddf9f5e67474c2fd8017f91d7110"}], "stats": {"total": 263, "additions": 263, "deletions": 0}, "files": [{"sha": "887b6e9c39f700bf80ebffd48ec789fc0c9a111e", "filename": "RELEASES.md", "status": "modified", "additions": 263, "deletions": 0, "changes": 263, "blob_url": "https://github.com/rust-lang/rust/blob/f82ecff4d17ab0f90979294ccf5f5079d9df08eb/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/f82ecff4d17ab0f90979294ccf5f5079d9df08eb/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=f82ecff4d17ab0f90979294ccf5f5079d9df08eb", "patch": "@@ -1,3 +1,266 @@\n+Version 1.32.0 (2019-01-17)\n+==========================\n+\n+Language\n+--------\n+#### 2018 edition\n+- [You can now use the `?` operator in macro definitions.][56245] The `?`\n+  operator allows you to specify zero or one repetitions similar to the `*` and\n+  `+` operators.\n+\n+#### All editions\n+- [You can now match against `PhantomData<T>` types.][55837]\n+- [You can now match against literals in macros with the `literal`\n+  specifier.][56072] This will match against a literal of any type.\n+  E.g. `1`, `'A'`, `\"Hello World\"`\n+- [Self can now be used as a constructor and pattern.][56365] E.g. \n+  ```rust\n+  struct Point(i32, i32);\n+\n+  impl Point {\n+      pub fn new(x: i32, y: i32) -> Self {\n+          Self(x, y)\n+      }\n+\n+      pub fn is_origin(&self) -> bool {\n+          match self {\n+              Self(0, 0) => true,\n+              _ => false,\n+          }\n+      }\n+  }\n+  ```\n+- [Self can also now be used in type definitions.][56366] E.g.\n+  ```rust\n+  enum List<T>\n+  where\n+  Self: PartialOrd<Self> // can write `Self` instead of `List<T>`\n+  {\n+    Nil,\n+    Cons(T, Box<Self>) // likewise here\n+  }\n+  ```\n+\n+Compiler\n+--------\n+- [You can now mark traits with `#[must_use]`.][55663] Providing a warning if\n+  they unused in a program.\n+- [The default allocator has changed from jemalloc to the default allocator on\n+  your system.][55238] The compiler itself on Linux & macOS will still use\n+  jemalloc, but programs compiled with them will use the system allocator.\n+- [Added the `aarch64-pc-windows-msvc` target.][55702]\n+\n+Libraries\n+---------\n+- [`PathBuf` now implements `FromStr`.][55148]\n+- [`Box<[T]>` now implements `FromIterator<T>`.][55843]\n+- [The `dbg!` macro has been stabilized.][56395] This macro enables you to\n+  easily debug expressions in your rust program. E.g.\n+  ```rust\n+  let a = 2;\n+  let b = dbg!(a * 2) + 1;\n+  //      ^-- prints: [src/main.rs:4] a * 2 = 4\n+  assert_eq!(b, 5);\n+  ```\n+\n+The following APIs are now `const` functions and can be used in a\n+`const` context.\n+\n+- [`Cell::as_ptr`]\n+- [`UnsafeCell::get`]\n+- [`char::is_ascii`]\n+- [`iter::empty`]\n+- [`ManuallyDrop::new`]\n+- [`ManuallyDrop::into_inner`]\n+- [`RangeInclusive::start`]\n+- [`RangeInclusive::end`]\n+- [`NonNull::as_ptr`]\n+- [`[T]::as_ptr`]\n+- [`str::as_ptr`]\n+- [`Duration::as_secs`]\n+- [`Duration::subsec_millis`]\n+- [`Duration::subsec_micros`]\n+- [`Duration::subsec_nanos`]\n+- [`CStr::as_ptr`]\n+- [`Ipv4Addr::is_unspecified`]\n+- [`Ipv6Addr::new`]\n+- [`Ipv6Addr::octets`]\n+\n+Stabilized APIs\n+---------------\n+- [`i8::to_be_bytes`]\n+- [`i8::to_le_bytes`]\n+- [`i8::to_ne_bytes`]\n+- [`i8::from_be_bytes`]\n+- [`i8::from_le_bytes`]\n+- [`i8::from_ne_bytes`]\n+- [`i16::to_be_bytes`]\n+- [`i16::to_le_bytes`]\n+- [`i16::to_ne_bytes`]\n+- [`i16::from_be_bytes`]\n+- [`i16::from_le_bytes`]\n+- [`i16::from_ne_bytes`]\n+- [`i32::to_be_bytes`]\n+- [`i32::to_le_bytes`]\n+- [`i32::to_ne_bytes`]\n+- [`i32::from_be_bytes`]\n+- [`i32::from_le_bytes`]\n+- [`i32::from_ne_bytes`]\n+- [`i64::to_be_bytes`]\n+- [`i64::to_le_bytes`]\n+- [`i64::to_ne_bytes`]\n+- [`i64::from_be_bytes`]\n+- [`i64::from_le_bytes`]\n+- [`i64::from_ne_bytes`]\n+- [`isize::to_be_bytes`]\n+- [`isize::to_le_bytes`]\n+- [`isize::to_ne_bytes`]\n+- [`isize::from_be_bytes`]\n+- [`isize::from_le_bytes`]\n+- [`isize::from_ne_bytes`]\n+- [`u8::to_be_bytes`]\n+- [`u8::to_le_bytes`]\n+- [`u8::to_ne_bytes`]\n+- [`u8::from_be_bytes`]\n+- [`u8::from_le_bytes`]\n+- [`u8::from_ne_bytes`]\n+- [`u16::to_be_bytes`]\n+- [`u16::to_le_bytes`]\n+- [`u16::to_ne_bytes`]\n+- [`u16::from_be_bytes`]\n+- [`u16::from_le_bytes`]\n+- [`u16::from_ne_bytes`]\n+- [`u32::to_be_bytes`]\n+- [`u32::to_le_bytes`]\n+- [`u32::to_ne_bytes`]\n+- [`u32::from_be_bytes`]\n+- [`u32::from_le_bytes`]\n+- [`u32::from_ne_bytes`]\n+- [`u64::to_be_bytes`]\n+- [`u64::to_le_bytes`]\n+- [`u64::to_ne_bytes`]\n+- [`u64::from_be_bytes`]\n+- [`u64::from_le_bytes`]\n+- [`u64::from_ne_bytes`]\n+- [`usize::to_be_bytes`]\n+- [`usize::to_le_bytes`]\n+- [`usize::to_ne_bytes`]\n+- [`usize::from_be_bytes`]\n+- [`usize::from_le_bytes`]\n+- [`usize::from_ne_bytes`]\n+\n+Cargo\n+-----\n+- [You can now run `cargo c` as an alias for `cargo check`.][cargo/6218]\n+- [Usernames are now allowed in alt registry URLs.][cargo/6242]\n+\n+Misc\n+----\n+- [`libproc_macro` has been added to the `rust-src` distribution.][55280]\n+\n+Compatibility Notes\n+-------------------\n+- [The argument types for AVX's\n+  `_mm256_stream_si256`, `_mm256_stream_pd`, `_mm256_stream_ps`][55610] have\n+  been changed from `*const` to `*mut` as the previous implementation\n+  was unsound.\n+\n+[55148]: https://github.com/rust-lang/rust/pull/55148/\n+[55238]: https://github.com/rust-lang/rust/pull/55238/\n+[55280]: https://github.com/rust-lang/rust/pull/55280/\n+[55610]: https://github.com/rust-lang/rust/pull/55610/\n+[55663]: https://github.com/rust-lang/rust/pull/55663/\n+[55702]: https://github.com/rust-lang/rust/pull/55702/\n+[55837]: https://github.com/rust-lang/rust/pull/55837/\n+[55843]: https://github.com/rust-lang/rust/pull/55843/\n+[56072]: https://github.com/rust-lang/rust/pull/56072/\n+[56245]: https://github.com/rust-lang/rust/pull/56245/\n+[56365]: https://github.com/rust-lang/rust/pull/56365/\n+[56366]: https://github.com/rust-lang/rust/pull/56366/\n+[56395]: https://github.com/rust-lang/rust/pull/56395/\n+[cargo/6218]: https://github.com/rust-lang/cargo/pull/6218/\n+[cargo/6242]: https://github.com/rust-lang/cargo/pull/6242/\n+[`CStr::as_ptr`]: https://doc.rust-lang.org/std/ffi/struct.CStr.html#method.as_ptr\n+[`Cell::as_ptr`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_ptr\n+[`Duration::as_secs`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_secs\n+[`Duration::subsec_micros`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.subsec_micros\n+[`Duration::subsec_millis`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.subsec_millis\n+[`Duration::subsec_nanos`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.subsec_nanos\n+[`Ipv4Addr::is_unspecified`]: https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html#method.is_unspecified\n+[`Ipv6Addr::new`]: https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html#method.new\n+[`Ipv6Addr::octets`]: https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html#method.octets\n+[`ManuallyDrop::into_inner`]: https://doc.rust-lang.org/std/mem/struct.ManuallyDrop.html#method.into_inner\n+[`ManuallyDrop::new`]: https://doc.rust-lang.org/std/mem/struct.ManuallyDrop.html#method.new\n+[`NonNull::as_ptr`]: https://doc.rust-lang.org/std/ptr/struct.NonNull.html#method.as_ptr\n+[`RangeInclusive::end`]: https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html#method.end\n+[`RangeInclusive::start`]: https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html#method.start\n+[`UnsafeCell::get`]: https://doc.rust-lang.org/std/cell/struct.UnsafeCell.html#method.get\n+[`[T]::as_ptr`]: https://doc.rust-lang.org/std/primitive.slice.html#method.as_ptr\n+[`char::is_ascii`]: https://doc.rust-lang.org/std/primitive.char.html#method.is_ascii\n+[`i16::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i16.html#method.from_be_bytes\n+[`i16::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i16.html#method.from_le_bytes\n+[`i16::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i16.html#method.from_ne_bytes\n+[`i16::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i16.html#method.to_be_bytes\n+[`i16::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i16.html#method.to_le_bytes\n+[`i16::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i16.html#method.to_ne_bytes\n+[`i32::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i32.html#method.from_be_bytes\n+[`i32::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i32.html#method.from_le_bytes\n+[`i32::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i32.html#method.from_ne_bytes\n+[`i32::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i32.html#method.to_be_bytes\n+[`i32::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i32.html#method.to_le_bytes\n+[`i32::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i32.html#method.to_ne_bytes\n+[`i64::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i64.html#method.from_be_bytes\n+[`i64::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i64.html#method.from_le_bytes\n+[`i64::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i64.html#method.from_ne_bytes\n+[`i64::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i64.html#method.to_be_bytes\n+[`i64::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i64.html#method.to_le_bytes\n+[`i64::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i64.html#method.to_ne_bytes\n+[`i8::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i8.html#method.from_be_bytes\n+[`i8::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i8.html#method.from_le_bytes\n+[`i8::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i8.html#method.from_ne_bytes\n+[`i8::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i8.html#method.to_be_bytes\n+[`i8::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i8.html#method.to_le_bytes\n+[`i8::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i8.html#method.to_ne_bytes\n+[`isize::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.isize.html#method.from_be_bytes\n+[`isize::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.isize.html#method.from_le_bytes\n+[`isize::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.isize.html#method.from_ne_bytes\n+[`isize::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.isize.html#method.to_be_bytes\n+[`isize::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.isize.html#method.to_le_bytes\n+[`isize::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.isize.html#method.to_ne_bytes\n+[`iter::empty`]: https://doc.rust-lang.org/std/iter/fn.empty.html\n+[`str::as_ptr`]: https://doc.rust-lang.org/std/primitive.str.html#method.as_ptr\n+[`u16::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u16.html#method.from_be_bytes\n+[`u16::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u16.html#method.from_le_bytes\n+[`u16::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u16.html#method.from_ne_bytes\n+[`u16::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u16.html#method.to_be_bytes\n+[`u16::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u16.html#method.to_le_bytes\n+[`u16::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u16.html#method.to_ne_bytes\n+[`u32::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u32.html#method.from_be_bytes\n+[`u32::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u32.html#method.from_le_bytes\n+[`u32::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u32.html#method.from_ne_bytes\n+[`u32::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u32.html#method.to_be_bytes\n+[`u32::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u32.html#method.to_le_bytes\n+[`u32::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u32.html#method.to_ne_bytes\n+[`u64::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u64.html#method.from_be_bytes\n+[`u64::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u64.html#method.from_le_bytes\n+[`u64::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u64.html#method.from_ne_bytes\n+[`u64::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u64.html#method.to_be_bytes\n+[`u64::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u64.html#method.to_le_bytes\n+[`u64::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u64.html#method.to_ne_bytes\n+[`u8::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.from_be_bytes\n+[`u8::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.from_le_bytes\n+[`u8::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.from_ne_bytes\n+[`u8::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.to_be_bytes\n+[`u8::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.to_le_bytes\n+[`u8::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.to_ne_bytes\n+[`usize::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.usize.html#method.from_be_bytes\n+[`usize::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.usize.html#method.from_le_bytes\n+[`usize::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.usize.html#method.from_ne_bytes\n+[`usize::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.usize.html#method.to_be_bytes\n+[`usize::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.usize.html#method.to_le_bytes\n+[`usize::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.usize.html#method.to_ne_bytes\n+\n+\n Version 1.31.1 (2018-12-20)\n ===========================\n "}]}