{"sha": "8ea7c9cb62aaef468c9ff1483e109329d2d5fccd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYTdjOWNiNjJhYWVmNDY4YzlmZjE0ODNlMTA5MzI5ZDJkNWZjY2Q=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-08T12:00:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-08T12:00:08Z"}, "message": "Merge #3826\n\n3826: Flatten nested highlight ranges during DFS traversal r=matklad a=ltentrup\n\nImplements the flattening of nested highlights from #3447.\r\n\r\n\r\nThere is a caveat: I needed to add `Clone` to `HighlightedRange` to split highlight ranges  ~and the nesting does not appear in the syntax highlighting test (it does appear in the accidental-quadratic test but there it is not checked against a ground-truth)~.\r\n\r\nI have added a test case for the example mentioned in #3447.\n\nCo-authored-by: Leander Tentrup <leander.tentrup@gmail.com>", "tree": {"sha": "c5de9cc1c1b941651454a9c67757da9eb0e754e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5de9cc1c1b941651454a9c67757da9eb0e754e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ea7c9cb62aaef468c9ff1483e109329d2d5fccd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJejbzICRBK7hj4Ov3rIwAAdHIIAAwNG52enpXzouB8QoqCv4dS\nmeitakqr0VX+dQPyiofk+firxA6FDBXR7RWzC2G+FIUPmCG3XwtWLNE1n/Jh0cqA\nCMkX7U5pjSxQY4VYx6jNUH4M2Tp9p4Wb4IIcoXDRgyTyXLOd8+8vtU9yuZUtWOLj\nZdVRI3PJlh/v4ayWSeKv4EZf0osp+4XYhpgHYaxbR5t9eshp2niQw+3tUJW7A/pv\nMfYLFCZnlmOglZ++8mehkTQ58k0k/ZCTlaNf0FB+5XjsheQbQ8dyBGyXFVmSOPHE\nKF7w17xG7YQ65vioPtRPtgBuhrckhFEYcElhWbeVrBbXg6fHrr0vKjTPtExq7x4=\n=3Q1H\n-----END PGP SIGNATURE-----\n", "payload": "tree c5de9cc1c1b941651454a9c67757da9eb0e754e8\nparent 9aa3bca53626a76657ecf5f59c431dcd3f7a8085\nparent bf96d46fee1242ad701cb037a03c9575e84221b1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1586347208 +0000\ncommitter GitHub <noreply@github.com> 1586347208 +0000\n\nMerge #3826\n\n3826: Flatten nested highlight ranges during DFS traversal r=matklad a=ltentrup\n\nImplements the flattening of nested highlights from #3447.\r\n\r\n\r\nThere is a caveat: I needed to add `Clone` to `HighlightedRange` to split highlight ranges  ~and the nesting does not appear in the syntax highlighting test (it does appear in the accidental-quadratic test but there it is not checked against a ground-truth)~.\r\n\r\nI have added a test case for the example mentioned in #3447.\n\nCo-authored-by: Leander Tentrup <leander.tentrup@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea7c9cb62aaef468c9ff1483e109329d2d5fccd", "html_url": "https://github.com/rust-lang/rust/commit/8ea7c9cb62aaef468c9ff1483e109329d2d5fccd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ea7c9cb62aaef468c9ff1483e109329d2d5fccd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aa3bca53626a76657ecf5f59c431dcd3f7a8085", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aa3bca53626a76657ecf5f59c431dcd3f7a8085", "html_url": "https://github.com/rust-lang/rust/commit/9aa3bca53626a76657ecf5f59c431dcd3f7a8085"}, {"sha": "bf96d46fee1242ad701cb037a03c9575e84221b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf96d46fee1242ad701cb037a03c9575e84221b1", "html_url": "https://github.com/rust-lang/rust/commit/bf96d46fee1242ad701cb037a03c9575e84221b1"}], "stats": {"total": 199, "additions": 148, "deletions": 51}, "files": [{"sha": "6ec13bd80fbfb188b874add97e889120a1265f82", "filename": "crates/ra_ide/src/snapshots/highlight_injection.html", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8ea7c9cb62aaef468c9ff1483e109329d2d5fccd/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/8ea7c9cb62aaef468c9ff1483e109329d2d5fccd/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html?ref=8ea7c9cb62aaef468c9ff1483e109329d2d5fccd", "patch": "@@ -0,0 +1,39 @@\n+\n+<style>\n+body                { margin: 0; }\n+pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n+\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n+.comment            { color: #7F9F7F; }\n+.struct, .enum      { color: #7CB8BB; }\n+.enum_variant       { color: #BDE0F3; }\n+.string_literal     { color: #CC9393; }\n+.field              { color: #94BFF3; }\n+.function           { color: #93E0E3; }\n+.parameter          { color: #94BFF3; }\n+.text               { color: #DCDCCC; }\n+.type               { color: #7CB8BB; }\n+.builtin_type       { color: #8CD0D3; }\n+.type_param         { color: #DFAF8F; }\n+.attribute          { color: #94BFF3; }\n+.numeric_literal    { color: #BFEBBF; }\n+.macro              { color: #94BFF3; }\n+.module             { color: #AFD8AF; }\n+.variable           { color: #DCDCCC; }\n+.mutable            { text-decoration: underline; }\n+\n+.keyword            { color: #F0DFAF; font-weight: bold; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.control            { font-style: italic; }\n+</style>\n+<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">fixture</span>(<span class=\"variable declaration\">ra_fixture</span>: &<span class=\"builtin_type\">str</span>) {}\n+\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n+    <span class=\"function\">fixture</span>(<span class=\"string_literal\">r#\"</span>\n+        <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Foo</span> {\n+            <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span>() {\n+                <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"2 + 2 = {}\"</span>, <span class=\"numeric_literal\">4</span>);\n+            }\n+        }<span class=\"string_literal\">\"#</span>\n+    );\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "214dcbb620c32e725336dbbfe3caade697cd63ea", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ea7c9cb62aaef468c9ff1483e109329d2d5fccd/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/8ea7c9cb62aaef468c9ff1483e109329d2d5fccd/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=8ea7c9cb62aaef468c9ff1483e109329d2d5fccd", "patch": "@@ -26,7 +26,7 @@\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n </style>\n-<pre><code><span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"attribute\">derive</span><span class=\"attribute\">(</span><span class=\"attribute\">Clone</span><span class=\"attribute\">,</span><span class=\"attribute\"> </span><span class=\"attribute\">Debug</span><span class=\"attribute\">)</span><span class=\"attribute\">]</span>\n+<pre><code><span class=\"attribute\">#[derive(Clone, Debug)]</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> {\n     <span class=\"keyword\">pub</span> <span class=\"field declaration\">x</span>: <span class=\"builtin_type\">i32</span>,\n     <span class=\"keyword\">pub</span> <span class=\"field declaration\">y</span>: <span class=\"builtin_type\">i32</span>,\n@@ -36,19 +36,19 @@\n     <span class=\"function\">foo</span>::&lt;<span class=\"lifetime\">'a</span>, <span class=\"builtin_type\">i32</span>&gt;()\n }\n \n-<span class=\"macro\">macro_rules</span><span class=\"macro\">!</span> def_fn {\n+<span class=\"macro\">macro_rules!</span> def_fn {\n     ($($tt:tt)*) =&gt; {$($tt)*}\n }\n \n-<span class=\"macro\">def_fn</span><span class=\"macro\">!</span> {\n+<span class=\"macro\">def_fn!</span> {\n     <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span>() -&gt; <span class=\"builtin_type\">u32</span> {\n         <span class=\"numeric_literal\">100</span>\n     }\n }\n \n <span class=\"comment\">// comment</span>\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n-    <span class=\"macro\">println</span><span class=\"macro\">!</span>(<span class=\"string_literal\">\"Hello, {}!\"</span>, <span class=\"numeric_literal\">92</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello, {}!\"</span>, <span class=\"numeric_literal\">92</span>);\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">vec</span> = Vec::new();\n     <span class=\"keyword control\">if</span> <span class=\"keyword\">true</span> {\n@@ -73,7 +73,7 @@\n <span class=\"keyword\">impl</span>&lt;<span class=\"type_param declaration\">T</span>&gt; <span class=\"enum\">Option</span>&lt;<span class=\"type_param\">T</span>&gt; {\n     <span class=\"keyword\">fn</span> <span class=\"function declaration\">and</span>&lt;<span class=\"type_param declaration\">U</span>&gt;(<span class=\"keyword\">self</span>, <span class=\"variable declaration\">other</span>: <span class=\"enum\">Option</span>&lt;<span class=\"type_param\">U</span>&gt;) -&gt; <span class=\"enum\">Option</span>&lt;(<span class=\"type_param\">T</span>, <span class=\"type_param\">U</span>)&gt; {\n         <span class=\"keyword control\">match</span> <span class=\"variable\">other</span> {\n-            <span class=\"enum_variant\">None</span> =&gt; <span class=\"macro\">unimplemented</span><span class=\"macro\">!</span>(),\n+            <span class=\"enum_variant\">None</span> =&gt; <span class=\"macro\">unimplemented!</span>(),\n             <span class=\"variable declaration\">Nope</span> =&gt; <span class=\"variable\">Nope</span>,\n         }\n     }"}, {"sha": "83d161f45ac4d03617e1caf890932effe4b72753", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 54, "deletions": 5, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8ea7c9cb62aaef468c9ff1483e109329d2d5fccd/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea7c9cb62aaef468c9ff1483e109329d2d5fccd/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=8ea7c9cb62aaef468c9ff1483e109329d2d5fccd", "patch": "@@ -24,7 +24,7 @@ use crate::{call_info::call_info_for_token, Analysis, FileId};\n pub(crate) use html::highlight_as_html;\n pub use tags::{Highlight, HighlightModifier, HighlightModifiers, HighlightTag};\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct HighlightedRange {\n     pub range: TextRange,\n     pub highlight: Highlight,\n@@ -55,13 +55,55 @@ pub(crate) fn highlight(\n     };\n \n     let mut bindings_shadow_count: FxHashMap<Name, u32> = FxHashMap::default();\n-    let mut res = Vec::new();\n+    // We use a stack for the DFS traversal below.\n+    // When we leave a node, the we use it to flatten the highlighted ranges.\n+    let mut res: Vec<Vec<HighlightedRange>> = vec![Vec::new()];\n \n     let mut current_macro_call: Option<ast::MacroCall> = None;\n \n     // Walk all nodes, keeping track of whether we are inside a macro or not.\n     // If in macro, expand it first and highlight the expanded code.\n     for event in root.preorder_with_tokens() {\n+        match &event {\n+            WalkEvent::Enter(_) => res.push(Vec::new()),\n+            WalkEvent::Leave(_) => {\n+                /* Flattens the highlighted ranges.\n+                 *\n+                 * For example `#[cfg(feature = \"foo\")]` contains the nested ranges:\n+                 * 1) parent-range: Attribute [0, 23)\n+                 * 2) child-range: String [16, 21)\n+                 *\n+                 * The following code implements the flattening, for our example this results to:\n+                 * `[Attribute [0, 16), String [16, 21), Attribute [21, 23)]`\n+                 */\n+                let children = res.pop().unwrap();\n+                let prev = res.last_mut().unwrap();\n+                let needs_flattening = !children.is_empty()\n+                    && !prev.is_empty()\n+                    && children.first().unwrap().range.is_subrange(&prev.last().unwrap().range);\n+                if !needs_flattening {\n+                    prev.extend(children);\n+                } else {\n+                    let mut parent = prev.pop().unwrap();\n+                    for ele in children {\n+                        assert!(ele.range.is_subrange(&parent.range));\n+                        let mut cloned = parent.clone();\n+                        parent.range = TextRange::from_to(parent.range.start(), ele.range.start());\n+                        cloned.range = TextRange::from_to(ele.range.end(), cloned.range.end());\n+                        if !parent.range.is_empty() {\n+                            prev.push(parent);\n+                        }\n+                        prev.push(ele);\n+                        parent = cloned;\n+                    }\n+                    if !parent.range.is_empty() {\n+                        prev.push(parent);\n+                    }\n+                }\n+            }\n+        };\n+        let current = res.last_mut().expect(\"during DFS traversal, the stack must not be empty\");\n+\n         let event_range = match &event {\n             WalkEvent::Enter(it) => it.text_range(),\n             WalkEvent::Leave(it) => it.text_range(),\n@@ -77,7 +119,7 @@ pub(crate) fn highlight(\n             WalkEvent::Enter(Some(mc)) => {\n                 current_macro_call = Some(mc.clone());\n                 if let Some(range) = macro_call_range(&mc) {\n-                    res.push(HighlightedRange {\n+                    current.push(HighlightedRange {\n                         range,\n                         highlight: HighlightTag::Macro.into(),\n                         binding_hash: None,\n@@ -119,18 +161,25 @@ pub(crate) fn highlight(\n \n         if let Some(token) = element.as_token().cloned().and_then(ast::RawString::cast) {\n             let expanded = element_to_highlight.as_token().unwrap().clone();\n-            if highlight_injection(&mut res, &sema, token, expanded).is_some() {\n+            if highlight_injection(current, &sema, token, expanded).is_some() {\n                 continue;\n             }\n         }\n \n         if let Some((highlight, binding_hash)) =\n             highlight_element(&sema, &mut bindings_shadow_count, element_to_highlight)\n         {\n-            res.push(HighlightedRange { range, highlight, binding_hash });\n+            current.push(HighlightedRange { range, highlight, binding_hash });\n         }\n     }\n \n+    assert_eq!(res.len(), 1, \"after DFS traversal, the stack should only contain a single element\");\n+    let res = res.pop().unwrap();\n+    // Check that ranges are sorted and disjoint\n+    assert!(res\n+        .iter()\n+        .zip(res.iter().skip(1))\n+        .all(|(left, right)| left.range.end() <= right.range.start()));\n     res\n }\n "}, {"sha": "4496529a101e77fdff2e6e9d451a19d17e832c85", "filename": "crates/ra_ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 25, "deletions": 41, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/8ea7c9cb62aaef468c9ff1483e109329d2d5fccd/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea7c9cb62aaef468c9ff1483e109329d2d5fccd/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=8ea7c9cb62aaef468c9ff1483e109329d2d5fccd", "patch": "@@ -1,9 +1,9 @@\n //! Renders a bit of code as HTML.\n \n use ra_db::SourceDatabase;\n-use ra_syntax::AstNode;\n+use ra_syntax::{AstNode, TextUnit};\n \n-use crate::{FileId, HighlightedRange, RootDatabase};\n+use crate::{FileId, RootDatabase};\n \n use super::highlight;\n \n@@ -21,51 +21,35 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n         )\n     }\n \n-    let mut ranges = highlight(db, file_id, None);\n-    ranges.sort_by_key(|it| it.range.start());\n-    // quick non-optimal heuristic to intersect token ranges and highlighted ranges\n-    let mut frontier = 0;\n-    let mut could_intersect: Vec<&HighlightedRange> = Vec::new();\n-\n+    let ranges = highlight(db, file_id, None);\n+    let text = parse.tree().syntax().to_string();\n+    let mut prev_pos = TextUnit::from(0);\n     let mut buf = String::new();\n     buf.push_str(&STYLE);\n     buf.push_str(\"<pre><code>\");\n-    let tokens = parse.tree().syntax().descendants_with_tokens().filter_map(|it| it.into_token());\n-    for token in tokens {\n-        could_intersect.retain(|it| token.text_range().start() <= it.range.end());\n-        while let Some(r) = ranges.get(frontier) {\n-            if r.range.start() <= token.text_range().end() {\n-                could_intersect.push(r);\n-                frontier += 1;\n-            } else {\n-                break;\n-            }\n-        }\n-        let text = html_escape(&token.text());\n-        let ranges = could_intersect\n-            .iter()\n-            .filter(|it| token.text_range().is_subrange(&it.range))\n-            .collect::<Vec<_>>();\n-        if ranges.is_empty() {\n+    for range in &ranges {\n+        if range.range.start() > prev_pos {\n+            let curr = &text[prev_pos.to_usize()..range.range.start().to_usize()];\n+            let text = html_escape(curr);\n             buf.push_str(&text);\n-        } else {\n-            let classes = ranges\n-                .iter()\n-                .map(|it| it.highlight.to_string().replace('.', \" \"))\n-                .collect::<Vec<_>>()\n-                .join(\" \");\n-            let binding_hash = ranges.first().and_then(|x| x.binding_hash);\n-            let color = match (rainbow, binding_hash) {\n-                (true, Some(hash)) => format!(\n-                    \" data-binding-hash=\\\"{}\\\" style=\\\"color: {};\\\"\",\n-                    hash,\n-                    rainbowify(hash)\n-                ),\n-                _ => \"\".into(),\n-            };\n-            buf.push_str(&format!(\"<span class=\\\"{}\\\"{}>{}</span>\", classes, color, text));\n         }\n+        let curr = &text[range.range.start().to_usize()..range.range.end().to_usize()];\n+\n+        let class = range.highlight.to_string().replace('.', \" \");\n+        let color = match (rainbow, range.binding_hash) {\n+            (true, Some(hash)) => {\n+                format!(\" data-binding-hash=\\\"{}\\\" style=\\\"color: {};\\\"\", hash, rainbowify(hash))\n+            }\n+            _ => \"\".into(),\n+        };\n+        buf.push_str(&format!(\"<span class=\\\"{}\\\"{}>{}</span>\", class, color, html_escape(curr)));\n+\n+        prev_pos = range.range.end();\n     }\n+    // Add the remaining (non-highlighted) text\n+    let curr = &text[prev_pos.to_usize()..];\n+    let text = html_escape(curr);\n+    buf.push_str(&text);\n     buf.push_str(\"</code></pre>\");\n     buf\n }"}, {"sha": "110887c2ac4230aa21eec5b056788eae676f8323", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8ea7c9cb62aaef468c9ff1483e109329d2d5fccd/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea7c9cb62aaef468c9ff1483e109329d2d5fccd/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=8ea7c9cb62aaef468c9ff1483e109329d2d5fccd", "patch": "@@ -131,3 +131,28 @@ fn test_ranges() {\n \n     assert_eq!(&highlights[0].highlight.to_string(), \"field.declaration\");\n }\n+\n+#[test]\n+fn test_flattening() {\n+    let (analysis, file_id) = single_file(\n+        r##\"\n+fn fixture(ra_fixture: &str) {}\n+\n+fn main() {\n+    fixture(r#\"\n+        trait Foo {\n+            fn foo() {\n+                println!(\"2 + 2 = {}\", 4);\n+            }\n+        }\"#\n+    );\n+}\"##\n+        .trim(),\n+    );\n+\n+    let dst_file = project_dir().join(\"crates/ra_ide/src/snapshots/highlight_injection.html\");\n+    let actual_html = &analysis.highlight_as_html(file_id, false).unwrap();\n+    let expected_html = &read_text(&dst_file);\n+    fs::write(dst_file, &actual_html).unwrap();\n+    assert_eq_text!(expected_html, actual_html);\n+}"}]}