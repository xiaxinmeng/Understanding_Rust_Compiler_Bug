{"sha": "46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MzM3Y2I2YThiZmUzNzQ3NGY0YjdlZjdiZDBhOTliMzZjZTBiODA=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2020-04-08T13:50:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-08T13:50:15Z"}, "message": "Rollup merge of #5406 - flip1995:update_lints_fix, r=flip1995\n\nFix update_lints\n\nThis fixes a bug in update_lints, where `internal` lints were not registered properly. This also cleans up some code. For example: The code generation functions no longer filter the lints the are given. This is now the task of the caller. This way, it is more obvious in the `replace_in_file` calls which lints will be included in which part of a file.\n\nThis also turns the lint modules private. There is no need for them to be public, since shared code should be in the utils module anyway.\n\nAnd last but not least, this fixes the `register_lints` code generation, so also internal lints get registered.\n\nchangelog: none", "tree": {"sha": "2fa65e896e38b65b5e3c315884f6a810fef2946d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fa65e896e38b65b5e3c315884f6a810fef2946d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJejdaXCRBK7hj4Ov3rIwAAdHIIAIVj8J09P6z/G8e9wlMosvAM\niGh+CHgFfTiUsyhwGmOaOI2h4dzdLrkcLu5IK6t9U+aQXy8lXXxJ76wsWm+podtn\nvGFjuPa2i3U23aPwYL3qmnouPpySjBTlpr7gde5XRvPgarg3cJii0Lz26yFMawPn\nqKJ74+Mjd0mBFVSlqRO/l7i6o0hwswYugHtMIogK8C9220v5b+NETbW7Wo1nOAv1\n59+jMM5ZvW/sbM0J3x4vD8AF0MYZBHD1jHylQpoX6rFfuEn8X4SCJr/O+Uf9HDVF\nhiSE1fm6Ae11b+PUyj3H/lDrjdpLpflIVILdQ5D3bX07qcJg5T+sJCQIIWLZk+k=\n=fvF1\n-----END PGP SIGNATURE-----\n", "payload": "tree 2fa65e896e38b65b5e3c315884f6a810fef2946d\nparent 0b4098335d9ea2468f0ceea82f3c8315fa5decc1\nparent 30503a91d2cd19239d0aed802cd740ec6f2a7e06\nauthor Philipp Krones <hello@philkrones.com> 1586353815 +0200\ncommitter GitHub <noreply@github.com> 1586353815 +0200\n\nRollup merge of #5406 - flip1995:update_lints_fix, r=flip1995\n\nFix update_lints\n\nThis fixes a bug in update_lints, where `internal` lints were not registered properly. This also cleans up some code. For example: The code generation functions no longer filter the lints the are given. This is now the task of the caller. This way, it is more obvious in the `replace_in_file` calls which lints will be included in which part of a file.\n\nThis also turns the lint modules private. There is no need for them to be public, since shared code should be in the utils module anyway.\n\nAnd last but not least, this fixes the `register_lints` code generation, so also internal lints get registered.\n\nchangelog: none\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80", "html_url": "https://github.com/rust-lang/rust/commit/46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "html_url": "https://github.com/rust-lang/rust/commit/0b4098335d9ea2468f0ceea82f3c8315fa5decc1"}, {"sha": "30503a91d2cd19239d0aed802cd740ec6f2a7e06", "url": "https://api.github.com/repos/rust-lang/rust/commits/30503a91d2cd19239d0aed802cd740ec6f2a7e06", "html_url": "https://github.com/rust-lang/rust/commit/30503a91d2cd19239d0aed802cd740ec6f2a7e06"}], "stats": {"total": 549, "additions": 262, "deletions": 287}, "files": [{"sha": "1f8510f43a61daea0d05388b567505303708e308", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 53, "deletions": 75, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80", "patch": "@@ -62,110 +62,89 @@ impl Lint {\n     }\n \n     /// Returns all non-deprecated lints and non-internal lints\n-    pub fn usable_lints(lints: impl Iterator<Item = Self>) -> impl Iterator<Item = Self> {\n-        lints.filter(|l| l.deprecation.is_none() && !l.is_internal())\n+    #[must_use]\n+    pub fn usable_lints(lints: &[Self]) -> Vec<Self> {\n+        lints\n+            .iter()\n+            .filter(|l| l.deprecation.is_none() && !l.group.starts_with(\"internal\"))\n+            .cloned()\n+            .collect()\n     }\n \n     /// Returns all internal lints (not `internal_warn` lints)\n-    pub fn internal_lints(lints: impl Iterator<Item = Self>) -> impl Iterator<Item = Self> {\n-        lints.filter(|l| l.group == \"internal\")\n+    #[must_use]\n+    pub fn internal_lints(lints: &[Self]) -> Vec<Self> {\n+        lints.iter().filter(|l| l.group == \"internal\").cloned().collect()\n     }\n \n-    /// Returns the lints in a `HashMap`, grouped by the different lint groups\n+    /// Returns all deprecated lints\n     #[must_use]\n-    pub fn by_lint_group(lints: impl Iterator<Item = Self>) -> HashMap<String, Vec<Self>> {\n-        lints.map(|lint| (lint.group.to_string(), lint)).into_group_map()\n+    pub fn deprecated_lints(lints: &[Self]) -> Vec<Self> {\n+        lints.iter().filter(|l| l.deprecation.is_some()).cloned().collect()\n     }\n \n+    /// Returns the lints in a `HashMap`, grouped by the different lint groups\n     #[must_use]\n-    pub fn is_internal(&self) -> bool {\n-        self.group.starts_with(\"internal\")\n+    pub fn by_lint_group(lints: impl Iterator<Item = Self>) -> HashMap<String, Vec<Self>> {\n+        lints.map(|lint| (lint.group.to_string(), lint)).into_group_map()\n     }\n }\n \n /// Generates the Vec items for `register_lint_group` calls in `clippy_lints/src/lib.rs`.\n #[must_use]\n-pub fn gen_lint_group_list(lints: Vec<Lint>) -> Vec<String> {\n+pub fn gen_lint_group_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n     lints\n-        .into_iter()\n-        .filter_map(|l| {\n-            if l.deprecation.is_some() {\n-                None\n-            } else {\n-                Some(format!(\"        LintId::of(&{}::{}),\", l.module, l.name.to_uppercase()))\n-            }\n-        })\n+        .map(|l| format!(\"        LintId::of(&{}::{}),\", l.module, l.name.to_uppercase()))\n         .sorted()\n         .collect::<Vec<String>>()\n }\n \n /// Generates the `pub mod module_name` list in `clippy_lints/src/lib.rs`.\n #[must_use]\n-pub fn gen_modules_list(lints: Vec<Lint>) -> Vec<String> {\n+pub fn gen_modules_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n     lints\n-        .into_iter()\n-        .filter_map(|l| {\n-            if l.is_internal() || l.deprecation.is_some() {\n-                None\n-            } else {\n-                Some(l.module)\n-            }\n-        })\n+        .map(|l| &l.module)\n         .unique()\n-        .map(|module| format!(\"pub mod {};\", module))\n+        .map(|module| format!(\"mod {};\", module))\n         .sorted()\n         .collect::<Vec<String>>()\n }\n \n /// Generates the list of lint links at the bottom of the README\n #[must_use]\n-pub fn gen_changelog_lint_list(lints: Vec<Lint>) -> Vec<String> {\n-    let mut lint_list_sorted: Vec<Lint> = lints;\n-    lint_list_sorted.sort_by_key(|l| l.name.clone());\n-    lint_list_sorted\n-        .iter()\n-        .filter_map(|l| {\n-            if l.is_internal() {\n-                None\n-            } else {\n-                Some(format!(\"[`{}`]: {}#{}\", l.name, DOCS_LINK, l.name))\n-            }\n-        })\n+pub fn gen_changelog_lint_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n+    lints\n+        .sorted_by_key(|l| &l.name)\n+        .map(|l| format!(\"[`{}`]: {}#{}\", l.name, DOCS_LINK, l.name))\n         .collect()\n }\n \n /// Generates the `register_removed` code in `./clippy_lints/src/lib.rs`.\n #[must_use]\n-pub fn gen_deprecated(lints: &[Lint]) -> Vec<String> {\n+pub fn gen_deprecated<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n     lints\n-        .iter()\n-        .filter_map(|l| {\n-            l.clone().deprecation.map(|depr_text| {\n-                vec![\n-                    \"    store.register_removed(\".to_string(),\n-                    format!(\"        \\\"clippy::{}\\\",\", l.name),\n-                    format!(\"        \\\"{}\\\",\", depr_text),\n-                    \"    );\".to_string(),\n-                ]\n-            })\n+        .flat_map(|l| {\n+            l.deprecation\n+                .clone()\n+                .map(|depr_text| {\n+                    vec![\n+                        \"    store.register_removed(\".to_string(),\n+                        format!(\"        \\\"clippy::{}\\\",\", l.name),\n+                        format!(\"        \\\"{}\\\",\", depr_text),\n+                        \"    );\".to_string(),\n+                    ]\n+                })\n+                .expect(\"only deprecated lints should be passed\")\n         })\n-        .flatten()\n         .collect::<Vec<String>>()\n }\n \n #[must_use]\n-pub fn gen_register_lint_list(lints: &[Lint]) -> Vec<String> {\n+pub fn gen_register_lint_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n     let pre = \"    store.register_lints(&[\".to_string();\n     let post = \"    ]);\".to_string();\n     let mut inner = lints\n-        .iter()\n-        .filter_map(|l| {\n-            if !l.is_internal() && l.deprecation.is_none() {\n-                Some(format!(\"        &{}::{},\", l.module, l.name.to_uppercase()))\n-            } else {\n-                None\n-            }\n-        })\n+        .map(|l| format!(\"        &{}::{},\", l.module, l.name.to_uppercase()))\n         .sorted()\n         .collect::<Vec<String>>();\n     inner.insert(0, pre);\n@@ -439,7 +418,7 @@ fn test_usable_lints() {\n         None,\n         \"module_name\",\n     )];\n-    assert_eq!(expected, Lint::usable_lints(lints.into_iter()).collect::<Vec<Lint>>());\n+    assert_eq!(expected, Lint::usable_lints(&lints));\n }\n \n #[test]\n@@ -469,13 +448,12 @@ fn test_gen_changelog_lint_list() {\n     let lints = vec![\n         Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n         Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"incorrect_internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n     ];\n     let expected = vec![\n         format!(\"[`should_assert_eq`]: {}#should_assert_eq\", DOCS_LINK.to_string()),\n         format!(\"[`should_assert_eq2`]: {}#should_assert_eq2\", DOCS_LINK.to_string()),\n     ];\n-    assert_eq!(expected, gen_changelog_lint_list(lints));\n+    assert_eq!(expected, gen_changelog_lint_list(lints.iter()));\n }\n \n #[test]\n@@ -495,7 +473,6 @@ fn test_gen_deprecated() {\n             Some(\"will be removed\"),\n             \"module_name\",\n         ),\n-        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n     ];\n     let expected: Vec<String> = vec![\n         \"    store.register_removed(\",\n@@ -510,36 +487,37 @@ fn test_gen_deprecated() {\n     .into_iter()\n     .map(String::from)\n     .collect();\n-    assert_eq!(expected, gen_deprecated(&lints));\n+    assert_eq!(expected, gen_deprecated(lints.iter()));\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_gen_deprecated_fail() {\n+    let lints = vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")];\n+    let _ = gen_deprecated(lints.iter());\n }\n \n #[test]\n fn test_gen_modules_list() {\n     let lints = vec![\n         Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", Some(\"abc\"), \"deprecated\"),\n         Lint::new(\"incorrect_stuff\", \"group3\", \"abc\", None, \"another_module\"),\n-        Lint::new(\"incorrect_internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n-    ];\n-    let expected = vec![\n-        \"pub mod another_module;\".to_string(),\n-        \"pub mod module_name;\".to_string(),\n     ];\n-    assert_eq!(expected, gen_modules_list(lints));\n+    let expected = vec![\"mod another_module;\".to_string(), \"mod module_name;\".to_string()];\n+    assert_eq!(expected, gen_modules_list(lints.iter()));\n }\n \n #[test]\n fn test_gen_lint_group_list() {\n     let lints = vec![\n         Lint::new(\"abc\", \"group1\", \"abc\", None, \"module_name\"),\n         Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", Some(\"abc\"), \"deprecated\"),\n         Lint::new(\"internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n     ];\n     let expected = vec![\n         \"        LintId::of(&module_name::ABC),\".to_string(),\n         \"        LintId::of(&module_name::INTERNAL),\".to_string(),\n         \"        LintId::of(&module_name::SHOULD_ASSERT_EQ),\".to_string(),\n     ];\n-    assert_eq!(expected, gen_lint_group_list(lints));\n+    assert_eq!(expected, gen_lint_group_list(lints.iter()));\n }"}, {"sha": "a9a7092994269b7cc84075756d74f0eda57a3af0", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80", "patch": "@@ -14,14 +14,14 @@ pub enum UpdateMode {\n pub fn run(update_mode: UpdateMode) {\n     let lint_list: Vec<Lint> = gather_all().collect();\n \n-    let internal_lints = Lint::internal_lints(lint_list.clone().into_iter());\n-\n-    let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list.clone().into_iter()).collect();\n-    let usable_lint_count = round_to_fifty(usable_lints.len());\n-\n+    let internal_lints = Lint::internal_lints(&lint_list);\n+    let deprecated_lints = Lint::deprecated_lints(&lint_list);\n+    let usable_lints = Lint::usable_lints(&lint_list);\n     let mut sorted_usable_lints = usable_lints.clone();\n     sorted_usable_lints.sort_by_key(|lint| lint.name.clone());\n \n+    let usable_lint_count = round_to_fifty(usable_lints.len());\n+\n     let mut file_change = replace_region_in_file(\n         Path::new(\"src/lintlist/mod.rs\"),\n         \"begin lint list\",\n@@ -61,7 +61,7 @@ pub fn run(update_mode: UpdateMode) {\n         \"<!-- end autogenerated links to lint list -->\",\n         false,\n         update_mode == UpdateMode::Change,\n-        || gen_changelog_lint_list(lint_list.clone()),\n+        || gen_changelog_lint_list(usable_lints.iter().chain(deprecated_lints.iter())),\n     )\n     .changed;\n \n@@ -71,7 +71,7 @@ pub fn run(update_mode: UpdateMode) {\n         \"end deprecated lints\",\n         false,\n         update_mode == UpdateMode::Change,\n-        || gen_deprecated(&lint_list),\n+        || gen_deprecated(deprecated_lints.iter()),\n     )\n     .changed;\n \n@@ -81,7 +81,7 @@ pub fn run(update_mode: UpdateMode) {\n         \"end register lints\",\n         false,\n         update_mode == UpdateMode::Change,\n-        || gen_register_lint_list(&lint_list),\n+        || gen_register_lint_list(usable_lints.iter().chain(internal_lints.iter())),\n     )\n     .changed;\n \n@@ -91,7 +91,7 @@ pub fn run(update_mode: UpdateMode) {\n         \"end lints modules\",\n         false,\n         update_mode == UpdateMode::Change,\n-        || gen_modules_list(lint_list.clone()),\n+        || gen_modules_list(usable_lints.iter()),\n     )\n     .changed;\n \n@@ -104,13 +104,9 @@ pub fn run(update_mode: UpdateMode) {\n         update_mode == UpdateMode::Change,\n         || {\n             // clippy::all should only include the following lint groups:\n-            let all_group_lints = usable_lints\n-                .clone()\n-                .into_iter()\n-                .filter(|l| {\n-                    l.group == \"correctness\" || l.group == \"style\" || l.group == \"complexity\" || l.group == \"perf\"\n-                })\n-                .collect();\n+            let all_group_lints = usable_lints.iter().filter(|l| {\n+                l.group == \"correctness\" || l.group == \"style\" || l.group == \"complexity\" || l.group == \"perf\"\n+            });\n \n             gen_lint_group_list(all_group_lints)\n         },\n@@ -125,7 +121,7 @@ pub fn run(update_mode: UpdateMode) {\n             r#\"\\]\\);\"#,\n             false,\n             update_mode == UpdateMode::Change,\n-            || gen_lint_group_list(lints.clone()),\n+            || gen_lint_group_list(lints.iter()),\n         )\n         .changed;\n     }\n@@ -140,8 +136,8 @@ pub fn run(update_mode: UpdateMode) {\n }\n \n pub fn print_lints() {\n-    let lint_list = gather_all();\n-    let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list).collect();\n+    let lint_list: Vec<Lint> = gather_all().collect();\n+    let usable_lints = Lint::usable_lints(&lint_list);\n     let usable_lint_count = usable_lints.len();\n     let grouped_by_lint_group = Lint::by_lint_group(usable_lints.into_iter());\n "}, {"sha": "b24110fc184422c3abaddeb959035035376b1376", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 157, "deletions": 151, "changes": 308, "blob_url": "https://github.com/rust-lang/rust/blob/46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80", "patch": "@@ -170,157 +170,157 @@ mod consts;\n mod utils;\n \n // begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n-pub mod approx_const;\n-pub mod arithmetic;\n-pub mod as_conversions;\n-pub mod assertions_on_constants;\n-pub mod assign_ops;\n-pub mod atomic_ordering;\n-pub mod attrs;\n-pub mod bit_mask;\n-pub mod blacklisted_name;\n-pub mod block_in_if_condition;\n-pub mod booleans;\n-pub mod bytecount;\n-pub mod cargo_common_metadata;\n-pub mod checked_conversions;\n-pub mod cognitive_complexity;\n-pub mod collapsible_if;\n-pub mod comparison_chain;\n-pub mod copies;\n-pub mod copy_iterator;\n-pub mod dbg_macro;\n-pub mod default_trait_access;\n-pub mod derive;\n-pub mod doc;\n-pub mod double_comparison;\n-pub mod double_parens;\n-pub mod drop_bounds;\n-pub mod drop_forget_ref;\n-pub mod duration_subsec;\n-pub mod else_if_without_else;\n-pub mod empty_enum;\n-pub mod entry;\n-pub mod enum_clike;\n-pub mod enum_variants;\n-pub mod eq_op;\n-pub mod erasing_op;\n-pub mod escape;\n-pub mod eta_reduction;\n-pub mod eval_order_dependence;\n-pub mod excessive_bools;\n-pub mod exit;\n-pub mod explicit_write;\n-pub mod fallible_impl_from;\n-pub mod float_literal;\n-pub mod floating_point_arithmetic;\n-pub mod format;\n-pub mod formatting;\n-pub mod functions;\n-pub mod get_last_with_len;\n-pub mod identity_conversion;\n-pub mod identity_op;\n-pub mod if_let_some_result;\n-pub mod if_not_else;\n-pub mod implicit_return;\n-pub mod indexing_slicing;\n-pub mod infinite_iter;\n-pub mod inherent_impl;\n-pub mod inherent_to_string;\n-pub mod inline_fn_without_body;\n-pub mod int_plus_one;\n-pub mod integer_division;\n-pub mod items_after_statements;\n-pub mod large_enum_variant;\n-pub mod large_stack_arrays;\n-pub mod len_zero;\n-pub mod let_if_seq;\n-pub mod let_underscore;\n-pub mod lifetimes;\n-pub mod literal_representation;\n-pub mod loops;\n-pub mod macro_use;\n-pub mod main_recursion;\n-pub mod map_clone;\n-pub mod map_unit_fn;\n-pub mod matches;\n-pub mod mem_discriminant;\n-pub mod mem_forget;\n-pub mod mem_replace;\n-pub mod methods;\n-pub mod minmax;\n-pub mod misc;\n-pub mod misc_early;\n-pub mod missing_const_for_fn;\n-pub mod missing_doc;\n-pub mod missing_inline;\n-pub mod modulo_arithmetic;\n-pub mod multiple_crate_versions;\n-pub mod mut_key;\n-pub mod mut_mut;\n-pub mod mut_reference;\n-pub mod mutable_debug_assertion;\n-pub mod mutex_atomic;\n-pub mod needless_bool;\n-pub mod needless_borrow;\n-pub mod needless_borrowed_ref;\n-pub mod needless_continue;\n-pub mod needless_pass_by_value;\n-pub mod needless_update;\n-pub mod neg_cmp_op_on_partial_ord;\n-pub mod neg_multiply;\n-pub mod new_without_default;\n-pub mod no_effect;\n-pub mod non_copy_const;\n-pub mod non_expressive_names;\n-pub mod open_options;\n-pub mod option_env_unwrap;\n-pub mod overflow_check_conditional;\n-pub mod panic_unimplemented;\n-pub mod partialeq_ne_impl;\n-pub mod path_buf_push_overwrite;\n-pub mod precedence;\n-pub mod ptr;\n-pub mod ptr_offset_with_cast;\n-pub mod question_mark;\n-pub mod ranges;\n-pub mod redundant_clone;\n-pub mod redundant_field_names;\n-pub mod redundant_pattern_matching;\n-pub mod redundant_pub_crate;\n-pub mod redundant_static_lifetimes;\n-pub mod reference;\n-pub mod regex;\n-pub mod returns;\n-pub mod serde_api;\n-pub mod shadow;\n-pub mod single_component_path_imports;\n-pub mod slow_vector_initialization;\n-pub mod strings;\n-pub mod suspicious_trait_impl;\n-pub mod swap;\n-pub mod tabs_in_doc_comments;\n-pub mod temporary_assignment;\n-pub mod to_digit_is_some;\n-pub mod trait_bounds;\n-pub mod transmute;\n-pub mod transmuting_null;\n-pub mod trivially_copy_pass_by_ref;\n-pub mod try_err;\n-pub mod types;\n-pub mod unicode;\n-pub mod unnamed_address;\n-pub mod unsafe_removed_from_name;\n-pub mod unused_io_amount;\n-pub mod unused_self;\n-pub mod unwrap;\n-pub mod use_self;\n-pub mod vec;\n-pub mod verbose_file_reads;\n-pub mod wildcard_dependencies;\n-pub mod wildcard_imports;\n-pub mod write;\n-pub mod zero_div_zero;\n+mod approx_const;\n+mod arithmetic;\n+mod as_conversions;\n+mod assertions_on_constants;\n+mod assign_ops;\n+mod atomic_ordering;\n+mod attrs;\n+mod bit_mask;\n+mod blacklisted_name;\n+mod block_in_if_condition;\n+mod booleans;\n+mod bytecount;\n+mod cargo_common_metadata;\n+mod checked_conversions;\n+mod cognitive_complexity;\n+mod collapsible_if;\n+mod comparison_chain;\n+mod copies;\n+mod copy_iterator;\n+mod dbg_macro;\n+mod default_trait_access;\n+mod derive;\n+mod doc;\n+mod double_comparison;\n+mod double_parens;\n+mod drop_bounds;\n+mod drop_forget_ref;\n+mod duration_subsec;\n+mod else_if_without_else;\n+mod empty_enum;\n+mod entry;\n+mod enum_clike;\n+mod enum_variants;\n+mod eq_op;\n+mod erasing_op;\n+mod escape;\n+mod eta_reduction;\n+mod eval_order_dependence;\n+mod excessive_bools;\n+mod exit;\n+mod explicit_write;\n+mod fallible_impl_from;\n+mod float_literal;\n+mod floating_point_arithmetic;\n+mod format;\n+mod formatting;\n+mod functions;\n+mod get_last_with_len;\n+mod identity_conversion;\n+mod identity_op;\n+mod if_let_some_result;\n+mod if_not_else;\n+mod implicit_return;\n+mod indexing_slicing;\n+mod infinite_iter;\n+mod inherent_impl;\n+mod inherent_to_string;\n+mod inline_fn_without_body;\n+mod int_plus_one;\n+mod integer_division;\n+mod items_after_statements;\n+mod large_enum_variant;\n+mod large_stack_arrays;\n+mod len_zero;\n+mod let_if_seq;\n+mod let_underscore;\n+mod lifetimes;\n+mod literal_representation;\n+mod loops;\n+mod macro_use;\n+mod main_recursion;\n+mod map_clone;\n+mod map_unit_fn;\n+mod matches;\n+mod mem_discriminant;\n+mod mem_forget;\n+mod mem_replace;\n+mod methods;\n+mod minmax;\n+mod misc;\n+mod misc_early;\n+mod missing_const_for_fn;\n+mod missing_doc;\n+mod missing_inline;\n+mod modulo_arithmetic;\n+mod multiple_crate_versions;\n+mod mut_key;\n+mod mut_mut;\n+mod mut_reference;\n+mod mutable_debug_assertion;\n+mod mutex_atomic;\n+mod needless_bool;\n+mod needless_borrow;\n+mod needless_borrowed_ref;\n+mod needless_continue;\n+mod needless_pass_by_value;\n+mod needless_update;\n+mod neg_cmp_op_on_partial_ord;\n+mod neg_multiply;\n+mod new_without_default;\n+mod no_effect;\n+mod non_copy_const;\n+mod non_expressive_names;\n+mod open_options;\n+mod option_env_unwrap;\n+mod overflow_check_conditional;\n+mod panic_unimplemented;\n+mod partialeq_ne_impl;\n+mod path_buf_push_overwrite;\n+mod precedence;\n+mod ptr;\n+mod ptr_offset_with_cast;\n+mod question_mark;\n+mod ranges;\n+mod redundant_clone;\n+mod redundant_field_names;\n+mod redundant_pattern_matching;\n+mod redundant_pub_crate;\n+mod redundant_static_lifetimes;\n+mod reference;\n+mod regex;\n+mod returns;\n+mod serde_api;\n+mod shadow;\n+mod single_component_path_imports;\n+mod slow_vector_initialization;\n+mod strings;\n+mod suspicious_trait_impl;\n+mod swap;\n+mod tabs_in_doc_comments;\n+mod temporary_assignment;\n+mod to_digit_is_some;\n+mod trait_bounds;\n+mod transmute;\n+mod transmuting_null;\n+mod trivially_copy_pass_by_ref;\n+mod try_err;\n+mod types;\n+mod unicode;\n+mod unnamed_address;\n+mod unsafe_removed_from_name;\n+mod unused_io_amount;\n+mod unused_self;\n+mod unwrap;\n+mod use_self;\n+mod vec;\n+mod verbose_file_reads;\n+mod wildcard_dependencies;\n+mod wildcard_imports;\n+mod write;\n+mod zero_div_zero;\n // end lints modules, do not remove this comment, it\u2019s used in `update_lints`\n \n pub use crate::utils::conf::Conf;\n@@ -828,6 +828,12 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unwrap::PANICKING_UNWRAP,\n         &unwrap::UNNECESSARY_UNWRAP,\n         &use_self::USE_SELF,\n+        &utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n+        &utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n+        &utils::internal_lints::DEFAULT_LINT,\n+        &utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n+        &utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n+        &utils::internal_lints::PRODUCE_ICE,\n         &vec::USELESS_VEC,\n         &verbose_file_reads::VERBOSE_FILE_READS,\n         &wildcard_dependencies::WILDCARD_DEPENDENCIES,"}, {"sha": "4298e62b80375f5c1189a61ca5eceb3717d00124", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80", "patch": "@@ -1197,3 +1197,40 @@ where\n \n     None\n }\n+\n+#[test]\n+fn test_overlapping() {\n+    use rustc_span::source_map::DUMMY_SP;\n+\n+    let sp = |s, e| SpannedRange {\n+        span: DUMMY_SP,\n+        node: (s, e),\n+    };\n+\n+    assert_eq!(None, overlapping::<u8>(&[]));\n+    assert_eq!(None, overlapping(&[sp(1, Bound::Included(4))]));\n+    assert_eq!(\n+        None,\n+        overlapping(&[sp(1, Bound::Included(4)), sp(5, Bound::Included(6))])\n+    );\n+    assert_eq!(\n+        None,\n+        overlapping(&[\n+            sp(1, Bound::Included(4)),\n+            sp(5, Bound::Included(6)),\n+            sp(10, Bound::Included(11))\n+        ],)\n+    );\n+    assert_eq!(\n+        Some((&sp(1, Bound::Included(4)), &sp(3, Bound::Included(6)))),\n+        overlapping(&[sp(1, Bound::Included(4)), sp(3, Bound::Included(6))])\n+    );\n+    assert_eq!(\n+        Some((&sp(5, Bound::Included(6)), &sp(6, Bound::Included(11)))),\n+        overlapping(&[\n+            sp(1, Bound::Included(4)),\n+            sp(5, Bound::Included(6)),\n+            sp(6, Bound::Included(11))\n+        ],)\n+    );\n+}"}, {"sha": "6691c074caf9ed1de8d434922927f1457724b591", "filename": "tests/matches.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmatches.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -1,42 +0,0 @@\n-#![feature(rustc_private)]\n-\n-extern crate rustc_span;\n-use std::collections::Bound;\n-\n-#[test]\n-fn test_overlapping() {\n-    use clippy_lints::matches::overlapping;\n-    use rustc_span::source_map::DUMMY_SP;\n-\n-    let sp = |s, e| clippy_lints::matches::SpannedRange {\n-        span: DUMMY_SP,\n-        node: (s, e),\n-    };\n-\n-    assert_eq!(None, overlapping::<u8>(&[]));\n-    assert_eq!(None, overlapping(&[sp(1, Bound::Included(4))]));\n-    assert_eq!(\n-        None,\n-        overlapping(&[sp(1, Bound::Included(4)), sp(5, Bound::Included(6))])\n-    );\n-    assert_eq!(\n-        None,\n-        overlapping(&[\n-            sp(1, Bound::Included(4)),\n-            sp(5, Bound::Included(6)),\n-            sp(10, Bound::Included(11))\n-        ],)\n-    );\n-    assert_eq!(\n-        Some((&sp(1, Bound::Included(4)), &sp(3, Bound::Included(6)))),\n-        overlapping(&[sp(1, Bound::Included(4)), sp(3, Bound::Included(6))])\n-    );\n-    assert_eq!(\n-        Some((&sp(5, Bound::Included(6)), &sp(6, Bound::Included(11)))),\n-        overlapping(&[\n-            sp(1, Bound::Included(4)),\n-            sp(5, Bound::Included(6)),\n-            sp(6, Bound::Included(11))\n-        ],)\n-    );\n-}"}]}