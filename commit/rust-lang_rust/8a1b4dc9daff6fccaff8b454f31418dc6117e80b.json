{"sha": "8a1b4dc9daff6fccaff8b454f31418dc6117e80b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMWI0ZGM5ZGFmZjZmY2NhZmY4YjQ1NGYzMTQxOGRjNjExN2U4MGI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-21T19:49:04Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-29T07:36:31Z"}, "message": "Generate rlibs by default (instead of dylibs)\n\nCloses #11253", "tree": {"sha": "13e2c5c711b0a689bebb4287d8bc54151c4767fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13e2c5c711b0a689bebb4287d8bc54151c4767fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a1b4dc9daff6fccaff8b454f31418dc6117e80b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a1b4dc9daff6fccaff8b454f31418dc6117e80b", "html_url": "https://github.com/rust-lang/rust/commit/8a1b4dc9daff6fccaff8b454f31418dc6117e80b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a1b4dc9daff6fccaff8b454f31418dc6117e80b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edfb546e4b2b0aa6dbb6316709b80e034539d09d", "url": "https://api.github.com/repos/rust-lang/rust/commits/edfb546e4b2b0aa6dbb6316709b80e034539d09d", "html_url": "https://github.com/rust-lang/rust/commit/edfb546e4b2b0aa6dbb6316709b80e034539d09d"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "6a940e1d7f202fc90e353144d439cd152db69cf0", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1b4dc9daff6fccaff8b454f31418dc6117e80b/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1b4dc9daff6fccaff8b454f31418dc6117e80b/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=8a1b4dc9daff6fccaff8b454f31418dc6117e80b", "patch": "@@ -700,7 +700,7 @@ fn compose_and_run_compiler(\n         let abs_ab = config.aux_base.join(rel_ab.as_slice());\n         let aux_props = load_props(&abs_ab);\n         let aux_args =\n-            make_compile_args(config, &aux_props, ~[~\"--lib\"] + extra_link_args,\n+            make_compile_args(config, &aux_props, ~[~\"--dylib\"] + extra_link_args,\n                               |a,b| make_lib_name(a, b, testfile), &abs_ab);\n         let auxres = compose_and_run(config, &abs_ab, aux_args, ~[],\n                                      config.compile_lib_path, None);"}, {"sha": "211d60f7e2d538be7795c8646f643f33e44a774e", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a1b4dc9daff6fccaff8b454f31418dc6117e80b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1b4dc9daff6fccaff8b454f31418dc6117e80b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=8a1b4dc9daff6fccaff8b454f31418dc6117e80b", "patch": "@@ -716,14 +716,16 @@ pub fn build_session_options(binary: ~str,\n                              demitter: @diagnostic::Emitter)\n                              -> @session::Options {\n     let mut outputs = ~[];\n+    if matches.opt_present(\"lib\") {\n+        outputs.push(session::default_lib_output());\n+    }\n     if matches.opt_present(\"rlib\") {\n         outputs.push(session::OutputRlib)\n     }\n     if matches.opt_present(\"staticlib\") {\n         outputs.push(session::OutputStaticlib)\n     }\n-    // dynamic libraries are the \"compiler blesssed\" default library\n-    if matches.opt_present(\"dylib\") || matches.opt_present(\"lib\") {\n+    if matches.opt_present(\"dylib\") {\n         outputs.push(session::OutputDylib)\n     }\n     if matches.opt_present(\"bin\") {"}, {"sha": "5cda81836a44b6f6c80d1acc359834e0a1ed7592", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a1b4dc9daff6fccaff8b454f31418dc6117e80b/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1b4dc9daff6fccaff8b454f31418dc6117e80b/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=8a1b4dc9daff6fccaff8b454f31418dc6117e80b", "patch": "@@ -422,6 +422,10 @@ pub fn building_library(options: &Options, crate: &ast::Crate) -> bool {\n     }\n }\n \n+pub fn default_lib_output() -> OutputStyle {\n+    OutputRlib\n+}\n+\n pub fn collect_outputs(session: &Session,\n                        attrs: &[ast::Attribute]) -> ~[OutputStyle] {\n     // If we're generating a test executable, then ignore all other output\n@@ -435,7 +439,7 @@ pub fn collect_outputs(session: &Session,\n             match a.value_str() {\n                 Some(n) if \"rlib\" == n => Some(OutputRlib),\n                 Some(n) if \"dylib\" == n => Some(OutputDylib),\n-                Some(n) if \"lib\" == n => Some(OutputDylib),\n+                Some(n) if \"lib\" == n => Some(default_lib_output()),\n                 Some(n) if \"staticlib\" == n => Some(OutputStaticlib),\n                 Some(n) if \"bin\" == n => Some(OutputExecutable),\n                 Some(_) => {"}, {"sha": "22128a668ed3eed5590fbc3b80e9ce40e26e8660", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a1b4dc9daff6fccaff8b454f31418dc6117e80b/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1b4dc9daff6fccaff8b454f31418dc6117e80b/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=8a1b4dc9daff6fccaff8b454f31418dc6117e80b", "patch": "@@ -353,7 +353,7 @@ fn lib_exists(repo: &Path, crate_id: &CrateId) -> bool {\n     debug!(\"assert_lib_exists: checking whether {:?} exists\", lib);\n     lib.is_some() && {\n         let libname = lib.get_ref();\n-        libname.exists() && is_rwx(libname)\n+        libname.exists()\n     }\n }\n \n@@ -437,7 +437,7 @@ fn built_library_exists(repo: &Path, short_name: &str) -> bool {\n     let lib = built_library_in_workspace(&crate_id, repo);\n     lib.is_some() && {\n         let libname = lib.get_ref();\n-        libname.exists() && is_rwx(libname)\n+        libname.exists()\n     }\n }\n \n@@ -634,7 +634,6 @@ fn test_install_valid_external() {\n     let lib = installed_library_in_workspace(&temp_pkg_id, temp_workspace);\n     debug!(\"lib = {:?}\", lib);\n     assert!(lib.as_ref().map_or(false, |l| l.exists()));\n-    assert!(lib.as_ref().map_or(false, |l| is_rwx(l)));\n \n     // And that the test and bench executables aren't installed\n     assert!(!target_test_in_workspace(&temp_pkg_id, temp_workspace).exists());\n@@ -758,7 +757,8 @@ fn test_package_request_version() {\n         Some(p) => {\n             debug!(\"installed: {}\", p.display());\n             let suffix = format!(\"0.3{}\", os::consts::DLL_SUFFIX);\n-            p.as_vec().ends_with(suffix.as_bytes())\n+            p.as_vec().ends_with(suffix.as_bytes()) ||\n+                p.as_vec().ends_with(bytes!(\"0.3.rlib\"))\n         }\n         None    => false\n     });\n@@ -2160,7 +2160,6 @@ fn test_installed_read_only() {\n         built_library_in_workspace(&temp_pkg_id,\n                                    &ws).expect(\"test_install_git: built lib should exist\");\n     assert!(built_lib.exists());\n-    assert!(is_rwx(&built_lib));\n \n     // Make sure sources are (a) under \"build\" and (b) read-only\n     let temp_dir = format!(\"{}-{}\", temp_pkg_id.path, temp_pkg_id.version_or_default());"}, {"sha": "452ee837d1296cb12c4c51a1360ebe013684fb1c", "filename": "src/test/run-make/bootstrap-from-c-with-green/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1b4dc9daff6fccaff8b454f31418dc6117e80b/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1b4dc9daff6fccaff8b454f31418dc6117e80b/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs?ref=8a1b4dc9daff6fccaff8b454f31418dc6117e80b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #[crate_id=\"boot#0.1\"];\n-#[crate_type=\"lib\"];\n+#[crate_type=\"dylib\"];\n #[no_uv];\n \n extern mod rustuv;"}, {"sha": "4f931bdb8011e5ef0f2ccaf0b4b49cb220bdeb87", "filename": "src/test/run-make/bootstrap-from-c-with-native/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1b4dc9daff6fccaff8b454f31418dc6117e80b/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1b4dc9daff6fccaff8b454f31418dc6117e80b/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2Flib.rs?ref=8a1b4dc9daff6fccaff8b454f31418dc6117e80b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #[crate_id=\"boot#0.1\"];\n-#[crate_type=\"lib\"];\n+#[crate_type=\"dylib\"];\n #[no_uv];\n \n extern mod native;"}]}