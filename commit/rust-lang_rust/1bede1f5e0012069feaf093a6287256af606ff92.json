{"sha": "1bede1f5e0012069feaf093a6287256af606ff92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZWRlMWY1ZTAwMTIwNjlmZWFmMDkzYTYyODcyNTZhZjYwNmZmOTI=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-10-12T19:32:36Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-10-12T21:14:48Z"}, "message": "Replace several common macros of the form #m[...] with m!(...)\n\nThis commit replaces nearly all remaining uses of #fmt, #debug, #error,\nand #info, and fixes some error messages...", "tree": {"sha": "d992d648999c3e5ed947fc1db4b35af08fd2f9f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d992d648999c3e5ed947fc1db4b35af08fd2f9f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bede1f5e0012069feaf093a6287256af606ff92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bede1f5e0012069feaf093a6287256af606ff92", "html_url": "https://github.com/rust-lang/rust/commit/1bede1f5e0012069feaf093a6287256af606ff92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bede1f5e0012069feaf093a6287256af606ff92/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45d1cd83ab903d377f3b03fd2dc74da42100e308", "url": "https://api.github.com/repos/rust-lang/rust/commits/45d1cd83ab903d377f3b03fd2dc74da42100e308", "html_url": "https://github.com/rust-lang/rust/commit/45d1cd83ab903d377f3b03fd2dc74da42100e308"}], "stats": {"total": 171, "additions": 85, "deletions": 86}, "files": [{"sha": "109e71a3eaa70a3b00db997bb06a13fe7a488971", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -65,10 +65,10 @@ fn encode_inner(s: &str, full_url: bool) -> ~str {\n                         str::push_char(&mut out, ch);\n                       }\n \n-                      _ => out += #fmt(\"%%%X\", ch as uint)\n+                      _ => out += fmt!(\"%%%X\", ch as uint)\n                     }\n                 } else {\n-                    out += #fmt(\"%%%X\", ch as uint);\n+                    out += fmt!(\"%%%X\", ch as uint);\n                 }\n               }\n             }\n@@ -164,7 +164,7 @@ fn encode_plus(s: &str) -> ~str {\n                 str::push_char(&mut out, ch);\n               }\n               ' ' => str::push_char(&mut out, '+'),\n-              _ => out += #fmt(\"%%%X\", ch as uint)\n+              _ => out += fmt!(\"%%%X\", ch as uint)\n             }\n         }\n \n@@ -190,7 +190,7 @@ pub fn encode_form_urlencoded(m: HashMap<~str, @DVec<@~str>>) -> ~str {\n                 first = false;\n             }\n \n-            out += #fmt(\"%s=%s\", key, encode_plus(**value));\n+            out += fmt!(\"%s=%s\", key, encode_plus(**value));\n         }\n     }\n \n@@ -332,7 +332,7 @@ pub pure fn query_to_str(query: Query) -> ~str {\n         let (k, v) = copy *kv;\n         // This is really safe...\n         unsafe {\n-          strvec += ~[#fmt(\"%s=%s\",\n+          strvec += ~[fmt!(\"%s=%s\",\n                            encode_component(k), encode_component(v))];\n         }\n     };\n@@ -850,7 +850,7 @@ mod tests {\n     fn test_url_parse_host_slash() {\n         let urlstr = ~\"http://0.42.42.42/\";\n         let url = from_str(urlstr).get();\n-        #debug(\"url: %?\", url);\n+        debug!(\"url: %?\", url);\n         assert url.host == ~\"0.42.42.42\";\n         assert url.path == ~\"/\";\n     }\n@@ -859,15 +859,15 @@ mod tests {\n     fn test_url_with_underscores() {\n         let urlstr = ~\"http://dotcom.com/file_name.html\";\n         let url = from_str(urlstr).get();\n-        #debug(\"url: %?\", url);\n+        debug!(\"url: %?\", url);\n         assert url.path == ~\"/file_name.html\";\n     }\n \n     #[test]\n     fn test_url_with_dashes() {\n         let urlstr = ~\"http://dotcom.com/file-name.html\";\n         let url = from_str(urlstr).get();\n-        #debug(\"url: %?\", url);\n+        debug!(\"url: %?\", url);\n         assert url.path == ~\"/file-name.html\";\n     }\n "}, {"sha": "b7cf09cc6aa50eb4922c2ea91c8ca19e4e195d18", "filename": "src/libstd/serialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Flibstd%2Fserialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Flibstd%2Fserialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -375,7 +375,7 @@ pub impl<T: Deserializable> Option<T>: Deserializable {\n                 match i {\n                   0 => None,\n                   1 => Some(d.read_enum_variant_arg(0u, || deserialize(d))),\n-                  _ => fail(#fmt(\"Bad variant for option: %u\", i))\n+                  _ => fail(fmt!(\"Bad variant for option: %u\", i))\n                 }\n             }\n         }"}, {"sha": "75909273392f4f56d4145e2e6c9cb83f562085a3", "filename": "src/libstd/time.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -595,8 +595,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n fn strftime(format: &str, tm: Tm) -> ~str {\n     fn parse_type(ch: char, tm: &Tm) -> ~str {\n         //FIXME (#2350): Implement missing types.\n-      let die = || #fmt(\"strftime: can't understand this format %c \",\n-                             ch);\n+      let die = || fmt!(\"strftime: can't understand this format %c \", ch);\n         match ch {\n           'A' => match tm.tm_wday as int {\n             0 => ~\"Sunday\","}, {"sha": "2addb3d9e12a9805e20551c7682a3fe74c9f4243", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -266,7 +266,7 @@ fn print_macro_backtrace(cm: codemap::codemap, sp: span) {\n         let ss = option::map_default(&ei.callie.span, @~\"\",\n                                      |span| @codemap::span_to_str(*span, cm));\n         print_diagnostic(*ss, note,\n-                         fmt!(\"in expansion of #%s\", ei.callie.name));\n+                         fmt!(\"in expansion of %s!\", ei.callie.name));\n         let ss = codemap::span_to_str(ei.call_site, cm);\n         print_diagnostic(ss, note, ~\"expansion site\");\n         print_macro_backtrace(cm, ei.call_site);"}, {"sha": "94bf2a43f28ac32d3d16010e39f11fcba652b27b", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -269,21 +269,21 @@ fn get_mac_args(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n               match max {\n                 Some(max) if ! (min <= elts_len && elts_len <= max) => {\n                   cx.span_fatal(sp,\n-                                fmt!(\"#%s takes between %u and %u arguments.\",\n+                                fmt!(\"%s! takes between %u and %u arguments.\",\n                                      name, min, max));\n                 }\n                 None if ! (min <= elts_len) => {\n-                  cx.span_fatal(sp, fmt!(\"#%s needs at least %u arguments.\",\n+                  cx.span_fatal(sp, fmt!(\"%s! needs at least %u arguments.\",\n                                          name, min));\n                 }\n                 _ => return elts /* we are good */\n               }\n           }\n         _ => {\n-            cx.span_fatal(sp, fmt!(\"#%s: malformed invocation\", name))\n+            cx.span_fatal(sp, fmt!(\"%s!: malformed invocation\", name))\n         }\n       },\n-      None => cx.span_fatal(sp, fmt!(\"#%s: missing arguments\", name))\n+      None => cx.span_fatal(sp, fmt!(\"%s!: missing arguments\", name))\n     }\n }\n "}, {"sha": "37fb0f05cbd3e589324c3d7d77410fe9c371d647", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -1,6 +1,6 @@\n \n /*\n- * The compiler code necessary to support the #env extension.  Eventually this\n+ * The compiler code necessary to support the env! extension.  Eventually this\n  * should all get sucked into either the compiler syntax extension plugin\n  * interface.\n  */\n@@ -15,7 +15,7 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n     // FIXME (#2248): if this was more thorough it would manufacture an\n     // Option<str> rather than just an maybe-empty string.\n \n-    let var = expr_to_str(cx, args[0], ~\"#env requires a string\");\n+    let var = expr_to_str(cx, args[0], ~\"env! requires a string\");\n     match os::getenv(var) {\n       option::None => return mk_uniq_str(cx, sp, ~\"\"),\n       option::Some(s) => return mk_uniq_str(cx, sp, s)"}, {"sha": "e24575f6cd327b25e36bba8e07d8ba2f2f74cbad", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -1,7 +1,7 @@\n \n \n /*\n- * The compiler code necessary to support the #fmt extension. Eventually this\n+ * The compiler code necessary to support the fmt! extension. Eventually this\n  * should all get sucked into either the standard library extfmt module or the\n  * compiler syntax extension plugin interface.\n  */\n@@ -16,7 +16,7 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n     let args = get_mac_args_no_max(cx, sp, arg, 1u, ~\"fmt\");\n     let fmt =\n         expr_to_str(cx, args[0],\n-                    ~\"first argument to #fmt must be a string literal.\");\n+                    ~\"first argument to fmt! must be a string literal.\");\n     let fmtspan = args[0].span;\n     debug!(\"Format string:\");\n     log(debug, fmt);\n@@ -76,7 +76,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n                 let count_is_args = ~[count_lit];\n                 return mk_call(cx, sp, count_is_path, count_is_args);\n               }\n-              _ => cx.span_unimpl(sp, ~\"unimplemented #fmt conversion\")\n+              _ => cx.span_unimpl(sp, ~\"unimplemented fmt! conversion\")\n             }\n         }\n         fn make_ty(cx: ext_ctxt, sp: span, t: Ty) -> @ast::expr {\n@@ -133,7 +133,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n               _ => return false\n             }\n         }\n-        let unsupported = ~\"conversion not supported in #fmt string\";\n+        let unsupported = ~\"conversion not supported in fmt! string\";\n         match cnv.param {\n           option::None => (),\n           _ => cx.span_unimpl(sp, unsupported)\n@@ -145,14 +145,14 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n                 if !is_signed_type(cnv) {\n                     cx.span_fatal(sp,\n                                   ~\"+ flag only valid in \" +\n-                                      ~\"signed #fmt conversion\");\n+                                      ~\"signed fmt! conversion\");\n                 }\n               }\n               FlagSpaceForSign => {\n                 if !is_signed_type(cnv) {\n                     cx.span_fatal(sp,\n                                   ~\"space flag only valid in \" +\n-                                      ~\"signed #fmt conversions\");\n+                                      ~\"signed fmt! conversions\");\n                 }\n               }\n               FlagLeftZeroPad => (),\n@@ -252,7 +252,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n             n += 1u;\n             if n >= nargs {\n                 cx.span_fatal(sp,\n-                              ~\"not enough arguments to #fmt \" +\n+                              ~\"not enough arguments to fmt! \" +\n                                   ~\"for the given format string\");\n             }\n             debug!(\"Building conversion:\");\n@@ -267,7 +267,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n \n     if expected_nargs < nargs {\n         cx.span_fatal\n-            (sp, fmt!(\"too many arguments to #fmt. found %u, expected %u\",\n+            (sp, fmt!(\"too many arguments to fmt!. found %u, expected %u\",\n                            nargs, expected_nargs));\n     }\n "}, {"sha": "4457c64a68c08f736b75fb814ff6a44487f397fd", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -2414,7 +2414,7 @@ impl parser {\n \n     fn expect_self_ident() {\n         if !self.is_self_ident() {\n-            self.fatal(#fmt(\"expected `self` but found `%s`\",\n+            self.fatal(fmt!(\"expected `self` but found `%s`\",\n                             token_to_str(self.reader, self.token)));\n         }\n         self.bump();\n@@ -2696,7 +2696,7 @@ impl parser {\n                   ctor_decl(a_fn_decl, attrs, blk, s) => {\n                       match the_ctor {\n                         Some((_, _, _, s_first)) => {\n-                          self.span_note(s, #fmt(\"Duplicate constructor \\\n+                          self.span_note(s, fmt!(\"Duplicate constructor \\\n                                      declaration for class %s\",\n                                      *self.interner.get(class_name)));\n                            self.span_fatal(copy s_first, ~\"First constructor \\\n@@ -2710,7 +2710,7 @@ impl parser {\n                   dtor_decl(blk, attrs, s) => {\n                       match the_dtor {\n                         Some((_, _, s_first)) => {\n-                          self.span_note(s, #fmt(\"Duplicate destructor \\\n+                          self.span_note(s, fmt!(\"Duplicate destructor \\\n                                      declaration for class %s\",\n                                      *self.interner.get(class_name)));\n                           self.span_fatal(copy s_first, ~\"First destructor \\"}, {"sha": "550656c23df69852ed55fd04193535d3b6dd3d5b", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -216,7 +216,7 @@ impl session {\n     // This exists to help with refactoring to eliminate impossible\n     // cases later on\n     fn impossible_case(sp: span, msg: &str) -> ! {\n-        self.span_bug(sp, #fmt(\"Impossible case reached: %s\", msg));\n+        self.span_bug(sp, fmt!(\"Impossible case reached: %s\", msg));\n     }\n     fn verbose() -> bool { self.debugging_opt(verbose) }\n     fn time_passes() -> bool { self.debugging_opt(time_passes) }"}, {"sha": "4c647d41880ea1b3bd7a384fb3779d7ae7f768d7", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -162,7 +162,7 @@ fn item_family(item: ebml::Doc) -> Family {\n       'g' => PublicField,\n       'j' => PrivateField,\n       'N' => InheritedField,\n-       c => fail (#fmt(\"unexpected family char: %c\", c))\n+       c => fail (fmt!(\"unexpected family char: %c\", c))\n     }\n }\n \n@@ -705,7 +705,7 @@ fn get_trait_methods(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n                            self_ty: self_ty,\n                            vis: ast::public});\n     }\n-    #debug(\"get_trait_methods: }\");\n+    debug!(\"get_trait_methods: }\");\n     @result\n }\n "}, {"sha": "2030984ae7043bdf9540b1a1b774b37d91cc5772", "filename": "src/rustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -303,8 +303,8 @@ impl gather_loan_ctxt {\n                   _ => {\n                     self.bccx.tcx.sess.span_bug(\n                         cmt.span,\n-                        #fmt[\"loans required but scope is scope_region is %s\",\n-                             region_to_str(self.tcx(), scope_r)]);\n+                        fmt!(\"loans required but scope is scope_region is %s\",\n+                             region_to_str(self.tcx(), scope_r)));\n                   }\n                 }\n               }"}, {"sha": "7e1d47eed6944241808e0b94e5157efd1167fc79", "filename": "src/rustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -314,17 +314,17 @@ priv impl &preserve_ctxt {\n           // we can only root values if the desired region is some concrete\n           // scope within the fn body\n           ty::re_scope(scope_id) => {\n-            #debug[\"Considering root map entry for %s: \\\n+            debug!(\"Considering root map entry for %s: \\\n                     node %d:%u -> scope_id %?, root_ub %?\",\n                    self.bccx.cmt_to_repr(cmt), base.id,\n-                   derefs, scope_id, self.root_ub];\n+                   derefs, scope_id, self.root_ub);\n             if self.bccx.is_subregion_of(self.scope_region, root_region) {\n-                #debug[\"Elected to root\"];\n+                debug!(\"Elected to root\");\n                 let rk = {id: base.id, derefs: derefs};\n                 self.bccx.root_map.insert(rk, scope_id);\n                 return Ok(pc_ok);\n             } else {\n-                #debug[\"Unable to root\"];\n+                debug!(\"Unable to root\");\n                 return Err({cmt:cmt,\n                          code:err_out_of_root_scope(root_region,\n                                                     self.scope_region)});"}, {"sha": "aab470f6907da9b464b5e0ab92fbaceb3d3b0a65", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -33,7 +33,7 @@ fn check_expr(tcx: ty::ctxt, ex: @expr, &&s: (), v: visit::vt<()>) {\n        if arms.is_empty() {\n            if !type_is_empty(tcx, pat_ty) {\n                // We know the type is inhabited, so this must be wrong\n-               tcx.sess.span_err(ex.span, #fmt(\"non-exhaustive patterns: \\\n+               tcx.sess.span_err(ex.span, fmt!(\"non-exhaustive patterns: \\\n                              type %s is non-empty\", ty_to_str(tcx, pat_ty)));\n            }\n            // If the type *is* empty, it's vacuously exhaustive"}, {"sha": "9ef54eedcf5b5f0e1bb8c28866cb0d79b6b2db69", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -902,11 +902,11 @@ impl Liveness {\n                 self.propagate_through_fn_block(decl, body)\n             });\n \n-        // hack to skip the loop unless #debug is enabled:\n+        // hack to skip the loop unless debug! is enabled:\n         debug!(\"^^ liveness computation results for body %d (entry=%s)\",\n                {\n                    for uint::range(0u, self.ir.num_live_nodes) |ln_idx| {\n-                       #debug[\"%s\", self.ln_str(LiveNode(ln_idx))];\n+                       debug!(\"%s\", self.ln_str(LiveNode(ln_idx)));\n                    }\n                    body.node.id\n                },"}, {"sha": "18880fe917b35ec729b9c237108931fe6f9ebe16", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -918,12 +918,12 @@ impl Resolver {\n               match ns.find(|n| child.defined_in_namespace(n)) {\n                 Some(ns) => {\n                   self.session.span_err(sp,\n-                       #fmt(\"Duplicate definition of %s %s\",\n+                       fmt!(\"Duplicate definition of %s %s\",\n                             namespace_to_str(ns),\n                             self.session.str_of(name)));\n                   do child.span_for_namespace(ns).iter() |sp| {\n                       self.session.span_note(*sp,\n-                           #fmt(\"First definition of %s %s here:\",\n+                           fmt!(\"First definition of %s %s here:\",\n                                 namespace_to_str(ns),\n                                 self.session.str_of(name)));\n                   }"}, {"sha": "af9f2899a54d019c63360c106ab30b82c0c9ed1a", "filename": "src/rustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -745,7 +745,7 @@ fn emit_tydescs(ccx: @crate_ctxt) {\n         // Index tydesc by addrspace.\n         if ti.addrspace > gc_box_addrspace {\n             let llty = T_ptr(ccx.tydesc_type);\n-            let addrspace_name = #fmt(\"_gc_addrspace_metadata_%u\",\n+            let addrspace_name = fmt!(\"_gc_addrspace_metadata_%u\",\n                                       ti.addrspace as uint);\n             let addrspace_gvar = str::as_c_str(addrspace_name, |buf| {\n                 llvm::LLVMAddGlobal(ccx.llmod, llty, buf)"}, {"sha": "87c073d567d773e81439f798865db9631106cd4d", "filename": "src/rustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -37,11 +37,11 @@ fn monomorphic_fn(ccx: @crate_ctxt,\n         must_cast = true;\n     }\n \n-    #debug[\"monomorphic_fn(fn_id=%? (%s), real_substs=%?, substs=%?, \\\n+    debug!(\"monomorphic_fn(fn_id=%? (%s), real_substs=%?, substs=%?, \\\n            hash_id = %?\",\n            fn_id, ty::item_path_str(ccx.tcx, fn_id),\n            real_substs.map(|s| ty_to_str(ccx.tcx, *s)),\n-           substs.map(|s| ty_to_str(ccx.tcx, *s)), hash_id];\n+           substs.map(|s| ty_to_str(ccx.tcx, *s)), hash_id);\n \n     match ccx.monomorphized.find(hash_id) {\n       Some(val) => {"}, {"sha": "c1195d473aa5c814ebfde53f4727a2595f3d2c14", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -3020,7 +3020,7 @@ fn get_field(tcx: ctxt, rec_ty: t, id: ast::ident) -> field {\n     match vec::find(get_fields(rec_ty), |f| f.ident == id) {\n       Some(f) => f,\n       // Do we only call this when we know the field is legit?\n-      None => fail (#fmt(\"get_field: ty doesn't have a field %s\",\n+      None => fail (fmt!(\"get_field: ty doesn't have a field %s\",\n                          tcx.sess.str_of(id)))\n     }\n }\n@@ -3335,7 +3335,7 @@ fn provided_trait_methods(cx: ctxt, id: ast::def_id) -> ~[@ast::method] {\n                 match ast_util::split_trait_methods(ms) {\n                    (_, p) => p\n                 },\n-            _ => cx.sess.bug(#fmt(\"provided_trait_methods: %? is not a trait\",\n+            _ => cx.sess.bug(fmt!(\"provided_trait_methods: %? is not a trait\",\n                                   id))\n         }\n     }"}, {"sha": "0a2643f6d0fe2e614143933254d52cc3bc896523", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -266,7 +266,7 @@ fn compare_impl_method(tcx: ty::ctxt, sp: span,\n     }\n \n     if impl_m.tps.len() != trait_m.tps.len() {\n-        tcx.sess.span_err(sp, #fmt(\"method `%s` \\\n+        tcx.sess.span_err(sp, fmt!(\"method `%s` \\\n            has %u type %s, but its trait declaration has %u type %s\",\n            tcx.sess.str_of(trait_m.ident), impl_m.tps.len(),\n            pluralize(impl_m.tps.len(), ~\"parameter\"),\n@@ -291,7 +291,7 @@ fn compare_impl_method(tcx: ty::ctxt, sp: span,\n         // Would be nice to use the ty param names in the error message,\n         // but we don't have easy access to them here\n         if impl_param_bounds.len() != trait_param_bounds.len() {\n-           tcx.sess.span_err(sp, #fmt(\"in method `%s`, \\\n+           tcx.sess.span_err(sp, fmt!(\"in method `%s`, \\\n              type parameter %u has %u %s, but the same type \\\n              parameter in its trait declaration has %u %s\",\n              tcx.sess.str_of(trait_m.ident),"}, {"sha": "56ebbfe9b51ff19e2221803db02a54eaba841709", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -157,7 +157,7 @@ fn fold_enum(\n \n                     attr_parser::parse_desc(ast_variant.node.attrs)\n                   }\n-                  _ => fail #fmt(\"Enum variant %s has id that's not bound \\\n+                  _ => fail fmt!(\"Enum variant %s has id that's not bound \\\n                          to an enum item\", variant.name)\n                 }\n             };"}, {"sha": "bd2c3d1bc0778eaae372ee84aac67223490ebc98", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -19,20 +19,20 @@ fn grandchild_group(num_tasks: uint) {\n             comm::recv(comm::Port::<()>()); // block forever\n         }\n     }\n-    #error[\"Grandchild group getting started\"];\n+    error!(\"Grandchild group getting started\");\n     for num_tasks.times {\n         // Make sure all above children are fully spawned; i.e., enlisted in\n         // their ancestor groups.\n         comm::recv(po);\n     }\n-    #error[\"Grandchild group ready to go.\"];\n+    error!(\"Grandchild group ready to go.\");\n     // Master grandchild task exits early.\n }\n \n fn spawn_supervised_blocking(myname: &str, +f: fn~()) {\n     let mut res = None;\n     task::task().future_result(|+r| res = Some(r)).supervised().spawn(f);\n-    #error[\"%s group waiting\", myname];\n+    error!(\"%s group waiting\", myname);\n     let x = future::get(&option::unwrap(res));\n     assert x == task::Success;\n }\n@@ -58,10 +58,10 @@ fn main() {\n                 grandchild_group(num_tasks);\n             }\n             // When grandchild group is ready to go, make the middle group exit.\n-            #error[\"Middle group wakes up and exits\"];\n+            error!(\"Middle group wakes up and exits\");\n         }\n         // Grandparent group waits for middle group to be gone, then fails\n-        #error[\"Grandparent group wakes up and fails\"];\n+        error!(\"Grandparent group wakes up and fails\");\n         fail;\n     };\n     assert x.is_err();"}, {"sha": "6cd22b7f5350221a1f70daedf2817c5fd67f900f", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -1,6 +1,6 @@\n struct defer {\n     x: &[&str],\n-    drop { #error[\"%?\", self.x]; }\n+    drop { error!(\"%?\", self.x); }\n }\n \n fn defer(x: &r/[&r/str]) -> defer/&r {"}, {"sha": "1d1595383ee7f3f0a0a8dda1a1c39540330c8b48", "filename": "src/test/compile-fail/borrowck-unary-move-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -1,5 +1,5 @@\n struct noncopyable {\n-    i: (), drop { #error[\"dropped\"]; }\n+    i: (), drop { error!(\"dropped\"); }\n }\n \n fn noncopyable() -> noncopyable {\n@@ -13,4 +13,4 @@ enum wrapper = noncopyable;\n fn main() {\n     let x1 = wrapper(noncopyable());\n     let _x2 = move *x1; //~ ERROR moving out of enum content\n-}\n\\ No newline at end of file\n+}"}, {"sha": "1db0e0a39ee1bff1ade2a8c744ac172932e54e5c", "filename": "src/test/compile-fail/extenv-no-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fextenv-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fextenv-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextenv-no-args.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:#env takes between 1 and 1 arguments\n+// error-pattern: env! takes between 1 and 1 arguments\n \n fn main() { env!(); }"}, {"sha": "4f0df2a090fbdcaa3246e17293d77a1b36a7405c", "filename": "src/test/compile-fail/extenv-too-many-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fextenv-too-many-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fextenv-too-many-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextenv-too-many-args.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:#env takes between 1 and 1 arguments\n+// error-pattern: env! takes between 1 and 1 arguments\n \n fn main() { env!(\"one\", \"two\"); }"}, {"sha": "1cca7e5b315b808b37db6cd3e9f71230ed5b68ce", "filename": "src/test/compile-fail/extfmt-no-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fextfmt-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fextfmt-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-no-args.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:#fmt needs at least 1 arguments\n+// error-pattern:fmt! needs at least 1 arguments\n \n fn main() { fmt!(); }"}, {"sha": "7255bd84631822857189fb5d1bcdf820f49251c0", "filename": "src/test/compile-fail/extfmt-non-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fextfmt-non-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fextfmt-non-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-non-literal.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: literal\n \n fn main() {\n-    // #fmt's first argument must be a literal.  Hopefully this\n+    // fmt!'s first argument must be a literal.  Hopefully this\n     // restriction can be eased eventually to just require a\n     // compile-time constant.\n     let x = fmt!(\"a\" + \"b\");"}, {"sha": "0196c37c68ee50f1df40abb6004d8f8f14537c15", "filename": "src/test/compile-fail/extfmt-non-literal2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fextfmt-non-literal2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fextfmt-non-literal2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-non-literal2.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: literal\n \n fn main() {\n-    // #fmt's first argument must be a literal.  Hopefully this\n+    // fmt!'s first argument must be a literal.  Hopefully this\n     // restriction can be eased eventually to just require a\n     // compile-time constant.\n     let x = fmt!(20);"}, {"sha": "1dd3ed390d51dda01b4ff5751102959974e96c60", "filename": "src/test/compile-fail/extfmt-unsigned-plus.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-plus.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:only valid in signed #fmt conversion\n+// error-pattern:only valid in signed fmt! conversion\n \n fn main() {\n     // Can't use a sign on unsigned conversions"}, {"sha": "a2ac54bea7d99b4d72dcbc8a1f8940338d998844", "filename": "src/test/compile-fail/extfmt-unsigned-space.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-space.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:only valid in signed #fmt conversion\n+// error-pattern:only valid in signed fmt! conversion\n \n fn main() {\n     // Can't use a space on unsigned conversions"}, {"sha": "d5c016c1ea87bc78e0cad297192811f60b47a552", "filename": "src/test/compile-fail/issue-3099.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fissue-3099.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fissue-3099.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3099.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -1,11 +1,11 @@\n fn a(x: ~str) -> ~str {\n-    #fmt(\"First function with %s\", x)\n+    fmt!(\"First function with %s\", x)\n }\n \n fn a(x: ~str, y: ~str) -> ~str { //~ ERROR Duplicate definition of value a\n-    #fmt(\"Second function with %s and %s\", x, y)\n+    fmt!(\"Second function with %s and %s\", x, y)\n }\n \n fn main() {\n-    #info(\"Result: \");\n+    info!(\"Result: \");\n }"}, {"sha": "b163006c50a680a17b8a3998e82622076bbb3a32", "filename": "src/test/compile-fail/regions-freevar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -3,7 +3,7 @@ fn wants_static_fn(_x: &static/fn()) {}\n fn main() {\n     let i = 3;\n     do wants_static_fn {\n-        #debug(\"i=%d\", i);\n+        debug!(\"i=%d\", i);\n           //~^ ERROR captured variable does not outlive the enclosing closure\n     }\n }"}, {"sha": "002d8b27ca7c67de49c621f7b20713ec2c3360d4", "filename": "src/test/run-pass/early-vtbl-resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -10,7 +10,7 @@ fn foo_func<A, B: thing<A>>(x: B) -> Option<A> { x.foo() }\n fn main() {\n \n     for iter::eachi(&(Some({a: 0}))) |i, a| { \n-        #debug[\"%u %d\", i, a.a];\n+        debug!(\"%u %d\", i, a.a);\n     }\n \n     let _x: Option<float> = foo_func(0);"}, {"sha": "b03cab1a828f8e74767b83854afea1e54705db6d", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -41,7 +41,7 @@ fn square_from_char(c: char) -> square {\n       '.'  => { earth }\n       ' '  => { empty }\n       _ => {\n-        #error(\"invalid square: %?\", c);\n+        error!(\"invalid square: %?\", c);\n         fail\n       }\n     }"}, {"sha": "86ba11560b2abed89b9e6f97b07e637bcb1b47ee", "filename": "src/test/run-pass/issue-2935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2935.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -19,6 +19,6 @@ fn main() {\n     //  x.f();\n     // y.f();\n     // (*z).f();\n-    #error[\"ok so far...\"];\n+    error!(\"ok so far...\");\n     z.f(); //segfault\n }"}, {"sha": "0cabe1adb28e0153f291aa5aa45b48f5e80e6cff", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -26,8 +26,8 @@ fn main() {\n     let bools2 = to_bools({storage: ~[0b01100100]});\n \n     for uint::range(0, 8) |i| {\n-        io::println(#fmt(\"%u => %u vs %u\", i, bools[i] as uint, bools2[i] as uint));\n+        io::println(fmt!(\"%u => %u vs %u\", i, bools[i] as uint, bools2[i] as uint));\n     }\n \n     assert bools == bools2;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3154daffb23e8aaf470ede95b6c523978d7d7c80", "filename": "src/test/run-pass/issue-3168.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3168.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -6,16 +6,16 @@ fn main() {\n         let (c2,p2) = pipes::stream();\n         do task::spawn {\n             p2.recv();\n-            #error[\"brother fails\"];\n+            error!(\"brother fails\");\n             fail;\n         }   \n         let (c3,p3) = pipes::stream();\n         c.send(c3);\n         c2.send(());\n-        #error[\"child blocks\"];\n+        error!(\"child blocks\");\n         p3.recv();\n     };  \n-    #error[\"parent tries\"];\n+    error!(\"parent tries\");\n     assert !p.recv().try_send(());\n-    #error(\"all done!\");\n+    error!(\"all done!\");\n }"}, {"sha": "7f89f4c49b700c80001b50bba978bbf2591dd1c5", "filename": "src/test/run-pass/issue-3176.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3176.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -8,18 +8,18 @@ fn main() {\n         let (c2,p2) = pipes::stream();\n         do task::spawn {\n             p2.recv();\n-            #error[\"brother fails\"];\n+            error!(\"brother fails\");\n             fail;\n         }   \n         let (c3,p3) = pipes::stream();\n         c.send(c3);\n         c2.send(());\n-        #error[\"child blocks\"];\n+        error!(\"child blocks\");\n         let (c, p) = pipes::stream();\n         (p, p3).select();\n         c.send(());\n     };  \n-    #error[\"parent tries\"];\n+    error!(\"parent tries\");\n     assert !p.recv().try_send(());\n-    #error(\"all done!\");\n+    error!(\"all done!\");\n }"}, {"sha": "d757d0311b4e60597798c17994b9ce138b15902d", "filename": "src/test/run-pass/pure-fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Frun-pass%2Fpure-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Frun-pass%2Fpure-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpure-fmt.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -1,4 +1,4 @@\n-// Testing that calling #fmt (via #debug) doesn't complain about impure borrows\n+// Testing that calling fmt! (via debug!) doesn't complain about impure borrows\n \n pure fn foo() {\n     let a = {\n@@ -18,4 +18,4 @@ pure fn foo() {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "2b56cee9f6b41efdd61cde1bb98ffb7ebddbba2a", "filename": "src/test/run-pass/struct-literal-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Frun-pass%2Fstruct-literal-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bede1f5e0012069feaf093a6287256af606ff92/src%2Ftest%2Frun-pass%2Fstruct-literal-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-literal-dtor.rs?ref=1bede1f5e0012069feaf093a6287256af606ff92", "patch": "@@ -1,6 +1,6 @@\n struct foo {\n     x: ~str,\n-    drop { #error[\"%s\", self.x]; }\n+    drop { error!(\"%s\", self.x); }\n }\n \n fn main() {"}]}