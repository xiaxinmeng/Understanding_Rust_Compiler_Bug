{"sha": "dc9842b64fa2c273bd46d60280222bec9dfd87cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjOTg0MmI2NGZhMmMyNzNiZDQ2ZDYwMjgwMjIyYmVjOWRmZDg3Y2Y=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-03T18:55:14Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-03T18:55:14Z"}, "message": "only check type namespace in extract_struct_from_enum_variant for collisions", "tree": {"sha": "b633caec3802711930845196093b9bdfaf731c89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b633caec3802711930845196093b9bdfaf731c89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc9842b64fa2c273bd46d60280222bec9dfd87cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc9842b64fa2c273bd46d60280222bec9dfd87cf", "html_url": "https://github.com/rust-lang/rust/commit/dc9842b64fa2c273bd46d60280222bec9dfd87cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc9842b64fa2c273bd46d60280222bec9dfd87cf/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "060c8b2c96a0de4a131c4d780d2aac80afe13de8", "url": "https://api.github.com/repos/rust-lang/rust/commits/060c8b2c96a0de4a131c4d780d2aac80afe13de8", "html_url": "https://github.com/rust-lang/rust/commit/060c8b2c96a0de4a131c4d780d2aac80afe13de8"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "1bf5a4214f78edef9227576ab67c431005fd2fdb", "filename": "crates/assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 53, "deletions": 9, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/dc9842b64fa2c273bd46d60280222bec9dfd87cf/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9842b64fa2c273bd46d60280222bec9dfd87cf/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=dc9842b64fa2c273bd46d60280222bec9dfd87cf", "patch": "@@ -31,19 +31,27 @@ pub(crate) fn extract_struct_from_enum_variant(\n     ctx: &AssistContext,\n ) -> Option<()> {\n     let variant = ctx.find_node_at_offset::<ast::Variant>()?;\n+\n+    fn is_applicable_variant(variant: &ast::Variant) -> bool {\n+        1 < match variant.kind() {\n+            ast::StructKind::Record(field_list) => field_list.fields().count(),\n+            ast::StructKind::Tuple(field_list) => field_list.fields().count(),\n+            ast::StructKind::Unit => 0,\n+        }\n+    }\n+\n+    if !is_applicable_variant(&variant) {\n+        return None;\n+    }\n+\n     let field_list = match variant.kind() {\n         ast::StructKind::Tuple(field_list) => field_list,\n         _ => return None,\n     };\n \n-    // skip 1-tuple variants\n-    if field_list.fields().count() == 1 {\n-        return None;\n-    }\n-\n     let variant_name = variant.name()?;\n     let variant_hir = ctx.sema.to_def(&variant)?;\n-    if existing_struct_def(ctx.db(), &variant_name, &variant_hir) {\n+    if existing_definition(ctx.db(), &variant_name, &variant_hir) {\n         return None;\n     }\n     let enum_ast = variant.parent_enum();\n@@ -100,12 +108,21 @@ pub(crate) fn extract_struct_from_enum_variant(\n     )\n }\n \n-fn existing_struct_def(db: &RootDatabase, variant_name: &ast::Name, variant: &EnumVariant) -> bool {\n+fn existing_definition(db: &RootDatabase, variant_name: &ast::Name, variant: &EnumVariant) -> bool {\n     variant\n         .parent_enum(db)\n         .module(db)\n         .scope(db, None)\n         .into_iter()\n+        .filter(|(_, def)| match def {\n+            // only check type-namespace\n+            hir::ScopeDef::ModuleDef(def) => matches!(def,\n+                ModuleDef::Module(_) | ModuleDef::Adt(_) |\n+                ModuleDef::EnumVariant(_) | ModuleDef::Trait(_) |\n+                ModuleDef::TypeAlias(_) | ModuleDef::BuiltinType(_)\n+            ),\n+            _ => false,\n+        })\n         .any(|(name, _)| name == variant_name.as_name())\n }\n \n@@ -211,12 +228,39 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn test_extract_struct_several_fields() {\n+    fn test_extract_struct_several_fields_tuple() {\n         check_assist(\n             extract_struct_from_enum_variant,\n             \"enum A { <|>One(u32, u32) }\",\n             r#\"struct One(pub u32, pub u32);\n \n+enum A { One(One) }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_struct_several_fields_named() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            \"enum A { <|>One { foo: u32, bar: u32 } }\",\n+            r#\"struct One {\n+    pub foo: u32,\n+    pub bar: u32\n+}\n+\n+enum A { One(One) }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_enum_variant_name_value_namespace() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r#\"const One: () = ();\n+enum A { <|>One(u32, u32) }\"#,\n+            r#\"const One: () = ();\n+struct One(pub u32, pub u32);\n+\n enum A { One(One) }\"#,\n         );\n     }\n@@ -298,7 +342,7 @@ fn another_fn() {\n     fn test_extract_enum_not_applicable_if_struct_exists() {\n         check_not_applicable(\n             r#\"struct One;\n-        enum A { <|>One(u8) }\"#,\n+        enum A { <|>One(u8, u32) }\"#,\n         );\n     }\n "}]}