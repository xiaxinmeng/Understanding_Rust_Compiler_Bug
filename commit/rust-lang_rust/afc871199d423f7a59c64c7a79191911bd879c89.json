{"sha": "afc871199d423f7a59c64c7a79191911bd879c89", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYzg3MTE5OWQ0MjNmN2E1OWM2NGM3YTc5MTkxOTExYmQ4NzljODk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-09T08:54:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-09T08:54:00Z"}, "message": "Merge #1973\n\n1973: add <> for type aliases as well r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "f06b9b26d4027344b438c37770f03ad36343515a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f06b9b26d4027344b438c37770f03ad36343515a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afc871199d423f7a59c64c7a79191911bd879c89", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdnaAoCRBK7hj4Ov3rIwAAdHIIACWam/HblE+wvsPKycHVv5Z/\n4Dxcm+fUFLATlhDZE3WS1jrsnqzj5iK2q9EVIS5ZttXezRgHTRfUNWZpQYhAP9D6\nXSWzNrY5Tae98dW4d+mhzX/9w9pLaTBkr6xpVl5zf0Ma6LLO/o2ocTq4n4jPWh15\npAus7Y0UWDaG5HxSyxlNVeemI48rlyrjqrvLdWMkuYe4JGTlDWW9XZHtyMAPHAeo\n0uOTlhTjEmvpWLDVKoCBApuPX2fWVaJAo606XvCS6qfUSU2WlAZRosUOKaqAcdj7\ndXyEEQ6N+TWs+m3u6j5MV4rMajCKYysffCok1okervmfuXq6L2kLtVBiTEMsXxY=\n=qel4\n-----END PGP SIGNATURE-----\n", "payload": "tree f06b9b26d4027344b438c37770f03ad36343515a\nparent b97677256607d8c6f03707d62265c6b3ccb34600\nparent d9f83d9b16bf871882d7e54419b310e4283c531b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1570611240 +0000\ncommitter GitHub <noreply@github.com> 1570611240 +0000\n\nMerge #1973\n\n1973: add <> for type aliases as well r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afc871199d423f7a59c64c7a79191911bd879c89", "html_url": "https://github.com/rust-lang/rust/commit/afc871199d423f7a59c64c7a79191911bd879c89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afc871199d423f7a59c64c7a79191911bd879c89/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b97677256607d8c6f03707d62265c6b3ccb34600", "url": "https://api.github.com/repos/rust-lang/rust/commits/b97677256607d8c6f03707d62265c6b3ccb34600", "html_url": "https://github.com/rust-lang/rust/commit/b97677256607d8c6f03707d62265c6b3ccb34600"}, {"sha": "d9f83d9b16bf871882d7e54419b310e4283c531b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f83d9b16bf871882d7e54419b310e4283c531b", "html_url": "https://github.com/rust-lang/rust/commit/d9f83d9b16bf871882d7e54419b310e4283c531b"}], "stats": {"total": 142, "additions": 85, "deletions": 57}, "files": [{"sha": "9cbd9a8aef8796867848fed8270da4305bb04ad5", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afc871199d423f7a59c64c7a79191911bd879c89/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc871199d423f7a59c64c7a79191911bd879c89/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=afc871199d423f7a59c64c7a79191911bd879c89", "patch": "@@ -71,7 +71,7 @@ pub use self::{\n     either::Either,\n     expr::ExprScopes,\n     from_source::FromSource,\n-    generics::{GenericParam, GenericParams, HasGenericParams},\n+    generics::{GenericDef, GenericParam, GenericParams, HasGenericParams},\n     ids::{HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile},\n     impl_block::ImplBlock,\n     name::Name,"}, {"sha": "b7807ef8e8fec5f974f22ac16685dfa815642cdc", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 84, "deletions": 56, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/afc871199d423f7a59c64c7a79191911bd879c89/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc871199d423f7a59c64c7a79191911bd879c89/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=afc871199d423f7a59c64c7a79191911bd879c89", "patch": "@@ -44,48 +44,56 @@ impl Completions {\n     ) {\n         use hir::ModuleDef::*;\n \n-        let mut completion_kind = CompletionKind::Reference;\n-        let (kind, docs) = match resolution {\n-            ScopeDef::ModuleDef(Module(it)) => (CompletionItemKind::Module, it.docs(ctx.db)),\n+        let completion_kind = match resolution {\n+            ScopeDef::ModuleDef(BuiltinType(..)) => CompletionKind::BuiltinType,\n+            _ => CompletionKind::Reference,\n+        };\n+\n+        let kind = match resolution {\n+            ScopeDef::ModuleDef(Module(..)) => CompletionItemKind::Module,\n             ScopeDef::ModuleDef(Function(func)) => {\n                 return self.add_function_with_name(ctx, Some(local_name), *func);\n             }\n-            ScopeDef::ModuleDef(Adt(adt)) => {\n-                return self.add_adt_with_name(ctx, local_name, *adt);\n-            }\n-            ScopeDef::ModuleDef(EnumVariant(it)) => {\n-                (CompletionItemKind::EnumVariant, it.docs(ctx.db))\n-            }\n-            ScopeDef::ModuleDef(Const(it)) => (CompletionItemKind::Const, it.docs(ctx.db)),\n-            ScopeDef::ModuleDef(Static(it)) => (CompletionItemKind::Static, it.docs(ctx.db)),\n-            ScopeDef::ModuleDef(Trait(it)) => (CompletionItemKind::Trait, it.docs(ctx.db)),\n-            ScopeDef::ModuleDef(TypeAlias(it)) => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n-            ScopeDef::ModuleDef(BuiltinType(..)) => {\n-                completion_kind = CompletionKind::BuiltinType;\n-                (CompletionItemKind::BuiltinType, None)\n-            }\n-            ScopeDef::GenericParam(..) => (CompletionItemKind::TypeParam, None),\n-            ScopeDef::LocalBinding(..) => (CompletionItemKind::Binding, None),\n-            ScopeDef::AdtSelfType(..) | ScopeDef::ImplSelfType(..) => (\n-                CompletionItemKind::TypeParam, // (does this need its own kind?)\n-                None,\n-            ),\n+            ScopeDef::ModuleDef(Adt(hir::Adt::Struct(_))) => CompletionItemKind::Struct,\n+            // FIXME: add CompletionItemKind::Union\n+            ScopeDef::ModuleDef(Adt(hir::Adt::Union(_))) => CompletionItemKind::Struct,\n+            ScopeDef::ModuleDef(Adt(hir::Adt::Enum(_))) => CompletionItemKind::Enum,\n+\n+            ScopeDef::ModuleDef(EnumVariant(..)) => CompletionItemKind::EnumVariant,\n+            ScopeDef::ModuleDef(Const(..)) => CompletionItemKind::Const,\n+            ScopeDef::ModuleDef(Static(..)) => CompletionItemKind::Static,\n+            ScopeDef::ModuleDef(Trait(..)) => CompletionItemKind::Trait,\n+            ScopeDef::ModuleDef(TypeAlias(..)) => CompletionItemKind::TypeAlias,\n+            ScopeDef::ModuleDef(BuiltinType(..)) => CompletionItemKind::BuiltinType,\n+            ScopeDef::GenericParam(..) => CompletionItemKind::TypeParam,\n+            ScopeDef::LocalBinding(..) => CompletionItemKind::Binding,\n+            // (does this need its own kind?)\n+            ScopeDef::AdtSelfType(..) | ScopeDef::ImplSelfType(..) => CompletionItemKind::TypeParam,\n             ScopeDef::MacroDef(mac) => {\n-                self.add_macro(ctx, Some(local_name), *mac);\n-                return;\n+                return self.add_macro(ctx, Some(local_name), *mac);\n             }\n             ScopeDef::Unknown => {\n-                self.add(CompletionItem::new(\n+                return self.add(CompletionItem::new(\n                     CompletionKind::Reference,\n                     ctx.source_range(),\n                     local_name,\n                 ));\n-                return;\n             }\n         };\n \n+        let docs = match resolution {\n+            ScopeDef::ModuleDef(Module(it)) => it.docs(ctx.db),\n+            ScopeDef::ModuleDef(Adt(it)) => it.docs(ctx.db),\n+            ScopeDef::ModuleDef(EnumVariant(it)) => it.docs(ctx.db),\n+            ScopeDef::ModuleDef(Const(it)) => it.docs(ctx.db),\n+            ScopeDef::ModuleDef(Static(it)) => it.docs(ctx.db),\n+            ScopeDef::ModuleDef(Trait(it)) => it.docs(ctx.db),\n+            ScopeDef::ModuleDef(TypeAlias(it)) => it.docs(ctx.db),\n+            _ => None,\n+        };\n+\n         let mut completion_item =\n-            CompletionItem::new(completion_kind, ctx.source_range(), local_name);\n+            CompletionItem::new(completion_kind, ctx.source_range(), local_name.clone());\n         if let ScopeDef::LocalBinding(pat_id) = resolution {\n             let ty = ctx\n                 .analyzer\n@@ -94,6 +102,25 @@ impl Completions {\n                 .map(|t| t.display(ctx.db).to_string());\n             completion_item = completion_item.set_detail(ty);\n         };\n+\n+        // If not an import, add parenthesis automatically.\n+        if ctx.is_path_type\n+            && !ctx.has_type_args\n+            && ctx.db.feature_flags.get(\"completion.insertion.add-call-parenthesis\")\n+        {\n+            let generic_def: Option<hir::GenericDef> = match resolution {\n+                ScopeDef::ModuleDef(Adt(it)) => Some((*it).into()),\n+                ScopeDef::ModuleDef(TypeAlias(it)) => Some((*it).into()),\n+                _ => None,\n+            };\n+            if let Some(def) = generic_def {\n+                if has_non_default_type_params(def, ctx.db) {\n+                    tested_by!(inserts_angle_brackets_for_generics);\n+                    completion_item = completion_item.insert_snippet(format!(\"{}<$0>\", local_name));\n+                }\n+            }\n+        }\n+\n         completion_item.kind(kind).set_documentation(docs).add_to(self)\n     }\n \n@@ -169,32 +196,6 @@ impl Completions {\n         self.add(builder)\n     }\n \n-    fn add_adt_with_name(&mut self, ctx: &CompletionContext, name: String, adt: hir::Adt) {\n-        let mut builder =\n-            CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.clone());\n-\n-        let kind = match adt {\n-            hir::Adt::Struct(_) => CompletionItemKind::Struct,\n-            // FIXME: add CompletionItemKind::Union\n-            hir::Adt::Union(_) => CompletionItemKind::Struct,\n-            hir::Adt::Enum(_) => CompletionItemKind::Enum,\n-        };\n-        let docs = adt.docs(ctx.db);\n-\n-        // If not an import, add parenthesis automatically.\n-        if ctx.is_path_type\n-            && !ctx.has_type_args\n-            && ctx.db.feature_flags.get(\"completion.insertion.add-call-parenthesis\")\n-        {\n-            if has_non_default_type_params(adt, ctx.db) {\n-                tested_by!(inserts_angle_brackets_for_generics);\n-                builder = builder.insert_snippet(format!(\"{}<$0>\", name));\n-            }\n-        }\n-\n-        builder.kind(kind).set_documentation(docs).add_to(self)\n-    }\n-\n     pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n         let ast_node = constant.source(ctx.db).ast;\n         let name = match ast_node.name() {\n@@ -243,8 +244,8 @@ impl Completions {\n     }\n }\n \n-fn has_non_default_type_params(adt: hir::Adt, db: &db::RootDatabase) -> bool {\n-    let subst = db.generic_defaults(adt.into());\n+fn has_non_default_type_params(def: hir::GenericDef, db: &db::RootDatabase) -> bool {\n+    let subst = db.generic_defaults(def);\n     subst.iter().any(|ty| ty == &Ty::Unknown)\n }\n \n@@ -446,6 +447,33 @@ mod tests {\n         ]\n         \"###\n         );\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                type Vec<T> = (T,);\n+                fn foo(xs: Ve<|>)\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Vec\",\n+                source_range: [64; 66),\n+                delete: [64; 66),\n+                insert: \"Vec<$0>\",\n+                kind: TypeAlias,\n+            },\n+            CompletionItem {\n+                label: \"foo\",\n+                source_range: [64; 66),\n+                delete: [64; 66),\n+                insert: \"foo($0)\",\n+                kind: Function,\n+                detail: \"fn foo(xs: Ve)\",\n+            },\n+        ]\n+        \"###\n+        );\n         assert_debug_snapshot!(\n             do_reference_completion(\n                 r\""}]}