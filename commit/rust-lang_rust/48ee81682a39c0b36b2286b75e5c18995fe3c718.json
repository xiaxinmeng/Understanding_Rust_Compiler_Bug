{"sha": "48ee81682a39c0b36b2286b75e5c18995fe3c718", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZWU4MTY4MmEzOWMwYjM2YjIyODZiNzVlNWMxODk5NWZlM2M3MTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-09T18:11:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-09T18:11:22Z"}, "message": "auto merge of #16346 : vadimcn/rust/win64-cabi, r=brson\n\nThis fixes\r\nrun-pass/extern-pass-TwoU64s.rs\r\nrun-pass/extern-pass-empty.rs\r\nrun-pass/extern-return-TwoU64s.rs", "tree": {"sha": "5aca85169201247087bb2ffaf2487e55d872935d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5aca85169201247087bb2ffaf2487e55d872935d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48ee81682a39c0b36b2286b75e5c18995fe3c718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48ee81682a39c0b36b2286b75e5c18995fe3c718", "html_url": "https://github.com/rust-lang/rust/commit/48ee81682a39c0b36b2286b75e5c18995fe3c718", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48ee81682a39c0b36b2286b75e5c18995fe3c718/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beda30e7ae2201f90b65c385188a76efa4260c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/beda30e7ae2201f90b65c385188a76efa4260c8d", "html_url": "https://github.com/rust-lang/rust/commit/beda30e7ae2201f90b65c385188a76efa4260c8d"}, {"sha": "d1e03b3bb785aec974305af1b503660d5070730d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e03b3bb785aec974305af1b503660d5070730d", "html_url": "https://github.com/rust-lang/rust/commit/d1e03b3bb785aec974305af1b503660d5070730d"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "52461e3fdcb23d10fc23daf311e5dea74aa69b4f", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/48ee81682a39c0b36b2286b75e5c18995fe3c718/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ee81682a39c0b36b2286b75e5c18995fe3c718/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=48ee81682a39c0b36b2286b75e5c18995fe3c718", "patch": "@@ -13,10 +13,12 @@ use std::option;\n use middle::trans::context::CrateContext;\n use middle::trans::cabi_x86;\n use middle::trans::cabi_x86_64;\n+use middle::trans::cabi_x86_win64;\n use middle::trans::cabi_arm;\n use middle::trans::cabi_mips;\n use middle::trans::type_::Type;\n use syntax::abi::{X86, X86_64, Arm, Mips, Mipsel};\n+use syntax::abi::{OsWin32};\n \n #[deriving(Clone, PartialEq)]\n pub enum ArgKind {\n@@ -107,7 +109,12 @@ pub fn compute_abi_info(ccx: &CrateContext,\n                         ret_def: bool) -> FnType {\n     match ccx.sess().targ_cfg.arch {\n         X86 => cabi_x86::compute_abi_info(ccx, atys, rty, ret_def),\n-        X86_64 => cabi_x86_64::compute_abi_info(ccx, atys, rty, ret_def),\n+        X86_64 =>\n+            if ccx.sess().targ_cfg.os == OsWin32 {\n+                cabi_x86_win64::compute_abi_info(ccx, atys, rty, ret_def)\n+            } else {\n+                cabi_x86_64::compute_abi_info(ccx, atys, rty, ret_def)\n+            },\n         Arm => cabi_arm::compute_abi_info(ccx, atys, rty, ret_def),\n         Mips => cabi_mips::compute_abi_info(ccx, atys, rty, ret_def),\n         Mipsel => cabi_mips::compute_abi_info(ccx, atys, rty, ret_def),"}, {"sha": "e036ab6675d60a860cad92eb23c54bf126036a97", "filename": "src/librustc/middle/trans/cabi_x86_win64.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/48ee81682a39c0b36b2286b75e5c18995fe3c718/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_win64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ee81682a39c0b36b2286b75e5c18995fe3c718/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_win64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_win64.rs?ref=48ee81682a39c0b36b2286b75e5c18995fe3c718", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use llvm::*;\n+use super::cabi::*;\n+use super::common::*;\n+use super::machine::*;\n+use middle::trans::type_::Type;\n+\n+// Win64 ABI: http://msdn.microsoft.com/en-us/library/zthk2dkh.aspx\n+\n+pub fn compute_abi_info(ccx: &CrateContext,\n+                          atys: &[Type],\n+                          rty: Type,\n+                          ret_def: bool) -> FnType {\n+    let mut arg_tys = Vec::new();\n+\n+    let ret_ty;\n+    if !ret_def {\n+        ret_ty = ArgType::direct(Type::void(ccx), None, None, None);\n+    } else if rty.kind() == Struct {\n+        ret_ty = match llsize_of_alloc(ccx, rty) {\n+            1 => ArgType::direct(rty, Some(Type::i8(ccx)), None, None),\n+            2 => ArgType::direct(rty, Some(Type::i16(ccx)), None, None),\n+            4 => ArgType::direct(rty, Some(Type::i32(ccx)), None, None),\n+            8 => ArgType::direct(rty, Some(Type::i64(ccx)), None, None),\n+            _ => ArgType::indirect(rty, Some(StructRetAttribute))\n+        };\n+    } else {\n+        let attr = if rty == Type::i1(ccx) { Some(ZExtAttribute) } else { None };\n+        ret_ty = ArgType::direct(rty, None, None, attr);\n+    }\n+\n+    for &t in atys.iter() {\n+        let ty = match t.kind() {\n+            Struct => {\n+                match llsize_of_alloc(ccx, t) {\n+                    1 => ArgType::direct(rty, Some(Type::i8(ccx)), None, None),\n+                    2 => ArgType::direct(rty, Some(Type::i16(ccx)), None, None),\n+                    4 => ArgType::direct(rty, Some(Type::i32(ccx)), None, None),\n+                    8 => ArgType::direct(rty, Some(Type::i64(ccx)), None, None),\n+                    _ => ArgType::indirect(t, Some(ByValAttribute))\n+                }\n+            }\n+            _ => {\n+                let attr = if t == Type::i1(ccx) { Some(ZExtAttribute) } else { None };\n+                ArgType::direct(t, None, None, attr)\n+            }\n+        };\n+        arg_tys.push(ty);\n+    }\n+\n+    return FnType {\n+        arg_tys: arg_tys,\n+        ret_ty: ret_ty,\n+    };\n+}"}, {"sha": "f95825c96db5192479f8a84e4d34c3a4a652d8e7", "filename": "src/librustc/middle/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48ee81682a39c0b36b2286b75e5c18995fe3c718/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ee81682a39c0b36b2286b75e5c18995fe3c718/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs?ref=48ee81682a39c0b36b2286b75e5c18995fe3c718", "patch": "@@ -31,6 +31,7 @@ pub mod meth;\n pub mod cabi;\n pub mod cabi_x86;\n pub mod cabi_x86_64;\n+pub mod cabi_x86_win64;\n pub mod cabi_arm;\n pub mod cabi_mips;\n pub mod foreign;"}]}