{"sha": "e4106065bf1bb515935d5d024e8d9c86454e2b22", "node_id": "C_kwDOAAsO6NoAKGU0MTA2MDY1YmYxYmI1MTU5MzVkNWQwMjRlOGQ5Yzg2NDU0ZTJiMjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-05T01:33:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-05T01:33:58Z"}, "message": "Auto merge of #112272 - jieyouxu:issue-112269, r=compiler-errors\n\nShow note for type ascription on a local binding interpreted as a constant pattern and not a new variable\n\nGiven the code\n\n```rust\npub fn main() {\n    const y: i32 = 4;\n    let y: i32 = 3;\n}\n```\n\n`y` in the let binding is actually interpreted as a constant pattern and is not a new variable, causing confusing diagnostics about refutable patterns in local binding.\n\nThis PR extends the note for type ascription of a constant pattern to `AscribeUserType` patterns which have `Constant` subpatterns.\n\nFixes #112269.", "tree": {"sha": "2dc430f81aa163717f435f8f4ec6c82c8dffaeeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dc430f81aa163717f435f8f4ec6c82c8dffaeeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4106065bf1bb515935d5d024e8d9c86454e2b22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4106065bf1bb515935d5d024e8d9c86454e2b22", "html_url": "https://github.com/rust-lang/rust/commit/e4106065bf1bb515935d5d024e8d9c86454e2b22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4106065bf1bb515935d5d024e8d9c86454e2b22/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcf3571c513a29a60a5061ce84c3c618cf5e4cd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf3571c513a29a60a5061ce84c3c618cf5e4cd5", "html_url": "https://github.com/rust-lang/rust/commit/dcf3571c513a29a60a5061ce84c3c618cf5e4cd5"}, {"sha": "55b4549602d2f1105aedd7a1357a62db4f128167", "url": "https://api.github.com/repos/rust-lang/rust/commits/55b4549602d2f1105aedd7a1357a62db4f128167", "html_url": "https://github.com/rust-lang/rust/commit/55b4549602d2f1105aedd7a1357a62db4f128167"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "e7e88351bbd1ed483c40806b7fadc42575506702", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4106065bf1bb515935d5d024e8d9c86454e2b22/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4106065bf1bb515935d5d024e8d9c86454e2b22/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=e4106065bf1bb515935d5d024e8d9c86454e2b22", "patch": "@@ -443,7 +443,12 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n         let mut let_suggestion = None;\n         let mut misc_suggestion = None;\n         let mut interpreted_as_const = None;\n-        if let PatKind::Constant { .. } = pat.kind\n+\n+        if let PatKind::Constant { .. }\n+            | PatKind::AscribeUserType {\n+                subpattern: box Pat { kind: PatKind::Constant { .. }, .. },\n+                ..\n+              } = pat.kind\n             && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(pat.span)\n         {\n             // If the pattern to match is an integer literal:"}, {"sha": "8b9b16647e4d6e59cfc0ef8dbf5e04e17a9b963c", "filename": "tests/ui/mir/issue-112269.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4106065bf1bb515935d5d024e8d9c86454e2b22/tests%2Fui%2Fmir%2Fissue-112269.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4106065bf1bb515935d5d024e8d9c86454e2b22/tests%2Fui%2Fmir%2Fissue-112269.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fissue-112269.rs?ref=e4106065bf1bb515935d5d024e8d9c86454e2b22", "patch": "@@ -0,0 +1,9 @@\n+pub fn main() {\n+    const x: i32 = 4;\n+    let x: i32 = 3;\n+    //~^ ERROR refutable pattern in local binding\n+\n+    const y: i32 = 3;\n+    let y = 4;\n+    //~^ ERROR refutable pattern in local binding\n+}"}, {"sha": "f5b796027979cbf84150707a272c854d71decc35", "filename": "tests/ui/mir/issue-112269.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e4106065bf1bb515935d5d024e8d9c86454e2b22/tests%2Fui%2Fmir%2Fissue-112269.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4106065bf1bb515935d5d024e8d9c86454e2b22/tests%2Fui%2Fmir%2Fissue-112269.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fissue-112269.stderr?ref=e4106065bf1bb515935d5d024e8d9c86454e2b22", "patch": "@@ -0,0 +1,31 @@\n+error[E0005]: refutable pattern in local binding\n+  --> $DIR/issue-112269.rs:3:9\n+   |\n+LL |     let x: i32 = 3;\n+   |         ^\n+   |         |\n+   |         patterns `i32::MIN..=3_i32` and `5_i32..=i32::MAX` not covered\n+   |         missing patterns are not covered because `x` is interpreted as a constant pattern, not a new variable\n+   |         help: introduce a variable instead: `x_var`\n+   |\n+   = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `i32`\n+\n+error[E0005]: refutable pattern in local binding\n+  --> $DIR/issue-112269.rs:7:9\n+   |\n+LL |     let y = 4;\n+   |         ^\n+   |         |\n+   |         patterns `i32::MIN..=2_i32` and `4_i32..=i32::MAX` not covered\n+   |         missing patterns are not covered because `y` is interpreted as a constant pattern, not a new variable\n+   |         help: introduce a variable instead: `y_var`\n+   |\n+   = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `i32`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0005`."}]}