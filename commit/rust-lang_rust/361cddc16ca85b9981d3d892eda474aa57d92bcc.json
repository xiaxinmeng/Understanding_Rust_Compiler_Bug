{"sha": "361cddc16ca85b9981d3d892eda474aa57d92bcc", "node_id": "C_kwDOAAsO6NoAKDM2MWNkZGMxNmNhODViOTk4MWQzZDg5MmVkYTQ3NGFhNTdkOTJiY2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-27T17:54:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-27T17:54:26Z"}, "message": "Auto merge of #12101 - Veykril:simplify, r=Veykril\n\nSimplify", "tree": {"sha": "cecef20a42c5bbcb5b75074b8951ad6d924e5573", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cecef20a42c5bbcb5b75074b8951ad6d924e5573"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/361cddc16ca85b9981d3d892eda474aa57d92bcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/361cddc16ca85b9981d3d892eda474aa57d92bcc", "html_url": "https://github.com/rust-lang/rust/commit/361cddc16ca85b9981d3d892eda474aa57d92bcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/361cddc16ca85b9981d3d892eda474aa57d92bcc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab8159b0b2ed23ca17bbb1d037c7631d5b11def9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8159b0b2ed23ca17bbb1d037c7631d5b11def9", "html_url": "https://github.com/rust-lang/rust/commit/ab8159b0b2ed23ca17bbb1d037c7631d5b11def9"}, {"sha": "8b056fad450d8bb97997c1bd16aa016a3e1328e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b056fad450d8bb97997c1bd16aa016a3e1328e7", "html_url": "https://github.com/rust-lang/rust/commit/8b056fad450d8bb97997c1bd16aa016a3e1328e7"}], "stats": {"total": 70, "additions": 30, "deletions": 40}, "files": [{"sha": "1c39e9391af2428d71aa881aa8b59b7e78df2dbf", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/361cddc16ca85b9981d3d892eda474aa57d92bcc/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361cddc16ca85b9981d3d892eda474aa57d92bcc/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=361cddc16ca85b9981d3d892eda474aa57d92bcc", "patch": "@@ -26,22 +26,16 @@ pub(crate) struct CargoTargetSpec {\n impl CargoTargetSpec {\n     pub(crate) fn runnable_args(\n         snap: &GlobalStateSnapshot,\n-        mut spec: Option<CargoTargetSpec>,\n+        spec: Option<CargoTargetSpec>,\n         kind: &RunnableKind,\n         cfg: &Option<CfgExpr>,\n     ) -> Result<(Vec<String>, Vec<String>)> {\n         let mut args = Vec::new();\n         let mut extra_args = Vec::new();\n \n-        let target_required_features =\n-            spec.as_mut().map(|spec| mem::take(&mut spec.required_features)).unwrap_or(Vec::new());\n-\n         match kind {\n             RunnableKind::Test { test_id, attr } => {\n                 args.push(\"test\".to_string());\n-                if let Some(spec) = spec {\n-                    spec.push_to(&mut args, kind);\n-                }\n                 extra_args.push(test_id.to_string());\n                 if let TestId::Path(_) = test_id {\n                     extra_args.push(\"--exact\".to_string());\n@@ -53,17 +47,11 @@ impl CargoTargetSpec {\n             }\n             RunnableKind::TestMod { path } => {\n                 args.push(\"test\".to_string());\n-                if let Some(spec) = spec {\n-                    spec.push_to(&mut args, kind);\n-                }\n                 extra_args.push(path.to_string());\n                 extra_args.push(\"--nocapture\".to_string());\n             }\n             RunnableKind::Bench { test_id } => {\n                 args.push(\"bench\".to_string());\n-                if let Some(spec) = spec {\n-                    spec.push_to(&mut args, kind);\n-                }\n                 extra_args.push(test_id.to_string());\n                 if let TestId::Path(_) = test_id {\n                     extra_args.push(\"--exact\".to_string());\n@@ -73,9 +61,6 @@ impl CargoTargetSpec {\n             RunnableKind::DocTest { test_id } => {\n                 args.push(\"test\".to_string());\n                 args.push(\"--doc\".to_string());\n-                if let Some(spec) = spec {\n-                    spec.push_to(&mut args, kind);\n-                }\n                 extra_args.push(test_id.to_string());\n                 extra_args.push(\"--nocapture\".to_string());\n             }\n@@ -85,12 +70,17 @@ impl CargoTargetSpec {\n                     _ => \"run\",\n                 };\n                 args.push(subcommand.to_string());\n-                if let Some(spec) = spec {\n-                    spec.push_to(&mut args, kind);\n-                }\n             }\n         }\n \n+        let target_required_features = if let Some(mut spec) = spec {\n+            let required_features = mem::take(&mut spec.required_features);\n+            spec.push_to(&mut args, kind);\n+            required_features\n+        } else {\n+            Vec::new()\n+        };\n+\n         let cargo_config = snap.config.cargo();\n         if cargo_config.all_features {\n             args.push(\"--all-features\".to_string());\n@@ -122,9 +112,9 @@ impl CargoTargetSpec {\n         global_state_snapshot: &GlobalStateSnapshot,\n         file_id: FileId,\n     ) -> Result<Option<CargoTargetSpec>> {\n-        let crate_id = match global_state_snapshot.analysis.crate_for(file_id)?.first() {\n-            Some(&crate_id) => crate_id,\n-            None => return Ok(None),\n+        let crate_id = match &*global_state_snapshot.analysis.crate_for(file_id)? {\n+            &[crate_id, ..] => crate_id,\n+            _ => return Ok(None),\n         };\n         let (cargo_ws, target) = match global_state_snapshot.cargo_target_for_crate_root(crate_id) {\n             Some(it) => it,"}, {"sha": "d208ba16cb9679419f2e104db071569b2a3af751", "filename": "crates/rust-analyzer/src/dispatch.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/361cddc16ca85b9981d3d892eda474aa57d92bcc/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361cddc16ca85b9981d3d892eda474aa57d92bcc/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs?ref=361cddc16ca85b9981d3d892eda474aa57d92bcc", "patch": "@@ -39,9 +39,9 @@ impl<'a> RequestDispatcher<'a> {\n         f: fn(&mut GlobalState, R::Params) -> Result<R::Result>,\n     ) -> Result<&mut Self>\n     where\n-        R: lsp_types::request::Request + 'static,\n-        R::Params: DeserializeOwned + panic::UnwindSafe + fmt::Debug + 'static,\n-        R::Result: Serialize + 'static,\n+        R: lsp_types::request::Request,\n+        R::Params: DeserializeOwned + panic::UnwindSafe + fmt::Debug,\n+        R::Result: Serialize,\n     {\n         let (id, params, panic_context) = match self.parse::<R>() {\n             Some(it) => it,\n@@ -63,8 +63,8 @@ impl<'a> RequestDispatcher<'a> {\n     ) -> Result<&mut Self>\n     where\n         R: lsp_types::request::Request + 'static,\n-        R::Params: DeserializeOwned + panic::UnwindSafe + fmt::Debug + 'static,\n-        R::Result: Serialize + 'static,\n+        R::Params: DeserializeOwned + panic::UnwindSafe + fmt::Debug,\n+        R::Result: Serialize,\n     {\n         let (id, params, panic_context) = match self.parse::<R>() {\n             Some(it) => it,\n@@ -89,8 +89,8 @@ impl<'a> RequestDispatcher<'a> {\n     ) -> &mut Self\n     where\n         R: lsp_types::request::Request + 'static,\n-        R::Params: DeserializeOwned + panic::UnwindSafe + Send + fmt::Debug + 'static,\n-        R::Result: Serialize + 'static,\n+        R::Params: DeserializeOwned + panic::UnwindSafe + Send + fmt::Debug,\n+        R::Result: Serialize,\n     {\n         let (id, params, panic_context) = match self.parse::<R>() {\n             Some(it) => it,\n@@ -126,11 +126,11 @@ impl<'a> RequestDispatcher<'a> {\n \n     fn parse<R>(&mut self) -> Option<(lsp_server::RequestId, R::Params, String)>\n     where\n-        R: lsp_types::request::Request + 'static,\n-        R::Params: DeserializeOwned + fmt::Debug + 'static,\n+        R: lsp_types::request::Request,\n+        R::Params: DeserializeOwned + fmt::Debug,\n     {\n         let req = match &self.req {\n-            Some(req) if req.method == R::METHOD => self.req.take().unwrap(),\n+            Some(req) if req.method == R::METHOD => self.req.take()?,\n             _ => return None,\n         };\n \n@@ -159,9 +159,9 @@ fn thread_result_to_response<R>(\n     result: thread::Result<Result<R::Result>>,\n ) -> lsp_server::Response\n where\n-    R: lsp_types::request::Request + 'static,\n-    R::Params: DeserializeOwned + 'static,\n-    R::Result: Serialize + 'static,\n+    R: lsp_types::request::Request,\n+    R::Params: DeserializeOwned,\n+    R::Result: Serialize,\n {\n     match result {\n         Ok(result) => result_to_response::<R>(id, result),\n@@ -188,9 +188,9 @@ fn result_to_response<R>(\n     result: Result<R::Result>,\n ) -> lsp_server::Response\n where\n-    R: lsp_types::request::Request + 'static,\n-    R::Params: DeserializeOwned + 'static,\n-    R::Result: Serialize + 'static,\n+    R: lsp_types::request::Request,\n+    R::Params: DeserializeOwned,\n+    R::Result: Serialize,\n {\n     match result {\n         Ok(resp) => lsp_server::Response::new_ok(id, &resp),\n@@ -226,8 +226,8 @@ impl<'a> NotificationDispatcher<'a> {\n         f: fn(&mut GlobalState, N::Params) -> Result<()>,\n     ) -> Result<&mut Self>\n     where\n-        N: lsp_types::notification::Notification + 'static,\n-        N::Params: DeserializeOwned + Send + 'static,\n+        N: lsp_types::notification::Notification,\n+        N::Params: DeserializeOwned + Send,\n     {\n         let not = match self.not.take() {\n             Some(it) => it,"}]}