{"sha": "6952a3b4460953bfc854be8ade2763dcfe70b650", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NTJhM2I0NDYwOTUzYmZjODU0YmU4YWRlMjc2M2RjZmU3MGI2NTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-08T11:15:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-08T11:15:17Z"}, "message": "Merge #7912\n\n7912: Dedupe import map results r=matklad a=SomeoneToIgnore\n\nWhile debugging https://github.com/rust-analyzer/rust-analyzer/issues/7902, I've found that there are some duplicates are produced during the external dependencies lookup.\r\n\r\nI've spotted at least some of the `indexed_value.value` duplicated when typed `Arc` and requested the completions for that, so I've also deduped the `IndexedValue`'s to avoid unnecessary computations.\r\n\r\nThis helps to show `Arc` in the completion suggestions in a zero dependency project and in `hir` module, but we loose it again in the `ide` module.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "2dc0b8cc155318ca1b9f48de350ffc3beb5dd8b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dc0b8cc155318ca1b9f48de350ffc3beb5dd8b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6952a3b4460953bfc854be8ade2763dcfe70b650", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgRgdFCRBK7hj4Ov3rIwAAdHIIADby6e/rqL8VH1DLaaPo4TLX\nz/F7BzYtHJCBfspAiM4nZ0SgwJ1WZfqEbWFyYSO+Y+dNcAxQKh/EqLlMcQbYbtcF\nxaz28Mr55iSpdPMGQsDCdYY83utDQksqQm8wHJSwVV69c2Ia2qge9mM3mDtBBqsK\nsvlJ9Gv2N8Jq6Mf5BWXvlbjb6rXb+K+peyxCOYlMmec9bLJMZbP29rVP1HAuz/gd\nQfOuXsSWm8LGz61cDCo2WHiYW3AvFp3c3VetPbsLeP91eau/+8obUKKrhXTAR6/V\nwdsYnWYy8MnO8rTTiRPA5InFEiR58P5RnF2Ll0GgVBrr/7A981vRqJTMlWGlm+Q=\n=w+UR\n-----END PGP SIGNATURE-----\n", "payload": "tree 2dc0b8cc155318ca1b9f48de350ffc3beb5dd8b5\nparent 13982e4ee42293862646d022273692d65a362885\nparent 128a6a4ec060a73fbd4e1a8dc470cb629fcdbe45\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615202117 +0000\ncommitter GitHub <noreply@github.com> 1615202117 +0000\n\nMerge #7912\n\n7912: Dedupe import map results r=matklad a=SomeoneToIgnore\n\nWhile debugging https://github.com/rust-analyzer/rust-analyzer/issues/7902, I've found that there are some duplicates are produced during the external dependencies lookup.\r\n\r\nI've spotted at least some of the `indexed_value.value` duplicated when typed `Arc` and requested the completions for that, so I've also deduped the `IndexedValue`'s to avoid unnecessary computations.\r\n\r\nThis helps to show `Arc` in the completion suggestions in a zero dependency project and in `hir` module, but we loose it again in the `ide` module.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6952a3b4460953bfc854be8ade2763dcfe70b650", "html_url": "https://github.com/rust-lang/rust/commit/6952a3b4460953bfc854be8ade2763dcfe70b650", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6952a3b4460953bfc854be8ade2763dcfe70b650/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13982e4ee42293862646d022273692d65a362885", "url": "https://api.github.com/repos/rust-lang/rust/commits/13982e4ee42293862646d022273692d65a362885", "html_url": "https://github.com/rust-lang/rust/commit/13982e4ee42293862646d022273692d65a362885"}, {"sha": "128a6a4ec060a73fbd4e1a8dc470cb629fcdbe45", "url": "https://api.github.com/repos/rust-lang/rust/commits/128a6a4ec060a73fbd4e1a8dc470cb629fcdbe45", "html_url": "https://github.com/rust-lang/rust/commit/128a6a4ec060a73fbd4e1a8dc470cb629fcdbe45"}], "stats": {"total": 95, "additions": 49, "deletions": 46}, "files": [{"sha": "e1c28bc834afcb9c832af5f0f70354112fd0dd9b", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 49, "deletions": 46, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/6952a3b4460953bfc854be8ade2763dcfe70b650/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6952a3b4460953bfc854be8ade2763dcfe70b650/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=6952a3b4460953bfc854be8ade2763dcfe70b650", "patch": "@@ -388,7 +388,7 @@ pub fn search_dependencies<'a>(\n     db: &'a dyn DefDatabase,\n     krate: CrateId,\n     query: Query,\n-) -> Vec<ItemInNs> {\n+) -> FxHashSet<ItemInNs> {\n     let _p = profile::span(\"search_dependencies\").detail(|| format!(\"{:?}\", query));\n \n     let graph = db.crate_graph();\n@@ -403,41 +403,42 @@ pub fn search_dependencies<'a>(\n     }\n \n     let mut stream = op.union();\n-    let mut res = Vec::new();\n+\n+    let mut all_indexed_values = FxHashSet::default();\n     while let Some((_, indexed_values)) = stream.next() {\n-        for indexed_value in indexed_values {\n-            let import_map = &import_maps[indexed_value.index];\n-            let importables = &import_map.importables[indexed_value.value as usize..];\n+        all_indexed_values.extend(indexed_values.iter().copied());\n+    }\n \n-            let common_importable_data = &import_map.map[&importables[0]];\n-            if !query.import_matches(common_importable_data, true) {\n-                continue;\n-            }\n+    let mut res = FxHashSet::default();\n+    for indexed_value in all_indexed_values {\n+        let import_map = &import_maps[indexed_value.index];\n+        let importables = &import_map.importables[indexed_value.value as usize..];\n \n-            // Path shared by the importable items in this group.\n-            let common_importables_path_fst = fst_path(&common_importable_data.path);\n-            // Add the items from this `ModPath` group. Those are all subsequent items in\n-            // `importables` whose paths match `path`.\n-            let iter = importables\n-                .iter()\n-                .copied()\n-                .take_while(|item| {\n-                    common_importables_path_fst == fst_path(&import_map.map[item].path)\n-                })\n-                .filter(|&item| match item_import_kind(item) {\n-                    Some(import_kind) => !query.exclude_import_kinds.contains(&import_kind),\n-                    None => true,\n-                })\n-                .filter(|item| {\n-                    !query.case_sensitive // we've already checked the common importables path case-insensitively\n+        let common_importable_data = &import_map.map[&importables[0]];\n+        if !query.import_matches(common_importable_data, true) {\n+            continue;\n+        }\n+\n+        // Path shared by the importable items in this group.\n+        let common_importables_path_fst = fst_path(&common_importable_data.path);\n+        // Add the items from this `ModPath` group. Those are all subsequent items in\n+        // `importables` whose paths match `path`.\n+        let iter = importables\n+            .iter()\n+            .copied()\n+            .take_while(|item| common_importables_path_fst == fst_path(&import_map.map[item].path))\n+            .filter(|&item| match item_import_kind(item) {\n+                Some(import_kind) => !query.exclude_import_kinds.contains(&import_kind),\n+                None => true,\n+            })\n+            .filter(|item| {\n+                !query.case_sensitive // we've already checked the common importables path case-insensitively\n                         || query.import_matches(&import_map.map[item], false)\n-                });\n-            res.extend(iter);\n+            });\n+        res.extend(iter);\n \n-            if res.len() >= query.limit {\n-                res.truncate(query.limit);\n-                return res;\n-            }\n+        if res.len() >= query.limit {\n+            return res;\n         }\n     }\n \n@@ -821,10 +822,10 @@ mod tests {\n             Query::new(\"fmt\".to_string()).search_mode(SearchMode::Fuzzy),\n             expect![[r#\"\n                 dep::fmt (t)\n+                dep::fmt::Display::format_method (a)\n                 dep::fmt::Display (t)\n                 dep::fmt::Display::FMT_CONST (a)\n                 dep::fmt::Display::format_function (a)\n-                dep::fmt::Display::format_method (a)\n             \"#]],\n         );\n     }\n@@ -850,9 +851,9 @@ mod tests {\n             \"main\",\n             Query::new(\"fmt\".to_string()).search_mode(SearchMode::Fuzzy).assoc_items_only(),\n             expect![[r#\"\n+            dep::fmt::Display::format_method (a)\n             dep::fmt::Display::FMT_CONST (a)\n             dep::fmt::Display::format_function (a)\n-            dep::fmt::Display::format_method (a)\n         \"#]],\n         );\n \n@@ -911,12 +912,12 @@ mod tests {\n             Query::new(\"fmt\".to_string()).search_mode(SearchMode::Fuzzy),\n             expect![[r#\"\n                 dep::fmt (t)\n-                dep::Fmt (t)\n+                dep::format (f)\n                 dep::Fmt (v)\n-                dep::Fmt (m)\n                 dep::fmt::Display (t)\n+                dep::Fmt (t)\n                 dep::fmt::Display::fmt (a)\n-                dep::format (f)\n+                dep::Fmt (m)\n             \"#]],\n         );\n \n@@ -926,10 +927,10 @@ mod tests {\n             Query::new(\"fmt\".to_string()).search_mode(SearchMode::Equals),\n             expect![[r#\"\n                 dep::fmt (t)\n-                dep::Fmt (t)\n                 dep::Fmt (v)\n-                dep::Fmt (m)\n+                dep::Fmt (t)\n                 dep::fmt::Display::fmt (a)\n+                dep::Fmt (m)\n             \"#]],\n         );\n \n@@ -939,11 +940,11 @@ mod tests {\n             Query::new(\"fmt\".to_string()).search_mode(SearchMode::Contains),\n             expect![[r#\"\n                 dep::fmt (t)\n-                dep::Fmt (t)\n                 dep::Fmt (v)\n-                dep::Fmt (m)\n                 dep::fmt::Display (t)\n+                dep::Fmt (t)\n                 dep::fmt::Display::fmt (a)\n+                dep::Fmt (m)\n             \"#]],\n         );\n     }\n@@ -980,11 +981,11 @@ mod tests {\n             Query::new(\"fmt\".to_string()),\n             expect![[r#\"\n                 dep::fmt (t)\n-                dep::Fmt (t)\n                 dep::Fmt (v)\n-                dep::Fmt (m)\n                 dep::fmt::Display (t)\n+                dep::Fmt (t)\n                 dep::fmt::Display::fmt (a)\n+                dep::Fmt (m)\n             \"#]],\n         );\n \n@@ -994,10 +995,10 @@ mod tests {\n             Query::new(\"fmt\".to_string()).name_only(),\n             expect![[r#\"\n                 dep::fmt (t)\n-                dep::Fmt (t)\n                 dep::Fmt (v)\n-                dep::Fmt (m)\n+                dep::Fmt (t)\n                 dep::fmt::Display::fmt (a)\n+                dep::Fmt (m)\n             \"#]],\n         );\n     }\n@@ -1018,9 +1019,9 @@ mod tests {\n             Query::new(\"FMT\".to_string()),\n             expect![[r#\"\n                 dep::fmt (t)\n+                dep::FMT (v)\n                 dep::fmt (v)\n                 dep::FMT (t)\n-                dep::FMT (v)\n             \"#]],\n         );\n \n@@ -1060,6 +1061,8 @@ mod tests {\n             expect![[r#\"\n                 dep::fmt (t)\n                 dep::Fmt (t)\n+                dep::Fmt (m)\n+                dep::Fmt (v)\n             \"#]],\n         );\n     }\n@@ -1080,9 +1083,9 @@ mod tests {\n             Query::new(\"FMT\".to_string()),\n             expect![[r#\"\n                 dep::fmt (t)\n+                dep::FMT (v)\n                 dep::fmt (v)\n                 dep::FMT (t)\n-                dep::FMT (v)\n             \"#]],\n         );\n "}]}