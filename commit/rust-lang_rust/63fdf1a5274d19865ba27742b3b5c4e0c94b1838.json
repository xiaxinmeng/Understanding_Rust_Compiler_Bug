{"sha": "63fdf1a5274d19865ba27742b3b5c4e0c94b1838", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZmRmMWE1Mjc0ZDE5ODY1YmEyNzc0MmIzYjVjNGUwYzk0YjE4Mzg=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-09T13:30:08Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-10T11:13:22Z"}, "message": "Remove needless indent arguments\n\nWe're always indenting by INDENT_UNIT anyway", "tree": {"sha": "3410f55d7daaf4ebf2c90112bbc161c4df17dd2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3410f55d7daaf4ebf2c90112bbc161c4df17dd2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63fdf1a5274d19865ba27742b3b5c4e0c94b1838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63fdf1a5274d19865ba27742b3b5c4e0c94b1838", "html_url": "https://github.com/rust-lang/rust/commit/63fdf1a5274d19865ba27742b3b5c4e0c94b1838", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63fdf1a5274d19865ba27742b3b5c4e0c94b1838/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daf1b29f298ec7e5c345764554e6d03ac65134de", "url": "https://api.github.com/repos/rust-lang/rust/commits/daf1b29f298ec7e5c345764554e6d03ac65134de", "html_url": "https://github.com/rust-lang/rust/commit/daf1b29f298ec7e5c345764554e6d03ac65134de"}], "stats": {"total": 44, "additions": 16, "deletions": 28}, "files": [{"sha": "f10efbacf2a9fea2430a2fab4e34218a7a30477f", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/63fdf1a5274d19865ba27742b3b5c4e0c94b1838/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fdf1a5274d19865ba27742b3b5c4e0c94b1838/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=63fdf1a5274d19865ba27742b3b5c4e0c94b1838", "patch": "@@ -183,19 +183,18 @@ impl<'a> State<'a> {\n \n     pub fn bclose_maybe_open(&mut self,\n                              span: syntax_pos::Span,\n-                             indented: usize,\n                              close_box: bool)\n                              {\n         self.maybe_print_comment(span.hi());\n-        self.break_offset_if_not_bol(1, -(indented as isize));\n+        self.break_offset_if_not_bol(1, -(INDENT_UNIT as isize));\n         self.s.word(\"}\");\n         if close_box {\n             self.end(); // close the outer-box\n         }\n     }\n \n     pub fn bclose(&mut self, span: syntax_pos::Span) {\n-        self.bclose_maybe_open(span, INDENT_UNIT, true)\n+        self.bclose_maybe_open(span, true)\n     }\n \n     pub fn space_if_not_bol(&mut self) {\n@@ -963,26 +962,18 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_block_unclosed(&mut self, blk: &hir::Block) {\n-        self.print_block_unclosed_indent(blk, INDENT_UNIT)\n-    }\n-\n-    pub fn print_block_unclosed_indent(&mut self,\n-                                       blk: &hir::Block,\n-                                       indented: usize)\n-                                       {\n-        self.print_block_maybe_unclosed(blk, indented, &[], false)\n+        self.print_block_maybe_unclosed(blk, &[], false)\n     }\n \n     pub fn print_block_with_attrs(&mut self,\n                                   blk: &hir::Block,\n                                   attrs: &[ast::Attribute])\n                                   {\n-        self.print_block_maybe_unclosed(blk, INDENT_UNIT, attrs, true)\n+        self.print_block_maybe_unclosed(blk, attrs, true)\n     }\n \n     pub fn print_block_maybe_unclosed(&mut self,\n                                       blk: &hir::Block,\n-                                      indented: usize,\n                                       attrs: &[ast::Attribute],\n                                       close_box: bool)\n                                       {\n@@ -1006,7 +997,7 @@ impl<'a> State<'a> {\n             self.print_expr(&expr);\n             self.maybe_print_trailing_comment(expr.span, Some(blk.span.hi()));\n         }\n-        self.bclose_maybe_open(blk.span, indented, close_box);\n+        self.bclose_maybe_open(blk.span, close_box);\n         self.ann.post(self, AnnNode::Block(blk))\n     }\n \n@@ -1263,7 +1254,7 @@ impl<'a> State<'a> {\n                 self.print_ident(temp);\n \n                 // Print `}`:\n-                self.bclose_maybe_open(expr.span, INDENT_UNIT, true);\n+                self.bclose_maybe_open(expr.span, true);\n             }\n             hir::ExprKind::Loop(ref blk, opt_label, _) => {\n                 if let Some(label) = opt_label {\n@@ -1819,7 +1810,7 @@ impl<'a> State<'a> {\n                     self.word_space(\":\");\n                 }\n                 // the block will close the pattern's ibox\n-                self.print_block_unclosed_indent(&blk, INDENT_UNIT);\n+                self.print_block_unclosed(&blk);\n \n                 // If it is a user-provided unsafe block, print a comma after it\n                 if let hir::UnsafeBlock(hir::UserProvided) = blk.rules {"}, {"sha": "83dbff6b2d5746dda8bb5757a0032904a352fd8d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63fdf1a5274d19865ba27742b3b5c4e0c94b1838/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fdf1a5274d19865ba27742b3b5c4e0c94b1838/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=63fdf1a5274d19865ba27742b3b5c4e0c94b1838", "patch": "@@ -4591,7 +4591,7 @@ impl<'a> Parser<'a> {\n                         s.ibox(INDENT_UNIT);\n                         s.bopen();\n                         s.print_stmt(&stmt);\n-                        s.bclose_maybe_open(stmt.span, INDENT_UNIT, false)\n+                        s.bclose_maybe_open(stmt.span, false)\n                     });\n                     e.span_suggestion(\n                         stmt_span,"}, {"sha": "eddd8700de6b37eebf4d52ae16f15230ed940408", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/63fdf1a5274d19865ba27742b3b5c4e0c94b1838/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fdf1a5274d19865ba27742b3b5c4e0c94b1838/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=63fdf1a5274d19865ba27742b3b5c4e0c94b1838", "patch": "@@ -743,17 +743,16 @@ impl<'a> State<'a> {\n         self.end(); // close the head-box\n     }\n \n-    crate fn bclose_maybe_open(&mut self, span: syntax_pos::Span,\n-                             indented: usize, close_box: bool) {\n+    crate fn bclose_maybe_open(&mut self, span: syntax_pos::Span, close_box: bool) {\n         self.maybe_print_comment(span.hi());\n-        self.break_offset_if_not_bol(1, -(indented as isize));\n+        self.break_offset_if_not_bol(1, -(INDENT_UNIT as isize));\n         self.s.word(\"}\");\n         if close_box {\n             self.end(); // close the outer-box\n         }\n     }\n     crate fn bclose(&mut self, span: syntax_pos::Span) {\n-        self.bclose_maybe_open(span, INDENT_UNIT, true)\n+        self.bclose_maybe_open(span, true)\n     }\n \n     crate fn break_offset_if_not_bol(&mut self, n: usize,\n@@ -1559,20 +1558,18 @@ impl<'a> State<'a> {\n         self.print_block_with_attrs(blk, &[])\n     }\n \n-    crate fn print_block_unclosed_indent(&mut self, blk: &ast::Block,\n-                                       indented: usize) {\n-        self.print_block_maybe_unclosed(blk, indented, &[], false)\n+    crate fn print_block_unclosed_indent(&mut self, blk: &ast::Block) {\n+        self.print_block_maybe_unclosed(blk, &[], false)\n     }\n \n     crate fn print_block_with_attrs(&mut self,\n                                   blk: &ast::Block,\n                                   attrs: &[ast::Attribute]) {\n-        self.print_block_maybe_unclosed(blk, INDENT_UNIT, attrs, true)\n+        self.print_block_maybe_unclosed(blk, attrs, true)\n     }\n \n     crate fn print_block_maybe_unclosed(&mut self,\n                                       blk: &ast::Block,\n-                                      indented: usize,\n                                       attrs: &[ast::Attribute],\n                                       close_box: bool) {\n         match blk.rules {\n@@ -1597,7 +1594,7 @@ impl<'a> State<'a> {\n             }\n         }\n \n-        self.bclose_maybe_open(blk.span, indented, close_box);\n+        self.bclose_maybe_open(blk.span, close_box);\n         self.ann.post(self, AnnNode::Block(blk))\n     }\n \n@@ -2519,7 +2516,7 @@ impl<'a> State<'a> {\n                 }\n \n                 // the block will close the pattern's ibox\n-                self.print_block_unclosed_indent(blk, INDENT_UNIT);\n+                self.print_block_unclosed_indent(blk);\n \n                 // If it is a user-provided unsafe block, print a comma after it\n                 if let BlockCheckMode::Unsafe(ast::UserProvided) = blk.rules {"}]}