{"sha": "0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNzBjZTE0MjRmMzgwMzYwZGNjOGQ4NTdjNjhkMmRmMWEyN2I2ZmQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-08T10:54:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-08T16:02:24Z"}, "message": "Update compile fail tests to use isize.", "tree": {"sha": "74d2e8e7267b4edcc4d5defe5a9b1a34d4e1d215", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74d2e8e7267b4edcc4d5defe5a9b1a34d4e1d215"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "html_url": "https://github.com/rust-lang/rust/commit/0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f5a57e80ef6c029278f1e8ef59e13dcea9b255b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f5a57e80ef6c029278f1e8ef59e13dcea9b255b", "html_url": "https://github.com/rust-lang/rust/commit/4f5a57e80ef6c029278f1e8ef59e13dcea9b255b"}], "stats": {"total": 2648, "additions": 1324, "deletions": 1324}, "files": [{"sha": "bad192fc2cfea95bbb149a26748cde2747ef57ed", "filename": "src/test/compile-fail/access-mode-in-closures.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n \n-struct sty(Vec<int> );\n+struct sty(Vec<isize> );\n \n-fn unpack<F>(_unpack: F) where F: FnOnce(&sty) -> Vec<int> {}\n+fn unpack<F>(_unpack: F) where F: FnOnce(&sty) -> Vec<isize> {}\n \n fn main() {\n     let _foo = unpack(|s| {"}, {"sha": "673314ec4c9978bf98327b22ff2b8c5ea7e6b73b", "filename": "src/test/compile-fail/arg-count-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Farg-count-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Farg-count-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farg-count-mismatch.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern: parameters were supplied\n \n-fn f(x: int) { }\n+fn f(x: isize) { }\n \n fn main() { let i: (); i = f(); }"}, {"sha": "1f657ca58326eb4bafbd3db64a52d82807add1b9", "filename": "src/test/compile-fail/arg-type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Farg-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Farg-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farg-type-mismatch.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,6 +11,6 @@\n \n // error-pattern: mismatched types\n \n-fn f(x: int) { }\n+fn f(x: isize) { }\n \n fn main() { let i: (); i = f(()); }"}, {"sha": "2dbc9e3da2181deaafac74b071fdd763d9a305be", "filename": "src/test/compile-fail/array-old-syntax-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,5 +11,5 @@\n // Test that the old fixed length array syntax is a parsing error.\n \n fn main() {\n-    let _x: [int, ..3] = [0i, 1, 2]; //~ ERROR\n+    let _x: [isize, ..3] = [0i, 1, 2]; //~ ERROR\n }"}, {"sha": "deff677ad0383406aab77ce1c0b569e18105382c", "filename": "src/test/compile-fail/asm-in-bad-modifier.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,15 +10,15 @@\n \n #![feature(asm)]\n \n-fn foo(x: int) { println!(\"{}\", x); }\n+fn foo(x: isize) { println!(\"{}\", x); }\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\",\n           target_arch = \"arm\",\n           target_arch = \"aarch64\"))]\n pub fn main() {\n-    let x: int;\n-    let y: int;\n+    let x: isize;\n+    let y: isize;\n     unsafe {\n         asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5u)); //~ ERROR input operand constraint contains '='\n         asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5u)); //~ ERROR input operand constraint contains '+'"}, {"sha": "42f3c1692c1984941ed7c93aa5a9a81665ea2b11", "filename": "src/test/compile-fail/asm-misplaced-option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -18,7 +18,7 @@\n           target_arch = \"x86_64\"))]\n pub fn main() {\n     // assignment not dead\n-    let mut x: int = 0;\n+    let mut x: isize = 0;\n     unsafe {\n         // extra colon\n         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5u), \"0\"(x) : : \"cc\");"}, {"sha": "031b1de91f26e6f5da5ac471b57481390cce2385", "filename": "src/test/compile-fail/asm-out-assign-imm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,14 +10,14 @@\n \n #![feature(asm)]\n \n-fn foo(x: int) { println!(\"{}\", x); }\n+fn foo(x: isize) { println!(\"{}\", x); }\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\",\n           target_arch = \"arm\",\n           target_arch = \"aarch64\"))]\n pub fn main() {\n-    let x: int;\n+    let x: isize;\n     x = 1; //~ NOTE prior assignment occurs here\n     foo(x);\n     unsafe {"}, {"sha": "76f60a34f3c01e8aa3caf4169af240ba4a862985", "filename": "src/test/compile-fail/asm-out-no-modifier.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,14 +10,14 @@\n \n #![feature(asm)]\n \n-fn foo(x: int) { println!(\"{}\", x); }\n+fn foo(x: isize) { println!(\"{}\", x); }\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\",\n           target_arch = \"arm\",\n           target_arch = \"aarch64\"))]\n pub fn main() {\n-    let x: int;\n+    let x: isize;\n     unsafe {\n         asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5u)); //~ ERROR output operand constraint lacks '='\n     }"}, {"sha": "5e71a2c731dd275e2db7fde4ff78c407d206eeb0", "filename": "src/test/compile-fail/asm-out-read-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,14 +10,14 @@\n \n #![feature(asm)]\n \n-fn foo(x: int) { println!(\"{}\", x); }\n+fn foo(x: isize) { println!(\"{}\", x); }\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\",\n           target_arch = \"arm\",\n           target_arch = \"aarch64\"))]\n pub fn main() {\n-    let x: int;\n+    let x: isize;\n     unsafe {\n         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x)); //~ ERROR use of possibly uninitialized variable: `x`\n     }"}, {"sha": "540272a8e2c58b511542504a666fdf20fb4be2c1", "filename": "src/test/compile-fail/assign-imm-local-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn test() {\n-    let v: int;\n+    let v: isize;\n     v = 1; //~ NOTE prior assignment occurs here\n     println!(\"v={}\", v);\n     v = 2; //~ ERROR re-assignment of immutable variable"}, {"sha": "f810851949232224cc12b182e5f4744997690186", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,14 +11,14 @@\n struct cat {\n   meows : uint,\n \n-  how_hungry : int,\n+  how_hungry : isize,\n }\n \n impl cat {\n     pub fn speak(&self) { self.meows += 1u; }\n }\n \n-fn cat(in_x : uint, in_y : int) -> cat {\n+fn cat(in_x : uint, in_y : isize) -> cat {\n     cat {\n         meows: in_x,\n         how_hungry: in_y"}, {"sha": "ba8e4a652d337397609eb7c254de9b938e6f96a8", "filename": "src/test/compile-fail/assoc-inherent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassoc-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassoc-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassoc-inherent.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,7 +13,7 @@\n struct Foo;\n \n impl Foo {\n-    type Bar = int; //~ERROR associated items are not allowed in inherent impls\n+    type Bar = isize; //~ERROR associated items are not allowed in inherent impls\n }\n \n fn main() {}"}, {"sha": "adccd73beae2dc97651f38cdc1f844e6611cd74e", "filename": "src/test/compile-fail/associated-types-bound-failure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,7 +11,7 @@\n // Test equality constraints on associated types in a where clause.\n \n pub trait ToInt {\n-    fn to_int(&self) -> int;\n+    fn to_int(&self) -> isize;\n }\n \n pub trait GetToInt\n@@ -21,13 +21,13 @@ pub trait GetToInt\n     fn get(&self) -> <Self as GetToInt>::R;\n }\n \n-fn foo<G>(g: G) -> int\n+fn foo<G>(g: G) -> isize\n     where G : GetToInt\n {\n     ToInt::to_int(&g.get()) //~ ERROR not implemented\n }\n \n-fn bar<G : GetToInt>(g: G) -> int\n+fn bar<G : GetToInt>(g: G) -> isize\n     where G::R : ToInt\n {\n     ToInt::to_int(&g.get()) // OK"}, {"sha": "34c7a6eaa6c47e998d79d3b1d39c58bc0cc04b0e", "filename": "src/test/compile-fail/associated-types-eq-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -18,7 +18,7 @@ pub trait Foo {\n \n struct Bar;\n \n-impl Foo for int {\n+impl Foo for isize {\n     type A = uint;\n     fn boo(&self) -> uint { 42 }\n }"}, {"sha": "f04698100fc885c479a18de59381f5e8190d6296", "filename": "src/test/compile-fail/associated-types-eq-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -18,7 +18,7 @@ pub trait Foo {\n \n struct Bar;\n \n-impl Foo for int {\n+impl Foo for isize {\n     type A = uint;\n     fn boo(&self) -> uint {\n         42"}, {"sha": "90c4c97b5bdfdcb4931d3600d494a4b3ba55f24e", "filename": "src/test/compile-fail/associated-types-eq-expr-path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,15 +12,15 @@\n \n trait Foo {\n     type A;\n-    fn bar() -> int;\n+    fn bar() -> isize;\n }\n \n-impl Foo for int {\n+impl Foo for isize {\n     type A = uint;\n-    fn bar() -> int { 42 }\n+    fn bar() -> isize { 42 }\n }\n \n pub fn main() {\n-    let x: int = Foo::<A=uint>::bar();\n+    let x: isize = Foo::<A=uint>::bar();\n     //~^ERROR unexpected binding of associated item in expression path\n }"}, {"sha": "c180e2f61122fc61863133f012e25e8aa99f4bc8", "filename": "src/test/compile-fail/associated-types-eq-hr.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -17,43 +17,43 @@ pub trait TheTrait<T> {\n }\n \n struct IntStruct {\n-    x: int\n+    x: isize\n }\n \n-impl<'a> TheTrait<&'a int> for IntStruct {\n-    type A = &'a int;\n+impl<'a> TheTrait<&'a isize> for IntStruct {\n+    type A = &'a isize;\n \n-    fn get(&self, t: &'a int) -> &'a int {\n+    fn get(&self, t: &'a isize) -> &'a isize {\n         t\n     }\n }\n \n struct UintStruct {\n-    x: int\n+    x: isize\n }\n \n-impl<'a> TheTrait<&'a int> for UintStruct {\n+impl<'a> TheTrait<&'a isize> for UintStruct {\n     type A = &'a uint;\n \n-    fn get(&self, t: &'a int) -> &'a uint {\n+    fn get(&self, t: &'a isize) -> &'a uint {\n         panic!()\n     }\n }\n \n fn foo<T>()\n-    where T : for<'x> TheTrait<&'x int, A = &'x int>\n+    where T : for<'x> TheTrait<&'x isize, A = &'x isize>\n {\n     // ok for IntStruct, but not UintStruct\n }\n \n fn bar<T>()\n-    where T : for<'x> TheTrait<&'x int, A = &'x uint>\n+    where T : for<'x> TheTrait<&'x isize, A = &'x uint>\n {\n     // ok for UintStruct, but not IntStruct\n }\n \n fn baz<T>()\n-    where T : for<'x,'y> TheTrait<&'x int, A = &'y int>\n+    where T : for<'x,'y> TheTrait<&'x isize, A = &'y isize>\n {\n     // not ok for either struct, due to the use of two lifetimes\n }"}, {"sha": "898403f1d614491b915d58293b69207d4c76f5e4", "filename": "src/test/compile-fail/associated-types-incomplete-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -19,7 +19,7 @@ pub trait Foo {\n \n struct Bar;\n \n-impl Foo for int {\n+impl Foo for isize {\n     type A = uint;\n     type B = char;\n     fn boo(&self) -> uint {"}, {"sha": "b6c4d59c8488299d859beb46d72f50da458e35f4", "filename": "src/test/compile-fail/associated-types-invalid-trait-ref-issue-18865.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,7 +16,7 @@ trait Foo<T> {\n     fn get_bar(&self) -> Self::Bar;\n }\n \n-fn f<T:Foo<int>>(t: &T) {\n+fn f<T:Foo<isize>>(t: &T) {\n     let u: <T as Foo<usize>>::Bar = t.get_bar();\n     //~^ ERROR the trait `Foo<usize>` is not implemented for the type `T`\n }"}, {"sha": "fa09ae793bf632c75198a0fad1b8d7056838040c", "filename": "src/test/compile-fail/associated-types-issue-17359.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-17359.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-17359.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-17359.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -15,7 +15,7 @@ trait Trait {\n     type Type;\n }\n \n-impl Trait for int {}  //~ ERROR missing: `Type`\n+impl Trait for isize {}  //~ ERROR missing: `Type`\n \n fn main() {}\n "}, {"sha": "fd60896c29885b262a657fec9efa2de3a2716162", "filename": "src/test/compile-fail/associated-types-no-suitable-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -14,7 +14,7 @@ trait Get {\n }\n \n struct Struct {\n-    x: int,\n+    x: isize,\n }\n \n impl Struct {"}, {"sha": "4a9e07776978870f85bc77849692a5747fc39db0", "filename": "src/test/compile-fail/associated-types-path-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -14,7 +14,7 @@ pub trait Foo {\n     type A;\n }\n \n-impl Foo for int {\n+impl Foo for isize {\n     type A = uint;\n }\n \n@@ -45,7 +45,7 @@ pub fn f1_uint_int() {\n }\n \n pub fn f2_int() {\n-    let _: int = f2(2is);\n+    let _: isize = f2(2is);\n     //~^ ERROR expected `isize`, found `usize`\n }\n "}, {"sha": "917c03fbf4b1c427097d4de2ac42960912bc4475", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-explicit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-explicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-explicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-explicit.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -17,7 +17,7 @@ pub trait Foo<T> {\n     fn get(&self, t: T) -> Self::A;\n }\n \n-fn foo2<I>(x: <I as for<'x> Foo<&'x int>>::A)\n+fn foo2<I>(x: <I as for<'x> Foo<&'x isize>>::A)\n     //~^ ERROR expected identifier, found keyword `for`\n     //~| ERROR expected one of `::` or `>`\n {"}, {"sha": "285a77d6b657ae8bd35d012f2b320cab4441b2c2", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-fn-body.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -17,15 +17,15 @@ pub trait Foo<T> {\n     fn get(&self, t: T) -> Self::A;\n }\n \n-fn foo<'a, I : for<'x> Foo<&'x int>>(\n-    x: <I as Foo<&'a int>>::A)\n+fn foo<'a, I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&'a isize>>::A)\n {\n     let y: I::A = x;\n }\n \n-fn bar<'a, 'b, I : for<'x> Foo<&'x int>>(\n-    x: <I as Foo<&'a int>>::A,\n-    y: <I as Foo<&'b int>>::A,\n+fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&'a isize>>::A,\n+    y: <I as Foo<&'b isize>>::A,\n     cond: bool)\n {\n     // x and y here have two distinct lifetimes:"}, {"sha": "a79d5c4649a49e2e82fa7b71850b3ccc1f144db4", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-fn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -17,7 +17,7 @@ pub trait Foo<T> {\n     fn get(&self, t: T) -> Self::A;\n }\n \n-fn foo2<I : for<'x> Foo<&'x int>>(\n+fn foo2<I : for<'x> Foo<&'x isize>>(\n     x: I::A)\n     //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n {\n@@ -28,15 +28,15 @@ fn foo2<I : for<'x> Foo<&'x int>>(\n     // specifically for fn signatures.\n }\n \n-fn foo3<I : for<'x> Foo<&'x int>>(\n-    x: <I as Foo<&int>>::A)\n+fn foo3<I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&isize>>::A)\n {\n     // OK, in this case we spelled out the precise regions involved, though we left one of\n     // them anonymous.\n }\n \n-fn foo4<'a, I : for<'x> Foo<&'x int>>(\n-    x: <I as Foo<&'a int>>::A)\n+fn foo4<'a, I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&'a isize>>::A)\n {\n     // OK, in this case we spelled out the precise regions involved.\n }"}, {"sha": "44ad0bb01138fe2d085d315f974abd11ec940281", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-struct.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-struct.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -17,18 +17,18 @@ pub trait Foo<T> {\n     fn get(&self, t: T) -> Self::A;\n }\n \n-struct SomeStruct<I : for<'x> Foo<&'x int>> {\n+struct SomeStruct<I : for<'x> Foo<&'x isize>> {\n     field: I::A\n     //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n }\n \n-struct AnotherStruct<I : for<'x> Foo<&'x int>> {\n-    field: <I as Foo<&int>>::A\n+struct AnotherStruct<I : for<'x> Foo<&'x isize>> {\n+    field: <I as Foo<&isize>>::A\n     //~^ ERROR missing lifetime specifier\n }\n \n-struct YetAnotherStruct<'a, I : for<'x> Foo<&'x int>> {\n-    field: <I as Foo<&'a int>>::A\n+struct YetAnotherStruct<'a, I : for<'x> Foo<&'x isize>> {\n+    field: <I as Foo<&'a isize>>::A\n }\n \n pub fn main() {}"}, {"sha": "af46a1b42d07855ff2f122ea4edbd8e2eafb7df4", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-trait-method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-trait-method.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -17,17 +17,17 @@ pub trait Foo<T> {\n     fn get(&self, t: T) -> Self::A;\n }\n \n-trait SomeTrait<I : for<'x> Foo<&'x int>> {\n+trait SomeTrait<I : for<'x> Foo<&'x isize>> {\n     fn some_method(&self, arg: I::A);\n     //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n }\n \n-trait AnotherTrait<I : for<'x> Foo<&'x int>> {\n-    fn some_method(&self, arg: <I as Foo<&int>>::A);\n+trait AnotherTrait<I : for<'x> Foo<&'x isize>> {\n+    fn some_method(&self, arg: <I as Foo<&isize>>::A);\n }\n \n-trait YetAnotherTrait<I : for<'x> Foo<&'x int>> {\n-    fn some_method<'a>(&self, arg: <I as Foo<&'a int>>::A);\n+trait YetAnotherTrait<I : for<'x> Foo<&'x isize>> {\n+    fn some_method<'a>(&self, arg: <I as Foo<&'a isize>>::A);\n }\n \n pub fn main() {}"}, {"sha": "8b80ab92e0797f818ff08aed3fb58e8d1e981f37", "filename": "src/test/compile-fail/associated-types-unconstrained.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,15 +12,15 @@\n \n trait Foo {\n     type A;\n-    fn bar() -> int;\n+    fn bar() -> isize;\n }\n \n-impl Foo for int {\n+impl Foo for isize {\n     type A = uint;\n-    fn bar() -> int { 42 }\n+    fn bar() -> isize { 42 }\n }\n \n pub fn main() {\n-    let x: int = Foo::bar();\n+    let x: isize = Foo::bar();\n     //~^ ERROR type annotations required\n }"}, {"sha": "ad3f467a454713e2fb8c6a0cfe58d8d93f6335ea", "filename": "src/test/compile-fail/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -27,7 +27,7 @@ trait MyIter {\n     fn test(&self);\n }\n \n-impl<'a> MyIter for &'a [int] {\n+impl<'a> MyIter for &'a [isize] {\n     fn test_mut(&mut self) { }\n     fn test(&self) { }\n }"}, {"sha": "2c5749e0d5d39ae81127625caa1a3a79b4e7cddf", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -28,7 +28,7 @@ fn main() {\n     assert_eq!(z, 21);\n     let forty: fish = fish{a: box 40};\n     let two: fish = fish{a: box 2};\n-    let answer: int = forty.a + two.a;\n+    let answer: isize = forty.a + two.a;\n     //~^ ERROR binary operation `+` cannot be applied to type `Box<isize>`\n     println!(\"{}\", answer);\n     assert_eq!(answer, 42);"}, {"sha": "938664887327be367b34840c8a240f1b2903a115", "filename": "src/test/compile-fail/bad-env-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern: can't capture dynamic environment in a fn item;\n fn foo() {\n-    let x: int;\n+    let x: isize;\n     fn bar() { log(debug, x); }\n }\n fn main() { foo(); }"}, {"sha": "39a6922cfd0b653ec2ba3520ff6a8362525f4ae4", "filename": "src/test/compile-fail/bad-env-capture2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern: can't capture dynamic environment in a fn item;\n-fn foo(x: int) {\n+fn foo(x: isize) {\n     fn bar() { log(debug, x); }\n }\n fn main() { foo(2); }"}, {"sha": "8857b94ddce0c7bf0c678788600e9335b646dbad", "filename": "src/test/compile-fail/bad-env-capture3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern: can't capture dynamic environment in a fn item;\n-fn foo(x: int) {\n+fn foo(x: isize) {\n     fn mth() {\n         fn bar() { log(debug, x); }\n     }"}, {"sha": "321dca8989134f92391abda79aa2b74fc11c4f14", "filename": "src/test/compile-fail/bad-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbad-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbad-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-main.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main(x: int) { } //~ ERROR: main function expects type\n+fn main(x: isize) { } //~ ERROR: main function expects type"}, {"sha": "33043ff5524a45753ad6826c9661f4025ec4ef5d", "filename": "src/test/compile-fail/bad-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbad-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbad-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-match.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,7 +11,7 @@\n // error-pattern: expected\n \n fn main() {\n-  let int x = 5;\n+  let isize x = 5;\n   match x;\n }\n "}, {"sha": "79fe4e7165ec378d133e49be0faa3846781e4b9a", "filename": "src/test/compile-fail/bad-mid-path-type-params.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -33,28 +33,28 @@ trait Trait<T> {\n }\n \n struct S2 {\n-    contents: int,\n+    contents: isize,\n }\n \n-impl Trait<int> for S2 {\n-    fn new<U>(x: int, _: U) -> S2 {\n+impl Trait<isize> for S2 {\n+    fn new<U>(x: isize, _: U) -> S2 {\n         S2 {\n             contents: x,\n         }\n     }\n }\n \n fn foo<'a>() {\n-    let _ = S::new::<int,f64>(1, 1.0);\n+    let _ = S::new::<isize,f64>(1, 1.0);\n     //~^ ERROR too many type parameters provided\n \n-    let _ = S::<'a,int>::new::<f64>(1, 1.0);\n+    let _ = S::<'a,isize>::new::<f64>(1, 1.0);\n     //~^ ERROR too many lifetime parameters provided\n \n-    let _: S2 = Trait::new::<int,f64>(1, 1.0);\n+    let _: S2 = Trait::new::<isize,f64>(1, 1.0);\n     //~^ ERROR too many type parameters provided\n \n-    let _: S2 = Trait::<'a,int>::new::<f64>(1, 1.0);\n+    let _: S2 = Trait::<'a,isize>::new::<f64>(1, 1.0);\n     //~^ ERROR too many lifetime parameters provided\n }\n "}, {"sha": "b208c6f4244efc15399e48ed35144882db82e119", "filename": "src/test/compile-fail/bad-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbad-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbad-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-name.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,5 +11,5 @@\n // error-pattern: expected\n \n fn main() {\n-  let x.y::<int>.z foo;\n+  let x.y::<isize>.z foo;\n }"}, {"sha": "0d84a5e7d0280bffdde45f64d69385013857fb2a", "filename": "src/test/compile-fail/better-expected.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbetter-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbetter-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbetter-expected.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let x: [int 3]; //~ ERROR expected one of `(`, `+`, `::`, `;`, or `]`, found `3`\n+    let x: [isize 3]; //~ ERROR expected one of `(`, `+`, `::`, `;`, or `]`, found `3`\n }"}, {"sha": "375f6c5d0475ecfc507f1286c49daee538739f5f", "filename": "src/test/compile-fail/bind-struct-early-modifiers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbind-struct-early-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbind-struct-early-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-struct-early-modifiers.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    struct Foo { x: int }\n+    struct Foo { x: isize }\n     match (Foo { x: 10 }) {\n         Foo { ref x: ref x } => {}, //~ ERROR unexpected `:`\n         _ => {}"}, {"sha": "704d856f106b280468522ff0377c02c0882c77a3", "filename": "src/test/compile-fail/bogus-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,7 +11,7 @@\n \n // error-pattern: unresolved\n \n-enum color { rgb(int, int, int), rgba(int, int, int, int), }\n+enum color { rgb(isize, isize, isize), rgba(isize, isize, isize, isize), }\n \n fn main() {\n     let red: color = rgb(255, 0, 0);"}, {"sha": "63fd3c60e8c9d7ff4687494cdc79a40aba71b46b", "filename": "src/test/compile-fail/borrow-tuple-fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,9 +11,9 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-struct Foo(Box<int>, int);\n+struct Foo(Box<isize>, isize);\n \n-struct Bar(int, int);\n+struct Bar(isize, isize);\n \n fn main() {\n     let x = (box 1i, 2i);"}, {"sha": "92f16d8ffcedb8351c2835ead67828a7f602929b", "filename": "src/test/compile-fail/borrowck-and-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-and-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-and-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-and-init.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let i: int;\n+    let i: isize;\n \n     println!(\"{}\", false && { i = 5; true });\n     println!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`"}, {"sha": "3a2c6f038510721794edb2b4a60884df0767cdd5", "filename": "src/test/compile-fail/borrowck-assign-comp-idx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,22 +9,22 @@\n // except according to those terms.\n \n struct Point {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n fn a() {\n     let mut p = vec!(1);\n \n     // Create an immutable pointer into p's contents:\n-    let q: &int = &p[0];\n+    let q: &isize = &p[0];\n \n     p[0] = 5; //~ ERROR cannot borrow\n \n     println!(\"{}\", *q);\n }\n \n-fn borrow<F>(_x: &[int], _f: F) where F: FnOnce() {}\n+fn borrow<F>(_x: &[isize], _f: F) where F: FnOnce() {}\n \n fn b() {\n     // here we alias the mutable vector into an imm slice and try to"}, {"sha": "802b83119b7c31ce633d72363368b9990fae38b6", "filename": "src/test/compile-fail/borrowck-assign-comp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct point { x: int, y: int }\n+struct point { x: isize, y: isize }\n \n fn a() {\n     let mut p = point {x: 3, y: 4};\n     let q = &p;\n \n     // This assignment is illegal because the field x is not\n     // inherently mutable; since `p` was made immutable, `p.x` is now\n-    // immutable.  Otherwise the type of &_q.x (&int) would be wrong.\n+    // immutable.  Otherwise the type of &_q.x (&isize) would be wrong.\n     p.x = 5; //~ ERROR cannot assign to `p.x`\n     q.x;\n }"}, {"sha": "d66cdb99a74636b6d09f26a3d39d37bc65897b89", "filename": "src/test/compile-fail/borrowck-assign-to-andmut-in-aliasable-loc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-andmut-in-aliasable-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-andmut-in-aliasable-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-andmut-in-aliasable-loc.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,7 +12,7 @@\n // borrowed (but otherwise non-aliasable) location is illegal.\n \n struct S<'a> {\n-    pointer: &'a mut int\n+    pointer: &'a mut isize\n }\n \n fn a(s: &S) {"}, {"sha": "77aa57ef1b5ba6f8bf78ffe5e01aba097447a83c", "filename": "src/test/compile-fail/borrowck-assign-to-andmut-in-borrowed-loc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-andmut-in-borrowed-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-andmut-in-borrowed-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-andmut-in-borrowed-loc.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,7 +12,7 @@\n // borrowed (but otherwise non-aliasable) location is illegal.\n \n struct S<'a> {\n-    pointer: &'a mut int\n+    pointer: &'a mut isize\n }\n \n fn copy_borrowed_ptr<'a>(p: &'a mut S<'a>) -> S<'a> {"}, {"sha": "1b5b1899e0d9d34d0272c77172381b228f2c5cae", "filename": "src/test/compile-fail/borrowck-assign-to-constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-constants.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static foo: int = 5;\n+static foo: isize = 5;\n \n fn main() {\n     // assigning to various global constants"}, {"sha": "ea020dc0685218085da8d1e20fa4fea524245b11", "filename": "src/test/compile-fail/borrowck-auto-mut-ref-to-immut-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,7 +11,7 @@\n // Tests that auto-ref can't create mutable aliases to immutable memory.\n \n struct Foo {\n-    x: int\n+    x: isize\n }\n \n impl Foo {"}, {"sha": "a09ee439245434dfc57eca2f51de09ce7713a35a", "filename": "src/test/compile-fail/borrowck-block-unint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,7 +10,7 @@\n \n fn force<F>(f: F) where F: FnOnce() { f(); }\n fn main() {\n-    let x: int;\n+    let x: isize;\n     force(|| {  //~ ERROR capture of possibly uninitialized variable: `x`\n         println!(\"{}\", x);\n     });"}, {"sha": "397c55a502afd6df79bc38cd10f8efd9dac70046", "filename": "src/test/compile-fail/borrowck-borrow-from-owned-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -17,8 +17,8 @@ struct Foo {\n impl Copy for Foo {}\n \n struct Bar {\n-  int1: int,\n-  int2: int,\n+  int1: isize,\n+  int2: isize,\n }\n \n impl Copy for Bar {}"}, {"sha": "ae4c09c59d720c2d3a004b981994d6786da59db5", "filename": "src/test/compile-fail/borrowck-borrow-from-stack-variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,8 +16,8 @@ struct Foo {\n impl Copy for Foo {}\n \n struct Bar {\n-  int1: int,\n-  int2: int,\n+  int1: isize,\n+  int2: isize,\n }\n \n impl Copy for Bar {}"}, {"sha": "fbb3824cd4060089081cc91475581b5229c84658", "filename": "src/test/compile-fail/borrowck-borrow-from-temporary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-temporary.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,9 +11,9 @@\n // Test lifetimes are linked properly when we take reference\n // to interior.\n \n-struct Foo(int);\n+struct Foo(isize);\n \n-fn foo<'a>() -> &'a int {\n+fn foo<'a>() -> &'a isize {\n     let &Foo(ref x) = &Foo(3); //~ ERROR borrowed value does not live long enough\n     x\n }"}, {"sha": "9126058a4e6f41cacf0ecc08f0d87948b9dc1de1", "filename": "src/test/compile-fail/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,20 +13,20 @@\n //\n // Example from src/middle/borrowck/doc.rs\n \n-fn foo(t0: & &mut int) {\n+fn foo(t0: & &mut isize) {\n     let t1 = t0;\n-    let p: &int = &**t0;\n+    let p: &isize = &**t0;\n     **t1 = 22; //~ ERROR cannot assign\n }\n \n-fn foo3(t0: &mut &mut int) {\n+fn foo3(t0: &mut &mut isize) {\n     let t1 = &mut *t0;\n-    let p: &int = &**t0; //~ ERROR cannot borrow\n+    let p: &isize = &**t0; //~ ERROR cannot borrow\n     **t1 = 22;\n }\n \n-fn foo4(t0: & &mut int) {\n-    let x:  &mut int = &mut **t0; //~ ERROR cannot borrow\n+fn foo4(t0: & &mut isize) {\n+    let x:  &mut isize = &mut **t0; //~ ERROR cannot borrow\n     *x += 1;\n }\n "}, {"sha": "5db9ad2e3a4a9608bc93424a8bdc64a72e152bfb", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-auto-deref-mut.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -32,25 +32,25 @@ impl<T> DerefMut for Own<T> {\n }\n \n struct Point {\n-    x: int,\n-    y: int\n+    x: isize,\n+    y: isize\n }\n \n impl Point {\n-    fn get(&self) -> (int, int) {\n+    fn get(&self) -> (isize, isize) {\n         (self.x, self.y)\n     }\n \n-    fn set(&mut self, x: int, y: int) {\n+    fn set(&mut self, x: isize, y: isize) {\n         self.x = x;\n         self.y = y;\n     }\n \n-    fn x_ref(&self) -> &int {\n+    fn x_ref(&self) -> &isize {\n         &self.x\n     }\n \n-    fn y_mut(&mut self) -> &mut int {\n+    fn y_mut(&mut self) -> &mut isize {\n         &mut self.y\n     }\n }\n@@ -67,15 +67,15 @@ fn deref_mut_field2(mut x: Own<Point>) {\n     let _i = &mut x.y;\n }\n \n-fn deref_extend_field(x: &Own<Point>) -> &int {\n+fn deref_extend_field(x: &Own<Point>) -> &isize {\n     &x.y\n }\n \n-fn deref_extend_mut_field1(x: &Own<Point>) -> &mut int {\n+fn deref_extend_mut_field1(x: &Own<Point>) -> &mut isize {\n     &mut x.y //~ ERROR cannot borrow\n }\n \n-fn deref_extend_mut_field2(x: &mut Own<Point>) -> &mut int {\n+fn deref_extend_mut_field2(x: &mut Own<Point>) -> &mut isize {\n     &mut x.y\n }\n \n@@ -126,15 +126,15 @@ fn deref_mut_method2(mut x: Own<Point>) {\n     x.set(0, 0);\n }\n \n-fn deref_extend_method(x: &Own<Point>) -> &int {\n+fn deref_extend_method(x: &Own<Point>) -> &isize {\n     x.x_ref()\n }\n \n-fn deref_extend_mut_method1(x: &Own<Point>) -> &mut int {\n+fn deref_extend_mut_method1(x: &Own<Point>) -> &mut isize {\n     x.y_mut() //~ ERROR cannot borrow\n }\n \n-fn deref_extend_mut_method2(x: &mut Own<Point>) -> &mut int {\n+fn deref_extend_mut_method2(x: &mut Own<Point>) -> &mut isize {\n     x.y_mut()\n }\n "}, {"sha": "75680de9c9effb5b433cdf51762a35207cb8999d", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-auto-deref.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -26,25 +26,25 @@ impl<T> Deref for Rc<T> {\n }\n \n struct Point {\n-    x: int,\n-    y: int\n+    x: isize,\n+    y: isize\n }\n \n impl Point {\n-    fn get(&self) -> (int, int) {\n+    fn get(&self) -> (isize, isize) {\n         (self.x, self.y)\n     }\n \n-    fn set(&mut self, x: int, y: int) {\n+    fn set(&mut self, x: isize, y: isize) {\n         self.x = x;\n         self.y = y;\n     }\n \n-    fn x_ref(&self) -> &int {\n+    fn x_ref(&self) -> &isize {\n         &self.x\n     }\n \n-    fn y_mut(&mut self) -> &mut int {\n+    fn y_mut(&mut self) -> &mut isize {\n         &mut self.y\n     }\n }\n@@ -61,15 +61,15 @@ fn deref_mut_field2(mut x: Rc<Point>) {\n     let _i = &mut x.y; //~ ERROR cannot borrow\n }\n \n-fn deref_extend_field(x: &Rc<Point>) -> &int {\n+fn deref_extend_field(x: &Rc<Point>) -> &isize {\n     &x.y\n }\n \n-fn deref_extend_mut_field1(x: &Rc<Point>) -> &mut int {\n+fn deref_extend_mut_field1(x: &Rc<Point>) -> &mut isize {\n     &mut x.y //~ ERROR cannot borrow\n }\n \n-fn deref_extend_mut_field2(x: &mut Rc<Point>) -> &mut int {\n+fn deref_extend_mut_field2(x: &mut Rc<Point>) -> &mut isize {\n     &mut x.y //~ ERROR cannot borrow\n }\n \n@@ -97,15 +97,15 @@ fn deref_mut_method2(mut x: Rc<Point>) {\n     x.set(0, 0); //~ ERROR cannot borrow\n }\n \n-fn deref_extend_method(x: &Rc<Point>) -> &int {\n+fn deref_extend_method(x: &Rc<Point>) -> &isize {\n     x.x_ref()\n }\n \n-fn deref_extend_mut_method1(x: &Rc<Point>) -> &mut int {\n+fn deref_extend_mut_method1(x: &Rc<Point>) -> &mut isize {\n     x.y_mut() //~ ERROR cannot borrow\n }\n \n-fn deref_extend_mut_method2(x: &mut Rc<Point>) -> &mut int {\n+fn deref_extend_mut_method2(x: &mut Rc<Point>) -> &mut isize {\n     x.y_mut() //~ ERROR cannot borrow\n }\n "}, {"sha": "bfe53b739f4a8811b9373d0f2713f9d8fa9593d7", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-deref-mut.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -31,39 +31,39 @@ impl<T> DerefMut for Own<T> {\n     }\n }\n \n-fn deref_imm(x: Own<int>) {\n+fn deref_imm(x: Own<isize>) {\n     let _i = &*x;\n }\n \n-fn deref_mut1(x: Own<int>) {\n+fn deref_mut1(x: Own<isize>) {\n     let _i = &mut *x; //~ ERROR cannot borrow\n }\n \n-fn deref_mut2(mut x: Own<int>) {\n+fn deref_mut2(mut x: Own<isize>) {\n     let _i = &mut *x;\n }\n \n-fn deref_extend<'a>(x: &'a Own<int>) -> &'a int {\n+fn deref_extend<'a>(x: &'a Own<isize>) -> &'a isize {\n     &**x\n }\n \n-fn deref_extend_mut1<'a>(x: &'a Own<int>) -> &'a mut int {\n+fn deref_extend_mut1<'a>(x: &'a Own<isize>) -> &'a mut isize {\n     &mut **x //~ ERROR cannot borrow\n }\n \n-fn deref_extend_mut2<'a>(x: &'a mut Own<int>) -> &'a mut int {\n+fn deref_extend_mut2<'a>(x: &'a mut Own<isize>) -> &'a mut isize {\n     &mut **x\n }\n \n-fn assign1<'a>(x: Own<int>) {\n+fn assign1<'a>(x: Own<isize>) {\n     *x = 3; //~ ERROR cannot borrow\n }\n \n-fn assign2<'a>(x: &'a Own<int>) {\n+fn assign2<'a>(x: &'a Own<isize>) {\n     **x = 3; //~ ERROR cannot borrow\n }\n \n-fn assign3<'a>(x: &'a mut Own<int>) {\n+fn assign3<'a>(x: &'a mut Own<isize>) {\n     **x = 3;\n }\n "}, {"sha": "153368f4894a45da50bafd2fe2daffc5c7ce679f", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-deref.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -25,39 +25,39 @@ impl<T> Deref for Rc<T> {\n     }\n }\n \n-fn deref_imm(x: Rc<int>) {\n+fn deref_imm(x: Rc<isize>) {\n     let _i = &*x;\n }\n \n-fn deref_mut1(x: Rc<int>) {\n+fn deref_mut1(x: Rc<isize>) {\n     let _i = &mut *x; //~ ERROR cannot borrow\n }\n \n-fn deref_mut2(mut x: Rc<int>) {\n+fn deref_mut2(mut x: Rc<isize>) {\n     let _i = &mut *x; //~ ERROR cannot borrow\n }\n \n-fn deref_extend<'a>(x: &'a Rc<int>) -> &'a int {\n+fn deref_extend<'a>(x: &'a Rc<isize>) -> &'a isize {\n     &**x\n }\n \n-fn deref_extend_mut1<'a>(x: &'a Rc<int>) -> &'a mut int {\n+fn deref_extend_mut1<'a>(x: &'a Rc<isize>) -> &'a mut isize {\n     &mut **x //~ ERROR cannot borrow\n }\n \n-fn deref_extend_mut2<'a>(x: &'a mut Rc<int>) -> &'a mut int {\n+fn deref_extend_mut2<'a>(x: &'a mut Rc<isize>) -> &'a mut isize {\n     &mut **x //~ ERROR cannot borrow\n }\n \n-fn assign1<'a>(x: Rc<int>) {\n+fn assign1<'a>(x: Rc<isize>) {\n     *x = 3; //~ ERROR cannot assign\n }\n \n-fn assign2<'a>(x: &'a Rc<int>) {\n+fn assign2<'a>(x: &'a Rc<isize>) {\n     **x = 3; //~ ERROR cannot assign\n }\n \n-fn assign3<'a>(x: &'a mut Rc<int>) {\n+fn assign3<'a>(x: &'a mut Rc<isize>) {\n     **x = 3; //~ ERROR cannot assign\n }\n "}, {"sha": "648d0d81ffbc0ef28fd99d0da26338f68e6cb177", "filename": "src/test/compile-fail/borrowck-box-insensitivity.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,23 +11,23 @@\n #![feature(box_syntax)]\n \n struct A {\n-    x: Box<int>,\n-    y: int,\n+    x: Box<isize>,\n+    y: isize,\n }\n \n struct B {\n-    x: Box<int>,\n-    y: Box<int>,\n+    x: Box<isize>,\n+    y: Box<isize>,\n }\n \n struct C {\n     x: Box<A>,\n-    y: int,\n+    y: isize,\n }\n \n struct D {\n     x: Box<A>,\n-    y: Box<int>,\n+    y: Box<isize>,\n }\n \n fn copy_after_move() {"}, {"sha": "1ecf9f999b7c56bdab5e63945a733e6b9119ba47", "filename": "src/test/compile-fail/borrowck-break-uninit-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo() -> int {\n-    let x: int;\n+fn foo() -> isize {\n+    let x: isize;\n \n     while 1i != 2  {\n         break;"}, {"sha": "8a6a036945b78e60994964d9cde1d1c53cf65b3d", "filename": "src/test/compile-fail/borrowck-break-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo() -> int {\n-    let x: int;\n+fn foo() -> isize {\n+    let x: isize;\n \n     loop {\n         break;"}, {"sha": "6a77b35f91de40443a7047186cd7f71bd2ed968f", "filename": "src/test/compile-fail/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -56,8 +56,8 @@ fn test6() {\n }\n \n fn test7() {\n-    fn foo<F>(_: F) where F: FnMut(Box<FnMut(int)>, int) {}\n-    let mut f = |&mut: g: Box<FnMut(int)>, b: int| {};\n+    fn foo<F>(_: F) where F: FnMut(Box<FnMut(isize)>, isize) {}\n+    let mut f = |&mut: g: Box<FnMut(isize)>, b: isize| {};\n     f(box |a| { //~ ERROR: cannot borrow `f` as immutable because it is also borrowed as mutable\n         foo(f); //~ ERROR: cannot move out of captured outer variable\n     }, 3);"}, {"sha": "bc0b667e895d003928fa38c2693ec266f606d606", "filename": "src/test/compile-fail/borrowck-call-method-from-mut-aliasable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-call-method-from-mut-aliasable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-call-method-from-mut-aliasable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-call-method-from-mut-aliasable.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Foo {\n-    x: int,\n+    x: isize,\n }\n \n impl Foo {"}, {"sha": "14d57062660b985dbb93e1055b9b0f528634373f", "filename": "src/test/compile-fail/borrowck-closures-mut-and-imm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,11 +13,11 @@\n \n #![feature(box_syntax)]\n \n-fn get(x: &int) -> int {\n+fn get(x: &isize) -> isize {\n     *x\n }\n \n-fn set(x: &mut int) {\n+fn set(x: &mut isize) {\n     *x = 4;\n }\n \n@@ -59,7 +59,7 @@ fn f() {\n \n fn g() {\n     struct Foo {\n-        f: Box<int>\n+        f: Box<isize>\n     }\n \n     let mut x = box Foo { f: box 3 };\n@@ -69,7 +69,7 @@ fn g() {\n \n fn h() {\n     struct Foo {\n-        f: Box<int>\n+        f: Box<isize>\n     }\n \n     let mut x = box Foo { f: box 3 };"}, {"sha": "8260774190967b417962d319ce0ce46cc0bfd1a4", "filename": "src/test/compile-fail/borrowck-closures-mut-of-imm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,15 +11,15 @@\n // Tests that two closures cannot simultaneously have mutable\n // and immutable access to the variable. Issue #6801.\n \n-fn get(x: &int) -> int {\n+fn get(x: &isize) -> isize {\n     *x\n }\n \n-fn set(x: &mut int) {\n+fn set(x: &mut isize) {\n     *x = 4;\n }\n \n-fn a(x: &int) {\n+fn a(x: &isize) {\n     let c1 = |&mut:| set(&mut *x);\n     //~^ ERROR cannot borrow\n     let c2 = |&mut:| set(&mut *x);"}, {"sha": "d442e3ac3f80ca851ed367e970d1ccfe97b2e3c9", "filename": "src/test/compile-fail/borrowck-closures-two-mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -20,7 +20,7 @@ fn a() {\n     let c2 = |&mut:| x = 5; //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n-fn set(x: &mut int) {\n+fn set(x: &mut isize) {\n     *x = 4;\n }\n \n@@ -45,7 +45,7 @@ fn d() {\n \n fn g() {\n     struct Foo {\n-        f: Box<int>\n+        f: Box<isize>\n     }\n \n     let mut x = box Foo { f: box 3 };"}, {"sha": "cf86602af0be22106ddb8ff056b512b37c81098d", "filename": "src/test/compile-fail/borrowck-closures-unique-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Foo {\n-    x: int,\n+    x: isize,\n }\n \n pub fn main() {"}, {"sha": "f9a6d5ac84575617db471360a6fead5f28f34f4f", "filename": "src/test/compile-fail/borrowck-closures-unique.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -14,35 +14,35 @@\n //  may be *immutable*, but we cannot allow\n // multiple borrows.\n \n-fn get(x: &int) -> int {\n+fn get(x: &isize) -> isize {\n     *x\n }\n \n-fn set(x: &mut int) -> int {\n+fn set(x: &mut isize) -> isize {\n     *x\n }\n \n-fn a(x: &mut int) {\n+fn a(x: &mut isize) {\n     let c1 = |&mut:| get(x);\n     let c2 = |&mut:| get(x);\n }\n \n-fn b(x: &mut int) {\n+fn b(x: &mut isize) {\n     let c1 = |&mut:| get(x);\n     let c2 = |&mut:| set(x); //~ ERROR closure requires unique access to `x`\n }\n \n-fn c(x: &mut int) {\n+fn c(x: &mut isize) {\n     let c1 = |&mut:| get(x);\n     let c2 = |&mut:| { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n }\n \n-fn d(x: &mut int) {\n+fn d(x: &mut isize) {\n     let c1 = |&mut:| set(x);\n     let c2 = |&mut:| set(x); //~ ERROR closure requires unique access to `x`\n }\n \n-fn e(x: &mut int) {\n+fn e(x: &mut isize) {\n     let c1 = |&mut:| x = panic!(); //~ ERROR closure cannot assign to immutable local variable\n }\n "}, {"sha": "b6529da18838b96c5f38694f699885b195eb1f11", "filename": "src/test/compile-fail/borrowck-closures-use-after-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -15,7 +15,7 @@\n #![feature(box_syntax)]\n \n struct Foo {\n-  x: int\n+  x: isize\n }\n \n impl Drop for Foo {"}, {"sha": "fe5142a77341fe6152c7caea3666f12620f2da1c", "filename": "src/test/compile-fail/borrowck-field-sensitivity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(box_syntax)]\n \n-struct A { a: int, b: Box<int> }\n+struct A { a: isize, b: Box<isize> }\n \n fn deref_after_move() {\n     let x = A { a: 1, b: box 2 };"}, {"sha": "17c69a40e58ee4508a99993be9dc6c705c871a39", "filename": "src/test/compile-fail/borrowck-for-loop-correct-cmt-for-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,7 +13,7 @@\n #![feature(box_syntax)]\n \n struct Foo {\n-    a: [Box<int>; 3],\n+    a: [Box<isize>; 3],\n }\n \n fn main() {"}, {"sha": "08f91e729cd8dfd0d652bd24474c12f93d889beb", "filename": "src/test/compile-fail/borrowck-if-no-else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { println!(\"{}\", x); }\n+fn foo(x: isize) { println!(\"{}\", x); }\n \n fn main() {\n-    let x: int; if 1i > 2 { x = 10; }\n+    let x: isize; if 1i > 2 { x = 10; }\n     foo(x); //~ ERROR use of possibly uninitialized variable: `x`\n }"}, {"sha": "01e292ec89d8a6a1c62ab68ca99918255ace2fea", "filename": "src/test/compile-fail/borrowck-if-with-else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { println!(\"{}\", x); }\n+fn foo(x: isize) { println!(\"{}\", x); }\n \n fn main() {\n-    let x: int;\n+    let x: isize;\n     if 1i > 2 {\n         println!(\"whoops\");\n     } else {"}, {"sha": "3c20abab8bdeffac38047bab550ff1647a130cc5", "filename": "src/test/compile-fail/borrowck-init-in-called-fn-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    let j = |&:| -> int {\n-        let i: int;\n+    let j = |&:| -> isize {\n+        let i: isize;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };\n     j();"}, {"sha": "31ca39c3f9b36772a15acd3d81c7908625c55c66", "filename": "src/test/compile-fail/borrowck-init-in-fn-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    let f  = |&:| -> int {\n-        let i: int;\n+    let f  = |&:| -> isize {\n+        let i: isize;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };\n     println!(\"{}\", f());"}, {"sha": "569ddb80c2fe20dc47dec55c7263e884d5423477", "filename": "src/test/compile-fail/borrowck-init-in-fru.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fru.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fru.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fru.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,8 +10,8 @@\n \n #[derive(Clone)]\n struct point {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n fn main() {"}, {"sha": "e0d93fd1d475bc4622a9185cf1ef76d843cdab63", "filename": "src/test/compile-fail/borrowck-init-op-equal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-init-op-equal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-init-op-equal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-op-equal.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,7 +10,7 @@\n \n \n fn test() {\n-    let v: int;\n+    let v: isize;\n     v += 1; //~ ERROR use of possibly uninitialized variable: `v`\n     v.clone();\n }"}, {"sha": "a036286f3634a0ca8470638a0ea68e47bd514141", "filename": "src/test/compile-fail/borrowck-init-plus-equal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-init-plus-equal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-init-plus-equal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-plus-equal.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn test() {\n-    let mut v: int;\n+    let mut v: isize;\n     v = v + 1; //~ ERROR use of possibly uninitialized variable: `v`\n     v.clone();\n }"}, {"sha": "d729af844cb39dd0d465e6577146fc1f768ede7d", "filename": "src/test/compile-fail/borrowck-insert-during-each.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,11 +12,11 @@ extern crate collections;\n use std::collections::HashSet;\n \n struct Foo {\n-  n: HashSet<int>,\n+  n: HashSet<isize>,\n }\n \n impl Foo {\n-    pub fn foo<F>(&mut self, mut fun: F) where F: FnMut(&int) {\n+    pub fn foo<F>(&mut self, mut fun: F) where F: FnMut(&isize) {\n         for f in self.n.iter() {\n             fun(f);\n         }"}, {"sha": "cc562afa9f818ecbe89946d1c0d64378020f1a69", "filename": "src/test/compile-fail/borrowck-issue-14498.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,11 +13,11 @@\n \n #![feature(box_syntax)]\n \n-struct A { a: int }\n-struct B<'a> { a: Box<&'a mut int> }\n+struct A { a: isize }\n+struct B<'a> { a: Box<&'a mut isize> }\n \n fn borrow_in_var_from_var() {\n-    let mut x: int = 1;\n+    let mut x: isize = 1;\n     let y = box &mut x;\n     let p = &y;\n     let q = &***p;\n@@ -37,7 +37,7 @@ fn borrow_in_var_from_field() {\n }\n \n fn borrow_in_field_from_var() {\n-    let mut x: int = 1;\n+    let mut x: isize = 1;\n     let y = B { a: box &mut x };\n     let p = &y.a;\n     let q = &***p;"}, {"sha": "ca8efb5dc967d7f5286982ec741c73a7b20e62c3", "filename": "src/test/compile-fail/borrowck-lend-flow-if.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,13 +16,13 @@\n \n #![feature(box_syntax)]\n \n-fn borrow(_v: &int) {}\n-fn borrow_mut(_v: &mut int) {}\n+fn borrow(_v: &isize) {}\n+fn borrow_mut(_v: &mut isize) {}\n fn cond() -> bool { panic!() }\n fn for_func<F>(_f: F) where F: FnOnce() -> bool { panic!() }\n fn produce<T>() -> T { panic!(); }\n \n-fn inc(v: &mut Box<int>) {\n+fn inc(v: &mut Box<isize>) {\n     *v = box() (**v + 1);\n }\n "}, {"sha": "83fddcf696496bbb2463204ae2a1f266f818b1e4", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,12 +16,12 @@\n \n #![feature(box_syntax)]\n \n-fn borrow(_v: &int) {}\n-fn borrow_mut(_v: &mut int) {}\n+fn borrow(_v: &isize) {}\n+fn borrow_mut(_v: &mut isize) {}\n fn cond() -> bool { panic!() }\n fn produce<T>() -> T { panic!(); }\n \n-fn inc(v: &mut Box<int>) {\n+fn inc(v: &mut Box<isize>) {\n     *v = box() (**v + 1);\n }\n "}, {"sha": "177976c15f0f46831762f717273b6f699c3227fd", "filename": "src/test/compile-fail/borrowck-lend-flow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,13 +16,13 @@\n \n #![feature(box_syntax)]\n \n-fn borrow(_v: &int) {}\n-fn borrow_mut(_v: &mut int) {}\n+fn borrow(_v: &isize) {}\n+fn borrow_mut(_v: &mut isize) {}\n fn cond() -> bool { panic!() }\n fn for_func<F>(_f: F) where F: FnOnce() -> bool { panic!() }\n fn produce<T>() -> T { panic!(); }\n \n-fn inc(v: &mut Box<int>) {\n+fn inc(v: &mut Box<isize>) {\n     *v = box() (**v + 1);\n }\n "}, {"sha": "8906e2d42b25ab43e429904a79824defac221ee2", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,7 +12,7 @@\n \n use std::thread::Thread;\n \n-fn borrow<F>(v: &int, f: F) where F: FnOnce(&int) {\n+fn borrow<F>(v: &isize, f: F) where F: FnOnce(&isize) {\n     f(v);\n }\n "}, {"sha": "f3f18807314f9638a77502d488bb48d0702e6f40", "filename": "src/test/compile-fail/borrowck-loan-blocks-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(box_syntax)]\n \n-fn take(_v: Box<int>) {\n+fn take(_v: Box<isize>) {\n }\n \n fn box_imm() {"}, {"sha": "a52a4484b20d123440a7c602d20c1c8d9ed6eee9", "filename": "src/test/compile-fail/borrowck-loan-blocks-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(box_syntax)]\n \n-fn borrow<F>(v: &int, f: F) where F: FnOnce(&int) {\n+fn borrow<F>(v: &isize, f: F) where F: FnOnce(&isize) {\n     f(v);\n }\n "}, {"sha": "b1eb06d16b19ae47b1d199caeb62b42fc79d8eb0", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,20 +12,20 @@ use std::ops::Add;\n \n #[derive(Copy)]\n struct Point {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n-impl Add<int> for Point {\n-    type Output = int;\n+impl Add<isize> for Point {\n+    type Output = isize;\n \n-    fn add(self, z: int) -> int {\n+    fn add(self, z: isize) -> isize {\n         self.x + self.y + z\n     }\n }\n \n impl Point {\n-    pub fn times(&self, z: int) -> int {\n+    pub fn times(&self, z: isize) -> isize {\n         self.x * self.y * z\n     }\n }"}, {"sha": "014b27f9659b03d3b7ec72191a9749f1daf30d32", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-struct point { x: int, y: int }\n+struct point { x: isize, y: isize }\n \n trait methods {\n     fn impurem(&self);"}, {"sha": "21d9dea77b26aefff8e4071559a1d9b94c8788e1", "filename": "src/test/compile-fail/borrowck-loan-vec-content.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,17 +12,17 @@\n // (locally rooted) mutable, unique vector, and that we then prevent\n // modifications to the contents.\n \n-fn takes_imm_elt<F>(_v: &int, f: F) where F: FnOnce() {\n+fn takes_imm_elt<F>(_v: &isize, f: F) where F: FnOnce() {\n     f();\n }\n \n fn has_mut_vec_and_does_not_try_to_change_it() {\n-    let mut v: Vec<int> = vec!(1, 2, 3);\n+    let mut v: Vec<isize> = vec!(1, 2, 3);\n     takes_imm_elt(&v[0], || {})\n }\n \n fn has_mut_vec_but_tries_to_change_it() {\n-    let mut v: Vec<int> = vec!(1, 2, 3);\n+    let mut v: Vec<isize> = vec!(1, 2, 3);\n     takes_imm_elt(\n         &v[0],\n         || { //~ ERROR cannot borrow `v` as mutable"}, {"sha": "819ff73a5805c4c76bc5909d7e831142e64a6d65", "filename": "src/test/compile-fail/borrowck-match-binding-is-assignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,11 +11,11 @@\n // Test that immutable pattern bindings cannot be reassigned.\n \n enum E {\n-    Foo(int)\n+    Foo(isize)\n }\n \n struct S {\n-    bar: int,\n+    bar: isize,\n }\n \n pub fn main() {"}, {"sha": "b0d546cd5c803584846c8cc52100894542708e28", "filename": "src/test/compile-fail/borrowck-move-by-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,6 +13,6 @@\n pub fn main() {\n     let bar = box 3;\n     let _g = |&mut:| {\n-        let _h = move |:| -> int { *bar }; //~ ERROR cannot move out of captured outer variable\n+        let _h = move |:| -> isize { *bar }; //~ ERROR cannot move out of captured outer variable\n     };\n }"}, {"sha": "2d82c8be519712feea5960cd3ee185ed1def58dc", "filename": "src/test/compile-fail/borrowck-move-error-with-note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -45,7 +45,7 @@ fn move_in_match() {\n \n // from issue-8064\n struct A {\n-    a: Box<int>,\n+    a: Box<isize>,\n }\n \n fn free<T>(_: T) {}"}, {"sha": "8310d4ba1444af4ed249726f6867424948604751", "filename": "src/test/compile-fail/borrowck-move-from-unsafe-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn foo(x: *const Box<int>) -> Box<int> {\n+fn foo(x: *const Box<isize>) -> Box<isize> {\n     let y = *x; //~ ERROR dereference of unsafe pointer requires unsafe function or block\n     return y;\n }"}, {"sha": "43bf3f25d1ab9ff4d8380bb8750cb7f857b62679", "filename": "src/test/compile-fail/borrowck-move-moved-value-into-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(box_syntax)]\n \n-fn call_f<F:FnOnce() -> int>(f: F) -> int {\n+fn call_f<F:FnOnce() -> isize>(f: F) -> isize {\n     f()\n }\n "}, {"sha": "5bdea6a2bd9962898812feaeb71637fc7372ae76", "filename": "src/test/compile-fail/borrowck-move-mut-base-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-move-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-move-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-mut-base-ptr.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,8 +13,8 @@\n //\n // Example from src/middle/borrowck/doc.rs\n \n-fn foo(t0: &mut int) {\n-    let p: &int = &*t0; // Freezes `*t0`\n+fn foo(t0: &mut isize) {\n+    let p: &isize = &*t0; // Freezes `*t0`\n     let t1 = t0;        //~ ERROR cannot move out of `t0`\n     *t1 = 22;\n }"}, {"sha": "2f81aa8f3818ec3071e11db11fd526b02aca936d", "filename": "src/test/compile-fail/borrowck-move-out-of-static-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-static-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-static-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-static-item.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,7 +13,7 @@\n use std::marker;\n \n struct Foo {\n-    foo: int,\n+    foo: isize,\n     nocopy: marker::NoCopy\n }\n "}, {"sha": "88871dda659cf696d3bb53d50a5c292638731ea4", "filename": "src/test/compile-fail/borrowck-move-subcomponent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-move-subcomponent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-move-subcomponent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-subcomponent.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -14,7 +14,7 @@\n #![feature(box_syntax)]\n \n struct S {\n-  x : Box<int>\n+  x : Box<isize>\n }\n \n fn f<T>(_: T) {}"}, {"sha": "b6626a835e454fc22ed5f04ea58b6d858c984d07", "filename": "src/test/compile-fail/borrowck-mut-addr-of-imm-var.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    let x: int = 3;\n-    let y: &mut int = &mut x; //~ ERROR cannot borrow\n+    let x: isize = 3;\n+    let y: &mut isize = &mut x; //~ ERROR cannot borrow\n     *y = 5;\n     println!(\"{}\", *y);\n }"}, {"sha": "71dc61abb64e9c7d7e3e44b20e230b3917c0445d", "filename": "src/test/compile-fail/borrowck-mut-borrow-of-mut-base-ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-borrow-of-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-borrow-of-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-borrow-of-mut-base-ptr.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,16 +13,16 @@\n //\n // Example from src/middle/borrowck/doc.rs\n \n-fn foo<'a>(mut t0: &'a mut int,\n-           mut t1: &'a mut int) {\n-    let p: &int = &*t0;     // Freezes `*t0`\n+fn foo<'a>(mut t0: &'a mut isize,\n+           mut t1: &'a mut isize) {\n+    let p: &isize = &*t0;     // Freezes `*t0`\n     let mut t2 = &mut t0;   //~ ERROR cannot borrow `t0`\n     **t2 += 1;              // Mutates `*t0`\n }\n \n-fn bar<'a>(mut t0: &'a mut int,\n-           mut t1: &'a mut int) {\n-    let p: &mut int = &mut *t0; // Claims `*t0`\n+fn bar<'a>(mut t0: &'a mut isize,\n+           mut t1: &'a mut isize) {\n+    let p: &mut isize = &mut *t0; // Claims `*t0`\n     let mut t2 = &mut t0;       //~ ERROR cannot borrow `t0`\n     **t2 += 1;                  // Mutates `*t0` but not through `*p`\n }"}, {"sha": "b8a92db4e422334eca533c5c27702df16e9bf831", "filename": "src/test/compile-fail/borrowck-mut-slice-of-imm-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-slice-of-imm-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-slice-of-imm-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-slice-of-imm-vec.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn write(v: &mut [int]) {\n+fn write(v: &mut [isize]) {\n     v[0] += 1;\n }\n "}, {"sha": "44353ab5d960ae5d33a97767bdf3385c4c65017a", "filename": "src/test/compile-fail/borrowck-mutate-in-guard.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-mutate-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-mutate-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mutate-in-guard.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n enum Enum<'a> {\n-    A(&'a int),\n+    A(&'a isize),\n     B(bool),\n }\n \n-fn foo() -> int {\n+fn foo() -> isize {\n     let mut n = 42;\n     let mut x = Enum::A(&mut n);\n     match x {"}, {"sha": "27871a6ab16cdaf2ec0120132c46d6aeb9f3e193", "filename": "src/test/compile-fail/borrowck-or-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-or-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-or-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-or-init.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let i: int;\n+    let i: isize;\n \n     println!(\"{}\", false || { i = 5; true });\n     println!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`"}, {"sha": "de959521514b2d803d4089260200093a268659ce", "filename": "src/test/compile-fail/borrowck-overloaded-call.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,23 +13,23 @@\n use std::ops::{Fn, FnMut, FnOnce};\n \n struct SFn {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n-impl Fn<(int,),int> for SFn {\n-    extern \"rust-call\" fn call(&self, (z,): (int,)) -> int {\n+impl Fn<(isize,),isize> for SFn {\n+    extern \"rust-call\" fn call(&self, (z,): (isize,)) -> isize {\n         self.x * self.y * z\n     }\n }\n \n struct SFnMut {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n-impl FnMut<(int,),int> for SFnMut {\n-    extern \"rust-call\" fn call_mut(&mut self, (z,): (int,)) -> int {\n+impl FnMut<(isize,),isize> for SFnMut {\n+    extern \"rust-call\" fn call_mut(&mut self, (z,): (isize,)) -> isize {\n         self.x * self.y * z\n     }\n }"}, {"sha": "9193a28511e70e069a540969b9048b168d7d9875", "filename": "src/test/compile-fail/borrowck-overloaded-index-autoderef.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -14,14 +14,14 @@\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n impl Index<String> for Foo {\n-    type Output = int;\n+    type Output = isize;\n \n-    fn index<'a>(&'a self, z: &String) -> &'a int {\n+    fn index<'a>(&'a self, z: &String) -> &'a isize {\n         if z.as_slice() == \"x\" {\n             &self.x\n         } else {\n@@ -31,9 +31,9 @@ impl Index<String> for Foo {\n }\n \n impl IndexMut<String> for Foo {\n-    type Output = int;\n+    type Output = isize;\n \n-    fn index_mut<'a>(&'a mut self, z: &String) -> &'a mut int {\n+    fn index_mut<'a>(&'a mut self, z: &String) -> &'a mut isize {\n         if z.as_slice() == \"x\" {\n             &mut self.x\n         } else {"}, {"sha": "ec317277e40b7a128789d12072aaf650e24cef8a", "filename": "src/test/compile-fail/borrowck-overloaded-index.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,14 +11,14 @@\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n impl Index<String> for Foo {\n-    type Output = int;\n+    type Output = isize;\n \n-    fn index<'a>(&'a self, z: &String) -> &'a int {\n+    fn index<'a>(&'a self, z: &String) -> &'a isize {\n         if z.as_slice() == \"x\" {\n             &self.x\n         } else {\n@@ -28,9 +28,9 @@ impl Index<String> for Foo {\n }\n \n impl IndexMut<String> for Foo {\n-    type Output = int;\n+    type Output = isize;\n \n-    fn index_mut<'a>(&'a mut self, z: &String) -> &'a mut int {\n+    fn index_mut<'a>(&'a mut self, z: &String) -> &'a mut isize {\n         if z.as_slice() == \"x\" {\n             &mut self.x\n         } else {\n@@ -40,13 +40,13 @@ impl IndexMut<String> for Foo {\n }\n \n struct Bar {\n-    x: int,\n+    x: isize,\n }\n \n-impl Index<int> for Bar {\n-    type Output = int;\n+impl Index<isize> for Bar {\n+    type Output = isize;\n \n-    fn index<'a>(&'a self, z: &int) -> &'a int {\n+    fn index<'a>(&'a self, z: &isize) -> &'a isize {\n         &self.x\n     }\n }"}, {"sha": "d176245823ef5b4e079e9b71d83453b74fdad49a", "filename": "src/test/compile-fail/borrowck-pat-reassign-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let mut x: Option<int> = None;\n+    let mut x: Option<isize> = None;\n     match x {\n       None => {\n           // Note: on this branch, no borrow has occurred."}, {"sha": "6f5dfa67be50debc5837b965d18eff2e5281c4bb", "filename": "src/test/compile-fail/borrowck-reborrow-from-mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-reborrow-from-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-reborrow-from-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-reborrow-from-mut.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -14,8 +14,8 @@ struct Foo {\n }\n \n struct Bar {\n-  int1: int,\n-  int2: int,\n+  int1: isize,\n+  int2: isize,\n }\n \n fn borrow_same_field_twice_mut_mut(foo: &mut Foo) {"}, {"sha": "eee407472bf14c12342ce07bf4d20200f88dcfc4", "filename": "src/test/compile-fail/borrowck-reborrow-from-shorter-lived-andmut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-reborrow-from-shorter-lived-andmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-reborrow-from-shorter-lived-andmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-reborrow-from-shorter-lived-andmut.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,7 +12,7 @@\n // borrowed (but otherwise non-aliasable) location is illegal.\n \n struct S<'a> {\n-    pointer: &'a mut int\n+    pointer: &'a mut isize\n }\n \n fn copy_borrowed_ptr<'a,'b>(p: &'a mut S<'b>) -> S<'b> {"}, {"sha": "1784b72a69927161c6b93973c5164dd7e8677ccf", "filename": "src/test/compile-fail/borrowck-ref-mut-of-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-mut-of-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-mut-of-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-mut-of-imm.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn destructure(x: Option<int>) -> int {\n+fn destructure(x: Option<isize>) -> isize {\n     match x {\n       None => 0,\n       Some(ref mut v) => *v //~ ERROR cannot borrow"}, {"sha": "74d435b35e7ebf010e854d765a7d5b02f16f0078", "filename": "src/test/compile-fail/borrowck-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-return.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f() -> int {\n-    let x: int;\n+fn f() -> isize {\n+    let x: isize;\n     return x; //~ ERROR use of possibly uninitialized variable: `x`\n }\n "}, {"sha": "bbfc5f89a8d7a1476fd6b258a6e4ea416b9688f6", "filename": "src/test/compile-fail/borrowck-struct-update-with-dtor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -15,10 +15,10 @@\n use std::marker::NoCopy as NP;\n \n \n-struct S { a: int, np: NP }\n+struct S { a: isize, np: NP }\n impl Drop for S { fn drop(&mut self) { } }\n \n-struct T { a: int, mv: Box<int> }\n+struct T { a: isize, mv: Box<isize> }\n impl Drop for T { fn drop(&mut self) { } }\n \n fn f(s0:S) {"}, {"sha": "0102a909188468ff92dc6625fc6e916abe974fae", "filename": "src/test/compile-fail/borrowck-swap-mut-base-ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-swap-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-swap-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-swap-mut-base-ptr.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -15,9 +15,9 @@\n \n use std::mem::swap;\n \n-fn foo<'a>(mut t0: &'a mut int,\n-           mut t1: &'a mut int) {\n-    let p: &int = &*t0;     // Freezes `*t0`\n+fn foo<'a>(mut t0: &'a mut isize,\n+           mut t1: &'a mut isize) {\n+    let p: &isize = &*t0;     // Freezes `*t0`\n     swap(&mut t0, &mut t1); //~ ERROR cannot borrow `t0`\n     *t1 = 22;\n }"}, {"sha": "5b5c5f4da912c6177d77fd626cdc0cfe613e6cbe", "filename": "src/test/compile-fail/borrowck-unary-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n \n-fn foo(x: Box<int>) -> int {\n+fn foo(x: Box<isize>) -> isize {\n     let y = &*x;\n     free(x); //~ ERROR cannot move out of `x` because it is borrowed\n     *y\n }\n \n-fn free(_x: Box<int>) {\n+fn free(_x: Box<isize>) {\n }\n \n fn main() {"}, {"sha": "8e7e2e3e77782e9aa3cb33be33ec026bf4a2db22", "filename": "src/test/compile-fail/borrowck-unboxed-closures.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,17 +10,17 @@\n \n #![feature(overloaded_calls, unboxed_closures)]\n \n-fn a<F:Fn(int, int) -> int>(mut f: F) {\n+fn a<F:Fn(isize, isize) -> isize>(mut f: F) {\n     let g = &mut f;\n     f(1, 2);    //~ ERROR cannot borrow `f` as immutable\n     //~^ ERROR cannot borrow `f` as immutable\n }\n \n-fn b<F:FnMut(int, int) -> int>(f: F) {\n+fn b<F:FnMut(isize, isize) -> isize>(f: F) {\n     f(1, 2);    //~ ERROR cannot borrow immutable local variable\n }\n \n-fn c<F:FnOnce(int, int) -> int>(f: F) {\n+fn c<F:FnOnce(isize, isize) -> isize>(f: F) {\n     f(1, 2);\n     f(1, 2);    //~ ERROR use of moved value\n }"}, {"sha": "acd827d6c620b941a232d3430658519b803624c2", "filename": "src/test/compile-fail/borrowck-uninit-after-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-after-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-after-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-after-item.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,6 +10,6 @@\n \n fn main() {\n     let bar;\n-    fn baz(_x: int) { }\n+    fn baz(_x: isize) { }\n     baz(bar); //~ ERROR use of possibly uninitialized variable: `bar`\n }"}, {"sha": "e253ecc74b9a5243bf5625234d170343afcd8ba8", "filename": "src/test/compile-fail/borrowck-uninit-in-assignop.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-in-assignop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-in-assignop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-in-assignop.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,33 +12,33 @@\n // expression is detected.\n \n pub fn main() {\n-    let x: int;\n+    let x: isize;\n     x += 1; //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x -= 1; //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x *= 1; //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x /= 1; //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x %= 1; //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x ^= 1; //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x &= 1; //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x |= 1; //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x <<= 1;    //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x >>= 1;    //~ ERROR use of possibly uninitialized variable: `x`\n }"}, {"sha": "f4b73bc889fb787c6f8c16c16696dba84cd8fd2d", "filename": "src/test/compile-fail/borrowck-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { println!(\"{}\", x); }\n+fn foo(x: isize) { println!(\"{}\", x); }\n \n fn main() {\n-    let x: int;\n+    let x: isize;\n     foo(x); //~ ERROR use of possibly uninitialized variable: `x`\n }"}, {"sha": "9c14a6990323a6ed422258e32e9f9966b9b0a41b", "filename": "src/test/compile-fail/borrowck-uniq-via-lend.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,23 +10,23 @@\n \n #![feature(box_syntax)]\n \n-fn borrow(_v: &int) {}\n+fn borrow(_v: &isize) {}\n \n fn local() {\n     let mut v = box 3i;\n     borrow(&*v);\n }\n \n fn local_rec() {\n-    struct F { f: Box<int> }\n+    struct F { f: Box<isize> }\n     let mut v = F {f: box 3};\n     borrow(&*v.f);\n }\n \n fn local_recs() {\n     struct F { f: G }\n     struct G { g: H }\n-    struct H { h: Box<int> }\n+    struct H { h: Box<isize> }\n     let mut v = F {f: G {g: H {h: box 3}}};\n     borrow(&*v.f.g.h);\n }"}, {"sha": "94c1d3a6a4505a1b68dae4f3c6747e7d4a2d6a5f", "filename": "src/test/compile-fail/borrowck-use-in-index-lvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-use-in-index-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-use-in-index-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-use-in-index-lvalue.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n fn test() {\n-    let w: &mut [int];\n+    let w: &mut [isize];\n     w[5] = 0; //~ ERROR use of possibly uninitialized variable: `w`\n \n-    let mut w: &mut [int];\n+    let mut w: &mut [isize];\n     w[5] = 0; //~ ERROR use of possibly uninitialized variable: `w`\n }\n "}, {"sha": "42e12622b69200b1a2650019b8fca2ef6b517286", "filename": "src/test/compile-fail/borrowck-use-mut-borrow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,14 +10,14 @@\n \n #![feature(box_syntax)]\n \n-struct A { a: int, b: int }\n+struct A { a: isize, b: isize }\n \n impl Copy for A {}\n \n-struct B { a: int, b: Box<int> }\n+struct B { a: isize, b: Box<isize> }\n \n fn var_copy_after_var_borrow() {\n-    let mut x: int = 1;\n+    let mut x: isize = 1;\n     let p = &mut x;\n     drop(x); //~ ERROR cannot use `x` because it was mutably borrowed\n     *p = 2;\n@@ -61,7 +61,7 @@ fn fu_field_copy_after_field_borrow() {\n }\n \n fn var_deref_after_var_borrow() {\n-    let mut x: Box<int> = box 1;\n+    let mut x: Box<isize> = box 1;\n     let p = &mut x;\n     drop(*x); //~ ERROR cannot use `*x` because it was mutably borrowed\n     **p = 2;"}, {"sha": "577334cce95042c53ef2c267e37c6720ed9f1683", "filename": "src/test/compile-fail/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,29 +10,29 @@\n \n #![feature(advanced_slice_patterns)]\n \n-fn a<'a>() -> &'a [int] {\n+fn a<'a>() -> &'a [isize] {\n     let vec = vec!(1, 2, 3, 4);\n-    let vec: &[int] = vec.as_slice(); //~ ERROR does not live long enough\n+    let vec: &[isize] = vec.as_slice(); //~ ERROR does not live long enough\n     let tail = match vec {\n         [_, tail..] => tail,\n         _ => panic!(\"a\")\n     };\n     tail\n }\n \n-fn b<'a>() -> &'a [int] {\n+fn b<'a>() -> &'a [isize] {\n     let vec = vec!(1, 2, 3, 4);\n-    let vec: &[int] = vec.as_slice(); //~ ERROR does not live long enough\n+    let vec: &[isize] = vec.as_slice(); //~ ERROR does not live long enough\n     let init = match vec {\n         [init.., _] => init,\n         _ => panic!(\"b\")\n     };\n     init\n }\n \n-fn c<'a>() -> &'a [int] {\n+fn c<'a>() -> &'a [isize] {\n     let vec = vec!(1, 2, 3, 4);\n-    let vec: &[int] = vec.as_slice(); //~ ERROR does not live long enough\n+    let vec: &[isize] = vec.as_slice(); //~ ERROR does not live long enough\n     let slice = match vec {\n         [_, slice.., _] => slice,\n         _ => panic!(\"c\")"}, {"sha": "565b8ca2f6856d7000acb007581ea1acf4ebb231", "filename": "src/test/compile-fail/borrowck-vec-pattern-loan-from-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,7 +10,7 @@\n \n fn a() {\n     let mut v = vec!(1, 2, 3);\n-    let vb: &mut [int] = v.as_mut_slice();\n+    let vb: &mut [isize] = v.as_mut_slice();\n     match vb {\n         [_a, tail..] => {\n             v.push(tail[0] + tail[1]); //~ ERROR cannot borrow"}, {"sha": "98a511f0900902279e2dfc0b56ca032462d4681a", "filename": "src/test/compile-fail/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -22,7 +22,7 @@ fn a() {\n \n fn b() {\n     let mut vec = vec!(box 1i, box 2, box 3);\n-    let vec: &mut [Box<int>] = vec.as_mut_slice();\n+    let vec: &mut [Box<isize>] = vec.as_mut_slice();\n     match vec {\n         [_b..] => {\n             vec[0] = box 4; //~ ERROR cannot assign\n@@ -32,7 +32,7 @@ fn b() {\n \n fn c() {\n     let mut vec = vec!(box 1i, box 2, box 3);\n-    let vec: &mut [Box<int>] = vec.as_mut_slice();\n+    let vec: &mut [Box<isize>] = vec.as_mut_slice();\n     match vec {\n         [_a,         //~ ERROR cannot move out\n          _b..] => {  //~^ NOTE attempting to move value to here\n@@ -50,7 +50,7 @@ fn c() {\n \n fn d() {\n     let mut vec = vec!(box 1i, box 2, box 3);\n-    let vec: &mut [Box<int>] = vec.as_mut_slice();\n+    let vec: &mut [Box<isize>] = vec.as_mut_slice();\n     match vec {\n         [_a..,     //~ ERROR cannot move out\n          _b] => {} //~ NOTE attempting to move value to here\n@@ -61,7 +61,7 @@ fn d() {\n \n fn e() {\n     let mut vec = vec!(box 1i, box 2, box 3);\n-    let vec: &mut [Box<int>] = vec.as_mut_slice();\n+    let vec: &mut [Box<isize>] = vec.as_mut_slice();\n     match vec {\n         [_a, _b, _c] => {}  //~ ERROR cannot move out\n         //~^ NOTE attempting to move value to here"}, {"sha": "bcd1aa81d4c2ec68c96c78a549c9085ba3ff2568", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn a<'a>() -> &'a int {\n+fn a<'a>() -> &'a isize {\n     let vec = vec!(1, 2, 3, 4);\n-    let vec: &[int] = vec.as_slice(); //~ ERROR `vec` does not live long enough\n+    let vec: &[isize] = vec.as_slice(); //~ ERROR `vec` does not live long enough\n     let tail = match vec {\n         [_a, tail..] => &tail[0],\n         _ => panic!(\"foo\")"}, {"sha": "17eb19a44e6ebf0d6d415d939ba2a97c84ce9611", "filename": "src/test/compile-fail/borrowck-while.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f() -> int {\n-    let mut x: int;\n+fn f() -> isize {\n+    let mut x: isize;\n     while 1i == 1 { x = 10; }\n     return x; //~ ERROR use of possibly uninitialized variable: `x`\n }"}, {"sha": "fd50918a313e272569c2202292945db2b98293fc", "filename": "src/test/compile-fail/capture1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcapture1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcapture1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcapture1.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,6 +12,6 @@\n // error-pattern: can't capture dynamic environment in a fn item;\n \n fn main() {\n-    let bar: int = 5;\n-    fn foo() -> int { return bar; }\n+    let bar: isize = 5;\n+    fn foo() -> isize { return bar; }\n }"}, {"sha": "a7f0917ed86b9a15da621a1c150f541744fc4f11", "filename": "src/test/compile-fail/cast-to-bare-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(_x: int) { }\n+fn foo(_x: isize) { }\n \n fn main() {\n     let v: u64 = 5;\n-    let x = foo as extern \"C\" fn() -> int;\n+    let x = foo as extern \"C\" fn() -> isize;\n     //~^ ERROR mismatched types\n-    let y = v as extern \"Rust\" fn(int) -> (int, int);\n+    let y = v as extern \"Rust\" fn(isize) -> (isize, isize);\n     //~^ ERROR non-scalar cast\n     y(x());\n }"}, {"sha": "d1e3fe252537db496f2fe8ae881875390e2c9266", "filename": "src/test/compile-fail/check-static-immutable-mut-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcheck-static-immutable-mut-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcheck-static-immutable-mut-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-immutable-mut-slices.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,7 +10,7 @@\n \n // Checks that immutable static items can't have mutable slices\n \n-static TEST: &'static mut [int] = &mut [];\n+static TEST: &'static mut [isize] = &mut [];\n //~^ ERROR statics are not allowed to have mutable references\n \n pub fn main() { }"}, {"sha": "7c4f9ada2d35e0d41cca32446a7a884cd247c33e", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -26,7 +26,7 @@ impl Drop for WithDtor {\n // 3. Expr calls with unsafe arguments for statics are rejected\n enum SafeEnum {\n     Variant1,\n-    Variant2(int),\n+    Variant2(isize),\n     Variant3(WithDtor),\n     Variant4(String)\n }\n@@ -45,7 +45,7 @@ static STATIC3: SafeEnum = SafeEnum::Variant3(WithDtor);\n // a destructor.\n enum UnsafeEnum {\n     Variant5,\n-    Variant6(int)\n+    Variant6(isize)\n }\n \n impl Drop for UnsafeEnum {\n@@ -132,11 +132,11 @@ static STATIC16: (&'static Box<MyOwned>, &'static Box<MyOwned>) = (\n static mut STATIC17: SafeEnum = SafeEnum::Variant1;\n //~^ ERROR mutable statics are not allowed to have destructors\n \n-static STATIC19: Box<int> =\n+static STATIC19: Box<isize> =\n     box 3;\n //~^ ERROR statics are not allowed to have custom pointers\n \n pub fn main() {\n-    let y = { static x: Box<int> = box 3; x };\n+    let y = { static x: Box<isize> = box 3; x };\n     //~^ ERROR statics are not allowed to have custom pointers\n }"}, {"sha": "c64112d5dfd8da687ebffcd9cac0a8aee03990da", "filename": "src/test/compile-fail/class-cast-to-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -17,7 +17,7 @@ trait noisy {\n struct cat {\n   meows : uint,\n \n-  how_hungry : int,\n+  how_hungry : isize,\n   name : String,\n }\n \n@@ -50,7 +50,7 @@ impl cat {\n     }\n }\n \n-fn cat(in_x : uint, in_y : int, in_name: String) -> cat {\n+fn cat(in_x : uint, in_y : isize, in_name: String) -> cat {\n     cat {\n         meows: in_x,\n         how_hungry: in_y,"}, {"sha": "f8ddf83c9c637d080ce1687009d75408ae891a83", "filename": "src/test/compile-fail/coherence-all-remote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,7 +13,7 @@\n extern crate \"coherence-lib\" as lib;\n use lib::Remote1;\n \n-impl<T> Remote1<T> for int { }\n+impl<T> Remote1<T> for isize { }\n //~^ ERROR E0117\n \n fn main() { }"}, {"sha": "684773098cd959accdc4540d8ee89ddc6e827291", "filename": "src/test/compile-fail/coherence-bigint-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-int.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -15,6 +15,6 @@ use lib::Remote1;\n \n pub struct BigInt;\n \n-impl Remote1<BigInt> for int { } //~ ERROR E0117\n+impl Remote1<BigInt> for isize { } //~ ERROR E0117\n \n fn main() { }"}, {"sha": "28747674b8b10a40ecc1a490ab89b273b47520c2", "filename": "src/test/compile-fail/coherence-bigint-vecint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-vecint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-vecint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-vecint.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -15,6 +15,6 @@ use lib::Remote1;\n \n pub struct BigInt;\n \n-impl Remote1<BigInt> for Vec<int> { } //~ ERROR E0117\n+impl Remote1<BigInt> for Vec<isize> { } //~ ERROR E0117\n \n fn main() { }"}, {"sha": "1372d9930ee350e59e65ccb6cad00f4b7e0dd440", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-blanket-implemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -23,7 +23,7 @@ trait Even { }\n \n trait Odd { }\n \n-impl Even for int { }\n+impl Even for isize { }\n \n impl Odd for uint { }\n "}, {"sha": "1f6bb08871c76db6ff94850c8fb35d2c3be3548f", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-specific-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -19,11 +19,11 @@ use std::default::Default;\n struct MyThingy;\n \n impl Go for MyThingy {\n-    fn go(&self, arg: int) { }\n+    fn go(&self, arg: isize) { }\n }\n \n impl GoMut for MyThingy { //~ ERROR conflicting implementations\n-    fn go_mut(&mut self, arg: int) { }\n+    fn go_mut(&mut self, arg: isize) { }\n }\n \n fn main() { }"}, {"sha": "568a35cc589636d71712c05e7253246c93fbd45d", "filename": "src/test/compile-fail/coherence-orphan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,10 +16,10 @@ use lib::TheTrait;\n \n struct TheType;\n \n-impl TheTrait<uint> for int { } //~ ERROR E0117\n+impl TheTrait<uint> for isize { } //~ ERROR E0117\n \n-impl TheTrait<TheType> for int { } //~ ERROR E0117\n+impl TheTrait<TheType> for isize { } //~ ERROR E0117\n \n-impl TheTrait<int> for TheType { }\n+impl TheTrait<isize> for TheType { }\n \n fn main() { }"}, {"sha": "305acfec40114aad89cc92258594b8cc07c338b4", "filename": "src/test/compile-fail/comm-not-freeze-receiver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,5 +13,5 @@ use std::sync::mpsc::Receiver;\n fn test<T: Sync>() {}\n \n fn main() {\n-    test::<Receiver<int>>();   //~ ERROR: `core::marker::Sync` is not implemented\n+    test::<Receiver<isize>>();   //~ ERROR: `core::marker::Sync` is not implemented\n }"}, {"sha": "de2c96920c38b45d8bcbfe5d38a32eb54a2c0ec3", "filename": "src/test/compile-fail/comm-not-freeze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,5 +13,5 @@ use std::sync::mpsc::Sender;\n fn test<T: Sync>() {}\n \n fn main() {\n-    test::<Sender<int>>();     //~ ERROR: `core::marker::Sync` is not implemented\n+    test::<Sender<isize>>();     //~ ERROR: `core::marker::Sync` is not implemented\n }"}, {"sha": "ad05c7c423f958c01c054e4f65f83ab28bef031d", "filename": "src/test/compile-fail/const-recursive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fconst-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fconst-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-recursive.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // error-pattern: recursive constant\n-static a: int = b;\n-static b: int = a;\n+static a: isize = b;\n+static b: isize = a;\n \n fn main() {\n }"}, {"sha": "1201db437b9615d052318702036966740dc4275c", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,14 +10,14 @@\n \n #[derive(Show)]\n struct foo {\n-  i: int,\n+  i: isize,\n }\n \n impl Drop for foo {\n     fn drop(&mut self) {}\n }\n \n-fn foo(i:int) -> foo {\n+fn foo(i:isize) -> foo {\n     foo {\n         i: i\n     }"}, {"sha": "901f0c58f458d744b9620f2254adb7174720f520", "filename": "src/test/compile-fail/deriving-primitive.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,25 +9,25 @@\n // except according to those terms.\n \n use std::num::FromPrimitive;\n-use std::int;\n+use std::isize;\n \n #[derive(FromPrimitive)]\n-struct A { x: int }\n+struct A { x: isize }\n //~^^ ERROR `FromPrimitive` cannot be derived for structs\n //~^^^ ERROR `FromPrimitive` cannot be derived for structs\n \n #[derive(FromPrimitive)]\n-struct B(int);\n+struct B(isize);\n //~^^ ERROR `FromPrimitive` cannot be derived for structs\n //~^^^ ERROR `FromPrimitive` cannot be derived for structs\n \n #[derive(FromPrimitive)]\n-enum C { Foo(int), Bar(uint) }\n+enum C { Foo(isize), Bar(uint) }\n //~^^ ERROR `FromPrimitive` cannot be derived for enum variants with arguments\n //~^^^ ERROR `FromPrimitive` cannot be derived for enum variants with arguments\n \n #[derive(FromPrimitive)]\n-enum D { Baz { x: int } }\n+enum D { Baz { x: isize } }\n //~^^ ERROR `FromPrimitive` cannot be derived for enums with struct variants\n //~^^^ ERROR `FromPrimitive` cannot be derived for enums with struct variants\n "}, {"sha": "89062576a50ad334be7fdd0ef96df9550f1d2113", "filename": "src/test/compile-fail/destructure-trait-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -14,7 +14,7 @@\n #![feature(box_syntax)]\n \n trait T {}\n-impl T for int {}\n+impl T for isize {}\n \n fn main() {\n     // For an expression of the form:"}, {"sha": "26b247d0d0f2eb01f97109aa278a35494f25064b", "filename": "src/test/compile-fail/drop-on-non-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-impl<'a> Drop for &'a mut int {\n+impl<'a> Drop for &'a mut isize {\n     //~^ ERROR the Drop trait may only be implemented on structures\n     //~^^ ERROR E0117\n     fn drop(&mut self) {"}, {"sha": "7dbb8fc92e345bd3021f2485628f9dcd7ab332a1", "filename": "src/test/compile-fail/dst-bad-assign-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,7 +13,7 @@\n #![feature(box_syntax)]\n \n struct Fat<T: ?Sized> {\n-    f1: int,\n+    f1: isize,\n     f2: &'static str,\n     ptr: T\n }\n@@ -23,19 +23,19 @@ struct Bar;\n \n #[derive(PartialEq,Eq)]\n struct Bar1 {\n-    f: int\n+    f: isize\n }\n \n trait ToBar {\n     fn to_bar(&self) -> Bar;\n-    fn to_val(&self) -> int;\n+    fn to_val(&self) -> isize;\n }\n \n impl ToBar for Bar1 {\n     fn to_bar(&self) -> Bar {\n         Bar\n     }\n-    fn to_val(&self) -> int {\n+    fn to_val(&self) -> isize {\n         self.f\n     }\n }"}, {"sha": "634b5999e9ef28c33bb5adf313ee1ca0f44b1468", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,7 +13,7 @@\n #![feature(box_syntax)]\n \n struct Fat<T: ?Sized> {\n-    f1: int,\n+    f1: isize,\n     f2: &'static str,\n     ptr: T\n }\n@@ -23,19 +23,19 @@ struct Bar;\n \n #[derive(PartialEq,Eq)]\n struct Bar1 {\n-    f: int\n+    f: isize\n }\n \n trait ToBar {\n     fn to_bar(&self) -> Bar;\n-    fn to_val(&self) -> int;\n+    fn to_val(&self) -> isize;\n }\n \n impl ToBar for Bar1 {\n     fn to_bar(&self) -> Bar {\n         Bar\n     }\n-    fn to_val(&self) -> int {\n+    fn to_val(&self) -> isize {\n         self.f\n     }\n }"}, {"sha": "160197368d6d983c673f924eb1508fbd62e1a3b1", "filename": "src/test/compile-fail/dst-bad-coerce2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -21,8 +21,8 @@ impl Bar for Foo {}\n pub fn main() {\n     // With a vec of ints.\n     let f1 = Fat { ptr: [1, 2, 3] };\n-    let f2: &Fat<[int; 3]> = &f1;\n-    let f3: &mut Fat<[int]> = f2; //~ ERROR mismatched types\n+    let f2: &Fat<[isize; 3]> = &f1;\n+    let f3: &mut Fat<[isize]> = f2; //~ ERROR mismatched types\n \n     // With a trait.\n     let f1 = Fat { ptr: Foo };"}, {"sha": "347a2d2ecbe68599cff25e0f6804a01c110d28eb", "filename": "src/test/compile-fail/dst-bad-coerce3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce3.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -21,8 +21,8 @@ impl Bar for Foo {}\n fn baz<'a>() {\n     // With a vec of ints.\n     let f1 = Fat { ptr: [1, 2, 3] };\n-    let f2: &Fat<[int; 3]> = &f1; //~ ERROR `f1` does not live long enough\n-    let f3: &'a Fat<[int]> = f2;\n+    let f2: &Fat<[isize; 3]> = &f1; //~ ERROR `f1` does not live long enough\n+    let f3: &'a Fat<[isize]> = f2;\n \n     // With a trait.\n     let f1 = Fat { ptr: Foo };"}, {"sha": "354898f6cf0ecece29adf544a654db552aeb64eb", "filename": "src/test/compile-fail/dst-bad-deep.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -18,8 +18,8 @@ struct Fat<T: ?Sized> {\n }\n \n pub fn main() {\n-    let f: Fat<[int; 3]> = Fat { ptr: [5i, 6, 7] };\n-    let g: &Fat<[int]> = &f;\n-    let h: &Fat<Fat<[int]>> = &Fat { ptr: *g };\n+    let f: Fat<[isize; 3]> = Fat { ptr: [5i, 6, 7] };\n+    let g: &Fat<[isize]> = &f;\n+    let h: &Fat<Fat<[isize]>> = &Fat { ptr: *g };\n     //~^ ERROR the trait `core::marker::Sized` is not implemented\n }"}, {"sha": "6e33fdf3f7bd04b735ca317d3446b671412fd4cb", "filename": "src/test/compile-fail/dst-rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -17,8 +17,8 @@ pub fn main() {\n     //~^ ERROR E0161\n     //~^^ ERROR cannot move out of dereference\n \n-    let array: &[int] = &[1, 2, 3];\n-    let _x: Box<[int]> = box *array;\n+    let array: &[isize] = &[1, 2, 3];\n+    let _x: Box<[isize]> = box *array;\n     //~^ ERROR E0161\n     //~^^ ERROR cannot move out of dereference\n }"}, {"sha": "18ec55e10bb9a0410c1b54f6568687281275b0a6", "filename": "src/test/compile-fail/duplicate-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fduplicate-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fduplicate-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fduplicate-parameter.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(a: int, a: int) {}\n+fn f(a: isize, a: isize) {}\n //~^ ERROR identifier `a` is bound more than once in this parameter list\n \n fn main() {"}, {"sha": "f3d8fcf31d76c057c3813188e998167d0f33bb7b", "filename": "src/test/compile-fail/enum-and-module-in-same-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n mod Foo {\n-    pub static X: int = 42;\n+    pub static X: isize = 42;\n }\n \n enum Foo {  //~ ERROR duplicate definition of type or module `Foo`"}, {"sha": "55e9b6d6ece9c6d5f93b6c7f87e57d9f435be443", "filename": "src/test/compile-fail/enum-discrim-too-small.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -53,6 +53,6 @@ enum Ei32 {\n // u64 currently allows negative numbers, and i64 allows numbers greater than `1<<63`.  This is a\n // little counterintuitive, but since the discriminant can store all the bits, and extracting it\n // with a cast requires specifying the signedness, there is no loss of information in those cases.\n-// This also applies to int and uint on 64-bit targets.\n+// This also applies to isize and uint on 64-bit targets.\n \n pub fn main() { }"}, {"sha": "7be06ec7de81223cb53e512e1ee756433d3cb150", "filename": "src/test/compile-fail/enum-in-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct hello(int);\n+struct hello(isize);\n \n fn main() {\n     let hello = 0; //~ERROR declaration of `hello` shadows"}, {"sha": "90030488dd60bb5f7ea0d25130b8928dde1f278a", "filename": "src/test/compile-fail/explicit-call-to-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Foo {\n-    x: int\n+    x: isize\n }\n \n impl Drop for Foo {"}, {"sha": "63ed74dfa490efe10a6f3bc2d7db629a2f7ff0da", "filename": "src/test/compile-fail/explicit-call-to-supertrait-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Foo {\n-    x: int\n+    x: isize\n }\n \n trait Bar : Drop {"}, {"sha": "fbc5263d82d1018a0d3825953784eea47c077ddb", "filename": "src/test/compile-fail/explicit-self-lifetime-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n struct Foo<'a,'b> {\n-    x: &'a int,\n-    y: &'b int,\n+    x: &'a isize,\n+    y: &'b isize,\n }\n \n impl<'a,'b> Foo<'a,'b> {"}, {"sha": "3a391e7c609ff35dd72d07d254e6bb9b65334366", "filename": "src/test/compile-fail/export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,8 +10,8 @@\n \n // error-pattern: unresolved name\n mod foo {\n-    pub fn x(y: int) { log(debug, y); }\n-    fn z(y: int) { log(debug, y); }\n+    pub fn x(y: isize) { log(debug, y); }\n+    fn z(y: isize) { log(debug, y); }\n }\n \n fn main() { foo::z(10); }"}, {"sha": "668c9980a2eddff533383b9659defe0574d3fb5f", "filename": "src/test/compile-fail/feature-gate-int-uint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -20,11 +20,11 @@ mod u {\n     }\n }\n mod i {\n-    type X = int; //~ WARN the `int` type is deprecated\n+    type X = isize; //~ WARN the `isize` type is deprecated\n     struct Foo {\n-        x: int //~ WARN the `int` type is deprecated\n+        x: isize //~ WARN the `isize` type is deprecated\n     }\n-    fn bar(x: int) { //~ WARN the `int` type is deprecated\n+    fn bar(x: isize) { //~ WARN the `isize` type is deprecated\n         1i; //~ WARN the `u` suffix on integers is deprecated\n     }\n }"}, {"sha": "c5c355cfbce84c2e606b20952f72c416bdeaac0e", "filename": "src/test/compile-fail/fn-bad-block-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Ffn-bad-block-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Ffn-bad-block-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-bad-block-type.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern:mismatched types\n \n-fn f() -> int { true }\n+fn f() -> isize { true }\n \n fn main() { }"}, {"sha": "b2394a29899e71ff0eaa23deb2946edd7dcf97ba", "filename": "src/test/compile-fail/fn-item-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,8 +11,8 @@\n // Test that the types of distinct fn items are not compatible by\n // default. See also `run-pass/fn-item-type-*.rs`.\n \n-fn foo(x: int) -> int { x * 2 }\n-fn bar(x: int) -> int { x * 4 }\n+fn foo(x: isize) -> isize { x * 2 }\n+fn bar(x: isize) -> isize { x * 4 }\n \n fn eq<T>(x: T, y: T) { }\n "}, {"sha": "838e65e1d0574718d893ed2856e2daab64c0d057", "filename": "src/test/compile-fail/fn-variance-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn takes_imm(x: &int) { }\n+fn takes_imm(x: &isize) { }\n \n-fn takes_mut(x: &mut int) { }\n+fn takes_mut(x: &mut isize) { }\n \n fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n     f(t)"}, {"sha": "fd920f923944de0f1f1f9b0808f4850a54a38109", "filename": "src/test/compile-fail/for-loop-bogosity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n struct MyStruct {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n impl MyStruct {\n-    fn next(&mut self) -> Option<int> {\n+    fn next(&mut self) -> Option<isize> {\n         Some(self.x)\n     }\n }"}, {"sha": "46a18c981835b5f962f9efc6618188622328ea52", "filename": "src/test/compile-fail/forget-init-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,6 +12,6 @@ use std::intrinsics::{init, forget};\n \n // Test that the `forget` and `init` intrinsics are really unsafe\n pub fn main() {\n-    let stuff = init::<int>(); //~ ERROR call to unsafe function requires unsafe\n+    let stuff = init::<isize>(); //~ ERROR call to unsafe function requires unsafe\n     forget(stuff);             //~ ERROR call to unsafe function requires unsafe\n }"}, {"sha": "c69c30216f9e196c2e950595f7c42f763f92b466", "filename": "src/test/compile-fail/fully-qualified-type-name3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name3.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,7 +13,7 @@\n // ignore-test\n \n type T1 = uint;\n-type T2 = int;\n+type T2 = isize;\n \n fn bar(x: T1) -> T2 {\n     return x;"}, {"sha": "7ce32bbc975c6f4d0b8fbd103d10e84e6c942436", "filename": "src/test/compile-fail/functional-struct-update-noncopyable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,7 +12,7 @@\n \n use std::sync::Arc;\n \n-struct A { y: Arc<int>, x: Arc<int> }\n+struct A { y: Arc<isize>, x: Arc<isize> }\n \n impl Drop for A {\n     fn drop(&mut self) { println!(\"x={}\", *self.x); }"}, {"sha": "f4b9830d579a4593b73ddd82923290723b45c768", "filename": "src/test/compile-fail/gated-non-ascii-idents.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -17,22 +17,22 @@ mod f\u00f6\u00f6 { //~ ERROR non-ascii idents\n }\n \n fn b\u00e4r( //~ ERROR non-ascii idents\n-    b\u00e4z: int //~ ERROR non-ascii idents\n+    b\u00e4z: isize //~ ERROR non-ascii idents\n     ) {\n-    let _\u00f6: int; //~ ERROR non-ascii idents\n+    let _\u00f6: isize; //~ ERROR non-ascii idents\n \n     match (1, 2) {\n         (_\u00e4, _) => {} //~ ERROR non-ascii idents\n     }\n }\n \n struct F\u00f6\u00f6 { //~ ERROR non-ascii idents\n-    f\u00f6\u00f6: int //~ ERROR non-ascii idents\n+    f\u00f6\u00f6: isize //~ ERROR non-ascii idents\n }\n \n enum B\u00e4r { //~ ERROR non-ascii idents\n     B\u00e4z { //~ ERROR non-ascii idents\n-        q\u00fcx: int //~ ERROR non-ascii idents\n+        q\u00fcx: isize //~ ERROR non-ascii idents\n     }\n }\n "}, {"sha": "02f09749d614d359b49e2ac85093762bed9136a5", "filename": "src/test/compile-fail/generic-impl-less-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -15,6 +15,6 @@ impl<A, B, C = (A, B)> Foo<A, B, C> {\n }\n \n fn main() {\n-    Foo::<int>::new();\n+    Foo::<isize>::new();\n     //~^ ERROR too few type parameters provided\n }"}, {"sha": "d88da2625c187cba2fc872afec0620f37ce028ed", "filename": "src/test/compile-fail/generic-impl-more-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -17,6 +17,6 @@ impl<T, A = Heap> Vec<T, A> {\n }\n \n fn main() {\n-    Vec::<int, Heap, bool>::new();\n+    Vec::<isize, Heap, bool>::new();\n     //~^ ERROR too many type parameters provided\n }"}, {"sha": "19d303488acb0f6d077d56da7a8e4ba76af184c8", "filename": "src/test/compile-fail/generic-type-more-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,6 +13,6 @@ struct Heap;\n struct Vec<T, A = Heap>;\n \n fn main() {\n-    let _: Vec<int, Heap, bool>;\n+    let _: Vec<isize, Heap, bool>;\n     //~^ ERROR wrong number of type arguments: expected at most 2, found 3\n }"}, {"sha": "fce8a07d7270d3444fb83e4343a77e2bc90f7886", "filename": "src/test/compile-fail/glob-resolve1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -23,7 +23,7 @@ mod bar {\n \n     struct C;\n \n-    type D = int;\n+    type D = isize;\n }\n \n fn foo<T>() {}"}, {"sha": "3efe0501267e9b1ac6c5f031ac022586e3562548", "filename": "src/test/compile-fail/hrtb-conflate-regions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fhrtb-conflate-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fhrtb-conflate-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-conflate-regions.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,12 +16,12 @@ trait Foo<X> {\n }\n \n fn want_foo2<T>()\n-    where T : for<'a,'b> Foo<(&'a int, &'b int)>\n+    where T : for<'a,'b> Foo<(&'a isize, &'b isize)>\n {\n }\n \n fn want_foo1<T>()\n-    where T : for<'z> Foo<(&'z int, &'z int)>\n+    where T : for<'z> Foo<(&'z isize, &'z isize)>\n {\n }\n \n@@ -30,7 +30,7 @@ fn want_foo1<T>()\n \n struct SomeStruct;\n \n-impl<'a> Foo<(&'a int, &'a int)> for SomeStruct\n+impl<'a> Foo<(&'a isize, &'a isize)> for SomeStruct\n {\n }\n "}, {"sha": "249256f8e01a6a0e6f2da50b6f279640caa72245", "filename": "src/test/compile-fail/hrtb-higher-ranker-supertraits-transitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits-transitive.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,13 +12,13 @@\n \n trait Foo<'tcx>\n {\n-    fn foo(&'tcx self) -> &'tcx int;\n+    fn foo(&'tcx self) -> &'tcx isize;\n }\n \n trait Bar<'ccx>\n     : for<'tcx> Foo<'tcx>\n {\n-    fn bar(&'ccx self) -> &'ccx int;\n+    fn bar(&'ccx self) -> &'ccx isize;\n }\n \n trait Baz"}, {"sha": "441ad76b6023ca980430def642c4c8e7ef77372a", "filename": "src/test/compile-fail/hrtb-higher-ranker-supertraits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,13 +12,13 @@\n \n trait Foo<'tcx>\n {\n-    fn foo(&'tcx self) -> &'tcx int;\n+    fn foo(&'tcx self) -> &'tcx isize;\n }\n \n trait Bar<'ccx>\n     : for<'tcx> Foo<'tcx>\n {\n-    fn bar(&'ccx self) -> &'ccx int;\n+    fn bar(&'ccx self) -> &'ccx isize;\n }\n \n fn want_foo_for_some_tcx<'x,F>(f: &'x F)"}, {"sha": "17939cf9fe026aee6f4c7d22301fe872de0acdfd", "filename": "src/test/compile-fail/hrtb-identity-fn-borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fhrtb-identity-fn-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fhrtb-identity-fn-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-identity-fn-borrows.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,7 +16,7 @@ trait FnLike<A,R> {\n }\n \n fn call_repeatedly<F>(f: F)\n-    where F : for<'a> FnLike<&'a int, &'a int>\n+    where F : for<'a> FnLike<&'a isize, &'a isize>\n {\n     // Result is stored: cannot re-assign `x`\n     let mut x = 3;"}, {"sha": "99927d8b9bf5518d5bfee7903441443f6996de5b", "filename": "src/test/compile-fail/immut-function-arguments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n \n-fn f(y: Box<int>) {\n+fn f(y: Box<isize>) {\n     *y = 5; //~ ERROR cannot assign\n }\n \n fn g() {\n-    let _frob = |&: q: Box<int>| { *q = 2; }; //~ ERROR cannot assign\n+    let _frob = |&: q: Box<isize>| { *q = 2; }; //~ ERROR cannot assign\n \n }\n "}, {"sha": "8c8f67e40abef59af082a594b670b2e9a9122eb6", "filename": "src/test/compile-fail/impl-bounds-checking.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimpl-bounds-checking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimpl-bounds-checking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-bounds-checking.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -17,8 +17,8 @@ trait Getter<T: Clone2> {\n     fn get(&self) -> T;\n }\n \n-impl Getter<int> for int { //~ ERROR the trait `Clone2` is not implemented\n-    fn get(&self) -> int { *self }\n+impl Getter<isize> for isize { //~ ERROR the trait `Clone2` is not implemented\n+    fn get(&self) -> isize { *self }\n }\n \n fn main() { }"}, {"sha": "7a7673d871d7564158588ad6e4ca9af2f9364239", "filename": "src/test/compile-fail/impl-not-adjacent-to-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimpl-not-adjacent-to-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimpl-not-adjacent-to-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-not-adjacent-to-type.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,8 +10,8 @@\n \n mod foo {\n     pub struct Foo {\n-        x: int,\n-        y: int,\n+        x: isize,\n+        y: isize,\n     }\n }\n "}, {"sha": "c9399afbb93b2a998d29e6cac491d9dfc6fb32ed", "filename": "src/test/compile-fail/impl-unused-tps.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimpl-unused-tps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimpl-unused-tps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-unused-tps.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,19 +16,19 @@ trait Bar {\n     type Out;\n }\n \n-impl<T> Foo<T> for [int;0] {\n+impl<T> Foo<T> for [isize;0] {\n     // OK, T is used in `Foo<T>`.\n }\n \n-impl<T,U> Foo<T> for [int;1] {\n+impl<T,U> Foo<T> for [isize;1] {\n     //~^ ERROR the type parameter `U` is not constrained\n }\n \n-impl<T,U> Foo<T> for [int;2] where T : Bar<Out=U> {\n+impl<T,U> Foo<T> for [isize;2] where T : Bar<Out=U> {\n     // OK, `U` is now constrained by the output type parameter.\n }\n \n-impl<T:Bar<Out=U>,U> Foo<T> for [int;3] {\n+impl<T:Bar<Out=U>,U> Foo<T> for [isize;3] {\n     // OK, same as above but written differently.\n }\n "}, {"sha": "503fa4eca527bbc9c1b1639076d43d79837af58f", "filename": "src/test/compile-fail/import-shadow-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimport-shadow-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimport-shadow-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-1.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,11 +16,11 @@ use foo::*;\n use bar::*; //~ERROR a type named `Baz` has already been imported in this module\n \n mod foo {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod bar {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod qux {"}, {"sha": "0c107cf27f5928fc96087c3bcc325e0de6cd9962", "filename": "src/test/compile-fail/import-shadow-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimport-shadow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimport-shadow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-2.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,11 +16,11 @@ use foo::*;\n use foo::*; //~ERROR a type named `Baz` has already been imported in this module\n \n mod foo {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod bar {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod qux {"}, {"sha": "bf90973c2857e7a8039d7a0685cf9157ef2728fb", "filename": "src/test/compile-fail/import-shadow-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimport-shadow-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimport-shadow-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-3.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,11 +16,11 @@ use foo::Baz;\n use bar::*; //~ERROR a type named `Baz` has already been imported in this module\n \n mod foo {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod bar {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod qux {"}, {"sha": "f21fdaae47ba0e29e5f789afec78e05271321e42", "filename": "src/test/compile-fail/import-shadow-4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimport-shadow-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimport-shadow-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-4.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,11 +16,11 @@ use foo::*;\n use bar::Baz; //~ERROR a type named `Baz` has already been imported in this module\n \n mod foo {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod bar {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod qux {"}, {"sha": "dc300bc7baa7705823103a9f7c2f37382eb8399a", "filename": "src/test/compile-fail/import-shadow-5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimport-shadow-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimport-shadow-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-5.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,11 +16,11 @@ use foo::Baz;\n use bar::Baz; //~ERROR a type named `Baz` has already been imported in this module\n \n mod foo {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod bar {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod qux {"}, {"sha": "fa3b75c70f0b68a75250c93b5c50638e20257bf6", "filename": "src/test/compile-fail/import-shadow-6.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimport-shadow-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimport-shadow-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-6.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,11 +16,11 @@ use qux::*;\n use foo::*; //~ERROR a type named `Baz` has already been imported in this module\n \n mod foo {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod bar {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod qux {"}, {"sha": "34aba15b3922892d781b5b15545ec9f39115f10e", "filename": "src/test/compile-fail/import-shadow-7.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimport-shadow-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fimport-shadow-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-7.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,11 +16,11 @@ use foo::*;\n use qux::*; //~ERROR a type named `Baz` has already been imported in this module\n \n mod foo {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod bar {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod qux {"}, {"sha": "e40457a86c96f9c1cbe2db1a6fd3edd8093f8ffe", "filename": "src/test/compile-fail/indexing-requires-a-uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -20,7 +20,7 @@ fn main() {\n \n     let i = 0;      // i is an IntVar\n     [0][i];         // i should be locked to uint\n-    bar::<int>(i);  // i should not be re-coerced back to an int\n+    bar::<isize>(i);  // i should not be re-coerced back to an isize\n     //~^ ERROR: mismatched types\n }\n "}, {"sha": "a57c015d684b6c8510e94c647b19163a36c6e978", "filename": "src/test/compile-fail/infinite-tag-type-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,6 +11,6 @@\n \n // error-pattern: illegal recursive enum type; wrap the inner value in a box\n \n-enum mlist { cons(int, mlist), nil, }\n+enum mlist { cons(isize, mlist), nil, }\n \n fn main() { let a = mlist::cons(10, mlist::cons(11, mlist::nil)); }"}, {"sha": "2eb66816cba3623b4f2912165503a7ab23314b98", "filename": "src/test/compile-fail/int-literal-too-large-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fint-literal-too-large-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fint-literal-too-large-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fint-literal-too-large-span.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,7 +11,7 @@\n // issue #17123\n \n fn main() {\n-    100000000000000000000000000000000 //~ ERROR int literal is too large\n+    100000000000000000000000000000000 //~ ERROR isize literal is too large\n \n         ; // the span shouldn't point to this.\n }"}, {"sha": "08a8f72a6686dfb2581865d0a56caa8416487ec2", "filename": "src/test/compile-fail/integral-indexing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let v: Vec<int> = vec!(0, 1, 2, 3, 4, 5);\n+    let v: Vec<isize> = vec!(0, 1, 2, 3, 4, 5);\n     let s: String = \"abcdef\".to_string();\n     v.as_slice()[3u];\n     v.as_slice()[3];"}, {"sha": "a80d393155539ed1e3b10b0f6f5c3143373a31c4", "filename": "src/test/compile-fail/intrinsic-return-address.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fintrinsic-return-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fintrinsic-return-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintrinsic-return-address.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -20,7 +20,7 @@ unsafe fn f() {\n     //~^ ERROR invalid use of `return_address` intrinsic: function does not use out pointer\n }\n \n-unsafe fn g() -> int {\n+unsafe fn g() -> isize {\n     let _ = return_address();\n     //~^ ERROR invalid use of `return_address` intrinsic: function does not use out pointer\n     0"}, {"sha": "45f6e55914a1b07ba3a8c28cd3e87dc4858ee94f", "filename": "src/test/compile-fail/issue-10291.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,8 +10,8 @@\n \n #![feature(box_syntax)]\n \n-fn test<'x>(x: &'x int) {\n-    drop::<Box<for<'z> FnMut(&'z int) -> &'z int>>(box |z| {\n+fn test<'x>(x: &'x isize) {\n+    drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(box |z| {\n         x\n         //~^ ERROR cannot infer an appropriate lifetime\n     });"}, {"sha": "b077081c5b0c819f52ab9ebf9902ca4db3f70d40", "filename": "src/test/compile-fail/issue-10392-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-10392-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-10392-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10392-2.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct A { foo: int }\n+struct A { foo: isize }\n \n fn a() -> A { panic!() }\n "}, {"sha": "3f8d26bfec05d2fad0cf89648384aa54cdd7aed7", "filename": "src/test/compile-fail/issue-10392.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-10392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-10392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10392.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct A { foo: int }\n+struct A { foo: isize }\n \n fn a() -> A { panic!() }\n "}, {"sha": "a92ef24892432353bc42ac87c6c96c4bb1465079", "filename": "src/test/compile-fail/issue-10636-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-10636-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-10636-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10636-2.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub fn trace_option(option: Option<int>) {\n+pub fn trace_option(option: Option<isize>) {\n     option.map(|some| 42; //~ NOTE: unclosed delimiter\n } //~ ERROR: incorrect close delimiter"}, {"sha": "132298eba99e4e0722a30a593eb3373db9c017b9", "filename": "src/test/compile-fail/issue-10877.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-10877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-10877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10877.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Foo { x: int }\n+struct Foo { x: isize }\n extern {\n     fn foo(1: ());\n     //~^ ERROR: patterns aren't allowed in foreign function declarations\n-    fn bar((): int);\n+    fn bar((): isize);\n     //~^ ERROR: patterns aren't allowed in foreign function declarations\n-    fn baz(Foo { x }: int);\n+    fn baz(Foo { x }: isize);\n     //~^ ERROR: patterns aren't allowed in foreign function declarations\n     fn qux((x,y): ());\n     //~^ ERROR: patterns aren't allowed in foreign function declarations"}, {"sha": "0d7a846bff633d8c7969ae93240e5837092889ca", "filename": "src/test/compile-fail/issue-11192.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n struct Foo {\n-    x: int\n+    x: isize\n }\n \n impl Drop for Foo {"}, {"sha": "dd3fad978eb59ddf49eaa9cfa0a5788e98db2df7", "filename": "src/test/compile-fail/issue-11714.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn blah() -> int { //~ ERROR not all control paths return a value\n+fn blah() -> isize { //~ ERROR not all control paths return a value\n     1i\n \n     ; //~ HELP consider removing this semicolon:"}, {"sha": "6f75909fada78552313db666390fc7f12582956e", "filename": "src/test/compile-fail/issue-12116.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-12116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-12116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12116.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n enum IntList {\n-    Cons(int, Box<IntList>),\n+    Cons(isize, Box<IntList>),\n     Nil\n }\n "}, {"sha": "c06082de3cd08ae10ce68cc83320de81f993674c", "filename": "src/test/compile-fail/issue-12127.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-12127.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-12127.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12127.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(box_syntax)]\n \n-fn do_it(x: &int) { }\n+fn do_it(x: &isize) { }\n \n fn main() {\n     let x = box 22;"}, {"sha": "0587bdf6136b8ffe4e4b0af7c7eb0e59bbc566d7", "filename": "src/test/compile-fail/issue-12369.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let sl = vec![1,2,3];\n-    let v: int = match sl.as_slice() {\n+    let v: isize = match sl.as_slice() {\n         [] => 0,\n         [a,b,c] => 3,\n         [a, rest..] => a,"}, {"sha": "93785817e14f36107e704becf360d63f5538fa11", "filename": "src/test/compile-fail/issue-12470.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-12470.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-12470.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12470.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,16 +11,16 @@\n #![feature(box_syntax)]\n \n trait X {\n-    fn get_i(&self) -> int;\n+    fn get_i(&self) -> isize;\n }\n \n \n struct B {\n-    i: int\n+    i: isize\n }\n \n impl X for B {\n-    fn get_i(&self) -> int {\n+    fn get_i(&self) -> isize {\n         self.i\n     }\n }"}, {"sha": "2d8d7857c99fb9feb6a4007e8a831903331323aa", "filename": "src/test/compile-fail/issue-12997-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-12997-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-12997-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12997-1.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,4 +16,4 @@\n fn foo() { } //~ ERROR functions used as benches\n \n #[bench]\n-fn bar(x: int, y: int) { } //~ ERROR functions used as benches\n+fn bar(x: isize, y: isize) { } //~ ERROR functions used as benches"}, {"sha": "607874de49d703f26c1a5c587006771515aff7c1", "filename": "src/test/compile-fail/issue-13359.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-13359.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-13359.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13359.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,7 +13,7 @@ fn foo(_s: i16) { }\n fn bar(_s: u32) { }\n \n fn main() {\n-    foo(1*(1 as int));\n+    foo(1*(1 as isize));\n     //~^ ERROR: mismatched types: expected `i16`, found `isize` (expected i16, found isize)\n \n     bar(1*(1 as uint));"}, {"sha": "b0db9e58dba31b8c8236039209a34f3910ae2f6c", "filename": "src/test/compile-fail/issue-13853-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-13853-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-13853-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13853-4.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct AutoBuilder<'a> {\n-    context: &'a int\n+    context: &'a isize\n }\n \n impl<'a> Drop for AutoBuilder<'a> {"}, {"sha": "364951a4feafb3b825635e7aff45c73754e35e57", "filename": "src/test/compile-fail/issue-14182.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-14182.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-14182.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14182.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,8 +11,8 @@\n // ignore-test FIXME(japari) remove test\n \n struct Foo {\n-    f: for <'b> |&'b int|:\n-      'b -> &'b int //~ ERROR use of undeclared lifetime name `'b`\n+    f: for <'b> |&'b isize|:\n+      'b -> &'b isize //~ ERROR use of undeclared lifetime name `'b`\n }\n \n fn main() {"}, {"sha": "74eea0c57a01aaf3e29e86a5b197986134119815", "filename": "src/test/compile-fail/issue-14254.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-14254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-14254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14254.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -15,7 +15,7 @@ trait Foo {\n }\n \n struct BarTy {\n-    x : int,\n+    x : isize,\n     y : f64,\n }\n \n@@ -76,7 +76,7 @@ impl Foo for Box<BarTy> {\n     }\n }\n \n-impl Foo for *const int {\n+impl Foo for *const isize {\n     fn bar(&self) {\n         baz();\n         //~^ ERROR: unresolved name `baz`. Did you mean to call `self.baz`?\n@@ -85,7 +85,7 @@ impl Foo for *const int {\n     }\n }\n \n-impl<'a> Foo for &'a int {\n+impl<'a> Foo for &'a isize {\n     fn bar(&self) {\n         baz();\n         //~^ ERROR: unresolved name `baz`. Did you mean to call `self.baz`?\n@@ -94,7 +94,7 @@ impl<'a> Foo for &'a int {\n     }\n }\n \n-impl<'a> Foo for &'a mut int {\n+impl<'a> Foo for &'a mut isize {\n     fn bar(&self) {\n         baz();\n         //~^ ERROR: unresolved name `baz`. Did you mean to call `self.baz`?\n@@ -103,7 +103,7 @@ impl<'a> Foo for &'a mut int {\n     }\n }\n \n-impl Foo for Box<int> {\n+impl Foo for Box<isize> {\n     fn bar(&self) {\n         baz();\n         //~^ ERROR: unresolved name `baz`. Did you mean to call `self.baz`?"}, {"sha": "c4a00581274ac4f0fda79b04f44209fcb2b29c64", "filename": "src/test/compile-fail/issue-14303-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-14303-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-14303-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14303-impl.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct X { x: int }\n+struct X { x: isize }\n \n impl<'a, T, 'b> X {}\n //~^ ERROR lifetime parameters must be declared prior to type parameters"}, {"sha": "7a7ba46de74f3925055efd5f777aff27ff5d2100", "filename": "src/test/compile-fail/issue-15129.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-15129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-15129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15129.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -14,7 +14,7 @@ pub enum T {\n }\n \n pub enum V {\n-    V1(int),\n+    V1(isize),\n     V2(bool)\n }\n "}, {"sha": "b378d2f885e833a754a7e4ed8fb92f75fe8c4943", "filename": "src/test/compile-fail/issue-15524.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-15524.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-15524.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15524.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const N: int = 1;\n+const N: isize = 1;\n \n enum Foo {\n     A = 1,"}, {"sha": "a924cc9f9bbd5b23e69db20b753d0291e6f40922", "filename": "src/test/compile-fail/issue-16149.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-16149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-16149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16149.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n extern {\n-    static externalValue: int;\n+    static externalValue: isize;\n }\n \n fn main() {"}, {"sha": "825b40cb322df7529c29175c0646e5b3333c7d8c", "filename": "src/test/compile-fail/issue-16465.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-16465.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-16465.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16465.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -14,7 +14,7 @@ struct Foo<T>{\n     x : T\n }\n \n-type FooInt = Foo<int>;\n+type FooInt = Foo<isize>;\n \n impl Drop for FooInt {\n //~^ ERROR cannot implement a destructor on a structure with type parameters"}, {"sha": "543063b3fc968a225f2eb99ef54ef7d2b4c3041d", "filename": "src/test/compile-fail/issue-17263.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(box_syntax)]\n \n-struct Foo { a: int, b: int }\n+struct Foo { a: isize, b: isize }\n \n fn main() {\n     let mut x = box Foo { a: 1, b: 2 };"}, {"sha": "c71e0ecd494966e2073698a611671c3f1fcade05", "filename": "src/test/compile-fail/issue-17383.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-17383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-17383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17383.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,7 +12,7 @@ enum X {\n     A =\n         b'a' //~ ERROR discriminator values can only be used with a c-like enum\n     ,\n-    B(int)\n+    B(isize)\n }\n \n fn main() {}"}, {"sha": "e7cab292ea7ef5f5147367a998ff7e2f9a7dfe18", "filename": "src/test/compile-fail/issue-17385.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-17385.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-17385.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17385.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct X(int);\n+struct X(isize);\n \n enum Enum {\n     Variant1,"}, {"sha": "cb541835fbb0d83c429b44c5dc3bb68f1686e4a1", "filename": "src/test/compile-fail/issue-17405.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-17405.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-17405.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17405.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum Foo {\n-    Bar(int)\n+    Bar(isize)\n }\n \n fn main() {"}, {"sha": "5471d8522dffdc4f9a15e1d2da2df87bae5f5c96", "filename": "src/test/compile-fail/issue-17450.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-17450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-17450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17450.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,8 +10,8 @@\n \n #![allow(dead_code)]\n \n-static mut x: int = 3;\n-static mut y: int = unsafe {\n+static mut x: isize = 3;\n+static mut y: isize = unsafe {\n     x\n //~^ ERROR cannot refer to other statics by value, use the address-of operator or a constant instea\n };"}, {"sha": "15f66493f88429a5745e7ab6bd17f9dbb3dc3f0d", "filename": "src/test/compile-fail/issue-17718-const-naming.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-naming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-naming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-naming.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,7 +10,7 @@\n \n #[deny(warnings)]\n \n-const foo: int = 3;\n+const foo: isize = 3;\n //~^ ERROR: should have an uppercase name such as\n //~^^ ERROR: constant item is never used\n "}, {"sha": "129f28f1d89c7f50c2485711533808b67bf10160", "filename": "src/test/compile-fail/issue-18118.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-18118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-18118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18118.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    static z: &'static int = {\n+    static z: &'static isize = {\n         let p = 3;\n         &p\n //~^ ERROR cannot borrow a local variable inside a static block, define a separate static instead"}, {"sha": "5945a7a1c9a7e4e9d819f3a7917b2ad0f9b1c6e5", "filename": "src/test/compile-fail/issue-18423.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-18423.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-18423.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18423.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,7 +11,7 @@\n // Test that `Box` cannot be used with a lifetime parameter.\n \n struct Foo<'a> {\n-    x: Box<'a, int> //~ ERROR wrong number of lifetime parameters\n+    x: Box<'a, isize> //~ ERROR wrong number of lifetime parameters\n }\n \n pub fn main() {"}, {"sha": "1e68de1f92338f8f81ba24f20aa2245b0db58465", "filename": "src/test/compile-fail/issue-19096.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-19096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-19096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19096.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let t = (42i, 42i);\n-    t.0::<int>; //~ ERROR expected one of `.`, `;`, `}`, or an operator, found `::`\n+    t.0::<isize>; //~ ERROR expected one of `.`, `;`, `}`, or an operator, found `::`\n }"}, {"sha": "c3700f2f90acf85efe88e58100561ba21267da6e", "filename": "src/test/compile-fail/issue-19244-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-19244-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-19244-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19244-1.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,6 +11,6 @@\n const TUP: (uint,) = (42,);\n \n fn main() {\n-    let a: [int; TUP.1];\n+    let a: [isize; TUP.1];\n     //~^ ERROR expected constant expr for array length: tuple index out of bounds\n }"}, {"sha": "7c7271552d2ef310f3e21f65195c7e46b5760029", "filename": "src/test/compile-fail/issue-19244-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,6 +12,6 @@ struct MyStruct { field: uint }\n const STRUCT: MyStruct = MyStruct { field: 42 };\n \n fn main() {\n-    let a: [int; STRUCT.nonexistent_field];\n+    let a: [isize; STRUCT.nonexistent_field];\n     //~^ ERROR expected constant expr for array length: nonexistent struct field\n }"}, {"sha": "90b5ff8475e6121545d1f5ce22c96722cc361792", "filename": "src/test/compile-fail/issue-2150.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,7 +12,7 @@\n #![allow(unused_variables)]\n #![allow(dead_code)]\n \n-fn fail_len(v: Vec<int> ) -> uint {\n+fn fail_len(v: Vec<isize> ) -> uint {\n     let mut i = 3;\n     panic!();\n     for x in v.iter() { i += 1u; }"}, {"sha": "63f146a21d925a73b616b0519e054923d4d8893f", "filename": "src/test/compile-fail/issue-2330.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -15,8 +15,8 @@ trait channel<T> {\n }\n \n // `chan` is not a trait, it's an enum\n-impl chan for int { //~ ERROR `chan` is not a trait\n-    fn send(&self, v: int) { panic!() }\n+impl chan for isize { //~ ERROR `chan` is not a trait\n+    fn send(&self, v: isize) { panic!() }\n }\n \n fn main() {"}, {"sha": "d37837b9714f04756bea35f96cda541420f64b64", "filename": "src/test/compile-fail/issue-2354-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2354-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2354-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2354-1.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static foo: int = 2; } //~ ERROR incorrect close delimiter:\n+static foo: isize = 2; } //~ ERROR incorrect close delimiter:\n "}, {"sha": "d6acc13c2897c26236f36d44c6f9376b40318623", "filename": "src/test/compile-fail/issue-2356.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,7 +13,7 @@ trait Groom {\n }\n \n pub struct cat {\n-  whiskers: int,\n+  whiskers: isize,\n }\n \n pub enum MaybeDog {"}, {"sha": "3aea9c32e3ad244aaf126aa887aa74e67ec296b8", "filename": "src/test/compile-fail/issue-2478.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2478.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2478.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2478.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,8 +10,8 @@\n \n // ignore-test\n \n-fn foo<'a>() -> &'a int {  //~ ERROR unconstrained region\n+fn foo<'a>() -> &'a isize {  //~ ERROR unconstrained region\n     return &x;\n }\n-static x: int = 5;\n+static x: isize = 5;\n fn main() {}"}, {"sha": "60a270b2c944977b4dc1e3682c5c67a1b81bb1d8", "filename": "src/test/compile-fail/issue-2590.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,15 +10,15 @@\n \n \n struct parser {\n-    tokens: Vec<int> ,\n+    tokens: Vec<isize> ,\n }\n \n trait parse {\n-    fn parse(&self) -> Vec<int> ;\n+    fn parse(&self) -> Vec<isize> ;\n }\n \n impl parse for parser {\n-    fn parse(&self) -> Vec<int> {\n+    fn parse(&self) -> Vec<isize> {\n         self.tokens //~ ERROR cannot move out of dereference of `&`-pointer\n     }\n }"}, {"sha": "b141c1f441aeb436f08313a42b7d308d8ab7508a", "filename": "src/test/compile-fail/issue-2611-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,7 +16,7 @@ trait A {\n }\n \n struct E {\n- f: int\n+ f: isize\n }\n \n impl A for E {"}, {"sha": "440294f38ae9249ab62460b9f3cbe3e00c517c97", "filename": "src/test/compile-fail/issue-2611-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,7 +16,7 @@ trait A {\n }\n \n struct E {\n- f: int\n+ f: isize\n }\n \n impl A for E {"}, {"sha": "1996cb737fc725506164939330231ca29de659ae", "filename": "src/test/compile-fail/issue-2823.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct C {\n-    x: int,\n+    x: isize,\n }\n \n impl Drop for C {"}, {"sha": "48f4cac9711a8d31ebed0ba50a6a646358722e2d", "filename": "src/test/compile-fail/issue-2849.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2849.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2849.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2849.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum foo { alpha, beta(int) }\n+enum foo { alpha, beta(isize) }\n \n fn main() {\n     match foo::alpha {"}, {"sha": "8fbf97411cc7d0aaaf1c72fe4a3d060ff0f3310e", "filename": "src/test/compile-fail/issue-2995.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn bad (p: *const int) {\n-    let _q: &int = p as &int; //~ ERROR non-scalar cast\n+fn bad (p: *const isize) {\n+    let _q: &isize = p as &isize; //~ ERROR non-scalar cast\n }\n \n fn main() { }"}, {"sha": "1eec62df788019f4e4d331e4aeba7d3b86a2f9f1", "filename": "src/test/compile-fail/issue-3038.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum f { g(int, int) }\n+enum f { g(isize, isize) }\n \n enum h { i(j, k) }\n \n-enum j { l(int, int) }\n-enum k { m(int, int) }\n+enum j { l(isize, isize) }\n+enum k { m(isize, isize) }\n \n fn main()\n {"}, {"sha": "678618d721692a9db1d3885679bba38fbacc1939", "filename": "src/test/compile-fail/issue-3521-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,7 +11,7 @@\n fn main() {\n     let foo = 100;\n \n-    static y: int = foo + 1; //~ ERROR: attempt to use a non-constant value in a constant\n+    static y: isize = foo + 1; //~ ERROR: attempt to use a non-constant value in a constant\n \n     println!(\"{}\", y);\n }"}, {"sha": "0577b1527234d03b48c62f1d69ccc56909c7c9d9", "filename": "src/test/compile-fail/issue-3668-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3668-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3668-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668-2.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(x:int) {\n-    static child: int = x + 1; //~ ERROR attempt to use a non-constant value in a constant\n+fn f(x:isize) {\n+    static child: isize = x + 1; //~ ERROR attempt to use a non-constant value in a constant\n }\n \n fn main() {}"}, {"sha": "2b732899ea42fb222bcd21faa287520dbd955e61", "filename": "src/test/compile-fail/issue-3702-2.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3702-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3702-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3702-2.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,13 +11,13 @@\n use std::num::ToPrimitive;\n \n trait Add {\n-    fn to_int(&self) -> int;\n-    fn add_dynamic(&self, other: &Add) -> int;\n+    fn to_int(&self) -> isize;\n+    fn add_dynamic(&self, other: &Add) -> isize;\n }\n \n-impl Add for int {\n-    fn to_int(&self) -> int { *self }\n-    fn add_dynamic(&self, other: &Add) -> int {\n+impl Add for isize {\n+    fn to_int(&self) -> isize { *self }\n+    fn add_dynamic(&self, other: &Add) -> isize {\n         self.to_int() + other.to_int() //~ ERROR multiple applicable methods in scope\n     }\n }"}, {"sha": "6e6c19a5bf6b08428a8024e7312b50edf5b2e927", "filename": "src/test/compile-fail/issue-3763.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,7 +12,7 @@\n \n mod my_mod {\n     pub struct MyStruct {\n-        priv_field: int\n+        priv_field: isize\n     }\n     pub fn MyStruct () -> MyStruct {\n         MyStruct {priv_field: 4}"}, {"sha": "28de76f18da765ca90a39a2a468a7d7cce0ab32a", "filename": "src/test/compile-fail/issue-3820.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n struct Thing {\n-    x: int\n+    x: isize\n }\n \n impl Thing {\n-    fn mul(&self, c: &int) -> Thing {\n+    fn mul(&self, c: &isize) -> Thing {\n         Thing {x: self.x * *c}\n     }\n }"}, {"sha": "9a166a6752b7e8a22680725592357baa8824196d", "filename": "src/test/compile-fail/issue-3907-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3907-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3907-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3907-2.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -14,7 +14,7 @@ extern crate issue_3907;\n type Foo = issue_3907::Foo+'static;\n \n struct S {\n-    name: int\n+    name: isize\n }\n \n fn bar(_x: Foo) {} //~ ERROR the trait `core::marker::Sized` is not implemented"}, {"sha": "001de796b4ad75df9c916bec1ed06bd77238a422", "filename": "src/test/compile-fail/issue-3907.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -14,7 +14,7 @@ extern crate issue_3907;\n type Foo = issue_3907::Foo;\n \n struct S {\n-    name: int\n+    name: isize\n }\n \n impl Foo for S { //~ ERROR: `Foo` is not a trait"}, {"sha": "0f1dd2d7fd6a80867a5f60ba1803bf6d4d25a628", "filename": "src/test/compile-fail/issue-3953.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,7 +16,7 @@ trait Hahaha: PartialEq + PartialEq {\n     //~^ ERROR trait `PartialEq` already appears in the list of bounds\n }\n \n-struct Lol(int);\n+struct Lol(isize);\n \n impl Hahaha for Lol { }\n "}, {"sha": "e8dfac45447445da1cea9559368afe6f827110d4", "filename": "src/test/compile-fail/issue-4366-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -18,7 +18,7 @@ mod foo {\n mod a {\n     pub mod b {\n         use foo::foo;\n-        type bar = int;\n+        type bar = isize;\n     }\n     pub mod sub {\n         use a::b::*;"}, {"sha": "5625ac00c85d74831d11f5d66f45e9897635d256", "filename": "src/test/compile-fail/issue-4366.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -21,11 +21,11 @@ mod foo {\n mod a {\n     pub mod b {\n         use foo::foo;\n-        type bar = int;\n+        type bar = isize;\n     }\n     pub mod sub {\n         use a::b::*;\n-        fn sub() -> int { foo(); 1 } //~ ERROR: unresolved name `foo`\n+        fn sub() -> isize { foo(); 1 } //~ ERROR: unresolved name `foo`\n     }\n }\n "}, {"sha": "cdf9d3bd36ecefcf1f32de2f0a317ecc7cdf2d45", "filename": "src/test/compile-fail/issue-5035.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,6 +10,6 @@\n \n trait I {}\n type K = I;\n-impl K for int {} //~ ERROR: `K` is not a trait\n+impl K for isize {} //~ ERROR: `K` is not a trait\n //~^ NOTE: `type` aliases cannot be used for traits\n fn main() {}"}, {"sha": "c10c7cba455596b7da19a298632a8b1480fc0938", "filename": "src/test/compile-fail/issue-5153.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-5153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-5153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5153.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -14,8 +14,8 @@ trait Foo {\n     fn foo(self: Box<Self>);\n }\n \n-impl Foo for int {\n-    fn foo(self: Box<int>) { }\n+impl Foo for isize {\n+    fn foo(self: Box<isize>) { }\n }\n \n fn main() {"}, {"sha": "4e618f3d858485b16fc0477fbd9a7d90c87f287f", "filename": "src/test/compile-fail/issue-5439.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-5439.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-5439.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5439.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,15 +11,15 @@\n #![feature(box_syntax)]\n \n struct Foo {\n-    foo: int,\n+    foo: isize,\n }\n \n struct Bar {\n-    bar: int,\n+    bar: isize,\n }\n \n impl Bar {\n-    fn make_foo (&self, i: int) -> Box<Foo> {\n+    fn make_foo (&self, i: isize) -> Box<Foo> {\n         return box Foo { nonexistent: self, foo: i }; //~ ERROR: no field named\n     }\n }"}, {"sha": "6db126f403a4a9c00611887597754e6621fb9bd5", "filename": "src/test/compile-fail/issue-5544-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-5544-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-5544-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5544-a.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let _i = 18446744073709551616; // 2^64\n-    //~^ ERROR int literal is too large\n+    //~^ ERROR isize literal is too large\n }"}, {"sha": "4b04fe1a36aaa004c2c1d1fea950db5d8a2fdfc1", "filename": "src/test/compile-fail/issue-5544-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-5544-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-5544-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5544-b.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let _i = 0xff_ffff_ffff_ffff_ffff;\n-    //~^ ERROR int literal is too large\n+    //~^ ERROR isize literal is too large\n }"}, {"sha": "ad485f2d3302be7805f448326f6631e590255e76", "filename": "src/test/compile-fail/issue-5997-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-5997-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-5997-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5997-enum.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,6 +16,6 @@ fn f<Z>() -> bool {\n }\n \n fn main() {\n-    let b = f::<int>();\n+    let b = f::<isize>();\n     assert!(b);\n }"}, {"sha": "587c7c63f4cf103bba15ae823d9ce33efef9851c", "filename": "src/test/compile-fail/issue-5997-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-5997-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-5997-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5997-struct.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,6 +16,6 @@ fn f<T>() -> bool {\n }\n \n fn main() {\n-    let b = f::<int>();\n+    let b = f::<isize>();\n     assert!(b);\n }"}, {"sha": "d035c615ec3781a5d16f08da9bc10d479884593d", "filename": "src/test/compile-fail/issue-6702.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-6702.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-6702.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6702.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Monster {\n-    damage: int\n+    damage: isize\n }\n \n "}, {"sha": "6f9fb2e61f2a81f255e456731c3da3b898a952b1", "filename": "src/test/compile-fail/issue-7044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-7044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-7044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7044.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static X: int = 0;\n+static X: isize = 0;\n struct X; //~ ERROR error: duplicate definition of value `X`\n \n fn main() {}"}, {"sha": "2e644b65402344f1310aaa6e34d55b9f3ee03c7d", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,7 +13,7 @@\n use std::cell::RefCell;\n \n // Regresion test for issue 7364\n-static boxed: Box<RefCell<int>> = box RefCell::new(0);\n+static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n //~^ ERROR statics are not allowed to have custom pointers\n //~| ERROR: the trait `core::marker::Sync` is not implemented for the type\n //~| ERROR: the trait `core::marker::Sync` is not implemented for the type"}, {"sha": "48fc393d0da8e1cabeddd386cff78b130c727158", "filename": "src/test/compile-fail/issue-7607-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-7607-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-7607-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7607-1.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,7 +11,7 @@\n // ignore-tidy-linelength\n \n struct Foo {\n-    x: int\n+    x: isize\n }\n \n impl Fo { //~ERROR inherent implementations are not allowed for types not defined in the current module"}, {"sha": "ea7224939ce56364f20a2020ed987ef1a99b6056", "filename": "src/test/compile-fail/issue-8153.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-8153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-8153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8153.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,12 +13,12 @@\n struct Foo;\n \n trait Bar {\n-    fn bar(&self) -> int;\n+    fn bar(&self) -> isize;\n }\n \n impl Bar for Foo {\n-    fn bar(&self) -> int {1}\n-    fn bar(&self) -> int {2} //~ ERROR duplicate method\n+    fn bar(&self) -> isize {1}\n+    fn bar(&self) -> isize {2} //~ ERROR duplicate method\n }\n \n fn main() {"}, {"sha": "808aa098c5a28c1c317c1e99d518a3a9ff26df29", "filename": "src/test/compile-fail/issue-9243.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-9243.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-9243.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-9243.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,7 +11,7 @@\n // Regresion test for issue 9243\n \n struct Test {\n-    mem: int,\n+    mem: isize,\n }\n \n pub static g_test: Test = Test {mem: 0}; //~ ERROR statics are not allowed to have destructors"}, {"sha": "1a3c926ba384ba9416c6c753d0117ac02c4fa2d2", "filename": "src/test/compile-fail/issue-9725.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-9725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-9725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-9725.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct A { foo: int }\n+struct A { foo: isize }\n \n fn main() {\n     let A { foo, foo } = A { foo: 3 };"}, {"sha": "8aefc5919d13313ddf71a67d5d0fa9730447bb78", "filename": "src/test/compile-fail/issue-9814.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-9814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fissue-9814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-9814.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,7 +11,7 @@\n // Verify that single-variant enums cant be de-referenced\n // Regression test for issue #9814\n \n-enum Foo { Bar(int) }\n+enum Foo { Bar(isize) }\n \n fn main() {\n     let _ = *Foo::Bar(2); //~ ERROR type `Foo` cannot be dereferenced"}, {"sha": "0c94f76f1f6f6d511a31568d4f1fb1a1ae66fa39", "filename": "src/test/compile-fail/keyword-super.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fkeyword-super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fkeyword-super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkeyword-super.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let super: int; //~ ERROR expected identifier, found keyword `super`\n+    let super: isize; //~ ERROR expected identifier, found keyword `super`\n }"}, {"sha": "4398be4b212da19e0cd3c668e9fa40dfd21e4be2", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -18,8 +18,8 @@ fn assert_copy<T:Copy>() { }\n trait Dummy { }\n \n struct MyStruct {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n impl Copy for MyStruct {}\n@@ -28,22 +28,22 @@ struct MyNoncopyStruct {\n     x: Box<char>,\n }\n \n-fn test<'a,T,U:Copy>(_: &'a int) {\n+fn test<'a,T,U:Copy>(_: &'a isize) {\n     // lifetime pointers are ok...\n-    assert_copy::<&'static int>();\n-    assert_copy::<&'a int>();\n+    assert_copy::<&'static isize>();\n+    assert_copy::<&'a isize>();\n     assert_copy::<&'a str>();\n-    assert_copy::<&'a [int]>();\n+    assert_copy::<&'a [isize]>();\n \n     // ...unless they are mutable\n-    assert_copy::<&'static mut int>(); //~ ERROR `core::marker::Copy` is not implemented\n-    assert_copy::<&'a mut int>();  //~ ERROR `core::marker::Copy` is not implemented\n+    assert_copy::<&'static mut isize>(); //~ ERROR `core::marker::Copy` is not implemented\n+    assert_copy::<&'a mut isize>();  //~ ERROR `core::marker::Copy` is not implemented\n \n     // ~ pointers are not ok\n-    assert_copy::<Box<int>>();   //~ ERROR `core::marker::Copy` is not implemented\n+    assert_copy::<Box<isize>>();   //~ ERROR `core::marker::Copy` is not implemented\n     assert_copy::<String>();   //~ ERROR `core::marker::Copy` is not implemented\n-    assert_copy::<Vec<int> >(); //~ ERROR `core::marker::Copy` is not implemented\n-    assert_copy::<Box<&'a mut int>>(); //~ ERROR `core::marker::Copy` is not implemented\n+    assert_copy::<Vec<isize> >(); //~ ERROR `core::marker::Copy` is not implemented\n+    assert_copy::<Box<&'a mut isize>>(); //~ ERROR `core::marker::Copy` is not implemented\n \n     // borrowed object types are generally ok\n     assert_copy::<&'a Dummy>();\n@@ -58,16 +58,16 @@ fn test<'a,T,U:Copy>(_: &'a int) {\n     assert_copy::<&'a mut (Dummy+Copy)>();  //~ ERROR `core::marker::Copy` is not implemented\n \n     // unsafe ptrs are ok\n-    assert_copy::<*const int>();\n-    assert_copy::<*const &'a mut int>();\n+    assert_copy::<*const isize>();\n+    assert_copy::<*const &'a mut isize>();\n \n     // regular old ints and such are ok\n-    assert_copy::<int>();\n+    assert_copy::<isize>();\n     assert_copy::<bool>();\n     assert_copy::<()>();\n \n     // tuples are ok\n-    assert_copy::<(int,int)>();\n+    assert_copy::<(isize,isize)>();\n \n     // structs of POD are ok\n     assert_copy::<MyStruct>();\n@@ -76,7 +76,7 @@ fn test<'a,T,U:Copy>(_: &'a int) {\n     assert_copy::<MyNoncopyStruct>(); //~ ERROR `core::marker::Copy` is not implemented\n \n     // ref counted types are not ok\n-    assert_copy::<Rc<int>>();   //~ ERROR `core::marker::Copy` is not implemented\n+    assert_copy::<Rc<isize>>();   //~ ERROR `core::marker::Copy` is not implemented\n }\n \n pub fn main() {"}, {"sha": "7f3704144bef6c24105e43bd6caca4345a2e402c", "filename": "src/test/compile-fail/kindck-destructor-owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,7 +10,7 @@\n \n \n struct Bar<'a> {\n-    f: &'a int,\n+    f: &'a isize,\n }\n \n impl<'a> Drop for Bar<'a> {\n@@ -20,7 +20,7 @@ impl<'a> Drop for Bar<'a> {\n }\n \n struct Baz {\n-    f: &'static int,\n+    f: &'static isize,\n }\n \n impl Drop for Baz {"}, {"sha": "5d090689415442289859784afe39c680654aba91", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -34,8 +34,8 @@ fn g<T>(val: T) {\n }\n \n fn foo<'a>() {\n-    let t: S<&'a int> = S;\n-    let a = &t as &Gettable<&'a int>;\n+    let t: S<&'a isize> = S;\n+    let a = &t as &Gettable<&'a isize>;\n     //~^ ERROR declared lifetime bound not satisfied\n }\n "}, {"sha": "7025249fafb6e778e4fc05e82717e4c50f52aff7", "filename": "src/test/compile-fail/kindck-send-owned.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,13 +13,13 @@\n fn assert_send<T:Send>() { }\n \n // owned content are ok\n-fn test30() { assert_send::<Box<int>>(); }\n+fn test30() { assert_send::<Box<isize>>(); }\n fn test31() { assert_send::<String>(); }\n-fn test32() { assert_send::<Vec<int> >(); }\n+fn test32() { assert_send::<Vec<isize> >(); }\n \n // but not if they own a bad thing\n-fn test40<'a>(_: &'a int) {\n-    assert_send::<Box<&'a int>>(); //~ ERROR declared lifetime bound not satisfied\n+fn test40<'a>(_: &'a isize) {\n+    assert_send::<Box<&'a isize>>(); //~ ERROR declared lifetime bound not satisfied\n }\n \n fn main() { }"}, {"sha": "c6987e89e3af21649b3264aebdd2bdd07bb05344", "filename": "src/test/compile-fail/kindck-send-region-pointers.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fkindck-send-region-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fkindck-send-region-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-region-pointers.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,22 +13,22 @@\n fn assert_send<T:Send>() { }\n \n // lifetime pointers with 'static lifetime are ok\n-fn test01() { assert_send::<&'static int>(); }\n+fn test01() { assert_send::<&'static isize>(); }\n fn test02() { assert_send::<&'static str>(); }\n-fn test03() { assert_send::<&'static [int]>(); }\n+fn test03() { assert_send::<&'static [isize]>(); }\n \n // whether or not they are mutable\n-fn test10() { assert_send::<&'static mut int>(); }\n+fn test10() { assert_send::<&'static mut isize>(); }\n \n // otherwise lifetime pointers are not ok\n-fn test20<'a>(_: &'a int) {\n-    assert_send::<&'a int>(); //~ ERROR declared lifetime bound not satisfied\n+fn test20<'a>(_: &'a isize) {\n+    assert_send::<&'a isize>(); //~ ERROR declared lifetime bound not satisfied\n }\n-fn test21<'a>(_: &'a int) {\n+fn test21<'a>(_: &'a isize) {\n     assert_send::<&'a str>(); //~ ERROR declared lifetime bound not satisfied\n }\n-fn test22<'a>(_: &'a int) {\n-    assert_send::<&'a [int]>(); //~ ERROR declared lifetime bound not satisfied\n+fn test22<'a>(_: &'a isize) {\n+    assert_send::<&'a [isize]>(); //~ ERROR declared lifetime bound not satisfied\n }\n \n fn main() { }"}, {"sha": "bce765a986a22fccc6fc206abe1c1e0e04b6c292", "filename": "src/test/compile-fail/kindck-send-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,7 +13,7 @@ extern crate core;\n fn assert_send<T:Send>() { }\n \n fn test71<'a>() {\n-    assert_send::<*mut &'a int>();\n+    assert_send::<*mut &'a isize>();\n     //~^ ERROR the trait `core::marker::Send` is not implemented for the type\n }\n "}, {"sha": "793d9c77c3bc43eef391bc54f746b676c45f938d", "filename": "src/test/compile-fail/lang-item-missing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flang-item-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flang-item-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flang-item-missing.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,6 +16,6 @@\n #![no_std]\n \n #[start]\n-fn start(argc: int, argv: *const *const u8) -> int {\n+fn start(argc: isize, argv: *const *const u8) -> isize {\n     0\n }"}, {"sha": "273a7627d73bf455c0df0eb7fafbb8f87bd75477", "filename": "src/test/compile-fail/lex-bad-numeric-literals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flex-bad-numeric-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flex-bad-numeric-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flex-bad-numeric-literals.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -21,8 +21,8 @@ fn main() {\n     0o; //~ ERROR: no valid digits\n     1e+; //~ ERROR: expected at least one digit in exponent\n     0x539.0; //~ ERROR: hexadecimal float literal is not supported\n-    99999999999999999999999999999999; //~ ERROR: int literal is too large\n-    99999999999999999999999999999999u32; //~ ERROR: int literal is too large\n+    99999999999999999999999999999999; //~ ERROR: isize literal is too large\n+    99999999999999999999999999999999u32; //~ ERROR: isize literal is too large\n     0x; //~ ERROR: no valid digits\n     0xu32; //~ ERROR: no valid digits\n     0ou32; //~ ERROR: no valid digits"}, {"sha": "55cce0163354050ef534b03109b61b9b5202bce6", "filename": "src/test/compile-fail/lifetime-elision-return-type-requires-explicit-lifetime.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flifetime-elision-return-type-requires-explicit-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flifetime-elision-return-type-requires-explicit-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-elision-return-type-requires-explicit-lifetime.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,29 +9,29 @@\n // except according to those terms.\n \n // Lifetime annotation needed because we have no arguments.\n-fn f() -> &int {    //~ ERROR missing lifetime specifier\n+fn f() -> &isize {    //~ ERROR missing lifetime specifier\n //~^ HELP there is no value for it to be borrowed from\n     panic!()\n }\n \n // Lifetime annotation needed because we have two by-reference parameters.\n-fn g(_x: &int, _y: &int) -> &int {    //~ ERROR missing lifetime specifier\n+fn g(_x: &isize, _y: &isize) -> &isize {    //~ ERROR missing lifetime specifier\n //~^ HELP the signature does not say whether it is borrowed from `_x` or `_y`\n     panic!()\n }\n \n struct Foo<'a> {\n-    x: &'a int,\n+    x: &'a isize,\n }\n \n // Lifetime annotation needed because we have two lifetimes: one as a parameter\n // and one on the reference.\n-fn h(_x: &Foo) -> &int { //~ ERROR missing lifetime specifier\n+fn h(_x: &Foo) -> &isize { //~ ERROR missing lifetime specifier\n //~^ HELP the signature does not say which one of `_x`'s 2 elided lifetimes it is borrowed from\n     panic!()\n }\n \n-fn i(_x: int) -> &int { //~ ERROR missing lifetime specifier\n+fn i(_x: isize) -> &isize { //~ ERROR missing lifetime specifier\n //~^ HELP this function's return type contains a borrowed value\n     panic!()\n }"}, {"sha": "18ef30f5b2812f09cdf0b3157bd9827e92a8206c", "filename": "src/test/compile-fail/lifetime-inference-give-expl-lifetime-param-3.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-3.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,17 +10,17 @@\n \n // ignore-tidy-linelength\n \n-struct Bar<'x, 'y, 'z> { bar: &'y int, baz: int }\n-fn bar1<'a>(x: &Bar) -> (&'a int, &'a int, &'a int) {\n-//~^ HELP: consider using an explicit lifetime parameter as shown: fn bar1<'b, 'c, 'a>(x: &'a Bar<'b, 'a, 'c>) -> (&'a int, &'a int, &'a int)\n+struct Bar<'x, 'y, 'z> { bar: &'y isize, baz: isize }\n+fn bar1<'a>(x: &Bar) -> (&'a isize, &'a isize, &'a isize) {\n+//~^ HELP: consider using an explicit lifetime parameter as shown: fn bar1<'b, 'c, 'a>(x: &'a Bar<'b, 'a, 'c>) -> (&'a isize, &'a isize, &'a isize)\n     (x.bar, &x.baz, &x.baz)\n     //~^ ERROR: cannot infer\n     //~^^ ERROR: cannot infer\n     //~^^^ ERROR: cannot infer\n }\n \n-fn bar2<'a, 'b, 'c>(x: &Bar<'a, 'b, 'c>) -> (&'a int, &'a int, &'a int) {\n-//~^ HELP: consider using an explicit lifetime parameter as shown: fn bar2<'a, 'c>(x: &'a Bar<'a, 'a, 'c>) -> (&'a int, &'a int, &'a int)\n+fn bar2<'a, 'b, 'c>(x: &Bar<'a, 'b, 'c>) -> (&'a isize, &'a isize, &'a isize) {\n+//~^ HELP: consider using an explicit lifetime parameter as shown: fn bar2<'a, 'c>(x: &'a Bar<'a, 'a, 'c>) -> (&'a isize, &'a isize, &'a isize)\n     (x.bar, &x.baz, &x.baz)\n     //~^ ERROR: cannot infer\n     //~^^ ERROR: cannot infer"}, {"sha": "c60e321219bd266884261ff5034d01d6bd03d90c", "filename": "src/test/compile-fail/lifetime-inference-give-expl-lifetime-param.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -10,43 +10,43 @@\n \n // ignore-tidy-linelength\n \n-struct Foo<'x> { bar: int }\n-fn foo1<'a>(x: &Foo) -> &'a int {\n-//~^ HELP: consider using an explicit lifetime parameter as shown: fn foo1<'a>(x: &'a Foo) -> &'a int\n+struct Foo<'x> { bar: isize }\n+fn foo1<'a>(x: &Foo) -> &'a isize {\n+//~^ HELP: consider using an explicit lifetime parameter as shown: fn foo1<'a>(x: &'a Foo) -> &'a isize\n     &x.bar //~ ERROR: cannot infer\n }\n \n-fn foo2<'a, 'b>(x: &'a Foo) -> &'b int {\n-//~^ HELP: consider using an explicit lifetime parameter as shown: fn foo2<'a>(x: &'a Foo) -> &'a int\n+fn foo2<'a, 'b>(x: &'a Foo) -> &'b isize {\n+//~^ HELP: consider using an explicit lifetime parameter as shown: fn foo2<'a>(x: &'a Foo) -> &'a isize\n     &x.bar //~ ERROR: cannot infer\n }\n \n-fn foo3<'a>(x: &Foo) -> (&'a int, &'a int) {\n-//~^ HELP: consider using an explicit lifetime parameter as shown: fn foo3<'a>(x: &'a Foo) -> (&'a int, &'a int)\n+fn foo3<'a>(x: &Foo) -> (&'a isize, &'a isize) {\n+//~^ HELP: consider using an explicit lifetime parameter as shown: fn foo3<'a>(x: &'a Foo) -> (&'a isize, &'a isize)\n     (&x.bar, &x.bar) //~ ERROR: cannot infer\n     //~^ ERROR: cannot infer\n }\n \n-fn foo4<'a, 'b>(x: &'a Foo) -> (&'b int, &'a int, &'b int) {\n-//~^ HELP: consider using an explicit lifetime parameter as shown: fn foo4<'a>(x: &'a Foo) -> (&'a int, &'a int, &'a int)\n+fn foo4<'a, 'b>(x: &'a Foo) -> (&'b isize, &'a isize, &'b isize) {\n+//~^ HELP: consider using an explicit lifetime parameter as shown: fn foo4<'a>(x: &'a Foo) -> (&'a isize, &'a isize, &'a isize)\n     (&x.bar, &x.bar, &x.bar) //~ ERROR: cannot infer\n     //~^ ERROR: cannot infer\n }\n \n-struct Cat<'x, T> { cat: &'x int, t: T }\n-struct Dog<'y> { dog: &'y int }\n+struct Cat<'x, T> { cat: &'x isize, t: T }\n+struct Dog<'y> { dog: &'y isize }\n \n-fn cat2<'x, 'y>(x: Cat<'x, Dog<'y>>) -> &'x int {\n-//~^ HELP: consider using an explicit lifetime parameter as shown: fn cat2<'x>(x: Cat<'x, Dog<'x>>) -> &'x int\n+fn cat2<'x, 'y>(x: Cat<'x, Dog<'y>>) -> &'x isize {\n+//~^ HELP: consider using an explicit lifetime parameter as shown: fn cat2<'x>(x: Cat<'x, Dog<'x>>) -> &'x isize\n     x.t.dog //~ ERROR: cannot infer\n }\n \n struct Baz<'x> {\n-    bar: &'x int\n+    bar: &'x isize\n }\n \n impl<'a> Baz<'a> {\n-    fn baz2<'b>(&self, x: &int) -> (&'b int, &'b int) {\n+    fn baz2<'b>(&self, x: &isize) -> (&'b isize, &'b isize) {\n         // The lifetime that gets assigned to `x` seems somewhat random.\n         // I have disabled this test for the time being. --pcwalton\n         (self.bar, x) //~ ERROR: cannot infer"}, {"sha": "8ffbcd90df8775f67b5aab2839765d63fe2548f5", "filename": "src/test/compile-fail/lifetime-no-keyword.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flifetime-no-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flifetime-no-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-no-keyword.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo<'a>(a: &'a int) { }\n-fn bar(a: &'static int) { }\n-fn baz(a: &'let int) { } //~ ERROR invalid lifetime name\n+fn foo<'a>(a: &'a isize) { }\n+fn bar(a: &'static isize) { }\n+fn baz(a: &'let isize) { } //~ ERROR invalid lifetime name\n \n fn main() { }"}, {"sha": "766922f2f886443a5b8635c804eed18540c0e7a1", "filename": "src/test/compile-fail/lifetime-obsoleted-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flifetime-obsoleted-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flifetime-obsoleted-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-obsoleted-self.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn baz(a: &'self int) { } //~ ERROR invalid lifetime name: 'self is no longer a special lifetime\n+fn baz(a: &'self isize) { } //~ ERROR invalid lifetime name: 'self is no longer a special lifetime\n \n fn main() { }"}, {"sha": "555cc2b9a7aad95c8c43b10932550e08154b65c8", "filename": "src/test/compile-fail/linkage1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flinkage1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flinkage1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flinkage1.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n extern {\n-    #[linkage = \"extern_weak\"] static foo: int;\n+    #[linkage = \"extern_weak\"] static foo: isize;\n     //~^ ERROR: the `linkage` attribute is experimental and not portable\n }"}, {"sha": "635d58e04c7ab14142413220c8ba829e25bbd8df", "filename": "src/test/compile-fail/linkage4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flinkage4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flinkage4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flinkage4.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #[linkage = \"external\"]\n-static foo: int = 0;\n+static foo: isize = 0;\n //~^ ERROR: the `linkage` attribute is experimental and not portable\n \n fn main() {}"}, {"sha": "e0ed095b1a1dc91da3b99d66fc30905e6a9d3816", "filename": "src/test/compile-fail/lint-ctypes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,9 +13,9 @@\n extern crate libc;\n \n extern {\n-    pub fn bare_type1(size: int); //~ ERROR: found rust type\n+    pub fn bare_type1(size: isize); //~ ERROR: found rust type\n     pub fn bare_type2(size: uint); //~ ERROR: found rust type\n-    pub fn ptr_type1(size: *const int); //~ ERROR: found rust type\n+    pub fn ptr_type1(size: *const isize); //~ ERROR: found rust type\n     pub fn ptr_type2(size: *const uint); //~ ERROR: found rust type\n \n     pub fn good1(size: *const libc::c_int);"}, {"sha": "e55922db3d5fc75d8050c855750c6efdd7069eed", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -29,28 +29,28 @@ mod foo2 {\n     pub struct Bar2;\n }\n \n-pub static pub_static: int = 0;\n-static priv_static: int = 0; //~ ERROR: static item is never used\n-const used_static: int = 0;\n-pub static used_static2: int = used_static;\n-const USED_STATIC: int = 0;\n-const STATIC_USED_IN_ENUM_DISCRIMINANT: int = 10;\n-\n-pub const pub_const: int = 0;\n-const priv_const: int = 0; //~ ERROR: constant item is never used\n-const used_const: int = 0;\n-pub const used_const2: int = used_const;\n-const USED_CONST: int = 1;\n-const CONST_USED_IN_ENUM_DISCRIMINANT: int = 11;\n+pub static pub_static: isize = 0;\n+static priv_static: isize = 0; //~ ERROR: static item is never used\n+const used_static: isize = 0;\n+pub static used_static2: isize = used_static;\n+const USED_STATIC: isize = 0;\n+const STATIC_USED_IN_ENUM_DISCRIMINANT: isize = 10;\n+\n+pub const pub_const: isize = 0;\n+const priv_const: isize = 0; //~ ERROR: constant item is never used\n+const used_const: isize = 0;\n+pub const used_const2: isize = used_const;\n+const USED_CONST: isize = 1;\n+const CONST_USED_IN_ENUM_DISCRIMINANT: isize = 11;\n \n pub type typ = *const UsedStruct4;\n pub struct PubStruct;\n struct PrivStruct; //~ ERROR: struct is never used\n struct UsedStruct1 {\n     #[allow(dead_code)]\n-    x: int\n+    x: isize\n }\n-struct UsedStruct2(int);\n+struct UsedStruct2(isize);\n struct UsedStruct3;\n struct UsedStruct4;\n // this struct is never used directly, but its method is, so we don't want"}, {"sha": "e8b85ffd69a448c266bf6f4192ea150ef6a9010e", "filename": "src/test/compile-fail/lint-dead-code-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-dead-code-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-dead-code-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-2.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -36,7 +36,7 @@ fn dead_fn2() {} //~ ERROR: function is never used\n fn used_fn() {}\n \n #[start]\n-fn start(_: int, _: *const *const u8) -> int {\n+fn start(_: isize, _: *const *const u8) -> isize {\n     used_fn();\n     let foo = Foo;\n     foo.bar2();"}, {"sha": "3662855a720494c5f635880193a0a187f6d43082", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -79,7 +79,7 @@ mod inner {\n         fn f(&self) { f(); }\n     }\n \n-    impl Trait for int {}\n+    impl Trait for isize {}\n \n     fn f() {}\n }"}, {"sha": "2653c1d5b2410f0c93de0928d5a54a01b04270f9", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -30,7 +30,7 @@ enum XYZ {\n     X, //~ ERROR variant is never used\n     Y { //~ ERROR variant is never used\n         a: String,\n-        b: int //~ ERROR: struct field is never used\n+        b: isize //~ ERROR: struct field is never used\n     },\n     Z\n }"}, {"sha": "04d6547d938125b6cf40f2059f7f92c373bddc57", "filename": "src/test/compile-fail/lint-dead-code-5.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,16 +12,16 @@\n #![deny(dead_code)]\n \n enum Enum1 {\n-    Variant1(int),\n+    Variant1(isize),\n     Variant2 //~ ERROR: variant is never used\n }\n \n enum Enum2 {\n     Variant3(bool),\n     #[allow(dead_code)]\n-    Variant4(int),\n-    Variant5 { _x: int }, //~ ERROR: variant is never used: `Variant5`\n-    Variant6(int), //~ ERROR: variant is never used: `Variant6`\n+    Variant4(isize),\n+    Variant5 { _x: isize }, //~ ERROR: variant is never used: `Variant5`\n+    Variant6(isize), //~ ERROR: variant is never used: `Variant6`\n     _Variant7,\n }\n "}, {"sha": "18159aec70844ae6e70c8dedd79f8d297738388d", "filename": "src/test/compile-fail/lint-directives-on-use-items-issue-10534.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-directives-on-use-items-issue-10534.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-directives-on-use-items-issue-10534.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-directives-on-use-items-issue-10534.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,7 +16,7 @@\n // ignored.\n \n #[allow(dead_code)]\n-mod a { pub static x: int = 3; pub static y: int = 4; }\n+mod a { pub static x: isize = 3; pub static y: isize = 4; }\n \n mod b {\n     use a::x; //~ ERROR: unused import"}, {"sha": "cbb416b62a6a202c2c6c4e8a6824c2788e2f4880", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -56,7 +56,7 @@ fn main() {\n       let n = 1u8 << (4+3);\n       let n = 1u8 << (4+4); //~ ERROR: bitshift exceeds the type's number of bits\n \n-      let n = 1i << std::int::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i << std::isize::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n       let n = 1u << std::uint::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n }\n "}, {"sha": "24d16bcaafc1a49f91a9feeb59c9578e25a2de2a", "filename": "src/test/compile-fail/lint-group-style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -24,7 +24,7 @@ mod test {\n     mod bad {\n         fn CamelCase() {} //~ ERROR function `CamelCase` should have a snake case name\n \n-        static bad: int = 1; //~ ERROR static constant `bad` should have an uppercase name\n+        static bad: isize = 1; //~ ERROR static constant `bad` should have an uppercase name\n     }\n \n     mod warn {"}, {"sha": "608aec327b63ac4ddf3f4d6e31910ac249070199", "filename": "src/test/compile-fail/lint-impl-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-impl-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-impl-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-impl-fn.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,7 +11,7 @@\n #![allow(while_true)]\n #![allow(dead_code)]\n \n-struct A(int);\n+struct A(isize);\n \n impl A {\n     fn foo(&self) { while true {} }\n@@ -22,7 +22,7 @@ impl A {\n \n #[deny(while_true)]\n mod foo {\n-    struct B(int);\n+    struct B(isize);\n \n     impl B {\n         fn foo(&self) { while true {} } //~ ERROR: infinite loops"}, {"sha": "55103f10f2ce1cc80a19a5a576b74a4b1b8e9e68", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -21,19 +21,19 @@ type Typedef = String;\n pub type PubTypedef = String; //~ ERROR: missing documentation\n \n struct Foo {\n-    a: int,\n-    b: int,\n+    a: isize,\n+    b: isize,\n }\n \n pub struct PubFoo { //~ ERROR: missing documentation\n-    pub a: int,      //~ ERROR: missing documentation\n-    b: int,\n+    pub a: isize,      //~ ERROR: missing documentation\n+    b: isize,\n }\n \n #[allow(missing_docs)]\n pub struct PubFoo2 {\n-    pub a: int,\n-    pub c: int,\n+    pub a: isize,\n+    pub c: isize,\n }\n \n mod module_no_dox {}\n@@ -100,15 +100,15 @@ mod a {\n \n enum Baz {\n     BazA {\n-        a: int,\n-        b: int\n+        a: isize,\n+        b: isize\n     },\n     BarB\n }\n \n pub enum PubBaz { //~ ERROR: missing documentation\n     PubBazA { //~ ERROR: missing documentation\n-        a: int, //~ ERROR: missing documentation\n+        a: isize, //~ ERROR: missing documentation\n     },\n }\n \n@@ -117,14 +117,14 @@ pub enum PubBaz2 {\n     /// dox\n     PubBaz2A {\n         /// dox\n-        a: int,\n+        a: isize,\n     },\n }\n \n #[allow(missing_docs)]\n pub enum PubBaz3 {\n     PubBaz3A {\n-        b: int\n+        b: isize\n     },\n }\n "}, {"sha": "70d6b240985b041d739ec542b2be5d30ba04a80b", "filename": "src/test/compile-fail/lint-non-camel-case-types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,18 +12,18 @@\n #![allow(dead_code)]\n \n struct foo { //~ ERROR type `foo` should have a camel case name such as `Foo`\n-    bar: int,\n+    bar: isize,\n }\n \n enum foo2 { //~ ERROR type `foo2` should have a camel case name such as `Foo2`\n     Bar\n }\n \n struct foo3 { //~ ERROR type `foo3` should have a camel case name such as `Foo3`\n-    bar: int\n+    bar: isize\n }\n \n-type foo4 = int; //~ ERROR type `foo4` should have a camel case name such as `Foo4`\n+type foo4 = isize; //~ ERROR type `foo4` should have a camel case name such as `Foo4`\n \n enum Foo5 {\n     bar //~ ERROR variant `bar` should have a camel case name such as `Bar`\n@@ -36,9 +36,9 @@ fn f<ty>(_: ty) {} //~ ERROR type parameter `ty` should have a camel case name s\n \n #[repr(C)]\n struct foo7 {\n-    bar: int,\n+    bar: isize,\n }\n \n-type __ = int; //~ ERROR type `__` should have a camel case name such as `CamelCase`\n+type __ = isize; //~ ERROR type `__` should have a camel case name such as `CamelCase`\n \n fn main() { }"}, {"sha": "10475f967d716ca3256e33af4bd1d11e137b0f4b", "filename": "src/test/compile-fail/lint-non-uppercase-statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -11,6 +11,6 @@\n #![forbid(non_upper_case_globals)]\n #![allow(dead_code)]\n \n-static foo: int = 1; //~ ERROR static constant `foo` should have an uppercase name such as `FOO`\n+static foo: isize = 1; //~ ERROR static constant `foo` should have an uppercase name such as `FOO`\n \n fn main() { }"}, {"sha": "9c68da8beafd6af8b746b26dc0434490ed8e6b1e", "filename": "src/test/compile-fail/lint-owned-heap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,7 +13,7 @@\n #![feature(box_syntax)]\n \n struct Foo {\n-    x: Box<int> //~ ERROR type uses owned\n+    x: Box<isize> //~ ERROR type uses owned\n }\n \n fn main() {"}, {"sha": "9fcd6b33c9d56e355b961dd7b221c23b0fc5d56c", "filename": "src/test/compile-fail/lint-raw-ptr-derive.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-derive.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -13,21 +13,21 @@\n \n #[derive(Clone)]\n struct Foo {\n-    x: *const int //~ ERROR use of `#[derive]` with a raw pointer\n+    x: *const isize //~ ERROR use of `#[derive]` with a raw pointer\n }\n \n #[derive(Clone)]\n-struct Bar(*mut int); //~ ERROR use of `#[derive]` with a raw pointer\n+struct Bar(*mut isize); //~ ERROR use of `#[derive]` with a raw pointer\n \n #[derive(Clone)]\n enum Baz {\n-    A(*const int), //~ ERROR use of `#[derive]` with a raw pointer\n-    B { x: *mut int } //~ ERROR use of `#[derive]` with a raw pointer\n+    A(*const isize), //~ ERROR use of `#[derive]` with a raw pointer\n+    B { x: *mut isize } //~ ERROR use of `#[derive]` with a raw pointer\n }\n \n #[derive(Clone)]\n struct Buzz {\n-    x: (*const int, //~ ERROR use of `#[derive]` with a raw pointer\n+    x: (*const isize, //~ ERROR use of `#[derive]` with a raw pointer\n         *const uint) //~ ERROR use of `#[derive]` with a raw pointer\n }\n "}, {"sha": "97a976a493f80c90372d1a4e5602ee77c8812112", "filename": "src/test/compile-fail/lint-shorthand-field.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-shorthand-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-shorthand-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-shorthand-field.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -12,8 +12,8 @@\n #![deny(non_shorthand_field_patterns)]\n \n struct Foo {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n fn main() {\n@@ -30,7 +30,7 @@ fn main() {\n     }\n \n     {\n-        const x: int = 1;\n+        const x: isize = 1;\n \n         match (Foo { x: 1, y: 1 }) {\n             Foo { x: x, ..} => {},"}, {"sha": "b0a3a6bd10e7d86976fce815cd7551b35c7d691c", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -287,18 +287,18 @@ mod this_crate {\n     impl Trait for MethodTester {}\n \n     #[deprecated]\n-    pub struct DeprecatedStruct { i: int }\n+    pub struct DeprecatedStruct { i: isize }\n     #[experimental]\n-    pub struct ExperimentalStruct { i: int }\n+    pub struct ExperimentalStruct { i: isize }\n     #[unstable]\n-    pub struct UnstableStruct { i: int }\n-    pub struct UnmarkedStruct { i: int }\n+    pub struct UnstableStruct { i: isize }\n+    pub struct UnmarkedStruct { i: isize }\n     #[stable]\n-    pub struct StableStruct { i: int }\n+    pub struct StableStruct { i: isize }\n     #[frozen]\n-    pub struct FrozenStruct { i: int }\n+    pub struct FrozenStruct { i: isize }\n     #[locked]\n-    pub struct LockedStruct { i: int }\n+    pub struct LockedStruct { i: isize }\n \n     #[deprecated]\n     pub struct DeprecatedUnitStruct;\n@@ -332,18 +332,18 @@ mod this_crate {\n     }\n \n     #[deprecated]\n-    pub struct DeprecatedTupleStruct(int);\n+    pub struct DeprecatedTupleStruct(isize);\n     #[experimental]\n-    pub struct ExperimentalTupleStruct(int);\n+    pub struct ExperimentalTupleStruct(isize);\n     #[unstable]\n-    pub struct UnstableTupleStruct(int);\n-    pub struct UnmarkedTupleStruct(int);\n+    pub struct UnstableTupleStruct(isize);\n+    pub struct UnmarkedTupleStruct(isize);\n     #[stable]\n-    pub struct StableTupleStruct(int);\n+    pub struct StableTupleStruct(isize);\n     #[frozen]\n-    pub struct FrozenTupleStruct(int);\n+    pub struct FrozenTupleStruct(isize);\n     #[locked]\n-    pub struct LockedTupleStruct(int);\n+    pub struct LockedTupleStruct(isize);\n \n     fn test() {\n         // Only the deprecated cases of the following should generate"}, {"sha": "d5ea092617dc1b5ce666c5a892b8d78e6a3236cb", "filename": "src/test/compile-fail/lint-type-limits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -50,12 +50,12 @@ fn qux() {\n }\n \n fn quy() {\n-    let i = -23u; //~ WARNING negation of unsigned int literal may be unintentional\n+    let i = -23u; //~ WARNING negation of unsigned isize literal may be unintentional\n                   //~^ WARNING unused variable\n }\n \n fn quz() {\n     let i = 23u;\n-    let j = -i;   //~ WARNING negation of unsigned int variable may be unintentional\n+    let j = -i;   //~ WARNING negation of unsigned isize variable may be unintentional\n                   //~^ WARNING unused variable\n }"}, {"sha": "158f13bf3f174621427efbe7fa54938890e5b34c", "filename": "src/test/compile-fail/lint-unnecessary-parens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -16,7 +16,7 @@ impl X {\n     fn foo(&self) -> bool { self.y }\n }\n \n-fn foo() -> int {\n+fn foo() -> isize {\n     return (1i); //~ ERROR unnecessary parentheses around `return` value\n }\n fn bar() -> X {"}, {"sha": "44579bb55e08ac7d30e3c7d4adf4390ffb02f57a", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -43,7 +43,7 @@ mod test {\n }\n \n mod foo {\n-    pub struct Point{pub x: int, pub y: int}\n+    pub struct Point{pub x: isize, pub y: isize}\n     pub struct Square{pub p: Point, pub h: uint, pub w: uint}\n }\n \n@@ -54,7 +54,7 @@ mod bar {\n     pub mod c {\n         use foo::Point;\n         use foo::Square; //~ ERROR unused import\n-        pub fn cc(p: Point) -> int { return 2i * (p.x + p.y); }\n+        pub fn cc(p: Point) -> isize { return 2i * (p.x + p.y); }\n     }\n \n     #[allow(unused_imports)]"}, {"sha": "4c1a01aac64c4628d367400d372da6f60f20093b", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -35,8 +35,8 @@ fn main() {\n       _ => {}\n     }\n \n-    let x = |&: mut y: int| 10i; //~ ERROR: variable does not need to be mutable\n-    fn what(mut foo: int) {} //~ ERROR: variable does not need to be mutable\n+    let x = |&: mut y: isize| 10i; //~ ERROR: variable does not need to be mutable\n+    fn what(mut foo: isize) {} //~ ERROR: variable does not need to be mutable\n \n     // positive cases\n     let mut a = 2i;\n@@ -65,8 +65,8 @@ fn main() {\n       _ => {}\n     }\n \n-    let x = |&mut: mut y: int| y = 32i;\n-    fn nothing(mut foo: int) { foo = 37i; }\n+    let x = |&mut: mut y: isize| y = 32i;\n+    fn nothing(mut foo: isize) { foo = 37i; }\n \n     // leading underscore should avoid the warning, just like the\n     // unused variable lint.\n@@ -77,7 +77,7 @@ fn callback<F>(f: F) where F: FnOnce() {}\n \n // make sure the lint attribute can be turned off\n #[allow(unused_mut)]\n-fn foo(mut a: int) {\n+fn foo(mut a: isize) {\n     let mut a = 3i;\n     let mut b = vec!(2i);\n }"}, {"sha": "8cf375f80fbb1c092cf9ea06dea733257f120e15", "filename": "src/test/compile-fail/lint-visible-private-types.rs", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -15,108 +15,108 @@\n struct Private<T>;\n pub struct Public<T>;\n \n-impl Private<Public<int>> {\n-    pub fn a(&self) -> Private<int> { panic!() }\n-    fn b(&self) -> Private<int> { panic!() }\n+impl Private<Public<isize>> {\n+    pub fn a(&self) -> Private<isize> { panic!() }\n+    fn b(&self) -> Private<isize> { panic!() }\n \n-    pub fn c() -> Private<int> { panic!() }\n-    fn d() -> Private<int> { panic!() }\n+    pub fn c() -> Private<isize> { panic!() }\n+    fn d() -> Private<isize> { panic!() }\n }\n-impl Private<int> {\n-    pub fn e(&self) -> Private<int> { panic!() }\n-    fn f(&self) -> Private<int> { panic!() }\n+impl Private<isize> {\n+    pub fn e(&self) -> Private<isize> { panic!() }\n+    fn f(&self) -> Private<isize> { panic!() }\n }\n \n-impl Public<Private<int>> {\n-    pub fn a(&self) -> Private<int> { panic!() }\n-    fn b(&self) -> Private<int> { panic!() }\n+impl Public<Private<isize>> {\n+    pub fn a(&self) -> Private<isize> { panic!() }\n+    fn b(&self) -> Private<isize> { panic!() }\n \n-    pub fn c() -> Private<int> { panic!() } //~ ERROR private type in exported type signature\n-    fn d() -> Private<int> { panic!() }\n+    pub fn c() -> Private<isize> { panic!() } //~ ERROR private type in exported type signature\n+    fn d() -> Private<isize> { panic!() }\n }\n-impl Public<int> {\n-    pub fn e(&self) -> Private<int> { panic!() } //~ ERROR private type in exported type signature\n-    fn f(&self) -> Private<int> { panic!() }\n+impl Public<isize> {\n+    pub fn e(&self) -> Private<isize> { panic!() } //~ ERROR private type in exported type signature\n+    fn f(&self) -> Private<isize> { panic!() }\n }\n \n-pub fn x(_: Private<int>) {} //~ ERROR private type in exported type signature\n+pub fn x(_: Private<isize>) {} //~ ERROR private type in exported type signature\n \n-fn y(_: Private<int>) {}\n+fn y(_: Private<isize>) {}\n \n \n pub struct Foo {\n-    pub x: Private<int>, //~ ERROR private type in exported type signature\n-    y: Private<int>\n+    pub x: Private<isize>, //~ ERROR private type in exported type signature\n+    y: Private<isize>\n }\n \n struct Bar {\n-    x: Private<int>,\n+    x: Private<isize>,\n }\n \n pub enum Baz {\n-    Baz1(Private<int>), //~ ERROR private type in exported type signature\n+    Baz1(Private<isize>), //~ ERROR private type in exported type signature\n     Baz2 {\n-        y: Private<int> //~ ERROR private type in exported type signature\n+        y: Private<isize> //~ ERROR private type in exported type signature\n     },\n }\n \n enum Qux {\n-    Qux1(Private<int>),\n+    Qux1(Private<isize>),\n     Qux2 {\n-        x: Private<int>,\n+        x: Private<isize>,\n     }\n }\n \n pub trait PubTrait {\n-    fn foo(&self) -> Private<int> { panic!( )} //~ ERROR private type in exported type signature\n-    fn bar(&self) -> Private<int>; //~ ERROR private type in exported type signature\n-    fn baz() -> Private<int>; //~ ERROR private type in exported type signature\n+    fn foo(&self) -> Private<isize> { panic!( )} //~ ERROR private type in exported type signature\n+    fn bar(&self) -> Private<isize>; //~ ERROR private type in exported type signature\n+    fn baz() -> Private<isize>; //~ ERROR private type in exported type signature\n }\n \n-impl PubTrait for Public<int> {\n-    fn bar(&self) -> Private<int> { panic!() }\n-    fn baz() -> Private<int> { panic!() }\n+impl PubTrait for Public<isize> {\n+    fn bar(&self) -> Private<isize> { panic!() }\n+    fn baz() -> Private<isize> { panic!() }\n }\n-impl PubTrait for Public<Private<int>> {\n-    fn bar(&self) -> Private<int> { panic!() }\n-    fn baz() -> Private<int> { panic!() }\n+impl PubTrait for Public<Private<isize>> {\n+    fn bar(&self) -> Private<isize> { panic!() }\n+    fn baz() -> Private<isize> { panic!() }\n }\n \n-impl PubTrait for Private<int> {\n-    fn bar(&self) -> Private<int> { panic!() }\n-    fn baz() -> Private<int> { panic!() }\n+impl PubTrait for Private<isize> {\n+    fn bar(&self) -> Private<isize> { panic!() }\n+    fn baz() -> Private<isize> { panic!() }\n }\n-impl PubTrait for (Private<int>,) {\n-    fn bar(&self) -> Private<int> { panic!() }\n-    fn baz() -> Private<int> { panic!() }\n+impl PubTrait for (Private<isize>,) {\n+    fn bar(&self) -> Private<isize> { panic!() }\n+    fn baz() -> Private<isize> { panic!() }\n }\n \n \n trait PrivTrait {\n-    fn foo(&self) -> Private<int> { panic!( )}\n-    fn bar(&self) -> Private<int>;\n+    fn foo(&self) -> Private<isize> { panic!( )}\n+    fn bar(&self) -> Private<isize>;\n }\n-impl PrivTrait for Private<int> {\n-    fn bar(&self) -> Private<int> { panic!() }\n+impl PrivTrait for Private<isize> {\n+    fn bar(&self) -> Private<isize> { panic!() }\n }\n-impl PrivTrait for (Private<int>,) {\n-    fn bar(&self) -> Private<int> { panic!() }\n+impl PrivTrait for (Private<isize>,) {\n+    fn bar(&self) -> Private<isize> { panic!() }\n }\n \n pub trait ParamTrait<T> {\n     fn foo() -> T;\n }\n \n-impl ParamTrait<Private<int>> //~ ERROR private type in exported type signature\n-   for Public<int> {\n-    fn foo() -> Private<int> { panic!() }\n+impl ParamTrait<Private<isize>> //~ ERROR private type in exported type signature\n+   for Public<isize> {\n+    fn foo() -> Private<isize> { panic!() }\n }\n \n-impl ParamTrait<Private<int>> for Private<int> {\n-    fn foo() -> Private<int> { panic!( )}\n+impl ParamTrait<Private<isize>> for Private<isize> {\n+    fn foo() -> Private<isize> { panic!( )}\n }\n \n-impl<T: ParamTrait<Private<int>>>  //~ ERROR private type in exported type signature\n+impl<T: ParamTrait<Private<isize>>>  //~ ERROR private type in exported type signature\n      ParamTrait<T> for Public<i8> {\n     fn foo() -> T { panic!() }\n }"}, {"sha": "f50a934510697669557cbe2a014b13dd2570bb57", "filename": "src/test/compile-fail/liveness-assign-imm-local-in-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-loop.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn test() {\n-    let v: int;\n+    let v: isize;\n     loop {\n         v = 1; //~ ERROR re-assignment of immutable variable\n         //~^ NOTE prior assignment occurs here"}, {"sha": "df57bb9e4417ed17e6b77c2cf027e25adcf5db7f", "filename": "src/test/compile-fail/liveness-assign-imm-local-in-op-eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-op-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-op-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-op-eq.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn test() {\n-    let v: int;\n+    let v: isize;\n     v = 2;  //~ NOTE prior assignment occurs here\n     v += 1; //~ ERROR re-assignment of immutable variable\n     v.clone();"}, {"sha": "28218bff60d68c96051741f5c3d66b2d9c3a9bb7", "filename": "src/test/compile-fail/liveness-assign-imm-local-with-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-with-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-with-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-with-init.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn test() {\n-    let v: int = 1; //~ NOTE prior assignment occurs here\n+    let v: isize = 1; //~ NOTE prior assignment occurs here\n     v.clone();\n     v = 2; //~ ERROR re-assignment of immutable variable\n     v.clone();"}, {"sha": "17cd8231222f267d224ee82054fc0e7c13ab26cb", "filename": "src/test/compile-fail/liveness-closure-require-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c70ce1424f380360dcc8d857c68d2df1a27b6fd/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs?ref=0c70ce1424f380360dcc8d857c68d2df1a27b6fd", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn force<F>(f: F) -> int where F: FnOnce() -> int { f() }\n+fn force<F>(f: F) -> isize where F: FnOnce() -> isize { f() }\n fn main() { println!(\"{}\", force(|| {})); } //~ ERROR mismatched types"}]}