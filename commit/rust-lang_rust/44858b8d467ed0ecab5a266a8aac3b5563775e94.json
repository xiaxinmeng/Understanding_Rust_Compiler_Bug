{"sha": "44858b8d467ed0ecab5a266a8aac3b5563775e94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ODU4YjhkNDY3ZWQwZWNhYjVhMjY2YThhYWMzYjU1NjM3NzVlOTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-22T06:41:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-22T06:41:33Z"}, "message": "Auto merge of #39221 - frewsxcv:os-string-docs, r=GuillaumeGomez\n\nAdd doc examples for `std::ffi::OsString` fucntions/methods.\n\nNone", "tree": {"sha": "3644782853ec43f61ca4c8fbb665e4a58bfd53ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3644782853ec43f61ca4c8fbb665e4a58bfd53ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44858b8d467ed0ecab5a266a8aac3b5563775e94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44858b8d467ed0ecab5a266a8aac3b5563775e94", "html_url": "https://github.com/rust-lang/rust/commit/44858b8d467ed0ecab5a266a8aac3b5563775e94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44858b8d467ed0ecab5a266a8aac3b5563775e94/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5b0829bb06969b69a82527253a393e5c500c324", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b0829bb06969b69a82527253a393e5c500c324", "html_url": "https://github.com/rust-lang/rust/commit/e5b0829bb06969b69a82527253a393e5c500c324"}, {"sha": "47143e3f072be6ff5a893afa80e8338171f9f58a", "url": "https://api.github.com/repos/rust-lang/rust/commits/47143e3f072be6ff5a893afa80e8338171f9f58a", "html_url": "https://github.com/rust-lang/rust/commit/47143e3f072be6ff5a893afa80e8338171f9f58a"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "813a5f036461e0482adb5feeef9f01cd15d11365", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/44858b8d467ed0ecab5a266a8aac3b5563775e94/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44858b8d467ed0ecab5a266a8aac3b5563775e94/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=44858b8d467ed0ecab5a266a8aac3b5563775e94", "patch": "@@ -48,12 +48,30 @@ pub struct OsStr {\n \n impl OsString {\n     /// Constructs a new empty `OsString`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    ///\n+    /// let os_string = OsString::new();\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> OsString {\n         OsString { inner: Buf::from_string(String::new()) }\n     }\n \n     /// Converts to an `OsStr` slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::{OsString, OsStr};\n+    ///\n+    /// let os_string = OsString::from(\"foo\");\n+    /// let os_str = OsStr::new(\"foo\");\n+    /// assert_eq!(os_string.as_os_str(), os_str);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_os_str(&self) -> &OsStr {\n         self\n@@ -62,12 +80,32 @@ impl OsString {\n     /// Converts the `OsString` into a `String` if it contains valid Unicode data.\n     ///\n     /// On failure, ownership of the original `OsString` is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    ///\n+    /// let os_string = OsString::from(\"foo\");\n+    /// let string = os_string.into_string();\n+    /// assert_eq!(string, Ok(String::from(\"foo\")));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_string(self) -> Result<String, OsString> {\n         self.inner.into_string().map_err(|buf| OsString { inner: buf} )\n     }\n \n     /// Extends the string with the given `&OsStr` slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    ///\n+    /// let mut os_string = OsString::from(\"foo\");\n+    /// os_string.push(\"bar\");\n+    /// assert_eq!(&os_string, \"foobar\");\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push<T: AsRef<OsStr>>(&mut self, s: T) {\n         self.inner.push_slice(&s.as_ref().inner)\n@@ -80,6 +118,20 @@ impl OsString {\n     /// allocate.\n     ///\n     /// See main `OsString` documentation information about encoding.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    ///\n+    /// let mut os_string = OsString::with_capacity(10);\n+    /// let capacity = os_string.capacity();\n+    ///\n+    /// // This push is done without reallocating\n+    /// os_string.push(\"foo\");\n+    ///\n+    /// assert_eq!(capacity, os_string.capacity());\n+    /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n     pub fn with_capacity(capacity: usize) -> OsString {\n         OsString {\n@@ -88,6 +140,18 @@ impl OsString {\n     }\n \n     /// Truncates the `OsString` to zero length.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    ///\n+    /// let mut os_string = OsString::from(\"foo\");\n+    /// assert_eq!(&os_string, \"foo\");\n+    ///\n+    /// os_string.clear();\n+    /// assert_eq!(&os_string, \"\");\n+    /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n     pub fn clear(&mut self) {\n         self.inner.clear()\n@@ -96,6 +160,15 @@ impl OsString {\n     /// Returns the capacity this `OsString` can hold without reallocating.\n     ///\n     /// See `OsString` introduction for information about encoding.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    ///\n+    /// let mut os_string = OsString::with_capacity(10);\n+    /// assert!(os_string.capacity() >= 10);\n+    /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n     pub fn capacity(&self) -> usize {\n         self.inner.capacity()"}]}