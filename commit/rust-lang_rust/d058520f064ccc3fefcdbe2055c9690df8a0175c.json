{"sha": "d058520f064ccc3fefcdbe2055c9690df8a0175c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNTg1MjBmMDY0Y2NjM2ZlZmNkYmUyMDU1Yzk2OTBkZjhhMDE3NWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-31T00:26:11Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-31T00:26:11Z"}, "message": "rollup merge of #20325: nick29581/obj-safety-static\n\nCloses #19949 and rust-lang/rfcs#428\n\n[breaking change]\n\nIf you have traits used with objects with static methods, you'll need to move\nthe static methods to a different trait.\n\nr? @cmr", "tree": {"sha": "4bc100cfc545fe940375aaa21618707eba694560", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bc100cfc545fe940375aaa21618707eba694560"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d058520f064ccc3fefcdbe2055c9690df8a0175c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d058520f064ccc3fefcdbe2055c9690df8a0175c", "html_url": "https://github.com/rust-lang/rust/commit/d058520f064ccc3fefcdbe2055c9690df8a0175c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d058520f064ccc3fefcdbe2055c9690df8a0175c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a239d71729973d56221dd5a51eb987972ecc44d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a239d71729973d56221dd5a51eb987972ecc44d2", "html_url": "https://github.com/rust-lang/rust/commit/a239d71729973d56221dd5a51eb987972ecc44d2"}, {"sha": "69716ef607c3410722f35e31cc6419ad142b7e02", "url": "https://api.github.com/repos/rust-lang/rust/commits/69716ef607c3410722f35e31cc6419ad142b7e02", "html_url": "https://github.com/rust-lang/rust/commit/69716ef607c3410722f35e31cc6419ad142b7e02"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "f153b51c5df7798f175bb3eec8b0f4725696dae0", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d058520f064ccc3fefcdbe2055c9690df8a0175c/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d058520f064ccc3fefcdbe2055c9690df8a0175c/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=d058520f064ccc3fefcdbe2055c9690df8a0175c", "patch": "@@ -190,11 +190,13 @@ fn check_object_safety_inner<'tcx>(tcx: &ty::ctxt<'tcx>,\n         }\n     }\n \n-    /// Returns a vec of error messages. If hte vec is empty - no errors!\n+    /// Returns a vec of error messages. If the vec is empty - no errors!\n     ///\n     /// There are some limitations to calling functions through an object, because (a) the self\n     /// type is not known (that's the whole point of a trait instance, after all, to obscure the\n-    /// self type) and (b) the call must go through a vtable and hence cannot be monomorphized.\n+    /// self type), (b) the call must go through a vtable and hence cannot be monomorphized and\n+    /// (c) the trait contains static methods which can't be called because we don't know the\n+    /// concrete type.\n     fn check_object_safety_of_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                            object_trait: &ty::PolyTraitRef<'tcx>,\n                                            method: &ty::Method<'tcx>)\n@@ -210,9 +212,11 @@ fn check_object_safety_inner<'tcx>(tcx: &ty::ctxt<'tcx>,\n             }\n \n             ty::StaticExplicitSelfCategory => {\n-                // Static methods are always object-safe since they\n-                // can't be called through a trait object\n-                return msgs\n+                // Static methods are never object safe (reason (c)).\n+                msgs.push(format!(\"cannot call a static method (`{}`) \\\n+                                   through a trait object\",\n+                                  method_name));\n+                return msgs;\n             }\n             ty::ByReferenceExplicitSelfCategory(..) |\n             ty::ByBoxExplicitSelfCategory => {}"}, {"sha": "d594e3e17474bf0a81c2cd0e82d79d693f906118", "filename": "src/test/compile-fail/trait-object-safety.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d058520f064ccc3fefcdbe2055c9690df8a0175c/src%2Ftest%2Fcompile-fail%2Ftrait-object-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d058520f064ccc3fefcdbe2055c9690df8a0175c/src%2Ftest%2Fcompile-fail%2Ftrait-object-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-object-safety.rs?ref=d058520f064ccc3fefcdbe2055c9690df8a0175c", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that static methods are not object-safe.\n+\n+trait Tr {\n+    fn foo();\n+}\n+\n+struct St;\n+\n+impl Tr for St {\n+    fn foo() {}\n+}\n+\n+fn main() {\n+    let _: &Tr = &St; //~ ERROR cannot convert to a trait object because trait `Tr` is not\n+    //~^ NOTE cannot call a static method (`foo`) through a trait object\n+}"}, {"sha": "ed7284a8353651d26c1bf2fc09bbe3ae662e73b7", "filename": "src/test/run-pass/trait-object-safety.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d058520f064ccc3fefcdbe2055c9690df8a0175c/src%2Ftest%2Frun-pass%2Ftrait-object-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d058520f064ccc3fefcdbe2055c9690df8a0175c/src%2Ftest%2Frun-pass%2Ftrait-object-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-object-safety.rs?ref=d058520f064ccc3fefcdbe2055c9690df8a0175c", "patch": "@@ -8,20 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Check that object-safe methods are identified as such.  Also\n-// acts as a regression test for #18490\n+// Check that object-safe methods are identified as such.\n \n trait Tr {\n-    // Static methods are always safe regardless of other rules\n-    fn new() -> Self;\n+    fn foo(&self);\n }\n \n struct St;\n \n impl Tr for St {\n-    fn new() -> St { St }\n+    fn foo(&self) {}\n }\n \n fn main() {\n-    &St as &Tr;\n+    let s: &Tr = &St;\n+    s.foo();\n }"}]}