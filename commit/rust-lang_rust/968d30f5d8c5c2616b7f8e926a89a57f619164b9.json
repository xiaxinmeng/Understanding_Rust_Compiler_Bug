{"sha": "968d30f5d8c5c2616b7f8e926a89a57f619164b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2OGQzMGY1ZDhjNWMyNjE2YjdmOGU5MjZhODlhNTdmNjE5MTY0Yjk=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-03-26T14:35:07Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-03-26T14:35:07Z"}, "message": "Run tests in a thread with larger stack size", "tree": {"sha": "3aa2ec3128eb6cfdc24d6525de182f02a2ca9d50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aa2ec3128eb6cfdc24d6525de182f02a2ca9d50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/968d30f5d8c5c2616b7f8e926a89a57f619164b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/968d30f5d8c5c2616b7f8e926a89a57f619164b9", "html_url": "https://github.com/rust-lang/rust/commit/968d30f5d8c5c2616b7f8e926a89a57f619164b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/968d30f5d8c5c2616b7f8e926a89a57f619164b9/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a373e73f5a9e4db97e69875ff787dfa4de9958d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a373e73f5a9e4db97e69875ff787dfa4de9958d7", "html_url": "https://github.com/rust-lang/rust/commit/a373e73f5a9e4db97e69875ff787dfa4de9958d7"}], "stats": {"total": 67, "additions": 49, "deletions": 18}, "files": [{"sha": "fc25d27b531ec41f319bc4182a7fdf25c2672dde", "filename": "src/test/mod.rs", "status": "modified", "additions": 49, "deletions": 18, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/968d30f5d8c5c2616b7f8e926a89a57f619164b9/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968d30f5d8c5c2616b7f8e926a89a57f619164b9/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=968d30f5d8c5c2616b7f8e926a89a57f619164b9", "patch": "@@ -7,6 +7,7 @@ use std::mem;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n use std::str::Chars;\n+use std::thread;\n \n use crate::config::{Color, Config, EmitMode, FileName, NewlineStyle, ReportTactic};\n use crate::formatting::{ReportedErrors, SourceFile};\n@@ -25,6 +26,32 @@ const SKIP_FILE_WHITE_LIST: &[&str] = &[\n     \"issue-3434/no_entry.rs\",\n ];\n \n+struct TestSetting {\n+    /// The size of the stack of the thread that run tests.\n+    stack_size: usize,\n+}\n+\n+impl Default for TestSetting {\n+    fn default() -> Self {\n+        TestSetting {\n+            stack_size: 8388608, // 8MB\n+        }\n+    }\n+}\n+\n+fn run_test_with<F>(test_setting: &TestSetting, f: F)\n+where\n+    F: FnOnce(),\n+    F: Send + 'static,\n+{\n+    thread::Builder::new()\n+        .stack_size(test_setting.stack_size)\n+        .spawn(f)\n+        .expect(\"Failed to create a test thread\")\n+        .join()\n+        .expect(\"Failed to join a test thread\")\n+}\n+\n fn is_file_skip(path: &Path) -> bool {\n     SKIP_FILE_WHITE_LIST\n         .iter()\n@@ -114,13 +141,15 @@ fn write_message(msg: &str) {\n // exactly.\n #[test]\n fn system_tests() {\n-    // Get all files in the tests/source directory.\n-    let files = get_test_files(Path::new(\"tests/source\"), true);\n-    let (_reports, count, fails) = check_files(files, &None);\n-\n-    // Display results.\n-    println!(\"Ran {} system tests.\", count);\n-    assert_eq!(fails, 0, \"{} system tests failed\", fails);\n+    run_test_with(&TestSetting::default(), || {\n+        // Get all files in the tests/source directory.\n+        let files = get_test_files(Path::new(\"tests/source\"), true);\n+        let (_reports, count, fails) = check_files(files, &None);\n+\n+        // Display results.\n+        println!(\"Ran {} system tests.\", count);\n+        assert_eq!(fails, 0, \"{} system tests failed\", fails);\n+    });\n }\n \n // Do the same for tests/coverage-source directory.\n@@ -228,17 +257,19 @@ fn assert_output(source: &Path, expected_filename: &Path) {\n // rustfmt.\n #[test]\n fn idempotence_tests() {\n-    match option_env!(\"CFG_RELEASE_CHANNEL\") {\n-        None | Some(\"nightly\") => {}\n-        _ => return, // these tests require nightly\n-    }\n-    // Get all files in the tests/target directory.\n-    let files = get_test_files(Path::new(\"tests/target\"), true);\n-    let (_reports, count, fails) = check_files(files, &None);\n-\n-    // Display results.\n-    println!(\"Ran {} idempotent tests.\", count);\n-    assert_eq!(fails, 0, \"{} idempotent tests failed\", fails);\n+    run_test_with(&TestSetting::default(), || {\n+        match option_env!(\"CFG_RELEASE_CHANNEL\") {\n+            None | Some(\"nightly\") => {}\n+            _ => return, // these tests require nightly\n+        }\n+        // Get all files in the tests/target directory.\n+        let files = get_test_files(Path::new(\"tests/target\"), true);\n+        let (_reports, count, fails) = check_files(files, &None);\n+\n+        // Display results.\n+        println!(\"Ran {} idempotent tests.\", count);\n+        assert_eq!(fails, 0, \"{} idempotent tests failed\", fails);\n+    });\n }\n \n // Run rustfmt on itself. This operation must be idempotent. We also check that"}]}