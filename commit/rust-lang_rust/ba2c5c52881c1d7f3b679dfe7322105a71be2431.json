{"sha": "ba2c5c52881c1d7f3b679dfe7322105a71be2431", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMmM1YzUyODgxYzFkN2YzYjY3OWRmZTczMjIxMDVhNzFiZTI0MzE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-16T09:37:36Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-21T09:13:19Z"}, "message": "rustc: use AccumulateVec in Substs::for_item.", "tree": {"sha": "17c23b218211581e8c917fcffeb7ae3a7844f0cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17c23b218211581e8c917fcffeb7ae3a7844f0cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba2c5c52881c1d7f3b679dfe7322105a71be2431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2c5c52881c1d7f3b679dfe7322105a71be2431", "html_url": "https://github.com/rust-lang/rust/commit/ba2c5c52881c1d7f3b679dfe7322105a71be2431", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba2c5c52881c1d7f3b679dfe7322105a71be2431/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dce288ec82f50e036abb7066aded9a4c0ae095d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dce288ec82f50e036abb7066aded9a4c0ae095d0", "html_url": "https://github.com/rust-lang/rust/commit/dce288ec82f50e036abb7066aded9a4c0ae095d0"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "f44e1533f520a11792b82121f8c1d84c7d4139b0", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ba2c5c52881c1d7f3b679dfe7322105a71be2431/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2c5c52881c1d7f3b679dfe7322105a71be2431/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=ba2c5c52881c1d7f3b679dfe7322105a71be2431", "patch": "@@ -17,6 +17,7 @@ use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use serialize::{self, Encodable, Encoder, Decodable, Decoder};\n use syntax_pos::{Span, DUMMY_SP};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n+use rustc_data_structures::array_vec::ArrayVec;\n \n use core::intrinsics;\n use std::fmt;\n@@ -176,7 +177,12 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n     where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n     {\n         let defs = tcx.generics_of(def_id);\n-        let mut substs = Vec::with_capacity(defs.count());\n+        let count = defs.count();\n+        let mut substs = if count <= 8 {\n+            AccumulateVec::Array(ArrayVec::new())\n+        } else {\n+            AccumulateVec::Heap(Vec::with_capacity(count))\n+        };\n         Substs::fill_item(&mut substs, tcx, defs, &mut mk_kind);\n         tcx.intern_substs(&substs)\n     }\n@@ -188,14 +194,15 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                         -> &'tcx Substs<'tcx>\n     where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n     {\n-        let defs = tcx.generics_of(def_id);\n-        let mut result = Vec::with_capacity(defs.count());\n-        result.extend(self[..].iter().cloned());\n-        Substs::fill_single(&mut result, defs, &mut mk_kind);\n-        tcx.intern_substs(&result)\n+        Substs::for_item(tcx, def_id, |param, substs| {\n+            match self.get(param.index as usize) {\n+                Some(&kind) => kind,\n+                None => mk_kind(param, substs),\n+            }\n+        })\n     }\n \n-    fn fill_item<F>(substs: &mut Vec<Kind<'tcx>>,\n+    fn fill_item<F>(substs: &mut AccumulateVec<[Kind<'tcx>; 8]>,\n                     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                     defs: &ty::Generics,\n                     mk_kind: &mut F)\n@@ -209,15 +216,18 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n         Substs::fill_single(substs, defs, mk_kind)\n     }\n \n-    fn fill_single<F>(substs: &mut Vec<Kind<'tcx>>,\n+    fn fill_single<F>(substs: &mut AccumulateVec<[Kind<'tcx>; 8]>,\n                       defs: &ty::Generics,\n                       mk_kind: &mut F)\n     where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n     {\n         for param in &defs.params {\n             let kind = mk_kind(param, substs);\n             assert_eq!(param.index as usize, substs.len());\n-            substs.push(kind);\n+            match *substs {\n+                AccumulateVec::Array(ref mut arr) => arr.push(kind),\n+                AccumulateVec::Heap(ref mut vec) => vec.push(kind),\n+            }\n         }\n     }\n "}]}