{"sha": "696ea0627d06df8c6af0dd79ea822b7d4295f2af", "node_id": "C_kwDOAAsO6NoAKDY5NmVhMDYyN2QwNmRmOGM2YWYwZGQ3OWVhODIyYjdkNDI5NWYyYWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-27T14:30:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-27T14:30:19Z"}, "message": "Auto merge of #104048 - cjgillot:split-lifetime, r=compiler-errors\n\nSeparate lifetime ident from lifetime resolution in HIR\n\nDrive-by: change how suggested generic args are computed.\nFixes https://github.com/rust-lang/rust/issues/103815\n\nI recommend reviewing commit-by-commit.", "tree": {"sha": "b451d99456448ad130198846f02211f747b73907", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b451d99456448ad130198846f02211f747b73907"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/696ea0627d06df8c6af0dd79ea822b7d4295f2af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/696ea0627d06df8c6af0dd79ea822b7d4295f2af", "html_url": "https://github.com/rust-lang/rust/commit/696ea0627d06df8c6af0dd79ea822b7d4295f2af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/696ea0627d06df8c6af0dd79ea822b7d4295f2af/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b", "html_url": "https://github.com/rust-lang/rust/commit/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b"}, {"sha": "42db5e5e6275fdd563e6975bf29d675ea47d37e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/42db5e5e6275fdd563e6975bf29d675ea47d37e5", "html_url": "https://github.com/rust-lang/rust/commit/42db5e5e6275fdd563e6975bf29d675ea47d37e5"}], "stats": {"total": 79, "additions": 33, "deletions": 46}, "files": [{"sha": "220941dcd5dbf6c4b0696b6c4d7fef98aa578a4f", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/696ea0627d06df8c6af0dd79ea822b7d4295f2af/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696ea0627d06df8c6af0dd79ea822b7d4295f2af/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=696ea0627d06df8c6af0dd79ea822b7d4295f2af", "patch": "@@ -10,8 +10,8 @@ use rustc_hir::lang_items;\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, Impl, ImplItem,\n-    ImplItemKind, Item, ItemKind, Lifetime, LifetimeName, ParamName, PolyTraitRef, PredicateOrigin, TraitFn, TraitItem,\n-    TraitItemKind, Ty, TyKind, WherePredicate,\n+    ImplItemKind, Item, ItemKind, Lifetime, LifetimeName, LifetimeParamKind, PolyTraitRef, PredicateOrigin, TraitFn,\n+    TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter as middle_nested_filter;\n@@ -180,7 +180,7 @@ fn check_fn_inner<'tcx>(\n                             _ => None,\n                         });\n                         for bound in lifetimes {\n-                            if bound.name != LifetimeName::Static && !bound.is_elided() {\n+                            if !bound.is_static() && !bound.is_elided() {\n                                 return;\n                             }\n                         }\n@@ -414,17 +414,13 @@ impl<'a, 'tcx> RefVisitor<'a, 'tcx> {\n \n     fn record(&mut self, lifetime: &Option<Lifetime>) {\n         if let Some(ref lt) = *lifetime {\n-            if lt.name == LifetimeName::Static {\n+            if lt.is_static() {\n                 self.lts.push(RefLt::Static);\n-            } else if let LifetimeName::Param(_, ParamName::Fresh) = lt.name {\n+            } else if lt.is_anonymous() {\n                 // Fresh lifetimes generated should be ignored.\n                 self.lts.push(RefLt::Unnamed);\n-            } else if lt.is_elided() {\n-                self.lts.push(RefLt::Unnamed);\n-            } else if let LifetimeName::Param(def_id, _) = lt.name {\n+            } else if let LifetimeName::Param(def_id) = lt.res {\n                 self.lts.push(RefLt::Named(def_id));\n-            } else {\n-                self.lts.push(RefLt::Unnamed);\n             }\n         } else {\n             self.lts.push(RefLt::Unnamed);\n@@ -472,7 +468,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                 walk_item(self, item);\n                 self.lts.truncate(len);\n                 self.lts.extend(bounds.iter().filter_map(|bound| match bound {\n-                    GenericArg::Lifetime(l) => Some(if let LifetimeName::Param(def_id, _) = l.name {\n+                    GenericArg::Lifetime(l) => Some(if let LifetimeName::Param(def_id) = l.res {\n                         RefLt::Named(def_id)\n                     } else {\n                         RefLt::Unnamed\n@@ -498,10 +494,8 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n     }\n \n     fn visit_generic_arg(&mut self, generic_arg: &'tcx GenericArg<'tcx>) {\n-        if let GenericArg::Lifetime(l) = generic_arg\n-            && let LifetimeName::Param(def_id, _) = l.name\n-        {\n-            self.lifetime_generic_arg_spans.entry(def_id).or_insert(l.span);\n+        if let GenericArg::Lifetime(l) = generic_arg && let LifetimeName::Param(def_id) = l.res {\n+            self.lifetime_generic_arg_spans.entry(def_id).or_insert(l.ident.span);\n         }\n         // Replace with `walk_generic_arg` if/when https://github.com/rust-lang/rust/pull/103692 lands.\n         // walk_generic_arg(self, generic_arg);\n@@ -577,7 +571,7 @@ where\n \n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n-        self.map.remove(&lifetime.name.ident().name);\n+        self.map.remove(&lifetime.ident.name);\n     }\n \n     fn visit_generic_param(&mut self, param: &'tcx GenericParam<'_>) {\n@@ -601,7 +595,9 @@ fn report_extra_lifetimes<'tcx>(cx: &LateContext<'tcx>, func: &'tcx FnDecl<'_>,\n         .params\n         .iter()\n         .filter_map(|par| match par.kind {\n-            GenericParamKind::Lifetime { .. } => Some((par.name.ident().name, par.span)),\n+            GenericParamKind::Lifetime {\n+                kind: LifetimeParamKind::Explicit,\n+            } => Some((par.name.ident().name, par.span)),\n             _ => None,\n         })\n         .collect();\n@@ -626,7 +622,9 @@ fn report_extra_impl_lifetimes<'tcx>(cx: &LateContext<'tcx>, impl_: &'tcx Impl<'\n         .params\n         .iter()\n         .filter_map(|par| match par.kind {\n-            GenericParamKind::Lifetime { .. } => Some((par.name.ident().name, par.span)),\n+            GenericParamKind::Lifetime {\n+                kind: LifetimeParamKind::Explicit,\n+            } => Some((par.name.ident().name, par.span)),\n             _ => None,\n         })\n         .collect();\n@@ -653,7 +651,7 @@ struct BodyLifetimeChecker {\n impl<'tcx> Visitor<'tcx> for BodyLifetimeChecker {\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n-        if lifetime.name.ident().name != kw::UnderscoreLifetime && lifetime.name.ident().name != kw::StaticLifetime {\n+        if !lifetime.is_anonymous() && lifetime.ident.name != kw::StaticLifetime {\n             self.lifetimes_used_in_body = true;\n         }\n     }"}, {"sha": "075ecbe7eded37340c1b36db85654ea7996588dc", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/696ea0627d06df8c6af0dd79ea822b7d4295f2af/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696ea0627d06df8c6af0dd79ea822b7d4295f2af/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=696ea0627d06df8c6af0dd79ea822b7d4295f2af", "patch": "@@ -118,7 +118,7 @@ fn future_trait_ref<'tcx>(\n                 .iter()\n                 .filter_map(|bound| {\n                     if let GenericArg::Lifetime(lt) = bound {\n-                        Some(lt.name)\n+                        Some(lt.res)\n                     } else {\n                         None\n                     }\n@@ -153,7 +153,7 @@ fn captures_all_lifetimes(inputs: &[Ty<'_>], output_lifetimes: &[LifetimeName])\n         .iter()\n         .filter_map(|ty| {\n             if let TyKind::Rptr(lt, _) = ty.kind {\n-                Some(lt.name)\n+                Some(lt.res)\n             } else {\n                 None\n             }"}, {"sha": "92920bbad6e0a9a394ce2797f9e1a0ef90b635e7", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/696ea0627d06df8c6af0dd79ea822b7d4295f2af/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696ea0627d06df8c6af0dd79ea822b7d4295f2af/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=696ea0627d06df8c6af0dd79ea822b7d4295f2af", "patch": "@@ -12,8 +12,8 @@ use rustc_hir::hir_id::HirIdMap;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{\n     self as hir, AnonConst, BinOpKind, BindingAnnotation, Body, Expr, ExprKind, FnRetTy, FnSig, GenericArg,\n-    ImplItemKind, ItemKind, Lifetime, LifetimeName, Mutability, Node, Param, ParamName, PatKind, QPath, TraitFn,\n-    TraitItem, TraitItemKind, TyKind, Unsafety,\n+    ImplItemKind, ItemKind, Lifetime, Mutability, Node, Param, PatKind, QPath, TraitFn, TraitItem, TraitItemKind,\n+    TyKind, Unsafety,\n };\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::{Obligation, ObligationCause};\n@@ -343,21 +343,16 @@ impl PtrArg<'_> {\n }\n \n struct RefPrefix {\n-    lt: LifetimeName,\n+    lt: Lifetime,\n     mutability: Mutability,\n }\n impl fmt::Display for RefPrefix {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use fmt::Write;\n         f.write_char('&')?;\n-        match self.lt {\n-            LifetimeName::Param(_, ParamName::Plain(name)) => {\n-                name.fmt(f)?;\n-                f.write_char(' ')?;\n-            },\n-            LifetimeName::Infer => f.write_str(\"'_ \")?,\n-            LifetimeName::Static => f.write_str(\"'static \")?,\n-            _ => (),\n+        if !self.lt.is_anonymous() {\n+            self.lt.ident.fmt(f)?;\n+            f.write_char(' ')?;\n         }\n         f.write_str(self.mutability.prefix_str())\n     }\n@@ -495,7 +490,7 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                         ty_name: name.ident.name,\n                         method_renames,\n                         ref_prefix: RefPrefix {\n-                            lt: lt.name,\n+                            lt: lt.clone(),\n                             mutability,\n                         },\n                         deref_ty,"}, {"sha": "65dfe7637ea99e0c5b05b5dbaeadcba6cad73c76", "filename": "clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/696ea0627d06df8c6af0dd79ea822b7d4295f2af/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696ea0627d06df8c6af0dd79ea822b7d4295f2af/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=696ea0627d06df8c6af0dd79ea822b7d4295f2af", "patch": "@@ -31,10 +31,10 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, m\n                         return false;\n                     }\n \n-                    let ltopt = if lt.name.is_anonymous() {\n+                    let ltopt = if lt.is_anonymous() {\n                         String::new()\n                     } else {\n-                        format!(\"{} \", lt.name.ident().as_str())\n+                        format!(\"{} \", lt.ident.as_str())\n                     };\n \n                     if mut_ty.mutbl == Mutability::Mut {"}, {"sha": "07fb6af91ba042f8a6372abb74171233ea891eb3", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/696ea0627d06df8c6af0dd79ea822b7d4295f2af/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696ea0627d06df8c6af0dd79ea822b7d4295f2af/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=696ea0627d06df8c6af0dd79ea822b7d4295f2af", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::def::Res;\n use rustc_hir::HirIdMap;\n use rustc_hir::{\n     ArrayLen, BinOpKind, BindingAnnotation, Block, BodyId, Closure, Expr, ExprField, ExprKind, FnRetTy, GenericArg,\n-    GenericArgs, Guard, HirId, InlineAsmOperand, Let, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path,\n+    GenericArgs, Guard, HirId, InlineAsmOperand, Let, Lifetime, LifetimeName, Pat, PatField, PatKind, Path,\n     PathSegment, PrimTy, QPath, Stmt, StmtKind, Ty, TyKind, TypeBinding,\n };\n use rustc_lexer::{tokenize, TokenKind};\n@@ -337,7 +337,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n     }\n \n     fn eq_lifetime(left: &Lifetime, right: &Lifetime) -> bool {\n-        left.name == right.name\n+        left.res == right.res\n     }\n \n     fn eq_pat_field(&mut self, left: &PatField<'_>, right: &PatField<'_>) -> bool {\n@@ -925,16 +925,10 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n     }\n \n     pub fn hash_lifetime(&mut self, lifetime: &Lifetime) {\n-        std::mem::discriminant(&lifetime.name).hash(&mut self.s);\n-        if let LifetimeName::Param(param_id, ref name) = lifetime.name {\n-            std::mem::discriminant(name).hash(&mut self.s);\n+        lifetime.ident.name.hash(&mut self.s);\n+        std::mem::discriminant(&lifetime.res).hash(&mut self.s);\n+        if let LifetimeName::Param(param_id) = lifetime.res {\n             param_id.hash(&mut self.s);\n-            match name {\n-                ParamName::Plain(ref ident) => {\n-                    ident.name.hash(&mut self.s);\n-                },\n-                ParamName::Fresh | ParamName::Error => {},\n-            }\n         }\n     }\n "}]}