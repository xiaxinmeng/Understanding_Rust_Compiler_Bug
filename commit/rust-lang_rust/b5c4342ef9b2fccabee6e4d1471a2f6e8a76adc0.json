{"sha": "b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YzQzNDJlZjliMmZjY2FiZWU2ZTRkMTQ3MWEyZjZlOGE3NmFkYzA=", "commit": {"author": {"name": "Philipp Krones", "email": "uwdkn@student.kit.edu", "date": "2018-09-23T08:23:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-23T08:23:48Z"}, "message": "Merge pull request #3195 from JayKickliter/jsk/mem_replace_opt_w_none\n\nAdd lint for `mem::replace(.., None)`.", "tree": {"sha": "70f79addabffd3d9ce8ab924921a8d1e4c8b0ded", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70f79addabffd3d9ce8ab924921a8d1e4c8b0ded"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbp02UCRBK7hj4Ov3rIwAAdHIIAI5J30fTFDEkkJQljGbgjlQc\n2Fm3xqNCJQCSVJazGpYaRUrGcRKX/+MsTcZtZweOEKEyXkdJKWUsSpLZM94YLAqc\nluvJwIjOSkSW4ZLn37gt4TIvJ0vJ4QpiNuTzJgsBAtGxgTDGldrQBGkxrhqI8i+f\nTJFbk9jd/5lwC9S+gEUTK5Lq6HHg1RIYxz8GgOAkMIiKIUeTqxRg3xsUfk9tGJT1\nyzeEaZ6CW5uJZ4sIMP+5NfTqPIHGtjFwVU05sNzLzrssItsXFweuXjXpPJMxl8mV\nOwKtKqAga1tO+hXNffh6pyCUH7bAm6dT2ugbplpW+4f0/UGcGwHnO0aKlMmKJi0=\n=iyph\n-----END PGP SIGNATURE-----\n", "payload": "tree 70f79addabffd3d9ce8ab924921a8d1e4c8b0ded\nparent 8e9f1a9d683a45a26ab6f4eeab2dfdec608ccef7\nparent 79cda3bb1ef7f4261bf0fb18bbb141127d31c5a5\nauthor Philipp Krones <uwdkn@student.kit.edu> 1537691028 +0200\ncommitter GitHub <noreply@github.com> 1537691028 +0200\n\nMerge pull request #3195 from JayKickliter/jsk/mem_replace_opt_w_none\n\nAdd lint for `mem::replace(.., None)`."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0", "html_url": "https://github.com/rust-lang/rust/commit/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e9f1a9d683a45a26ab6f4eeab2dfdec608ccef7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9f1a9d683a45a26ab6f4eeab2dfdec608ccef7", "html_url": "https://github.com/rust-lang/rust/commit/8e9f1a9d683a45a26ab6f4eeab2dfdec608ccef7"}, {"sha": "79cda3bb1ef7f4261bf0fb18bbb141127d31c5a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/79cda3bb1ef7f4261bf0fb18bbb141127d31c5a5", "html_url": "https://github.com/rust-lang/rust/commit/79cda3bb1ef7f4261bf0fb18bbb141127d31c5a5"}], "stats": {"total": 118, "additions": 117, "deletions": 1}, "files": [{"sha": "a7b4c5921e8efa3a37701a762d01e2e13bca6f7d", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0", "patch": "@@ -744,6 +744,7 @@ All notable changes to this project will be documented in this file.\n [`match_wild_err_arm`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#match_wild_err_arm\n [`maybe_infinite_iter`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#maybe_infinite_iter\n [`mem_forget`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#mem_forget\n+[`mem_replace_option_with_none`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#mem_replace_option_with_none\n [`min_max`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#min_max\n [`misaligned_transmute`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#misaligned_transmute\n [`misrefactored_assign_op`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#misrefactored_assign_op"}, {"sha": "f7babe36ad9c0ebdc97a3b0fdbef8ae316bbc547", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0", "patch": "@@ -9,7 +9,7 @@ We are currently in the process of discussing Clippy 1.0 via the RFC process in\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 276 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n+[There are 277 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "90094429a367bd527dd3970000157dfa3aba3e1c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0", "patch": "@@ -133,6 +133,7 @@ pub mod map_clone;\n pub mod map_unit_fn;\n pub mod matches;\n pub mod mem_forget;\n+pub mod mem_replace;\n pub mod methods;\n pub mod minmax;\n pub mod misc;\n@@ -380,6 +381,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box neg_multiply::NegMultiply);\n     reg.register_early_lint_pass(box unsafe_removed_from_name::UnsafeNameRemoval);\n     reg.register_late_lint_pass(box mem_forget::MemForget);\n+    reg.register_late_lint_pass(box mem_replace::MemReplace);\n     reg.register_late_lint_pass(box arithmetic::Arithmetic::default());\n     reg.register_late_lint_pass(box assign_ops::AssignOps);\n     reg.register_late_lint_pass(box let_if_seq::LetIfSeq);\n@@ -591,6 +593,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         matches::MATCH_REF_PATS,\n         matches::MATCH_WILD_ERR_ARM,\n         matches::SINGLE_MATCH,\n+        mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n         methods::CHARS_LAST_CMP,\n         methods::CHARS_NEXT_CMP,\n         methods::CLONE_DOUBLE_REF,\n@@ -748,6 +751,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         matches::MATCH_REF_PATS,\n         matches::MATCH_WILD_ERR_ARM,\n         matches::SINGLE_MATCH,\n+        mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n         methods::CHARS_LAST_CMP,\n         methods::GET_UNWRAP,\n         methods::ITER_CLONED_COLLECT,"}, {"sha": "fd22e3afe805b4b0058ccc12ed6828668b49cf5f", "filename": "clippy_lints/src/mem_replace.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0", "patch": "@@ -0,0 +1,83 @@\n+use crate::rustc::hir::{Expr, ExprKind, MutMutable, QPath};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::utils::{match_def_path, match_qpath, opt_def_id, paths, snippet, span_lint_and_sugg};\n+use if_chain::if_chain;\n+\n+/// **What it does:** Checks for `mem::replace()` on an `Option` with\n+/// `None`.\n+///\n+/// **Why is this bad?** `Option` already has the method `take()` for\n+/// taking its current value (Some(..) or None) and replacing it with\n+/// `None`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let mut an_option = Some(0);\n+/// let replaced = mem::replace(&mut an_option, None);\n+/// ```\n+/// Is better expressed with:\n+/// ```rust\n+/// let mut an_option = Some(0);\n+/// let taken = an_option.take();\n+/// ```\n+declare_clippy_lint! {\n+    pub MEM_REPLACE_OPTION_WITH_NONE,\n+    style,\n+    \"replacing an `Option` with `None` instead of `take()`\"\n+}\n+\n+pub struct MemReplace;\n+\n+impl LintPass for MemReplace {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![MEM_REPLACE_OPTION_WITH_NONE]\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_chain! {\n+            // Check that `expr` is a call to `mem::replace()`\n+            if let ExprKind::Call(ref func, ref func_args) = expr.node;\n+            if func_args.len() == 2;\n+            if let ExprKind::Path(ref func_qpath) = func.node;\n+            if let Some(def_id) = opt_def_id(cx.tables.qpath_def(func_qpath, func.hir_id));\n+            if match_def_path(cx.tcx, def_id, &paths::MEM_REPLACE);\n+\n+            // Check that second argument is `Option::None`\n+            if let ExprKind::Path(ref replacement_qpath) = func_args[1].node;\n+            if match_qpath(replacement_qpath, &paths::OPTION_NONE);\n+\n+            then {\n+                // Since this is a late pass (already type-checked),\n+                // and we already know that the second argument is an\n+                // `Option`, we do not need to check the first\n+                // argument's type. All that's left is to get\n+                // replacee's path.\n+                let replaced_path = match func_args[0].node {\n+                    ExprKind::AddrOf(MutMutable, ref replaced) => {\n+                        if let ExprKind::Path(QPath::Resolved(None, ref replaced_path)) = replaced.node {\n+                            replaced_path\n+                        } else {\n+                            return\n+                        }\n+                    },\n+                    ExprKind::Path(QPath::Resolved(None, ref replaced_path)) => replaced_path,\n+                    _ => return,\n+                };\n+\n+                span_lint_and_sugg(\n+                    cx,\n+                    MEM_REPLACE_OPTION_WITH_NONE,\n+                    expr.span,\n+                    \"replacing an `Option` with `None`\",\n+                    \"consider `Option::take()` instead\",\n+                    format!(\"{}.take()\", snippet(cx, replaced_path.span, \"\"))\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "eb28cc7e1794e829aab097b443ebe65546b3e60d", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0", "patch": "@@ -47,6 +47,7 @@ pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"Link\n pub const LINT: [&str; 3] = [\"rustc\", \"lint\", \"Lint\"];\n pub const LINT_ARRAY: [&str; 3] = [\"rustc\", \"lint\", \"LintArray\"];\n pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n+pub const MEM_REPLACE: [&str; 3] = [\"core\", \"mem\", \"replace\"];\n pub const MEM_UNINIT: [&str; 3] = [\"core\", \"mem\", \"uninitialized\"];\n pub const MEM_ZEROED: [&str; 3] = [\"core\", \"mem\", \"zeroed\"];\n pub const MUTEX: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];"}, {"sha": "62df42ef2d290786d45a905cc64e49c3f20cdeb5", "filename": "tests/ui/mem_replace.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0/tests%2Fui%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0/tests%2Fui%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.rs?ref=b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0", "patch": "@@ -0,0 +1,11 @@\n+#![feature(tool_lints)]\n+#![warn(clippy::all, clippy::style, clippy::mem_replace_option_with_none)]\n+\n+use std::mem;\n+\n+fn main() {\n+    let mut an_option = Some(1);\n+    let _ = mem::replace(&mut an_option, None);\n+    let an_option = &mut Some(1);\n+    let _ = mem::replace(an_option, None);\n+}"}, {"sha": "8385fa3cb3c804438e3322cd29b09d762f3db21a", "filename": "tests/ui/mem_replace.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0/tests%2Fui%2Fmem_replace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0/tests%2Fui%2Fmem_replace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.stderr?ref=b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0", "patch": "@@ -0,0 +1,16 @@\n+error: replacing an `Option` with `None`\n+ --> $DIR/mem_replace.rs:8:13\n+  |\n+8 |     let _ = mem::replace(&mut an_option, None);\n+  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n+  |\n+  = note: `-D clippy::mem-replace-option-with-none` implied by `-D warnings`\n+\n+error: replacing an `Option` with `None`\n+  --> $DIR/mem_replace.rs:10:13\n+   |\n+10 |     let _ = mem::replace(an_option, None);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n+\n+error: aborting due to 2 previous errors\n+"}]}