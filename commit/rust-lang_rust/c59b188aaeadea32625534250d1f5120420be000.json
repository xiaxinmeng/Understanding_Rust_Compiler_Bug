{"sha": "c59b188aaeadea32625534250d1f5120420be000", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OWIxODhhYWVhZGVhMzI2MjU1MzQyNTBkMWY1MTIwNDIwYmUwMDA=", "commit": {"author": {"name": "projektir", "email": "oprojektir@gmail.com", "date": "2017-04-21T03:53:38Z"}, "committer": {"name": "projektir", "email": "oprojektir@gmail.com", "date": "2017-04-27T03:11:57Z"}, "message": "Adding links and examples for various mspc pages #29377", "tree": {"sha": "3f0a0e55e4897edc2be97e080983f865e9f6967f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f0a0e55e4897edc2be97e080983f865e9f6967f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c59b188aaeadea32625534250d1f5120420be000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c59b188aaeadea32625534250d1f5120420be000", "html_url": "https://github.com/rust-lang/rust/commit/c59b188aaeadea32625534250d1f5120420be000", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c59b188aaeadea32625534250d1f5120420be000/comments", "author": {"login": "projektir", "id": 16269746, "node_id": "MDQ6VXNlcjE2MjY5NzQ2", "avatar_url": "https://avatars.githubusercontent.com/u/16269746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/projektir", "html_url": "https://github.com/projektir", "followers_url": "https://api.github.com/users/projektir/followers", "following_url": "https://api.github.com/users/projektir/following{/other_user}", "gists_url": "https://api.github.com/users/projektir/gists{/gist_id}", "starred_url": "https://api.github.com/users/projektir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/projektir/subscriptions", "organizations_url": "https://api.github.com/users/projektir/orgs", "repos_url": "https://api.github.com/users/projektir/repos", "events_url": "https://api.github.com/users/projektir/events{/privacy}", "received_events_url": "https://api.github.com/users/projektir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "projektir", "id": 16269746, "node_id": "MDQ6VXNlcjE2MjY5NzQ2", "avatar_url": "https://avatars.githubusercontent.com/u/16269746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/projektir", "html_url": "https://github.com/projektir", "followers_url": "https://api.github.com/users/projektir/followers", "following_url": "https://api.github.com/users/projektir/following{/other_user}", "gists_url": "https://api.github.com/users/projektir/gists{/gist_id}", "starred_url": "https://api.github.com/users/projektir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/projektir/subscriptions", "organizations_url": "https://api.github.com/users/projektir/orgs", "repos_url": "https://api.github.com/users/projektir/repos", "events_url": "https://api.github.com/users/projektir/events{/privacy}", "received_events_url": "https://api.github.com/users/projektir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "036983201d4e9aeb5c5e56e47c305971972b2569", "url": "https://api.github.com/repos/rust-lang/rust/commits/036983201d4e9aeb5c5e56e47c305971972b2569", "html_url": "https://github.com/rust-lang/rust/commit/036983201d4e9aeb5c5e56e47c305971972b2569"}], "stats": {"total": 283, "additions": 254, "deletions": 29}, "files": [{"sha": "2cb649ce67b9c0c1cc8e26b8d5b5d8c533a12680", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 254, "deletions": 29, "changes": 283, "blob_url": "https://github.com/rust-lang/rust/blob/c59b188aaeadea32625534250d1f5120420be000/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c59b188aaeadea32625534250d1f5120420be000/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=c59b188aaeadea32625534250d1f5120420be000", "patch": "@@ -297,12 +297,14 @@ mod sync;\n mod mpsc_queue;\n mod spsc_queue;\n \n-/// The receiving-half of Rust's channel type. This half can only be owned by\n-/// one thread.\n+/// The receiving half of Rust's [`channel`][] (or [`sync_channel`]) type.\n+/// This half can only be owned by one thread.\n ///\n /// Messages sent to the channel can be retrieved using [`recv`].\n ///\n-/// [`recv`]: ../../../std/sync/mpsc/struct.Receiver.html#method.recv\n+/// [`channel`]: fn.channel.html\n+/// [`sync_channel`]: fn.sync_channel.html\n+/// [`recv`]: struct.Receiver.html#method.recv\n ///\n /// # Examples\n ///\n@@ -336,51 +338,128 @@ unsafe impl<T: Send> Send for Receiver<T> { }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> !Sync for Receiver<T> { }\n \n-/// An iterator over messages on a receiver, this iterator will block whenever\n-/// [`next`] is called, waiting for a new message, and [`None`] will be returned\n+/// An iterator over messages on a [`Receiver`], created by [`iter`].\n+///\n+/// This iterator will block whenever [`next`] is called,\n+/// waiting for a new message, and [`None`] will be returned\n /// when the corresponding channel has hung up.\n ///\n+/// [`iter`]: struct.Receiver.html#method.iter\n+/// [`Receiver`]: struct.Receiver.html\n /// [`next`]: ../../../std/iter/trait.Iterator.html#tymethod.next\n /// [`None`]: ../../../std/option/enum.Option.html#variant.None\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// use std::sync::mpsc::channel;\n+/// use std::thread;\n+///\n+/// let (send, recv) = channel();\n+///\n+/// thread::spawn(move || {\n+///     send.send(1u8).unwrap();\n+///     send.send(2u8).unwrap();\n+///     send.send(3u8).unwrap();\n+/// });\n+///\n+/// for x in recv.iter() {\n+///     println!(\"Got: {}\", x);\n+/// }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Iter<'a, T: 'a> {\n     rx: &'a Receiver<T>\n }\n \n-/// An iterator that attempts to yield all pending values for a receiver.\n-/// [`None`] will be returned when there are no pending values remaining or if\n-/// the corresponding channel has hung up.\n+/// An iterator that attempts to yield all pending values for a [`Receiver`],\n+/// created by [`try_iter`].\n+///\n+/// [`None`] will be returned when there are no pending values remaining or\n+/// if the corresponding channel has hung up.\n ///\n-/// This Iterator will never block the caller in order to wait for data to\n+/// This iterator will never block the caller in order to wait for data to\n /// become available. Instead, it will return [`None`].\n ///\n+/// [`Receiver`]: struct.Receiver.html\n+/// [`try_iter`]: struct.Receiver.html#method.try_iter\n /// [`None`]: ../../../std/option/enum.Option.html#variant.None\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// use std::sync::mpsc::channel;\n+/// use std::thread;\n+/// use std::time::Duration;\n+///\n+/// let (sender, receiver) = channel();\n+///\n+/// // Nothing is in the buffer yet\n+/// assert!(receiver.try_iter().next().is_none());\n+/// println!(\"Nothing in the buffer...\");\n+///\n+/// thread::spawn(move || {\n+///     sender.send(1).unwrap();\n+///     sender.send(2).unwrap();\n+///     sender.send(3).unwrap();\n+/// });\n+///\n+/// println!(\"Going to sleep...\");\n+/// thread::sleep(Duration::from_secs(2)); // block for two seconds\n+///\n+/// for x in receiver.try_iter() {\n+///     println!(\"Got: {}\", x);\n+/// }\n+/// ```\n #[stable(feature = \"receiver_try_iter\", since = \"1.15.0\")]\n #[derive(Debug)]\n pub struct TryIter<'a, T: 'a> {\n     rx: &'a Receiver<T>\n }\n \n-/// An owning iterator over messages on a receiver, this iterator will block\n-/// whenever [`next`] is called, waiting for a new message, and [`None`] will be\n-/// returned when the corresponding channel has hung up.\n+/// An owning iterator over messages on a [`Receiver`],\n+/// created by **Receiver::into_iter**.\n+///\n+/// This iterator will block whenever [`next`]\n+/// is called, waiting for a new message, and [`None`] will be\n+/// returned if the corresponding channel has hung up.\n ///\n+/// [`Receiver`]: struct.Receiver.html\n /// [`next`]: ../../../std/iter/trait.Iterator.html#tymethod.next\n /// [`None`]: ../../../std/option/enum.Option.html#variant.None\n ///\n+/// # Examples\n+///\n+/// ```rust\n+/// use std::sync::mpsc::channel;\n+/// use std::thread;\n+///\n+/// let (send, recv) = channel();\n+///\n+/// thread::spawn(move || {\n+///     send.send(1u8).unwrap();\n+///     send.send(2u8).unwrap();\n+///     send.send(3u8).unwrap();\n+/// });\n+///\n+/// for x in recv.into_iter() {\n+///     println!(\"Got: {}\", x);\n+/// }\n+/// ```\n #[stable(feature = \"receiver_into_iter\", since = \"1.1.0\")]\n #[derive(Debug)]\n pub struct IntoIter<T> {\n     rx: Receiver<T>\n }\n \n-/// The sending-half of Rust's asynchronous channel type. This half can only be\n+/// The sending-half of Rust's asynchronous [`channel`] type. This half can only be\n /// owned by one thread, but it can be cloned to send to other threads.\n ///\n /// Messages can be sent through this channel with [`send`].\n ///\n-/// [`send`]: ../../../std/sync/mpsc/struct.Sender.html#method.send\n+/// [`channel`]: fn.channel.html\n+/// [`send`]: struct.Sender.html#method.send\n ///\n /// # Examples\n ///\n@@ -419,12 +498,55 @@ unsafe impl<T: Send> Send for Sender<T> { }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> !Sync for Sender<T> { }\n \n-/// The sending-half of Rust's synchronous channel type. This half can only be\n-/// owned by one thread, but it can be cloned to send to other threads.\n+/// The sending-half of Rust's synchronous [`sync_channel`] type.\n+/// This half can only be owned by one thread, but it can be cloned\n+/// to send to other threads.\n+///\n+/// Messages can be sent through this channel with [`send`] or [`try_send`].\n+///\n+/// [`send`] will block if there is no space in the internal buffer.\n+///\n+/// [`sync_channel`]: fn.sync_channel.html\n+/// [`send`]: struct.SyncSender.html#method.send\n+/// [`try_send`]: struct.SyncSender.html#method.try_send\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// use std::sync::mpsc::sync_channel;\n+/// use std::thread;\n ///\n-/// [`send`]: ../../../std/sync/mpsc/struct.Sender.html#method.send\n-/// [`SyncSender::send`]: ../../../std/sync/mpsc/struct.SyncSender.html#method.send\n+/// // Create a sync_channel with buffer size 2\n+/// let (sync_sender, receiver) = sync_channel(2);\n+/// let sync_sender2 = sync_sender.clone();\n ///\n+/// // First thread owns sync_sender\n+/// thread::spawn(move || {\n+///     sync_sender.send(1).unwrap();\n+///     sync_sender.send(2).unwrap();\n+/// });\n+///\n+/// // Second thread owns sync_sender2\n+/// thread::spawn(move || {\n+///     sync_sender2.send(3).unwrap();\n+///     // thread will now block since the buffer is full\n+///     println!(\"Thread unblocked!\");\n+/// });\n+///\n+/// let mut msg;\n+///\n+/// msg = receiver.recv().unwrap();\n+/// println!(\"message {} received\", msg);\n+///\n+/// // \"Thread unblocked!\" will be printed now\n+///\n+/// msg = receiver.recv().unwrap();\n+/// println!(\"message {} received\", msg);\n+///\n+/// msg = receiver.recv().unwrap();\n+///\n+/// println!(\"message {} received\", msg);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SyncSender<T> {\n     inner: Arc<sync::Packet<T>>,\n@@ -823,15 +945,37 @@ impl<T> SyncSender<T> {\n     /// Note that a successful send does *not* guarantee that the receiver will\n     /// ever see the data if there is a buffer on this channel. Items may be\n     /// enqueued in the internal buffer for the receiver to receive at a later\n-    /// time. If the buffer size is 0, however, it can be guaranteed that the\n-    /// receiver has indeed received the data if this function returns success.\n+    /// time. If the buffer size is 0, however, the channel becomes a rendezvous\n+    /// channel and it guarantees that the receiver has indeed received\n+    /// the data if this function returns success.\n     ///\n     /// This function will never panic, but it may return [`Err`] if the\n     /// [`Receiver`] has disconnected and is no longer able to receive\n     /// information.\n     ///\n     /// [`Err`]: ../../../std/result/enum.Result.html#variant.Err\n     /// [`Receiver`]: ../../../std/sync/mpsc/struct.Receiver.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// use std::sync::mpsc::sync_channel;\n+    /// use std::thread;\n+    ///\n+    /// // Create a rendezvous sync_channel with buffer size 0\n+    /// let (sync_sender, receiver) = sync_channel(0);\n+    ///\n+    /// thread::spawn(move || {\n+    ///    println!(\"sending message...\");\n+    ///    sync_sender.send(1).unwrap();\n+    ///    // Thread is now blocked until the message is received\n+    ///\n+    ///    println!(\"...message received!\");\n+    /// });\n+    ///\n+    /// let msg = receiver.recv().unwrap();\n+    /// assert_eq!(1, msg);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn send(&self, t: T) -> Result<(), SendError<T>> {\n         self.inner.send(t).map_err(SendError)\n@@ -844,11 +988,48 @@ impl<T> SyncSender<T> {\n     /// data. Compared with [`send`], this function has two failure cases\n     /// instead of one (one for disconnection, one for a full buffer).\n     ///\n-    /// See [`SyncSender::send`] for notes about guarantees of whether the\n+    /// See [`send`] for notes about guarantees of whether the\n     /// receiver has received the data or not if this function is successful.\n     ///\n-    /// [`send`]: ../../../std/sync/mpsc/struct.Sender.html#method.send\n-    /// [`SyncSender::send`]: ../../../std/sync/mpsc/struct.SyncSender.html#method.send\n+    /// [`send`]: ../../../std/sync/mpsc/struct.SyncSender.html#method.send\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// use std::sync::mpsc::sync_channel;\n+    /// use std::thread;\n+    ///\n+    /// // Create a sync_channel with buffer size 1\n+    /// let (sync_sender, receiver) = sync_channel(1);\n+    /// let sync_sender2 = sync_sender.clone();\n+    ///\n+    /// // First thread owns sync_sender\n+    /// thread::spawn(move || {\n+    ///     sync_sender.send(1).unwrap();\n+    ///     sync_sender.send(2).unwrap();\n+    ///     // Thread blocked\n+    /// });\n+    ///\n+    /// // Second thread owns sync_sender2\n+    /// thread::spawn(move || {\n+    ///     // This will return an error and send\n+    ///     // no message if the buffer is full\n+    ///     sync_sender2.try_send(3).is_err();\n+    /// });\n+    ///\n+    /// let mut msg;\n+    /// msg = receiver.recv().unwrap();\n+    /// println!(\"message {} received\", msg);\n+    ///\n+    /// msg = receiver.recv().unwrap();\n+    /// println!(\"message {} received\", msg);\n+    ///\n+    /// // Third message may have never been sent\n+    /// match receiver.try_recv() {\n+    ///     Ok(msg) => println!(\"message {} received\", msg),\n+    ///     Err(_) => println!(\"the third message was never sent\"),\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn try_send(&self, t: T) -> Result<(), TrySendError<T>> {\n         self.inner.try_send(t)\n@@ -894,6 +1075,21 @@ impl<T> Receiver<T> {\n     ///\n     /// This is useful for a flavor of \"optimistic check\" before deciding to\n     /// block on a receiver.\n+    ///\n+    /// Compared with [`recv`], this function has two failure cases instead of one\n+    /// (one for disconnection, one for an empty buffer).\n+    ///\n+    /// [`recv`]: struct.Receiver.html#method.recv\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// use std::sync::mpsc::{Receiver, channel};\n+    ///\n+    /// let (_, receiver): (_, Receiver<i32>) = channel();\n+    ///\n+    /// assert!(receiver.try_recv().is_err());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn try_recv(&self) -> Result<T, TryRecvError> {\n         loop {\n@@ -949,16 +1145,17 @@ impl<T> Receiver<T> {\n     ///\n     /// This function will always block the current thread if there is no data\n     /// available and it's possible for more data to be sent. Once a message is\n-    /// sent to the corresponding [`Sender`], then this receiver will wake up and\n-    /// return that message.\n+    /// sent to the corresponding [`Sender`][] (or [`SyncSender`]), then this\n+    /// receiver will wake up and return that message.\n     ///\n     /// If the corresponding [`Sender`] has disconnected, or it disconnects while\n     /// this call is blocking, this call will wake up and return [`Err`] to\n     /// indicate that no more messages can ever be received on this channel.\n     /// However, since channels are buffered, messages sent before the disconnect\n     /// will still be properly received.\n     ///\n-    /// [`Sender`]: ../../../std/sync/mpsc/struct.Sender.html\n+    /// [`Sender`]: struct.Sender.html\n+    /// [`SyncSender`]: struct.SyncSender.html\n     /// [`Err`]: ../../../std/result/enum.Result.html#variant.Err\n     ///\n     /// # Examples\n@@ -1040,16 +1237,17 @@ impl<T> Receiver<T> {\n     ///\n     /// This function will always block the current thread if there is no data\n     /// available and it's possible for more data to be sent. Once a message is\n-    /// sent to the corresponding [`Sender`], then this receiver will wake up and\n-    /// return that message.\n+    /// sent to the corresponding [`Sender`][] (or [`SyncSender`]), then this\n+    /// receiver will wake up and return that message.\n     ///\n     /// If the corresponding [`Sender`] has disconnected, or it disconnects while\n     /// this call is blocking, this call will wake up and return [`Err`] to\n     /// indicate that no more messages can ever be received on this channel.\n     /// However, since channels are buffered, messages sent before the disconnect\n     /// will still be properly received.\n     ///\n-    /// [`Sender`]: ../../../std/sync/mpsc/struct.Sender.html\n+    /// [`Sender`]: struct.Sender.html\n+    /// [`SyncSender`]: struct.SyncSender.html\n     /// [`Err`]: ../../../std/result/enum.Result.html#variant.Err\n     ///\n     /// # Examples\n@@ -1163,6 +1361,33 @@ impl<T> Receiver<T> {\n     /// user by waiting for values.\n     ///\n     /// [`panic!`]: ../../../std/macro.panic.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// use std::sync::mpsc::channel;\n+    /// use std::thread;\n+    /// use std::time::Duration;\n+    ///\n+    /// let (sender, receiver) = channel();\n+    ///\n+    /// // Nothing is in the buffer yet\n+    /// assert!(receiver.try_iter().next().is_none());\n+    /// println!(\"Nothing in the buffer...\");\n+    ///\n+    /// thread::spawn(move || {\n+    ///     sender.send(1).unwrap();\n+    ///     sender.send(2).unwrap();\n+    ///     sender.send(3).unwrap();\n+    /// });\n+    ///\n+    /// println!(\"Going to sleep...\");\n+    /// thread::sleep(Duration::from_secs(2)); // block for two seconds\n+    ///\n+    /// for x in receiver.try_iter() {\n+    ///     println!(\"Got: {}\", x);\n+    /// }\n+    /// ```\n     #[stable(feature = \"receiver_try_iter\", since = \"1.15.0\")]\n     pub fn try_iter(&self) -> TryIter<T> {\n         TryIter { rx: self }"}]}