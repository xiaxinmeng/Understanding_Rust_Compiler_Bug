{"sha": "0f8df80804b2c7e89acc3c8e046a1ac7a90124f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOGRmODA4MDRiMmM3ZTg5YWNjM2M4ZTA0NmExYWM3YTkwMTI0ZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-17T05:42:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-17T05:42:19Z"}, "message": "auto merge of #18056 : TeXitoi/rust/shootout-reverse-complement-improvement, r=alexcrichton\n\nThis is some improvement as asked and discused here: http://www.reddit.com/r/rust/comments/2j2ij3/benchmark_improvement_reverse_compliment/\r\n\r\nBefore:\r\n```\r\nreal    0m0.396s\r\nuser    0m0.280s\r\nsys     0m0.112s\r\n```\r\nafter:\r\n```\r\nreal    0m0.293s\r\nuser    0m0.216s\r\nsys     0m0.076s\r\n```\r\nbest C version:\r\n```\r\nreal    0m0.135s\r\nuser    0m0.132s\r\nsys     0m0.060s\r\n```\r\n\r\nAnother possibility will be to add a `DoubleEndedIterator::next_two_side()` with a deffault implementation, and specialising it for slices, and use it here (`MutableSlice::reverse()` can then become safe). This benchmark will then be safe.\r\n\r\nWhat do you think?", "tree": {"sha": "896a86f527b517ae7341ac0a14a6152394e261c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/896a86f527b517ae7341ac0a14a6152394e261c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f8df80804b2c7e89acc3c8e046a1ac7a90124f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f8df80804b2c7e89acc3c8e046a1ac7a90124f6", "html_url": "https://github.com/rust-lang/rust/commit/0f8df80804b2c7e89acc3c8e046a1ac7a90124f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f8df80804b2c7e89acc3c8e046a1ac7a90124f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dec727297e6ebd6614219a93f376d8181ab11b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dec727297e6ebd6614219a93f376d8181ab11b1", "html_url": "https://github.com/rust-lang/rust/commit/3dec727297e6ebd6614219a93f376d8181ab11b1"}, {"sha": "1a6f1ebad541e179f7418ce0102540cb15fb455e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6f1ebad541e179f7418ce0102540cb15fb455e", "html_url": "https://github.com/rust-lang/rust/commit/1a6f1ebad541e179f7418ce0102540cb15fb455e"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "352d351973bc68c326a7acc56c4d903e8c3111cd", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 46, "deletions": 12, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0f8df80804b2c7e89acc3c8e046a1ac7a90124f6/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8df80804b2c7e89acc3c8e046a1ac7a90124f6/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=0f8df80804b2c7e89acc3c8e046a1ac7a90124f6", "patch": "@@ -96,21 +96,55 @@ fn main() {\n         }\n \n         // reverse complement, as\n-        //    seq.reverse(); for c in seq.iter_mut() {*c = complements[*c]}\n+        //    seq.reverse(); for c in seq.iter_mut() { *c = complements[*c] }\n         // but faster:\n-        let mut it = seq.iter_mut();\n-        loop {\n-            match (it.next(), it.next_back()) {\n-                (Some(front), Some(back)) => {\n-                    let tmp = complements[*front as uint];\n-                    *front = complements[*back as uint];\n-                    *back = tmp;\n-                }\n-                (Some(last), None) => *last = complements[*last as uint], // last element\n-                _ => break // vector exhausted.\n-            }\n+        for (front, back) in two_side_iter(seq) {\n+            let tmp = complements[*front as uint];\n+            *front = complements[*back as uint];\n+            *back = tmp;\n+        }\n+        if seq.len() % 2 == 1 {\n+            let middle = &mut seq[seq.len() / 2];\n+            *middle = complements[*middle as uint];\n         }\n     }\n \n     stdout().write(data.as_slice()).unwrap();\n }\n+\n+pub struct TwoSideIter<'a, T: 'a> {\n+    first: *mut T,\n+    last: *mut T,\n+    marker: std::kinds::marker::ContravariantLifetime<'a>,\n+    marker2: std::kinds::marker::NoCopy\n+}\n+\n+pub fn two_side_iter<'a, T>(slice: &'a mut [T]) -> TwoSideIter<'a, T> {\n+    let len = slice.len();\n+    let first = slice.as_mut_ptr();\n+    let last = if len == 0 {\n+        first\n+    } else {\n+        unsafe { first.offset(len as int - 1) }\n+    };\n+\n+    TwoSideIter {\n+        first: first,\n+        last: last,\n+        marker: std::kinds::marker::ContravariantLifetime,\n+        marker2: std::kinds::marker::NoCopy\n+    }\n+}\n+\n+impl<'a, T> Iterator<(&'a mut T, &'a mut T)> for TwoSideIter<'a, T> {\n+    fn next(&mut self) -> Option<(&'a mut T, &'a mut T)> {\n+        if self.first < self.last {\n+            let result = unsafe { (&mut *self.first, &mut *self.last) };\n+            self.first = unsafe { self.first.offset(1) };\n+            self.last = unsafe { self.last.offset(-1) };\n+            Some(result)\n+        } else {\n+            None\n+        }\n+    }\n+}"}]}