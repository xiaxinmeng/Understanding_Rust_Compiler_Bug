{"sha": "da56d1d20113355047f5e6e3d5686ea1c7589d99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNTZkMWQyMDExMzM1NTA0N2Y1ZTZlM2Q1Njg2ZWExYzc1ODlkOTk=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-09T12:46:11Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-17T23:41:21Z"}, "message": "Remove all borrows of lint store from Session from librustc\n\nAccess through tcx is fine -- by that point, the lint store is frozen,\nbut direct access through Session will go away in future commits, as\nlint store is still mutable in early stages of Session, and will be\nremoved completely.", "tree": {"sha": "6b89f1e87740cd362c5ca40f488d6eaa8fe38222", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b89f1e87740cd362c5ca40f488d6eaa8fe38222"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da56d1d20113355047f5e6e3d5686ea1c7589d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da56d1d20113355047f5e6e3d5686ea1c7589d99", "html_url": "https://github.com/rust-lang/rust/commit/da56d1d20113355047f5e6e3d5686ea1c7589d99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da56d1d20113355047f5e6e3d5686ea1c7589d99/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4475c753b252060dbc76a73b83159484992bf06", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4475c753b252060dbc76a73b83159484992bf06", "html_url": "https://github.com/rust-lang/rust/commit/c4475c753b252060dbc76a73b83159484992bf06"}], "stats": {"total": 61, "additions": 37, "deletions": 24}, "files": [{"sha": "515d4d3cd72723d556dd9466d52035f5156ca1a7", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/da56d1d20113355047f5e6e3d5686ea1c7589d99/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da56d1d20113355047f5e6e3d5686ea1c7589d99/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=da56d1d20113355047f5e6e3d5686ea1c7589d99", "patch": "@@ -480,7 +480,7 @@ pub struct EarlyContext<'a> {\n     builder: LintLevelsBuilder<'a>,\n \n     /// The store of registered lints and the lint levels.\n-    lint_store: ReadGuard<'a, LintStore>,\n+    lint_store: &'a LintStore,\n \n     buffered: LintBuffer,\n }\n@@ -569,14 +569,15 @@ pub trait LintContext: Sized {\n impl<'a> EarlyContext<'a> {\n     fn new(\n         sess: &'a Session,\n+        lint_store: &'a LintStore,\n         krate: &'a ast::Crate,\n         buffered: LintBuffer,\n     ) -> EarlyContext<'a> {\n         EarlyContext {\n             sess,\n             krate,\n-            lint_store: sess.lint_store.borrow(),\n-            builder: LintLevelSets::builder(sess),\n+            lint_store,\n+            builder: LintLevelSets::builder(sess, lint_store),\n             buffered,\n         }\n     }\n@@ -611,7 +612,7 @@ impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n                           f: F)\n         where F: FnOnce(&mut Self)\n     {\n-        let push = self.context.builder.push(attrs);\n+        let push = self.context.builder.push(attrs, &self.context.lint_store);\n         self.check_id(id);\n         self.enter_attrs(attrs);\n         f(self);\n@@ -1473,12 +1474,13 @@ early_lint_methods!(early_lint_pass_impl, []);\n \n fn early_lint_crate<T: EarlyLintPass>(\n     sess: &Session,\n+    lint_store: &LintStore,\n     krate: &ast::Crate,\n     pass: T,\n     buffered: LintBuffer,\n ) -> LintBuffer {\n     let mut cx = EarlyContextAndPass {\n-        context: EarlyContext::new(sess, krate, buffered),\n+        context: EarlyContext::new(sess, lint_store, krate, buffered),\n         pass,\n     };\n \n@@ -1497,28 +1499,30 @@ fn early_lint_crate<T: EarlyLintPass>(\n \n pub fn check_ast_crate<T: EarlyLintPass>(\n     sess: &Session,\n+    lint_store: &LintStore,\n     krate: &ast::Crate,\n     pre_expansion: bool,\n     builtin_lints: T,\n ) {\n     let (mut passes, mut buffered): (Vec<_>, _) = if pre_expansion {\n         (\n-            sess.lint_store.borrow().pre_expansion_passes.iter().map(|p| (p)()).collect(),\n+            lint_store.pre_expansion_passes.iter().map(|p| (p)()).collect(),\n             LintBuffer::default(),\n         )\n     } else {\n         (\n-            sess.lint_store.borrow().early_passes.iter().map(|p| (p)()).collect(),\n+            lint_store.early_passes.iter().map(|p| (p)()).collect(),\n             sess.buffered_lints.borrow_mut().take().unwrap(),\n         )\n     };\n \n     if !sess.opts.debugging_opts.no_interleave_lints {\n-        buffered = early_lint_crate(sess, krate, builtin_lints, buffered);\n+        buffered = early_lint_crate(sess, lint_store, krate, builtin_lints, buffered);\n \n         if !passes.is_empty() {\n             buffered = early_lint_crate(\n                 sess,\n+                lint_store,\n                 krate,\n                 EarlyLintPassObjects { lints: &mut passes[..] },\n                 buffered,\n@@ -1529,6 +1533,7 @@ pub fn check_ast_crate<T: EarlyLintPass>(\n             buffered = time(sess, &format!(\"running lint: {}\", pass.name()), || {\n                 early_lint_crate(\n                     sess,\n+                    lint_store,\n                     krate,\n                     EarlyLintPassObjects { lints: slice::from_mut(pass) },\n                     buffered,"}, {"sha": "36c7c5b20fded1fc1d5980c2336a81b07ede3b7d", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/da56d1d20113355047f5e6e3d5686ea1c7589d99/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da56d1d20113355047f5e6e3d5686ea1c7589d99/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=da56d1d20113355047f5e6e3d5686ea1c7589d99", "patch": "@@ -3,7 +3,7 @@ use std::cmp;\n use crate::hir::HirId;\n use crate::ich::StableHashingContext;\n use crate::lint::builtin;\n-use crate::lint::context::CheckLintNameResult;\n+use crate::lint::context::{LintStore, CheckLintNameResult};\n use crate::lint::{self, Lint, LintId, Level, LintSource};\n use crate::session::Session;\n use crate::util::nodemap::FxHashMap;\n@@ -35,21 +35,20 @@ enum LintSet {\n }\n \n impl LintLevelSets {\n-    pub fn new(sess: &Session) -> LintLevelSets {\n+    pub fn new(sess: &Session, lint_store: &LintStore) -> LintLevelSets {\n         let mut me = LintLevelSets {\n             list: Vec::new(),\n             lint_cap: Level::Forbid,\n         };\n-        me.process_command_line(sess);\n+        me.process_command_line(sess, lint_store);\n         return me\n     }\n \n-    pub fn builder(sess: &Session) -> LintLevelsBuilder<'_> {\n-        LintLevelsBuilder::new(sess, LintLevelSets::new(sess))\n+    pub fn builder<'a>(sess: &'a Session, store: &LintStore) -> LintLevelsBuilder<'a> {\n+        LintLevelsBuilder::new(sess, LintLevelSets::new(sess, store))\n     }\n \n-    fn process_command_line(&mut self, sess: &Session) {\n-        let store = sess.lint_store.borrow();\n+    fn process_command_line(&mut self, sess: &Session, store: &LintStore) {\n         let mut specs = FxHashMap::default();\n         self.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);\n \n@@ -186,9 +185,8 @@ impl<'a> LintLevelsBuilder<'a> {\n     ///   #[allow]\n     ///\n     /// Don't forget to call `pop`!\n-    pub fn push(&mut self, attrs: &[ast::Attribute]) -> BuilderPush {\n+    pub fn push(&mut self, attrs: &[ast::Attribute], store: &LintStore) -> BuilderPush {\n         let mut specs = FxHashMap::default();\n-        let store = self.sess.lint_store.borrow();\n         let sess = self.sess;\n         let bad_attr = |span| {\n             struct_span_err!(sess, span, E0452, \"malformed lint attribute input\")"}, {"sha": "ea06884d2c4257a595a492f9725d1ec66a64ac88", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/da56d1d20113355047f5e6e3d5686ea1c7589d99/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da56d1d20113355047f5e6e3d5686ea1c7589d99/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=da56d1d20113355047f5e6e3d5686ea1c7589d99", "patch": "@@ -777,13 +777,15 @@ pub fn maybe_lint_level_root(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n \n fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n     assert_eq!(cnum, LOCAL_CRATE);\n+    let store = tcx.sess.lint_store.borrow();\n     let mut builder = LintLevelMapBuilder {\n-        levels: LintLevelSets::builder(tcx.sess),\n+        levels: LintLevelSets::builder(tcx.sess, &store),\n         tcx: tcx,\n+        store: &*store,\n     };\n     let krate = tcx.hir().krate();\n \n-    let push = builder.levels.push(&krate.attrs);\n+    let push = builder.levels.push(&krate.attrs, &store);\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n     for macro_def in &krate.exported_macros {\n        builder.levels.register_id(macro_def.hir_id);\n@@ -794,19 +796,20 @@ fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n     tcx.arena.alloc(builder.levels.build_map())\n }\n \n-struct LintLevelMapBuilder<'tcx> {\n+struct LintLevelMapBuilder<'a, 'tcx> {\n     levels: levels::LintLevelsBuilder<'tcx>,\n     tcx: TyCtxt<'tcx>,\n+    store: &'a LintStore,\n }\n \n-impl LintLevelMapBuilder<'tcx> {\n+impl LintLevelMapBuilder<'_, '_> {\n     fn with_lint_attrs<F>(&mut self,\n                           id: hir::HirId,\n                           attrs: &[ast::Attribute],\n                           f: F)\n         where F: FnOnce(&mut Self)\n     {\n-        let push = self.levels.push(attrs);\n+        let push = self.levels.push(attrs, self.store);\n         if push.changed {\n             self.levels.register_id(id);\n         }\n@@ -815,7 +818,7 @@ impl LintLevelMapBuilder<'tcx> {\n     }\n }\n \n-impl intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {\n+impl intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n     fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n         intravisit::NestedVisitorMap::All(&self.tcx.hir())\n     }"}, {"sha": "2fd7b2507a7867770ee819f4844c260f1ea960b2", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da56d1d20113355047f5e6e3d5686ea1c7589d99/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da56d1d20113355047f5e6e3d5686ea1c7589d99/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=da56d1d20113355047f5e6e3d5686ea1c7589d99", "patch": "@@ -329,6 +329,7 @@ fn configure_and_expand_inner<'a>(\n     time(sess, \"pre-AST-expansion lint checks\", || {\n         lint::check_ast_crate(\n             sess,\n+            &*sess.lint_store.borrow(),\n             &krate,\n             true,\n             rustc_lint::BuiltinCombinedPreExpansionLintPass::new());\n@@ -556,7 +557,13 @@ pub fn lower_to_hir(\n     });\n \n     time(sess, \"early lint checks\", || {\n-        lint::check_ast_crate(sess, &krate, false, rustc_lint::BuiltinCombinedEarlyLintPass::new())\n+        lint::check_ast_crate(\n+            sess,\n+            &*sess.lint_store.borrow(),\n+            &krate,\n+            false,\n+            rustc_lint::BuiltinCombinedEarlyLintPass::new(),\n+        )\n     });\n \n     // Discard hygiene data, which isn't required after lowering to HIR."}]}