{"sha": "52636007ce40da67998276c0671c6345512c3b58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNjM2MDA3Y2U0MGRhNjc5OTgyNzZjMDY3MWM2MzQ1NTEyYzNiNTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-05T09:23:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-05T09:23:09Z"}, "message": "auto merge of #19362 : nikomatsakis/rust/crateification, r=nikomatsakis\n\nThis has the goal of further reducing peak memory usage and enabling more parallelism. This patch should allow trans/typeck to build in parallel. The plan is to proceed by moving as many additional passes as possible into distinct crates that lay alongside typeck/trans. Basically, the idea is that there is the `rustc` crate which defines the common data structures shared between passes. Individual passes then go into their own crates. Finally, the `rustc_driver` crate knits it all together.\r\n\r\ncc @jakub-: One wrinkle is the diagnostics plugin. Currently, it assumes all diagnostics are defined and used within one crate in order to track what is used and what is duplicated. I had to disable this. We'll have to find an alternate strategy, but I wasn't sure what was best so decided to just disable the duplicate checking for now.", "tree": {"sha": "a6780f3640570b2bf971631045679ede197cfcb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6780f3640570b2bf971631045679ede197cfcb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52636007ce40da67998276c0671c6345512c3b58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52636007ce40da67998276c0671c6345512c3b58", "html_url": "https://github.com/rust-lang/rust/commit/52636007ce40da67998276c0671c6345512c3b58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52636007ce40da67998276c0671c6345512c3b58/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "361baabb07b2fb921d0f556d0787b3ea7ef86746", "url": "https://api.github.com/repos/rust-lang/rust/commits/361baabb07b2fb921d0f556d0787b3ea7ef86746", "html_url": "https://github.com/rust-lang/rust/commit/361baabb07b2fb921d0f556d0787b3ea7ef86746"}, {"sha": "602fc781ff0990b7f94851e210c6a4a516c80935", "url": "https://api.github.com/repos/rust-lang/rust/commits/602fc781ff0990b7f94851e210c6a4a516c80935", "html_url": "https://github.com/rust-lang/rust/commit/602fc781ff0990b7f94851e210c6a4a516c80935"}], "stats": {"total": 2261, "additions": 1160, "deletions": 1101}, "files": [{"sha": "3a2def389cc24e92e907ad9fbcdf9e5c56393d35", "filename": "mk/crates.mk", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -53,8 +53,8 @@ TARGET_CRATES := libc std flate arena term \\\n                  serialize getopts collections test time rand \\\n                  log regex graphviz core rbml alloc rustrt \\\n                  unicode\n-HOST_CRATES := syntax rustc rustc_trans rustdoc regex_macros fmt_macros \\\n-\t       rustc_llvm rustc_back\n+RUSTC_CRATES := rustc rustc_typeck rustc_driver rustc_trans rustc_back rustc_llvm \n+HOST_CRATES := syntax $(RUSTC_CRATES) rustdoc regex_macros fmt_macros\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n \n@@ -67,12 +67,16 @@ DEPS_std := core libc rand alloc collections rustrt unicode \\\n \tnative:rust_builtin native:backtrace\n DEPS_graphviz := std\n DEPS_syntax := std term serialize log fmt_macros arena libc\n-DEPS_rustc_trans := rustc rustc_back rustc_llvm libc\n+DEPS_rustc_driver := arena flate getopts graphviz libc rustc rustc_back \\\n+                     rustc_typeck log syntax serialize rustc_llvm rustc_trans\n+DEPS_rustc_trans := arena flate getopts graphviz libc rustc rustc_back \\\n+\t                log syntax serialize rustc_llvm\n+DEPS_rustc_typeck := rustc syntax\n DEPS_rustc := syntax flate arena serialize getopts rbml \\\n               time log graphviz rustc_llvm rustc_back\n DEPS_rustc_llvm := native:rustllvm libc std\n DEPS_rustc_back := std syntax rustc_llvm flate log libc\n-DEPS_rustdoc := rustc rustc_trans native:hoedown serialize getopts \\\n+DEPS_rustdoc := rustc rustc_driver native:hoedown serialize getopts \\\n                 test time\n DEPS_flate := std native:miniz\n DEPS_arena := std\n@@ -94,7 +98,7 @@ DEPS_fmt_macros = std\n \n TOOL_DEPS_compiletest := test getopts\n TOOL_DEPS_rustdoc := rustdoc\n-TOOL_DEPS_rustc := rustc_trans\n+TOOL_DEPS_rustc := rustc_driver\n TOOL_SOURCE_compiletest := $(S)src/compiletest/compiletest.rs\n TOOL_SOURCE_rustdoc := $(S)src/driver/driver.rs\n TOOL_SOURCE_rustc := $(S)src/driver/driver.rs\n@@ -110,8 +114,12 @@ ONLY_RLIB_unicode := 1\n # You should not need to edit below this line\n ################################################################################\n \n-DOC_CRATES := $(filter-out rustc, $(filter-out rustc_trans, $(filter-out syntax, $(CRATES))))\n-COMPILER_DOC_CRATES := rustc rustc_trans syntax\n+DOC_CRATES := $(filter-out rustc, \\\n+              $(filter-out rustc_trans, \\\n+              $(filter-out rustc_typeck, \\\n+              $(filter-out rustc_driver, \\\n+              $(filter-out syntax, $(CRATES))))))\n+COMPILER_DOC_CRATES := rustc rustc_trans rustc_typeck rustc_driver syntax\n \n # This macro creates some simple definitions for each crate being built, just\n # some munging of all of the parameters above."}, {"sha": "b4b8249a8cb42ef5a7ba8ddb30d82faa6517e42d", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -21,7 +21,7 @@ $(eval $(call RUST_CRATE,coretest))\n \n TEST_TARGET_CRATES = $(filter-out core unicode,$(TARGET_CRATES)) coretest\n TEST_DOC_CRATES = $(DOC_CRATES)\n-TEST_HOST_CRATES = $(HOST_CRATES)\n+TEST_HOST_CRATES = $(filter-out rustc_typeck rustc_trans,$(HOST_CRATES))\n TEST_CRATES = $(TEST_TARGET_CRATES) $(TEST_HOST_CRATES)\n \n ######################################################################"}, {"sha": "5c29cb4ec72760f3813ff1270b1c8b93d8005a58", "filename": "src/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fdriver.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -12,6 +12,6 @@\n extern crate \"rustdoc\" as this;\n \n #[cfg(rustc)]\n-extern crate \"rustc_trans\" as this;\n+extern crate \"rustc_driver\" as this;\n \n fn main() { this::main() }"}, {"sha": "a964609e4e63404b928e95528f853c1ace0f3c23", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -59,6 +59,7 @@ pub mod back {\n }\n \n pub mod middle {\n+    pub mod astconv_util;\n     pub mod astencode;\n     pub mod borrowck;\n     pub mod cfg;\n@@ -79,6 +80,7 @@ pub mod middle {\n     pub mod fast_reject;\n     pub mod graph;\n     pub mod intrinsicck;\n+    pub mod infer;\n     pub mod lang_items;\n     pub mod liveness;\n     pub mod mem_categorization;\n@@ -93,7 +95,6 @@ pub mod middle {\n     pub mod traits;\n     pub mod ty;\n     pub mod ty_fold;\n-    pub mod typeck;\n     pub mod weak_lang_items;\n }\n "}, {"sha": "10c0ae6d3741771b62420b4217695cd2e05f4f17", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -29,8 +29,6 @@ use self::MethodContext::*;\n use metadata::csearch;\n use middle::def::*;\n use middle::ty::{mod, Ty};\n-use middle::typeck::astconv::ast_ty_to_ty;\n-use middle::typeck::{mod, infer};\n use middle::{def, pat_util, stability};\n use middle::const_eval::{eval_const_expr_partial, const_int, const_uint};\n use util::ppaux::{ty_to_string};\n@@ -84,7 +82,7 @@ impl LintPass for UnusedCasts {\n \n     fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n         if let ast::ExprCast(ref expr, ref ty) = e.node {\n-            let t_t = ast_ty_to_ty(cx, &infer::new_infer_ctxt(cx.tcx), &**ty);\n+            let t_t = ty::expr_ty(cx.tcx, e);\n             if ty::expr_ty(cx.tcx, &**expr) == t_t {\n                 cx.span_lint(UNUSED_TYPECASTS, ty.span, \"unnecessary type cast\");\n             }\n@@ -1589,22 +1587,22 @@ impl LintPass for Stability {\n             }\n             ast::ExprMethodCall(i, _, _) => {\n                 span = i.span;\n-                let method_call = typeck::MethodCall::expr(e.id);\n+                let method_call = ty::MethodCall::expr(e.id);\n                 match cx.tcx.method_map.borrow().get(&method_call) {\n                     Some(method) => {\n                         match method.origin {\n-                            typeck::MethodStatic(def_id) => {\n+                            ty::MethodStatic(def_id) => {\n                                 def_id\n                             }\n-                            typeck::MethodStaticUnboxedClosure(def_id) => {\n+                            ty::MethodStaticUnboxedClosure(def_id) => {\n                                 def_id\n                             }\n-                            typeck::MethodTypeParam(typeck::MethodParam {\n+                            ty::MethodTypeParam(ty::MethodParam {\n                                 ref trait_ref,\n                                 method_num: index,\n                                 ..\n                             }) |\n-                            typeck::MethodTraitObject(typeck::MethodObject {\n+                            ty::MethodTraitObject(ty::MethodObject {\n                                 ref trait_ref,\n                                 method_num: index,\n                                 .."}, {"sha": "442d3aab92dba9d562ba7e18462e2e0c14cf7b93", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -26,17 +26,13 @@\n use self::TargetLint::*;\n \n use middle::privacy::ExportedItems;\n-use middle::subst;\n use middle::ty::{mod, Ty};\n-use middle::typeck::astconv::AstConv;\n-use middle::typeck::infer;\n use session::{early_error, Session};\n use lint::{Level, LevelSource, Lint, LintId, LintArray, LintPass, LintPassObject};\n use lint::{Default, CommandLine, Node, Allow, Warn, Deny, Forbid};\n use lint::builtin;\n use util::nodemap::FnvHashMap;\n \n-use std::rc::Rc;\n use std::cell::RefCell;\n use std::tuple::Tuple2;\n use std::mem;\n@@ -541,42 +537,6 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> AstConv<'tcx> for Context<'a, 'tcx>{\n-    fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx> { self.tcx }\n-\n-    fn get_item_ty(&self, id: ast::DefId) -> ty::Polytype<'tcx> {\n-        ty::lookup_item_type(self.tcx, id)\n-    }\n-\n-    fn get_trait_def(&self, id: ast::DefId) -> Rc<ty::TraitDef<'tcx>> {\n-        ty::lookup_trait_def(self.tcx, id)\n-    }\n-\n-    fn ty_infer(&self, _span: Span) -> Ty<'tcx> {\n-        infer::new_infer_ctxt(self.tcx).next_ty_var()\n-    }\n-\n-    fn associated_types_of_trait_are_valid(&self, _: Ty<'tcx>, _: ast::DefId)\n-                                           -> bool {\n-        // FIXME(pcwalton): This is wrong.\n-        true\n-    }\n-\n-    fn associated_type_binding(&self,\n-                               _: Span,\n-                               _: Option<Ty<'tcx>>,\n-                               trait_id: ast::DefId,\n-                               associated_type_id: ast::DefId)\n-                               -> Ty<'tcx> {\n-        // FIXME(pcwalton): This is wrong.\n-        let trait_def = self.get_trait_def(trait_id);\n-        let index = ty::associated_type_parameter_index(self.tcx,\n-                                                        &*trait_def,\n-                                                        associated_type_id);\n-        ty::mk_param(self.tcx, subst::TypeSpace, index, associated_type_id)\n-    }\n-}\n-\n impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n     fn visit_item(&mut self, it: &ast::Item) {\n         self.with_lint_attrs(it.attrs.as_slice(), |cx| {"}, {"sha": "ebf5cca6a31a306520ad5f89497bf3a7c0e1859e", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -21,7 +21,6 @@ use middle::def;\n use middle::lang_items;\n use middle::resolve;\n use middle::ty;\n-use middle::typeck;\n use middle::subst::VecPerParamSpace;\n \n use rbml;\n@@ -268,7 +267,7 @@ pub fn get_impl_trait<'tcx>(tcx: &ty::ctxt<'tcx>,\n // Given a def_id for an impl, return information about its vtables\n pub fn get_impl_vtables<'tcx>(tcx: &ty::ctxt<'tcx>,\n                               def: ast::DefId)\n-                              -> typeck::vtable_res<'tcx> {\n+                              -> ty::vtable_res<'tcx> {\n     let cstore = &tcx.sess.cstore;\n     let cdata = cstore.get_crate_data(def.krate);\n     decoder::get_impl_vtables(&*cdata, def.node, tcx)"}, {"sha": "f352a28df6972e3b9690759c5b7720711993b61b", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -30,7 +30,6 @@ use middle::resolve::{TraitItemKind, TypeTraitItemKind};\n use middle::subst;\n use middle::ty::{ImplContainer, TraitContainer};\n use middle::ty::{mod, Ty};\n-use middle::typeck;\n use middle::astencode::vtable_decoder_helpers;\n \n use std::hash::Hash;\n@@ -422,7 +421,7 @@ pub fn get_impl_trait<'tcx>(cdata: Cmd,\n pub fn get_impl_vtables<'tcx>(cdata: Cmd,\n                               id: ast::NodeId,\n                               tcx: &ty::ctxt<'tcx>)\n-                              -> typeck::vtable_res<'tcx>\n+                              -> ty::vtable_res<'tcx>\n {\n     let item_doc = lookup_item(id, cdata.data());\n     let vtables_doc = reader::get_doc(item_doc, tag_item_impl_vtables);"}, {"sha": "6b90bcd60e75330f19be44f6fcc2897d3259a8df", "filename": "src/librustc/middle/astconv_util.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -0,0 +1,89 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*!\n+ * This module contains a simple utility routine\n+ * used by both `typeck` and `const_eval`.\n+ * Almost certainly this could (and should) be refactored out of existence.\n+ */\n+\n+use middle::def;\n+use middle::ty::{mod, Ty};\n+use syntax::ast;\n+use util::ppaux::Repr;\n+\n+pub const NO_REGIONS: uint = 1;\n+pub const NO_TPS: uint = 2;\n+\n+pub fn check_path_args(tcx: &ty::ctxt,\n+                       path: &ast::Path,\n+                       flags: uint) {\n+    if (flags & NO_TPS) != 0u {\n+        if path.segments.iter().any(|s| s.parameters.has_types()) {\n+            span_err!(tcx.sess, path.span, E0109,\n+                \"type parameters are not allowed on this type\");\n+        }\n+    }\n+\n+    if (flags & NO_REGIONS) != 0u {\n+        if path.segments.iter().any(|s| s.parameters.has_lifetimes()) {\n+            span_err!(tcx.sess, path.span, E0110,\n+                \"region parameters are not allowed on this type\");\n+        }\n+    }\n+}\n+\n+pub fn ast_ty_to_prim_ty<'tcx>(tcx: &ty::ctxt<'tcx>, ast_ty: &ast::Ty)\n+                               -> Option<Ty<'tcx>> {\n+    match ast_ty.node {\n+        ast::TyPath(ref path, id) => {\n+            let a_def = match tcx.def_map.borrow().get(&id) {\n+                None => {\n+                    tcx.sess.span_bug(ast_ty.span,\n+                                      format!(\"unbound path {}\",\n+                                              path.repr(tcx)).as_slice())\n+                }\n+                Some(&d) => d\n+            };\n+            match a_def {\n+                def::DefPrimTy(nty) => {\n+                    match nty {\n+                        ast::TyBool => {\n+                            check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n+                            Some(ty::mk_bool())\n+                        }\n+                        ast::TyChar => {\n+                            check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n+                            Some(ty::mk_char())\n+                        }\n+                        ast::TyInt(it) => {\n+                            check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n+                            Some(ty::mk_mach_int(it))\n+                        }\n+                        ast::TyUint(uit) => {\n+                            check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n+                            Some(ty::mk_mach_uint(uit))\n+                        }\n+                        ast::TyFloat(ft) => {\n+                            check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n+                            Some(ty::mk_mach_float(ft))\n+                        }\n+                        ast::TyStr => {\n+                            Some(ty::mk_str(tcx))\n+                        }\n+                    }\n+                }\n+                _ => None\n+            }\n+        }\n+        _ => None\n+    }\n+}\n+"}, {"sha": "113d127503f023df929e793c24613a0b74ec2e60", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 39, "deletions": 40, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -26,8 +26,7 @@ use metadata::tyencode;\n use middle::mem_categorization::Typer;\n use middle::subst;\n use middle::subst::VecPerParamSpace;\n-use middle::typeck::{mod, MethodCall, MethodCallee, MethodOrigin};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{mod, Ty, MethodCall, MethodCallee, MethodOrigin};\n use util::ppaux::ty_to_string;\n \n use syntax::{ast, ast_map, ast_util, codemap, fold};\n@@ -576,12 +575,12 @@ impl tr for ty::UpvarBorrow {\n \n trait read_method_callee_helper<'tcx> {\n     fn read_method_callee<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-        -> (typeck::ExprAdjustment, MethodCallee<'tcx>);\n+        -> (ty::ExprAdjustment, MethodCallee<'tcx>);\n }\n \n fn encode_method_callee<'a, 'tcx>(ecx: &e::EncodeContext<'a, 'tcx>,\n                                   rbml_w: &mut Encoder,\n-                                  adjustment: typeck::ExprAdjustment,\n+                                  adjustment: ty::ExprAdjustment,\n                                   method: &MethodCallee<'tcx>) {\n     use serialize::Encoder;\n \n@@ -603,7 +602,7 @@ fn encode_method_callee<'a, 'tcx>(ecx: &e::EncodeContext<'a, 'tcx>,\n \n impl<'a, 'tcx> read_method_callee_helper<'tcx> for reader::Decoder<'a> {\n     fn read_method_callee<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-        -> (typeck::ExprAdjustment, MethodCallee<'tcx>) {\n+        -> (ty::ExprAdjustment, MethodCallee<'tcx>) {\n \n         self.read_struct(\"MethodCallee\", 4, |this| {\n             let adjustment = this.read_struct_field(\"adjustment\", 0, |this| {\n@@ -627,22 +626,22 @@ impl<'a, 'tcx> read_method_callee_helper<'tcx> for reader::Decoder<'a> {\n impl<'tcx> tr for MethodOrigin<'tcx> {\n     fn tr(&self, dcx: &DecodeContext) -> MethodOrigin<'tcx> {\n         match *self {\n-            typeck::MethodStatic(did) => typeck::MethodStatic(did.tr(dcx)),\n-            typeck::MethodStaticUnboxedClosure(did) => {\n-                typeck::MethodStaticUnboxedClosure(did.tr(dcx))\n+            ty::MethodStatic(did) => ty::MethodStatic(did.tr(dcx)),\n+            ty::MethodStaticUnboxedClosure(did) => {\n+                ty::MethodStaticUnboxedClosure(did.tr(dcx))\n             }\n-            typeck::MethodTypeParam(ref mp) => {\n-                typeck::MethodTypeParam(\n-                    typeck::MethodParam {\n+            ty::MethodTypeParam(ref mp) => {\n+                ty::MethodTypeParam(\n+                    ty::MethodParam {\n                         // def-id is already translated when we read it out\n                         trait_ref: mp.trait_ref.clone(),\n                         method_num: mp.method_num,\n                     }\n                 )\n             }\n-            typeck::MethodTraitObject(ref mo) => {\n-                typeck::MethodTraitObject(\n-                    typeck::MethodObject {\n+            ty::MethodTraitObject(ref mo) => {\n+                ty::MethodTraitObject(\n+                    ty::MethodObject {\n                         trait_ref: mo.trait_ref.clone(),\n                         .. *mo\n                     }\n@@ -687,16 +686,16 @@ pub trait vtable_decoder_helpers<'tcx> {\n     fn read_vtable_res_with_key(&mut self,\n                                 tcx: &ty::ctxt<'tcx>,\n                                 cdata: &cstore::crate_metadata)\n-                                -> (typeck::ExprAdjustment, typeck::vtable_res<'tcx>);\n+                                -> (ty::ExprAdjustment, ty::vtable_res<'tcx>);\n     fn read_vtable_res(&mut self,\n                        tcx: &ty::ctxt<'tcx>, cdata: &cstore::crate_metadata)\n-                      -> typeck::vtable_res<'tcx>;\n+                      -> ty::vtable_res<'tcx>;\n     fn read_vtable_param_res(&mut self,\n                        tcx: &ty::ctxt<'tcx>, cdata: &cstore::crate_metadata)\n-                      -> typeck::vtable_param_res<'tcx>;\n+                      -> ty::vtable_param_res<'tcx>;\n     fn read_vtable_origin(&mut self,\n                           tcx: &ty::ctxt<'tcx>, cdata: &cstore::crate_metadata)\n-                          -> typeck::vtable_origin<'tcx>;\n+                          -> ty::vtable_origin<'tcx>;\n }\n \n impl<'tcx, 'a> vtable_decoder_helpers<'tcx> for reader::Decoder<'a> {\n@@ -714,7 +713,7 @@ impl<'tcx, 'a> vtable_decoder_helpers<'tcx> for reader::Decoder<'a> {\n     fn read_vtable_res_with_key(&mut self,\n                                 tcx: &ty::ctxt<'tcx>,\n                                 cdata: &cstore::crate_metadata)\n-                                -> (typeck::ExprAdjustment, typeck::vtable_res<'tcx>) {\n+                                -> (ty::ExprAdjustment, ty::vtable_res<'tcx>) {\n         self.read_struct(\"VtableWithKey\", 2, |this| {\n             let adjustment = this.read_struct_field(\"adjustment\", 0, |this| {\n                 Decodable::decode(this)\n@@ -728,22 +727,22 @@ impl<'tcx, 'a> vtable_decoder_helpers<'tcx> for reader::Decoder<'a> {\n     fn read_vtable_res(&mut self,\n                        tcx: &ty::ctxt<'tcx>,\n                        cdata: &cstore::crate_metadata)\n-                       -> typeck::vtable_res<'tcx>\n+                       -> ty::vtable_res<'tcx>\n     {\n         self.read_vec_per_param_space(\n             |this| this.read_vtable_param_res(tcx, cdata))\n     }\n \n     fn read_vtable_param_res(&mut self,\n                              tcx: &ty::ctxt<'tcx>, cdata: &cstore::crate_metadata)\n-                      -> typeck::vtable_param_res<'tcx> {\n+                      -> ty::vtable_param_res<'tcx> {\n         self.read_to_vec(|this| Ok(this.read_vtable_origin(tcx, cdata)))\n              .unwrap().into_iter().collect()\n     }\n \n     fn read_vtable_origin(&mut self,\n                           tcx: &ty::ctxt<'tcx>, cdata: &cstore::crate_metadata)\n-        -> typeck::vtable_origin<'tcx> {\n+        -> ty::vtable_origin<'tcx> {\n         self.read_enum(\"vtable_origin\", |this| {\n             this.read_enum_variant(&[\"vtable_static\",\n                                      \"vtable_param\",\n@@ -752,7 +751,7 @@ impl<'tcx, 'a> vtable_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                                    |this, i| {\n                 Ok(match i {\n                   0 => {\n-                    typeck::vtable_static(\n+                    ty::vtable_static(\n                         this.read_enum_variant_arg(0u, |this| {\n                             Ok(this.read_def_id_nodcx(cdata))\n                         }).unwrap(),\n@@ -765,7 +764,7 @@ impl<'tcx, 'a> vtable_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                     )\n                   }\n                   1 => {\n-                    typeck::vtable_param(\n+                    ty::vtable_param(\n                         this.read_enum_variant_arg(0u, |this| {\n                             Decodable::decode(this)\n                         }).unwrap(),\n@@ -775,14 +774,14 @@ impl<'tcx, 'a> vtable_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                     )\n                   }\n                   2 => {\n-                    typeck::vtable_unboxed_closure(\n+                    ty::vtable_unboxed_closure(\n                         this.read_enum_variant_arg(0u, |this| {\n                             Ok(this.read_def_id_nodcx(cdata))\n                         }).unwrap()\n                     )\n                   }\n                   3 => {\n-                    typeck::vtable_error\n+                    ty::vtable_error\n                   }\n                   _ => panic!(\"bad enum variant\")\n                 })\n@@ -826,7 +825,7 @@ trait rbml_writer_helpers<'tcx> {\n                              closure_type: &ty::ClosureTy<'tcx>);\n     fn emit_method_origin<'a>(&mut self,\n                               ecx: &e::EncodeContext<'a, 'tcx>,\n-                              method_origin: &typeck::MethodOrigin<'tcx>);\n+                              method_origin: &ty::MethodOrigin<'tcx>);\n     fn emit_ty<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>, ty: Ty<'tcx>);\n     fn emit_tys<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>, tys: &[Ty<'tcx>]);\n     fn emit_type_param_def<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,\n@@ -860,25 +859,25 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n \n     fn emit_method_origin<'a>(&mut self,\n                               ecx: &e::EncodeContext<'a, 'tcx>,\n-                              method_origin: &typeck::MethodOrigin<'tcx>)\n+                              method_origin: &ty::MethodOrigin<'tcx>)\n     {\n         use serialize::Encoder;\n \n         self.emit_enum(\"MethodOrigin\", |this| {\n             match *method_origin {\n-                typeck::MethodStatic(def_id) => {\n+                ty::MethodStatic(def_id) => {\n                     this.emit_enum_variant(\"MethodStatic\", 0, 1, |this| {\n                         Ok(this.emit_def_id(def_id))\n                     })\n                 }\n \n-                typeck::MethodStaticUnboxedClosure(def_id) => {\n+                ty::MethodStaticUnboxedClosure(def_id) => {\n                     this.emit_enum_variant(\"MethodStaticUnboxedClosure\", 1, 1, |this| {\n                         Ok(this.emit_def_id(def_id))\n                     })\n                 }\n \n-                typeck::MethodTypeParam(ref p) => {\n+                ty::MethodTypeParam(ref p) => {\n                     this.emit_enum_variant(\"MethodTypeParam\", 2, 1, |this| {\n                         this.emit_struct(\"MethodParam\", 2, |this| {\n                             try!(this.emit_struct_field(\"trait_ref\", 0, |this| {\n@@ -892,7 +891,7 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n                     })\n                 }\n \n-                typeck::MethodTraitObject(ref o) => {\n+                ty::MethodTraitObject(ref o) => {\n                     this.emit_enum_variant(\"MethodTraitObject\", 3, 1, |this| {\n                         this.emit_struct(\"MethodObject\", 2, |this| {\n                             try!(this.emit_struct_field(\"trait_ref\", 0, |this| {\n@@ -1330,7 +1329,7 @@ impl<'a> doc_decoder_helpers for rbml::Doc<'a> {\n \n trait rbml_decoder_decoder_helpers<'tcx> {\n     fn read_method_origin<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-                                  -> typeck::MethodOrigin<'tcx>;\n+                                  -> ty::MethodOrigin<'tcx>;\n     fn read_ty<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>) -> Ty<'tcx>;\n     fn read_tys<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>) -> Vec<Ty<'tcx>>;\n     fn read_trait_ref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n@@ -1409,7 +1408,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n     }\n \n     fn read_method_origin<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-                                  -> typeck::MethodOrigin<'tcx>\n+                                  -> ty::MethodOrigin<'tcx>\n     {\n         self.read_enum(\"MethodOrigin\", |this| {\n             let variants = &[\"MethodStatic\", \"MethodStaticUnboxedClosure\",\n@@ -1418,18 +1417,18 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                 Ok(match i {\n                     0 => {\n                         let def_id = this.read_def_id(dcx);\n-                        typeck::MethodStatic(def_id)\n+                        ty::MethodStatic(def_id)\n                     }\n \n                     1 => {\n                         let def_id = this.read_def_id(dcx);\n-                        typeck::MethodStaticUnboxedClosure(def_id)\n+                        ty::MethodStaticUnboxedClosure(def_id)\n                     }\n \n                     2 => {\n                         this.read_struct(\"MethodTypeParam\", 2, |this| {\n-                            Ok(typeck::MethodTypeParam(\n-                                typeck::MethodParam {\n+                            Ok(ty::MethodTypeParam(\n+                                ty::MethodParam {\n                                     trait_ref: {\n                                         this.read_struct_field(\"trait_ref\", 0, |this| {\n                                             Ok(this.read_trait_ref(dcx))\n@@ -1446,8 +1445,8 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n \n                     3 => {\n                         this.read_struct(\"MethodTraitObject\", 2, |this| {\n-                            Ok(typeck::MethodTraitObject(\n-                                typeck::MethodObject {\n+                            Ok(ty::MethodTraitObject(\n+                                ty::MethodObject {\n                                     trait_ref: {\n                                         this.read_struct_field(\"trait_ref\", 0, |this| {\n                                             Ok(this.read_trait_ref(dcx))"}, {"sha": "90919609e2e447ab72535ff461866ef2b709e55a", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -12,7 +12,6 @@ use middle::cfg::*;\n use middle::def;\n use middle::graph;\n use middle::region::CodeExtent;\n-use middle::typeck;\n use middle::ty;\n use syntax::ast;\n use syntax::ast_util;\n@@ -510,7 +509,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             pred: CFGIndex,\n             func_or_rcvr: &ast::Expr,\n             args: I) -> CFGIndex {\n-        let method_call = typeck::MethodCall::expr(call_expr.id);\n+        let method_call = ty::MethodCall::expr(call_expr.id);\n         let return_ty = ty::ty_fn_ret(match self.tcx.method_map.borrow().get(&method_call) {\n             Some(method) => method.ty,\n             None => ty::expr_ty(self.tcx, func_or_rcvr)\n@@ -635,7 +634,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n     }\n \n     fn is_method_call(&self, expr: &ast::Expr) -> bool {\n-        let method_call = typeck::MethodCall::expr(expr.id);\n+        let method_call = ty::MethodCall::expr(expr.id);\n         self.tcx.method_map.borrow().contains_key(&method_call)\n     }\n }"}, {"sha": "de140fd5c306c5bed9efb706ba261603b18392f0", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -11,7 +11,6 @@\n \n use middle::def::*;\n use middle::ty;\n-use middle::typeck;\n use util::ppaux;\n \n use syntax::ast;\n@@ -111,7 +110,7 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &ast::Expr) -> bool {\n         }\n         ast::ExprLit(ref lit) if ast_util::lit_is_str(&**lit) => {}\n         ast::ExprBinary(..) | ast::ExprUnary(..) => {\n-            let method_call = typeck::MethodCall::expr(e.id);\n+            let method_call = ty::MethodCall::expr(e.id);\n             if v.tcx.method_map.borrow().contains_key(&method_call) {\n                 span_err!(v.tcx.sess, e.span, E0011,\n                           \"user-defined operators are not allowed in constant \\"}, {"sha": "2fc85afd3935d365f1d1b7f461fcf76a26ea6db9", "filename": "src/librustc/middle/check_static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -27,7 +27,7 @@ use self::Mode::*;\n \n use middle::ty;\n use middle::def;\n-use middle::typeck;\n+use middle::infer;\n use middle::traits;\n use middle::mem_categorization as mc;\n use middle::expr_use_visitor as euv;\n@@ -113,7 +113,7 @@ impl<'a, 'tcx> CheckStaticVisitor<'a, 'tcx> {\n \n     fn check_static_type(&self, e: &ast::Expr) {\n         let ty = ty::node_id_to_type(self.tcx, e.id);\n-        let infcx = typeck::infer::new_infer_ctxt(self.tcx);\n+        let infcx = infer::new_infer_ctxt(self.tcx);\n         let mut fulfill_cx = traits::FulfillmentContext::new();\n         let cause = traits::ObligationCause::misc(DUMMY_SP);\n         let obligation = traits::obligation_for_builtin_bound(self.tcx, cause, ty,"}, {"sha": "43726f55bb989ae2ae2167b2dc2efff4c7af486a", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -17,8 +17,8 @@ pub use self::constness::*;\n use metadata::csearch;\n use middle::{astencode, def};\n use middle::pat_util::def_to_path;\n-use middle::ty::{mod, Ty};\n-use middle::typeck::{astconv, check};\n+use middle::ty::{mod};\n+use middle::astconv_util::{ast_ty_to_prim_ty};\n use util::nodemap::DefIdMap;\n \n use syntax::ast::{mod, Expr};\n@@ -277,14 +277,6 @@ impl<'a, 'tcx> ConstEvalVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for ConstEvalVisitor<'a, 'tcx> {\n-    fn visit_ty(&mut self, t: &ast::Ty) {\n-        if let ast::TyFixedLengthVec(_, ref expr) = t.node {\n-            check::check_const_in_type(self.tcx, &**expr, ty::mk_uint());\n-        }\n-\n-        visit::walk_ty(self, t);\n-    }\n-\n     fn visit_expr_post(&mut self, e: &Expr) {\n         self.classify(e);\n     }\n@@ -504,7 +496,7 @@ pub fn eval_const_expr_partial(tcx: &ty::ctxt, e: &Expr) -> Result<const_val, St\n         // populated in the ctxt, which was causing things to blow up\n         // (#5900). Fall back to doing a limited lookup to get past it.\n         let ety = ty::expr_ty_opt(tcx, e)\n-                .or_else(|| astconv::ast_ty_to_prim_ty(tcx, &**target_ty))\n+                .or_else(|| ast_ty_to_prim_ty(tcx, &**target_ty))\n                 .unwrap_or_else(|| {\n                     tcx.sess.span_fatal(target_ty.span,\n                                         \"target type not found for const cast\")"}, {"sha": "03fe87824215925b36e09b4f8338a41f4bc56377", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -12,7 +12,7 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n-use middle::{def, pat_util, privacy, ty, typeck};\n+use middle::{def, pat_util, privacy, ty};\n use lint;\n use util::nodemap::NodeSet;\n \n@@ -90,23 +90,23 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n \n     fn lookup_and_handle_method(&mut self, id: ast::NodeId,\n                                 span: codemap::Span) {\n-        let method_call = typeck::MethodCall::expr(id);\n+        let method_call = ty::MethodCall::expr(id);\n         match self.tcx.method_map.borrow().get(&method_call) {\n             Some(method) => {\n                 match method.origin {\n-                    typeck::MethodStatic(def_id) => {\n+                    ty::MethodStatic(def_id) => {\n                         match ty::provided_source(self.tcx, def_id) {\n                             Some(p_did) => self.check_def_id(p_did),\n                             None => self.check_def_id(def_id)\n                         }\n                     }\n-                    typeck::MethodStaticUnboxedClosure(_) => {}\n-                    typeck::MethodTypeParam(typeck::MethodParam {\n+                    ty::MethodStaticUnboxedClosure(_) => {}\n+                    ty::MethodTypeParam(ty::MethodParam {\n                         ref trait_ref,\n                         method_num: index,\n                         ..\n                     }) |\n-                    typeck::MethodTraitObject(typeck::MethodObject {\n+                    ty::MethodTraitObject(ty::MethodObject {\n                         ref trait_ref,\n                         method_num: index,\n                         .."}, {"sha": "dbec69f420503f139efa1facf2863bfb5c321f86", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -14,7 +14,7 @@ use self::UnsafeContext::*;\n \n use middle::def;\n use middle::ty::{mod, Ty};\n-use middle::typeck::MethodCall;\n+use middle::ty::MethodCall;\n use util::ppaux;\n \n use syntax::ast;"}, {"sha": "7d2bb7458acd59cd197bc09d8c09d59f91de7bdc", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -24,10 +24,9 @@ use middle::{def, region, pat_util};\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Typer;\n use middle::ty::{mod, Ty};\n-use middle::typeck::{MethodCall, MethodObject, MethodTraitObject};\n-use middle::typeck::{MethodOrigin, MethodParam, MethodTypeParam};\n-use middle::typeck::{MethodStatic, MethodStaticUnboxedClosure};\n-use middle::typeck;\n+use middle::ty::{MethodCall, MethodObject, MethodTraitObject};\n+use middle::ty::{MethodOrigin, MethodParam, MethodTypeParam};\n+use middle::ty::{MethodStatic, MethodStaticUnboxedClosure};\n use util::ppaux::Repr;\n \n use syntax::ast;\n@@ -825,7 +824,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n         debug!(\"walk_autoderefs expr={} autoderefs={}\", expr.repr(self.tcx()), autoderefs);\n \n         for i in range(0, autoderefs) {\n-            let deref_id = typeck::MethodCall::autoderef(expr.id, i);\n+            let deref_id = ty::MethodCall::autoderef(expr.id, i);\n             match self.typer.node_method_ty(deref_id) {\n                 None => {}\n                 Some(method_ty) => {"}, {"sha": "f04c519badc8c2d28aa607264bdd77a7af9a7329", "filename": "src/librustc/middle/infer/coercion.rs", "status": "renamed", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -60,14 +60,15 @@\n //! sort of a minor point so I've opted to leave it for later---after all\n //! we may want to adjust precisely when coercions occur.\n \n+use super::{CoerceResult, resolve_type, Coercion};\n+use super::combine::{CombineFields, Combine};\n+use super::sub::Sub;\n+use super::resolve::try_resolve_tvar_shallow;\n+\n use middle::subst;\n use middle::ty::{AutoPtr, AutoDerefRef, AdjustDerefRef, AutoUnsize, AutoUnsafe};\n use middle::ty::{mt};\n use middle::ty::{mod, Ty};\n-use middle::typeck::infer::{CoerceResult, resolve_type, Coercion};\n-use middle::typeck::infer::combine::{CombineFields, Combine};\n-use middle::typeck::infer::sub::Sub;\n-use middle::typeck::infer::resolve::try_resolve_tvar_shallow;\n use util::ppaux;\n use util::ppaux::Repr;\n ", "previous_filename": "src/librustc/middle/typeck/infer/coercion.rs"}, {"sha": "ab9c5b86aeb6292d84a97f0bd1dfc41dd7c9e5d4", "filename": "src/librustc/middle/infer/combine.rs", "status": "renamed", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -32,6 +32,14 @@\n // is also useful to track which value is the \"expected\" value in\n // terms of error reporting.\n \n+use super::equate::Equate;\n+use super::glb::Glb;\n+use super::lub::Lub;\n+use super::sub::Sub;\n+use super::unify::InferCtxtMethodsForSimplyUnifiableTypes;\n+use super::{InferCtxt, cres};\n+use super::{MiscVariable, TypeTrace};\n+use super::type_variable::{RelationDir, EqTo, SubtypeOf, SupertypeOf};\n \n use middle::subst;\n use middle::subst::{ErasedRegions, NonerasedRegions, Substs};\n@@ -40,15 +48,6 @@ use middle::ty::{IntType, UintType};\n use middle::ty::{BuiltinBounds};\n use middle::ty::{mod, Ty};\n use middle::ty_fold;\n-use middle::typeck::infer::equate::Equate;\n-use middle::typeck::infer::glb::Glb;\n-use middle::typeck::infer::lub::Lub;\n-use middle::typeck::infer::sub::Sub;\n-use middle::typeck::infer::unify::InferCtxtMethodsForSimplyUnifiableTypes;\n-use middle::typeck::infer::{InferCtxt, cres};\n-use middle::typeck::infer::{MiscVariable, TypeTrace};\n-use middle::typeck::infer::type_variable::{RelationDir, EqTo,\n-                                           SubtypeOf, SupertypeOf};\n use middle::ty_fold::{TypeFoldable};\n use util::ppaux::Repr;\n ", "previous_filename": "src/librustc/middle/typeck/infer/combine.rs"}, {"sha": "0e3cc5f68c868c86b00e12cb906a0da5bfc5dc71", "filename": "src/librustc/middle/infer/doc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fdoc.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "previous_filename": "src/librustc/middle/typeck/infer/doc.rs"}, {"sha": "a79a50b1781eb41ccea0d0eaa262d7dcebf9e019", "filename": "src/librustc/middle/infer/equate.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -11,14 +11,14 @@\n use middle::ty::{BuiltinBounds};\n use middle::ty::{mod, Ty};\n use middle::ty::TyVar;\n-use middle::typeck::infer::combine::*;\n-use middle::typeck::infer::{cres};\n-use middle::typeck::infer::glb::Glb;\n-use middle::typeck::infer::InferCtxt;\n-use middle::typeck::infer::lub::Lub;\n-use middle::typeck::infer::sub::Sub;\n-use middle::typeck::infer::{TypeTrace, Subtype};\n-use middle::typeck::infer::type_variable::{EqTo};\n+use middle::infer::combine::*;\n+use middle::infer::{cres};\n+use middle::infer::glb::Glb;\n+use middle::infer::InferCtxt;\n+use middle::infer::lub::Lub;\n+use middle::infer::sub::Sub;\n+use middle::infer::{TypeTrace, Subtype};\n+use middle::infer::type_variable::{EqTo};\n use util::ppaux::{Repr};\n \n use syntax::ast::{Onceness, FnStyle};", "previous_filename": "src/librustc/middle/typeck/infer/equate.rs"}, {"sha": "657ee088758d17c6e4f1a4b9c6753d52b1c35b7e", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "renamed", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -57,24 +57,25 @@\n \n use self::FreshOrKept::*;\n \n+use super::InferCtxt;\n+use super::TypeTrace;\n+use super::SubregionOrigin;\n+use super::RegionVariableOrigin;\n+use super::ValuePairs;\n+use super::region_inference::RegionResolutionError;\n+use super::region_inference::ConcreteFailure;\n+use super::region_inference::SubSupConflict;\n+use super::region_inference::SupSupConflict;\n+use super::region_inference::ParamBoundFailure;\n+use super::region_inference::ProcessedErrors;\n+use super::region_inference::SameRegions;\n+\n use std::collections::HashSet;\n use middle::def;\n+use middle::infer;\n use middle::subst;\n use middle::ty::{mod, Ty};\n use middle::ty::{Region, ReFree};\n-use middle::typeck::infer;\n-use middle::typeck::infer::InferCtxt;\n-use middle::typeck::infer::TypeTrace;\n-use middle::typeck::infer::SubregionOrigin;\n-use middle::typeck::infer::RegionVariableOrigin;\n-use middle::typeck::infer::ValuePairs;\n-use middle::typeck::infer::region_inference::RegionResolutionError;\n-use middle::typeck::infer::region_inference::ConcreteFailure;\n-use middle::typeck::infer::region_inference::SubSupConflict;\n-use middle::typeck::infer::region_inference::SupSupConflict;\n-use middle::typeck::infer::region_inference::ParamBoundFailure;\n-use middle::typeck::infer::region_inference::ProcessedErrors;\n-use middle::typeck::infer::region_inference::SameRegions;\n use std::cell::{Cell, RefCell};\n use std::char::from_u32;\n use std::rc::Rc;", "previous_filename": "src/librustc/middle/typeck/infer/error_reporting.rs"}, {"sha": "4237a7af32fc157cfa01c7ba1dee8382d6f9dcb5", "filename": "src/librustc/middle/infer/glb.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use super::combine::*;\n+use super::lattice::*;\n+use super::equate::Equate;\n+use super::higher_ranked::HigherRankedRelations;\n+use super::lub::Lub;\n+use super::sub::Sub;\n+use super::{cres, InferCtxt};\n+use super::{TypeTrace, Subtype};\n \n use middle::ty::{BuiltinBounds};\n use middle::ty::{mod, Ty};\n-use middle::typeck::infer::combine::*;\n-use middle::typeck::infer::lattice::*;\n-use middle::typeck::infer::equate::Equate;\n-use middle::typeck::infer::higher_ranked::HigherRankedRelations;\n-use middle::typeck::infer::lub::Lub;\n-use middle::typeck::infer::sub::Sub;\n-use middle::typeck::infer::{cres, InferCtxt};\n-use middle::typeck::infer::{TypeTrace, Subtype};\n use syntax::ast::{Many, Once, MutImmutable, MutMutable};\n use syntax::ast::{NormalFn, UnsafeFn};\n use syntax::ast::{Onceness, FnStyle};", "previous_filename": "src/librustc/middle/typeck/infer/glb.rs"}, {"sha": "2bad3616a05d19fd92f2bc67820f5cdc7a8dd7fd", "filename": "src/librustc/middle/infer/higher_ranked/doc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fdoc.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "previous_filename": "src/librustc/middle/typeck/infer/higher_ranked/doc.rs"}, {"sha": "95805ef8b944d5e130a8904b853e90e5a9511add", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "renamed", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -11,10 +11,11 @@\n //! Helper routines for higher-ranked things. See the `doc` module at\n //! the end of the file for details.\n \n+use super::{combine, cres, InferCtxt, HigherRankedType};\n+use super::combine::Combine;\n+use super::region_inference::{RegionMark};\n+\n use middle::ty::{mod, Ty, replace_late_bound_regions};\n-use middle::typeck::infer::{mod, combine, cres, InferCtxt};\n-use middle::typeck::infer::combine::Combine;\n-use middle::typeck::infer::region_inference::{RegionMark};\n use middle::ty_fold::{mod, HigherRankedFoldable, TypeFoldable};\n use syntax::codemap::Span;\n use util::nodemap::FnvHashMap;\n@@ -62,7 +63,7 @@ impl<'tcx,C> HigherRankedRelations<'tcx> for C\n         let (a_prime, _) =\n             self.infcx().replace_late_bound_regions_with_fresh_var(\n                 self.trace().origin.span(),\n-                infer::HigherRankedType,\n+                HigherRankedType,\n                 a);\n \n         // Second, we instantiate each bound region in the supertype with a\n@@ -131,10 +132,10 @@ impl<'tcx,C> HigherRankedRelations<'tcx> for C\n         let span = self.trace().origin.span();\n         let (a_with_fresh, a_map) =\n             self.infcx().replace_late_bound_regions_with_fresh_var(\n-                span, infer::HigherRankedType, a);\n+                span, HigherRankedType, a);\n         let (b_with_fresh, _) =\n             self.infcx().replace_late_bound_regions_with_fresh_var(\n-                span, infer::HigherRankedType, b);\n+                span, HigherRankedType, b);\n \n         // Collect constraints.\n         let result0 =\n@@ -221,10 +222,10 @@ impl<'tcx,C> HigherRankedRelations<'tcx> for C\n         // Instantiate each bound region with a fresh region variable.\n         let (a_with_fresh, a_map) =\n             self.infcx().replace_late_bound_regions_with_fresh_var(\n-                self.trace().origin.span(), infer::HigherRankedType, a);\n+                self.trace().origin.span(), HigherRankedType, a);\n         let (b_with_fresh, b_map) =\n             self.infcx().replace_late_bound_regions_with_fresh_var(\n-                self.trace().origin.span(), infer::HigherRankedType, b);\n+                self.trace().origin.span(), HigherRankedType, b);\n         let a_vars = var_ids(self, &a_map);\n         let b_vars = var_ids(self, &b_map);\n ", "previous_filename": "src/librustc/middle/typeck/infer/higher_ranked/mod.rs"}, {"sha": "dd514ebee524af9dee0e77f7584c7b6a40e837dc", "filename": "src/librustc/middle/infer/lattice.rs", "status": "renamed", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Flattice.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -29,12 +29,13 @@\n //! over a `LatticeValue`, which is a value defined with respect to\n //! a lattice.\n \n+use super::*;\n+use super::combine::*;\n+use super::glb::Glb;\n+use super::lub::Lub;\n+\n use middle::ty::{TyVar};\n use middle::ty::{mod, Ty};\n-use middle::typeck::infer::*;\n-use middle::typeck::infer::combine::*;\n-use middle::typeck::infer::glb::Glb;\n-use middle::typeck::infer::lub::Lub;\n use util::ppaux::Repr;\n \n pub trait LatticeDir<'tcx> {", "previous_filename": "src/librustc/middle/typeck/infer/lattice.rs"}, {"sha": "f53ba571062b2972140b04a1c028f81878a73623", "filename": "src/librustc/middle/infer/lub.rs", "status": "renamed", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -8,16 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use super::combine::*;\n+use super::equate::Equate;\n+use super::glb::Glb;\n+use super::higher_ranked::HigherRankedRelations;\n+use super::lattice::*;\n+use super::sub::Sub;\n+use super::{cres, InferCtxt};\n+use super::{TypeTrace, Subtype};\n+\n use middle::ty::{BuiltinBounds};\n use middle::ty::{mod, Ty};\n-use middle::typeck::infer::combine::*;\n-use middle::typeck::infer::equate::Equate;\n-use middle::typeck::infer::glb::Glb;\n-use middle::typeck::infer::higher_ranked::HigherRankedRelations;\n-use middle::typeck::infer::lattice::*;\n-use middle::typeck::infer::sub::Sub;\n-use middle::typeck::infer::{cres, InferCtxt};\n-use middle::typeck::infer::{TypeTrace, Subtype};\n use syntax::ast::{Many, Once};\n use syntax::ast::{NormalFn, UnsafeFn};\n use syntax::ast::{Onceness, FnStyle};", "previous_filename": "src/librustc/middle/typeck/infer/lub.rs"}, {"sha": "c5845b143af89aca4da0d3ee6b563e498d094543", "filename": "src/librustc/middle/infer/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "previous_filename": "src/librustc/middle/typeck/infer/mod.rs"}, {"sha": "686174b73060b85d762c831303ba1b166feb349a", "filename": "src/librustc/middle/infer/region_inference/doc.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fdoc.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -371,4 +371,4 @@\n //! ### Skolemization\n //!\n //! For a discussion on skolemization and higher-ranked subtyping, please\n-//! see the module `middle::typeck::infer::higher_ranked::doc`.\n+//! see the module `middle::infer::higher_ranked::doc`.", "previous_filename": "src/librustc/middle/typeck/infer/region_inference/doc.rs"}, {"sha": "9155c18cb3b5a1dea04bc75f165e1bcfbda99578", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -18,14 +18,14 @@ pub use self::RegionResolutionError::*;\n pub use self::VarValue::*;\n use self::Classification::*;\n \n+use super::cres;\n+use super::{RegionVariableOrigin, SubregionOrigin, TypeTrace, MiscVariable};\n+\n use middle::region;\n use middle::ty;\n use middle::ty::{BoundRegion, FreeRegion, Region, RegionVid};\n use middle::ty::{ReEmpty, ReStatic, ReInfer, ReFree, ReEarlyBound};\n use middle::ty::{ReLateBound, ReScope, ReVar, ReSkolemized, BrFresh};\n-use middle::typeck::infer::cres;\n-use middle::typeck::infer::{RegionVariableOrigin, SubregionOrigin, TypeTrace};\n-use middle::typeck::infer;\n use middle::graph;\n use middle::graph::{Direction, NodeIndex};\n use util::common::indenter;\n@@ -573,7 +573,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n             }\n             None => {}\n         }\n-        let c = self.new_region_var(infer::MiscVariable(origin.span()));\n+        let c = self.new_region_var(MiscVariable(origin.span()));\n         self.combine_map(t).borrow_mut().insert(vars, c);\n         if self.in_snapshot() {\n             self.undo_log.borrow_mut().push(AddCombination(t, vars));", "previous_filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs"}, {"sha": "eaf363ffc74c293d7aee306abe58286e6ac99cb1", "filename": "src/librustc/middle/infer/resolve.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -48,12 +48,13 @@\n \n #![allow(non_upper_case_globals)]\n \n+use super::{fixup_err, fres, InferCtxt};\n+use super::{unresolved_int_ty,unresolved_float_ty,unresolved_ty};\n+\n use middle::ty::{FloatVar, FloatVid, IntVar, IntVid, RegionVid, TyVar, TyVid};\n use middle::ty::{IntType, UintType};\n use middle::ty::{mod, Ty};\n use middle::ty_fold;\n-use middle::typeck::infer::{fixup_err, fres, InferCtxt};\n-use middle::typeck::infer::{unresolved_int_ty,unresolved_float_ty,unresolved_ty};\n use syntax::codemap::Span;\n use util::ppaux::{Repr, ty_to_string};\n ", "previous_filename": "src/librustc/middle/typeck/infer/resolve.rs"}, {"sha": "62bf1d0126a59d156442f1260ecd98b47d21dae2", "filename": "src/librustc/middle/infer/skolemize.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fskolemize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fskolemize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fskolemize.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "previous_filename": "src/librustc/middle/typeck/infer/skolemize.rs"}, {"sha": "c470b2488273a37952a4060ac24158ed9220d1bd", "filename": "src/librustc/middle/infer/sub.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -8,19 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use super::combine::*;\n+use super::{cres, CresCompare};\n+use super::equate::Equate;\n+use super::glb::Glb;\n+use super::higher_ranked::HigherRankedRelations;\n+use super::InferCtxt;\n+use super::lub::Lub;\n+use super::{TypeTrace, Subtype};\n+use super::type_variable::{SubtypeOf, SupertypeOf};\n \n use middle::ty::{BuiltinBounds};\n use middle::ty::{mod, Ty};\n use middle::ty::TyVar;\n-use middle::typeck::infer::combine::*;\n-use middle::typeck::infer::{cres, CresCompare};\n-use middle::typeck::infer::equate::Equate;\n-use middle::typeck::infer::glb::Glb;\n-use middle::typeck::infer::higher_ranked::HigherRankedRelations;\n-use middle::typeck::infer::InferCtxt;\n-use middle::typeck::infer::lub::Lub;\n-use middle::typeck::infer::{TypeTrace, Subtype};\n-use middle::typeck::infer::type_variable::{SubtypeOf, SupertypeOf};\n use util::ppaux::{Repr};\n \n use syntax::ast::{Onceness, FnStyle, MutImmutable, MutMutable};", "previous_filename": "src/librustc/middle/typeck/infer/sub.rs"}, {"sha": "3058f09a83a851d5006d846f6f1e3ddbf9aaed6f", "filename": "src/librustc/middle/infer/type_variable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "previous_filename": "src/librustc/middle/typeck/infer/type_variable.rs"}, {"sha": "6f6adb84a75f524d879bb40d33c0c6b6b11f2932", "filename": "src/librustc/middle/infer/unify.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -14,8 +14,8 @@ use std::kinds::marker;\n \n use middle::ty::{expected_found, IntVarValue};\n use middle::ty::{mod, Ty};\n-use middle::typeck::infer::{uok, ures};\n-use middle::typeck::infer::InferCtxt;\n+use middle::infer::{uok, ures};\n+use middle::infer::InferCtxt;\n use std::cell::RefCell;\n use std::fmt::Show;\n use syntax::ast;", "previous_filename": "src/librustc/middle/typeck/infer/unify.rs"}, {"sha": "523c9f3330968cd875f01ebd58e378e8e4c682c2", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -111,7 +111,7 @@ use self::VarKind::*;\n \n use middle::def::*;\n use middle::mem_categorization::Typer;\n-use middle::{pat_util, typeck, ty};\n+use middle::{pat_util, ty};\n use lint;\n use util::nodemap::NodeMap;\n \n@@ -1156,7 +1156,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n           }\n \n           ast::ExprMethodCall(_, _, ref args) => {\n-            let method_call = typeck::MethodCall::expr(expr.id);\n+            let method_call = ty::MethodCall::expr(expr.id);\n             let method_ty = self.ir.tcx.method_map.borrow().get(&method_call).unwrap().ty;\n             let diverges = ty::ty_fn_ret(method_ty) == ty::FnDiverging;\n             let succ = if diverges {"}, {"sha": "cd70d8e2b487adb4d39b69805d3fde44b54f3229", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -74,7 +74,6 @@ pub use self::categorization::*;\n use middle::def;\n use middle::region;\n use middle::ty::{mod, Ty};\n-use middle::typeck;\n use util::nodemap::{DefIdMap, NodeMap};\n use util::ppaux::{ty_to_string, Repr};\n \n@@ -283,7 +282,7 @@ pub type McResult<T> = Result<T, ()>;\n pub trait Typer<'tcx> {\n     fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx>;\n     fn node_ty(&self, id: ast::NodeId) -> McResult<Ty<'tcx>>;\n-    fn node_method_ty(&self, method_call: typeck::MethodCall) -> Option<Ty<'tcx>>;\n+    fn node_method_ty(&self, method_call: ty::MethodCall) -> Option<Ty<'tcx>>;\n     fn adjustments<'a>(&'a self) -> &'a RefCell<NodeMap<ty::AutoAdjustment<'tcx>>>;\n     fn is_method_call(&self, id: ast::NodeId) -> bool;\n     fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<region::CodeExtent>;\n@@ -509,7 +508,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n           }\n \n           ast::ExprIndex(ref base, _) => {\n-            let method_call = typeck::MethodCall::expr(expr.id());\n+            let method_call = ty::MethodCall::expr(expr.id());\n             match self.typer.node_method_ty(method_call) {\n                 Some(method_ty) => {\n                     // If this is an index implemented by a method call, then it will\n@@ -890,12 +889,12 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n                              implicit: bool)\n                              -> cmt<'tcx> {\n         let adjustment = match self.typer.adjustments().borrow().get(&node.id()) {\n-            Some(adj) if ty::adjust_is_object(adj) => typeck::AutoObject,\n-            _ if deref_cnt != 0 => typeck::AutoDeref(deref_cnt),\n-            _ => typeck::NoAdjustment\n+            Some(adj) if ty::adjust_is_object(adj) => ty::AutoObject,\n+            _ if deref_cnt != 0 => ty::AutoDeref(deref_cnt),\n+            _ => ty::NoAdjustment\n         };\n \n-        let method_call = typeck::MethodCall {\n+        let method_call = ty::MethodCall {\n             expr_id: node.id(),\n             adjustment: adjustment\n         };\n@@ -980,7 +979,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n         //! - `elt`: the AST node being indexed\n         //! - `base_cmt`: the cmt of `elt`\n \n-        let method_call = typeck::MethodCall::expr(elt.id());\n+        let method_call = ty::MethodCall::expr(elt.id());\n         let method_ty = self.typer.node_method_ty(method_call);\n \n         let element_ty = match method_ty {"}, {"sha": "5770b601a69ce44ad6a68074d561b6ad4df6da63", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -19,8 +19,8 @@ use std::mem::replace;\n use metadata::csearch;\n use middle::{def, resolve};\n use middle::ty::{mod, Ty};\n-use middle::typeck::{MethodCall, MethodMap, MethodOrigin, MethodParam, MethodTypeParam};\n-use middle::typeck::{MethodStatic, MethodStaticUnboxedClosure, MethodObject, MethodTraitObject};\n+use middle::ty::{MethodCall, MethodMap, MethodOrigin, MethodParam, MethodTypeParam};\n+use middle::ty::{MethodStatic, MethodStaticUnboxedClosure, MethodObject, MethodTraitObject};\n use util::nodemap::{NodeMap, NodeSet};\n \n use syntax::{ast, ast_map};"}, {"sha": "fa02c940aa75426d28813587015b4e030bfd67b5", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -17,7 +17,6 @@\n \n use middle::def;\n use middle::ty;\n-use middle::typeck;\n use middle::privacy;\n use session::config;\n use util::nodemap::NodeSet;\n@@ -137,9 +136,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ReachableContext<'a, 'tcx> {\n                 }\n             }\n             ast::ExprMethodCall(..) => {\n-                let method_call = typeck::MethodCall::expr(expr.id);\n+                let method_call = ty::MethodCall::expr(expr.id);\n                 match (*self.tcx.method_map.borrow())[method_call].origin {\n-                    typeck::MethodStatic(def_id) => {\n+                    ty::MethodStatic(def_id) => {\n                         if is_local(def_id) {\n                             if self.def_id_represents_local_inlined_item(def_id) {\n                                 self.worklist.push(def_id.node)"}, {"sha": "21f57a9d57388a9d8741abaa76abbdca4e54fbf7", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -589,8 +589,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n         // type declarations and other outer declarations, not those\n         // bound in *fn types*. Region substitution of the bound\n         // regions that appear in a function signature is done using\n-        // the specialized routine\n-        // `middle::typeck::check::regionmanip::replace_late_regions_in_fn_sig()`.\n+        // the specialized routine `ty::replace_late_regions()`.\n         match r {\n             ty::ReEarlyBound(_, space, i, region_name) => {\n                 match self.substs.regions {"}, {"sha": "1bce353cb0cfe986b9662f0de630a1ca41a8f6e8", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -17,7 +17,7 @@ use super::util;\n use middle::subst;\n use middle::subst::Subst;\n use middle::ty::{mod, Ty};\n-use middle::typeck::infer::{mod, InferCtxt};\n+use middle::infer::{mod, InferCtxt};\n use syntax::ast;\n use syntax::codemap::DUMMY_SP;\n use util::ppaux::Repr;"}, {"sha": "653c686ab197c3ea2a30d54486632bfe31947c66", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -10,7 +10,7 @@\n \n use middle::mem_categorization::Typer;\n use middle::ty;\n-use middle::typeck::infer::InferCtxt;\n+use middle::infer::InferCtxt;\n use std::collections::HashSet;\n use std::rc::Rc;\n use util::ppaux::Repr;"}, {"sha": "e12ec44ad87cec3c37a86829d4db8fbce663edaf", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -18,7 +18,7 @@ pub use self::ObligationCauseCode::*;\n use middle::mem_categorization::Typer;\n use middle::subst;\n use middle::ty::{mod, Ty};\n-use middle::typeck::infer::InferCtxt;\n+use middle::infer::InferCtxt;\n use std::rc::Rc;\n use std::slice::Items;\n use syntax::ast;"}, {"sha": "0e6a0c19f70611e7758f1bbc56937b95a11a0e4f", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -30,8 +30,8 @@ use middle::fast_reject;\n use middle::mem_categorization::Typer;\n use middle::subst::{Subst, Substs, VecPerParamSpace};\n use middle::ty::{mod, Ty};\n-use middle::typeck::infer;\n-use middle::typeck::infer::{InferCtxt, TypeSkolemizer};\n+use middle::infer;\n+use middle::infer::{InferCtxt, TypeSkolemizer};\n use middle::ty_fold::TypeFoldable;\n use std::cell::RefCell;\n use std::collections::hash_map::HashMap;"}, {"sha": "1b7998a92638c2c111ba06052752933ecb947921", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -11,7 +11,7 @@\n \n use middle::subst;\n use middle::subst::{ParamSpace, Substs, VecPerParamSpace};\n-use middle::typeck::infer::InferCtxt;\n+use middle::infer::InferCtxt;\n use middle::ty::{mod, Ty};\n use std::collections::HashSet;\n use std::fmt;"}, {"sha": "994f0c2090a57245964898f223f1d740c4df1b78", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 227, "deletions": 8, "changes": 235, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -35,6 +35,9 @@ pub use self::ImplOrTraitItem::*;\n pub use self::BoundRegion::*;\n pub use self::sty::*;\n pub use self::IntVarValue::*;\n+pub use self::ExprAdjustment::*;\n+pub use self::vtable_origin::*;\n+pub use self::MethodOrigin::*;\n \n use back::svh::Svh;\n use session::Session;\n@@ -53,7 +56,6 @@ use middle::stability;\n use middle::subst::{mod, Subst, Substs, VecPerParamSpace};\n use middle::traits;\n use middle::ty;\n-use middle::typeck;\n use middle::ty_fold::{mod, TypeFoldable, TypeFolder, HigherRankedFoldable};\n use middle;\n use util::ppaux::{note_and_explain_region, bound_region_ptr_to_string};\n@@ -90,6 +92,17 @@ pub const INITIAL_DISCRIMINANT_VALUE: Disr = 0;\n \n // Data types\n \n+/// The complete set of all analyses described in this module. This is\n+/// produced by the driver and fed to trans and later passes.\n+pub struct CrateAnalysis<'tcx> {\n+    pub exp_map2: middle::resolve::ExportMap2,\n+    pub exported_items: middle::privacy::ExportedItems,\n+    pub public_items: middle::privacy::PublicItems,\n+    pub ty_cx: ty::ctxt<'tcx>,\n+    pub reachable: NodeSet,\n+    pub name: String,\n+}\n+\n #[deriving(PartialEq, Eq, Hash)]\n pub struct field<'tcx> {\n     pub name: ast::Name,\n@@ -412,7 +425,161 @@ pub fn type_of_adjust<'tcx>(cx: &ctxt<'tcx>, adj: &AutoAdjustment<'tcx>) -> Opti\n     }\n }\n \n+#[deriving(Clone, Encodable, Decodable, PartialEq, PartialOrd, Show)]\n+pub struct param_index {\n+    pub space: subst::ParamSpace,\n+    pub index: uint\n+}\n+\n+#[deriving(Clone, Show)]\n+pub enum MethodOrigin<'tcx> {\n+    // fully statically resolved method\n+    MethodStatic(ast::DefId),\n+\n+    // fully statically resolved unboxed closure invocation\n+    MethodStaticUnboxedClosure(ast::DefId),\n+\n+    // method invoked on a type parameter with a bounded trait\n+    MethodTypeParam(MethodParam<'tcx>),\n+\n+    // method invoked on a trait instance\n+    MethodTraitObject(MethodObject<'tcx>),\n+\n+}\n+\n+// details for a method invoked with a receiver whose type is a type parameter\n+// with a bounded trait.\n+#[deriving(Clone, Show)]\n+pub struct MethodParam<'tcx> {\n+    // the precise trait reference that occurs as a bound -- this may\n+    // be a supertrait of what the user actually typed.\n+    pub trait_ref: Rc<ty::TraitRef<'tcx>>,\n+\n+    // index of uint in the list of methods for the trait\n+    pub method_num: uint,\n+}\n+\n+// details for a method invoked with a receiver whose type is an object\n+#[deriving(Clone, Show)]\n+pub struct MethodObject<'tcx> {\n+    // the (super)trait containing the method to be invoked\n+    pub trait_ref: Rc<ty::TraitRef<'tcx>>,\n+\n+    // the actual base trait id of the object\n+    pub object_trait_id: ast::DefId,\n+\n+    // index of the method to be invoked amongst the trait's methods\n+    pub method_num: uint,\n+\n+    // index into the actual runtime vtable.\n+    // the vtable is formed by concatenating together the method lists of\n+    // the base object trait and all supertraits;  this is the index into\n+    // that vtable\n+    pub real_index: uint,\n+}\n+\n+#[deriving(Clone)]\n+pub struct MethodCallee<'tcx> {\n+    pub origin: MethodOrigin<'tcx>,\n+    pub ty: Ty<'tcx>,\n+    pub substs: subst::Substs<'tcx>\n+}\n+\n+/// With method calls, we store some extra information in\n+/// side tables (i.e method_map). We use\n+/// MethodCall as a key to index into these tables instead of\n+/// just directly using the expression's NodeId. The reason\n+/// for this being that we may apply adjustments (coercions)\n+/// with the resulting expression also needing to use the\n+/// side tables. The problem with this is that we don't\n+/// assign a separate NodeId to this new expression\n+/// and so it would clash with the base expression if both\n+/// needed to add to the side tables. Thus to disambiguate\n+/// we also keep track of whether there's an adjustment in\n+/// our key.\n+#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+pub struct MethodCall {\n+    pub expr_id: ast::NodeId,\n+    pub adjustment: ExprAdjustment\n+}\n+\n+#[deriving(Clone, PartialEq, Eq, Hash, Show, Encodable, Decodable)]\n+pub enum ExprAdjustment {\n+    NoAdjustment,\n+    AutoDeref(uint),\n+    AutoObject\n+}\n+\n+impl MethodCall {\n+    pub fn expr(id: ast::NodeId) -> MethodCall {\n+        MethodCall {\n+            expr_id: id,\n+            adjustment: NoAdjustment\n+        }\n+    }\n+\n+    pub fn autoobject(id: ast::NodeId) -> MethodCall {\n+        MethodCall {\n+            expr_id: id,\n+            adjustment: AutoObject\n+        }\n+    }\n+\n+    pub fn autoderef(expr_id: ast::NodeId, autoderef: uint) -> MethodCall {\n+        MethodCall {\n+            expr_id: expr_id,\n+            adjustment: AutoDeref(1 + autoderef)\n+        }\n+    }\n+}\n+\n+// maps from an expression id that corresponds to a method call to the details\n+// of the method to be invoked\n+pub type MethodMap<'tcx> = RefCell<FnvHashMap<MethodCall, MethodCallee<'tcx>>>;\n \n+pub type vtable_param_res<'tcx> = Vec<vtable_origin<'tcx>>;\n+\n+// Resolutions for bounds of all parameters, left to right, for a given path.\n+pub type vtable_res<'tcx> = VecPerParamSpace<vtable_param_res<'tcx>>;\n+\n+#[deriving(Clone)]\n+pub enum vtable_origin<'tcx> {\n+    /*\n+      Statically known vtable. def_id gives the impl item\n+      from whence comes the vtable, and tys are the type substs.\n+      vtable_res is the vtable itself.\n+     */\n+    vtable_static(ast::DefId, subst::Substs<'tcx>, vtable_res<'tcx>),\n+\n+    /*\n+      Dynamic vtable, comes from a parameter that has a bound on it:\n+      fn foo<T:quux,baz,bar>(a: T) -- a's vtable would have a\n+      vtable_param origin\n+\n+      The first argument is the param index (identifying T in the example),\n+      and the second is the bound number (identifying baz)\n+     */\n+    vtable_param(param_index, uint),\n+\n+    /*\n+      Vtable automatically generated for an unboxed closure. The def ID is the\n+      ID of the closure expression.\n+     */\n+    vtable_unboxed_closure(ast::DefId),\n+\n+    /*\n+      Asked to determine the vtable for ty_err. This is the value used\n+      for the vtables of `Self` in a virtual call like `foo.bar()`\n+      where `foo` is of object type. The same value is also used when\n+      type errors occur.\n+     */\n+    vtable_error,\n+}\n+\n+\n+// For every explicit cast into an object type, maps from the cast\n+// expr to the associated trait ref.\n+pub type ObjectCastMap<'tcx> = RefCell<NodeMap<Rc<ty::TraitRef<'tcx>>>>;\n \n /// A restriction that certain types must be the same size. The use of\n /// `transmute` gives rise to these restrictions.\n@@ -473,7 +640,7 @@ pub struct ctxt<'tcx> {\n \n     /// Maps from node-id of a trait object cast (like `foo as\n     /// Box<Trait>`) to the trait reference.\n-    pub object_cast_map: typeck::ObjectCastMap<'tcx>,\n+    pub object_cast_map: ObjectCastMap<'tcx>,\n \n     pub map: ast_map::Map<'tcx>,\n     pub intrinsic_defs: RefCell<DefIdMap<Ty<'tcx>>>,\n@@ -548,7 +715,7 @@ pub struct ctxt<'tcx> {\n     pub extern_const_statics: RefCell<DefIdMap<ast::NodeId>>,\n     pub extern_const_variants: RefCell<DefIdMap<ast::NodeId>>,\n \n-    pub method_map: typeck::MethodMap<'tcx>,\n+    pub method_map: MethodMap<'tcx>,\n \n     pub dependency_formats: RefCell<dependency_format::Dependencies>,\n \n@@ -3658,7 +3825,7 @@ pub fn adjust_ty<'tcx>(cx: &ctxt<'tcx>,\n                        expr_id: ast::NodeId,\n                        unadjusted_ty: Ty<'tcx>,\n                        adjustment: Option<&AutoAdjustment<'tcx>>,\n-                       method_type: |typeck::MethodCall| -> Option<Ty<'tcx>>)\n+                       method_type: |MethodCall| -> Option<Ty<'tcx>>)\n                        -> Ty<'tcx> {\n \n     if let ty_err = unadjusted_ty.sty {\n@@ -3699,7 +3866,7 @@ pub fn adjust_ty<'tcx>(cx: &ctxt<'tcx>,\n \n                     if !ty::type_is_error(adjusted_ty) {\n                         for i in range(0, adj.autoderefs) {\n-                            let method_call = typeck::MethodCall::autoderef(expr_id, i);\n+                            let method_call = MethodCall::autoderef(expr_id, i);\n                             match method_type(method_call) {\n                                 Some(method_ty) => {\n                                     if let ty::FnConverging(result_type) = ty_fn_ret(method_ty) {\n@@ -3830,7 +3997,7 @@ pub enum ExprKind {\n }\n \n pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n-    if tcx.method_map.borrow().contains_key(&typeck::MethodCall::expr(expr.id)) {\n+    if tcx.method_map.borrow().contains_key(&MethodCall::expr(expr.id)) {\n         // Overloaded operations are generally calls, and hence they are\n         // generated via DPS, but there are a few exceptions:\n         return match expr.node {\n@@ -5747,7 +5914,7 @@ impl<'tcx> mc::Typer<'tcx> for ty::ctxt<'tcx> {\n         Ok(ty::node_id_to_type(self, id))\n     }\n \n-    fn node_method_ty(&self, method_call: typeck::MethodCall) -> Option<Ty<'tcx>> {\n+    fn node_method_ty(&self, method_call: MethodCall) -> Option<Ty<'tcx>> {\n         self.method_map.borrow().get(&method_call).map(|method| method.ty)\n     }\n \n@@ -5756,7 +5923,7 @@ impl<'tcx> mc::Typer<'tcx> for ty::ctxt<'tcx> {\n     }\n \n     fn is_method_call(&self, id: ast::NodeId) -> bool {\n-        self.method_map.borrow().contains_key(&typeck::MethodCall::expr(id))\n+        self.method_map.borrow().contains_key(&MethodCall::expr(id))\n     }\n \n     fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<region::CodeExtent> {\n@@ -6010,3 +6177,55 @@ impl<'tcx> Repr<'tcx> for TyTrait<'tcx> {\n                 self.bounds.repr(tcx))\n     }\n }\n+\n+impl<'tcx> Repr<'tcx> for vtable_origin<'tcx> {\n+    fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n+        match *self {\n+            vtable_static(def_id, ref tys, ref vtable_res) => {\n+                format!(\"vtable_static({}:{}, {}, {})\",\n+                        def_id,\n+                        ty::item_path_str(tcx, def_id),\n+                        tys.repr(tcx),\n+                        vtable_res.repr(tcx))\n+            }\n+\n+            vtable_param(x, y) => {\n+                format!(\"vtable_param({}, {})\", x, y)\n+            }\n+\n+            vtable_unboxed_closure(def_id) => {\n+                format!(\"vtable_unboxed_closure({})\", def_id)\n+            }\n+\n+            vtable_error => {\n+                format!(\"vtable_error\")\n+            }\n+        }\n+    }\n+}\n+\n+pub fn make_substs_for_receiver_types<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                            trait_ref: &ty::TraitRef<'tcx>,\n+                                            method: &ty::Method<'tcx>)\n+                                            -> subst::Substs<'tcx>\n+{\n+    /*!\n+     * Substitutes the values for the receiver's type parameters\n+     * that are found in method, leaving the method's type parameters\n+     * intact.\n+     */\n+\n+    let meth_tps: Vec<Ty> =\n+        method.generics.types.get_slice(subst::FnSpace)\n+              .iter()\n+              .map(|def| ty::mk_param_from_def(tcx, def))\n+              .collect();\n+    let meth_regions: Vec<ty::Region> =\n+        method.generics.regions.get_slice(subst::FnSpace)\n+              .iter()\n+              .map(|def| ty::ReEarlyBound(def.def_id.node, def.space,\n+                                          def.index, def.name))\n+              .collect();\n+    trait_ref.substs.clone().with_method(meth_tps, meth_regions)\n+}\n+"}, {"sha": "77092025349e783c64251b034c23e93c5d3fb34f", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -38,7 +38,6 @@ use middle::subst;\n use middle::subst::VecPerParamSpace;\n use middle::ty::{mod, Ty};\n use middle::traits;\n-use middle::typeck;\n use std::rc::Rc;\n use syntax::owned_slice::OwnedSlice;\n use util::ppaux::Repr;\n@@ -304,23 +303,23 @@ impl<'tcx> TypeFoldable<'tcx> for ty::AutoRef<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for typeck::MethodOrigin<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> typeck::MethodOrigin<'tcx> {\n+impl<'tcx> TypeFoldable<'tcx> for ty::MethodOrigin<'tcx> {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::MethodOrigin<'tcx> {\n         match *self {\n-            typeck::MethodStatic(def_id) => {\n-                typeck::MethodStatic(def_id)\n+            ty::MethodStatic(def_id) => {\n+                ty::MethodStatic(def_id)\n             }\n-            typeck::MethodStaticUnboxedClosure(def_id) => {\n-                typeck::MethodStaticUnboxedClosure(def_id)\n+            ty::MethodStaticUnboxedClosure(def_id) => {\n+                ty::MethodStaticUnboxedClosure(def_id)\n             }\n-            typeck::MethodTypeParam(ref param) => {\n-                typeck::MethodTypeParam(typeck::MethodParam {\n+            ty::MethodTypeParam(ref param) => {\n+                ty::MethodTypeParam(ty::MethodParam {\n                     trait_ref: param.trait_ref.fold_with(folder),\n                     method_num: param.method_num\n                 })\n             }\n-            typeck::MethodTraitObject(ref object) => {\n-                typeck::MethodTraitObject(typeck::MethodObject {\n+            ty::MethodTraitObject(ref object) => {\n+                ty::MethodTraitObject(ty::MethodObject {\n                     trait_ref: object.trait_ref.fold_with(folder),\n                     object_trait_id: object.object_trait_id,\n                     method_num: object.method_num,\n@@ -331,22 +330,22 @@ impl<'tcx> TypeFoldable<'tcx> for typeck::MethodOrigin<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for typeck::vtable_origin<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> typeck::vtable_origin<'tcx> {\n+impl<'tcx> TypeFoldable<'tcx> for ty::vtable_origin<'tcx> {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::vtable_origin<'tcx> {\n         match *self {\n-            typeck::vtable_static(def_id, ref substs, ref origins) => {\n+            ty::vtable_static(def_id, ref substs, ref origins) => {\n                 let r_substs = substs.fold_with(folder);\n                 let r_origins = origins.fold_with(folder);\n-                typeck::vtable_static(def_id, r_substs, r_origins)\n+                ty::vtable_static(def_id, r_substs, r_origins)\n             }\n-            typeck::vtable_param(n, b) => {\n-                typeck::vtable_param(n, b)\n+            ty::vtable_param(n, b) => {\n+                ty::vtable_param(n, b)\n             }\n-            typeck::vtable_unboxed_closure(def_id) => {\n-                typeck::vtable_unboxed_closure(def_id)\n+            ty::vtable_unboxed_closure(def_id) => {\n+                ty::vtable_unboxed_closure(def_id)\n             }\n-            typeck::vtable_error => {\n-                typeck::vtable_error\n+            ty::vtable_error => {\n+                ty::vtable_error\n             }\n         }\n     }"}, {"sha": "cbc9dd9145bfb7fd4382d676ce37f4e30b10bd51", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -114,6 +114,59 @@ pub struct Options {\n     pub alt_std_name: Option<String>\n }\n \n+pub enum Input {\n+    /// Load source from file\n+    File(Path),\n+    /// The string is the source\n+    Str(String)\n+}\n+\n+impl Input {\n+    pub fn filestem(&self) -> String {\n+        match *self {\n+            Input::File(ref ifile) => ifile.filestem_str().unwrap().to_string(),\n+            Input::Str(_) => \"rust_out\".to_string(),\n+        }\n+    }\n+}\n+\n+#[deriving(Clone)]\n+pub struct OutputFilenames {\n+    pub out_directory: Path,\n+    pub out_filestem: String,\n+    pub single_output_file: Option<Path>,\n+    pub extra: String,\n+}\n+\n+impl OutputFilenames {\n+    pub fn path(&self, flavor: OutputType) -> Path {\n+        match self.single_output_file {\n+            Some(ref path) => return path.clone(),\n+            None => {}\n+        }\n+        self.temp_path(flavor)\n+    }\n+\n+    pub fn temp_path(&self, flavor: OutputType) -> Path {\n+        let base = self.out_directory.join(self.filestem());\n+        match flavor {\n+            OutputTypeBitcode => base.with_extension(\"bc\"),\n+            OutputTypeAssembly => base.with_extension(\"s\"),\n+            OutputTypeLlvmAssembly => base.with_extension(\"ll\"),\n+            OutputTypeObject => base.with_extension(\"o\"),\n+            OutputTypeExe => base,\n+        }\n+    }\n+\n+    pub fn with_extension(&self, extension: &str) -> Path {\n+        self.out_directory.join(self.filestem()).with_extension(extension)\n+    }\n+\n+    pub fn filestem(&self) -> String {\n+        format!(\"{}{}\", self.out_filestem, self.extra)\n+    }\n+}\n+\n pub fn host_triple() -> &'static str {\n     // Get the host triple out of the build environment. This ensures that our\n     // idea of the host triple is the same as for the set of libraries we've"}, {"sha": "1283e89c29d0cdf79b02e1724ff50d2426330deb", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 8, "deletions": 29, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -23,8 +23,6 @@ use middle::ty::{ty_param, ty_ptr, ty_rptr, ty_tup, ty_open};\n use middle::ty::{ty_unboxed_closure};\n use middle::ty::{ty_uniq, ty_trait, ty_int, ty_uint, ty_infer};\n use middle::ty;\n-use middle::typeck;\n-use middle::typeck::check::regionmanip;\n \n use std::rc::Rc;\n use syntax::abi;\n@@ -1018,7 +1016,7 @@ impl<'tcx> Repr<'tcx> for ty::FnOutput<'tcx> {\n     }\n }\n \n-impl<'tcx> Repr<'tcx> for typeck::MethodCallee<'tcx> {\n+impl<'tcx> Repr<'tcx> for ty::MethodCallee<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n         format!(\"MethodCallee {{origin: {}, ty: {}, {}}}\",\n                 self.origin.repr(tcx),\n@@ -1027,34 +1025,34 @@ impl<'tcx> Repr<'tcx> for typeck::MethodCallee<'tcx> {\n     }\n }\n \n-impl<'tcx> Repr<'tcx> for typeck::MethodOrigin<'tcx> {\n+impl<'tcx> Repr<'tcx> for ty::MethodOrigin<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n         match self {\n-            &typeck::MethodStatic(def_id) => {\n+            &ty::MethodStatic(def_id) => {\n                 format!(\"MethodStatic({})\", def_id.repr(tcx))\n             }\n-            &typeck::MethodStaticUnboxedClosure(def_id) => {\n+            &ty::MethodStaticUnboxedClosure(def_id) => {\n                 format!(\"MethodStaticUnboxedClosure({})\", def_id.repr(tcx))\n             }\n-            &typeck::MethodTypeParam(ref p) => {\n+            &ty::MethodTypeParam(ref p) => {\n                 p.repr(tcx)\n             }\n-            &typeck::MethodTraitObject(ref p) => {\n+            &ty::MethodTraitObject(ref p) => {\n                 p.repr(tcx)\n             }\n         }\n     }\n }\n \n-impl<'tcx> Repr<'tcx> for typeck::MethodParam<'tcx> {\n+impl<'tcx> Repr<'tcx> for ty::MethodParam<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n         format!(\"MethodParam({},{})\",\n                 self.trait_ref.repr(tcx),\n                 self.method_num)\n     }\n }\n \n-impl<'tcx> Repr<'tcx> for typeck::MethodObject<'tcx> {\n+impl<'tcx> Repr<'tcx> for ty::MethodObject<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n         format!(\"MethodObject({},{},{})\",\n                 self.trait_ref.repr(tcx),\n@@ -1293,25 +1291,6 @@ impl<'tcx> Repr<'tcx> for ty::ExplicitSelfCategory {\n     }\n }\n \n-\n-impl<'tcx> Repr<'tcx> for regionmanip::WfConstraint<'tcx> {\n-    fn repr(&self, tcx: &ctxt) -> String {\n-        match *self {\n-            regionmanip::RegionSubRegionConstraint(_, r_a, r_b) => {\n-                format!(\"RegionSubRegionConstraint({}, {})\",\n-                        r_a.repr(tcx),\n-                        r_b.repr(tcx))\n-            }\n-\n-            regionmanip::RegionSubParamConstraint(_, r, p) => {\n-                format!(\"RegionSubParamConstraint({}, {})\",\n-                        r.repr(tcx),\n-                        p.repr(tcx))\n-            }\n-        }\n-    }\n-}\n-\n impl<'tcx> UserString<'tcx> for ParamTy {\n     fn user_string(&self, tcx: &ctxt) -> String {\n         let id = self.idx;"}, {"sha": "437b0257a9759f18e3500ec0a79f23ba7a639d23", "filename": "src/librustc_driver/driver.rs", "status": "renamed", "additions": 30, "deletions": 114, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -8,34 +8,29 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use self::Input::*;\n-\n-use back::link;\n-use back::write;\n-use session::Session;\n-use session::config;\n-use lint;\n-use llvm::{ContextRef, ModuleRef};\n-use metadata::common::LinkMeta;\n-use metadata::creader;\n-use middle::{stability, ty, typeck, reachable};\n-use middle::dependency_format;\n-use middle;\n-use plugin::load::Plugins;\n-use plugin::registry::Registry;\n-use plugin;\n-use trans;\n-\n-use util::common::time;\n-use util::nodemap::{NodeSet};\n+use rustc::session::Session;\n+use rustc::session::config::{mod, Input, OutputFilenames};\n+use rustc::lint;\n+use rustc::metadata::creader;\n+use rustc::middle::{stability, ty, reachable};\n+use rustc::middle::dependency_format;\n+use rustc::middle;\n+use rustc::plugin::load::Plugins;\n+use rustc::plugin::registry::Registry;\n+use rustc::plugin;\n+use rustc::util::common::time;\n+use rustc_trans::back::link;\n+use rustc_trans::back::write;\n+use rustc_trans::save;\n+use rustc_trans::trans;\n+use rustc_typeck as typeck;\n \n use serialize::{json, Encodable};\n \n use std::io;\n use std::io::fs;\n use std::os;\n use arena::TypedArena;\n-use save;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::attr;\n@@ -113,36 +108,19 @@ pub fn anon_src() -> String {\n pub fn source_name(input: &Input) -> String {\n     match *input {\n         // FIXME (#9639): This needs to handle non-utf8 paths\n-        FileInput(ref ifile) => ifile.as_str().unwrap().to_string(),\n-        StrInput(_) => anon_src()\n+        Input::File(ref ifile) => ifile.as_str().unwrap().to_string(),\n+        Input::Str(_) => anon_src()\n     }\n }\n \n-pub enum Input {\n-    /// Load source from file\n-    FileInput(Path),\n-    /// The string is the source\n-    StrInput(String)\n-}\n-\n-impl Input {\n-    fn filestem(&self) -> String {\n-        match *self {\n-            FileInput(ref ifile) => ifile.filestem_str().unwrap().to_string(),\n-            StrInput(_) => \"rust_out\".to_string(),\n-        }\n-    }\n-}\n-\n-\n pub fn phase_1_parse_input(sess: &Session, cfg: ast::CrateConfig, input: &Input)\n     -> ast::Crate {\n     let krate = time(sess.time_passes(), \"parsing\", (), |_| {\n         match *input {\n-            FileInput(ref file) => {\n+            Input::File(ref file) => {\n                 parse::parse_crate_from_file(&(*file), cfg.clone(), &sess.parse_sess)\n             }\n-            StrInput(ref src) => {\n+            Input::Str(ref src) => {\n                 parse::parse_crate_from_source_str(anon_src().to_string(),\n                                                    src.to_string(),\n                                                    cfg.clone(),\n@@ -342,23 +320,13 @@ pub fn assign_node_ids_and_map<'ast>(sess: &Session,\n     map\n }\n \n-pub struct CrateAnalysis<'tcx> {\n-    pub exp_map2: middle::resolve::ExportMap2,\n-    pub exported_items: middle::privacy::ExportedItems,\n-    pub public_items: middle::privacy::PublicItems,\n-    pub ty_cx: ty::ctxt<'tcx>,\n-    pub reachable: NodeSet,\n-    pub name: String,\n-}\n-\n-\n /// Run the resolution, typechecking, region checking and other\n /// miscellaneous analysis passes on the crate. Return various\n /// structures carrying the results of the analysis.\n pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n                                          ast_map: ast_map::Map<'tcx>,\n                                          type_arena: &'tcx TypedArena<ty::TyS<'tcx>>,\n-                                         name: String) -> CrateAnalysis<'tcx> {\n+                                         name: String) -> ty::CrateAnalysis<'tcx> {\n     let time_passes = sess.time_passes();\n     let krate = ast_map.krate();\n \n@@ -473,7 +441,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n     time(time_passes, \"lint checking\", (), |_|\n          lint::check_crate(&ty_cx, &exported_items));\n \n-    CrateAnalysis {\n+    ty::CrateAnalysis {\n         exp_map2: exp_map2,\n         ty_cx: ty_cx,\n         exported_items: exported_items,\n@@ -485,7 +453,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n \n pub fn phase_save_analysis(sess: &Session,\n                            krate: &ast::Crate,\n-                           analysis: &CrateAnalysis,\n+                           analysis: &ty::CrateAnalysis,\n                            odir: &Option<Path>) {\n     if (sess.opts.debugging_opts & config::SAVE_ANALYSIS) == 0 {\n         return;\n@@ -494,39 +462,24 @@ pub fn phase_save_analysis(sess: &Session,\n          save::process_crate(sess, krate, analysis, odir));\n }\n \n-pub struct ModuleTranslation {\n-    pub llcx: ContextRef,\n-    pub llmod: ModuleRef,\n-}\n-\n-pub struct CrateTranslation {\n-    pub modules: Vec<ModuleTranslation>,\n-    pub metadata_module: ModuleTranslation,\n-    pub link: LinkMeta,\n-    pub metadata: Vec<u8>,\n-    pub reachable: Vec<String>,\n-    pub crate_formats: dependency_format::Dependencies,\n-    pub no_builtins: bool,\n-}\n-\n /// Run the translation phase to LLVM, after which the AST and analysis can\n /// be discarded.\n-pub fn phase_4_translate_to_llvm<'tcx>(analysis: CrateAnalysis<'tcx>)\n-                                       -> (ty::ctxt<'tcx>, CrateTranslation) {\n+pub fn phase_4_translate_to_llvm<'tcx>(analysis: ty::CrateAnalysis<'tcx>)\n+                                       -> (ty::ctxt<'tcx>, trans::CrateTranslation) {\n     let time_passes = analysis.ty_cx.sess.time_passes();\n \n     time(time_passes, \"resolving dependency formats\", (), |_|\n          dependency_format::calculate(&analysis.ty_cx));\n \n     // Option dance to work around the lack of stack once closures.\n     time(time_passes, \"translation\", analysis, |analysis|\n-         trans::base::trans_crate(analysis))\n+         trans::trans_crate(analysis))\n }\n \n /// Run LLVM itself, producing a bitcode file, assembly file or object file\n /// as a side effect.\n pub fn phase_5_run_llvm_passes(sess: &Session,\n-                               trans: &CrateTranslation,\n+                               trans: &trans::CrateTranslation,\n                                outputs: &OutputFilenames) {\n     if sess.opts.cg.no_integrated_as {\n         let output_type = config::OutputTypeAssembly;\n@@ -554,7 +507,7 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n /// Run the linker on any artifacts that resulted from the LLVM run.\n /// This should produce either a finished executable or library.\n pub fn phase_6_link_output(sess: &Session,\n-                           trans: &CrateTranslation,\n+                           trans: &trans::CrateTranslation,\n                            outputs: &OutputFilenames) {\n     let old_path = os::getenv(\"PATH\").unwrap_or_else(||String::new());\n     let mut new_path = sess.host_filesearch().get_tools_search_paths();\n@@ -639,8 +592,8 @@ fn write_out_deps(sess: &Session,\n         // Use default filename: crate source filename with extension replaced\n         // by \".d\"\n         (true, None) => match *input {\n-            FileInput(..) => outputs.with_extension(\"d\"),\n-            StrInput(..) => {\n+            Input::File(..) => outputs.with_extension(\"d\"),\n+            Input::Str(..) => {\n                 sess.warn(\"can not write --dep-info without a filename \\\n                            when compiling stdin.\");\n                 return\n@@ -751,43 +704,6 @@ pub fn collect_crate_metadata(session: &Session,\n     session.opts.cg.metadata.clone()\n }\n \n-#[deriving(Clone)]\n-pub struct OutputFilenames {\n-    pub out_directory: Path,\n-    pub out_filestem: String,\n-    pub single_output_file: Option<Path>,\n-    extra: String,\n-}\n-\n-impl OutputFilenames {\n-    pub fn path(&self, flavor: config::OutputType) -> Path {\n-        match self.single_output_file {\n-            Some(ref path) => return path.clone(),\n-            None => {}\n-        }\n-        self.temp_path(flavor)\n-    }\n-\n-    pub fn temp_path(&self, flavor: config::OutputType) -> Path {\n-        let base = self.out_directory.join(self.filestem());\n-        match flavor {\n-            config::OutputTypeBitcode => base.with_extension(\"bc\"),\n-            config::OutputTypeAssembly => base.with_extension(\"s\"),\n-            config::OutputTypeLlvmAssembly => base.with_extension(\"ll\"),\n-            config::OutputTypeObject => base.with_extension(\"o\"),\n-            config::OutputTypeExe => base,\n-        }\n-    }\n-\n-    pub fn with_extension(&self, extension: &str) -> Path {\n-        self.out_directory.join(self.filestem()).with_extension(extension)\n-    }\n-\n-    fn filestem(&self) -> String {\n-        format!(\"{}{}\", self.out_filestem, self.extra)\n-    }\n-}\n-\n pub fn build_output_filenames(input: &Input,\n                               odir: &Option<Path>,\n                               ofile: &Option<Path>,", "previous_filename": "src/librustc_trans/driver/driver.rs"}, {"sha": "33c009cf3291bcb61f870aabc61c165e3740c1a5", "filename": "src/librustc_driver/lib.rs", "status": "renamed", "additions": 55, "deletions": 23, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,30 +8,62 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use syntax::diagnostic;\n+//! The Rust compiler.\n+//!\n+//! # Note\n+//!\n+//! This API is completely unstable and subject to change.\n+\n+#![crate_name = \"rustc_driver\"]\n+#![experimental]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+      html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+\n+#![feature(default_type_params, globs, if_let, import_shadowing, macro_rules, phase, quote)]\n+#![feature(slicing_syntax, unsafe_destructor)]\n+#![feature(rustc_diagnostic_macros)]\n+\n+extern crate arena;\n+extern crate flate;\n+extern crate getopts;\n+extern crate graphviz;\n+extern crate libc;\n+extern crate rustc;\n+extern crate rustc_typeck;\n+extern crate rustc_back;\n+extern crate rustc_trans;\n+#[phase(plugin, link)] extern crate log;\n+#[phase(plugin, link)] extern crate syntax;\n+extern crate serialize;\n+extern crate \"rustc_llvm\" as llvm;\n \n-use back::link;\n-use driver::driver::{Input, FileInput, StrInput};\n-use session::{config, Session, build_session};\n-use lint::Lint;\n-use lint;\n-use metadata;\n+pub use syntax::diagnostic;\n \n+use rustc_trans::back::link;\n+use rustc::session::{config, Session, build_session};\n+use rustc::session::config::Input;\n+use rustc::lint::Lint;\n+use rustc::lint;\n+use rustc::metadata;\n use rustc::DIAGNOSTICS;\n \n use std::any::AnyRefExt;\n use std::io;\n use std::os;\n use std::task::TaskBuilder;\n \n-use session::early_error;\n+use rustc::session::early_error;\n \n use syntax::ast;\n use syntax::parse;\n use syntax::diagnostic::Emitter;\n use syntax::diagnostics;\n \n-use getopts;\n+#[cfg(test)]\n+pub mod test;\n \n pub mod driver;\n pub mod pretty;\n@@ -89,9 +121,9 @@ fn run_compiler(args: &[String]) {\n             if ifile == \"-\" {\n                 let contents = io::stdin().read_to_end().unwrap();\n                 let src = String::from_utf8(contents).unwrap();\n-                (StrInput(src), None)\n+                (Input::Str(src), None)\n             } else {\n-                (FileInput(Path::new(ifile)), Some(Path::new(ifile)))\n+                (Input::File(Path::new(ifile)), Some(Path::new(ifile)))\n             }\n         }\n         _ => early_error(\"multiple input filenames provided\")\n@@ -116,11 +148,11 @@ fn run_compiler(args: &[String]) {\n     let r = matches.opt_strs(\"Z\");\n     if r.contains(&(\"ls\".to_string())) {\n         match input {\n-            FileInput(ref ifile) => {\n+            Input::File(ref ifile) => {\n                 let mut stdout = io::stdout();\n                 list_metadata(&sess, &(*ifile), &mut stdout).unwrap();\n             }\n-            StrInput(_) => {\n+            Input::Str(_) => {\n                 early_error(\"can not list metadata for stdin\");\n             }\n         }\n@@ -411,12 +443,12 @@ fn print_crate_info(sess: &Session,\n fn parse_crate_attrs(sess: &Session, input: &Input) ->\n                      Vec<ast::Attribute> {\n     let result = match *input {\n-        FileInput(ref ifile) => {\n+        Input::File(ref ifile) => {\n             parse::parse_crate_attrs_from_file(ifile,\n                                                Vec::new(),\n                                                &sess.parse_sess)\n         }\n-        StrInput(ref src) => {\n+        Input::Str(ref src) => {\n             parse::parse_crate_attrs_from_source_str(\n                 driver::anon_src().to_string(),\n                 src.to_string(),\n@@ -438,13 +470,7 @@ pub fn list_metadata(sess: &Session, path: &Path,\n /// The diagnostic emitter yielded to the procedure should be used for reporting\n /// errors of the compiler.\n pub fn monitor(f: proc():Send) {\n-    // FIXME: This is a hack for newsched since it doesn't support split stacks.\n-    // rustc needs a lot of stack! When optimizations are disabled, it needs\n-    // even *more* stack than usual as well.\n-    #[cfg(rtopt)]\n-    static STACK_SIZE: uint = 6000000;  // 6MB\n-    #[cfg(not(rtopt))]\n-    static STACK_SIZE: uint = 20000000; // 20MB\n+    static STACK_SIZE: uint = 32000000; // 32MB\n \n     let (tx, rx) = channel();\n     let w = io::ChanWriter::new(tx);\n@@ -507,3 +533,9 @@ pub fn monitor(f: proc():Send) {\n     }\n }\n \n+pub fn main() {\n+    let args = std::os::args();\n+    let result = run(args);\n+    std::os::set_exit_status(result);\n+}\n+", "previous_filename": "src/librustc_trans/driver/mod.rs"}, {"sha": "1fbbc9c05213b3966aea81484bd6a7c7add3bf3d", "filename": "src/librustc_driver/mod.rs", "status": "renamed", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_driver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_driver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fmod.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,13 +8,3 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_diagnostic_macros)]\n-\n-__register_diagnostic!(E0001)\n-__register_diagnostic!(E0001)\n-//~^ ERROR diagnostic code E0001 already registered\n-\n-fn main() {\n-}\n-\n-__build_diagnostic_array!(DIAGNOSTICS)", "previous_filename": "src/test/compile-fail/rustc-diagnostics-2.rs"}, {"sha": "b6441ab4944f7da76e7e6ab8bdc6da20f866a173", "filename": "src/librustc_driver/pretty.rs", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -15,18 +15,18 @@ pub use self::PpSourceMode::*;\n pub use self::PpMode::*;\n use self::NodesMatchingUII::*;\n \n-use back::link;\n+use rustc_trans::back::link;\n \n-use session::{config, Session};\n-use driver::driver::{mod, CrateAnalysis};\n+use driver;\n \n-use middle::ty;\n-use middle::borrowck::{mod, FnPartsWithCFG};\n-use middle::borrowck::graphviz as borrowck_dot;\n-use middle::cfg;\n-use middle::cfg::graphviz::LabelledCFG;\n-\n-use util::ppaux;\n+use rustc::middle::ty;\n+use rustc::middle::borrowck::{mod, FnPartsWithCFG};\n+use rustc::middle::borrowck::graphviz as borrowck_dot;\n+use rustc::middle::cfg;\n+use rustc::middle::cfg::graphviz::LabelledCFG;\n+use rustc::session::Session;\n+use rustc::session::config::{mod, Input};\n+use rustc::util::ppaux;\n \n use syntax::ast;\n use syntax::ast_map::{mod, blocks, NodePrinter};\n@@ -242,7 +242,7 @@ impl<'ast> pprust::PpAnn for HygieneAnnotation<'ast> {\n \n \n struct TypedAnnotation<'tcx> {\n-    analysis: CrateAnalysis<'tcx>,\n+    analysis: ty::CrateAnalysis<'tcx>,\n }\n \n impl<'tcx> PrinterSupport<'tcx> for TypedAnnotation<'tcx> {\n@@ -409,7 +409,7 @@ fn needs_expansion(ppm: &PpMode) -> bool {\n \n pub fn pretty_print_input(sess: Session,\n                           cfg: ast::CrateConfig,\n-                          input: &driver::Input,\n+                          input: &Input,\n                           ppm: PpMode,\n                           opt_uii: Option<UserIdentifiedItem>,\n                           ofile: Option<Path>) {\n@@ -536,7 +536,7 @@ pub fn pretty_print_input(sess: Session,\n }\n \n fn print_flowgraph<W:io::Writer>(variants: Vec<borrowck_dot::Variant>,\n-                                 analysis: CrateAnalysis,\n+                                 analysis: ty::CrateAnalysis,\n                                  code: blocks::Code,\n                                  mut out: W) -> io::IoResult<()> {\n     let ty_cx = &analysis.ty_cx;", "previous_filename": "src/librustc_trans/driver/pretty.rs"}, {"sha": "9404802cb681bd63f612fa70deb90cfd1cd9c398", "filename": "src/librustc_driver/test.rs", "status": "renamed", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -10,28 +10,28 @@\n \n //! # Standalone Tests for the Inference Module\n \n-use driver::diagnostic;\n-use driver::diagnostic::Emitter;\n-use driver::driver;\n-use middle::lang_items;\n-use middle::region::{mod, CodeExtent};\n-use middle::resolve;\n-use middle::resolve_lifetime;\n-use middle::stability;\n-use middle::subst;\n-use middle::subst::Subst;\n-use middle::ty::{mod, Ty};\n-use middle::typeck::infer::combine::Combine;\n-use middle::typeck::infer;\n-use middle::typeck::infer::lub::Lub;\n-use middle::typeck::infer::glb::Glb;\n-use session::{mod,config};\n+use diagnostic;\n+use diagnostic::Emitter;\n+use driver;\n+use rustc_typeck::middle::lang_items;\n+use rustc_typeck::middle::region::{mod, CodeExtent};\n+use rustc_typeck::middle::resolve;\n+use rustc_typeck::middle::resolve_lifetime;\n+use rustc_typeck::middle::stability;\n+use rustc_typeck::middle::subst;\n+use rustc_typeck::middle::subst::Subst;\n+use rustc_typeck::middle::ty::{mod, Ty};\n+use rustc_typeck::middle::infer::combine::Combine;\n+use rustc_typeck::middle::infer;\n+use rustc_typeck::middle::infer::lub::Lub;\n+use rustc_typeck::middle::infer::glb::Glb;\n+use rustc_typeck::util::ppaux::{ty_to_string, Repr, UserString};\n+use rustc::session::{mod,config};\n use syntax::{abi, ast, ast_map, ast_util};\n use syntax::codemap;\n use syntax::codemap::{Span, CodeMap, DUMMY_SP};\n use syntax::diagnostic::{Level, RenderSpan, Bug, Fatal, Error, Warning, Note, Help};\n use syntax::parse::token;\n-use util::ppaux::{ty_to_string, Repr, UserString};\n \n use arena::TypedArena;\n \n@@ -108,7 +108,7 @@ fn test_env(source_string: &str,\n \n     let sess = session::build_session_(options, None, span_diagnostic_handler);\n     let krate_config = Vec::new();\n-    let input = driver::StrInput(source_string.to_string());\n+    let input = config::Input::Str(source_string.to_string());\n     let krate = driver::phase_1_parse_input(&sess, krate_config, &input);\n     let krate = driver::phase_2_configure_and_expand(&sess, krate, \"test\", None)\n                     .expect(\"phase 2 aborted\");", "previous_filename": "src/librustc_trans/test.rs"}, {"sha": "6057f9d90819029e473e745c9681ba7882e27d7e", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -13,15 +13,13 @@ use super::archive;\n use super::rpath;\n use super::rpath::RPathConfig;\n use super::svh::Svh;\n-use driver::driver::{CrateTranslation, OutputFilenames, Input, FileInput};\n use session::config;\n use session::config::NoDebugInfo;\n-use session::config::{OutputTypeBitcode, OutputTypeExe, OutputTypeObject};\n+use session::config::{OutputFilenames, Input, OutputTypeBitcode, OutputTypeExe, OutputTypeObject};\n use session::Session;\n use metadata::common::LinkMeta;\n use metadata::{encoder, cstore, filesearch, csearch, creader};\n-use trans::context::CrateContext;\n-use trans::common::gensym_name;\n+use trans::{CrateContext, CrateTranslation, gensym_name};\n use middle::ty::{mod, Ty};\n use util::common::time;\n use util::ppaux;\n@@ -156,7 +154,7 @@ pub fn find_crate_name(sess: Option<&Session>,\n     if let Some((attr, s)) = attr_crate_name {\n         return validate(s.get().to_string(), Some(attr.span));\n     }\n-    if let FileInput(ref path) = *input {\n+    if let Input::File(ref path) = *input {\n         if let Some(s) = path.filestem_str() {\n             return validate(s.to_string(), None);\n         }"}, {"sha": "e5ffe2675d6f4fdcf6d192a1942f6c3b6177751f", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -10,13 +10,13 @@\n \n use back::lto;\n use back::link::{get_cc_prog, remove};\n-use driver::driver::{CrateTranslation, ModuleTranslation, OutputFilenames};\n-use session::config::{NoDebugInfo, Passes, SomePasses, AllPasses};\n+use session::config::{OutputFilenames, NoDebugInfo, Passes, SomePasses, AllPasses};\n use session::Session;\n use session::config;\n use llvm;\n use llvm::{ModuleRef, TargetMachineRef, PassManagerRef, DiagnosticInfoRef, ContextRef};\n use llvm::SMDiagnosticRef;\n+use trans::{CrateTranslation, ModuleTranslation};\n use util::common::time;\n use syntax::codemap;\n use syntax::diagnostic;"}, {"sha": "4e25921e0b29bda68f21906847e660d0994a1273", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -65,17 +65,7 @@ pub mod back {\n \n pub mod trans;\n pub mod save;\n-pub mod driver;\n \n pub mod lib {\n     pub use llvm;\n }\n-\n-pub fn main() {\n-    let args = std::os::args();\n-    let result = driver::run(args);\n-    std::os::set_exit_status(result);\n-}\n-\n-#[cfg(test)]\n-pub mod test;"}, {"sha": "1482422b8d03eecfd22db5a6753ac9b58e96aae7", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -27,10 +27,9 @@\n //! the format of the output away from extracting it from the compiler.\n //! DxrVisitor walks the AST and processes it.\n \n-use driver::driver::CrateAnalysis;\n use session::Session;\n \n-use middle::{def, typeck};\n+use middle::def;\n use middle::ty::{mod, Ty};\n \n use std::cell::Cell;\n@@ -68,7 +67,7 @@ fn generated_code(span: Span) -> bool {\n \n struct DxrVisitor<'l, 'tcx: 'l> {\n     sess: &'l Session,\n-    analysis: &'l CrateAnalysis<'tcx>,\n+    analysis: &'l ty::CrateAnalysis<'tcx>,\n \n     collected_paths: Vec<(NodeId, ast::Path, bool, recorder::Row)>,\n     collecting: bool,\n@@ -912,10 +911,10 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                            ex: &ast::Expr,\n                            args: &Vec<P<ast::Expr>>) {\n         let method_map = self.analysis.ty_cx.method_map.borrow();\n-        let method_callee = &(*method_map)[typeck::MethodCall::expr(ex.id)];\n+        let method_callee = &(*method_map)[ty::MethodCall::expr(ex.id)];\n         let (def_id, decl_id) = match method_callee.origin {\n-            typeck::MethodStatic(def_id) |\n-            typeck::MethodStaticUnboxedClosure(def_id) => {\n+            ty::MethodStatic(def_id) |\n+            ty::MethodStaticUnboxedClosure(def_id) => {\n                 // method invoked on an object with a concrete type (not a static method)\n                 let decl_id =\n                     match ty::trait_item_of_item(&self.analysis.ty_cx,\n@@ -936,14 +935,14 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                 };\n                 (Some(def_id), decl_id)\n             }\n-            typeck::MethodTypeParam(ref mp) => {\n+            ty::MethodTypeParam(ref mp) => {\n                 // method invoked on a type parameter\n                 let trait_item = ty::trait_item(&self.analysis.ty_cx,\n                                                 mp.trait_ref.def_id,\n                                                 mp.method_num);\n                 (None, Some(trait_item.def_id()))\n             }\n-            typeck::MethodTraitObject(ref mo) => {\n+            ty::MethodTraitObject(ref mo) => {\n                 // method invoked on a trait instance\n                 let trait_item = ty::trait_item(&self.analysis.ty_cx,\n                                                 mo.trait_ref.def_id,\n@@ -1473,7 +1472,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n \n pub fn process_crate(sess: &Session,\n                      krate: &ast::Crate,\n-                     analysis: &CrateAnalysis,\n+                     analysis: &ty::CrateAnalysis,\n                      odir: &Option<Path>) {\n     if generated_code(krate.span) {\n         return;"}, {"sha": "9d0e096c71d646758191a6798557ca7c07cac1ab", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -28,9 +28,11 @@\n pub use self::ValueOrigin::*;\n pub use self::scalar_type::*;\n \n+use super::CrateTranslation;\n+use super::ModuleTranslation;\n+\n use back::link::{mangle_exported_name};\n use back::{link, abi};\n-use driver::driver::{CrateAnalysis, CrateTranslation, ModuleTranslation};\n use lint;\n use llvm::{BasicBlockRef, Linkage, ValueRef, Vector, get_param};\n use llvm;\n@@ -1078,12 +1080,6 @@ pub fn store_ty(cx: Block, v: ValueRef, dst: ValueRef, t: Ty) {\n     };\n }\n \n-pub fn ignore_lhs(_bcx: Block, local: &ast::Local) -> bool {\n-    match local.pat.node {\n-        ast::PatWild(ast::PatWildSingle) => true, _ => false\n-    }\n-}\n-\n pub fn init_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, local: &ast::Local)\n                               -> Block<'blk, 'tcx> {\n     debug!(\"init_local(bcx={}, local.id={})\", bcx.to_str(), local.id);\n@@ -2916,12 +2912,6 @@ fn register_method(ccx: &CrateContext, id: ast::NodeId,\n     llfn\n }\n \n-pub fn p2i(ccx: &CrateContext, v: ValueRef) -> ValueRef {\n-    unsafe {\n-        return llvm::LLVMConstPtrToInt(v, ccx.int_type().to_ref());\n-    }\n-}\n-\n pub fn crate_ctxt_to_encode_parms<'a, 'tcx>(cx: &'a SharedCrateContext<'tcx>,\n                                             ie: encoder::EncodeInlinedItem<'a>)\n                                             -> encoder::EncodeParams<'a, 'tcx> {\n@@ -3055,9 +3045,9 @@ fn internalize_symbols(cx: &SharedCrateContext, reachable: &HashSet<String>) {\n     }\n }\n \n-pub fn trans_crate<'tcx>(analysis: CrateAnalysis<'tcx>)\n+pub fn trans_crate<'tcx>(analysis: ty::CrateAnalysis<'tcx>)\n                          -> (ty::ctxt<'tcx>, CrateTranslation) {\n-    let CrateAnalysis { ty_cx: tcx, exp_map2, reachable, name, .. } = analysis;\n+    let ty::CrateAnalysis { ty_cx: tcx, exp_map2, reachable, name, .. } = analysis;\n     let krate = tcx.map.krate();\n \n     // Before we touch LLVM, make sure that multithreading is enabled."}, {"sha": "746109ef1134690d2edf704d9832a3f77834383f", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -49,8 +49,7 @@ use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of;\n use middle::ty::{mod, Ty};\n-use middle::typeck::coherence::make_substs_for_receiver_types;\n-use middle::typeck::MethodCall;\n+use middle::ty::MethodCall;\n use util::ppaux::Repr;\n use util::ppaux::ty_to_string;\n \n@@ -573,7 +572,7 @@ pub fn trans_fn_ref_with_substs<'blk, 'tcx>(\n \n                     // Compute the first substitution\n                     let first_subst =\n-                        make_substs_for_receiver_types(tcx, &*trait_ref, &*method)\n+                        ty::make_substs_for_receiver_types(tcx, &*trait_ref, &*method)\n                         .erase_regions();\n \n                     // And compose them"}, {"sha": "a8256176c2658a737ff6b0e21e3aec6fcee14ed1", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -19,6 +19,7 @@ use llvm;\n use llvm::{ValueRef, BasicBlockRef, BuilderRef, ContextRef};\n use llvm::{True, False, Bool};\n use middle::def;\n+use middle::infer;\n use middle::lang_items::LangItem;\n use middle::mem_categorization as mc;\n use middle::region;\n@@ -36,8 +37,6 @@ use middle::traits;\n use middle::ty::{mod, Ty};\n use middle::ty_fold;\n use middle::ty_fold::TypeFoldable;\n-use middle::typeck;\n-use middle::typeck::infer;\n use util::ppaux::Repr;\n use util::nodemap::{DefIdMap, FnvHashMap, NodeMap};\n \n@@ -273,11 +272,6 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n         }\n     }\n \n-    pub fn out_arg_pos(&self) -> uint {\n-        assert!(self.caller_expects_out_pointer);\n-        0u\n-    }\n-\n     pub fn env_arg_pos(&self) -> uint {\n         if self.caller_expects_out_pointer {\n             1u\n@@ -468,7 +462,7 @@ impl<'blk, 'tcx> mc::Typer<'tcx> for BlockS<'blk, 'tcx> {\n         Ok(node_id_type(self, id))\n     }\n \n-    fn node_method_ty(&self, method_call: typeck::MethodCall) -> Option<Ty<'tcx>> {\n+    fn node_method_ty(&self, method_call: ty::MethodCall) -> Option<Ty<'tcx>> {\n         self.tcx()\n             .method_map\n             .borrow()\n@@ -481,7 +475,7 @@ impl<'blk, 'tcx> mc::Typer<'tcx> for BlockS<'blk, 'tcx> {\n     }\n \n     fn is_method_call(&self, id: ast::NodeId) -> bool {\n-        self.tcx().method_map.borrow().contains_key(&typeck::MethodCall::expr(id))\n+        self.tcx().method_map.borrow().contains_key(&ty::MethodCall::expr(id))\n     }\n \n     fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<region::CodeExtent> {\n@@ -870,7 +864,7 @@ pub enum ExprOrMethodCall {\n     ExprId(ast::NodeId),\n \n     // Type parameters for a method call like `a.foo::<int>()`\n-    MethodCall(typeck::MethodCall)\n+    MethodCall(ty::MethodCall)\n }\n \n pub fn node_id_substs<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,"}, {"sha": "fd9d6b8f2c3b20b6ee1e6e6e14c2ac6eca5f9926", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -347,10 +347,6 @@ impl<'tcx> SharedCrateContext<'tcx> {\n         &self.link_meta\n     }\n \n-    pub fn symbol_hasher<'a>(&'a self) -> &'a RefCell<Sha256> {\n-        &self.symbol_hasher\n-    }\n-\n     pub fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx> {\n         &self.tcx\n     }"}, {"sha": "a1574aa2f0e4339eab45f4bc954a8af131a52ea7", "filename": "src/librustc_trans/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -27,7 +27,7 @@ use trans::meth;\n use trans::type_::Type;\n use trans;\n use middle::ty;\n-use middle::typeck::MethodCall;\n+use middle::ty::MethodCall;\n use session::config::FullDebugInfo;\n use util::ppaux::Repr;\n use util::ppaux;"}, {"sha": "532ef6908186640fda81e2cbebaeaa81946f2f09", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -352,13 +352,6 @@ impl<'tcx> Datum<'tcx, Expr> {\n             |_| bcx.sess().bug(\"assert_lvalue given rvalue\"))\n     }\n \n-    /// Asserts that this datum *is* an lvalue and returns it.\n-    pub fn assert_rvalue(self, bcx: Block) -> Datum<'tcx, Rvalue> {\n-        self.match_kind(\n-            |_| bcx.sess().bug(\"assert_rvalue given lvalue\"),\n-            |r| r)\n-    }\n-\n     pub fn store_to_dest<'blk>(self,\n                                bcx: Block<'blk, 'tcx>,\n                                dest: expr::Dest,"}, {"sha": "d130dc0a55b1c0a4b111f92c5cf6e46b92a19ad6", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -41,15 +41,23 @@ use middle::def;\n use middle::mem_categorization::Typer;\n use middle::subst::{mod, Subst};\n use trans::{_match, adt, asm, base, callee, closure, consts, controlflow};\n-use trans::{debuginfo, glue, machine, meth, inline, tvec, type_of};\n use trans::base::*;\n use trans::build::*;\n use trans::cleanup::{mod, CleanupMethods};\n use trans::common::*;\n use trans::datum::*;\n-use middle::ty::{mod, struct_fields, tup_fields};\n-use middle::ty::{AdjustDerefRef, AdjustAddEnv, AutoUnsafe, AutoPtr, Ty};\n-use middle::typeck::{mod, MethodCall};\n+use trans::debuginfo;\n+use trans::glue;\n+use trans::machine;\n+use trans::meth;\n+use trans::inline;\n+use trans::tvec;\n+use trans::type_of;\n+use middle::ty::{struct_fields, tup_fields};\n+use middle::ty::{AdjustDerefRef, AdjustAddEnv, AutoUnsafe};\n+use middle::ty::{AutoPtr};\n+use middle::ty::{mod, Ty};\n+use middle::ty::MethodCall;\n use util::common::indenter;\n use util::ppaux::Repr;\n use trans::machine::{llsize_of, llsize_of_alloc};\n@@ -2091,7 +2099,7 @@ fn deref_once<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             // path (below) to dereference that `&T`.\n             let datum = match method_call.adjustment {\n                 // Always perform an AutoPtr when applying an overloaded auto-deref\n-                typeck::AutoDeref(_) => unpack_datum!(bcx, auto_ref(bcx, datum, expr)),\n+                ty::AutoDeref(_) => unpack_datum!(bcx, auto_ref(bcx, datum, expr)),\n                 _ => datum\n             };\n "}, {"sha": "94ff526debd1e8f0a3fd74558279206af3a08035", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -31,8 +31,7 @@ use trans::machine;\n use trans::type_::Type;\n use trans::type_of::*;\n use middle::ty::{mod, Ty};\n-use middle::typeck;\n-use middle::typeck::MethodCall;\n+use middle::ty::MethodCall;\n use util::ppaux::Repr;\n \n use std::c_str::ToCStr;\n@@ -119,8 +118,8 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                  .unwrap();\n \n     match origin {\n-        typeck::MethodStatic(did) |\n-        typeck::MethodStaticUnboxedClosure(did) => {\n+        ty::MethodStatic(did) |\n+        ty::MethodStaticUnboxedClosure(did) => {\n             Callee {\n                 bcx: bcx,\n                 data: Fn(callee::trans_fn_ref(bcx,\n@@ -129,7 +128,7 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             }\n         }\n \n-        typeck::MethodTypeParam(typeck::MethodParam {\n+        ty::MethodTypeParam(ty::MethodParam {\n             ref trait_ref,\n             method_num\n         }) => {\n@@ -147,7 +146,7 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                        method_num, origin)\n         }\n \n-        typeck::MethodTraitObject(ref mt) => {\n+        ty::MethodTraitObject(ref mt) => {\n             let self_expr = match self_expr {\n                 Some(self_expr) => self_expr,\n                 None => {"}, {"sha": "c00c477f4b8d2d3e5df4c31e47ac6aab2cd62c17", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 61, "deletions": 37, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -8,40 +8,64 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub mod doc;\n-pub mod macros;\n-pub mod inline;\n-pub mod monomorphize;\n-pub mod controlflow;\n-pub mod glue;\n-pub mod datum;\n-pub mod callee;\n-pub mod expr;\n-pub mod common;\n-pub mod context;\n-pub mod consts;\n-pub mod type_of;\n-pub mod build;\n-pub mod builder;\n-pub mod base;\n-pub mod _match;\n-pub mod closure;\n-pub mod tvec;\n-pub mod meth;\n-pub mod cabi;\n-pub mod cabi_x86;\n-pub mod cabi_x86_64;\n-pub mod cabi_x86_win64;\n-pub mod cabi_arm;\n-pub mod cabi_mips;\n-pub mod foreign;\n-pub mod intrinsic;\n-pub mod debuginfo;\n-pub mod machine;\n-pub mod adt;\n-pub mod asm;\n-pub mod type_;\n-pub mod value;\n-pub mod basic_block;\n-pub mod llrepr;\n-pub mod cleanup;\n+use llvm::{ContextRef, ModuleRef};\n+use metadata::common::LinkMeta;\n+use middle::dependency_format;\n+\n+pub use self::base::trans_crate;\n+pub use self::context::CrateContext;\n+pub use self::common::gensym_name;\n+\n+mod doc;\n+mod macros;\n+mod inline;\n+mod monomorphize;\n+mod controlflow;\n+mod glue;\n+mod datum;\n+mod callee;\n+mod expr;\n+mod common;\n+mod context;\n+mod consts;\n+mod type_of;\n+mod build;\n+mod builder;\n+mod base;\n+mod _match;\n+mod closure;\n+mod tvec;\n+mod meth;\n+mod cabi;\n+mod cabi_x86;\n+mod cabi_x86_64;\n+mod cabi_x86_win64;\n+mod cabi_arm;\n+mod cabi_mips;\n+mod foreign;\n+mod intrinsic;\n+mod debuginfo;\n+mod machine;\n+mod adt;\n+mod asm;\n+mod type_;\n+mod value;\n+mod basic_block;\n+mod llrepr;\n+mod cleanup;\n+\n+pub struct ModuleTranslation {\n+    pub llcx: ContextRef,\n+    pub llmod: ModuleRef,\n+}\n+\n+pub struct CrateTranslation {\n+    pub modules: Vec<ModuleTranslation>,\n+    pub metadata_module: ModuleTranslation,\n+    pub link: LinkMeta,\n+    pub metadata: Vec<u8>,\n+    pub reachable: Vec<String>,\n+    pub crate_formats: dependency_format::Dependencies,\n+    pub no_builtins: bool,\n+}\n+"}, {"sha": "d95ad9a11c87f1eff809aa7ca44fe778d0ecba50", "filename": "src/librustc_typeck/astconv.rs", "status": "renamed", "additions": 9, "deletions": 77, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -46,17 +46,17 @@\n //! Note that the self region for the `foo` defaulted to `&` in the first\n //! case but `&a` in the second.  Basically, defaults that appear inside\n //! an rptr (`&r.T`) use the region `r` that appears in the rptr.\n+\n+use middle::astconv_util::{ast_ty_to_prim_ty, check_path_args, NO_TPS, NO_REGIONS};\n use middle::const_eval;\n use middle::def;\n use middle::resolve_lifetime as rl;\n use middle::subst::{FnSpace, TypeSpace, AssocSpace, SelfSpace, Subst, Substs};\n use middle::subst::{VecPerParamSpace};\n use middle::ty::{mod, Ty};\n-use middle::typeck::lookup_def_tcx;\n-use middle::typeck::rscope::{UnelidableRscope, RegionScope, SpecificRscope,\n-                             ShiftedRscope, BindingRscope};\n-use middle::typeck::rscope;\n-use middle::typeck::TypeAndSubsts;\n+use rscope::{mod, UnelidableRscope, RegionScope, SpecificRscope,\n+             ShiftedRscope, BindingRscope};\n+use TypeAndSubsts;\n use util::common::ErrorReported;\n use util::nodemap::DefIdMap;\n use util::ppaux::{mod, Repr, UserString};\n@@ -428,9 +428,9 @@ pub fn instantiate_trait_ref<'tcx,AC,RS>(this: &AC,\n                                          where AC: AstConv<'tcx>,\n                                                RS: RegionScope\n {\n-    match lookup_def_tcx(this.tcx(),\n-                         ast_trait_ref.path.span,\n-                         ast_trait_ref.ref_id) {\n+    match ::lookup_def_tcx(this.tcx(),\n+                           ast_trait_ref.path.span,\n+                           ast_trait_ref.ref_id) {\n         def::DefTrait(trait_def_id) => {\n             let trait_ref = Rc::new(ast_path_to_trait_ref(this, rscope, trait_def_id,\n                                                           self_ty, &ast_trait_ref.path));\n@@ -553,74 +553,6 @@ pub fn ast_path_to_ty_relaxed<'tcx,AC,RS>(\n     }\n }\n \n-pub const NO_REGIONS: uint = 1;\n-pub const NO_TPS: uint = 2;\n-\n-fn check_path_args(tcx: &ty::ctxt,\n-                   path: &ast::Path,\n-                   flags: uint) {\n-    if (flags & NO_TPS) != 0u {\n-        if path.segments.iter().any(|s| s.parameters.has_types()) {\n-            span_err!(tcx.sess, path.span, E0109,\n-                \"type parameters are not allowed on this type\");\n-        }\n-    }\n-\n-    if (flags & NO_REGIONS) != 0u {\n-        if path.segments.iter().any(|s| s.parameters.has_lifetimes()) {\n-            span_err!(tcx.sess, path.span, E0110,\n-                \"region parameters are not allowed on this type\");\n-        }\n-    }\n-}\n-\n-pub fn ast_ty_to_prim_ty<'tcx>(tcx: &ty::ctxt<'tcx>, ast_ty: &ast::Ty)\n-                               -> Option<Ty<'tcx>> {\n-    match ast_ty.node {\n-        ast::TyPath(ref path, id) => {\n-            let a_def = match tcx.def_map.borrow().get(&id) {\n-                None => {\n-                    tcx.sess.span_bug(ast_ty.span,\n-                                      format!(\"unbound path {}\",\n-                                              path.repr(tcx)).as_slice())\n-                }\n-                Some(&d) => d\n-            };\n-            match a_def {\n-                def::DefPrimTy(nty) => {\n-                    match nty {\n-                        ast::TyBool => {\n-                            check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n-                            Some(ty::mk_bool())\n-                        }\n-                        ast::TyChar => {\n-                            check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n-                            Some(ty::mk_char())\n-                        }\n-                        ast::TyInt(it) => {\n-                            check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n-                            Some(ty::mk_mach_int(it))\n-                        }\n-                        ast::TyUint(uit) => {\n-                            check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n-                            Some(ty::mk_mach_uint(uit))\n-                        }\n-                        ast::TyFloat(ft) => {\n-                            check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n-                            Some(ty::mk_mach_float(ft))\n-                        }\n-                        ast::TyStr => {\n-                            Some(ty::mk_str(tcx))\n-                        }\n-                    }\n-                }\n-                _ => None\n-            }\n-        }\n-        _ => None\n-    }\n-}\n-\n /// Converts the given AST type to a built-in type. A \"built-in type\" is, at\n /// present, either a core numeric type, a string, or `Box`.\n pub fn ast_ty_to_builtin_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n@@ -1544,7 +1476,7 @@ pub fn partition_bounds<'a>(tcx: &ty::ctxt,\n     for &ast_bound in ast_bounds.iter() {\n         match *ast_bound {\n             ast::TraitTyParamBound(ref b) => {\n-                match lookup_def_tcx(tcx, b.trait_ref.path.span, b.trait_ref.ref_id) {\n+                match ::lookup_def_tcx(tcx, b.trait_ref.path.span, b.trait_ref.ref_id) {\n                     def::DefTrait(trait_did) => {\n                         match trait_def_ids.get(&trait_did) {\n                             // Already seen this trait. We forbid", "previous_filename": "src/librustc/middle/typeck/astconv.rs"}, {"sha": "7dcf0aa3e21898ae1080368df3176250db880c16", "filename": "src/librustc_typeck/check/_match.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n use middle::def;\n+use middle::infer::{mod, resolve};\n use middle::pat_util::{PatIdMap, pat_id_map, pat_is_binding, pat_is_const};\n use middle::subst::{Subst, Substs};\n use middle::ty::{mod, Ty};\n-use middle::typeck::check::{check_expr, check_expr_has_type, demand, FnCtxt};\n-use middle::typeck::check::{instantiate_path, structurally_resolved_type, valid_range_bounds};\n-use middle::typeck::infer::{mod, resolve};\n-use middle::typeck::require_same_types;\n+use check::{check_expr, check_expr_has_type, demand, FnCtxt};\n+use check::{instantiate_path, structurally_resolved_type, valid_range_bounds};\n+use require_same_types;\n use util::nodemap::FnvHashMap;\n \n use std::cmp;", "previous_filename": "src/librustc/middle/typeck/check/_match.rs"}, {"sha": "34030ae4493a2cbbe57ef80b8af9c6e058c29c1e", "filename": "src/librustc_typeck/check/closure.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -14,11 +14,11 @@ use super::check_fn;\n use super::{Expectation, ExpectCastableToType, ExpectHasType, NoExpectation};\n use super::FnCtxt;\n \n+use astconv;\n+use middle::infer;\n use middle::subst;\n use middle::ty::{mod, Ty};\n-use middle::typeck::astconv;\n-use middle::typeck::infer;\n-use middle::typeck::rscope::RegionScope;\n+use rscope::RegionScope;\n use syntax::abi;\n use syntax::ast;\n use syntax::ast_util;", "previous_filename": "src/librustc/middle/typeck/check/closure.rs"}, {"sha": "2b8a52f050d6f81d070e91dfb2440abb636fddcb", "filename": "src/librustc_typeck/check/demand.rs", "status": "renamed", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n \n+use check::FnCtxt;\n use middle::ty::{mod, Ty};\n-use middle::typeck::check::FnCtxt;\n-use middle::typeck::infer;\n-use middle::typeck::infer::resolve_type;\n-use middle::typeck::infer::resolve::try_resolve_tvar_shallow;\n+use middle::infer;\n+use middle::infer::resolve_type;\n+use middle::infer::resolve::try_resolve_tvar_shallow;\n \n use std::result::{Err, Ok};\n use std::result;\n@@ -29,12 +29,6 @@ pub fn suptype<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, sp: Span,\n         |sp, e, a, s| { fcx.report_mismatched_types(sp, e, a, s) })\n }\n \n-pub fn subtype<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, sp: Span,\n-                         expected: Ty<'tcx>, actual: Ty<'tcx>) {\n-    suptype_with_fn(fcx, sp, true, actual, expected,\n-        |sp, a, e, s| { fcx.report_mismatched_types(sp, e, a, s) })\n-}\n-\n pub fn suptype_with_fn<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                  sp: Span,\n                                  b_is_expected: bool,", "previous_filename": "src/librustc/middle/typeck/check/demand.rs"}, {"sha": "1fe73f0478d566a111a8f93f9ef4200e55954423", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "renamed", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -10,13 +10,14 @@\n \n use super::probe;\n \n+use check::{mod, FnCtxt, NoPreference, PreferMutLvalue};\n use middle::subst::{mod, Subst};\n use middle::traits;\n use middle::ty::{mod, Ty};\n-use middle::typeck::check::{mod, FnCtxt, NoPreference, PreferMutLvalue};\n-use middle::typeck::{MethodCall, MethodCallee, MethodObject, MethodOrigin,\n-                     MethodParam, MethodStatic, MethodTraitObject, MethodTypeParam};\n-use middle::typeck::infer::{mod, InferCtxt};\n+use middle::ty::{MethodCall, MethodCallee, MethodObject, MethodOrigin,\n+                 MethodParam, MethodStatic, MethodTraitObject, MethodTypeParam};\n+use middle::infer;\n+use middle::infer::InferCtxt;\n use middle::ty_fold::HigherRankedFoldable;\n use syntax::ast;\n use syntax::codemap::Span;", "previous_filename": "src/librustc/middle/typeck/check/method/confirm.rs"}, {"sha": "6129e38e39c12f9e6e0810dfd0101fcd98605996", "filename": "src/librustc_typeck/check/method/doc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fdoc.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "previous_filename": "src/librustc/middle/typeck/check/method/doc.rs"}, {"sha": "f87a4c9294bab60369b6c4522556083039cacff2", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "renamed", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -10,19 +10,17 @@\n \n //! Method lookup: the secret sauce of Rust. See `doc.rs`.\n \n+use astconv::AstConv;\n+use check::{FnCtxt};\n+use check::{impl_self_ty};\n+use check::vtable;\n+use check::vtable::select_new_fcx_obligations;\n use middle::subst;\n use middle::subst::{Subst};\n use middle::traits;\n use middle::ty::*;\n use middle::ty;\n-use middle::typeck::astconv::AstConv;\n-use middle::typeck::check::{FnCtxt};\n-use middle::typeck::check::{impl_self_ty};\n-use middle::typeck::check::vtable;\n-use middle::typeck::check::vtable::select_new_fcx_obligations;\n-use middle::typeck::infer;\n-use middle::typeck::{MethodCallee};\n-use middle::typeck::{MethodParam, MethodTypeParam};\n+use middle::infer;\n use util::ppaux::{Repr, UserString};\n \n use std::rc::Rc;", "previous_filename": "src/librustc/middle/typeck/check/method/mod.rs"}, {"sha": "6ff276edbce7ebf79a28d014fdb92a7beef441c0", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -12,17 +12,17 @@ use super::{MethodError,Ambiguity,NoMatch};\n use super::MethodIndex;\n use super::{CandidateSource,ImplSource,TraitSource};\n \n+use check;\n+use check::{FnCtxt, NoPreference};\n use middle::fast_reject;\n use middle::subst;\n use middle::subst::Subst;\n use middle::traits;\n use middle::ty::{mod, Ty};\n+use middle::ty::{MethodObject};\n use middle::ty_fold::HigherRankedFoldable;\n-use middle::typeck::check;\n-use middle::typeck::check::{FnCtxt, NoPreference};\n-use middle::typeck::{MethodObject};\n-use middle::typeck::infer;\n-use middle::typeck::infer::InferCtxt;\n+use middle::infer;\n+use middle::infer::InferCtxt;\n use syntax::ast;\n use syntax::codemap::{Span, DUMMY_SP};\n use std::collections::HashSet;", "previous_filename": "src/librustc/middle/typeck/check/method/probe.rs"}, {"sha": "a0f3f2734d97640805224293112872d3e17c8a24", "filename": "src/librustc_typeck/check/mod.rs", "status": "renamed", "additions": 36, "deletions": 47, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -31,7 +31,7 @@ can be broken down into several distinct phases:\n \n   In the process of checking, various constraints will be placed on\n   these type variables through the subtyping relationships requested\n-  through the `demand` module.  The `typeck::infer` module is in charge\n+  through the `demand` module.  The `infer` module is in charge\n   of resolving those constraints.\n \n - regionck: after main is complete, the regionck pass goes over all\n@@ -82,8 +82,10 @@ pub use self::Expectation::*;\n use self::IsBinopAssignment::*;\n use self::TupleArgumentsFlag::*;\n \n-use session::Session;\n+use astconv::{mod, ast_region_to_region, ast_ty_to_ty, AstConv};\n+use check::_match::pat_ctxt;\n use middle::{const_eval, def, traits};\n+use middle::infer;\n use middle::lang_items::IteratorItem;\n use middle::mem_categorization::{mod, McResult};\n use middle::pat_util::{mod, pat_id_map};\n@@ -93,12 +95,12 @@ use middle::ty::{FnSig, VariantInfo, Polytype};\n use middle::ty::{Disr, ParamTy, ParameterEnvironment};\n use middle::ty::{mod, Ty};\n use middle::ty::liberate_late_bound_regions;\n+use middle::ty::{MethodCall, MethodCallee, MethodMap, ObjectCastMap};\n use middle::ty_fold::TypeFolder;\n-use middle::typeck::astconv::{mod, ast_region_to_region, ast_ty_to_ty, AstConv};\n-use middle::typeck::check::_match::pat_ctxt;\n-use middle::typeck::rscope::RegionScope;\n-use middle::typeck::{mod, CrateCtxt, infer, lookup_def_ccx, no_params, require_same_types};\n-use middle::typeck::{MethodCall, MethodCallee, MethodMap, ObjectCastMap, TypeAndSubsts};\n+use rscope::RegionScope;\n+use session::Session;\n+use {CrateCtxt, lookup_def_ccx, no_params, require_same_types};\n+use TypeAndSubsts;\n use middle::lang_items::TypeIdLangItem;\n use lint;\n use util::common::{block_query, indenter, loop_query};\n@@ -279,15 +281,15 @@ impl<'a, 'tcx> mem_categorization::Typer<'tcx> for FnCtxt<'a, 'tcx> {\n     fn node_ty(&self, id: ast::NodeId) -> McResult<Ty<'tcx>> {\n         Ok(self.node_ty(id))\n     }\n-    fn node_method_ty(&self, method_call: typeck::MethodCall)\n+    fn node_method_ty(&self, method_call: ty::MethodCall)\n                       -> Option<Ty<'tcx>> {\n         self.inh.method_map.borrow().get(&method_call).map(|m| m.ty)\n     }\n     fn adjustments<'a>(&'a self) -> &'a RefCell<NodeMap<ty::AutoAdjustment<'tcx>>> {\n         &self.inh.adjustments\n     }\n     fn is_method_call(&self, id: ast::NodeId) -> bool {\n-        self.inh.method_map.borrow().contains_key(&typeck::MethodCall::expr(id))\n+        self.inh.method_map.borrow().contains_key(&ty::MethodCall::expr(id))\n     }\n     fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<CodeExtent> {\n         self.tcx().temporary_scope(rvalue_id)\n@@ -359,6 +361,17 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckItemTypesVisitor<'a, 'tcx> {\n         check_item(self.ccx, i);\n         visit::walk_item(self, i);\n     }\n+\n+    fn visit_ty(&mut self, t: &ast::Ty) {\n+        match t.node {\n+            ast::TyFixedLengthVec(_, ref expr) => {\n+                check_const_in_type(self.ccx, &**expr, ty::mk_uint());\n+            }\n+            _ => {}\n+        }\n+\n+        visit::walk_ty(self, t);\n+    }\n }\n \n pub fn check_item_types(ccx: &CrateCtxt) {\n@@ -1860,13 +1873,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    /// Fetch type of `expr` after applying adjustments that have been recorded in the fcx.\n-    pub fn expr_ty_adjusted(&self, expr: &ast::Expr) -> Ty<'tcx> {\n-        let adjustments = self.inh.adjustments.borrow();\n-        let adjustment = adjustments.get(&expr.id);\n-        self.adjust_expr_ty(expr, adjustment)\n-    }\n-\n     /// Apply `adjustment` to the type of `expr`\n     pub fn adjust_expr_ty(&self,\n                           expr: &ast::Expr,\n@@ -1919,16 +1925,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         infer::mk_subty(self.infcx(), a_is_expected, origin, sub, sup)\n     }\n \n-    pub fn can_mk_subty(&self, sub: Ty<'tcx>, sup: Ty<'tcx>)\n-                        -> Result<(), ty::type_err<'tcx>> {\n-        infer::can_mk_subty(self.infcx(), sub, sup)\n-    }\n-\n-    pub fn can_mk_eqty(&self, sub: Ty<'tcx>, sup: Ty<'tcx>)\n-                       -> Result<(), ty::type_err<'tcx>> {\n-        infer::can_mk_eqty(self.infcx(), sub, sup)\n-    }\n-\n     pub fn mk_assignty(&self,\n                        expr: &ast::Expr,\n                        sub: Ty<'tcx>,\n@@ -3260,7 +3256,7 @@ fn check_expr_with_unifier<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             Some(method) => {\n                 let method_ty = method.ty;\n                 // HACK(eddyb) Fully qualified path to work around a resolve bug.\n-                let method_call = ::middle::typeck::MethodCall::expr(op_ex.id);\n+                let method_call = ::middle::ty::MethodCall::expr(op_ex.id);\n                 fcx.inh.method_map.borrow_mut().insert(method_call, method);\n                 match check_method_argument_types(fcx,\n                                             op_ex.span,\n@@ -4670,36 +4666,29 @@ fn check_block_with_expected<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n /// Checks a constant appearing in a type. At the moment this is just the\n /// length expression in a fixed-length vector, but someday it might be\n /// extended to type-level numeric literals.\n-pub fn check_const_in_type<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                 expr: &ast::Expr,\n-                                 expected_type: Ty<'tcx>) {\n-    // Synthesize a crate context. The trait map is not needed here (though I\n-    // imagine it will be if we have associated statics --pcwalton), so we\n-    // leave it blank.\n-    let ccx = CrateCtxt {\n-        trait_map: NodeMap::new(),\n-        tcx: tcx,\n-    };\n-    let inh = static_inherited_fields(&ccx);\n-    let fcx = blank_fn_ctxt(&ccx, &inh, ty::FnConverging(expected_type), expr.id);\n+fn check_const_in_type<'a,'tcx>(ccx: &'a CrateCtxt<'a,'tcx>,\n+                                expr: &ast::Expr,\n+                                expected_type: Ty<'tcx>) {\n+    let inh = static_inherited_fields(ccx);\n+    let fcx = blank_fn_ctxt(ccx, &inh, ty::FnConverging(expected_type), expr.id);\n     check_const_with_ty(&fcx, expr.span, expr, expected_type);\n }\n \n-pub fn check_const(ccx: &CrateCtxt,\n-                   sp: Span,\n-                   e: &ast::Expr,\n-                   id: ast::NodeId) {\n+fn check_const(ccx: &CrateCtxt,\n+               sp: Span,\n+               e: &ast::Expr,\n+               id: ast::NodeId) {\n     let inh = static_inherited_fields(ccx);\n     let rty = ty::node_id_to_type(ccx.tcx, id);\n     let fcx = blank_fn_ctxt(ccx, &inh, ty::FnConverging(rty), e.id);\n     let declty = (*fcx.ccx.tcx.tcache.borrow())[local_def(id)].ty;\n     check_const_with_ty(&fcx, sp, e, declty);\n }\n \n-pub fn check_const_with_ty<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n-                                     _: Span,\n-                                     e: &ast::Expr,\n-                                     declty: Ty<'tcx>) {\n+fn check_const_with_ty<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n+                                 _: Span,\n+                                 e: &ast::Expr,\n+                                 declty: Ty<'tcx>) {\n     // Gather locals in statics (because of block expressions).\n     // This is technically unnecessary because locals in static items are forbidden,\n     // but prevents type checking from blowing up before const checking can properly", "previous_filename": "src/librustc/middle/typeck/check/mod.rs"}, {"sha": "2aec4393de9426e1361240a25aaf21c12618d642", "filename": "src/librustc_typeck/check/regionck.rs", "status": "renamed", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -114,20 +114,19 @@\n //! then mean that all later passes would have to check for these figments\n //! and report an error, and it just seems like more mess in the end.)\n \n+use astconv::AstConv;\n+use check::FnCtxt;\n+use check::regionmanip;\n+use check::vtable;\n use middle::def;\n use middle::mem_categorization as mc;\n use middle::region::CodeExtent;\n use middle::traits;\n use middle::ty::{ReScope};\n-use middle::ty::{mod, Ty};\n-use middle::typeck::astconv::AstConv;\n-use middle::typeck::check::FnCtxt;\n-use middle::typeck::check::regionmanip;\n-use middle::typeck::check::vtable;\n-use middle::typeck::infer::resolve_and_force_all_but_regions;\n-use middle::typeck::infer::resolve_type;\n-use middle::typeck::infer;\n-use middle::typeck::MethodCall;\n+use middle::ty::{mod, Ty, MethodCall};\n+use middle::infer::resolve_and_force_all_but_regions;\n+use middle::infer::resolve_type;\n+use middle::infer;\n use middle::pat_util;\n use util::nodemap::{DefIdMap, NodeMap, FnvHashMap};\n use util::ppaux::{ty_to_string, Repr};", "previous_filename": "src/librustc/middle/typeck/check/regionck.rs"}, {"sha": "92dfd8b5f56d272842fa9cb6ce563f82ada53fd2", "filename": "src/librustc_typeck/check/regionmanip.rs", "status": "renamed", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -380,3 +380,22 @@ impl<'a, 'tcx> Wf<'a, 'tcx> {\n         }\n     }\n }\n+\n+impl<'tcx> Repr<'tcx> for WfConstraint<'tcx> {\n+    fn repr(&self, tcx: &ty::ctxt) -> String {\n+        match *self {\n+            RegionSubRegionConstraint(_, r_a, r_b) => {\n+                format!(\"RegionSubRegionConstraint({}, {})\",\n+                        r_a.repr(tcx),\n+                        r_b.repr(tcx))\n+            }\n+\n+            RegionSubParamConstraint(_, r, p) => {\n+                format!(\"RegionSubParamConstraint({}, {})\",\n+                        r.repr(tcx),\n+                        p.repr(tcx))\n+            }\n+        }\n+    }\n+}\n+", "previous_filename": "src/librustc/middle/typeck/check/regionmanip.rs"}, {"sha": "c2b263885bd73bcd69f6c118dcb7e774bbb2ae60", "filename": "src/librustc_typeck/check/vtable.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -8,16 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use check::{FnCtxt, structurally_resolved_type};\n use middle::subst::{SelfSpace, FnSpace};\n use middle::traits;\n use middle::traits::{SelectionError, OutputTypeParameterMismatch, Overflow, Unimplemented};\n use middle::traits::{Obligation, obligation_for_builtin_bound};\n use middle::traits::{FulfillmentError, CodeSelectionError, CodeAmbiguity};\n use middle::traits::{ObligationCause};\n use middle::ty::{mod, Ty};\n-use middle::typeck::check::{FnCtxt,\n-                            structurally_resolved_type};\n-use middle::typeck::infer;\n+use middle::infer;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::codemap::Span;", "previous_filename": "src/librustc/middle/typeck/check/vtable.rs"}, {"sha": "1769c588ec1de51244bafa77bf7b32fe8ee31b00", "filename": "src/librustc_typeck/check/wf.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -8,16 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use astconv::AstConv;\n+use check::{FnCtxt, Inherited, blank_fn_ctxt, vtable, regionck};\n+use CrateCtxt;\n use middle::region;\n use middle::subst;\n use middle::subst::{Subst};\n use middle::traits;\n use middle::ty::{mod, Ty};\n use middle::ty::liberate_late_bound_regions;\n use middle::ty_fold::{TypeFolder, TypeFoldable};\n-use middle::typeck::astconv::AstConv;\n-use middle::typeck::check::{FnCtxt, Inherited, blank_fn_ctxt, vtable, regionck};\n-use middle::typeck::CrateCtxt;\n use util::ppaux::Repr;\n \n use std::collections::HashSet;", "previous_filename": "src/librustc/middle/typeck/check/wf.rs"}, {"sha": "777f354bec126520b4724a095005a6dcc09eeb02", "filename": "src/librustc_typeck/check/writeback.rs", "status": "renamed", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -13,18 +13,17 @@\n // substitutions.\n use self::ResolveReason::*;\n \n+use astconv::AstConv;\n+use check::FnCtxt;\n use middle::def;\n use middle::pat_util;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{mod, Ty, MethodCall, MethodCallee};\n use middle::ty_fold::{TypeFolder,TypeFoldable};\n-use middle::typeck::astconv::AstConv;\n-use middle::typeck::check::FnCtxt;\n-use middle::typeck::infer::{force_all, resolve_all, resolve_region};\n-use middle::typeck::infer::resolve_type;\n-use middle::typeck::infer;\n-use middle::typeck::{MethodCall, MethodCallee};\n-use middle::typeck::write_substs_to_tcx;\n-use middle::typeck::write_ty_to_tcx;\n+use middle::infer::{force_all, resolve_all, resolve_region};\n+use middle::infer::resolve_type;\n+use middle::infer;\n+use write_substs_to_tcx;\n+use write_ty_to_tcx;\n use util::ppaux::Repr;\n \n use std::cell::Cell;", "previous_filename": "src/librustc/middle/typeck/check/writeback.rs"}, {"sha": "b8642ddde4082448f69471b6cfc39b1fc46a2da6", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "renamed", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -19,7 +19,6 @@\n use metadata::csearch::{each_impl, get_impl_trait};\n use metadata::csearch;\n use middle::subst;\n-use middle::subst::{Substs};\n use middle::ty::{ImplContainer, ImplOrTraitItemId, MethodTraitItemId};\n use middle::ty::{TypeTraitItemId, lookup_item_type};\n use middle::ty::{Ty, ty_bool, ty_char, ty_enum, ty_err};\n@@ -31,10 +30,10 @@ use middle::ty::{ty_closure};\n use middle::ty::type_is_ty_var;\n use middle::subst::Subst;\n use middle::ty;\n-use middle::typeck::CrateCtxt;\n-use middle::typeck::infer::combine::Combine;\n-use middle::typeck::infer::InferCtxt;\n-use middle::typeck::infer::{new_infer_ctxt, resolve_ivar, resolve_type};\n+use CrateCtxt;\n+use middle::infer::combine::Combine;\n+use middle::infer::InferCtxt;\n+use middle::infer::{new_infer_ctxt, resolve_ivar, resolve_type};\n use std::collections::{HashSet};\n use std::cell::RefCell;\n use std::rc::Rc;\n@@ -477,27 +476,6 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n     }\n }\n \n-/// Substitutes the values for the receiver's type parameters that are found in method, leaving the\n-/// method's type parameters intact.\n-pub fn make_substs_for_receiver_types<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                            trait_ref: &ty::TraitRef<'tcx>,\n-                                            method: &ty::Method<'tcx>)\n-                                            -> subst::Substs<'tcx>\n-{\n-    let meth_tps: Vec<Ty> =\n-        method.generics.types.get_slice(subst::FnSpace)\n-              .iter()\n-              .map(|def| ty::mk_param_from_def(tcx, def))\n-              .collect();\n-    let meth_regions: Vec<ty::Region> =\n-        method.generics.regions.get_slice(subst::FnSpace)\n-              .iter()\n-              .map(|def| ty::ReEarlyBound(def.def_id.node, def.space,\n-                                          def.index, def.name))\n-              .collect();\n-    trait_ref.substs.clone().with_method(meth_tps, meth_regions)\n-}\n-\n fn subst_receiver_types_in_method_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                            impl_id: ast::DefId,\n                                            impl_poly_type: &ty::Polytype<'tcx>,\n@@ -507,7 +485,7 @@ fn subst_receiver_types_in_method_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                            provided_source: Option<ast::DefId>)\n                                            -> ty::Method<'tcx>\n {\n-    let combined_substs = make_substs_for_receiver_types(tcx, trait_ref, method);\n+    let combined_substs = ty::make_substs_for_receiver_types(tcx, trait_ref, method);\n \n     debug!(\"subst_receiver_types_in_method_ty: combined_substs={}\",\n            combined_substs.repr(tcx));", "previous_filename": "src/librustc/middle/typeck/coherence/mod.rs"}, {"sha": "dc3afaae35f615800056ddbfef49787cadf128c6", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "previous_filename": "src/librustc/middle/typeck/coherence/orphan.rs"}, {"sha": "0e74d4578d95be7817f531777980c4bb512cd19d", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -13,8 +13,7 @@\n \n use middle::traits;\n use middle::ty;\n-use middle::typeck::infer::{new_infer_ctxt};\n-use middle::typeck::infer;\n+use middle::infer::{mod, new_infer_ctxt};\n use syntax::ast::{DefId};\n use syntax::ast::{LOCAL_CRATE};\n use syntax::ast;", "previous_filename": "src/librustc/middle/typeck/coherence/overlap.rs"}, {"sha": "717e886029a3d1bf7eb5a1e828c2f27a151243c6", "filename": "src/librustc_typeck/collect.rs", "status": "renamed", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -32,6 +32,9 @@ as `ty_param()` instances.\n use self::ConvertMethodContext::*;\n use self::CreateTypeParametersForAssociatedTypesFlag::*;\n \n+use astconv::{AstConv, ty_of_arg};\n+use astconv::{ast_ty_to_ty, ast_region_to_region};\n+use astconv;\n use metadata::csearch;\n use middle::def;\n use middle::lang_items::SizedTraitLangItem;\n@@ -43,13 +46,9 @@ use middle::ty::{ImplContainer, ImplOrTraitItemContainer, TraitContainer};\n use middle::ty::{Polytype};\n use middle::ty::{mod, Ty};\n use middle::ty_fold::TypeFolder;\n-use middle::typeck::astconv::{AstConv, ty_of_arg};\n-use middle::typeck::astconv::{ast_ty_to_ty, ast_region_to_region};\n-use middle::typeck::astconv;\n-use middle::typeck::infer;\n-use middle::typeck::rscope::*;\n-use middle::typeck::{CrateCtxt, lookup_def_tcx, no_params, write_ty_to_tcx};\n-use middle::typeck;\n+use middle::infer;\n+use rscope::*;\n+use {CrateCtxt, lookup_def_tcx, no_params, write_ty_to_tcx};\n use util::nodemap::{FnvHashMap, FnvHashSet};\n use util::ppaux;\n use util::ppaux::{Repr,UserString};\n@@ -2159,13 +2158,13 @@ fn check_method_self_type<'a, 'tcx, RS:RegionScope>(\n                base_type.repr(crate_context.tcx),\n                base_type_free.repr(crate_context.tcx));\n         let infcx = infer::new_infer_ctxt(crate_context.tcx);\n-        drop(typeck::require_same_types(crate_context.tcx,\n-                                        Some(&infcx),\n-                                        false,\n-                                        explicit_self.span,\n-                                        base_type_free,\n-                                        required_type_free,\n-                                        || {\n+        drop(::require_same_types(crate_context.tcx,\n+                                  Some(&infcx),\n+                                  false,\n+                                  explicit_self.span,\n+                                  base_type_free,\n+                                  required_type_free,\n+                                  || {\n                 format!(\"mismatched self type: expected `{}`\",\n                         ppaux::ty_to_string(crate_context.tcx, required_type))\n         }));", "previous_filename": "src/librustc/middle/typeck/collect.rs"}, {"sha": "36e81f18103b873dfd1f1ae61d25cd725b96de18", "filename": "src/librustc_typeck/diagnostics.rs", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -0,0 +1,151 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_snake_case)]\n+\n+register_diagnostic!(E0001, r##\"\n+    This error suggests that the expression arm corresponding to the noted pattern\n+    will never be reached as for all possible values of the expression being matched,\n+    one of the preceeding patterns will match.\n+\n+    This means that perhaps some of the preceeding patterns are too general, this\n+    one is too specific or the ordering is incorrect.\n+\"##)\n+\n+register_diagnostics!(\n+    E0002,\n+    E0003,\n+    E0004,\n+    E0005,\n+    E0006,\n+    E0007,\n+    E0008,\n+    E0009,\n+    E0010,\n+    E0011,\n+    E0012,\n+    E0013,\n+    E0014,\n+    E0015,\n+    E0016,\n+    E0017,\n+    E0018,\n+    E0019,\n+    E0020,\n+    E0022,\n+    E0023,\n+    E0024,\n+    E0025,\n+    E0026,\n+    E0027,\n+    E0029,\n+    E0030,\n+    E0031,\n+    E0033,\n+    E0034,\n+    E0035,\n+    E0036,\n+    E0038,\n+    E0040,\n+    E0044,\n+    E0045,\n+    E0046,\n+    E0049,\n+    E0050,\n+    E0051,\n+    E0052,\n+    E0053,\n+    E0054,\n+    E0055,\n+    E0056,\n+    E0057,\n+    E0059,\n+    E0060,\n+    E0061,\n+    E0062,\n+    E0063,\n+    E0066,\n+    E0067,\n+    E0068,\n+    E0069,\n+    E0070,\n+    E0071,\n+    E0072,\n+    E0073,\n+    E0074,\n+    E0075,\n+    E0076,\n+    E0077,\n+    E0079,\n+    E0080,\n+    E0081,\n+    E0082,\n+    E0083,\n+    E0084,\n+    E0085,\n+    E0086,\n+    E0087,\n+    E0088,\n+    E0089,\n+    E0090,\n+    E0091,\n+    E0092,\n+    E0093,\n+    E0094,\n+    E0100,\n+    E0101,\n+    E0102,\n+    E0103,\n+    E0104,\n+    E0106,\n+    E0107,\n+    E0108,\n+    E0109,\n+    E0110,\n+    E0116,\n+    E0117,\n+    E0118,\n+    E0119,\n+    E0120,\n+    E0121,\n+    E0122,\n+    E0124,\n+    E0127,\n+    E0128,\n+    E0129,\n+    E0130,\n+    E0131,\n+    E0132,\n+    E0133,\n+    E0134,\n+    E0135,\n+    E0136,\n+    E0137,\n+    E0138,\n+    E0139,\n+    E0140,\n+    E0141,\n+    E0152,\n+    E0153,\n+    E0157,\n+    E0158,\n+    E0159,\n+    E0161,\n+    E0162,\n+    E0163,\n+    E0164,\n+    E0165,\n+    E0166,\n+    E0167,\n+    E0168,\n+    E0169,\n+    E0171,\n+    E0172\n+)"}, {"sha": "2f5b473567faa62f69e1f1b45df72fd7f9752760", "filename": "src/librustc_typeck/lib.rs", "status": "renamed", "additions": 45, "deletions": 203, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/*\n+/*!\n \n typeck.rs, an introduction\n \n@@ -57,239 +57,81 @@ independently:\n   all subtyping and assignment constraints are met.  In essence, the check\n   module specifies the constraints, and the infer module solves them.\n \n+# Note\n+\n+This API is completely unstable and subject to change.\n+\n */\n \n+#![crate_name = \"rustc_typeck\"]\n+#![experimental]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+      html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+\n+#![feature(default_type_params, globs, if_let, import_shadowing, macro_rules, phase, quote)]\n+#![feature(slicing_syntax, tuple_indexing, unsafe_destructor)]\n+#![feature(rustc_diagnostic_macros)]\n #![allow(non_camel_case_types)]\n \n-pub use self::ExprAdjustment::*;\n-pub use self::vtable_origin::*;\n-pub use self::MethodOrigin::*;\n+#[phase(plugin, link)] extern crate log;\n+#[phase(plugin, link)] extern crate syntax;\n+\n+extern crate arena;\n+extern crate rustc;\n+\n+pub use rustc::lint;\n+pub use rustc::metadata;\n+pub use rustc::middle;\n+pub use rustc::session;\n+pub use rustc::util;\n \n use middle::def;\n use middle::resolve;\n+use middle::infer;\n use middle::subst;\n use middle::subst::VecPerParamSpace;\n use middle::ty::{mod, Ty};\n use session::config;\n use util::common::time;\n use util::ppaux::Repr;\n use util::ppaux;\n-use util::nodemap::{NodeMap, FnvHashMap};\n \n-use std::cell::RefCell;\n-use std::rc::Rc;\n use syntax::codemap::Span;\n use syntax::print::pprust::*;\n use syntax::{ast, ast_map, abi};\n \n-pub mod check;\n-pub mod rscope;\n-pub mod astconv;\n-pub mod infer;\n-pub mod collect;\n-pub mod coherence;\n-pub mod variance;\n-\n-#[deriving(Clone, Encodable, Decodable, PartialEq, PartialOrd, Show)]\n-pub struct param_index {\n-    pub space: subst::ParamSpace,\n-    pub index: uint\n-}\n-\n-#[deriving(Clone, Show)]\n-pub enum MethodOrigin<'tcx> {\n-    // fully statically resolved method\n-    MethodStatic(ast::DefId),\n-\n-    // fully statically resolved unboxed closure invocation\n-    MethodStaticUnboxedClosure(ast::DefId),\n+#[cfg(stage0)]\n+mod diagnostics;\n \n-    // method invoked on a type parameter with a bounded trait\n-    MethodTypeParam(MethodParam<'tcx>),\n-\n-    // method invoked on a trait instance\n-    MethodTraitObject(MethodObject<'tcx>),\n-\n-}\n-\n-// details for a method invoked with a receiver whose type is a type parameter\n-// with a bounded trait.\n-#[deriving(Clone, Show)]\n-pub struct MethodParam<'tcx> {\n-    // the precise trait reference that occurs as a bound -- this may\n-    // be a supertrait of what the user actually typed.\n-    pub trait_ref: Rc<ty::TraitRef<'tcx>>,\n-\n-    // index of uint in the list of methods for the trait\n-    pub method_num: uint,\n-}\n-\n-// details for a method invoked with a receiver whose type is an object\n-#[deriving(Clone, Show)]\n-pub struct MethodObject<'tcx> {\n-    // the (super)trait containing the method to be invoked\n-    pub trait_ref: Rc<ty::TraitRef<'tcx>>,\n-\n-    // the actual base trait id of the object\n-    pub object_trait_id: ast::DefId,\n-\n-    // index of the method to be invoked amongst the trait's methods\n-    pub method_num: uint,\n-\n-    // index into the actual runtime vtable.\n-    // the vtable is formed by concatenating together the method lists of\n-    // the base object trait and all supertraits;  this is the index into\n-    // that vtable\n-    pub real_index: uint,\n-}\n-\n-#[deriving(Clone)]\n-pub struct MethodCallee<'tcx> {\n-    pub origin: MethodOrigin<'tcx>,\n-    pub ty: Ty<'tcx>,\n-    pub substs: subst::Substs<'tcx>\n-}\n-\n-/// With method calls, we store some extra information in\n-/// side tables (i.e method_map). We use\n-/// MethodCall as a key to index into these tables instead of\n-/// just directly using the expression's NodeId. The reason\n-/// for this being that we may apply adjustments (coercions)\n-/// with the resulting expression also needing to use the\n-/// side tables. The problem with this is that we don't\n-/// assign a separate NodeId to this new expression\n-/// and so it would clash with the base expression if both\n-/// needed to add to the side tables. Thus to disambiguate\n-/// we also keep track of whether there's an adjustment in\n-/// our key.\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n-pub struct MethodCall {\n-    pub expr_id: ast::NodeId,\n-    pub adjustment: ExprAdjustment\n-}\n-\n-#[deriving(Clone, PartialEq, Eq, Hash, Show, Encodable, Decodable)]\n-pub enum ExprAdjustment {\n-    NoAdjustment,\n-    AutoDeref(uint),\n-    AutoObject\n-}\n+mod check;\n+mod rscope;\n+mod astconv;\n+mod collect;\n+mod coherence;\n+mod variance;\n \n-pub struct TypeAndSubsts<'tcx> {\n+struct TypeAndSubsts<'tcx> {\n     pub substs: subst::Substs<'tcx>,\n     pub ty: Ty<'tcx>,\n }\n \n-impl MethodCall {\n-    pub fn expr(id: ast::NodeId) -> MethodCall {\n-        MethodCall {\n-            expr_id: id,\n-            adjustment: NoAdjustment\n-        }\n-    }\n-\n-    pub fn autoobject(id: ast::NodeId) -> MethodCall {\n-        MethodCall {\n-            expr_id: id,\n-            adjustment: AutoObject\n-        }\n-    }\n-\n-    pub fn autoderef(expr_id: ast::NodeId, autoderef: uint) -> MethodCall {\n-        MethodCall {\n-            expr_id: expr_id,\n-            adjustment: AutoDeref(1 + autoderef)\n-        }\n-    }\n-}\n-\n-// maps from an expression id that corresponds to a method call to the details\n-// of the method to be invoked\n-pub type MethodMap<'tcx> = RefCell<FnvHashMap<MethodCall, MethodCallee<'tcx>>>;\n-\n-pub type vtable_param_res<'tcx> = Vec<vtable_origin<'tcx>>;\n-\n-// Resolutions for bounds of all parameters, left to right, for a given path.\n-pub type vtable_res<'tcx> = VecPerParamSpace<vtable_param_res<'tcx>>;\n-\n-#[deriving(Clone)]\n-pub enum vtable_origin<'tcx> {\n-    /*\n-      Statically known vtable. def_id gives the impl item\n-      from whence comes the vtable, and tys are the type substs.\n-      vtable_res is the vtable itself.\n-     */\n-    vtable_static(ast::DefId, subst::Substs<'tcx>, vtable_res<'tcx>),\n-\n-    /*\n-      Dynamic vtable, comes from a parameter that has a bound on it:\n-      fn foo<T:quux,baz,bar>(a: T) -- a's vtable would have a\n-      vtable_param origin\n-\n-      The first argument is the param index (identifying T in the example),\n-      and the second is the bound number (identifying baz)\n-     */\n-    vtable_param(param_index, uint),\n-\n-    /*\n-      Vtable automatically generated for an unboxed closure. The def ID is the\n-      ID of the closure expression.\n-     */\n-    vtable_unboxed_closure(ast::DefId),\n-\n-    /*\n-      Asked to determine the vtable for ty_err. This is the value used\n-      for the vtables of `Self` in a virtual call like `foo.bar()`\n-      where `foo` is of object type. The same value is also used when\n-      type errors occur.\n-     */\n-    vtable_error,\n-}\n-\n-impl<'tcx> Repr<'tcx> for vtable_origin<'tcx> {\n-    fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n-        match *self {\n-            vtable_static(def_id, ref tys, ref vtable_res) => {\n-                format!(\"vtable_static({}:{}, {}, {})\",\n-                        def_id,\n-                        ty::item_path_str(tcx, def_id),\n-                        tys.repr(tcx),\n-                        vtable_res.repr(tcx))\n-            }\n-\n-            vtable_param(x, y) => {\n-                format!(\"vtable_param({}, {})\", x, y)\n-            }\n-\n-            vtable_unboxed_closure(def_id) => {\n-                format!(\"vtable_unboxed_closure({})\", def_id)\n-            }\n-\n-            vtable_error => {\n-                format!(\"vtable_error\")\n-            }\n-        }\n-    }\n-}\n-\n-// For every explicit cast into an object type, maps from the cast\n-// expr to the associated trait ref.\n-pub type ObjectCastMap<'tcx> = RefCell<NodeMap<Rc<ty::TraitRef<'tcx>>>>;\n-\n-pub struct CrateCtxt<'a, 'tcx: 'a> {\n+struct CrateCtxt<'a, 'tcx: 'a> {\n     // A mapping from method call sites to traits that have that method.\n     trait_map: resolve::TraitMap,\n     tcx: &'a ty::ctxt<'tcx>\n }\n \n // Functions that write types into the node type table\n-pub fn write_ty_to_tcx<'tcx>(tcx: &ty::ctxt<'tcx>, node_id: ast::NodeId, ty: Ty<'tcx>) {\n+fn write_ty_to_tcx<'tcx>(tcx: &ty::ctxt<'tcx>, node_id: ast::NodeId, ty: Ty<'tcx>) {\n     debug!(\"write_ty_to_tcx({}, {})\", node_id, ppaux::ty_to_string(tcx, ty));\n     assert!(!ty::type_needs_infer(ty));\n     tcx.node_types.borrow_mut().insert(node_id, ty);\n }\n \n-pub fn write_substs_to_tcx<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn write_substs_to_tcx<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                  node_id: ast::NodeId,\n                                  item_substs: ty::ItemSubsts<'tcx>) {\n     if !item_substs.is_noop() {\n@@ -302,7 +144,7 @@ pub fn write_substs_to_tcx<'tcx>(tcx: &ty::ctxt<'tcx>,\n         tcx.item_substs.borrow_mut().insert(node_id, item_substs);\n     }\n }\n-pub fn lookup_def_tcx(tcx:&ty::ctxt, sp: Span, id: ast::NodeId) -> def::Def {\n+fn lookup_def_tcx(tcx:&ty::ctxt, sp: Span, id: ast::NodeId) -> def::Def {\n     match tcx.def_map.borrow().get(&id) {\n         Some(x) => x.clone(),\n         _ => {\n@@ -311,20 +153,20 @@ pub fn lookup_def_tcx(tcx:&ty::ctxt, sp: Span, id: ast::NodeId) -> def::Def {\n     }\n }\n \n-pub fn lookup_def_ccx(ccx: &CrateCtxt, sp: Span, id: ast::NodeId)\n+fn lookup_def_ccx(ccx: &CrateCtxt, sp: Span, id: ast::NodeId)\n                    -> def::Def {\n     lookup_def_tcx(ccx.tcx, sp, id)\n }\n \n-pub fn no_params<'tcx>(t: Ty<'tcx>) -> ty::Polytype<'tcx> {\n+fn no_params<'tcx>(t: Ty<'tcx>) -> ty::Polytype<'tcx> {\n     ty::Polytype {\n         generics: ty::Generics {types: VecPerParamSpace::empty(),\n                                 regions: VecPerParamSpace::empty()},\n         ty: t\n     }\n }\n \n-pub fn require_same_types<'a, 'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn require_same_types<'a, 'tcx>(tcx: &ty::ctxt<'tcx>,\n                                     maybe_infcx: Option<&infer::InferCtxt<'a, 'tcx>>,\n                                     t1_is_expected: bool,\n                                     span: Span,", "previous_filename": "src/librustc/middle/typeck/mod.rs"}, {"sha": "3bca24f479f704d487eae5cab9944d8dd2bd609e", "filename": "src/librustc_typeck/rscope.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "previous_filename": "src/librustc/middle/typeck/rscope.rs"}, {"sha": "ade3144ce414e8485f44a84d42179d2094aa280e", "filename": "src/librustc_typeck/variance.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "previous_filename": "src/librustc/middle/typeck/variance.rs"}, {"sha": "7e02891160ad2fa96f63b2c386053442c843ee73", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -39,7 +39,6 @@ use syntax::parse::token;\n use syntax::ptr::P;\n \n use rustc_trans::back::link;\n-use rustc_trans::driver::driver;\n use rustc::metadata::cstore;\n use rustc::metadata::csearch;\n use rustc::metadata::decoder;\n@@ -48,6 +47,7 @@ use rustc::middle::subst;\n use rustc::middle::subst::VecPerParamSpace;\n use rustc::middle::ty;\n use rustc::middle::stability;\n+use rustc::session::config;\n \n use std::rc::Rc;\n use std::u32;\n@@ -131,7 +131,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n         externs.sort_by(|&(a, _), &(b, _)| a.cmp(&b));\n \n         // Figure out the name of this crate\n-        let input = driver::FileInput(cx.src.clone());\n+        let input = config::Input::File(cx.src.clone());\n         let name = link::find_crate_name(None, self.attrs.as_slice(), &input);\n \n         // Clean the crate, translating the entire libsyntax AST to one that is"}, {"sha": "4cd88bca51e93a75aa2a4cf8d969cc5b6ecea755", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n pub use self::MaybeTyped::*;\n \n-use rustc_trans::driver::driver;\n+use rustc_driver::driver;\n use rustc::session::{mod, config};\n use rustc::middle::{privacy, ty};\n use rustc::lint;\n@@ -83,7 +83,7 @@ pub fn run_core(libs: Vec<Path>, cfgs: Vec<String>, externs: Externs,\n \n     // Parse, resolve, and typecheck the given crate.\n \n-    let input = driver::FileInput(cpath.clone());\n+    let input = config::Input::File(cpath.clone());\n \n     let warning_lint = lint::builtin::WARNINGS.name_lower();\n \n@@ -122,7 +122,7 @@ pub fn run_core(libs: Vec<Path>, cfgs: Vec<String>, externs: Externs,\n     let ast_map = driver::assign_node_ids_and_map(&sess, &mut forest);\n \n     let type_arena = TypedArena::new();\n-    let driver::CrateAnalysis {\n+    let ty::CrateAnalysis {\n         exported_items, public_items, ty_cx, ..\n     } = driver::phase_3_run_analysis_passes(sess, ast_map, &type_arena, name);\n "}, {"sha": "1e7de50cf879dcf7cdea4eb1227001dff98b0e8f", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -21,6 +21,7 @@ extern crate getopts;\n extern crate libc;\n extern crate rustc;\n extern crate rustc_trans;\n+extern crate rustc_driver;\n extern crate serialize;\n extern crate syntax;\n extern crate \"test\" as testing;\n@@ -163,7 +164,7 @@ pub fn main_args(args: &[String]) -> int {\n         usage(args[0].as_slice());\n         return 0;\n     } else if matches.opt_present(\"version\") {\n-        match rustc_trans::driver::version(\"rustdoc\", &matches) {\n+        match rustc_driver::version(\"rustdoc\", &matches) {\n             Some(err) => {\n                 println!(\"{}\", err);\n                 return 1"}, {"sha": "7ca7ae4b21149ade1afe461deaf8e821a93ea974", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -19,7 +19,7 @@ use std::string::String;\n use std::collections::{HashSet, HashMap};\n use testing;\n use rustc::session::{mod, config};\n-use rustc_trans::driver::driver;\n+use rustc_driver::driver;\n use syntax::ast;\n use syntax::codemap::{CodeMap, dummy_spanned};\n use syntax::diagnostic;\n@@ -42,7 +42,7 @@ pub fn run(input: &str,\n            crate_name: Option<String>)\n            -> int {\n     let input_path = Path::new(input);\n-    let input = driver::FileInput(input_path.clone());\n+    let input = config::Input::File(input_path.clone());\n \n     let sessopts = config::Options {\n         maybe_sysroot: Some(os::self_exe_path().unwrap().dir_path()),\n@@ -110,7 +110,7 @@ fn runtest(test: &str, cratename: &str, libs: Vec<Path>, externs: core::Externs,\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n     let test = maketest(test, Some(cratename), true, as_test_harness);\n-    let input = driver::StrInput(test.to_string());\n+    let input = config::Input::Str(test.to_string());\n \n     let sessopts = config::Options {\n         maybe_sysroot: Some(os::self_exe_path().unwrap().dir_path()),"}, {"sha": "2be11a236d3b756f53d27e757f0fdc43ef83448f", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -45,15 +45,6 @@ pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt,\n         [ast::TtToken(_, token::Ident(code, _))] => code,\n         _ => unreachable!()\n     };\n-    with_registered_diagnostics(|diagnostics| {\n-        if !diagnostics.contains_key(&code.name) {\n-            ecx.span_err(span, format!(\n-                \"unknown diagnostic code {}; add to librustc/diagnostics.rs\",\n-                token::get_ident(code).get()\n-            ).as_slice());\n-        }\n-        ()\n-    });\n     with_used_diagnostics(|diagnostics| {\n         match diagnostics.insert(code.name, span) {\n             Some(previous_span) => {\n@@ -106,25 +97,19 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n         _ => unreachable!()\n     };\n \n-    let (count, expr) = with_used_diagnostics(|diagnostics_in_use| {\n+    let (count, expr) =\n         with_registered_diagnostics(|diagnostics| {\n-            let descriptions: Vec<P<ast::Expr>> = diagnostics\n-                .iter().filter_map(|(code, description)| {\n-                if !diagnostics_in_use.contains_key(code) {\n-                    ecx.span_warn(span, format!(\n-                        \"diagnostic code {} never used\", token::get_name(*code).get()\n-                    ).as_slice());\n-                }\n-                description.map(|description| {\n-                    ecx.expr_tuple(span, vec![\n-                        ecx.expr_str(span, token::get_name(*code)),\n-                        ecx.expr_str(span, token::get_name(description))\n-                    ])\n-                })\n-            }).collect();\n+            let descriptions: Vec<P<ast::Expr>> =\n+                diagnostics.iter().filter_map(|(code, description)| {\n+                    description.map(|description| {\n+                        ecx.expr_tuple(span, vec![\n+                            ecx.expr_str(span, token::get_name(*code)),\n+                            ecx.expr_str(span, token::get_name(description))])\n+                    })\n+                }).collect();\n             (descriptions.len(), ecx.expr_vec(span, descriptions))\n-        })\n-    });\n+        });\n+\n     MacItems::new(vec![quote_item!(ecx,\n         pub static $name: [(&'static str, &'static str), ..$count] = $expr;\n     ).unwrap()].into_iter())"}, {"sha": "55d836092fa710a2f95befdd2ae43c7d0071f100", "filename": "src/test/compile-fail/rustc-diagnostics-1.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/361baabb07b2fb921d0f556d0787b3ea7ef86746/src%2Ftest%2Fcompile-fail%2Frustc-diagnostics-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361baabb07b2fb921d0f556d0787b3ea7ef86746/src%2Ftest%2Fcompile-fail%2Frustc-diagnostics-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frustc-diagnostics-1.rs?ref=361baabb07b2fb921d0f556d0787b3ea7ef86746", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(rustc_diagnostic_macros)]\n-\n-__register_diagnostic!(E0001)\n-__register_diagnostic!(E0003)\n-\n-fn main() {\n-    __diagnostic_used!(E0002);\n-    //~^ ERROR unknown diagnostic code E0002\n-\n-    __diagnostic_used!(E0001);\n-    //~^ NOTE previous invocation\n-\n-    __diagnostic_used!(E0001);\n-    //~^ WARNING diagnostic code E0001 already used\n-}\n-\n-__build_diagnostic_array!(DIAGNOSTICS)\n-//~^ WARN diagnostic code E0003 never used"}, {"sha": "d160664a48c780e2e18d48662c153f8a967e97cb", "filename": "src/test/compile-fail/rustc-diagnostics-3.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/361baabb07b2fb921d0f556d0787b3ea7ef86746/src%2Ftest%2Fcompile-fail%2Frustc-diagnostics-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361baabb07b2fb921d0f556d0787b3ea7ef86746/src%2Ftest%2Fcompile-fail%2Frustc-diagnostics-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frustc-diagnostics-3.rs?ref=361baabb07b2fb921d0f556d0787b3ea7ef86746", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-__register_diagnostic!(E0001)\n-//~^ ERROR macro undefined: '__register_diagnostic!'\n-\n-fn main() {\n-    __diagnostic_used!(E0001);\n-    //~^ ERROR macro undefined: '__diagnostic_used!'\n-}\n-\n-__build_diagnostic_array!(DIAGNOSTICS)\n-//~^ ERROR macro undefined: '__build_diagnostic_array!'"}, {"sha": "8a0c14d2d7e366ce41772bc7faf066e4790db19b", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52636007ce40da67998276c0671c6345512c3b58/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52636007ce40da67998276c0671c6345512c3b58/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=52636007ce40da67998276c0671c6345512c3b58", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n extern crate rustc;\n-extern crate rustc_trans;\n+extern crate rustc_driver;\n extern crate syntax;\n \n use rustc::session::{build_session, Session};\n-use rustc::session::config::{basic_options, build_configuration, OutputTypeExe};\n-use rustc_trans::driver::driver::{Input, StrInput, compile_input};\n+use rustc::session::config::{basic_options, build_configuration, Input, OutputTypeExe};\n+use rustc_driver::driver::{compile_input};\n use syntax::diagnostics::registry::Registry;\n \n fn main() {\n@@ -55,7 +55,7 @@ fn compile(code: String, output: Path, sysroot: Path) {\n \n     compile_input(sess,\n             cfg,\n-            &StrInput(code),\n+            &Input::Str(code),\n             &None,\n             &Some(output),\n             None);"}]}