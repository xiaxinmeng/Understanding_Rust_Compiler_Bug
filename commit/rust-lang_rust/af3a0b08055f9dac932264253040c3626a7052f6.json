{"sha": "af3a0b08055f9dac932264253040c3626a7052f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmM2EwYjA4MDU1ZjlkYWM5MzIyNjQyNTMwNDBjMzYyNmE3MDUyZjY=", "commit": {"author": {"name": "Sean Bowe", "email": "ewillbefull@gmail.com", "date": "2015-09-14T03:22:30Z"}, "committer": {"name": "Sean Bowe", "email": "ewillbefull@gmail.com", "date": "2015-09-14T03:22:30Z"}, "message": "Refactor ty_infer invocation", "tree": {"sha": "e7b196d24ce666ca1e70661fef4b3354a822e68b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7b196d24ce666ca1e70661fef4b3354a822e68b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af3a0b08055f9dac932264253040c3626a7052f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af3a0b08055f9dac932264253040c3626a7052f6", "html_url": "https://github.com/rust-lang/rust/commit/af3a0b08055f9dac932264253040c3626a7052f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af3a0b08055f9dac932264253040c3626a7052f6/comments", "author": {"login": "ebfull", "id": 3794471, "node_id": "MDQ6VXNlcjM3OTQ0NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3794471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebfull", "html_url": "https://github.com/ebfull", "followers_url": "https://api.github.com/users/ebfull/followers", "following_url": "https://api.github.com/users/ebfull/following{/other_user}", "gists_url": "https://api.github.com/users/ebfull/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebfull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebfull/subscriptions", "organizations_url": "https://api.github.com/users/ebfull/orgs", "repos_url": "https://api.github.com/users/ebfull/repos", "events_url": "https://api.github.com/users/ebfull/events{/privacy}", "received_events_url": "https://api.github.com/users/ebfull/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebfull", "id": 3794471, "node_id": "MDQ6VXNlcjM3OTQ0NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3794471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebfull", "html_url": "https://github.com/ebfull", "followers_url": "https://api.github.com/users/ebfull/followers", "following_url": "https://api.github.com/users/ebfull/following{/other_user}", "gists_url": "https://api.github.com/users/ebfull/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebfull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebfull/subscriptions", "organizations_url": "https://api.github.com/users/ebfull/orgs", "repos_url": "https://api.github.com/users/ebfull/repos", "events_url": "https://api.github.com/users/ebfull/events{/privacy}", "received_events_url": "https://api.github.com/users/ebfull/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522d4b0a354b60b1b69d15773197c4c3dba521a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/522d4b0a354b60b1b69d15773197c4c3dba521a5", "html_url": "https://github.com/rust-lang/rust/commit/522d4b0a354b60b1b69d15773197c4c3dba521a5"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "13476ddebc17f7a32d64364cb5541f5180a45bb2", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/af3a0b08055f9dac932264253040c3626a7052f6/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3a0b08055f9dac932264253040c3626a7052f6/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=af3a0b08055f9dac932264253040c3626a7052f6", "patch": "@@ -412,21 +412,26 @@ fn create_substs_for_ast_path<'tcx>(\n     // they were optional (e.g. paths inside expressions).\n     let mut type_substs = if param_mode == PathParamMode::Optional &&\n                              types_provided.is_empty() {\n+        fn default_type_parameter<'tcx>(p: &ty::TypeParameterDef<'tcx>, self_ty: Option<Ty<'tcx>>)\n+                                        -> Option<ty::TypeParameterDef<'tcx>>\n+        {\n+            if let Some(ref default) = p.default {\n+                if self_ty.is_none() && default.has_self_ty() {\n+                    // There is no suitable inference default for a type parameter\n+                    // that references self with no self-type provided.\n+                    return None;\n+                }\n+            }\n+\n+            Some(p.clone())\n+        }\n+\n         let mut substs = region_substs.clone();\n \n         ty_param_defs\n             .iter()\n-            .map(|p| {\n-                if let Some(ref default) = p.default {\n-                    if self_ty.is_none() && default.has_self_ty() {\n-                        // There is no suitable inference default for a type parameter\n-                        // that references Self with no self-type provided.\n-                        return this.ty_infer(None, Some(&mut substs), Some(TypeSpace), span);\n-                    }\n-                }\n-\n-                this.ty_infer(Some(p.clone()), Some(&mut substs), Some(TypeSpace), span)\n-            })\n+            .map(|p| this.ty_infer(default_type_parameter(p, self_ty), Some(&mut substs),\n+                                   Some(TypeSpace), span))\n             .collect()\n     } else {\n         types_provided"}]}