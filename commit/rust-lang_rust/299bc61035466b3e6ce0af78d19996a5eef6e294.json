{"sha": "299bc61035466b3e6ce0af78d19996a5eef6e294", "node_id": "C_kwDOAAsO6NoAKDI5OWJjNjEwMzU0NjZiM2U2Y2UwYWY3OGQxOTk5NmE1ZWVmNmUyOTQ", "commit": {"author": {"name": "Ayush Singh", "email": "ayushsingh1325@gmail.com", "date": "2022-11-06T08:31:46Z"}, "committer": {"name": "Ayush Singh", "email": "ayushsingh1325@gmail.com", "date": "2022-11-06T08:48:36Z"}, "message": "Add type_array to BaseTypeMethods\n\nMoved type_array function to rustc_codegen_ssa::BaseTypeMethods trait.\nThis allows using normal alloca function to create arrays as suggested in\nhttps://github.com/rust-lang/rust/pull/104022.\n\nSigned-off-by: Ayush Singh <ayushsingh1325@gmail.com>", "tree": {"sha": "54f57d698c730a54883f28e2d7e3fc048acb2759", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54f57d698c730a54883f28e2d7e3fc048acb2759"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/299bc61035466b3e6ce0af78d19996a5eef6e294", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgFOwa2ORKymIo9gdZQiDOxTNBZZ\n9aqSarqSinCRx9btAAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQHcSuVvZgQQFEGVEmXOynEIbMUIZYs9/t6jua0HwOPsClQA34XW8eRghEwkfM6SNPg\n2nnZkRGIBwx0JEvYiWWAM=\n-----END SSH SIGNATURE-----", "payload": "tree 54f57d698c730a54883f28e2d7e3fc048acb2759\nparent 5b3e9090757da9a95b22f589fe39b6a4b5455b96\nauthor Ayush Singh <ayushsingh1325@gmail.com> 1667723506 +0530\ncommitter Ayush Singh <ayushsingh1325@gmail.com> 1667724516 +0530\n\nAdd type_array to BaseTypeMethods\n\nMoved type_array function to rustc_codegen_ssa::BaseTypeMethods trait.\nThis allows using normal alloca function to create arrays as suggested in\nhttps://github.com/rust-lang/rust/pull/104022.\n\nSigned-off-by: Ayush Singh <ayushsingh1325@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/299bc61035466b3e6ce0af78d19996a5eef6e294", "html_url": "https://github.com/rust-lang/rust/commit/299bc61035466b3e6ce0af78d19996a5eef6e294", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/299bc61035466b3e6ce0af78d19996a5eef6e294/comments", "author": {"login": "Ayush1325", "id": 22546812, "node_id": "MDQ6VXNlcjIyNTQ2ODEy", "avatar_url": "https://avatars.githubusercontent.com/u/22546812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ayush1325", "html_url": "https://github.com/Ayush1325", "followers_url": "https://api.github.com/users/Ayush1325/followers", "following_url": "https://api.github.com/users/Ayush1325/following{/other_user}", "gists_url": "https://api.github.com/users/Ayush1325/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ayush1325/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ayush1325/subscriptions", "organizations_url": "https://api.github.com/users/Ayush1325/orgs", "repos_url": "https://api.github.com/users/Ayush1325/repos", "events_url": "https://api.github.com/users/Ayush1325/events{/privacy}", "received_events_url": "https://api.github.com/users/Ayush1325/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ayush1325", "id": 22546812, "node_id": "MDQ6VXNlcjIyNTQ2ODEy", "avatar_url": "https://avatars.githubusercontent.com/u/22546812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ayush1325", "html_url": "https://github.com/Ayush1325", "followers_url": "https://api.github.com/users/Ayush1325/followers", "following_url": "https://api.github.com/users/Ayush1325/following{/other_user}", "gists_url": "https://api.github.com/users/Ayush1325/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ayush1325/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ayush1325/subscriptions", "organizations_url": "https://api.github.com/users/Ayush1325/orgs", "repos_url": "https://api.github.com/users/Ayush1325/repos", "events_url": "https://api.github.com/users/Ayush1325/events{/privacy}", "received_events_url": "https://api.github.com/users/Ayush1325/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b3e9090757da9a95b22f589fe39b6a4b5455b96", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3e9090757da9a95b22f589fe39b6a4b5455b96", "html_url": "https://github.com/rust-lang/rust/commit/5b3e9090757da9a95b22f589fe39b6a4b5455b96"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "862ed62c68b2ab9124e9ef04252819839e34a78c", "filename": "compiler/rustc_codegen_gcc/src/type_.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/299bc61035466b3e6ce0af78d19996a5eef6e294/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299bc61035466b3e6ce0af78d19996a5eef6e294/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs?ref=299bc61035466b3e6ce0af78d19996a5eef6e294", "patch": "@@ -201,6 +201,27 @@ impl<'gcc, 'tcx> BaseTypeMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n     fn val_ty(&self, value: RValue<'gcc>) -> Type<'gcc> {\n         value.get_type()\n     }\n+\n+    fn type_array(&self, ty: Type<'gcc>, mut len: u64) -> Type<'gcc> {\n+        if let Some(struct_type) = ty.is_struct() {\n+            if struct_type.get_field_count() == 0 {\n+                // NOTE: since gccjit only supports i32 for the array size and libcore's tests uses a\n+                // size of usize::MAX in test_binary_search, we workaround this by setting the size to\n+                // zero for ZSTs.\n+                // FIXME(antoyo): fix gccjit API.\n+                len = 0;\n+            }\n+        }\n+\n+        // NOTE: see note above. Some other test uses usize::MAX.\n+        if len == u64::MAX {\n+            len = 0;\n+        }\n+\n+        let len: i32 = len.try_into().expect(\"array len\");\n+\n+        self.context.new_array_type(None, ty, len)\n+    }\n }\n \n impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n@@ -227,27 +248,6 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         self.context.new_opaque_struct_type(None, name)\n     }\n \n-    pub fn type_array(&self, ty: Type<'gcc>, mut len: u64) -> Type<'gcc> {\n-        if let Some(struct_type) = ty.is_struct() {\n-            if struct_type.get_field_count() == 0 {\n-                // NOTE: since gccjit only supports i32 for the array size and libcore's tests uses a\n-                // size of usize::MAX in test_binary_search, we workaround this by setting the size to\n-                // zero for ZSTs.\n-                // FIXME(antoyo): fix gccjit API.\n-                len = 0;\n-            }\n-        }\n-\n-        // NOTE: see note above. Some other test uses usize::MAX.\n-        if len == u64::MAX {\n-            len = 0;\n-        }\n-\n-        let len: i32 = len.try_into().expect(\"array len\");\n-\n-        self.context.new_array_type(None, ty, len)\n-    }\n-\n     pub fn type_bool(&self) -> Type<'gcc> {\n         self.context.new_type::<bool>()\n     }"}, {"sha": "5eec7dc613028e3e25f6a50296399f20a6d8f34d", "filename": "compiler/rustc_codegen_llvm/src/type_.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/299bc61035466b3e6ce0af78d19996a5eef6e294/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299bc61035466b3e6ce0af78d19996a5eef6e294/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs?ref=299bc61035466b3e6ce0af78d19996a5eef6e294", "patch": "@@ -127,10 +127,6 @@ impl<'ll> CodegenCx<'ll, '_> {\n     pub(crate) fn type_variadic_func(&self, args: &[&'ll Type], ret: &'ll Type) -> &'ll Type {\n         unsafe { llvm::LLVMFunctionType(ret, args.as_ptr(), args.len() as c_uint, True) }\n     }\n-\n-    pub(crate) fn type_array(&self, ty: &'ll Type, len: u64) -> &'ll Type {\n-        unsafe { llvm::LLVMRustArrayType(ty, len) }\n-    }\n }\n \n impl<'ll, 'tcx> BaseTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n@@ -231,6 +227,10 @@ impl<'ll, 'tcx> BaseTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn val_ty(&self, v: &'ll Value) -> &'ll Type {\n         common::val_ty(v)\n     }\n+\n+    fn type_array(&self, ty: &'ll Type, len: u64) -> &'ll Type {\n+        unsafe { llvm::LLVMRustArrayType(ty, len) }\n+    }\n }\n \n impl Type {"}, {"sha": "86481d5d758d6d251c5b916163079905a8dd805f", "filename": "compiler/rustc_codegen_ssa/src/traits/type_.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/299bc61035466b3e6ce0af78d19996a5eef6e294/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299bc61035466b3e6ce0af78d19996a5eef6e294/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs?ref=299bc61035466b3e6ce0af78d19996a5eef6e294", "patch": "@@ -22,6 +22,7 @@ pub trait BaseTypeMethods<'tcx>: Backend<'tcx> {\n     fn type_f32(&self) -> Self::Type;\n     fn type_f64(&self) -> Self::Type;\n \n+    fn type_array(&self, ty: Self::Type, len: u64) -> Self::Type;\n     fn type_func(&self, args: &[Self::Type], ret: Self::Type) -> Self::Type;\n     fn type_struct(&self, els: &[Self::Type], packed: bool) -> Self::Type;\n     fn type_kind(&self, ty: Self::Type) -> TypeKind;"}]}