{"sha": "c00d9bf3249142915eabc49fc1d96dda1ee3fc1c", "node_id": "C_kwDOAAsO6NoAKGMwMGQ5YmYzMjQ5MTQyOTE1ZWFiYzQ5ZmMxZDk2ZGRhMWVlM2ZjMWM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-30T21:36:12Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-31T17:13:05Z"}, "message": "Fix comment in poly_project_and_unify_type", "tree": {"sha": "484afd66d01743e481769c4aebe4ebf5185e052b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/484afd66d01743e481769c4aebe4ebf5185e052b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c00d9bf3249142915eabc49fc1d96dda1ee3fc1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c00d9bf3249142915eabc49fc1d96dda1ee3fc1c", "html_url": "https://github.com/rust-lang/rust/commit/c00d9bf3249142915eabc49fc1d96dda1ee3fc1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c00d9bf3249142915eabc49fc1d96dda1ee3fc1c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a8d2e3856c0c75c71998b6c85937203839b946d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a8d2e3856c0c75c71998b6c85937203839b946d", "html_url": "https://github.com/rust-lang/rust/commit/4a8d2e3856c0c75c71998b6c85937203839b946d"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "641b915f373625ab9d52685eaa4328cb792e0538", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c00d9bf3249142915eabc49fc1d96dda1ee3fc1c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00d9bf3249142915eabc49fc1d96dda1ee3fc1c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=c00d9bf3249142915eabc49fc1d96dda1ee3fc1c", "patch": "@@ -145,15 +145,28 @@ impl<'tcx> ProjectionCandidateSet<'tcx> {\n     }\n }\n \n-/// Takes the place of a\n+/// States returned from `poly_project_and_unify_type`. Takes the place\n+/// of the old return type, which was:\n+/// ```ignore (not-rust)\n /// Result<\n ///     Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,\n ///     MismatchedProjectionTypes<'tcx>,\n /// >\n+/// ```\n pub(super) enum ProjectAndUnifyResult<'tcx> {\n+    /// The projection bound holds subject to the given obligations. If the\n+    /// projection cannot be normalized because the required trait bound does\n+    /// not hold, this is returned, with `obligations` being a predicate that\n+    /// cannot be proven.\n     Holds(Vec<PredicateObligation<'tcx>>),\n+    /// The projection cannot be normalized due to ambiguity. Resolving some\n+    /// inference variables in the projection may fix this.\n     FailedNormalization,\n+    /// The project cannot be normalized because `poly_project_and_unify_type`\n+    /// is called recursively while normalizing the same projection.\n     Recursive,\n+    // the projection can be normalized, but is not equal to the expected type.\n+    // Returns the type error that arose from the mismatch.\n     MismatchedProjectionTypes(MismatchedProjectionTypes<'tcx>),\n }\n \n@@ -163,19 +176,6 @@ pub(super) enum ProjectAndUnifyResult<'tcx> {\n /// ```\n /// If successful, this may result in additional obligations. Also returns\n /// the projection cache key used to track these additional obligations.\n-///\n-/// ## Returns\n-///\n-/// - `Err(_)`: the projection can be normalized, but is not equal to the\n-///   expected type.\n-/// - `Ok(Err(InProgress))`: this is called recursively while normalizing\n-///   the same projection.\n-/// - `Ok(Ok(None))`: The projection cannot be normalized due to ambiguity\n-///   (resolving some inference variables in the projection may fix this).\n-/// - `Ok(Ok(Some(obligations)))`: The projection bound holds subject to\n-///    the given obligations. If the projection cannot be normalized because\n-///    the required trait bound doesn't hold this returned with `obligations`\n-///    being a predicate that cannot be proven.\n #[instrument(level = \"debug\", skip(selcx))]\n pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,"}]}