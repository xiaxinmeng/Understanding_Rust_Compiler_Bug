{"sha": "fdfb9ebcf69857e27390508ab1d2268b607455ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZmI5ZWJjZjY5ODU3ZTI3MzkwNTA4YWIxZDIyNjhiNjA3NDU1Y2E=", "commit": {"author": {"name": "Jan Kobler", "email": "eng1@koblersystems.de", "date": "2014-03-26T22:44:55Z"}, "committer": {"name": "Jan Kobler", "email": "eng1@koblersystems.de", "date": "2014-03-27T10:19:06Z"}, "message": "verify-grammar llnextgen\n\nWhen calling\n\n    make verify-grammar\n\na lot of errors are reported by llnextgen.\n\nOnly simple errors like:\n\n  missing semicolons,\n  missing single quotes,\n  usage of parentheses instead of squared brackets or\n  usage of single quote instead of double quote\n\nare fixed by this patch.\n\nThis can only be tested, when llnextgen is installed.\n\nSigned-off-by: Jan Kobler <eng1@koblersystems.de>", "tree": {"sha": "fd89fcb8242a6358a205f53278e8ab385d4d8189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd89fcb8242a6358a205f53278e8ab385d4d8189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdfb9ebcf69857e27390508ab1d2268b607455ca", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdfb9ebcf69857e27390508ab1d2268b607455ca", "html_url": "https://github.com/rust-lang/rust/commit/fdfb9ebcf69857e27390508ab1d2268b607455ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdfb9ebcf69857e27390508ab1d2268b607455ca/comments", "author": {"login": "jankobler", "id": 5220610, "node_id": "MDQ6VXNlcjUyMjA2MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5220610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jankobler", "html_url": "https://github.com/jankobler", "followers_url": "https://api.github.com/users/jankobler/followers", "following_url": "https://api.github.com/users/jankobler/following{/other_user}", "gists_url": "https://api.github.com/users/jankobler/gists{/gist_id}", "starred_url": "https://api.github.com/users/jankobler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jankobler/subscriptions", "organizations_url": "https://api.github.com/users/jankobler/orgs", "repos_url": "https://api.github.com/users/jankobler/repos", "events_url": "https://api.github.com/users/jankobler/events{/privacy}", "received_events_url": "https://api.github.com/users/jankobler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jankobler", "id": 5220610, "node_id": "MDQ6VXNlcjUyMjA2MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5220610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jankobler", "html_url": "https://github.com/jankobler", "followers_url": "https://api.github.com/users/jankobler/followers", "following_url": "https://api.github.com/users/jankobler/following{/other_user}", "gists_url": "https://api.github.com/users/jankobler/gists{/gist_id}", "starred_url": "https://api.github.com/users/jankobler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jankobler/subscriptions", "organizations_url": "https://api.github.com/users/jankobler/orgs", "repos_url": "https://api.github.com/users/jankobler/repos", "events_url": "https://api.github.com/users/jankobler/events{/privacy}", "received_events_url": "https://api.github.com/users/jankobler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b05263bc3575e22a249d9818b32bcbca0334c44", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b05263bc3575e22a249d9818b32bcbca0334c44", "html_url": "https://github.com/rust-lang/rust/commit/2b05263bc3575e22a249d9818b32bcbca0334c44"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "3e875aa77b713c4f76861f81372cd50a95d18895", "filename": "src/doc/rust.md", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fdfb9ebcf69857e27390508ab1d2268b607455ca/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/fdfb9ebcf69857e27390508ab1d2268b607455ca/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=fdfb9ebcf69857e27390508ab1d2268b607455ca", "patch": "@@ -153,7 +153,7 @@ Some productions are defined by exclusion of particular Unicode characters:\n ~~~~ {.notrust .ebnf .gram}\n comment : block_comment | line_comment ;\n block_comment : \"/*\" block_comment_body * '*' + '/' ;\n-block_comment_body : (block_comment | character) * ;\n+block_comment_body : [block_comment | character] * ;\n line_comment : \"//\" non_eol * ;\n ~~~~\n \n@@ -497,16 +497,16 @@ All of the above extensions are expressions with values.\n ## Macros\n \n ~~~~ {.notrust .ebnf .gram}\n-expr_macro_rules : \"macro_rules\" '!' ident '(' macro_rule * ')'\n-macro_rule : '(' matcher * ')' \"=>\" '(' transcriber * ')' ';'\n+expr_macro_rules : \"macro_rules\" '!' ident '(' macro_rule * ')' ;\n+macro_rule : '(' matcher * ')' \"=>\" '(' transcriber * ')' ';' ;\n matcher : '(' matcher * ')' | '[' matcher * ']'\n         | '{' matcher * '}' | '$' ident ':' ident\n         | '$' '(' matcher * ')' sep_token? [ '*' | '+' ]\n-        | non_special_token\n+        | non_special_token ;\n transcriber : '(' transcriber * ')' | '[' transcriber * ']'\n             | '{' transcriber * '}' | '$' ident\n             | '$' '(' transcriber * ')' sep_token? [ '*' | '+' ]\n-            | non_special_token\n+            | non_special_token ;\n ~~~~\n \n User-defined syntax extensions are called \"macros\",\n@@ -803,7 +803,7 @@ use_decl : \"pub\" ? \"use\" ident [ '=' path\n \n path_glob : ident [ \"::\" path_glob ] ?\n           | '*'\n-          | '{' ident [ ',' ident ] * '}'\n+          | '{' ident [ ',' ident ] * '}' ;\n ~~~~\n \n A _use declaration_ creates one or more local name bindings synonymous\n@@ -1458,7 +1458,7 @@ impl Seq<bool> for u32 {\n ### External blocks\n \n ~~~~ {.notrust .ebnf .gram}\n-extern_block_item : \"extern\" '{' extern_block '} ;\n+extern_block_item : \"extern\" '{' extern_block '}' ;\n extern_block : [ foreign_fn ] * ;\n ~~~~\n \n@@ -1684,7 +1684,7 @@ import public items from their destination, not private items.\n \n ~~~~ {.notrust .ebnf .gram}\n attribute : '#' '[' attr_list ']' ;\n-attr_list : attr [ ',' attr_list ]*\n+attr_list : attr [ ',' attr_list ]* ;\n attr : ident [ '=' literal\n              | '(' attr_list ')' ] ? ;\n ~~~~\n@@ -2332,7 +2332,7 @@ struct_expr : expr_path '{' ident ':' expr\n                       [ \"..\" expr ] '}' |\n               expr_path '(' expr\n                       [ ',' expr ] * ')' |\n-              expr_path\n+              expr_path ;\n ~~~~\n \n There are several forms of structure expressions.\n@@ -2383,7 +2383,7 @@ Point3d {y: 0, z: 10, .. base};\n ~~~~ {.notrust .ebnf .gram}\n block_expr : '{' [ view_item ] *\n                  [ stmt ';' | item ] *\n-                 [ expr ] '}'\n+                 [ expr ] '}' ;\n ~~~~\n \n A _block expression_ is similar to a module in terms of the declarations that\n@@ -2410,7 +2410,7 @@ or dynamically dispatching if the left-hand-side expression is an indirect [obje\n ### Field expressions\n \n ~~~~ {.notrust .ebnf .gram}\n-field_expr : expr '.' ident\n+field_expr : expr '.' ident ;\n ~~~~\n \n A _field expression_ consists of an expression followed by a single dot and an identifier,\n@@ -2432,9 +2432,9 @@ it is automatically dereferenced to make the field access possible.\n ### Vector expressions\n \n ~~~~ {.notrust .ebnf .gram}\n-vec_expr : '[' \"mut\" ? vec_elems? ']'\n+vec_expr : '[' \"mut\" ? vec_elems? ']' ;\n \n-vec_elems : [expr [',' expr]*] | [expr ',' \"..\" expr]\n+vec_elems : [expr [',' expr]*] | [expr ',' \"..\" expr] ;\n ~~~~\n \n A [_vector_](#vector-types) _expression_ is written by enclosing zero or\n@@ -2454,7 +2454,7 @@ as a [literal](#literals) or a [static item](#static-items).\n ### Index expressions\n \n ~~~~ {.notrust .ebnf .gram}\n-idx_expr : expr '[' expr ']'\n+idx_expr : expr '[' expr ']' ;\n ~~~~\n \n [Vector](#vector-types)-typed expressions can be indexed by writing a\n@@ -2876,7 +2876,7 @@ then any `else` block is executed.\n ~~~~ {.notrust .ebnf .gram}\n match_expr : \"match\" expr '{' match_arm [ '|' match_arm ] * '}' ;\n \n-match_arm : match_pat '=>' [ expr \",\" | '{' block '}' ] ;\n+match_arm : match_pat \"=>\" [ expr \",\" | '{' block '}' ] ;\n \n match_pat : pat [ \"..\" pat ] ? [ \"if\" expr ] ;\n ~~~~"}]}