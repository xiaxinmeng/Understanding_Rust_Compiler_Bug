{"sha": "ae8cb22fb9f2fa753963504b9c6a4d9e333840ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlOGNiMjJmYjlmMmZhNzUzOTYzNTA0YjljNmE0ZDllMzMzODQwYmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-08T18:23:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-16T18:57:46Z"}, "message": "factor out collection of impl-items into a distinct fn", "tree": {"sha": "c38c3a0eb82f5416c71d8e49380ffb407bf6e89a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c38c3a0eb82f5416c71d8e49380ffb407bf6e89a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae8cb22fb9f2fa753963504b9c6a4d9e333840ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae8cb22fb9f2fa753963504b9c6a4d9e333840ba", "html_url": "https://github.com/rust-lang/rust/commit/ae8cb22fb9f2fa753963504b9c6a4d9e333840ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae8cb22fb9f2fa753963504b9c6a4d9e333840ba/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7918299bf0aa96951f304ce84aa1b3c4b3a75cb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7918299bf0aa96951f304ce84aa1b3c4b3a75cb9", "html_url": "https://github.com/rust-lang/rust/commit/7918299bf0aa96951f304ce84aa1b3c4b3a75cb9"}], "stats": {"total": 81, "additions": 45, "deletions": 36}, "files": [{"sha": "a7553ce4995e65505eb0fafbb8145eb1d3721d04", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8cb22fb9f2fa753963504b9c6a4d9e333840ba/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8cb22fb9f2fa753963504b9c6a4d9e333840ba/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=ae8cb22fb9f2fa753963504b9c6a4d9e333840ba", "patch": "@@ -605,7 +605,7 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             // Create a fn pointer with the substituted signature.\n             tcx.mk_fn_ptr(fty)\n         }\n-        _ => bug!(\"expected fn item type, found {}\", fn_ty)\n+        _ => bug!(\"expected fn item type for {:?}, found {}\", def_id, fn_ty)\n     };\n     let llptrty = type_of::type_of(ccx, fn_ptr_ty);\n "}, {"sha": "eb4775a29bf34dbcdfa2f0783870460843cf1c3c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 44, "deletions": 35, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/ae8cb22fb9f2fa753963504b9c6a4d9e333840ba/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8cb22fb9f2fa753963504b9c6a4d9e333840ba/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ae8cb22fb9f2fa753963504b9c6a4d9e333840ba", "patch": "@@ -150,8 +150,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CollectItemTypesVisitor<'a, 'tcx> {\n         intravisit::walk_ty(self, ty);\n     }\n \n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem) {\n         // handled in `visit_item` above; we may want to break this out later\n+        intravisit::walk_impl_item(self, impl_item);\n     }\n }\n \n@@ -782,43 +783,10 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n                         entry.insert(impl_item.span);\n                     }\n                 }\n-\n-                if let hir::ImplItemKind::Const(ref ty, _) = impl_item.node {\n-                    let const_def_id = ccx.tcx.map.local_def_id(impl_item.id);\n-                    generics_of_def_id(ccx, const_def_id);\n-                    let ty = ccx.icx(&ty_predicates)\n-                                .to_ty(&ExplicitRscope, &ty);\n-                    tcx.item_types.borrow_mut().insert(const_def_id, ty);\n-                    convert_associated_const(ccx, ImplContainer(def_id),\n-                                             impl_item.id, ty);\n-                }\n-            }\n-\n-            // Convert all the associated types.\n-            for &impl_item_id in impl_item_ids {\n-                let impl_item = tcx.map.impl_item(impl_item_id);\n-                if let hir::ImplItemKind::Type(ref ty) = impl_item.node {\n-                    let type_def_id = ccx.tcx.map.local_def_id(impl_item.id);\n-                    generics_of_def_id(ccx, type_def_id);\n-\n-                    if opt_trait_ref.is_none() {\n-                        span_err!(tcx.sess, impl_item.span, E0202,\n-                                  \"associated types are not allowed in inherent impls\");\n-                    }\n-\n-                    let typ = ccx.icx(&ty_predicates).to_ty(&ExplicitRscope, ty);\n-\n-                    convert_associated_type(ccx, ImplContainer(def_id), impl_item.id, Some(typ));\n-                }\n             }\n \n             for &impl_item_id in impl_item_ids {\n-                let impl_item = tcx.map.impl_item(impl_item_id);\n-                if let hir::ImplItemKind::Method(ref sig, _) = impl_item.node {\n-                    convert_method(ccx, ImplContainer(def_id),\n-                                   impl_item.id, sig, selfty,\n-                                   &ty_predicates);\n-                }\n+                convert_impl_item(ccx, impl_item_id);\n             }\n \n             enforce_impl_lifetimes_are_constrained(ccx, generics, def_id, impl_item_ids);\n@@ -907,6 +875,47 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n     }\n }\n \n+fn convert_impl_item(ccx: &CrateCtxt, impl_item_id: hir::ImplItemId) {\n+    let tcx = ccx.tcx;\n+    let impl_item = tcx.map.impl_item(impl_item_id);\n+    let impl_def_id = tcx.map.get_parent_did(impl_item_id.id);\n+    let impl_predicates = tcx.item_predicates(impl_def_id);\n+    let impl_trait_ref = tcx.impl_trait_ref(impl_def_id);\n+    let impl_self_ty = tcx.item_type(impl_def_id);\n+\n+    match impl_item.node {\n+        hir::ImplItemKind::Const(ref ty, _) => {\n+            let const_def_id = ccx.tcx.map.local_def_id(impl_item.id);\n+            generics_of_def_id(ccx, const_def_id);\n+            let ty = ccx.icx(&impl_predicates)\n+                        .to_ty(&ExplicitRscope, &ty);\n+            tcx.item_types.borrow_mut().insert(const_def_id, ty);\n+            convert_associated_const(ccx, ImplContainer(impl_def_id),\n+                                     impl_item.id, ty);\n+        }\n+\n+        hir::ImplItemKind::Type(ref ty) => {\n+            let type_def_id = ccx.tcx.map.local_def_id(impl_item.id);\n+            generics_of_def_id(ccx, type_def_id);\n+\n+            if impl_trait_ref.is_none() {\n+                span_err!(tcx.sess, impl_item.span, E0202,\n+                          \"associated types are not allowed in inherent impls\");\n+            }\n+\n+            let typ = ccx.icx(&impl_predicates).to_ty(&ExplicitRscope, ty);\n+\n+            convert_associated_type(ccx, ImplContainer(impl_def_id), impl_item.id, Some(typ));\n+        }\n+\n+        hir::ImplItemKind::Method(ref sig, _) => {\n+            convert_method(ccx, ImplContainer(impl_def_id),\n+                           impl_item.id, sig, impl_self_ty,\n+                           &impl_predicates);\n+        }\n+    }\n+}\n+\n fn convert_variant_ctor<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                   ctor_id: ast::NodeId,\n                                   variant: ty::VariantDef<'tcx>,"}]}