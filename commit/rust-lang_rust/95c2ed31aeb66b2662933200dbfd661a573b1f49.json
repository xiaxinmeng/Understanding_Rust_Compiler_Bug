{"sha": "95c2ed31aeb66b2662933200dbfd661a573b1f49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YzJlZDMxYWViNjZiMjY2MjkzMzIwMGRiZmQ2NjFhNTczYjFmNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-19T16:02:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-19T16:02:31Z"}, "message": "auto merge of #19867 : japaric/rust/deriving-copy, r=acrichto\n\nr? @alexcrichton", "tree": {"sha": "3e397ee769c09211083f8aa12377e41104575f7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e397ee769c09211083f8aa12377e41104575f7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95c2ed31aeb66b2662933200dbfd661a573b1f49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95c2ed31aeb66b2662933200dbfd661a573b1f49", "html_url": "https://github.com/rust-lang/rust/commit/95c2ed31aeb66b2662933200dbfd661a573b1f49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95c2ed31aeb66b2662933200dbfd661a573b1f49/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd90b936d73c0ea2c261cd8e7b9c43764cb2da05", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd90b936d73c0ea2c261cd8e7b9c43764cb2da05", "html_url": "https://github.com/rust-lang/rust/commit/bd90b936d73c0ea2c261cd8e7b9c43764cb2da05"}, {"sha": "f975b10310b2f38a5ac1e50f30778b85ed963849", "url": "https://api.github.com/repos/rust-lang/rust/commits/f975b10310b2f38a5ac1e50f30778b85ed963849", "html_url": "https://github.com/rust-lang/rust/commit/f975b10310b2f38a5ac1e50f30778b85ed963849"}], "stats": {"total": 1751, "additions": 484, "deletions": 1267}, "files": [{"sha": "be99c4c0bc724dba40268f44ef60f143988d0e2a", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -29,14 +29,12 @@\n //! use std::collections::BinaryHeap;\n //! use std::uint;\n //!\n-//! #[deriving(Eq, PartialEq)]\n+//! #[deriving(Copy, Eq, PartialEq)]\n //! struct State {\n //!     cost: uint,\n //!     position: uint\n //! }\n //!\n-//! impl Copy for State {}\n-//!\n //! // The priority queue depends on `Ord`.\n //! // Explicitly implement the trait so the queue becomes a min-heap\n //! // instead of a max-heap."}, {"sha": "caa2051c3f9ca9b13d2069106e30e47ff136cc50", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -301,14 +301,12 @@ mod test {\n \n     use super::{EnumSet, CLike};\n \n-    #[deriving(PartialEq, Show)]\n+    #[deriving(Copy, PartialEq, Show)]\n     #[repr(uint)]\n     enum Foo {\n         A, B, C\n     }\n \n-    impl Copy for Foo {}\n-\n     impl CLike for Foo {\n         fn to_uint(&self) -> uint {\n             *self as uint\n@@ -507,6 +505,7 @@ mod test {\n     #[should_fail]\n     fn test_overflow() {\n         #[allow(dead_code)]\n+        #[deriving(Copy)]\n         #[repr(uint)]\n         enum Bar {\n             V00, V01, V02, V03, V04, V05, V06, V07, V08, V09,\n@@ -518,8 +517,6 @@ mod test {\n             V60, V61, V62, V63, V64, V65, V66, V67, V68, V69,\n         }\n \n-        impl Copy for Bar {}\n-\n         impl CLike for Bar {\n             fn to_uint(&self) -> uint {\n                 *self as uint"}, {"sha": "3bf10192e596388758f9b5315174879b1c3fdaf9", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -91,7 +91,7 @@ use alloc::boxed::Box;\n use core::borrow::{BorrowFrom, BorrowFromMut, ToOwned};\n use core::cmp;\n use core::iter::{range_step, MultiplicativeIterator};\n-use core::kinds::{Copy, Sized};\n+use core::kinds::Sized;\n use core::mem::size_of;\n use core::mem;\n use core::ops::FnMut;\n@@ -177,18 +177,16 @@ impl ElementSwaps {\n     }\n }\n \n+#[deriving(Copy)]\n enum Direction { Pos, Neg }\n \n-impl Copy for Direction {}\n-\n /// An `Index` and `Direction` together.\n+#[deriving(Copy)]\n struct SizeDirection {\n     size: uint,\n     dir: Direction,\n }\n \n-impl Copy for SizeDirection {}\n-\n impl Iterator<(uint, uint)> for ElementSwaps {\n     #[inline]\n     fn next(&mut self) -> Option<(uint, uint)> {"}, {"sha": "f6bc4dbde387ae35a13bcf88ee1439ef8f2b9077", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -16,7 +16,6 @@ pub use self::Ordering::*;\n \n use intrinsics;\n use cell::UnsafeCell;\n-use kinds::Copy;\n \n /// A boolean type which can be safely shared between threads.\n #[stable]\n@@ -53,6 +52,7 @@ pub struct AtomicPtr<T> {\n /// Rust's memory orderings are [the same as\n /// C++'s](http://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync).\n #[stable]\n+#[deriving(Copy)]\n pub enum Ordering {\n     /// No ordering constraints, only atomic operations.\n     #[stable]\n@@ -77,8 +77,6 @@ pub enum Ordering {\n     SeqCst,\n }\n \n-impl Copy for Ordering {}\n-\n /// An `AtomicBool` initialized to `false`.\n #[unstable = \"may be renamed, pending conventions for static initalizers\"]\n pub const INIT_ATOMIC_BOOL: AtomicBool ="}, {"sha": "6e793be67e2505823258257d69854316c3aa8106", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -43,7 +43,7 @@\n \n pub use self::Ordering::*;\n \n-use kinds::{Copy, Sized};\n+use kinds::Sized;\n use option::Option::{mod, Some, None};\n \n /// Trait for values that can be compared for equality and inequality.\n@@ -94,7 +94,7 @@ pub trait Eq<Sized? Rhs = Self> for Sized?: PartialEq<Rhs> {\n }\n \n /// An ordering is, e.g, a result of a comparison between two values.\n-#[deriving(Clone, PartialEq, Show)]\n+#[deriving(Clone, Copy, PartialEq, Show)]\n #[stable]\n pub enum Ordering {\n    /// An ordering where a compared value is less [than another].\n@@ -105,8 +105,6 @@ pub enum Ordering {\n    Greater = 1i,\n }\n \n-impl Copy for Ordering {}\n-\n impl Ordering {\n     /// Reverse the `Ordering`, so that `Less` becomes `Greater` and\n     /// vice versa."}, {"sha": "79fb11f385433e6d873ba04d5c4b4e4fb92ff831", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -44,10 +44,9 @@ pub type Result = result::Result<(), Error>;\n /// occurred. Any extra information must be arranged to be transmitted through\n /// some other means.\n #[experimental = \"core and I/O reconciliation may alter this definition\"]\n+#[deriving(Copy)]\n pub struct Error;\n \n-impl Copy for Error {}\n-\n /// A collection of methods that are required to format a message into a stream.\n ///\n /// This trait is the type which this modules requires when formatting\n@@ -104,6 +103,7 @@ enum Void {}\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n #[experimental = \"implementation detail of the `format_args!` macro\"]\n+#[deriving(Copy)]\n pub struct Argument<'a> {\n     value: &'a Void,\n     formatter: fn(&Void, &mut Formatter) -> Result,\n@@ -137,8 +137,6 @@ impl<'a> Argument<'a> {\n     }\n }\n \n-impl<'a> Copy for Argument<'a> {}\n-\n impl<'a> Arguments<'a> {\n     /// When using the format_args!() macro, this function is used to generate the\n     /// Arguments structure."}, {"sha": "cd8f226172a66e49ecbd1b0b3d398dbf29f992cb", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -16,7 +16,6 @@\n \n use fmt;\n use iter::DoubleEndedIteratorExt;\n-use kinds::Copy;\n use num::{Int, cast};\n use slice::SliceExt;\n \n@@ -109,14 +108,12 @@ radix! { UpperHex, 16, \"0x\", x @  0 ...  9 => b'0' + x,\n                              x @ 10 ... 15 => b'A' + (x - 10) }\n \n /// A radix with in the range of `2..36`.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, Copy, PartialEq)]\n #[unstable = \"may be renamed or move to a different module\"]\n pub struct Radix {\n     base: u8,\n }\n \n-impl Copy for Radix {}\n-\n impl Radix {\n     fn new(base: u8) -> Radix {\n         assert!(2 <= base && base <= 36, \"the base must be in the range of 2..36: {}\", base);\n@@ -137,10 +134,9 @@ impl GenericRadix for Radix {\n \n /// A helper type for formatting radixes.\n #[unstable = \"may be renamed or move to a different module\"]\n+#[deriving(Copy)]\n pub struct RadixFmt<T, R>(T, R);\n \n-impl<T,R> Copy for RadixFmt<T,R> where T: Copy, R: Copy {}\n-\n /// Constructs a radix formatter in the range of `2..36`.\n ///\n /// # Example"}, {"sha": "35dd0390f30872bb64709c3a0ec882e127434e9d", "filename": "src/libcore/fmt/rt.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -20,17 +20,16 @@ pub use self::Alignment::*;\n pub use self::Count::*;\n pub use self::Position::*;\n pub use self::Flag::*;\n-use kinds::Copy;\n \n #[doc(hidden)]\n+#[deriving(Copy)]\n pub struct Argument<'a> {\n     pub position: Position,\n     pub format: FormatSpec,\n }\n \n-impl<'a> Copy for Argument<'a> {}\n-\n #[doc(hidden)]\n+#[deriving(Copy)]\n pub struct FormatSpec {\n     pub fill: char,\n     pub align: Alignment,\n@@ -39,10 +38,8 @@ pub struct FormatSpec {\n     pub width: Count,\n }\n \n-impl Copy for FormatSpec {}\n-\n /// Possible alignments that can be requested as part of a formatting directive.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum Alignment {\n     /// Indication that contents should be left-aligned.\n     AlignLeft,\n@@ -54,27 +51,24 @@ pub enum Alignment {\n     AlignUnknown,\n }\n \n-impl Copy for Alignment {}\n-\n #[doc(hidden)]\n+#[deriving(Copy)]\n pub enum Count {\n     CountIs(uint), CountIsParam(uint), CountIsNextParam, CountImplied,\n }\n \n-impl Copy for Count {}\n-\n #[doc(hidden)]\n+#[deriving(Copy)]\n pub enum Position {\n     ArgumentNext, ArgumentIs(uint)\n }\n \n-impl Copy for Position {}\n-\n /// Flags which can be passed to formatting via a directive.\n ///\n /// These flags are discovered through the `flags` field of the `Formatter`\n /// structure. The flag in that structure is a union of these flags into a\n /// `uint` where each flag's discriminant is the corresponding bit.\n+#[deriving(Copy)]\n pub enum Flag {\n     /// A flag which enables number formatting to always print the sign of a\n     /// number.\n@@ -89,5 +83,3 @@ pub enum Flag {\n     /// being aware of the sign to be printed.\n     FlagSignAwareZeroPad,\n }\n-\n-impl Copy for Flag {}"}, {"sha": "e10f5a9fed1888ba02b00d26ec92335ea1ff49e2", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -30,6 +30,7 @@ use default::Default;\n use super::{Hash, Hasher, Writer};\n \n /// `SipState` computes a SipHash 2-4 hash over a stream of bytes.\n+#[deriving(Copy)]\n pub struct SipState {\n     k0: u64,\n     k1: u64,\n@@ -42,8 +43,6 @@ pub struct SipState {\n     ntail: uint,  // how many bytes in tail are valid\n }\n \n-impl Copy for SipState {}\n-\n // sadly, these macro definitions can't appear later,\n // because they're needed in the following defs;\n // this design could be improved."}, {"sha": "d8f103fa0f3dcd03b4bcdf4593a37aa9ab15be16", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -42,11 +42,10 @@\n #![experimental]\n #![allow(missing_docs)]\n \n-use kinds::Copy;\n-\n pub type GlueFn = extern \"Rust\" fn(*const i8);\n \n #[lang=\"ty_desc\"]\n+#[deriving(Copy)]\n pub struct TyDesc {\n     // sizeof(T)\n     pub size: uint,\n@@ -61,8 +60,6 @@ pub struct TyDesc {\n     pub name: &'static str,\n }\n \n-impl Copy for TyDesc {}\n-\n extern \"rust-intrinsic\" {\n \n     // NB: These intrinsics take unsafe pointers because they mutate aliased\n@@ -540,13 +537,11 @@ extern \"rust-intrinsic\" {\n /// `TypeId` represents a globally unique identifier for a type\n #[lang=\"type_id\"] // This needs to be kept in lockstep with the code in trans/intrinsic.rs and\n                   // middle/lang_items.rs\n-#[deriving(Clone, PartialEq, Eq, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Show)]\n pub struct TypeId {\n     t: u64,\n }\n \n-impl Copy for TypeId {}\n-\n impl TypeId {\n     /// Returns the `TypeId` of the type this generic function has been instantiated with\n     pub fn of<T: 'static>() -> TypeId {"}, {"sha": "1f83aad9c7cdca21768788d3bbf9a6e02c7938d3", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -59,7 +59,6 @@ pub use self::MinMaxResult::*;\n use clone::Clone;\n use cmp;\n use cmp::Ord;\n-use kinds::Copy;\n use mem;\n use num::{ToPrimitive, Int};\n use ops::{Add, Deref, FnMut};\n@@ -1168,16 +1167,14 @@ impl<A, I> CloneIteratorExt for I where I: Iterator<A> + Clone {\n }\n \n /// An iterator that repeats endlessly\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable]\n pub struct Cycle<T> {\n     orig: T,\n     iter: T,\n }\n \n-impl<T:Copy> Copy for Cycle<T> {}\n-\n impl<A, T: Clone + Iterator<A>> Iterator<A> for Cycle<T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -1635,13 +1632,12 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<(uint, A)> for Enumerat\n /// An iterator with a `peek()` that returns an optional reference to the next element.\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable]\n+#[deriving(Copy)]\n pub struct Peekable<A, T> {\n     iter: T,\n     peeked: Option<A>,\n }\n \n-impl<T:Copy,A:Copy> Copy for Peekable<A,T> {}\n-\n impl<A, T: Iterator<A>> Iterator<A> for Peekable<A, T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -2267,7 +2263,7 @@ impl<A, St, F> Iterator<A> for Unfold<A, St, F> where F: FnMut(&mut St) -> Optio\n \n /// An infinite iterator starting at `start` and advancing by `step` with each\n /// iteration\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n #[unstable = \"may be renamed\"]\n pub struct Counter<A> {\n     /// The current state the counter is at (next value to be yielded)\n@@ -2276,8 +2272,6 @@ pub struct Counter<A> {\n     step: A,\n }\n \n-impl<A:Copy> Copy for Counter<A> {}\n-\n /// Creates a new counter with the specified start/step\n #[inline]\n #[unstable = \"may be renamed\"]\n@@ -2301,16 +2295,14 @@ impl<A: Add<A, A> + Clone> Iterator<A> for Counter<A> {\n }\n \n /// An iterator over the range [start, stop)\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n #[unstable = \"may be refactored due to numerics reform or ops reform\"]\n pub struct Range<A> {\n     state: A,\n     stop: A,\n     one: A,\n }\n \n-impl<A:Copy> Copy for Range<A> {}\n-\n /// Returns an iterator over the given range [start, stop) (that is, starting\n /// at start (inclusive), and ending at stop (exclusive)).\n ///"}, {"sha": "93fd3f1b9f16ff186b8a4e4d4f7c9c131ec58f05", "filename": "src/libcore/kinds.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fkinds.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -225,11 +225,9 @@ pub mod marker {\n     /// For more information about variance, refer to this Wikipedia\n     /// article <http://en.wikipedia.org/wiki/Variance_%28computer_science%29>.\n     #[lang=\"covariant_lifetime\"]\n-    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n+    #[deriving(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct CovariantLifetime<'a>;\n \n-    impl<'a> Copy for CovariantLifetime<'a> {}\n-\n     /// As `ContravariantType`, but for lifetime parameters. Using\n     /// `ContravariantLifetime<'a>` indicates that it is ok to\n     /// substitute a *shorter* lifetime for `'a` than the one you\n@@ -243,11 +241,9 @@ pub mod marker {\n     /// For more information about variance, refer to this Wikipedia\n     /// article <http://en.wikipedia.org/wiki/Variance_%28computer_science%29>.\n     #[lang=\"contravariant_lifetime\"]\n-    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n+    #[deriving(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct ContravariantLifetime<'a>;\n \n-    impl<'a> Copy for ContravariantLifetime<'a> {}\n-\n     /// As `InvariantType`, but for lifetime parameters. Using\n     /// `InvariantLifetime<'a>` indicates that it is not ok to\n     /// substitute any other lifetime for `'a` besides its original"}, {"sha": "b4f867b4bb4175c4ba8bd411713073b5560f34b9", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -1225,7 +1225,7 @@ impl_num_cast! { f32,   to_f32 }\n impl_num_cast! { f64,   to_f64 }\n \n /// Used for representing the classification of floating point numbers\n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n #[unstable = \"may be renamed\"]\n pub enum FPCategory {\n     /// \"Not a Number\", often obtained by dividing by zero\n@@ -1240,8 +1240,6 @@ pub enum FPCategory {\n     FPNormal,\n }\n \n-impl Copy for FPCategory {}\n-\n /// A built-in floating point number.\n // FIXME(#5527): In a future version of Rust, many of these functions will\n //               become constants."}, {"sha": "6e4beb2356e8f49a0049c8b309f5ca27dec9d3a0", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 16, "deletions": 32, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -88,10 +88,9 @@ pub trait Drop {\n /// calling `add`, and therefore, `main` prints `Adding!`.\n ///\n /// ```rust\n+/// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl Add<Foo, Foo> for Foo {\n ///     fn add(&self, _rhs: &Foo) -> Foo {\n ///       println!(\"Adding!\");\n@@ -170,10 +169,9 @@ add_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// calling `sub`, and therefore, `main` prints `Subtracting!`.\n ///\n /// ```rust\n+/// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl Sub<Foo, Foo> for Foo {\n ///     fn sub(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Subtracting!\");\n@@ -252,10 +250,9 @@ sub_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// calling `mul`, and therefore, `main` prints `Multiplying!`.\n ///\n /// ```rust\n+/// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl Mul<Foo, Foo> for Foo {\n ///     fn mul(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Multiplying!\");\n@@ -334,10 +331,9 @@ mul_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// calling `div`, and therefore, `main` prints `Dividing!`.\n ///\n /// ```\n+/// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl Div<Foo, Foo> for Foo {\n ///     fn div(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Dividing!\");\n@@ -416,10 +412,9 @@ div_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// calling `rem`, and therefore, `main` prints `Remainder-ing!`.\n ///\n /// ```\n+/// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl Rem<Foo, Foo> for Foo {\n ///     fn rem(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Remainder-ing!\");\n@@ -527,10 +522,9 @@ rem_float_impl! { f64, fmod }\n /// `neg`, and therefore, `main` prints `Negating!`.\n ///\n /// ```\n+/// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl Neg<Foo> for Foo {\n ///     fn neg(&self) -> Foo {\n ///         println!(\"Negating!\");\n@@ -639,10 +633,9 @@ neg_uint_impl! { u64, i64 }\n /// `not`, and therefore, `main` prints `Not-ing!`.\n ///\n /// ```\n+/// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl Not<Foo> for Foo {\n ///     fn not(&self) -> Foo {\n ///         println!(\"Not-ing!\");\n@@ -724,10 +717,9 @@ not_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `bitand`, and therefore, `main` prints `Bitwise And-ing!`.\n ///\n /// ```\n+/// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl BitAnd<Foo, Foo> for Foo {\n ///     fn bitand(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Bitwise And-ing!\");\n@@ -806,10 +798,9 @@ bitand_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `bitor`, and therefore, `main` prints `Bitwise Or-ing!`.\n ///\n /// ```\n+/// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl BitOr<Foo, Foo> for Foo {\n ///     fn bitor(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Bitwise Or-ing!\");\n@@ -888,10 +879,9 @@ bitor_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `bitxor`, and therefore, `main` prints `Bitwise Xor-ing!`.\n ///\n /// ```\n+/// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl BitXor<Foo, Foo> for Foo {\n ///     fn bitxor(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Bitwise Xor-ing!\");\n@@ -970,10 +960,9 @@ bitxor_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `shl`, and therefore, `main` prints `Shifting left!`.\n ///\n /// ```\n+/// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl Shl<Foo, Foo> for Foo {\n ///     fn shl(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Shifting left!\");\n@@ -1056,10 +1045,9 @@ shl_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `shr`, and therefore, `main` prints `Shifting right!`.\n ///\n /// ```\n+/// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl Shr<Foo, Foo> for Foo {\n ///     fn shr(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Shifting right!\");\n@@ -1139,10 +1127,9 @@ shr_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `index`, and therefore, `main` prints `Indexing!`.\n ///\n /// ```\n+/// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl Index<Foo, Foo> for Foo {\n ///     fn index<'a>(&'a self, _index: &Foo) -> &'a Foo {\n ///         println!(\"Indexing!\");\n@@ -1169,10 +1156,9 @@ pub trait Index<Sized? Index, Sized? Result> for Sized? {\n /// calling `index_mut`, and therefore, `main` prints `Indexing!`.\n ///\n /// ```\n+/// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl IndexMut<Foo, Foo> for Foo {\n ///     fn index_mut<'a>(&'a mut self, _index: &Foo) -> &'a mut Foo {\n ///         println!(\"Indexing!\");\n@@ -1199,10 +1185,9 @@ pub trait IndexMut<Sized? Index, Sized? Result> for Sized? {\n /// calling `slice_to`, and therefore, `main` prints `Slicing!`.\n ///\n /// ```ignore\n+/// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl Slice<Foo, Foo> for Foo {\n ///     fn as_slice_<'a>(&'a self) -> &'a Foo {\n ///         println!(\"Slicing!\");\n@@ -1247,10 +1232,9 @@ pub trait Slice<Sized? Idx, Sized? Result> for Sized? {\n /// calling `slice_from_mut`, and therefore, `main` prints `Slicing!`.\n ///\n /// ```ignore\n+/// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Copy for Foo {}\n-///\n /// impl SliceMut<Foo, Foo> for Foo {\n ///     fn as_mut_slice_<'a>(&'a mut self) -> &'a mut Foo {\n ///         println!(\"Slicing!\");"}, {"sha": "314b47fc6476becb56a2a59cf473988def0cad10", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -149,7 +149,6 @@ use cmp::{Eq, Ord};\n use default::Default;\n use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator};\n use iter::{ExactSizeIterator};\n-use kinds::Copy;\n use mem;\n use result::Result;\n use result::Result::{Ok, Err};\n@@ -164,7 +163,7 @@ use ops::{Deref, FnOnce};\n // which basically means it must be `Option`.\n \n /// The `Option` type.\n-#[deriving(Clone, PartialEq, PartialOrd, Eq, Ord, Show, Hash)]\n+#[deriving(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Show, Hash)]\n #[stable]\n pub enum Option<T> {\n     /// No value\n@@ -920,7 +919,3 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n         }\n     }\n }\n-\n-#[stable]\n-impl<T:Copy> Copy for Option<T> {}\n-"}, {"sha": "d70c96d8c16623cee38642b472bc447ae3a2aa1a", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -33,25 +33,23 @@ impl<T> Copy for Slice<T> {}\n \n /// The representation of a Rust closure\n #[repr(C)]\n+#[deriving(Copy)]\n pub struct Closure {\n     pub code: *mut (),\n     pub env: *mut (),\n }\n \n-impl Copy for Closure {}\n-\n /// The representation of a Rust trait object.\n ///\n /// This struct does not have a `Repr` implementation\n /// because there is no way to refer to all trait objects generically.\n #[repr(C)]\n+#[deriving(Copy)]\n pub struct TraitObject {\n     pub data: *mut (),\n     pub vtable: *mut (),\n }\n \n-impl Copy for TraitObject {}\n-\n /// This trait is meant to map equivalences between raw structs and their\n /// corresponding rust values.\n pub trait Repr<T> for Sized? {"}, {"sha": "00a2a3d5854d879fa60ed9a048652ac84be36c26", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -232,7 +232,6 @@\n \n use self::Result::*;\n \n-use kinds::Copy;\n use std::fmt::Show;\n use slice;\n use slice::AsSlice;\n@@ -244,7 +243,7 @@ use ops::{FnMut, FnOnce};\n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n ///\n /// See the [`std::result`](index.html) module documentation for details.\n-#[deriving(Clone, PartialEq, PartialOrd, Eq, Ord, Show, Hash)]\n+#[deriving(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Show, Hash)]\n #[must_use]\n #[stable]\n pub enum Result<T, E> {\n@@ -919,6 +918,3 @@ pub fn fold<T,\n     }\n     Ok(init)\n }\n-\n-impl<T:Copy,U:Copy> Copy for Result<T,U> {}\n-"}, {"sha": "0b0e6ff95c6599925c4823328d05913039d9d52b", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 10, "deletions": 33, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -37,93 +37,70 @@\n #![allow(non_camel_case_types)]\n #![allow(missing_docs)]\n \n-use kinds::Copy;\n-\n #[experimental]\n #[simd]\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n #[repr(C)]\n pub struct i8x16(pub i8, pub i8, pub i8, pub i8,\n                  pub i8, pub i8, pub i8, pub i8,\n                  pub i8, pub i8, pub i8, pub i8,\n                  pub i8, pub i8, pub i8, pub i8);\n \n-impl Copy for i8x16 {}\n-\n #[experimental]\n #[simd]\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n #[repr(C)]\n pub struct i16x8(pub i16, pub i16, pub i16, pub i16,\n                  pub i16, pub i16, pub i16, pub i16);\n \n-impl Copy for i16x8 {}\n-\n #[experimental]\n #[simd]\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n #[repr(C)]\n pub struct i32x4(pub i32, pub i32, pub i32, pub i32);\n \n-impl Copy for i32x4 {}\n-\n #[experimental]\n #[simd]\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n #[repr(C)]\n pub struct i64x2(pub i64, pub i64);\n \n-impl Copy for i64x2 {}\n-\n #[experimental]\n #[simd]\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n #[repr(C)]\n pub struct u8x16(pub u8, pub u8, pub u8, pub u8,\n                  pub u8, pub u8, pub u8, pub u8,\n                  pub u8, pub u8, pub u8, pub u8,\n                  pub u8, pub u8, pub u8, pub u8);\n \n-impl Copy for u8x16 {}\n-\n #[experimental]\n #[simd]\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n #[repr(C)]\n pub struct u16x8(pub u16, pub u16, pub u16, pub u16,\n                  pub u16, pub u16, pub u16, pub u16);\n \n-impl Copy for u16x8 {}\n-\n #[experimental]\n #[simd]\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n #[repr(C)]\n pub struct u32x4(pub u32, pub u32, pub u32, pub u32);\n \n-impl Copy for u32x4 {}\n-\n #[experimental]\n #[simd]\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n #[repr(C)]\n pub struct u64x2(pub u64, pub u64);\n \n-impl Copy for u64x2 {}\n-\n #[experimental]\n #[simd]\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n #[repr(C)]\n pub struct f32x4(pub f32, pub f32, pub f32, pub f32);\n \n-impl Copy for f32x4 {}\n-\n #[experimental]\n #[simd]\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n #[repr(C)]\n pub struct f64x2(pub f64, pub f64);\n-\n-impl Copy for f64x2 {}\n-"}, {"sha": "f5d117bca9fc8f45fd250b5cf4113f090e45e6c1", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -1229,7 +1229,7 @@ impl<'a, T> DoubleEndedIterator<&'a mut [T]> for MutChunks<'a, T> {\n /// index of the matching element. `NotFound` means the search\n /// succeeded, and the contained value is an index where a matching\n /// value could be inserted while maintaining sort order.\n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n #[experimental = \"needs review\"]\n pub enum BinarySearchResult {\n     /// The index of the found value.\n@@ -1238,8 +1238,6 @@ pub enum BinarySearchResult {\n     NotFound(uint)\n }\n \n-impl Copy for BinarySearchResult {}\n-\n #[experimental = \"needs review\"]\n impl BinarySearchResult {\n     /// Converts a `Found` to `Some`, `NotFound` to `None`."}, {"sha": "a89a7970ae9c43eaeba429fc3cb500806771cdf6", "filename": "src/libcore/str.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -27,7 +27,7 @@ use default::Default;\n use iter::{Map, Iterator, IteratorExt, DoubleEndedIterator};\n use iter::{DoubleEndedIteratorExt, ExactSizeIterator};\n use iter::range;\n-use kinds::{Copy, Sized};\n+use kinds::Sized;\n use mem;\n use num::Int;\n use option::Option;\n@@ -165,13 +165,11 @@ Section: Iterators\n /// Iterator for the char (representing *Unicode Scalar Values*) of a string\n ///\n /// Created with the method `.chars()`.\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct Chars<'a> {\n     iter: slice::Items<'a, u8>\n }\n \n-impl<'a> Copy for Chars<'a> {}\n-\n // Return the initial codepoint accumulator for the first byte.\n // The first byte is special, only want bottom 5 bits for width 2, 4 bits\n // for width 3, and 3 bits for width 4\n@@ -998,16 +996,14 @@ pub struct Utf16Items<'a> {\n     iter: slice::Items<'a, u16>\n }\n /// The possibilities for values decoded from a `u16` stream.\n-#[deriving(PartialEq, Eq, Clone, Show)]\n+#[deriving(Copy, PartialEq, Eq, Clone, Show)]\n pub enum Utf16Item {\n     /// A valid codepoint.\n     ScalarValue(char),\n     /// An invalid surrogate without its pair.\n     LoneSurrogate(u16)\n }\n \n-impl Copy for Utf16Item {}\n-\n impl Utf16Item {\n     /// Convert `self` to a `char`, taking `LoneSurrogate`s to the\n     /// replacement character (U+FFFD).\n@@ -1144,15 +1140,14 @@ pub fn utf8_char_width(b: u8) -> uint {\n /// Struct that contains a `char` and the index of the first byte of\n /// the next `char` in a string.  This can be used as a data structure\n /// for iterating over the UTF-8 bytes of a string.\n+#[deriving(Copy)]\n pub struct CharRange {\n     /// Current `char`\n     pub ch: char,\n     /// Index of the first byte of the next `char`\n     pub next: uint,\n }\n \n-impl Copy for CharRange {}\n-\n /// Mask of the value bits of a continuation byte\n const CONT_MASK: u8 = 0b0011_1111u8;\n /// Value of the tag bits (tag mask is !CONT_MASK) of a continuation byte"}, {"sha": "3099bf559e4bfa2384a2bc36536106137d99a79c", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -35,7 +35,7 @@ use std::string;\n \n /// A piece is a portion of the format string which represents the next part\n /// to emit. These are emitted as a stream by the `Parser` class.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum Piece<'a> {\n     /// A literal string which should directly be emitted\n     String(&'a str),\n@@ -44,21 +44,17 @@ pub enum Piece<'a> {\n     NextArgument(Argument<'a>),\n }\n \n-impl<'a> Copy for Piece<'a> {}\n-\n /// Representation of an argument specification.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub struct Argument<'a> {\n     /// Where to find this argument\n     pub position: Position<'a>,\n     /// How to format the argument\n     pub format: FormatSpec<'a>,\n }\n \n-impl<'a> Copy for Argument<'a> {}\n-\n /// Specification for the formatting of an argument in the format string.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub struct FormatSpec<'a> {\n     /// Optionally specified character to fill alignment with\n     pub fill: Option<char>,\n@@ -76,10 +72,8 @@ pub struct FormatSpec<'a> {\n     pub ty: &'a str\n }\n \n-impl<'a> Copy for FormatSpec<'a> {}\n-\n /// Enum describing where an argument for a format can be located.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum Position<'a> {\n     /// The argument will be in the next position. This is the default.\n     ArgumentNext,\n@@ -89,10 +83,8 @@ pub enum Position<'a> {\n     ArgumentNamed(&'a str),\n }\n \n-impl<'a> Copy for Position<'a> {}\n-\n /// Enum of alignments which are supported.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum Alignment {\n     /// The value will be aligned to the left.\n     AlignLeft,\n@@ -104,11 +96,9 @@ pub enum Alignment {\n     AlignUnknown,\n }\n \n-impl Copy for Alignment {}\n-\n /// Various flags which can be applied to format strings. The meaning of these\n /// flags is defined by the formatters themselves.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum Flag {\n     /// A `+` will be used to denote positive numbers.\n     FlagSignPlus,\n@@ -122,11 +112,9 @@ pub enum Flag {\n     FlagSignAwareZeroPad,\n }\n \n-impl Copy for Flag {}\n-\n /// A count is used for the precision and width parameters of an integer, and\n /// can reference either an argument or a literal integer.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum Count<'a> {\n     /// The count is specified explicitly.\n     CountIs(uint),\n@@ -140,8 +128,6 @@ pub enum Count<'a> {\n     CountImplied,\n }\n \n-impl<'a> Copy for Count<'a> {}\n-\n /// The parser structure for interpreting the input format string. This is\n /// modelled as an iterator over `Piece` structures to form a stream of tokens\n /// being output."}, {"sha": "b45d0c9b01ecde60392832e736d1d696c817e714", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -118,7 +118,7 @@ pub enum Name {\n }\n \n /// Describes whether an option has an argument.\n-#[deriving(Clone, PartialEq, Eq)]\n+#[deriving(Clone, Copy, PartialEq, Eq)]\n pub enum HasArg {\n     /// The option requires an argument.\n     Yes,\n@@ -128,10 +128,8 @@ pub enum HasArg {\n     Maybe,\n }\n \n-impl Copy for HasArg {}\n-\n /// Describes how often an option may occur.\n-#[deriving(Clone, PartialEq, Eq)]\n+#[deriving(Clone, Copy, PartialEq, Eq)]\n pub enum Occur {\n     /// The option occurs once.\n     Req,\n@@ -141,8 +139,6 @@ pub enum Occur {\n     Multi,\n }\n \n-impl Copy for Occur {}\n-\n /// A description of a possible option.\n #[deriving(Clone, PartialEq, Eq)]\n pub struct Opt {\n@@ -211,7 +207,7 @@ pub enum Fail {\n }\n \n /// The type of failure that occurred.\n-#[deriving(PartialEq, Eq)]\n+#[deriving(Copy, PartialEq, Eq)]\n #[allow(missing_docs)]\n pub enum FailType {\n     ArgumentMissing_,\n@@ -221,8 +217,6 @@ pub enum FailType {\n     UnexpectedArgument_,\n }\n \n-impl Copy for FailType {}\n-\n /// The result of parsing a command line with a set of options.\n pub type Result = result::Result<Matches, Fail>;\n \n@@ -839,22 +833,22 @@ pub fn short_usage(program_name: &str, opts: &[OptGroup]) -> String {\n     line\n }\n \n+#[deriving(Copy)]\n enum SplitWithinState {\n     A,  // leading whitespace, initial state\n     B,  // words\n     C,  // internal and trailing whitespace\n }\n-impl Copy for SplitWithinState {}\n+#[deriving(Copy)]\n enum Whitespace {\n     Ws, // current char is whitespace\n     Cr  // current char is not whitespace\n }\n-impl Copy for Whitespace {}\n+#[deriving(Copy)]\n enum LengthLimit {\n     UnderLim, // current char makes current substring still fit in limit\n     OverLim   // current char makes current substring no longer fit in limit\n }\n-impl Copy for LengthLimit {}\n \n \n /// Splits a string into substrings with possibly internal whitespace,"}, {"sha": "2bf9af9027182585e4736ad53834966121dc055d", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -232,11 +232,9 @@ struct DefaultLogger {\n }\n \n /// Wraps the log level with fmt implementations.\n-#[deriving(PartialEq, PartialOrd)]\n+#[deriving(Copy, PartialEq, PartialOrd)]\n pub struct LogLevel(pub u32);\n \n-impl Copy for LogLevel {}\n-\n impl fmt::Show for LogLevel {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let LogLevel(level) = *self;\n@@ -341,14 +339,13 @@ pub struct LogRecord<'a> {\n }\n \n #[doc(hidden)]\n+#[deriving(Copy)]\n pub struct LogLocation {\n     pub module_path: &'static str,\n     pub file: &'static str,\n     pub line: uint,\n }\n \n-impl Copy for LogLocation {}\n-\n /// Tests whether a given module's name is enabled for a particular level of\n /// logging. This is the second layer of defense about determining whether a\n /// module's log statement should be emitted or not."}, {"sha": "6fc92e1e94fcbdcbbedbf74b2e326b50bf8dff99", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -29,14 +29,13 @@ const CHACHA_ROUNDS: uint = 20; // Cryptographically secure from 8 upwards as of\n /// [1]: D. J. Bernstein, [*ChaCha, a variant of\n /// Salsa20*](http://cr.yp.to/chacha.html)\n \n+#[deriving(Copy)]\n pub struct ChaChaRng {\n     buffer:  [u32, ..STATE_WORDS], // Internal buffer of output\n     state:   [u32, ..STATE_WORDS], // Initial state\n     index:   uint,                 // Index into state\n }\n \n-impl Copy for ChaChaRng {}\n-\n static EMPTY: ChaChaRng = ChaChaRng {\n     buffer:  [0, ..STATE_WORDS],\n     state:   [0, ..STATE_WORDS],"}, {"sha": "431a530726a083291ab0a38cf547e304d3d191cb", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -10,7 +10,6 @@\n \n //! The exponential distribution.\n \n-use core::kinds::Copy;\n use core::num::Float;\n \n use {Rng, Rand};\n@@ -30,10 +29,9 @@ use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n /// Generate Normal Random\n /// Samples*](http://www.doornik.com/research/ziggurat.pdf). Nuffield\n /// College, Oxford\n+#[deriving(Copy)]\n pub struct Exp1(pub f64);\n \n-impl Copy for Exp1 {}\n-\n // This could be done via `-rng.gen::<f64>().ln()` but that is slower.\n impl Rand for Exp1 {\n     #[inline]\n@@ -69,13 +67,12 @@ impl Rand for Exp1 {\n /// let v = exp.ind_sample(&mut rand::task_rng());\n /// println!(\"{} is from a Exp(2) distribution\", v);\n /// ```\n+#[deriving(Copy)]\n pub struct Exp {\n     /// `lambda` stored as `1/lambda`, since this is what we scale by.\n     lambda_inverse: f64\n }\n \n-impl Copy for Exp {}\n-\n impl Exp {\n     /// Construct a new `Exp` with the given shape parameter\n     /// `lambda`. Panics if `lambda <= 0`."}, {"sha": "16413af626739ed8fa65817f20d3aba8573359d3", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -10,7 +10,6 @@\n \n //! The normal and derived distributions.\n \n-use core::kinds::Copy;\n use core::num::Float;\n \n use {Rng, Rand, Open01};\n@@ -29,10 +28,9 @@ use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n /// Generate Normal Random\n /// Samples*](http://www.doornik.com/research/ziggurat.pdf). Nuffield\n /// College, Oxford\n+#[deriving(Copy)]\n pub struct StandardNormal(pub f64);\n \n-impl Copy for StandardNormal {}\n-\n impl Rand for StandardNormal {\n     fn rand<R:Rng>(rng: &mut R) -> StandardNormal {\n         #[inline]\n@@ -86,13 +84,12 @@ impl Rand for StandardNormal {\n /// let v = normal.ind_sample(&mut rand::task_rng());\n /// println!(\"{} is from a N(2, 9) distribution\", v)\n /// ```\n+#[deriving(Copy)]\n pub struct Normal {\n     mean: f64,\n     std_dev: f64,\n }\n \n-impl Copy for Normal {}\n-\n impl Normal {\n     /// Construct a new `Normal` distribution with the given mean and\n     /// standard deviation.\n@@ -135,12 +132,11 @@ impl IndependentSample<f64> for Normal {\n /// let v = log_normal.ind_sample(&mut rand::task_rng());\n /// println!(\"{} is from an ln N(2, 9) distribution\", v)\n /// ```\n+#[deriving(Copy)]\n pub struct LogNormal {\n     norm: Normal\n }\n \n-impl Copy for LogNormal {}\n-\n impl LogNormal {\n     /// Construct a new `LogNormal` distribution with the given mean\n     /// and standard deviation."}, {"sha": "3cb1f51a6a80102d472271934b1d7780983c14bd", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -29,6 +29,7 @@ const RAND_SIZE_UINT: uint = 1 << (RAND_SIZE_LEN as uint);\n ///\n /// [1]: Bob Jenkins, [*ISAAC: A fast cryptographic random number\n /// generator*](http://www.burtleburtle.net/bob/rand/isaacafa.html)\n+#[deriving(Copy)]\n pub struct IsaacRng {\n     cnt: u32,\n     rsl: [u32, ..RAND_SIZE_UINT],\n@@ -38,8 +39,6 @@ pub struct IsaacRng {\n     c: u32\n }\n \n-impl Copy for IsaacRng {}\n-\n static EMPTY: IsaacRng = IsaacRng {\n     cnt: 0,\n     rsl: [0, ..RAND_SIZE_UINT],\n@@ -265,6 +264,7 @@ const RAND_SIZE_64: uint = 1 << RAND_SIZE_64_LEN;\n ///\n /// [1]: Bob Jenkins, [*ISAAC: A fast cryptographic random number\n /// generator*](http://www.burtleburtle.net/bob/rand/isaacafa.html)\n+#[deriving(Copy)]\n pub struct Isaac64Rng {\n     cnt: uint,\n     rsl: [u64, .. RAND_SIZE_64],\n@@ -274,8 +274,6 @@ pub struct Isaac64Rng {\n     c: u64,\n }\n \n-impl Copy for Isaac64Rng {}\n-\n static EMPTY_64: Isaac64Rng = Isaac64Rng {\n     cnt: 0,\n     rsl: [0, .. RAND_SIZE_64],"}, {"sha": "514ff81da518ec789c5614c169b197aa7a9887b0", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -501,6 +501,7 @@ pub struct Closed01<F>(pub F);\n #[cfg(not(test))]\n mod std {\n     pub use core::{option, fmt}; // panic!()\n+    pub use core::kinds;\n }\n \n #[cfg(test)]"}, {"sha": "94a11c040e49758e7a8f34e1cafc7a84310b6aa1", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -133,10 +133,9 @@ pub trait Reseeder<R> {\n \n /// Reseed an RNG using a `Default` instance. This reseeds by\n /// replacing the RNG with the result of a `Default::default` call.\n+#[deriving(Copy)]\n pub struct ReseedWithDefault;\n \n-impl Copy for ReseedWithDefault {}\n-\n impl<R: Rng + Default> Reseeder<R> for ReseedWithDefault {\n     fn reseed(&mut self, rng: &mut R) {\n         *rng = Default::default();"}, {"sha": "19e79b1eb7b2d4cf7bca0c6b7e91c023c81e7599", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -41,15 +41,13 @@ use std::str;\n pub mod io;\n \n /// Common data structures\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct Doc<'a> {\n     pub data: &'a [u8],\n     pub start: uint,\n     pub end: uint,\n }\n \n-impl<'doc> Copy for Doc<'doc> {}\n-\n impl<'doc> Doc<'doc> {\n     pub fn new(data: &'doc [u8]) -> Doc<'doc> {\n         Doc { data: data, start: 0u, end: data.len() }\n@@ -73,7 +71,7 @@ pub struct TaggedDoc<'a> {\n     pub doc: Doc<'a>,\n }\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum EbmlEncoderTag {\n     EsUint,     // 0\n     EsU64,      // 1\n@@ -107,8 +105,6 @@ pub enum EbmlEncoderTag {\n     EsLabel, // Used only when debugging\n }\n \n-impl Copy for EbmlEncoderTag {}\n-\n #[deriving(Show)]\n pub enum Error {\n     IntTooBig(uint),\n@@ -151,13 +147,12 @@ pub mod reader {\n         )\n     }\n \n+    #[deriving(Copy)]\n     pub struct Res {\n         pub val: uint,\n         pub next: uint\n     }\n \n-    impl Copy for Res {}\n-\n     #[inline(never)]\n     fn vuint_at_slow(data: &[u8], start: uint) -> DecodeResult<Res> {\n         let a = data[start];"}, {"sha": "78558a322665db29cdc12cb1ac40d19ddbdf5b94", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -77,14 +77,12 @@ pub enum Repeater {\n     OneMore,\n }\n \n-#[deriving(Show, Clone)]\n+#[deriving(Copy, Show, Clone)]\n pub enum Greed {\n     Greedy,\n     Ungreedy,\n }\n \n-impl Copy for Greed {}\n-\n impl Greed {\n     pub fn is_greedy(&self) -> bool {\n         match *self {"}, {"sha": "151587e423abb7ec6272d6bd0eca3c1328947574", "filename": "src/libregex/re.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -126,6 +126,7 @@ pub struct ExDynamic {\n }\n \n #[doc(hidden)]\n+#[deriving(Copy)]\n pub struct ExNative {\n     #[doc(hidden)]\n     pub original: &'static str,\n@@ -135,8 +136,6 @@ pub struct ExNative {\n     pub prog: fn(MatchKind, &str, uint, uint) -> Vec<Option<uint>>\n }\n \n-impl Copy for ExNative {}\n-\n impl Clone for ExNative {\n     fn clone(&self) -> ExNative {\n         *self"}, {"sha": "990d5a159f60d879216efd4df4350d6a6b77b1b3", "filename": "src/libregex/vm.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibregex%2Fvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibregex%2Fvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fvm.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -50,6 +50,7 @@ use unicode::regex::PERLW;\n pub type CaptureLocs = Vec<Option<uint>>;\n \n /// Indicates the type of match to be performed by the VM.\n+#[deriving(Copy)]\n pub enum MatchKind {\n     /// Only checks if a match exists or not. Does not return location.\n     Exists,\n@@ -60,8 +61,6 @@ pub enum MatchKind {\n     Submatches,\n }\n \n-impl Copy for MatchKind {}\n-\n /// Runs an NFA simulation on the compiled expression given on the search text\n /// `input`. The search begins at byte index `start` and ends at byte index\n /// `end`. (The range is specified here so that zero-width assertions will work\n@@ -96,6 +95,7 @@ struct Nfa<'r, 't> {\n \n /// Indicates the next action to take after a single non-empty instruction\n /// is processed.\n+#[deriving(Copy)]\n pub enum StepState {\n     /// This is returned if and only if a Match instruction is reached and\n     /// we only care about the existence of a match. It instructs the VM to\n@@ -109,8 +109,6 @@ pub enum StepState {\n     StepContinue,\n }\n \n-impl Copy for StepState {}\n-\n impl<'r, 't> Nfa<'r, 't> {\n     fn run(&mut self) -> CaptureLocs {\n         let ncaps = match self.which {"}, {"sha": "88b12aa5660c99929c3785e4cd6b72759915f6c8", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 21, "deletions": 42, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -56,10 +56,9 @@ declare_lint! {\n     \"suggest using `loop { }` instead of `while true { }`\"\n }\n \n+#[deriving(Copy)]\n pub struct WhileTrue;\n \n-impl Copy for WhileTrue {}\n-\n impl LintPass for WhileTrue {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(WHILE_TRUE)\n@@ -83,10 +82,9 @@ declare_lint! {\n     \"detects unnecessary type casts that can be removed\"\n }\n \n+#[deriving(Copy)]\n pub struct UnusedCasts;\n \n-impl Copy for UnusedCasts {}\n-\n impl LintPass for UnusedCasts {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_TYPECASTS)\n@@ -126,13 +124,12 @@ declare_lint! {\n     \"shift exceeds the type's number of bits\"\n }\n \n+#[deriving(Copy)]\n pub struct TypeLimits {\n     /// Id of the last visited negated expression\n     negated_expr_id: ast::NodeId,\n }\n \n-impl Copy for TypeLimits {}\n-\n impl TypeLimits {\n     pub fn new() -> TypeLimits {\n         TypeLimits {\n@@ -442,10 +439,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ImproperCTypesVisitor<'a, 'tcx> {\n     }\n }\n \n+#[deriving(Copy)]\n pub struct ImproperCTypes;\n \n-impl Copy for ImproperCTypes {}\n-\n impl LintPass for ImproperCTypes {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(IMPROPER_CTYPES)\n@@ -486,10 +482,9 @@ declare_lint! {\n     \"use of owned (Box type) heap memory\"\n }\n \n+#[deriving(Copy)]\n pub struct BoxPointers;\n \n-impl Copy for BoxPointers {}\n-\n impl BoxPointers {\n     fn check_heap_type<'a, 'tcx>(&self, cx: &Context<'a, 'tcx>,\n                                  span: Span, ty: Ty<'tcx>) {\n@@ -627,10 +622,9 @@ declare_lint! {\n     \"detects attributes that were not used by the compiler\"\n }\n \n+#[deriving(Copy)]\n pub struct UnusedAttributes;\n \n-impl Copy for UnusedAttributes {}\n-\n impl LintPass for UnusedAttributes {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_ATTRIBUTES)\n@@ -711,10 +705,9 @@ declare_lint! {\n     \"path statements with no effect\"\n }\n \n+#[deriving(Copy)]\n pub struct PathStatements;\n \n-impl Copy for PathStatements {}\n-\n impl LintPass for PathStatements {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(PATH_STATEMENTS)\n@@ -746,10 +739,9 @@ declare_lint! {\n     \"unused result of an expression in a statement\"\n }\n \n+#[deriving(Copy)]\n pub struct UnusedResults;\n \n-impl Copy for UnusedResults {}\n-\n impl LintPass for UnusedResults {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_MUST_USE, UNUSED_RESULTS)\n@@ -815,10 +807,9 @@ declare_lint! {\n     \"types, variants, traits and type parameters should have camel case names\"\n }\n \n+#[deriving(Copy)]\n pub struct NonCamelCaseTypes;\n \n-impl Copy for NonCamelCaseTypes {}\n-\n impl NonCamelCaseTypes {\n     fn check_case(&self, cx: &Context, sort: &str, ident: ast::Ident, span: Span) {\n         fn is_camel_case(ident: ast::Ident) -> bool {\n@@ -939,10 +930,9 @@ declare_lint! {\n     \"methods, functions, lifetime parameters and modules should have snake case names\"\n }\n \n+#[deriving(Copy)]\n pub struct NonSnakeCase;\n \n-impl Copy for NonSnakeCase {}\n-\n impl NonSnakeCase {\n     fn check_snake_case(&self, cx: &Context, sort: &str, ident: ast::Ident, span: Span) {\n         fn is_snake_case(ident: ast::Ident) -> bool {\n@@ -1053,10 +1043,9 @@ declare_lint! {\n     \"static constants should have uppercase identifiers\"\n }\n \n+#[deriving(Copy)]\n pub struct NonUpperCaseGlobals;\n \n-impl Copy for NonUpperCaseGlobals {}\n-\n impl LintPass for NonUpperCaseGlobals {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NON_UPPER_CASE_GLOBALS)\n@@ -1107,10 +1096,9 @@ declare_lint! {\n     \"`if`, `match`, `while` and `return` do not need parentheses\"\n }\n \n+#[deriving(Copy)]\n pub struct UnusedParens;\n \n-impl Copy for UnusedParens {}\n-\n impl UnusedParens {\n     fn check_unused_parens_core(&self, cx: &Context, value: &ast::Expr, msg: &str,\n                                      struct_lit_needs_parens: bool) {\n@@ -1202,10 +1190,9 @@ declare_lint! {\n     \"unnecessary braces around an imported item\"\n }\n \n+#[deriving(Copy)]\n pub struct UnusedImportBraces;\n \n-impl Copy for UnusedImportBraces {}\n-\n impl LintPass for UnusedImportBraces {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_IMPORT_BRACES)\n@@ -1242,10 +1229,9 @@ declare_lint! {\n     \"using `Struct { x: x }` instead of `Struct { x }`\"\n }\n \n+#[deriving(Copy)]\n pub struct NonShorthandFieldPatterns;\n \n-impl Copy for NonShorthandFieldPatterns {}\n-\n impl LintPass for NonShorthandFieldPatterns {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NON_SHORTHAND_FIELD_PATTERNS)\n@@ -1276,10 +1262,9 @@ declare_lint! {\n     \"unnecessary use of an `unsafe` block\"\n }\n \n+#[deriving(Copy)]\n pub struct UnusedUnsafe;\n \n-impl Copy for UnusedUnsafe {}\n-\n impl LintPass for UnusedUnsafe {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_UNSAFE)\n@@ -1302,10 +1287,9 @@ declare_lint! {\n     \"usage of an `unsafe` block\"\n }\n \n+#[deriving(Copy)]\n pub struct UnsafeBlocks;\n \n-impl Copy for UnsafeBlocks {}\n-\n impl LintPass for UnsafeBlocks {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNSAFE_BLOCKS)\n@@ -1327,10 +1311,9 @@ declare_lint! {\n     \"detect mut variables which don't need to be mutable\"\n }\n \n+#[deriving(Copy)]\n pub struct UnusedMut;\n \n-impl Copy for UnusedMut {}\n-\n impl UnusedMut {\n     fn check_unused_mut_pat(&self, cx: &Context, pats: &[P<ast::Pat>]) {\n         // collect all mutable pattern and group their NodeIDs by their Identifier to\n@@ -1397,10 +1380,9 @@ declare_lint! {\n     \"detects unnecessary allocations that can be eliminated\"\n }\n \n+#[deriving(Copy)]\n pub struct UnusedAllocation;\n \n-impl Copy for UnusedAllocation {}\n-\n impl LintPass for UnusedAllocation {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_ALLOCATION)\n@@ -1589,10 +1571,9 @@ impl LintPass for MissingDoc {\n     }\n }\n \n+#[deriving(Copy)]\n pub struct MissingCopyImplementations;\n \n-impl Copy for MissingCopyImplementations {}\n-\n impl LintPass for MissingCopyImplementations {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(MISSING_COPY_IMPLEMENTATIONS)\n@@ -1665,10 +1646,9 @@ declare_lint! {\n \n /// Checks for use of items with `#[deprecated]`, `#[experimental]` and\n /// `#[unstable]` attributes, or no stability attribute.\n+#[deriving(Copy)]\n pub struct Stability;\n \n-impl Copy for Stability {}\n-\n impl Stability {\n     fn lint(&self, cx: &Context, id: ast::DefId, span: Span) {\n         let stability = stability::lookup(cx.tcx, id);\n@@ -1903,10 +1883,9 @@ declare_lint!{\n \n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n+#[deriving(Copy)]\n pub struct HardwiredLints;\n \n-impl Copy for HardwiredLints {}\n-\n impl LintPass for HardwiredLints {\n     fn get_lints(&self) -> LintArray {\n         lint_array!("}, {"sha": "009a1d444dc137b1e5574fdb07d994e959f5346f", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -42,6 +42,7 @@ use syntax::ast;\n pub use lint::context::{Context, LintStore, raw_emit_lint, check_crate, gather_attrs};\n \n /// Specification of a single lint.\n+#[deriving(Copy)]\n pub struct Lint {\n     /// A string identifier for the lint.\n     ///\n@@ -64,8 +65,6 @@ pub struct Lint {\n     pub desc: &'static str,\n }\n \n-impl Copy for Lint {}\n-\n impl Lint {\n     /// Get the lint's name, with ASCII letters converted to lowercase.\n     pub fn name_lower(&self) -> String {\n@@ -175,14 +174,12 @@ pub trait LintPass {\n pub type LintPassObject = Box<LintPass + 'static>;\n \n /// Identifies a lint known to the compiler.\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct LintId {\n     // Identity is based on pointer equality of this field.\n     lint: &'static Lint,\n }\n \n-impl Copy for LintId {}\n-\n impl PartialEq for LintId {\n     fn eq(&self, other: &LintId) -> bool {\n         (self.lint as *const Lint) == (other.lint as *const Lint)\n@@ -213,13 +210,11 @@ impl LintId {\n }\n \n /// Setting for how to handle a lint.\n-#[deriving(Clone, PartialEq, PartialOrd, Eq, Ord)]\n+#[deriving(Clone, Copy, PartialEq, PartialOrd, Eq, Ord)]\n pub enum Level {\n     Allow, Warn, Deny, Forbid\n }\n \n-impl Copy for Level {}\n-\n impl Level {\n     /// Convert a level to a lower-case string.\n     pub fn as_str(self) -> &'static str {\n@@ -244,7 +239,7 @@ impl Level {\n }\n \n /// How a lint level was set.\n-#[deriving(Clone, PartialEq, Eq)]\n+#[deriving(Clone, Copy, PartialEq, Eq)]\n pub enum LintSource {\n     /// Lint is at the default level as declared\n     /// in rustc or a plugin.\n@@ -257,8 +252,6 @@ pub enum LintSource {\n     CommandLine,\n }\n \n-impl Copy for LintSource {}\n-\n pub type LevelSource = (Level, LintSource);\n \n pub mod builtin;"}, {"sha": "03e436e98df46390e753c9294c5c2aafe9af7518", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -113,7 +113,7 @@ pub const tag_items_data_item_reexport_def_id: uint = 0x39;\n pub const tag_items_data_item_reexport_name: uint = 0x3a;\n \n // used to encode crate_ctxt side tables\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n #[repr(uint)]\n pub enum astencode_tag { // Reserves 0x40 -- 0x5f\n     tag_ast = 0x40,\n@@ -145,7 +145,6 @@ pub enum astencode_tag { // Reserves 0x40 -- 0x5f\n     tag_table_object_cast_map = 0x57,\n }\n \n-impl Copy for astencode_tag {}\n static first_astencode_tag: uint = tag_ast as uint;\n static last_astencode_tag: uint = tag_table_object_cast_map as uint;\n impl astencode_tag {"}, {"sha": "a474af7c6e1ff0dd81173ae09ffce2f8ef91dddc", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -33,14 +33,13 @@ use syntax::parse::token;\n \n use std::collections::hash_map::HashMap;\n \n+#[deriving(Copy)]\n pub struct MethodInfo {\n     pub name: ast::Name,\n     pub def_id: ast::DefId,\n     pub vis: ast::Visibility,\n }\n \n-impl Copy for MethodInfo {}\n-\n pub fn get_symbol(cstore: &cstore::CStore, def: ast::DefId) -> String {\n     let cdata = cstore.get_crate_data(def.krate);\n     decoder::get_symbol(cdata.data(), def.node)"}, {"sha": "d5247472c34478fab57665d22a8d91d91c042b28", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -48,23 +48,19 @@ pub struct crate_metadata {\n     pub span: Span,\n }\n \n-#[deriving(Show, PartialEq, Clone)]\n+#[deriving(Copy, Show, PartialEq, Clone)]\n pub enum LinkagePreference {\n     RequireDynamic,\n     RequireStatic,\n }\n \n-impl Copy for LinkagePreference {}\n-\n-#[deriving(Clone, PartialEq, FromPrimitive)]\n+#[deriving(Copy, Clone, PartialEq, FromPrimitive)]\n pub enum NativeLibraryKind {\n     NativeStatic,    // native static library (.a archive)\n     NativeFramework, // OSX-specific\n     NativeUnknown,   // default way to specify a dynamic library\n }\n \n-impl Copy for NativeLibraryKind {}\n-\n // Where a crate came from on the local filesystem. One of these two options\n // must be non-None.\n #[deriving(PartialEq, Clone)]"}, {"sha": "b89c5dbcd0885af2dc093e0b8777bd61de88e77e", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -450,15 +450,13 @@ pub fn get_symbol(data: &[u8], id: ast::NodeId) -> String {\n }\n \n // Something that a name can resolve to.\n-#[deriving(Clone,Show)]\n+#[deriving(Copy, Clone, Show)]\n pub enum DefLike {\n     DlDef(def::Def),\n     DlImpl(ast::DefId),\n     DlField\n }\n \n-impl Copy for DefLike {}\n-\n /// Iterates over the language items in the given crate.\n pub fn each_lang_item<F>(cdata: Cmd, mut f: F) -> bool where\n     F: FnMut(ast::NodeId, uint) -> bool,"}, {"sha": "0b859abc531c8f4be5ceac4cc1bfae32e978592f", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -20,13 +20,12 @@ use std::os;\n \n use util::fs as myfs;\n \n+#[deriving(Copy)]\n pub enum FileMatch {\n     FileMatches,\n     FileDoesntMatch,\n }\n \n-impl Copy for FileMatch {}\n-\n // A module for searching for libraries\n // FIXME (#2658): I'm not happy how this module turned out. Should\n // probably just be folded into cstore."}, {"sha": "9d3a2c1d667779997859e4b5dd63924b8dc5bef8", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -44,7 +44,7 @@ use syntax::parse::token;\n // def-id will depend on where it originated from.  Therefore, the conversion\n // function is given an indicator of the source of the def-id.  See\n // astencode.rs for more information.\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum DefIdSource {\n     // Identifies a struct, trait, enum, etc.\n     NominalType,\n@@ -62,7 +62,6 @@ pub enum DefIdSource {\n     UnboxedClosureSource\n }\n \n-impl Copy for DefIdSource {}\n pub type conv_did<'a> =\n     |source: DefIdSource, ast::DefId|: 'a -> ast::DefId;\n "}, {"sha": "82bed2540317fa7ed7fa5033e6793bdd3aa1c936", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -26,14 +26,13 @@ struct CFGBuilder<'a, 'tcx: 'a> {\n     loop_scopes: Vec<LoopScope>,\n }\n \n+#[deriving(Copy)]\n struct LoopScope {\n     loop_id: ast::NodeId,     // id of loop/while node\n     continue_index: CFGIndex, // where to go on a `loop`\n     break_index: CFGIndex,    // where to go on a `break\n }\n \n-impl Copy for LoopScope {}\n-\n pub fn construct(tcx: &ty::ctxt,\n                  blk: &ast::Block) -> CFG {\n     let mut graph = graph::Graph::new();"}, {"sha": "a74fff5630bfd0d48301c8bd3037731a2f5a4f88", "filename": "src/librustc/middle/cfg/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -26,12 +26,11 @@ pub struct CFG {\n     pub exit: CFGIndex,\n }\n \n+#[deriving(Copy)]\n pub struct CFGNodeData {\n     pub id: ast::NodeId\n }\n \n-impl Copy for CFGNodeData {}\n-\n pub struct CFGEdgeData {\n     pub exiting_scopes: Vec<ast::NodeId>\n }"}, {"sha": "cb454f94dc74c5fecc1094dc3ecdca88d9cdeb66", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -16,20 +16,17 @@ use syntax::codemap::Span;\n use syntax::visit::Visitor;\n use syntax::visit;\n \n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, Copy, PartialEq)]\n enum Context {\n     Normal, Loop, Closure\n }\n \n-impl Copy for Context {}\n-\n+#[deriving(Copy)]\n struct CheckLoopVisitor<'a> {\n     sess: &'a Session,\n     cx: Context\n }\n \n-impl<'a> Copy for CheckLoopVisitor<'a> {}\n-\n pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n     visit::walk_crate(&mut CheckLoopVisitor { sess: sess, cx: Normal }, krate)\n }"}, {"sha": "79e776c330884fe44fd93367dff18bc9e50ecb87", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -127,13 +127,12 @@ enum Usefulness {\n     NotUseful\n }\n \n+#[deriving(Copy)]\n enum WitnessPreference {\n     ConstructWitness,\n     LeaveOutWitness\n }\n \n-impl Copy for WitnessPreference {}\n-\n impl<'a, 'tcx, 'v> Visitor<'v> for MatchCheckCtxt<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &ast::Expr) {\n         check_expr(self, ex);"}, {"sha": "21e94d69366d655b26ac0ea82bb709b6a39c7e3a", "filename": "src/librustc/middle/check_static.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -39,16 +39,14 @@ use syntax::visit::Visitor;\n use syntax::codemap::Span;\n use syntax::visit;\n \n-#[deriving(Eq, PartialEq)]\n+#[deriving(Copy, Eq, PartialEq)]\n enum Mode {\n     InConstant,\n     InStatic,\n     InStaticMut,\n     InNothing,\n }\n \n-impl Copy for Mode {}\n-\n struct CheckStaticVisitor<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n     mode: Mode,"}, {"sha": "9b94335654734a8b0786a511846cdce2b8dcb8e7", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -62,14 +62,13 @@ use std::collections::hash_map::Vacant;\n //   - Non-constants: everything else.\n //\n \n+#[deriving(Copy)]\n pub enum constness {\n     integral_const,\n     general_const,\n     non_const\n }\n \n-impl Copy for constness {}\n-\n type constness_cache = DefIdMap<constness>;\n \n pub fn join(a: constness, b: constness) -> constness {"}, {"sha": "17ebd1b94a70877b5160446a174abefffe3a727c", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -27,14 +27,12 @@ use syntax::visit;\n use syntax::print::{pp, pprust};\n use util::nodemap::NodeMap;\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum EntryOrExit {\n     Entry,\n     Exit,\n }\n \n-impl Copy for EntryOrExit {}\n-\n #[deriving(Clone)]\n pub struct DataFlowContext<'a, 'tcx: 'a, O> {\n     tcx: &'a ty::ctxt<'tcx>,"}, {"sha": "20a0dbdc1eefa98dc4b1e9cb25d8e10192baeda9", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -15,7 +15,7 @@ use middle::subst::ParamSpace;\n use syntax::ast;\n use syntax::ast_util::local_def;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Def {\n     DefFn(ast::DefId, bool /* is_ctor */),\n     DefStaticMethod(/* method */ ast::DefId, MethodProvenance),\n@@ -56,15 +56,13 @@ pub enum Def {\n     DefMethod(ast::DefId /* method */, Option<ast::DefId> /* trait */, MethodProvenance),\n }\n \n-impl Copy for Def {}\n-\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum MethodProvenance {\n     FromTrait(ast::DefId),\n     FromImpl(ast::DefId),\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum TyParamProvenance {\n     FromSelf(ast::DefId),\n     FromParam(ast::DefId),\n@@ -81,8 +79,6 @@ impl MethodProvenance {\n     }\n }\n \n-impl Copy for MethodProvenance {}\n-\n impl TyParamProvenance {\n     pub fn def_id(&self) -> ast::DefId {\n         match *self {\n@@ -92,8 +88,6 @@ impl TyParamProvenance {\n     }\n }\n \n-impl Copy for TyParamProvenance {}\n-\n impl Def {\n     pub fn def_id(&self) -> ast::DefId {\n         match *self {"}, {"sha": "0c0cba6e53e069e0ca43320fa2cda056b76739bc", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -23,15 +23,13 @@ use syntax::codemap::Span;\n use syntax::visit;\n use syntax::visit::Visitor;\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n enum UnsafeContext {\n     SafeContext,\n     UnsafeFn,\n     UnsafeBlock(ast::NodeId),\n }\n \n-impl Copy for UnsafeContext {}\n-\n fn type_is_unsafe_function(ty: Ty) -> bool {\n     match ty.sty {\n         ty::ty_bare_fn(ref f) => f.unsafety == ast::Unsafety::Unsafe,"}, {"sha": "abc3c8d0d8fa4add49b24c1cc18c6db246e29926", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -95,7 +95,7 @@ pub trait Delegate<'tcx> {\n               mode: MutateMode);\n }\n \n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub enum LoanCause {\n     ClosureCapture(Span),\n     AddrOf,\n@@ -107,35 +107,27 @@ pub enum LoanCause {\n     MatchDiscriminant\n }\n \n-impl kinds::Copy for LoanCause {}\n-\n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub enum ConsumeMode {\n     Copy,                // reference to x where x has a type that copies\n     Move(MoveReason),    // reference to x where x has a type that moves\n }\n \n-impl kinds::Copy for ConsumeMode {}\n-\n-#[deriving(PartialEq,Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub enum MoveReason {\n     DirectRefMove,\n     PatBindingMove,\n     CaptureMove,\n }\n \n-impl kinds::Copy for MoveReason {}\n-\n-#[deriving(PartialEq,Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub enum MatchMode {\n     NonBindingMatch,\n     BorrowingMatch,\n     CopyingMatch,\n     MovingMatch,\n }\n \n-impl kinds::Copy for MatchMode {}\n-\n #[deriving(PartialEq,Show)]\n enum TrackMatchMode<T> {\n     Unknown,\n@@ -205,23 +197,20 @@ impl<T> TrackMatchMode<T> {\n     }\n }\n \n-#[deriving(PartialEq,Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub enum MutateMode {\n     Init,\n     JustWrite,    // x = y\n     WriteAndRead, // x += y\n }\n \n-impl kinds::Copy for MutateMode {}\n-\n+#[deriving(Copy)]\n enum OverloadedCallType {\n     FnOverloadedCall,\n     FnMutOverloadedCall,\n     FnOnceOverloadedCall,\n }\n \n-impl kinds::Copy for OverloadedCallType {}\n-\n impl OverloadedCallType {\n     fn from_trait_id(tcx: &ty::ctxt, trait_id: ast::DefId)\n                      -> OverloadedCallType {"}, {"sha": "297d6bcb03cb9d007d5f823ffb1052cc56f12be7", "filename": "src/librustc/middle/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -14,7 +14,7 @@ use syntax::ast;\n use self::SimplifiedType::*;\n \n /// See `simplify_type\n-#[deriving(Clone, PartialEq, Eq, Hash)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash)]\n pub enum SimplifiedType {\n     BoolSimplifiedType,\n     CharSimplifiedType,\n@@ -33,8 +33,6 @@ pub enum SimplifiedType {\n     ParameterSimplifiedType,\n }\n \n-impl Copy for SimplifiedType {}\n-\n /// Tries to simplify a type by dropping type parameters, deref'ing away any reference types, etc.\n /// The idea is to get something simple that we can use to quickly decide if two types could unify\n /// during method lookup."}, {"sha": "e73fcd93e0504cb1892d724b02ec6562acc27d4b", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -60,30 +60,24 @@ impl<E: Show> Show for Edge<E> {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Show)]\n+#[deriving(Clone, Copy, PartialEq, Show)]\n pub struct NodeIndex(pub uint);\n #[allow(non_upper_case_globals)]\n pub const InvalidNodeIndex: NodeIndex = NodeIndex(uint::MAX);\n \n-impl Copy for NodeIndex {}\n-\n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub struct EdgeIndex(pub uint);\n #[allow(non_upper_case_globals)]\n pub const InvalidEdgeIndex: EdgeIndex = EdgeIndex(uint::MAX);\n \n-impl Copy for EdgeIndex {}\n-\n // Use a private field here to guarantee no more instances are created:\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub struct Direction { repr: uint }\n #[allow(non_upper_case_globals)]\n pub const Outgoing: Direction = Direction { repr: 0 };\n #[allow(non_upper_case_globals)]\n pub const Incoming: Direction = Direction { repr: 1 };\n \n-impl Copy for Direction {}\n-\n impl NodeIndex {\n     fn get(&self) -> uint { let NodeIndex(v) = *self; v }\n     /// Returns unique id (unique with respect to the graph holding associated node)."}, {"sha": "25eadae5b92f1203cc5b6c50cfaad2bcea631486", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -97,7 +97,7 @@ pub type SkolemizationMap = FnvHashMap<ty::BoundRegion,ty::Region>;\n /// Why did we require that the two types be related?\n ///\n /// See `error_reporting.rs` for more details\n-#[deriving(Clone, Show)]\n+#[deriving(Clone, Copy, Show)]\n pub enum TypeOrigin {\n     // Not yet categorized in a better way\n     Misc(Span),\n@@ -131,8 +131,6 @@ pub enum TypeOrigin {\n     EquatePredicate(Span),\n }\n \n-impl Copy for TypeOrigin {}\n-\n /// See `error_reporting.rs` for more details\n #[deriving(Clone, Show)]\n pub enum ValuePairs<'tcx> {\n@@ -223,7 +221,7 @@ pub enum SubregionOrigin<'tcx> {\n }\n \n /// Times when we replace late-bound regions with variables:\n-#[deriving(Clone, Show)]\n+#[deriving(Clone, Copy, Show)]\n pub enum LateBoundRegionConversionTime {\n     /// when a fn is called\n     FnCall,\n@@ -232,8 +230,6 @@ pub enum LateBoundRegionConversionTime {\n     HigherRankedType,\n }\n \n-impl Copy for LateBoundRegionConversionTime {}\n-\n /// Reasons to create a region inference variable\n ///\n /// See `error_reporting.rs` for more details\n@@ -270,15 +266,13 @@ pub enum RegionVariableOrigin<'tcx> {\n     BoundRegionInCoherence(ast::Name),\n }\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum fixup_err {\n     unresolved_int_ty(IntVid),\n     unresolved_float_ty(FloatVid),\n     unresolved_ty(TyVid)\n }\n \n-impl Copy for fixup_err {}\n-\n pub fn fixup_err_to_string(f: fixup_err) -> String {\n     match f {\n       unresolved_int_ty(_) => {"}, {"sha": "bcaf39cc8dbd1fb8dc3e681b9afd4a41550fdeb2", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -40,7 +40,7 @@ mod doc;\n mod graphviz;\n \n // A constraint that influences the inference process.\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub enum Constraint {\n     // One region variable is subregion of another\n     ConstrainVarSubVar(RegionVid, RegionVid),\n@@ -52,8 +52,6 @@ pub enum Constraint {\n     ConstrainVarSubReg(RegionVid, Region),\n }\n \n-impl Copy for Constraint {}\n-\n // Something we have to verify after region inference is done, but\n // which does not directly influence the inference process\n pub enum Verify<'tcx> {\n@@ -69,15 +67,13 @@ pub enum Verify<'tcx> {\n     VerifyParamBound(ty::ParamTy, SubregionOrigin<'tcx>, Region, Vec<Region>),\n }\n \n-#[deriving(PartialEq, Eq, Hash)]\n+#[deriving(Copy, PartialEq, Eq, Hash)]\n pub struct TwoRegions {\n     a: Region,\n     b: Region,\n }\n \n-impl Copy for TwoRegions {}\n-\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum UndoLogEntry {\n     OpenSnapshot,\n     CommitedSnapshot,\n@@ -88,15 +84,11 @@ pub enum UndoLogEntry {\n     AddCombination(CombineMapType, TwoRegions)\n }\n \n-impl Copy for UndoLogEntry {}\n-\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum CombineMapType {\n     Lub, Glb\n }\n \n-impl Copy for CombineMapType {}\n-\n #[deriving(Clone, Show)]\n pub enum RegionResolutionError<'tcx> {\n     /// `ConcreteFailure(o, a, b)`:\n@@ -940,15 +932,12 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n \n // ______________________________________________________________________\n \n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n enum Classification { Expanding, Contracting }\n \n-impl Copy for Classification {}\n-\n+#[deriving(Copy)]\n pub enum VarValue { NoValue, Value(Region), ErrorValue }\n \n-impl Copy for VarValue {}\n-\n struct VarData {\n     classification: Classification,\n     value: VarValue,"}, {"sha": "5e857154871ead14d95c9dbf6c5928e8facf460b", "filename": "src/librustc/middle/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -46,13 +46,11 @@ struct Delegate;\n \n type Relation = (RelationDir, ty::TyVid);\n \n-#[deriving(PartialEq,Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub enum RelationDir {\n     SubtypeOf, SupertypeOf, EqTo\n }\n \n-impl Copy for RelationDir {}\n-\n impl RelationDir {\n     fn opposite(self) -> RelationDir {\n         match self {"}, {"sha": "0b81823e9ed1a32a29e7c108ed9cbd800e294a7a", "filename": "src/librustc/middle/infer/unify.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -90,10 +90,9 @@ pub struct Node<K,V> {\n     pub rank: uint,\n }\n \n+#[deriving(Copy)]\n pub struct Delegate;\n \n-impl Copy for Delegate {}\n-\n // We can't use V:LatticeValue, much as I would like to,\n // because frequently the pattern is that V=Option<U> for some\n // other type parameter U, and we have no way to say"}, {"sha": "2ffc5d8a510a389c1525feb12e9d132d1fa17acb", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -45,13 +45,11 @@ macro_rules! lets_do_this {\n         $( $variant:ident, $name:expr, $method:ident; )*\n     ) => {\n \n-#[deriving(FromPrimitive, PartialEq, Eq, Hash)]\n+#[deriving(Copy, FromPrimitive, PartialEq, Eq, Hash)]\n pub enum LangItem {\n     $($variant),*\n }\n \n-impl Copy for LangItem {}\n-\n pub struct LanguageItems {\n     pub items: Vec<Option<ast::DefId>>,\n     pub missing: Vec<LangItem>,"}, {"sha": "b76d798941ef9dd0f44e56357e7acd9193769181", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -135,16 +135,12 @@ enum LoopKind<'a> {\n     ForLoop(&'a ast::Pat),\n }\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n struct Variable(uint);\n \n-impl Copy for Variable {}\n-\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n struct LiveNode(uint);\n \n-impl Copy for LiveNode {}\n-\n impl Variable {\n     fn get(&self) -> uint { let Variable(v) = *self; v }\n }\n@@ -159,16 +155,14 @@ impl Clone for LiveNode {\n     }\n }\n \n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n enum LiveNodeKind {\n     FreeVarNode(Span),\n     ExprNode(Span),\n     VarDefNode(Span),\n     ExitNode\n }\n \n-impl Copy for LiveNodeKind {}\n-\n fn live_node_kind_to_string(lnk: LiveNodeKind, cx: &ty::ctxt) -> String {\n     let cm = cx.sess.codemap();\n     match lnk {\n@@ -247,24 +241,20 @@ struct CaptureInfo {\n     var_nid: NodeId\n }\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n struct LocalInfo {\n     id: NodeId,\n     ident: ast::Ident\n }\n \n-impl Copy for LocalInfo {}\n-\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n enum VarKind {\n     Arg(NodeId, ast::Ident),\n     Local(LocalInfo),\n     ImplicitRet,\n     CleanExit\n }\n \n-impl Copy for VarKind {}\n-\n struct IrMaps<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n \n@@ -536,15 +526,13 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n // Actually we compute just a bit more than just liveness, but we use\n // the same basic propagation framework in all cases.\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n struct Users {\n     reader: LiveNode,\n     writer: LiveNode,\n     used: bool\n }\n \n-impl Copy for Users {}\n-\n fn invalid_users() -> Users {\n     Users {\n         reader: invalid_node(),\n@@ -553,15 +541,14 @@ fn invalid_users() -> Users {\n     }\n }\n \n+#[deriving(Copy)]\n struct Specials {\n     exit_ln: LiveNode,\n     fallthrough_ln: LiveNode,\n     no_ret_var: Variable,\n     clean_exit_var: Variable\n }\n \n-impl Copy for Specials {}\n-\n static ACC_READ: uint = 1u;\n static ACC_WRITE: uint = 2u;\n static ACC_USE: uint = 4u;"}, {"sha": "dce75579ca0a2111250a883618fce22eeb459214", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -101,7 +101,7 @@ pub enum categorization<'tcx> {\n }\n \n // Represents any kind of upvar\n-#[deriving(Clone, PartialEq, Show)]\n+#[deriving(Clone, Copy, PartialEq, Show)]\n pub struct Upvar {\n     pub id: ty::UpvarId,\n     // Unboxed closure kinds are used even for old-style closures for simplicity\n@@ -110,68 +110,54 @@ pub struct Upvar {\n     pub is_unboxed: bool\n }\n \n-impl Copy for Upvar {}\n-\n // different kinds of pointers:\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub enum PointerKind {\n     OwnedPtr,\n     BorrowedPtr(ty::BorrowKind, ty::Region),\n     Implicit(ty::BorrowKind, ty::Region),     // Implicit deref of a borrowed ptr.\n     UnsafePtr(ast::Mutability)\n }\n \n-impl Copy for PointerKind {}\n-\n // We use the term \"interior\" to mean \"something reachable from the\n // base without a pointer dereference\", e.g. a field\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub enum InteriorKind {\n     InteriorField(FieldName),\n     InteriorElement(ElementKind),\n }\n \n-impl Copy for InteriorKind {}\n-\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub enum FieldName {\n     NamedField(ast::Name),\n     PositionalField(uint)\n }\n \n-impl Copy for FieldName {}\n-\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub enum ElementKind {\n     VecElement,\n     OtherElement,\n }\n \n-impl Copy for ElementKind {}\n-\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub enum MutabilityCategory {\n     McImmutable, // Immutable.\n     McDeclared,  // Directly declared as mutable.\n     McInherited, // Inherited from the fact that owner is mutable.\n }\n \n-impl Copy for MutabilityCategory {}\n-\n // A note about the provenance of a `cmt`.  This is used for\n // special-case handling of upvars such as mutability inference.\n // Upvar categorization can generate a variable number of nested\n // derefs.  The note allows detecting them without deep pattern\n // matching on the categorization.\n-#[deriving(Clone, PartialEq, Show)]\n+#[deriving(Clone, Copy, PartialEq, Show)]\n pub enum Note {\n     NoteClosureEnv(ty::UpvarId), // Deref through closure env\n     NoteUpvarRef(ty::UpvarId),   // Deref through by-ref upvar\n     NoteNone                     // Nothing special\n }\n \n-impl Copy for Note {}\n-\n // `cmt`: \"Category, Mutability, and Type\".\n //\n // a complete categorization of a value indicating where it originated\n@@ -200,13 +186,12 @@ pub type cmt<'tcx> = Rc<cmt_<'tcx>>;\n \n // We pun on *T to mean both actual deref of a ptr as well\n // as accessing of components:\n+#[deriving(Copy)]\n pub enum deref_kind {\n     deref_ptr(PointerKind),\n     deref_interior(InteriorKind),\n }\n \n-impl Copy for deref_kind {}\n-\n // Categorizes a derefable type.  Note that we include vectors and strings as\n // derefable (we model an index as the combination of a deref and then a\n // pointer adjustment).\n@@ -1394,13 +1379,13 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n     }\n }\n \n+#[deriving(Copy)]\n pub enum InteriorSafety {\n     InteriorUnsafe,\n     InteriorSafe\n }\n \n-impl Copy for InteriorSafety {}\n-\n+#[deriving(Copy)]\n pub enum AliasableReason {\n     AliasableBorrowed,\n     AliasableClosure(ast::NodeId), // Aliasable due to capture Fn closure env\n@@ -1409,8 +1394,6 @@ pub enum AliasableReason {\n     AliasableStaticMut(InteriorSafety),\n }\n \n-impl Copy for AliasableReason {}\n-\n impl<'tcx> cmt_<'tcx> {\n     pub fn guarantor(&self) -> cmt<'tcx> {\n         //! Returns `self` after stripping away any owned pointer derefs or"}, {"sha": "e0d5a3a50e6128021fd025338c6e625c1624eb9d", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -36,13 +36,11 @@ use syntax::visit::{Visitor, FnKind};\n /// placate the same deriving in `ty::FreeRegion`, but we may want to\n /// actually attach a more meaningful ordering to scopes than the one\n /// generated via deriving here.\n-#[deriving(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Encodable, Decodable, Show)]\n+#[deriving(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Hash, Encodable, Decodable, Show)]\n pub enum CodeExtent {\n     Misc(ast::NodeId)\n }\n \n-impl Copy for CodeExtent {}\n-\n impl CodeExtent {\n     /// Creates a scope that represents the dynamic extent associated\n     /// with `node_id`.\n@@ -117,15 +115,14 @@ pub struct RegionMaps {\n     terminating_scopes: RefCell<FnvHashSet<CodeExtent>>,\n }\n \n+#[deriving(Copy)]\n pub struct Context {\n     var_parent: Option<ast::NodeId>,\n \n     // Innermost enclosing expression\n     parent: Option<ast::NodeId>,\n }\n \n-impl Copy for Context {}\n-\n struct RegionResolutionVisitor<'a> {\n     sess: &'a Session,\n "}, {"sha": "e1e376c537cbab100cd2653343f60c43802201bb", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 19, "deletions": 51, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -89,13 +89,12 @@ use std::uint;\n // Definition mapping\n pub type DefMap = RefCell<NodeMap<Def>>;\n \n+#[deriving(Copy)]\n struct binding_info {\n     span: Span,\n     binding_mode: BindingMode,\n }\n \n-impl Copy for binding_info {}\n-\n // Map from the name in a pattern to its binding mode.\n type BindingMap = HashMap<Name,binding_info>;\n \n@@ -118,7 +117,7 @@ pub type ExternalExports = DefIdSet;\n // FIXME: dox\n pub type LastPrivateMap = NodeMap<LastPrivate>;\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum LastPrivate {\n     LastMod(PrivateDep),\n     // `use` directives (imports) can refer to two separate definitions in the\n@@ -132,25 +131,19 @@ pub enum LastPrivate {\n                type_used: ImportUse},\n }\n \n-impl Copy for LastPrivate {}\n-\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum PrivateDep {\n     AllPublic,\n     DependsOn(DefId),\n }\n \n-impl Copy for PrivateDep {}\n-\n // How an import is used.\n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub enum ImportUse {\n     Unused,       // The import is not used.\n     Used,         // The import is used.\n }\n \n-impl Copy for ImportUse {}\n-\n impl LastPrivate {\n     fn or(self, other: LastPrivate) -> LastPrivate {\n         match (self, other) {\n@@ -160,33 +153,27 @@ impl LastPrivate {\n     }\n }\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n enum PatternBindingMode {\n     RefutableMode,\n     LocalIrrefutableMode,\n     ArgumentIrrefutableMode,\n }\n \n-impl Copy for PatternBindingMode {}\n-\n-#[deriving(PartialEq, Eq, Hash, Show)]\n+#[deriving(Copy, PartialEq, Eq, Hash, Show)]\n enum Namespace {\n     TypeNS,\n     ValueNS\n }\n \n-impl Copy for Namespace {}\n-\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n enum NamespaceError {\n     NoError,\n     ModuleError,\n     TypeError,\n     ValueError\n }\n \n-impl Copy for NamespaceError {}\n-\n /// A NamespaceResult represents the result of resolving an import in\n /// a particular namespace. The result is either definitely-resolved,\n /// definitely- unresolved, or unknown.\n@@ -247,13 +234,12 @@ impl<'a, 'v> Visitor<'v> for Resolver<'a> {\n }\n \n /// Contains data for specific types of import directives.\n+#[deriving(Copy)]\n enum ImportDirectiveSubclass {\n     SingleImport(Name /* target */, Name /* source */),\n     GlobImport\n }\n \n-impl Copy for ImportDirectiveSubclass {}\n-\n /// The context that we thread through while building the reduced graph.\n #[deriving(Clone)]\n enum ReducedGraphParent {\n@@ -293,6 +279,7 @@ enum FallbackSuggestion {\n     TraitMethod(String),\n }\n \n+#[deriving(Copy)]\n enum TypeParameters<'a> {\n     NoTypeParameters,\n     HasTypeParameters(\n@@ -310,11 +297,9 @@ enum TypeParameters<'a> {\n         RibKind)\n }\n \n-impl<'a> Copy for TypeParameters<'a> {}\n-\n // The rib kind controls the translation of local\n // definitions (`DefLocal`) to upvars (`DefUpvar`).\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n enum RibKind {\n     // No translation needs to be applied.\n     NormalRibKind,\n@@ -337,38 +322,31 @@ enum RibKind {\n     ConstantItemRibKind\n }\n \n-impl Copy for RibKind {}\n-\n // Methods can be required or provided. RequiredMethod methods only occur in traits.\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n enum MethodSort {\n     RequiredMethod,\n     ProvidedMethod(NodeId)\n }\n \n-impl Copy for MethodSort {}\n-\n+#[deriving(Copy)]\n enum UseLexicalScopeFlag {\n     DontUseLexicalScope,\n     UseLexicalScope\n }\n \n-impl Copy for UseLexicalScopeFlag {}\n-\n enum ModulePrefixResult {\n     NoPrefixFound,\n     PrefixFound(Rc<Module>, uint)\n }\n \n-#[deriving(Clone, Eq, PartialEq)]\n+#[deriving(Clone, Copy, Eq, PartialEq)]\n pub enum TraitItemKind {\n     NonstaticMethodTraitItemKind,\n     StaticMethodTraitItemKind,\n     TypeTraitItemKind,\n }\n \n-impl Copy for TraitItemKind {}\n-\n impl TraitItemKind {\n     pub fn from_explicit_self_category(explicit_self_category:\n                                        ExplicitSelfCategory)\n@@ -381,7 +359,7 @@ impl TraitItemKind {\n     }\n }\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n enum NameSearchType {\n     /// We're doing a name search in order to resolve a `use` directive.\n     ImportSearch,\n@@ -391,19 +369,16 @@ enum NameSearchType {\n     PathSearch,\n }\n \n-impl Copy for NameSearchType {}\n-\n+#[deriving(Copy)]\n enum BareIdentifierPatternResolution {\n     FoundStructOrEnumVariant(Def, LastPrivate),\n     FoundConst(Def, LastPrivate),\n     BareIdentifierPatternUnresolved\n }\n \n-impl Copy for BareIdentifierPatternResolution {}\n-\n // Specifies how duplicates should be handled when adding a child item if\n // another item exists with the same name in some namespace.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n enum DuplicateCheckingMode {\n     ForbidDuplicateModules,\n     ForbidDuplicateTypesAndModules,\n@@ -412,8 +387,6 @@ enum DuplicateCheckingMode {\n     OverwriteDuplicates\n }\n \n-impl Copy for DuplicateCheckingMode {}\n-\n /// One local scope.\n #[deriving(Show)]\n struct Rib {\n@@ -543,7 +516,7 @@ enum ParentLink {\n }\n \n /// The type of module this is.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n enum ModuleKind {\n     NormalModuleKind,\n     TraitModuleKind,\n@@ -552,8 +525,6 @@ enum ModuleKind {\n     AnonymousModuleKind,\n }\n \n-impl Copy for ModuleKind {}\n-\n /// One node in the tree of modules.\n struct Module {\n     parent_link: ParentLink,\n@@ -645,15 +616,13 @@ struct TypeNsDef {\n }\n \n // Records a possibly-private value definition.\n-#[deriving(Clone, Show)]\n+#[deriving(Clone, Copy, Show)]\n struct ValueNsDef {\n     modifiers: DefModifiers, // see note in ImportResolution about how to use this\n     def: Def,\n     value_span: Option<Span>,\n }\n \n-impl Copy for ValueNsDef {}\n-\n // Records the definitions (at most one for each namespace) that a name is\n // bound to.\n struct NameBindings {\n@@ -662,6 +631,7 @@ struct NameBindings {\n }\n \n /// Ways in which a trait can be referenced\n+#[deriving(Copy)]\n enum TraitReferenceType {\n     TraitImplementation,             // impl SomeTrait for T { ... }\n     TraitDerivation,                 // trait T : SomeTrait { ... }\n@@ -670,8 +640,6 @@ enum TraitReferenceType {\n     TraitQPath,                      // <T as SomeTrait>::\n }\n \n-impl Copy for TraitReferenceType {}\n-\n impl NameBindings {\n     fn new() -> NameBindings {\n         NameBindings {"}, {"sha": "2202137d14936cd8fc02e7f0ffbb613ad7c96f5a", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -34,7 +34,7 @@ use syntax::visit;\n use syntax::visit::Visitor;\n use util::nodemap::NodeMap;\n \n-#[deriving(Clone, PartialEq, Eq, Hash, Encodable, Decodable, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, Encodable, Decodable, Show)]\n pub enum DefRegion {\n     DefStaticRegion,\n     DefEarlyBoundRegion(/* space */ subst::ParamSpace,\n@@ -46,8 +46,6 @@ pub enum DefRegion {\n                   /* lifetime decl */ ast::NodeId),\n }\n \n-impl Copy for DefRegion {}\n-\n // maps the id of each lifetime reference to the lifetime decl\n // that it corresponds to\n pub type NamedRegionMap = NodeMap<DefRegion>;"}, {"sha": "30a47ff913258924cb2d2814291d13a81f4de2ed", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -187,7 +187,7 @@ impl RegionSubsts {\n ///////////////////////////////////////////////////////////////////////////\n // ParamSpace\n \n-#[deriving(PartialOrd, Ord, PartialEq, Eq,\n+#[deriving(Copy, PartialOrd, Ord, PartialEq, Eq,\n            Clone, Hash, Encodable, Decodable, Show)]\n pub enum ParamSpace {\n     TypeSpace,  // Type parameters attached to a type definition, trait, or impl\n@@ -196,8 +196,6 @@ pub enum ParamSpace {\n     FnSpace,    // Type parameters attached to a method or fn\n }\n \n-impl Copy for ParamSpace {}\n-\n impl ParamSpace {\n     pub fn all() -> [ParamSpace, ..4] {\n         [TypeSpace, SelfSpace, AssocSpace, FnSpace]"}, {"sha": "8ba28b61006bdd775a7c72af76f5d0d849ff6a9a", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -91,7 +91,7 @@ pub enum MethodMatchResult {\n     MethodDidNotMatch,\n }\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum MethodMatchedData {\n     // In the case of a precise match, we don't really need to store\n     // how the match was found. So don't.\n@@ -102,8 +102,6 @@ pub enum MethodMatchedData {\n     CoerciveMethodMatch(/* impl we matched */ ast::DefId)\n }\n \n-impl Copy for MethodMatchedData {}\n-\n /// The selection process begins by considering all impls, where\n /// clauses, and so forth that might resolve an obligation.  Sometimes\n /// we'll be able to say definitively that (e.g.) an impl does not"}, {"sha": "acf1fced72cae233f12e528eaf19b77cdce495cf", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 45, "deletions": 129, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -107,22 +107,18 @@ pub struct CrateAnalysis<'tcx> {\n     pub name: String,\n }\n \n-#[deriving(PartialEq, Eq, Hash)]\n+#[deriving(Copy, PartialEq, Eq, Hash)]\n pub struct field<'tcx> {\n     pub name: ast::Name,\n     pub mt: mt<'tcx>\n }\n \n-impl<'tcx> Copy for field<'tcx> {}\n-\n-#[deriving(Clone, Show)]\n+#[deriving(Clone, Copy, Show)]\n pub enum ImplOrTraitItemContainer {\n     TraitContainer(ast::DefId),\n     ImplContainer(ast::DefId),\n }\n \n-impl Copy for ImplOrTraitItemContainer {}\n-\n impl ImplOrTraitItemContainer {\n     pub fn id(&self) -> ast::DefId {\n         match *self {\n@@ -177,14 +173,12 @@ impl<'tcx> ImplOrTraitItem<'tcx> {\n     }\n }\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub enum ImplOrTraitItemId {\n     MethodTraitItemId(ast::DefId),\n     TypeTraitItemId(ast::DefId),\n }\n \n-impl Copy for ImplOrTraitItemId {}\n-\n impl ImplOrTraitItemId {\n     pub fn def_id(&self) -> ast::DefId {\n         match *self {\n@@ -238,78 +232,65 @@ impl<'tcx> Method<'tcx> {\n     }\n }\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct AssociatedType {\n     pub name: ast::Name,\n     pub vis: ast::Visibility,\n     pub def_id: ast::DefId,\n     pub container: ImplOrTraitItemContainer,\n }\n \n-impl Copy for AssociatedType {}\n-\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub struct mt<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub mutbl: ast::Mutability,\n }\n \n-impl<'tcx> Copy for mt<'tcx> {}\n-\n-#[deriving(Clone, PartialEq, Eq, Hash, Encodable, Decodable, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, Encodable, Decodable, Show)]\n pub enum TraitStore {\n     /// Box<Trait>\n     UniqTraitStore,\n     /// &Trait and &mut Trait\n     RegionTraitStore(Region, ast::Mutability),\n }\n \n-impl Copy for TraitStore {}\n-\n-#[deriving(Clone, Show)]\n+#[deriving(Clone, Copy, Show)]\n pub struct field_ty {\n     pub name: Name,\n     pub id: DefId,\n     pub vis: ast::Visibility,\n     pub origin: ast::DefId,  // The DefId of the struct in which the field is declared.\n }\n \n-impl Copy for field_ty {}\n-\n // Contains information needed to resolve types and (in the future) look up\n // the types of AST nodes.\n-#[deriving(PartialEq, Eq, Hash)]\n+#[deriving(Copy, PartialEq, Eq, Hash)]\n pub struct creader_cache_key {\n     pub cnum: CrateNum,\n     pub pos: uint,\n     pub len: uint\n }\n \n-impl Copy for creader_cache_key {}\n-\n+#[deriving(Copy)]\n pub enum ast_ty_to_ty_cache_entry<'tcx> {\n     atttce_unresolved,  /* not resolved yet */\n     atttce_resolved(Ty<'tcx>)  /* resolved to a type, irrespective of region */\n }\n \n-impl<'tcx> Copy for ast_ty_to_ty_cache_entry<'tcx> {}\n-\n #[deriving(Clone, PartialEq, Decodable, Encodable)]\n pub struct ItemVariances {\n     pub types: VecPerParamSpace<Variance>,\n     pub regions: VecPerParamSpace<Variance>,\n }\n \n-#[deriving(Clone, PartialEq, Decodable, Encodable, Show)]\n+#[deriving(Clone, Copy, PartialEq, Decodable, Encodable, Show)]\n pub enum Variance {\n     Covariant,      // T<A> <: T<B> iff A <: B -- e.g., function return type\n     Invariant,      // T<A> <: T<B> iff B == A -- e.g., type of mutable cell\n     Contravariant,  // T<A> <: T<B> iff B <: A -- e.g., function param type\n     Bivariant,      // T<A> <: T<B>            -- e.g., unused type parameter\n }\n \n-impl Copy for Variance {}\n-\n #[deriving(Clone, Show)]\n pub enum AutoAdjustment<'tcx> {\n     AdjustAddEnv(ty::TraitStore),\n@@ -449,14 +430,12 @@ pub fn type_of_adjust<'tcx>(cx: &ctxt<'tcx>, adj: &AutoAdjustment<'tcx>) -> Opti\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq, PartialOrd, Show)]\n+#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, PartialOrd, Show)]\n pub struct param_index {\n     pub space: subst::ParamSpace,\n     pub index: uint\n }\n \n-impl Copy for param_index {}\n-\n #[deriving(Clone, Show)]\n pub enum MethodOrigin<'tcx> {\n     // fully statically resolved method\n@@ -513,8 +492,6 @@ pub struct MethodCallee<'tcx> {\n     pub substs: subst::Substs<'tcx>\n }\n \n-impl Copy for MethodCall {}\n-\n /// With method calls, we store some extra information in\n /// side tables (i.e method_map). We use\n /// MethodCall as a key to index into these tables instead of\n@@ -527,21 +504,19 @@ impl Copy for MethodCall {}\n /// needed to add to the side tables. Thus to disambiguate\n /// we also keep track of whether there's an adjustment in\n /// our key.\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub struct MethodCall {\n     pub expr_id: ast::NodeId,\n     pub adjustment: ExprAdjustment\n }\n \n-#[deriving(Clone, PartialEq, Eq, Hash, Show, Encodable, Decodable)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show, Encodable, Decodable)]\n pub enum ExprAdjustment {\n     NoAdjustment,\n     AutoDeref(uint),\n     AutoObject\n }\n \n-impl Copy for ExprAdjustment {}\n-\n impl MethodCall {\n     pub fn expr(id: ast::NodeId) -> MethodCall {\n         MethodCall {\n@@ -615,6 +590,7 @@ pub type ObjectCastMap<'tcx> = RefCell<NodeMap<Rc<ty::PolyTraitRef<'tcx>>>>;\n \n /// A restriction that certain types must be the same size. The use of\n /// `transmute` gives rise to these restrictions.\n+#[deriving(Copy)]\n pub struct TransmuteRestriction<'tcx> {\n     /// The span from whence the restriction comes.\n     pub span: Span,\n@@ -626,8 +602,6 @@ pub struct TransmuteRestriction<'tcx> {\n     pub id: ast::NodeId,\n }\n \n-impl<'tcx> Copy for TransmuteRestriction<'tcx> {}\n-\n /// The data structure to keep track of all the information that typechecker\n /// generates so that so that it can be reused and doesn't have to be redone\n /// later on.\n@@ -923,7 +897,7 @@ pub struct ClosureTy<'tcx> {\n     pub abi: abi::Abi,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Hash)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash)]\n pub enum FnOutput<'tcx> {\n     FnConverging(Ty<'tcx>),\n     FnDiverging\n@@ -938,8 +912,6 @@ impl<'tcx> FnOutput<'tcx> {\n     }\n }\n \n-impl<'tcx> Copy for FnOutput<'tcx> {}\n-\n /// Signature of a function type, which I have arbitrarily\n /// decided to use to refer to the input/output types.\n ///\n@@ -955,15 +927,13 @@ pub struct FnSig<'tcx> {\n \n pub type PolyFnSig<'tcx> = Binder<FnSig<'tcx>>;\n \n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub struct ParamTy {\n     pub space: subst::ParamSpace,\n     pub idx: uint,\n     pub def_id: DefId\n }\n \n-impl Copy for ParamTy {}\n-\n /// A [De Bruijn index][dbi] is a standard means of representing\n /// regions (and perhaps later types) in a higher-ranked setting. In\n /// particular, imagine a type like this:\n@@ -1003,15 +973,15 @@ impl Copy for ParamTy {}\n /// is the outer fn.\n ///\n /// [dbi]: http://en.wikipedia.org/wiki/De_Bruijn_index\n-#[deriving(Clone, PartialEq, Eq, Hash, Encodable, Decodable, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, Encodable, Decodable, Show)]\n pub struct DebruijnIndex {\n     // We maintain the invariant that this is never 0. So 1 indicates\n     // the innermost binder. To ensure this, create with `DebruijnIndex::new`.\n     pub depth: uint,\n }\n \n /// Representation of regions:\n-#[deriving(Clone, PartialEq, Eq, Hash, Encodable, Decodable, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, Encodable, Decodable, Show)]\n pub enum Region {\n     // Region bound in a type or fn declaration which will be\n     // substituted 'early' -- that is, at the same time when type\n@@ -1052,15 +1022,13 @@ pub enum Region {\n /// Upvars do not get their own node-id. Instead, we use the pair of\n /// the original var id (that is, the root variable that is referenced\n /// by the upvar) and the id of the closure expression.\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub struct UpvarId {\n     pub var_id: ast::NodeId,\n     pub closure_expr_id: ast::NodeId,\n }\n \n-impl Copy for UpvarId {}\n-\n-#[deriving(Clone, PartialEq, Eq, Hash, Show, Encodable, Decodable)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show, Encodable, Decodable)]\n pub enum BorrowKind {\n     /// Data must be immutable and is aliasable.\n     ImmBorrow,\n@@ -1106,8 +1074,6 @@ pub enum BorrowKind {\n     MutBorrow\n }\n \n-impl Copy for BorrowKind {}\n-\n /// Information describing the borrowing of an upvar. This is computed\n /// during `typeck`, specifically by `regionck`. The general idea is\n /// that the compiler analyses treat closures like:\n@@ -1155,16 +1121,14 @@ impl Copy for BorrowKind {}\n /// - Through mutation, the borrowed upvars can actually escape\n ///   the closure, so sometimes it is necessary for them to be larger\n ///   than the closure lifetime itself.\n-#[deriving(PartialEq, Clone, Encodable, Decodable, Show)]\n+#[deriving(Copy, PartialEq, Clone, Encodable, Decodable, Show)]\n pub struct UpvarBorrow {\n     pub kind: BorrowKind,\n     pub region: ty::Region,\n }\n \n pub type UpvarBorrowMap = FnvHashMap<UpvarId, UpvarBorrow>;\n \n-impl Copy for UpvarBorrow {}\n-\n impl Region {\n     pub fn is_bound(&self) -> bool {\n         match *self {\n@@ -1182,19 +1146,15 @@ impl Region {\n     }\n }\n \n-impl Copy for Region {}\n-\n-#[deriving(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Encodable, Decodable, Show)]\n+#[deriving(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Hash, Encodable, Decodable, Show)]\n /// A \"free\" region `fr` can be interpreted as \"some region\n /// at least as big as the scope `fr.scope`\".\n pub struct FreeRegion {\n     pub scope: region::CodeExtent,\n     pub bound_region: BoundRegion\n }\n \n-impl Copy for FreeRegion {}\n-\n-#[deriving(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Encodable, Decodable, Show)]\n+#[deriving(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Hash, Encodable, Decodable, Show)]\n pub enum BoundRegion {\n     /// An anonymous region parameter for a given fn (&T)\n     BrAnon(uint),\n@@ -1213,8 +1173,6 @@ pub enum BoundRegion {\n     BrEnv\n }\n \n-impl Copy for BoundRegion {}\n-\n #[inline]\n pub fn mk_prim_t<'tcx>(primitive: &'tcx TyS<'static>) -> Ty<'tcx> {\n     // FIXME(#17596) Ty<'tcx> is incorrectly invariant w.r.t 'tcx.\n@@ -1378,34 +1336,28 @@ impl<'tcx> PolyTraitRef<'tcx> {\n #[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub struct Binder<T>(pub T);\n \n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, Copy, PartialEq)]\n pub enum IntVarValue {\n     IntType(ast::IntTy),\n     UintType(ast::UintTy),\n }\n \n-impl Copy for IntVarValue {}\n-\n-#[deriving(Clone, Show)]\n+#[deriving(Clone, Copy, Show)]\n pub enum terr_vstore_kind {\n     terr_vec,\n     terr_str,\n     terr_fn,\n     terr_trait\n }\n \n-impl Copy for terr_vstore_kind {}\n-\n-#[deriving(Clone, Show)]\n+#[deriving(Clone, Copy, Show)]\n pub struct expected_found<T> {\n     pub expected: T,\n     pub found: T\n }\n \n-impl<T:Copy> Copy for expected_found<T> {}\n-\n // Data structures used in type unification\n-#[deriving(Clone, Show)]\n+#[deriving(Clone, Copy, Show)]\n pub enum type_err<'tcx> {\n     terr_mismatch,\n     terr_unsafety_mismatch(expected_found<ast::Unsafety>),\n@@ -1438,8 +1390,6 @@ pub enum type_err<'tcx> {\n     terr_convergence_mismatch(expected_found<bool>)\n }\n \n-impl<'tcx> Copy for type_err<'tcx> {}\n-\n /// Bounds suitable for a named type parameter like `A` in `fn foo<A>`\n /// as well as the existential type parameter in an object type.\n #[deriving(PartialEq, Eq, Hash, Clone, Show)]\n@@ -1454,17 +1404,15 @@ pub struct ParamBounds<'tcx> {\n /// major difference between this case and `ParamBounds` is that\n /// general purpose trait bounds are omitted and there must be\n /// *exactly one* region.\n-#[deriving(PartialEq, Eq, Hash, Clone, Show)]\n+#[deriving(Copy, PartialEq, Eq, Hash, Clone, Show)]\n pub struct ExistentialBounds {\n     pub region_bound: ty::Region,\n     pub builtin_bounds: BuiltinBounds\n }\n \n-impl Copy for ExistentialBounds {}\n-\n pub type BuiltinBounds = EnumSet<BuiltinBound>;\n \n-#[deriving(Clone, Encodable, PartialEq, Eq, Decodable, Hash, Show)]\n+#[deriving(Copy, Clone, Encodable, PartialEq, Eq, Decodable, Hash, Show)]\n #[repr(uint)]\n pub enum BuiltinBound {\n     BoundSend,\n@@ -1473,8 +1421,6 @@ pub enum BuiltinBound {\n     BoundSync,\n }\n \n-impl Copy for BuiltinBound {}\n-\n pub fn empty_builtin_bounds() -> BuiltinBounds {\n     EnumSet::new()\n }\n@@ -1502,35 +1448,27 @@ impl CLike for BuiltinBound {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Hash)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TyVid {\n     pub index: uint\n }\n \n-impl Copy for TyVid {}\n-\n-#[deriving(Clone, PartialEq, Eq, Hash)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash)]\n pub struct IntVid {\n     pub index: uint\n }\n \n-impl Copy for IntVid {}\n-\n-#[deriving(Clone, PartialEq, Eq, Hash)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash)]\n pub struct FloatVid {\n     pub index: uint\n }\n \n-impl Copy for FloatVid {}\n-\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash)]\n pub struct RegionVid {\n     pub index: uint\n }\n \n-impl Copy for RegionVid {}\n-\n-#[deriving(Clone, PartialEq, Eq, Hash)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash)]\n pub enum InferTy {\n     TyVar(TyVid),\n     IntVar(IntVid),\n@@ -1547,16 +1485,12 @@ pub enum InferTy {\n     FreshIntTy(uint),\n }\n \n-impl Copy for InferTy {}\n-\n-#[deriving(Clone, Encodable, Decodable, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, Encodable, Decodable, Eq, Hash, Show)]\n pub enum InferRegion {\n     ReVar(RegionVid),\n     ReSkolemized(uint, BoundRegion)\n }\n \n-impl Copy for InferRegion {}\n-\n impl cmp::PartialEq for InferRegion {\n     fn eq(&self, other: &InferRegion) -> bool {\n         match ((*self), *other) {\n@@ -2006,15 +1940,13 @@ pub struct UnboxedClosure<'tcx> {\n     pub kind: UnboxedClosureKind,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Show)]\n pub enum UnboxedClosureKind {\n     FnUnboxedClosureKind,\n     FnMutUnboxedClosureKind,\n     FnOnceUnboxedClosureKind,\n }\n \n-impl Copy for UnboxedClosureKind {}\n-\n impl UnboxedClosureKind {\n     pub fn trait_did(&self, cx: &ctxt) -> ast::DefId {\n         let result = match *self {\n@@ -2795,13 +2727,11 @@ pub fn type_needs_unwind_cleanup<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n /// The reason we compute type contents and not kinds is that it is\n /// easier for me (nmatsakis) to think about what is contained within\n /// a type than to think about what is *not* contained within a type.\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct TypeContents {\n     pub bits: u64\n }\n \n-impl Copy for TypeContents {}\n-\n macro_rules! def_type_content_sets {\n     (mod $mname:ident { $($name:ident = $bits:expr),+ }) => {\n         #[allow(non_snake_case)]\n@@ -3443,15 +3373,13 @@ pub fn is_instantiable<'tcx>(cx: &ctxt<'tcx>, r_ty: Ty<'tcx>) -> bool {\n ///\n /// The ordering of the cases is significant. They are sorted so that cmp::max\n /// will keep the \"more erroneous\" of two values.\n-#[deriving(PartialOrd, Ord, Eq, PartialEq, Show)]\n+#[deriving(Copy, PartialOrd, Ord, Eq, PartialEq, Show)]\n pub enum Representability {\n     Representable,\n     ContainsRecursive,\n     SelfRecursive,\n }\n \n-impl Copy for Representability {}\n-\n /// Check whether a type is representable. This means it cannot contain unboxed\n /// structural recursion. This check is needed for structs and enums.\n pub fn is_type_representable<'tcx>(cx: &ctxt<'tcx>, sp: Span, ty: Ty<'tcx>)\n@@ -4228,15 +4156,14 @@ pub fn expr_is_lval(tcx: &ctxt, e: &ast::Expr) -> bool {\n /// two kinds of rvalues is an artifact of trans which reflects how we will\n /// generate code for that kind of expression.  See trans/expr.rs for more\n /// information.\n+#[deriving(Copy)]\n pub enum ExprKind {\n     LvalueExpr,\n     RvalueDpsExpr,\n     RvalueDatumExpr,\n     RvalueStmtExpr\n }\n \n-impl Copy for ExprKind {}\n-\n pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n     if tcx.method_map.borrow().contains_key(&MethodCall::expr(expr.id)) {\n         // Overloaded operations are generally calls, and hence they are\n@@ -4791,15 +4718,13 @@ pub fn associated_type_parameter_index(cx: &ctxt,\n     cx.sess.bug(\"couldn't find associated type parameter index\")\n }\n \n-#[deriving(PartialEq, Eq)]\n+#[deriving(Copy, PartialEq, Eq)]\n pub struct AssociatedTypeInfo {\n     pub def_id: ast::DefId,\n     pub index: uint,\n     pub name: ast::Name,\n }\n \n-impl Copy for AssociatedTypeInfo {}\n-\n impl PartialOrd for AssociatedTypeInfo {\n     fn partial_cmp(&self, other: &AssociatedTypeInfo) -> Option<Ordering> {\n         Some(self.index.cmp(&other.index))\n@@ -4979,13 +4904,12 @@ pub fn item_path_str(cx: &ctxt, id: ast::DefId) -> String {\n     with_path(cx, id, |path| ast_map::path_to_string(path)).to_string()\n }\n \n+#[deriving(Copy)]\n pub enum DtorKind {\n     NoDtor,\n     TraitDtor(DefId, bool)\n }\n \n-impl Copy for DtorKind {}\n-\n impl DtorKind {\n     pub fn is_present(&self) -> bool {\n         match *self {\n@@ -5403,14 +5327,13 @@ pub fn tup_fields<'tcx>(v: &[Ty<'tcx>]) -> Vec<field<'tcx>> {\n     }).collect()\n }\n \n+#[deriving(Copy)]\n pub struct UnboxedClosureUpvar<'tcx> {\n     pub def: def::Def,\n     pub span: Span,\n     pub ty: Ty<'tcx>,\n }\n \n-impl<'tcx> Copy for UnboxedClosureUpvar<'tcx> {}\n-\n // Returns a list of `UnboxedClosureUpvar`s for each upvar.\n pub fn unboxed_closure_upvars<'tcx>(tcx: &ctxt<'tcx>, closure_id: ast::DefId, substs: &Substs<'tcx>)\n                                     -> Vec<UnboxedClosureUpvar<'tcx>> {\n@@ -6259,16 +6182,14 @@ impl<'tcx> mc::Typer<'tcx> for ty::ctxt<'tcx> {\n }\n \n /// The category of explicit self.\n-#[deriving(Clone, Eq, PartialEq, Show)]\n+#[deriving(Clone, Copy, Eq, PartialEq, Show)]\n pub enum ExplicitSelfCategory {\n     StaticExplicitSelfCategory,\n     ByValueExplicitSelfCategory,\n     ByReferenceExplicitSelfCategory(Region, ast::Mutability),\n     ByBoxExplicitSelfCategory,\n }\n \n-impl Copy for ExplicitSelfCategory {}\n-\n /// Pushes all the lifetimes in the given type onto the given list. A\n /// \"lifetime in a type\" is a lifetime specified by a reference or a lifetime\n /// in a list of type substitutions. This does *not* traverse into nominal\n@@ -6329,7 +6250,7 @@ pub fn accumulate_lifetimes_in_type(accumulator: &mut Vec<ty::Region>,\n }\n \n /// A free variable referred to in a function.\n-#[deriving(Encodable, Decodable)]\n+#[deriving(Copy, Encodable, Decodable)]\n pub struct Freevar {\n     /// The variable being accessed free.\n     pub def: def::Def,\n@@ -6338,8 +6259,6 @@ pub struct Freevar {\n     pub span: Span\n }\n \n-impl Copy for Freevar {}\n-\n pub type FreevarMap = NodeMap<Vec<Freevar>>;\n \n pub type CaptureModeMap = NodeMap<ast::CaptureClause>;\n@@ -6469,8 +6388,6 @@ impl DebruijnIndex {\n     }\n }\n \n-impl Copy for DebruijnIndex {}\n-\n impl<'tcx> Repr<'tcx> for AutoAdjustment<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n         match *self {\n@@ -6589,14 +6506,13 @@ pub fn make_substs_for_receiver_types<'tcx>(tcx: &ty::ctxt<'tcx>,\n     trait_ref.substs.clone().with_method(meth_tps, meth_regions)\n }\n \n+#[deriving(Copy)]\n pub enum CopyImplementationError {\n     FieldDoesNotImplementCopy(ast::Name),\n     VariantDoesNotImplementCopy(ast::Name),\n     TypeIsStructural,\n }\n \n-impl Copy for CopyImplementationError {}\n-\n pub fn can_type_implement_copy<'tcx>(tcx: &ctxt<'tcx>,\n                                      self_type: Ty<'tcx>,\n                                      param_env: &ParameterEnvironment<'tcx>)"}, {"sha": "0c014d615caf5da0b695c03ef9c2af38de065a52", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -47,26 +47,22 @@ pub struct Config {\n     pub uint_type: UintTy,\n }\n \n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, Copy, PartialEq)]\n pub enum OptLevel {\n     No, // -O0\n     Less, // -O1\n     Default, // -O2\n     Aggressive // -O3\n }\n \n-impl Copy for OptLevel {}\n-\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, Copy, PartialEq)]\n pub enum DebugInfoLevel {\n     NoDebugInfo,\n     LimitedDebugInfo,\n     FullDebugInfo,\n }\n \n-impl Copy for DebugInfoLevel {}\n-\n-#[deriving(Clone, PartialEq, PartialOrd, Ord, Eq)]\n+#[deriving(Clone, Copy, PartialEq, PartialOrd, Ord, Eq)]\n pub enum OutputType {\n     OutputTypeBitcode,\n     OutputTypeAssembly,\n@@ -75,8 +71,6 @@ pub enum OutputType {\n     OutputTypeExe,\n }\n \n-impl Copy for OutputType {}\n-\n #[deriving(Clone)]\n pub struct Options {\n     // The crate config requested for the session, which may be combined\n@@ -220,25 +214,21 @@ pub fn basic_options() -> Options {\n // users can have their own entry\n // functions that don't start a\n // scheduler\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum EntryFnType {\n     EntryMain,\n     EntryStart,\n     EntryNone,\n }\n \n-impl Copy for EntryFnType {}\n-\n-#[deriving(PartialEq, PartialOrd, Clone, Ord, Eq, Hash)]\n+#[deriving(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash)]\n pub enum CrateType {\n     CrateTypeExecutable,\n     CrateTypeDylib,\n     CrateTypeRlib,\n     CrateTypeStaticlib,\n }\n \n-impl Copy for CrateType {}\n-\n macro_rules! debugging_opts {\n     ([ $opt:ident ] $cnt:expr ) => (\n         pub const $opt: u64 = 1 << $cnt;"}, {"sha": "bc6fb1be0758f59ad85dfa1f73a7ea3cd65e5a3e", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -22,11 +22,9 @@ use syntax::visit::Visitor;\n \n // Useful type to use with `Result<>` indicate that an error has already\n // been reported to the user, so no need to continue checking.\n-#[deriving(Clone,Show)]\n+#[deriving(Clone, Copy, Show)]\n pub struct ErrorReported;\n \n-impl Copy for ErrorReported {}\n-\n pub fn time<T, U, F>(do_it: bool, what: &str, u: U, f: F) -> T where\n     F: FnOnce(U) -> T,\n {"}, {"sha": "2b05961bb6a05c0951ecffd48180465914335b11", "filename": "src/librustc/util/nodemap.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -68,11 +68,9 @@ pub mod DefIdSet {\n ///\n /// This uses FNV hashing, as described here:\n /// http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\n-#[deriving(Clone, Default)]\n+#[deriving(Clone, Copy, Default)]\n pub struct FnvHasher;\n \n-impl Copy for FnvHasher {}\n-\n #[allow(missing_copy_implementations)]\n pub struct FnvState(u64);\n "}, {"sha": "9be87b533f2960640b2be1c3e58b234fcb02a879", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -56,11 +56,9 @@ pub mod gather_loans;\n \n pub mod move_data;\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct LoanDataFlowOperator;\n \n-impl Copy for LoanDataFlowOperator {}\n-\n pub type LoanDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, LoanDataFlowOperator>;\n \n impl<'a, 'tcx, 'v> Visitor<'v> for BorrowckCtxt<'a, 'tcx> {\n@@ -325,14 +323,12 @@ impl<'tcx> LoanPath<'tcx> {\n //     b2b39e8700e37ad32b486b9a8409b50a8a53aa51#commitcomment-7892003\n static DOWNCAST_PRINTED_OPERATOR : &'static str = \" as \";\n \n-#[deriving(PartialEq, Eq, Hash, Show)]\n+#[deriving(Copy, PartialEq, Eq, Hash, Show)]\n pub enum LoanPathElem {\n     LpDeref(mc::PointerKind),    // `*LV` in doc.rs\n     LpInterior(mc::InteriorKind) // `LV.f` in doc.rs\n }\n \n-impl Copy for LoanPathElem {}\n-\n pub fn closure_to_block(closure_id: ast::NodeId,\n                         tcx: &ty::ctxt) -> ast::NodeId {\n     match tcx.map.get(closure_id) {\n@@ -494,21 +490,18 @@ pub struct BckError<'tcx> {\n     code: bckerr_code\n }\n \n+#[deriving(Copy)]\n pub enum AliasableViolationKind {\n     MutabilityViolation,\n     BorrowViolation(euv::LoanCause)\n }\n \n-impl Copy for AliasableViolationKind {}\n-\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum MovedValueUseKind {\n     MovedInUse,\n     MovedInCapture,\n }\n \n-impl Copy for MovedValueUseKind {}\n-\n ///////////////////////////////////////////////////////////////////////////\n // Misc\n "}, {"sha": "d033fd808aa40eadedd842cba911b42a4ebf529e", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -78,11 +78,9 @@ pub struct FlowedMoveData<'a, 'tcx: 'a> {\n }\n \n /// Index into `MoveData.paths`, used like a pointer\n-#[deriving(PartialEq, Eq, PartialOrd, Ord, Show)]\n+#[deriving(Copy, PartialEq, Eq, PartialOrd, Ord, Show)]\n pub struct MovePathIndex(uint);\n \n-impl Copy for MovePathIndex {}\n-\n impl MovePathIndex {\n     fn get(&self) -> uint {\n         let MovePathIndex(v) = *self; v\n@@ -100,11 +98,9 @@ static InvalidMovePathIndex: MovePathIndex =\n     MovePathIndex(uint::MAX);\n \n /// Index into `MoveData.moves`, used like a pointer\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub struct MoveIndex(uint);\n \n-impl Copy for MoveIndex {}\n-\n impl MoveIndex {\n     fn get(&self) -> uint {\n         let MoveIndex(v) = *self; v\n@@ -134,16 +130,15 @@ pub struct MovePath<'tcx> {\n     pub next_sibling: MovePathIndex,\n }\n \n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub enum MoveKind {\n     Declared,   // When declared, variables start out \"moved\".\n     MoveExpr,   // Expression or binding that moves a variable\n     MovePat,    // By-move binding\n     Captured    // Closure creation that moves a value\n }\n \n-impl Copy for MoveKind {}\n-\n+#[deriving(Copy)]\n pub struct Move {\n     /// Path being moved.\n     pub path: MovePathIndex,\n@@ -158,8 +153,7 @@ pub struct Move {\n     pub next_move: MoveIndex\n }\n \n-impl Copy for Move {}\n-\n+#[deriving(Copy)]\n pub struct Assignment {\n     /// Path being assigned.\n     pub path: MovePathIndex,\n@@ -171,8 +165,7 @@ pub struct Assignment {\n     pub span: Span,\n }\n \n-impl Copy for Assignment {}\n-\n+#[deriving(Copy)]\n pub struct VariantMatch {\n     /// downcast to the variant.\n     pub path: MovePathIndex,\n@@ -187,20 +180,14 @@ pub struct VariantMatch {\n     pub mode: euv::MatchMode\n }\n \n-impl Copy for VariantMatch {}\n-\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct MoveDataFlowOperator;\n \n-impl Copy for MoveDataFlowOperator {}\n-\n pub type MoveDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, MoveDataFlowOperator>;\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct AssignDataFlowOperator;\n \n-impl Copy for AssignDataFlowOperator {}\n-\n pub type AssignDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, AssignDataFlowOperator>;\n \n fn loan_path_is_precise(loan_path: &LoanPath) -> bool {"}, {"sha": "3427be1443b3c3b75f29a87e3d9856dd7bd7e192", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -25,15 +25,13 @@ use rustc::middle::dataflow::{DataFlowOperator, DataFlowContext, EntryOrExit};\n use rustc::middle::dataflow;\n use std::rc::Rc;\n \n-#[deriving(Show)]\n+#[deriving(Show, Copy)]\n pub enum Variant {\n     Loans,\n     Moves,\n     Assigns,\n }\n \n-impl Copy for Variant {}\n-\n impl Variant {\n     pub fn short_name(&self) -> &'static str {\n         match *self {"}, {"sha": "2eb9d2c67a7cbae9feb664bfa631ef2c13b83743", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -39,7 +39,7 @@ use std::option;\n use std::str::FromStr;\n use arena::TypedArena;\n \n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub enum PpSourceMode {\n     PpmNormal,\n     PpmExpanded,\n@@ -49,16 +49,12 @@ pub enum PpSourceMode {\n     PpmExpandedHygiene,\n }\n \n-impl Copy for PpSourceMode {}\n-\n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub enum PpMode {\n     PpmSource(PpSourceMode),\n     PpmFlowGraph,\n }\n \n-impl Copy for PpMode {}\n-\n pub fn parse_pretty(sess: &Session, name: &str) -> (PpMode, Option<UserIdentifiedItem>) {\n     let mut split = name.splitn(1, '=');\n     let first = split.next().unwrap();"}, {"sha": "3bf9c2d44f72184a78eef8c528c643768561ae3d", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -17,15 +17,14 @@ use libc::c_char;\n \n use {ValueRef, TwineRef, DebugLocRef, DiagnosticInfoRef};\n \n+#[deriving(Copy)]\n pub enum OptimizationDiagnosticKind {\n     OptimizationRemark,\n     OptimizationMissed,\n     OptimizationAnalysis,\n     OptimizationFailure,\n }\n \n-impl Copy for OptimizationDiagnosticKind {}\n-\n impl OptimizationDiagnosticKind {\n     pub fn describe(self) -> &'static str {\n         match self {\n@@ -69,15 +68,14 @@ impl OptimizationDiagnostic {\n     }\n }\n \n+#[deriving(Copy)]\n pub enum Diagnostic {\n     Optimization(OptimizationDiagnostic),\n \n     /// LLVM has other types that we do not wrap here.\n     UnknownDiagnostic(DiagnosticInfoRef),\n }\n \n-impl Copy for Diagnostic {}\n-\n impl Diagnostic {\n     pub unsafe fn unpack(di: DiagnosticInfoRef) -> Diagnostic {\n         let kind = super::LLVMGetDiagInfoKind(di);"}, {"sha": "3528b510ea1bbf6ae4b8c89bc8958baae2fe9b66", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 20, "deletions": 45, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -68,7 +68,7 @@ pub const False: Bool = 0 as Bool;\n \n // Consts for the LLVM CallConv type, pre-cast to uint.\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum CallConv {\n     CCallConv = 0,\n     FastCallConv = 8,\n@@ -78,20 +78,18 @@ pub enum CallConv {\n     X86_64_Win64 = 79,\n }\n \n-impl Copy for CallConv {}\n-\n+#[deriving(Copy)]\n pub enum Visibility {\n     LLVMDefaultVisibility = 0,\n     HiddenVisibility = 1,\n     ProtectedVisibility = 2,\n }\n \n-impl Copy for Visibility {}\n-\n // This enum omits the obsolete (and no-op) linkage types DLLImportLinkage,\n // DLLExportLinkage, GhostLinkage and LinkOnceODRAutoHideLinkage.\n // LinkerPrivateLinkage and LinkerPrivateWeakLinkage are not included either;\n // they've been removed in upstream LLVM commit r203866.\n+#[deriving(Copy)]\n pub enum Linkage {\n     ExternalLinkage = 0,\n     AvailableExternallyLinkage = 1,\n@@ -106,19 +104,15 @@ pub enum Linkage {\n     CommonLinkage = 14,\n }\n \n-impl Copy for Linkage {}\n-\n #[repr(C)]\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum DiagnosticSeverity {\n     Error,\n     Warning,\n     Remark,\n     Note,\n }\n \n-impl Copy for DiagnosticSeverity {}\n-\n bitflags! {\n     flags Attribute : u32 {\n         const ZExtAttribute = 1 << 0,\n@@ -152,6 +146,7 @@ bitflags! {\n \n \n #[repr(u64)]\n+#[deriving(Copy)]\n pub enum OtherAttribute {\n     // The following are not really exposed in\n     // the LLVM c api so instead to add these\n@@ -172,22 +167,18 @@ pub enum OtherAttribute {\n     NonNullAttribute = 1 << 44,\n }\n \n-impl Copy for OtherAttribute {}\n-\n+#[deriving(Copy)]\n pub enum SpecialAttribute {\n     DereferenceableAttribute(u64)\n }\n \n-impl Copy for SpecialAttribute {}\n-\n #[repr(C)]\n+#[deriving(Copy)]\n pub enum AttributeSet {\n     ReturnIndex = 0,\n     FunctionIndex = !0\n }\n \n-impl Copy for AttributeSet {}\n-\n pub trait AttrHelper {\n     fn apply_llfn(&self, idx: c_uint, llfn: ValueRef);\n     fn apply_callsite(&self, idx: c_uint, callsite: ValueRef);\n@@ -274,6 +265,7 @@ impl AttrBuilder {\n }\n \n // enum for the LLVM IntPredicate type\n+#[deriving(Copy)]\n pub enum IntPredicate {\n     IntEQ = 32,\n     IntNE = 33,\n@@ -287,9 +279,8 @@ pub enum IntPredicate {\n     IntSLE = 41,\n }\n \n-impl Copy for IntPredicate {}\n-\n // enum for the LLVM RealPredicate type\n+#[deriving(Copy)]\n pub enum RealPredicate {\n     RealPredicateFalse = 0,\n     RealOEQ = 1,\n@@ -309,11 +300,9 @@ pub enum RealPredicate {\n     RealPredicateTrue = 15,\n }\n \n-impl Copy for RealPredicate {}\n-\n // The LLVM TypeKind type - must stay in sync with the def of\n // LLVMTypeKind in llvm/include/llvm-c/Core.h\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n #[repr(C)]\n pub enum TypeKind {\n     Void      = 0,\n@@ -334,9 +323,8 @@ pub enum TypeKind {\n     X86_MMX   = 15,\n }\n \n-impl Copy for TypeKind {}\n-\n #[repr(C)]\n+#[deriving(Copy)]\n pub enum AtomicBinOp {\n     AtomicXchg = 0,\n     AtomicAdd  = 1,\n@@ -351,9 +339,8 @@ pub enum AtomicBinOp {\n     AtomicUMin = 10,\n }\n \n-impl Copy for AtomicBinOp {}\n-\n #[repr(C)]\n+#[deriving(Copy)]\n pub enum AtomicOrdering {\n     NotAtomic = 0,\n     Unordered = 1,\n@@ -365,17 +352,15 @@ pub enum AtomicOrdering {\n     SequentiallyConsistent = 7\n }\n \n-impl Copy for AtomicOrdering {}\n-\n // Consts for the LLVMCodeGenFileType type (in include/llvm/c/TargetMachine.h)\n #[repr(C)]\n+#[deriving(Copy)]\n pub enum FileType {\n     AssemblyFileType = 0,\n     ObjectFileType = 1\n }\n \n-impl Copy for FileType {}\n-\n+#[deriving(Copy)]\n pub enum MetadataType {\n     MD_dbg = 0,\n     MD_tbaa = 1,\n@@ -385,17 +370,14 @@ pub enum MetadataType {\n     MD_tbaa_struct = 5\n }\n \n-impl Copy for MetadataType {}\n-\n // Inline Asm Dialect\n+#[deriving(Copy)]\n pub enum AsmDialect {\n     AD_ATT   = 0,\n     AD_Intel = 1\n }\n \n-impl Copy for AsmDialect {}\n-\n-#[deriving(PartialEq, Clone)]\n+#[deriving(Copy, PartialEq, Clone)]\n #[repr(C)]\n pub enum CodeGenOptLevel {\n     CodeGenLevelNone = 0,\n@@ -404,9 +386,7 @@ pub enum CodeGenOptLevel {\n     CodeGenLevelAggressive = 3,\n }\n \n-impl Copy for CodeGenOptLevel {}\n-\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n #[repr(C)]\n pub enum RelocMode {\n     RelocDefault = 0,\n@@ -415,9 +395,8 @@ pub enum RelocMode {\n     RelocDynamicNoPic = 3,\n }\n \n-impl Copy for RelocMode {}\n-\n #[repr(C)]\n+#[deriving(Copy)]\n pub enum CodeGenModel {\n     CodeModelDefault = 0,\n     CodeModelJITDefault = 1,\n@@ -427,9 +406,8 @@ pub enum CodeGenModel {\n     CodeModelLarge = 5,\n }\n \n-impl Copy for CodeGenModel {}\n-\n #[repr(C)]\n+#[deriving(Copy)]\n pub enum DiagnosticKind {\n     DK_InlineAsm = 0,\n     DK_StackSize,\n@@ -441,8 +419,6 @@ pub enum DiagnosticKind {\n     DK_OptimizationFailure,\n }\n \n-impl Copy for DiagnosticKind {}\n-\n // Opaque pointer types\n #[allow(missing_copy_implementations)]\n pub enum Module_opaque {}\n@@ -537,6 +513,7 @@ pub mod debuginfo {\n     pub type DIArray = DIDescriptor;\n     pub type DISubrange = DIDescriptor;\n \n+    #[deriving(Copy)]\n     pub enum DIDescriptorFlags {\n       FlagPrivate            = 1 << 0,\n       FlagProtected          = 1 << 1,\n@@ -555,8 +532,6 @@ pub mod debuginfo {\n       FlagLValueReference    = 1 << 14,\n       FlagRValueReference    = 1 << 15\n     }\n-\n-    impl Copy for DIDescriptorFlags {}\n }\n \n "}, {"sha": "489d29492c227827165d597d182262575c2c0b86", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -33,7 +33,7 @@ use std::sync::{Arc, Mutex};\n use std::thread;\n use libc::{c_uint, c_int, c_void};\n \n-#[deriving(Clone, PartialEq, PartialOrd, Ord, Eq)]\n+#[deriving(Clone, Copy, PartialEq, PartialOrd, Ord, Eq)]\n pub enum OutputType {\n     OutputTypeBitcode,\n     OutputTypeAssembly,\n@@ -42,8 +42,6 @@ pub enum OutputType {\n     OutputTypeExe,\n }\n \n-impl Copy for OutputType {}\n-\n pub fn llvm_err(handler: &diagnostic::Handler, msg: String) -> ! {\n     unsafe {\n         let cstr = llvm::LLVMRustGetLastError();"}, {"sha": "37d9e5d9940730fbc3b19cf123290301a04daad5", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -61,6 +61,7 @@ macro_rules! svec {\n     })\n }\n \n+#[deriving(Copy)]\n pub enum Row {\n     Variable,\n     Enum,\n@@ -87,8 +88,6 @@ pub enum Row {\n     FnRef,\n }\n \n-impl Copy for Row {}\n-\n impl<'a> FmtStrs<'a> {\n     pub fn new(rec: Box<Recorder>, span: SpanUtils<'a>, krate: String) -> FmtStrs<'a> {\n         FmtStrs {"}, {"sha": "1401f1ad1f551352fbde3a6a5655ec1082d4f061", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -228,11 +228,9 @@ use syntax::codemap::Span;\n use syntax::fold::Folder;\n use syntax::ptr::P;\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n struct ConstantExpr<'a>(&'a ast::Expr);\n \n-impl<'a> Copy for ConstantExpr<'a> {}\n-\n impl<'a> ConstantExpr<'a> {\n     fn eq(self, other: ConstantExpr<'a>, tcx: &ty::ctxt) -> bool {\n         let ConstantExpr(expr) = self;\n@@ -301,7 +299,7 @@ impl<'a, 'tcx> Opt<'a, 'tcx> {\n     }\n }\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum BranchKind {\n     NoBranch,\n     Single,\n@@ -310,31 +308,27 @@ pub enum BranchKind {\n     CompareSliceLength\n }\n \n-impl Copy for BranchKind {}\n-\n pub enum OptResult<'blk, 'tcx: 'blk> {\n     SingleResult(Result<'blk, 'tcx>),\n     RangeResult(Result<'blk, 'tcx>, Result<'blk, 'tcx>),\n     LowerBound(Result<'blk, 'tcx>)\n }\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub enum TransBindingMode {\n     TrByCopy(/* llbinding */ ValueRef),\n     TrByMove,\n     TrByRef,\n }\n \n-impl Copy for TransBindingMode {}\n-\n /// Information about a pattern binding:\n /// - `llmatch` is a pointer to a stack slot.  The stack slot contains a\n ///   pointer into the value being matched.  Hence, llmatch has type `T**`\n ///   where `T` is the value being matched.\n /// - `trmode` is the trans binding mode\n /// - `id` is the node id of the binding\n /// - `ty` is the Rust type of the binding\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct BindingInfo<'tcx> {\n     pub llmatch: ValueRef,\n     pub trmode: TransBindingMode,\n@@ -343,8 +337,6 @@ pub struct BindingInfo<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n \n-impl<'tcx> Copy for BindingInfo<'tcx> {}\n-\n type BindingsMap<'tcx> = FnvHashMap<Ident, BindingInfo<'tcx>>;\n \n struct ArmData<'p, 'blk, 'tcx: 'blk> {"}, {"sha": "f7edb281b9eda7a18fa2320b482893dec800083a", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -281,14 +281,12 @@ struct Case<'tcx> {\n }\n \n \n-#[deriving(Eq, PartialEq, Show)]\n+#[deriving(Copy, Eq, PartialEq, Show)]\n pub enum PointerField {\n     ThinPointer(uint),\n     FatPointer(uint)\n }\n \n-impl Copy for PointerField {}\n-\n impl<'tcx> Case<'tcx> {\n     fn is_zerolen<'a>(&self, cx: &CrateContext<'a, 'tcx>, scapegoat: Ty<'tcx>)\n                       -> bool {"}, {"sha": "25fbaa6677684af6496ec59333c61721ebe8f071", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -565,10 +565,9 @@ pub fn maybe_name_value(cx: &CrateContext, v: ValueRef, s: &str) {\n \n \n // Used only for creating scalar comparison glue.\n+#[deriving(Copy)]\n pub enum scalar_type { nil_type, signed_int, unsigned_int, floating_point, }\n \n-impl Copy for scalar_type {}\n-\n pub fn compare_scalar_types<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                                         lhs: ValueRef,\n                                         rhs: ValueRef,\n@@ -1792,14 +1791,12 @@ pub fn build_return_block<'blk, 'tcx>(fcx: &FunctionContext<'blk, 'tcx>,\n     }\n }\n \n-#[deriving(Clone, Eq, PartialEq)]\n+#[deriving(Clone, Copy, Eq, PartialEq)]\n pub enum IsUnboxedClosureFlag {\n     NotUnboxedClosure,\n     IsUnboxedClosure,\n }\n \n-impl Copy for IsUnboxedClosureFlag {}\n-\n // trans_closure: Builds an LLVM function out of a source function.\n // If the function closes over its environment a closure will be\n // returned.\n@@ -2194,6 +2191,7 @@ pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> {\n \n \n /// Enum describing the origin of an LLVM `Value`, for linkage purposes.\n+#[deriving(Copy)]\n pub enum ValueOrigin {\n     /// The LLVM `Value` is in this context because the corresponding item was\n     /// assigned to the current compilation unit.\n@@ -2204,8 +2202,6 @@ pub enum ValueOrigin {\n     InlinedCopy,\n }\n \n-impl Copy for ValueOrigin {}\n-\n /// Set the appropriate linkage for an LLVM `ValueRef` (function or global).\n /// If the `llval` is the direct translation of a specific Rust item, `id`\n /// should be set to the `NodeId` of that item.  (This mapping should be"}, {"sha": "476f5e2d618fe751deb7147807a0c7fb7636b21c", "filename": "src/librustc_trans/trans/basic_block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -13,10 +13,9 @@ use llvm::{BasicBlockRef};\n use trans::value::{Users, Value};\n use std::iter::{Filter, Map};\n \n+#[deriving(Copy)]\n pub struct BasicBlock(pub BasicBlockRef);\n \n-impl Copy for BasicBlock {}\n-\n pub type Preds = Map<\n     Value,\n     BasicBlock,"}, {"sha": "ad2a6db1222c2dacbca9e47eeceec8763ef0db1d", "filename": "src/librustc_trans/trans/cabi.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -20,7 +20,7 @@ use trans::cabi_arm;\n use trans::cabi_mips;\n use trans::type_::Type;\n \n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, Copy, PartialEq)]\n pub enum ArgKind {\n     /// Pass the argument directly using the normal converted\n     /// LLVM type or by coercing to another specified type\n@@ -31,13 +31,11 @@ pub enum ArgKind {\n     Ignore,\n }\n \n-impl Copy for ArgKind {}\n-\n /// Information about how a specific C type\n /// should be passed to or returned from a function\n ///\n /// This is borrowed from clang's ABIInfo.h\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct ArgType {\n     pub kind: ArgKind,\n     /// Original LLVM type\n@@ -50,8 +48,6 @@ pub struct ArgType {\n     pub attr: option::Option<Attribute>\n }\n \n-impl Copy for ArgType {}\n-\n impl ArgType {\n     pub fn direct(ty: Type, cast: option::Option<Type>,\n                             pad: option::Option<Type>,"}, {"sha": "9b678a4f3ae9b7d502a1b8d370d1e19e7329f48e", "filename": "src/librustc_trans/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -24,7 +24,7 @@ use trans::type_::Type;\n \n use std::cmp;\n \n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, Copy, PartialEq)]\n enum RegClass {\n     NoClass,\n     Int,\n@@ -40,8 +40,6 @@ enum RegClass {\n     Memory\n }\n \n-impl Copy for RegClass {}\n-\n trait TypeMethods {\n     fn is_reg_ty(&self) -> bool;\n }"}, {"sha": "3376479b7a42dce40792de933778ba630150c132", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -57,13 +57,12 @@ use syntax::ast;\n use syntax::ast_map;\n use syntax::ptr::P;\n \n+#[deriving(Copy)]\n pub struct MethodData {\n     pub llfn: ValueRef,\n     pub llself: ValueRef,\n }\n \n-impl Copy for MethodData {}\n-\n pub enum CalleeData<'tcx> {\n     Closure(Datum<'tcx, Lvalue>),\n \n@@ -1049,13 +1048,12 @@ pub fn trans_args<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n     bcx\n }\n \n+#[deriving(Copy)]\n pub enum AutorefArg {\n     DontAutorefArg,\n     DoAutorefArg(ast::NodeId)\n }\n \n-impl Copy for AutorefArg {}\n-\n pub fn trans_arg_datum<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                    formal_arg_ty: Ty<'tcx>,\n                                    arg_datum: Datum<'tcx, Expr>,"}, {"sha": "fb2c432ef5cf4be7dca42d7039e490628bcbaa2a", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -50,13 +50,11 @@ pub struct CleanupScope<'blk, 'tcx: 'blk> {\n     cached_landing_pad: Option<BasicBlockRef>,\n }\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub struct CustomScopeIndex {\n     index: uint\n }\n \n-impl Copy for CustomScopeIndex {}\n-\n pub const EXIT_BREAK: uint = 0;\n pub const EXIT_LOOP: uint = 1;\n pub const EXIT_MAX: uint = 2;\n@@ -83,22 +81,19 @@ impl<'blk, 'tcx: 'blk> fmt::Show for CleanupScopeKind<'blk, 'tcx> {\n     }\n }\n \n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub enum EarlyExitLabel {\n     UnwindExit,\n     ReturnExit,\n     LoopExit(ast::NodeId, uint)\n }\n \n-impl Copy for EarlyExitLabel {}\n-\n+#[deriving(Copy)]\n pub struct CachedEarlyExit {\n     label: EarlyExitLabel,\n     cleanup_block: BasicBlockRef,\n }\n \n-impl Copy for CachedEarlyExit {}\n-\n pub trait Cleanup<'tcx> {\n     fn must_unwind(&self) -> bool;\n     fn clean_on_unwind(&self) -> bool;\n@@ -111,14 +106,12 @@ pub trait Cleanup<'tcx> {\n \n pub type CleanupObj<'tcx> = Box<Cleanup<'tcx>+'tcx>;\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum ScopeId {\n     AstScope(ast::NodeId),\n     CustomScope(CustomScopeIndex)\n }\n \n-impl Copy for ScopeId {}\n-\n impl<'blk, 'tcx> CleanupMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx> {\n     /// Invoked when we start to trans the code contained within a new cleanup scope.\n     fn push_ast_cleanup_scope(&self, debug_loc: NodeInfo) {\n@@ -876,6 +869,7 @@ impl EarlyExitLabel {\n ///////////////////////////////////////////////////////////////////////////\n // Cleanup types\n \n+#[deriving(Copy)]\n pub struct DropValue<'tcx> {\n     is_immediate: bool,\n     must_unwind: bool,\n@@ -884,8 +878,6 @@ pub struct DropValue<'tcx> {\n     zero: bool\n }\n \n-impl<'tcx> Copy for DropValue<'tcx> {}\n-\n impl<'tcx> Cleanup<'tcx> for DropValue<'tcx> {\n     fn must_unwind(&self) -> bool {\n         self.must_unwind\n@@ -915,21 +907,18 @@ impl<'tcx> Cleanup<'tcx> for DropValue<'tcx> {\n     }\n }\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum Heap {\n     HeapExchange\n }\n \n-impl Copy for Heap {}\n-\n+#[deriving(Copy)]\n pub struct FreeValue<'tcx> {\n     ptr: ValueRef,\n     heap: Heap,\n     content_ty: Ty<'tcx>\n }\n \n-impl<'tcx> Copy for FreeValue<'tcx> {}\n-\n impl<'tcx> Cleanup<'tcx> for FreeValue<'tcx> {\n     fn must_unwind(&self) -> bool {\n         true\n@@ -957,15 +946,14 @@ impl<'tcx> Cleanup<'tcx> for FreeValue<'tcx> {\n     }\n }\n \n+#[deriving(Copy)]\n pub struct FreeSlice {\n     ptr: ValueRef,\n     size: ValueRef,\n     align: ValueRef,\n     heap: Heap,\n }\n \n-impl Copy for FreeSlice {}\n-\n impl<'tcx> Cleanup<'tcx> for FreeSlice {\n     fn must_unwind(&self) -> bool {\n         true\n@@ -993,12 +981,11 @@ impl<'tcx> Cleanup<'tcx> for FreeSlice {\n     }\n }\n \n+#[deriving(Copy)]\n pub struct LifetimeEnd {\n     ptr: ValueRef,\n }\n \n-impl Copy for LifetimeEnd {}\n-\n impl<'tcx> Cleanup<'tcx> for LifetimeEnd {\n     fn must_unwind(&self) -> bool {\n         false"}, {"sha": "d5d954f5a907bbe9164e5bae2da131b5dad26bc3", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -102,13 +102,12 @@ use syntax::ast_util;\n //\n // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n+#[deriving(Copy)]\n pub struct EnvValue<'tcx> {\n     action: ast::CaptureClause,\n     datum: Datum<'tcx, Lvalue>\n }\n \n-impl<'tcx> Copy for EnvValue<'tcx> {}\n-\n impl<'tcx> EnvValue<'tcx> {\n     pub fn to_string<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> String {\n         format!(\"{}({})\", self.action, self.datum.to_string(ccx))"}, {"sha": "4dd4e27c9c0d4255dd052271fbebb39c87139e07", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -119,6 +119,7 @@ pub fn gensym_name(name: &str) -> PathElem {\n     PathName(token::gensym(format!(\"{}:{}\", name, num).as_slice()))\n }\n \n+#[deriving(Copy)]\n pub struct tydesc_info<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub tydesc: ValueRef,\n@@ -127,8 +128,6 @@ pub struct tydesc_info<'tcx> {\n     pub name: ValueRef,\n }\n \n-impl<'tcx> Copy for tydesc_info<'tcx> {}\n-\n /*\n  * A note on nomenclature of linking: \"extern\", \"foreign\", and \"upcall\".\n  *\n@@ -155,13 +154,12 @@ impl<'tcx> Copy for tydesc_info<'tcx> {}\n  *\n  */\n \n+#[deriving(Copy)]\n pub struct NodeInfo {\n     pub id: ast::NodeId,\n     pub span: Span,\n }\n \n-impl Copy for NodeInfo {}\n-\n pub fn expr_info(expr: &ast::Expr) -> NodeInfo {\n     NodeInfo { id: expr.id, span: expr.span }\n }\n@@ -863,7 +861,7 @@ pub fn fulfill_obligation<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n }\n \n // Key used to lookup values supplied for type parameters in an expr.\n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub enum ExprOrMethodCall {\n     // Type parameters for a path like `None::<int>`\n     ExprId(ast::NodeId),\n@@ -872,8 +870,6 @@ pub enum ExprOrMethodCall {\n     MethodCall(ty::MethodCall)\n }\n \n-impl Copy for ExprOrMethodCall {}\n-\n pub fn node_id_substs<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                   node: ExprOrMethodCall)\n                                   -> subst::Substs<'tcx> {"}, {"sha": "75473dc58bf479fe38173d6a05a13cb385ac1e44", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -33,7 +33,7 @@ use syntax::ast;\n /// describes where the value is stored, what Rust type the value has,\n /// whether it is addressed by reference, and so forth. Please refer\n /// the section on datums in `doc.rs` for more details.\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct Datum<'tcx, K> {\n     /// The llvm value.  This is either a pointer to the Rust value or\n     /// the value itself, depending on `kind` below.\n@@ -46,8 +46,6 @@ pub struct Datum<'tcx, K> {\n     pub kind: K,\n }\n \n-impl<'tcx,K:Copy> Copy for Datum<'tcx,K> {}\n-\n pub struct DatumBlock<'blk, 'tcx: 'blk, K> {\n     pub bcx: Block<'blk, 'tcx>,\n     pub datum: Datum<'tcx, K>,\n@@ -65,11 +63,9 @@ pub enum Expr {\n     LvalueExpr,\n }\n \n-#[deriving(Clone, Show)]\n+#[deriving(Clone, Copy, Show)]\n pub struct Lvalue;\n \n-impl Copy for Lvalue {}\n-\n #[deriving(Show)]\n pub struct Rvalue {\n     pub mode: RvalueMode\n@@ -86,7 +82,7 @@ impl Drop for Rvalue {\n     fn drop(&mut self) { }\n }\n \n-#[deriving(PartialEq, Eq, Hash, Show)]\n+#[deriving(Copy, PartialEq, Eq, Hash, Show)]\n pub enum RvalueMode {\n     /// `val` is a pointer to the actual value (and thus has type *T)\n     ByRef,\n@@ -95,8 +91,6 @@ pub enum RvalueMode {\n     ByValue,\n }\n \n-impl Copy for RvalueMode {}\n-\n pub fn immediate_rvalue<'tcx>(val: ValueRef, ty: Ty<'tcx>) -> Datum<'tcx, Rvalue> {\n     return Datum::new(val, ty, Rvalue::new(ByValue));\n }"}, {"sha": "9a5e6830da194b33998b58917e5612495bfc5f22", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -248,11 +248,9 @@ static FLAGS_NONE: c_uint = 0;\n //  Public Interface of debuginfo module\n //=-----------------------------------------------------------------------------\n \n-#[deriving(Show, Hash, Eq, PartialEq, Clone)]\n+#[deriving(Copy, Show, Hash, Eq, PartialEq, Clone)]\n struct UniqueTypeId(ast::Name);\n \n-impl Copy for UniqueTypeId {}\n-\n // The TypeMap is where the CrateDebugContext holds the type metadata nodes\n // created so far. The metadata nodes are indexed by UniqueTypeId, and, for\n // faster lookup, also by Ty. The TypeMap is responsible for creating\n@@ -2320,14 +2318,13 @@ impl<'tcx> VariantMemberDescriptionFactory<'tcx> {\n     }\n }\n \n+#[deriving(Copy)]\n enum EnumDiscriminantInfo {\n     RegularDiscriminant(DIType),\n     OptimizedDiscriminant(adt::PointerField),\n     NoDiscriminant\n }\n \n-impl Copy for EnumDiscriminantInfo {}\n-\n // Returns a tuple of (1) type_metadata_stub of the variant, (2) the llvm_type\n // of the variant, and (3) a MemberDescriptionFactory for producing the\n // descriptions of the fields of the variant. This is a rudimentary version of a\n@@ -3047,14 +3044,12 @@ impl MetadataCreationResult {\n     }\n }\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n enum DebugLocation {\n     KnownLocation { scope: DIScope, line: uint, col: uint },\n     UnknownLocation\n }\n \n-impl Copy for DebugLocation {}\n-\n impl DebugLocation {\n     fn new(scope: DIScope, line: uint, col: uint) -> DebugLocation {\n         KnownLocation {"}, {"sha": "dd87879b7375506d7e2a5c4256aafd1b627fb1a5", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -73,14 +73,12 @@ use std::rc::Rc;\n // These are passed around by the code generating functions to track the\n // destination of a computation's value.\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum Dest {\n     SaveIn(ValueRef),\n     Ignore,\n }\n \n-impl Copy for Dest {}\n-\n impl Dest {\n     pub fn to_string(&self, ccx: &CrateContext) -> String {\n         match *self {\n@@ -1889,7 +1887,7 @@ fn float_cast(bcx: Block,\n     } else { llsrc };\n }\n \n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub enum cast_kind {\n     cast_pointer,\n     cast_integral,\n@@ -1898,8 +1896,6 @@ pub enum cast_kind {\n     cast_other,\n }\n \n-impl Copy for cast_kind {}\n-\n pub fn cast_type_kind<'tcx>(tcx: &ty::ctxt<'tcx>, t: Ty<'tcx>) -> cast_kind {\n     match t.sty {\n         ty::ty_char        => cast_integral,"}, {"sha": "05797d74feefc50343348d8d3c50072eda0a81f6", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -54,13 +54,12 @@ mod basic_block;\n mod llrepr;\n mod cleanup;\n \n+#[deriving(Copy)]\n pub struct ModuleTranslation {\n     pub llcx: ContextRef,\n     pub llmod: ModuleRef,\n }\n \n-impl Copy for ModuleTranslation {}\n-\n pub struct CrateTranslation {\n     pub modules: Vec<ModuleTranslation>,\n     pub metadata_module: ModuleTranslation,"}, {"sha": "e09032ac2d04f1607f8d1f32f53b5230c0d9a2d3", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -89,15 +89,14 @@ pub fn make_drop_glue_unboxed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     })\n }\n \n+#[deriving(Copy)]\n pub struct VecTypes<'tcx> {\n     pub unit_ty: Ty<'tcx>,\n     pub llunit_ty: Type,\n     pub llunit_size: ValueRef,\n     pub llunit_alloc_size: u64\n }\n \n-impl<'tcx> Copy for VecTypes<'tcx> {}\n-\n impl<'tcx> VecTypes<'tcx> {\n     pub fn to_string<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> String {\n         format!(\"VecTypes {{unit_ty={}, llunit_ty={}, \\"}, {"sha": "51a0533a7bb63665437923be568343b43129952b", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -25,14 +25,12 @@ use std::cell::RefCell;\n \n use libc::c_uint;\n \n-#[deriving(Clone, PartialEq, Show)]\n+#[deriving(Clone, Copy, PartialEq, Show)]\n #[repr(C)]\n pub struct Type {\n     rf: TypeRef\n }\n \n-impl Copy for Type {}\n-\n macro_rules! ty {\n     ($e:expr) => ( Type::from_ref(unsafe { $e }))\n }"}, {"sha": "2801e0ccead6db69331983c84ada8478a0ecaf41", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -443,14 +443,13 @@ pub fn align_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>)\n }\n \n // Want refinements! (Or case classes, I guess\n+#[deriving(Copy)]\n pub enum named_ty {\n     a_struct,\n     an_enum,\n     an_unboxed_closure,\n }\n \n-impl Copy for named_ty {}\n-\n pub fn llvm_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                 what: named_ty,\n                                 did: ast::DefId,"}, {"sha": "4f9b8c5ea37c973cb9c3822cd4d49904b344a942", "filename": "src/librustc_trans/trans/value.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -14,10 +14,9 @@ use trans::basic_block::BasicBlock;\n use trans::common::Block;\n use libc::c_uint;\n \n+#[deriving(Copy)]\n pub struct Value(pub ValueRef);\n \n-impl Copy for Value {}\n-\n macro_rules! opt_val { ($e:expr) => (\n     unsafe {\n         match $e {\n@@ -126,10 +125,9 @@ impl Value {\n }\n \n /// Wrapper for LLVM UseRef\n+#[deriving(Copy)]\n pub struct Use(UseRef);\n \n-impl Copy for Use {}\n-\n impl Use {\n     pub fn get(&self) -> UseRef {\n         let Use(v) = *self; v"}, {"sha": "3b7eb22e56cc44fa931aeb43dd194f1708d6ea5e", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -46,14 +46,12 @@ pub enum MethodError {\n \n // A pared down enum describing just the places from which a method\n // candidate can arise. Used for error reporting only.\n-#[deriving(PartialOrd, Ord, PartialEq, Eq)]\n+#[deriving(Copy, PartialOrd, Ord, PartialEq, Eq)]\n pub enum CandidateSource {\n     ImplSource(ast::DefId),\n     TraitSource(/* trait id */ ast::DefId),\n }\n \n-impl Copy for CandidateSource {}\n-\n type MethodIndex = uint; // just for doc purposes\n \n /// Determines whether the type `self_ty` supports a method name `method_name` or not."}, {"sha": "bbc33826f35519af565553491638aadb448ff99b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -166,6 +166,7 @@ pub struct Inherited<'a, 'tcx: 'a> {\n \n /// When type-checking an expression, we propagate downward\n /// whatever type hint we are able in the form of an `Expectation`.\n+#[deriving(Copy)]\n enum Expectation<'tcx> {\n     /// We know nothing about what type this expression should have.\n     NoExpectation,\n@@ -177,8 +178,6 @@ enum Expectation<'tcx> {\n     ExpectCastableToType(Ty<'tcx>),\n }\n \n-impl<'tcx> Copy for Expectation<'tcx> {}\n-\n impl<'tcx> Expectation<'tcx> {\n     // Disregard \"castable to\" expectations because they\n     // can lead us astray. Consider for example `if cond\n@@ -1976,14 +1975,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n }\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum LvaluePreference {\n     PreferMutLvalue,\n     NoPreference\n }\n \n-impl Copy for LvaluePreference {}\n-\n /// Executes an autoderef loop for the type `t`. At each step, invokes `should_stop` to decide\n /// whether to terminate the loop. Returns the final type and number of derefs that it performed.\n ///\n@@ -2856,14 +2853,12 @@ pub fn lookup_tup_field_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n // Controls whether the arguments are automatically referenced. This is useful\n // for overloaded binary and unary operators.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum AutorefArgs {\n     Yes,\n     No,\n }\n \n-impl Copy for AutorefArgs {}\n-\n /// Controls whether the arguments are tupled. This is used for the call\n /// operator.\n ///"}, {"sha": "700d12116060c1bd62bd9127cf974566389d24ef", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -343,6 +343,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Resolution reason.\n \n+#[deriving(Copy)]\n enum ResolveReason {\n     ResolvingExpr(Span),\n     ResolvingLocal(Span),\n@@ -351,8 +352,6 @@ enum ResolveReason {\n     ResolvingUnboxedClosure(ast::DefId),\n }\n \n-impl Copy for ResolveReason {}\n-\n impl ResolveReason {\n     fn span(&self, tcx: &ty::ctxt) -> Span {\n         match *self {"}, {"sha": "4612acb04b2f021cfaae0e25bd85a75cf1eed8c8", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -490,6 +490,7 @@ fn convert_associated_type<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     }\n }\n \n+#[deriving(Copy)]\n enum ConvertMethodContext<'a> {\n     /// Used when converting implementation methods.\n     ImplConvertMethodContext,\n@@ -498,8 +499,6 @@ enum ConvertMethodContext<'a> {\n     TraitConvertMethodContext(ast::DefId, &'a [ast::TraitItem]),\n }\n \n-impl<'a> Copy for ConvertMethodContext<'a> {}\n-\n fn convert_methods<'a,'tcx,'i,I>(ccx: &CrateCtxt<'a, 'tcx>,\n                                  convert_method_context: ConvertMethodContext,\n                                  container: ImplOrTraitItemContainer,"}, {"sha": "f43e8579022e958cd9c1e4ecd9c6ea9be34aaf2e", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -36,10 +36,9 @@ pub trait RegionScope {\n \n // A scope in which all regions must be explicitly named. This is used\n // for types that appear in structs and so on.\n+#[deriving(Copy)]\n pub struct ExplicitRscope;\n \n-impl Copy for ExplicitRscope {}\n-\n impl RegionScope for ExplicitRscope {\n     fn default_region_bound(&self, _span: Span) -> Option<ty::Region> {\n         None"}, {"sha": "ef0d1bc3859fae53b63ab8a86a1fbf3e2f06aa3b", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -229,19 +229,16 @@ pub fn infer_variance(tcx: &ty::ctxt) {\n \n type VarianceTermPtr<'a> = &'a VarianceTerm<'a>;\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n struct InferredIndex(uint);\n \n-impl Copy for InferredIndex {}\n-\n+#[deriving(Copy)]\n enum VarianceTerm<'a> {\n     ConstantTerm(ty::Variance),\n     TransformTerm(VarianceTermPtr<'a>, VarianceTermPtr<'a>),\n     InferredTerm(InferredIndex),\n }\n \n-impl<'a> Copy for VarianceTerm<'a> {}\n-\n impl<'a> fmt::Show for VarianceTerm<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -268,14 +265,12 @@ struct TermsContext<'a, 'tcx: 'a> {\n     inferred_infos: Vec<InferredInfo<'a>> ,\n }\n \n-#[deriving(Show, PartialEq)]\n+#[deriving(Copy, Show, PartialEq)]\n enum ParamKind {\n     TypeParam,\n     RegionParam\n }\n \n-impl Copy for ParamKind {}\n-\n struct InferredInfo<'a> {\n     item_id: ast::NodeId,\n     kind: ParamKind,\n@@ -427,13 +422,12 @@ struct ConstraintContext<'a, 'tcx: 'a> {\n \n /// Declares that the variable `decl_id` appears in a location with\n /// variance `variance`.\n+#[deriving(Copy)]\n struct Constraint<'a> {\n     inferred: InferredIndex,\n     variance: &'a VarianceTerm<'a>,\n }\n \n-impl<'a> Copy for Constraint<'a> {}\n-\n fn add_constraints_from_crate<'a, 'tcx>(terms_cx: TermsContext<'a, 'tcx>,\n                                         krate: &ast::Crate)\n                                         -> ConstraintContext<'a, 'tcx> {"}, {"sha": "ed92320279591db599b9a3e67c807aca881100bb", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -1188,7 +1188,7 @@ pub enum Type {\n     PolyTraitRef(Vec<TyParamBound>),\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash)]\n+#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, Eq, Hash)]\n pub enum PrimitiveType {\n     Int, I8, I16, I32, I64,\n     Uint, U8, U16, U32, U64,\n@@ -1200,9 +1200,7 @@ pub enum PrimitiveType {\n     PrimitiveTuple,\n }\n \n-impl Copy for PrimitiveType {}\n-\n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, Copy, Encodable, Decodable)]\n pub enum TypeKind {\n     TypeEnum,\n     TypeFunction,\n@@ -1215,8 +1213,6 @@ pub enum TypeKind {\n     TypeTypedef,\n }\n \n-impl Copy for TypeKind {}\n-\n impl PrimitiveType {\n     fn from_str(s: &str) -> Option<PrimitiveType> {\n         match s.as_slice() {\n@@ -1873,14 +1869,12 @@ impl Clean<Item> for doctree::Constant {\n     }\n }\n \n-#[deriving(Show, Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Copy, Show, Clone, Encodable, Decodable, PartialEq)]\n pub enum Mutability {\n     Mutable,\n     Immutable,\n }\n \n-impl Copy for Mutability {}\n-\n impl Clean<Mutability> for ast::Mutability {\n     fn clean(&self, _: &DocContext) -> Mutability {\n         match self {"}, {"sha": "83552884d7ffaa00eca8d1da99d8a8f6f5e94cb8", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -70,7 +70,7 @@ impl Module {\n     }\n }\n \n-#[deriving(Show, Clone, Encodable, Decodable)]\n+#[deriving(Copy, Show, Clone, Encodable, Decodable)]\n pub enum StructType {\n     /// A normal struct\n     Plain,\n@@ -82,8 +82,6 @@ pub enum StructType {\n     Unit\n }\n \n-impl Copy for StructType {}\n-\n pub enum TypeBound {\n     RegionBound,\n     TraitBound(ast::TraitRef)"}, {"sha": "5572bcb6aa8f0053fe9bcac024c3225975928de2", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -29,15 +29,19 @@ use html::render::{cache, CURRENT_LOCATION_KEY};\n \n /// Helper to render an optional visibility with a space after it (if the\n /// visibility is preset)\n+#[deriving(Copy)]\n pub struct VisSpace(pub Option<ast::Visibility>);\n /// Similarly to VisSpace, this structure is used to render a function style with a\n /// space after it.\n+#[deriving(Copy)]\n pub struct UnsafetySpace(pub ast::Unsafety);\n /// Wrapper struct for properly emitting a method declaration.\n pub struct Method<'a>(pub &'a clean::SelfTy, pub &'a clean::FnDecl);\n /// Similar to VisSpace, but used for mutability\n+#[deriving(Copy)]\n pub struct MutableSpace(pub clean::Mutability);\n /// Similar to VisSpace, but used for mutability\n+#[deriving(Copy)]\n pub struct RawMutableSpace(pub clean::Mutability);\n /// Wrapper struct for properly emitting the stability level.\n pub struct Stability<'a>(pub &'a Option<clean::Stability>);\n@@ -48,11 +52,6 @@ pub struct WhereClause<'a>(pub &'a clean::Generics);\n /// Wrapper struct for emitting type parameter bounds.\n pub struct TyParamBounds<'a>(pub &'a [clean::TyParamBound]);\n \n-impl Copy for VisSpace {}\n-impl Copy for UnsafetySpace {}\n-impl Copy for MutableSpace {}\n-impl Copy for RawMutableSpace {}\n-\n impl VisSpace {\n     pub fn get(&self) -> Option<ast::Visibility> {\n         let VisSpace(v) = *self; v"}, {"sha": "7c346539f6a79759fd7691efb51df7f3a4121e2e", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -19,7 +19,7 @@ use clean;\n /// discriminants. JavaScript then is used to decode them into the original value.\n /// Consequently, every change to this type should be synchronized to\n /// the `itemTypes` mapping table in `static/main.js`.\n-#[deriving(PartialEq, Clone)]\n+#[deriving(Copy, PartialEq, Clone)]\n pub enum ItemType {\n     Module          = 0,\n     Struct          = 1,\n@@ -41,8 +41,6 @@ pub enum ItemType {\n     Constant        = 18,\n }\n \n-impl Copy for ItemType {}\n-\n impl ItemType {\n     pub fn from_item(item: &clean::Item) -> ItemType {\n         match item.inner {"}, {"sha": "8831b5e7d96fe5db5675c3f3055bc1abb8a3fe9f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -225,13 +225,12 @@ struct Source<'a>(&'a str);\n // Helper structs for rendering items/sidebars and carrying along contextual\n // information\n \n+#[deriving(Copy)]\n struct Item<'a> {\n     cx: &'a Context,\n     item: &'a clean::Item,\n }\n \n-impl<'a> Copy for Item<'a> {}\n-\n struct Sidebar<'a> { cx: &'a Context, item: &'a clean::Item, }\n \n /// Struct representing one entry in the JS search index. These are all emitted"}, {"sha": "2f3079f75b923f1106a24b90cd273013f2fa05b1", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -27,6 +27,7 @@ use html::render::cache;\n \n #[deriving(Zero, Encodable, Decodable, PartialEq, Eq)]\n /// The counts for each stability level.\n+#[deriving(Copy)]\n pub struct Counts {\n     pub deprecated: uint,\n     pub experimental: uint,\n@@ -39,8 +40,6 @@ pub struct Counts {\n     pub unmarked: uint,\n }\n \n-impl Copy for Counts {}\n-\n impl Add<Counts, Counts> for Counts {\n     fn add(self, other: Counts) -> Counts {\n         Counts {"}, {"sha": "f1dffa55bb01a29560115192cdf81f35fdc9120b", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -19,26 +19,25 @@ use std::fmt;\n use std::error;\n \n /// Available encoding character sets\n+#[deriving(Copy)]\n pub enum CharacterSet {\n     /// The standard character set (uses `+` and `/`)\n     Standard,\n     /// The URL safe character set (uses `-` and `_`)\n     UrlSafe\n }\n \n-impl Copy for CharacterSet {}\n-\n /// Available newline types\n+#[deriving(Copy)]\n pub enum Newline {\n     /// A linefeed (i.e. Unix-style newline)\n     LF,\n     /// A carriage return and a linefeed (i.e. Windows-style newline)\n     CRLF\n }\n \n-impl Copy for Newline {}\n-\n /// Contains configuration parameters for `to_base64`.\n+#[deriving(Copy)]\n pub struct Config {\n     /// Character set to use\n     pub char_set: CharacterSet,\n@@ -50,8 +49,6 @@ pub struct Config {\n     pub line_length: Option<uint>\n }\n \n-impl Copy for Config {}\n-\n /// Configuration for RFC 4648 standard base64 encoding\n pub static STANDARD: Config =\n     Config {char_set: Standard, newline: Newline::CRLF, pad: true, line_length: None};\n@@ -180,15 +177,14 @@ pub trait FromBase64 for Sized? {\n }\n \n /// Errors that can occur when decoding a base64 encoded string\n+#[deriving(Copy)]\n pub enum FromBase64Error {\n     /// The input contained a character not part of the base64 format\n     InvalidBase64Byte(u8, uint),\n     /// The input had an invalid length\n     InvalidBase64Length,\n }\n \n-impl Copy for FromBase64Error {}\n-\n impl fmt::Show for FromBase64Error {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "977a31c240bd31e8333ca41439f772b706a3b784", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -61,15 +61,14 @@ pub trait FromHex for Sized? {\n }\n \n /// Errors that can occur when decoding a hex encoded string\n+#[deriving(Copy)]\n pub enum FromHexError {\n     /// The input contained a character not part of the hex format\n     InvalidHexCharacter(char, uint),\n     /// The input had an invalid length\n     InvalidHexLength,\n }\n \n-impl Copy for FromHexError {}\n-\n impl fmt::Show for FromHexError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "d3d1aa1d788791da44619bd8c2fd8fafab9423bb", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -226,7 +226,7 @@ pub type Array = Vec<Json>;\n pub type Object = BTreeMap<string::String, Json>;\n \n /// The errors that can arise while parsing a JSON stream.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, Copy, PartialEq)]\n pub enum ErrorCode {\n     InvalidSyntax,\n     InvalidNumber,\n@@ -247,17 +247,13 @@ pub enum ErrorCode {\n     NotUtf8,\n }\n \n-impl Copy for ErrorCode {}\n-\n-#[deriving(Clone, PartialEq, Show)]\n+#[deriving(Clone, Copy, PartialEq, Show)]\n pub enum ParserError {\n     /// msg, line, col\n     SyntaxError(ErrorCode, uint, uint),\n     IoError(io::IoErrorKind, &'static str),\n }\n \n-impl Copy for ParserError {}\n-\n // Builder and Parser have the same errors.\n pub type BuilderError = ParserError;\n "}, {"sha": "2c4dc5313bbfa0af2569e54082ea4c468a56d162", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -18,7 +18,6 @@\n use core::kinds::Sized;\n use fmt;\n use iter::IteratorExt;\n-use kinds::Copy;\n use mem;\n use ops::FnMut;\n use option::Option;\n@@ -29,11 +28,9 @@ use string::{String, IntoString};\n use vec::Vec;\n \n /// Datatype to hold one ascii character. It wraps a `u8`, with the highest bit always zero.\n-#[deriving(Clone, PartialEq, PartialOrd, Ord, Eq, Hash)]\n+#[deriving(Clone, Copy, PartialEq, PartialOrd, Ord, Eq, Hash)]\n pub struct Ascii { chr: u8 }\n \n-impl Copy for Ascii {}\n-\n impl Ascii {\n     /// Converts an ascii character into a `u8`.\n     #[inline]"}, {"sha": "9043cb8c7d6f5f6b40632d10e27b0716a81fe4e7", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -391,7 +391,7 @@ pub struct SyncSender<T> {\n \n /// This enumeration is the list of the possible reasons that try_recv could not\n /// return data when called.\n-#[deriving(PartialEq, Clone, Show)]\n+#[deriving(PartialEq, Clone, Copy, Show)]\n #[experimental = \"this is likely to be removed in changing try_recv()\"]\n pub enum TryRecvError {\n     /// This channel is currently empty, but the sender(s) have not yet\n@@ -402,8 +402,6 @@ pub enum TryRecvError {\n     Disconnected,\n }\n \n-impl Copy for TryRecvError {}\n-\n /// This enumeration is the list of the possible error outcomes for the\n /// `SyncSender::try_send` method.\n #[deriving(PartialEq, Clone, Show)]"}, {"sha": "291f384d619d9726adcc8bdf75eb4617959cc186", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -215,7 +215,6 @@ pub mod dl {\n \n     use c_str::{CString, ToCStr};\n     use libc;\n-    use kinds::Copy;\n     use ops::FnOnce;\n     use ptr;\n     use result::*;\n@@ -265,15 +264,14 @@ pub mod dl {\n         dlclose(handle as *mut libc::c_void); ()\n     }\n \n+    #[deriving(Copy)]\n     pub enum Rtld {\n         Lazy = 1,\n         Now = 2,\n         Global = 256,\n         Local = 0,\n     }\n \n-    impl Copy for Rtld {}\n-\n     #[link_name = \"dl\"]\n     extern {\n         fn dlopen(filename: *const libc::c_char,"}, {"sha": "dbf61b132e08b3a556177a4a40f5206a23edcc5d", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -232,7 +232,6 @@ use error::{FromError, Error};\n use fmt;\n use int;\n use iter::{Iterator, IteratorExt};\n-use kinds::Copy;\n use mem::transmute;\n use ops::{BitOr, BitXor, BitAnd, Sub, Not, FnOnce};\n use option::Option;\n@@ -367,7 +366,7 @@ impl FromError<IoError> for Box<Error> {\n }\n \n /// A list specifying general categories of I/O error.\n-#[deriving(PartialEq, Eq, Clone, Show)]\n+#[deriving(Copy, PartialEq, Eq, Clone, Show)]\n pub enum IoErrorKind {\n     /// Any I/O error not part of this list.\n     OtherIoError,\n@@ -422,8 +421,6 @@ pub enum IoErrorKind {\n     NoProgress,\n }\n \n-impl Copy for IoErrorKind {}\n-\n /// A trait that lets you add a `detail` to an IoError easily\n trait UpdateIoError<T> {\n     /// Returns an IoError with updated description and detail\n@@ -1561,6 +1558,7 @@ impl<T: Buffer> BufferPrelude for T {\n \n /// When seeking, the resulting cursor is offset from a base by the offset given\n /// to the `seek` function. The base used is specified by this enumeration.\n+#[deriving(Copy)]\n pub enum SeekStyle {\n     /// Seek from the beginning of the stream\n     SeekSet,\n@@ -1570,8 +1568,6 @@ pub enum SeekStyle {\n     SeekCur,\n }\n \n-impl Copy for SeekStyle {}\n-\n /// An object implementing `Seek` internally has some form of cursor which can\n /// be moved within a stream of bytes. The stream typically has a fixed size,\n /// allowing seeking relative to either end.\n@@ -1685,6 +1681,7 @@ pub fn standard_error(kind: IoErrorKind) -> IoError {\n /// A mode specifies how a file should be opened or created. These modes are\n /// passed to `File::open_mode` and are used to control where the file is\n /// positioned when it is initially opened.\n+#[deriving(Copy)]\n pub enum FileMode {\n     /// Opens a file positioned at the beginning.\n     Open,\n@@ -1694,10 +1691,9 @@ pub enum FileMode {\n     Truncate,\n }\n \n-impl Copy for FileMode {}\n-\n /// Access permissions with which the file should be opened. `File`s\n /// opened with `Read` will return an error if written to.\n+#[deriving(Copy)]\n pub enum FileAccess {\n     /// Read-only access, requests to write will result in an error\n     Read,\n@@ -1707,10 +1703,8 @@ pub enum FileAccess {\n     ReadWrite,\n }\n \n-impl Copy for FileAccess {}\n-\n /// Different kinds of files which can be identified by a call to stat\n-#[deriving(PartialEq, Show, Hash, Clone)]\n+#[deriving(Copy, PartialEq, Show, Hash, Clone)]\n pub enum FileType {\n     /// This is a normal file, corresponding to `S_IFREG`\n     RegularFile,\n@@ -1731,8 +1725,6 @@ pub enum FileType {\n     Unknown,\n }\n \n-impl Copy for FileType {}\n-\n /// A structure used to describe metadata information about a file. This\n /// structure is created through the `stat` method on a `Path`.\n ///\n@@ -1750,7 +1742,7 @@ impl Copy for FileType {}\n /// println!(\"byte size: {}\", info.size);\n /// # }\n /// ```\n-#[deriving(Hash)]\n+#[deriving(Copy, Hash)]\n pub struct FileStat {\n     /// The size of the file, in bytes\n     pub size: u64,\n@@ -1784,14 +1776,12 @@ pub struct FileStat {\n     pub unstable: UnstableFileStat,\n }\n \n-impl Copy for FileStat {}\n-\n /// This structure represents all of the possible information which can be\n /// returned from a `stat` syscall which is not contained in the `FileStat`\n /// structure. This information is not necessarily platform independent, and may\n /// have different meanings or no meaning at all on some platforms.\n #[unstable]\n-#[deriving(Hash)]\n+#[deriving(Copy, Hash)]\n pub struct UnstableFileStat {\n     /// The ID of the device containing the file.\n     pub device: u64,\n@@ -1815,8 +1805,6 @@ pub struct UnstableFileStat {\n     pub gen: u64,\n }\n \n-impl Copy for UnstableFileStat {}\n-\n bitflags! {\n     #[doc = \"A set of permissions for a file or directory is represented\"]\n     #[doc = \"by a set of flags which are or'd together.\"]"}, {"sha": "69ba64d856e7f325b2781f98dfef299ea7b4c485", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -22,23 +22,22 @@ pub use self::Protocol::*;\n use iter::IteratorExt;\n use io::{IoResult};\n use io::net::ip::{SocketAddr, IpAddr};\n-use kinds::Copy;\n use option::Option;\n use option::Option::{Some, None};\n use sys;\n use vec::Vec;\n \n /// Hints to the types of sockets that are desired when looking up hosts\n+#[deriving(Copy)]\n pub enum SocketType {\n     Stream, Datagram, Raw\n }\n \n-impl Copy for SocketType {}\n-\n /// Flags which can be or'd into the `flags` field of a `Hint`. These are used\n /// to manipulate how a query is performed.\n ///\n /// The meaning of each of these flags can be found with `man -s 3 getaddrinfo`\n+#[deriving(Copy)]\n pub enum Flag {\n     AddrConfig,\n     All,\n@@ -49,30 +48,27 @@ pub enum Flag {\n     V4Mapped,\n }\n \n-impl Copy for Flag {}\n-\n /// A transport protocol associated with either a hint or a return value of\n /// `lookup`\n+#[deriving(Copy)]\n pub enum Protocol {\n     TCP, UDP\n }\n \n-impl Copy for Protocol {}\n-\n /// This structure is used to provide hints when fetching addresses for a\n /// remote host to control how the lookup is performed.\n ///\n /// For details on these fields, see their corresponding definitions via\n /// `man -s 3 getaddrinfo`\n+#[deriving(Copy)]\n pub struct Hint {\n     pub family: uint,\n     pub socktype: Option<SocketType>,\n     pub protocol: Option<Protocol>,\n     pub flags: uint,\n }\n \n-impl Copy for Hint {}\n-\n+#[deriving(Copy)]\n pub struct Info {\n     pub address: SocketAddr,\n     pub family: uint,\n@@ -81,8 +77,6 @@ pub struct Info {\n     pub flags: uint,\n }\n \n-impl Copy for Info {}\n-\n /// Easy name resolution. Given a hostname, returns the list of IP addresses for\n /// that hostname.\n pub fn get_host_addresses(host: &str) -> IoResult<Vec<IpAddr>> {"}, {"sha": "71776b6c46af79cd1daef6ed707872694287deef", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -18,7 +18,6 @@\n pub use self::IpAddr::*;\n \n use fmt;\n-use kinds::Copy;\n use io::{mod, IoResult, IoError};\n use io::net;\n use iter::{Iterator, IteratorExt};\n@@ -32,14 +31,12 @@ use vec::Vec;\n \n pub type Port = u16;\n \n-#[deriving(PartialEq, Eq, Clone, Hash)]\n+#[deriving(Copy, PartialEq, Eq, Clone, Hash)]\n pub enum IpAddr {\n     Ipv4Addr(u8, u8, u8, u8),\n     Ipv6Addr(u16, u16, u16, u16, u16, u16, u16, u16)\n }\n \n-impl Copy for IpAddr {}\n-\n impl fmt::Show for IpAddr {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -65,14 +62,12 @@ impl fmt::Show for IpAddr {\n     }\n }\n \n-#[deriving(PartialEq, Eq, Clone, Hash)]\n+#[deriving(Copy, PartialEq, Eq, Clone, Hash)]\n pub struct SocketAddr {\n     pub ip: IpAddr,\n     pub port: Port,\n }\n \n-impl Copy for SocketAddr {}\n-\n impl fmt::Show for SocketAddr {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.ip {"}, {"sha": "9da1117f2272aab95a6f1ac6429cc0df6fa33345", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -461,7 +461,7 @@ pub struct ProcessOutput {\n }\n \n /// Describes what to do with a standard io stream for a child process.\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub enum StdioContainer {\n     /// This stream will be ignored. This is the equivalent of attaching the\n     /// stream to `/dev/null`\n@@ -481,11 +481,9 @@ pub enum StdioContainer {\n     CreatePipe(bool /* readable */, bool /* writable */),\n }\n \n-impl Copy for StdioContainer {}\n-\n /// Describes the result of a process after it has terminated.\n /// Note that Windows have no signals, so the result is usually ExitStatus.\n-#[deriving(PartialEq, Eq, Clone)]\n+#[deriving(PartialEq, Eq, Clone, Copy)]\n pub enum ProcessExit {\n     /// Normal termination with an exit status.\n     ExitStatus(int),\n@@ -494,8 +492,6 @@ pub enum ProcessExit {\n     ExitSignal(int),\n }\n \n-impl Copy for ProcessExit {}\n-\n impl fmt::Show for ProcessExit {\n     /// Format a ProcessExit enum, to nicely present the information.\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "18fabcbd1a2a4792e6afc311d389985a0bdcd126", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -81,20 +81,18 @@ impl<R: Buffer> Buffer for LimitReader<R> {\n }\n \n /// A `Writer` which ignores bytes written to it, like /dev/null.\n+#[deriving(Copy)]\n pub struct NullWriter;\n \n-impl Copy for NullWriter {}\n-\n impl Writer for NullWriter {\n     #[inline]\n     fn write(&mut self, _buf: &[u8]) -> io::IoResult<()> { Ok(()) }\n }\n \n /// A `Reader` which returns an infinite stream of 0 bytes, like /dev/zero.\n+#[deriving(Copy)]\n pub struct ZeroReader;\n \n-impl Copy for ZeroReader {}\n-\n impl Reader for ZeroReader {\n     #[inline]\n     fn read(&mut self, buf: &mut [u8]) -> io::IoResult<uint> {\n@@ -113,10 +111,9 @@ impl Buffer for ZeroReader {\n }\n \n /// A `Reader` which is always at EOF, like /dev/null.\n+#[deriving(Copy)]\n pub struct NullReader;\n \n-impl Copy for NullReader {}\n-\n impl Reader for NullReader {\n     #[inline]\n     fn read(&mut self, _buf: &mut [u8]) -> io::IoResult<uint> {"}, {"sha": "016c4bd532a17e52c7dbf54796139a8b64e1bd43", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -17,7 +17,6 @@ pub use self::SignificantDigits::*;\n pub use self::SignFormat::*;\n \n use char::{mod, Char};\n-use kinds::Copy;\n use num::{mod, Int, Float, FPNaN, FPInfinite, ToPrimitive};\n use ops::FnMut;\n use slice::{SliceExt, CloneSliceExt};\n@@ -26,6 +25,7 @@ use string::String;\n use vec::Vec;\n \n /// A flag that specifies whether to use exponential (scientific) notation.\n+#[deriving(Copy)]\n pub enum ExponentFormat {\n     /// Do not use exponential notation.\n     ExpNone,\n@@ -38,10 +38,9 @@ pub enum ExponentFormat {\n     ExpBin,\n }\n \n-impl Copy for ExponentFormat {}\n-\n /// The number of digits used for emitting the fractional part of a number, if\n /// any.\n+#[deriving(Copy)]\n pub enum SignificantDigits {\n     /// All calculable digits will be printed.\n     ///\n@@ -57,9 +56,8 @@ pub enum SignificantDigits {\n     DigExact(uint)\n }\n \n-impl Copy for SignificantDigits {}\n-\n /// How to emit the sign of a number.\n+#[deriving(Copy)]\n pub enum SignFormat {\n     /// No sign will be printed. The exponent sign will also be emitted.\n     SignNone,\n@@ -71,8 +69,6 @@ pub enum SignFormat {\n     SignAll,\n }\n \n-impl Copy for SignFormat {}\n-\n /// Converts an integral number to its string representation as a byte vector.\n /// This is meant to be a common base implementation for all integral string\n /// conversion functions like `to_string()` or `to_str_radix()`."}, {"sha": "dcc73f7844a4987b57d02f7523df7fe1558ddc44", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -361,6 +361,7 @@ pub fn join_paths<T: BytesContainer>(paths: &[T]) -> Result<Vec<u8>, &'static st\n }\n \n /// A low-level OS in-memory pipe.\n+#[deriving(Copy)]\n pub struct Pipe {\n     /// A file descriptor representing the reading end of the pipe. Data written\n     /// on the `out` file descriptor can be read from this file descriptor.\n@@ -370,8 +371,6 @@ pub struct Pipe {\n     pub writer: c_int,\n }\n \n-impl Copy for Pipe {}\n-\n /// Creates a new low-level OS in-memory pipe.\n ///\n /// This function can fail to succeed if there are no more resources available\n@@ -861,6 +860,7 @@ pub enum MapOption {\n impl Copy for MapOption {}\n \n /// Possible errors when creating a map.\n+#[deriving(Copy)]\n pub enum MapError {\n     /// # The following are POSIX-specific\n     ///\n@@ -905,8 +905,6 @@ pub enum MapError {\n     ErrMapViewOfFile(uint)\n }\n \n-impl Copy for MapError {}\n-\n impl fmt::Show for MapError {\n     fn fmt(&self, out: &mut fmt::Formatter) -> fmt::Result {\n         let str = match *self {"}, {"sha": "b498b3e8ad08350cc9970bda56077d7e766cc11e", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -22,7 +22,6 @@ use hash;\n use io::Writer;\n use iter::{AdditiveIterator, DoubleEndedIteratorExt, Extend};\n use iter::{Iterator, IteratorExt, Map};\n-use kinds::Copy;\n use mem;\n use option::Option;\n use option::Option::{Some, None};\n@@ -970,7 +969,7 @@ pub fn is_sep_byte_verbatim(u: &u8) -> bool {\n }\n \n /// Prefix types for Path\n-#[deriving(PartialEq, Clone, Show)]\n+#[deriving(Copy, PartialEq, Clone, Show)]\n pub enum PathPrefix {\n     /// Prefix `\\\\?\\`, uint is the length of the following component\n     VerbatimPrefix(uint),\n@@ -986,8 +985,6 @@ pub enum PathPrefix {\n     DiskPrefix\n }\n \n-impl Copy for PathPrefix {}\n-\n fn parse_prefix<'a>(mut path: &'a str) -> Option<PathPrefix> {\n     if path.starts_with(\"\\\\\\\\\") {\n         // \\\\"}, {"sha": "0035e5747aa6915c03c8a65ab93150a7ec764c26", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -225,7 +225,6 @@ use cell::RefCell;\n use clone::Clone;\n use io::IoResult;\n use iter::{Iterator, IteratorExt};\n-use kinds::Copy;\n use mem;\n use rc::Rc;\n use result::Result::{Ok, Err};\n@@ -246,12 +245,11 @@ pub mod reader;\n \n /// The standard RNG. This is designed to be efficient on the current\n /// platform.\n+#[deriving(Copy)]\n pub struct StdRng {\n     rng: IsaacWordRng,\n }\n \n-impl Copy for StdRng {}\n-\n impl StdRng {\n     /// Create a randomly seeded instance of `StdRng`.\n     ///"}, {"sha": "f572141642cbfe807f22952022aba07c6e2cd1a2", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -384,7 +384,6 @@ pub mod eabi {\n     pub use self::EXCEPTION_DISPOSITION::*;\n     use rt::libunwind as uw;\n     use libc::{c_void, c_int};\n-    use kinds::Copy;\n \n     #[repr(C)]\n     #[allow(missing_copy_implementations)]\n@@ -397,15 +396,14 @@ pub mod eabi {\n     pub struct DISPATCHER_CONTEXT;\n \n     #[repr(C)]\n+    #[deriving(Copy)]\n     pub enum EXCEPTION_DISPOSITION {\n         ExceptionContinueExecution,\n         ExceptionContinueSearch,\n         ExceptionNestedException,\n         ExceptionCollidedUnwind\n     }\n \n-    impl Copy for EXCEPTION_DISPOSITION {}\n-\n     type _Unwind_Personality_Fn =\n         extern \"C\" fn(\n             version: c_int,"}, {"sha": "7cb14e8e4bc62fe33d057509cbb5a6cfeee42679", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -13,7 +13,6 @@\n #![experimental]\n \n use {fmt, i64};\n-use kinds::Copy;\n use ops::{Add, Sub, Mul, Div, Neg, FnOnce};\n use option::Option;\n use option::Option::{Some, None};\n@@ -47,7 +46,7 @@ macro_rules! try_opt {\n \n /// ISO 8601 time duration with nanosecond precision.\n /// This also allows for the negative duration; see individual methods for details.\n-#[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n+#[deriving(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n pub struct Duration {\n     secs: i64,\n     nanos: i32, // Always 0 <= nanos < NANOS_PER_SEC\n@@ -65,8 +64,6 @@ pub const MAX: Duration = Duration {\n     nanos: (i64::MAX % MILLIS_PER_SEC) as i32 * NANOS_PER_MILLI\n };\n \n-impl Copy for Duration {}\n-\n impl Duration {\n     /// Makes a new `Duration` with given number of weeks.\n     /// Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60), with overflow checks."}, {"sha": "70bad90aea1c0e0149637b3e5fe008730491bc4a", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -15,7 +15,7 @@ pub use self::AbiArchitecture::*;\n \n use std::fmt;\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum Os {\n     OsWindows,\n     OsMacos,\n@@ -26,9 +26,7 @@ pub enum Os {\n     OsDragonfly,\n }\n \n-impl Copy for Os {}\n-\n-#[deriving(PartialEq, Eq, Hash, Encodable, Decodable, Clone)]\n+#[deriving(Copy, PartialEq, Eq, Hash, Encodable, Decodable, Clone)]\n pub enum Abi {\n     // NB: This ordering MUST match the AbiDatas array below.\n     // (This is ensured by the test indices_are_correct().)\n@@ -48,10 +46,8 @@ pub enum Abi {\n     RustCall,\n }\n \n-impl Copy for Abi {}\n-\n #[allow(non_camel_case_types)]\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum Architecture {\n     X86,\n     X86_64,\n@@ -60,17 +56,15 @@ pub enum Architecture {\n     Mipsel\n }\n \n-impl Copy for Architecture {}\n-\n+#[deriving(Copy)]\n pub struct AbiData {\n     abi: Abi,\n \n     // Name of this ABI as we like it called.\n     name: &'static str,\n }\n \n-impl Copy for AbiData {}\n-\n+#[deriving(Copy)]\n pub enum AbiArchitecture {\n     /// Not a real ABI (e.g., intrinsic)\n     RustArch,\n@@ -80,9 +74,6 @@ pub enum AbiArchitecture {\n     Archs(u32)\n }\n \n-#[allow(non_upper_case_globals)]\n-impl Copy for AbiArchitecture {}\n-\n #[allow(non_upper_case_globals)]\n static AbiDatas: &'static [AbiData] = &[\n     // Platform-specific ABIs"}, {"sha": "be8f32bc4d5d8e58a640b0b461e817613391c8d0", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 30, "deletions": 90, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -80,14 +80,12 @@ use serialize::{Encodable, Decodable, Encoder, Decoder};\n /// table) and a SyntaxContext to track renaming and\n /// macro expansion per Flatt et al., \"Macros\n /// That Work Together\"\n-#[deriving(Clone, Hash, PartialOrd, Eq, Ord)]\n+#[deriving(Clone, Copy, Hash, PartialOrd, Eq, Ord)]\n pub struct Ident {\n     pub name: Name,\n     pub ctxt: SyntaxContext\n }\n \n-impl Copy for Ident {}\n-\n impl Ident {\n     /// Construct an identifier with the given name and an empty context:\n     pub fn new(name: Name) -> Ident { Ident {name: name, ctxt: EMPTY_CTXT}}\n@@ -160,11 +158,9 @@ pub const ILLEGAL_CTXT : SyntaxContext = 1;\n \n /// A name is a part of an identifier, representing a string or gensym. It's\n /// the result of interning.\n-#[deriving(Eq, Ord, PartialEq, PartialOrd, Hash, Encodable, Decodable, Clone)]\n+#[deriving(Copy, Eq, Ord, PartialEq, PartialOrd, Hash, Encodable, Decodable, Clone)]\n pub struct Name(pub u32);\n \n-impl Copy for Name {}\n-\n impl Name {\n     pub fn as_str<'a>(&'a self) -> &'a str {\n         unsafe {\n@@ -201,15 +197,13 @@ impl<D:Decoder<E>, E> Decodable<D, E> for Ident {\n /// Function name (not all functions have names)\n pub type FnIdent = Option<Ident>;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct Lifetime {\n     pub id: NodeId,\n     pub span: Span,\n     pub name: Name\n }\n \n-impl Copy for Lifetime {}\n-\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct LifetimeDef {\n     pub lifetime: Lifetime,\n@@ -353,14 +347,12 @@ pub type CrateNum = u32;\n \n pub type NodeId = u32;\n \n-#[deriving(Clone, Eq, Ord, PartialOrd, PartialEq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, Eq, Ord, PartialOrd, PartialEq, Encodable, Decodable, Hash, Show)]\n pub struct DefId {\n     pub krate: CrateNum,\n     pub node: NodeId,\n }\n \n-impl Copy for DefId {}\n-\n /// Item definitions in the currently-compiled crate would have the CrateNum\n /// LOCAL_CRATE in their DefId.\n pub const LOCAL_CRATE: CrateNum = 0;\n@@ -513,15 +505,13 @@ pub struct FieldPat {\n     pub is_shorthand: bool,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum BindingMode {\n     BindByRef(Mutability),\n     BindByValue(Mutability),\n }\n \n-impl Copy for BindingMode {}\n-\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum PatWildKind {\n     /// Represents the wildcard pattern `_`\n     PatWildSingle,\n@@ -530,8 +520,6 @@ pub enum PatWildKind {\n     PatWildMulti,\n }\n \n-impl Copy for PatWildKind {}\n-\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Pat_ {\n     /// Represents a wildcard pattern (either `_` or `..`)\n@@ -561,15 +549,13 @@ pub enum Pat_ {\n     PatMac(Mac),\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Mutability {\n     MutMutable,\n     MutImmutable,\n }\n \n-impl Copy for Mutability {}\n-\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum BinOp {\n     BiAdd,\n     BiSub,\n@@ -591,18 +577,14 @@ pub enum BinOp {\n     BiGt,\n }\n \n-impl Copy for BinOp {}\n-\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum UnOp {\n     UnUniq,\n     UnDeref,\n     UnNot,\n     UnNeg\n }\n \n-impl Copy for UnOp {}\n-\n pub type Stmt = Spanned<Stmt_>;\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n@@ -634,14 +616,12 @@ pub enum MacStmtStyle {\n \n /// Where a local declaration came from: either a true `let ... =\n /// ...;`, or one desugared from the pattern of a for loop.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum LocalSource {\n     LocalLet,\n     LocalFor,\n }\n \n-impl Copy for LocalSource {}\n-\n // FIXME (pending discussion of #1697, #2178...): local should really be\n // a refinement on pat.\n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n@@ -683,22 +663,18 @@ pub struct Field {\n \n pub type SpannedIdent = Spanned<Ident>;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum BlockCheckMode {\n     DefaultBlock,\n     UnsafeBlock(UnsafeSource),\n }\n \n-impl Copy for BlockCheckMode {}\n-\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum UnsafeSource {\n     CompilerGenerated,\n     UserProvided,\n }\n \n-impl Copy for UnsafeSource {}\n-\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct Expr {\n     pub id: NodeId,\n@@ -775,23 +751,19 @@ pub struct QPath {\n     pub item_name: Ident,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum MatchSource {\n     MatchNormal,\n     MatchIfLetDesugar,\n     MatchWhileLetDesugar,\n }\n \n-impl Copy for MatchSource {}\n-\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum CaptureClause {\n     CaptureByValue,\n     CaptureByRef,\n }\n \n-impl Copy for CaptureClause {}\n-\n /// A delimited sequence of token trees\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct Delimited {\n@@ -842,14 +814,12 @@ pub struct SequenceRepetition {\n \n /// A Kleene-style [repetition operator](http://en.wikipedia.org/wiki/Kleene_star)\n /// for token sequences.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum KleeneOp {\n     ZeroOrMore,\n     OneOrMore,\n }\n \n-impl Copy for KleeneOp {}\n-\n /// When the main rust parser encounters a syntax-extension invocation, it\n /// parses the arguments to the invocation as a token-tree. This is a very\n /// loose structure, such that all sorts of different AST-fragments can\n@@ -959,24 +929,20 @@ pub enum Mac_ {\n     MacInvocTT(Path, Vec<TokenTree> , SyntaxContext),   // new macro-invocation\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum StrStyle {\n     CookedStr,\n     RawStr(uint)\n }\n \n-impl Copy for StrStyle {}\n-\n pub type Lit = Spanned<Lit_>;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Sign {\n     Minus,\n     Plus\n }\n \n-impl Copy for Sign {}\n-\n impl<T> Sign where T: Int {\n     pub fn new(n: T) -> Sign {\n         if n < Int::zero() {\n@@ -987,15 +953,13 @@ impl<T> Sign where T: Int {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum LitIntType {\n     SignedIntLit(IntTy, Sign),\n     UnsignedIntLit(UintTy),\n     UnsuffixedIntLit(Sign)\n }\n \n-impl Copy for LitIntType {}\n-\n impl LitIntType {\n     pub fn suffix_len(&self) -> uint {\n         match *self {\n@@ -1082,7 +1046,7 @@ pub struct Typedef {\n     pub typ: P<Ty>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash)]\n pub enum IntTy {\n     TyI,\n     TyI8,\n@@ -1091,8 +1055,6 @@ pub enum IntTy {\n     TyI64,\n }\n \n-impl Copy for IntTy {}\n-\n impl fmt::Show for IntTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}\", ast_util::int_ty_to_string(*self, None))\n@@ -1109,7 +1071,7 @@ impl IntTy {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash)]\n pub enum UintTy {\n     TyU,\n     TyU8,\n@@ -1118,8 +1080,6 @@ pub enum UintTy {\n     TyU64,\n }\n \n-impl Copy for UintTy {}\n-\n impl UintTy {\n     pub fn suffix_len(&self) -> uint {\n         match *self {\n@@ -1136,14 +1096,12 @@ impl fmt::Show for UintTy {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash)]\n pub enum FloatTy {\n     TyF32,\n     TyF64,\n }\n \n-impl Copy for FloatTy {}\n-\n impl fmt::Show for FloatTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}\", ast_util::float_ty_to_string(*self))\n@@ -1177,7 +1135,7 @@ pub struct Ty {\n }\n \n /// Not represented directly in the AST, referred to by name through a ty_path.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum PrimTy {\n     TyInt(IntTy),\n     TyUint(UintTy),\n@@ -1187,16 +1145,12 @@ pub enum PrimTy {\n     TyChar\n }\n \n-impl Copy for PrimTy {}\n-\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash)]\n pub enum Onceness {\n     Once,\n     Many\n }\n \n-impl Copy for Onceness {}\n-\n impl fmt::Show for Onceness {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -1259,14 +1213,12 @@ pub enum Ty_ {\n     TyInfer,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum AsmDialect {\n     AsmAtt,\n     AsmIntel\n }\n \n-impl Copy for AsmDialect {}\n-\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct InlineAsm {\n     pub asm: InternedString,\n@@ -1433,14 +1385,12 @@ pub struct Variant_ {\n \n pub type Variant = Spanned<Variant_>;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum PathListItem_ {\n     PathListIdent { name: Ident, id: NodeId },\n     PathListMod { id: NodeId }\n }\n \n-impl Copy for PathListItem_ {}\n-\n impl PathListItem_ {\n     pub fn id(&self) -> NodeId {\n         match *self {\n@@ -1494,19 +1444,15 @@ pub type Attribute = Spanned<Attribute_>;\n /// Distinguishes between Attributes that decorate items and Attributes that\n /// are contained as statements within items. These two cases need to be\n /// distinguished for pretty-printing.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum AttrStyle {\n     AttrOuter,\n     AttrInner,\n }\n \n-impl Copy for AttrStyle {}\n-\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct AttrId(pub uint);\n \n-impl Copy for AttrId {}\n-\n /// Doc-comments are promoted to attributes that have is_sugared_doc = true\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct Attribute_ {\n@@ -1536,14 +1482,12 @@ pub struct PolyTraitRef {\n     pub trait_ref: TraitRef\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Visibility {\n     Public,\n     Inherited,\n }\n \n-impl Copy for Visibility {}\n-\n impl Visibility {\n     pub fn inherit_from(&self, parent_visibility: Visibility) -> Visibility {\n         match self {\n@@ -1572,15 +1516,13 @@ impl StructField_ {\n \n pub type StructField = Spanned<StructField_>;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum StructFieldKind {\n     NamedField(Ident, Visibility),\n     /// Element of a tuple-like struct\n     UnnamedField(Visibility),\n }\n \n-impl Copy for StructFieldKind {}\n-\n impl StructFieldKind {\n     pub fn is_unnamed(&self) -> bool {\n         match *self {\n@@ -1682,15 +1624,13 @@ impl ForeignItem_ {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum UnboxedClosureKind {\n     FnUnboxedClosureKind,\n     FnMutUnboxedClosureKind,\n     FnOnceUnboxedClosureKind,\n }\n \n-impl Copy for UnboxedClosureKind {}\n-\n /// The data we save and restore about an inlined item or method.  This is not\n /// part of the AST that we parse from a file, but it becomes part of the tree\n /// that we trans."}, {"sha": "7c89245f53ef71edcac54e274376a12af508bb52", "filename": "src/libsyntax/ast_map/blocks.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fblocks.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -41,10 +41,9 @@ use visit;\n ///   - The default implementation for a trait method.\n ///\n /// To construct one, use the `Code::from_node` function.\n+#[deriving(Copy)]\n pub struct FnLikeNode<'a> { node: ast_map::Node<'a> }\n \n-impl<'a> Copy for FnLikeNode<'a> {}\n-\n /// MaybeFnLike wraps a method that indicates if an object\n /// corresponds to some FnLikeNode.\n pub trait MaybeFnLike { fn is_fn_like(&self) -> bool; }\n@@ -82,13 +81,12 @@ impl MaybeFnLike for ast::Expr {\n /// Carries either an FnLikeNode or a Block, as these are the two\n /// constructs that correspond to \"code\" (as in, something from which\n /// we can construct a control-flow graph).\n+#[deriving(Copy)]\n pub enum Code<'a> {\n     FnLikeCode(FnLikeNode<'a>),\n     BlockCode(&'a Block),\n }\n \n-impl<'a> Copy for Code<'a> {}\n-\n impl<'a> Code<'a> {\n     pub fn id(&self) -> ast::NodeId {\n         match *self {"}, {"sha": "a95c9e199060b787253bae86f4cd5138e834b9ec", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -32,14 +32,12 @@ use std::slice;\n \n pub mod blocks;\n \n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, Copy, PartialEq)]\n pub enum PathElem {\n     PathMod(Name),\n     PathName(Name)\n }\n \n-impl Copy for PathElem {}\n-\n impl PathElem {\n     pub fn name(&self) -> Name {\n         match *self {\n@@ -102,7 +100,7 @@ pub fn path_to_string<PI: Iterator<PathElem>>(path: PI) -> String {\n     }).to_string()\n }\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum Node<'ast> {\n     NodeItem(&'ast Item),\n     NodeForeignItem(&'ast ForeignItem),\n@@ -122,11 +120,9 @@ pub enum Node<'ast> {\n     NodeLifetime(&'ast Lifetime),\n }\n \n-impl<'ast> Copy for Node<'ast> {}\n-\n /// Represents an entry and its parent Node ID\n /// The odd layout is to bring down the total size.\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n enum MapEntry<'ast> {\n     /// Placeholder for holes in the map.\n     NotPresent,\n@@ -151,8 +147,6 @@ enum MapEntry<'ast> {\n     RootInlinedParent(&'ast InlinedParent)\n }\n \n-impl<'ast> Copy for MapEntry<'ast> {}\n-\n impl<'ast> Clone for MapEntry<'ast> {\n     fn clone(&self) -> MapEntry<'ast> {\n         *self"}, {"sha": "02771809ae6a75199007c380d2b054d1c039b533", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -343,14 +343,12 @@ pub fn empty_generics() -> Generics {\n // ______________________________________________________________________\n // Enumerating the IDs which appear in an AST\n \n-#[deriving(Encodable, Decodable, Show)]\n+#[deriving(Copy, Encodable, Decodable, Show)]\n pub struct IdRange {\n     pub min: NodeId,\n     pub max: NodeId,\n }\n \n-impl Copy for IdRange {}\n-\n impl IdRange {\n     pub fn max() -> IdRange {\n         IdRange {"}, {"sha": "127cc5ed51d1143ea593eca9ebe29e2e7fd7cb09", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -277,16 +277,14 @@ pub fn find_crate_name(attrs: &[Attribute]) -> Option<InternedString> {\n     first_attr_value_str_by_name(attrs, \"crate_name\")\n }\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum InlineAttr {\n     InlineNone,\n     InlineHint,\n     InlineAlways,\n     InlineNever,\n }\n \n-impl Copy for InlineAttr {}\n-\n /// Determine what `#[inline]` attribute is present in `attrs`, if any.\n pub fn find_inline_attr(attrs: &[Attribute]) -> InlineAttr {\n     // FIXME (#2809)---validate the usage of #[inline] and #[inline]\n@@ -349,7 +347,7 @@ pub struct Stability {\n }\n \n /// The available stability levels.\n-#[deriving(Encodable,Decodable,PartialEq,PartialOrd,Clone,Show)]\n+#[deriving(Copy,Encodable,Decodable,PartialEq,PartialOrd,Clone,Show)]\n pub enum StabilityLevel {\n     Deprecated,\n     Experimental,\n@@ -359,8 +357,6 @@ pub enum StabilityLevel {\n     Locked\n }\n \n-impl Copy for StabilityLevel {}\n-\n pub fn find_stability_generic<'a,\n                               AM: AttrMetaMethods,\n                               I: Iterator<&'a AM>>\n@@ -468,16 +464,14 @@ fn int_type_of_word(s: &str) -> Option<IntType> {\n     }\n }\n \n-#[deriving(PartialEq, Show, Encodable, Decodable)]\n+#[deriving(Copy, PartialEq, Show, Encodable, Decodable)]\n pub enum ReprAttr {\n     ReprAny,\n     ReprInt(Span, IntType),\n     ReprExtern,\n     ReprPacked,\n }\n \n-impl Copy for ReprAttr {}\n-\n impl ReprAttr {\n     pub fn is_ffi_safe(&self) -> bool {\n         match *self {\n@@ -489,14 +483,12 @@ impl ReprAttr {\n     }\n }\n \n-#[deriving(Eq, Hash, PartialEq, Show, Encodable, Decodable)]\n+#[deriving(Copy, Eq, Hash, PartialEq, Show, Encodable, Decodable)]\n pub enum IntType {\n     SignedInt(ast::IntTy),\n     UnsignedInt(ast::UintTy)\n }\n \n-impl Copy for IntType {}\n-\n impl IntType {\n     #[inline]\n     pub fn is_signed(self) -> bool {"}, {"sha": "b7c0678cf139c4f0b79d1f5b1755a71137948016", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -31,19 +31,15 @@ pub trait Pos {\n \n /// A byte offset. Keep this small (currently 32-bits), as AST contains\n /// a lot of them.\n-#[deriving(Clone, PartialEq, Eq, Hash, PartialOrd, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Show)]\n pub struct BytePos(pub u32);\n \n-impl Copy for BytePos {}\n-\n /// A character offset. Because of multibyte utf8 characters, a byte offset\n /// is not equivalent to a character offset. The CodeMap will convert BytePos\n /// values to CharPos values as necessary.\n-#[deriving(PartialEq, Hash, PartialOrd, Show)]\n+#[deriving(Copy, PartialEq, Hash, PartialOrd, Show)]\n pub struct CharPos(pub uint);\n \n-impl Copy for CharPos {}\n-\n // FIXME: Lots of boilerplate in these impls, but so far my attempts to fix\n // have been unsuccessful\n \n@@ -121,7 +117,7 @@ impl Sub<CharPos, CharPos> for CharPos {\n /// are *absolute* positions from the beginning of the codemap, not positions\n /// relative to FileMaps. Methods on the CodeMap can be used to relate spans back\n /// to the original source.\n-#[deriving(Clone, Show, Hash)]\n+#[deriving(Clone, Copy, Show, Hash)]\n pub struct Span {\n     pub lo: BytePos,\n     pub hi: BytePos,\n@@ -130,18 +126,14 @@ pub struct Span {\n     pub expn_id: ExpnId\n }\n \n-impl Copy for Span {}\n-\n pub const DUMMY_SP: Span = Span { lo: BytePos(0), hi: BytePos(0), expn_id: NO_EXPANSION };\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct Spanned<T> {\n     pub node: T,\n     pub span: Span,\n }\n \n-impl<T:Copy> Copy for Spanned<T> {}\n-\n impl PartialEq for Span {\n     fn eq(&self, other: &Span) -> bool {\n         return (*self).lo == (*other).lo && (*self).hi == (*other).hi;\n@@ -219,16 +211,14 @@ pub struct FileMapAndLine { pub fm: Rc<FileMap>, pub line: uint }\n pub struct FileMapAndBytePos { pub fm: Rc<FileMap>, pub pos: BytePos }\n \n /// The syntax with which a macro was invoked.\n-#[deriving(Clone, Hash, Show)]\n+#[deriving(Clone, Copy, Hash, Show)]\n pub enum MacroFormat {\n     /// e.g. #[deriving(...)] <item>\n     MacroAttribute,\n     /// e.g. `format!()`\n     MacroBang\n }\n \n-impl Copy for MacroFormat {}\n-\n #[deriving(Clone, Hash, Show)]\n pub struct NameAndSpan {\n     /// The name of the macro that was invoked to create the thing\n@@ -264,11 +254,9 @@ pub struct ExpnInfo {\n     pub callee: NameAndSpan\n }\n \n-#[deriving(PartialEq, Eq, Clone, Show, Hash, Encodable, Decodable)]\n+#[deriving(Copy, PartialEq, Eq, Clone, Show, Hash, Encodable, Decodable)]\n pub struct ExpnId(u32);\n \n-impl Copy for ExpnId {}\n-\n pub const NO_EXPANSION: ExpnId = ExpnId(-1);\n \n impl ExpnId {\n@@ -290,15 +278,14 @@ pub struct FileLines {\n }\n \n /// Identifies an offset of a multi-byte character in a FileMap\n+#[deriving(Copy)]\n pub struct MultiByteChar {\n     /// The absolute offset of the character in the CodeMap\n     pub pos: BytePos,\n     /// The number of bytes, >=2\n     pub bytes: uint,\n }\n \n-impl Copy for MultiByteChar {}\n-\n /// A single source in the CodeMap\n pub struct FileMap {\n     /// The name of the file that the source came from, source that doesn't"}, {"sha": "4d765f49acabdc21793748d9ca1cd8971b6ae7f0", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -28,7 +28,7 @@ use term;\n /// maximum number of lines we will print for each error; arbitrary.\n static MAX_LINES: uint = 6u;\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub enum RenderSpan {\n     /// A FullSpan renders with both with an initial line for the\n     /// message, prefixed by file:linenum, followed by a summary of\n@@ -40,8 +40,6 @@ pub enum RenderSpan {\n     FileLine(Span),\n }\n \n-impl Copy for RenderSpan {}\n-\n impl RenderSpan {\n     fn span(self) -> Span {\n         match self {\n@@ -56,15 +54,13 @@ impl RenderSpan {\n     }\n }\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub enum ColorConfig {\n     Auto,\n     Always,\n     Never\n }\n \n-impl Copy for ColorConfig {}\n-\n pub trait Emitter {\n     fn emit(&mut self, cmsp: Option<(&codemap::CodeMap, Span)>,\n             msg: &str, code: Option<&str>, lvl: Level);\n@@ -75,16 +71,14 @@ pub trait Emitter {\n /// This structure is used to signify that a task has panicked with a fatal error\n /// from the diagnostics. You can use this with the `Any` trait to figure out\n /// how a rustc task died (if so desired).\n+#[deriving(Copy)]\n pub struct FatalError;\n \n-impl Copy for FatalError {}\n-\n /// Signifies that the compiler died with an explicit call to `.bug`\n /// or `.span_bug` rather than a failed assertion, etc.\n+#[deriving(Copy)]\n pub struct ExplicitBug;\n \n-impl Copy for ExplicitBug {}\n-\n /// A span-handler is like a handler but also\n /// accepts span information for source-location\n /// reporting.\n@@ -228,7 +222,7 @@ pub fn mk_handler(e: Box<Emitter + Send>) -> Handler {\n     }\n }\n \n-#[deriving(PartialEq, Clone)]\n+#[deriving(Copy, PartialEq, Clone)]\n pub enum Level {\n     Bug,\n     Fatal,\n@@ -238,8 +232,6 @@ pub enum Level {\n     Help,\n }\n \n-impl Copy for Level {}\n-\n impl fmt::Show for Level {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         use std::fmt::Show;"}, {"sha": "3947a602809e69529e481ba6425a28c824d8c3fe", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -223,13 +223,12 @@ impl MacResult for MacItems {\n \n /// Fill-in macro expansion result, to allow compilation to continue\n /// after hitting errors.\n+#[deriving(Copy)]\n pub struct DummyResult {\n     expr_only: bool,\n     span: Span\n }\n \n-impl Copy for DummyResult {}\n-\n impl DummyResult {\n     /// Create a default MacResult that can be anything.\n     ///"}, {"sha": "10e14e0c97564aacf1256452acf0ec16836b440b", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -83,12 +83,11 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n     trait_def.expand(cx, mitem, item, push)\n }\n \n+#[deriving(Copy)]\n pub enum OrderingOp {\n     PartialCmpOp, LtOp, LeOp, GtOp, GeOp,\n }\n \n-impl Copy for OrderingOp {}\n-\n pub fn some_ordering_collapsed(cx: &mut ExtCtxt,\n                                span: Span,\n                                op: OrderingOp,"}, {"sha": "ae979020bc7e5351cb09d16258852970fbf217e5", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -39,7 +39,7 @@ pub struct SCTable {\n     rename_memo: RefCell<HashMap<(SyntaxContext,Ident,Name),SyntaxContext>>,\n }\n \n-#[deriving(PartialEq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Copy, PartialEq, Encodable, Decodable, Hash, Show)]\n pub enum SyntaxContext_ {\n     EmptyCtxt,\n     Mark (Mrk,SyntaxContext),\n@@ -56,8 +56,6 @@ pub enum SyntaxContext_ {\n     IllegalCtxt\n }\n \n-impl Copy for SyntaxContext_ {}\n-\n /// A list of ident->name renamings\n pub type RenameList = Vec<(Ident, Name)>;\n "}, {"sha": "0e0a87c74f849e63ff3db47487eac9cab27f0ff9", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -97,6 +97,7 @@ enum Status {\n }\n \n /// A set of features to be used by later passes.\n+#[deriving(Copy)]\n pub struct Features {\n     pub default_type_params: bool,\n     pub unboxed_closures: bool,\n@@ -107,8 +108,6 @@ pub struct Features {\n     pub opt_out_copy: bool,\n }\n \n-impl Copy for Features {}\n-\n impl Features {\n     pub fn new() -> Features {\n         Features {"}, {"sha": "95bae63f58f65d25c12d1e014ebfacde070e91e0", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -24,7 +24,7 @@ use std::str;\n use std::string::String;\n use std::uint;\n \n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, Copy, PartialEq)]\n pub enum CommentStyle {\n     /// No code on either side of each line of the comment\n     Isolated,\n@@ -36,8 +36,6 @@ pub enum CommentStyle {\n     BlankLine,\n }\n \n-impl Copy for CommentStyle {}\n-\n #[deriving(Clone)]\n pub struct Comment {\n     pub style: CommentStyle,"}, {"sha": "a6ddcbf9ac41e205d3b8bc1fa20c135ba6cc0f08", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -22,7 +22,7 @@ use parse::token;\n use ptr::P;\n \n /// The specific types of unsupported syntax\n-#[deriving(PartialEq, Eq, Hash)]\n+#[deriving(Copy, PartialEq, Eq, Hash)]\n pub enum ObsoleteSyntax {\n     ObsoleteOwnedType,\n     ObsoleteOwnedExpr,\n@@ -36,8 +36,6 @@ pub enum ObsoleteSyntax {\n     ObsoleteProcExpr,\n }\n \n-impl Copy for ObsoleteSyntax {}\n-\n pub trait ParserObsoleteMethods {\n     /// Reports an obsolete syntax non-fatal error.\n     fn obsolete(&mut self, sp: Span, kind: ObsoleteSyntax);"}, {"sha": "3ad224b93ce9625920b5638d9729890c7332515b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -104,7 +104,7 @@ type ItemInfo = (Ident, Item_, Option<Vec<Attribute> >);\n \n /// How to parse a path. There are four different kinds of paths, all of which\n /// are parsed somewhat differently.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum PathParsingMode {\n     /// A path with no type parameters; e.g. `foo::bar::Baz`\n     NoTypesAllowed,\n@@ -116,8 +116,6 @@ pub enum PathParsingMode {\n     LifetimeAndTypesWithColons,\n }\n \n-impl Copy for PathParsingMode {}\n-\n enum ItemOrViewItem {\n     /// Indicates a failure to parse any kind of item. The attributes are\n     /// returned."}, {"sha": "dad369792d7a1954cc1974ee2228f3e16a03e093", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -28,7 +28,7 @@ use std::path::BytesContainer;\n use std::rc::Rc;\n \n #[allow(non_camel_case_types)]\n-#[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n pub enum BinOpToken {\n     Plus,\n     Minus,\n@@ -42,10 +42,8 @@ pub enum BinOpToken {\n     Shr,\n }\n \n-impl Copy for BinOpToken {}\n-\n /// A delimeter token\n-#[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n pub enum DelimToken {\n     /// A round parenthesis: `(` or `)`\n     Paren,\n@@ -55,16 +53,14 @@ pub enum DelimToken {\n     Brace,\n }\n \n-impl Copy for DelimToken {}\n-\n-#[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n pub enum IdentStyle {\n     /// `::` follows the identifier with no whitespace in-between.\n     ModName,\n     Plain,\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n pub enum Lit {\n     Byte(ast::Name),\n     Char(ast::Name),\n@@ -89,10 +85,6 @@ impl Lit {\n     }\n }\n \n-impl Copy for Lit {}\n-\n-impl Copy for IdentStyle {}\n-\n #[allow(non_camel_case_types)]\n #[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n pub enum Token {\n@@ -438,13 +430,12 @@ macro_rules! declare_special_idents_and_keywords {(\n         pub use self::Keyword::*;\n         use ast;\n \n+        #[deriving(Copy)]\n         pub enum Keyword {\n             $( $sk_variant, )*\n             $( $rk_variant, )*\n         }\n \n-        impl Copy for Keyword {}\n-\n         impl Keyword {\n             pub fn to_name(&self) -> ast::Name {\n                 match *self {"}, {"sha": "bfa47a46e7465747074d9c13fb81b0f2885992c1", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -66,30 +66,24 @@ pub use self::Token::*;\n use std::io;\n use std::string;\n \n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, Copy, PartialEq)]\n pub enum Breaks {\n     Consistent,\n     Inconsistent,\n }\n \n-impl Copy for Breaks {}\n-\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct BreakToken {\n     offset: int,\n     blank_space: int\n }\n \n-impl Copy for BreakToken {}\n-\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct BeginToken {\n     offset: int,\n     breaks: Breaks\n }\n \n-impl Copy for BeginToken {}\n-\n #[deriving(Clone)]\n pub enum Token {\n     String(string::String, int),\n@@ -153,20 +147,18 @@ pub fn buf_str(toks: Vec<Token>,\n     return s.into_string();\n }\n \n+#[deriving(Copy)]\n pub enum PrintStackBreak {\n     Fits,\n     Broken(Breaks),\n }\n \n-impl Copy for PrintStackBreak {}\n-\n+#[deriving(Copy)]\n pub struct PrintStackElem {\n     offset: int,\n     pbreak: PrintStackBreak\n }\n \n-impl Copy for PrintStackElem {}\n-\n static SIZE_INFINITY: int = 0xffff;\n \n pub fn mk_printer(out: Box<io::Writer+'static>, linewidth: uint) -> Printer {"}, {"sha": "d2cc0cba3173cf7b3011cfc6fb04a55f52f6418c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -45,19 +45,17 @@ pub trait PpAnn {\n     fn post(&self, _state: &mut State, _node: AnnNode) -> IoResult<()> { Ok(()) }\n }\n \n+#[deriving(Copy)]\n pub struct NoAnn;\n \n-impl Copy for NoAnn {}\n-\n impl PpAnn for NoAnn {}\n \n+#[deriving(Copy)]\n pub struct CurrentCommentAndLiteral {\n     cur_cmnt: uint,\n     cur_lit: uint,\n }\n \n-impl Copy for CurrentCommentAndLiteral {}\n-\n pub struct State<'a> {\n     pub s: pp::Printer,\n     cm: Option<&'a CodeMap>,"}, {"sha": "b89e9a59349ce3e341ae7276e96eba8e612c1843", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -32,6 +32,7 @@ use codemap::Span;\n use ptr::P;\n use owned_slice::OwnedSlice;\n \n+#[deriving(Copy)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n     FkItemFn(Ident, &'a Generics, Unsafety, Abi),\n@@ -44,8 +45,6 @@ pub enum FnKind<'a> {\n     FkFnBlock,\n }\n \n-impl<'a> Copy for FnKind<'a> {}\n-\n /// Each method of the Visitor trait is a hook to be potentially\n /// overridden.  Each method's default implementation recursively visits\n /// the substructure of the input via the corresponding `walk` method;"}, {"sha": "a4ebcfe8a568b023bd5ad5b5e5470fcf32ed93b7", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -165,13 +165,13 @@ pub mod color {\n /// Terminal attributes\n pub mod attr {\n     pub use self::Attr::*;\n-    use std::kinds::Copy;\n \n     /// Terminal attributes for use with term.attr().\n     ///\n     /// Most attributes can only be turned on and must be turned off with term.reset().\n     /// The ones that can be turned off explicitly take a boolean value.\n     /// Color is also represented as an attribute for convenience.\n+    #[deriving(Copy)]\n     pub enum Attr {\n         /// Bold (or possibly bright) mode\n         Bold,\n@@ -194,8 +194,6 @@ pub mod attr {\n         /// Convenience attribute to set the background color\n         BackgroundColor(super::color::Color)\n     }\n-\n-    impl Copy for Attr {}\n }\n \n /// A terminal with similar capabilities to an ANSI Terminal"}, {"sha": "4ecbc54c59089876fbda43f07dd2eba47d74bd95", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -16,7 +16,7 @@ use self::FormatState::*;\n use self::FormatOp::*;\n use std::mem::replace;\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n enum States {\n     Nothing,\n     Percent,\n@@ -33,17 +33,13 @@ enum States {\n     SeekIfEndPercent(int)\n }\n \n-impl Copy for States {}\n-\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n enum FormatState {\n     FormatStateFlags,\n     FormatStateWidth,\n     FormatStatePrecision\n }\n \n-impl Copy for FormatState {}\n-\n /// Types of parameters a capability can use\n #[allow(missing_docs)]\n #[deriving(Clone)]\n@@ -446,7 +442,7 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n     Ok(output)\n }\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n struct Flags {\n     width: uint,\n     precision: uint,\n@@ -456,15 +452,14 @@ struct Flags {\n     space: bool\n }\n \n-impl Copy for Flags {}\n-\n impl Flags {\n     fn new() -> Flags {\n         Flags{ width: 0, precision: 0, alternate: false,\n                left: false, sign: false, space: false }\n     }\n }\n \n+#[deriving(Copy)]\n enum FormatOp {\n     FormatDigit,\n     FormatOctal,\n@@ -473,8 +468,6 @@ enum FormatOp {\n     FormatString\n }\n \n-impl Copy for FormatOp {}\n-\n impl FormatOp {\n     fn from_char(c: char) -> FormatOp {\n         match c {"}, {"sha": "5b04a1fed896c8f8a1470ec1d145e65133fab5e7", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -110,15 +110,13 @@ impl Show for TestName {\n     }\n }\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n enum NamePadding {\n     PadNone,\n     PadOnLeft,\n     PadOnRight,\n }\n \n-impl Copy for NamePadding {}\n-\n impl TestDesc {\n     fn padded_name(&self, column_count: uint, align: NamePadding) -> String {\n         let mut name = String::from_str(self.name.as_slice());\n@@ -215,14 +213,12 @@ pub struct TestDescAndFn {\n     pub testfn: TestFn,\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq, Show)]\n+#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, Show)]\n pub struct Metric {\n     value: f64,\n     noise: f64\n }\n \n-impl Copy for Metric {}\n-\n impl Metric {\n     pub fn new(value: f64, noise: f64) -> Metric {\n         Metric {value: value, noise: noise}\n@@ -240,7 +236,7 @@ impl Clone for MetricMap {\n }\n \n /// Analysis of a single change in metric\n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub enum MetricChange {\n     LikelyNoise,\n     MetricAdded,\n@@ -249,8 +245,6 @@ pub enum MetricChange {\n     Regression(f64)\n }\n \n-impl Copy for MetricChange {}\n-\n pub type MetricDiff = BTreeMap<String,MetricChange>;\n \n // The default console test runner. It accepts the command line\n@@ -287,14 +281,13 @@ pub fn test_main_static(args: &[String], tests: &[TestDescAndFn]) {\n     test_main(args, owned_tests)\n }\n \n+#[deriving(Copy)]\n pub enum ColorConfig {\n     AutoColor,\n     AlwaysColor,\n     NeverColor,\n }\n \n-impl Copy for ColorConfig {}\n-\n pub struct TestOpts {\n     pub filter: Option<Regex>,\n     pub run_ignored: bool,"}, {"sha": "1b7f5cdc4af5132e9606fcd35d26136cb2019844", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2ed31aeb66b2662933200dbfd661a573b1f49/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=95c2ed31aeb66b2662933200dbfd661a573b1f49", "patch": "@@ -76,14 +76,12 @@ mod imp {\n }\n \n /// A record specifying a time value in seconds and nanoseconds.\n-#[deriving(Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Decodable, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Encodable, Decodable, Show)]\n pub struct Timespec {\n     pub sec: i64,\n     pub nsec: i32,\n }\n \n-impl Copy for Timespec {}\n-\n /*\n  * Timespec assumes that pre-epoch Timespecs have negative sec and positive\n  * nsec fields. Darwin's and Linux's struct timespec functions handle pre-\n@@ -268,7 +266,7 @@ pub fn tzset() {\n /// also called a broken-down time value.\n // FIXME: use c_int instead of i32?\n #[repr(C)]\n-#[deriving(Clone, PartialEq, Eq, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Show)]\n pub struct Tm {\n     /// Seconds after the minute - [0, 60]\n     pub tm_sec: i32,\n@@ -309,8 +307,6 @@ pub struct Tm {\n     pub tm_nsec: i32,\n }\n \n-impl Copy for Tm {}\n-\n pub fn empty_tm() -> Tm {\n     Tm {\n         tm_sec: 0_i32,\n@@ -452,7 +448,7 @@ impl Tm {\n     }\n }\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum ParseError {\n     InvalidSecond,\n     InvalidMinute,\n@@ -470,8 +466,6 @@ pub enum ParseError {\n     UnexpectedCharacter(char, char),\n }\n \n-impl Copy for ParseError {}\n-\n impl Show for ParseError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}]}