{"sha": "433000be34eafd052addd91afd605a81e137a433", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMzAwMGJlMzRlYWZkMDUyYWRkZDkxYWZkNjA1YTgxZTEzN2E0MzM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-31T16:28:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-31T16:28:01Z"}, "message": "Move config to Ctx", "tree": {"sha": "95d30e894b6583f2d743fc94e3e866bc29750362", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95d30e894b6583f2d743fc94e3e866bc29750362"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/433000be34eafd052addd91afd605a81e137a433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/433000be34eafd052addd91afd605a81e137a433", "html_url": "https://github.com/rust-lang/rust/commit/433000be34eafd052addd91afd605a81e137a433", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/433000be34eafd052addd91afd605a81e137a433/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b588868f822b9c200a8ce77d24bfab5aeca4b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b588868f822b9c200a8ce77d24bfab5aeca4b8", "html_url": "https://github.com/rust-lang/rust/commit/e4b588868f822b9c200a8ce77d24bfab5aeca4b8"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "d86fe5a87187ba77222310f7edb11a5cd5be2137", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/433000be34eafd052addd91afd605a81e137a433/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/433000be34eafd052addd91afd605a81e137a433/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=433000be34eafd052addd91afd605a81e137a433", "patch": "@@ -4,6 +4,7 @@ import { Server } from './server';\n import { Config } from './config';\n \n export class Ctx {\n+    readonly config = new Config();\n     private extCtx: vscode.ExtensionContext;\n \n     constructor(extCtx: vscode.ExtensionContext) {\n@@ -14,10 +15,6 @@ export class Ctx {\n         return Server.client;\n     }\n \n-    get config(): Config {\n-        return Server.config;\n-    }\n-\n     get activeRustEditor(): vscode.TextEditor | undefined {\n         const editor = vscode.window.activeTextEditor;\n         return editor && editor.document.languageId === 'rust'"}, {"sha": "3d91079279fbcee2fad2086207697bc062aff6d7", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/433000be34eafd052addd91afd605a81e137a433/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/433000be34eafd052addd91afd605a81e137a433/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=433000be34eafd052addd91afd605a81e137a433", "patch": "@@ -31,7 +31,7 @@ export async function activate(context: vscode.ExtensionContext) {\n         ctx.overrideCommand('type', commands.onEnter);\n     }\n \n-    const startServer = () => Server.start();\n+    const startServer = () => Server.start(ctx.config);\n     const reloadCommand = () => reloadServer(startServer);\n \n     vscode.commands.registerCommand('rust-analyzer.reload', reloadCommand);"}, {"sha": "ab9f3bfa63e9b116cf3380ca12d435577f6870c7", "filename": "editors/code/src/server.ts", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/433000be34eafd052addd91afd605a81e137a433/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/433000be34eafd052addd91afd605a81e137a433/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=433000be34eafd052addd91afd605a81e137a433", "patch": "@@ -12,17 +12,18 @@ function expandPathResolving(path: string) {\n }\n \n export class Server {\n-    public static config = new Config();\n+    static config: Config;\n     public static client: lc.LanguageClient;\n \n-    public static async start() {\n+    public static async start(config: Config) {\n         // '.' Is the fallback if no folder is open\n         // TODO?: Workspace folders support Uri's (eg: file://test.txt). It might be a good idea to test if the uri points to a file.\n         let folder: string = '.';\n         if (workspace.workspaceFolders !== undefined) {\n             folder = workspace.workspaceFolders[0].uri.fsPath.toString();\n         }\n \n+        this.config = config;\n         const command = expandPathResolving(this.config.raLspServerPath);\n         const run: lc.Executable = {\n             command,"}]}