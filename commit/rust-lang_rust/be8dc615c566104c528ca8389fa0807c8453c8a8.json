{"sha": "be8dc615c566104c528ca8389fa0807c8453c8a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlOGRjNjE1YzU2NjEwNGM1MjhjYTgzODlmYTA4MDdjODQ1M2M4YTg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-29T21:56:05Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-29T21:56:05Z"}, "message": "rustc: Move code for discovering the crate entry point into its own pass\n\nIt doesn't have anything to do with resolve and the logic will likely get\nmore involved in the future, after #4433", "tree": {"sha": "d632faeeae489a72b8b93608851dea0f357a165f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d632faeeae489a72b8b93608851dea0f357a165f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be8dc615c566104c528ca8389fa0807c8453c8a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be8dc615c566104c528ca8389fa0807c8453c8a8", "html_url": "https://github.com/rust-lang/rust/commit/be8dc615c566104c528ca8389fa0807c8453c8a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be8dc615c566104c528ca8389fa0807c8453c8a8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32901104cb54a37211ac1c05f377f69ee702485c", "url": "https://api.github.com/repos/rust-lang/rust/commits/32901104cb54a37211ac1c05f377f69ee702485c", "html_url": "https://github.com/rust-lang/rust/commit/32901104cb54a37211ac1c05f377f69ee702485c"}], "stats": {"total": 201, "additions": 122, "deletions": 79}, "files": [{"sha": "e421246da8da3af0c8eb1f619d248f2c5a56788c", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be8dc615c566104c528ca8389fa0807c8453c8a8/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8dc615c566104c528ca8389fa0807c8453c8a8/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=be8dc615c566104c528ca8389fa0807c8453c8a8", "patch": "@@ -225,6 +225,8 @@ pub fn compile_rest(sess: Session,\n         time(time_passes, ~\"resolution\", ||\n              middle::resolve::resolve_crate(sess, lang_items, crate));\n \n+    time(time_passes, ~\"looking for entry point\", || middle::entry::find_entry_point(sess, crate));\n+\n     let freevars = time(time_passes, ~\"freevar finding\", ||\n         freevars::annotate_freevars(def_map, crate));\n "}, {"sha": "18f4a5a30720047926581a474bc243e5c83f23e7", "filename": "src/librustc/middle/entry.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/be8dc615c566104c528ca8389fa0807c8453c8a8/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8dc615c566104c528ca8389fa0807c8453c8a8/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=be8dc615c566104c528ca8389fa0807c8453c8a8", "patch": "@@ -0,0 +1,119 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use driver::session;\n+use driver::session::Session;\n+use syntax::parse::token::special_idents;\n+use syntax::ast::{crate, node_id, item, item_fn};\n+use syntax::codemap::span;\n+use syntax::visit::{default_visitor, mk_vt, vt, Visitor, visit_crate, visit_item};\n+use syntax::attr::{attrs_contains_name};\n+\n+struct EntryContext {\n+    session: Session,\n+\n+    // The function that has attribute named 'main'\n+    attr_main_fn: Option<(node_id, span)>,\n+\n+    // The functions that could be main functions\n+    main_fns: ~[Option<(node_id, span)>],\n+\n+    // The function that has the attribute 'start' on it\n+    start_fn: Option<(node_id, span)>,\n+}\n+\n+type EntryVisitor = vt<@mut EntryContext>;\n+\n+pub fn find_entry_point(session: Session, crate: @crate) {\n+\n+    let ctxt = @mut EntryContext {\n+        session: session,\n+        attr_main_fn: None,\n+        main_fns: ~[],\n+        start_fn: None,\n+    };\n+\n+    visit_crate(crate, ctxt, mk_vt(@Visitor {\n+        visit_item: |item, ctxt, visitor| find_item(item, ctxt, visitor),\n+        .. *default_visitor()\n+    }));\n+\n+    check_duplicate_main(ctxt);\n+}\n+\n+fn find_item(item: @item, ctxt: @mut EntryContext, visitor: EntryVisitor) {\n+    match item.node {\n+        item_fn(*) => {\n+            // If this is the main function, we must record it in the\n+            // session.\n+\n+            // FIXME #4404 android JNI hacks\n+            if !*ctxt.session.building_library ||\n+                ctxt.session.targ_cfg.os == session::os_android {\n+\n+                if ctxt.attr_main_fn.is_none() &&\n+                    item.ident == special_idents::main {\n+\n+                    ctxt.main_fns.push(Some((item.id, item.span)));\n+                }\n+\n+                if attrs_contains_name(item.attrs, ~\"main\") {\n+                    if ctxt.attr_main_fn.is_none() {\n+                        ctxt.attr_main_fn = Some((item.id, item.span));\n+                    } else {\n+                        ctxt.session.span_err(\n+                            item.span,\n+                            ~\"multiple 'main' functions\");\n+                    }\n+                }\n+\n+                if attrs_contains_name(item.attrs, ~\"start\") {\n+                    if ctxt.start_fn.is_none() {\n+                        ctxt.start_fn = Some((item.id, item.span));\n+                    } else {\n+                        ctxt.session.span_err(\n+                            item.span,\n+                            ~\"multiple 'start' functions\");\n+                    }\n+                }\n+            }\n+        }\n+        _ => ()\n+    }\n+\n+    visit_item(item, ctxt, visitor);\n+}\n+\n+// main function checking\n+//\n+// be sure that there is only one main function\n+fn check_duplicate_main(ctxt: @mut EntryContext) {\n+    let this = &mut *ctxt;\n+    if this.attr_main_fn.is_none() && this.start_fn.is_none() {\n+        if this.main_fns.len() >= 1u {\n+            let mut i = 1u;\n+            while i < this.main_fns.len() {\n+                let (_, dup_main_span) = this.main_fns[i].unwrap();\n+                this.session.span_err(\n+                    dup_main_span,\n+                    ~\"multiple 'main' functions\");\n+                i += 1;\n+            }\n+            *this.session.entry_fn = this.main_fns[0];\n+            *this.session.entry_type = Some(session::EntryMain);\n+        }\n+    } else if !this.start_fn.is_none() {\n+        *this.session.entry_fn = this.start_fn;\n+        *this.session.entry_type = Some(session::EntryStart);\n+    } else {\n+        *this.session.entry_fn = this.attr_main_fn;\n+        *this.session.entry_type = Some(session::EntryMain);\n+    }\n+}"}, {"sha": "b0dd627c59f6afef33950c7200a96e582ec566d6", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/be8dc615c566104c528ca8389fa0807c8453c8a8/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8dc615c566104c528ca8389fa0807c8453c8a8/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=be8dc615c566104c528ca8389fa0807c8453c8a8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use driver::session;\n use driver::session::Session;\n use metadata::csearch::{each_path, get_trait_method_def_ids};\n use metadata::csearch::get_method_name_and_self_ty;\n@@ -794,11 +793,6 @@ pub fn Resolver(session: Session,\n \n         namespaces: ~[ TypeNS, ValueNS ],\n \n-        attr_main_fn: None,\n-        main_fns: ~[],\n-\n-        start_fn: None,\n-\n         def_map: @mut HashMap::new(),\n         export_map2: @mut HashMap::new(),\n         trait_map: HashMap::new(),\n@@ -856,15 +850,6 @@ pub struct Resolver {\n     // The four namespaces.\n     namespaces: ~[Namespace],\n \n-    // The function that has attribute named 'main'\n-    attr_main_fn: Option<(node_id, span)>,\n-\n-    // The functions that could be main functions\n-    main_fns: ~[Option<(node_id, span)>],\n-\n-    // The function that has the attribute 'start' on it\n-    start_fn: Option<(node_id, span)>,\n-\n     def_map: DefMap,\n     export_map2: ExportMap2,\n     trait_map: TraitMap,\n@@ -885,7 +870,6 @@ pub impl Resolver {\n         self.resolve_crate();\n         self.session.abort_if_errors();\n \n-        self.check_duplicate_main();\n         self.check_for_unused_imports_if_necessary();\n     }\n \n@@ -3545,40 +3529,6 @@ pub impl Resolver {\n             }\n \n             item_fn(ref fn_decl, _, _, ref generics, ref block) => {\n-                // If this is the main function, we must record it in the\n-                // session.\n-\n-                // FIXME #4404 android JNI hacks\n-                if !*self.session.building_library ||\n-                    self.session.targ_cfg.os == session::os_android {\n-\n-                    if self.attr_main_fn.is_none() &&\n-                           item.ident == special_idents::main {\n-\n-                        self.main_fns.push(Some((item.id, item.span)));\n-                    }\n-\n-                    if attrs_contains_name(item.attrs, ~\"main\") {\n-                        if self.attr_main_fn.is_none() {\n-                            self.attr_main_fn = Some((item.id, item.span));\n-                        } else {\n-                            self.session.span_err(\n-                                    item.span,\n-                                    ~\"multiple 'main' functions\");\n-                        }\n-                    }\n-\n-                    if attrs_contains_name(item.attrs, ~\"start\") {\n-                        if self.start_fn.is_none() {\n-                            self.start_fn = Some((item.id, item.span));\n-                        } else {\n-                            self.session.span_err(\n-                                    item.span,\n-                                    ~\"multiple 'start' functions\");\n-                        }\n-                    }\n-                }\n-\n                 self.resolve_function(OpaqueFunctionRibKind,\n                                       Some(fn_decl),\n                                       HasTypeParameters\n@@ -5109,35 +5059,6 @@ pub impl Resolver {\n         }\n     }\n \n-    //\n-    // main function checking\n-    //\n-    // be sure that there is only one main function\n-    //\n-    fn check_duplicate_main(@mut self) {\n-        let this = &mut *self;\n-        if this.attr_main_fn.is_none() && this.start_fn.is_none() {\n-            if this.main_fns.len() >= 1u {\n-                let mut i = 1u;\n-                while i < this.main_fns.len() {\n-                    let (_, dup_main_span) = this.main_fns[i].unwrap();\n-                    this.session.span_err(\n-                        dup_main_span,\n-                        ~\"multiple 'main' functions\");\n-                    i += 1;\n-                }\n-                *this.session.entry_fn = this.main_fns[0];\n-                *this.session.entry_type = Some(session::EntryMain);\n-            }\n-        } else if !this.start_fn.is_none() {\n-            *this.session.entry_fn = this.start_fn;\n-            *this.session.entry_type = Some(session::EntryStart);\n-        } else {\n-            *this.session.entry_fn = this.attr_main_fn;\n-            *this.session.entry_type = Some(session::EntryMain);\n-        }\n-    }\n-\n     //\n     // Unused import checking\n     //"}, {"sha": "82cf4cbaf54b17079f8ea37ada4cb5ced9f3e374", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be8dc615c566104c528ca8389fa0807c8453c8a8/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/be8dc615c566104c528ca8389fa0807c8453c8a8/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=be8dc615c566104c528ca8389fa0807c8453c8a8", "patch": "@@ -96,6 +96,7 @@ pub mod middle {\n     pub mod lang_items;\n     pub mod privacy;\n     pub mod moves;\n+    pub mod entry;\n }\n \n pub mod front {"}]}