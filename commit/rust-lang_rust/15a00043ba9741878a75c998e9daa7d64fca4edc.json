{"sha": "15a00043ba9741878a75c998e9daa7d64fca4edc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YTAwMDQzYmE5NzQxODc4YTc1Yzk5OGU5ZGFhN2Q2NGZjYTRlZGM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-10T09:28:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-10T09:28:33Z"}, "message": "Merge pull request #470 from RalfJung/ptr-offset\n\nonly allow 0-offset on integer pointers", "tree": {"sha": "1f03f3df9d0b0cb84a7bbf46cd7863a0dade3588", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f03f3df9d0b0cb84a7bbf46cd7863a0dade3588"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a00043ba9741878a75c998e9daa7d64fca4edc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbvcZBCRBK7hj4Ov3rIwAAdHIIAANH/KAzqtblk28Wh/dW5b/c\n4x4roj0156ez5vpoWtOMNSih1MB8hWYHLhntAouG5zxI9pE1WS/cXYyK/9T8qUf7\nVZ7TA7dlYtv5I6NXGgUZgbuXnD393EVCJxgG1A0XnpnrriSLOXOsGNMp8RpgGT2c\nysUG/xxVj81CrsVGZDC9MiN/24Hc3bnQzAjvifYxoOVdo6jgxZaZbgKWYwW6prW0\nQLIVSkF1hiHe+x6ycHVarctw8QY6zhpP2yUyfTMoP0xUeZ/DftQg3QJ+jz018d1R\n43lDJ7HB5VMmzu/E1aDBIIoAIPQejROJnE7Qz86cSzu4Tw2dqSEYJ7CFi0Q7xsc=\n=po1V\n-----END PGP SIGNATURE-----\n", "payload": "tree 1f03f3df9d0b0cb84a7bbf46cd7863a0dade3588\nparent 5a496ddde2a88ed8a08e4186f433719d14ea14db\nparent a439262859da79f0a791b4294fe14fc4ddd41d58\nauthor Ralf Jung <post@ralfj.de> 1539163713 +0200\ncommitter GitHub <noreply@github.com> 1539163713 +0200\n\nMerge pull request #470 from RalfJung/ptr-offset\n\nonly allow 0-offset on integer pointers"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a00043ba9741878a75c998e9daa7d64fca4edc", "html_url": "https://github.com/rust-lang/rust/commit/15a00043ba9741878a75c998e9daa7d64fca4edc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a00043ba9741878a75c998e9daa7d64fca4edc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a496ddde2a88ed8a08e4186f433719d14ea14db", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a496ddde2a88ed8a08e4186f433719d14ea14db", "html_url": "https://github.com/rust-lang/rust/commit/5a496ddde2a88ed8a08e4186f433719d14ea14db"}, {"sha": "a439262859da79f0a791b4294fe14fc4ddd41d58", "url": "https://api.github.com/repos/rust-lang/rust/commits/a439262859da79f0a791b4294fe14fc4ddd41d58", "html_url": "https://github.com/rust-lang/rust/commit/a439262859da79f0a791b4294fe14fc4ddd41d58"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "4662a162679e33e76b4b9b85a209bf9f477075fe", "filename": "src/operator.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15a00043ba9741878a75c998e9daa7d64fca4edc/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a00043ba9741878a75c998e9daa7d64fca4edc/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=15a00043ba9741878a75c998e9daa7d64fca4edc", "patch": "@@ -281,14 +281,6 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n         pointee_ty: Ty<'tcx>,\n         offset: i64,\n     ) -> EvalResult<'tcx, Scalar> {\n-        if ptr.is_null() {\n-            // NULL pointers must only be offset by 0\n-            return if offset == 0 {\n-                Ok(ptr)\n-            } else {\n-                err!(InvalidNullPointerUsage)\n-            };\n-        }\n         // FIXME: assuming here that type size is < i64::max_value()\n         let pointee_size = self.layout_of(pointee_ty)?.size.bytes() as i64;\n         let offset = offset.checked_mul(pointee_size).ok_or_else(|| EvalErrorKind::Overflow(mir::BinOp::Mul))?;\n@@ -301,9 +293,13 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n             self.memory.check_bounds_ptr(ptr, false)?;\n             Ok(Scalar::Ptr(ptr))\n         } else {\n-            // An integer pointer. They can move around freely, as long as they do not overflow\n-            // (which ptr_signed_offset checks).\n-            ptr.ptr_signed_offset(offset, self)\n+            // An integer pointer. They can only be offset by 0, and we pretend there\n+            // is a little zero-sized allocation here.\n+            if offset == 0 {\n+                Ok(ptr)\n+            } else {\n+                err!(InvalidPointerMath)\n+            }\n         }\n     }\n }"}, {"sha": "fa4efa323654ae9e4b430a136ebe631595ba7462", "filename": "tests/compile-fail/ptr_offset_int_plus_int.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15a00043ba9741878a75c998e9daa7d64fca4edc/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a00043ba9741878a75c998e9daa7d64fca4edc/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs?ref=15a00043ba9741878a75c998e9daa7d64fca4edc", "patch": "@@ -0,0 +1,8 @@\n+// error-pattern: invalid arithmetic on pointers\n+\n+fn main() {\n+    // Can't offset an integer pointer by non-zero offset.\n+    unsafe {\n+        let _ = (1 as *mut u8).offset(1);\n+    }\n+}"}, {"sha": "46937b1c8ce41567090688eb6b04ff07889ae431", "filename": "tests/compile-fail/ptr_offset_ptr_plus_0.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15a00043ba9741878a75c998e9daa7d64fca4edc/tests%2Fcompile-fail%2Fptr_offset_ptr_plus_0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a00043ba9741878a75c998e9daa7d64fca4edc/tests%2Fcompile-fail%2Fptr_offset_ptr_plus_0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_ptr_plus_0.rs?ref=15a00043ba9741878a75c998e9daa7d64fca4edc", "patch": "@@ -0,0 +1,7 @@\n+// error-pattern: outside bounds of allocation\n+\n+fn main() {\n+    let x = Box::into_raw(Box::new(0u32));\n+    let x = x.wrapping_offset(8); // okay, this has no inbounds tag\n+    let _x = unsafe { x.offset(0) }; // UB despite offset 0, the pointer is not inbounds of the only object it can point to\n+}"}]}