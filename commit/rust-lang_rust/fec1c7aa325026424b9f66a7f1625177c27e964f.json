{"sha": "fec1c7aa325026424b9f66a7f1625177c27e964f", "node_id": "C_kwDOAAsO6NoAKGZlYzFjN2FhMzI1MDI2NDI0YjlmNjZhN2YxNjI1MTc3YzI3ZTk2NGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-28T16:01:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-28T16:01:49Z"}, "message": "Auto merge of #2513 - RalfJung:protected, r=saethlin\n\nslightly improve protector-related error messages\n\nI find the current retag messages confusing, since they sound like the item *was* protected, when it still actively *is* protected (and that is, in fact, the issue).\n\nExample error message:\n```\nerror: Undefined Behavior: not granting access to tag <3095> because incompatible item [Unique for <3099>] is protected by call 943\n  --> tests/fail/stacked_borrows/invalidate_against_barrier1.rs:5:25\n   |\n5  |     let _val = unsafe { *x }; //~ ERROR: protect\n   |                         ^^ not granting access to tag <3095> because incompatible item [Unique for <3099>] is protected by call 943\n   |\n   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\nhelp: <3095> was created by a SharedReadWrite retag at offsets [0x0..0x4]\n  --> tests/fail/stacked_borrows/invalidate_against_barrier1.rs:10:16\n   |\n10 |     let xraw = &mut x as *mut _;\n   |                ^^^^^^\nhelp: <3095> cannot be used for memory access because that would remove protected tag <3099>, protected by this function call\n  --> tests/fail/stacked_borrows/invalidate_against_barrier1.rs:1:1\n   |\n1  | / fn inner(x: *mut i32, _y: &mut i32) {\n2  | |     // If `x` and `y` alias, retagging is fine with this... but we really\n3  | |     // shouldn't be allowed to use `x` at all because `y` was assumed to be\n4  | |     // unique for the duration of this call.\n5  | |     let _val = unsafe { *x }; //~ ERROR: protect\n6  | | }\n   | |_^\nhelp: <3099> was derived from <3098>, which in turn was created here\n  --> tests/fail/stacked_borrows/invalidate_against_barrier1.rs:12:17\n   |\n12 |     inner(xraw, xref);\n   |                 ^^^^\n   = note: backtrace:\n   = note: inside `inner` at tests/fail/stacked_borrows/invalidate_against_barrier1.rs:5:25\nnote: inside `main` at tests/fail/stacked_borrows/invalidate_against_barrier1.rs:12:5\n  --> tests/fail/stacked_borrows/invalidate_against_barrier1.rs:12:5\n   |\n12 |     inner(xraw, xref);\n   |     ^^^^^^^^^^^^^^^^^\n```\n\nr? `@saethlin`", "tree": {"sha": "b694613bc5efc2b8d1f7443dfc69b0ed25ca7dd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b694613bc5efc2b8d1f7443dfc69b0ed25ca7dd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fec1c7aa325026424b9f66a7f1625177c27e964f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fec1c7aa325026424b9f66a7f1625177c27e964f", "html_url": "https://github.com/rust-lang/rust/commit/fec1c7aa325026424b9f66a7f1625177c27e964f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fec1c7aa325026424b9f66a7f1625177c27e964f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88665133b709928a88efed760d1219f2d821aea2", "url": "https://api.github.com/repos/rust-lang/rust/commits/88665133b709928a88efed760d1219f2d821aea2", "html_url": "https://github.com/rust-lang/rust/commit/88665133b709928a88efed760d1219f2d821aea2"}, {"sha": "abe890d2ce8e6fa08bb5c2ccc82e45cdfbd35481", "url": "https://api.github.com/repos/rust-lang/rust/commits/abe890d2ce8e6fa08bb5c2ccc82e45cdfbd35481", "html_url": "https://github.com/rust-lang/rust/commit/abe890d2ce8e6fa08bb5c2ccc82e45cdfbd35481"}], "stats": {"total": 168, "additions": 86, "deletions": 82}, "files": [{"sha": "87f0ce74191815fcf3b70efa0a038c8cc93bed5a", "filename": "src/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fec1c7aa325026424b9f66a7f1625177c27e964f/src%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec1c7aa325026424b9f66a7f1625177c27e964f/src%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fdiagnostics.rs?ref=fec1c7aa325026424b9f66a7f1625177c27e964f", "patch": "@@ -2,7 +2,7 @@ use smallvec::SmallVec;\n use std::fmt;\n \n use rustc_middle::mir::interpret::{alloc_range, AllocId, AllocRange};\n-use rustc_span::{Span, SpanData};\n+use rustc_span::{Span, SpanData, DUMMY_SP};\n use rustc_target::abi::Size;\n \n use crate::helpers::CurrentSpan;\n@@ -91,6 +91,7 @@ impl fmt::Display for InvalidationCause {\n \n #[derive(Clone, Debug)]\n struct Protection {\n+    /// The parent tag from which this protected tag was derived.\n     orig_tag: ProvenanceExtra,\n     tag: SbTag,\n     span: Span,\n@@ -342,32 +343,39 @@ impl<'span, 'history, 'ecx, 'mir, 'tcx> DiagnosticCx<'span, 'history, 'ecx, 'mir\n \n         let protected = protector_tag\n             .and_then(|protector| {\n-                self.history.protectors.iter().find_map(|protection| {\n-                    if protection.tag == protector {\n-                        Some((protection.orig_tag, protection.span.data()))\n-                    } else {\n-                        None\n-                    }\n+                self.history.protectors.iter().find(|protection| {\n+                    protection.tag == protector\n                 })\n             })\n-            .and_then(|(tag, call_span)| {\n+            .and_then(|protection| {\n                 self.history.creations.iter().rev().find_map(|event| {\n-                    if ProvenanceExtra::Concrete(event.retag.new_tag) == tag {\n-                        Some((event.retag.orig_tag, event.span.data(), call_span))\n+                    if ProvenanceExtra::Concrete(event.retag.new_tag) == protection.orig_tag {\n+                        Some((protection, event))\n                     } else {\n                         None\n                     }\n                 })\n             })\n-            .map(|(protecting_tag, protecting_tag_span, protection_span)| {\n+            .map(|(protection, protection_parent)| {\n+                let protected_tag = protection.tag;\n                 [\n                     (\n                         format!(\n-                            \"{tag:?} was protected due to {protecting_tag:?} which was created here\"\n+                            \"{tag:?} cannot be used for memory access because that would remove protected tag {protected_tag:?}, protected by this function call\",\n                         ),\n-                        protecting_tag_span,\n+                        protection.span.data(),\n                     ),\n-                    (format!(\"this protector is live for this call\"), protection_span),\n+                    if protection_parent.retag.new_tag == tag {\n+                        (format!(\"{protected_tag:?} was derived from {tag:?}, the tag used for this memory access\"), DUMMY_SP.data())\n+                    } else {\n+                        (\n+                            format!(\n+                                \"{protected_tag:?} was derived from {protected_parent_tag:?}, which in turn was created here\",\n+                                protected_parent_tag = protection_parent.retag.new_tag,\n+                            ),\n+                            protection_parent.span.data()\n+                        )\n+                    }\n                 ]\n             });\n "}, {"sha": "e5be3061b32c4a210203ae4b6cbbfa8be63ebd55", "filename": "tests/fail/stacked_borrows/aliasing_mut1.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr?ref=fec1c7aa325026424b9f66a7f1625177c27e964f", "patch": "@@ -11,16 +11,12 @@ help: <TAG> was created by a Unique retag at offsets [0x0..0x4]\n    |\n LL |     let xraw: *mut i32 = unsafe { mem::transmute(&mut x) };\n    |                                                  ^^^^^^\n-help: <TAG> was protected due to <TAG> which was created here\n-  --> $DIR/aliasing_mut1.rs:LL:CC\n-   |\n-LL |     let xraw: *mut i32 = unsafe { mem::transmute(&mut x) };\n-   |                                                  ^^^^^^\n-help: this protector is live for this call\n+help: <TAG> cannot be used for memory access because that would remove protected tag <TAG>, protected by this function call\n   --> $DIR/aliasing_mut1.rs:LL:CC\n    |\n LL | pub fn safe(_x: &mut i32, _y: &mut i32) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: <TAG> was derived from <TAG>, the tag used for this memory access\n    = note: backtrace:\n    = note: inside `safe` at $DIR/aliasing_mut1.rs:LL:CC\n note: inside `main` at $DIR/aliasing_mut1.rs:LL:CC"}, {"sha": "c3dd3a893c0724d646fb3280789dc1b58c76a621", "filename": "tests/fail/stacked_borrows/aliasing_mut2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr?ref=fec1c7aa325026424b9f66a7f1625177c27e964f", "patch": "@@ -11,16 +11,16 @@ help: <TAG> was created by a Unique retag at offsets [0x0..0x4]\n    |\n LL |     let xref = &mut x;\n    |                ^^^^^^\n-help: <TAG> was protected due to <TAG> which was created here\n-  --> $DIR/aliasing_mut2.rs:LL:CC\n-   |\n-LL |     safe_raw(xshr, xraw);\n-   |              ^^^^\n-help: this protector is live for this call\n+help: <TAG> cannot be used for memory access because that would remove protected tag <TAG>, protected by this function call\n   --> $DIR/aliasing_mut2.rs:LL:CC\n    |\n LL | pub fn safe(_x: &i32, _y: &mut i32) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: <TAG> was derived from <TAG>, which in turn was created here\n+  --> $DIR/aliasing_mut2.rs:LL:CC\n+   |\n+LL |     safe_raw(xshr, xraw);\n+   |              ^^^^\n    = note: backtrace:\n    = note: inside `safe` at $DIR/aliasing_mut2.rs:LL:CC\n note: inside `main` at $DIR/aliasing_mut2.rs:LL:CC"}, {"sha": "601422ece3020c59a40aa5a4733cceea044023f5", "filename": "tests/fail/stacked_borrows/aliasing_mut4.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr?ref=fec1c7aa325026424b9f66a7f1625177c27e964f", "patch": "@@ -11,16 +11,16 @@ help: <TAG> was created by a Unique retag at offsets [0x0..0x4]\n    |\n LL |     let xref = &mut x;\n    |                ^^^^^^\n-help: <TAG> was protected due to <TAG> which was created here\n-  --> $DIR/aliasing_mut4.rs:LL:CC\n-   |\n-LL |     safe_raw(xshr, xraw as *mut _);\n-   |              ^^^^\n-help: this protector is live for this call\n+help: <TAG> cannot be used for memory access because that would remove protected tag <TAG>, protected by this function call\n   --> $DIR/aliasing_mut4.rs:LL:CC\n    |\n LL | pub fn safe(_x: &i32, _y: &mut Cell<i32>) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: <TAG> was derived from <TAG>, which in turn was created here\n+  --> $DIR/aliasing_mut4.rs:LL:CC\n+   |\n+LL |     safe_raw(xshr, xraw as *mut _);\n+   |              ^^^^\n    = note: backtrace:\n    = note: inside `safe` at $DIR/aliasing_mut4.rs:LL:CC\n note: inside `main` at $DIR/aliasing_mut4.rs:LL:CC"}, {"sha": "9b710424c55c4fc1188d3e3d290331c9aaa421b3", "filename": "tests/fail/stacked_borrows/deallocate_against_protector1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.rs?ref=fec1c7aa325026424b9f66a7f1625177c27e964f", "previous_filename": "tests/fail/stacked_borrows/deallocate_against_barrier1.rs"}, {"sha": "2ead0c6a9ddac10004ad936ffb23c75a28c595e3", "filename": "tests/fail/stacked_borrows/deallocate_against_protector1.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.stderr?ref=fec1c7aa325026424b9f66a7f1625177c27e964f", "patch": "@@ -12,19 +12,19 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    = note: inside `alloc::alloc::box_free::<i32, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `std::ptr::drop_in_place::<std::boxed::Box<i32>> - shim(Some(std::boxed::Box<i32>))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n    = note: inside `std::mem::drop::<std::boxed::Box<i32>>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n-note: inside closure at $DIR/deallocate_against_barrier1.rs:LL:CC\n-  --> $DIR/deallocate_against_barrier1.rs:LL:CC\n+note: inside closure at $DIR/deallocate_against_protector1.rs:LL:CC\n+  --> $DIR/deallocate_against_protector1.rs:LL:CC\n    |\n LL |         drop(unsafe { Box::from_raw(raw) });\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: inside `<[closure@$DIR/deallocate_against_barrier1.rs:LL:CC] as std::ops::FnOnce<(&mut i32,)>>::call_once - shim` at RUSTLIB/core/src/ops/function.rs:LL:CC\n-note: inside `inner` at $DIR/deallocate_against_barrier1.rs:LL:CC\n-  --> $DIR/deallocate_against_barrier1.rs:LL:CC\n+   = note: inside `<[closure@$DIR/deallocate_against_protector1.rs:LL:CC] as std::ops::FnOnce<(&mut i32,)>>::call_once - shim` at RUSTLIB/core/src/ops/function.rs:LL:CC\n+note: inside `inner` at $DIR/deallocate_against_protector1.rs:LL:CC\n+  --> $DIR/deallocate_against_protector1.rs:LL:CC\n    |\n LL |     f(x)\n    |     ^^^^\n-note: inside `main` at $DIR/deallocate_against_barrier1.rs:LL:CC\n-  --> $DIR/deallocate_against_barrier1.rs:LL:CC\n+note: inside `main` at $DIR/deallocate_against_protector1.rs:LL:CC\n+  --> $DIR/deallocate_against_protector1.rs:LL:CC\n    |\n LL | /     inner(Box::leak(Box::new(0)), |x| {\n LL | |         let raw = x as *mut _;", "previous_filename": "tests/fail/stacked_borrows/deallocate_against_barrier1.stderr"}, {"sha": "36e133e38365091a506886f2353c7c8786e1529e", "filename": "tests/fail/stacked_borrows/deallocate_against_protector2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector2.rs?ref=fec1c7aa325026424b9f66a7f1625177c27e964f", "previous_filename": "tests/fail/stacked_borrows/deallocate_against_barrier2.rs"}, {"sha": "60be936bd7e47a4360e1d2d32d912977de2528eb", "filename": "tests/fail/stacked_borrows/deallocate_against_protector2.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector2.stderr?ref=fec1c7aa325026424b9f66a7f1625177c27e964f", "patch": "@@ -12,19 +12,19 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    = note: inside `alloc::alloc::box_free::<NotUnpin, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `std::ptr::drop_in_place::<std::boxed::Box<NotUnpin>> - shim(Some(std::boxed::Box<NotUnpin>))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n    = note: inside `std::mem::drop::<std::boxed::Box<NotUnpin>>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n-note: inside closure at $DIR/deallocate_against_barrier2.rs:LL:CC\n-  --> $DIR/deallocate_against_barrier2.rs:LL:CC\n+note: inside closure at $DIR/deallocate_against_protector2.rs:LL:CC\n+  --> $DIR/deallocate_against_protector2.rs:LL:CC\n    |\n LL |         drop(unsafe { Box::from_raw(raw) });\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: inside `<[closure@$DIR/deallocate_against_barrier2.rs:LL:CC] as std::ops::FnOnce<(&mut NotUnpin,)>>::call_once - shim` at RUSTLIB/core/src/ops/function.rs:LL:CC\n-note: inside `inner` at $DIR/deallocate_against_barrier2.rs:LL:CC\n-  --> $DIR/deallocate_against_barrier2.rs:LL:CC\n+   = note: inside `<[closure@$DIR/deallocate_against_protector2.rs:LL:CC] as std::ops::FnOnce<(&mut NotUnpin,)>>::call_once - shim` at RUSTLIB/core/src/ops/function.rs:LL:CC\n+note: inside `inner` at $DIR/deallocate_against_protector2.rs:LL:CC\n+  --> $DIR/deallocate_against_protector2.rs:LL:CC\n    |\n LL |     f(x)\n    |     ^^^^\n-note: inside `main` at $DIR/deallocate_against_barrier2.rs:LL:CC\n-  --> $DIR/deallocate_against_barrier2.rs:LL:CC\n+note: inside `main` at $DIR/deallocate_against_protector2.rs:LL:CC\n+  --> $DIR/deallocate_against_protector2.rs:LL:CC\n    |\n LL | /     inner(Box::leak(Box::new(NotUnpin(0, PhantomPinned))), |x| {\n LL | |         let raw = x as *mut _;", "previous_filename": "tests/fail/stacked_borrows/deallocate_against_barrier2.stderr"}, {"sha": "fd3b19adcf5ea6d7d5f29635d34cc8454420de46", "filename": "tests/fail/stacked_borrows/illegal_write6.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr?ref=fec1c7aa325026424b9f66a7f1625177c27e964f", "patch": "@@ -11,12 +11,7 @@ help: <TAG> was created by a SharedReadWrite retag at offsets [0x0..0x4]\n    |\n LL |     let p = x as *mut u32;\n    |             ^\n-help: <TAG> was protected due to <TAG> which was created here\n-  --> $DIR/illegal_write6.rs:LL:CC\n-   |\n-LL |     foo(x, p);\n-   |         ^\n-help: this protector is live for this call\n+help: <TAG> cannot be used for memory access because that would remove protected tag <TAG>, protected by this function call\n   --> $DIR/illegal_write6.rs:LL:CC\n    |\n LL | / fn foo(a: &mut u32, y: *mut u32) -> u32 {\n@@ -26,6 +21,11 @@ LL | |     unsafe { *y = 2 };\n LL | |     return *a;\n LL | | }\n    | |_^\n+help: <TAG> was derived from <TAG>, which in turn was created here\n+  --> $DIR/illegal_write6.rs:LL:CC\n+   |\n+LL |     foo(x, p);\n+   |         ^\n    = note: backtrace:\n    = note: inside `foo` at $DIR/illegal_write6.rs:LL:CC\n note: inside `main` at $DIR/illegal_write6.rs:LL:CC"}, {"sha": "d0f43510c28ffeb7e4a63d9d64e94900e6bc4e84", "filename": "tests/fail/stacked_borrows/invalidate_against_protector1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector1.rs?ref=fec1c7aa325026424b9f66a7f1625177c27e964f", "previous_filename": "tests/fail/stacked_borrows/invalidate_against_barrier1.rs"}, {"sha": "18236adec882a9d45258318bedf59f0f0394d9fa", "filename": "tests/fail/stacked_borrows/invalidate_against_protector1.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector1.stderr?ref=fec1c7aa325026424b9f66a7f1625177c27e964f", "patch": "@@ -1,23 +1,18 @@\n error: Undefined Behavior: not granting access to tag <TAG> because incompatible item [Unique for <TAG>] is protected by call ID\n-  --> $DIR/invalidate_against_barrier1.rs:LL:CC\n+  --> $DIR/invalidate_against_protector1.rs:LL:CC\n    |\n LL |     let _val = unsafe { *x };\n    |                         ^^ not granting access to tag <TAG> because incompatible item [Unique for <TAG>] is protected by call ID\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n help: <TAG> was created by a SharedReadWrite retag at offsets [0x0..0x4]\n-  --> $DIR/invalidate_against_barrier1.rs:LL:CC\n+  --> $DIR/invalidate_against_protector1.rs:LL:CC\n    |\n LL |     let xraw = &mut x as *mut _;\n    |                ^^^^^^\n-help: <TAG> was protected due to <TAG> which was created here\n-  --> $DIR/invalidate_against_barrier1.rs:LL:CC\n-   |\n-LL |     inner(xraw, xref);\n-   |                 ^^^^\n-help: this protector is live for this call\n-  --> $DIR/invalidate_against_barrier1.rs:LL:CC\n+help: <TAG> cannot be used for memory access because that would remove protected tag <TAG>, protected by this function call\n+  --> $DIR/invalidate_against_protector1.rs:LL:CC\n    |\n LL | / fn inner(x: *mut i32, _y: &mut i32) {\n LL | |     // If `x` and `y` alias, retagging is fine with this... but we really\n@@ -26,10 +21,15 @@ LL | |     // unique for the duration of this call.\n LL | |     let _val = unsafe { *x };\n LL | | }\n    | |_^\n+help: <TAG> was derived from <TAG>, which in turn was created here\n+  --> $DIR/invalidate_against_protector1.rs:LL:CC\n+   |\n+LL |     inner(xraw, xref);\n+   |                 ^^^^\n    = note: backtrace:\n-   = note: inside `inner` at $DIR/invalidate_against_barrier1.rs:LL:CC\n-note: inside `main` at $DIR/invalidate_against_barrier1.rs:LL:CC\n-  --> $DIR/invalidate_against_barrier1.rs:LL:CC\n+   = note: inside `inner` at $DIR/invalidate_against_protector1.rs:LL:CC\n+note: inside `main` at $DIR/invalidate_against_protector1.rs:LL:CC\n+  --> $DIR/invalidate_against_protector1.rs:LL:CC\n    |\n LL |     inner(xraw, xref);\n    |     ^^^^^^^^^^^^^^^^^", "previous_filename": "tests/fail/stacked_borrows/invalidate_against_barrier1.stderr"}, {"sha": "f4e767302fd009d555d341219ed3eee1088d2b54", "filename": "tests/fail/stacked_borrows/invalidate_against_protector2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector2.rs?ref=fec1c7aa325026424b9f66a7f1625177c27e964f", "previous_filename": "tests/fail/stacked_borrows/invalidate_against_barrier2.rs"}, {"sha": "20b9d47bbef3e79118c9aea9e28b277ff356f0f5", "filename": "tests/fail/stacked_borrows/invalidate_against_protector2.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector2.stderr?ref=fec1c7aa325026424b9f66a7f1625177c27e964f", "patch": "@@ -1,23 +1,18 @@\n error: Undefined Behavior: not granting access to tag <TAG> because incompatible item [SharedReadOnly for <TAG>] is protected by call ID\n-  --> $DIR/invalidate_against_barrier2.rs:LL:CC\n+  --> $DIR/invalidate_against_protector2.rs:LL:CC\n    |\n LL |     unsafe { *x = 0 };\n    |              ^^^^^^ not granting access to tag <TAG> because incompatible item [SharedReadOnly for <TAG>] is protected by call ID\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n help: <TAG> was created by a SharedReadWrite retag at offsets [0x0..0x4]\n-  --> $DIR/invalidate_against_barrier2.rs:LL:CC\n+  --> $DIR/invalidate_against_protector2.rs:LL:CC\n    |\n LL |     let xraw = &mut x as *mut _;\n    |                ^^^^^^\n-help: <TAG> was protected due to <TAG> which was created here\n-  --> $DIR/invalidate_against_barrier2.rs:LL:CC\n-   |\n-LL |     inner(xraw, xref);\n-   |                 ^^^^\n-help: this protector is live for this call\n-  --> $DIR/invalidate_against_barrier2.rs:LL:CC\n+help: <TAG> cannot be used for memory access because that would remove protected tag <TAG>, protected by this function call\n+  --> $DIR/invalidate_against_protector2.rs:LL:CC\n    |\n LL | / fn inner(x: *mut i32, _y: &i32) {\n LL | |     // If `x` and `y` alias, retagging is fine with this... but we really\n@@ -26,10 +21,15 @@ LL | |     // immutable for the duration of this call.\n LL | |     unsafe { *x = 0 };\n LL | | }\n    | |_^\n+help: <TAG> was derived from <TAG>, which in turn was created here\n+  --> $DIR/invalidate_against_protector2.rs:LL:CC\n+   |\n+LL |     inner(xraw, xref);\n+   |                 ^^^^\n    = note: backtrace:\n-   = note: inside `inner` at $DIR/invalidate_against_barrier2.rs:LL:CC\n-note: inside `main` at $DIR/invalidate_against_barrier2.rs:LL:CC\n-  --> $DIR/invalidate_against_barrier2.rs:LL:CC\n+   = note: inside `inner` at $DIR/invalidate_against_protector2.rs:LL:CC\n+note: inside `main` at $DIR/invalidate_against_protector2.rs:LL:CC\n+  --> $DIR/invalidate_against_protector2.rs:LL:CC\n    |\n LL |     inner(xraw, xref);\n    |     ^^^^^^^^^^^^^^^^^", "previous_filename": "tests/fail/stacked_borrows/invalidate_against_barrier2.stderr"}, {"sha": "e75502d361059445f8439ccf8a430d01f891fb1c", "filename": "tests/fail/stacked_borrows/newtype_retagging.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fec1c7aa325026424b9f66a7f1625177c27e964f/tests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.stderr?ref=fec1c7aa325026424b9f66a7f1625177c27e964f", "patch": "@@ -11,18 +11,18 @@ help: <TAG> was created by a SharedReadWrite retag at offsets [0x0..0x4]\n    |\n LL |     let ptr = Box::into_raw(Box::new(0i32));\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: <TAG> was protected due to <TAG> which was created here\n-  --> $DIR/newtype_retagging.rs:LL:CC\n-   |\n-LL |             Newtype(&mut *ptr),\n-   |             ^^^^^^^^^^^^^^^^^^\n-help: this protector is live for this call\n+help: <TAG> cannot be used for memory access because that would remove protected tag <TAG>, protected by this function call\n   --> $DIR/newtype_retagging.rs:LL:CC\n    |\n LL | / fn dealloc_while_running(_n: Newtype<'_>, dealloc: impl FnOnce()) {\n LL | |     dealloc();\n LL | | }\n    | |_^\n+help: <TAG> was derived from <TAG>, which in turn was created here\n+  --> $DIR/newtype_retagging.rs:LL:CC\n+   |\n+LL |             Newtype(&mut *ptr),\n+   |             ^^^^^^^^^^^^^^^^^^\n    = note: backtrace:\n    = note: inside `std::boxed::Box::<i32>::from_raw_in` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n    = note: inside `std::boxed::Box::<i32>::from_raw` at RUSTLIB/alloc/src/boxed.rs:LL:CC"}]}