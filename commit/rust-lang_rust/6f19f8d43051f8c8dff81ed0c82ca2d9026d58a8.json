{"sha": "6f19f8d43051f8c8dff81ed0c82ca2d9026d58a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMTlmOGQ0MzA1MWY4YzhkZmY4MWVkMGM4MmNhMmQ5MDI2ZDU4YTg=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-05T21:55:16Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:46Z"}, "message": "libcollections: use unboxed closures in `DList` methods", "tree": {"sha": "0faa45e656591acabc0cf714c7a570b6f2fd5d1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0faa45e656591acabc0cf714c7a570b6f2fd5d1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f19f8d43051f8c8dff81ed0c82ca2d9026d58a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f19f8d43051f8c8dff81ed0c82ca2d9026d58a8", "html_url": "https://github.com/rust-lang/rust/commit/6f19f8d43051f8c8dff81ed0c82ca2d9026d58a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f19f8d43051f8c8dff81ed0c82ca2d9026d58a8/comments", "author": null, "committer": null, "parents": [{"sha": "d5c332688c83043dffcf14ef8fd6ba3fafdae55e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5c332688c83043dffcf14ef8fd6ba3fafdae55e", "html_url": "https://github.com/rust-lang/rust/commit/d5c332688c83043dffcf14ef8fd6ba3fafdae55e"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "f49a0c037de84372133d35cc23b9caac9fc4fafa", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f19f8d43051f8c8dff81ed0c82ca2d9026d58a8/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f19f8d43051f8c8dff81ed0c82ca2d9026d58a8/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=6f19f8d43051f8c8dff81ed0c82ca2d9026d58a8", "patch": "@@ -351,18 +351,16 @@ impl<T> DList<T> {\n     ///     println!(\"{}\", e); // prints 2, then 4, then 11, then 7, then 8\n     /// }\n     /// ```\n-    pub fn insert_when(&mut self, elt: T, f: |&T, &T| -> bool) {\n-        {\n-            let mut it = self.iter_mut();\n-            loop {\n-                match it.peek_next() {\n-                    None => break,\n-                    Some(x) => if f(x, &elt) { break }\n-                }\n-                it.next();\n+    pub fn insert_when<F>(&mut self, elt: T, mut f: F) where F: FnMut(&T, &T) -> bool {\n+        let mut it = self.iter_mut();\n+        loop {\n+            match it.peek_next() {\n+                None => break,\n+                Some(x) => if f(x, &elt) { break }\n             }\n-            it.insert_next(elt);\n+            it.next();\n         }\n+        it.insert_next(elt);\n     }\n \n     /// Merges `other` into this `DList`, using the function `f`.\n@@ -371,7 +369,7 @@ impl<T> DList<T> {\n     /// put `a` in the result if `f(a, b)` is true, and otherwise `b`.\n     ///\n     /// This operation should compute in O(max(N, M)) time.\n-    pub fn merge(&mut self, mut other: DList<T>, f: |&T, &T| -> bool) {\n+    pub fn merge<F>(&mut self, mut other: DList<T>, mut f: F) where F: FnMut(&T, &T) -> bool {\n         {\n             let mut it = self.iter_mut();\n             loop {"}]}