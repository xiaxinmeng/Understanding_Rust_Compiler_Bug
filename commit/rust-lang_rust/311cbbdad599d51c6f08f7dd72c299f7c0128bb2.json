{"sha": "311cbbdad599d51c6f08f7dd72c299f7c0128bb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMWNiYmRhZDU5OWQ1MWM2ZjA4ZjdkZDcyYzI5OWY3YzAxMjhiYjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-28T10:20:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-28T11:27:54Z"}, "message": "Remove some unwraps", "tree": {"sha": "d3ccef4aa8f681cc9de29f0435ad20e87911a6ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3ccef4aa8f681cc9de29f0435ad20e87911a6ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/311cbbdad599d51c6f08f7dd72c299f7c0128bb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/311cbbdad599d51c6f08f7dd72c299f7c0128bb2", "html_url": "https://github.com/rust-lang/rust/commit/311cbbdad599d51c6f08f7dd72c299f7c0128bb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/311cbbdad599d51c6f08f7dd72c299f7c0128bb2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6596e7cddfc00281362c3640781f6cd6bc0b5614", "url": "https://api.github.com/repos/rust-lang/rust/commits/6596e7cddfc00281362c3640781f6cd6bc0b5614", "html_url": "https://github.com/rust-lang/rust/commit/6596e7cddfc00281362c3640781f6cd6bc0b5614"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "0f8522021e0fabd393b99b1f36427d00f1135fa5", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/311cbbdad599d51c6f08f7dd72c299f7c0128bb2/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/311cbbdad599d51c6f08f7dd72c299f7c0128bb2/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=311cbbdad599d51c6f08f7dd72c299f7c0128bb2", "patch": "@@ -4,6 +4,7 @@ use std::any::Any;\n \n use hir_expand::{db::AstDatabase, name::Name, HirFileId, InFile};\n use ra_syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n+use stdx::format_to;\n \n pub use hir_def::diagnostics::UnresolvedModule;\n pub use hir_expand::diagnostics::{AstDiagnostic, Diagnostic, DiagnosticSink};\n@@ -37,12 +38,11 @@ pub struct MissingFields {\n \n impl Diagnostic for MissingFields {\n     fn message(&self) -> String {\n-        use std::fmt::Write;\n-        let mut message = String::from(\"Missing structure fields:\\n\");\n+        let mut buf = String::from(\"Missing structure fields:\\n\");\n         for field in &self.missed_fields {\n-            writeln!(message, \"- {}\", field).unwrap();\n+            format_to!(buf, \"- {}\", field);\n         }\n-        message\n+        buf\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.field_list.into() }"}, {"sha": "027e5a8f88a09b9ff60deaf413d25a317da1edc7", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/311cbbdad599d51c6f08f7dd72c299f7c0128bb2/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/311cbbdad599d51c6f08f7dd72c299f7c0128bb2/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=311cbbdad599d51c6f08f7dd72c299f7c0128bb2", "patch": "@@ -7,7 +7,6 @@ mod traits;\n mod method_resolution;\n mod macros;\n \n-use std::fmt::Write;\n use std::sync::Arc;\n \n use hir_def::{\n@@ -26,6 +25,7 @@ use ra_syntax::{\n     algo,\n     ast::{self, AstNode},\n };\n+use stdx::format_to;\n \n use crate::{db::HirDatabase, display::HirDisplay, test_db::TestDB, InferenceResult};\n \n@@ -63,7 +63,7 @@ fn infer(ra_fixture: &str) -> String {\n fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n     let (db, file_id) = TestDB::with_single_file(content);\n \n-    let mut acc = String::new();\n+    let mut buf = String::new();\n \n     let mut infer_def = |inference_result: Arc<InferenceResult>,\n                          body_source_map: Arc<BodySourceMap>| {\n@@ -106,15 +106,14 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n                 (src_ptr.value.range(), node.text().to_string().replace(\"\\n\", \" \"))\n             };\n             let macro_prefix = if src_ptr.file_id != file_id.into() { \"!\" } else { \"\" };\n-            writeln!(\n-                acc,\n-                \"{}{} '{}': {}\",\n+            format_to!(\n+                buf,\n+                \"{}{} '{}': {}\\n\",\n                 macro_prefix,\n                 range,\n                 ellipsize(text, 15),\n                 ty.display(&db)\n-            )\n-            .unwrap();\n+            );\n         }\n         if include_mismatches {\n             mismatches.sort_by_key(|(src_ptr, _)| {\n@@ -123,15 +122,14 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n             for (src_ptr, mismatch) in &mismatches {\n                 let range = src_ptr.value.range();\n                 let macro_prefix = if src_ptr.file_id != file_id.into() { \"!\" } else { \"\" };\n-                writeln!(\n-                    acc,\n-                    \"{}{}: expected {}, got {}\",\n+                format_to!(\n+                    buf,\n+                    \"{}{}: expected {}, got {}\\n\",\n                     macro_prefix,\n                     range,\n                     mismatch.expected.display(&db),\n                     mismatch.actual.display(&db),\n-                )\n-                .unwrap();\n+                );\n             }\n         }\n     };\n@@ -158,8 +156,8 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n         infer_def(infer, source_map);\n     }\n \n-    acc.truncate(acc.trim_end().len());\n-    acc\n+    buf.truncate(buf.trim_end().len());\n+    buf\n }\n \n fn visit_module("}, {"sha": "722092de97d8380aaa1101d3359649fcbb87280f", "filename": "crates/ra_ide/src/display.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/311cbbdad599d51c6f08f7dd72c299f7c0128bb2/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/311cbbdad599d51c6f08f7dd72c299f7c0128bb2/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay.rs?ref=311cbbdad599d51c6f08f7dd72c299f7c0128bb2", "patch": "@@ -6,12 +6,13 @@ mod navigation_target;\n mod structure;\n mod short_label;\n \n-use std::fmt::{Display, Write};\n+use std::fmt::Display;\n \n use ra_syntax::{\n     ast::{self, AstNode, AttrsOwner, NameOwner, TypeParamsOwner},\n     SyntaxKind::{ATTR, COMMENT},\n };\n+use stdx::format_to;\n \n pub use function_signature::FunctionSignature;\n pub use navigation_target::NavigationTarget;\n@@ -78,18 +79,18 @@ pub(crate) fn rust_code_markup_with_doc(\n     doc: Option<&str>,\n     mod_path: Option<&str>,\n ) -> String {\n-    let mut markup = \"```rust\\n\".to_owned();\n+    let mut buf = \"```rust\\n\".to_owned();\n \n     if let Some(mod_path) = mod_path {\n         if !mod_path.is_empty() {\n-            write!(markup, \"{}\\n\", mod_path).unwrap();\n+            format_to!(buf, \"{}\\n\", mod_path);\n         }\n     }\n-    write!(markup, \"{}\\n```\", code).unwrap();\n+    format_to!(buf, \"{}\\n```\", code);\n \n     if let Some(doc) = doc {\n-        write!(markup, \"\\n\\n{}\", doc).unwrap();\n+        format_to!(buf, \"\\n\\n{}\", doc);\n     }\n \n-    markup\n+    buf\n }"}, {"sha": "75cf2dae50d6049e8da0089f59a501fc73169ca6", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/311cbbdad599d51c6f08f7dd72c299f7c0128bb2/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/311cbbdad599d51c6f08f7dd72c299f7c0128bb2/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=311cbbdad599d51c6f08f7dd72c299f7c0128bb2", "patch": "@@ -1,7 +1,7 @@\n //! Fully type-check project and print various stats, like the number of type\n //! errors.\n \n-use std::{collections::HashSet, fmt::Write, path::Path, time::Instant};\n+use std::{collections::HashSet, path::Path, time::Instant};\n \n use hir::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n@@ -13,6 +13,7 @@ use itertools::Itertools;\n use ra_db::SourceDatabaseExt;\n use ra_syntax::AstNode;\n use rand::{seq::SliceRandom, thread_rng};\n+use stdx::format_to;\n \n use crate::cli::{load_cargo::load_cargo, progress_report::ProgressReport, Result, Verbosity};\n \n@@ -128,7 +129,7 @@ pub fn analysis_stats(\n             let original_file = src.file_id.original_file(db);\n             let path = db.file_relative_path(original_file);\n             let syntax_range = src.value.syntax().text_range();\n-            write!(msg, \" ({:?} {})\", path, syntax_range).unwrap();\n+            format_to!(msg, \" ({:?} {})\", path, syntax_range);\n         }\n         if verbosity.is_spammy() {\n             bar.println(msg.to_string());"}, {"sha": "12f8ca2976d82eec0a43480ce24da87f745debef", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/311cbbdad599d51c6f08f7dd72c299f7c0128bb2/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/311cbbdad599d51c6f08f7dd72c299f7c0128bb2/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=311cbbdad599d51c6f08f7dd72c299f7c0128bb2", "patch": "@@ -3,7 +3,6 @@\n //! `ra_ide` crate.\n \n use std::{\n-    fmt::Write as _,\n     io::Write as _,\n     process::{self, Stdio},\n };\n@@ -28,6 +27,7 @@ use ra_syntax::{AstNode, SyntaxKind, TextRange, TextUnit};\n use rustc_hash::FxHashMap;\n use serde::{Deserialize, Serialize};\n use serde_json::to_value;\n+use stdx::format_to;\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n@@ -46,11 +46,11 @@ use crate::{\n pub fn handle_analyzer_status(world: WorldSnapshot, _: ()) -> Result<String> {\n     let _p = profile(\"handle_analyzer_status\");\n     let mut buf = world.status();\n-    writeln!(buf, \"\\n\\nrequests:\").unwrap();\n+    format_to!(buf, \"\\n\\nrequests:\");\n     let requests = world.latest_requests.read();\n     for (is_last, r) in requests.iter() {\n         let mark = if is_last { \"*\" } else { \" \" };\n-        writeln!(buf, \"{}{:4} {:<36}{}ms\", mark, r.id, r.method, r.duration.as_millis()).unwrap();\n+        format_to!(buf, \"{}{:4} {:<36}{}ms\", mark, r.id, r.method, r.duration.as_millis());\n     }\n     Ok(buf)\n }"}]}