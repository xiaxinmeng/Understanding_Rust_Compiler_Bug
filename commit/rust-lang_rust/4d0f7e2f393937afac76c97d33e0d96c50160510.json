{"sha": "4d0f7e2f393937afac76c97d33e0d96c50160510", "node_id": "C_kwDOAAsO6NoAKDRkMGY3ZTJmMzkzOTM3YWZhYzc2Yzk3ZDMzZTBkOTZjNTAxNjA1MTA", "commit": {"author": {"name": "Michal Nazarewicz", "email": "mina86@mina86.com", "date": "2023-04-30T01:59:11Z"}, "committer": {"name": "Michal Nazarewicz", "email": "mina86@mina86.com", "date": "2023-04-30T01:59:11Z"}, "message": "review", "tree": {"sha": "cae40a47335c2458f27eec288593e3be2cd38895", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cae40a47335c2458f27eec288593e3be2cd38895"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d0f7e2f393937afac76c97d33e0d96c50160510", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d0f7e2f393937afac76c97d33e0d96c50160510", "html_url": "https://github.com/rust-lang/rust/commit/4d0f7e2f393937afac76c97d33e0d96c50160510", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d0f7e2f393937afac76c97d33e0d96c50160510/comments", "author": {"login": "mina86", "id": 32383, "node_id": "MDQ6VXNlcjMyMzgz", "avatar_url": "https://avatars.githubusercontent.com/u/32383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mina86", "html_url": "https://github.com/mina86", "followers_url": "https://api.github.com/users/mina86/followers", "following_url": "https://api.github.com/users/mina86/following{/other_user}", "gists_url": "https://api.github.com/users/mina86/gists{/gist_id}", "starred_url": "https://api.github.com/users/mina86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mina86/subscriptions", "organizations_url": "https://api.github.com/users/mina86/orgs", "repos_url": "https://api.github.com/users/mina86/repos", "events_url": "https://api.github.com/users/mina86/events{/privacy}", "received_events_url": "https://api.github.com/users/mina86/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mina86", "id": 32383, "node_id": "MDQ6VXNlcjMyMzgz", "avatar_url": "https://avatars.githubusercontent.com/u/32383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mina86", "html_url": "https://github.com/mina86", "followers_url": "https://api.github.com/users/mina86/followers", "following_url": "https://api.github.com/users/mina86/following{/other_user}", "gists_url": "https://api.github.com/users/mina86/gists{/gist_id}", "starred_url": "https://api.github.com/users/mina86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mina86/subscriptions", "organizations_url": "https://api.github.com/users/mina86/orgs", "repos_url": "https://api.github.com/users/mina86/repos", "events_url": "https://api.github.com/users/mina86/events{/privacy}", "received_events_url": "https://api.github.com/users/mina86/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45104397e5541b76e281ed9b72cb0a89a4c850eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/45104397e5541b76e281ed9b72cb0a89a4c850eb", "html_url": "https://github.com/rust-lang/rust/commit/45104397e5541b76e281ed9b72cb0a89a4c850eb"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "2408f1780755437a94089ef2b3e702aad8f17d5a", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d0f7e2f393937afac76c97d33e0d96c50160510/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0f7e2f393937afac76c97d33e0d96c50160510/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=4d0f7e2f393937afac76c97d33e0d96c50160510", "patch": "@@ -395,9 +395,9 @@ impl char {\n             '\\t' => EscapeDebug::backslash(b't'),\n             '\\r' => EscapeDebug::backslash(b'r'),\n             '\\n' => EscapeDebug::backslash(b'n'),\n-            '\\\\' => EscapeDebug::backslash(self as u8),\n-            '\"' if args.escape_double_quote => EscapeDebug::backslash(self as u8),\n-            '\\'' if args.escape_single_quote => EscapeDebug::backslash(self as u8),\n+            '\\\\' => EscapeDebug::backslash(b'\\\\'),\n+            '\"' if args.escape_double_quote => EscapeDebug::backslash(b'\"'),\n+            '\\'' if args.escape_single_quote => EscapeDebug::backslash(b'\\''),\n             _ if args.escape_grapheme_extended && self.is_grapheme_extended() => {\n                 EscapeDebug::from_unicode(self.escape_unicode())\n             }"}, {"sha": "e186db7052cd04ce09ae427546623943bf33b747", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d0f7e2f393937afac76c97d33e0d96c50160510/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0f7e2f393937afac76c97d33e0d96c50160510/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=4d0f7e2f393937afac76c97d33e0d96c50160510", "patch": "@@ -293,17 +293,17 @@ impl fmt::Display for EscapeDefault {\n pub struct EscapeDebug(EscapeDebugInner);\n \n #[derive(Clone, Debug)]\n+// Note: It\u2019s possible to manually encode the EscapeDebugInner inside of\n+// EscapeIterInner (e.g. with alive=254..255 indicating that data[0..4] holds\n+// a char) which would likely result in a more optimised code.  For now we use\n+// the option easier to implement.\n enum EscapeDebugInner {\n     Bytes(escape::EscapeIterInner<10>),\n     Char(char),\n }\n \n impl EscapeDebug {\n     fn printable(chr: char) -> Self {\n-        // Note: It\u2019s possible to manually encode the EscapeDebugInner inside of\n-        // EscapeIterInner (e.g. with alive=254..255 indicating that data[0..4]\n-        // holds a char) which would likely result in a more optimised code.\n-        // For now we use the option easier to implement.\n         Self(EscapeDebugInner::Char(chr))\n     }\n "}, {"sha": "c52c1fa870ed3a47adab72db90c45551c1711cd3", "filename": "library/core/src/escape.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d0f7e2f393937afac76c97d33e0d96c50160510/library%2Fcore%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0f7e2f393937afac76c97d33e0d96c50160510/library%2Fcore%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fescape.rs?ref=4d0f7e2f393937afac76c97d33e0d96c50160510", "patch": "@@ -7,7 +7,7 @@ const HEX_DIGITS: [u8; 16] = *b\"0123456789abcdef\";\n \n /// Escapes a byte into provided buffer; returns length of escaped\n /// representation.\n-pub(super) fn escape_ascii_into(output: &mut [u8; 4], byte: u8) -> Range<u8> {\n+pub(crate) fn escape_ascii_into(output: &mut [u8; 4], byte: u8) -> Range<u8> {\n     let (data, len) = match byte {\n         b'\\t' => ([b'\\\\', b't', 0, 0], 2),\n         b'\\r' => ([b'\\\\', b'r', 0, 0], 2),\n@@ -25,11 +25,10 @@ pub(super) fn escape_ascii_into(output: &mut [u8; 4], byte: u8) -> Range<u8> {\n }\n \n /// Escapes a character into provided buffer using `\\u{NNNN}` representation.\n-pub(super) fn escape_unicode_into(output: &mut [u8; 10], ch: char) -> Range<u8> {\n-    let ch = (ch as u32) & 0x1f_ffff;\n-\n+pub(crate) fn escape_unicode_into(output: &mut [u8; 10], ch: char) -> Range<u8> {\n     output[9] = b'}';\n \n+    let ch = ch as u32;\n     output[3] = HEX_DIGITS[((ch >> 20) & 15) as usize];\n     output[4] = HEX_DIGITS[((ch >> 16) & 15) as usize];\n     output[5] = HEX_DIGITS[((ch >> 12) & 15) as usize];\n@@ -50,24 +49,25 @@ pub(super) fn escape_unicode_into(output: &mut [u8; 10], ch: char) -> Range<u8>\n /// This is essentially equivalent to array\u2019s IntoIter except that indexes are\n /// limited to u8 to reduce size of the structure.\n #[derive(Clone, Debug)]\n-pub(super) struct EscapeIterInner<const N: usize> {\n+pub(crate) struct EscapeIterInner<const N: usize> {\n     // Invariant: data[alive] is all ASCII.\n-    pub(super) data: [u8; N],\n+    pub(crate) data: [u8; N],\n \n     // Invariant: alive.start <= alive.end <= N.\n-    pub(super) alive: Range<u8>,\n+    pub(crate) alive: Range<u8>,\n }\n \n impl<const N: usize> EscapeIterInner<N> {\n     pub fn new(data: [u8; N], alive: Range<u8>) -> Self {\n+        const { assert!(N < 256) };\n         debug_assert!(alive.start <= alive.end && usize::from(alive.end) <= N, \"{alive:?}\");\n         let this = Self { data, alive };\n         debug_assert!(this.as_bytes().is_ascii(), \"Expected ASCII, got {:?}\", this.as_bytes());\n         this\n     }\n \n     fn as_bytes(&self) -> &[u8] {\n-        &self.data[(self.alive.start as usize)..(self.alive.end as usize)]\n+        &self.data[usize::from(self.alive.start)..usize::from(self.alive.end)]\n     }\n \n     pub fn as_str(&self) -> &str {"}]}