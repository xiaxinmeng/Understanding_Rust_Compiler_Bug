{"sha": "9072861c2044b85c3bb8503487d5772297053cf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNzI4NjFjMjA0NGI4NWMzYmI4NTAzNDg3ZDU3NzIyOTcwNTNjZjg=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-08-20T14:09:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-20T14:09:37Z"}, "message": "Rollup merge of #35839 - jonathandturner:error_touchup, r=Aatch\n\nWording fixes in error messages\n\nThis PR is largely wording fixes to existing PRs that I found going back through the ones that have already been updated.  Sometimes seeing the message in context made me think \"oh there's a better wording!\"\n\nThere's one additional fix.  This will also prevent the secondary underlining of derive call (since they look like macros to the system in the way I was using):\n\n```\nerror[E0184]: the trait `Copy` may not be implemented for this type; the type has a destructor\n  --> src/test/compile-fail/E0184.rs:11:10\n   |\n11 | #[derive(Copy)] //~ ERROR E0184\n   |          ^^^^\n   |          |\n   |          in this macro invocation\n```\n\nIs now just:\n\n```\nerror[E0184]: the trait `Copy` may not be implemented for this type; the type has a destructor\n  --> src/test/compile-fail/E0184.rs:11:10\n   |\n11 | #[derive(Copy)] //~ ERROR E0184\n   |          ^^^^\n```", "tree": {"sha": "e437ade751764c2f56a3c9c3be904b815ad27031", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e437ade751764c2f56a3c9c3be904b815ad27031"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9072861c2044b85c3bb8503487d5772297053cf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9072861c2044b85c3bb8503487d5772297053cf8", "html_url": "https://github.com/rust-lang/rust/commit/9072861c2044b85c3bb8503487d5772297053cf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9072861c2044b85c3bb8503487d5772297053cf8/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b22352f568a4189dcf0719d5a2b8511c4832806e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b22352f568a4189dcf0719d5a2b8511c4832806e", "html_url": "https://github.com/rust-lang/rust/commit/b22352f568a4189dcf0719d5a2b8511c4832806e"}, {"sha": "54d0acd2fc6414930ff27c01c8640f4e9c666ad5", "url": "https://api.github.com/repos/rust-lang/rust/commits/54d0acd2fc6414930ff27c01c8640f4e9c666ad5", "html_url": "https://github.com/rust-lang/rust/commit/54d0acd2fc6414930ff27c01c8640f4e9c666ad5"}], "stats": {"total": 69, "additions": 35, "deletions": 34}, "files": [{"sha": "32c87fb615a5344131607f05898f283b9d998632", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -98,9 +98,9 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                        values.expected,\n                        values.found)\n             }\n-            Mutability => write!(f, \"values differ in mutability\"),\n+            Mutability => write!(f, \"types differ in mutability\"),\n             BoxMutability => {\n-                write!(f, \"boxed values differ in mutability\")\n+                write!(f, \"boxed types differ in mutability\")\n             }\n             VecMutability => write!(f, \"vectors differ in mutability\"),\n             PtrMutability => write!(f, \"pointers differ in mutability\"),"}, {"sha": "793155cfa8f8f6fc8508af5fb262d6b9bd9df756", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -426,7 +426,9 @@ impl EmitterWriter {\n                             continue;\n                         }\n                         // Check to make sure we're not in any <*macros>\n-                        if !cm.span_to_filename(def_site).contains(\"macros>\") {\n+                        if !cm.span_to_filename(def_site).contains(\"macros>\") &&\n+                            !trace.macro_decl_name.starts_with(\"#[\")\n+                        {\n                             new_labels.push((trace.call_site,\n                                              \"in this macro invocation\".to_string()));\n                             break;"}, {"sha": "acb6653214dcbd8847d2db5ca4c34b4f68c94687", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -29,7 +29,7 @@ use rustc::hir;\n pub fn check_legal_trait_for_method_call(ccx: &CrateCtxt, span: Span, trait_id: DefId) {\n     if ccx.tcx.lang_items.drop_trait() == Some(trait_id) {\n         struct_span_err!(ccx.tcx.sess, span, E0040, \"explicit use of destructor method\")\n-            .span_label(span, &format!(\"call to destructor method\"))\n+            .span_label(span, &format!(\"explicit destructor calls not allowed\"))\n             .emit();\n     }\n }"}, {"sha": "0e42990a337d41f55866f7d91b351210a93d24a6", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -402,7 +402,7 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             infcx.note_type_err(\n                 &mut diag,\n                 origin,\n-                trait_err_span.map(|sp| (sp, format!(\"original trait requirement\"))),\n+                trait_err_span.map(|sp| (sp, format!(\"type in trait\"))),\n                 Some(infer::ValuePairs::Types(ExpectedFound {\n                      expected: trait_fty,\n                      found: impl_fty\n@@ -575,7 +575,7 @@ pub fn compare_const_impl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             infcx.note_type_err(\n                 &mut diag,\n                 origin,\n-                Some((trait_c_span, format!(\"original trait requirement\"))),\n+                Some((trait_c_span, format!(\"type in trait\"))),\n                 Some(infer::ValuePairs::Types(ExpectedFound {\n                     expected: trait_ty,\n                     found: impl_ty"}, {"sha": "3d51da02b874d666a2e9f63bfdefb49471493cba", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -1016,7 +1016,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                          // We can only get the spans from local trait definition\n                          // Same for E0324 and E0325\n                          if let Some(trait_span) = tcx.map.span_if_local(ty_trait_item.def_id()) {\n-                            err.span_label(trait_span, &format!(\"original trait requirement\"));\n+                            err.span_label(trait_span, &format!(\"item in trait\"));\n                          }\n                          err.emit()\n                     }\n@@ -1044,7 +1044,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                   impl_trait_ref);\n                          err.span_label(impl_item.span, &format!(\"does not match trait\"));\n                          if let Some(trait_span) = tcx.map.span_if_local(ty_trait_item.def_id()) {\n-                            err.span_label(trait_span, &format!(\"original trait requirement\"));\n+                            err.span_label(trait_span, &format!(\"item in trait\"));\n                          }\n                          err.emit()\n                     }\n@@ -1067,7 +1067,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                   impl_trait_ref);\n                          err.span_label(impl_item.span, &format!(\"does not match trait\"));\n                          if let Some(trait_span) = tcx.map.span_if_local(ty_trait_item.def_id()) {\n-                            err.span_label(trait_span, &format!(\"original trait requirement\"));\n+                            err.span_label(trait_span, &format!(\"item in trait\"));\n                          }\n                          err.emit()\n                     }\n@@ -4414,8 +4414,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                               expected at most {}, found {}\",\n                              count(type_defs.len()),\n                              count(types.len()))\n-                .span_label(span, &format!(\"expected {}\",\n-                            count(type_defs.len()))).emit();\n+                .span_label(span, &format!(\"too many type parameters\")).emit();\n \n             // To prevent derived errors to accumulate due to extra\n             // type parameters, we force instantiate_value_path to"}, {"sha": "a3c043fe7cbd3282aa353bb18219e4fc56cdbe42", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -37,7 +37,7 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                       \"cannot define inherent `impl` for a type outside of the \\\n                        crate where the type is defined\")\n                 .span_label(item.span, &format!(\"impl for type defined outside of crate.\"))\n-                .span_note(item.span, &format!(\"define and implement a trait or new type instead\"))\n+                .note(\"define and implement a trait or new type instead\")\n                 .emit();\n         }\n     }"}, {"sha": "8bb5efdcad2c348f882ab234ff6fbe73948abc09", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -572,7 +572,7 @@ impl Foo for Bar {\n     // error, expected u16, found i16\n     fn foo(x: i16) { }\n \n-    // error, values differ in mutability\n+    // error, types differ in mutability\n     fn bar(&mut self) { }\n }\n ```"}, {"sha": "edfe22186e1622aba61df39b3028b5f762725f76", "filename": "src/test/compile-fail/E0040.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2FE0040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2FE0040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0040.rs?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -22,5 +22,5 @@ fn main() {\n     let mut x = Foo { x: -7 };\n     x.drop();\n     //~^ ERROR E0040\n-    //~| NOTE call to destructor method\n+    //~| NOTE explicit destructor calls not allowed\n }"}, {"sha": "933462e553e3b6db5afd3120201397d5d5307c9c", "filename": "src/test/compile-fail/E0053.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2FE0053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2FE0053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0053.rs?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n trait Foo {\n-    fn foo(x: u16); //~ NOTE original trait requirement\n-    fn bar(&self); //~ NOTE original trait requirement\n+    fn foo(x: u16); //~ NOTE type in trait\n+    fn bar(&self); //~ NOTE type in trait\n }\n \n struct Bar;\n@@ -21,7 +21,7 @@ impl Foo for Bar {\n     //~| NOTE expected u16\n     fn bar(&mut self) { }\n     //~^ ERROR method `bar` has an incompatible type for trait\n-    //~| NOTE values differ in mutability\n+    //~| NOTE types differ in mutability\n     //~| NOTE expected type `fn(&Bar)`\n     //~| NOTE found type `fn(&mut Bar)`\n }"}, {"sha": "7c98de59e27972f71860b5de9d63ac4ea346dcce", "filename": "src/test/compile-fail/E0087.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2FE0087.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2FE0087.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0087.rs?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -12,5 +12,5 @@ fn foo<T>() {}\n \n fn main() {\n     foo::<f64, bool>(); //~ ERROR E0087\n-    //~^ NOTE expected\n+    //~^ NOTE too many type parameters\n }"}, {"sha": "ec495c87b1a3f70e1c56d8d715fd92bad73502da", "filename": "src/test/compile-fail/associated-const-impl-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -11,7 +11,7 @@\n #![feature(associated_consts)]\n \n trait Foo {\n-    const BAR: u32; //~ NOTE original trait requirement\n+    const BAR: u32; //~ NOTE type in trait\n }\n \n struct SignedBar;"}, {"sha": "bc3d58ef33db08cf49aac1e38511d7a2bbee3037", "filename": "src/test/compile-fail/coerce-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -16,5 +16,5 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected type `&mut i32`\n     //~| found type `&{integer}`\n-    //~| values differ in mutability\n+    //~| types differ in mutability\n }"}, {"sha": "d0d911b6eb93600ae4af8f5351e4a66bfd968bab", "filename": "src/test/compile-fail/fn-variance-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -19,9 +19,9 @@ fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n fn main() {\n     apply(&3, takes_imm);\n     apply(&3, takes_mut);\n-    //~^ ERROR (values differ in mutability)\n+    //~^ ERROR (types differ in mutability)\n \n     apply(&mut 3, takes_mut);\n     apply(&mut 3, takes_imm);\n-    //~^ ERROR (values differ in mutability)\n+    //~^ ERROR (types differ in mutability)\n }"}, {"sha": "388c9a1729cca08e5a8a510807bcf516b87fd1ba", "filename": "src/test/compile-fail/impl-wrong-item-for-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -12,9 +12,9 @@\n \n trait Foo {\n     fn bar(&self);\n-    //~^ NOTE original trait requirement\n-    //~| NOTE original trait requirement\n-    const MY_CONST: u32; //~ NOTE original trait requirement\n+    //~^ NOTE item in trait\n+    //~| NOTE item in trait\n+    const MY_CONST: u32; //~ NOTE item in trait\n }\n \n pub struct FooConstForMethod;"}, {"sha": "7685a5c0808a2dad39a3dd64c472617086d5ea1c", "filename": "src/test/compile-fail/mut-pattern-mismatched.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -16,7 +16,7 @@ fn main() {\n      let &_ //~  ERROR mismatched types\n             //~| expected type `&mut {integer}`\n             //~| found type `&_`\n-            //~| values differ in mutability\n+            //~| types differ in mutability\n         = foo;\n     let &mut _ = foo;\n \n@@ -25,6 +25,6 @@ fn main() {\n     let &mut _ //~  ERROR mismatched types\n                //~| expected type `&{integer}`\n                //~| found type `&mut _`\n-               //~| values differ in mutability\n+               //~| types differ in mutability\n          = bar;\n }"}, {"sha": "1390c9507c1c2fd640b53a8bc65efdbd30dc9629", "filename": "src/test/compile-fail/ptr-coercion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -17,17 +17,17 @@ pub fn main() {\n     let x: *mut isize = x; //~  ERROR mismatched types\n                            //~| expected type `*mut isize`\n                            //~| found type `*const isize`\n-                           //~| values differ in mutability\n+                           //~| types differ in mutability\n \n     // & -> *mut\n     let x: *mut isize = &42; //~  ERROR mismatched types\n                              //~| expected type `*mut isize`\n                              //~| found type `&isize`\n-                             //~| values differ in mutability\n+                             //~| types differ in mutability\n \n     let x: *const isize = &42;\n     let x: *mut isize = x; //~  ERROR mismatched types\n                            //~| expected type `*mut isize`\n                            //~| found type `*const isize`\n-                           //~| values differ in mutability\n+                           //~| types differ in mutability\n }"}, {"sha": "bee3704a353d3b1d4051b83cbfe57f727e55dca7", "filename": "src/test/compile-fail/slice-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected type `&mut [_]`\n     //~| found type `&[isize]`\n-    //~| values differ in mutability\n+    //~| types differ in mutability\n }"}, {"sha": "4a0ccc46525d0aa9acdc127cffd7c1d884fcc36e", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9072861c2044b85c3bb8503487d5772297053cf8/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=9072861c2044b85c3bb8503487d5772297053cf8", "patch": "@@ -2,7 +2,7 @@ error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/trait-impl-fn-incompatibility.rs:21:15\n    |\n 14 |     fn foo(x: u16);\n-   |               --- original trait requirement\n+   |               --- type in trait\n ...\n 21 |     fn foo(x: i16) { }\n    |               ^^^ expected u16, found i16\n@@ -11,10 +11,10 @@ error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/trait-impl-fn-incompatibility.rs:22:28\n    |\n 15 |     fn bar(&mut self, bar: &mut Bar);\n-   |                            -------- original trait requirement\n+   |                            -------- type in trait\n ...\n 22 |     fn bar(&mut self, bar: &Bar) { }\n-   |                            ^^^^ values differ in mutability\n+   |                            ^^^^ types differ in mutability\n    |\n    = note: expected type `fn(&mut Bar, &mut Bar)`\n    = note:    found type `fn(&mut Bar, &Bar)`"}]}