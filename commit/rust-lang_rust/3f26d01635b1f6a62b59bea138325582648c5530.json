{"sha": "3f26d01635b1f6a62b59bea138325582648c5530", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMjZkMDE2MzViMWY2YTYyYjU5YmVhMTM4MzI1NTgyNjQ4YzU1MzA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-07T06:51:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-07T06:51:33Z"}, "message": "Rollup merge of #49748 - alexcrichton:proc-macro-debug, r=dtolnay\n\nproc_macro: Improve Debug representations\n\nThis commit improves the `fmt::Debug` output of `proc_macro` data structures by\nprimarily focusing on the representation exposed by `proc_macro` rather than the\ncompiler's own internal representation. This cuts down quite a bit on assorted\nwrapper types and ensure a relatively clean output.\n\nCloses #49720", "tree": {"sha": "8c94e6e2a392f8db867c9bc907650051c270d5a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c94e6e2a392f8db867c9bc907650051c270d5a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f26d01635b1f6a62b59bea138325582648c5530", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJayGp1CRBK7hj4Ov3rIwAAdHIIADkzgYhcwlAhweQWRpRtI1q7\nAhosO/cydkeiO5H9DdmghEPmjI0Mz1+ccrPBjECvt4uEJIwWDKQ5VOczTbvd6B94\nzpBVSRaabMWAZ3XTaKBklVfaP1U8h9204du8VUDYEuAXw4q42sUVkH1U+N+djJSB\nR+QsyoWzeywCTqSteLDPYMOhOlHNBwGyjKjjgCT+eGUDBYg6w0e7dyM/cHJTjo9V\ngZWtFjj/M05gsubX9OQsCtMRfPqOGj4G19haShWP0r+dadGd10bSb4702ZhKUx9Z\nSS/hxIQhcdzY0eXBOVGhD+kyYNrBEG8pKA8Rlyg9d30WBJK/hUszft7vkjwsiVQ=\n=toGw\n-----END PGP SIGNATURE-----\n", "payload": "tree 8c94e6e2a392f8db867c9bc907650051c270d5a5\nparent 7e28c0f72da255b8ff3139e45163d800dc47219f\nparent 52766b57477002583b0a72c917a172c082cb4a36\nauthor kennytm <kennytm@gmail.com> 1523083893 +0800\ncommitter GitHub <noreply@github.com> 1523083893 +0800\n\nRollup merge of #49748 - alexcrichton:proc-macro-debug, r=dtolnay\n\nproc_macro: Improve Debug representations\n\nThis commit improves the `fmt::Debug` output of `proc_macro` data structures by\nprimarily focusing on the representation exposed by `proc_macro` rather than the\ncompiler's own internal representation. This cuts down quite a bit on assorted\nwrapper types and ensure a relatively clean output.\n\nCloses #49720\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f26d01635b1f6a62b59bea138325582648c5530", "html_url": "https://github.com/rust-lang/rust/commit/3f26d01635b1f6a62b59bea138325582648c5530", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f26d01635b1f6a62b59bea138325582648c5530/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e28c0f72da255b8ff3139e45163d800dc47219f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e28c0f72da255b8ff3139e45163d800dc47219f", "html_url": "https://github.com/rust-lang/rust/commit/7e28c0f72da255b8ff3139e45163d800dc47219f"}, {"sha": "52766b57477002583b0a72c917a172c082cb4a36", "url": "https://api.github.com/repos/rust-lang/rust/commits/52766b57477002583b0a72c917a172c082cb4a36", "html_url": "https://github.com/rust-lang/rust/commit/52766b57477002583b0a72c917a172c082cb4a36"}], "stats": {"total": 98, "additions": 63, "deletions": 35}, "files": [{"sha": "449b8fcfb2d40e02990276fe37d543cd8dfd6f83", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 57, "deletions": 26, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/3f26d01635b1f6a62b59bea138325582648c5530/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f26d01635b1f6a62b59bea138325582648c5530/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=3f26d01635b1f6a62b59bea138325582648c5530", "patch": "@@ -127,7 +127,8 @@ impl fmt::Display for TokenStream {\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n impl fmt::Debug for TokenStream {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.0.fmt(f)\n+        f.write_str(\"TokenStream \")?;\n+        f.debug_list().entries(self.clone()).finish()\n     }\n }\n \n@@ -222,7 +223,7 @@ pub fn quote_span(span: Span) -> TokenStream {\n \n /// A region of source code, along with macro expansion information.\n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone)]\n pub struct Span(syntax_pos::Span);\n \n macro_rules! diagnostic_method {\n@@ -334,6 +335,16 @@ impl Span {\n     diagnostic_method!(help, Level::Help);\n }\n \n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+impl fmt::Debug for Span {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{:?} bytes({}..{})\",\n+               self.0.ctxt(),\n+               self.0.lo().0,\n+               self.0.hi().0)\n+    }\n+}\n+\n /// A line-column pair representing the start or end of a `Span`.\n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n@@ -422,7 +433,7 @@ impl PartialEq<FileName> for SourceFile {\n \n /// A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).\n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n-#[derive(Clone, Debug)]\n+#[derive(Clone)]\n pub enum TokenTree {\n     /// A delimited tokenstream\n     Group(Group),\n@@ -463,6 +474,20 @@ impl TokenTree {\n     }\n }\n \n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+impl fmt::Debug for TokenTree {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        // Each of these has the name in the struct type in the derived debug,\n+        // so don't bother with an extra layer of indirection\n+        match *self {\n+            TokenTree::Group(ref tt) => tt.fmt(f),\n+            TokenTree::Term(ref tt) => tt.fmt(f),\n+            TokenTree::Op(ref tt) => tt.fmt(f),\n+            TokenTree::Literal(ref tt) => tt.fmt(f),\n+        }\n+    }\n+}\n+\n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n impl From<Group> for TokenTree {\n     fn from(g: Group) -> TokenTree {\n@@ -717,7 +742,8 @@ impl fmt::Display for Term {\n #[derive(Clone, Debug)]\n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n pub struct Literal {\n-    token: token::Token,\n+    lit: token::Lit,\n+    suffix: Option<ast::Name>,\n     span: Span,\n }\n \n@@ -734,10 +760,9 @@ macro_rules! suffixed_int_literals {\n         /// below.\n         #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n         pub fn $name(n: $kind) -> Literal {\n-            let lit = token::Lit::Integer(Symbol::intern(&n.to_string()));\n-            let ty = Some(Symbol::intern(stringify!($kind)));\n             Literal {\n-                token: token::Literal(lit, ty),\n+                lit: token::Lit::Integer(Symbol::intern(&n.to_string())),\n+                suffix: Some(Symbol::intern(stringify!($kind))),\n                 span: Span::call_site(),\n             }\n         }\n@@ -759,9 +784,9 @@ macro_rules! unsuffixed_int_literals {\n         /// below.\n         #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n         pub fn $name(n: $kind) -> Literal {\n-            let lit = token::Lit::Integer(Symbol::intern(&n.to_string()));\n             Literal {\n-                token: token::Literal(lit, None),\n+                lit: token::Lit::Integer(Symbol::intern(&n.to_string())),\n+                suffix: None,\n                 span: Span::call_site(),\n             }\n         }\n@@ -814,9 +839,9 @@ impl Literal {\n         if !n.is_finite() {\n             panic!(\"Invalid float literal {}\", n);\n         }\n-        let lit = token::Lit::Float(Symbol::intern(&n.to_string()));\n         Literal {\n-            token: token::Literal(lit, None),\n+            lit: token::Lit::Float(Symbol::intern(&n.to_string())),\n+            suffix: None,\n             span: Span::call_site(),\n         }\n     }\n@@ -837,9 +862,9 @@ impl Literal {\n         if !n.is_finite() {\n             panic!(\"Invalid float literal {}\", n);\n         }\n-        let lit = token::Lit::Float(Symbol::intern(&n.to_string()));\n         Literal {\n-            token: token::Literal(lit, Some(Symbol::intern(\"f32\"))),\n+            lit: token::Lit::Float(Symbol::intern(&n.to_string())),\n+            suffix: Some(Symbol::intern(\"f32\")),\n             span: Span::call_site(),\n         }\n     }\n@@ -859,9 +884,9 @@ impl Literal {\n         if !n.is_finite() {\n             panic!(\"Invalid float literal {}\", n);\n         }\n-        let lit = token::Lit::Float(Symbol::intern(&n.to_string()));\n         Literal {\n-            token: token::Literal(lit, None),\n+            lit: token::Lit::Float(Symbol::intern(&n.to_string())),\n+            suffix: None,\n             span: Span::call_site(),\n         }\n     }\n@@ -882,9 +907,9 @@ impl Literal {\n         if !n.is_finite() {\n             panic!(\"Invalid float literal {}\", n);\n         }\n-        let lit = token::Lit::Float(Symbol::intern(&n.to_string()));\n         Literal {\n-            token: token::Literal(lit, Some(Symbol::intern(\"f64\"))),\n+            lit: token::Lit::Float(Symbol::intern(&n.to_string())),\n+            suffix: Some(Symbol::intern(\"f64\")),\n             span: Span::call_site(),\n         }\n     }\n@@ -897,7 +922,8 @@ impl Literal {\n             escaped.extend(ch.escape_debug());\n         }\n         Literal {\n-            token: token::Literal(token::Lit::Str_(Symbol::intern(&escaped)), None),\n+            lit: token::Lit::Str_(Symbol::intern(&escaped)),\n+            suffix: None,\n             span: Span::call_site(),\n         }\n     }\n@@ -908,7 +934,8 @@ impl Literal {\n         let mut escaped = String::new();\n         escaped.extend(ch.escape_unicode());\n         Literal {\n-            token: token::Literal(token::Lit::Char(Symbol::intern(&escaped)), None),\n+            lit: token::Lit::Char(Symbol::intern(&escaped)),\n+            suffix: None,\n             span: Span::call_site(),\n         }\n     }\n@@ -919,7 +946,8 @@ impl Literal {\n         let string = bytes.iter().cloned().flat_map(ascii::escape_default)\n             .map(Into::<char>::into).collect::<String>();\n         Literal {\n-            token: token::Literal(token::Lit::ByteStr(Symbol::intern(&string)), None),\n+            lit: token::Lit::ByteStr(Symbol::intern(&string)),\n+            suffix: None,\n             span: Span::call_site(),\n         }\n     }\n@@ -1055,7 +1083,7 @@ impl TokenTree {\n             Ident(ident, true) => {\n                 tt!(Term::new(&format!(\"r#{}\", ident), Span(span)))\n             }\n-            Literal(..) => tt!(self::Literal { token, span: Span(span) }),\n+            Literal(lit, suffix) => tt!(self::Literal { lit, suffix, span: Span(span) }),\n             DocComment(c) => {\n                 let style = comments::doc_comment_style(&c.as_str());\n                 let stripped = comments::strip_doc_comment_decoration(&c.as_str());\n@@ -1111,33 +1139,36 @@ impl TokenTree {\n                 return TokenTree::Token(tt.span.0, token).into();\n             }\n             self::TokenTree::Literal(self::Literal {\n-                token: Literal(Lit::Integer(ref a), b),\n+                lit: Lit::Integer(ref a),\n+                suffix,\n                 span,\n             })\n                 if a.as_str().starts_with(\"-\") =>\n             {\n                 let minus = BinOp(BinOpToken::Minus);\n                 let integer = Symbol::intern(&a.as_str()[1..]);\n-                let integer = Literal(Lit::Integer(integer), b);\n+                let integer = Literal(Lit::Integer(integer), suffix);\n                 let a = TokenTree::Token(span.0, minus);\n                 let b = TokenTree::Token(span.0, integer);\n                 return vec![a, b].into_iter().collect()\n             }\n             self::TokenTree::Literal(self::Literal {\n-                token: Literal(Lit::Float(ref a), b),\n+                lit: Lit::Float(ref a),\n+                suffix,\n                 span,\n             })\n                 if a.as_str().starts_with(\"-\") =>\n             {\n                 let minus = BinOp(BinOpToken::Minus);\n                 let float = Symbol::intern(&a.as_str()[1..]);\n-                let float = Literal(Lit::Float(float), b);\n+                let float = Literal(Lit::Float(float), suffix);\n                 let a = TokenTree::Token(span.0, minus);\n                 let b = TokenTree::Token(span.0, float);\n                 return vec![a, b].into_iter().collect()\n             }\n             self::TokenTree::Literal(tt) => {\n-                return TokenTree::Token(tt.span.0, tt.token).into()\n+                let token = Literal(tt.lit, tt.suffix);\n+                return TokenTree::Token(tt.span.0, token).into()\n             }\n         };\n "}, {"sha": "a0ec692809499f47152482115a5ea40ccd791fc9", "filename": "src/libproc_macro/quote.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3f26d01635b1f6a62b59bea138325582648c5530/src%2Flibproc_macro%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f26d01635b1f6a62b59bea138325582648c5530/src%2Flibproc_macro%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fquote.rs?ref=3f26d01635b1f6a62b59bea138325582648c5530", "patch": "@@ -208,13 +208,15 @@ macro_rules! literals {\n                 match self {\n                     $(LiteralKind::$i => {\n                         Literal {\n-                            token: token::Literal(token::Lit::$i(sym), suffix),\n+                            lit: token::Lit::$i(sym),\n+                            suffix,\n                             span: contents.span,\n                         }\n                     })*\n                     $(LiteralKind::$raw(n) => {\n                         Literal {\n-                            token: token::Literal(token::Lit::$raw(sym, n), suffix),\n+                            lit: token::Lit::$raw(sym, n),\n+                            suffix,\n                             span: contents.span,\n                         }\n                     })*\n@@ -224,16 +226,11 @@ macro_rules! literals {\n \n         impl Literal {\n             fn kind_contents_and_suffix(self) -> (LiteralKind, Term, Option<Term>) {\n-                let (lit, suffix) = match self.token {\n-                    token::Literal(lit, suffix) => (lit, suffix),\n-                    _ => panic!(\"unsupported literal {:?}\", self.token),\n-                };\n-\n-                let (kind, contents) = match lit {\n+                let (kind, contents) = match self.lit {\n                     $(token::Lit::$i(contents) => (LiteralKind::$i, contents),)*\n                     $(token::Lit::$raw(contents, n) => (LiteralKind::$raw(n), contents),)*\n                 };\n-                let suffix = suffix.map(|sym| Term::new(&sym.as_str(), self.span()));\n+                let suffix = self.suffix.map(|sym| Term::new(&sym.as_str(), self.span()));\n                 (kind, Term::new(&contents.as_str(), self.span()), suffix)\n             }\n         }"}]}