{"sha": "7bd48b92d951a72c40e472a14c6c83d733be1282", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZDQ4YjkyZDk1MWE3MmM0MGU0NzJhMTRjNmM4M2Q3MzNiZTEyODI=", "commit": {"author": {"name": "Simon BD", "email": "simon@server", "date": "2012-10-04T16:24:55Z"}, "committer": {"name": "Simon BD", "email": "simon@server", "date": "2012-10-04T16:24:55Z"}, "message": "Get tim_sort working, add test for double-freeing elements in tmp", "tree": {"sha": "a44115f9140c55a76663ef675df99532fb5d4c32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a44115f9140c55a76663ef675df99532fb5d4c32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bd48b92d951a72c40e472a14c6c83d733be1282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd48b92d951a72c40e472a14c6c83d733be1282", "html_url": "https://github.com/rust-lang/rust/commit/7bd48b92d951a72c40e472a14c6c83d733be1282", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bd48b92d951a72c40e472a14c6c83d733be1282/comments", "author": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "committer": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "455591d026546c78b5f03a4d013470685bcc2813", "url": "https://api.github.com/repos/rust-lang/rust/commits/455591d026546c78b5f03a4d013470685bcc2813", "html_url": "https://github.com/rust-lang/rust/commit/455591d026546c78b5f03a4d013470685bcc2813"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "6f3628f4fc722b1b1be9d7c631dd9704343d87a2", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7bd48b92d951a72c40e472a14c6c83d733be1282/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd48b92d951a72c40e472a14c6c83d733be1282/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=7bd48b92d951a72c40e472a14c6c83d733be1282", "patch": "@@ -215,7 +215,7 @@ fn binarysort<T: Ord>(array: &[mut T], start: uint) {\n \n     let mut pivot = ~[];\n     vec::reserve(&mut pivot, 1);\n-    unsafe { vec::raw::set_len(pivot, 1); };\n+    unsafe { vec::raw::set_len(&mut pivot, 1); };\n \n     while start < size {\n         unsafe {\n@@ -243,7 +243,7 @@ fn binarysort<T: Ord>(array: &[mut T], start: uint) {\n         array[left] <-> pivot[0];\n         start += 1;\n     }\n-    unsafe { vec::raw::set_len(pivot, 0); } // Forget the boxed element\n+    unsafe { vec::raw::set_len(&mut pivot, 0); } // Forget the boxed element\n }\n \n /// Reverse the order of elements in a slice, in place\n@@ -411,7 +411,7 @@ struct MergeState<T> {\n                 move_vec(self.array, self.mergePt,\n                         self.tmp, self.tmpPt, size-self.tmpPt);\n             }\n-            vec::raw::set_len(self.tmp, 0);\n+            vec::raw::set_len(&mut self.tmp, 0);\n         }\n     }\n }\n@@ -488,7 +488,7 @@ impl<T: Ord> &MergeState<T> {\n         self.last_hi = false;\n \n         unsafe {\n-            vec::raw::set_len(self.tmp, len1);\n+            vec::raw::set_len(&mut self.tmp, len1);\n             move_vec(self.tmp, 0, array, base1, len1);\n         }\n         self.tmpPt = 0;\n@@ -507,15 +507,15 @@ impl<T: Ord> &MergeState<T> {\n         if len2 == 0 {\n             unsafe {\n                 move_vec(array, dest, self.tmp, 0, len1);\n-                vec::raw::set_len(self.tmp, 0); // Forget the elements\n+                vec::raw::set_len(&mut self.tmp, 0); // Forget the elements\n             }\n             return;\n         }\n         if len1 == 1 {\n             unsafe {\n                 move_vec(array, dest, array, c2, len2);\n                 array[dest+len2] <-> self.tmp[c1];\n-                vec::raw::set_len(self.tmp, 0); // Forget the element\n+                vec::raw::set_len(&mut self.tmp, 0); // Forget the element\n             }\n             return;\n         }\n@@ -556,8 +556,9 @@ impl<T: Ord> &MergeState<T> {\n             loop {\n                 assert len1 > 1 && len2 != 0;\n \n-                let tmp_view = vec::const_view(self.tmp, c1, c1+len1);\n-                count1 = gallop_right(&const array[c2], tmp_view, 0);\n+                //let tmp_view = vec::const_view(self.tmp, c1, c1+len1);\n+                count1 = gallop_right(&const array[c2],\n+                    vec::const_view(self.tmp, c1, c1+len1), 0);\n                 if count1 != 0 {\n                     unsafe {\n                         move_vec(array, dest, self.tmp, c1, count1);\n@@ -571,7 +572,7 @@ impl<T: Ord> &MergeState<T> {\n                 self.mergePt += 1;\n                 if len2 == 0 { break_outer = true; break; }\n \n-                let tmp_view = vec::mut_view(array, c2, c2+len2);\n+                let tmp_view = vec::const_view(array, c2, c2+len2);\n                 count2 = gallop_left(&const self.tmp[c1], tmp_view, 0);\n                 if count2 != 0 {\n                     unsafe {\n@@ -612,7 +613,7 @@ impl<T: Ord> &MergeState<T> {\n             }\n         }\n         self.tmpPt = 0;\n-        unsafe { vec::raw::set_len(self.tmp, 0); }\n+        unsafe { vec::raw::set_len(&mut self.tmp, 0); }\n     }\n \n     fn merge_hi(array: &[mut T], base1: uint, len1: uint,\n@@ -623,7 +624,7 @@ impl<T: Ord> &MergeState<T> {\n         self.last_hi = true;\n \n         unsafe {\n-            vec::raw::set_len(self.tmp, len2);\n+            vec::raw::set_len(&mut self.tmp, len2);\n             move_vec(self.tmp, 0, array, base2, len2);\n         }\n \n@@ -642,7 +643,7 @@ impl<T: Ord> &MergeState<T> {\n         if len1 == 0 {\n             unsafe {\n                 move_vec(array, dest-(len2-1), self.tmp, 0, len2);\n-                vec::raw::set_len(self.tmp, 0); // Forget the elements\n+                vec::raw::set_len(&mut self.tmp, 0); // Forget the elements\n             }\n             return;\n         }\n@@ -652,7 +653,7 @@ impl<T: Ord> &MergeState<T> {\n             unsafe {\n                 move_vec(array, dest+1, array, c1+1, len1);\n                 array[dest] <-> self.tmp[c2];\n-                vec::raw::set_len(self.tmp, 0); // Forget the element\n+                vec::raw::set_len(&mut self.tmp, 0); // Forget the element\n             }\n             return;\n         }\n@@ -710,9 +711,9 @@ impl<T: Ord> &MergeState<T> {\n                 self.mergePt -= 1; self.tmpPt -= 1;\n                 if len2 == 1 { break_outer = true; break; }\n \n-                let tmp_view = vec::mut_view(self.tmp, 0, len2);\n-                let count2 = len2 - gallop_left(\n-                    &const array[c1], tmp_view, len2-1);\n+                //let tmp_view = vec::mut_view(self.tmp, 0, len2);\n+                let count2 = len2 - gallop_left(&const array[c1],\n+                            vec::mut_view(self.tmp, 0, len2), len2-1);\n                 if count2 != 0 {\n                     dest -= count2; c2 -= count2; len2 -= count2;\n                     self.mergePt -= count2; self.tmpPt -= count2;\n@@ -755,7 +756,7 @@ impl<T: Ord> &MergeState<T> {\n             }\n         }\n         self.tmpPt = 0;\n-        unsafe { vec::raw::set_len(self.tmp, 0); }\n+        unsafe { vec::raw::set_len(&mut self.tmp, 0); }\n     }\n \n     fn merge_collapse(array: &[mut T]) {\n@@ -974,9 +975,9 @@ mod tests {\n     }\n }\n \n-//#[cfg(test)]\n-//mod test_tim_sort {\n-//    #[legacy_exports];\n+#[cfg(test)]\n+mod test_tim_sort {\n+    #[legacy_exports];\n     struct CVal {\n         val: ~float,\n     }\n@@ -1029,9 +1030,9 @@ mod tests {\n             check_sort(v1, v2);\n         }\n     }\n-//}\n-    //#[test]\n-    //#[should_fail]\n+\n+    #[test]\n+    #[should_fail]\n     fn crash_test() {\n         let rng = rand::Rng();\n         let mut arr = do vec::from_fn(1000) |_i| {\n@@ -1042,7 +1043,7 @@ mod tests {\n         tim_sort(arr);\n         fail ~\"Guarantee the fail\";\n     }\n-//}\n+}\n \n //#[cfg(test)]\n /*mod big_tests {"}]}