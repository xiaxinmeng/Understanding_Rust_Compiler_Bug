{"sha": "2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhM2MxYTMwYzg0ZDY2YWQ5YmRlOGFlZjc3MjdkZmQ2YjYwYzQwYzk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-12T19:36:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-12T19:36:53Z"}, "message": "Rollup merge of #68981 - estebank:silence, r=davidtwco\n\n Account for type params on method without parentheses\n\nAccount for those type parameters in the structured suggestion when forgetting to call method:\n\n```\nerror[E0615]: attempted to take value of method `collect` on type `std::vec::IntoIter<_>`\n  --> $DIR/method-missing-parentheses.rs:2:32\n   |\nLL |     let _ = vec![].into_iter().collect::<usize>;\n   |                                ^^^^^^^---------\n   |                                |\n   |                                help: use parentheses to call the method: `collect::<usize>()`\n```", "tree": {"sha": "ce940a78c5bacb1bb1f7aa31e286e023297940c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce940a78c5bacb1bb1f7aa31e286e023297940c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeRFPVCRBK7hj4Ov3rIwAAdHIIAK6mbQ49njzAKA1N7dZFVvBi\nBfu7LPUI3DUkYQ7vZpv0EGBmalmq6tWO/YN9FiLfi+3A6gRNpR0cpq2u4VxXM9Wx\nzoQw4neZBTh1mFgdFpIpWVrjl+1XVyxwtwGAXNoZ6873B5AgrggUYucbnnSqiJUN\nlyUwXNeWZzU8qyyTagItTKLd6cs1UrdaA9z9Mz3r/WS53763PyRh4UXUru4wi/0g\nmOh9aEGVtSuHWepp2Q2kYI3VXeMzH4VUzRhms/IWqLSWG4wpQuTaMoOok2izwkEc\noL6+mJNLr8ulQ+p73/PzORGOZBx1ySwmSqmf+lOqn6Kv9nsyDjp1UvJQQWLbXJE=\n=xS0c\n-----END PGP SIGNATURE-----\n", "payload": "tree ce940a78c5bacb1bb1f7aa31e286e023297940c7\nparent f127aba96d1f0610f854e54a3386023c2331b1f3\nparent 9d91489526121ef3408e1efa2a98bcaefdedd9bc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581536213 +0100\ncommitter GitHub <noreply@github.com> 1581536213 +0100\n\nRollup merge of #68981 - estebank:silence, r=davidtwco\n\n Account for type params on method without parentheses\n\nAccount for those type parameters in the structured suggestion when forgetting to call method:\n\n```\nerror[E0615]: attempted to take value of method `collect` on type `std::vec::IntoIter<_>`\n  --> $DIR/method-missing-parentheses.rs:2:32\n   |\nLL |     let _ = vec![].into_iter().collect::<usize>;\n   |                                ^^^^^^^---------\n   |                                |\n   |                                help: use parentheses to call the method: `collect::<usize>()`\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9", "html_url": "https://github.com/rust-lang/rust/commit/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f127aba96d1f0610f854e54a3386023c2331b1f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f127aba96d1f0610f854e54a3386023c2331b1f3", "html_url": "https://github.com/rust-lang/rust/commit/f127aba96d1f0610f854e54a3386023c2331b1f3"}, {"sha": "9d91489526121ef3408e1efa2a98bcaefdedd9bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d91489526121ef3408e1efa2a98bcaefdedd9bc", "html_url": "https://github.com/rust-lang/rust/commit/9d91489526121ef3408e1efa2a98bcaefdedd9bc"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "77748d16653a7e4e4ed9e9e0e8ace81bc38ac452", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9", "patch": "@@ -823,7 +823,7 @@ impl<'a> Parser<'a> {\n             if let Some(args) = segment.args {\n                 self.struct_span_err(\n                     args.span(),\n-                    \"field expressions may not have generic arguments\",\n+                    \"field expressions cannot have generic arguments\",\n                 )\n                 .emit();\n             }"}, {"sha": "90b7b300da9d5c51b4f42427a96cb8768c592788", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9", "patch": "@@ -1586,7 +1586,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 &format!(\"a method `{}` also exists, call it with parentheses\", field),\n                 field,\n                 expr_t,\n-                expr.hir_id,\n+                expr,\n             );\n         }\n         err.emit();\n@@ -1609,7 +1609,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 \"use parentheses to call the method\",\n                 field,\n                 expr_t,\n-                expr.hir_id,\n+                expr,\n             );\n         } else {\n             err.help(\"methods are immutable and cannot be assigned to\");"}, {"sha": "c3e15c507b30d0869d2fe75a0d5d99637ab265b9", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         msg: &str,\n         method_name: ast::Ident,\n         self_ty: Ty<'tcx>,\n-        call_expr_id: hir::HirId,\n+        call_expr: &hir::Expr<'_>,\n     ) {\n         let has_params = self\n             .probe_for_name(\n@@ -144,21 +144,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 method_name,\n                 IsSuggestion(false),\n                 self_ty,\n-                call_expr_id,\n+                call_expr.hir_id,\n                 ProbeScope::TraitsInScope,\n             )\n             .and_then(|pick| {\n                 let sig = self.tcx.fn_sig(pick.item.def_id);\n                 Ok(sig.inputs().skip_binder().len() > 1)\n             });\n \n+        // Account for `foo.bar<T>`;\n+        let sugg_span = method_name.span.with_hi(call_expr.span.hi());\n+        let snippet = self\n+            .tcx\n+            .sess\n+            .source_map()\n+            .span_to_snippet(sugg_span)\n+            .unwrap_or_else(|_| method_name.to_string());\n         let (suggestion, applicability) = if has_params.unwrap_or_default() {\n-            (format!(\"{}(...)\", method_name), Applicability::HasPlaceholders)\n+            (format!(\"{}(...)\", snippet), Applicability::HasPlaceholders)\n         } else {\n-            (format!(\"{}()\", method_name), Applicability::MaybeIncorrect)\n+            (format!(\"{}()\", snippet), Applicability::MaybeIncorrect)\n         };\n \n-        err.span_suggestion(method_name.span, msg, suggestion, applicability);\n+        err.span_suggestion(sugg_span, msg, suggestion, applicability);\n     }\n \n     /// Performs method lookup. If lookup is successful, it will return the callee"}, {"sha": "4cd77ebbd862f10aadf490de82c01732a6eee0c2", "filename": "src/test/ui/parser/type-parameters-in-field-exprs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.rs?ref=2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9", "patch": "@@ -9,9 +9,9 @@ fn main() {\n         y: 2,\n     };\n     f.x::<isize>;\n-    //~^ ERROR field expressions may not have generic arguments\n+    //~^ ERROR field expressions cannot have generic arguments\n     f.x::<>;\n-    //~^ ERROR field expressions may not have generic arguments\n+    //~^ ERROR field expressions cannot have generic arguments\n     f.x::();\n-    //~^ ERROR field expressions may not have generic arguments\n+    //~^ ERROR field expressions cannot have generic arguments\n }"}, {"sha": "ce7364d3534f61cdcbc8696c9c1fa47945e7d4a5", "filename": "src/test/ui/parser/type-parameters-in-field-exprs.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr?ref=2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9", "patch": "@@ -1,16 +1,16 @@\n-error: field expressions may not have generic arguments\n+error: field expressions cannot have generic arguments\n   --> $DIR/type-parameters-in-field-exprs.rs:11:10\n    |\n LL |     f.x::<isize>;\n    |          ^^^^^^^\n \n-error: field expressions may not have generic arguments\n+error: field expressions cannot have generic arguments\n   --> $DIR/type-parameters-in-field-exprs.rs:13:10\n    |\n LL |     f.x::<>;\n    |          ^^\n \n-error: field expressions may not have generic arguments\n+error: field expressions cannot have generic arguments\n   --> $DIR/type-parameters-in-field-exprs.rs:15:7\n    |\n LL |     f.x::();"}, {"sha": "f10bfb56d2e1271a0b13d66ae2a31802a809ef14", "filename": "src/test/ui/suggestions/method-missing-parentheses.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.rs?ref=2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let _ = vec![].into_iter().collect::<usize>;\n+    //~^ ERROR attempted to take value of method `collect` on type `std::vec::IntoIter<_>`\n+    //~| ERROR field expressions cannot have generic arguments\n+}"}, {"sha": "6e4f7a84724bf7aaeee8302504d89659297d3b2f", "filename": "src/test/ui/suggestions/method-missing-parentheses.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.stderr?ref=2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9", "patch": "@@ -0,0 +1,17 @@\n+error: field expressions cannot have generic arguments\n+  --> $DIR/method-missing-parentheses.rs:2:41\n+   |\n+LL |     let _ = vec![].into_iter().collect::<usize>;\n+   |                                         ^^^^^^^\n+\n+error[E0615]: attempted to take value of method `collect` on type `std::vec::IntoIter<_>`\n+  --> $DIR/method-missing-parentheses.rs:2:32\n+   |\n+LL |     let _ = vec![].into_iter().collect::<usize>;\n+   |                                ^^^^^^^---------\n+   |                                |\n+   |                                help: use parentheses to call the method: `collect::<usize>()`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0615`."}]}