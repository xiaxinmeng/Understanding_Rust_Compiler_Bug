{"sha": "8220be5240e644a368559388e0de5e1e412a3e61", "node_id": "C_kwDOAAsO6NoAKDgyMjBiZTUyNDBlNjQ0YTM2ODU1OTM4OGUwZGU1ZTFlNDEyYTNlNjE", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-21T18:34:03Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-22T19:21:26Z"}, "message": "Use revisions for NLL in borrowck", "tree": {"sha": "63c2510e1cbdcdbc5666a90e0e0228c3e4ce58d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63c2510e1cbdcdbc5666a90e0e0228c3e4ce58d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8220be5240e644a368559388e0de5e1e412a3e61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8220be5240e644a368559388e0de5e1e412a3e61", "html_url": "https://github.com/rust-lang/rust/commit/8220be5240e644a368559388e0de5e1e412a3e61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8220be5240e644a368559388e0de5e1e412a3e61/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e435e332efcd9230255c6fba960c7db23d641d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e435e332efcd9230255c6fba960c7db23d641d2", "html_url": "https://github.com/rust-lang/rust/commit/1e435e332efcd9230255c6fba960c7db23d641d2"}], "stats": {"total": 147, "additions": 121, "deletions": 26}, "files": [{"sha": "3d6d00a0f958bfbad3a37c6437fefbed88266cdc", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8220be5240e644a368559388e0de5e1e412a3e61/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8220be5240e644a368559388e0de5e1e412a3e61/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.base.stderr?ref=8220be5240e644a368559388e0de5e1e412a3e61", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/borrowck-reborrow-from-shorter-lived-andmut.rs:9:5\n+  --> $DIR/borrowck-reborrow-from-shorter-lived-andmut.rs:13:5\n    |\n LL | fn copy_borrowed_ptr<'a,'b>(p: &'a mut S<'b>) -> S<'b> {\n    |                                -------------     -----", "previous_filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.stderr"}, {"sha": "7c4de57320e7834f230fd69874f2cd611402bee2", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8220be5240e644a368559388e0de5e1e412a3e61/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8220be5240e644a368559388e0de5e1e412a3e61/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr?ref=8220be5240e644a368559388e0de5e1e412a3e61", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/borrowck-reborrow-from-shorter-lived-andmut.rs:9:5\n+  --> $DIR/borrowck-reborrow-from-shorter-lived-andmut.rs:13:5\n    |\n LL | fn copy_borrowed_ptr<'a,'b>(p: &'a mut S<'b>) -> S<'b> {\n    |                      -- -- lifetime `'b` defined here"}, {"sha": "60101d06820cc624254d092e6d08e76023be42d4", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8220be5240e644a368559388e0de5e1e412a3e61/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8220be5240e644a368559388e0de5e1e412a3e61/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.rs?ref=8220be5240e644a368559388e0de5e1e412a3e61", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // Test that assignments to an `&mut` pointer which is found in a\n // borrowed (but otherwise non-aliasable) location is illegal.\n \n@@ -7,7 +11,8 @@ struct S<'a> {\n \n fn copy_borrowed_ptr<'a,'b>(p: &'a mut S<'b>) -> S<'b> {\n     S { pointer: &mut *p.pointer }\n-    //~^ ERROR lifetime mismatch\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "3518a663e59b5f9a0fb6e0762d9919c9cd662ba1", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.base.stderr", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/8220be5240e644a368559388e0de5e1e412a3e61/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8220be5240e644a368559388e0de5e1e412a3e61/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.base.stderr?ref=8220be5240e644a368559388e0de5e1e412a3e61", "patch": "@@ -0,0 +1,93 @@\n+error[E0499]: cannot borrow `*f` as mutable more than once at a time\n+  --> $DIR/two-phase-nonrecv-autoref.rs:51:11\n+   |\n+LL |         f(f(10));\n+   |         - ^ second mutable borrow occurs here\n+   |         |\n+   |         first mutable borrow occurs here\n+   |         first borrow later used by call\n+\n+error[E0382]: use of moved value: `f`\n+  --> $DIR/two-phase-nonrecv-autoref.rs:58:11\n+   |\n+LL |     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n+   |                                            - move occurs because `f` has type `Box<F>`, which does not implement the `Copy` trait\n+LL |         f(f(10));\n+   |         - ^ value used here after move\n+   |         |\n+   |         value moved here\n+\n+error[E0499]: cannot borrow `*f` as mutable more than once at a time\n+  --> $DIR/two-phase-nonrecv-autoref.rs:63:11\n+   |\n+LL |         f(f(10));\n+   |         - ^ second mutable borrow occurs here\n+   |         |\n+   |         first mutable borrow occurs here\n+   |         first borrow later used by call\n+\n+error[E0382]: use of moved value: `f`\n+  --> $DIR/two-phase-nonrecv-autoref.rs:70:11\n+   |\n+LL |     fn twice_ten_oo(f: Box<dyn FnOnce(i32) -> i32>) {\n+   |                     - move occurs because `f` has type `Box<dyn FnOnce(i32) -> i32>`, which does not implement the `Copy` trait\n+LL |         f(f(10));\n+   |         - ^ value used here after move\n+   |         |\n+   |         value moved here\n+\n+error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n+  --> $DIR/two-phase-nonrecv-autoref.rs:108:27\n+   |\n+LL |     double_access(&mut a, &a);\n+   |     ------------- ------  ^^ immutable borrow occurs here\n+   |     |             |\n+   |     |             mutable borrow occurs here\n+   |     mutable borrow later used by call\n+\n+error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n+  --> $DIR/two-phase-nonrecv-autoref.rs:133:7\n+   |\n+LL |     i[i[3]] = 4;\n+   |     --^----\n+   |     | |\n+   |     | immutable borrow occurs here\n+   |     mutable borrow occurs here\n+   |     mutable borrow later used here\n+   |\n+help: try adding a local storing this...\n+  --> $DIR/two-phase-nonrecv-autoref.rs:133:7\n+   |\n+LL |     i[i[3]] = 4;\n+   |       ^^^^\n+help: ...and then using that local here\n+  --> $DIR/two-phase-nonrecv-autoref.rs:133:5\n+   |\n+LL |     i[i[3]] = 4;\n+   |     ^^^^^^^\n+\n+error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n+  --> $DIR/two-phase-nonrecv-autoref.rs:139:7\n+   |\n+LL |     i[i[3]] = i[4];\n+   |     --^----\n+   |     | |\n+   |     | immutable borrow occurs here\n+   |     mutable borrow occurs here\n+   |     mutable borrow later used here\n+   |\n+help: try adding a local storing this...\n+  --> $DIR/two-phase-nonrecv-autoref.rs:139:7\n+   |\n+LL |     i[i[3]] = i[4];\n+   |       ^^^^\n+help: ...and then using that local here\n+  --> $DIR/two-phase-nonrecv-autoref.rs:139:5\n+   |\n+LL |     i[i[3]] = i[4];\n+   |     ^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors have detailed explanations: E0382, E0499, E0502.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "3518a663e59b5f9a0fb6e0762d9919c9cd662ba1", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8220be5240e644a368559388e0de5e1e412a3e61/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8220be5240e644a368559388e0de5e1e412a3e61/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr?ref=8220be5240e644a368559388e0de5e1e412a3e61", "patch": "@@ -8,7 +8,7 @@ LL |         f(f(10));\n    |         first borrow later used by call\n \n error[E0382]: use of moved value: `f`\n-  --> $DIR/two-phase-nonrecv-autoref.rs:59:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:58:11\n    |\n LL |     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n    |                                            - move occurs because `f` has type `Box<F>`, which does not implement the `Copy` trait\n@@ -18,7 +18,7 @@ LL |         f(f(10));\n    |         value moved here\n \n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n-  --> $DIR/two-phase-nonrecv-autoref.rs:65:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:63:11\n    |\n LL |         f(f(10));\n    |         - ^ second mutable borrow occurs here\n@@ -27,7 +27,7 @@ LL |         f(f(10));\n    |         first borrow later used by call\n \n error[E0382]: use of moved value: `f`\n-  --> $DIR/two-phase-nonrecv-autoref.rs:73:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:70:11\n    |\n LL |     fn twice_ten_oo(f: Box<dyn FnOnce(i32) -> i32>) {\n    |                     - move occurs because `f` has type `Box<dyn FnOnce(i32) -> i32>`, which does not implement the `Copy` trait\n@@ -37,7 +37,7 @@ LL |         f(f(10));\n    |         value moved here\n \n error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:112:27\n+  --> $DIR/two-phase-nonrecv-autoref.rs:108:27\n    |\n LL |     double_access(&mut a, &a);\n    |     ------------- ------  ^^ immutable borrow occurs here\n@@ -46,7 +46,7 @@ LL |     double_access(&mut a, &a);\n    |     mutable borrow later used by call\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:138:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:133:7\n    |\n LL |     i[i[3]] = 4;\n    |     --^----\n@@ -56,18 +56,18 @@ LL |     i[i[3]] = 4;\n    |     mutable borrow later used here\n    |\n help: try adding a local storing this...\n-  --> $DIR/two-phase-nonrecv-autoref.rs:138:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:133:7\n    |\n LL |     i[i[3]] = 4;\n    |       ^^^^\n help: ...and then using that local here\n-  --> $DIR/two-phase-nonrecv-autoref.rs:138:5\n+  --> $DIR/two-phase-nonrecv-autoref.rs:133:5\n    |\n LL |     i[i[3]] = 4;\n    |     ^^^^^^^\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:143:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:139:7\n    |\n LL |     i[i[3]] = i[4];\n    |     --^----\n@@ -77,12 +77,12 @@ LL |     i[i[3]] = i[4];\n    |     mutable borrow later used here\n    |\n help: try adding a local storing this...\n-  --> $DIR/two-phase-nonrecv-autoref.rs:143:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:139:7\n    |\n LL |     i[i[3]] = i[4];\n    |       ^^^^\n help: ...and then using that local here\n-  --> $DIR/two-phase-nonrecv-autoref.rs:143:5\n+  --> $DIR/two-phase-nonrecv-autoref.rs:139:5\n    |\n LL |     i[i[3]] = i[4];\n    |     ^^^^^^^"}, {"sha": "b6cc099a6145f9c5707bc14f98aec1a07dbf5da5", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8220be5240e644a368559388e0de5e1e412a3e61/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8220be5240e644a368559388e0de5e1e412a3e61/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs?ref=8220be5240e644a368559388e0de5e1e412a3e61", "patch": "@@ -1,4 +1,4 @@\n-// revisions: nll\n+// revisions: base nll\n //[nll]compile-flags: -Z borrowck=mir\n \n //[g2p]compile-flags: -Z borrowck=mir -Z two-phase-beyond-autoref\n@@ -49,30 +49,26 @@ fn overloaded_call_traits() {\n \n     fn twice_ten_sm<F: FnMut(i32) -> i32>(f: &mut F) {\n         f(f(10));\n-        //[nll]~^   ERROR cannot borrow `*f` as mutable more than once at a time\n-        //[g2p]~^^ ERROR cannot borrow `*f` as mutable more than once at a time\n+        //~^ ERROR cannot borrow `*f` as mutable more than once at a time\n     }\n     fn twice_ten_si<F: Fn(i32) -> i32>(f: &mut F) {\n         f(f(10));\n     }\n     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n         f(f(10));\n-        //[nll]~^   ERROR use of moved value: `f`\n-        //[g2p]~^^  ERROR use of moved value: `f`\n+        //~^ ERROR use of moved value: `f`\n     }\n \n     fn twice_ten_om(f: &mut dyn FnMut(i32) -> i32) {\n         f(f(10));\n-        //[nll]~^   ERROR cannot borrow `*f` as mutable more than once at a time\n-        //[g2p]~^^  ERROR cannot borrow `*f` as mutable more than once at a time\n+        //~^ ERROR cannot borrow `*f` as mutable more than once at a time\n     }\n     fn twice_ten_oi(f: &mut dyn Fn(i32) -> i32) {\n         f(f(10));\n     }\n     fn twice_ten_oo(f: Box<dyn FnOnce(i32) -> i32>) {\n         f(f(10));\n-        //[nll]~^   ERROR use of moved value: `f`\n-        //[g2p]~^^  ERROR use of moved value: `f`\n+        //~^ ERROR use of moved value: `f`\n     }\n \n     twice_ten_sm(&mut |x| x + 1);\n@@ -110,8 +106,7 @@ fn coerce_unsized() {\n \n     // This is not okay.\n     double_access(&mut a, &a);\n-    //[nll]~^   ERROR cannot borrow `a` as immutable because it is also borrowed as mutable [E0502]\n-    //[g2p]~^^  ERROR cannot borrow `a` as immutable because it is also borrowed as mutable [E0502]\n+    //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable [E0502]\n \n     // But this is okay.\n     a.m(a.i(10));\n@@ -136,12 +131,14 @@ impl IndexMut<i32> for I {\n fn coerce_index_op() {\n     let mut i = I(10);\n     i[i[3]] = 4;\n-    //[nll]~^  ERROR cannot borrow `i` as immutable because it is also borrowed as mutable [E0502]\n+    //~^ ERROR cannot borrow `i` as immutable because it is also borrowed as mutable [E0502]\n+    // Shoud be accepted with g2p\n \n     i[3] = i[4];\n \n     i[i[3]] = i[4];\n-    //[nll]~^  ERROR cannot borrow `i` as immutable because it is also borrowed as mutable [E0502]\n+    //~^ ERROR cannot borrow `i` as immutable because it is also borrowed as mutable [E0502]\n+    // Shoud be accepted with g2p\n }\n \n fn main() {"}]}