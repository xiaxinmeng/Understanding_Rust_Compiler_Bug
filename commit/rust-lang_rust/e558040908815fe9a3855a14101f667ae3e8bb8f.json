{"sha": "e558040908815fe9a3855a14101f667ae3e8bb8f", "node_id": "C_kwDOAAsO6NoAKGU1NTgwNDA5MDg4MTVmZTlhMzg1NWExNDEwMWY2NjdhZTNlOGJiOGY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-05T03:46:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-05T03:46:39Z"}, "message": "Rollup merge of #94624 - estebank:regression-94508, r=Dylan-DPC\n\nDowngrade `#[test]` on macro call to warning\n\nFollow up to #92959. Address #94508.", "tree": {"sha": "414b16f57c3e3e3aed46c536b6ecc5ff96d836bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/414b16f57c3e3e3aed46c536b6ecc5ff96d836bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e558040908815fe9a3855a14101f667ae3e8bb8f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIt0fCRBK7hj4Ov3rIwAAmE4IAGzQzNG3hVZ3wQUZcUedE+iM\nMDugCd92gOJ+VS64El5sMTkalHGSxI/O0EXZG0Ts7shbpSKs5FUpuaUrMKaoVDZg\njGIRW8a8SQrjHc2EH2nUSlKSSDIINAoXbmsbTh6My9plRJQo60QiaQrzhRBmZTKi\nc4CAdofZqZ3yuJACgnqLtxr6KrMQb7XnZYp1yUXCziyF6+Mge9qH+RSHMumCb463\nJnYqDxRhsBSP22eN1cYMD2QB/ieDGmPblNuwzfDhf/giM2hohH/2CgRQJoDZJ9DW\nngofmn9KJvISK13kq23GrRPUj87prJuVluWTDXz5I+7mRcnzzpJHVq0yDAgAH/g=\n=hkvr\n-----END PGP SIGNATURE-----\n", "payload": "tree 414b16f57c3e3e3aed46c536b6ecc5ff96d836bc\nparent a3fe63e9fe73bea75c2405dd0928d78b5c83daf8\nparent 050d589991ea2a79b747e1b559ca476f37299441\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646451999 +0100\ncommitter GitHub <noreply@github.com> 1646451999 +0100\n\nRollup merge of #94624 - estebank:regression-94508, r=Dylan-DPC\n\nDowngrade `#[test]` on macro call to warning\n\nFollow up to #92959. Address #94508.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e558040908815fe9a3855a14101f667ae3e8bb8f", "html_url": "https://github.com/rust-lang/rust/commit/e558040908815fe9a3855a14101f667ae3e8bb8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e558040908815fe9a3855a14101f667ae3e8bb8f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3fe63e9fe73bea75c2405dd0928d78b5c83daf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3fe63e9fe73bea75c2405dd0928d78b5c83daf8", "html_url": "https://github.com/rust-lang/rust/commit/a3fe63e9fe73bea75c2405dd0928d78b5c83daf8"}, {"sha": "050d589991ea2a79b747e1b559ca476f37299441", "url": "https://api.github.com/repos/rust-lang/rust/commits/050d589991ea2a79b747e1b559ca476f37299441", "html_url": "https://github.com/rust-lang/rust/commit/050d589991ea2a79b747e1b559ca476f37299441"}], "stats": {"total": 62, "additions": 27, "deletions": 35}, "files": [{"sha": "0c2d20b8f2dc89eea86804cd2c56ed77d1d4ed11", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e558040908815fe9a3855a14101f667ae3e8bb8f/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e558040908815fe9a3855a14101f667ae3e8bb8f/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=e558040908815fe9a3855a14101f667ae3e8bb8f", "patch": "@@ -105,14 +105,18 @@ pub fn expand_test_or_bench(\n \n     // Note: non-associated fn items are already handled by `expand_test_or_bench`\n     if !matches!(item.kind, ast::ItemKind::Fn(_)) {\n-        cx.sess\n-            .parse_sess\n-            .span_diagnostic\n-            .struct_span_err(\n-                attr_sp,\n-                \"the `#[test]` attribute may only be used on a non-associated function\",\n-            )\n-            .note(\"the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\")\n+        let diag = &cx.sess.parse_sess.span_diagnostic;\n+        let msg = \"the `#[test]` attribute may only be used on a non-associated function\";\n+        let mut err = match item.kind {\n+            // These were a warning before #92959 and need to continue being that to avoid breaking\n+            // stable user code (#94508).\n+            ast::ItemKind::MacCall(_) => diag.struct_span_warn(attr_sp, msg),\n+            // `.forget_guarantee()` needed to get these two arms to match types. Because of how\n+            // locally close the `.emit()` call is I'm comfortable with it, but if it can be\n+            // reworked in the future to not need it, it'd be nice.\n+            _ => diag.struct_span_err(attr_sp, msg).forget_guarantee(),\n+        };\n+        err.span_label(attr_sp, \"the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\")\n             .span_label(item.span, format!(\"expected a non-associated function, found {} {}\", item.kind.article(), item.kind.descr()))\n             .span_suggestion(attr_sp, \"replace with conditional compilation to make the item only exist when tests are being run\", String::from(\"#[cfg(test)]\"), Applicability::MaybeIncorrect)\n             .emit();"}, {"sha": "a460480afb157efb7e030c3087dfa19da80b53e3", "filename": "src/test/ui/test-attrs/test-on-not-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e558040908815fe9a3855a14101f667ae3e8bb8f/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e558040908815fe9a3855a14101f667ae3e8bb8f/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.rs?ref=e558040908815fe9a3855a14101f667ae3e8bb8f", "patch": "@@ -58,7 +58,7 @@ macro_rules! foo {\n     () => {};\n }\n \n-#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+#[test] //~ WARN: the `#[test]` attribute may only be used on a non-associated function\n foo!();\n \n // make sure it doesn't erroneously trigger on a real test"}, {"sha": "23efd5bc0d9faee37fc5571f80e92eed55c6f3d0", "filename": "src/test/ui/test-attrs/test-on-not-fn.stderr", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e558040908815fe9a3855a14101f667ae3e8bb8f/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e558040908815fe9a3855a14101f667ae3e8bb8f/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr?ref=e558040908815fe9a3855a14101f667ae3e8bb8f", "patch": "@@ -2,11 +2,10 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:3:1\n    |\n LL | #[test]\n-   | ^^^^^^^\n+   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n LL | mod test {}\n    | ----------- expected a non-associated function, found a module\n    |\n-   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n help: replace with conditional compilation to make the item only exist when tests are being run\n    |\n LL | #[cfg(test)]\n@@ -16,7 +15,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:6:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^\n+   |   ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n LL | / mod loooooooooooooong_teeeeeeeeeest {\n LL | |     /*\n LL | |     this is a comment\n@@ -26,7 +25,6 @@ LL | |     */\n LL | | }\n    | |_- expected a non-associated function, found a module\n    |\n-   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n help: replace with conditional compilation to make the item only exist when tests are being run\n    |\n LL | #[cfg(test)]\n@@ -36,11 +34,10 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:20:1\n    |\n LL | #[test]\n-   | ^^^^^^^\n+   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n LL | extern \"C\" {}\n    | ------------- expected a non-associated function, found an extern block\n    |\n-   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n help: replace with conditional compilation to make the item only exist when tests are being run\n    |\n LL | #[cfg(test)]\n@@ -50,11 +47,10 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:23:1\n    |\n LL | #[test]\n-   | ^^^^^^^\n+   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n LL | trait Foo {}\n    | ------------ expected a non-associated function, found a trait\n    |\n-   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n help: replace with conditional compilation to make the item only exist when tests are being run\n    |\n LL | #[cfg(test)]\n@@ -64,11 +60,10 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:26:1\n    |\n LL | #[test]\n-   | ^^^^^^^\n+   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n LL | impl Foo for i32 {}\n    | ------------------- expected a non-associated function, found an implementation\n    |\n-   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n help: replace with conditional compilation to make the item only exist when tests are being run\n    |\n LL | #[cfg(test)]\n@@ -78,11 +73,10 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:29:1\n    |\n LL | #[test]\n-   | ^^^^^^^\n+   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n LL | const FOO: i32 = -1_i32;\n    | ------------------------ expected a non-associated function, found a constant item\n    |\n-   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n help: replace with conditional compilation to make the item only exist when tests are being run\n    |\n LL | #[cfg(test)]\n@@ -92,11 +86,10 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:32:1\n    |\n LL | #[test]\n-   | ^^^^^^^\n+   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n LL | static BAR: u64 = 10_000_u64;\n    | ----------------------------- expected a non-associated function, found a static item\n    |\n-   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n help: replace with conditional compilation to make the item only exist when tests are being run\n    |\n LL | #[cfg(test)]\n@@ -106,13 +99,12 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:35:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^\n+   |   ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n LL | / enum MyUnit {\n LL | |     Unit,\n LL | | }\n    | |_- expected a non-associated function, found an enum\n    |\n-   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n help: replace with conditional compilation to make the item only exist when tests are being run\n    |\n LL | #[cfg(test)]\n@@ -122,11 +114,10 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:40:1\n    |\n LL | #[test]\n-   | ^^^^^^^\n+   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n LL | struct NewI32(i32);\n    | ------------------- expected a non-associated function, found a struct\n    |\n-   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n help: replace with conditional compilation to make the item only exist when tests are being run\n    |\n LL | #[cfg(test)]\n@@ -136,14 +127,13 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:43:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^\n+   |   ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n LL | / union Spooky {\n LL | |     x: i32,\n LL | |     y: u32,\n LL | | }\n    | |_- expected a non-associated function, found a union\n    |\n-   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n help: replace with conditional compilation to make the item only exist when tests are being run\n    |\n LL | #[cfg(test)]\n@@ -153,33 +143,31 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:50:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^\n+   |   ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n LL |   #[derive(Copy, Clone, Debug)]\n LL | / struct MoreAttrs {\n LL | |     a: i32,\n LL | |     b: u64,\n LL | | }\n    | |_- expected a non-associated function, found a struct\n    |\n-   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n help: replace with conditional compilation to make the item only exist when tests are being run\n    |\n LL | #[cfg(test)]\n    | ~~~~~~~~~~~~\n \n-error: the `#[test]` attribute may only be used on a non-associated function\n+warning: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:61:1\n    |\n LL | #[test]\n-   | ^^^^^^^\n+   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n LL | foo!();\n    | ------- expected a non-associated function, found an item macro invocation\n    |\n-   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n help: replace with conditional compilation to make the item only exist when tests are being run\n    |\n LL | #[cfg(test)]\n    | ~~~~~~~~~~~~\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 11 previous errors; 1 warning emitted\n "}]}