{"sha": "349f2535fb6b78c7f1293f7444b06a988f90e8d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0OWYyNTM1ZmI2Yjc4YzdmMTI5M2Y3NDQ0YjA2YTk4OGY5MGU4ZDE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-08T12:31:16Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-08T12:31:16Z"}, "message": "Copy some comments from rustc", "tree": {"sha": "9f801104eb816172c41f7814ba182bf44d5c9a0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f801104eb816172c41f7814ba182bf44d5c9a0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/349f2535fb6b78c7f1293f7444b06a988f90e8d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/349f2535fb6b78c7f1293f7444b06a988f90e8d1", "html_url": "https://github.com/rust-lang/rust/commit/349f2535fb6b78c7f1293f7444b06a988f90e8d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/349f2535fb6b78c7f1293f7444b06a988f90e8d1/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f73d0ee439054c7f19c4dced0d0732c2663626e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f73d0ee439054c7f19c4dced0d0732c2663626e6", "html_url": "https://github.com/rust-lang/rust/commit/f73d0ee439054c7f19c4dced0d0732c2663626e6"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "f5713d5480e1eb3fe27418c771c1396cc0db7047", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/349f2535fb6b78c7f1293f7444b06a988f90e8d1/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349f2535fb6b78c7f1293f7444b06a988f90e8d1/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=349f2535fb6b78c7f1293f7444b06a988f90e8d1", "patch": "@@ -141,7 +141,46 @@ impl Default for InternedStandardTypes {\n         InternedStandardTypes { unknown: TyKind::Error.intern(&Interner) }\n     }\n }\n-\n+/// Represents coercing a value to a different type of value.\n+///\n+/// We transform values by following a number of `Adjust` steps in order.\n+/// See the documentation on variants of `Adjust` for more details.\n+///\n+/// Here are some common scenarios:\n+///\n+/// 1. The simplest cases are where a pointer is not adjusted fat vs thin.\n+///    Here the pointer will be dereferenced N times (where a dereference can\n+///    happen to raw or borrowed pointers or any smart pointer which implements\n+///    Deref, including Box<_>). The types of dereferences is given by\n+///    `autoderefs`. It can then be auto-referenced zero or one times, indicated\n+///    by `autoref`, to either a raw or borrowed pointer. In these cases unsize is\n+///    `false`.\n+///\n+/// 2. A thin-to-fat coercion involves unsizing the underlying data. We start\n+///    with a thin pointer, deref a number of times, unsize the underlying data,\n+///    then autoref. The 'unsize' phase may change a fixed length array to a\n+///    dynamically sized one, a concrete object to a trait object, or statically\n+///    sized struct to a dynamically sized one. E.g., &[i32; 4] -> &[i32] is\n+///    represented by:\n+///\n+///    ```\n+///    Deref(None) -> [i32; 4],\n+///    Borrow(AutoBorrow::Ref) -> &[i32; 4],\n+///    Unsize -> &[i32],\n+///    ```\n+///\n+///    Note that for a struct, the 'deep' unsizing of the struct is not recorded.\n+///    E.g., `struct Foo<T> { x: T }` we can coerce &Foo<[i32; 4]> to &Foo<[i32]>\n+///    The autoderef and -ref are the same as in the above example, but the type\n+///    stored in `unsize` is `Foo<[i32]>`, we don't store any further detail about\n+///    the underlying conversions from `[i32; 4]` to `[i32]`.\n+///\n+/// 3. Coercing a `Box<T>` to `Box<dyn Trait>` is an interesting special case. In\n+///    that case, we have the pointer we need coming in, so there are no\n+///    autoderefs, and no autoref. Instead we just do the `Unsize` transformation.\n+///    At some point, of course, `Box` should move out of the compiler, in which\n+///    case this is analogous to transforming a struct. E.g., Box<[i32; 4]> ->\n+///    Box<[i32]> is an `Adjust::Unsize` with the target `Box<[i32]>`.\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct Adjustment {\n     pub kind: Adjust,\n@@ -152,34 +191,25 @@ pub struct Adjustment {\n pub enum Adjust {\n     /// Go from ! to any type.\n     NeverToAny,\n-\n     /// Dereference once, producing a place.\n     Deref(Option<OverloadedDeref>),\n-\n     /// Take the address and produce either a `&` or `*` pointer.\n     Borrow(AutoBorrow),\n-\n     Pointer(PointerCast),\n }\n \n-// impl fmt::Display for Adjust {\n-//     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-//         match self {\n-//             Adjust::NeverToAny => write!(f, \"NeverToAny\"),\n-//             Adjust::Deref(_) => write!(f, \"Deref\"), // FIXME\n-//             Adjust::Borrow(AutoBorrow::Ref(mt)) => write!(f, \"BorrowRef{:?}\", mt),\n-//             Adjust::Borrow(AutoBorrow::RawPtr(mt)) => write!(f, \"BorrowRawPtr{:?}\", mt),\n-//             Adjust::Pointer(cast) => write!(f, \"PtrCast{:?}\", cast),\n-//         }\n-//     }\n-// }\n-\n+/// An overloaded autoderef step, representing a `Deref(Mut)::deref(_mut)`\n+/// call, with the signature `&'a T -> &'a U` or `&'a mut T -> &'a mut U`.\n+/// The target type is `U` in both cases, with the region and mutability\n+/// being those shared by both the receiver and the returned reference.\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct OverloadedDeref(Mutability);\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum AutoBorrow {\n+    /// Converts from T to &T.\n     Ref(Mutability),\n+    /// Converts from T to *T.\n     RawPtr(Mutability),\n }\n "}]}