{"sha": "26f1c01ff7d63415cabacefa301b6b4a6814f661", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZjFjMDFmZjdkNjM0MTVjYWJhY2VmYTMwMWI2YjRhNjgxNGY2NjE=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-10-24T13:18:04Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:31:35Z"}, "message": "Add read_only fn to BodyCache<&mut...> impl, fix more Body -> (ReadOnly)BodyCache type errors", "tree": {"sha": "73d0be6696cceea005930cf9d4b956451e6b2308", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73d0be6696cceea005930cf9d4b956451e6b2308"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26f1c01ff7d63415cabacefa301b6b4a6814f661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26f1c01ff7d63415cabacefa301b6b4a6814f661", "html_url": "https://github.com/rust-lang/rust/commit/26f1c01ff7d63415cabacefa301b6b4a6814f661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26f1c01ff7d63415cabacefa301b6b4a6814f661/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab98c595eaa07249e2ebbf37c9123b33fc6a892f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab98c595eaa07249e2ebbf37c9123b33fc6a892f", "html_url": "https://github.com/rust-lang/rust/commit/ab98c595eaa07249e2ebbf37c9123b33fc6a892f"}], "stats": {"total": 88, "additions": 48, "deletions": 40}, "files": [{"sha": "24d1f9e373bb050977feab9f40d6f9a861f9b10f", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/26f1c01ff7d63415cabacefa301b6b4a6814f661/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f1c01ff7d63415cabacefa301b6b4a6814f661/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=26f1c01ff7d63415cabacefa301b6b4a6814f661", "patch": "@@ -205,6 +205,15 @@ impl<'a, 'tcx> BodyCache<&'a mut Body<'tcx>> {\n         self.body\n     }\n \n+    #[inline]\n+    pub fn read_only(mut self) -> ReadOnlyBodyCache<'a, 'tcx> {\n+        self.cache.ensure_predecessors(self.body);\n+        ReadOnlyBodyCache {\n+            cache: self.cache,\n+            body: self.body,\n+        }\n+    }\n+\n     #[inline]\n     pub fn basic_blocks(&self) -> &IndexVec<BasicBlock, BasicBlockData<'tcx>> {\n         &self.body.basic_blocks"}, {"sha": "f8ae07aa394b58d0f804fece4881453e7a27915c", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26f1c01ff7d63415cabacefa301b6b4a6814f661/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f1c01ff7d63415cabacefa301b6b4a6814f661/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=26f1c01ff7d63415cabacefa301b6b4a6814f661", "patch": "@@ -163,13 +163,13 @@ fn do_mir_borrowck<'a, 'tcx>(\n     // be modified (in place) to contain non-lexical lifetimes. It\n     // will have a lifetime tied to the inference context.\n     let mut body: Body<'tcx> = input_body.clone();\n-    // TODO(pfaria) this very likely won't work because\n-    let promoted: IndexVec<Promoted, Body<'tcx>> = input_promoted.clone();\n-    let mut promoted_cache: IndexVec<Promoted, BodyCache<&mut Body<'tcx>>> = promoted.iter_mut().map(|body| BodyCache::new(body)).collect();\n+    let mut promoted = input_promoted.clone();\n+    let mut promoted_cache: IndexVec<Promoted, BodyCache<&mut Body<'tcx>>> = input_promoted.clone().iter_mut().map(|body| BodyCache::new(body)).collect();\n     let mut body_cache = BodyCache::new(&mut body);\n     let free_regions =\n         nll::replace_regions_in_mir(infcx, def_id, param_env, &mut body_cache, &mut promoted_cache);\n     let body_cache = BodyCache::new(&body).read_only(); // no further changes\n+    let promoted: IndexVec<Promoted, ReadOnlyBodyCache<'_, 'tcx>> = promoted_cache.into_iter().map(|body_cache| body_cache.read_only()).collect();\n \n     let location_table = &LocationTable::new(&body_cache);\n "}, {"sha": "5fa2c6605f6fbe7c9dad10f8eef5eaee1fe7b9ef", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26f1c01ff7d63415cabacefa301b6b4a6814f661/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f1c01ff7d63415cabacefa301b6b4a6814f661/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=26f1c01ff7d63415cabacefa301b6b4a6814f661", "patch": "@@ -159,7 +159,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     def_id: DefId,\n     universal_regions: UniversalRegions<'tcx>,\n     body_cache: &ReadOnlyBodyCache<'_, 'tcx>,\n-    promoted: &IndexVec<Promoted, Body<'tcx>>,\n+    promoted_cache: &IndexVec<Promoted, ReadOnlyBodyCache<'_, 'tcx>>,\n     local_names: &IndexVec<Local, Option<Symbol>>,\n     upvars: &[Upvar],\n     location_table: &LocationTable,\n@@ -191,7 +191,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n         infcx,\n         param_env,\n         body_cache,\n-        promoted,\n+        promoted_cache,\n         def_id,\n         &universal_regions,\n         location_table,"}, {"sha": "833958814af4507dde42c96c5baba5c4de9edcf6", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/26f1c01ff7d63415cabacefa301b6b4a6814f661/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f1c01ff7d63415cabacefa301b6b4a6814f661/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs?ref=26f1c01ff7d63415cabacefa301b6b4a6814f661", "patch": "@@ -7,7 +7,7 @@ use crate::borrow_check::nll::ToRegionVid;\n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::FlowAtLocation;\n use crate::dataflow::MaybeInitializedPlaces;\n-use rustc::mir::{Body, Local};\n+use rustc::mir::{Body, Local, ReadOnlyBodyCache};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n use std::rc::Rc;\n@@ -28,7 +28,7 @@ mod trace;\n /// performed before\n pub(super) fn generate<'tcx>(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n-    body: &Body<'tcx>,\n+    body_cache: &ReadOnlyBodyCache<'_, 'tcx>,\n     elements: &Rc<RegionValueElements>,\n     flow_inits: &mut FlowAtLocation<'tcx, MaybeInitializedPlaces<'_, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n@@ -41,15 +41,14 @@ pub(super) fn generate<'tcx>(\n         &typeck.borrowck_context.universal_regions,\n         &typeck.borrowck_context.constraints.outlives_constraints,\n     );\n-    let live_locals = compute_live_locals(typeck.tcx(), &free_regions, body);\n+    let live_locals = compute_live_locals(typeck.tcx(), &free_regions, &body_cache);\n     let facts_enabled = AllFacts::enabled(typeck.tcx());\n \n-\n     let polonius_drop_used = if facts_enabled {\n         let mut drop_used = Vec::new();\n         polonius::populate_access_facts(\n             typeck,\n-            body,\n+            &body_cache,\n             location_table,\n             move_data,\n             &mut drop_used,\n@@ -62,7 +61,7 @@ pub(super) fn generate<'tcx>(\n     if !live_locals.is_empty() || facts_enabled {\n         trace::trace(\n             typeck,\n-            body,\n+            body_cache,\n             elements,\n             flow_inits,\n             move_data,"}, {"sha": "5929516ec4e4738f0d326a542faaca27f15d9bf0", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/26f1c01ff7d63415cabacefa301b6b4a6814f661/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f1c01ff7d63415cabacefa301b6b4a6814f661/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=26f1c01ff7d63415cabacefa301b6b4a6814f661", "patch": "@@ -7,7 +7,7 @@ use crate::dataflow::indexes::MovePathIndex;\n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::{FlowAtLocation, FlowsAtLocation, MaybeInitializedPlaces};\n use rustc::infer::canonical::QueryRegionConstraints;\n-use rustc::mir::{BasicBlock, Body, ConstraintCategory, Local, Location};\n+use rustc::mir::{BasicBlock, ConstraintCategory, Local, Location, ReadOnlyBodyCache};\n use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc::traits::query::type_op::outlives::DropckOutlives;\n use rustc::traits::query::type_op::TypeOp;\n@@ -32,7 +32,7 @@ use std::rc::Rc;\n /// this respects `#[may_dangle]` annotations).\n pub(super) fn trace(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n-    body: &Body<'tcx>,\n+    body_cache: &ReadOnlyBodyCache<'_, 'tcx>,\n     elements: &Rc<RegionValueElements>,\n     flow_inits: &mut FlowAtLocation<'tcx, MaybeInitializedPlaces<'_, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n@@ -41,11 +41,11 @@ pub(super) fn trace(\n ) {\n     debug!(\"trace()\");\n \n-    let local_use_map = &LocalUseMap::build(&live_locals, elements, body);\n+    let local_use_map = &LocalUseMap::build(&live_locals, elements, &body_cache);\n \n     let cx = LivenessContext {\n         typeck,\n-        body,\n+        body_cache,\n         flow_inits,\n         elements,\n         local_use_map,\n@@ -71,7 +71,7 @@ struct LivenessContext<'me, 'typeck, 'flow, 'tcx> {\n     elements: &'me RegionValueElements,\n \n     /// MIR we are analyzing.\n-    body: &'me Body<'tcx>,\n+    body_cache: &'me ReadOnlyBodyCache<'me, 'tcx>,\n \n     /// Mapping to/from the various indices used for initialization tracking.\n     move_data: &'me MoveData<'tcx>,\n@@ -135,7 +135,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n             self.compute_use_live_points_for(local);\n             self.compute_drop_live_points_for(local);\n \n-            let local_ty = self.cx.body.local_decls[local].ty;\n+            let local_ty = self.cx.body_cache.local_decls[local].ty;\n \n             if !self.use_live_at.is_empty() {\n                 self.cx.add_use_live_facts_for(local_ty, &self.use_live_at);\n@@ -165,7 +165,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n \n         for (local, location) in drop_used {\n             if !live_locals.contains(&local) {\n-                let local_ty = self.cx.body.local_decls[local].ty;\n+                let local_ty = self.cx.body_cache.local_decls[local].ty;\n                 if local_ty.has_free_regions() {\n                     self.cx.add_drop_live_facts_for(\n                         local,\n@@ -211,7 +211,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n             }\n \n             if self.use_live_at.insert(p) {\n-                self.cx.elements.push_predecessors(self.cx.body, p, &mut self.stack)\n+                self.cx.elements.push_predecessors(&self.cx.body_cache, p, &mut self.stack)\n             }\n         }\n     }\n@@ -234,7 +234,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n         // Find the drops where `local` is initialized.\n         for drop_point in self.cx.local_use_map.drops(local) {\n             let location = self.cx.elements.to_location(drop_point);\n-            debug_assert_eq!(self.cx.body.terminator_loc(location.block), location,);\n+            debug_assert_eq!(self.cx.body_cache.terminator_loc(location.block), location,);\n \n             if self.cx.initialized_at_terminator(location.block, mpi) {\n                 if self.drop_live_at.insert(drop_point) {\n@@ -280,7 +280,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n         // block.  One of them may be either a definition or use\n         // live point.\n         let term_location = self.cx.elements.to_location(term_point);\n-        debug_assert_eq!(self.cx.body.terminator_loc(term_location.block), term_location,);\n+        debug_assert_eq!(self.cx.body_cache.terminator_loc(term_location.block), term_location,);\n         let block = term_location.block;\n         let entry_point = self.cx.elements.entry_point(term_location.block);\n         for p in (entry_point..term_point).rev() {\n@@ -302,7 +302,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n             }\n         }\n \n-        for &pred_block in self.cx.body.predecessors_for(block).iter() {\n+        for &pred_block in self.cx.body_cache.predecessors_for(block).iter() {\n             debug!(\"compute_drop_live_points_for_block: pred_block = {:?}\", pred_block,);\n \n             // Check whether the variable is (at least partially)\n@@ -328,7 +328,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n                 continue;\n             }\n \n-            let pred_term_loc = self.cx.body.terminator_loc(pred_block);\n+            let pred_term_loc = self.cx.body_cache.terminator_loc(pred_block);\n             let pred_term_point = self.cx.elements.point_from_location(pred_term_loc);\n \n             // If the terminator of this predecessor either *assigns*\n@@ -399,7 +399,7 @@ impl LivenessContext<'_, '_, '_, 'tcx> {\n         // the effects of all statements. This is the only way to get\n         // \"just ahead\" of a terminator.\n         self.flow_inits.reset_to_entry_of(block);\n-        for statement_index in 0..self.body[block].statements.len() {\n+        for statement_index in 0..self.body_cache[block].statements.len() {\n             let location = Location { block, statement_index };\n             self.flow_inits.reconstruct_statement_effect(location);\n             self.flow_inits.apply_local_effect(location);\n@@ -471,7 +471,7 @@ impl LivenessContext<'_, '_, '_, 'tcx> {\n \n         drop_data.dropck_result.report_overflows(\n             self.typeck.infcx.tcx,\n-            self.body.source_info(*drop_locations.first().unwrap()).span,\n+            self.body_cache.source_info(*drop_locations.first().unwrap()).span,\n             dropped_ty,\n         );\n "}, {"sha": "8e966033bb8fddc354d8e44a8f5421a5ec619618", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/26f1c01ff7d63415cabacefa301b6b4a6814f661/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f1c01ff7d63415cabacefa301b6b4a6814f661/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=26f1c01ff7d63415cabacefa301b6b4a6814f661", "patch": "@@ -116,7 +116,7 @@ pub(crate) fn type_check<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body_cache: &ReadOnlyBodyCache<'_, 'tcx>,\n-    promoted: &IndexVec<Promoted, Body<'tcx>>,\n+    promoted_cache: &IndexVec<Promoted, ReadOnlyBodyCache<'_, 'tcx>>,\n     mir_def_id: DefId,\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n     location_table: &LocationTable,\n@@ -162,7 +162,7 @@ pub(crate) fn type_check<'tcx>(\n         mir_def_id,\n         param_env,\n         body_cache,\n-        promoted,\n+        promoted_cache,\n         &region_bound_pairs,\n         implicit_region_bound,\n         &mut borrowck_context,\n@@ -186,7 +186,7 @@ fn type_check_internal<'a, 'tcx, R>(\n     mir_def_id: DefId,\n     param_env: ty::ParamEnv<'tcx>,\n     body_cache: &ReadOnlyBodyCache<'a, 'tcx>,\n-    promoted: &'a IndexVec<Promoted, Body<'tcx>>,\n+    promoted_cache: &'a IndexVec<Promoted, ReadOnlyBodyCache<'_, 'tcx>>,\n     region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n     implicit_region_bound: ty::Region<'tcx>,\n     borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,\n@@ -204,7 +204,7 @@ fn type_check_internal<'a, 'tcx, R>(\n         universal_region_relations,\n     );\n     let errors_reported = {\n-        let mut verifier = TypeVerifier::new(&mut checker, body_cache, promoted);\n+        let mut verifier = TypeVerifier::new(&mut checker, body_cache, promoted_cache);\n         verifier.visit_body(body_cache);\n         verifier.errors_reported\n     };\n@@ -261,7 +261,7 @@ enum FieldAccessError {\n struct TypeVerifier<'a, 'b, 'tcx> {\n     cx: &'a mut TypeChecker<'b, 'tcx>,\n     body: &'b Body<'tcx>,\n-    promoted: &'b IndexVec<Promoted, Body<'tcx>>,\n+    promoted_cache: &'b IndexVec<Promoted, ReadOnlyBodyCache<'b, 'tcx>>,\n     last_span: Span,\n     mir_def_id: DefId,\n     errors_reported: bool,\n@@ -401,11 +401,11 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n     fn new(\n         cx: &'a mut TypeChecker<'b, 'tcx>,\n         body: &'b Body<'tcx>,\n-        promoted: &'b IndexVec<Promoted, Body<'tcx>>,\n+        promoted_cache: &'b IndexVec<Promoted, ReadOnlyBodyCache<'b, 'tcx>>,\n     ) -> Self {\n         TypeVerifier {\n             body,\n-            promoted,\n+            promoted_cache,\n             mir_def_id: cx.mir_def_id,\n             cx,\n             last_span: body.span,\n@@ -464,10 +464,10 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                 match kind {\n                     StaticKind::Promoted(promoted, _) => {\n                         if !self.errors_reported {\n-                            let promoted_body = &self.promoted[*promoted];\n-                            self.sanitize_promoted(promoted_body, location);\n+                            let promoted_body_cache = &self.promoted_cache[*promoted];\n+                            self.sanitize_promoted(promoted_body_cache, location);\n \n-                            let promoted_ty = promoted_body.return_ty();\n+                            let promoted_ty = promoted_body_cache.return_ty();\n                             check_err(self, place, promoted_ty, san_ty);\n                         }\n                     }\n@@ -535,20 +535,20 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         place_ty\n     }\n \n-    fn sanitize_promoted(&mut self, promoted_body: &'b Body<'tcx>, location: Location) {\n+    fn sanitize_promoted(&mut self, promoted_body_cache: &ReadOnlyBodyCache<'b, 'tcx>, location: Location) {\n         // Determine the constraints from the promoted MIR by running the type\n         // checker on the promoted MIR, then transfer the constraints back to\n         // the main MIR, changing the locations to the provided location.\n \n-        let parent_body = mem::replace(&mut self.body, promoted_body);\n+        let parent_body = mem::replace(&mut self.body, &promoted_body_cache);\n \n         // Use new sets of constraints and closure bounds so that we can\n         // modify their locations.\n         let all_facts = &mut None;\n         let mut constraints = Default::default();\n         let mut closure_bounds = Default::default();\n         let mut liveness_constraints = LivenessValues::new(\n-            Rc::new(RegionValueElements::new(promoted_body)),\n+            Rc::new(RegionValueElements::new(&promoted_body_cache)),\n         );\n         // Don't try to add borrow_region facts for the promoted MIR\n \n@@ -570,12 +570,12 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         swap_constraints(self);\n \n-        self.visit_body(promoted_body);\n+        self.visit_body(promoted_body_cache);\n \n \n         if !self.errors_reported {\n             // if verifier failed, don't do further checks to avoid ICEs\n-            self.cx.typeck_mir(promoted_body);\n+            self.cx.typeck_mir(&promoted_body_cache);\n         }\n \n         self.body = parent_body;"}]}