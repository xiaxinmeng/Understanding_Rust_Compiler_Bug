{"sha": "487427fbe67480ee7248d775c4ffecd21df12626", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NzQyN2ZiZTY3NDgwZWU3MjQ4ZDc3NWM0ZmZlY2QyMWRmMTI2MjY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-10T07:49:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-10T07:49:42Z"}, "message": "Better error messages", "tree": {"sha": "da53991452c37089a4862904c6a60a322afc2d61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da53991452c37089a4862904c6a60a322afc2d61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/487427fbe67480ee7248d775c4ffecd21df12626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/487427fbe67480ee7248d775c4ffecd21df12626", "html_url": "https://github.com/rust-lang/rust/commit/487427fbe67480ee7248d775c4ffecd21df12626", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/487427fbe67480ee7248d775c4ffecd21df12626/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b65a92fdd8b430a1ea421a5bbff08935787999fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b65a92fdd8b430a1ea421a5bbff08935787999fb", "html_url": "https://github.com/rust-lang/rust/commit/b65a92fdd8b430a1ea421a5bbff08935787999fb"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "37d1f8ecc8328367aaac17c6f3d4568bc0a70233", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/487427fbe67480ee7248d775c4ffecd21df12626/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/487427fbe67480ee7248d775c4ffecd21df12626/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=487427fbe67480ee7248d775c4ffecd21df12626", "patch": "@@ -28,8 +28,10 @@ fn load_metadata_with(\n     path: &Path,\n     f: impl for<'a> FnOnce(&'a [u8]) -> Result<&'a [u8], String>,\n ) -> Result<MetadataRef, String> {\n-    let file = File::open(path).map_err(|e| format!(\"{:?}\", e))?;\n-    let data = unsafe { Mmap::map(file) }.map_err(|e| format!(\"{:?}\", e))?;\n+    let file =\n+        File::open(path).map_err(|e| format!(\"failed to open file '{}': {}\", path.display(), e))?;\n+    let data = unsafe { Mmap::map(file) }\n+        .map_err(|e| format!(\"failed to mmap file '{}': {}\", path.display(), e))?;\n     let metadata = OwningRef::new(data).try_map(f)?;\n     return Ok(rustc_erase_owner!(metadata.map_owner_box()));\n }\n@@ -38,28 +40,32 @@ impl MetadataLoader for DefaultMetadataLoader {\n     fn get_rlib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n         load_metadata_with(path, |data| {\n             let archive = object::read::archive::ArchiveFile::parse(&*data)\n-                .map_err(|e| format!(\"{:?}\", e))?;\n+                .map_err(|e| format!(\"failed to parse rlib '{}': {}\", path.display(), e))?;\n \n             for entry_result in archive.members() {\n-                let entry = entry_result.map_err(|e| format!(\"{:?}\", e))?;\n+                let entry = entry_result\n+                    .map_err(|e| format!(\"failed to parse rlib '{}': {}\", path.display(), e))?;\n                 if entry.name() == METADATA_FILENAME.as_bytes() {\n                     return Ok(entry.data());\n                 }\n             }\n \n-            Err(\"couldn't find metadata entry\".to_string())\n+            Err(format!(\"metadata not found in rlib '{}'\", path.display()))\n         })\n     }\n \n     fn get_dylib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n         use object::{Object, ObjectSection};\n \n         load_metadata_with(path, |data| {\n-            let file = object::File::parse(&data).map_err(|e| format!(\"parse: {:?}\", e))?;\n+            let file = object::File::parse(&data)\n+                .map_err(|e| format!(\"failed to parse dylib '{}': {}\", path.display(), e))?;\n             file.section_by_name(\".rustc\")\n-                .ok_or(\"no .rustc section\")?\n+                .ok_or_else(|| format!(\"no .rustc section in '{}'\", path.display()))?\n                 .data()\n-                .map_err(|e| format!(\"failed to read .rustc section: {:?}\", e))\n+                .map_err(|e| {\n+                    format!(\"failed to read .rustc section in '{}': {}\", path.display(), e)\n+                })\n         })\n     }\n }"}]}