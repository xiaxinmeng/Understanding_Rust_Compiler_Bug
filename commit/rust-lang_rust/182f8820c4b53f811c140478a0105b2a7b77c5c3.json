{"sha": "182f8820c4b53f811c140478a0105b2a7b77c5c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MmY4ODIwYzRiNTNmODExYzE0MDQ3OGEwMTA1YjJhN2I3N2M1YzM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-24T18:43:29Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-24T20:48:03Z"}, "message": "Rollup merge of #48061 - nikomatsakis:nll-do-not-run-mir-typeck-twice, r=eddyb\n\nFixes #47311.\nr? @nrc", "tree": {"sha": "18a432b954cebc1cfdddc8f699e4be8e86bcac86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18a432b954cebc1cfdddc8f699e4be8e86bcac86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/182f8820c4b53f811c140478a0105b2a7b77c5c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/182f8820c4b53f811c140478a0105b2a7b77c5c3", "html_url": "https://github.com/rust-lang/rust/commit/182f8820c4b53f811c140478a0105b2a7b77c5c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/182f8820c4b53f811c140478a0105b2a7b77c5c3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ec5dc399c84837e2b81c9df8407b2b83c9fb437", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ec5dc399c84837e2b81c9df8407b2b83c9fb437", "html_url": "https://github.com/rust-lang/rust/commit/6ec5dc399c84837e2b81c9df8407b2b83c9fb437"}, {"sha": "bcd996857e42a383c79ea9ae84994d3ad932ac4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcd996857e42a383c79ea9ae84994d3ad932ac4a", "html_url": "https://github.com/rust-lang/rust/commit/bcd996857e42a383c79ea9ae84994d3ad932ac4a"}], "stats": {"total": 830, "additions": 416, "deletions": 414}, "files": [{"sha": "d57b8e78f18a9b1ebbfd090ecfd1798096514a74", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=182f8820c4b53f811c140478a0105b2a7b77c5c3", "patch": "@@ -1585,6 +1585,12 @@ impl MirPass for TypeckMir {\n         let id = tcx.hir.as_local_node_id(def_id).unwrap();\n         debug!(\"run_pass: {:?}\", def_id);\n \n+        // When NLL is enabled, the borrow checker runs the typeck\n+        // itself, so we don't need this MIR pass anymore.\n+        if tcx.sess.nll() {\n+            return;\n+        }\n+\n         if tcx.sess.err_count() > 0 {\n             // compiling a broken program can obviously result in a\n             // broken MIR, so try not to report duplicate errors."}, {"sha": "c425ed554a6f8c2434fd269237a29622b6ddf558", "filename": "src/test/compile-fail/borrowck/two-phase-nonrecv-autoref.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs?ref=182f8820c4b53f811c140478a0105b2a7b77c5c3", "patch": "@@ -105,14 +105,10 @@ fn overloaded_call_traits() {\n         //[lxl]~^^^           ERROR use of moved value: `*f`\n         //[nll]~^^^^          ERROR cannot move a value of type\n         //[nll]~^^^^^         ERROR cannot move a value of type\n-        //[nll]~^^^^^^        ERROR cannot move a value of type\n-        //[nll]~^^^^^^^       ERROR cannot move a value of type\n-        //[nll]~^^^^^^^^      ERROR use of moved value: `*f`\n-        //[g2p]~^^^^^^^^^     ERROR cannot move a value of type\n-        //[g2p]~^^^^^^^^^^    ERROR cannot move a value of type\n-        //[g2p]~^^^^^^^^^^^   ERROR cannot move a value of type\n-        //[g2p]~^^^^^^^^^^^^  ERROR cannot move a value of type\n-        //[g2p]~^^^^^^^^^^^^^ ERROR use of moved value: `*f`\n+        //[nll]~^^^^^^        ERROR use of moved value: `*f`\n+        //[g2p]~^^^^^^^       ERROR cannot move a value of type\n+        //[g2p]~^^^^^^^^      ERROR cannot move a value of type\n+        //[g2p]~^^^^^^^^^     ERROR use of moved value: `*f`\n     }\n \n     twice_ten_sm(&mut |x| x + 1);"}, {"sha": "30669dc4c2f8c1e9e5b2b772d5974e7d6cf7741c", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=182f8820c4b53f811c140478a0105b2a7b77c5c3", "patch": "@@ -25,53 +25,6 @@ note: External requirements\n    = note: number of external vids: 3\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n \n-note: External requirements\n-  --> $DIR/projection-no-regions-closure.rs:46:23\n-   |\n-46 |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: defining type: DefId(0/1:18 ~ projection_no_regions_closure[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               T,\n-               i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<Anything + '_#2r>\n-           ]\n-   = note: number of external vids: 3\n-   = note: where <T as std::iter::Iterator>::Item: '_#2r\n-\n-note: External requirements\n-  --> $DIR/projection-no-regions-closure.rs:54:23\n-   |\n-54 |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: defining type: DefId(0/1:22 ~ projection_no_regions_closure[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-               i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<Anything + '_#3r>\n-           ]\n-   = note: number of external vids: 4\n-   = note: where <T as std::iter::Iterator>::Item: '_#3r\n-\n-note: External requirements\n-  --> $DIR/projection-no-regions-closure.rs:65:23\n-   |\n-65 |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: defining type: DefId(0/1:26 ~ projection_no_regions_closure[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-               i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<Anything + '_#3r>\n-           ]\n-   = note: number of external vids: 4\n-   = note: where <T as std::iter::Iterator>::Item: '_#3r\n-\n error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n   --> $DIR/projection-no-regions-closure.rs:36:23\n    |\n@@ -97,6 +50,21 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+  --> $DIR/projection-no-regions-closure.rs:46:23\n+   |\n+46 |     with_signature(x, |mut y| Box::new(y.next()))\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:18 ~ projection_no_regions_closure[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<Anything + '_#2r>\n+           ]\n+   = note: number of external vids: 3\n+   = note: where <T as std::iter::Iterator>::Item: '_#2r\n+\n note: No external requirements\n   --> $DIR/projection-no-regions-closure.rs:42:1\n    |\n@@ -113,6 +81,22 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+  --> $DIR/projection-no-regions-closure.rs:54:23\n+   |\n+54 |     with_signature(x, |mut y| Box::new(y.next()))\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:22 ~ projection_no_regions_closure[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               '_#2r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<Anything + '_#3r>\n+           ]\n+   = note: number of external vids: 4\n+   = note: where <T as std::iter::Iterator>::Item: '_#3r\n+\n error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n   --> $DIR/projection-no-regions-closure.rs:54:23\n    |\n@@ -139,6 +123,22 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+  --> $DIR/projection-no-regions-closure.rs:65:23\n+   |\n+65 |     with_signature(x, |mut y| Box::new(y.next()))\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:26 ~ projection_no_regions_closure[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               '_#2r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<Anything + '_#3r>\n+           ]\n+   = note: number of external vids: 4\n+   = note: where <T as std::iter::Iterator>::Item: '_#3r\n+\n note: No external requirements\n   --> $DIR/projection-no-regions-closure.rs:60:1\n    |"}, {"sha": "946c1a8f3723503517e078a9c5a806f65a3663d3", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=182f8820c4b53f811c140478a0105b2a7b77c5c3", "patch": "@@ -32,57 +32,6 @@ note: External requirements\n    = note: where T: '_#2r\n    = note: where '_#1r: '_#2r\n \n-note: External requirements\n-  --> $DIR/projection-one-region-closure.rs:68:29\n-   |\n-68 |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: defining type: DefId(0/1:23 ~ projection_one_region_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-               i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n-           ]\n-   = note: number of external vids: 4\n-   = note: where T: '_#3r\n-   = note: where '_#2r: '_#3r\n-\n-note: External requirements\n-  --> $DIR/projection-one-region-closure.rs:90:29\n-   |\n-90 |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: defining type: DefId(0/1:27 ~ projection_one_region_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-               i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n-           ]\n-   = note: number of external vids: 4\n-   = note: where T: '_#3r\n-   = note: where '_#2r: '_#3r\n-\n-note: External requirements\n-   --> $DIR/projection-one-region-closure.rs:103:29\n-    |\n-103 |     with_signature(cell, t, |cell, t| require(cell, t));\n-    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: defining type: DefId(0/1:31 ~ projection_one_region_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n-                '_#1r,\n-                '_#2r,\n-                T,\n-                i32,\n-                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n-            ]\n-    = note: number of external vids: 4\n-    = note: where T: '_#3r\n-    = note: where '_#2r: '_#3r\n-\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:56:29\n    |\n@@ -114,6 +63,23 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+  --> $DIR/projection-one-region-closure.rs:68:29\n+   |\n+68 |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:23 ~ projection_one_region_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               '_#2r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+           ]\n+   = note: number of external vids: 4\n+   = note: where T: '_#3r\n+   = note: where '_#2r: '_#3r\n+\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:68:29\n    |\n@@ -146,6 +112,23 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+  --> $DIR/projection-one-region-closure.rs:90:29\n+   |\n+90 |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:27 ~ projection_one_region_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               '_#2r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+           ]\n+   = note: number of external vids: 4\n+   = note: where T: '_#3r\n+   = note: where '_#2r: '_#3r\n+\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:90:29\n    |\n@@ -178,6 +161,23 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+   --> $DIR/projection-one-region-closure.rs:103:29\n+    |\n+103 |     with_signature(cell, t, |cell, t| require(cell, t));\n+    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: defining type: DefId(0/1:31 ~ projection_one_region_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n+                '_#1r,\n+                '_#2r,\n+                T,\n+                i32,\n+                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+            ]\n+    = note: number of external vids: 4\n+    = note: where T: '_#3r\n+    = note: where '_#2r: '_#3r\n+\n note: No external requirements\n    --> $DIR/projection-one-region-closure.rs:97:1\n     |"}, {"sha": "b26fa96fe638902dc74c7533e07b27966026ae2b", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=182f8820c4b53f811c140478a0105b2a7b77c5c3", "patch": "@@ -31,69 +31,6 @@ note: External requirements\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#2r\n \n-note: External requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:59:29\n-   |\n-59 |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: defining type: DefId(0/1:23 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-               i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n-           ]\n-   = note: number of external vids: 4\n-   = note: where '_#2r: '_#3r\n-\n-note: External requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:80:29\n-   |\n-80 |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: defining type: DefId(0/1:27 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-               i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n-           ]\n-   = note: number of external vids: 4\n-   = note: where '_#2r: '_#3r\n-\n-note: External requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:91:29\n-   |\n-91 |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: defining type: DefId(0/1:31 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-               i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n-           ]\n-   = note: number of external vids: 4\n-   = note: where '_#2r: '_#3r\n-\n-note: External requirements\n-   --> $DIR/projection-one-region-trait-bound-closure.rs:103:29\n-    |\n-103 |     with_signature(cell, t, |cell, t| require(cell, t));\n-    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: defining type: DefId(0/1:34 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n-                '_#1r,\n-                T,\n-                i32,\n-                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n-            ]\n-    = note: number of external vids: 3\n-    = note: where '_#1r: '_#2r\n-\n error: free region `ReEarlyBound(0, 'b)` does not outlive free region `ReFree(DefId(0/0:8 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:16), 'a))`\n   --> $DIR/projection-one-region-trait-bound-closure.rs:48:20\n    |\n@@ -117,6 +54,22 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:59:29\n+   |\n+59 |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:23 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               '_#2r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+           ]\n+   = note: number of external vids: 4\n+   = note: where '_#2r: '_#3r\n+\n error: free region `ReEarlyBound(1, 'b)` does not outlive free region `ReEarlyBound(0, 'a)`\n   --> $DIR/projection-one-region-trait-bound-closure.rs:59:20\n    |\n@@ -141,6 +94,22 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:80:29\n+   |\n+80 |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:27 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               '_#2r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+           ]\n+   = note: number of external vids: 4\n+   = note: where '_#2r: '_#3r\n+\n error: free region `ReEarlyBound(1, 'b)` does not outlive free region `ReEarlyBound(0, 'a)`\n   --> $DIR/projection-one-region-trait-bound-closure.rs:80:20\n    |\n@@ -165,6 +134,22 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:91:29\n+   |\n+91 |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:31 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               '_#2r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+           ]\n+   = note: number of external vids: 4\n+   = note: where '_#2r: '_#3r\n+\n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:86:1\n    |\n@@ -183,6 +168,21 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+   --> $DIR/projection-one-region-trait-bound-closure.rs:103:29\n+    |\n+103 |     with_signature(cell, t, |cell, t| require(cell, t));\n+    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: defining type: DefId(0/1:34 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n+                '_#1r,\n+                T,\n+                i32,\n+                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+            ]\n+    = note: number of external vids: 3\n+    = note: where '_#1r: '_#2r\n+\n note: No external requirements\n    --> $DIR/projection-one-region-trait-bound-closure.rs:95:1\n     |"}, {"sha": "98b033b6a06725b134c06eed63d3417d3340c4d3", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=182f8820c4b53f811c140478a0105b2a7b77c5c3", "patch": "@@ -12,76 +12,35 @@ note: No external requirements\n            ]\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-static-closure.rs:56:29\n-   |\n-56 |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: defining type: DefId(0/1:23 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-               i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n-           ]\n-\n-note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-static-closure.rs:75:29\n+  --> $DIR/projection-one-region-trait-bound-static-closure.rs:43:1\n    |\n-75 |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+43 | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n+44 | | where\n+45 | |     T: Anything<'b>,\n+46 | | {\n+47 | |     with_signature(cell, t, |cell, t| require(cell, t));\n+48 | | }\n+   | |_^\n    |\n-   = note: defining type: DefId(0/1:27 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0/0:8 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]) with substs [\n                '_#1r,\n-               '_#2r,\n-               T,\n-               i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+               T\n            ]\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-static-closure.rs:84:29\n+  --> $DIR/projection-one-region-trait-bound-static-closure.rs:56:29\n    |\n-84 |     with_signature(cell, t, |cell, t| require(cell, t));\n+56 |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:31 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0/1:23 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n \n-note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-static-closure.rs:96:29\n-   |\n-96 |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: defining type: DefId(0/1:34 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               T,\n-               i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n-           ]\n-\n-note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-static-closure.rs:43:1\n-   |\n-43 | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n-44 | | where\n-45 | |     T: Anything<'b>,\n-46 | | {\n-47 | |     with_signature(cell, t, |cell, t| require(cell, t));\n-48 | | }\n-   | |_^\n-   |\n-   = note: defining type: DefId(0/0:8 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]) with substs [\n-               '_#1r,\n-               T\n-           ]\n-\n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:51:1\n    |\n@@ -100,6 +59,20 @@ note: No external requirements\n                T\n            ]\n \n+note: No external requirements\n+  --> $DIR/projection-one-region-trait-bound-static-closure.rs:75:29\n+   |\n+75 |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:27 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               '_#2r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+           ]\n+\n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:60:1\n    |\n@@ -118,6 +91,20 @@ note: No external requirements\n                T\n            ]\n \n+note: No external requirements\n+  --> $DIR/projection-one-region-trait-bound-static-closure.rs:84:29\n+   |\n+84 |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:31 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               '_#2r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+           ]\n+\n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:79:1\n    |\n@@ -136,6 +123,19 @@ note: No external requirements\n                T\n            ]\n \n+note: No external requirements\n+  --> $DIR/projection-one-region-trait-bound-static-closure.rs:96:29\n+   |\n+96 |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:34 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+           ]\n+\n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:88:1\n    |"}, {"sha": "78775ce94adddfd6dd806f794bc7ed927a91a9c7", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 114, "deletions": 114, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=182f8820c4b53f811c140478a0105b2a7b77c5c3", "patch": "@@ -38,120 +38,6 @@ note: External requirements\n    = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n-note: External requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:60:29\n-   |\n-60 |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: defining type: DefId(0/1:27 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               '_#3r,\n-               T,\n-               i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n-           ]\n-   = note: number of external vids: 5\n-   = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n-\n-note: External requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:81:29\n-   |\n-81 |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: defining type: DefId(0/1:32 ~ projection_two_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               '_#3r,\n-               T,\n-               i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n-           ]\n-   = note: number of external vids: 5\n-   = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n-\n-note: External requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:92:29\n-   |\n-92 |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: defining type: DefId(0/1:37 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive1[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               '_#3r,\n-               T,\n-               i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n-           ]\n-   = note: number of external vids: 5\n-   = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n-\n-note: External requirements\n-   --> $DIR/projection-two-region-trait-bound-closure.rs:101:29\n-    |\n-101 |     with_signature(cell, t, |cell, t| require(cell, t));\n-    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: defining type: DefId(0/1:42 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]::{{closure}}[0]) with closure substs [\n-                '_#1r,\n-                '_#2r,\n-                '_#3r,\n-                T,\n-                i32,\n-                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n-            ]\n-    = note: number of external vids: 5\n-    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n-\n-note: External requirements\n-   --> $DIR/projection-two-region-trait-bound-closure.rs:109:29\n-    |\n-109 |     with_signature(cell, t, |cell, t| require(cell, t));\n-    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: defining type: DefId(0/1:46 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]::{{closure}}[0]) with closure substs [\n-                '_#1r,\n-                T,\n-                i32,\n-                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n-            ]\n-    = note: number of external vids: 3\n-    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n-\n-note: External requirements\n-   --> $DIR/projection-two-region-trait-bound-closure.rs:120:29\n-    |\n-120 |     with_signature(cell, t, |cell, t| require(cell, t));\n-    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: defining type: DefId(0/1:50 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]::{{closure}}[0]) with closure substs [\n-                '_#1r,\n-                '_#2r,\n-                T,\n-                i32,\n-                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n-            ]\n-    = note: number of external vids: 4\n-    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n-\n-note: External requirements\n-   --> $DIR/projection-two-region-trait-bound-closure.rs:132:29\n-    |\n-132 |     with_signature(cell, t, |cell, t| require(cell, t));\n-    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: defining type: DefId(0/1:53 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n-                '_#1r,\n-                T,\n-                i32,\n-                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n-            ]\n-    = note: number of external vids: 3\n-    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n-\n error[E0309]: the associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:49:29\n    |\n@@ -178,6 +64,23 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:60:29\n+   |\n+60 |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:27 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               '_#2r,\n+               '_#3r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n+           ]\n+   = note: number of external vids: 5\n+   = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n+\n error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:60:29\n    |\n@@ -205,6 +108,23 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:81:29\n+   |\n+81 |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:32 ~ projection_two_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               '_#2r,\n+               '_#3r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n+           ]\n+   = note: number of external vids: 5\n+   = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n+\n error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:81:29\n    |\n@@ -232,6 +152,23 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:92:29\n+   |\n+92 |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:37 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive1[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               '_#2r,\n+               '_#3r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n+           ]\n+   = note: number of external vids: 5\n+   = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n+\n note: No external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:87:1\n    |\n@@ -251,6 +188,23 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+   --> $DIR/projection-two-region-trait-bound-closure.rs:101:29\n+    |\n+101 |     with_signature(cell, t, |cell, t| require(cell, t));\n+    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: defining type: DefId(0/1:42 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]::{{closure}}[0]) with closure substs [\n+                '_#1r,\n+                '_#2r,\n+                '_#3r,\n+                T,\n+                i32,\n+                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n+            ]\n+    = note: number of external vids: 5\n+    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n+\n note: No external requirements\n    --> $DIR/projection-two-region-trait-bound-closure.rs:96:1\n     |\n@@ -270,6 +224,21 @@ note: No external requirements\n                 T\n             ]\n \n+note: External requirements\n+   --> $DIR/projection-two-region-trait-bound-closure.rs:109:29\n+    |\n+109 |     with_signature(cell, t, |cell, t| require(cell, t));\n+    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: defining type: DefId(0/1:46 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]::{{closure}}[0]) with closure substs [\n+                '_#1r,\n+                T,\n+                i32,\n+                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+            ]\n+    = note: number of external vids: 3\n+    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n+\n error: free region `ReEarlyBound(0, 'b)` does not outlive free region `ReFree(DefId(0/0:13 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]), BrNamed(crate0:DefIndex(1:43), 'a))`\n    --> $DIR/projection-two-region-trait-bound-closure.rs:109:20\n     |\n@@ -293,6 +262,22 @@ note: No external requirements\n                 T\n             ]\n \n+note: External requirements\n+   --> $DIR/projection-two-region-trait-bound-closure.rs:120:29\n+    |\n+120 |     with_signature(cell, t, |cell, t| require(cell, t));\n+    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: defining type: DefId(0/1:50 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]::{{closure}}[0]) with closure substs [\n+                '_#1r,\n+                '_#2r,\n+                T,\n+                i32,\n+                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+            ]\n+    = note: number of external vids: 4\n+    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n+\n note: No external requirements\n    --> $DIR/projection-two-region-trait-bound-closure.rs:115:1\n     |\n@@ -311,6 +296,21 @@ note: No external requirements\n                 T\n             ]\n \n+note: External requirements\n+   --> $DIR/projection-two-region-trait-bound-closure.rs:132:29\n+    |\n+132 |     with_signature(cell, t, |cell, t| require(cell, t));\n+    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: defining type: DefId(0/1:53 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n+                '_#1r,\n+                T,\n+                i32,\n+                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+            ]\n+    = note: number of external vids: 3\n+    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n+\n note: No external requirements\n    --> $DIR/projection-two-region-trait-bound-closure.rs:124:1\n     |"}, {"sha": "f68a76c3d0de5790d2411abbbf6980efd52c0ccf", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=182f8820c4b53f811c140478a0105b2a7b77c5c3", "patch": "@@ -30,20 +30,6 @@ note: External requirements\n    = note: number of external vids: 2\n    = note: where T: '_#1r\n \n-note: External requirements\n-  --> $DIR/ty-param-closure-approximate-lower-bound.rs:43:24\n-   |\n-43 |     twice(cell, value, |a, b| invoke(a, b));\n-   |                        ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: defining type: DefId(0/1:17 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::{{closure}}[0]) with closure substs [\n-               T,\n-               i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) T))\n-           ]\n-   = note: number of external vids: 2\n-   = note: where T: '_#1r\n-\n note: No external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:33:1\n    |\n@@ -60,6 +46,20 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:43:24\n+   |\n+43 |     twice(cell, value, |a, b| invoke(a, b));\n+   |                        ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:17 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::{{closure}}[0]) with closure substs [\n+               T,\n+               i16,\n+               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) T))\n+           ]\n+   = note: number of external vids: 2\n+   = note: where T: '_#1r\n+\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:43:24\n    |"}, {"sha": "ed4d4b1e68f7f81070f9314a0b8155d13300df55", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182f8820c4b53f811c140478a0105b2a7b77c5c3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=182f8820c4b53f811c140478a0105b2a7b77c5c3", "patch": "@@ -31,69 +31,6 @@ note: External requirements\n    = note: number of external vids: 2\n    = note: where T: '_#1r\n \n-note: External requirements\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:55:26\n-   |\n-55 |       with_signature(a, b, |x, y| {\n-   |  __________________________^\n-56 | |         // Key point of this test:\n-57 | |         //\n-58 | |         // The *closure* is being type-checked with all of its free\n-...  |\n-67 | |         require(&x, &y)\n-68 | |     })\n-   | |_____^\n-   |\n-   = note: defining type: DefId(0/1:19 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               T,\n-               i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n-           ]\n-   = note: number of external vids: 3\n-   = note: where T: '_#2r\n-\n-note: External requirements\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:76:26\n-   |\n-76 |       with_signature(a, b, |x, y| {\n-   |  __________________________^\n-77 | |         //~^ ERROR the parameter type `T` may not live long enough\n-78 | |         // See `correct_region`\n-79 | |         require(&x, &y)\n-80 | |         //~^ WARNING not reporting region error due to -Znll\n-81 | |     })\n-   | |_____^\n-   |\n-   = note: defining type: DefId(0/1:23 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               T,\n-               i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n-           ]\n-   = note: number of external vids: 3\n-   = note: where T: '_#2r\n-\n-note: External requirements\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:90:26\n-   |\n-90 |       with_signature(a, b, |x, y| {\n-   |  __________________________^\n-91 | |         // See `correct_region`\n-92 | |         require(&x, &y)\n-93 | |     })\n-   | |_____^\n-   |\n-   = note: defining type: DefId(0/1:27 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-               i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n-           ]\n-   = note: number of external vids: 4\n-   = note: where T: '_#3r\n-\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:38:26\n    |\n@@ -125,6 +62,28 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:55:26\n+   |\n+55 |       with_signature(a, b, |x, y| {\n+   |  __________________________^\n+56 | |         // Key point of this test:\n+57 | |         //\n+58 | |         // The *closure* is being type-checked with all of its free\n+...  |\n+67 | |         require(&x, &y)\n+68 | |     })\n+   | |_____^\n+   |\n+   = note: defining type: DefId(0/1:19 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+           ]\n+   = note: number of external vids: 3\n+   = note: where T: '_#2r\n+\n note: No external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:51:1\n    |\n@@ -142,6 +101,27 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:76:26\n+   |\n+76 |       with_signature(a, b, |x, y| {\n+   |  __________________________^\n+77 | |         //~^ ERROR the parameter type `T` may not live long enough\n+78 | |         // See `correct_region`\n+79 | |         require(&x, &y)\n+80 | |         //~^ WARNING not reporting region error due to -Znll\n+81 | |     })\n+   | |_____^\n+   |\n+   = note: defining type: DefId(0/1:23 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+           ]\n+   = note: number of external vids: 3\n+   = note: where T: '_#2r\n+\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:76:26\n    |\n@@ -173,6 +153,26 @@ note: No external requirements\n                T\n            ]\n \n+note: External requirements\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:90:26\n+   |\n+90 |       with_signature(a, b, |x, y| {\n+   |  __________________________^\n+91 | |         // See `correct_region`\n+92 | |         require(&x, &y)\n+93 | |     })\n+   | |_____^\n+   |\n+   = note: defining type: DefId(0/1:27 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               '_#2r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+           ]\n+   = note: number of external vids: 4\n+   = note: where T: '_#3r\n+\n note: No external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:85:1\n    |"}]}