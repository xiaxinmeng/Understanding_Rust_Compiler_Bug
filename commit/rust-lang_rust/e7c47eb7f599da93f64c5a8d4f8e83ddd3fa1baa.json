{"sha": "e7c47eb7f599da93f64c5a8d4f8e83ddd3fa1baa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YzQ3ZWI3ZjU5OWRhOTNmNjRjNWE4ZDRmOGU4M2RkZDNmYTFiYWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T08:19:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T08:19:37Z"}, "message": "Streamline", "tree": {"sha": "d52c87b544e9946d6e2d0ca307cf34d73dc1f635", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d52c87b544e9946d6e2d0ca307cf34d73dc1f635"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7c47eb7f599da93f64c5a8d4f8e83ddd3fa1baa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c47eb7f599da93f64c5a8d4f8e83ddd3fa1baa", "html_url": "https://github.com/rust-lang/rust/commit/e7c47eb7f599da93f64c5a8d4f8e83ddd3fa1baa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7c47eb7f599da93f64c5a8d4f8e83ddd3fa1baa/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a26752c665111499b01c34b90aadd94afcd8b28", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a26752c665111499b01c34b90aadd94afcd8b28", "html_url": "https://github.com/rust-lang/rust/commit/3a26752c665111499b01c34b90aadd94afcd8b28"}], "stats": {"total": 86, "additions": 36, "deletions": 50}, "files": [{"sha": "70d2a2dd13c0c8442179621531c2908a602a5d46", "filename": "crates/ra_ide/src/display.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e7c47eb7f599da93f64c5a8d4f8e83ddd3fa1baa/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c47eb7f599da93f64c5a8d4f8e83ddd3fa1baa/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay.rs?ref=e7c47eb7f599da93f64c5a8d4f8e83ddd3fa1baa", "patch": "@@ -6,13 +6,10 @@ mod navigation_target;\n mod structure;\n mod short_label;\n \n-use std::fmt::Display;\n-\n use ra_syntax::{\n     ast::{self, AstNode, AttrsOwner, NameOwner, TypeParamsOwner},\n     SyntaxKind::{ATTR, COMMENT},\n };\n-use stdx::format_to;\n \n pub use function_signature::FunctionSignature;\n pub use navigation_target::NavigationTarget;\n@@ -69,29 +66,3 @@ pub(crate) fn macro_label(node: &ast::MacroCall) -> String {\n     let vis = if node.has_atom_attr(\"macro_export\") { \"#[macro_export]\\n\" } else { \"\" };\n     format!(\"{}macro_rules! {}\", vis, name)\n }\n-\n-pub(crate) fn rust_code_markup(code: &impl Display) -> String {\n-    rust_code_markup_with_doc(code, None, None)\n-}\n-\n-pub(crate) fn rust_code_markup_with_doc(\n-    code: &impl Display,\n-    doc: Option<&str>,\n-    mod_path: Option<&str>,\n-) -> String {\n-    let mut buf = String::new();\n-\n-    if let Some(mod_path) = mod_path {\n-        if !mod_path.is_empty() {\n-            format_to!(buf, \"```rust\\n{}\\n```\\n\\n\", mod_path);\n-        }\n-    }\n-    format_to!(buf, \"```rust\\n{}\\n```\", code);\n-\n-    if let Some(doc) = doc {\n-        format_to!(buf, \"\\n___\");\n-        format_to!(buf, \"\\n\\n{}\", doc);\n-    }\n-\n-    buf\n-}"}, {"sha": "39519df406dc23ebf912e50db74c3834dc1caf48", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e7c47eb7f599da93f64c5a8d4f8e83ddd3fa1baa/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c47eb7f599da93f64c5a8d4f8e83ddd3fa1baa/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=e7c47eb7f599da93f64c5a8d4f8e83ddd3fa1baa", "patch": "@@ -9,16 +9,15 @@ use ra_ide_db::{\n     RootDatabase,\n };\n use ra_syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset, T};\n+use stdx::format_to;\n+use test_utils::mark;\n \n use crate::{\n-    display::{\n-        macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel, ToNav, TryToNav,\n-    },\n+    display::{macro_label, ShortLabel, ToNav, TryToNav},\n     markup::Markup,\n     runnables::runnable,\n     FileId, FilePosition, NavigationTarget, RangeInfo, Runnable,\n };\n-use test_utils::mark;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct HoverConfig {\n@@ -92,8 +91,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         }\n     };\n     if let Some(definition) = definition {\n-        if let Some(text) = hover_for_definition(db, definition) {\n-            res.markup = text.into();\n+        if let Some(markup) = hover_for_definition(db, definition) {\n+            res.markup = markup;\n             if let Some(action) = show_implementations_action(db, definition) {\n                 res.actions.push(action);\n             }\n@@ -126,7 +125,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         }\n     };\n \n-    res.markup = rust_code_markup(&ty.display(db)).into();\n+    res.markup = Markup::fenced_block(&ty.display(db));\n     let range = sema.original_range(&node).range;\n     Some(RangeInfo::new(range, res))\n }\n@@ -223,15 +222,28 @@ fn goto_type_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n     }\n }\n \n-fn hover_text(\n+fn hover_markup(\n     docs: Option<String>,\n     desc: Option<String>,\n     mod_path: Option<String>,\n-) -> Option<String> {\n-    if let Some(desc) = desc {\n-        Some(rust_code_markup_with_doc(&desc, docs.as_deref(), mod_path.as_deref()))\n-    } else {\n-        docs\n+) -> Option<Markup> {\n+    match desc {\n+        Some(desc) => {\n+            let mut buf = String::new();\n+\n+            if let Some(mod_path) = mod_path {\n+                if !mod_path.is_empty() {\n+                    format_to!(buf, \"```rust\\n{}\\n```\\n\\n\", mod_path);\n+                }\n+            }\n+            format_to!(buf, \"```rust\\n{}\\n```\", desc);\n+\n+            if let Some(doc) = docs {\n+                format_to!(buf, \"\\n___\\n\\n{}\", doc);\n+            }\n+            Some(buf.into())\n+        }\n+        None => docs.map(Markup::from),\n     }\n }\n \n@@ -268,20 +280,20 @@ fn definition_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n     def.module(db).map(|module| render_path(db, module, definition_owner_name(db, def)))\n }\n \n-fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<String> {\n+fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n     let mod_path = definition_mod_path(db, &def);\n     return match def {\n         Definition::Macro(it) => {\n             let src = it.source(db);\n             let docs = Documentation::from_ast(&src.value).map(Into::into);\n-            hover_text(docs, Some(macro_label(&src.value)), mod_path)\n+            hover_markup(docs, Some(macro_label(&src.value)), mod_path)\n         }\n         Definition::Field(it) => {\n             let src = it.source(db);\n             match src.value {\n                 FieldSource::Named(it) => {\n                     let docs = Documentation::from_ast(&it).map(Into::into);\n-                    hover_text(docs, it.short_label(), mod_path)\n+                    hover_markup(docs, it.short_label(), mod_path)\n                 }\n                 _ => None,\n             }\n@@ -290,7 +302,7 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<String> {\n             ModuleDef::Module(it) => match it.definition_source(db).value {\n                 ModuleSource::Module(it) => {\n                     let docs = Documentation::from_ast(&it).map(Into::into);\n-                    hover_text(docs, it.short_label(), mod_path)\n+                    hover_markup(docs, it.short_label(), mod_path)\n                 }\n                 _ => None,\n             },\n@@ -303,23 +315,23 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<String> {\n             ModuleDef::Static(it) => from_def_source(db, it, mod_path),\n             ModuleDef::Trait(it) => from_def_source(db, it, mod_path),\n             ModuleDef::TypeAlias(it) => from_def_source(db, it, mod_path),\n-            ModuleDef::BuiltinType(it) => Some(it.to_string()),\n+            ModuleDef::BuiltinType(it) => return Some(it.to_string().into()),\n         },\n-        Definition::Local(it) => Some(rust_code_markup(&it.ty(db).display(db))),\n+        Definition::Local(it) => return Some(Markup::fenced_block(&it.ty(db).display(db))),\n         Definition::TypeParam(_) | Definition::SelfType(_) => {\n             // FIXME: Hover for generic param\n             None\n         }\n     };\n \n-    fn from_def_source<A, D>(db: &RootDatabase, def: D, mod_path: Option<String>) -> Option<String>\n+    fn from_def_source<A, D>(db: &RootDatabase, def: D, mod_path: Option<String>) -> Option<Markup>\n     where\n         D: HasSource<Ast = A>,\n         A: ast::DocCommentsOwner + ast::NameOwner + ShortLabel + ast::AttrsOwner,\n     {\n         let src = def.source(db);\n         let docs = Documentation::from_ast(&src.value).map(Into::into);\n-        hover_text(docs, src.value.short_label(), mod_path)\n+        hover_markup(docs, src.value.short_label(), mod_path)\n     }\n }\n "}, {"sha": "60c193c40aba27b81111fcab406a69584de34f6d", "filename": "crates/ra_ide/src/markup.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7c47eb7f599da93f64c5a8d4f8e83ddd3fa1baa/crates%2Fra_ide%2Fsrc%2Fmarkup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c47eb7f599da93f64c5a8d4f8e83ddd3fa1baa/crates%2Fra_ide%2Fsrc%2Fmarkup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmarkup.rs?ref=e7c47eb7f599da93f64c5a8d4f8e83ddd3fa1baa", "patch": "@@ -32,4 +32,7 @@ impl Markup {\n     pub fn as_str(&self) -> &str {\n         self.text.as_str()\n     }\n+    pub fn fenced_block(contents: &impl fmt::Display) -> Markup {\n+        format!(\"```rust\\n{}\\n```\", contents).into()\n+    }\n }"}]}