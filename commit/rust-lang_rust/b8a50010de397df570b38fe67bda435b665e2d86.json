{"sha": "b8a50010de397df570b38fe67bda435b665e2d86", "node_id": "C_kwDOAAsO6NoAKGI4YTUwMDEwZGUzOTdkZjU3MGIzOGZlNjdiZGE0MzViNjY1ZTJkODY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-10T21:47:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-10T21:47:13Z"}, "message": "Auto merge of #112256 - jyn514:faster-mingw-check, r=Mark-Simulacrum\n\nDon't compile rustc to self-test compiletest\n\nThis was changed from stage 0 to 1 in https://github.com/rust-lang/rust/pull/108905, but I'm not sure why. Change it to `top_stage` instead to allow people to choose the stage.\n\nThis should save quite a bit of time in the `mingw-check` builder, which explicitly runs `x test --stage 0 compiletest`.\n\nNote that this also fixes a latent bug that depended on running `x build compiler` before `x doc compiler`, as well as a couple cleanups related to symlinks (which made the latent bug easier to find).\n\ncc `@pietroalbini`", "tree": {"sha": "61c23ba2fcf44e9392f03c768cc849b622c79da5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61c23ba2fcf44e9392f03c768cc849b622c79da5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8a50010de397df570b38fe67bda435b665e2d86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a50010de397df570b38fe67bda435b665e2d86", "html_url": "https://github.com/rust-lang/rust/commit/b8a50010de397df570b38fe67bda435b665e2d86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8a50010de397df570b38fe67bda435b665e2d86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7820972f866ca2cea281ccc39201c0cd27087110", "url": "https://api.github.com/repos/rust-lang/rust/commits/7820972f866ca2cea281ccc39201c0cd27087110", "html_url": "https://github.com/rust-lang/rust/commit/7820972f866ca2cea281ccc39201c0cd27087110"}, {"sha": "d613134623d1659ece542a02b585b70cbf36c2b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d613134623d1659ece542a02b585b70cbf36c2b5", "html_url": "https://github.com/rust-lang/rust/commit/d613134623d1659ece542a02b585b70cbf36c2b5"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "8592895423e8f84759606ee012e7ee2fedfa8136", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b8a50010de397df570b38fe67bda435b665e2d86/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a50010de397df570b38fe67bda435b665e2d86/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=b8a50010de397df570b38fe67bda435b665e2d86", "patch": "@@ -8,7 +8,6 @@\n //! `rustdoc`.\n \n use std::fs;\n-use std::io;\n use std::path::{Path, PathBuf};\n \n use crate::builder::crate_description;\n@@ -694,11 +693,12 @@ impl Step for Rustc {\n         // rustc. rustdoc needs to be able to see everything, for example when\n         // merging the search index, or generating local (relative) links.\n         let out_dir = builder.stage_out(compiler, Mode::Rustc).join(target.triple).join(\"doc\");\n-        t!(symlink_dir_force(&builder.config, &out, &out_dir));\n+        t!(fs::create_dir_all(out_dir.parent().unwrap()));\n+        symlink_dir_force(&builder.config, &out, &out_dir);\n         // Cargo puts proc macros in `target/doc` even if you pass `--target`\n         // explicitly (https://github.com/rust-lang/cargo/issues/7677).\n         let proc_macro_out_dir = builder.stage_out(compiler, Mode::Rustc).join(\"doc\");\n-        t!(symlink_dir_force(&builder.config, &out, &proc_macro_out_dir));\n+        symlink_dir_force(&builder.config, &out, &proc_macro_out_dir);\n \n         // Build cargo command.\n         let mut cargo = builder.cargo(compiler, Mode::Rustc, SourceType::InTree, target, \"doc\");\n@@ -821,7 +821,7 @@ macro_rules! tool_doc {\n                 ];\n                 for out_dir in out_dirs {\n                     t!(fs::create_dir_all(&out_dir));\n-                    t!(symlink_dir_force(&builder.config, &out, &out_dir));\n+                    symlink_dir_force(&builder.config, &out, &out_dir);\n                 }\n \n                 // Build cargo command.\n@@ -964,21 +964,24 @@ impl Step for UnstableBookGen {\n     }\n }\n \n-fn symlink_dir_force(config: &Config, src: &Path, dst: &Path) -> io::Result<()> {\n+fn symlink_dir_force(config: &Config, original: &Path, link: &Path) {\n     if config.dry_run() {\n-        return Ok(());\n+        return;\n     }\n-    if let Ok(m) = fs::symlink_metadata(dst) {\n+    if let Ok(m) = fs::symlink_metadata(link) {\n         if m.file_type().is_dir() {\n-            fs::remove_dir_all(dst)?;\n+            t!(fs::remove_dir_all(link));\n         } else {\n             // handle directory junctions on windows by falling back to\n             // `remove_dir`.\n-            fs::remove_file(dst).or_else(|_| fs::remove_dir(dst))?;\n+            t!(fs::remove_file(link).or_else(|_| fs::remove_dir(link)));\n         }\n     }\n \n-    symlink_dir(config, src, dst)\n+    t!(\n+        symlink_dir(config, original, link),\n+        format!(\"failed to create link from {} -> {}\", link.display(), original.display())\n+    );\n }\n \n #[derive(Ord, PartialOrd, Debug, Copy, Clone, Hash, PartialEq, Eq)]"}, {"sha": "f31ba946099f594c5f8a2c233590e8fecdb18286", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8a50010de397df570b38fe67bda435b665e2d86/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a50010de397df570b38fe67bda435b665e2d86/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=b8a50010de397df570b38fe67bda435b665e2d86", "patch": "@@ -700,7 +700,7 @@ impl Step for CompiletestTest {\n     /// Runs `cargo test` for compiletest.\n     fn run(self, builder: &Builder<'_>) {\n         let host = self.host;\n-        let compiler = builder.compiler(1, host);\n+        let compiler = builder.compiler(builder.top_stage, host);\n \n         // We need `ToolStd` for the locally-built sysroot because\n         // compiletest uses unstable features of the `test` crate."}, {"sha": "7e29f671f028b96d60b63413f6c18fd8f2eed83a", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8a50010de397df570b38fe67bda435b665e2d86/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a50010de397df570b38fe67bda435b665e2d86/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=b8a50010de397df570b38fe67bda435b665e2d86", "patch": "@@ -134,17 +134,17 @@ pub(crate) fn program_out_of_date(stamp: &Path, key: &str) -> bool {\n \n /// Symlinks two directories, using junctions on Windows and normal symlinks on\n /// Unix.\n-pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n+pub fn symlink_dir(config: &Config, original: &Path, link: &Path) -> io::Result<()> {\n     if config.dry_run() {\n         return Ok(());\n     }\n-    let _ = fs::remove_dir(dest);\n-    return symlink_dir_inner(src, dest);\n+    let _ = fs::remove_dir(link);\n+    return symlink_dir_inner(original, link);\n \n     #[cfg(not(windows))]\n-    fn symlink_dir_inner(src: &Path, dest: &Path) -> io::Result<()> {\n+    fn symlink_dir_inner(original: &Path, link: &Path) -> io::Result<()> {\n         use std::os::unix::fs;\n-        fs::symlink(src, dest)\n+        fs::symlink(original, link)\n     }\n \n     #[cfg(windows)]"}]}