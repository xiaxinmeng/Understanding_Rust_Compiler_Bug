{"sha": "13c924c049465f91dda8b7cee416d1fceaf4a596", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYzkyNGMwNDk0NjVmOTFkZGE4YjdjZWU0MTZkMWZjZWFmNGE1OTY=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-05-09T16:17:27Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-05-10T22:09:33Z"}, "message": "Remove `do { ... } while ...` from the language.", "tree": {"sha": "ac4a0d53537461f4c5be4af8109022bd9acd0630", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac4a0d53537461f4c5be4af8109022bd9acd0630"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13c924c049465f91dda8b7cee416d1fceaf4a596", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13c924c049465f91dda8b7cee416d1fceaf4a596", "html_url": "https://github.com/rust-lang/rust/commit/13c924c049465f91dda8b7cee416d1fceaf4a596", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13c924c049465f91dda8b7cee416d1fceaf4a596/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5af58e79269600c962f1de3bee57e804a36695a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5af58e79269600c962f1de3bee57e804a36695a8", "html_url": "https://github.com/rust-lang/rust/commit/5af58e79269600c962f1de3bee57e804a36695a8"}], "stats": {"total": 129, "additions": 11, "deletions": 118}, "files": [{"sha": "dd65b0142eabf045a3614f9599a3583275973045", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -74,9 +74,6 @@ pure fn safe_to_use_expr(e: ast::expr, tm: test_mode) -> bool {\n           ast::expr_alt(_, _, _) { false }\n           ast::expr_while(_, _) { false }\n \n-          // https://github.com/mozilla/rust/issues/955\n-          ast::expr_do_while(_, _) { false }\n-\n           // https://github.com/mozilla/rust/issues/929\n           ast::expr_cast(_, _) { false }\n           ast::expr_assert(_) { false }"}, {"sha": "fb97751fd51c28d5f0fb30007798963f3d714f15", "filename": "src/librustsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Flibrustsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Flibrustsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fast.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -305,7 +305,6 @@ enum expr_ {\n     expr_cast(@expr, @ty),\n     expr_if(@expr, blk, option<@expr>),\n     expr_while(@expr, blk),\n-    expr_do_while(blk, @expr),\n     /* Conditionless loop (can be exited with break, cont, ret, or fail)\n        Same semantics as while(true) { body }, but typestate knows that the\n        (implicit) condition is always true. */"}, {"sha": "7e5a315a1e1540474923ddac256d245a4efac153", "filename": "src/librustsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Flibrustsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Flibrustsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Ffold.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -444,9 +444,6 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n           expr_while(cond, body) {\n             expr_while(fld.fold_expr(cond), fld.fold_block(body))\n           }\n-          expr_do_while(blk, expr) {\n-            expr_do_while(fld.fold_block(blk), fld.fold_expr(expr))\n-          }\n           expr_loop(body) {\n               expr_loop(fld.fold_block(body))\n           }"}, {"sha": "70f89a38f4709d3beac7e76605240d881ddb27ac", "filename": "src/librustsyntax/parse/classify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Flibrustsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Flibrustsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fclassify.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -7,8 +7,8 @@ fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n     alt e.node {\n       ast::expr_if(_, _, _) | ast::expr_if_check(_, _, _)\n       | ast::expr_alt(_, _, _) | ast::expr_block(_)\n-      | ast::expr_do_while(_, _) | ast::expr_while(_, _)\n-      | ast::expr_loop(_) | ast::expr_call(_, _, true) {\n+      | ast::expr_while(_, _) | ast::expr_loop(_)\n+      | ast::expr_call(_, _, true) {\n         false\n       }\n       _ { true }"}, {"sha": "125dbb927f4a56b6596469fe839a1cecd570a229", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -727,8 +727,6 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n         ret pexpr(parse_for_expr(p));\n     } else if eat_keyword(p, \"while\") {\n         ret pexpr(parse_while_expr(p));\n-    } else if eat_keyword(p, \"do\") {\n-        ret pexpr(parse_do_while_expr(p));\n     } else if eat_keyword(p, \"loop\") {\n         ret pexpr(parse_loop_expr(p));\n     } else if eat_keyword(p, \"alt\") {\n@@ -1233,15 +1231,6 @@ fn parse_while_expr(p: parser) -> @expr {\n     ret mk_expr(p, lo, hi, expr_while(cond, body));\n }\n \n-fn parse_do_while_expr(p: parser) -> @expr {\n-    let lo = p.last_span.lo;\n-    let body = parse_block_no_value(p);\n-    expect_keyword(p, \"while\");\n-    let cond = parse_expr(p);\n-    let mut hi = cond.span.hi;\n-    ret mk_expr(p, lo, hi, expr_do_while(body, cond));\n-}\n-\n fn parse_loop_expr(p: parser) -> @expr {\n     let lo = p.last_span.lo;\n     let body = parse_block_no_value(p);"}, {"sha": "46745b7e28c57e43c033797ee4ef407ea3b7dbd3", "filename": "src/librustsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fprint%2Fpprust.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -975,14 +975,6 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         space(s.s);\n         print_block(s, blk);\n       }\n-      ast::expr_do_while(blk, expr) {\n-        head(s, \"do\");\n-        space(s.s);\n-        print_block(s, blk);\n-        space(s.s);\n-        word_space(s, \"while\");\n-        print_expr(s, expr);\n-      }\n       ast::expr_alt(expr, arms, mode) {\n         cbox(s, alt_indent_unit);\n         ibox(s, 4u);"}, {"sha": "c9c751900c8c85ec8bc50831f14991da6782e28b", "filename": "src/librustsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Flibrustsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Flibrustsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fvisit.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -376,7 +376,6 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n       }\n       expr_while(x, b) { v.visit_expr(x, e, v); v.visit_block(b, e, v); }\n       expr_loop(b) { v.visit_block(b, e, v); }\n-      expr_do_while(b, x) { v.visit_block(b, e, v); v.visit_expr(x, e, v); }\n       expr_alt(x, arms, _) {\n         v.visit_expr(x, e, v);\n         for arms.each {|a| v.visit_arm(a, e, v); }"}, {"sha": "f3b6cbf6efc845cb7a1d018497ac65eb915bdacd", "filename": "src/rustc/middle/alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Falias.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -122,7 +122,7 @@ fn visit_expr(cx: @ctx, ex: @ast::expr, sc: scope, v: vt<scope>) {\n         check_lval(cx, dest, sc, v);\n       }\n       ast::expr_if(c, then, els) { check_if(c, then, els, sc, v); }\n-      ast::expr_while(_, _) | ast::expr_do_while(_, _) {\n+      ast::expr_while(_, _) {\n         check_loop(*cx, sc) {|| visit::visit_expr(ex, sc, v); }\n       }\n       _ { handled = false; }"}, {"sha": "9e87cbc0bcdb6d9070e4a73b3996aa0d0a5ca6ed", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -761,9 +761,9 @@ impl categorize_methods for borrowck_ctxt {\n           ast::expr_vstore(*) | ast::expr_vec(*) | ast::expr_tup(*) |\n           ast::expr_if_check(*) | ast::expr_if(*) | ast::expr_log(*) |\n           ast::expr_new(*) | ast::expr_binary(*) | ast::expr_while(*) |\n-          ast::expr_do_while(*) | ast::expr_block(*) | ast::expr_loop(*) |\n-          ast::expr_alt(*) | ast::expr_lit(*) | ast::expr_break |\n-          ast::expr_mac(*) | ast::expr_cont | ast::expr_rec(*) {\n+          ast::expr_block(*) | ast::expr_loop(*) | ast::expr_alt(*) |\n+          ast::expr_lit(*) | ast::expr_break | ast::expr_mac(*) |\n+          ast::expr_cont | ast::expr_rec(*) {\n             @{id:expr.id, span:expr.span,\n               cat:cat_rvalue(rv_misc), lp:none,\n               mutbl:m_imm, ty:expr_ty}"}, {"sha": "b815afd36465cc0f2abdec76eaba96f463dab678", "filename": "src/rustc/middle/check_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_loop.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -11,7 +11,7 @@ fn check_crate(tcx: ty::ctxt, crate: @crate) {\n         },\n         visit_expr: {|e: @expr, cx: ctx, v: visit::vt<ctx>|\n             alt e.node {\n-              expr_while(e, b) | expr_do_while(b, e) {\n+              expr_while(e, b) {\n                 v.visit_expr(e, cx, v);\n                 v.visit_block(b, {in_loop: true with cx}, v);\n               }"}, {"sha": "4454c76d65685341b41d89f037502fe8ef9e9a2e", "filename": "src/rustc/middle/last_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flast_use.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -103,7 +103,7 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n         leave_fn(cx);\n       }\n       expr_break { add_block_exit(cx, lp); }\n-      expr_while(_, _) | expr_do_while(_, _) | expr_loop(_) {\n+      expr_while(_, _) | expr_loop(_) {\n         visit_block(lp, cx) {|| visit::visit_expr(ex, cx, v);}\n       }\n       expr_alt(input, arms, _) {"}, {"sha": "1df25c9e93ebbfc56de749f82beb575b0c1b121a", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -1761,23 +1761,6 @@ fn trans_while(cx: block, cond: @ast::expr, body: ast::blk)\n     ret next_cx;\n }\n \n-fn trans_do_while(cx: block, body: ast::blk, cond: @ast::expr) ->\n-    block {\n-    let _icx = cx.insn_ctxt(\"trans_do_while\");\n-    let next_cx = sub_block(cx, \"next\");\n-    let body_cx =\n-        loop_scope_block(cx, cont_self, next_cx,\n-                                  \"do-while loop body\", body.span);\n-    let body_end = trans_block(body_cx, body, ignore);\n-    let cond_cx = scope_block(body_cx, \"do-while cond\");\n-    cleanup_and_Br(body_end, body_cx, cond_cx.llbb);\n-    let cond_res = trans_temp_expr(cond_cx, cond);\n-    let cond_bcx = trans_block_cleanups(cond_res.bcx, cond_cx);\n-    CondBr(cond_bcx, cond_res.val, body_cx.llbb, next_cx.llbb);\n-    Br(cx, body_cx.llbb);\n-    ret next_cx;\n-}\n-\n fn trans_loop(cx:block, body: ast::blk) -> block {\n     let _icx = cx.insn_ctxt(\"trans_loop\");\n     let next_cx = sub_block(cx, \"next\");\n@@ -3285,10 +3268,6 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n         assert dest == ignore;\n         ret trans_loop(bcx, body);\n       }\n-      ast::expr_do_while(body, cond) {\n-        assert dest == ignore;\n-        ret trans_do_while(bcx, body, cond);\n-      }\n       ast::expr_assign(dst, src) {\n         assert dest == ignore;\n         let src_r = trans_temp_lval(bcx, src);"}, {"sha": "4b57f33af7de867c1b34d302402025cb253c2d5e", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -212,10 +212,9 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n             }\n         }\n       }\n-      expr_do_while(_, _) | expr_alt(_, _, _) |\n-      expr_block(_) | expr_if(_, _, _) | expr_while(_, _) |\n-      expr_fail(_) | expr_break | expr_cont | expr_unary(_, _) |\n-      expr_lit(_) | expr_assert(_) | expr_check(_, _) |\n+      expr_alt(_, _, _) | expr_block(_) | expr_if(_, _, _) |\n+      expr_while(_, _) | expr_fail(_) | expr_break | expr_cont |\n+      expr_unary(_, _) | expr_lit(_) | expr_assert(_) | expr_check(_, _) |\n       expr_if_check(_, _, _) | expr_mac(_) | expr_addr_of(_, _) |\n       expr_ret(_) | expr_loop(_) | expr_bind(_, _) | expr_loop_body(_) {}\n     }"}, {"sha": "559e8587cef2eb21b6e1d19fe222985c298d409b", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -425,25 +425,6 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n                          intersect_states(expr_postcond(fcx.ccx, test),\n                                           block_postcond(fcx.ccx, body)));\n       }\n-      expr_do_while(body, test) {\n-        find_pre_post_block(fcx, body);\n-        find_pre_post_expr(fcx, test);\n-        let mut loop_postcond =\n-            seq_postconds(fcx,\n-                          [block_postcond(fcx.ccx, body),\n-                           expr_postcond(fcx.ccx, test)]);\n-        /* conservative approximation: if the body\n-           could break or cont, the test may never be executed */\n-\n-        if has_nonlocal_exits(body) {\n-            loop_postcond = empty_poststate(num_local_vars);\n-        }\n-        set_pre_and_post(fcx.ccx, e.id,\n-                         seq_preconds(fcx,\n-                                      [block_pp(fcx.ccx, body),\n-                                       expr_pp(fcx.ccx, test)]),\n-                         loop_postcond);\n-      }\n       expr_loop(body) {\n         find_pre_post_block(fcx, body);\n         /* Infinite loop: if control passes it, everything is true. */"}, {"sha": "8fbdec3d9b5321927f71996f661ea602d5788d0b", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -540,40 +540,6 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n                                       intersect_states(e_post, b_post));\n         }\n       }\n-      expr_do_while(body, test) {\n-        let loop_pres = intersect_states(expr_poststate(fcx.ccx, test), pres);\n-\n-        let mut changed = set_prestate_ann(fcx.ccx, e.id, loop_pres);\n-        changed |= find_pre_post_state_block(fcx, loop_pres, body);\n-        /* conservative approximination: if the body of the loop\n-           could break or cont, we revert to the prestate\n-           (TODO: could treat cont differently from break, since\n-           if there's a cont, the test will execute) */\n-\n-        changed |=\n-            find_pre_post_state_expr(fcx, block_poststate(fcx.ccx, body),\n-                                     test);\n-\n-        let breaks = has_nonlocal_exits(body);\n-        if breaks {\n-            // this should probably be true_poststate and not pres,\n-            // b/c the body could invalidate stuff\n-            // FIXME [Break-unsound]\n-            // This is unsound as it is -- consider\n-            // while (true) {\n-            //    x <- y;\n-            //    break;\n-            // }\n-            // The poststate wouldn't take into account that\n-            // y gets deinitialized\n-            changed |= set_poststate_ann(fcx.ccx, e.id, pres);\n-        } else {\n-            changed |=\n-                set_poststate_ann(fcx.ccx, e.id,\n-                                  expr_poststate(fcx.ccx, test));\n-        }\n-        ret changed;\n-      }\n       expr_loop(body) {\n         let loop_pres =\n             intersect_states(block_poststate(fcx.ccx, body), pres);"}, {"sha": "472a4f43e2c1bdd6879d1ccdeb2424829830a703", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c924c049465f91dda8b7cee416d1fceaf4a596/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=13c924c049465f91dda8b7cee416d1fceaf4a596", "patch": "@@ -3444,11 +3444,6 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         check_block_no_value(fcx, body);\n         fcx.write_ty(id, ty::mk_nil(tcx));\n       }\n-      ast::expr_do_while(body, cond) {\n-        bot = check_expr_with(fcx, cond, ty::mk_bool(tcx)) |\n-              check_block_no_value(fcx, body);\n-        fcx.write_ty(id, fcx.node_ty(body.node.id));\n-      }\n       ast::expr_loop(body) {\n           check_block_no_value(fcx, body);\n           fcx.write_ty(id, ty::mk_nil(tcx));"}]}