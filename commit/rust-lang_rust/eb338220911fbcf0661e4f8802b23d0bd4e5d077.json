{"sha": "eb338220911fbcf0661e4f8802b23d0bd4e5d077", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMzM4MjIwOTExZmJjZjA2NjFlNGY4ODAyYjIzZDBiZDRlNWQwNzc=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2019-07-06T19:52:25Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2019-07-09T19:55:29Z"}, "message": "Pass type to byval attributes", "tree": {"sha": "bc38a55a128662fe641c9c58e91ca580da84f190", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc38a55a128662fe641c9c58e91ca580da84f190"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb338220911fbcf0661e4f8802b23d0bd4e5d077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb338220911fbcf0661e4f8802b23d0bd4e5d077", "html_url": "https://github.com/rust-lang/rust/commit/eb338220911fbcf0661e4f8802b23d0bd4e5d077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb338220911fbcf0661e4f8802b23d0bd4e5d077/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04304fcd16e40c936dc5ba71c9ac3c445597f8bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/04304fcd16e40c936dc5ba71c9ac3c445597f8bb", "html_url": "https://github.com/rust-lang/rust/commit/04304fcd16e40c936dc5ba71c9ac3c445597f8bb"}], "stats": {"total": 90, "additions": 60, "deletions": 30}, "files": [{"sha": "ff87afe0c444b7556739c73517056a6c7e919f20", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 35, "deletions": 29, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/eb338220911fbcf0661e4f8802b23d0bd4e5d077/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb338220911fbcf0661e4f8802b23d0bd4e5d077/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=eb338220911fbcf0661e4f8802b23d0bd4e5d077", "patch": "@@ -34,17 +34,17 @@ trait ArgAttributeExt {\n impl ArgAttributeExt for ArgAttribute {\n     fn for_each_kind<F>(&self, mut f: F) where F: FnMut(llvm::Attribute) {\n         for_each_kind!(self, f,\n-                       ByVal, NoAlias, NoCapture, NonNull, ReadOnly, SExt, StructRet, ZExt, InReg)\n+                       NoAlias, NoCapture, NonNull, ReadOnly, SExt, StructRet, ZExt, InReg)\n     }\n }\n \n pub trait ArgAttributesExt {\n-    fn apply_llfn(&self, idx: AttributePlace, llfn: &Value);\n-    fn apply_callsite(&self, idx: AttributePlace, callsite: &Value);\n+    fn apply_llfn(&self, idx: AttributePlace, llfn: &Value, ty: Option<&Type>);\n+    fn apply_callsite(&self, idx: AttributePlace, callsite: &Value, ty: Option<&Type>);\n }\n \n impl ArgAttributesExt for ArgAttributes {\n-    fn apply_llfn(&self, idx: AttributePlace, llfn: &Value) {\n+    fn apply_llfn(&self, idx: AttributePlace, llfn: &Value, ty: Option<&Type>) {\n         let mut regular = self.regular;\n         unsafe {\n             let deref = self.pointee_size.bytes();\n@@ -65,11 +65,14 @@ impl ArgAttributesExt for ArgAttributes {\n                                                idx.as_uint(),\n                                                align.bytes() as u32);\n             }\n+            if regular.contains(ArgAttribute::ByVal) {\n+                llvm::LLVMRustAddByValAttr(llfn, idx.as_uint(), ty.unwrap());\n+            }\n             regular.for_each_kind(|attr| attr.apply_llfn(idx, llfn));\n         }\n     }\n \n-    fn apply_callsite(&self, idx: AttributePlace, callsite: &Value) {\n+    fn apply_callsite(&self, idx: AttributePlace, callsite: &Value, ty: Option<&Type>) {\n         let mut regular = self.regular;\n         unsafe {\n             let deref = self.pointee_size.bytes();\n@@ -90,6 +93,9 @@ impl ArgAttributesExt for ArgAttributes {\n                                                        idx.as_uint(),\n                                                        align.bytes() as u32);\n             }\n+            if regular.contains(ArgAttribute::ByVal) {\n+                llvm::LLVMRustAddByValCallSiteAttr(callsite, idx.as_uint(), ty.unwrap());\n+            }\n             regular.for_each_kind(|attr| attr.apply_callsite(idx, callsite));\n         }\n     }\n@@ -298,7 +304,7 @@ pub trait FnTypeLlvmExt<'tcx> {\n     fn llvm_type(&self, cx: &CodegenCx<'ll, 'tcx>) -> &'ll Type;\n     fn ptr_to_llvm_type(&self, cx: &CodegenCx<'ll, 'tcx>) -> &'ll Type;\n     fn llvm_cconv(&self) -> llvm::CallConv;\n-    fn apply_attrs_llfn(&self, llfn: &'ll Value);\n+    fn apply_attrs_llfn(&self, cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value);\n     fn apply_attrs_callsite(&self, bx: &mut Builder<'a, 'll, 'tcx>, callsite: &'ll Value);\n }\n \n@@ -384,51 +390,51 @@ impl<'tcx> FnTypeLlvmExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n         }\n     }\n \n-    fn apply_attrs_llfn(&self, llfn: &'ll Value) {\n+    fn apply_attrs_llfn(&self, cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value) {\n         let mut i = 0;\n-        let mut apply = |attrs: &ArgAttributes| {\n-            attrs.apply_llfn(llvm::AttributePlace::Argument(i), llfn);\n+        let mut apply = |attrs: &ArgAttributes, ty: Option<&Type>| {\n+            attrs.apply_llfn(llvm::AttributePlace::Argument(i), llfn, ty);\n             i += 1;\n         };\n         match self.ret.mode {\n             PassMode::Direct(ref attrs) => {\n-                attrs.apply_llfn(llvm::AttributePlace::ReturnValue, llfn);\n+                attrs.apply_llfn(llvm::AttributePlace::ReturnValue, llfn, None);\n             }\n-            PassMode::Indirect(ref attrs, _) => apply(attrs),\n+            PassMode::Indirect(ref attrs, _) => apply(attrs, Some(self.ret.layout.llvm_type(cx))),\n             _ => {}\n         }\n         for arg in &self.args {\n             if arg.pad.is_some() {\n-                apply(&ArgAttributes::new());\n+                apply(&ArgAttributes::new(), None);\n             }\n             match arg.mode {\n                 PassMode::Ignore(_) => {}\n                 PassMode::Direct(ref attrs) |\n-                PassMode::Indirect(ref attrs, None) => apply(attrs),\n+                PassMode::Indirect(ref attrs, None) => apply(attrs, Some(arg.layout.llvm_type(cx))),\n                 PassMode::Indirect(ref attrs, Some(ref extra_attrs)) => {\n-                    apply(attrs);\n-                    apply(extra_attrs);\n+                    apply(attrs, None);\n+                    apply(extra_attrs, None);\n                 }\n                 PassMode::Pair(ref a, ref b) => {\n-                    apply(a);\n-                    apply(b);\n+                    apply(a, None);\n+                    apply(b, None);\n                 }\n-                PassMode::Cast(_) => apply(&ArgAttributes::new()),\n+                PassMode::Cast(_) => apply(&ArgAttributes::new(), None),\n             }\n         }\n     }\n \n     fn apply_attrs_callsite(&self, bx: &mut Builder<'a, 'll, 'tcx>, callsite: &'ll Value) {\n         let mut i = 0;\n-        let mut apply = |attrs: &ArgAttributes| {\n-            attrs.apply_callsite(llvm::AttributePlace::Argument(i), callsite);\n+        let mut apply = |attrs: &ArgAttributes, ty: Option<&Type>| {\n+            attrs.apply_callsite(llvm::AttributePlace::Argument(i), callsite, ty);\n             i += 1;\n         };\n         match self.ret.mode {\n             PassMode::Direct(ref attrs) => {\n-                attrs.apply_callsite(llvm::AttributePlace::ReturnValue, callsite);\n+                attrs.apply_callsite(llvm::AttributePlace::ReturnValue, callsite, None);\n             }\n-            PassMode::Indirect(ref attrs, _) => apply(attrs),\n+            PassMode::Indirect(ref attrs, _) => apply(attrs, Some(self.ret.layout.llvm_type(bx))),\n             _ => {}\n         }\n         if let layout::Abi::Scalar(ref scalar) = self.ret.layout.abi {\n@@ -446,21 +452,21 @@ impl<'tcx> FnTypeLlvmExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n         }\n         for arg in &self.args {\n             if arg.pad.is_some() {\n-                apply(&ArgAttributes::new());\n+                apply(&ArgAttributes::new(), None);\n             }\n             match arg.mode {\n                 PassMode::Ignore(_) => {}\n                 PassMode::Direct(ref attrs) |\n-                PassMode::Indirect(ref attrs, None) => apply(attrs),\n+                PassMode::Indirect(ref attrs, None) => apply(attrs, Some(arg.layout.llvm_type(bx))),\n                 PassMode::Indirect(ref attrs, Some(ref extra_attrs)) => {\n-                    apply(attrs);\n-                    apply(extra_attrs);\n+                    apply(attrs, None);\n+                    apply(extra_attrs, None);\n                 }\n                 PassMode::Pair(ref a, ref b) => {\n-                    apply(a);\n-                    apply(b);\n+                    apply(a, None);\n+                    apply(b, None);\n                 }\n-                PassMode::Cast(_) => apply(&ArgAttributes::new()),\n+                PassMode::Cast(_) => apply(&ArgAttributes::new(), None),\n             }\n         }\n "}, {"sha": "62eab0f3d4e69b8f047d2f749fe65b13b672c8fb", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb338220911fbcf0661e4f8802b23d0bd4e5d077/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb338220911fbcf0661e4f8802b23d0bd4e5d077/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=eb338220911fbcf0661e4f8802b23d0bd4e5d077", "patch": "@@ -107,7 +107,7 @@ impl DeclareMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             llvm::Attribute::NoReturn.apply_llfn(Function, llfn);\n         }\n \n-        fty.apply_attrs_llfn(llfn);\n+        fty.apply_attrs_llfn(self, llfn);\n \n         llfn\n     }"}, {"sha": "75f639ec3eca07715b02aec9990ece3373e1bbf8", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb338220911fbcf0661e4f8802b23d0bd4e5d077/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb338220911fbcf0661e4f8802b23d0bd4e5d077/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=eb338220911fbcf0661e4f8802b23d0bd4e5d077", "patch": "@@ -794,6 +794,7 @@ extern \"C\" {\n     pub fn LLVMRustAddAlignmentAttr(Fn: &Value, index: c_uint, bytes: u32);\n     pub fn LLVMRustAddDereferenceableAttr(Fn: &Value, index: c_uint, bytes: u64);\n     pub fn LLVMRustAddDereferenceableOrNullAttr(Fn: &Value, index: c_uint, bytes: u64);\n+    pub fn LLVMRustAddByValAttr(Fn: &Value, index: c_uint, ty: &Type);\n     pub fn LLVMRustAddFunctionAttribute(Fn: &Value, index: c_uint, attr: Attribute);\n     pub fn LLVMRustAddFunctionAttrStringValue(Fn: &Value,\n                                               index: c_uint,\n@@ -824,6 +825,7 @@ extern \"C\" {\n     pub fn LLVMRustAddDereferenceableOrNullCallSiteAttr(Instr: &Value,\n                                                         index: c_uint,\n                                                         bytes: u64);\n+    pub fn LLVMRustAddByValCallSiteAttr(Instr: &Value, index: c_uint, ty: &Type);\n \n     // Operations on load/store instructions (only)\n     pub fn LLVMSetVolatile(MemoryAccessInst: &Value, volatile: Bool);"}, {"sha": "16d08ee534edc413f6b1a9f88ba11e151b35f1de", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eb338220911fbcf0661e4f8802b23d0bd4e5d077/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/eb338220911fbcf0661e4f8802b23d0bd4e5d077/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=eb338220911fbcf0661e4f8802b23d0bd4e5d077", "patch": "@@ -237,6 +237,17 @@ extern \"C\" void LLVMRustAddDereferenceableOrNullCallSiteAttr(LLVMValueRef Instr,\n       Call->getContext(), Index, B));\n }\n \n+extern \"C\" void LLVMRustAddByValCallSiteAttr(LLVMValueRef Instr, unsigned Index,\n+                                             LLVMTypeRef Ty) {\n+  CallSite Call = CallSite(unwrap<Instruction>(Instr));\n+#if LLVM_VERSION_GE(9, 0)\n+  Attribute Attr = Attribute::getWithByValType(Call->getContext(), unwrap(Ty));\n+#else\n+  Attribute Attr = Attribute::get(Call->getContext(), Attribute::ByVal);\n+#endif\n+  Call.addAttribute(Index, Attr);\n+}\n+\n extern \"C\" void LLVMRustAddFunctionAttribute(LLVMValueRef Fn, unsigned Index,\n                                              LLVMRustAttribute RustAttr) {\n   Function *A = unwrap<Function>(Fn);\n@@ -271,6 +282,17 @@ extern \"C\" void LLVMRustAddDereferenceableOrNullAttr(LLVMValueRef Fn,\n   A->addAttributes(Index, B);\n }\n \n+extern \"C\" void LLVMRustAddByValAttr(LLVMValueRef Fn, unsigned Index,\n+                                     LLVMTypeRef Ty) {\n+  Function *F = unwrap<Function>(Fn);\n+#if LLVM_VERSION_GE(9, 0)\n+  Attribute Attr = Attribute::getWithByValType(F->getContext(), unwrap(Ty));\n+#else\n+  Attribute Attr = Attribute::get(F->getContext(), Attribute::ByVal);\n+#endif\n+  F->addAttribute(Index, Attr);\n+}\n+\n extern \"C\" void LLVMRustAddFunctionAttrStringValue(LLVMValueRef Fn,\n                                                    unsigned Index,\n                                                    const char *Name,"}]}