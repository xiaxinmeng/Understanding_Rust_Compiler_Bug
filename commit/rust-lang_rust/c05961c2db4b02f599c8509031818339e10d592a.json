{"sha": "c05961c2db4b02f599c8509031818339e10d592a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNTk2MWMyZGI0YjAyZjU5OWM4NTA5MDMxODE4MzM5ZTEwZDU5MmE=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-04-25T01:38:31Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-05-02T18:30:50Z"}, "message": "Implement `confusable_idents` lint.", "tree": {"sha": "2eca5affd0e276a5681c8398e5a9c55d5c402d74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eca5affd0e276a5681c8398e5a9c55d5c402d74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c05961c2db4b02f599c8509031818339e10d592a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c05961c2db4b02f599c8509031818339e10d592a", "html_url": "https://github.com/rust-lang/rust/commit/c05961c2db4b02f599c8509031818339e10d592a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c05961c2db4b02f599c8509031818339e10d592a/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53d3bc02ed90eba01c5dbc5b2d0c4cabb67ffb4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/53d3bc02ed90eba01c5dbc5b2d0c4cabb67ffb4d", "html_url": "https://github.com/rust-lang/rust/commit/53d3bc02ed90eba01c5dbc5b2d0c4cabb67ffb4d"}], "stats": {"total": 240, "additions": 192, "deletions": 48}, "files": [{"sha": "32a6f5fce74fe9031bc3c309768592386f4df734", "filename": "Cargo.lock", "status": "modified", "additions": 41, "deletions": 40, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/c05961c2db4b02f599c8509031818339e10d592a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c05961c2db4b02f599c8509031818339e10d592a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c05961c2db4b02f599c8509031818339e10d592a", "patch": "@@ -74,7 +74,7 @@ name = \"arena\"\n version = \"0.0.0\"\n dependencies = [\n  \"rustc_data_structures\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -492,7 +492,7 @@ dependencies = [\n  \"regex-syntax\",\n  \"semver\",\n  \"serde\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n  \"toml\",\n  \"unicode-normalization\",\n  \"url 2.1.0\",\n@@ -2428,7 +2428,7 @@ dependencies = [\n  \"cloudabi\",\n  \"libc\",\n  \"redox_syscall\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n  \"winapi 0.3.8\",\n ]\n \n@@ -3151,7 +3151,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"81dfcfbb0ddfd533abf8c076e3b49d1e5042d1962526a12ce2c66d514b24cca3\"\n dependencies = [\n  \"rustc-ap-rustc_data_structures\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3174,7 +3174,7 @@ dependencies = [\n  \"rustc-ap-rustc_span\",\n  \"rustc-ap-serialize\",\n  \"scoped-tls\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3223,7 +3223,7 @@ dependencies = [\n  \"rustc-ap-rustc_session\",\n  \"rustc-ap-rustc_span\",\n  \"rustc-ap-serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3249,7 +3249,7 @@ dependencies = [\n  \"rustc-hash\",\n  \"rustc-rayon\",\n  \"rustc-rayon-core\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n  \"stable_deref_trait\",\n  \"winapi 0.3.8\",\n ]\n@@ -3291,7 +3291,7 @@ dependencies = [\n  \"rustc-ap-rustc_session\",\n  \"rustc-ap-rustc_span\",\n  \"rustc-ap-serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3318,7 +3318,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"32220c3e6cdf226f38e4474b747dca15f3106bb680c74f10b299af3f6cdb1663\"\n dependencies = [\n  \"rustc-ap-serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3358,7 +3358,7 @@ dependencies = [\n  \"rustc-ap-rustc_lexer\",\n  \"rustc-ap-rustc_session\",\n  \"rustc-ap-rustc_span\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n  \"unicode-normalization\",\n ]\n \n@@ -3423,7 +3423,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"756e8f526ec7906e132188bf25e3c10a6ee42ab77294ecb3b3602647f0508eef\"\n dependencies = [\n  \"indexmap\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3507,7 +3507,7 @@ dependencies = [\n  \"serde\",\n  \"serde_json\",\n  \"smallvec 0.6.10\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n  \"syn 0.15.35\",\n  \"url 2.1.0\",\n  \"winapi 0.3.8\",\n@@ -3518,7 +3518,7 @@ name = \"rustc_apfloat\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3533,7 +3533,7 @@ dependencies = [\n  \"rustc_span\",\n  \"scoped-tls\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3551,7 +3551,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3612,7 +3612,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3641,7 +3641,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3694,7 +3694,7 @@ dependencies = [\n  \"rustc-rayon-core\",\n  \"rustc_index\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n  \"stable_deref_trait\",\n  \"winapi 0.3.8\",\n ]\n@@ -3768,7 +3768,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3797,7 +3797,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3833,7 +3833,7 @@ name = \"rustc_index\"\n version = \"0.0.0\"\n dependencies = [\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3853,7 +3853,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3895,7 +3895,7 @@ dependencies = [\n  \"rustc_ty\",\n  \"rustc_typeck\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n  \"tempfile\",\n  \"winapi 0.3.8\",\n ]\n@@ -3968,7 +3968,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n  \"stable_deref_trait\",\n  \"winapi 0.3.8\",\n ]\n@@ -4000,7 +4000,7 @@ dependencies = [\n  \"rustc_target\",\n  \"scoped-tls\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4029,7 +4029,7 @@ dependencies = [\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4053,7 +4053,7 @@ dependencies = [\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4134,7 +4134,7 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_span\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4157,7 +4157,7 @@ dependencies = [\n  \"rustc_middle\",\n  \"rustc_session\",\n  \"rustc_span\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4272,7 +4272,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4287,7 +4287,7 @@ dependencies = [\n  \"rustc_middle\",\n  \"rustc_span\",\n  \"rustc_trait_selection\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4324,7 +4324,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4568,7 +4568,7 @@ name = \"serialize\"\n version = \"0.0.0\"\n dependencies = [\n  \"indexmap\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4635,9 +4635,9 @@ checksum = \"ab606a9c5e214920bb66c458cd7be8ef094f813f20fe77a54cc7dbfff220d4b7\"\n \n [[package]]\n name = \"smallvec\"\n-version = \"1.0.0\"\n+version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4ecf3b85f68e8abaa7555aa5abdb1153079387e60b718283d732f03897fcfc86\"\n+checksum = \"c7cb5678e1615754284ec264d9bb5b4c27d2018577fd90ac0ceb578591ed5ee4\"\n \n [[package]]\n name = \"socket2\"\n@@ -5359,11 +5359,11 @@ dependencies = [\n \n [[package]]\n name = \"unicode-normalization\"\n-version = \"0.1.11\"\n+version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b561e267b2326bb4cebfc0ef9e68355c7abe6c6f522aeac2f5bf95d56c59bdcf\"\n+checksum = \"5479532badd04e128284890390c1e876ef7a993d0570b3597ae43dfa1d59afa4\"\n dependencies = [\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -5374,10 +5374,11 @@ checksum = \"5b2c5c29e805da6817f5af6a627d65adb045cebf05cccd5a3493d6109454391c\"\n \n [[package]]\n name = \"unicode-security\"\n-version = \"0.0.2\"\n+version = \"0.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c49d35967fa037b881acc34ef717c38c4b5560eba10e3685271b3f530bb19634\"\n+checksum = \"a5f9011bbed9c13372bc8df618b55a38138445199caf3b61d432c6859c36dee0\"\n dependencies = [\n+ \"unicode-normalization\",\n  \"unicode-script\",\n ]\n "}, {"sha": "10baffb28ac2d0666658120837798aa1c21fe2aa", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c05961c2db4b02f599c8509031818339e10d592a/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05961c2db4b02f599c8509031818339e10d592a/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=c05961c2db4b02f599c8509031818339e10d592a", "patch": "@@ -141,10 +141,10 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n             SingleQuote => op!('\\''),\n \n             Ident(name, false) if name == kw::DollarCrate => tt!(Ident::dollar_crate()),\n-            Ident(name, is_raw) => tt!(Ident::new(name, is_raw)),\n+            Ident(name, is_raw) => tt!(Ident::new(sess, name, is_raw)),\n             Lifetime(name) => {\n                 let ident = ast::Ident::new(name, span).without_first_quote();\n-                stack.push(tt!(Ident::new(ident.name, false)));\n+                stack.push(tt!(Ident::new(sess, ident.name, false)));\n                 tt!(Punct::new('\\'', true))\n             }\n             Literal(lit) => tt!(Literal { lit }),\n@@ -322,7 +322,7 @@ impl Ident {\n             false\n         }\n     }\n-    fn new(sym: Symbol, is_raw: bool, span: Span) -> Ident {\n+    fn new(sess: &ParseSess, sym: Symbol, is_raw: bool, span: Span) -> Ident {\n         let sym = nfc_normalize(&sym.as_str());\n         let string = sym.as_str();\n         if !Self::is_valid(&string) {\n@@ -331,6 +331,7 @@ impl Ident {\n         if is_raw && !sym.can_be_raw() {\n             panic!(\"`{}` cannot be a raw identifier\", string);\n         }\n+        sess.symbol_gallery.insert(sym, span);\n         Ident { sym, is_raw, span }\n     }\n     fn dollar_crate(span: Span) -> Ident {\n@@ -495,7 +496,7 @@ impl server::Punct for Rustc<'_> {\n \n impl server::Ident for Rustc<'_> {\n     fn new(&mut self, string: &str, span: Self::Span, is_raw: bool) -> Self::Ident {\n-        Ident::new(Symbol::intern(string), is_raw, span)\n+        Ident::new(self.sess, Symbol::intern(string), is_raw, span)\n     }\n     fn span(&mut self, ident: Self::Ident) -> Self::Span {\n         ident.span"}, {"sha": "ada6f2a9381dc3db719a5f92b9fa18b1022dd084", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c05961c2db4b02f599c8509031818339e10d592a/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c05961c2db4b02f599c8509031818339e10d592a/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=c05961c2db4b02f599c8509031818339e10d592a", "patch": "@@ -10,7 +10,7 @@ path = \"lib.rs\"\n \n [dependencies]\n log = \"0.4\"\n-unicode-security = \"0.0.2\"\n+unicode-security = \"0.0.3\"\n rustc_middle = { path = \"../librustc_middle\" }\n rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_attr = { path = \"../librustc_attr\" }"}, {"sha": "293dd326d3b080b0331c4b94b9364a0cc2f64d46", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c05961c2db4b02f599c8509031818339e10d592a/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05961c2db4b02f599c8509031818339e10d592a/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=c05961c2db4b02f599c8509031818339e10d592a", "patch": "@@ -388,6 +388,11 @@ impl<'s> LintLevelsBuilder<'s> {\n         self.cur = push.prev;\n     }\n \n+    /// Find the lint level for a lint.\n+    pub fn lint_level(&self, lint: &'static Lint) -> (Level, LintSource) {\n+        self.sets.get_lint_level(lint, self.cur, None, self.sess)\n+    }\n+\n     /// Used to emit a lint-related diagnostic based on the current state of\n     /// this lint context.\n     pub fn struct_lint(\n@@ -396,7 +401,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         span: Option<MultiSpan>,\n         decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n     ) {\n-        let (level, src) = self.sets.get_lint_level(lint, self.cur, None, self.sess);\n+        let (level, src) = self.lint_level(lint);\n         struct_lint_level(self.sess, lint, level, src, span, decorate)\n     }\n "}, {"sha": "522f292dc949b0e8de764c8c1fa36e9a19725356", "filename": "src/librustc_lint/non_ascii_idents.rs", "status": "modified", "additions": 95, "deletions": 1, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/c05961c2db4b02f599c8509031818339e10d592a/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05961c2db4b02f599c8509031818339e10d592a/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnon_ascii_idents.rs?ref=c05961c2db4b02f599c8509031818339e10d592a", "patch": "@@ -1,5 +1,7 @@\n use crate::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_ast::ast;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_span::symbol::SymbolStr;\n \n declare_lint! {\n     pub NON_ASCII_IDENTS,\n@@ -13,9 +15,101 @@ declare_lint! {\n     \"detects uncommon Unicode codepoints in identifiers\"\n }\n \n-declare_lint_pass!(NonAsciiIdents => [NON_ASCII_IDENTS, UNCOMMON_CODEPOINTS]);\n+// FIXME: Change this to warn.\n+declare_lint! {\n+    pub CONFUSABLE_IDENTS,\n+    Allow,\n+    \"detects visually confusable pairs between identifiers\"\n+}\n+\n+declare_lint_pass!(NonAsciiIdents => [NON_ASCII_IDENTS, UNCOMMON_CODEPOINTS, CONFUSABLE_IDENTS]);\n+\n+use std::hash::{Hash, Hasher};\n+use std::ops::Deref;\n+\n+enum CowBoxSymStr {\n+    Interned(SymbolStr),\n+    Owned(Box<str>),\n+}\n+\n+impl Deref for CowBoxSymStr {\n+    type Target = str;\n+\n+    fn deref(&self) -> &str {\n+        match self {\n+            CowBoxSymStr::Interned(interned) => interned,\n+            CowBoxSymStr::Owned(ref owned) => owned,\n+        }\n+    }\n+}\n+\n+impl Hash for CowBoxSymStr {\n+    #[inline]\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        Hash::hash(&**self, state)\n+    }\n+}\n+\n+impl PartialEq<CowBoxSymStr> for CowBoxSymStr {\n+    #[inline]\n+    fn eq(&self, other: &CowBoxSymStr) -> bool {\n+        PartialEq::eq(&**self, &**other)\n+    }\n+}\n+\n+impl Eq for CowBoxSymStr {}\n+\n+fn calc_skeleton(symbol_str: SymbolStr, buffer: &'_ mut String) -> CowBoxSymStr {\n+    use std::mem::swap;\n+    use unicode_security::confusable_detection::skeleton;\n+    buffer.clear();\n+    buffer.extend(skeleton(&symbol_str));\n+    if symbol_str == *buffer {\n+        CowBoxSymStr::Interned(symbol_str)\n+    } else {\n+        let mut owned = String::new();\n+        swap(buffer, &mut owned);\n+        CowBoxSymStr::Owned(owned.into_boxed_str())\n+    }\n+}\n \n impl EarlyLintPass for NonAsciiIdents {\n+    fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &ast::Crate) {\n+        use rustc_session::lint::Level;\n+        if cx.builder.lint_level(CONFUSABLE_IDENTS).0 == Level::Allow {\n+            return;\n+        }\n+        let symbols = cx.sess.parse_sess.symbol_gallery.symbols.lock();\n+        let mut symbol_strs_and_spans = Vec::with_capacity(symbols.len());\n+        for (symbol, sp) in symbols.iter() {\n+            let symbol_str = symbol.as_str();\n+            symbol_strs_and_spans.push((symbol_str, *sp));\n+        }\n+        drop(symbols);\n+        symbol_strs_and_spans.sort_by_key(|x| x.0.clone());\n+        let mut skeleton_map =\n+            FxHashMap::with_capacity_and_hasher(symbol_strs_and_spans.len(), Default::default());\n+        let mut str_buf = String::new();\n+        for (symbol_str, sp) in symbol_strs_and_spans {\n+            let skeleton = calc_skeleton(symbol_str.clone(), &mut str_buf);\n+            skeleton_map\n+                .entry(skeleton)\n+                .and_modify(|(existing_symbolstr, existing_span)| {\n+                    cx.struct_span_lint(CONFUSABLE_IDENTS, sp, |lint| {\n+                        lint.build(&format!(\n+                            \"identifier pair considered confusable between `{}` and `{}`\",\n+                            existing_symbolstr, symbol_str\n+                        ))\n+                        .span_label(\n+                            *existing_span,\n+                            \"this is where the previous identifier occurred\",\n+                        )\n+                        .emit();\n+                    });\n+                })\n+                .or_insert((symbol_str, sp));\n+        }\n+    }\n     fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: ast::Ident) {\n         use unicode_security::GeneralSecurityProfile;\n         let name_str = ident.name.as_str();"}, {"sha": "f676a34a1d12b34cddd0d54393eae470159bd10f", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c05961c2db4b02f599c8509031818339e10d592a/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05961c2db4b02f599c8509031818339e10d592a/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=c05961c2db4b02f599c8509031818339e10d592a", "patch": "@@ -222,8 +222,9 @@ impl<'a> StringReader<'a> {\n                     ident_start = ident_start + BytePos(2);\n                 }\n                 let sym = nfc_normalize(self.str_from(ident_start));\n+                let span = self.mk_sp(start, self.pos);\n+                self.sess.symbol_gallery.insert(sym, span);\n                 if is_raw_ident {\n-                    let span = self.mk_sp(start, self.pos);\n                     if !sym.can_be_raw() {\n                         self.err_span(span, &format!(\"`{}` cannot be a raw identifier\", sym));\n                     }"}, {"sha": "69d3e99b7458e59693616657b089e695359e12e0", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c05961c2db4b02f599c8509031818339e10d592a/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05961c2db4b02f599c8509031818339e10d592a/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=c05961c2db4b02f599c8509031818339e10d592a", "patch": "@@ -60,6 +60,20 @@ impl GatedSpans {\n     }\n }\n \n+#[derive(Default)]\n+pub struct SymbolGallery {\n+    /// All symbols occurred and their first occurrance span.\n+    pub symbols: Lock<FxHashMap<Symbol, Span>>,\n+}\n+\n+impl SymbolGallery {\n+    /// Insert a symbol and its span into symbol gallery.\n+    /// If the symbol has occurred before, ignore the new occurance.\n+    pub fn insert(&self, symbol: Symbol, span: Span) {\n+        self.symbols.lock().entry(symbol).or_insert(span);\n+    }\n+}\n+\n /// Construct a diagnostic for a language feature error due to the given `span`.\n /// The `feature`'s `Symbol` is the one you used in `active.rs` and `rustc_span::symbols`.\n pub fn feature_err<'a>(\n@@ -118,6 +132,7 @@ pub struct ParseSess {\n     pub ambiguous_block_expr_parse: Lock<FxHashMap<Span, Span>>,\n     pub injected_crate_name: Once<Symbol>,\n     pub gated_spans: GatedSpans,\n+    pub symbol_gallery: SymbolGallery,\n     /// The parser has reached `Eof` due to an unclosed brace. Used to silence unnecessary errors.\n     pub reached_eof: Lock<bool>,\n }\n@@ -143,6 +158,7 @@ impl ParseSess {\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n             injected_crate_name: Once::new(),\n             gated_spans: GatedSpans::default(),\n+            symbol_gallery: SymbolGallery::default(),\n             reached_eof: Lock::new(false),\n         }\n     }"}, {"sha": "12093837d2630bcb8387a60a63cef752e8c02b6d", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-confusable-idents.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c05961c2db4b02f599c8509031818339e10d592a/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05961c2db4b02f599c8509031818339e10d592a/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.rs?ref=c05961c2db4b02f599c8509031818339e10d592a", "patch": "@@ -0,0 +1,9 @@\n+#![feature(non_ascii_idents)]\n+#![deny(confusable_idents)]\n+#![allow(uncommon_codepoints, non_upper_case_globals)]\n+\n+const \uff53: usize = 42; //~ ERROR identifier pair considered confusable\n+\n+fn main() {\n+    let s = \"rust\";\n+}"}, {"sha": "40ee18acb3cd4c68e426ebdc3f35654827844d45", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-confusable-idents.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c05961c2db4b02f599c8509031818339e10d592a/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c05961c2db4b02f599c8509031818339e10d592a/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.stderr?ref=c05961c2db4b02f599c8509031818339e10d592a", "patch": "@@ -0,0 +1,17 @@\n+error: identifier pair considered confusable between `s` and `\uff53`\n+  --> $DIR/lint-confusable-idents.rs:5:7\n+   |\n+LL | const \uff53: usize = 42;\n+   |       ^^\n+...\n+LL |     let s = \"rust\";\n+   |         - this is where the previous identifier occurred\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-confusable-idents.rs:2:9\n+   |\n+LL | #![deny(confusable_idents)]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}