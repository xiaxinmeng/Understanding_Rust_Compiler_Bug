{"sha": "733bdd079a3c09aa3baa47ad65ae134f07b9dbcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczM2JkZDA3OWEzYzA5YWEzYmFhNDdhZDY1YWUxMzRmMDdiOWRiY2Q=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-09-02T03:07:56Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-09-02T03:14:01Z"}, "message": "fix(rustc): suggest `items` be borrowed in `for i in items[x..]`\n\nFixes #87994", "tree": {"sha": "786fa1a21e77195feccf61afd0d7ccd1ebe3109b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/786fa1a21e77195feccf61afd0d7ccd1ebe3109b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/733bdd079a3c09aa3baa47ad65ae134f07b9dbcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/733bdd079a3c09aa3baa47ad65ae134f07b9dbcd", "html_url": "https://github.com/rust-lang/rust/commit/733bdd079a3c09aa3baa47ad65ae134f07b9dbcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/733bdd079a3c09aa3baa47ad65ae134f07b9dbcd/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da", "html_url": "https://github.com/rust-lang/rust/commit/e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "608add1d91c9f513d406badae6243777b5ece370", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/733bdd079a3c09aa3baa47ad65ae134f07b9dbcd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733bdd079a3c09aa3baa47ad65ae134f07b9dbcd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=733bdd079a3c09aa3baa47ad65ae134f07b9dbcd", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::ty::{\n use rustc_middle::ty::{TypeAndMut, TypeckResults};\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{BytePos, DesugaringKind, ExpnKind, ForLoopLoc, MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use std::fmt;\n \n@@ -680,7 +680,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         points_at_arg: bool,\n         has_custom_message: bool,\n     ) -> bool {\n-        if !points_at_arg {\n+        let span = obligation.cause.span;\n+        let points_at_for_iter = matches!(\n+            span.ctxt().outer_expn_data().kind,\n+            ExpnKind::Desugaring(DesugaringKind::ForLoop(ForLoopLoc::IntoIter))\n+        );\n+\n+        if !points_at_arg && !points_at_for_iter {\n             return false;\n         }\n \n@@ -695,7 +701,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         never_suggest_borrow.push(self.tcx.get_diagnostic_item(sym::send_trait).unwrap());\n \n-        let span = obligation.cause.span;\n         let param_env = obligation.param_env;\n         let trait_ref = trait_ref.skip_binder();\n \n@@ -754,7 +759,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     );\n \n                     // This if is to prevent a special edge-case\n-                    if !span.from_expansion() {\n+                    if matches!(\n+                        span.ctxt().outer_expn_data().kind,\n+                        ExpnKind::Root\n+                            | ExpnKind::Desugaring(DesugaringKind::ForLoop(ForLoopLoc::IntoIter))\n+                    ) {\n                         // We don't want a borrowing suggestion on the fields in structs,\n                         // ```\n                         // struct Foo {"}, {"sha": "98a936ab2fdd53ddfdf9cda8eda061963a3f4c4e", "filename": "src/test/ui/suggestions/slice-issue-87994.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/733bdd079a3c09aa3baa47ad65ae134f07b9dbcd/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733bdd079a3c09aa3baa47ad65ae134f07b9dbcd/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.rs?ref=733bdd079a3c09aa3baa47ad65ae134f07b9dbcd", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+  let v = vec![1i32, 2, 3];\n+  for _ in v[1..] {\n+    //~^ ERROR [i32]` is not an iterator [E0277]\n+    //~^^ ERROR known at compilation time\n+  }\n+}"}, {"sha": "0c69bec22109bc9943d0ca27e69d4317a64e0c3e", "filename": "src/test/ui/suggestions/slice-issue-87994.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/733bdd079a3c09aa3baa47ad65ae134f07b9dbcd/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/733bdd079a3c09aa3baa47ad65ae134f07b9dbcd/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr?ref=733bdd079a3c09aa3baa47ad65ae134f07b9dbcd", "patch": "@@ -0,0 +1,37 @@\n+error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n+  --> $DIR/slice-issue-87994.rs:3:12\n+   |\n+LL |   for _ in v[1..] {\n+   |            ^^^^^^\n+   |            |\n+   |            expected an implementor of trait `IntoIterator`\n+   |            help: consider borrowing here: `&v[1..]`\n+   |\n+   = note: the trait bound `[i32]: IntoIterator` is not satisfied\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[i32]`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `[i32]` is not an iterator\n+  --> $DIR/slice-issue-87994.rs:3:12\n+   |\n+LL |   for _ in v[1..] {\n+   |            ^^^^^^\n+   |            |\n+   |            expected an implementor of trait `IntoIterator`\n+   |            help: consider borrowing here: `&v[1..]`\n+   |\n+   = note: the trait bound `[i32]: IntoIterator` is not satisfied\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[i32]`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}