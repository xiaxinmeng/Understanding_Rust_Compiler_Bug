{"sha": "5fbe0cac7c568774082755ecc098caba98352a1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYmUwY2FjN2M1Njg3NzQwODI3NTVlY2MwOThjYWJhOTgzNTJhMWU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-10-01T16:53:10Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-11-25T14:26:16Z"}, "message": "First tests making use of the new fn move-fragments instrumentation.\n\nThe tests use new \"//~| ERROR\" follow syntax.\n\nIncludes a test for moves involving array elements.  It was easier\nthan i realized to get something naive off the ground here.", "tree": {"sha": "9fb250b211543c35699a9a1d53bf2da2a93c44e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fb250b211543c35699a9a1d53bf2da2a93c44e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fbe0cac7c568774082755ecc098caba98352a1e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fbe0cac7c568774082755ecc098caba98352a1e", "html_url": "https://github.com/rust-lang/rust/commit/5fbe0cac7c568774082755ecc098caba98352a1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fbe0cac7c568774082755ecc098caba98352a1e/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9a1c376fcf4d469742665a4be59cca68fc63ed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a1c376fcf4d469742665a4be59cca68fc63ed7", "html_url": "https://github.com/rust-lang/rust/commit/c9a1c376fcf4d469742665a4be59cca68fc63ed7"}], "stats": {"total": 565, "additions": 565, "deletions": 0}, "files": [{"sha": "ccf12cf79e1d6d2bc8acabeac6583fe4e166f860", "filename": "src/test/compile-fail/move-fragments-1.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-1.rs?ref=5fbe0cac7c568774082755ecc098caba98352a1e", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(tuple_indexing)]\n+\n+// Test that we correctly compute the move fragments for a fn.\n+//\n+// Note that the code below is not actually incorrect; the\n+// `rustc_move_fragments` attribute is a hack that uses the error\n+// reporting mechanisms as a channel for communicating from the\n+// internals of the compiler.\n+\n+// These are all fairly trivial cases: unused variables or direct\n+// drops of substructure.\n+\n+pub struct D { d: int }\n+impl Drop for D { fn drop(&mut self) { } }\n+\n+#[rustc_move_fragments]\n+pub fn test_noop() {\n+}\n+\n+#[rustc_move_fragments]\n+pub fn test_take(_x: D) {\n+    //~^ ERROR                  assigned_leaf_path: `$(local _x)`\n+}\n+\n+pub struct Pair<X,Y> { x: X, y: Y }\n+\n+#[rustc_move_fragments]\n+pub fn test_take_struct(_p: Pair<D, D>) {\n+    //~^ ERROR                  assigned_leaf_path: `$(local _p)`\n+}\n+\n+#[rustc_move_fragments]\n+pub fn test_drop_struct_part(p: Pair<D, D>) {\n+    //~^ ERROR                 parent_of_fragments: `$(local p)`\n+    //~| ERROR                     moved_leaf_path: `$(local p).x`\n+    //~| ERROR                    unmoved_fragment: `$(local p).y`\n+    drop(p.x);\n+}\n+\n+#[rustc_move_fragments]\n+pub fn test_drop_tuple_part(p: (D, D)) {\n+    //~^ ERROR                 parent_of_fragments: `$(local p)`\n+    //~| ERROR                     moved_leaf_path: `$(local p).#0`\n+    //~| ERROR                    unmoved_fragment: `$(local p).#1`\n+    drop(p.0);\n+}\n+\n+pub fn main() { }"}, {"sha": "ceb1d5a0f091060e13a951519ff12f3fe40af8e7", "filename": "src/test/compile-fail/move-fragments-2.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs?ref=5fbe0cac7c568774082755ecc098caba98352a1e", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we correctly compute the move fragments for a fn.\n+//\n+// Note that the code below is not actually incorrect; the\n+// `rustc_move_fragments` attribute is a hack that uses the error\n+// reporting mechanisms as a channel for communicating from the\n+// internals of the compiler.\n+\n+// These are checking that enums are tracked; note that their output\n+// paths include \"downcasts\" of the path to a particular enum.\n+\n+use self::Lonely::{Zero, One, Two};\n+\n+pub struct D { d: int }\n+impl Drop for D { fn drop(&mut self) { } }\n+\n+pub enum Lonely<X,Y> { Zero, One(X), Two(X, Y) }\n+\n+#[rustc_move_fragments]\n+pub fn test_match_partial(p: Lonely<D, D>) {\n+    //~^ ERROR                 parent_of_fragments: `$(local p)`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as Zero)`\n+    match p {\n+        Zero(..) => {}\n+        _ => {}\n+    }\n+}\n+\n+#[rustc_move_fragments]\n+pub fn test_match_full(p: Lonely<D, D>) {\n+    //~^ ERROR                 parent_of_fragments: `$(local p)`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as Zero)`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as One)`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as Two)`\n+    match p {\n+        Zero(..) => {}\n+        One(..) => {}\n+        Two(..) => {}\n+    }\n+}\n+\n+#[rustc_move_fragments]\n+pub fn test_match_bind_one(p: Lonely<D, D>) {\n+    //~^ ERROR                 parent_of_fragments: `$(local p)`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as Zero)`\n+    //~| ERROR                 parent_of_fragments: `($(local p) as One)`\n+    //~| ERROR                     moved_leaf_path: `($(local p) as One).#0`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as Two)`\n+    //~| ERROR                  assigned_leaf_path: `$(local data)`\n+    match p {\n+        Zero(..) => {}\n+        One(data) => {}\n+        Two(..) => {}\n+    }\n+}\n+\n+#[rustc_move_fragments]\n+pub fn test_match_bind_many(p: Lonely<D, D>) {\n+    //~^ ERROR                 parent_of_fragments: `$(local p)`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as Zero)`\n+    //~| ERROR                 parent_of_fragments: `($(local p) as One)`\n+    //~| ERROR                     moved_leaf_path: `($(local p) as One).#0`\n+    //~| ERROR                  assigned_leaf_path: `$(local data)`\n+    //~| ERROR                 parent_of_fragments: `($(local p) as Two)`\n+    //~| ERROR                     moved_leaf_path: `($(local p) as Two).#0`\n+    //~| ERROR                     moved_leaf_path: `($(local p) as Two).#1`\n+    //~| ERROR                  assigned_leaf_path: `$(local left)`\n+    //~| ERROR                  assigned_leaf_path: `$(local right)`\n+    match p {\n+        Zero(..) => {}\n+        One(data) => {}\n+        Two(left, right) => {}\n+    }\n+}\n+\n+pub fn main() { }"}, {"sha": "4540b0c5a91323f35f04de65a33bde8ccc2503e8", "filename": "src/test/compile-fail/move-fragments-3.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs?ref=5fbe0cac7c568774082755ecc098caba98352a1e", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we correctly compute the move fragments for a fn.\n+//\n+// Note that the code below is not actually incorrect; the\n+// `rustc_move_fragments` attribute is a hack that uses the error\n+// reporting mechanisms as a channel for communicating from the\n+// internals of the compiler.\n+\n+// This checks the handling of `_` within variants, especially when mixed\n+// with bindings.\n+\n+use self::Lonely::{Zero, One, Two};\n+\n+pub struct D { d: int }\n+impl Drop for D { fn drop(&mut self) { } }\n+\n+pub enum Lonely<X,Y> { Zero, One(X), Two(X, Y) }\n+\n+#[rustc_move_fragments]\n+pub fn test_match_bind_and_underscore(p: Lonely<D, D>) {\n+    //~^ ERROR                 parent_of_fragments: `$(local p)`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as Zero)`\n+    //~| ERROR                  assigned_leaf_path: `($(local p) as One)`\n+    //~| ERROR                 parent_of_fragments: `($(local p) as Two)`\n+    //~| ERROR                     moved_leaf_path: `($(local p) as Two).#0`\n+    //~| ERROR                    unmoved_fragment: `($(local p) as Two).#1`\n+    //~| ERROR                  assigned_leaf_path: `$(local left)`\n+\n+    match p {\n+        Zero(..) => {}\n+\n+        One(_) => {}       // <-- does not fragment `($(local p) as One)` ...\n+\n+        Two(left, _) => {} // <-- ... *does* fragment `($(local p) as Two)`.\n+    }\n+}\n+\n+pub fn main() { }"}, {"sha": "dc43dcb9b0e2313f9b53a75e267501457929a878", "filename": "src/test/compile-fail/move-fragments-4.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-4.rs?ref=5fbe0cac7c568774082755ecc098caba98352a1e", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we correctly compute the move fragments for a fn.\n+//\n+// Note that the code below is not actually incorrect; the\n+// `rustc_move_fragments` attribute is a hack that uses the error\n+// reporting mechanisms as a channel for communicating from the\n+// internals of the compiler.\n+\n+// This checks that a move of deep structure is properly tracked. (An\n+// early draft of the code did not properly traverse up through all of\n+// the parents of the leaf fragment.)\n+\n+pub struct D { d: int }\n+impl Drop for D { fn drop(&mut self) { } }\n+\n+pub struct Pair<X,Y> { x: X, y: Y }\n+\n+#[rustc_move_fragments]\n+pub fn test_move_substructure(pppp: Pair<Pair<Pair<Pair<D,D>, D>, D>, D>) {\n+    //~^ ERROR                 parent_of_fragments: `$(local pppp)`\n+    //~| ERROR                 parent_of_fragments: `$(local pppp).x`\n+    //~| ERROR                 parent_of_fragments: `$(local pppp).x.x`\n+    //~| ERROR                    unmoved_fragment: `$(local pppp).x.x.x`\n+    //~| ERROR                     moved_leaf_path: `$(local pppp).x.x.y`\n+    //~| ERROR                    unmoved_fragment: `$(local pppp).x.y`\n+    //~| ERROR                    unmoved_fragment: `$(local pppp).y`\n+    drop(pppp.x.x.y);\n+}\n+\n+pub fn main() { }"}, {"sha": "df069461ab74f810fbab21d09b2799fb9efe4e8a", "filename": "src/test/compile-fail/move-fragments-5.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-5.rs?ref=5fbe0cac7c568774082755ecc098caba98352a1e", "patch": "@@ -0,0 +1,92 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we correctly compute the move fragments for a fn.\n+//\n+// Note that the code below is not actually incorrect; the\n+// `rustc_move_fragments` attribute is a hack that uses the error\n+// reporting mechanisms as a channel for communicating from the\n+// internals of the compiler.\n+\n+// This is the first test that checks moving into local variables.\n+\n+pub struct D { d: int }\n+impl Drop for D { fn drop(&mut self) { } }\n+\n+pub struct Pair<X,Y> { x: X, y: Y }\n+\n+#[rustc_move_fragments]\n+pub fn test_move_field_to_local(p: Pair<D, D>) {\n+    //~^ ERROR                 parent_of_fragments: `$(local p)`\n+    //~| ERROR                     moved_leaf_path: `$(local p).x`\n+    //~| ERROR                    unmoved_fragment: `$(local p).y`\n+    //~| ERROR                  assigned_leaf_path: `$(local _x)`\n+    let _x = p.x;\n+}\n+\n+#[rustc_move_fragments]\n+pub fn test_move_field_to_local_to_local(p: Pair<D, D>) {\n+    //~^ ERROR                 parent_of_fragments: `$(local p)`\n+    //~| ERROR                     moved_leaf_path: `$(local p).x`\n+    //~| ERROR                    unmoved_fragment: `$(local p).y`\n+    //~| ERROR                  assigned_leaf_path: `$(local _x)`\n+    //~| ERROR                     moved_leaf_path: `$(local _x)`\n+    //~| ERROR                  assigned_leaf_path: `$(local _y)`\n+    let _x = p.x;\n+    let _y = _x;\n+}\n+\n+// In the following fn's `test_move_field_to_local_delayed` and\n+// `test_uninitialized_local` , the instrumentation reports that `_x`\n+// is moved. This is unlike `test_move_field_to_local`, where `_x` is\n+// just reported as an assigned_leaf_path. Presumably because this is\n+// how we represent that it did not have an initalizing expression at\n+// the binding site.\n+\n+#[rustc_move_fragments]\n+pub fn test_uninitialized_local(_p: Pair<D, D>) {\n+    //~^ ERROR                  assigned_leaf_path: `$(local _p)`\n+    //~| ERROR                     moved_leaf_path: `$(local _x)`\n+    let _x: D;\n+}\n+\n+#[rustc_move_fragments]\n+pub fn test_move_field_to_local_delayed(p: Pair<D, D>) {\n+    //~^ ERROR                 parent_of_fragments: `$(local p)`\n+    //~| ERROR                     moved_leaf_path: `$(local p).x`\n+    //~| ERROR                    unmoved_fragment: `$(local p).y`\n+    //~| ERROR                  assigned_leaf_path: `$(local _x)`\n+    //~| ERROR                     moved_leaf_path: `$(local _x)`\n+    let _x;\n+    _x = p.x;\n+}\n+\n+#[rustc_move_fragments]\n+pub fn test_move_field_mut_to_local(mut p: Pair<D, D>) {\n+    //~^ ERROR                 parent_of_fragments: `$(local mut p)`\n+    //~| ERROR                     moved_leaf_path: `$(local mut p).x`\n+    //~| ERROR                    unmoved_fragment: `$(local mut p).y`\n+    //~| ERROR                  assigned_leaf_path: `$(local _x)`\n+    let _x = p.x;\n+}\n+\n+#[rustc_move_fragments]\n+pub fn test_move_field_to_local_to_local_mut(p: Pair<D, D>) {\n+    //~^ ERROR                 parent_of_fragments: `$(local p)`\n+    //~| ERROR                     moved_leaf_path: `$(local p).x`\n+    //~| ERROR                    unmoved_fragment: `$(local p).y`\n+    //~| ERROR                  assigned_leaf_path: `$(local mut _x)`\n+    //~| ERROR                     moved_leaf_path: `$(local mut _x)`\n+    //~| ERROR                  assigned_leaf_path: `$(local _y)`\n+    let mut _x = p.x;\n+    let _y = _x;\n+}\n+\n+pub fn main() {}"}, {"sha": "b249d0d739789921f80a7c4e153e8835234a1768", "filename": "src/test/compile-fail/move-fragments-6.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-6.rs?ref=5fbe0cac7c568774082755ecc098caba98352a1e", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we correctly compute the move fragments for a fn.\n+//\n+// Note that the code below is not actually incorrect; the\n+// `rustc_move_fragments` attribute is a hack that uses the error\n+// reporting mechanisms as a channel for communicating from the\n+// internals of the compiler.\n+\n+// Test that moving into a field (i.e. overwriting it) fragments the\n+// receiver.\n+\n+use std::mem::drop;\n+\n+pub struct Pair<X,Y> { x: X, y: Y }\n+\n+#[rustc_move_fragments]\n+pub fn test_overwrite_uninit_field<Z>(z: Z) {\n+    //~^ ERROR                 parent_of_fragments: `$(local mut p)`\n+    //~| ERROR                  assigned_leaf_path: `$(local z)`\n+    //~| ERROR                     moved_leaf_path: `$(local z)`\n+    //~| ERROR                  assigned_leaf_path: `$(local mut p).x`\n+    //~| ERROR                    unmoved_fragment: `$(local mut p).y`\n+\n+    let mut p: Pair<Z,Z>;\n+    p.x = z;\n+}\n+\n+#[rustc_move_fragments]\n+pub fn test_overwrite_moved_field<Z>(mut p: Pair<Z,Z>, z: Z) {\n+    //~^ ERROR                 parent_of_fragments: `$(local mut p)`\n+    //~| ERROR                  assigned_leaf_path: `$(local z)`\n+    //~| ERROR                     moved_leaf_path: `$(local z)`\n+    //~| ERROR                  assigned_leaf_path: `$(local mut p).y`\n+    //~| ERROR                    unmoved_fragment: `$(local mut p).x`\n+\n+    drop(p);\n+    p.y = z;\n+}\n+\n+#[rustc_move_fragments]\n+pub fn test_overwrite_same_field<Z>(mut p: Pair<Z,Z>) {\n+    //~^ ERROR                 parent_of_fragments: `$(local mut p)`\n+    //~| ERROR                     moved_leaf_path: `$(local mut p).x`\n+    //~| ERROR                  assigned_leaf_path: `$(local mut p).x`\n+    //~| ERROR                    unmoved_fragment: `$(local mut p).y`\n+\n+    p.x = p.x;\n+}\n+\n+pub fn main() { }"}, {"sha": "6b2c77bcac15ed42c059652b65aa09f57da7857e", "filename": "src/test/compile-fail/move-fragments-7.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-7.rs?ref=5fbe0cac7c568774082755ecc098caba98352a1e", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we correctly compute the move fragments for a fn.\n+//\n+// Note that the code below is not actually incorrect; the\n+// `rustc_move_fragments` attribute is a hack that uses the error\n+// reporting mechanisms as a channel for communicating from the\n+// internals of the compiler.\n+\n+// Test that moving a Box<T> fragments its containing structure, for\n+// both moving out of the structure (i.e. reading `*p.x`) and writing\n+// into the container (i.e. writing `*p.x`).\n+\n+pub struct D { d: int }\n+impl Drop for D { fn drop(&mut self) { } }\n+\n+pub struct Pair<X,Y> { x: X, y: Y }\n+\n+#[rustc_move_fragments]\n+pub fn test_deref_box_field(p: Pair<Box<D>, Box<D>>) {\n+    //~^ ERROR                 parent_of_fragments: `$(local p)`\n+    //~| ERROR                 parent_of_fragments: `$(local p).x`\n+    //~| ERROR                     moved_leaf_path: `$(local p).x.*`\n+    //~| ERROR                    unmoved_fragment: `$(local p).y`\n+    //~| ERROR                  assigned_leaf_path: `$(local i)`\n+    let i : D = *p.x;\n+}\n+\n+#[rustc_move_fragments]\n+pub fn test_overwrite_deref_box_field(mut p: Pair<Box<D>, Box<D>>) {\n+    //~^ ERROR                 parent_of_fragments: `$(local mut p)`\n+    //~| ERROR                 parent_of_fragments: `$(local mut p).x`\n+    //~| ERROR                  assigned_leaf_path: `$(local mut p).x.*`\n+    //~| ERROR                    unmoved_fragment: `$(local mut p).y`\n+    *p.x = D { d: 3 };\n+}\n+\n+pub fn main() { }"}, {"sha": "40ab541128c3fe8f31f1342dd454848d13b25bd1", "filename": "src/test/compile-fail/move-fragments-8.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-8.rs?ref=5fbe0cac7c568774082755ecc098caba98352a1e", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we correctly compute the move fragments for a fn.\n+//\n+// Note that the code below is not actually incorrect; the\n+// `rustc_move_fragments` attribute is a hack that uses the error\n+// reporting mechanisms as a channel for communicating from the\n+// internals of the compiler.\n+\n+// Test that assigning into a `&T` within structured container does\n+// *not* fragment its containing structure.\n+//\n+// Compare against the `Box<T>` handling in move-fragments-7.rs. Note\n+// also that in this case we cannot do a move out of `&T`, so we only\n+// test writing `*p.x` here.\n+\n+pub struct D { d: int }\n+impl Drop for D { fn drop(&mut self) { } }\n+\n+pub struct Pair<X,Y> { x: X, y: Y }\n+\n+#[rustc_move_fragments]\n+pub fn test_overwrite_deref_ampersand_field<'a>(p: Pair<&'a mut D, &'a D>) {\n+    //~^ ERROR                 parent_of_fragments: `$(local p)`\n+    //~| ERROR                 parent_of_fragments: `$(local p).x`\n+    //~| ERROR                  assigned_leaf_path: `$(local p).x.*`\n+    //~| ERROR                    unmoved_fragment: `$(local p).y`\n+    *p.x = D { d: 3 };\n+}\n+\n+pub fn main() { }"}, {"sha": "ce05087f6597948ba9669df7a48263905f62acdc", "filename": "src/test/compile-fail/move-fragments-9.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbe0cac7c568774082755ecc098caba98352a1e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs?ref=5fbe0cac7c568774082755ecc098caba98352a1e", "patch": "@@ -0,0 +1,100 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test moving array structures, e.g. `[T, ..3]` as well as moving\n+// elements in and out of such arrays.\n+//\n+// Note also that the `test_move_array_then_overwrite` tests represent\n+// cases that we probably should make illegal.\n+\n+pub struct D { d: int }\n+impl Drop for D { fn drop(&mut self) { } }\n+\n+#[rustc_move_fragments]\n+pub fn test_move_array_via_return(a: [D, ..3]) -> [D, ..3] {\n+    //~^ ERROR                  assigned_leaf_path: `$(local a)`\n+    //~| ERROR                     moved_leaf_path: `$(local a)`\n+    return a;\n+}\n+\n+#[rustc_move_fragments]\n+pub fn test_move_array_into_recv(a: [D, ..3], recv: &mut [D, ..3]) {\n+    //~^ ERROR                 parent_of_fragments: `$(local recv)`\n+    //~| ERROR                  assigned_leaf_path: `$(local a)`\n+    //~| ERROR                     moved_leaf_path: `$(local a)`\n+    //~| ERROR                  assigned_leaf_path: `$(local recv).*`\n+    *recv = a;\n+}\n+\n+#[rustc_move_fragments]\n+pub fn test_extract_array_elem(a: [D, ..3], i: uint) -> D {\n+    //~^ ERROR                 parent_of_fragments: `$(local a)`\n+    //~| ERROR                  assigned_leaf_path: `$(local i)`\n+    //~| ERROR                     moved_leaf_path: `$(local a).[]`\n+    //~| ERROR                    unmoved_fragment: `$(allbutone $(local a).[])`\n+    a[i]\n+}\n+\n+#[rustc_move_fragments]\n+pub fn test_overwrite_array_elem(mut a: [D, ..3], i: uint, d: D) {\n+    //~^ ERROR                 parent_of_fragments: `$(local mut a)`\n+    //~| ERROR                  assigned_leaf_path: `$(local i)`\n+    //~| ERROR                  assigned_leaf_path: `$(local d)`\n+    //~| ERROR                     moved_leaf_path: `$(local d)`\n+    //~| ERROR                  assigned_leaf_path: `$(local mut a).[]`\n+    //~| ERROR                    unmoved_fragment: `$(allbutone $(local mut a).[])`\n+    a[i] = d;\n+}\n+\n+// FIXME (pnkfelix): Both test_move_array_then_overwrite_elem1 and\n+// test_move_array_then_overwrite_elem2 illustrate a behavior that\n+// we need to make illegal if we want to get rid of drop-flags.\n+// See RFC PR 320 for more discussion.\n+\n+#[rustc_move_fragments]\n+pub fn test_move_array_then_overwrite_elem1(mut a: [D, ..3], i: uint, recv: &mut [D, ..3], d: D) {\n+    //~^ ERROR                 parent_of_fragments: `$(local mut a)`\n+    //~| ERROR                 parent_of_fragments: `$(local recv)`\n+    //~| ERROR                  assigned_leaf_path: `$(local recv).*`\n+    //~| ERROR                  assigned_leaf_path: `$(local i)`\n+    //~| ERROR                  assigned_leaf_path: `$(local d)`\n+    //~| ERROR                     moved_leaf_path: `$(local d)`\n+    //~| ERROR                  assigned_leaf_path: `$(local mut a).[]`\n+    //~| ERROR                    unmoved_fragment: `$(allbutone $(local mut a).[])`\n+\n+    // This test covers the case where the array contents have been all moved away, but\n+    // we still need to deal with new initializing writes into the array.\n+    *recv = a;\n+    a[i] = d;\n+}\n+\n+#[rustc_move_fragments]\n+pub fn test_move_array_then_overwrite_elem2(mut a: [D, ..3], i: uint, j: uint,\n+                                            recv: &mut [D, ..3], d1: D, d2: D) {\n+    //~^^ ERROR                parent_of_fragments: `$(local mut a)`\n+    //~| ERROR                 parent_of_fragments: `$(local recv)`\n+    //~| ERROR                  assigned_leaf_path: `$(local recv).*`\n+    //~| ERROR                  assigned_leaf_path: `$(local i)`\n+    //~| ERROR                  assigned_leaf_path: `$(local j)`\n+    //~| ERROR                  assigned_leaf_path: `$(local d1)`\n+    //~| ERROR                  assigned_leaf_path: `$(local d2)`\n+    //~| ERROR                     moved_leaf_path: `$(local d1)`\n+    //~| ERROR                     moved_leaf_path: `$(local d2)`\n+    //~| ERROR                  assigned_leaf_path: `$(local mut a).[]`\n+    //~| ERROR                    unmoved_fragment: `$(allbutone $(local mut a).[])`\n+\n+    // This test covers the case where the array contents have been all moved away, but\n+    // we still need to deal with new initializing writes into the array.\n+    *recv = a;\n+    a[i] = d1;\n+    a[j] = d2;\n+}\n+\n+pub fn main() { }"}]}