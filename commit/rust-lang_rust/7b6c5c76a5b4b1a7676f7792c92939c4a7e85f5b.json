{"sha": "7b6c5c76a5b4b1a7676f7792c92939c4a7e85f5b", "node_id": "C_kwDOAAsO6NoAKDdiNmM1Yzc2YTViNGIxYTc2NzZmNzc5MmM5MjkzOWM0YTdlODVmNWI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-19T06:07:55Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-19T06:53:23Z"}, "message": "Move condition out of `maybe_recover_unexpected_comma`.", "tree": {"sha": "5c2d7324657c3f24c376cb282e0a3302498295e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c2d7324657c3f24c376cb282e0a3302498295e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b6c5c76a5b4b1a7676f7792c92939c4a7e85f5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b6c5c76a5b4b1a7676f7792c92939c4a7e85f5b", "html_url": "https://github.com/rust-lang/rust/commit/7b6c5c76a5b4b1a7676f7792c92939c4a7e85f5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b6c5c76a5b4b1a7676f7792c92939c4a7e85f5b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4347ed6786d2f37218af1a4c112bf1d66500c02", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4347ed6786d2f37218af1a4c112bf1d66500c02", "html_url": "https://github.com/rust-lang/rust/commit/d4347ed6786d2f37218af1a4c112bf1d66500c02"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "cbbaaa1ae376f9df90ae671fbc0710b5a41863df", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b6c5c76a5b4b1a7676f7792c92939c4a7e85f5b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6c5c76a5b4b1a7676f7792c92939c4a7e85f5b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=7b6c5c76a5b4b1a7676f7792c92939c4a7e85f5b", "patch": "@@ -1,7 +1,7 @@\n use super::pat::Expected;\n use super::{\n-    BlockMode, CommaRecoveryMode, Parser, PathStyle, RecoverComma, Restrictions, SemiColonMode,\n-    SeqSep, TokenExpectType, TokenType,\n+    BlockMode, CommaRecoveryMode, Parser, PathStyle, Restrictions, SemiColonMode, SeqSep,\n+    TokenExpectType, TokenType,\n };\n \n use crate::lexer::UnmatchedBrace;\n@@ -2580,10 +2580,9 @@ impl<'a> Parser<'a> {\n     crate fn maybe_recover_unexpected_comma(\n         &mut self,\n         lo: Span,\n-        rc: RecoverComma,\n         rt: CommaRecoveryMode,\n     ) -> PResult<'a, ()> {\n-        if rc == RecoverComma::No || self.token != token::Comma {\n+        if self.token != token::Comma {\n             return Ok(());\n         }\n "}, {"sha": "2ad3f3ec19d572a4b80d4426e07eeac487b918a2", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b6c5c76a5b4b1a7676f7792c92939c4a7e85f5b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6c5c76a5b4b1a7676f7792c92939c4a7e85f5b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=7b6c5c76a5b4b1a7676f7792c92939c4a7e85f5b", "patch": "@@ -101,7 +101,9 @@ impl<'a> Parser<'a> {\n \n         // Parse the first pattern (`p_0`).\n         let mut first_pat = self.parse_pat_no_top_alt(expected)?;\n-        self.maybe_recover_unexpected_comma(first_pat.span, rc, rt)?;\n+        if rc == RecoverComma::Yes {\n+            self.maybe_recover_unexpected_comma(first_pat.span, rt)?;\n+        }\n \n         // If the next token is not a `|`,\n         // this is not an or-pattern and we should exit here.\n@@ -141,7 +143,9 @@ impl<'a> Parser<'a> {\n                 err.span_label(lo, WHILE_PARSING_OR_MSG);\n                 err\n             })?;\n-            self.maybe_recover_unexpected_comma(pat.span, rc, rt)?;\n+            if rc == RecoverComma::Yes {\n+                self.maybe_recover_unexpected_comma(pat.span, rt)?;\n+            }\n             pats.push(pat);\n         }\n         let or_pattern_span = lo.to(self.prev_token.span);"}]}