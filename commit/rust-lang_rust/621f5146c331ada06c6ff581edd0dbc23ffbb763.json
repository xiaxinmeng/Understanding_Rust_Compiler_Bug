{"sha": "621f5146c331ada06c6ff581edd0dbc23ffbb763", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMWY1MTQ2YzMzMWFkYTA2YzZmZjU4MWVkZDBkYmMyM2ZmYmI3NjM=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-07-28T19:31:47Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-08-16T16:28:17Z"}, "message": "Handle SrcMgr diagnostics\n\nThis is how InlineAsm diagnostics with source information are\nreported now. Previously a separate InlineAsm diagnostic handler\nwas used.", "tree": {"sha": "fa4e263cfa1d8ef483416f249e1fd3efa59f88a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa4e263cfa1d8ef483416f249e1fd3efa59f88a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/621f5146c331ada06c6ff581edd0dbc23ffbb763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/621f5146c331ada06c6ff581edd0dbc23ffbb763", "html_url": "https://github.com/rust-lang/rust/commit/621f5146c331ada06c6ff581edd0dbc23ffbb763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/621f5146c331ada06c6ff581edd0dbc23ffbb763/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2967036f57675dbf3e00713d9d9d27956db068e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2967036f57675dbf3e00713d9d9d27956db068e4", "html_url": "https://github.com/rust-lang/rust/commit/2967036f57675dbf3e00713d9d9d27956db068e4"}], "stats": {"total": 172, "additions": 107, "deletions": 65}, "files": [{"sha": "791604a18273d62ef6567329572419f50c93c310", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 3, "deletions": 40, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/621f5146c331ada06c6ff581edd0dbc23ffbb763/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621f5146c331ada06c6ff581edd0dbc23ffbb763/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=621f5146c331ada06c6ff581edd0dbc23ffbb763", "patch": "@@ -296,39 +296,8 @@ unsafe extern \"C\" fn inline_asm_handler(diag: &SMDiagnostic, user: *const c_void\n     }\n     let (cgcx, _) = *(user as *const (&CodegenContext<LlvmCodegenBackend>, &Handler));\n \n-    // Recover the post-substitution assembly code from LLVM for better\n-    // diagnostics.\n-    let mut have_source = false;\n-    let mut buffer = String::new();\n-    let mut level = llvm::DiagnosticLevel::Error;\n-    let mut loc = 0;\n-    let mut ranges = [0; 8];\n-    let mut num_ranges = ranges.len() / 2;\n-    let msg = llvm::build_string(|msg| {\n-        buffer = llvm::build_string(|buffer| {\n-            have_source = llvm::LLVMRustUnpackSMDiagnostic(\n-                diag,\n-                msg,\n-                buffer,\n-                &mut level,\n-                &mut loc,\n-                ranges.as_mut_ptr(),\n-                &mut num_ranges,\n-            );\n-        })\n-        .expect(\"non-UTF8 inline asm\");\n-    })\n-    .expect(\"non-UTF8 SMDiagnostic\");\n-\n-    let source = have_source.then(|| {\n-        let mut spans = vec![InnerSpan::new(loc as usize, loc as usize)];\n-        for i in 0..num_ranges {\n-            spans.push(InnerSpan::new(ranges[i * 2] as usize, ranges[i * 2 + 1] as usize));\n-        }\n-        (buffer, spans)\n-    });\n-\n-    report_inline_asm(cgcx, msg, level, cookie, source);\n+    let smdiag = llvm::diagnostic::SrcMgrDiagnostic::unpack(diag);\n+    report_inline_asm(cgcx, smdiag.message, smdiag.level, cookie, smdiag.source);\n }\n \n unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void) {\n@@ -339,13 +308,7 @@ unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void\n \n     match llvm::diagnostic::Diagnostic::unpack(info) {\n         llvm::diagnostic::InlineAsm(inline) => {\n-            report_inline_asm(\n-                cgcx,\n-                llvm::twine_to_string(inline.message),\n-                inline.level,\n-                inline.cookie,\n-                None,\n-            );\n+            report_inline_asm(cgcx, inline.message, inline.level, inline.cookie, inline.source);\n         }\n \n         llvm::diagnostic::Optimization(opt) => {"}, {"sha": "36aa022d74658688c32ddf65766aaff40e90cb35", "filename": "compiler/rustc_codegen_llvm/src/llvm/diagnostic.rs", "status": "modified", "additions": 76, "deletions": 18, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/621f5146c331ada06c6ff581edd0dbc23ffbb763/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621f5146c331ada06c6ff581edd0dbc23ffbb763/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fdiagnostic.rs?ref=621f5146c331ada06c6ff581edd0dbc23ffbb763", "patch": "@@ -6,7 +6,8 @@ pub use self::OptimizationDiagnosticKind::*;\n use crate::value::Value;\n use libc::c_uint;\n \n-use super::{DiagnosticInfo, Twine};\n+use super::{DiagnosticInfo, SMDiagnostic};\n+use rustc_span::InnerSpan;\n \n #[derive(Copy, Clone)]\n pub enum OptimizationDiagnosticKind {\n@@ -86,36 +87,91 @@ impl OptimizationDiagnostic<'ll> {\n     }\n }\n \n-#[derive(Copy, Clone)]\n-pub struct InlineAsmDiagnostic<'ll> {\n+pub struct SrcMgrDiagnostic {\n+    pub level: super::DiagnosticLevel,\n+    pub message: String,\n+    pub source: Option<(String, Vec<InnerSpan>)>,\n+}\n+\n+impl SrcMgrDiagnostic {\n+    pub unsafe fn unpack(diag: &SMDiagnostic) -> SrcMgrDiagnostic {\n+        // Recover the post-substitution assembly code from LLVM for better\n+        // diagnostics.\n+        let mut have_source = false;\n+        let mut buffer = String::new();\n+        let mut level = super::DiagnosticLevel::Error;\n+        let mut loc = 0;\n+        let mut ranges = [0; 8];\n+        let mut num_ranges = ranges.len() / 2;\n+        let message = super::build_string(|message| {\n+            buffer = super::build_string(|buffer| {\n+                have_source = super::LLVMRustUnpackSMDiagnostic(\n+                    diag,\n+                    message,\n+                    buffer,\n+                    &mut level,\n+                    &mut loc,\n+                    ranges.as_mut_ptr(),\n+                    &mut num_ranges,\n+                );\n+            })\n+            .expect(\"non-UTF8 inline asm\");\n+        })\n+        .expect(\"non-UTF8 SMDiagnostic\");\n+\n+        SrcMgrDiagnostic {\n+            message,\n+            level,\n+            source: have_source.then(|| {\n+                let mut spans = vec![InnerSpan::new(loc as usize, loc as usize)];\n+                for i in 0..num_ranges {\n+                    spans.push(InnerSpan::new(ranges[i * 2] as usize, ranges[i * 2 + 1] as usize));\n+                }\n+                (buffer, spans)\n+            }),\n+        }\n+    }\n+}\n+\n+#[derive(Clone)]\n+pub struct InlineAsmDiagnostic {\n     pub level: super::DiagnosticLevel,\n     pub cookie: c_uint,\n-    pub message: &'ll Twine,\n-    pub instruction: Option<&'ll Value>,\n+    pub message: String,\n+    pub source: Option<(String, Vec<InnerSpan>)>,\n }\n \n-impl InlineAsmDiagnostic<'ll> {\n-    unsafe fn unpack(di: &'ll DiagnosticInfo) -> Self {\n+impl InlineAsmDiagnostic {\n+    unsafe fn unpackInlineAsm(di: &'ll DiagnosticInfo) -> Self {\n         let mut cookie = 0;\n         let mut message = None;\n-        let mut instruction = None;\n         let mut level = super::DiagnosticLevel::Error;\n \n-        super::LLVMRustUnpackInlineAsmDiagnostic(\n-            di,\n-            &mut level,\n-            &mut cookie,\n-            &mut message,\n-            &mut instruction,\n-        );\n+        super::LLVMRustUnpackInlineAsmDiagnostic(di, &mut level, &mut cookie, &mut message);\n \n-        InlineAsmDiagnostic { level, cookie, message: message.unwrap(), instruction }\n+        InlineAsmDiagnostic {\n+            level,\n+            cookie,\n+            message: super::twine_to_string(message.unwrap()),\n+            source: None,\n+        }\n+    }\n+\n+    unsafe fn unpackSrcMgr(di: &'ll DiagnosticInfo) -> Self {\n+        let mut cookie = 0;\n+        let smdiag = SrcMgrDiagnostic::unpack(super::LLVMRustGetSMDiagnostic(di, &mut cookie));\n+        InlineAsmDiagnostic {\n+            level: smdiag.level,\n+            cookie,\n+            message: smdiag.message,\n+            source: smdiag.source,\n+        }\n     }\n }\n \n pub enum Diagnostic<'ll> {\n     Optimization(OptimizationDiagnostic<'ll>),\n-    InlineAsm(InlineAsmDiagnostic<'ll>),\n+    InlineAsm(InlineAsmDiagnostic),\n     PGO(&'ll DiagnosticInfo),\n     Linker(&'ll DiagnosticInfo),\n     Unsupported(&'ll DiagnosticInfo),\n@@ -130,7 +186,7 @@ impl Diagnostic<'ll> {\n         let kind = super::LLVMRustGetDiagInfoKind(di);\n \n         match kind {\n-            Dk::InlineAsm => InlineAsm(InlineAsmDiagnostic::unpack(di)),\n+            Dk::InlineAsm => InlineAsm(InlineAsmDiagnostic::unpackInlineAsm(di)),\n \n             Dk::OptimizationRemark => {\n                 Optimization(OptimizationDiagnostic::unpack(OptimizationRemark, di))\n@@ -162,6 +218,8 @@ impl Diagnostic<'ll> {\n             Dk::Linker => Linker(di),\n             Dk::Unsupported => Unsupported(di),\n \n+            Dk::SrcMgr => InlineAsm(InlineAsmDiagnostic::unpackSrcMgr(di)),\n+\n             _ => UnknownDiagnostic(di),\n         }\n     }"}, {"sha": "3f2ed02d90df3d78889facb1131e0f86b76236e0", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/621f5146c331ada06c6ff581edd0dbc23ffbb763/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621f5146c331ada06c6ff581edd0dbc23ffbb763/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=621f5146c331ada06c6ff581edd0dbc23ffbb763", "patch": "@@ -490,6 +490,7 @@ pub enum DiagnosticKind {\n     PGOProfile,\n     Linker,\n     Unsupported,\n+    SrcMgr,\n }\n \n /// LLVMRustDiagnosticLevel\n@@ -2264,13 +2265,17 @@ extern \"C\" {\n         level_out: &mut DiagnosticLevel,\n         cookie_out: &mut c_uint,\n         message_out: &mut Option<&'a Twine>,\n-        instruction_out: &mut Option<&'a Value>,\n     );\n \n     #[allow(improper_ctypes)]\n     pub fn LLVMRustWriteDiagnosticInfoToString(DI: &DiagnosticInfo, s: &RustString);\n     pub fn LLVMRustGetDiagInfoKind(DI: &DiagnosticInfo) -> DiagnosticKind;\n \n+    pub fn LLVMRustGetSMDiagnostic(\n+        DI: &'a DiagnosticInfo,\n+        cookie_out: &mut c_uint,\n+    ) -> &'a SMDiagnostic;\n+\n     pub fn LLVMRustSetInlineAsmDiagnosticHandler(\n         C: &Context,\n         H: InlineAsmDiagHandler,"}, {"sha": "4edfed034018759dc78c7b37e2ec4ca162ba9e84", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/621f5146c331ada06c6ff581edd0dbc23ffbb763/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/621f5146c331ada06c6ff581edd0dbc23ffbb763/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=621f5146c331ada06c6ff581edd0dbc23ffbb763", "patch": "@@ -1114,15 +1114,13 @@ extern \"C\" void\n LLVMRustUnpackInlineAsmDiagnostic(LLVMDiagnosticInfoRef DI,\n                                   LLVMRustDiagnosticLevel *LevelOut,\n                                   unsigned *CookieOut,\n-                                  LLVMTwineRef *MessageOut,\n-                                  LLVMValueRef *InstructionOut) {\n+                                  LLVMTwineRef *MessageOut) {\n   // Undefined to call this not on an inline assembly diagnostic!\n   llvm::DiagnosticInfoInlineAsm *IA =\n       static_cast<llvm::DiagnosticInfoInlineAsm *>(unwrap(DI));\n \n   *CookieOut = IA->getLocCookie();\n   *MessageOut = wrap(&IA->getMsgStr());\n-  *InstructionOut = wrap(IA->getInstruction());\n \n   switch (IA->getSeverity()) {\n     case DS_Error:\n@@ -1165,6 +1163,7 @@ enum class LLVMRustDiagnosticKind {\n   PGOProfile,\n   Linker,\n   Unsupported,\n+  SrcMgr,\n };\n \n static LLVMRustDiagnosticKind toRust(DiagnosticKind Kind) {\n@@ -1193,6 +1192,10 @@ static LLVMRustDiagnosticKind toRust(DiagnosticKind Kind) {\n     return LLVMRustDiagnosticKind::Linker;\n   case DK_Unsupported:\n     return LLVMRustDiagnosticKind::Unsupported;\n+#if LLVM_VERSION_GE(13, 0)\n+  case DK_SrcMgr:\n+    return LLVMRustDiagnosticKind::SrcMgr;\n+#endif\n   default:\n     return (Kind >= DK_FirstRemark && Kind <= DK_LastRemark)\n                ? LLVMRustDiagnosticKind::OptimizationRemarkOther\n@@ -1280,6 +1283,17 @@ extern \"C\" void LLVMRustSetInlineAsmDiagnosticHandler(\n #endif\n }\n \n+extern \"C\" LLVMSMDiagnosticRef LLVMRustGetSMDiagnostic(\n+    LLVMDiagnosticInfoRef DI, unsigned *Cookie) {\n+#if LLVM_VERSION_GE(13, 0)\n+  llvm::DiagnosticInfoSrcMgr *SM = static_cast<llvm::DiagnosticInfoSrcMgr *>(unwrap(DI));\n+  *Cookie = SM->getLocCookie();\n+  return wrap(&SM->getSMDiag());\n+#else\n+  report_fatal_error(\"Shouldn't get called on older versions\");\n+#endif\n+}\n+\n extern \"C\" bool LLVMRustUnpackSMDiagnostic(LLVMSMDiagnosticRef DRef,\n                                            RustStringRef MessageOut,\n                                            RustStringRef BufferOut,"}, {"sha": "ea1b80cc9b06b69370de9792841abde0b15cc3ff", "filename": "src/test/ui/llvm-asm/issue-69092.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/621f5146c331ada06c6ff581edd0dbc23ffbb763/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621f5146c331ada06c6ff581edd0dbc23ffbb763/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs?ref=621f5146c331ada06c6ff581edd0dbc23ffbb763", "patch": "@@ -1,11 +1,13 @@\n // build-fail\n // ignore-emscripten no asm! support\n+// The error message differs slightly between LLVM versions\n+// min-llvm-version: 13.0\n // Regression test for #69092\n \n #![feature(llvm_asm)]\n #![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     unsafe { llvm_asm!(\".ascii \\\"Xen\\0\\\"\"); }\n-    //~^ ERROR: expected string in '.ascii' directive\n+    //~^ ERROR: expected string\n }"}, {"sha": "28c5fbbca3c6045dfc27318fa1aa8af4db456e28", "filename": "src/test/ui/llvm-asm/issue-69092.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/621f5146c331ada06c6ff581edd0dbc23ffbb763/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/621f5146c331ada06c6ff581edd0dbc23ffbb763/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr?ref=621f5146c331ada06c6ff581edd0dbc23ffbb763", "patch": "@@ -1,5 +1,5 @@\n-error: expected string in '.ascii' directive\n-  --> $DIR/issue-69092.rs:9:14\n+error: expected string\n+  --> $DIR/issue-69092.rs:11:14\n    |\n LL |     unsafe { llvm_asm!(\".ascii \\\"Xen\\0\\\"\"); }\n    |              ^"}]}