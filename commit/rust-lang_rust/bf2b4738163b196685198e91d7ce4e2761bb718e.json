{"sha": "bf2b4738163b196685198e91d7ce4e2761bb718e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMmI0NzM4MTYzYjE5NjY4NTE5OGU5MWQ3Y2U0ZTI3NjFiYjcxOGU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-28T04:06:46Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-29T23:01:08Z"}, "message": "Rename FullRange to RangeFull", "tree": {"sha": "84d15b7a762f4b8ef5517d05b5963a448e4d8414", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84d15b7a762f4b8ef5517d05b5963a448e4d8414"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf2b4738163b196685198e91d7ce4e2761bb718e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf2b4738163b196685198e91d7ce4e2761bb718e", "html_url": "https://github.com/rust-lang/rust/commit/bf2b4738163b196685198e91d7ce4e2761bb718e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf2b4738163b196685198e91d7ce4e2761bb718e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c64a96d385fb3b23c6744cf8d927c9c175936b5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c64a96d385fb3b23c6744cf8d927c9c175936b5f", "html_url": "https://github.com/rust-lang/rust/commit/c64a96d385fb3b23c6744cf8d927c9c175936b5f"}], "stats": {"total": 165, "additions": 134, "deletions": 31}, "files": [{"sha": "35591a5e9effb049a22b73ebff18e6a65072dc90", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=bf2b4738163b196685198e91d7ce4e2761bb718e", "patch": "@@ -60,7 +60,13 @@ use core::char::CharExt;\n use core::clone::Clone;\n use core::iter::AdditiveIterator;\n use core::iter::{Iterator, IteratorExt};\n-use core::ops::{FullRange, Index};\n+use core::ops::Index;\n+#[cfg(stage0)]\n+use core::ops::FullRange as RangeFull;\n+#[cfg(stage0)]\n+use core::ops::FullRange;\n+#[cfg(not(stage0))]\n+use core::ops::RangeFull;\n use core::option::Option::{self, Some, None};\n use core::slice::AsSlice;\n use core::str as core_str;\n@@ -408,7 +414,7 @@ Section: Trait implementations\n \n /// Any string that can be represented as a slice.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait StrExt: Index<FullRange, Output = str> {\n+pub trait StrExt: Index<RangeFull, Output = str> {\n     /// Escapes each char in `s` with `char::escape_default`.\n     #[unstable(feature = \"collections\",\n                reason = \"return type may change to be an iterator\")]"}, {"sha": "035529c7365c8c500a0de0536e4fd6e58bebf036", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=bf2b4738163b196685198e91d7ce4e2761bb718e", "patch": "@@ -877,6 +877,7 @@ impl ops::Index<ops::RangeFrom<uint>> for String {\n         &self[][*index]\n     }\n }\n+#[cfg(stage0)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ops::Index<ops::FullRange> for String {\n     type Output = str;\n@@ -885,6 +886,15 @@ impl ops::Index<ops::FullRange> for String {\n         unsafe { mem::transmute(self.vec.as_slice()) }\n     }\n }\n+#[cfg(not(stage0))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl ops::Index<ops::RangeFull> for String {\n+    type Output = str;\n+    #[inline]\n+    fn index(&self, _index: &ops::RangeFull) -> &str {\n+        unsafe { mem::transmute(self.vec.as_slice()) }\n+    }\n+}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ops::Deref for String {"}, {"sha": "5dd88dbb02524134f9445d58e2a35999fe078053", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=bf2b4738163b196685198e91d7ce4e2761bb718e", "patch": "@@ -1317,6 +1317,7 @@ impl<T> ops::Index<ops::RangeFrom<uint>> for Vec<T> {\n         self.as_slice().index(index)\n     }\n }\n+#[cfg(stage0)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::Index<ops::FullRange> for Vec<T> {\n     type Output = [T];\n@@ -1325,6 +1326,15 @@ impl<T> ops::Index<ops::FullRange> for Vec<T> {\n         self.as_slice()\n     }\n }\n+#[cfg(not(stage0))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> ops::Index<ops::RangeFull> for Vec<T> {\n+    type Output = [T];\n+    #[inline]\n+    fn index(&self, _index: &ops::RangeFull) -> &[T] {\n+        self.as_slice()\n+    }\n+}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<ops::Range<uint>> for Vec<T> {\n@@ -1350,6 +1360,7 @@ impl<T> ops::IndexMut<ops::RangeFrom<uint>> for Vec<T> {\n         self.as_mut_slice().index_mut(index)\n     }\n }\n+#[cfg(stage0)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<ops::FullRange> for Vec<T> {\n     type Output = [T];\n@@ -1358,6 +1369,15 @@ impl<T> ops::IndexMut<ops::FullRange> for Vec<T> {\n         self.as_mut_slice()\n     }\n }\n+#[cfg(not(stage0))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> ops::IndexMut<ops::RangeFull> for Vec<T> {\n+    type Output = [T];\n+    #[inline]\n+    fn index_mut(&mut self, _index: &ops::RangeFull) -> &mut [T] {\n+        self.as_mut_slice()\n+    }\n+}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::Deref for Vec<T> {"}, {"sha": "9e020eeb8a9c18492a69ae7cf6f8711086a3aae6", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=bf2b4738163b196685198e91d7ce4e2761bb718e", "patch": "@@ -947,18 +947,35 @@ pub trait IndexMut<Index: ?Sized> {\n }\n \n /// An unbounded range.\n+#[cfg(stage0)]\n #[derive(Copy, Clone, PartialEq, Eq)]\n #[lang=\"full_range\"]\n #[unstable(feature = \"core\", reason  = \"may be renamed to RangeFull\")]\n pub struct FullRange;\n \n+/// An unbounded range.\n+#[cfg(not(stage0))]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n+#[lang=\"range_full\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub struct RangeFull;\n+\n+#[cfg(stage0)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for FullRange {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(\"..\", fmt)\n     }\n }\n \n+#[cfg(not(stage0))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl fmt::Debug for RangeFull {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(\"..\", fmt)\n+    }\n+}\n+\n /// A (half-open) range which is bounded at both ends.\n #[derive(Copy, Clone, PartialEq, Eq)]\n #[lang=\"range\"]"}, {"sha": "40e66db3ae5b0eddc95b3fae19280026296851a3", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=bf2b4738163b196685198e91d7ce4e2761bb718e", "patch": "@@ -44,6 +44,10 @@ use iter::*;\n use marker::Copy;\n use num::Int;\n use ops::{FnMut, self, Index};\n+#[cfg(stage0)]\n+use ops::FullRange as RangeFull;\n+#[cfg(not(stage0))]\n+use ops::RangeFull;\n use option::Option;\n use option::Option::{None, Some};\n use result::Result;\n@@ -543,10 +547,10 @@ impl<T> ops::Index<ops::RangeFrom<uint>> for [T] {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> ops::Index<ops::FullRange> for [T] {\n+impl<T> ops::Index<RangeFull> for [T] {\n     type Output = [T];\n     #[inline]\n-    fn index(&self, _index: &ops::FullRange) -> &[T] {\n+    fn index(&self, _index: &RangeFull) -> &[T] {\n         self\n     }\n }\n@@ -584,10 +588,10 @@ impl<T> ops::IndexMut<ops::RangeFrom<uint>> for [T] {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> ops::IndexMut<ops::FullRange> for [T] {\n+impl<T> ops::IndexMut<RangeFull> for [T] {\n     type Output = [T];\n     #[inline]\n-    fn index_mut(&mut self, _index: &ops::FullRange) -> &mut [T] {\n+    fn index_mut(&mut self, _index: &RangeFull) -> &mut [T] {\n         self\n     }\n }\n@@ -750,6 +754,7 @@ impl<'a, T> ops::Index<ops::RangeFrom<uint>> for Iter<'a, T> {\n     }\n }\n \n+#[cfg(stage0)]\n #[unstable(feature = \"core\")]\n impl<'a, T> ops::Index<ops::FullRange> for Iter<'a, T> {\n     type Output = [T];\n@@ -758,6 +763,15 @@ impl<'a, T> ops::Index<ops::FullRange> for Iter<'a, T> {\n         self.as_slice()\n     }\n }\n+#[cfg(not(stage0))]\n+#[unstable(feature = \"core\")]\n+impl<'a, T> ops::Index<RangeFull> for Iter<'a, T> {\n+    type Output = [T];\n+    #[inline]\n+    fn index(&self, _index: &RangeFull) -> &[T] {\n+        self.as_slice()\n+    }\n+}\n \n impl<'a, T> Iter<'a, T> {\n     /// View the underlying data as a subslice of the original data.\n@@ -821,30 +835,30 @@ impl<'a, T> ops::Index<ops::Range<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index(&self, index: &ops::Range<uint>) -> &[T] {\n-        self.index(&ops::FullRange).index(index)\n+        self.index(&RangeFull).index(index)\n     }\n }\n #[unstable(feature = \"core\")]\n impl<'a, T> ops::Index<ops::RangeTo<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index(&self, index: &ops::RangeTo<uint>) -> &[T] {\n-        self.index(&ops::FullRange).index(index)\n+        self.index(&RangeFull).index(index)\n     }\n }\n #[unstable(feature = \"core\")]\n impl<'a, T> ops::Index<ops::RangeFrom<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index(&self, index: &ops::RangeFrom<uint>) -> &[T] {\n-        self.index(&ops::FullRange).index(index)\n+        self.index(&RangeFull).index(index)\n     }\n }\n #[unstable(feature = \"core\")]\n-impl<'a, T> ops::Index<ops::FullRange> for IterMut<'a, T> {\n+impl<'a, T> ops::Index<RangeFull> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n-    fn index(&self, _index: &ops::FullRange) -> &[T] {\n+    fn index(&self, _index: &RangeFull) -> &[T] {\n         make_slice!(T => &[T]: self.ptr, self.end)\n     }\n }\n@@ -854,30 +868,30 @@ impl<'a, T> ops::IndexMut<ops::Range<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::Range<uint>) -> &mut [T] {\n-        self.index_mut(&ops::FullRange).index_mut(index)\n+        self.index_mut(&RangeFull).index_mut(index)\n     }\n }\n #[unstable(feature = \"core\")]\n impl<'a, T> ops::IndexMut<ops::RangeTo<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::RangeTo<uint>) -> &mut [T] {\n-        self.index_mut(&ops::FullRange).index_mut(index)\n+        self.index_mut(&RangeFull).index_mut(index)\n     }\n }\n #[unstable(feature = \"core\")]\n impl<'a, T> ops::IndexMut<ops::RangeFrom<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::RangeFrom<uint>) -> &mut [T] {\n-        self.index_mut(&ops::FullRange).index_mut(index)\n+        self.index_mut(&RangeFull).index_mut(index)\n     }\n }\n #[unstable(feature = \"core\")]\n-impl<'a, T> ops::IndexMut<ops::FullRange> for IterMut<'a, T> {\n+impl<'a, T> ops::IndexMut<RangeFull> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n-    fn index_mut(&mut self, _index: &ops::FullRange) -> &mut [T] {\n+    fn index_mut(&mut self, _index: &RangeFull) -> &mut [T] {\n         make_slice!(T => &mut [T]: self.ptr, self.end)\n     }\n }"}, {"sha": "8495a03747e7b97977dda929ef85332fee5e296e", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=bf2b4738163b196685198e91d7ce4e2761bb718e", "patch": "@@ -1249,6 +1249,7 @@ mod traits {\n         }\n     }\n \n+    #[cfg(stage0)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl ops::Index<ops::FullRange> for str {\n         type Output = str;\n@@ -1257,6 +1258,15 @@ mod traits {\n             self\n         }\n     }\n+    #[cfg(not(stage0))]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl ops::Index<ops::RangeFull> for str {\n+        type Output = str;\n+        #[inline]\n+        fn index(&self, _index: &ops::RangeFull) -> &str {\n+            self\n+        }\n+    }\n }\n \n /// Any string that can be represented as a slice"}, {"sha": "16d2c68ad60a92a8b9737b3fcff9cbc5b7abaeb6", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=bf2b4738163b196685198e91d7ce4e2761bb718e", "patch": "@@ -269,7 +269,7 @@ lets_do_this! {\n     RangeStructLangItem,             \"range\",                   range_struct;\n     RangeFromStructLangItem,         \"range_from\",              range_from_struct;\n     RangeToStructLangItem,           \"range_to\",                range_to_struct;\n-    FullRangeStructLangItem,         \"full_range\",              full_range_struct;\n+    RangeFullStructLangItem,         \"range_full\",              range_full_struct;\n \n     UnsafeTypeLangItem,              \"unsafe\",                  unsafe_type;\n "}, {"sha": "1d86fa85d1e9a125a82e5ae8026daf7d606692d8", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=bf2b4738163b196685198e91d7ce4e2761bb718e", "patch": "@@ -1050,8 +1050,8 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                     (tcx.lang_items.range_to_struct(), fields, vec![node_id_type(bcx, end.id)])\n                 }\n                 _ => {\n-                    // Desugar to FullRange\n-                    (tcx.lang_items.full_range_struct(), vec![], vec![])\n+                    // Desugar to RangeFull\n+                    (tcx.lang_items.range_full_struct(), vec![], vec![])\n                 }\n             };\n "}, {"sha": "31ad1f31417eb197bc6bd9eefccbfe3bc7d1f758", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=bf2b4738163b196685198e91d7ce4e2761bb718e", "patch": "@@ -4095,8 +4095,8 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                 }\n             }\n             None => {\n-                // Neither start nor end => FullRange\n-                if let Some(did) = tcx.lang_items.full_range_struct() {\n+                // Neither start nor end => RangeFull\n+                if let Some(did) = tcx.lang_items.range_full_struct() {\n                     let substs = Substs::new_type(vec![], vec![]);\n                     ty::mk_struct(tcx, did, tcx.mk_substs(substs))\n                 } else {"}, {"sha": "18e2aa8c098a712de0c4cc00dd849224a22b0be3", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=bf2b4738163b196685198e91d7ce4e2761bb718e", "patch": "@@ -82,6 +82,7 @@ impl OsString {\n     }\n }\n \n+#[cfg(stage0)]\n impl ops::Index<ops::FullRange> for OsString {\n     type Output = OsStr;\n \n@@ -91,6 +92,16 @@ impl ops::Index<ops::FullRange> for OsString {\n     }\n }\n \n+#[cfg(not(stage0))]\n+impl ops::Index<ops::RangeFull> for OsString {\n+    type Output = OsStr;\n+\n+    #[inline]\n+    fn index(&self, _index: &ops::RangeFull) -> &OsStr {\n+        unsafe { mem::transmute(self.inner.as_slice()) }\n+    }\n+}\n+\n impl ops::Deref for OsString {\n     type Target = OsStr;\n "}, {"sha": "b5409da9c9ca4c8c6f68ebd8bc26b499aee45c8b", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=bf2b4738163b196685198e91d7ce4e2761bb718e", "patch": "@@ -68,6 +68,7 @@ use fmt;\n use iter::IteratorExt;\n use option::Option;\n use option::Option::{None, Some};\n+#[cfg(stage0)]\n use ops::FullRange;\n use str;\n use str::StrExt;"}, {"sha": "88db27013ac83c43003d7ca101cd8e1acc99c77d", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=bf2b4738163b196685198e91d7ce4e2761bb718e", "patch": "@@ -25,6 +25,7 @@ use iter::{AdditiveIterator, Extend};\n use iter::{Iterator, IteratorExt, Map, repeat};\n use mem;\n use option::Option::{self, Some, None};\n+#[cfg(stage0)]\n use ops::FullRange;\n use slice::{SliceExt, SliceConcatExt};\n use str::{SplitTerminator, FromStr, StrExt};"}, {"sha": "b3c4ffa5120e88eed17620067b13658f2c789471", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=bf2b4738163b196685198e91d7ce4e2761bb718e", "patch": "@@ -18,7 +18,7 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n-// TEMPORARY\n+#[cfg(stage0)]\n #[unstable(feature = \"std_misc\")]\n #[doc(no_inline)] pub use ops::FullRange;\n "}, {"sha": "fdcb0c19f30afbb1a59e0ecf3e481975cd943213", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=bf2b4738163b196685198e91d7ce4e2761bb718e", "patch": "@@ -680,6 +680,7 @@ impl ops::Index<ops::RangeTo<usize>> for Wtf8 {\n     }\n }\n \n+#[cfg(stage0)]\n impl ops::Index<ops::FullRange> for Wtf8 {\n     type Output = Wtf8;\n \n@@ -689,6 +690,16 @@ impl ops::Index<ops::FullRange> for Wtf8 {\n     }\n }\n \n+#[cfg(not(stage0))]\n+impl ops::Index<ops::RangeFull> for Wtf8 {\n+    type Output = Wtf8;\n+\n+    #[inline]\n+    fn index(&self, _range: &ops::RangeFull) -> &Wtf8 {\n+        self\n+    }\n+}\n+\n #[inline]\n fn decode_surrogate(second_byte: u8, third_byte: u8) -> u16 {\n     // The first byte is assumed to be 0xED"}, {"sha": "b9b1dd9afeefc63c7b3a6560cd41e48bbb72d69d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bf2b4738163b196685198e91d7ce4e2761bb718e", "patch": "@@ -2527,14 +2527,14 @@ impl<'a> Parser<'a> {\n                 }\n \n                 if found_dotdot || self.eat(&token::CloseDelim(token::Bracket)) {\n-                    // No expression, expand to a FullRange\n+                    // No expression, expand to a RangeFull\n                     // FIXME(#20516) It would be better to use a lang item or\n-                    // something for FullRange.\n+                    // something for RangeFull.\n                     hi = self.last_span.hi;\n \n                     let idents = vec![token::str_to_ident(\"core\"),\n                                       token::str_to_ident(\"ops\"),\n-                                      token::str_to_ident(\"FullRange\")];\n+                                      token::str_to_ident(\"RangeFull\")];\n                     let segments = idents.into_iter().map(|ident| {\n                         ast::PathSegment {\n                             identifier: ident,"}, {"sha": "4c8ba0dd51fe62529001ab53e71760bb054d1ad4", "filename": "src/test/run-pass/issue-21384.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Ftest%2Frun-pass%2Fissue-21384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Ftest%2Frun-pass%2Fissue-21384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21384.rs?ref=bf2b4738163b196685198e91d7ce4e2761bb718e", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use ::core::ops::RangeFull;\n+\n fn test<T : Clone>(arg: T) -> T {\n     arg.clone()\n }\n@@ -20,7 +22,7 @@ fn main() {\n     assert!(test(1..5) == (1..5));\n     assert!(test(..5) == (..5));\n     assert!(test(1..) == (1..));\n-    assert!(test(FullRange) == (FullRange));\n+    assert!(test(RangeFull) == (RangeFull));\n \n     // Check that ranges can still be used with non-clone limits\n     assert!((Test(1)..Test(5)) == (Test(1)..Test(5)));"}, {"sha": "81db525db28a2a3d40c7053d4fe69785f0a3c31a", "filename": "src/test/run-pass/slice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Ftest%2Frun-pass%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2b4738163b196685198e91d7ce4e2761bb718e/src%2Ftest%2Frun-pass%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice.rs?ref=bf2b4738163b196685198e91d7ce4e2761bb718e", "patch": "@@ -13,7 +13,7 @@\n #![feature(associated_types)]\n \n extern crate core;\n-use core::ops::{Index, IndexMut, Range, RangeTo, RangeFrom, FullRange};\n+use core::ops::{Index, IndexMut, Range, RangeTo, RangeFrom, RangeFull};\n \n static mut COUNT: uint = 0;\n \n@@ -40,9 +40,9 @@ impl Index<RangeFrom<Foo>> for Foo {\n         self\n     }\n }\n-impl Index<FullRange> for Foo {\n+impl Index<RangeFull> for Foo {\n     type Output = Foo;\n-    fn index(&self, _index: &FullRange) -> &Foo {\n+    fn index(&self, _index: &RangeFull) -> &Foo {\n         unsafe { COUNT += 1; }\n         self\n     }\n@@ -69,9 +69,9 @@ impl IndexMut<RangeFrom<Foo>> for Foo {\n         self\n     }\n }\n-impl IndexMut<FullRange> for Foo {\n+impl IndexMut<RangeFull> for Foo {\n     type Output = Foo;\n-    fn index_mut(&mut self, _index: &FullRange) -> &mut Foo {\n+    fn index_mut(&mut self, _index: &RangeFull) -> &mut Foo {\n         unsafe { COUNT += 1; }\n         self\n     }"}]}