{"sha": "6f1ac8d756a7a7c22641020926458058a51d5dd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMWFjOGQ3NTZhN2E3YzIyNjQxMDIwOTI2NDU4MDU4YTUxZDVkZDM=", "commit": {"author": {"name": "Sean Cross", "email": "sean@xobs.io", "date": "2021-04-03T05:45:02Z"}, "committer": {"name": "Sean Cross", "email": "sean@xobs.io", "date": "2021-04-03T06:39:40Z"}, "message": "rustc: target: add sysroot to rust_target_path\n\nThis enables placing a `target.json` file into the rust sysroot under\nthe target-specific directory.\n\nSigned-off-by: Sean Cross <sean@xobs.io>", "tree": {"sha": "33dec669d36e5181d4c02752ed1ad3aac7896988", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33dec669d36e5181d4c02752ed1ad3aac7896988"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f1ac8d756a7a7c22641020926458058a51d5dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f1ac8d756a7a7c22641020926458058a51d5dd3", "html_url": "https://github.com/rust-lang/rust/commit/6f1ac8d756a7a7c22641020926458058a51d5dd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f1ac8d756a7a7c22641020926458058a51d5dd3/comments", "author": {"login": "xobs", "id": 238325, "node_id": "MDQ6VXNlcjIzODMyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/238325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xobs", "html_url": "https://github.com/xobs", "followers_url": "https://api.github.com/users/xobs/followers", "following_url": "https://api.github.com/users/xobs/following{/other_user}", "gists_url": "https://api.github.com/users/xobs/gists{/gist_id}", "starred_url": "https://api.github.com/users/xobs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xobs/subscriptions", "organizations_url": "https://api.github.com/users/xobs/orgs", "repos_url": "https://api.github.com/users/xobs/repos", "events_url": "https://api.github.com/users/xobs/events{/privacy}", "received_events_url": "https://api.github.com/users/xobs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xobs", "id": 238325, "node_id": "MDQ6VXNlcjIzODMyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/238325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xobs", "html_url": "https://github.com/xobs", "followers_url": "https://api.github.com/users/xobs/followers", "following_url": "https://api.github.com/users/xobs/following{/other_user}", "gists_url": "https://api.github.com/users/xobs/gists{/gist_id}", "starred_url": "https://api.github.com/users/xobs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xobs/subscriptions", "organizations_url": "https://api.github.com/users/xobs/orgs", "repos_url": "https://api.github.com/users/xobs/repos", "events_url": "https://api.github.com/users/xobs/events{/privacy}", "received_events_url": "https://api.github.com/users/xobs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0d66b54fb3acc2125972b88ff543a2c04d14af5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d66b54fb3acc2125972b88ff543a2c04d14af5", "html_url": "https://github.com/rust-lang/rust/commit/a0d66b54fb3acc2125972b88ff543a2c04d14af5"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "f3da9a1bda108f89d1427c56cd59865fa260a589", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f1ac8d756a7a7c22641020926458058a51d5dd3/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1ac8d756a7a7c22641020926458058a51d5dd3/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=6f1ac8d756a7a7c22641020926458058a51d5dd3", "patch": "@@ -927,8 +927,8 @@ pub fn build_configuration(sess: &Session, mut user_cfg: CrateConfig) -> CrateCo\n     user_cfg\n }\n \n-pub fn build_target_config(opts: &Options, target_override: Option<Target>) -> Target {\n-    let target_result = target_override.map_or_else(|| Target::search(&opts.target_triple), Ok);\n+pub fn build_target_config(opts: &Options, target_override: Option<Target>, sysroot: &PathBuf) -> Target {\n+    let target_result = target_override.map_or_else(|| Target::search(&opts.target_triple, sysroot), Ok);\n     let target = target_result.unwrap_or_else(|e| {\n         early_error(\n             opts.error_format,"}, {"sha": "08a7447008ae7eecbf93f74dcb4a08c118c704cd", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f1ac8d756a7a7c22641020926458058a51d5dd3/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1ac8d756a7a7c22641020926458058a51d5dd3/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=6f1ac8d756a7a7c22641020926458058a51d5dd3", "patch": "@@ -1301,9 +1301,14 @@ pub fn build_session(\n         DiagnosticOutput::Raw(write) => Some(write),\n     };\n \n-    let target_cfg = config::build_target_config(&sopts, target_override);\n+    let sysroot = match &sopts.maybe_sysroot {\n+        Some(sysroot) => sysroot.clone(),\n+        None => filesearch::get_or_default_sysroot(),\n+    };\n+\n+    let target_cfg = config::build_target_config(&sopts, target_override, &sysroot);\n     let host_triple = TargetTriple::from_triple(config::host_triple());\n-    let host = Target::search(&host_triple).unwrap_or_else(|e| {\n+    let host = Target::search(&host_triple, &sysroot).unwrap_or_else(|e| {\n         early_error(sopts.error_format, &format!(\"Error loading host specification: {}\", e))\n     });\n \n@@ -1350,10 +1355,6 @@ pub fn build_session(\n \n     let mut parse_sess = ParseSess::with_span_handler(span_diagnostic, source_map);\n     parse_sess.assume_incomplete_release = sopts.debugging_opts.assume_incomplete_release;\n-    let sysroot = match &sopts.maybe_sysroot {\n-        Some(sysroot) => sysroot.clone(),\n-        None => filesearch::get_or_default_sysroot(),\n-    };\n \n     let host_triple = config::host_triple();\n     let target_triple = sopts.target_triple.triple();"}, {"sha": "27653d3c331cb088434fbbc3fa76c7409536afe9", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f1ac8d756a7a7c22641020926458058a51d5dd3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1ac8d756a7a7c22641020926458058a51d5dd3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=6f1ac8d756a7a7c22641020926458058a51d5dd3", "patch": "@@ -1747,13 +1747,15 @@ impl Target {\n     }\n \n     /// Search RUST_TARGET_PATH for a JSON file specifying the given target\n-    /// triple. Note that it could also just be a bare filename already, so also\n+    /// triple. If none is found, look for a file called `target.json` inside\n+    /// the sysroot under the target-triple's `rustlib` directory.\n+    /// Note that it could also just be a bare filename already, so also\n     /// check for that. If one of the hardcoded targets we know about, just\n     /// return it directly.\n     ///\n     /// The error string could come from any of the APIs called, including\n     /// filesystem access and JSON decoding.\n-    pub fn search(target_triple: &TargetTriple) -> Result<Target, String> {\n+    pub fn search(target_triple: &TargetTriple, sysroot: &PathBuf) -> Result<Target, String> {\n         use rustc_serialize::json;\n         use std::env;\n         use std::fs;\n@@ -1780,14 +1782,24 @@ impl Target {\n \n                 let target_path = env::var_os(\"RUST_TARGET_PATH\").unwrap_or_default();\n \n-                // FIXME 16351: add a sane default search path?\n-\n                 for dir in env::split_paths(&target_path) {\n                     let p = dir.join(&path);\n                     if p.is_file() {\n                         return load_file(&p);\n                     }\n                 }\n+\n+                // Additionally look in the sysroot under `lib/rustlib/<triple>/target.json`\n+                // as a fallback.\n+                let p = sysroot\n+                    .join(\"lib\")\n+                    .join(\"rustlib\")\n+                    .join(&target_triple)\n+                    .join(\"target.json\");\n+                if p.is_file() {\n+                    return load_file(&p);\n+                }\n+\n                 Err(format!(\"Could not find specification for target {:?}\", target_triple))\n             }\n             TargetTriple::TargetPath(ref target_path) => {"}]}