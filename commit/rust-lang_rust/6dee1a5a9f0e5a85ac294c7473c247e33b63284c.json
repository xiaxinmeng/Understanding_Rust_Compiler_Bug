{"sha": "6dee1a5a9f0e5a85ac294c7473c247e33b63284c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZWUxYTVhOWYwZTVhODVhYzI5NGM3NDczYzI0N2UzM2I2MzI4NGM=", "commit": {"author": {"name": "Jeremy Fitzhardinge", "email": "jeremy@goop.org", "date": "2019-11-18T06:56:13Z"}, "committer": {"name": "Jeremy Fitzhardinge", "email": "jsgf@fb.com", "date": "2019-11-19T19:01:52Z"}, "message": "Add unix::process::CommandExt::arg0\n\nThis allows argv[0] to be overridden on the executable's command-line. This also makes the program\nexecuted independent of argv[0].\n\nDoes Fuchsia have the same semantics?\n\nAddresses: #66510", "tree": {"sha": "5b83f12570bea1b09ce9d53b56798dd2b5c28a04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b83f12570bea1b09ce9d53b56798dd2b5c28a04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dee1a5a9f0e5a85ac294c7473c247e33b63284c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dee1a5a9f0e5a85ac294c7473c247e33b63284c", "html_url": "https://github.com/rust-lang/rust/commit/6dee1a5a9f0e5a85ac294c7473c247e33b63284c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dee1a5a9f0e5a85ac294c7473c247e33b63284c/comments", "author": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "361791bb5fdd714bdc39f8af835f6468dd18331d", "url": "https://api.github.com/repos/rust-lang/rust/commits/361791bb5fdd714bdc39f8af835f6468dd18331d", "html_url": "https://github.com/rust-lang/rust/commit/361791bb5fdd714bdc39f8af835f6468dd18331d"}], "stats": {"total": 78, "additions": 68, "deletions": 10}, "files": [{"sha": "0e95f97486b2433b9c23de8dcc639684e3e6a4ba", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6dee1a5a9f0e5a85ac294c7473c247e33b63284c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dee1a5a9f0e5a85ac294c7473c247e33b63284c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=6dee1a5a9f0e5a85ac294c7473c247e33b63284c", "patch": "@@ -2,6 +2,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use crate::ffi::OsStr;\n use crate::io;\n use crate::os::unix::io::{FromRawFd, RawFd, AsRawFd, IntoRawFd};\n use crate::process;\n@@ -103,6 +104,14 @@ pub trait CommandExt {\n     /// cross-platform `spawn` instead.\n     #[stable(feature = \"process_exec2\", since = \"1.9.0\")]\n     fn exec(&mut self) -> io::Error;\n+\n+    /// Set executable argument\n+    ///\n+    /// Set the first process argument, `argv[0]`, to something other than the\n+    /// default executable path.\n+    #[unstable(feature = \"process_set_argv0\", issue = \"66510\")]\n+    fn arg0<S>(&mut self, arg: S) -> &mut process::Command\n+        where S: AsRef<OsStr>;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -127,6 +136,13 @@ impl CommandExt for process::Command {\n     fn exec(&mut self) -> io::Error {\n         self.as_inner_mut().exec(sys::process::Stdio::Inherit)\n     }\n+\n+    fn arg0<S>(&mut self, arg: S) -> &mut process::Command\n+        where S: AsRef<OsStr>\n+    {\n+        self.as_inner_mut().set_arg_0(arg.as_ref());\n+        self\n+    }\n }\n \n /// Unix-specific extensions to [`process::ExitStatus`]."}, {"sha": "0e6f96bb228926a848b19cfa1b06898dad5235c2", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6dee1a5a9f0e5a85ac294c7473c247e33b63284c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dee1a5a9f0e5a85ac294c7473c247e33b63284c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=6dee1a5a9f0e5a85ac294c7473c247e33b63284c", "patch": "@@ -1,6 +1,6 @@\n use crate::os::unix::prelude::*;\n \n-use crate::ffi::{OsString, OsStr, CString};\n+use crate::ffi::{OsString, OsStr, CString, CStr};\n use crate::fmt;\n use crate::io;\n use crate::ptr;\n@@ -11,10 +11,7 @@ use crate::sys_common::process::CommandEnv;\n use crate::collections::BTreeMap;\n \n #[cfg(not(target_os = \"fuchsia\"))]\n-use {\n-    crate::ffi::CStr,\n-    crate::sys::fs::OpenOptions,\n-};\n+use crate::sys::fs::OpenOptions;\n \n use libc::{c_int, gid_t, uid_t, c_char, EXIT_SUCCESS, EXIT_FAILURE};\n \n@@ -135,8 +132,8 @@ impl Command {\n         let program = os2c(program, &mut saw_nul);\n         Command {\n             argv: Argv(vec![program.as_ptr(), ptr::null()]),\n+            args: vec![program.clone()],\n             program,\n-            args: Vec::new(),\n             env: Default::default(),\n             cwd: None,\n             uid: None,\n@@ -149,11 +146,19 @@ impl Command {\n         }\n     }\n \n+    pub fn set_arg_0(&mut self, arg: &OsStr) {\n+        // Set a new arg0\n+        let arg = os2c(arg, &mut self.saw_nul);\n+        debug_assert!(self.argv.0.len() > 1);\n+        self.argv.0[0] = arg.as_ptr();\n+        self.args[0] = arg;\n+    }\n+\n     pub fn arg(&mut self, arg: &OsStr) {\n         // Overwrite the trailing NULL pointer in `argv` and then add a new null\n         // pointer.\n         let arg = os2c(arg, &mut self.saw_nul);\n-        self.argv.0[self.args.len() + 1] = arg.as_ptr();\n+        self.argv.0[self.args.len()] = arg.as_ptr();\n         self.argv.0.push(ptr::null());\n \n         // Also make sure we keep track of the owned value to schedule a\n@@ -178,6 +183,10 @@ impl Command {\n         &self.argv.0\n     }\n \n+    pub fn get_program(&self) -> &CStr {\n+        &*self.program\n+    }\n+\n     #[allow(dead_code)]\n     pub fn get_cwd(&self) -> &Option<CString> {\n         &self.cwd"}, {"sha": "486c12f9bf88ab0c9558cb62fe4251e52220328b", "filename": "src/libstd/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dee1a5a9f0e5a85ac294c7473c247e33b63284c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dee1a5a9f0e5a85ac294c7473c247e33b63284c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=6dee1a5a9f0e5a85ac294c7473c247e33b63284c", "patch": "@@ -110,7 +110,7 @@ impl Command {\n             ZX_HANDLE_INVALID,\n             FDIO_SPAWN_CLONE_JOB | FDIO_SPAWN_CLONE_LDSVC | FDIO_SPAWN_CLONE_NAMESPACE\n             | FDIO_SPAWN_CLONE_ENVIRON,  // this is ignored when envp is non-null\n-            self.get_argv()[0], self.get_argv().as_ptr(), envp,\n+            self.get_program().as_ptr(), self.get_argv().as_ptr(), envp,\n             actions.len() as size_t, actions.as_ptr(),\n             &mut process_handle,\n             ptr::null_mut(),"}, {"sha": "45e4d195f17d2ad18cc2cc9956b819e6725210d5", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6dee1a5a9f0e5a85ac294c7473c247e33b63284c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dee1a5a9f0e5a85ac294c7473c247e33b63284c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=6dee1a5a9f0e5a85ac294c7473c247e33b63284c", "patch": "@@ -248,7 +248,7 @@ impl Command {\n             *sys::os::environ() = envp.as_ptr();\n         }\n \n-        libc::execvp(self.get_argv()[0], self.get_argv().as_ptr());\n+        libc::execvp(self.get_program().as_ptr(), self.get_argv().as_ptr());\n         Err(io::Error::last_os_error())\n     }\n \n@@ -373,7 +373,7 @@ impl Command {\n                 .unwrap_or_else(|| *sys::os::environ() as *const _);\n             let ret = libc::posix_spawnp(\n                 &mut p.pid,\n-                self.get_argv()[0],\n+                self.get_program().as_ptr(),\n                 file_actions.0.as_ptr(),\n                 attrs.0.as_ptr(),\n                 self.get_argv().as_ptr() as *const _,"}, {"sha": "56a9fb4d39125d9855543368fb11f603fe18e2a4", "filename": "src/test/ui/command-argv0.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6dee1a5a9f0e5a85ac294c7473c247e33b63284c/src%2Ftest%2Fui%2Fcommand-argv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dee1a5a9f0e5a85ac294c7473c247e33b63284c/src%2Ftest%2Fui%2Fcommand-argv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand-argv0.rs?ref=6dee1a5a9f0e5a85ac294c7473c247e33b63284c", "patch": "@@ -0,0 +1,33 @@\n+// run-pass\n+\n+// ignore-windows - this is a unix-specific test\n+// ignore-cloudabi no processes\n+// ignore-emscripten no processes\n+// ignore-sgx no processes\n+#![feature(process_set_argv0)]\n+\n+use std::env;\n+use std::os::unix::process::CommandExt;\n+use std::process::Command;\n+\n+fn main() {\n+    let args: Vec<_> = env::args().collect();\n+\n+    if args.len() > 1 {\n+        assert_eq!(args[1], \"doing-test\");\n+        assert_eq!(args[0], \"i have a silly name\");\n+\n+        println!(\"passed\");\n+        return;\n+    }\n+\n+    let output =\n+        Command::new(&args[0]).arg(\"doing-test\").arg0(\"i have a silly name\").output().unwrap();\n+    assert!(\n+        output.stderr.is_empty(),\n+        \"Non-empty stderr: {}\",\n+        String::from_utf8_lossy(&output.stderr)\n+    );\n+    assert!(output.status.success());\n+    assert_eq!(output.stdout, b\"passed\\n\");\n+}"}]}