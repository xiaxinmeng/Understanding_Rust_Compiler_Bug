{"sha": "6b018444081a6a2940889bec495acea923e365cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMDE4NDQ0MDgxYTZhMjk0MDg4OWJlYzQ5NWFjZWE5MjNlMzY1Y2Y=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-04-08T13:28:00Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-04-08T13:28:00Z"}, "message": "Generalize initial \"not const\" assignments", "tree": {"sha": "16aa08c1058726f194e85277fa33698993ab30eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16aa08c1058726f194e85277fa33698993ab30eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b018444081a6a2940889bec495acea923e365cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b018444081a6a2940889bec495acea923e365cf", "html_url": "https://github.com/rust-lang/rust/commit/6b018444081a6a2940889bec495acea923e365cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b018444081a6a2940889bec495acea923e365cf/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8e9da7c0885f624d186499f7521bae71381a97c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8e9da7c0885f624d186499f7521bae71381a97c", "html_url": "https://github.com/rust-lang/rust/commit/b8e9da7c0885f624d186499f7521bae71381a97c"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "ddf963c7fa9b5bef357f0ab5c1bf176f3471f542", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6b018444081a6a2940889bec495acea923e365cf/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b018444081a6a2940889bec495acea923e365cf/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=6b018444081a6a2940889bec495acea923e365cf", "patch": "@@ -44,8 +44,8 @@ pub enum TempState {\n impl TempState {\n     pub fn is_promotable(&self) -> bool {\n         debug!(\"is_promotable: self={:?}\", self);\n-        if let TempState::Defined { uses, .. } = *self {\n-            uses > 0\n+        if let TempState::Defined { .. } = *self {\n+            true\n         } else {\n             false\n         }\n@@ -80,9 +80,14 @@ impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n                    context: PlaceContext<'tcx>,\n                    location: Location) {\n         debug!(\"visit_local: index={:?} context={:?} location={:?}\", index, context, location);\n-        // We're only interested in temporaries\n-        if self.mir.local_kind(index) != LocalKind::Temp {\n-            return;\n+        // We're only interested in temporaries and the return place\n+        match self.mir.local_kind(index) {\n+            | LocalKind::Temp\n+            | LocalKind::ReturnPointer\n+            => {},\n+            | LocalKind::Arg\n+            | LocalKind::Var\n+            => return,\n         }\n \n         // Ignore drops, if the temp gets promoted,"}, {"sha": "6272425012b98112a2182067e01be38601ed7a2b", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6b018444081a6a2940889bec495acea923e365cf/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b018444081a6a2940889bec495acea923e365cf/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=6b018444081a6a2940889bec495acea923e365cf", "patch": "@@ -631,26 +631,21 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n         };\n \n         for (local, decl) in mir.local_decls.iter_enumerated() {\n-            match mir.local_kind(local) {\n-                LocalKind::Arg => {\n-                    let qualifs = cx.qualifs_in_any_value_of_ty(decl.ty);\n-                    for (per_local, qualif) in &mut cx.per_local.as_mut().zip(qualifs).0 {\n-                        if *qualif {\n-                            per_local.insert(local);\n-                        }\n+            if let LocalKind::Arg = mir.local_kind(local) {\n+                let qualifs = cx.qualifs_in_any_value_of_ty(decl.ty);\n+                for (per_local, qualif) in &mut cx.per_local.as_mut().zip(qualifs).0 {\n+                    if *qualif {\n+                        per_local.insert(local);\n                     }\n-                    cx.per_local[IsNotConst].insert(local);\n-                }\n-\n-                LocalKind::Var if mode == Mode::Fn => {\n-                    cx.per_local[IsNotConst].insert(local);\n-                }\n-\n-                LocalKind::Temp if !temps[local].is_promotable() => {\n-                    cx.per_local[IsNotConst].insert(local);\n                 }\n-\n-                _ => {}\n+            }\n+            if !temps[local].is_promotable() {\n+                cx.per_local[IsNotConst].insert(local);\n+            }\n+            if let LocalKind::Var = mir.local_kind(local) {\n+                // Sanity check to prevent implicit and explicit promotion of\n+                // named locals\n+                assert!(cx.per_local[IsNotConst].contains(local));\n             }\n         }\n "}]}