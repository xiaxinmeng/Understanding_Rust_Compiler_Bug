{"sha": "a1fa2681cfa85c4a5513249339abbd31ff561449", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZmEyNjgxY2ZhODVjNGE1NTEzMjQ5MzM5YWJiZDMxZmY1NjE0NDk=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-04T16:03:01Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:23:59Z"}, "message": "Update to toml 0.4", "tree": {"sha": "bcae7c2a36f5552d8e3acfc4e8502eb1146fba23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcae7c2a36f5552d8e3acfc4e8502eb1146fba23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1fa2681cfa85c4a5513249339abbd31ff561449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1fa2681cfa85c4a5513249339abbd31ff561449", "html_url": "https://github.com/rust-lang/rust/commit/a1fa2681cfa85c4a5513249339abbd31ff561449", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1fa2681cfa85c4a5513249339abbd31ff561449/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d360af45bb2dda3f0f0fddbb130967dc06a2dd54", "url": "https://api.github.com/repos/rust-lang/rust/commits/d360af45bb2dda3f0f0fddbb130967dc06a2dd54", "html_url": "https://github.com/rust-lang/rust/commit/d360af45bb2dda3f0f0fddbb130967dc06a2dd54"}], "stats": {"total": 150, "additions": 69, "deletions": 81}, "files": [{"sha": "35d77eda951102d2cf89d3f5037881f841608daa", "filename": "src/Cargo.lock", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=a1fa2681cfa85c4a5513249339abbd31ff561449", "patch": "@@ -136,11 +136,10 @@ dependencies = [\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -156,8 +155,9 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"build-manifest\"\n version = \"0.1.0\"\n dependencies = [\n- \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1871,14 +1871,6 @@ dependencies = [\n name = \"tidy\"\n version = \"0.1.0\"\n \n-[[package]]\n-name = \"toml\"\n-version = \"0.1.30\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"toml\"\n version = \"0.2.1\"\n@@ -2173,7 +2165,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9539db560102d1cef46b8b78ce737ff0bb64e7e18d35b2a5688f7d097d0ff03\"\n \"checksum thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8576dbbfcaef9641452d5cf0df9b0e7eeab7694956dd33bb61515fb8f18cfdd5\"\n \"checksum thread_local 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1697c4b57aeeb7a536b647165a2825faddffb1d3bad386d507709bd51a90bb14\"\n-\"checksum toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0590d72182e50e879c4da3b11c6488dae18fccb1ae0c7a3eda18e16795844796\"\n \"checksum toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"736b60249cb25337bc196faa43ee12c705e426f3d55c214d73a4e7be06f92cb4\"\n \"checksum toml 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b0601da6c97135c8d330c7a13a013ca6cd4143221b01de2f8d4edc50a9e551c7\"\n \"checksum typed-arena 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5934776c3ac1bea4a9d56620d6bf2d483b20d394e49581db40f187e1118ff667\""}, {"sha": "00004d71aac250f6bedbd48c940647af49fa9652", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=a1fa2681cfa85c4a5513249339abbd31ff561449", "patch": "@@ -33,11 +33,10 @@ build_helper = { path = \"../build_helper\" }\n cmake = \"0.1.23\"\n filetime = \"0.1\"\n num_cpus = \"1.0\"\n-toml = \"0.1\"\n getopts = \"0.2\"\n-rustc-serialize = \"0.3\"\n gcc = \"0.3.50\"\n libc = \"0.2\"\n-serde = \"1.0\"\n-serde_json = \"1.0\"\n-serde_derive = \"1.0\"\n+serde = \"1.0.8\"\n+serde_derive = \"1.0.8\"\n+serde_json = \"1.0.2\"\n+toml = \"0.4\""}, {"sha": "e284e4b9d0ac7cef00fa93bae782adb6b0bfc6d5", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=a1fa2681cfa85c4a5513249339abbd31ff561449", "patch": "@@ -25,6 +25,7 @@ use cache::{Cache, Key};\n use check;\n use flags::Subcommand;\n use doc;\n+use tool;\n \n pub use Compiler;\n \n@@ -144,7 +145,10 @@ impl<'a> Builder<'a> {\n         let builder = &builder;\n         match builder.kind {\n             Kind::Build => check!(builder, paths, compile::Std, compile::Test, compile::Rustc,\n-                compile::StartupObjects),\n+                compile::StartupObjects, tool::BuildManifest, tool::Rustbook, tool::ErrorIndex,\n+                tool::UnstableBookGen, tool::Tidy, tool::Linkchecker, tool::CargoTest,\n+                tool::Compiletest, tool::RemoteTestServer, tool::RemoteTestClient,\n+                tool::RustInstaller, tool::Cargo, tool::Rls),\n             Kind::Test => check!(builder, paths, check::Tidy, check::Bootstrap, check::Compiletest,\n                 check::Krate, check::KrateLibrustc, check::Linkcheck, check::Cargotest,\n                 check::Cargo, check::Docs, check::ErrorIndex, check::Distcheck),"}, {"sha": "810a9924765d8b955f3bb2bc856047e842a433a2", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 33, "deletions": 31, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=a1fa2681cfa85c4a5513249339abbd31ff561449", "patch": "@@ -21,8 +21,7 @@ use std::path::PathBuf;\n use std::process;\n \n use num_cpus;\n-use rustc_serialize::Decodable;\n-use toml::{Parser, Decoder, Value};\n+use toml;\n use util::{exe, push_exe_path};\n \n /// Global configuration for the entire build and/or bootstrap.\n@@ -138,7 +137,9 @@ pub struct Target {\n /// This structure uses `Decodable` to automatically decode a TOML configuration\n /// file into this format, and then this is traversed and written into the above\n /// `Config` structure.\n-#[derive(RustcDecodable, Default)]\n+#[derive(Deserialize, Default)]\n+#[serde(deny_unknown_fields)]\n+#[serde(rename_all = \"kebab-case\")]\n struct TomlConfig {\n     build: Option<Build>,\n     install: Option<Install>,\n@@ -149,10 +150,14 @@ struct TomlConfig {\n }\n \n /// TOML representation of various global build decisions.\n-#[derive(RustcDecodable, Default, Clone)]\n+#[derive(Deserialize, Default, Clone)]\n+#[serde(deny_unknown_fields)]\n+#[serde(rename_all = \"kebab-case\")]\n struct Build {\n     build: Option<String>,\n+    #[serde(default)]\n     host: Vec<String>,\n+    #[serde(default)]\n     target: Vec<String>,\n     cargo: Option<String>,\n     rustc: Option<String>,\n@@ -174,7 +179,9 @@ struct Build {\n }\n \n /// TOML representation of various global install decisions.\n-#[derive(RustcDecodable, Default, Clone)]\n+#[derive(Deserialize, Default, Clone)]\n+#[serde(deny_unknown_fields)]\n+#[serde(rename_all = \"kebab-case\")]\n struct Install {\n     prefix: Option<String>,\n     sysconfdir: Option<String>,\n@@ -185,7 +192,9 @@ struct Install {\n }\n \n /// TOML representation of how the LLVM build is configured.\n-#[derive(RustcDecodable, Default)]\n+#[derive(Deserialize, Default)]\n+#[serde(deny_unknown_fields)]\n+#[serde(rename_all = \"kebab-case\")]\n struct Llvm {\n     ccache: Option<StringOrBool>,\n     ninja: Option<bool>,\n@@ -200,15 +209,18 @@ struct Llvm {\n     clean_rebuild: Option<bool>,\n }\n \n-#[derive(RustcDecodable, Default, Clone)]\n+#[derive(Deserialize, Default, Clone)]\n+#[serde(deny_unknown_fields)]\n+#[serde(rename_all = \"kebab-case\")]\n struct Dist {\n     sign_folder: Option<String>,\n     gpg_password_file: Option<String>,\n     upload_addr: Option<String>,\n     src_tarball: Option<bool>,\n }\n \n-#[derive(RustcDecodable)]\n+#[derive(Deserialize)]\n+#[serde(untagged)]\n enum StringOrBool {\n     String(String),\n     Bool(bool),\n@@ -221,7 +233,9 @@ impl Default for StringOrBool {\n }\n \n /// TOML representation of how the Rust build is configured.\n-#[derive(RustcDecodable, Default)]\n+#[derive(Deserialize, Default)]\n+#[serde(deny_unknown_fields)]\n+#[serde(rename_all = \"kebab-case\")]\n struct Rust {\n     optimize: Option<bool>,\n     codegen_units: Option<u32>,\n@@ -243,7 +257,9 @@ struct Rust {\n }\n \n /// TOML representation of how each build target is configured.\n-#[derive(RustcDecodable, Default)]\n+#[derive(Deserialize, Default)]\n+#[serde(deny_unknown_fields)]\n+#[serde(rename_all = \"kebab-case\")]\n struct TomlTarget {\n     llvm_config: Option<String>,\n     jemalloc: Option<String>,\n@@ -273,27 +289,13 @@ impl Config {\n \n         let toml = file.map(|file| {\n             let mut f = t!(File::open(&file));\n-            let mut toml = String::new();\n-            t!(f.read_to_string(&mut toml));\n-            let mut p = Parser::new(&toml);\n-            let table = match p.parse() {\n-                Some(table) => table,\n-                None => {\n-                    println!(\"failed to parse TOML configuration '{}':\", file.to_str().unwrap());\n-                    for err in p.errors.iter() {\n-                        let (loline, locol) = p.to_linecol(err.lo);\n-                        let (hiline, hicol) = p.to_linecol(err.hi);\n-                        println!(\"{}:{}-{}:{}: {}\", loline, locol, hiline,\n-                                 hicol, err.desc);\n-                    }\n-                    process::exit(2);\n-                }\n-            };\n-            let mut d = Decoder::new(Value::Table(table));\n-            match Decodable::decode(&mut d) {\n-                Ok(cfg) => cfg,\n-                Err(e) => {\n-                    println!(\"failed to decode TOML: {}\", e);\n+            let mut contents = String::new();\n+            t!(f.read_to_string(&mut contents));\n+            match toml::from_str(&contents) {\n+                Ok(table) => table,\n+                Err(err) => {\n+                    println!(\"failed to parse TOML configuration '{}': {}\",\n+                        file.display(), err);\n                     process::exit(2);\n                 }\n             }"}, {"sha": "d4ef6613a2a5e4667ee8376ea77702cf8ad9853e", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=a1fa2681cfa85c4a5513249339abbd31ff561449", "patch": "@@ -128,7 +128,6 @@ extern crate filetime;\n extern crate gcc;\n extern crate getopts;\n extern crate num_cpus;\n-extern crate rustc_serialize;\n extern crate toml;\n \n #[cfg(unix)]"}, {"sha": "ca0eed3ae86f844ae4b914fe519ce3210d53e188", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=a1fa2681cfa85c4a5513249339abbd31ff561449", "patch": "@@ -13,17 +13,17 @@ use std::process::Command;\n use std::path::PathBuf;\n \n use build_helper::output;\n-use rustc_serialize::json;\n+use serde_json;\n \n use {Build, Crate};\n \n-#[derive(RustcDecodable)]\n+#[derive(Deserialize)]\n struct Output {\n     packages: Vec<Package>,\n     resolve: Resolve,\n }\n \n-#[derive(RustcDecodable)]\n+#[derive(Deserialize)]\n struct Package {\n     id: String,\n     name: String,\n@@ -32,12 +32,12 @@ struct Package {\n     manifest_path: String,\n }\n \n-#[derive(RustcDecodable)]\n+#[derive(Deserialize)]\n struct Resolve {\n     nodes: Vec<ResolveNode>,\n }\n \n-#[derive(RustcDecodable)]\n+#[derive(Deserialize)]\n struct ResolveNode {\n     id: String,\n     dependencies: Vec<String>,\n@@ -61,7 +61,7 @@ fn build_krate(build: &mut Build, krate: &str) {\n          .arg(\"--format-version\").arg(\"1\")\n          .arg(\"--manifest-path\").arg(build.src.join(krate).join(\"Cargo.toml\"));\n     let output = output(&mut cargo);\n-    let output: Output = json::decode(&output).unwrap();\n+    let output: Output = serde_json::from_str(&output).unwrap();\n     let mut id2name = HashMap::new();\n     for package in output.packages {\n         if package.source.is_none() {"}, {"sha": "eecfbdc8b3dc73d53d96632cabf65b9b40366eb1", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=a1fa2681cfa85c4a5513249339abbd31ff561449", "patch": "@@ -238,7 +238,7 @@ tool!(\n     //      .dep(|s| s.name(\"maybe-clean-tools\"))\n     //      .dep(|s| s.name(\"libstd-tool\"))\n     //      .run(move |s| compile::tool(build, s.stage, s.target, \"build-manifest\"));\n-    BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::Libstd;\n+    BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::Librustc;\n     // rules.build(\"tool-remote-test-server\", \"src/tools/remote-test-server\")\n     //      .dep(|s| s.name(\"maybe-clean-tools\"))\n     //      .dep(|s| s.name(\"libstd-tool\"))"}, {"sha": "844b7aad72fde3732763bfeafd67588e4e9e64c7", "filename": "src/tools/build-manifest/Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FCargo.toml?ref=a1fa2681cfa85c4a5513249339abbd31ff561449", "patch": "@@ -4,5 +4,6 @@ version = \"0.1.0\"\n authors = [\"Alex Crichton <alex@alexcrichton.com>\"]\n \n [dependencies]\n-toml = \"0.1\"\n-rustc-serialize = \"0.3\"\n+toml = \"0.4\"\n+serde = \"1.0\"\n+serde_derive = \"1.0\""}, {"sha": "b8efb88acfbdce3de9fc1ac64269ca5c56dcc87c", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1fa2681cfa85c4a5513249339abbd31ff561449/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=a1fa2681cfa85c4a5513249339abbd31ff561449", "patch": "@@ -9,7 +9,9 @@\n // except according to those terms.\n \n extern crate toml;\n-extern crate rustc_serialize;\n+#[macro_use]\n+extern crate serde_derive;\n+extern crate serde;\n \n use std::collections::BTreeMap;\n use std::env;\n@@ -99,19 +101,21 @@ static MINGW: &'static [&'static str] = &[\n     \"x86_64-pc-windows-gnu\",\n ];\n \n+#[derive(Serialize)]\n+#[serde(rename_all = \"kebab-case\")]\n struct Manifest {\n     manifest_version: String,\n     date: String,\n     pkg: BTreeMap<String, Package>,\n }\n \n-#[derive(RustcEncodable)]\n+#[derive(Serialize)]\n struct Package {\n     version: String,\n     target: BTreeMap<String, Target>,\n }\n \n-#[derive(RustcEncodable)]\n+#[derive(Serialize)]\n struct Target {\n     available: bool,\n     url: Option<String>,\n@@ -136,7 +140,7 @@ impl Target {\n     }\n }\n \n-#[derive(RustcEncodable)]\n+#[derive(Serialize)]\n struct Component {\n     pkg: String,\n     target: String,\n@@ -199,28 +203,16 @@ impl Builder {\n         self.rls_version = self.version(\"rls\", \"x86_64-unknown-linux-gnu\");\n \n         self.digest_and_sign();\n-        let Manifest { manifest_version, date, pkg } = self.build_manifest();\n-\n-        // Unfortunately we can't use derive(RustcEncodable) here because the\n-        // version field is called `manifest-version`, not `manifest_version`.\n-        // In lieu of that just create the table directly here with a `BTreeMap`\n-        // and wrap it up in a `Value::Table`.\n-        let mut manifest = BTreeMap::new();\n-        manifest.insert(\"manifest-version\".to_string(),\n-                        toml::Value::String(manifest_version));\n-        manifest.insert(\"date\".to_string(), toml::Value::String(date.clone()));\n-        manifest.insert(\"pkg\".to_string(), toml::encode(&pkg));\n-        let manifest = toml::Value::Table(manifest).to_string();\n-\n+        let manifest = self.build_manifest();\n         let filename = format!(\"channel-rust-{}.toml\", self.rust_release);\n-        self.write_manifest(&manifest, &filename);\n+        self.write_manifest(&toml::to_string(&manifest).unwrap(), &filename);\n \n         let filename = format!(\"channel-rust-{}-date.txt\", self.rust_release);\n-        self.write_date_stamp(&date, &filename);\n+        self.write_date_stamp(&manifest.date, &filename);\n \n         if self.rust_release != \"beta\" && self.rust_release != \"nightly\" {\n-            self.write_manifest(&manifest, \"channel-rust-stable.toml\");\n-            self.write_date_stamp(&date, \"channel-rust-stable-date.txt\");\n+            self.write_manifest(&toml::to_string(&manifest).unwrap(), \"channel-rust-stable.toml\");\n+            self.write_date_stamp(&manifest.date, \"channel-rust-stable-date.txt\");\n         }\n     }\n "}]}