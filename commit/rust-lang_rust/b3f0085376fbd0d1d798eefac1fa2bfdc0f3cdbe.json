{"sha": "b3f0085376fbd0d1d798eefac1fa2bfdc0f3cdbe", "node_id": "C_kwDOAAsO6NoAKGIzZjAwODUzNzZmYmQwZDFkNzk4ZWVmYWMxZmEyYmZkYzBmM2NkYmU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-24T18:48:15Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-25T21:27:12Z"}, "message": "Implement ObjectSafe and WF in the new solver", "tree": {"sha": "89c2bf11ba8d95f394952deeed0b48b7f4df95e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89c2bf11ba8d95f394952deeed0b48b7f4df95e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3f0085376fbd0d1d798eefac1fa2bfdc0f3cdbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f0085376fbd0d1d798eefac1fa2bfdc0f3cdbe", "html_url": "https://github.com/rust-lang/rust/commit/b3f0085376fbd0d1d798eefac1fa2bfdc0f3cdbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3f0085376fbd0d1d798eefac1fa2bfdc0f3cdbe/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "027c8507b4265dcf285b0b503e2a49214b929f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/027c8507b4265dcf285b0b503e2a49214b929f7b", "html_url": "https://github.com/rust-lang/rust/commit/027c8507b4265dcf285b0b503e2a49214b929f7b"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "a920f04621db5abb05f1bf64ab767fbba6b084c5", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b3f0085376fbd0d1d798eefac1fa2bfdc0f3cdbe/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f0085376fbd0d1d798eefac1fa2bfdc0f3cdbe/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=b3f0085376fbd0d1d798eefac1fa2bfdc0f3cdbe", "patch": "@@ -20,6 +20,7 @@\n use std::mem;\n \n use rustc_hir::def_id::DefId;\n+use rustc_hir::CRATE_HIR_ID;\n use rustc_infer::infer::canonical::{Canonical, CanonicalVarKind, CanonicalVarValues};\n use rustc_infer::infer::canonical::{OriginalQueryValues, QueryRegionConstraints, QueryResponse};\n use rustc_infer::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n@@ -277,12 +278,15 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                         param_env,\n                         predicate: (def_id, substs, kind),\n                     }),\n+                ty::PredicateKind::ObjectSafe(trait_def_id) => {\n+                    self.compute_object_safe_goal(trait_def_id)\n+                }\n+                ty::PredicateKind::WellFormed(arg) => {\n+                    self.compute_well_formed_goal(Goal { param_env, predicate: arg })\n+                }\n                 ty::PredicateKind::Ambiguous => self.make_canonical_response(Certainty::AMBIGUOUS),\n                 // FIXME: implement these predicates :)\n-                ty::PredicateKind::WellFormed(_)\n-                | ty::PredicateKind::ObjectSafe(_)\n-                | ty::PredicateKind::ConstEvaluatable(_)\n-                | ty::PredicateKind::ConstEquate(_, _) => {\n+                ty::PredicateKind::ConstEvaluatable(_) | ty::PredicateKind::ConstEquate(_, _) => {\n                     self.make_canonical_response(Certainty::Yes)\n                 }\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n@@ -362,6 +366,35 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n             Err(NoSolution)\n         }\n     }\n+\n+    fn compute_object_safe_goal(&mut self, trait_def_id: DefId) -> QueryResult<'tcx> {\n+        if self.tcx().is_object_safe(trait_def_id) {\n+            self.make_canonical_response(Certainty::Yes)\n+        } else {\n+            Err(NoSolution)\n+        }\n+    }\n+\n+    fn compute_well_formed_goal(\n+        &mut self,\n+        goal: Goal<'tcx, ty::GenericArg<'tcx>>,\n+    ) -> QueryResult<'tcx> {\n+        self.infcx.probe(|_| {\n+            match crate::traits::wf::obligations(\n+                self.infcx,\n+                goal.param_env,\n+                CRATE_HIR_ID, // FIXME body id\n+                0,\n+                goal.predicate,\n+                DUMMY_SP,\n+            ) {\n+                Some(obligations) => self.evaluate_all_and_make_canonical_response(\n+                    obligations.into_iter().map(|o| o.into()).collect(),\n+                ),\n+                None => self.make_canonical_response(Certainty::AMBIGUOUS),\n+            }\n+        })\n+    }\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {"}]}