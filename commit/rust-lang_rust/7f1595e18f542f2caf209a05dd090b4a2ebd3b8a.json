{"sha": "7f1595e18f542f2caf209a05dd090b4a2ebd3b8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMTU5NWUxOGY1NDJmMmNhZjIwOWEwNWRkMDkwYjRhMmViZDNiOGE=", "commit": {"author": {"name": "Philip Hayes", "email": "philiphayes@fb.com", "date": "2021-01-30T06:17:18Z"}, "committer": {"name": "Philip Hayes", "email": "philiphayes@fb.com", "date": "2021-01-30T06:19:09Z"}, "message": "Fix let_and_return false positive\n\nThe issue:\n\nSee this Rust playground link: https://play.rust-lang.org/?edition=2018&gist=12cb5d1e7527f8c37743b87fc4a53748\n\nRun the above with clippy to see the following warning:\n\n```\nwarning: returning the result of a `let` binding from a block\n  --> src/main.rs:24:5\n   |\n23 |     let value = Foo::new(&x).value();\n   |     --------------------------------- unnecessary `let` binding\n24 |     value\n   |     ^^^^^\n   |\n   = note: `#[warn(clippy::let_and_return)]` on by default\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n   |\n23 |\n24 |     Foo::new(&x).value()\n   |\n```\n\nImplementing the suggested fix, removing the temporary let binding,\nyields a compiler error:\n\n```\nerror[E0597]: `x` does not live long enough\n  --> src/main.rs:23:14\n   |\n23 |     Foo::new(&x).value()\n   |     ---------^^-\n   |     |        |\n   |     |        borrowed value does not live long enough\n   |     a temporary with access to the borrow is created here ...\n24 | }\n   | -\n   | |\n   | `x` dropped here while still borrowed\n   | ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `Foo`\n   |\n   = note: the temporary is part of an expression at the end of a block;\n           consider forcing this temporary to be dropped sooner, before the block's local variables are dropped\nhelp: for example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block\n   |\n23 |     let x = Foo::new(&x).value(); x\n   |     ^^^^^^^                     ^^^\n```\n\nThe fix:\n\nOf course, clippy looks like it should already handle this edge case;\nhowever, it appears `utils::fn_def_id` is not returning a `DefId` for\n`Foo::new`. Changing the `qpath_res` lookup to use the child Path\n`hir_id` instead of the parent Call `hir_id` fixes the issue.", "tree": {"sha": "f30c0710fd8e36bc802906c6013113aa7b257fb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f30c0710fd8e36bc802906c6013113aa7b257fb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f1595e18f542f2caf209a05dd090b4a2ebd3b8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f1595e18f542f2caf209a05dd090b4a2ebd3b8a", "html_url": "https://github.com/rust-lang/rust/commit/7f1595e18f542f2caf209a05dd090b4a2ebd3b8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f1595e18f542f2caf209a05dd090b4a2ebd3b8a/comments", "author": {"login": "phlip9", "id": 918989, "node_id": "MDQ6VXNlcjkxODk4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/918989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phlip9", "html_url": "https://github.com/phlip9", "followers_url": "https://api.github.com/users/phlip9/followers", "following_url": "https://api.github.com/users/phlip9/following{/other_user}", "gists_url": "https://api.github.com/users/phlip9/gists{/gist_id}", "starred_url": "https://api.github.com/users/phlip9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phlip9/subscriptions", "organizations_url": "https://api.github.com/users/phlip9/orgs", "repos_url": "https://api.github.com/users/phlip9/repos", "events_url": "https://api.github.com/users/phlip9/events{/privacy}", "received_events_url": "https://api.github.com/users/phlip9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phlip9", "id": 918989, "node_id": "MDQ6VXNlcjkxODk4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/918989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phlip9", "html_url": "https://github.com/phlip9", "followers_url": "https://api.github.com/users/phlip9/followers", "following_url": "https://api.github.com/users/phlip9/following{/other_user}", "gists_url": "https://api.github.com/users/phlip9/gists{/gist_id}", "starred_url": "https://api.github.com/users/phlip9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phlip9/subscriptions", "organizations_url": "https://api.github.com/users/phlip9/orgs", "repos_url": "https://api.github.com/users/phlip9/repos", "events_url": "https://api.github.com/users/phlip9/events{/privacy}", "received_events_url": "https://api.github.com/users/phlip9/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5db215bca8baa05520002e553e2a7b2d9659b6ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/5db215bca8baa05520002e553e2a7b2d9659b6ba", "html_url": "https://github.com/rust-lang/rust/commit/5db215bca8baa05520002e553e2a7b2d9659b6ba"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "caad7c88bcf3f38d65b0281179902763def02b44", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f1595e18f542f2caf209a05dd090b4a2ebd3b8a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1595e18f542f2caf209a05dd090b4a2ebd3b8a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=7f1595e18f542f2caf209a05dd090b4a2ebd3b8a", "patch": "@@ -1546,10 +1546,11 @@ pub fn fn_def_id(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<DefId> {\n         ExprKind::Call(\n             Expr {\n                 kind: ExprKind::Path(qpath),\n+                hir_id: path_hir_id,\n                 ..\n             },\n             ..,\n-        ) => cx.typeck_results().qpath_res(qpath, expr.hir_id).opt_def_id(),\n+        ) => cx.typeck_results().qpath_res(qpath, *path_hir_id).opt_def_id(),\n         _ => None,\n     }\n }"}, {"sha": "e3561863c1e1ff7f00f1e52703e808cdb1c64e63", "filename": "tests/ui/let_and_return.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f1595e18f542f2caf209a05dd090b4a2ebd3b8a/tests%2Fui%2Flet_and_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1595e18f542f2caf209a05dd090b4a2ebd3b8a/tests%2Fui%2Flet_and_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_and_return.rs?ref=7f1595e18f542f2caf209a05dd090b4a2ebd3b8a", "patch": "@@ -117,7 +117,11 @@ mod no_lint_if_stmt_borrows {\n             fn drop(&mut self) {}\n         }\n \n-        impl Foo<'_> {\n+        impl<'a> Foo<'a> {\n+            fn new(inner: &'a Inner) -> Self {\n+                Self { inner }\n+            }\n+\n             fn value(&self) -> i32 {\n                 42\n             }\n@@ -132,6 +136,12 @@ mod no_lint_if_stmt_borrows {\n             let value = some_foo(&x).value();\n             value\n         }\n+\n+        fn test2() -> i32 {\n+            let x = Inner {};\n+            let value = Foo::new(&x).value();\n+            value\n+        }\n     }\n }\n "}, {"sha": "a6941dabeb88d56a722fa07b7efbcf620c395cea", "filename": "tests/ui/let_and_return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1595e18f542f2caf209a05dd090b4a2ebd3b8a/tests%2Fui%2Flet_and_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f1595e18f542f2caf209a05dd090b4a2ebd3b8a/tests%2Fui%2Flet_and_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_and_return.stderr?ref=7f1595e18f542f2caf209a05dd090b4a2ebd3b8a", "patch": "@@ -28,7 +28,7 @@ LL |         5\n    |\n \n error: returning the result of a `let` binding from a block\n-  --> $DIR/let_and_return.rs:154:13\n+  --> $DIR/let_and_return.rs:164:13\n    |\n LL |             let clone = Arc::clone(&self.foo);\n    |             ---------------------------------- unnecessary `let` binding"}]}