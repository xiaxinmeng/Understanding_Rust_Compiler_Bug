{"sha": "a613460e8ade73dc387c19b0a45588681de46fef", "node_id": "C_kwDOAAsO6NoAKGE2MTM0NjBlOGFkZTczZGMzODdjMTliMGE0NTU4ODY4MWRlNDZmZWY", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-06-06T09:51:36Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-06-06T09:51:36Z"}, "message": "Fix `#[expect]` for `needless_borrow`, `ref_binding_to_ref`", "tree": {"sha": "c7e25d8b9fda8d37a8321d86ba177bd4c1b9855a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7e25d8b9fda8d37a8321d86ba177bd4c1b9855a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a613460e8ade73dc387c19b0a45588681de46fef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEwgBEOx3xlHwII7PG9cWdDmaeUwIFAmKdzigACgkQ9cWdDmae\nUwKHMRAAib4iXBxI2phRwezclBgZTXnjdR094fN7aJpb3tqXknOozTX2lCV4Key8\npyKlZz7mDBxkFrLmyQpT/LPRsRlVhmaj4VxwK/PKUa4k/46FIub3K1aAk3XdWJRe\ni3ME2h9nvBQfoFM2vgynhEUrfBJZG+Kv7RMI5QDaAd3ndtlMWaJZQILb/ZVi/Oxr\nTP2baV1j3ZhlzT/AwRGdcwnF9s1staN9MX9Y+WQPwwhMF3q1VUY3QIUMec/2xv48\nkfxeqrgAFAlot1fwm3FLm2V8T/eU9u9x0W2NZgAFJU2Sh/U4BEmRlBPop//Z54rj\nvTSqiCM3owhqsy34tjV4BjHIVMNU1r0bvdPFWox/raM+p9l8LwLl4X/p4TGcfDB/\nTp+KF+A5+9+vtF3fwx7Cr6z6Wq8iSjCdLGoNHIwRJhfxvwoIekt7aS/dD6nO57g/\ngVkXfCJ/XKfhQvFfH8iR/OkNbZS7ePuxGC3aZuxQWqicgNPTyeb60z780MBOaDWI\nfaTiCLvDOLmr0rDq0TGizoGhBans+uA3PxdmWwTcLE//+8/rlfDSZFdOLQDJ7Dnf\n+JJlowOluKF3Pk2UDWe3N82aki1wZeWwzfs9Vj0xjINSxWpU3ZmWBhs6EL/2YymQ\nW7eIw6zoYSzIimH+taxGJ/nGto9DLxBn0aYr4OxmRKKq5t7GBpI=\n=1pwF\n-----END PGP SIGNATURE-----", "payload": "tree c7e25d8b9fda8d37a8321d86ba177bd4c1b9855a\nparent 3e771624e1e0de266ae4720354cf4534f010d39d\nauthor xFrednet <xFrednet@gmail.com> 1654509096 +0200\ncommitter xFrednet <xFrednet@gmail.com> 1654509096 +0200\n\nFix `#[expect]` for `needless_borrow`, `ref_binding_to_ref`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a613460e8ade73dc387c19b0a45588681de46fef", "html_url": "https://github.com/rust-lang/rust/commit/a613460e8ade73dc387c19b0a45588681de46fef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a613460e8ade73dc387c19b0a45588681de46fef/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e771624e1e0de266ae4720354cf4534f010d39d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e771624e1e0de266ae4720354cf4534f010d39d", "html_url": "https://github.com/rust-lang/rust/commit/3e771624e1e0de266ae4720354cf4534f010d39d"}], "stats": {"total": 117, "additions": 75, "deletions": 42}, "files": [{"sha": "6d32cc8253f1063ef5aa2c17a0731e763f19c8f0", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a613460e8ade73dc387c19b0a45588681de46fef/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a613460e8ade73dc387c19b0a45588681de46fef/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=a613460e8ade73dc387c19b0a45588681de46fef", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_hir_and_then};\n use clippy_utils::source::{snippet_with_applicability, snippet_with_context};\n use clippy_utils::sugg::has_enclosing_paren;\n use clippy_utils::ty::peel_mid_ty_refs;\n@@ -131,6 +131,7 @@ pub struct Dereferencing {\n struct StateData {\n     /// Span of the top level expression\n     span: Span,\n+    hir_id: HirId,\n }\n \n enum State {\n@@ -165,6 +166,8 @@ struct RefPat {\n     app: Applicability,\n     /// All the replacements which need to be made.\n     replacements: Vec<(Span, String)>,\n+    /// The [`HirId`] that the lint should be emitted at.\n+    hir_id: HirId,\n }\n \n impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n@@ -218,7 +221,10 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                                 is_final_ufcs: matches!(expr.kind, ExprKind::Call(..)),\n                                 target_mut,\n                             },\n-                            StateData { span: expr.span },\n+                            StateData {\n+                                span: expr.span,\n+                                hir_id: expr.hir_id,\n+                            },\n                         ));\n                     },\n                     RefOp::AddrOf => {\n@@ -290,7 +296,10 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                                     required_precedence,\n                                     msg,\n                                 },\n-                                StateData { span: expr.span },\n+                                StateData {\n+                                    span: expr.span,\n+                                    hir_id: expr.hir_id,\n+                                },\n                             ));\n                         }\n                     },\n@@ -383,6 +392,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                             spans: vec![pat.span],\n                             app,\n                             replacements: vec![(pat.span, snip.into())],\n+                            hir_id: pat.hir_id\n                         }),\n                     );\n                 }\n@@ -395,13 +405,15 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n             for pat in self.ref_locals.drain(..).filter_map(|(_, x)| x) {\n                 let replacements = pat.replacements;\n                 let app = pat.app;\n-                span_lint_and_then(\n+                let lint = if pat.always_deref {\n+                    NEEDLESS_BORROW\n+                } else {\n+                    REF_BINDING_TO_REFERENCE\n+                };\n+                span_lint_hir_and_then(\n                     cx,\n-                    if pat.always_deref {\n-                        NEEDLESS_BORROW\n-                    } else {\n-                        REF_BINDING_TO_REFERENCE\n-                    },\n+                    lint,\n+                    pat.hir_id,\n                     pat.spans,\n                     \"this pattern creates a reference to a reference\",\n                     |diag| {\n@@ -638,19 +650,14 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, state: State, data: S\n         } => {\n             let mut app = Applicability::MachineApplicable;\n             let snip = snippet_with_context(cx, expr.span, data.span.ctxt(), \"..\", &mut app).0;\n-            span_lint_and_sugg(\n-                cx,\n-                NEEDLESS_BORROW,\n-                data.span,\n-                msg,\n-                \"change this to\",\n-                if required_precedence > expr.precedence().order() && !has_enclosing_paren(&snip) {\n+            span_lint_hir_and_then(cx, NEEDLESS_BORROW, data.hir_id, data.span, msg, |diag| {\n+                let sugg = if required_precedence > expr.precedence().order() && !has_enclosing_paren(&snip) {\n                     format!(\"({})\", snip)\n                 } else {\n                     snip.into()\n-                },\n-                app,\n-            );\n+                };\n+                diag.span_suggestion(data.span, \"change this to\", sugg, app);\n+            });\n         },\n     }\n }"}, {"sha": "6b1576d67329dab4f6ea2404aaffa697cf87b77a", "filename": "tests/ui/needless_borrow.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a613460e8ade73dc387c19b0a45588681de46fef/tests%2Fui%2Fneedless_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a613460e8ade73dc387c19b0a45588681de46fef/tests%2Fui%2Fneedless_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.fixed?ref=a613460e8ade73dc387c19b0a45588681de46fef", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![feature(lint_reasons)]\n+\n #[warn(clippy::all, clippy::needless_borrow)]\n #[allow(unused_variables, clippy::unnecessary_mut_passed)]\n fn main() {\n@@ -96,3 +98,9 @@ trait Trait {}\n impl<'a> Trait for &'a str {}\n \n fn h(_: &dyn Trait) {}\n+\n+fn check_expect_suppression() {\n+    let a = 5;\n+    #[expect(clippy::needless_borrow)]\n+    let _ = x(&&a);\n+}"}, {"sha": "ebe76361db404c60690453fa220f14738b1a76c7", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a613460e8ade73dc387c19b0a45588681de46fef/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a613460e8ade73dc387c19b0a45588681de46fef/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=a613460e8ade73dc387c19b0a45588681de46fef", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![feature(lint_reasons)]\n+\n #[warn(clippy::all, clippy::needless_borrow)]\n #[allow(unused_variables, clippy::unnecessary_mut_passed)]\n fn main() {\n@@ -96,3 +98,9 @@ trait Trait {}\n impl<'a> Trait for &'a str {}\n \n fn h(_: &dyn Trait) {}\n+\n+fn check_expect_suppression() {\n+    let a = 5;\n+    #[expect(clippy::needless_borrow)]\n+    let _ = x(&&a);\n+}"}, {"sha": "be59d8f546d232a2df1f35de2127ed9aaa912fbc", "filename": "tests/ui/needless_borrow.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a613460e8ade73dc387c19b0a45588681de46fef/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a613460e8ade73dc387c19b0a45588681de46fef/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=a613460e8ade73dc387c19b0a45588681de46fef", "patch": "@@ -1,97 +1,97 @@\n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:9:15\n+  --> $DIR/needless_borrow.rs:11:15\n    |\n LL |     let _ = x(&&a); // warn\n    |               ^^^ help: change this to: `&a`\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:13:13\n+  --> $DIR/needless_borrow.rs:15:13\n    |\n LL |     mut_ref(&mut &mut b); // warn\n    |             ^^^^^^^^^^^ help: change this to: `&mut b`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:25:13\n+  --> $DIR/needless_borrow.rs:27:13\n    |\n LL |             &&a\n    |             ^^^ help: change this to: `&a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:27:15\n+  --> $DIR/needless_borrow.rs:29:15\n    |\n LL |         46 => &&a,\n    |               ^^^ help: change this to: `&a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:33:27\n+  --> $DIR/needless_borrow.rs:35:27\n    |\n LL |                     break &ref_a;\n    |                           ^^^^^^ help: change this to: `ref_a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:40:15\n+  --> $DIR/needless_borrow.rs:42:15\n    |\n LL |     let _ = x(&&&a);\n    |               ^^^^ help: change this to: `&a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:41:15\n+  --> $DIR/needless_borrow.rs:43:15\n    |\n LL |     let _ = x(&mut &&a);\n    |               ^^^^^^^^ help: change this to: `&a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:42:15\n+  --> $DIR/needless_borrow.rs:44:15\n    |\n LL |     let _ = x(&&&mut b);\n    |               ^^^^^^^^ help: change this to: `&mut b`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:43:15\n+  --> $DIR/needless_borrow.rs:45:15\n    |\n LL |     let _ = x(&&ref_a);\n    |               ^^^^^^^ help: change this to: `ref_a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:46:11\n+  --> $DIR/needless_borrow.rs:48:11\n    |\n LL |         x(&b);\n    |           ^^ help: change this to: `b`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:53:13\n+  --> $DIR/needless_borrow.rs:55:13\n    |\n LL |     mut_ref(&mut x);\n    |             ^^^^^^ help: change this to: `x`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:54:13\n+  --> $DIR/needless_borrow.rs:56:13\n    |\n LL |     mut_ref(&mut &mut x);\n    |             ^^^^^^^^^^^ help: change this to: `x`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:55:23\n+  --> $DIR/needless_borrow.rs:57:23\n    |\n LL |     let y: &mut i32 = &mut x;\n    |                       ^^^^^^ help: change this to: `x`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:56:23\n+  --> $DIR/needless_borrow.rs:58:23\n    |\n LL |     let y: &mut i32 = &mut &mut x;\n    |                       ^^^^^^^^^^^ help: change this to: `x`\n \n error: this expression borrows a value the compiler would automatically borrow\n-  --> $DIR/needless_borrow.rs:72:13\n+  --> $DIR/needless_borrow.rs:74:13\n    |\n LL |     let _ = (&x).0;\n    |             ^^^^ help: change this to: `x`\n \n error: this expression borrows a value the compiler would automatically borrow\n-  --> $DIR/needless_borrow.rs:74:22\n+  --> $DIR/needless_borrow.rs:76:22\n    |\n LL |     let _ = unsafe { (&*x).0 };\n    |                      ^^^^^ help: change this to: `(*x)`"}, {"sha": "570ef406e4a991d2193fe098945a0fdca7cd58a2", "filename": "tests/ui/ref_binding_to_reference.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a613460e8ade73dc387c19b0a45588681de46fef/tests%2Fui%2Fref_binding_to_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a613460e8ade73dc387c19b0a45588681de46fef/tests%2Fui%2Fref_binding_to_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fref_binding_to_reference.rs?ref=a613460e8ade73dc387c19b0a45588681de46fef", "patch": "@@ -1,5 +1,6 @@\n // FIXME: run-rustfix waiting on multi-span suggestions\n \n+#![feature(lint_reasons)]\n #![warn(clippy::ref_binding_to_reference)]\n #![allow(clippy::needless_borrowed_reference)]\n \n@@ -73,3 +74,12 @@ impl T1 for S {\n         let _: &&String = x;\n     }\n }\n+\n+fn check_expect_suppression() {\n+    let x = String::new();\n+    #[expect(clippy::ref_binding_to_reference)]\n+    let _: &&String = match Some(&x) {\n+        Some(ref x) => x,\n+        None => return,\n+    };\n+}"}, {"sha": "eb36cd516a246a9e4f581b7079efb0bacc8cc09d", "filename": "tests/ui/ref_binding_to_reference.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a613460e8ade73dc387c19b0a45588681de46fef/tests%2Fui%2Fref_binding_to_reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a613460e8ade73dc387c19b0a45588681de46fef/tests%2Fui%2Fref_binding_to_reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fref_binding_to_reference.stderr?ref=a613460e8ade73dc387c19b0a45588681de46fef", "patch": "@@ -1,5 +1,5 @@\n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:30:14\n+  --> $DIR/ref_binding_to_reference.rs:31:14\n    |\n LL |         Some(ref x) => x,\n    |              ^^^^^\n@@ -11,7 +11,7 @@ LL |         Some(x) => &x,\n    |              ~     ~~\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:36:14\n+  --> $DIR/ref_binding_to_reference.rs:37:14\n    |\n LL |         Some(ref x) => {\n    |              ^^^^^\n@@ -25,7 +25,7 @@ LL ~             &x\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:46:14\n+  --> $DIR/ref_binding_to_reference.rs:47:14\n    |\n LL |         Some(ref x) => m2!(x),\n    |              ^^^^^\n@@ -36,7 +36,7 @@ LL |         Some(x) => m2!(&x),\n    |              ~         ~~\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:51:15\n+  --> $DIR/ref_binding_to_reference.rs:52:15\n    |\n LL |     let _ = |&ref x: &&String| {\n    |               ^^^^^\n@@ -48,7 +48,7 @@ LL ~         let _: &&String = &x;\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:57:12\n+  --> $DIR/ref_binding_to_reference.rs:58:12\n    |\n LL | fn f2<'a>(&ref x: &&'a String) -> &'a String {\n    |            ^^^^^\n@@ -61,7 +61,7 @@ LL ~     x\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:64:11\n+  --> $DIR/ref_binding_to_reference.rs:65:11\n    |\n LL |     fn f(&ref x: &&String) {\n    |           ^^^^^\n@@ -73,7 +73,7 @@ LL ~         let _: &&String = &x;\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:72:11\n+  --> $DIR/ref_binding_to_reference.rs:73:11\n    |\n LL |     fn f(&ref x: &&String) {\n    |           ^^^^^"}]}