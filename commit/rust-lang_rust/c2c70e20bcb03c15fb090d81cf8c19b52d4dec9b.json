{"sha": "c2c70e20bcb03c15fb090d81cf8c19b52d4dec9b", "node_id": "C_kwDOAAsO6NoAKGMyYzcwZTIwYmNiMDNjMTVmYjA5MGQ4MWNmOGMxOWI1MmQ0ZGVjOWI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-07-28T09:52:59Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-07-28T09:52:59Z"}, "message": "Remove Clean trait implementation for ty::Visibility", "tree": {"sha": "da95262cbd649f3455d6fd754b2d1e69a29698cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da95262cbd649f3455d6fd754b2d1e69a29698cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2c70e20bcb03c15fb090d81cf8c19b52d4dec9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c70e20bcb03c15fb090d81cf8c19b52d4dec9b", "html_url": "https://github.com/rust-lang/rust/commit/c2c70e20bcb03c15fb090d81cf8c19b52d4dec9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2c70e20bcb03c15fb090d81cf8c19b52d4dec9b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48316dfea1914d25189fa441e7310449ed76a446", "url": "https://api.github.com/repos/rust-lang/rust/commits/48316dfea1914d25189fa441e7310449ed76a446", "html_url": "https://github.com/rust-lang/rust/commit/48316dfea1914d25189fa441e7310449ed76a446"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "731d8766686c8be1ba70ecfe1a0da79afbab5bb5", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2c70e20bcb03c15fb090d81cf8c19b52d4dec9b/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c70e20bcb03c15fb090d81cf8c19b52d4dec9b/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=c2c70e20bcb03c15fb090d81cf8c19b52d4dec9b", "patch": "@@ -17,7 +17,8 @@ use rustc_span::symbol::{kw, sym, Symbol};\n \n use crate::clean::{\n     self, clean_fn_decl_from_did_and_sig, clean_middle_field, clean_middle_ty, clean_ty,\n-    clean_ty_generics, utils, Attributes, AttributesExt, Clean, ImplKind, ItemId, Type, Visibility,\n+    clean_ty_generics, clean_visibility, utils, Attributes, AttributesExt, Clean, ImplKind, ItemId,\n+    Type, Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -134,7 +135,7 @@ pub(crate) fn try_inline(\n     );\n     if let Some(import_def_id) = import_def_id {\n         // The visibility needs to reflect the one from the reexport and not from the \"source\" DefId.\n-        item.visibility = cx.tcx.visibility(import_def_id).clean(cx);\n+        item.visibility = clean_visibility(cx.tcx.visibility(import_def_id));\n     }\n     ret.push(item);\n     Some(ret)\n@@ -599,7 +600,7 @@ fn build_macro(\n     match CStore::from_tcx(cx.tcx).load_macro_untracked(def_id, cx.sess()) {\n         LoadedMacro::MacroDef(item_def, _) => {\n             if let ast::ItemKind::MacroDef(ref def) = item_def.kind {\n-                let vis = cx.tcx.visibility(import_def_id.unwrap_or(def_id)).clean(cx);\n+                let vis = clean_visibility(cx.tcx.visibility(import_def_id.unwrap_or(def_id)));\n                 clean::MacroItem(clean::Macro {\n                     source: utils::display_macro_source(cx, name, def, def_id, vis),\n                 })"}, {"sha": "43d424316ff6c76f6f8e319055985c970ecf65ea", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c2c70e20bcb03c15fb090d81cf8c19b52d4dec9b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c70e20bcb03c15fb090d81cf8c19b52d4dec9b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c2c70e20bcb03c15fb090d81cf8c19b52d4dec9b", "patch": "@@ -1817,17 +1817,15 @@ fn is_field_vis_inherited(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Visibility> for ty::Visibility {\n-    fn clean(&self, _cx: &mut DocContext<'_>) -> Visibility {\n-        match *self {\n-            ty::Visibility::Public => Visibility::Public,\n-            // NOTE: this is not quite right: `ty` uses `Invisible` to mean 'private',\n-            // while rustdoc really does mean inherited. That means that for enum variants, such as\n-            // `pub enum E { V }`, `V` will be marked as `Public` by `ty`, but as `Inherited` by rustdoc.\n-            // Various parts of clean override `tcx.visibility` explicitly to make sure this distinction is captured.\n-            ty::Visibility::Invisible => Visibility::Inherited,\n-            ty::Visibility::Restricted(module) => Visibility::Restricted(module),\n-        }\n+pub(crate) fn clean_visibility(vis: ty::Visibility) -> Visibility {\n+    match vis {\n+        ty::Visibility::Public => Visibility::Public,\n+        // NOTE: this is not quite right: `ty` uses `Invisible` to mean 'private',\n+        // while rustdoc really does mean inherited. That means that for enum variants, such as\n+        // `pub enum E { V }`, `V` will be marked as `Public` by `ty`, but as `Inherited` by rustdoc.\n+        // Various parts of clean override `tcx.visibility` explicitly to make sure this distinction is captured.\n+        ty::Visibility::Invisible => Visibility::Inherited,\n+        ty::Visibility::Restricted(module) => Visibility::Restricted(module),\n     }\n }\n \n@@ -1988,7 +1986,7 @@ fn clean_maybe_renamed_item<'tcx>(\n                 clean_fn_or_proc_macro(item, sig, generics, body_id, &mut name, cx)\n             }\n             ItemKind::Macro(ref macro_def, _) => {\n-                let ty_vis = cx.tcx.visibility(def_id).clean(cx);\n+                let ty_vis = clean_visibility(cx.tcx.visibility(def_id));\n                 MacroItem(Macro {\n                     source: display_macro_source(cx, name, macro_def, def_id, ty_vis),\n                 })\n@@ -2117,7 +2115,7 @@ fn clean_extern_crate<'tcx>(\n         name: Some(name),\n         attrs: Box::new(attrs.clean(cx)),\n         item_id: crate_def_id.into(),\n-        visibility: ty_vis.clean(cx),\n+        visibility: clean_visibility(ty_vis),\n         kind: box ExternCrateItem { src: orig_name },\n         cfg: attrs.cfg(cx.tcx, &cx.cache.hidden_cfg),\n     }]"}, {"sha": "a5d27a940341a2be5c85de2fcd67bcba09b0b65f", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2c70e20bcb03c15fb090d81cf8c19b52d4dec9b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c70e20bcb03c15fb090d81cf8c19b52d4dec9b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=c2c70e20bcb03c15fb090d81cf8c19b52d4dec9b", "patch": "@@ -37,7 +37,7 @@ use crate::clean::cfg::Cfg;\n use crate::clean::external_path;\n use crate::clean::inline::{self, print_inlined_const};\n use crate::clean::utils::{is_literal_expr, print_const_expr, print_evaluated_const};\n-use crate::clean::Clean;\n+use crate::clean::{clean_visibility, Clean};\n use crate::core::DocContext;\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n@@ -499,7 +499,7 @@ impl Item {\n         let visibility = if matches!(&kind, ItemKind::KeywordItem | ItemKind::PrimitiveItem(..)) {\n             Visibility::Public\n         } else {\n-            cx.tcx.visibility(def_id).clean(cx)\n+            clean_visibility(cx.tcx.visibility(def_id))\n         };\n \n         Item { item_id: def_id.into(), kind: box kind, name, attrs, visibility, cfg }"}]}