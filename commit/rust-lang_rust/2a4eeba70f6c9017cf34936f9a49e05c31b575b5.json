{"sha": "2a4eeba70f6c9017cf34936f9a49e05c31b575b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNGVlYmE3MGY2YzkwMTdjZjM0OTM2ZjlhNDllMDVjMzFiNTc1YjU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-26T11:18:32Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-29T20:10:34Z"}, "message": "Make impl_wf_check incremental", "tree": {"sha": "d0f4e4d2b6c63a42ffec95f97e9f24b9388f0f27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0f4e4d2b6c63a42ffec95f97e9f24b9388f0f27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a4eeba70f6c9017cf34936f9a49e05c31b575b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a4eeba70f6c9017cf34936f9a49e05c31b575b5", "html_url": "https://github.com/rust-lang/rust/commit/2a4eeba70f6c9017cf34936f9a49e05c31b575b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a4eeba70f6c9017cf34936f9a49e05c31b575b5/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73b8f1d90ce75bea8e89b3572ff1e9943efcf436", "url": "https://api.github.com/repos/rust-lang/rust/commits/73b8f1d90ce75bea8e89b3572ff1e9943efcf436", "html_url": "https://github.com/rust-lang/rust/commit/73b8f1d90ce75bea8e89b3572ff1e9943efcf436"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "cda469657ed873cb74b696511b890161a933753c", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a4eeba70f6c9017cf34936f9a49e05c31b575b5/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4eeba70f6c9017cf34936f9a49e05c31b575b5/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=2a4eeba70f6c9017cf34936f9a49e05c31b575b5", "patch": "@@ -479,6 +479,7 @@ define_dep_nodes!( <'tcx>\n     [] CheckModPrivacy(DefId),\n     [] CheckModIntrinsics(DefId),\n     [] CheckModLiveness(DefId),\n+    [] CheckModImplWf(DefId),\n     [] CollectModItemTypes(DefId),\n \n     [] Reachability,"}, {"sha": "68dd5d533c8d22216ab565fce69862fc4589dddf", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a4eeba70f6c9017cf34936f9a49e05c31b575b5/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4eeba70f6c9017cf34936f9a49e05c31b575b5/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=2a4eeba70f6c9017cf34936f9a49e05c31b575b5", "patch": "@@ -136,6 +136,15 @@ impl<'tcx> QueryDescription<'tcx> for queries::check_mod_liveness<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::check_mod_impl_wf<'tcx> {\n+    fn describe(\n+        tcx: TyCtxt<'_, '_, '_>,\n+        key: DefId,\n+    ) -> Cow<'static, str> {\n+        format!(\"checking that impls are well-formed in {}\", key.describe_as_module(tcx)).into()\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::collect_mod_item_types<'tcx> {\n     fn describe(\n         tcx: TyCtxt<'_, '_, '_>,"}, {"sha": "d4884e712b86067adba9e040f716c7b70f94c767", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a4eeba70f6c9017cf34936f9a49e05c31b575b5/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4eeba70f6c9017cf34936f9a49e05c31b575b5/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=2a4eeba70f6c9017cf34936f9a49e05c31b575b5", "patch": "@@ -270,6 +270,8 @@ define_queries! { <'tcx>\n \n         [] fn check_mod_liveness: CheckModLiveness(DefId) -> (),\n \n+        [] fn check_mod_impl_wf: CheckModImplWf(DefId) -> (),\n+\n         [] fn collect_mod_item_types: CollectModItemTypes(DefId) -> (),\n \n         /// Caches CoerceUnsized kinds for impls on custom types."}, {"sha": "26762f5d1f783a570ce85732934e49c52d66f966", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a4eeba70f6c9017cf34936f9a49e05c31b575b5/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4eeba70f6c9017cf34936f9a49e05c31b575b5/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=2a4eeba70f6c9017cf34936f9a49e05c31b575b5", "patch": "@@ -1260,6 +1260,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::CheckModPrivacy => { force!(check_mod_privacy, def_id!()); }\n         DepKind::CheckModIntrinsics => { force!(check_mod_intrinsics, def_id!()); }\n         DepKind::CheckModLiveness => { force!(check_mod_liveness, def_id!()); }\n+        DepKind::CheckModImplWf => { force!(check_mod_impl_wf, def_id!()); }\n         DepKind::CollectModItemTypes => { force!(collect_mod_item_types, def_id!()); }\n         DepKind::Reachability => { force!(reachable_set, LOCAL_CRATE); }\n         DepKind::MirKeys => { force!(mir_keys, LOCAL_CRATE); }"}, {"sha": "07f5fca6fe68e293829b830bf4ffc8d6af09da7b", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2a4eeba70f6c9017cf34936f9a49e05c31b575b5/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4eeba70f6c9017cf34936f9a49e05c31b575b5/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=2a4eeba70f6c9017cf34936f9a49e05c31b575b5", "patch": "@@ -13,6 +13,7 @@ use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::def_id::DefId;\n use rustc::ty::{self, TyCtxt};\n+use rustc::ty::query::Providers;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n \n@@ -52,7 +53,23 @@ pub fn impl_wf_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     // We will tag this as part of the WF check -- logically, it is,\n     // but it's one that we must perform earlier than the rest of\n     // WfCheck.\n-    tcx.hir().krate().visit_all_item_likes(&mut ImplWfCheck { tcx });\n+    for &module in tcx.hir().krate().modules.keys() {\n+        tcx.ensure().check_mod_impl_wf(tcx.hir().local_def_id(module));\n+    }\n+}\n+\n+fn check_mod_impl_wf<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n+    tcx.hir().visit_item_likes_in_module(\n+        module_def_id,\n+        &mut ImplWfCheck { tcx }\n+    );\n+}\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    *providers = Providers {\n+        check_mod_impl_wf,\n+        ..*providers\n+    };\n }\n \n struct ImplWfCheck<'a, 'tcx: 'a> {"}, {"sha": "b51c29003993864bb87e198f0b9afcbc3c36264d", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a4eeba70f6c9017cf34936f9a49e05c31b575b5/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4eeba70f6c9017cf34936f9a49e05c31b575b5/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=2a4eeba70f6c9017cf34936f9a49e05c31b575b5", "patch": "@@ -318,6 +318,7 @@ pub fn provide(providers: &mut Providers) {\n     check::provide(providers);\n     variance::provide(providers);\n     outlives::provide(providers);\n+    impl_wf_check::provide(providers);\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)"}]}