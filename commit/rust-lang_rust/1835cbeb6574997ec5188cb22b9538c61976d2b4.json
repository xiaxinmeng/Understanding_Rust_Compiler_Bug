{"sha": "1835cbeb6574997ec5188cb22b9538c61976d2b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MzVjYmViNjU3NDk5N2VjNTE4OGNiMjJiOTUzOGM2MTk3NmQyYjQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-02T17:56:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-02T18:01:02Z"}, "message": "don't amplify errors in format! with bad literals", "tree": {"sha": "be4b47724ddef3bfd294597d1072a40dabb8ef3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be4b47724ddef3bfd294597d1072a40dabb8ef3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1835cbeb6574997ec5188cb22b9538c61976d2b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1835cbeb6574997ec5188cb22b9538c61976d2b4", "html_url": "https://github.com/rust-lang/rust/commit/1835cbeb6574997ec5188cb22b9538c61976d2b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1835cbeb6574997ec5188cb22b9538c61976d2b4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfa5f278472d0bad4e7db4a4259b2f1fa97ca0ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfa5f278472d0bad4e7db4a4259b2f1fa97ca0ab", "html_url": "https://github.com/rust-lang/rust/commit/bfa5f278472d0bad4e7db4a4259b2f1fa97ca0ab"}], "stats": {"total": 55, "additions": 20, "deletions": 35}, "files": [{"sha": "cc19acb61adc2e2763a703a867336d5a6250704e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1835cbeb6574997ec5188cb22b9538c61976d2b4/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1835cbeb6574997ec5188cb22b9538c61976d2b4/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=1835cbeb6574997ec5188cb22b9538c61976d2b4", "patch": "@@ -998,6 +998,7 @@ pub fn expr_to_spanned_string<'a>(\n     Err(match expr.node {\n         ast::ExprKind::Lit(ref l) => match l.node {\n             ast::LitKind::Str(s, style) => return Ok(respan(expr.span, (s, style))),\n+            ast::LitKind::Err(_) => None,\n             _ => Some(cx.struct_span_err(l.span, err_msg))\n         },\n         ast::ExprKind::Err => None,"}, {"sha": "34a86bab2294fbfc4bedceed7fb211da1e37c662", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1835cbeb6574997ec5188cb22b9538c61976d2b4/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1835cbeb6574997ec5188cb22b9538c61976d2b4/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=1835cbeb6574997ec5188cb22b9538c61976d2b4", "patch": "@@ -33,7 +33,7 @@ pub mod attr;\n pub mod classify;\n \n pub(crate) mod unescape;\n-use unescape::{unescape_str, unescape_char, unescape_byte_str, unescape_byte, EscapeError};\n+use unescape::{unescape_str, unescape_char, unescape_byte_str, unescape_byte};\n \n pub(crate) mod unescape_error_reporting;\n \n@@ -355,16 +355,14 @@ crate fn lit_token(lit: token::Lit, suf: Option<Symbol>, diag: Option<(Span, &Ha\n         token::Byte(i) => {\n             let lit_kind = match unescape_byte(&i.as_str()) {\n                 Ok(c) => LitKind::Byte(c),\n-                Err((_, EscapeError::MoreThanOneChar)) => LitKind::Err(i),\n-                Err(_) => LitKind::Byte(0),\n+                Err(_) => LitKind::Err(i),\n             };\n             (true, Some(lit_kind))\n         },\n         token::Char(i) => {\n             let lit_kind = match unescape_char(&i.as_str()) {\n                 Ok(c) => LitKind::Char(c),\n-                Err((_, EscapeError::MoreThanOneChar)) => LitKind::Err(i),\n-                Err(_) => LitKind::Char('\\u{FFFD}'),\n+                Err(_) => LitKind::Err(i),\n             };\n             (true, Some(lit_kind))\n         },\n@@ -380,17 +378,22 @@ crate fn lit_token(lit: token::Lit, suf: Option<Symbol>, diag: Option<(Span, &Ha\n             // reuse the symbol from the Token. Otherwise, we must generate a\n             // new symbol because the string in the LitKind is different to the\n             // string in the Token.\n+            let mut has_error = false;\n             let s = &sym.as_str();\n             if s.as_bytes().iter().any(|&c| c == b'\\\\' || c == b'\\r') {\n                 let mut buf = String::with_capacity(s.len());\n                 unescape_str(s, &mut |_, unescaped_char| {\n                     match unescaped_char {\n                         Ok(c) => buf.push(c),\n-                        Err(_) => buf.push('\\u{FFFD}'),\n+                        Err(_) => has_error = true,\n                     }\n                 });\n+                if has_error {\n+                    return (true, Some(LitKind::Err(sym)));\n+                }\n                 sym = Symbol::intern(&buf)\n             }\n+\n             (true, Some(LitKind::Str(sym, ast::StrStyle::Cooked)))\n         }\n         token::StrRaw(mut sym, n) => {\n@@ -404,12 +407,16 @@ crate fn lit_token(lit: token::Lit, suf: Option<Symbol>, diag: Option<(Span, &Ha\n         token::ByteStr(i) => {\n             let s = &i.as_str();\n             let mut buf = Vec::with_capacity(s.len());\n+            let mut has_error = false;\n             unescape_byte_str(s, &mut |_, unescaped_byte| {\n                 match unescaped_byte {\n                     Ok(c) => buf.push(c),\n-                    Err(_) => buf.push(0),\n+                    Err(_) => has_error = true,\n                 }\n             });\n+            if has_error {\n+                return (true, Some(LitKind::Err(i)));\n+            }\n             buf.shrink_to_fit();\n             (true, Some(LitKind::ByteStr(Lrc::new(buf))))\n         }"}, {"sha": "8ca98fc266a0188a6ff412a9dd5593c966a4eae2", "filename": "src/test/ui/fmt/format-string-error-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1835cbeb6574997ec5188cb22b9538c61976d2b4/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1835cbeb6574997ec5188cb22b9538c61976d2b4/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs?ref=1835cbeb6574997ec5188cb22b9538c61976d2b4", "patch": "@@ -77,7 +77,6 @@ raw  { \\n\n \n     println!(\"\\x7B}\\u8 {\", 1);\n     //~^ ERROR incorrect unicode escape sequence\n-    //~| ERROR invalid format string: expected `'}'` but string was terminated\n \n     // note: raw strings don't escape `\\xFF` and `\\u{FF}` sequences\n     println!(r#\"\\x7B}\\u{8} {\"#, 1);"}, {"sha": "227ec27efc87fd9b70a79431f81541ce5f3923f2", "filename": "src/test/ui/fmt/format-string-error-2.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1835cbeb6574997ec5188cb22b9538c61976d2b4/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1835cbeb6574997ec5188cb22b9538c61976d2b4/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr?ref=1835cbeb6574997ec5188cb22b9538c61976d2b4", "patch": "@@ -157,31 +157,21 @@ LL |     println!(\"\\x7B}\\u{8} {\", 1);\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n-error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/format-string-error-2.rs:78:27\n-   |\n-LL |     println!(\"\\x7B}\\u8 {\", 1);\n-   |                          -^ expected `'}'` in format string\n-   |                          |\n-   |                          because of this opening brace\n-   |\n-   = note: if you intended to print `{`, you can escape it using `{{`\n-\n error: invalid format string: unmatched `}` found\n-  --> $DIR/format-string-error-2.rs:83:21\n+  --> $DIR/format-string-error-2.rs:82:21\n    |\n LL |     println!(r#\"\\x7B}\\u{8} {\"#, 1);\n    |                     ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/format-string-error-2.rs:86:21\n+  --> $DIR/format-string-error-2.rs:85:21\n    |\n LL |     println!(r#\"\\x7B}\\u8 {\"#, 1);\n    |                     ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n \n-error: aborting due to 19 previous errors\n+error: aborting due to 18 previous errors\n "}, {"sha": "42bbef8391785d82b39105d39918ac4aecd24255", "filename": "src/test/ui/str/str-as-char.fixed", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1835cbeb6574997ec5188cb22b9538c61976d2b4/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1835cbeb6574997ec5188cb22b9538c61976d2b4/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.fixed?ref=1835cbeb6574997ec5188cb22b9538c61976d2b4", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n fn main() {\n-    println!(\"{}\", \"\u25cf\u25cf\"); //~ ERROR character literal may only contain one codepoint\n-    //~^ ERROR format argument must be a string literal\n+    println!(\"\u25cf\u25cf\"); //~ ERROR character literal may only contain one codepoint\n }"}, {"sha": "09b9dfc590db3fbf82ed7ad31fbff3a7351f5cc5", "filename": "src/test/ui/str/str-as-char.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1835cbeb6574997ec5188cb22b9538c61976d2b4/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1835cbeb6574997ec5188cb22b9538c61976d2b4/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.rs?ref=1835cbeb6574997ec5188cb22b9538c61976d2b4", "patch": "@@ -2,5 +2,4 @@\n \n fn main() {\n     println!('\u25cf\u25cf'); //~ ERROR character literal may only contain one codepoint\n-    //~^ ERROR format argument must be a string literal\n }"}, {"sha": "540a1b55376ff393a8f298775d433ba393a23ca8", "filename": "src/test/ui/str/str-as-char.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1835cbeb6574997ec5188cb22b9538c61976d2b4/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1835cbeb6574997ec5188cb22b9538c61976d2b4/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.stderr?ref=1835cbeb6574997ec5188cb22b9538c61976d2b4", "patch": "@@ -8,15 +8,5 @@ help: if you meant to write a `str` literal, use double quotes\n LL |     println!(\"\u25cf\u25cf\");\n    |              ^^^^\n \n-error: format argument must be a string literal\n-  --> $DIR/str-as-char.rs:4:14\n-   |\n-LL |     println!('\u25cf\u25cf');\n-   |              ^^^^\n-help: you might be missing a string literal to format with\n-   |\n-LL |     println!(\"{}\", '\u25cf\u25cf');\n-   |              ^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}