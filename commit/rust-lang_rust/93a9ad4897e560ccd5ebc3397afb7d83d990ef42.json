{"sha": "93a9ad4897e560ccd5ebc3397afb7d83d990ef42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYTlhZDQ4OTdlNTYwY2NkNWViYzMzOTdhZmI3ZDgzZDk5MGVmNDI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-03T14:01:29Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-12T20:53:13Z"}, "message": "Remove the now-unit-struct AllocErr field inside CollectionAllocErr", "tree": {"sha": "9712baa4ee6bf075c039b61a216351ea7777977e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9712baa4ee6bf075c039b61a216351ea7777977e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93a9ad4897e560ccd5ebc3397afb7d83d990ef42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93a9ad4897e560ccd5ebc3397afb7d83d990ef42", "html_url": "https://github.com/rust-lang/rust/commit/93a9ad4897e560ccd5ebc3397afb7d83d990ef42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93a9ad4897e560ccd5ebc3397afb7d83d990ef42/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "html_url": "https://github.com/rust-lang/rust/commit/157ff8cd0562eefdd7aa296395c38a7bc259a4b9"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "d7c30925f1a6a26d6041027893faa2acf566750b", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93a9ad4897e560ccd5ebc3397afb7d83d990ef42/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a9ad4897e560ccd5ebc3397afb7d83d990ef42/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=93a9ad4897e560ccd5ebc3397afb7d83d990ef42", "patch": "@@ -444,7 +444,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     pub fn reserve_exact(&mut self, used_cap: usize, needed_extra_cap: usize) {\n         match self.try_reserve_exact(used_cap, needed_extra_cap) {\n             Err(CapacityOverflow) => panic!(\"capacity overflow\"),\n-            Err(AllocErr(_)) => self.a.oom(),\n+            Err(AllocErr) => self.a.oom(),\n             Ok(()) => { /* yay */ }\n          }\n      }\n@@ -554,7 +554,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     pub fn reserve(&mut self, used_cap: usize, needed_extra_cap: usize) {\n         match self.try_reserve(used_cap, needed_extra_cap) {\n             Err(CapacityOverflow) => panic!(\"capacity overflow\"),\n-            Err(AllocErr(_)) => self.a.oom(),\n+            Err(AllocErr) => self.a.oom(),\n             Ok(()) => { /* yay */ }\n          }\n      }"}, {"sha": "befb36baeef1ebc0c91f67f8c4aa9dba2213bcbf", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93a9ad4897e560ccd5ebc3397afb7d83d990ef42/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a9ad4897e560ccd5ebc3397afb7d83d990ef42/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=93a9ad4897e560ccd5ebc3397afb7d83d990ef42", "patch": "@@ -575,11 +575,11 @@ fn test_try_reserve() {\n             } else { panic!(\"usize::MAX should trigger an overflow!\") }\n         } else {\n             // Check isize::MAX + 1 is an OOM\n-            if let Err(AllocErr(_)) = empty_string.try_reserve(MAX_CAP + 1) {\n+            if let Err(AllocErr) = empty_string.try_reserve(MAX_CAP + 1) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n \n             // Check usize::MAX is an OOM\n-            if let Err(AllocErr(_)) = empty_string.try_reserve(MAX_USIZE) {\n+            if let Err(AllocErr) = empty_string.try_reserve(MAX_USIZE) {\n             } else { panic!(\"usize::MAX should trigger an OOM!\") }\n         }\n     }\n@@ -599,7 +599,7 @@ fn test_try_reserve() {\n             if let Err(CapacityOverflow) = ten_bytes.try_reserve(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr(_)) = ten_bytes.try_reserve(MAX_CAP - 9) {\n+            if let Err(AllocErr) = ten_bytes.try_reserve(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         // Should always overflow in the add-to-len\n@@ -637,10 +637,10 @@ fn test_try_reserve_exact() {\n             if let Err(CapacityOverflow) = empty_string.try_reserve_exact(MAX_USIZE) {\n             } else { panic!(\"usize::MAX should trigger an overflow!\") }\n         } else {\n-            if let Err(AllocErr(_)) = empty_string.try_reserve_exact(MAX_CAP + 1) {\n+            if let Err(AllocErr) = empty_string.try_reserve_exact(MAX_CAP + 1) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n \n-            if let Err(AllocErr(_)) = empty_string.try_reserve_exact(MAX_USIZE) {\n+            if let Err(AllocErr) = empty_string.try_reserve_exact(MAX_USIZE) {\n             } else { panic!(\"usize::MAX should trigger an OOM!\") }\n         }\n     }\n@@ -659,7 +659,7 @@ fn test_try_reserve_exact() {\n             if let Err(CapacityOverflow) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr(_)) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n+            if let Err(AllocErr) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         if let Err(CapacityOverflow) = ten_bytes.try_reserve_exact(MAX_USIZE) {"}, {"sha": "e329b45a6175d8641532e4d71d6c1e0a7f05cc3a", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93a9ad4897e560ccd5ebc3397afb7d83d990ef42/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a9ad4897e560ccd5ebc3397afb7d83d990ef42/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=93a9ad4897e560ccd5ebc3397afb7d83d990ef42", "patch": "@@ -1016,11 +1016,11 @@ fn test_try_reserve() {\n             } else { panic!(\"usize::MAX should trigger an overflow!\") }\n         } else {\n             // Check isize::MAX + 1 is an OOM\n-            if let Err(AllocErr(_)) = empty_bytes.try_reserve(MAX_CAP + 1) {\n+            if let Err(AllocErr) = empty_bytes.try_reserve(MAX_CAP + 1) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n \n             // Check usize::MAX is an OOM\n-            if let Err(AllocErr(_)) = empty_bytes.try_reserve(MAX_USIZE) {\n+            if let Err(AllocErr) = empty_bytes.try_reserve(MAX_USIZE) {\n             } else { panic!(\"usize::MAX should trigger an OOM!\") }\n         }\n     }\n@@ -1040,7 +1040,7 @@ fn test_try_reserve() {\n             if let Err(CapacityOverflow) = ten_bytes.try_reserve(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr(_)) = ten_bytes.try_reserve(MAX_CAP - 9) {\n+            if let Err(AllocErr) = ten_bytes.try_reserve(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         // Should always overflow in the add-to-len\n@@ -1063,7 +1063,7 @@ fn test_try_reserve() {\n             if let Err(CapacityOverflow) = ten_u32s.try_reserve(MAX_CAP/4 - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr(_)) = ten_u32s.try_reserve(MAX_CAP/4 - 9) {\n+            if let Err(AllocErr) = ten_u32s.try_reserve(MAX_CAP/4 - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         // Should fail in the mul-by-size\n@@ -1103,10 +1103,10 @@ fn test_try_reserve_exact() {\n             if let Err(CapacityOverflow) = empty_bytes.try_reserve_exact(MAX_USIZE) {\n             } else { panic!(\"usize::MAX should trigger an overflow!\") }\n         } else {\n-            if let Err(AllocErr(_)) = empty_bytes.try_reserve_exact(MAX_CAP + 1) {\n+            if let Err(AllocErr) = empty_bytes.try_reserve_exact(MAX_CAP + 1) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n \n-            if let Err(AllocErr(_)) = empty_bytes.try_reserve_exact(MAX_USIZE) {\n+            if let Err(AllocErr) = empty_bytes.try_reserve_exact(MAX_USIZE) {\n             } else { panic!(\"usize::MAX should trigger an OOM!\") }\n         }\n     }\n@@ -1125,7 +1125,7 @@ fn test_try_reserve_exact() {\n             if let Err(CapacityOverflow) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr(_)) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n+            if let Err(AllocErr) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         if let Err(CapacityOverflow) = ten_bytes.try_reserve_exact(MAX_USIZE) {\n@@ -1146,7 +1146,7 @@ fn test_try_reserve_exact() {\n             if let Err(CapacityOverflow) = ten_u32s.try_reserve_exact(MAX_CAP/4 - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr(_)) = ten_u32s.try_reserve_exact(MAX_CAP/4 - 9) {\n+            if let Err(AllocErr) = ten_u32s.try_reserve_exact(MAX_CAP/4 - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         if let Err(CapacityOverflow) = ten_u32s.try_reserve_exact(MAX_USIZE - 20) {"}, {"sha": "4d55584e2f4df7d1f3234f8e7e5e8d5864ee16ad", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93a9ad4897e560ccd5ebc3397afb7d83d990ef42/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a9ad4897e560ccd5ebc3397afb7d83d990ef42/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=93a9ad4897e560ccd5ebc3397afb7d83d990ef42", "patch": "@@ -1073,7 +1073,7 @@ fn test_try_reserve() {\n             // VecDeque starts with capacity 7, always adds 1 to the capacity\n             // and also rounds the number to next power of 2 so this is the\n             // furthest we can go without triggering CapacityOverflow\n-            if let Err(AllocErr(_)) = empty_bytes.try_reserve(MAX_CAP) {\n+            if let Err(AllocErr) = empty_bytes.try_reserve(MAX_CAP) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n     }\n@@ -1093,7 +1093,7 @@ fn test_try_reserve() {\n             if let Err(CapacityOverflow) = ten_bytes.try_reserve(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr(_)) = ten_bytes.try_reserve(MAX_CAP - 9) {\n+            if let Err(AllocErr) = ten_bytes.try_reserve(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         // Should always overflow in the add-to-len\n@@ -1116,7 +1116,7 @@ fn test_try_reserve() {\n             if let Err(CapacityOverflow) = ten_u32s.try_reserve(MAX_CAP/4 - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr(_)) = ten_u32s.try_reserve(MAX_CAP/4 - 9) {\n+            if let Err(AllocErr) = ten_u32s.try_reserve(MAX_CAP/4 - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         // Should fail in the mul-by-size\n@@ -1160,7 +1160,7 @@ fn test_try_reserve_exact() {\n             // VecDeque starts with capacity 7, always adds 1 to the capacity\n             // and also rounds the number to next power of 2 so this is the\n             // furthest we can go without triggering CapacityOverflow\n-            if let Err(AllocErr(_)) = empty_bytes.try_reserve_exact(MAX_CAP) {\n+            if let Err(AllocErr) = empty_bytes.try_reserve_exact(MAX_CAP) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n     }\n@@ -1179,7 +1179,7 @@ fn test_try_reserve_exact() {\n             if let Err(CapacityOverflow) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr(_)) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n+            if let Err(AllocErr) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         if let Err(CapacityOverflow) = ten_bytes.try_reserve_exact(MAX_USIZE) {\n@@ -1200,7 +1200,7 @@ fn test_try_reserve_exact() {\n             if let Err(CapacityOverflow) = ten_u32s.try_reserve_exact(MAX_CAP/4 - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr(_)) = ten_u32s.try_reserve_exact(MAX_CAP/4 - 9) {\n+            if let Err(AllocErr) = ten_u32s.try_reserve_exact(MAX_CAP/4 - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         if let Err(CapacityOverflow) = ten_u32s.try_reserve_exact(MAX_USIZE - 20) {"}, {"sha": "23532c6172189d74934fd33856d01cb4f1bfe4e7", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93a9ad4897e560ccd5ebc3397afb7d83d990ef42/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a9ad4897e560ccd5ebc3397afb7d83d990ef42/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=93a9ad4897e560ccd5ebc3397afb7d83d990ef42", "patch": "@@ -356,13 +356,13 @@ pub enum CollectionAllocErr {\n     /// (usually `isize::MAX` bytes).\n     CapacityOverflow,\n     /// Error due to the allocator (see the `AllocErr` type's docs).\n-    AllocErr(AllocErr),\n+    AllocErr,\n }\n \n #[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n impl From<AllocErr> for CollectionAllocErr {\n-    fn from(err: AllocErr) -> Self {\n-        CollectionAllocErr::AllocErr(err)\n+    fn from(AllocErr: AllocErr) -> Self {\n+        CollectionAllocErr::AllocErr\n     }\n }\n "}, {"sha": "20a4f9b508d240be95e285e97fdcbb45dcfc0952", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93a9ad4897e560ccd5ebc3397afb7d83d990ef42/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a9ad4897e560ccd5ebc3397afb7d83d990ef42/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=93a9ad4897e560ccd5ebc3397afb7d83d990ef42", "patch": "@@ -784,7 +784,7 @@ impl<K, V, S> HashMap<K, V, S>\n     pub fn reserve(&mut self, additional: usize) {\n         match self.try_reserve(additional) {\n             Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),\n-            Err(CollectionAllocErr::AllocErr(_)) => Global.oom(),\n+            Err(CollectionAllocErr::AllocErr) => Global.oom(),\n             Ok(()) => { /* yay */ }\n          }\n     }\n@@ -3634,7 +3634,7 @@ mod test_map {\n             if let Err(CapacityOverflow) = empty_bytes.try_reserve(max_no_ovf) {\n             } else { panic!(\"isize::MAX + 1 should trigger a CapacityOverflow!\") }\n         } else {\n-            if let Err(AllocErr(_)) = empty_bytes.try_reserve(max_no_ovf) {\n+            if let Err(AllocErr) = empty_bytes.try_reserve(max_no_ovf) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n     }"}, {"sha": "e9bdd4e7d07ea8bb942b6756fa4cbe7297048a5d", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93a9ad4897e560ccd5ebc3397afb7d83d990ef42/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a9ad4897e560ccd5ebc3397afb7d83d990ef42/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=93a9ad4897e560ccd5ebc3397afb7d83d990ef42", "patch": "@@ -772,7 +772,7 @@ impl<K, V> RawTable<K, V> {\n     unsafe fn new_uninitialized(capacity: usize) -> RawTable<K, V> {\n         match Self::try_new_uninitialized(capacity) {\n             Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),\n-            Err(CollectionAllocErr::AllocErr(_)) => Global.oom(),\n+            Err(CollectionAllocErr::AllocErr) => Global.oom(),\n             Ok(table) => { table }\n         }\n     }\n@@ -811,7 +811,7 @@ impl<K, V> RawTable<K, V> {\n     pub fn new(capacity: usize) -> RawTable<K, V> {\n         match Self::try_new(capacity) {\n             Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),\n-            Err(CollectionAllocErr::AllocErr(_)) => Global.oom(),\n+            Err(CollectionAllocErr::AllocErr) => Global.oom(),\n             Ok(table) => { table }\n         }\n     }"}]}