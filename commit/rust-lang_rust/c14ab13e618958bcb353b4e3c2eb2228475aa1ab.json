{"sha": "c14ab13e618958bcb353b4e3c2eb2228475aa1ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNGFiMTNlNjE4OTU4YmNiMzUzYjRlM2MyZWIyMjI4NDc1YWExYWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-25T22:00:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-25T22:00:08Z"}, "message": "Auto merge of #56194 - eddyb:top-unhack, r=alexcrichton\n\nTry to make top-level Cargo.toml work without __CARGO_TEST_ROOT.\n\nThe last failures I noticed before adding the `__CARGO_TEST_ROOT` hack were in `src/test/run-make/thumb-none-{cortex-m,qemu}`, and had to do with the fact that the top-level `Cargo.toml` uses nightly Cargo features.\n\nIf that's the only problem, this PR should work, and we can figure out how to unbreak RLS.", "tree": {"sha": "17bdd52c19dabf789443262d04c4ec699afe02d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17bdd52c19dabf789443262d04c4ec699afe02d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c14ab13e618958bcb353b4e3c2eb2228475aa1ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c14ab13e618958bcb353b4e3c2eb2228475aa1ab", "html_url": "https://github.com/rust-lang/rust/commit/c14ab13e618958bcb353b4e3c2eb2228475aa1ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c14ab13e618958bcb353b4e3c2eb2228475aa1ab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6acbb5b65c06d82c867a94c54ce51dab4707ac61", "url": "https://api.github.com/repos/rust-lang/rust/commits/6acbb5b65c06d82c867a94c54ce51dab4707ac61", "html_url": "https://github.com/rust-lang/rust/commit/6acbb5b65c06d82c867a94c54ce51dab4707ac61"}, {"sha": "6aa4eb923f83112867a043726d04b81107bb9241", "url": "https://api.github.com/repos/rust-lang/rust/commits/6aa4eb923f83112867a043726d04b81107bb9241", "html_url": "https://github.com/rust-lang/rust/commit/6aa4eb923f83112867a043726d04b81107bb9241"}], "stats": {"total": 36, "additions": 14, "deletions": 22}, "files": [{"sha": "89cf687a2463ddb0d5d7fff390669f84374ce36c", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c14ab13e618958bcb353b4e3c2eb2228475aa1ab/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c14ab13e618958bcb353b4e3c2eb2228475aa1ab/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=c14ab13e618958bcb353b4e3c2eb2228475aa1ab", "patch": "@@ -26,6 +26,9 @@ members = [\n ]\n exclude = [\n   \"src/tools/rls/test_data\",\n+  \"build\",\n+  # HACK(eddyb) This hardcodes the fact that our CI uses `/checkout/obj`.\n+  \"obj\",\n ]\n \n # Curiously, LLVM 7.0 will segfault if compiled with opt-level=3"}, {"sha": "e55773011df8eb41f157e3959fbbc5254ac33308", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ab13e618958bcb353b4e3c2eb2228475aa1ab/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ab13e618958bcb353b4e3c2eb2228475aa1ab/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=c14ab13e618958bcb353b4e3c2eb2228475aa1ab", "patch": "@@ -1934,7 +1934,6 @@ impl Step for Distcheck {\n                 .arg(\"generate-lockfile\")\n                 .arg(\"--manifest-path\")\n                 .arg(&toml)\n-                .env(\"__CARGO_TEST_ROOT\", &dir)\n                 .current_dir(&dir),\n         );\n     }"}, {"sha": "58c5296beb35e5281fedd8006280ec16357caa83", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c14ab13e618958bcb353b4e3c2eb2228475aa1ab/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ab13e618958bcb353b4e3c2eb2228475aa1ab/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=c14ab13e618958bcb353b4e3c2eb2228475aa1ab", "patch": "@@ -264,7 +264,6 @@ macro_rules! tool {\n         $name:ident, $path:expr, $tool_name:expr, $mode:expr\n         $(,llvm_tools = $llvm:expr)*\n         $(,is_external_tool = $external:expr)*\n-        $(,cargo_test_root = $cargo_test_root:expr)*\n         ;\n     )+) => {\n         #[derive(Copy, PartialEq, Eq, Clone)]\n@@ -288,15 +287,6 @@ macro_rules! tool {\n                     $(Tool::$name => false $(|| $llvm)*,)+\n                 }\n             }\n-\n-            /// Whether this tool requires may run Cargo for test crates,\n-            /// which currently needs setting the environment variable\n-            /// `__CARGO_TEST_ROOT` to separate it from the workspace.\n-            pub fn needs_cargo_test_root(&self) -> bool {\n-                match self {\n-                    $(Tool::$name => false $(|| $cargo_test_root)*,)+\n-                }\n-            }\n         }\n \n         impl<'a> Builder<'a> {\n@@ -372,9 +362,8 @@ tool!(\n     UnstableBookGen, \"src/tools/unstable-book-gen\", \"unstable-book-gen\", Mode::ToolBootstrap;\n     Tidy, \"src/tools/tidy\", \"tidy\", Mode::ToolBootstrap;\n     Linkchecker, \"src/tools/linkchecker\", \"linkchecker\", Mode::ToolBootstrap;\n-    CargoTest, \"src/tools/cargotest\", \"cargotest\", Mode::ToolBootstrap, cargo_test_root = true;\n-    Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::ToolBootstrap,\n-        llvm_tools = true, cargo_test_root = true;\n+    CargoTest, \"src/tools/cargotest\", \"cargotest\", Mode::ToolBootstrap;\n+    Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::ToolBootstrap, llvm_tools = true;\n     BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::ToolBootstrap;\n     RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::ToolBootstrap;\n     RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::ToolBootstrap,\n@@ -693,11 +682,6 @@ impl<'a> Builder<'a> {\n             }\n         }\n \n-        // Set `__CARGO_TEST_ROOT` to the build directory if needed.\n-        if tool.needs_cargo_test_root() {\n-            cmd.env(\"__CARGO_TEST_ROOT\", &self.config.out);\n-        }\n-\n         add_lib_path(lib_paths, cmd);\n     }\n "}, {"sha": "819439069eaede90eb16a2cd78846f18e8a2ebc4", "filename": "src/test/run-make/thumb-none-cortex-m/Makefile", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c14ab13e618958bcb353b4e3c2eb2228475aa1ab/src%2Ftest%2Frun-make%2Fthumb-none-cortex-m%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c14ab13e618958bcb353b4e3c2eb2228475aa1ab/src%2Ftest%2Frun-make%2Fthumb-none-cortex-m%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fthumb-none-cortex-m%2FMakefile?ref=c14ab13e618958bcb353b4e3c2eb2228475aa1ab", "patch": "@@ -32,7 +32,10 @@ all:\n \tmkdir -p $(WORK_DIR)\n \t-cd $(WORK_DIR) && rm -rf $(CRATE)\n \tcd $(WORK_DIR) && bash -x $(HERE)/../git_clone_sha1.sh $(CRATE) $(CRATE_URL) $(CRATE_SHA1)\n-\tcd $(WORK_DIR) && cd $(CRATE) && $(CARGO) build --target $(TARGET) -v\n+\t# HACK(eddyb) sets `RUSTC_BOOTSTRAP=1` so Cargo can accept nightly features.\n+\t# These come from the top-level Rust workspace, that this crate is not a\n+\t# member of, but Cargo tries to load the workspace `Cargo.toml` anyway.\n+\tcd $(WORK_DIR) && cd $(CRATE) && env RUSTC_BOOTSTRAP=1 $(CARGO) build --target $(TARGET) -v\n else\n \n all:"}, {"sha": "c5cbff5c3c36d210f7e27245a70630fe284d93ea", "filename": "src/test/run-make/thumb-none-qemu/script.sh", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c14ab13e618958bcb353b4e3c2eb2228475aa1ab/src%2Ftest%2Frun-make%2Fthumb-none-qemu%2Fscript.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c14ab13e618958bcb353b4e3c2eb2228475aa1ab/src%2Ftest%2Frun-make%2Fthumb-none-qemu%2Fscript.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fthumb-none-qemu%2Fscript.sh?ref=c14ab13e618958bcb353b4e3c2eb2228475aa1ab", "patch": "@@ -8,9 +8,12 @@ pushd $WORK_DIR\n     rm -rf $CRATE || echo OK\n     cp -a $HERE/example .\n     pushd $CRATE\n-        env RUSTFLAGS=\"-C linker=arm-none-eabi-ld -C link-arg=-Tlink.x\" \\\n+        # HACK(eddyb) sets `RUSTC_BOOTSTRAP=1` so Cargo can accept nightly features.\n+        # These come from the top-level Rust workspace, that this crate is not a\n+        # member of, but Cargo tries to load the workspace `Cargo.toml` anyway.\n+        env RUSTC_BOOTSTRAP=1 RUSTFLAGS=\"-C linker=arm-none-eabi-ld -C link-arg=-Tlink.x\" \\\n             $CARGO run --target $TARGET           | grep \"x = 42\"\n-        env RUSTFLAGS=\"-C linker=arm-none-eabi-ld -C link-arg=-Tlink.x\" \\\n+        env RUSTC_BOOTSTRAP=1 RUSTFLAGS=\"-C linker=arm-none-eabi-ld -C link-arg=-Tlink.x\" \\\n             $CARGO run --target $TARGET --release | grep \"x = 42\"\n     popd\n popd"}]}