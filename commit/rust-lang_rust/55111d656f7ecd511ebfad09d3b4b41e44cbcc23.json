{"sha": "55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "node_id": "C_kwDOAAsO6NoAKDU1MTExZDY1NmY3ZWNkNTExZWJmYWQwOWQzYjRiNDFlNDRjYmNjMjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-05T09:45:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-05T09:45:11Z"}, "message": "Auto merge of #89266 - cjgillot:session-ich, r=michaelwoerister\n\nMove ICH to rustc_query_system\n\nBased on https://github.com/rust-lang/rust/pull/89183\n\nThe StableHashingContext does not need to be in rustc_middle.\n\nThis PR moves it to rustc_query_system. This will avoid a dependency between rustc_ast_lowering and rustc_middle in https://github.com/rust-lang/rust/pull/89124.", "tree": {"sha": "7180fe809f15e8c4a5aaed8e0ca3e3e1fa355955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7180fe809f15e8c4a5aaed8e0ca3e3e1fa355955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "html_url": "https://github.com/rust-lang/rust/commit/55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "074f63648bd2368d5ca19aed02b5763a144e5d05", "url": "https://api.github.com/repos/rust-lang/rust/commits/074f63648bd2368d5ca19aed02b5763a144e5d05", "html_url": "https://github.com/rust-lang/rust/commit/074f63648bd2368d5ca19aed02b5763a144e5d05"}, {"sha": "b2ed9c4007767f6cf692229cffd471d4ce5fde55", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2ed9c4007767f6cf692229cffd471d4ce5fde55", "html_url": "https://github.com/rust-lang/rust/commit/b2ed9c4007767f6cf692229cffd471d4ce5fde55"}], "stats": {"total": 389, "additions": 168, "deletions": 221}, "files": [{"sha": "b991e338e7367b483d9c4d4958655a9e293a53e8", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -3671,6 +3671,7 @@ dependencies = [\n  \"rustc_llvm\",\n  \"rustc_metadata\",\n  \"rustc_middle\",\n+ \"rustc_query_system\",\n  \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n@@ -3704,6 +3705,7 @@ dependencies = [\n  \"rustc_macros\",\n  \"rustc_metadata\",\n  \"rustc_middle\",\n+ \"rustc_query_system\",\n  \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n@@ -3731,6 +3733,7 @@ dependencies = [\n  \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_mir_dataflow\",\n+ \"rustc_query_system\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n@@ -4165,6 +4168,7 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_middle\",\n  \"rustc_mir_dataflow\",\n+ \"rustc_query_system\",\n  \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n@@ -4295,13 +4299,17 @@ dependencies = [\n  \"parking_lot\",\n  \"rustc-rayon-core\",\n  \"rustc_arena\",\n+ \"rustc_ast\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n+ \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n+ \"rustc_target\",\n  \"smallvec\",\n  \"tracing\",\n ]\n@@ -4369,6 +4377,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_fs_util\",\n+ \"rustc_hir\",\n  \"rustc_lint_defs\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n@@ -4404,6 +4413,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_hir\",\n  \"rustc_middle\",\n+ \"rustc_query_system\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n@@ -4447,6 +4457,7 @@ dependencies = [\n  \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_parse_format\",\n+ \"rustc_query_system\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\","}, {"sha": "8d7f2b65c5a828951fec06833818a621bedee592", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -66,21 +66,21 @@ fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Encodable, Decodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]\n pub enum InlineAttr {\n     None,\n     Hint,\n     Always,\n     Never,\n }\n \n-#[derive(Clone, Encodable, Decodable, Debug, PartialEq, Eq)]\n+#[derive(Clone, Encodable, Decodable, Debug, PartialEq, Eq, HashStable_Generic)]\n pub enum InstructionSetAttr {\n     ArmA32,\n     ArmT32,\n }\n \n-#[derive(Clone, Encodable, Decodable, Debug)]\n+#[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n pub enum OptimizeAttr {\n     None,\n     Speed,"}, {"sha": "71f510c037f11f70148f4527c9d07bf863e136f7", "filename": "compiler/rustc_codegen_cranelift/src/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -242,7 +242,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n     fn inject_dll_import_lib(\n         &mut self,\n         _lib_name: &str,\n-        _dll_imports: &[rustc_middle::middle::cstore::DllImport],\n+        _dll_imports: &[rustc_session::cstore::DllImport],\n         _tmpdir: &rustc_data_structures::temp_dir::MaybeTempDir,\n     ) {\n         bug!(\"injecting dll imports is not supported\");"}, {"sha": "11dd6d49aa768d5d207cf4a1e4fe57e2008534a1", "filename": "compiler/rustc_codegen_gcc/src/archive.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,12 +1,11 @@\n use std::fs::File;\n use std::path::{Path, PathBuf};\n \n-use rustc_session::Session;\n use rustc_codegen_ssa::back::archive::ArchiveBuilder;\n+use rustc_session::Session;\n \n use rustc_data_structures::temp_dir::MaybeTempDir;\n-use rustc_middle::middle::cstore::DllImport;\n-\n+use rustc_session::cstore::DllImport;\n \n struct ArchiveConfig<'a> {\n     sess: &'a Session,"}, {"sha": "a6a553b31a3262b8eb25676f707c02dcdf089029", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -26,6 +26,7 @@ rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_llvm = { path = \"../rustc_llvm\" }\n rustc_metadata = { path = \"../rustc_metadata\" }\n+rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "ebc3b704158544db79850004fced6fc885e123a3", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -11,7 +11,7 @@ use crate::llvm::archive_ro::{ArchiveRO, Child};\n use crate::llvm::{self, ArchiveKind, LLVMMachineType, LLVMRustCOFFShortExport};\n use rustc_codegen_ssa::back::archive::ArchiveBuilder;\n use rustc_data_structures::temp_dir::MaybeTempDir;\n-use rustc_middle::middle::cstore::{DllCallingConvention, DllImport};\n+use rustc_session::cstore::{DllCallingConvention, DllImport};\n use rustc_session::Session;\n \n struct ArchiveConfig<'a> {"}, {"sha": "8e6a66a61754640909b560a33575bd6a4b85535a", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -26,13 +26,13 @@ use rustc_fs_util::path_to_c_string;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_middle::ich::NodeIdHashingMode;\n use rustc_middle::mir::{self, GeneratorLayout};\n use rustc_middle::ty::layout::{self, IntegerExt, LayoutOf, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::{self, AdtKind, GeneratorSubsts, ParamEnv, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n+use rustc_query_system::ich::NodeIdHashingMode;\n use rustc_session::config::{self, DebugInfo};\n use rustc_span::symbol::Symbol;\n use rustc_span::FileNameDisplayPreference;"}, {"sha": "83dd625611057138dd5c8f27e08f2df610aba46b", "filename": "compiler/rustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2FCargo.toml?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -33,6 +33,7 @@ rustc_incremental = { path = \"../rustc_incremental\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_metadata = { path = \"../rustc_metadata\" }\n+rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_session = { path = \"../rustc_session\" }\n "}, {"sha": "3db948a16fc738c74b66a6ee3712876ffc4fc180", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::temp_dir::MaybeTempDir;\n-use rustc_middle::middle::cstore::DllImport;\n+use rustc_session::cstore::DllImport;\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n "}, {"sha": "ed15b4648724063a82e854efe0e60106a577c95c", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -3,10 +3,10 @@ use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::{ErrorReported, Handler};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n-use rustc_middle::middle::cstore::DllImport;\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Strip};\n use rustc_session::config::{OutputFilenames, OutputType, PrintRequest};\n+use rustc_session::cstore::DllImport;\n use rustc_session::output::{check_file_is_writeable, invalid_output_for_target, out_filename};\n use rustc_session::search_paths::PathKind;\n use rustc_session::utils::NativeLibKind;"}, {"sha": "ffeb926e648e50c5130c13827f5190d488e8a8e7", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -8,7 +8,7 @@ use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::owning_ref::OwningRef;\n use rustc_data_structures::rustc_erase_owner;\n use rustc_data_structures::sync::MetadataRef;\n-use rustc_middle::middle::cstore::MetadataLoader;\n+use rustc_session::cstore::MetadataLoader;\n use rustc_target::spec::Target;\n \n use crate::METADATA_FILENAME;"}, {"sha": "6e7b2968597408fbe69978832484dc9ccf8833fb", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -16,10 +16,10 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n-use rustc_middle::ich::NodeIdHashingMode;\n use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, AdtDef, ExistentialProjection, Ty, TyCtxt};\n+use rustc_query_system::ich::NodeIdHashingMode;\n use rustc_target::abi::{Integer, TagEncoding, Variants};\n use smallvec::SmallVec;\n "}, {"sha": "b759e3a7a7a33d72b946bfa2f69e4b7e245ad764", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -25,10 +25,10 @@ use rustc_data_structures::sync::Lrc;\n use rustc_hir::def_id::CrateNum;\n use rustc_hir::LangItem;\n use rustc_middle::dep_graph::WorkProduct;\n-use rustc_middle::middle::cstore::{self, CrateSource};\n use rustc_middle::middle::dependency_format::Dependencies;\n use rustc_middle::ty::query::Providers;\n use rustc_session::config::{CrateType, OutputFilenames, OutputType, RUST_CGU_EXT};\n+use rustc_session::cstore::{self, CrateSource};\n use rustc_session::utils::NativeLibKind;\n use rustc_span::symbol::Symbol;\n use std::path::{Path, PathBuf};"}, {"sha": "8129a14fcfdc965b844074c9c9220fb1c3d99225", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -8,12 +8,12 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::ErrorReported;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n-use rustc_middle::middle::cstore::MetadataLoaderDyn;\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, LayoutOf, TyAndLayout};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_session::{\n     config::{self, OutputFilenames, PrintRequest},\n+    cstore::MetadataLoaderDyn,\n     Session,\n };\n use rustc_span::symbol::Symbol;"}, {"sha": "5f659dd977a856417a2a14c43eab53d141270ac1", "filename": "compiler/rustc_const_eval/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_const_eval%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_const_eval%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2FCargo.toml?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -21,6 +21,7 @@ rustc_infer = { path = \"../rustc_infer\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_mir_dataflow = { path = \"../rustc_mir_dataflow\" }\n+rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }"}, {"sha": "cf084faade8cc6c69e8e5cabbe3fc13f7cc63b73", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -6,13 +6,13 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::{self as hir, def_id::DefId, definitions::DefPathData};\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n-use rustc_middle::ich::StableHashingContext;\n use rustc_middle::mir;\n use rustc_middle::ty::layout::{self, LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::{\n     self, query::TyCtxtAt, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_mir_dataflow::storage::AlwaysLiveLocals;\n+use rustc_query_system::ich::StableHashingContext;\n use rustc_session::Limit;\n use rustc_span::{Pos, Span};\n use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};"}, {"sha": "ab7ee03b643f8e315497303c9dd2a5e839c793d3", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -25,12 +25,12 @@ use rustc_interface::util::{self, collect_crate_types, get_codegen_backend};\n use rustc_interface::{interface, Queries};\n use rustc_lint::LintStore;\n use rustc_metadata::locator;\n-use rustc_middle::middle::cstore::MetadataLoader;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n use rustc_serialize::json::{self, ToJson};\n use rustc_session::config::{nightly_options, CG_OPTIONS, DB_OPTIONS};\n use rustc_session::config::{ErrorOutputType, Input, OutputType, PrintRequest, TrimmedDefPaths};\n+use rustc_session::cstore::MetadataLoader;\n use rustc_session::getopts;\n use rustc_session::lint::{Lint, LintId};\n use rustc_session::{config, DiagnosticOutput, Session};"}, {"sha": "9d5ef279dd784cff501452d63af5bf70658f9a75", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -33,6 +33,25 @@ impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for HirId {\n     }\n }\n \n+impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for ItemLocalId {\n+    type KeyType = ItemLocalId;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, _: &HirCtx) -> ItemLocalId {\n+        *self\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for BodyId {\n+    type KeyType = (DefPathHash, ItemLocalId);\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, hcx: &HirCtx) -> (DefPathHash, ItemLocalId) {\n+        let BodyId { hir_id } = *self;\n+        hir_id.to_stable_hash_key(hcx)\n+    }\n+}\n+\n impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for ItemId {\n     type KeyType = DefPathHash;\n "}, {"sha": "bcfa0ef3520fcc743071ced434ff1b86ab5795b5", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -19,7 +19,6 @@ use rustc_metadata::creader::CStore;\n use rustc_metadata::{encode_metadata, EncodedMetadata};\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n-use rustc_middle::middle::cstore::{MetadataLoader, MetadataLoaderDyn};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc_mir_build as mir_build;\n@@ -30,6 +29,7 @@ use rustc_query_impl::{OnDiskCache, Queries as TcxQueries};\n use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_serialize::json;\n use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType, PpMode, PpSourceMode};\n+use rustc_session::cstore::{MetadataLoader, MetadataLoaderDyn};\n use rustc_session::lint;\n use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;"}, {"sha": "dba885a27fe229f3c73176568cb4891135acf097", "filename": "compiler/rustc_macros/src/hash_stable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -116,14 +116,14 @@ pub fn hash_stable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::To\n     s.bound_impl(\n         quote!(\n             ::rustc_data_structures::stable_hasher::HashStable<\n-                ::rustc_middle::ich::StableHashingContext<'__ctx>,\n+                ::rustc_query_system::ich::StableHashingContext<'__ctx>,\n             >\n         ),\n         quote! {\n             #[inline]\n             fn hash_stable(\n                 &self,\n-                __hcx: &mut ::rustc_middle::ich::StableHashingContext<'__ctx>,\n+                __hcx: &mut ::rustc_query_system::ich::StableHashingContext<'__ctx>,\n                 __hasher: &mut ::rustc_data_structures::stable_hasher::StableHasher) {\n                 #discriminant\n                 match *self { #body }"}, {"sha": "95b74fd5306e54c75117f8508669406ca8488873", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -13,11 +13,11 @@ use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def_id::{CrateNum, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n use rustc_index::vec::IndexVec;\n-use rustc_middle::middle::cstore::{CrateDepKind, CrateSource, ExternCrate};\n-use rustc_middle::middle::cstore::{ExternCrateSource, MetadataLoaderDyn};\n use rustc_middle::ty::TyCtxt;\n use rustc_serialize::json::ToJson;\n use rustc_session::config::{self, CrateType, ExternLocation};\n+use rustc_session::cstore::{CrateDepKind, CrateSource, ExternCrate};\n+use rustc_session::cstore::{ExternCrateSource, MetadataLoaderDyn};\n use rustc_session::lint::{self, BuiltinLintDiagnostics, ExternDepSpec};\n use rustc_session::output::validate_crate_name;\n use rustc_session::search_paths::PathKind;"}, {"sha": "ddc3e10fa484f976e073e60e1295c7da791a6fd9", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -55,11 +55,11 @@ use crate::creader::CStore;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::CrateNum;\n-use rustc_middle::middle::cstore::CrateDepKind;\n-use rustc_middle::middle::cstore::LinkagePreference::{self, RequireDynamic, RequireStatic};\n use rustc_middle::middle::dependency_format::{Dependencies, DependencyList, Linkage};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::CrateType;\n+use rustc_session::cstore::CrateDepKind;\n+use rustc_session::cstore::LinkagePreference::{self, RequireDynamic, RequireStatic};\n use rustc_target::spec::PanicStrategy;\n \n crate fn calculate(tcx: TyCtxt<'_>) -> Dependencies {"}, {"sha": "5b42f48a7d466bb9133f9004e334864f8d4abec1", "filename": "compiler/rustc_metadata/src/foreign_modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,7 +1,7 @@\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_middle::middle::cstore::ForeignModule;\n use rustc_middle::ty::TyCtxt;\n+use rustc_session::cstore::ForeignModule;\n \n crate fn collect(tcx: TyCtxt<'_>) -> Vec<ForeignModule> {\n     let mut collector = Collector { modules: Vec::new() };"}, {"sha": "abdac78ae242de3037e9ab658f56c8b303246e97", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -221,8 +221,8 @@ use rustc_data_structures::owning_ref::OwningRef;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_errors::struct_span_err;\n-use rustc_middle::middle::cstore::{CrateSource, MetadataLoader};\n use rustc_session::config::{self, CrateType};\n+use rustc_session::cstore::{CrateSource, MetadataLoader};\n use rustc_session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n use rustc_session::search_paths::PathKind;\n use rustc_session::utils::CanonicalizedPath;"}, {"sha": "75b9e2ef62a8886b56c2de2940cb02824554d3af", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -3,8 +3,8 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_middle::middle::cstore::{DllCallingConvention, DllImport, NativeLib};\n use rustc_middle::ty::{List, ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n+use rustc_session::cstore::{DllCallingConvention, DllImport, NativeLib};\n use rustc_session::parse::feature_err;\n use rustc_session::utils::NativeLibKind;\n use rustc_session::Session;"}, {"sha": "08fc11f21d94e4ec42817c5ccbf98e0cb665cd00", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -21,15 +21,16 @@ use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc_hir::lang_items;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::hir::exports::Export;\n-use rustc_middle::middle::cstore::{CrateSource, ExternCrate};\n-use rustc_middle::middle::cstore::{ForeignModule, LinkagePreference, NativeLib};\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::mir::{self, Body, Promoted};\n use rustc_middle::thir;\n use rustc_middle::ty::codec::TyDecoder;\n use rustc_middle::ty::{self, Ty, TyCtxt, Visibility};\n use rustc_serialize::{opaque, Decodable, Decoder};\n+use rustc_session::cstore::{\n+    CrateSource, ExternCrate, ForeignModule, LinkagePreference, NativeLib,\n+};\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnIndex, MacroKind};\n use rustc_span::source_map::{respan, Spanned};"}, {"sha": "292ef03d856d977a0ede95dc390635439ee928a0", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -8,12 +8,11 @@ use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_middle::hir::exports::Export;\n-use rustc_middle::middle::cstore::ForeignModule;\n-use rustc_middle::middle::cstore::{CrateSource, CrateStore};\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, Visibility};\n+use rustc_session::cstore::{CrateSource, CrateStore, ForeignModule};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::{Session, StableCrateId};\n use rustc_span::hygiene::{ExpnHash, ExpnId};"}, {"sha": "072398983afb95067fc8ce67eb398a9a8a8f34b1", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -18,7 +18,6 @@ use rustc_hir::{AnonConst, GenericParamKind};\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_index::vec::Idx;\n use rustc_middle::hir::map::Map;\n-use rustc_middle::middle::cstore::{ForeignModule, LinkagePreference, NativeLib};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::{\n     metadata_symbol_name, ExportedSymbol, SymbolExportLevel,\n@@ -30,6 +29,7 @@ use rustc_middle::ty::codec::TyEncoder;\n use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n use rustc_serialize::{opaque, Encodable, Encoder};\n use rustc_session::config::CrateType;\n+use rustc_session::cstore::{ForeignModule, LinkagePreference, NativeLib};\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{self, ExternalSource, FileName, SourceFile, Span, SyntaxContext};\n use rustc_span::{"}, {"sha": "42855e9d9d12f2fc25fda08857d48f3b8b0b908c", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -13,13 +13,13 @@ use rustc_hir::definitions::DefKey;\n use rustc_hir::lang_items;\n use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n use rustc_middle::hir::exports::Export;\n-use rustc_middle::middle::cstore::{CrateDepKind, ForeignModule, LinkagePreference, NativeLib};\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc_middle::mir;\n use rustc_middle::thir;\n use rustc_middle::ty::{self, ReprOptions, Ty};\n use rustc_serialize::opaque::Encoder;\n use rustc_session::config::SymbolManglingVersion;\n+use rustc_session::cstore::{CrateDepKind, ForeignModule, LinkagePreference, NativeLib};\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{ExpnIndex, MacroKind};\n use rustc_span::symbol::{Ident, Symbol};"}, {"sha": "962aea448b82ca5ae2c79b9af400692e569d7151", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -79,8 +79,8 @@ macro_rules! arena_types {\n                 >,\n             [few] all_traits: Vec<rustc_hir::def_id::DefId>,\n             [few] privacy_access_levels: rustc_middle::middle::privacy::AccessLevels,\n-            [few] foreign_module: rustc_middle::middle::cstore::ForeignModule,\n-            [few] foreign_modules: Vec<rustc_middle::middle::cstore::ForeignModule>,\n+            [few] foreign_module: rustc_session::cstore::ForeignModule,\n+            [few] foreign_modules: Vec<rustc_session::cstore::ForeignModule>,\n             [] upvars_mentioned: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n             [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation,\n             [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<$tcx>,"}, {"sha": "70895f7b98e84e231404989be4e6a8a434c49bd4", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,7 +1,7 @@\n-use crate::ich::StableHashingContext;\n use crate::ty::{self, TyCtxt};\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sync::Lock;\n+use rustc_query_system::ich::StableHashingContext;\n use rustc_session::Session;\n \n #[macro_use]\n@@ -90,10 +90,9 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n \n impl<'tcx> DepContext for TyCtxt<'tcx> {\n     type DepKind = DepKind;\n-    type StableHashingContext = StableHashingContext<'tcx>;\n \n     #[inline]\n-    fn create_stable_hashing_context(&self) -> Self::StableHashingContext {\n+    fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {\n         TyCtxt::create_stable_hashing_context(*self)\n     }\n "}, {"sha": "efebf73224f27e62823db552a47f3a12692c3bee", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,7 +1,6 @@\n use crate::arena::Arena;\n use crate::hir::map::Map;\n use crate::hir::{IndexedHir, OwnerNodes, ParentedNode};\n-use crate::ich::StableHashingContext;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -12,6 +11,7 @@ use rustc_hir::definitions;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_query_system::ich::StableHashingContext;\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::{Span, DUMMY_SP};"}, {"sha": "5016c5ce95432b34cdf2db7a2c88554b4c985209", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -6,7 +6,6 @@ pub mod exports;\n pub mod map;\n pub mod place;\n \n-use crate::ich::StableHashingContext;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n use rustc_ast::Attribute;\n@@ -16,6 +15,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::*;\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_query_system::ich::StableHashingContext;\n use rustc_span::DUMMY_SP;\n use std::collections::BTreeMap;\n "}, {"sha": "e41f5add457fb2782fa9536781d1c2b7e853fb69", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -81,7 +81,6 @@ pub mod arena;\n #[macro_use]\n pub mod dep_graph;\n pub mod hir;\n-pub mod ich;\n pub mod infer;\n pub mod lint;\n pub mod middle;"}, {"sha": "1eba2994ed36e89af4038a3193094648d59e5500", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,11 +1,11 @@\n use std::cmp;\n \n-use crate::ich::StableHashingContext;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n+use rustc_query_system::ich::StableHashingContext;\n use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n     FutureIncompatibilityReason, Level, Lint, LintId,"}, {"sha": "80a54071311ce921d77a3924b9994da4e840faa9", "filename": "compiler/rustc_middle/src/middle/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,5 +1,4 @@\n pub mod codegen_fn_attrs;\n-pub mod cstore;\n pub mod dependency_format;\n pub mod exported_symbols;\n pub mod lang_items;"}, {"sha": "f33bd3438b96836f54d20b224937592a3f85022f", "filename": "compiler/rustc_middle/src/middle/privacy.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -3,7 +3,9 @@\n //! which are available for use externally when compiled as a library.\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_macros::HashStable;\n+use rustc_query_system::ich::{NodeIdHashingMode, StableHashingContext};\n use rustc_span::def_id::LocalDefId;\n use std::hash::Hash;\n \n@@ -53,3 +55,12 @@ impl<Id> Default for AccessLevels<Id> {\n         AccessLevels { map: Default::default() }\n     }\n }\n+\n+impl<'a> HashStable<StableHashingContext<'a>> for AccessLevels {\n+    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n+        hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n+            let AccessLevels { ref map } = *self;\n+            map.hash_stable(hcx, hasher);\n+        });\n+    }\n+}"}, {"sha": "605e0bc2e63ef7d6810989ebafc401bf3822f274", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -6,10 +6,10 @@\n //!\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/borrow_check.html\n \n-use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::ty::TyCtxt;\n use rustc_hir as hir;\n use rustc_hir::Node;\n+use rustc_query_system::ich::{NodeIdHashingMode, StableHashingContext};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};"}, {"sha": "971556d4463004328c08c94838ebf1b73b3528e5", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -803,8 +803,8 @@ pub enum ImplicitSelfKind {\n TrivialTypeFoldableAndLiftImpls! { BindingForm<'tcx>, }\n \n mod binding_form_impl {\n-    use crate::ich::StableHashingContext;\n     use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+    use rustc_query_system::ich::StableHashingContext;\n \n     impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for super::BindingForm<'tcx> {\n         fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {"}, {"sha": "67a20d72905f927aab6c4551b40ee1937e895c3d", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,5 +1,4 @@\n use crate::dep_graph::{DepNode, WorkProduct, WorkProductId};\n-use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::ty::{subst::InternalSubsts, Instance, InstanceDef, SymbolName, TyCtxt};\n use rustc_attr::InlineAttr;\n use rustc_data_structures::base_n;\n@@ -8,6 +7,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::{HirId, ItemId};\n+use rustc_query_system::ich::{NodeIdHashingMode, StableHashingContext};\n use rustc_session::config::OptLevel;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;"}, {"sha": "cb35a4005f8c29accb8d6a4264fea71468b71010", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -5,7 +5,6 @@\n //! The providers for the queries defined here can be found in\n //! `rustc_traits`.\n \n-use crate::ich::StableHashingContext;\n use crate::infer::canonical::{Canonical, QueryResponse};\n use crate::ty::error::TypeError;\n use crate::ty::subst::GenericArg;\n@@ -14,6 +13,7 @@ use crate::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::struct_span_err;\n+use rustc_query_system::ich::StableHashingContext;\n use rustc_span::source_map::Span;\n use std::iter::FromIterator;\n use std::mem;"}, {"sha": "44f741c5df1a2b37b6025dae3af9c5564c7b6b93", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,4 +1,3 @@\n-use crate::ich::StableHashingContext;\n use crate::mir::interpret::ErrorHandled;\n use crate::ty;\n use crate::ty::util::{Discr, IntTypeExt};\n@@ -11,6 +10,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::{self, Encodable, Encoder};\n use rustc_session::DataTypeKind;\n use rustc_span::symbol::sym;"}, {"sha": "080e2fef203b80098aa4bd032372877457bd22f1", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -3,7 +3,6 @@\n use crate::arena::Arena;\n use crate::dep_graph::DepGraph;\n use crate::hir::place::Place as HirPlace;\n-use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n use crate::lint::{struct_lint_level, LintDiagnosticBuilder, LintLevelSource};\n use crate::middle;\n@@ -45,6 +44,7 @@ use rustc_hir::{\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_middle::mir::FakeReadCause;\n+use rustc_query_system::ich::{NodeIdHashingMode, StableHashingContext};\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_session::config::{BorrowckMode, CrateType, OutputFilenames};\n use rustc_session::lint::{Level, Lint};"}, {"sha": "11ee942b83e772027749764a2cf25f22b043cef4", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,7 +1,7 @@\n-use crate::ich::StableHashingContext;\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::DefId;\n+use rustc_query_system::ich::StableHashingContext;\n use std::fmt::Debug;\n use std::hash::Hash;\n use std::mem;"}, {"sha": "9f47ed89f13fa65781888bd703e9aa3b5ba9f7ed", "filename": "compiler/rustc_middle/src/ty/impls_ty.rs", "status": "renamed", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,13 +1,13 @@\n //! This module contains `HashStable` implementations for various data types\n //! from `rustc_middle::ty` in no particular order.\n \n-use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::middle::region;\n use crate::mir;\n use crate::ty;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n+use rustc_query_system::ich::StableHashingContext;\n use std::cell::RefCell;\n use std::mem;\n \n@@ -163,37 +163,3 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for region::Scope {\n         *self\n     }\n }\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for ty::TyVid {\n-    fn hash_stable(&self, _hcx: &mut StableHashingContext<'a>, _hasher: &mut StableHasher) {\n-        // `TyVid` values are confined to an inference context and hence\n-        // should not be hashed.\n-        bug!(\"ty::TyKind::hash_stable() - can't hash a TyVid {:?}.\", *self)\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for ty::IntVid {\n-    fn hash_stable(&self, _hcx: &mut StableHashingContext<'a>, _hasher: &mut StableHasher) {\n-        // `IntVid` values are confined to an inference context and hence\n-        // should not be hashed.\n-        bug!(\"ty::TyKind::hash_stable() - can't hash an IntVid {:?}.\", *self)\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for ty::FloatVid {\n-    fn hash_stable(&self, _hcx: &mut StableHashingContext<'a>, _hasher: &mut StableHasher) {\n-        // `FloatVid` values are confined to an inference context and hence\n-        // should not be hashed.\n-        bug!(\"ty::TyKind::hash_stable() - can't hash a FloatVid {:?}.\", *self)\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for crate::middle::privacy::AccessLevels {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            let crate::middle::privacy::AccessLevels { ref map } = *self;\n-\n-            map.hash_stable(hcx, hasher);\n-        });\n-    }\n-}", "previous_filename": "compiler/rustc_middle/src/ich/impls_ty.rs"}, {"sha": "f13531814d6eb21e90a51cc7fd2ea407edd7f66d", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -2,7 +2,6 @@ use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir::{GeneratorLayout, GeneratorSavedLocal};\n use crate::ty::subst::Subst;\n use crate::ty::{self, subst::SubstsRef, ReprOptions, Ty, TyCtxt, TypeFoldable};\n-\n use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_hir as hir;"}, {"sha": "e124f0c3894753dbc549d6080892e4843482a6b3", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -20,8 +20,6 @@ pub use generics::*;\n pub use vtable::*;\n \n use crate::hir::exports::ExportMap;\n-use crate::ich::StableHashingContext;\n-use crate::middle::cstore::CrateStoreDyn;\n use crate::mir::{Body, GeneratorLayout};\n use crate::traits::{self, Reveal};\n use crate::ty;\n@@ -37,6 +35,8 @@ use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap, CRATE_DEF_INDEX};\n use rustc_hir::Node;\n use rustc_macros::HashStable;\n+use rustc_query_system::ich::StableHashingContext;\n+use rustc_session::cstore::CrateStoreDyn;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::Align;\n@@ -110,6 +110,7 @@ mod context;\n mod diagnostics;\n mod erase_regions;\n mod generics;\n+mod impls_ty;\n mod instance;\n mod list;\n mod structural_impls;"}, {"sha": "251bee0a3bf215bc2a534700cb9082d30e08f706", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,4 +1,3 @@\n-use crate::middle::cstore::{ExternCrate, ExternCrateSource};\n use crate::mir::interpret::{AllocRange, ConstValue, GlobalAlloc, Pointer, Provenance, Scalar};\n use crate::ty::subst::{GenericArg, GenericArgKind, Subst};\n use crate::ty::{self, ConstInt, DefIdTree, ParamConst, ScalarInt, Ty, TyCtxt, TypeFoldable};\n@@ -11,6 +10,7 @@ use rustc_hir::def_id::{DefId, DefIdSet, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n use rustc_hir::ItemKind;\n use rustc_session::config::TrimmedDefPaths;\n+use rustc_session::cstore::{ExternCrate, ExternCrateSource};\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;"}, {"sha": "b1bc073ca99e4c84cd0607f8cd133ba686914ccd", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -3,8 +3,6 @@ use crate::hir::exports::Export;\n use crate::infer::canonical::{self, Canonical};\n use crate::lint::LintLevelMap;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n-use crate::middle::cstore::{CrateDepKind, CrateSource};\n-use crate::middle::cstore::{ExternCrate, ForeignModule, LinkagePreference, NativeLib};\n use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use crate::middle::lib_features::LibFeatures;\n use crate::middle::privacy::AccessLevels;\n@@ -46,6 +44,8 @@ use rustc_hir::lang_items::{LangItem, LanguageItems};\n use rustc_hir::{Crate, ItemLocalId, TraitCandidate};\n use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n+use rustc_session::cstore::{CrateDepKind, CrateSource};\n+use rustc_session::cstore::{ExternCrate, ForeignModule, LinkagePreference, NativeLib};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::Limits;\n use rustc_target::abi;"}, {"sha": "2c884813d23187eea6f275f54c9cffb979085a36", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,6 +1,5 @@\n //! Miscellaneous type-system utilities that are too small to deserve their own modules.\n \n-use crate::ich::NodeIdHashingMode;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::ty::fold::TypeFolder;\n use crate::ty::layout::IntegerExt;\n@@ -18,6 +17,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n+use rustc_query_system::ich::NodeIdHashingMode;\n use rustc_span::DUMMY_SP;\n use rustc_target::abi::{Integer, Size, TargetDataLayout};\n use smallvec::SmallVec;"}, {"sha": "e85d74ef3eaefdd3171e1b61c4e0e6d46835ee26", "filename": "compiler/rustc_mir_transform/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_mir_transform%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_mir_transform%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2FCargo.toml?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -19,6 +19,7 @@ rustc_index = { path = \"../rustc_index\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_const_eval = { path = \"../rustc_const_eval\" }\n rustc_mir_dataflow = { path = \"../rustc_mir_dataflow\" }\n+rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "1c946bd2d8af282e73abc0bf5597ddb0129ede9e", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -21,7 +21,6 @@ use rustc_data_structures::sync::Lrc;\n use rustc_index::vec::IndexVec;\n use rustc_middle::hir;\n use rustc_middle::hir::map::blocks::FnLikeNode;\n-use rustc_middle::ich::StableHashingContext;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::dump_enabled;\n@@ -30,6 +29,7 @@ use rustc_middle::mir::{\n     TerminatorKind,\n };\n use rustc_middle::ty::TyCtxt;\n+use rustc_query_system::ich::StableHashingContext;\n use rustc_span::def_id::DefId;\n use rustc_span::source_map::SourceMap;\n use rustc_span::{CharPos, ExpnKind, Pos, SourceFile, Span, Symbol};"}, {"sha": "388c33917c64fc9c8d062cfedc095752668e975e", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -10,16 +10,15 @@\n use crate::check_attr::target_from_impl_item;\n use crate::weak_lang_items;\n \n-use rustc_middle::middle::cstore::ExternCrate;\n-use rustc_middle::ty::TyCtxt;\n-\n use rustc_ast::Attribute;\n use rustc_errors::{pluralize, struct_span_err};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::lang_items::{extract, GenericRequirement, ITEM_REFS};\n use rustc_hir::{HirId, LangItem, LanguageItems, Target};\n+use rustc_middle::ty::TyCtxt;\n+use rustc_session::cstore::ExternCrate;\n use rustc_span::Span;\n \n use rustc_middle::ty::query::Providers;"}, {"sha": "c21075a443c0b77427882e8baeaba29ab615f737", "filename": "compiler/rustc_plugin_impl/src/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_plugin_impl%2Fsrc%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_plugin_impl%2Fsrc%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_plugin_impl%2Fsrc%2Fload.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -4,7 +4,7 @@ use crate::Registry;\n use rustc_ast::Crate;\n use rustc_errors::struct_span_err;\n use rustc_metadata::locator;\n-use rustc_middle::middle::cstore::MetadataLoader;\n+use rustc_session::cstore::MetadataLoader;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;"}, {"sha": "e50a8c191ad4001d48f36a56038c199472a6e624", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -20,10 +20,10 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::DiagnosticBuilder;\n use rustc_middle::dep_graph;\n-use rustc_middle::ich::StableHashingContext;\n use rustc_middle::ty::query::{query_keys, query_storage, query_stored, query_values};\n use rustc_middle::ty::query::{Providers, QueryEngine};\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_query_system::ich::StableHashingContext;\n use rustc_span::Span;\n \n #[macro_use]"}, {"sha": "b71a172203612feb72ece7cf02ade0351a82af8e", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -36,7 +36,6 @@ impl<'tcx> std::ops::Deref for QueryCtxt<'tcx> {\n \n impl HasDepContext for QueryCtxt<'tcx> {\n     type DepKind = rustc_middle::dep_graph::DepKind;\n-    type StableHashingContext = rustc_middle::ich::StableHashingContext<'tcx>;\n     type DepContext = TyCtxt<'tcx>;\n \n     #[inline]"}, {"sha": "898a8caa3ca351018ed4b9b3bb589f9c2896a31b", "filename": "compiler/rustc_query_system/Cargo.toml", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2FCargo.toml?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -10,12 +10,16 @@ doctest = false\n rustc_arena = { path = \"../rustc_arena\" }\n tracing = \"0.1\"\n rustc-rayon-core = \"0.3.1\"\n+rustc_ast = { path = \"../rustc_ast\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n-rustc_macros = { path = \"../rustc_macros\" }\n+rustc_feature = { path = \"../rustc_feature\" }\n+rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n+rustc_macros = { path = \"../rustc_macros\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n+rustc_target = { path = \"../rustc_target\" }\n parking_lot = \"0.11\"\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "dd5000153745aa3e822bb77e38de9b388cc765a7", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -43,10 +43,10 @@\n //!   lost during fingerprint computation.\n \n use super::{DepContext, DepKind};\n+use crate::ich::StableHashingContext;\n \n use rustc_data_structures::fingerprint::{Fingerprint, PackedFingerprint};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-\n use std::fmt;\n use std::hash::Hash;\n \n@@ -119,7 +119,7 @@ pub trait DepNodeParams<Ctxt: DepContext>: fmt::Debug + Sized {\n \n impl<Ctxt: DepContext, T> DepNodeParams<Ctxt> for T\n where\n-    T: HashStable<Ctxt::StableHashingContext> + fmt::Debug,\n+    T: for<'a> HashStable<StableHashingContext<'a>> + fmt::Debug,\n {\n     #[inline]\n     default fn can_reconstruct_query_key() -> bool {"}, {"sha": "114d12fb90b0a875bf6e6d014597f654889dd4a3", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,3 +1,4 @@\n+use parking_lot::Mutex;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::{EventId, QueryInvocationId, SelfProfilerRef};\n@@ -7,8 +8,6 @@ use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{AtomicU32, AtomicU64, Lock, Lrc, Ordering};\n use rustc_index::vec::IndexVec;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n-\n-use parking_lot::Mutex;\n use smallvec::{smallvec, SmallVec};\n use std::collections::hash_map::Entry;\n use std::fmt::Debug;\n@@ -19,6 +18,7 @@ use std::sync::atomic::Ordering::Relaxed;\n use super::query::DepGraphQuery;\n use super::serialized::{GraphEncoder, SerializedDepGraph, SerializedDepNodeIndex};\n use super::{DepContext, DepKind, DepNode, HasDepContext, WorkProductId};\n+use crate::ich::StableHashingContext;\n use crate::query::{QueryContext, QuerySideEffects};\n \n #[cfg(debug_assertions)]\n@@ -96,9 +96,9 @@ struct DepGraphData<K: DepKind> {\n     dep_node_debug: Lock<FxHashMap<DepNode<K>, String>>,\n }\n \n-pub fn hash_result<HashCtxt, R>(hcx: &mut HashCtxt, result: &R) -> Option<Fingerprint>\n+pub fn hash_result<R>(hcx: &mut StableHashingContext<'_>, result: &R) -> Option<Fingerprint>\n where\n-    R: HashStable<HashCtxt>,\n+    R: for<'a> HashStable<StableHashingContext<'a>>,\n {\n     let mut stable_hasher = StableHasher::new();\n     result.hash_stable(hcx, &mut stable_hasher);\n@@ -215,7 +215,7 @@ impl<K: DepKind> DepGraph<K> {\n         cx: Ctxt,\n         arg: A,\n         task: fn(Ctxt, A) -> R,\n-        hash_result: fn(&mut Ctxt::StableHashingContext, &R) -> Option<Fingerprint>,\n+        hash_result: fn(&mut StableHashingContext<'_>, &R) -> Option<Fingerprint>,\n     ) -> (R, DepNodeIndex) {\n         if self.is_fully_enabled() {\n             self.with_task_impl(key, cx, arg, task, hash_result)\n@@ -234,7 +234,7 @@ impl<K: DepKind> DepGraph<K> {\n         cx: Ctxt,\n         arg: A,\n         task: fn(Ctxt, A) -> R,\n-        hash_result: fn(&mut Ctxt::StableHashingContext, &R) -> Option<Fingerprint>,\n+        hash_result: fn(&mut StableHashingContext<'_>, &R) -> Option<Fingerprint>,\n     ) -> (R, DepNodeIndex) {\n         // This function is only called when the graph is enabled.\n         let data = self.data.as_ref().unwrap();"}, {"sha": "2afef21025419888d62ffe1acbc08ad54fd534c9", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -9,6 +9,7 @@ pub use graph::{hash_result, DepGraph, DepNodeColor, DepNodeIndex, TaskDeps, Wor\n pub use query::DepGraphQuery;\n pub use serialized::{SerializedDepGraph, SerializedDepNodeIndex};\n \n+use crate::ich::StableHashingContext;\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sync::Lock;\n use rustc_serialize::{opaque::FileEncoder, Encodable};\n@@ -19,10 +20,9 @@ use std::hash::Hash;\n \n pub trait DepContext: Copy {\n     type DepKind: self::DepKind;\n-    type StableHashingContext;\n \n     /// Create a hashing context for hashing new results.\n-    fn create_stable_hashing_context(&self) -> Self::StableHashingContext;\n+    fn create_stable_hashing_context(&self) -> StableHashingContext<'_>;\n \n     /// Access the DepGraph.\n     fn dep_graph(&self) -> &DepGraph<Self::DepKind>;\n@@ -36,18 +36,13 @@ pub trait DepContext: Copy {\n \n pub trait HasDepContext: Copy {\n     type DepKind: self::DepKind;\n-    type StableHashingContext;\n-    type DepContext: self::DepContext<\n-        DepKind = Self::DepKind,\n-        StableHashingContext = Self::StableHashingContext,\n-    >;\n+    type DepContext: self::DepContext<DepKind = Self::DepKind>;\n \n     fn dep_context(&self) -> &Self::DepContext;\n }\n \n impl<T: DepContext> HasDepContext for T {\n     type DepKind = T::DepKind;\n-    type StableHashingContext = T::StableHashingContext;\n     type DepContext = Self;\n \n     fn dep_context(&self) -> &Self::DepContext {"}, {"sha": "f2e935c59fce282f119d2c41ca79370c18ad08dd", "filename": "compiler/rustc_query_system/src/ich/hcx.rs", "status": "renamed", "additions": 5, "deletions": 33, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,14 +1,12 @@\n use crate::ich;\n-use crate::middle::cstore::CrateStore;\n-use crate::ty::TyCtxt;\n-\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::definitions::{DefPathHash, Definitions};\n+use rustc_session::cstore::CrateStore;\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::Symbol;\n@@ -179,42 +177,15 @@ impl<'a> StableHashingContext<'a> {\n     }\n }\n \n-/// Something that can provide a stable hashing context.\n-pub trait StableHashingContextProvider<'a> {\n-    fn get_stable_hashing_context(&self) -> StableHashingContext<'a>;\n-}\n-\n-impl<'a, 'b, T: StableHashingContextProvider<'a>> StableHashingContextProvider<'a> for &'b T {\n-    fn get_stable_hashing_context(&self) -> StableHashingContext<'a> {\n-        (**self).get_stable_hashing_context()\n-    }\n-}\n-\n-impl<'a, 'b, T: StableHashingContextProvider<'a>> StableHashingContextProvider<'a> for &'b mut T {\n-    fn get_stable_hashing_context(&self) -> StableHashingContext<'a> {\n-        (**self).get_stable_hashing_context()\n-    }\n-}\n-\n-impl StableHashingContextProvider<'tcx> for TyCtxt<'tcx> {\n-    fn get_stable_hashing_context(&self) -> StableHashingContext<'tcx> {\n-        (*self).create_stable_hashing_context()\n-    }\n-}\n-\n-impl<'a> StableHashingContextProvider<'a> for StableHashingContext<'a> {\n-    fn get_stable_hashing_context(&self) -> StableHashingContext<'a> {\n-        self.clone()\n-    }\n-}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for ast::NodeId {\n+    #[inline]\n     fn hash_stable(&self, _: &mut StableHashingContext<'a>, _: &mut StableHasher) {\n         panic!(\"Node IDs should not appear in incremental state\");\n     }\n }\n \n impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n+    #[inline]\n     fn hash_spans(&self) -> bool {\n         self.hash_spans\n     }\n@@ -229,6 +200,7 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n         self.definitions.def_span(def_id)\n     }\n \n+    #[inline]\n     fn span_data_to_lines_and_cols(\n         &mut self,\n         span: &SpanData,\n@@ -237,4 +209,4 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n     }\n }\n \n-impl rustc_session::HashStableContext for StableHashingContext<'a> {}\n+impl<'a> rustc_session::HashStableContext for StableHashingContext<'a> {}", "previous_filename": "compiler/rustc_middle/src/ich/hcx.rs"}, {"sha": "04eb263a977187536acabe3a01a8bc25e6e222a2", "filename": "compiler/rustc_query_system/src/ich/impls_hir.rs", "status": "renamed", "additions": 5, "deletions": 41, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -2,7 +2,6 @@\n //! types in no particular order.\n \n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n-use rustc_attr as attr;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_hir as hir;\n@@ -27,13 +26,15 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n         }\n     }\n \n+    #[inline]\n     fn hash_body_id(&mut self, id: hir::BodyId, hasher: &mut StableHasher) {\n         let hcx = self;\n         if hcx.hash_bodies() {\n             hcx.body_resolver.body(id).hash_stable(hcx, hasher);\n         }\n     }\n \n+    #[inline]\n     fn hash_reference_to_item(&mut self, id: hir::HirId, hasher: &mut StableHasher) {\n         let hcx = self;\n \n@@ -42,6 +43,7 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n         })\n     }\n \n+    #[inline]\n     fn hash_hir_mod(&mut self, module: &hir::Mod<'_>, hasher: &mut StableHasher) {\n         let hcx = self;\n         let hir::Mod { inner: ref inner_span, ref item_ids } = *module;\n@@ -104,6 +106,7 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n         }\n     }\n \n+    #[inline]\n     fn hash_hir_item_like<F: FnOnce(&mut Self)>(&mut self, f: F) {\n         let prev_hash_node_ids = self.node_id_hashing_mode;\n         self.node_id_hashing_mode = NodeIdHashingMode::Ignore;\n@@ -114,16 +117,8 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n     }\n }\n \n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::ItemLocalId {\n-    type KeyType = hir::ItemLocalId;\n-\n-    #[inline]\n-    fn to_stable_hash_key(&self, _: &StableHashingContext<'a>) -> hir::ItemLocalId {\n-        *self\n-    }\n-}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for hir::Body<'_> {\n+    #[inline]\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let hir::Body { params, value, generator_kind } = self;\n \n@@ -135,19 +130,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Body<'_> {\n     }\n }\n \n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::BodyId {\n-    type KeyType = (DefPathHash, hir::ItemLocalId);\n-\n-    #[inline]\n-    fn to_stable_hash_key(\n-        &self,\n-        hcx: &StableHashingContext<'a>,\n-    ) -> (DefPathHash, hir::ItemLocalId) {\n-        let hir::BodyId { hir_id } = *self;\n-        hir_id.to_stable_hash_key(hcx)\n-    }\n-}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for hir::TraitCandidate {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n@@ -171,21 +153,3 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::TraitCandidate {\n         )\n     }\n }\n-\n-impl<'hir> HashStable<StableHashingContext<'hir>> for attr::InlineAttr {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'hir>, hasher: &mut StableHasher) {\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'hir> HashStable<StableHashingContext<'hir>> for attr::InstructionSetAttr {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'hir>, hasher: &mut StableHasher) {\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'hir> HashStable<StableHashingContext<'hir>> for attr::OptimizeAttr {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'hir>, hasher: &mut StableHasher) {\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-    }\n-}", "previous_filename": "compiler/rustc_middle/src/ich/impls_hir.rs"}, {"sha": "acf2990b6434883ba92509cb4bacc68e1f86a557", "filename": "compiler/rustc_query_system/src/ich/impls_syntax.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_syntax.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "previous_filename": "compiler/rustc_middle/src/ich/impls_syntax.rs"}, {"sha": "54416902e5fb63e0104d73fb8167b96efa399ed9", "filename": "compiler/rustc_query_system/src/ich/mod.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fmod.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,13 +1,11 @@\n //! ICH - Incremental Compilation Hash\n \n-pub use self::hcx::{NodeIdHashingMode, StableHashingContext, StableHashingContextProvider};\n+pub use self::hcx::{NodeIdHashingMode, StableHashingContext};\n use rustc_span::symbol::{sym, Symbol};\n \n mod hcx;\n-\n mod impls_hir;\n mod impls_syntax;\n-mod impls_ty;\n \n pub const IGNORED_ATTRIBUTES: &[Symbol] = &[\n     sym::cfg,", "previous_filename": "compiler/rustc_middle/src/ich/mod.rs"}, {"sha": "bc23de069b0d9fdbccf830ce8736ed644b0b84ed", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,3 +1,4 @@\n+#![feature(assert_matches)]\n #![feature(bool_to_option)]\n #![feature(core_intrinsics)]\n #![feature(hash_raw_entry)]\n@@ -14,4 +15,5 @@ extern crate rustc_macros;\n \n pub mod cache;\n pub mod dep_graph;\n+pub mod ich;\n pub mod query;"}, {"sha": "76a165ed8e6bcc482b6b5c52e040e976cb040411", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -2,6 +2,7 @@\n \n use crate::dep_graph::DepNode;\n use crate::dep_graph::SerializedDepNodeIndex;\n+use crate::ich::StableHashingContext;\n use crate::query::caches::QueryCache;\n use crate::query::{QueryCacheStore, QueryContext, QueryState};\n \n@@ -23,7 +24,7 @@ pub(crate) struct QueryVtable<CTX: QueryContext, K, V> {\n     pub dep_kind: CTX::DepKind,\n     pub eval_always: bool,\n \n-    pub hash_result: fn(&mut CTX::StableHashingContext, &V) -> Option<Fingerprint>,\n+    pub hash_result: fn(&mut StableHashingContext<'_>, &V) -> Option<Fingerprint>,\n     pub handle_cycle_error: fn(CTX, DiagnosticBuilder<'_>) -> V,\n     pub cache_on_disk: fn(CTX, &K, Option<&V>) -> bool,\n     pub try_load_from_disk: fn(CTX, SerializedDepNodeIndex) -> Option<V>,\n@@ -39,7 +40,7 @@ impl<CTX: QueryContext, K, V> QueryVtable<CTX, K, V> {\n \n     pub(crate) fn hash_result(\n         &self,\n-        hcx: &mut CTX::StableHashingContext,\n+        hcx: &mut StableHashingContext<'_>,\n         value: &V,\n     ) -> Option<Fingerprint> {\n         (self.hash_result)(hcx, value)\n@@ -74,10 +75,8 @@ pub trait QueryAccessors<CTX: QueryContext>: QueryConfig {\n     // Don't use this method to compute query results, instead use the methods on TyCtxt\n     fn compute_fn(tcx: CTX, key: &Self::Key) -> fn(CTX::DepContext, Self::Key) -> Self::Value;\n \n-    fn hash_result(\n-        hcx: &mut CTX::StableHashingContext,\n-        result: &Self::Value,\n-    ) -> Option<Fingerprint>;\n+    fn hash_result(hcx: &mut StableHashingContext<'_>, result: &Self::Value)\n+    -> Option<Fingerprint>;\n \n     fn handle_cycle_error(tcx: CTX, diag: DiagnosticBuilder<'_>) -> Self::Value;\n }"}, {"sha": "2a562a06cb3cdc001544b01959bca02811a4c7b5", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -27,8 +27,8 @@ use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n use rustc_metadata::creader::LoadedMacro;\n use rustc_middle::bug;\n use rustc_middle::hir::exports::Export;\n-use rustc_middle::middle::cstore::CrateStore;\n use rustc_middle::ty;\n+use rustc_session::cstore::CrateStore;\n use rustc_span::hygiene::{ExpnId, LocalExpnId, MacroKind};\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};"}, {"sha": "3e7783033efa5df265ff3365ff054866dbd99973", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -51,10 +51,10 @@ use rustc_hir::TraitCandidate;\n use rustc_index::vec::IndexVec;\n use rustc_metadata::creader::{CStore, CrateLoader};\n use rustc_middle::hir::exports::ExportMap;\n-use rustc_middle::middle::cstore::{CrateStore, MetadataLoaderDyn};\n use rustc_middle::span_bug;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, DefIdTree, MainDefinition, ResolverOutputs};\n+use rustc_session::cstore::{CrateStore, MetadataLoaderDyn};\n use rustc_session::lint;\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::Session;"}, {"sha": "543cd0247a53daecd9400c4b4711a6232c54578a", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -19,11 +19,11 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::Node;\n use rustc_hir_pretty::{enum_def_to_string, fn_to_string, ty_to_string};\n use rustc_middle::hir::map::Map;\n-use rustc_middle::middle::cstore::ExternCrate;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::{self, print::with_no_trimmed_paths, DefIdTree, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_session::config::{CrateType, Input, OutputType};\n+use rustc_session::cstore::ExternCrate;\n use rustc_session::output::{filename_for_metadata, out_filename};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::Ident;"}, {"sha": "37cfc4a0dc3c2b91d586228a5d61df1dda0e7912", "filename": "compiler/rustc_session/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2FCargo.toml?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -9,6 +9,7 @@ rustc_macros = { path = \"../rustc_macros\" }\n tracing = \"0.1\"\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_feature = { path = \"../rustc_feature\" }\n+rustc_hir = { path = \"../rustc_hir\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }"}, {"sha": "9d6bd20103989190b9bd5100c755626e192a80ec", "filename": "compiler/rustc_session/src/cstore.rs", "status": "renamed", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -2,13 +2,12 @@\n //! are *mostly* used as a part of that interface, but these should\n //! probably get a better home if someone can find one.\n \n+use crate::search_paths::PathKind;\n+use crate::utils::NativeLibKind;\n use rustc_ast as ast;\n use rustc_data_structures::sync::{self, MetadataRef};\n use rustc_hir::def_id::{CrateNum, DefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n-use rustc_macros::HashStable;\n-use rustc_session::search_paths::PathKind;\n-use rustc_session::utils::NativeLibKind;\n use rustc_span::hygiene::{ExpnHash, ExpnId};\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n@@ -21,21 +20,22 @@ use std::path::{Path, PathBuf};\n \n /// Where a crate came from on the local filesystem. One of these three options\n /// must be non-None.\n-#[derive(PartialEq, Clone, Debug, HashStable, Encodable, Decodable)]\n+#[derive(PartialEq, Clone, Debug, HashStable_Generic, Encodable, Decodable)]\n pub struct CrateSource {\n     pub dylib: Option<(PathBuf, PathKind)>,\n     pub rlib: Option<(PathBuf, PathKind)>,\n     pub rmeta: Option<(PathBuf, PathKind)>,\n }\n \n impl CrateSource {\n+    #[inline]\n     pub fn paths(&self) -> impl Iterator<Item = &PathBuf> {\n         self.dylib.iter().chain(self.rlib.iter()).chain(self.rmeta.iter()).map(|p| &p.0)\n     }\n }\n \n #[derive(Encodable, Decodable, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]\n-#[derive(HashStable)]\n+#[derive(HashStable_Generic)]\n pub enum CrateDepKind {\n     /// A dependency that is only used for its macros.\n     MacrosOnly,\n@@ -48,6 +48,7 @@ pub enum CrateDepKind {\n }\n \n impl CrateDepKind {\n+    #[inline]\n     pub fn macros_only(self) -> bool {\n         match self {\n             CrateDepKind::MacrosOnly => true,\n@@ -56,13 +57,13 @@ impl CrateDepKind {\n     }\n }\n \n-#[derive(Copy, Debug, PartialEq, Clone, Encodable, Decodable, HashStable)]\n+#[derive(Copy, Debug, PartialEq, Clone, Encodable, Decodable, HashStable_Generic)]\n pub enum LinkagePreference {\n     RequireDynamic,\n     RequireStatic,\n }\n \n-#[derive(Debug, Encodable, Decodable, HashStable)]\n+#[derive(Debug, Encodable, Decodable, HashStable_Generic)]\n pub struct NativeLib {\n     pub kind: NativeLibKind,\n     pub name: Option<Symbol>,\n@@ -73,7 +74,7 @@ pub struct NativeLib {\n     pub dll_imports: Vec<DllImport>,\n }\n \n-#[derive(Clone, Debug, Encodable, Decodable, HashStable)]\n+#[derive(Clone, Debug, Encodable, Decodable, HashStable_Generic)]\n pub struct DllImport {\n     pub name: Symbol,\n     pub ordinal: Option<u16>,\n@@ -90,21 +91,21 @@ pub struct DllImport {\n ///\n /// The usize value, where present, indicates the size of the function's argument list\n /// in bytes.\n-#[derive(Clone, PartialEq, Debug, Encodable, Decodable, HashStable)]\n+#[derive(Clone, PartialEq, Debug, Encodable, Decodable, HashStable_Generic)]\n pub enum DllCallingConvention {\n     C,\n     Stdcall(usize),\n     Fastcall(usize),\n     Vectorcall(usize),\n }\n \n-#[derive(Clone, TyEncodable, TyDecodable, HashStable, Debug)]\n+#[derive(Clone, Encodable, Decodable, HashStable_Generic, Debug)]\n pub struct ForeignModule {\n     pub foreign_items: Vec<DefId>,\n     pub def_id: DefId,\n }\n \n-#[derive(Copy, Clone, Debug, HashStable)]\n+#[derive(Copy, Clone, Debug, HashStable_Generic)]\n pub struct ExternCrate {\n     pub src: ExternCrateSource,\n \n@@ -123,10 +124,12 @@ impl ExternCrate {\n     /// If true, then this crate is the crate named by the extern\n     /// crate referenced above. If false, then this crate is a dep\n     /// of the crate.\n+    #[inline]\n     pub fn is_direct(&self) -> bool {\n         self.dependency_of == LOCAL_CRATE\n     }\n \n+    #[inline]\n     pub fn rank(&self) -> impl PartialOrd {\n         // Prefer:\n         // - direct extern crate to indirect\n@@ -135,7 +138,7 @@ impl ExternCrate {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, HashStable)]\n+#[derive(Copy, Clone, Debug, HashStable_Generic)]\n pub enum ExternCrateSource {\n     /// Crate is loaded by `extern crate`.\n     Extern(", "previous_filename": "compiler/rustc_middle/src/middle/cstore.rs"}, {"sha": "6c86f86ecd9bb210a4d71b1d7eca891bd44a52ec", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,4 +1,5 @@\n #![feature(crate_visibility_modifier)]\n+#![feature(min_specialization)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n \n@@ -14,6 +15,7 @@ pub mod parse;\n mod code_stats;\n #[macro_use]\n pub mod config;\n+pub mod cstore;\n pub mod filesearch;\n mod options;\n pub mod search_paths;\n@@ -28,4 +30,4 @@ pub use getopts;\n /// Requirements for a `StableHashingContext` to be used in this crate.\n /// This is a hack to allow using the `HashStable_Generic` derive macro\n /// instead of implementing everything in `rustc_middle`.\n-pub trait HashStableContext {}\n+pub trait HashStableContext: rustc_ast::HashStableContext + rustc_hir::HashStableContext {}"}, {"sha": "b9751f0adb51738cb0c9b8116e16f2b691894ee1", "filename": "compiler/rustc_symbol_mangling/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_symbol_mangling%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_symbol_mangling%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2FCargo.toml?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -16,4 +16,5 @@ rustc_middle = { path = \"../rustc_middle\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_session = { path = \"../rustc_session\" }"}, {"sha": "de18614360ef564ad891f5ec6cb7ad705a405deb", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -1,12 +1,12 @@\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::CrateNum;\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n-use rustc_middle::ich::NodeIdHashingMode;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::print::{PrettyPrinter, Print, Printer};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt, TypeFoldable};\n use rustc_middle::util::common::record_time;\n+use rustc_query_system::ich::NodeIdHashingMode;\n \n use tracing::debug;\n "}, {"sha": "aa1074709a0e1e6697b3c8997d18b8c32e3b149c", "filename": "compiler/rustc_trait_selection/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_trait_selection%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler%2Frustc_trait_selection%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2FCargo.toml?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -18,6 +18,7 @@ rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_macros = { path = \"../rustc_macros\" }\n+rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "1be08191bc9125f66c69255affcc3e554e9fec08", "filename": "src/test/ui-fulldeps/hash-stable-is-unstable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.rs?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -2,10 +2,10 @@\n \n extern crate rustc_data_structures;\n //~^ use of unstable library feature 'rustc_private'\n-extern crate rustc_middle;\n-//~^ use of unstable library feature 'rustc_private'\n extern crate rustc_macros;\n //~^ use of unstable library feature 'rustc_private'\n+extern crate rustc_query_system;\n+//~^ use of unstable library feature 'rustc_private'\n \n use rustc_macros::HashStable;\n //~^ use of unstable library feature 'rustc_private'"}, {"sha": "d25657691ed4d1c4843b71cdb77a812cc4ba41c6", "filename": "src/test/ui-fulldeps/hash-stable-is-unstable.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr?ref=55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "patch": "@@ -10,7 +10,7 @@ LL | extern crate rustc_data_structures;\n error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?\n   --> $DIR/hash-stable-is-unstable.rs:5:1\n    |\n-LL | extern crate rustc_middle;\n+LL | extern crate rustc_macros;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #27812 <https://github.com/rust-lang/rust/issues/27812> for more information\n@@ -19,8 +19,8 @@ LL | extern crate rustc_middle;\n error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?\n   --> $DIR/hash-stable-is-unstable.rs:7:1\n    |\n-LL | extern crate rustc_macros;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | extern crate rustc_query_system;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #27812 <https://github.com/rust-lang/rust/issues/27812> for more information\n    = help: add `#![feature(rustc_private)]` to the crate attributes to enable"}]}