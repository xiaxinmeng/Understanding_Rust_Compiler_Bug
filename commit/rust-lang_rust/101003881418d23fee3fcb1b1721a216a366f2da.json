{"sha": "101003881418d23fee3fcb1b1721a216a366f2da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMTAwMzg4MTQxOGQyM2ZlZTNmY2IxYjE3MjFhMjE2YTM2NmYyZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-27T13:25:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-27T13:25:16Z"}, "message": "Auto merge of #83245 - the8472:generalize-slice-fill, r=m-ou-se\n\nGeneralize and inline slice::fill specializations\n\nThis makes the memset specialization applicable to more types. And since the code now lives in a generic method it is also eligible for cross-crate inlining which  should fix #83235", "tree": {"sha": "9f3dd6280e71d341b83212e38bfc2670a9858449", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f3dd6280e71d341b83212e38bfc2670a9858449"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/101003881418d23fee3fcb1b1721a216a366f2da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/101003881418d23fee3fcb1b1721a216a366f2da", "html_url": "https://github.com/rust-lang/rust/commit/101003881418d23fee3fcb1b1721a216a366f2da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/101003881418d23fee3fcb1b1721a216a366f2da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aef11409b43a533f4e59ffb9b0efcb619c6e6879", "url": "https://api.github.com/repos/rust-lang/rust/commits/aef11409b43a533f4e59ffb9b0efcb619c6e6879", "html_url": "https://github.com/rust-lang/rust/commit/aef11409b43a533f4e59ffb9b0efcb619c6e6879"}, {"sha": "d7fdd9065544bc6819ec34b61c93fd9674d8db8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7fdd9065544bc6819ec34b61c93fd9674d8db8f", "html_url": "https://github.com/rust-lang/rust/commit/d7fdd9065544bc6819ec34b61c93fd9674d8db8f"}], "stats": {"total": 62, "additions": 26, "deletions": 36}, "files": [{"sha": "04efa5207877829d62177e25f79a973747e0d137", "filename": "library/core/benches/slice.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/101003881418d23fee3fcb1b1721a216a366f2da/library%2Fcore%2Fbenches%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101003881418d23fee3fcb1b1721a216a366f2da/library%2Fcore%2Fbenches%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fslice.rs?ref=101003881418d23fee3fcb1b1721a216a366f2da", "patch": "@@ -114,3 +114,16 @@ rotate!(rotate_16_usize_4, 16, |i| [i; 4]);\n rotate!(rotate_16_usize_5, 16, |i| [i; 5]);\n rotate!(rotate_64_usize_4, 64, |i| [i; 4]);\n rotate!(rotate_64_usize_5, 64, |i| [i; 5]);\n+\n+#[bench]\n+fn fill_byte_sized(b: &mut Bencher) {\n+    #[derive(Copy, Clone)]\n+    struct NewType(u8);\n+\n+    let mut ary = [NewType(0); 1024];\n+\n+    b.iter(|| {\n+        let slice = &mut ary[..];\n+        black_box(slice.fill(black_box(NewType(42))));\n+    });\n+}"}, {"sha": "425cf71626f40edae9d5f8dd2ce577c5e1a07549", "filename": "library/core/src/slice/specialize.rs", "status": "modified", "additions": 13, "deletions": 36, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/101003881418d23fee3fcb1b1721a216a366f2da/library%2Fcore%2Fsrc%2Fslice%2Fspecialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101003881418d23fee3fcb1b1721a216a366f2da/library%2Fcore%2Fsrc%2Fslice%2Fspecialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fspecialize.rs?ref=101003881418d23fee3fcb1b1721a216a366f2da", "patch": "@@ -1,3 +1,4 @@\n+use crate::mem::{size_of, transmute_copy};\n use crate::ptr::write_bytes;\n \n pub(super) trait SpecFill<T> {\n@@ -17,42 +18,18 @@ impl<T: Clone> SpecFill<T> for [T] {\n }\n \n impl<T: Copy> SpecFill<T> for [T] {\n-    default fn spec_fill(&mut self, value: T) {\n-        for item in self.iter_mut() {\n-            *item = value;\n-        }\n-    }\n-}\n-\n-impl SpecFill<u8> for [u8] {\n-    fn spec_fill(&mut self, value: u8) {\n-        // SAFETY: this is slice of u8\n-        unsafe {\n-            let ptr = self.as_mut_ptr();\n-            let len = self.len();\n-            write_bytes(ptr, value, len);\n-        }\n-    }\n-}\n-\n-impl SpecFill<i8> for [i8] {\n-    fn spec_fill(&mut self, value: i8) {\n-        // SAFETY: this is slice of i8\n-        unsafe {\n-            let ptr = self.as_mut_ptr();\n-            let len = self.len();\n-            write_bytes(ptr, value as u8, len);\n-        }\n-    }\n-}\n-\n-impl SpecFill<bool> for [bool] {\n-    fn spec_fill(&mut self, value: bool) {\n-        // SAFETY: this is slice of bool\n-        unsafe {\n-            let ptr = self.as_mut_ptr();\n-            let len = self.len();\n-            write_bytes(ptr, value as u8, len);\n+    fn spec_fill(&mut self, value: T) {\n+        if size_of::<T>() == 1 {\n+            // SAFETY: The size_of check above ensures that values are 1 byte wide, as required\n+            // for the transmute and write_bytes\n+            unsafe {\n+                let value: u8 = transmute_copy(&value);\n+                write_bytes(self.as_mut_ptr(), value, self.len());\n+            }\n+        } else {\n+            for item in self.iter_mut() {\n+                *item = value;\n+            }\n         }\n     }\n }"}]}