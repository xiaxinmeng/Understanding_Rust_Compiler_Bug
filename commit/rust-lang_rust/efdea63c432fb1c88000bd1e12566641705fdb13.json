{"sha": "efdea63c432fb1c88000bd1e12566641705fdb13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZGVhNjNjNDMyZmIxYzg4MDAwYmQxZTEyNTY2NjQxNzA1ZmRiMTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-07T02:05:51Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T12:51:21Z"}, "message": "extract parse_prefix_expr", "tree": {"sha": "71d942543d53dd41ca38a29494ed390969a2b18f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71d942543d53dd41ca38a29494ed390969a2b18f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efdea63c432fb1c88000bd1e12566641705fdb13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efdea63c432fb1c88000bd1e12566641705fdb13", "html_url": "https://github.com/rust-lang/rust/commit/efdea63c432fb1c88000bd1e12566641705fdb13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efdea63c432fb1c88000bd1e12566641705fdb13/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cfcfe9e20f4034481e8ece86f9b2f39a564c0f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cfcfe9e20f4034481e8ece86f9b2f39a564c0f5", "html_url": "https://github.com/rust-lang/rust/commit/4cfcfe9e20f4034481e8ece86f9b2f39a564c0f5"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "606714b5fa2e6e72ce484507a4ee342ae044bc70", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/efdea63c432fb1c88000bd1e12566641705fdb13/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdea63c432fb1c88000bd1e12566641705fdb13/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=efdea63c432fb1c88000bd1e12566641705fdb13", "patch": "@@ -453,22 +453,7 @@ impl<'a> Parser<'a> {\n                 let (span, e) = self.interpolated_or_expr_span(e)?;\n                 (lo.to(span), self.mk_unary(UnOp::Not, e))\n             }\n-            // Suggest `!` for bitwise negation when encountering a `~`\n-            token::Tilde => {\n-                self.bump();\n-                let e = self.parse_prefix_expr(None);\n-                let (span, e) = self.interpolated_or_expr_span(e)?;\n-                let span_of_tilde = lo;\n-                self.struct_span_err(span_of_tilde, \"`~` cannot be used as a unary operator\")\n-                    .span_suggestion_short(\n-                        span_of_tilde,\n-                        \"use `!` to perform bitwise not\",\n-                        \"!\".to_owned(),\n-                        Applicability::MachineApplicable,\n-                    )\n-                    .emit();\n-                (lo.to(span), self.mk_unary(UnOp::Not, e))\n-            }\n+            token::Tilde => self.recover_tilde_expr(lo)?,\n             token::BinOp(token::Minus) => self.parse_neg_expr(lo)?,\n             token::BinOp(token::Star) => self.parse_deref_expr(lo)?,\n             token::BinOp(token::And) | token::AndAnd => self.parse_borrow_expr(lo)?,\n@@ -481,6 +466,22 @@ impl<'a> Parser<'a> {\n         return Ok(self.mk_expr(lo.to(hi), ex, attrs));\n     }\n \n+    // Recover on `!` suggesting for bitwise negation instead.\n+    fn recover_tilde_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n+        self.bump();\n+        let expr = self.parse_prefix_expr(None);\n+        let (span, expr) = self.interpolated_or_expr_span(expr)?;\n+        self.struct_span_err(lo, \"`~` cannot be used as a unary operator\")\n+            .span_suggestion_short(\n+                lo,\n+                \"use `!` to perform bitwise not\",\n+                \"!\".to_owned(),\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n+        Ok((lo.to(span), self.mk_unary(UnOp::Not, expr)))\n+    }\n+\n     /// Parse `-expr`.\n     fn parse_neg_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n         self.bump(); // `-`"}]}