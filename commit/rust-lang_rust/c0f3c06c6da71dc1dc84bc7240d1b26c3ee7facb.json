{"sha": "c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZjNjMDZjNmRhNzFkYzFkYzg0YmM3MjQwZDFiMjZjM2VlN2ZhY2I=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-03T14:08:14Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-04T16:43:21Z"}, "message": "Only warn about missing patterns in the case of an enum", "tree": {"sha": "2f412493aae3a4da9643e3e77d2c0cf1666eabcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f412493aae3a4da9643e3e77d2c0cf1666eabcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb", "html_url": "https://github.com/rust-lang/rust/commit/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2099dd1aa27683240420eeb1ed5ee468a0d36007", "url": "https://api.github.com/repos/rust-lang/rust/commits/2099dd1aa27683240420eeb1ed5ee468a0d36007", "html_url": "https://github.com/rust-lang/rust/commit/2099dd1aa27683240420eeb1ed5ee468a0d36007"}], "stats": {"total": 122, "additions": 34, "deletions": 88}, "files": [{"sha": "984c0c412166d5a9a99a0fa81e55c6a5dff1fbce", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb", "patch": "@@ -176,7 +176,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n                 } else {\n                     match pat_ty.kind {\n                         ty::Never => true,\n-                        ty::Adt(def, _) => {\n+                        ty::Adt(def, _) if def.is_enum() => {\n                             def.variants.is_empty() && !cx.is_foreign_non_exhaustive_enum(pat_ty)\n                         }\n                         _ => false,\n@@ -185,7 +185,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n                 if !scrutinee_is_visibly_uninhabited {\n                     // We know the type is inhabited, so this must be wrong\n                     let (def_span, missing_variants) = match pat_ty.kind {\n-                        ty::Adt(def, _) => (\n+                        ty::Adt(def, _) if def.is_enum() => (\n                             self.tcx.hir().span_if_local(def.did),\n                             def.variants.iter().map(|variant| variant.ident).collect(),\n                         ),"}, {"sha": "11eae2af9c95f74711ca9c4e0e5e9c0a316129ff", "filename": "src/test/ui/pattern/usefulness/always-inhabited-union-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.rs?ref=c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb", "patch": "@@ -25,7 +25,7 @@ fn match_on_uninhab() {\n     }\n \n     match uninhab_union() {\n-        //~^ ERROR non-exhaustive patterns: pattern `Foo` of type `Foo` is not handled\n+        //~^ ERROR non-exhaustive patterns: type `Foo` is non-empty\n     }\n }\n "}, {"sha": "792ab6f59a43966382f1b7c3d73610f2b19e2ddf", "filename": "src/test/ui/pattern/usefulness/always-inhabited-union-ref.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr?ref=c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb", "patch": "@@ -6,19 +6,11 @@ LL |     match uninhab_ref() {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: pattern `Foo` of type `Foo` is not handled\n+error[E0004]: non-exhaustive patterns: type `Foo` is non-empty\n   --> $DIR/always-inhabited-union-ref.rs:27:11\n    |\n-LL |   pub union Foo {\n-   |   -         --- variant not covered\n-   |  _|\n-   | |\n-LL | |     foo: !,\n-LL | | }\n-   | |_- `Foo` defined here\n-...\n-LL |       match uninhab_union() {\n-   |             ^^^^^^^^^^^^^^^\n+LL |     match uninhab_union() {\n+   |           ^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "b55673a1322d317a2d2a2ffe937054b702668a1e", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs?ref=c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb", "patch": "@@ -3,7 +3,7 @@\n #![deny(unreachable_patterns)]\n enum Foo {}\n \n-struct NonEmptyStruct(bool); //~ `NonEmptyStruct` defined here\n+struct NonEmptyStruct(bool);\n union NonEmptyUnion1 {\n     foo: (),\n }\n@@ -42,11 +42,11 @@ fn main() {\n     match 0u8 {}\n     //~^ ERROR type `u8` is non-empty\n     match NonEmptyStruct(true) {}\n-    //~^ ERROR pattern `NonEmptyStruct` of type `NonEmptyStruct` is not handled\n+    //~^ ERROR type `NonEmptyStruct` is non-empty\n     match (NonEmptyUnion1 { foo: () }) {}\n-    //~^ ERROR pattern `NonEmptyUnion1` of type `NonEmptyUnion1` is not handled\n+    //~^ ERROR type `NonEmptyUnion1` is non-empty\n     match (NonEmptyUnion2 { foo: () }) {}\n-    //~^ ERROR pattern `NonEmptyUnion2` of type `NonEmptyUnion2` is not handled\n+    //~^ ERROR type `NonEmptyUnion2` is non-empty\n     match NonEmptyEnum1::Foo(true) {}\n     //~^ ERROR pattern `Foo` of type `NonEmptyEnum1` is not handled\n     match NonEmptyEnum2::Foo(true) {}"}, {"sha": "7b8bb4158e74d69b8151bbee67e1a2d10b494350", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.stderr", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr?ref=c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb", "patch": "@@ -30,50 +30,27 @@ LL |     match 0u8 {}\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: pattern `NonEmptyStruct` of type `NonEmptyStruct` is not handled\n+error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n   --> $DIR/match-empty-exhaustive_patterns.rs:44:11\n    |\n-LL | struct NonEmptyStruct(bool);\n-   | ----------------------------\n-   | |      |\n-   | |      variant not covered\n-   | `NonEmptyStruct` defined here\n-...\n LL |     match NonEmptyStruct(true) {}\n    |           ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: pattern `NonEmptyUnion1` of type `NonEmptyUnion1` is not handled\n+error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n   --> $DIR/match-empty-exhaustive_patterns.rs:46:11\n    |\n-LL |   union NonEmptyUnion1 {\n-   |   -     -------------- variant not covered\n-   |  _|\n-   | |\n-LL | |     foo: (),\n-LL | | }\n-   | |_- `NonEmptyUnion1` defined here\n-...\n-LL |       match (NonEmptyUnion1 { foo: () }) {}\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     match (NonEmptyUnion1 { foo: () }) {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: pattern `NonEmptyUnion2` of type `NonEmptyUnion2` is not handled\n+error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n   --> $DIR/match-empty-exhaustive_patterns.rs:48:11\n    |\n-LL |   union NonEmptyUnion2 {\n-   |   -     -------------- variant not covered\n-   |  _|\n-   | |\n-LL | |     foo: (),\n-LL | |     bar: (),\n-LL | | }\n-   | |_- `NonEmptyUnion2` defined here\n-...\n-LL |       match (NonEmptyUnion2 { foo: () }) {}\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     match (NonEmptyUnion2 { foo: () }) {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "3adbcb8cbbb9ede5cffb54d148b265e4842f5cff", "filename": "src/test/ui/pattern/usefulness/match-empty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs?ref=c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb", "patch": "@@ -2,7 +2,7 @@\n #![deny(unreachable_patterns)]\n enum Foo {}\n \n-struct NonEmptyStruct(bool); //~ `NonEmptyStruct` defined here\n+struct NonEmptyStruct(bool);\n union NonEmptyUnion1 {\n     foo: (),\n }\n@@ -45,11 +45,11 @@ fn main() {\n     match 0u8 {}\n     //~^ ERROR type `u8` is non-empty\n     match NonEmptyStruct(true) {}\n-    //~^ ERROR pattern `NonEmptyStruct` of type `NonEmptyStruct` is not handled\n+    //~^ ERROR type `NonEmptyStruct` is non-empty\n     match (NonEmptyUnion1 { foo: () }) {}\n-    //~^ ERROR pattern `NonEmptyUnion1` of type `NonEmptyUnion1` is not handled\n+    //~^ ERROR type `NonEmptyUnion1` is non-empty\n     match (NonEmptyUnion2 { foo: () }) {}\n-    //~^ ERROR pattern `NonEmptyUnion2` of type `NonEmptyUnion2` is not handled\n+    //~^ ERROR type `NonEmptyUnion2` is non-empty\n     match NonEmptyEnum1::Foo(true) {}\n     //~^ ERROR pattern `Foo` of type `NonEmptyEnum1` is not handled\n     match NonEmptyEnum2::Foo(true) {}"}, {"sha": "7446a8e4aee0e951f098c1356e70f947fe4e986d", "filename": "src/test/ui/pattern/usefulness/match-empty.stderr", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr?ref=c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb", "patch": "@@ -6,50 +6,27 @@ LL |     match 0u8 {}\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: pattern `NonEmptyStruct` of type `NonEmptyStruct` is not handled\n+error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n   --> $DIR/match-empty.rs:47:11\n    |\n-LL | struct NonEmptyStruct(bool);\n-   | ----------------------------\n-   | |      |\n-   | |      variant not covered\n-   | `NonEmptyStruct` defined here\n-...\n LL |     match NonEmptyStruct(true) {}\n    |           ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: pattern `NonEmptyUnion1` of type `NonEmptyUnion1` is not handled\n+error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n   --> $DIR/match-empty.rs:49:11\n    |\n-LL |   union NonEmptyUnion1 {\n-   |   -     -------------- variant not covered\n-   |  _|\n-   | |\n-LL | |     foo: (),\n-LL | | }\n-   | |_- `NonEmptyUnion1` defined here\n-...\n-LL |       match (NonEmptyUnion1 { foo: () }) {}\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     match (NonEmptyUnion1 { foo: () }) {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: pattern `NonEmptyUnion2` of type `NonEmptyUnion2` is not handled\n+error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n   --> $DIR/match-empty.rs:51:11\n    |\n-LL |   union NonEmptyUnion2 {\n-   |   -     -------------- variant not covered\n-   |  _|\n-   | |\n-LL | |     foo: (),\n-LL | |     bar: (),\n-LL | | }\n-   | |_- `NonEmptyUnion2` defined here\n-...\n-LL |       match (NonEmptyUnion2 { foo: () }) {}\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     match (NonEmptyUnion2 { foo: () }) {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "2c2e542934177965e1be044cff41ab6b8f4bdc42", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr?ref=c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb", "patch": "@@ -1,28 +1,28 @@\n-error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedEnum` of type `uninhabited::IndirectUninhabitedEnum` is not handled\n+error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedEnum` is non-empty\n   --> $DIR/indirect_match_with_exhaustive_patterns.rs:22:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedStruct` of type `uninhabited::IndirectUninhabitedStruct` is not handled\n+error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedStruct` is non-empty\n   --> $DIR/indirect_match_with_exhaustive_patterns.rs:26:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedTupleStruct` of type `uninhabited::IndirectUninhabitedTupleStruct` is not handled\n+error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedTupleStruct` is non-empty\n   --> $DIR/indirect_match_with_exhaustive_patterns.rs:30:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedVariants` of type `uninhabited::IndirectUninhabitedVariants` is not handled\n+error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedVariants` is non-empty\n   --> $DIR/indirect_match_with_exhaustive_patterns.rs:36:11\n    |\n LL |     match x {}"}, {"sha": "21373bb4ed30f716e1079c367b92c3a43d950954", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr?ref=c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb", "patch": "@@ -6,15 +6,15 @@ LL |     match x {}\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: pattern `UninhabitedStruct` of type `uninhabited::UninhabitedStruct` is not handled\n+error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedStruct` is non-empty\n   --> $DIR/match_with_exhaustive_patterns.rs:25:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: pattern `UninhabitedTupleStruct` of type `uninhabited::UninhabitedTupleStruct` is not handled\n+error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedTupleStruct` is non-empty\n   --> $DIR/match_with_exhaustive_patterns.rs:29:11\n    |\n LL |     match x {}"}]}