{"sha": "a9cb4822be753ef995a481cf77a4c3cbd41c9464", "node_id": "C_kwDOAAsO6NoAKGE5Y2I0ODIyYmU3NTNlZjk5NWE0ODFjZjc3YTRjM2NiZDQxYzk0NjQ", "commit": {"author": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2023-05-15T12:25:05Z"}, "committer": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2023-05-15T12:25:05Z"}, "message": "Change Vec examples to not assert exact capacity except where it is guaranteed", "tree": {"sha": "ed73bd7611ab6ec975375c253958f3282a9a6d6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed73bd7611ab6ec975375c253958f3282a9a6d6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9cb4822be753ef995a481cf77a4c3cbd41c9464", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIYEABYIAC4WIQSil6aeYAADwGp0ncHG9XSMbdFgewUCZGIkoRAcZ2l0QG5lbW8x\nNTcuY29tAAoJEMb1dIxt0WB7i1oBAI7KEG+b8AcRsuh+qjnXBSBDf2NXAz1h9v/a\n1LaJWhP/AP9+o9t7di+77EjixrThiVUa0OjaC5oSrzS441xU4vltBA==\n=i/9O\n-----END PGP SIGNATURE-----", "payload": "tree ed73bd7611ab6ec975375c253958f3282a9a6d6b\nparent 8006510ab0f69ee75e9c3f7e8bff3776886dae51\nauthor Wim Looman <git@nemo157.com> 1684153505 +0200\ncommitter Wim Looman <git@nemo157.com> 1684153505 +0200\n\nChange Vec examples to not assert exact capacity except where it is guaranteed\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cb4822be753ef995a481cf77a4c3cbd41c9464", "html_url": "https://github.com/rust-lang/rust/commit/a9cb4822be753ef995a481cf77a4c3cbd41c9464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9cb4822be753ef995a481cf77a4c3cbd41c9464/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8006510ab0f69ee75e9c3f7e8bff3776886dae51", "url": "https://api.github.com/repos/rust-lang/rust/commits/8006510ab0f69ee75e9c3f7e8bff3776886dae51", "html_url": "https://github.com/rust-lang/rust/commit/8006510ab0f69ee75e9c3f7e8bff3776886dae51"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "82f30a26d41c5257a23e593303552f00341c8dc3", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9cb4822be753ef995a481cf77a4c3cbd41c9464/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cb4822be753ef995a481cf77a4c3cbd41c9464/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=a9cb4822be753ef995a481cf77a4c3cbd41c9464", "patch": "@@ -646,14 +646,14 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// // The vector contains no items, even though it has capacity for more\n     /// assert_eq!(vec.len(), 0);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     ///\n     /// // These are all done without reallocating...\n     /// for i in 0..10 {\n     ///     vec.push(i);\n     /// }\n     /// assert_eq!(vec.len(), 10);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     ///\n     /// // ...but this may make the vector reallocate\n     /// vec.push(11);\n@@ -877,7 +877,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// let mut vec: Vec<i32> = Vec::with_capacity(10);\n     /// vec.push(42);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1028,7 +1028,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// let mut vec = Vec::with_capacity(10);\n     /// vec.extend([1, 2, 3]);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     /// vec.shrink_to_fit();\n     /// assert!(vec.capacity() >= 3);\n     /// ```\n@@ -1055,7 +1055,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// let mut vec = Vec::with_capacity(10);\n     /// vec.extend([1, 2, 3]);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     /// vec.shrink_to(4);\n     /// assert!(vec.capacity() >= 4);\n     /// vec.shrink_to(0);\n@@ -1090,7 +1090,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// let mut vec = Vec::with_capacity(10);\n     /// vec.extend([1, 2, 3]);\n     ///\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     /// let slice = vec.into_boxed_slice();\n     /// assert_eq!(slice.into_vec().capacity(), 3);\n     /// ```"}]}