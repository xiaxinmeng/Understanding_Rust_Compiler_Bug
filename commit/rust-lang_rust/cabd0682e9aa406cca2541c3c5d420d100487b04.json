{"sha": "cabd0682e9aa406cca2541c3c5d420d100487b04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYmQwNjgyZTlhYTQwNmNjYTI1NDFjM2M1ZDQyMGQxMDA0ODdiMDQ=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-06-16T08:53:06Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-06-16T12:10:52Z"}, "message": "Avoid deref/ref cycles for no-op coercions between unsafe pointers\n\nUnlike coercing from reference to unsafe pointer, coercing between two\nunsafe pointers doesn't need an AutoDerefRef, because there is no region\nthat regionck would need to know about.\n\nIn unoptimized libcore, this reduces the number of \"auto_deref\" allocas\nfrom 174 to 4.", "tree": {"sha": "935b860952a7da4af4df90a65ced89c0e854f9c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/935b860952a7da4af4df90a65ced89c0e854f9c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cabd0682e9aa406cca2541c3c5d420d100487b04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cabd0682e9aa406cca2541c3c5d420d100487b04", "html_url": "https://github.com/rust-lang/rust/commit/cabd0682e9aa406cca2541c3c5d420d100487b04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cabd0682e9aa406cca2541c3c5d420d100487b04/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00382a592baa293776b7601155dd50d3ab2c588c", "url": "https://api.github.com/repos/rust-lang/rust/commits/00382a592baa293776b7601155dd50d3ab2c588c", "html_url": "https://github.com/rust-lang/rust/commit/00382a592baa293776b7601155dd50d3ab2c588c"}], "stats": {"total": 47, "additions": 40, "deletions": 7}, "files": [{"sha": "2c332b65a48d4015c3c144e1ee675d89e392e523", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cabd0682e9aa406cca2541c3c5d420d100487b04/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabd0682e9aa406cca2541c3c5d420d100487b04/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=cabd0682e9aa406cca2541c3c5d420d100487b04", "patch": "@@ -403,8 +403,9 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                a.repr(self.tcx()),\n                b.repr(self.tcx()));\n \n-        let mt_a = match a.sty {\n-            ty::TyRef(_, mt) | ty::TyRawPtr(mt) => mt,\n+        let (is_ref, mt_a) = match a.sty {\n+            ty::TyRef(_, mt) => (true, mt),\n+            ty::TyRawPtr(mt) => (false, mt),\n             _ => {\n                 return self.subtype(a, b);\n             }\n@@ -418,11 +419,15 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         // Although references and unsafe ptrs have the same\n         // representation, we still register an AutoDerefRef so that\n         // regionck knows that the region for `a` must be valid here.\n-        Ok(Some(AdjustDerefRef(AutoDerefRef {\n-            autoderefs: 1,\n-            autoref: Some(ty::AutoUnsafe(mutbl_b)),\n-            unsize: None\n-        })))\n+        if is_ref {\n+            Ok(Some(AdjustDerefRef(AutoDerefRef {\n+                autoderefs: 1,\n+                autoref: Some(ty::AutoUnsafe(mutbl_b)),\n+                unsize: None\n+            })))\n+        } else {\n+            Ok(None)\n+        }\n     }\n }\n "}, {"sha": "2a136d7024d9b7fcf54a320f12f4c8d85cc5b79f", "filename": "src/test/codegen/coercions.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cabd0682e9aa406cca2541c3c5d420d100487b04/src%2Ftest%2Fcodegen%2Fcoercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabd0682e9aa406cca2541c3c5d420d100487b04/src%2Ftest%2Fcodegen%2Fcoercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcoercions.rs?ref=cabd0682e9aa406cca2541c3c5d420d100487b04", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+static X: i32 = 5;\n+\n+// CHECK-LABEL: @raw_ptr_to_raw_ptr_noop\n+// CHECK-NOT: alloca\n+#[no_mangle]\n+pub fn raw_ptr_to_raw_ptr_noop() -> *const i32{\n+    &X as *const i32\n+}\n+\n+// CHECK-LABEL: @reference_to_raw_ptr_noop\n+// CHECK-NOT: alloca\n+#[no_mangle]\n+pub fn reference_to_raw_ptr_noop() -> *const i32 {\n+    &X\n+}"}, {"sha": "6f627bfe704a85d50329de907925fa8930ba68e1", "filename": "src/test/compile-fail/issue-16538.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cabd0682e9aa406cca2541c3c5d420d100487b04/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabd0682e9aa406cca2541c3c5d420d100487b04/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs?ref=cabd0682e9aa406cca2541c3c5d420d100487b04", "patch": "@@ -20,6 +20,7 @@ mod Y {\n \n static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n //~^ ERROR the trait `core::marker::Sync` is not implemented for the type\n+//~| ERROR cannot refer to other statics by value, use the address-of operator or a constant instead\n //~| ERROR E0015\n \n fn main() {}"}]}