{"sha": "1ee87b3765b4cc0ab78aec25009e4e5295024f93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZTg3YjM3NjViNGNjMGFiNzhhZWMyNTAwOWU0ZTUyOTUwMjRmOTM=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2017-07-21T12:29:23Z"}, "committer": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2017-07-21T17:09:10Z"}, "message": "rustllvm: split DebugLoc in UnpackOptimizationDiagnostic", "tree": {"sha": "8b01cdfdd1f4c4267953a46ff77229e3489de9ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b01cdfdd1f4c4267953a46ff77229e3489de9ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ee87b3765b4cc0ab78aec25009e4e5295024f93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee87b3765b4cc0ab78aec25009e4e5295024f93", "html_url": "https://github.com/rust-lang/rust/commit/1ee87b3765b4cc0ab78aec25009e4e5295024f93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ee87b3765b4cc0ab78aec25009e4e5295024f93/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a53676762bbe492154926393b187f0ee49df6e98", "url": "https://api.github.com/repos/rust-lang/rust/commits/a53676762bbe492154926393b187f0ee49df6e98", "html_url": "https://github.com/rust-lang/rust/commit/a53676762bbe492154926393b187f0ee49df6e98"}], "stats": {"total": 73, "additions": 52, "deletions": 21}, "files": [{"sha": "c5276e0c9710ca22442bc865b10c34d5fe3f7f6a", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1ee87b3765b4cc0ab78aec25009e4e5295024f93/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee87b3765b4cc0ab78aec25009e4e5295024f93/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=1ee87b3765b4cc0ab78aec25009e4e5295024f93", "patch": "@@ -17,7 +17,6 @@ use libc::c_uint;\n use std::ptr;\n \n use {DiagnosticInfoRef, TwineRef, ValueRef};\n-use ffi::DebugLocRef;\n \n #[derive(Copy, Clone)]\n pub enum OptimizationDiagnosticKind {\n@@ -47,7 +46,9 @@ pub struct OptimizationDiagnostic {\n     pub kind: OptimizationDiagnosticKind,\n     pub pass_name: String,\n     pub function: ValueRef,\n-    pub debug_loc: DebugLocRef,\n+    pub line: c_uint,\n+    pub column: c_uint,\n+    pub filename: String,\n     pub message: String,\n }\n \n@@ -56,24 +57,37 @@ impl OptimizationDiagnostic {\n                      di: DiagnosticInfoRef)\n                      -> OptimizationDiagnostic {\n         let mut function = ptr::null_mut();\n-        let mut debug_loc = ptr::null_mut();\n+        let mut line = 0;\n+        let mut column = 0;\n \n         let mut message = None;\n+        let mut filename = None;\n         let pass_name = super::build_string(|pass_name|\n             message = super::build_string(|message|\n-                super::LLVMRustUnpackOptimizationDiagnostic(di,\n-                                                            pass_name,\n-                                                            &mut function,\n-                                                            &mut debug_loc,\n-                                                            message)\n+                filename = super::build_string(|filename|\n+                    super::LLVMRustUnpackOptimizationDiagnostic(di,\n+                                                                pass_name,\n+                                                                &mut function,\n+                                                                &mut line,\n+                                                                &mut column,\n+                                                                filename,\n+                                                                message)\n+                )\n             )\n         );\n \n+        let mut filename = filename.unwrap_or(String::new());\n+        if filename.is_empty() {\n+            filename.push_str(\"<unknown file>\");\n+        }\n+\n         OptimizationDiagnostic {\n             kind: kind,\n             pass_name: pass_name.expect(\"got a non-UTF8 pass name from LLVM\"),\n             function: function,\n-            debug_loc: debug_loc,\n+            line: line,\n+            column: column,\n+            filename: filename,\n             message: message.expect(\"got a non-UTF8 OptimizationDiagnostic message from LLVM\")\n         }\n     }"}, {"sha": "24d4040ccb082efd3da8dc27f7e8711582d511a7", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ee87b3765b4cc0ab78aec25009e4e5295024f93/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee87b3765b4cc0ab78aec25009e4e5295024f93/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=1ee87b3765b4cc0ab78aec25009e4e5295024f93", "patch": "@@ -1633,7 +1633,9 @@ extern \"C\" {\n     pub fn LLVMRustUnpackOptimizationDiagnostic(DI: DiagnosticInfoRef,\n                                                 pass_name_out: RustStringRef,\n                                                 function_out: *mut ValueRef,\n-                                                debugloc_out: *mut DebugLocRef,\n+                                                loc_line_out: *mut c_uint,\n+                                                loc_column_out: *mut c_uint,\n+                                                loc_filename_out: RustStringRef,\n                                                 message_out: RustStringRef);\n     pub fn LLVMRustUnpackInlineAsmDiagnostic(DI: DiagnosticInfoRef,\n                                              cookie_out: *mut c_uint,"}, {"sha": "26553c85023b77e662b740dc0d1c15951c3a72bc", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ee87b3765b4cc0ab78aec25009e4e5295024f93/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee87b3765b4cc0ab78aec25009e4e5295024f93/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=1ee87b3765b4cc0ab78aec25009e4e5295024f93", "patch": "@@ -16,7 +16,7 @@ use rustc::session::config::{self, OutputFilenames, OutputType, OutputTypes, Pas\n                              AllPasses, Sanitizer};\n use rustc::session::Session;\n use llvm;\n-use llvm::{ModuleRef, TargetMachineRef, PassManagerRef, DiagnosticInfoRef, ContextRef};\n+use llvm::{ModuleRef, TargetMachineRef, PassManagerRef, DiagnosticInfoRef};\n use llvm::SMDiagnosticRef;\n use {CrateTranslation, ModuleLlvm, ModuleSource, ModuleTranslation};\n use rustc::hir::def_id::CrateNum;\n@@ -307,7 +307,6 @@ pub struct CodegenContext<'a> {\n }\n \n struct HandlerFreeVars<'a> {\n-    llcx: ContextRef,\n     cgcx: &'a CodegenContext<'a>,\n }\n \n@@ -329,7 +328,7 @@ unsafe extern \"C\" fn inline_asm_handler(diag: SMDiagnosticRef,\n }\n \n unsafe extern \"C\" fn diagnostic_handler(info: DiagnosticInfoRef, user: *mut c_void) {\n-    let HandlerFreeVars { llcx, cgcx } = *(user as *const HandlerFreeVars);\n+    let HandlerFreeVars { cgcx, .. } = *(user as *const HandlerFreeVars);\n \n     match llvm::diagnostic::Diagnostic::unpack(info) {\n         llvm::diagnostic::InlineAsm(inline) => {\n@@ -345,11 +344,12 @@ unsafe extern \"C\" fn diagnostic_handler(info: DiagnosticInfoRef, user: *mut c_vo\n             };\n \n             if enabled {\n-                let loc = llvm::debug_loc_to_string(llcx, opt.debug_loc);\n-                cgcx.handler.note_without_error(&format!(\"optimization {} for {} at {}: {}\",\n+                cgcx.handler.note_without_error(&format!(\"optimization {} for {} at {}:{}:{}: {}\",\n                                                 opt.kind.describe(),\n                                                 opt.pass_name,\n-                                                if loc.is_empty() { \"[unknown]\" } else { &*loc },\n+                                                opt.filename,\n+                                                opt.line,\n+                                                opt.column,\n                                                 opt.message));\n             }\n         }\n@@ -370,9 +370,7 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n     let llcx = mllvm.llcx;\n     let tm = config.tm;\n \n-    // llcx doesn't outlive this function, so we can put this on the stack.\n     let fv = HandlerFreeVars {\n-        llcx: llcx,\n         cgcx: cgcx,\n     };\n     let fv = &fv as *const HandlerFreeVars as *mut c_void;"}, {"sha": "94185b5432df2efd38c126283f30059b0c54610b", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1ee87b3765b4cc0ab78aec25009e4e5295024f93/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1ee87b3765b4cc0ab78aec25009e4e5295024f93/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=1ee87b3765b4cc0ab78aec25009e4e5295024f93", "patch": "@@ -906,16 +906,33 @@ extern \"C\" void LLVMRustWriteTwineToString(LLVMTwineRef T, RustStringRef Str) {\n \n extern \"C\" void LLVMRustUnpackOptimizationDiagnostic(\n     LLVMDiagnosticInfoRef DI, RustStringRef PassNameOut,\n-    LLVMValueRef *FunctionOut, LLVMDebugLocRef *DebugLocOut,\n-    RustStringRef MessageOut) {\n+    LLVMValueRef *FunctionOut, unsigned* Line, unsigned* Column,\n+    RustStringRef FilenameOut, RustStringRef MessageOut) {\n   // Undefined to call this not on an optimization diagnostic!\n   llvm::DiagnosticInfoOptimizationBase *Opt =\n       static_cast<llvm::DiagnosticInfoOptimizationBase *>(unwrap(DI));\n \n   RawRustStringOstream PassNameOS(PassNameOut);\n   PassNameOS << Opt->getPassName();\n   *FunctionOut = wrap(&Opt->getFunction());\n-  *DebugLocOut = wrap(&Opt->getDebugLoc());\n+\n+  RawRustStringOstream FilenameOS(FilenameOut);\n+#if LLVM_VERSION_GE(5,0)\n+  DiagnosticLocation loc = Opt->getLocation();\n+  if (loc.isValid()) {\n+    *Line = loc.getLine();\n+    *Column = loc.getColumn();\n+    FilenameOS << loc.getFilename();\n+  }\n+#else\n+  const DebugLoc &loc = Opt->getDebugLoc();\n+  if (loc) {\n+    *Line = loc.getLine();\n+    *Column = loc.getCol();\n+    FilenameOS << cast<DIScope>(loc.getScope())->getFilename();\n+  }\n+#endif\n+\n   RawRustStringOstream MessageOS(MessageOut);\n   MessageOS << Opt->getMsg();\n }"}]}