{"sha": "83d294f06a8f78f4956333a5285bb2c4f7b8a6a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZDI5NGYwNmE4Zjc4ZjQ5NTYzMzNhNTI4NWJiMmM0ZjdiOGE2YTk=", "commit": {"author": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2020-10-06T18:05:25Z"}, "committer": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2020-10-06T18:05:25Z"}, "message": "Bring char along with InvalidDigit", "tree": {"sha": "f704a3faec6d3c397256d7919cf964575d545306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f704a3faec6d3c397256d7919cf964575d545306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83d294f06a8f78f4956333a5285bb2c4f7b8a6a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83d294f06a8f78f4956333a5285bb2c4f7b8a6a9", "html_url": "https://github.com/rust-lang/rust/commit/83d294f06a8f78f4956333a5285bb2c4f7b8a6a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83d294f06a8f78f4956333a5285bb2c4f7b8a6a9/comments", "author": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c027844795e427e63ef917ba40c71d0559d88b79", "url": "https://api.github.com/repos/rust-lang/rust/commits/c027844795e427e63ef917ba40c71d0559d88b79", "html_url": "https://github.com/rust-lang/rust/commit/c027844795e427e63ef917ba40c71d0559d88b79"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "f03f439f73b5a7b702a260f262a80d3cd494b74e", "filename": "compiler/rustc_middle/src/middle/limits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83d294f06a8f78f4956333a5285bb2c4f7b8a6a9/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d294f06a8f78f4956333a5285bb2c4f7b8a6a9/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs?ref=83d294f06a8f78f4956333a5285bb2c4f7b8a6a9", "patch": "@@ -52,7 +52,7 @@ fn update_limit(\n                         IntErrorKind::Empty | IntErrorKind::OnlySign => {\n                             \"`limit` must be a non-negative integer\"\n                         }\n-                        IntErrorKind::InvalidDigit => \"not a valid integer\",\n+                        IntErrorKind::InvalidDigit(_) => \"not a valid integer\",\n                         IntErrorKind::NegOverflow => bug!(\"`limit` should never underflow\"),\n                         IntErrorKind::Zero => bug!(\"zero is a valid `limit`\"),\n                         kind => bug!(\"unimplemented IntErrorKind variant: {:?}\", kind),"}, {"sha": "ba7c94656ce3ffbec01739dd4ceb87e53a0cc5b6", "filename": "library/core/src/num/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83d294f06a8f78f4956333a5285bb2c4f7b8a6a9/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d294f06a8f78f4956333a5285bb2c4f7b8a6a9/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs?ref=83d294f06a8f78f4956333a5285bb2c4f7b8a6a9", "patch": "@@ -92,12 +92,12 @@ pub enum IntErrorKind {\n     /// Among other causes, this variant will be constructed when parsing an empty string.\n     #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n     Empty,\n-    /// Contains an invalid digit.\n+    /// Contains an digit invalid in its context.\n     ///\n     /// Among other causes, this variant will be constructed when parsing a string that\n     /// contains a letter.\n     #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n-    InvalidDigit,\n+    InvalidDigit(#[stable(feature = \"int_error_matching\", since = \"1.47.0\")] char),\n     /// Integer is too large to store in target integer type.\n     #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n     PosOverflow,\n@@ -131,7 +131,7 @@ impl ParseIntError {\n     pub fn __description(&self) -> &str {\n         match self.kind {\n             IntErrorKind::Empty => \"cannot parse integer from empty string\",\n-            IntErrorKind::InvalidDigit => \"invalid digit found in string\",\n+            IntErrorKind::InvalidDigit(_) => \"invalid digit found in string\",\n             IntErrorKind::PosOverflow => \"number too large to fit in target type\",\n             IntErrorKind::NegOverflow => \"number too small to fit in target type\",\n             IntErrorKind::Zero => \"number would be zero for non-zero type\","}, {"sha": "a438f3161a3af3154fec0e1f131bdbec47d04823", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83d294f06a8f78f4956333a5285bb2c4f7b8a6a9/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d294f06a8f78f4956333a5285bb2c4f7b8a6a9/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=83d294f06a8f78f4956333a5285bb2c4f7b8a6a9", "patch": "@@ -845,7 +845,7 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n         for &c in digits {\n             let x = match (c as char).to_digit(radix) {\n                 Some(x) => x,\n-                None => return Err(PIE { kind: InvalidDigit }),\n+                None => return Err(PIE { kind: InvalidDigit(c as char) }),\n             };\n             result = match result.checked_mul(radix) {\n                 Some(result) => result,\n@@ -861,7 +861,7 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n         for &c in digits {\n             let x = match (c as char).to_digit(radix) {\n                 Some(x) => x,\n-                None => return Err(PIE { kind: InvalidDigit }),\n+                None => return Err(PIE { kind: InvalidDigit(c as char) }),\n             };\n             result = match result.checked_mul(radix) {\n                 Some(result) => result,"}, {"sha": "949d4ea32f06463f7d6ca1b339b5bb1b0967dccb", "filename": "library/core/tests/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83d294f06a8f78f4956333a5285bb2c4f7b8a6a9/library%2Fcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d294f06a8f78f4956333a5285bb2c4f7b8a6a9/library%2Fcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnonzero.rs?ref=83d294f06a8f78f4956333a5285bb2c4f7b8a6a9", "patch": "@@ -131,7 +131,7 @@ fn test_from_str() {\n     assert_eq!(\"0\".parse::<NonZeroU8>().err().map(|e| e.kind().clone()), Some(IntErrorKind::Zero));\n     assert_eq!(\n         \"-1\".parse::<NonZeroU8>().err().map(|e| e.kind().clone()),\n-        Some(IntErrorKind::InvalidDigit)\n+        Some(IntErrorKind::InvalidDigit('-'))\n     );\n     assert_eq!(\n         \"-129\".parse::<NonZeroI8>().err().map(|e| e.kind().clone()),"}, {"sha": "a93cd38160b5896db6e6c859ebfe8c5120f0cfbd", "filename": "library/core/tests/num/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83d294f06a8f78f4956333a5285bb2c4f7b8a6a9/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d294f06a8f78f4956333a5285bb2c4f7b8a6a9/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fmod.rs?ref=83d294f06a8f78f4956333a5285bb2c4f7b8a6a9", "patch": "@@ -117,11 +117,11 @@ fn test_leading_plus() {\n \n #[test]\n fn test_invalid() {\n-    test_parse::<i8>(\"--129\", Err(IntErrorKind::InvalidDigit));\n-    test_parse::<i8>(\"++129\", Err(IntErrorKind::InvalidDigit));\n-    test_parse::<u8>(\"\u0421\u044a\u0435\u0448\u044c\", Err(IntErrorKind::InvalidDigit));\n-    // is this the correct error here. Maybe need a reapeat sign error here\n-    test_parse::<i8>(\"--\", Err(IntErrorKind::InvalidDigit));\n+    test_parse::<i8>(\"--129\", Err(IntErrorKind::InvalidDigit('-')));\n+    test_parse::<i8>(\"++129\", Err(IntErrorKind::InvalidDigit('+')));\n+    test_parse::<u8>(\"\u0421\u044a\u0435\u0448\u044c\", Err(IntErrorKind::InvalidDigit('\u00d0')));\n+    test_parse::<u8>(\"123Hello\", Err(IntErrorKind::InvalidDigit('H')));\n+    test_parse::<i8>(\"--\", Err(IntErrorKind::InvalidDigit('-')));\n }\n \n #[test]"}]}