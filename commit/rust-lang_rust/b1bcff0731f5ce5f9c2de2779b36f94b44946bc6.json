{"sha": "b1bcff0731f5ce5f9c2de2779b36f94b44946bc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYmNmZjA3MzFmNWNlNWY5YzJkZTI3NzliMzZmOTRiNDQ5NDZiYzY=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-04-04T16:44:46Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-04-05T12:38:24Z"}, "message": "Disallow the use of high byte registes as operands on x86_64\n\nThey are still allowed on x86 though.\n\nFixes #83495", "tree": {"sha": "3200a7de727e68fb1e9f1898f80c7bdc0ede7c13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3200a7de727e68fb1e9f1898f80c7bdc0ede7c13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6", "html_url": "https://github.com/rust-lang/rust/commit/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbd6ec760453b333e86aac106f47fe9132498924", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd6ec760453b333e86aac106f47fe9132498924", "html_url": "https://github.com/rust-lang/rust/commit/cbd6ec760453b333e86aac106f47fe9132498924"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "a7a708fe7dec3f6e706ec5dbb2352519d9aeb0ee", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=b1bcff0731f5ce5f9c2de2779b36f94b44946bc6", "patch": "@@ -68,7 +68,6 @@ fn frame_pointer_r11(\n     _arch: InlineAsmArch,\n     has_feature: impl FnMut(&str) -> bool,\n     target: &Target,\n-    _allocating: bool,\n ) -> Result<(), &'static str> {\n     if !frame_pointer_is_r7(has_feature, target) {\n         Err(\"the frame pointer (r11) cannot be used as an operand for inline asm\")\n@@ -81,7 +80,6 @@ fn frame_pointer_r7(\n     _arch: InlineAsmArch,\n     has_feature: impl FnMut(&str) -> bool,\n     target: &Target,\n-    _allocating: bool,\n ) -> Result<(), &'static str> {\n     if frame_pointer_is_r7(has_feature, target) {\n         Err(\"the frame pointer (r7) cannot be used as an operand for inline asm\")"}, {"sha": "e2268a61a42571277939de276759cc94827d1d0b", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=b1bcff0731f5ce5f9c2de2779b36f94b44946bc6", "patch": "@@ -90,7 +90,7 @@ macro_rules! def_regs {\n                 match name {\n                     $(\n                         $($alias)|* | $reg_name => {\n-                            $($filter(_arch, &mut _has_feature, _target, false)?;)?\n+                            $($filter(_arch, &mut _has_feature, _target)?;)?\n                             Ok(Self::$reg)\n                         }\n                     )*\n@@ -114,7 +114,7 @@ macro_rules! def_regs {\n             #[allow(unused_imports)]\n             use super::{InlineAsmReg, InlineAsmRegClass};\n             $(\n-                if $($filter(_arch, &mut _has_feature, _target, true).is_ok() &&)? true {\n+                if $($filter(_arch, &mut _has_feature, _target).is_ok() &&)? true {\n                     if let Some(set) = _map.get_mut(&InlineAsmRegClass::$arch($arch_regclass::$class)) {\n                         set.insert(InlineAsmReg::$arch($arch_reg::$reg));\n                     }"}, {"sha": "185d6ac8246c9a1bffc65fa92d78a9f5f41cf0f4", "filename": "compiler/rustc_target/src/asm/riscv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs?ref=b1bcff0731f5ce5f9c2de2779b36f94b44946bc6", "patch": "@@ -52,7 +52,6 @@ fn not_e(\n     _arch: InlineAsmArch,\n     mut has_feature: impl FnMut(&str) -> bool,\n     _target: &Target,\n-    _allocating: bool,\n ) -> Result<(), &'static str> {\n     if has_feature(\"e\") {\n         Err(\"register can't be used with the `e` target feature\")"}, {"sha": "90660dad4c2a1fb2496760e34eeb90faa4f44aa4", "filename": "compiler/rustc_target/src/asm/x86.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs?ref=b1bcff0731f5ce5f9c2de2779b36f94b44946bc6", "patch": "@@ -133,7 +133,6 @@ fn x86_64_only(\n     arch: InlineAsmArch,\n     _has_feature: impl FnMut(&str) -> bool,\n     _target: &Target,\n-    _allocating: bool,\n ) -> Result<(), &'static str> {\n     match arch {\n         InlineAsmArch::X86 => Err(\"register is only available on x86_64\"),\n@@ -146,13 +145,9 @@ fn high_byte(\n     arch: InlineAsmArch,\n     _has_feature: impl FnMut(&str) -> bool,\n     _target: &Target,\n-    allocating: bool,\n ) -> Result<(), &'static str> {\n     match arch {\n-        InlineAsmArch::X86_64 if allocating => {\n-            // The error message isn't actually used...\n-            Err(\"high byte registers are not allocated by reg_byte\")\n-        }\n+        InlineAsmArch::X86_64 => Err(\"high byte registers cannot be used as an operand on x86_64\"),\n         _ => Ok(()),\n     }\n }"}, {"sha": "6c61f4f0d20f156b8ff6df9a5290ddb9b09ff395", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=b1bcff0731f5ce5f9c2de2779b36f94b44946bc6", "patch": "@@ -495,7 +495,7 @@ Here is the list of currently supported register classes:\n | x86 | `reg` | `ax`, `bx`, `cx`, `dx`, `si`, `di`, `r[8-15]` (x86-64 only) | `r` |\n | x86 | `reg_abcd` | `ax`, `bx`, `cx`, `dx` | `Q` |\n | x86-32 | `reg_byte` | `al`, `bl`, `cl`, `dl`, `ah`, `bh`, `ch`, `dh` | `q` |\n-| x86-64 | `reg_byte` | `al`, `bl`, `cl`, `dl`, `sil`, `dil`, `r[8-15]b`, `ah`\\*, `bh`\\*, `ch`\\*, `dh`\\* | `q` |\n+| x86-64 | `reg_byte`\\* | `al`, `bl`, `cl`, `dl`, `sil`, `dil`, `r[8-15]b` | `q` |\n | x86 | `xmm_reg` | `xmm[0-7]` (x86) `xmm[0-15]` (x86-64) | `x` |\n | x86 | `ymm_reg` | `ymm[0-7]` (x86) `ymm[0-15]` (x86-64) | `x` |\n | x86 | `zmm_reg` | `zmm[0-7]` (x86) `zmm[0-31]` (x86-64) | `v` |\n@@ -526,7 +526,7 @@ Here is the list of currently supported register classes:\n \n > **Note**: On x86 we treat `reg_byte` differently from `reg` because the compiler can allocate `al` and `ah` separately whereas `reg` reserves the whole register.\n >\n-> Note #2: On x86-64 the high byte registers (e.g. `ah`) are only available when used as an explicit register. Specifying the `reg_byte` register class for an operand will always allocate a low byte register.\n+> Note #2: On x86-64 the high byte registers (e.g. `ah`) are not available in the `reg_byte` register class.\n >\n > Note #3: NVPTX doesn't have a fixed register set, so named registers are not supported.\n >"}, {"sha": "b65b727d2255c1fe20d68bea8a0aea324145c84a", "filename": "src/test/assembly/asm/x86-types.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs?ref=b1bcff0731f5ce5f9c2de2779b36f94b44946bc6", "patch": "@@ -748,10 +748,11 @@ check_reg!(eax_f64 f64 \"eax\" \"mov\");\n // CHECK: #NO_APP\n check_reg!(eax_ptr ptr \"eax\" \"mov\");\n \n-// CHECK-LABEL: ah_byte:\n-// CHECK: #APP\n-// CHECK: mov ah, ah\n-// CHECK: #NO_APP\n+// i686-LABEL: ah_byte:\n+// i686: #APP\n+// i686: mov ah, ah\n+// i686: #NO_APP\n+#[cfg(i686)]\n check_reg!(ah_byte i8 \"ah\" \"mov\");\n \n // CHECK-LABEL: xmm0_i32:"}, {"sha": "da302b248760fa18031eb1c1fedf5a4478526d43", "filename": "src/test/ui/asm/bad-reg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6/src%2Ftest%2Fui%2Fasm%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6/src%2Ftest%2Fui%2Fasm%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-reg.rs?ref=b1bcff0731f5ce5f9c2de2779b36f94b44946bc6", "patch": "@@ -37,6 +37,8 @@ fn main() {\n         //~^ ERROR invalid register `mm0`: MMX registers are not currently supported as operands\n         asm!(\"\", in(\"k0\") foo);\n         //~^ ERROR invalid register `k0`: the k0 AVX mask register cannot be used as an operand\n+        asm!(\"\", in(\"ah\") foo);\n+        //~^ ERROR invalid register `ah`: high byte registers cannot be used as an operand\n \n         // Explicit register conflicts\n         // (except in/lateout which don't conflict)"}, {"sha": "2bfb4854c344220f81ce12a78abe4fe2764cc6ca", "filename": "src/test/ui/asm/bad-reg.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6/src%2Ftest%2Fui%2Fasm%2Fbad-reg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1bcff0731f5ce5f9c2de2779b36f94b44946bc6/src%2Ftest%2Fui%2Fasm%2Fbad-reg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-reg.stderr?ref=b1bcff0731f5ce5f9c2de2779b36f94b44946bc6", "patch": "@@ -94,49 +94,55 @@ error: invalid register `k0`: the k0 AVX mask register cannot be used as an oper\n LL |         asm!(\"\", in(\"k0\") foo);\n    |                  ^^^^^^^^^^^^\n \n+error: invalid register `ah`: high byte registers cannot be used as an operand on x86_64\n+  --> $DIR/bad-reg.rs:40:18\n+   |\n+LL |         asm!(\"\", in(\"ah\") foo);\n+   |                  ^^^^^^^^^^^^\n+\n error: register `al` conflicts with register `ax`\n-  --> $DIR/bad-reg.rs:44:33\n+  --> $DIR/bad-reg.rs:46:33\n    |\n LL |         asm!(\"\", in(\"eax\") foo, in(\"al\") bar);\n    |                  -------------  ^^^^^^^^^^^^ register `al`\n    |                  |\n    |                  register `ax`\n \n error: register `ax` conflicts with register `ax`\n-  --> $DIR/bad-reg.rs:46:33\n+  --> $DIR/bad-reg.rs:48:33\n    |\n LL |         asm!(\"\", in(\"rax\") foo, out(\"rax\") bar);\n    |                  -------------  ^^^^^^^^^^^^^^ register `ax`\n    |                  |\n    |                  register `ax`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:46:18\n+  --> $DIR/bad-reg.rs:48:18\n    |\n LL |         asm!(\"\", in(\"rax\") foo, out(\"rax\") bar);\n    |                  ^^^^^^^^^^^^^\n \n error: register `ymm0` conflicts with register `xmm0`\n-  --> $DIR/bad-reg.rs:49:34\n+  --> $DIR/bad-reg.rs:51:34\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, in(\"ymm0\") bar);\n    |                  --------------  ^^^^^^^^^^^^^^ register `ymm0`\n    |                  |\n    |                  register `xmm0`\n \n error: register `ymm0` conflicts with register `xmm0`\n-  --> $DIR/bad-reg.rs:51:34\n+  --> $DIR/bad-reg.rs:53:34\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, out(\"ymm0\") bar);\n    |                  --------------  ^^^^^^^^^^^^^^^ register `ymm0`\n    |                  |\n    |                  register `xmm0`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:51:18\n+  --> $DIR/bad-reg.rs:53:18\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, out(\"ymm0\") bar);\n    |                  ^^^^^^^^^^^^^^\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 19 previous errors\n "}]}