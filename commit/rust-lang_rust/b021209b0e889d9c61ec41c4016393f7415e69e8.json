{"sha": "b021209b0e889d9c61ec41c4016393f7415e69e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMjEyMDliMGU4ODlkOWM2MWVjNDFjNDAxNjM5M2Y3NDE1ZTY5ZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-18T14:56:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-18T14:56:38Z"}, "message": "Auto merge of #1436 - samrat:support-stdin-read, r=RalfJung\n\nHandle `read`s on STDIN\n\nCloses #1434", "tree": {"sha": "6f04ae6ce08160f34562f4ee6280cc3ac08ad5f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f04ae6ce08160f34562f4ee6280cc3ac08ad5f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b021209b0e889d9c61ec41c4016393f7415e69e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b021209b0e889d9c61ec41c4016393f7415e69e8", "html_url": "https://github.com/rust-lang/rust/commit/b021209b0e889d9c61ec41c4016393f7415e69e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b021209b0e889d9c61ec41c4016393f7415e69e8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "515287f114b546a72d4a1fe8ffe1dbc20dedf13d", "url": "https://api.github.com/repos/rust-lang/rust/commits/515287f114b546a72d4a1fe8ffe1dbc20dedf13d", "html_url": "https://github.com/rust-lang/rust/commit/515287f114b546a72d4a1fe8ffe1dbc20dedf13d"}, {"sha": "f4d1841811c260c96c71a41774d3cb61b62dad7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4d1841811c260c96c71a41774d3cb61b62dad7f", "html_url": "https://github.com/rust-lang/rust/commit/f4d1841811c260c96c71a41774d3cb61b62dad7f"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "e0ad0d8d4112e619b7fd6164815f48e83e889323", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b021209b0e889d9c61ec41c4016393f7415e69e8/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b021209b0e889d9c61ec41c4016393f7415e69e8/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=b021209b0e889d9c61ec41c4016393f7415e69e8", "patch": "@@ -1,4 +1,5 @@\n use std::convert::TryFrom;\n+use std::io::{self, Read, Write};\n \n use log::trace;\n \n@@ -67,7 +68,37 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let buf = this.read_scalar(buf)?.not_undef()?;\n                 let count = this.read_scalar(count)?.to_machine_usize(this)?;\n                 let result = if fd == 0 {\n-                    throw_unsup_format!(\"reading from stdin is not implemented\")\n+\n+                    this.check_no_isolation(\"read\")?;\n+\n+                    // We cap the number of read bytes to the largest\n+                    // value that we are able to fit in both the\n+                    // host's and target's `isize`. This saves us from\n+                    // having to handle overflows later.\n+                    let count = count.min(this.machine_isize_max() as u64).min(isize::MAX as u64);\n+\n+                    // We want to read at most `count` bytes. We are\n+                    // sure that `count` is not negative because it\n+                    // was a target's `usize`. Also we are sure that\n+                    // its smaller than `usize::MAX` because it is a\n+                    // host's `isize`.\n+                    let mut buffer = vec![0; count as usize];\n+                    let res = io::stdin()\n+                        .read(&mut buffer)\n+                        // `Stdin::read` never returns a value larger\n+                        // than `count`, so this cannot fail.\n+                        .map(|c| i64::try_from(c).unwrap());\n+\n+                    match res {\n+                        Ok(bytes) => {\n+                            this.memory.write_bytes(buf, buffer)?;\n+                            i64::try_from(bytes).unwrap()\n+                        },\n+                        Err(e) => {\n+                            this.set_last_error_from_io_error(e)?;\n+                            -1\n+                        },\n+                    }\n                 } else if fd == 1 || fd == 2 {\n                     throw_unsup_format!(\"cannot read from stdout/stderr\")\n                 } else {\n@@ -85,7 +116,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     throw_unsup_format!(\"cannot write to stdin\")\n                 } else if fd == 1 || fd == 2 {\n                     // stdout/stderr\n-                    use std::io::{self, Write};\n \n                     let buf_cont = this.memory.read_bytes(buf, Size::from_bytes(count))?;\n                     // We need to flush to make sure this actually appears on the screen\n@@ -103,6 +133,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     };\n                     match res {\n                         Ok(n) => i64::try_from(n).unwrap(),\n+                        // FIXME: set errno to appropriate value\n                         Err(_) => -1,\n                     }\n                 } else {"}]}