{"sha": "eff2884e5ff3eaa5338e3308ac6e6a2bfbd0b664", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZjI4ODRlNWZmM2VhYTUzMzhlMzMwOGFjNmU2YTJiZmJkMGI2NjQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-08-14T05:23:35Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-08-14T05:23:35Z"}, "message": "Make generator interior types deterministic", "tree": {"sha": "48ca7d158c0826267d143af25cd4e661e32c4347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48ca7d158c0826267d143af25cd4e661e32c4347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eff2884e5ff3eaa5338e3308ac6e6a2bfbd0b664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eff2884e5ff3eaa5338e3308ac6e6a2bfbd0b664", "html_url": "https://github.com/rust-lang/rust/commit/eff2884e5ff3eaa5338e3308ac6e6a2bfbd0b664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eff2884e5ff3eaa5338e3308ac6e6a2bfbd0b664/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eab1ca9dd332f0c4a66086c15eaaf392169af56", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eab1ca9dd332f0c4a66086c15eaaf392169af56", "html_url": "https://github.com/rust-lang/rust/commit/6eab1ca9dd332f0c4a66086c15eaaf392169af56"}], "stats": {"total": 42, "additions": 15, "deletions": 27}, "files": [{"sha": "f50fb7e4a1326c1749380197820449396e257b41", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/eff2884e5ff3eaa5338e3308ac6e6a2bfbd0b664/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff2884e5ff3eaa5338e3308ac6e6a2bfbd0b664/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=eff2884e5ff3eaa5338e3308ac6e6a2bfbd0b664", "patch": "@@ -18,13 +18,14 @@ use syntax::ast::NodeId;\n use syntax::codemap::Span;\n use std::rc::Rc;\n use super::FnCtxt;\n-use util::nodemap::FxHashSet;\n use util::nodemap::FxHashMap;\n \n struct InteriorVisitor<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n     cache: FxHashMap<NodeId, Option<Span>>,\n-    types: FxHashSet<Ty<'tcx>>,\n+\n+    // FIXME: Use an ordered hash map here\n+    types: Vec<Ty<'tcx>>,\n     region_maps: Rc<RegionMaps>,\n }\n \n@@ -37,26 +38,19 @@ impl<'a, 'gcx, 'tcx> InteriorVisitor<'a, 'gcx, 'tcx> {\n         }).unwrap_or(true);\n \n         if live_across_yield {\n+            let ty = self.fcx.resolve_type_vars_if_possible(&ty);\n+\n             if log_enabled!(log::LogLevel::Debug) {\n-                if let Some(s) = scope {\n-                    let span = s.span(&self.fcx.tcx.hir).unwrap_or(DUMMY_SP);\n-                    debug!(\"type in generator with scope = {:?}, type = {:?}, span = {:?}\",\n-                           scope,\n-                           self.fcx.resolve_type_vars_if_possible(&ty),\n-                           span);\n-                } else {\n-                    debug!(\"type in generator WITHOUT scope, type = {:?}\",\n-                           self.fcx.resolve_type_vars_if_possible(&ty));\n-                }\n-                if let Some(e) = expr {\n-                    debug!(\"type from expression: {:?}, span={:?}\", e, e.span);\n-                }\n+                let span = scope.map(|s| s.span(&self.fcx.tcx.hir).unwrap_or(DUMMY_SP));\n+                debug!(\"type in expr = {:?}, scope = {:?}, type = {:?}, span = {:?}\",\n+                       expr, scope, ty, span);\n             }\n-            self.types.insert(ty);\n-        } else {\n-            if let Some(e) = expr {\n-                debug!(\"NO type from expression: {:?}, span = {:?}\", e, e.span);\n+\n+            if !self.types.contains(&ty) {\n+                self.types.push(ty);\n             }\n+        } else {\n+            debug!(\"no type in expr = {:?}, span = {:?}\", expr, expr.map(|e| e.span));\n         }\n     }\n }\n@@ -68,19 +62,13 @@ pub fn resolve_interior<'a, 'gcx, 'tcx>(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n     let body = fcx.tcx.hir.body(body_id);\n     let mut visitor = InteriorVisitor {\n         fcx,\n-        types: FxHashSet(),\n+        types: Vec::new(),\n         cache: FxHashMap(),\n         region_maps: fcx.tcx.region_maps(def_id),\n     };\n     intravisit::walk_body(&mut visitor, body);\n \n-    // Deduplicate types\n-    let set: FxHashSet<_> = visitor.types.into_iter()\n-        .map(|t| fcx.resolve_type_vars_if_possible(&t))\n-        .collect();\n-    let types: Vec<_> = set.into_iter().collect();\n-\n-    let tuple = fcx.tcx.intern_tup(&types, false);\n+    let tuple = fcx.tcx.intern_tup(&visitor.types, false);\n \n     debug!(\"Types in generator {:?}, span = {:?}\", tuple, body.value.span);\n "}]}