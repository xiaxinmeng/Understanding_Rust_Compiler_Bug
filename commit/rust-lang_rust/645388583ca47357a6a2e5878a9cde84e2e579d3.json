{"sha": "645388583ca47357a6a2e5878a9cde84e2e579d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NTM4ODU4M2NhNDczNTdhNmEyZTU4NzhhOWNkZTg0ZTJlNTc5ZDM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-06T12:39:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-06T12:39:55Z"}, "message": "actually, reentrant uninitialized mutex acquisition is outright UB", "tree": {"sha": "b540ad370e3d571608473073de8de219bda2aff9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b540ad370e3d571608473073de8de219bda2aff9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/645388583ca47357a6a2e5878a9cde84e2e579d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/645388583ca47357a6a2e5878a9cde84e2e579d3", "html_url": "https://github.com/rust-lang/rust/commit/645388583ca47357a6a2e5878a9cde84e2e579d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/645388583ca47357a6a2e5878a9cde84e2e579d3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab3e4a27894295ec0fca28b492450f2b22fbad4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab3e4a27894295ec0fca28b492450f2b22fbad4e", "html_url": "https://github.com/rust-lang/rust/commit/ab3e4a27894295ec0fca28b492450f2b22fbad4e"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "5743ea51af350eac5eaa8be6f3a45a0d9482ca55", "filename": "src/libstd/io/lazy.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/645388583ca47357a6a2e5878a9cde84e2e579d3/src%2Flibstd%2Fio%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645388583ca47357a6a2e5878a9cde84e2e579d3/src%2Flibstd%2Fio%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Flazy.rs?ref=645388583ca47357a6a2e5878a9cde84e2e579d3", "patch": "@@ -29,9 +29,8 @@ impl<T: Send + Sync + 'static> Lazy<T> {\n     /// Safety: `init` must not call `get` on the variable that is being\n     /// initialized.\n     pub const unsafe fn new(init: fn() -> Arc<T>) -> Lazy<T> {\n-        // `lock` is never initialized fully, so this mutex is reentrant!\n-        // Do not use it in a way that might be reentrant, that could lead to\n-        // aliasing `&mut`.\n+        // `lock` is never initialized fully, so it is UB to attempt to\n+        // acquire this mutex reentrantly!\n         Lazy {\n             lock: Mutex::new(),\n             ptr: Cell::new(ptr::null_mut()),"}, {"sha": "220bd11b1f1e50a7f51f131cf1e1ddd71ee70384", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/645388583ca47357a6a2e5878a9cde84e2e579d3/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645388583ca47357a6a2e5878a9cde84e2e579d3/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=645388583ca47357a6a2e5878a9cde84e2e579d3", "patch": "@@ -80,9 +80,8 @@ mod imp {\n \n     static mut ARGC: isize = 0;\n     static mut ARGV: *const *const u8 = ptr::null();\n-    // `ENV_LOCK` is never initialized fully, so this mutex is reentrant!\n-    // Do not use it in a way that might be reentrant, that could lead to\n-    // aliasing `&mut`.\n+    // `ENV_LOCK` is never initialized fully, so it is UB to attempt to\n+    // acquire this mutex reentrantly!\n     static LOCK: Mutex = Mutex::new();\n \n     pub unsafe fn init(argc: isize, argv: *const *const u8) {"}, {"sha": "3d98b2efdf1f79a44a60d9dbeae75613ad3430ea", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/645388583ca47357a6a2e5878a9cde84e2e579d3/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645388583ca47357a6a2e5878a9cde84e2e579d3/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=645388583ca47357a6a2e5878a9cde84e2e579d3", "patch": "@@ -33,9 +33,8 @@ use sys::fd;\n use vec;\n \n const TMPBUF_SZ: usize = 128;\n-// `ENV_LOCK` is never initialized fully, so this mutex is reentrant!\n-// Do not use it in a way that might be reentrant, that could lead to\n-// aliasing `&mut`.\n+// `ENV_LOCK` is never initialized fully, so it is UB to attempt to\n+// acquire this mutex reentrantly!\n static ENV_LOCK: Mutex = Mutex::new();\n \n "}, {"sha": "856798373128d51cdca8e772e1f48ebb30bc4691", "filename": "src/libstd/sys_common/at_exit_imp.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/645388583ca47357a6a2e5878a9cde84e2e579d3/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645388583ca47357a6a2e5878a9cde84e2e579d3/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs?ref=645388583ca47357a6a2e5878a9cde84e2e579d3", "patch": "@@ -23,9 +23,8 @@ type Queue = Vec<Box<dyn FnBox()>>;\n // on poisoning and this module needs to operate at a lower level than requiring\n // the thread infrastructure to be in place (useful on the borders of\n // initialization/destruction).\n-// `LOCK` is never initialized fully, so this mutex is reentrant!\n-// Do not use it in a way that might be reentrant, that could lead to\n-// aliasing `&mut`.\n+// `LOCK` is never initialized fully, so it is UB to attempt to\n+// acquire this mutex reentrantly!\n static LOCK: Mutex = Mutex::new();\n static mut QUEUE: *mut Queue = ptr::null_mut();\n "}, {"sha": "74e1defd9f46584aa2cb8e9892e2895f07412c54", "filename": "src/libstd/sys_common/mutex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/645388583ca47357a6a2e5878a9cde84e2e579d3/src%2Flibstd%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645388583ca47357a6a2e5878a9cde84e2e579d3/src%2Flibstd%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmutex.rs?ref=645388583ca47357a6a2e5878a9cde84e2e579d3", "patch": "@@ -24,9 +24,9 @@ impl Mutex {\n     ///\n     /// Behavior is undefined if the mutex is moved after it is\n     /// first used with any of the functions below.\n-    /// Also, the mutex might not be fully functional without calling\n-    /// `init`!  For example, on unix, the mutex is reentrant\n-    /// until `init` reconfigures it appropriately.\n+    /// Also, until `init` is called, behavior is undefined if this\n+    /// mutex is ever used reentrantly, i.e., `raw_lock` or `try_lock`\n+    /// are called by the thread currently holding the lock.\n     pub const fn new() -> Mutex { Mutex(imp::Mutex::new()) }\n \n     /// Prepare the mutex for use."}, {"sha": "9db7d732698766d758a0005b789d30c50932c6d9", "filename": "src/libstd/sys_common/thread_local.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/645388583ca47357a6a2e5878a9cde84e2e579d3/src%2Flibstd%2Fsys_common%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645388583ca47357a6a2e5878a9cde84e2e579d3/src%2Flibstd%2Fsys_common%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_local.rs?ref=645388583ca47357a6a2e5878a9cde84e2e579d3", "patch": "@@ -161,9 +161,8 @@ impl StaticKey {\n         // Additionally a 0-index of a tls key hasn't been seen on windows, so\n         // we just simplify the whole branch.\n         if imp::requires_synchronized_create() {\n-            // `INIT_LOCK` is never initialized fully, so this mutex is reentrant!\n-            // Do not use it in a way that might be reentrant, that could lead to\n-            // aliasing `&mut`.\n+            // `INIT_LOCK` is never initialized fully, so it is UB to attempt to\n+            // acquire this mutex reentrantly!\n             static INIT_LOCK: Mutex = Mutex::new();\n             let _guard = INIT_LOCK.lock();\n             let mut key = self.key.load(Ordering::SeqCst);"}, {"sha": "0078a05e5971a1420edf2a6aaacbe3b61f4b9b51", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/645388583ca47357a6a2e5878a9cde84e2e579d3/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645388583ca47357a6a2e5878a9cde84e2e579d3/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=645388583ca47357a6a2e5878a9cde84e2e579d3", "patch": "@@ -940,9 +940,8 @@ pub struct ThreadId(u64);\n impl ThreadId {\n     // Generate a new unique thread ID.\n     fn new() -> ThreadId {\n-        // `GUARD` is never initialized fully, so this mutex is reentrant!\n-        // Do not use it in a way that might be reentrant, that could lead to\n-        // aliasing `&mut`.\n+        // `GUARD` is never initialized fully, so it is UB to attempt to\n+        // acquire this mutex reentrantly!\n         static GUARD: mutex::Mutex = mutex::Mutex::new();\n         static mut COUNTER: u64 = 0;\n "}]}