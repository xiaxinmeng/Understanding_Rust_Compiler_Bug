{"sha": "a03e20db6d15fe1cdda64c0fbe934e36209a08f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwM2UyMGRiNmQxNWZlMWNkZGE2NGMwZmJlOTM0ZTM2MjA5YTA4ZjY=", "commit": {"author": {"name": "ishitatsuyuki", "email": "ishitatsuyuki@gmail.com", "date": "2019-01-31T09:28:22Z"}, "committer": {"name": "ishitatsuyuki", "email": "ishitatsuyuki@gmail.com", "date": "2019-03-09T09:23:17Z"}, "message": "Fix fallout from #57667", "tree": {"sha": "cca4ca60a15fdaa6fe258aced02d8cda341f0fe9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cca4ca60a15fdaa6fe258aced02d8cda341f0fe9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a03e20db6d15fe1cdda64c0fbe934e36209a08f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a03e20db6d15fe1cdda64c0fbe934e36209a08f6", "html_url": "https://github.com/rust-lang/rust/commit/a03e20db6d15fe1cdda64c0fbe934e36209a08f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a03e20db6d15fe1cdda64c0fbe934e36209a08f6/comments", "author": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f949c2fcc696d0260a99196d5e5400c59a26a54", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f949c2fcc696d0260a99196d5e5400c59a26a54", "html_url": "https://github.com/rust-lang/rust/commit/0f949c2fcc696d0260a99196d5e5400c59a26a54"}], "stats": {"total": 39, "additions": 6, "deletions": 33}, "files": [{"sha": "9afcb7c4621c9a0ef9e5a5b742c1e862e565a72d", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 6, "deletions": 33, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a03e20db6d15fe1cdda64c0fbe934e36209a08f6/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03e20db6d15fe1cdda64c0fbe934e36209a08f6/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=a03e20db6d15fe1cdda64c0fbe934e36209a08f6", "patch": "@@ -29,7 +29,7 @@\n use std::fmt::{self, Display, Debug};\n use std::iter::FromIterator;\n use std::ops::{Deref, DerefMut};\n-use std::{mem, ptr, slice, vec};\n+use std::{slice, vec};\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n@@ -66,45 +66,18 @@ impl<T: 'static> P<T> {\n     pub fn map<F>(mut self, f: F) -> P<T> where\n         F: FnOnce(T) -> T,\n     {\n-        let p: *mut T = &mut *self.ptr;\n+        let x = f(*self.ptr);\n+        *self.ptr = x;\n \n-        // Leak self in case of panic.\n-        // FIXME(eddyb) Use some sort of \"free guard\" that\n-        // only deallocates, without dropping the pointee,\n-        // in case the call the `f` below ends in a panic.\n-        mem::forget(self);\n-\n-        unsafe {\n-            ptr::write(p, f(ptr::read(p)));\n-\n-            // Recreate self from the raw pointer.\n-            P { ptr: Box::from_raw(p) }\n-        }\n+        self\n     }\n \n     /// Optionally produce a new `P<T>` from `self` without reallocating.\n     pub fn filter_map<F>(mut self, f: F) -> Option<P<T>> where\n         F: FnOnce(T) -> Option<T>,\n     {\n-        let p: *mut T = &mut *self.ptr;\n-\n-        // Leak self in case of panic.\n-        // FIXME(eddyb) Use some sort of \"free guard\" that\n-        // only deallocates, without dropping the pointee,\n-        // in case the call the `f` below ends in a panic.\n-        mem::forget(self);\n-\n-        unsafe {\n-            if let Some(v) = f(ptr::read(p)) {\n-                ptr::write(p, v);\n-\n-                // Recreate self from the raw pointer.\n-                Some(P { ptr: Box::from_raw(p) })\n-            } else {\n-                drop(Box::from_raw(p));\n-                None\n-            }\n-        }\n+        *self.ptr = f(*self.ptr)?;\n+        Some(self)\n     }\n }\n "}]}