{"sha": "984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "node_id": "C_kwDOAAsO6NoAKDk4NGNhNDY4OWRiY2VlYTI5YmJmY2Y1NGM0NzQzYjQ1ZmNjZjdhZDE", "commit": {"author": {"name": "Jamie Cunliffe", "email": "Jamie.Cunliffe@arm.com", "date": "2021-12-01T15:56:59Z"}, "committer": {"name": "Jamie Cunliffe", "email": "Jamie.Cunliffe@arm.com", "date": "2021-12-01T15:56:59Z"}, "message": "Review comments\n\n- Changed the separator from '+' to ','.\n- Moved the branch protection options from -C to -Z.\n- Additional test for incorrect branch-protection option.\n- Remove LLVM < 12 code.\n- Style fixes.\n\nCo-authored-by: James McGregor <james.mcgregor2@arm.com>", "tree": {"sha": "50e979ae7eed117e44f6bce9a82003fe0270f51c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50e979ae7eed117e44f6bce9a82003fe0270f51c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "html_url": "https://github.com/rust-lang/rust/commit/984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/comments", "author": {"login": "JamieCunliffe", "id": 29557119, "node_id": "MDQ6VXNlcjI5NTU3MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/29557119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JamieCunliffe", "html_url": "https://github.com/JamieCunliffe", "followers_url": "https://api.github.com/users/JamieCunliffe/followers", "following_url": "https://api.github.com/users/JamieCunliffe/following{/other_user}", "gists_url": "https://api.github.com/users/JamieCunliffe/gists{/gist_id}", "starred_url": "https://api.github.com/users/JamieCunliffe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JamieCunliffe/subscriptions", "organizations_url": "https://api.github.com/users/JamieCunliffe/orgs", "repos_url": "https://api.github.com/users/JamieCunliffe/repos", "events_url": "https://api.github.com/users/JamieCunliffe/events{/privacy}", "received_events_url": "https://api.github.com/users/JamieCunliffe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JamieCunliffe", "id": 29557119, "node_id": "MDQ6VXNlcjI5NTU3MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/29557119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JamieCunliffe", "html_url": "https://github.com/JamieCunliffe", "followers_url": "https://api.github.com/users/JamieCunliffe/followers", "following_url": "https://api.github.com/users/JamieCunliffe/following{/other_user}", "gists_url": "https://api.github.com/users/JamieCunliffe/gists{/gist_id}", "starred_url": "https://api.github.com/users/JamieCunliffe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JamieCunliffe/subscriptions", "organizations_url": "https://api.github.com/users/JamieCunliffe/orgs", "repos_url": "https://api.github.com/users/JamieCunliffe/repos", "events_url": "https://api.github.com/users/JamieCunliffe/events{/privacy}", "received_events_url": "https://api.github.com/users/JamieCunliffe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "html_url": "https://github.com/rust-lang/rust/commit/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5"}], "stats": {"total": 177, "additions": 57, "deletions": 120}, "files": [{"sha": "8e6329a997f141bc990713c125a43d54a7c9be80", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 1, "deletions": 53, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_session::config::{BranchProtection, OptLevel, PAuthKey};\n+use rustc_session::config::OptLevel;\n use rustc_session::Session;\n use rustc_target::spec::abi::Abi;\n use rustc_target::spec::{FramePointer, SanitizerSet, StackProbeType, StackProtector};\n@@ -203,58 +203,6 @@ pub fn non_lazy_bind(sess: &Session, llfn: &'ll Value) {\n     }\n }\n \n-pub fn set_branch_protection(sess: &Session, llfn: &'ll Value) {\n-    // Setting PAC/BTI function attributes is only necessary for LLVM 11 and earlier.\n-    // For LLVM 12 and greater, module-level metadata attributes are set in\n-    // `compiler/rustc_codegen_llvm/src/context.rs`.\n-    if llvm_util::get_version() >= (12, 0, 0) {\n-        return;\n-    }\n-\n-    let BranchProtection { bti, pac_ret: pac } = sess.opts.cg.branch_protection;\n-\n-    if bti {\n-        llvm::AddFunctionAttrString(\n-            llfn,\n-            llvm::AttributePlace::Function,\n-            cstr!(\"branch-target-enforcement\"),\n-        );\n-    }\n-\n-    if let Some(pac_opts) = pac {\n-        if pac_opts.leaf {\n-            llvm::AddFunctionAttrStringValue(\n-                llfn,\n-                llvm::AttributePlace::Function,\n-                cstr!(\"sign-return-address\"),\n-                cstr!(\"non-leaf\"),\n-            );\n-        } else {\n-            llvm::AddFunctionAttrStringValue(\n-                llfn,\n-                llvm::AttributePlace::Function,\n-                cstr!(\"sign-return-address\"),\n-                cstr!(\"all\"),\n-            );\n-        }\n-\n-        match pac_opts.key {\n-            PAuthKey::A => llvm::AddFunctionAttrStringValue(\n-                llfn,\n-                llvm::AttributePlace::Function,\n-                cstr!(\"sign-return-address-key\"),\n-                cstr!(\"a_key\"),\n-            ),\n-            PAuthKey::B => llvm::AddFunctionAttrStringValue(\n-                llfn,\n-                llvm::AttributePlace::Function,\n-                cstr!(\"sign-return-address-key\"),\n-                cstr!(\"b_key\"),\n-            ),\n-        }\n-    }\n-}\n-\n pub(crate) fn default_optimisation_attrs(sess: &Session, llfn: &'ll Value) {\n     match sess.opts.optimize {\n         OptLevel::Size => {"}, {"sha": "0f5487a4447d8f1b481304ae9a3aa6c164e954eb", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::ty::layout::{\n };\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n-use rustc_session::config::{BranchProtection, CFGuard, CrateType, DebugInfo, PAuthKey};\n+use rustc_session::config::{BranchProtection, CFGuard, CrateType, DebugInfo, PAuthKey, PacRet};\n use rustc_session::Session;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n@@ -243,35 +243,31 @@ pub unsafe fn create_module(\n     }\n \n     if sess.target.arch == \"aarch64\" {\n-        let BranchProtection { bti, pac_ret: pac } = sess.opts.cg.branch_protection;\n+        let BranchProtection { bti, pac_ret: pac } = sess.opts.debugging_opts.branch_protection;\n \n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n             \"branch-target-enforcement\\0\".as_ptr().cast(),\n             bti.into(),\n         );\n \n-        if let Some(pac_opts) = pac {\n-            llvm::LLVMRustAddModuleFlag(llmod, \"sign-return-address\\0\".as_ptr().cast(), 1);\n-            llvm::LLVMRustAddModuleFlag(\n-                llmod,\n-                \"sign-return-address-all\\0\".as_ptr().cast(),\n-                pac_opts.leaf.into(),\n-            );\n-            llvm::LLVMRustAddModuleFlag(\n-                llmod,\n-                \"sign-return-address-with-bkey\\0\".as_ptr().cast(),\n-                if pac_opts.key == PAuthKey::A { 0 } else { 1 },\n-            );\n-        } else {\n-            llvm::LLVMRustAddModuleFlag(llmod, \"sign-return-address\\0\".as_ptr().cast(), 0);\n-            llvm::LLVMRustAddModuleFlag(llmod, \"sign-return-address-all\\0\".as_ptr().cast(), 0);\n-            llvm::LLVMRustAddModuleFlag(\n-                llmod,\n-                \"sign-return-address-with-bkey\\0\".as_ptr().cast(),\n-                0,\n-            );\n-        }\n+        llvm::LLVMRustAddModuleFlag(\n+            llmod,\n+            \"sign-return-address\\0\".as_ptr().cast(),\n+            pac.is_some().into(),\n+        );\n+        let pac_opts = pac.unwrap_or(PacRet { leaf: false, key: PAuthKey::A });\n+        llvm::LLVMRustAddModuleFlag(\n+            llmod,\n+            \"sign-return-address-all\\0\".as_ptr().cast(),\n+            pac_opts.leaf.into(),\n+        );\n+        let is_bkey = if pac_opts.key == PAuthKey::A { false } else { true };\n+        llvm::LLVMRustAddModuleFlag(\n+            llmod,\n+            \"sign-return-address-with-bkey\\0\".as_ptr().cast(),\n+            is_bkey.into(),\n+        );\n     }\n \n     llmod"}, {"sha": "5db82dd7669d1ae15fdd152bdcb1f31f7dd88a88", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "patch": "@@ -45,10 +45,6 @@ fn declare_raw_fn(\n         llvm::Attribute::NoRedZone.apply_llfn(Function, llfn);\n     }\n \n-    if cx.tcx.sess.target.arch == \"aarch64\" {\n-        attributes::set_branch_protection(cx.tcx.sess, llfn);\n-    }\n-\n     attributes::default_optimisation_attrs(cx.tcx.sess, llfn);\n     attributes::non_lazy_bind(cx.sess(), llfn);\n "}, {"sha": "c9970898d25a531913bdb9530aba55a5a7bfb7e8", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "patch": "@@ -567,10 +567,6 @@ fn test_codegen_options_tracking_hash() {\n \n     // Make sure that changing a [TRACKED] option changes the hash.\n     // This list is in alphabetical order.\n-    tracked!(\n-        branch_protection,\n-        BranchProtection { bti: true, pac_ret: Some(PacRet { leaf: true, key: PAuthKey::B }) }\n-    );\n     tracked!(code_model, Some(CodeModel::Large));\n     tracked!(control_flow_guard, CFGuard::Checks);\n     tracked!(debug_assertions, Some(true));\n@@ -723,6 +719,10 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(asm_comments, true);\n     tracked!(assume_incomplete_release, true);\n     tracked!(binary_dep_depinfo, true);\n+    tracked!(\n+        branch_protection,\n+        BranchProtection { bti: true, pac_ret: Some(PacRet { leaf: true, key: PAuthKey::B }) }\n+    );\n     tracked!(chalk, true);\n     tracked!(codegen_backend, Some(\"abc\".to_string()));\n     tracked!(crate_attr, vec![\"abc\".to_string()]);"}, {"sha": "d3ffae36c6706d7462be891e049f15a7c5f7ebcf", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "patch": "@@ -390,7 +390,7 @@ mod desc {\n     pub const parse_stack_protector: &str =\n         \"one of (`none` (default), `basic`, `strong`, or `all`)\";\n     pub const parse_branch_protection: &str =\n-        \"a `+` separated combination of `bti`, `b-key`, `pac-ret`, or `leaf`\";\n+        \"a `,` separated combination of `bti`, `b-key`, `pac-ret`, or `leaf`\";\n }\n \n mod parse {\n@@ -935,7 +935,7 @@ mod parse {\n     crate fn parse_branch_protection(slot: &mut BranchProtection, v: Option<&str>) -> bool {\n         match v {\n             Some(s) => {\n-                for opt in s.split('+') {\n+                for opt in s.split(',') {\n                     match opt {\n                         \"bti\" => slot.bti = true,\n                         \"pac-ret\" if slot.pac_ret.is_none() => {\n@@ -953,7 +953,6 @@ mod parse {\n                     };\n                 }\n             }\n-\n             _ => return false,\n         }\n         true\n@@ -971,8 +970,6 @@ options! {\n \n     ar: String = (String::new(), parse_string, [UNTRACKED],\n         \"this option is deprecated and does nothing\"),\n-    branch_protection: BranchProtection = (BranchProtection::default(), parse_branch_protection, [TRACKED],\n-        \"set options for branch target identification and pointer authentication on AArch64\"),\n     code_model: Option<CodeModel> = (None, parse_code_model, [TRACKED],\n         \"choose the code model to use (`rustc --print code-models` for details)\"),\n     codegen_units: Option<usize> = (None, parse_opt_number, [UNTRACKED],\n@@ -1101,6 +1098,8 @@ options! {\n         (default: no)\"),\n     borrowck: String = (\"migrate\".to_string(), parse_string, [UNTRACKED],\n         \"select which borrowck is used (`mir` or `migrate`) (default: `migrate`)\"),\n+    branch_protection: BranchProtection = (BranchProtection::default(), parse_branch_protection, [TRACKED],\n+        \"set options for branch target identification and pointer authentication on AArch64\"),\n     cgu_partitioning_strategy: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the codegen unit partitioning strategy to use\"),\n     chalk: bool = (false, parse_bool, [TRACKED],"}, {"sha": "0201b88417a8b8f2ef4a3c0cfcf4435c36a77472", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "patch": "@@ -7,29 +7,6 @@ a version of this list for your exact compiler by running `rustc -C help`.\n \n This option is deprecated and does nothing.\n \n-## branch-protection\n-\n-This option lets you enable branch authentication instructions on AArch64.\n-This option is ignored for non-AArch64 architectures.\n-It takes some combination of the following values, separated by a `+`.\n-\n-- `pac-ret` - Enable pointer authentication for non-leaf functions.\n-- `leaf` - Enable pointer authentication for all functions, including leaf functions.\n-- `b-key` - Sign return addresses with key B, instead of the default key A.\n-- `bti` - Enable branch target identification.\n-\n-`leaf` and `b-key` are only valid if `pac-ret` was previously specified.\n-For example, `-C branch-protection=bti+pac-ret+leaf` is valid, but\n-`-C branch-protection=bti+leaf+pac-ret` is not.\n-\n-Repeated values are ignored.\n-For example, `-C branch-protection=pac-ret+leaf+pac-ret` is equivalent to\n-`-C branch-protection=pac-ret+leaf`.\n-\n-Rust's standard library does not ship with BTI or pointer authentication enabled by default. \\\n-In Cargo projects the standard library can be recompiled with pointer authentication using the nightly\n-[build-std](https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std) feature.\n-\n ## code-model\n \n This option lets you choose which code model to use. \\"}, {"sha": "85403748e1dcdab014366fea01034f98adf508d2", "filename": "src/doc/unstable-book/src/compiler-flags/branch-protection.md", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fbranch-protection.md", "raw_url": "https://github.com/rust-lang/rust/raw/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fbranch-protection.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fbranch-protection.md?ref=984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "patch": "@@ -0,0 +1,18 @@\n+# `branch-protection`\n+\n+This option lets you enable branch authentication instructions on AArch64.\n+This option is ignored for non-AArch64 architectures.\n+It takes some combination of the following values, separated by a `,`.\n+\n+- `pac-ret` - Enable pointer authentication for non-leaf functions.\n+- `leaf` - Enable pointer authentication for all functions, including leaf functions.\n+- `b-key` - Sign return addresses with key B, instead of the default key A.\n+- `bti` - Enable branch target identification.\n+\n+`leaf` and `b-key` are only valid if `pac-ret` was previously specified.\n+For example, `-Z branch-protection=bti,pac-ret,leaf` is valid, but\n+`-Z branch-protection=bti,leaf,pac-ret` is not.\n+\n+Rust's standard library does not ship with BTI or pointer authentication enabled by default.\n+In Cargo projects the standard library can be recompiled with pointer authentication using the nightly\n+[build-std](https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std) feature."}, {"sha": "27e289086b9dd00c9c14256a1975243a2bd57b85", "filename": "src/test/assembly/aarch64-pointer-auth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/src%2Ftest%2Fassembly%2Faarch64-pointer-auth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/src%2Ftest%2Fassembly%2Faarch64-pointer-auth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Faarch64-pointer-auth.rs?ref=984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "patch": "@@ -3,7 +3,7 @@\n // min-llvm-version: 10.0.1\n // assembly-output: emit-asm\n // compile-flags: --target aarch64-unknown-linux-gnu\n-// compile-flags: -C branch-protection=pac-ret+leaf\n+// compile-flags: -Z branch-protection=pac-ret,leaf\n // needs-llvm-components: aarch64\n \n #![feature(no_core, lang_items)]"}, {"sha": "106c9b148ee35e6bc7ce59566abe68050f80482b", "filename": "src/test/codegen/branch-protection.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/src%2Ftest%2Fcodegen%2Fbranch-protection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/src%2Ftest%2Fcodegen%2Fbranch-protection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fbranch-protection.rs?ref=984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "patch": "@@ -3,10 +3,10 @@\n // revisions: bti pac-ret leaf b-key\n // min-llvm-version: 12.0.0\n // needs-llvm-components: aarch64\n-// [bti] compile-flags: -C branch-protection=bti\n-// [pac-ret] compile-flags: -C branch-protection=pac-ret\n-// [leaf] compile-flags: -C branch-protection=pac-ret+leaf\n-// [b-key] compile-flags: -C branch-protection=pac-ret+b-key\n+// [bti] compile-flags: -Z branch-protection=bti\n+// [pac-ret] compile-flags: -Z branch-protection=pac-ret\n+// [leaf] compile-flags: -Z branch-protection=pac-ret,leaf\n+// [b-key] compile-flags: -Z branch-protection=pac-ret,b-key\n // compile-flags: --target aarch64-unknown-linux-gnu\n \n #![crate_type = \"lib\"]"}, {"sha": "d0e22cfef4c2ae74332475bad358ec26c22b435d", "filename": "src/test/run-make-fulldeps/pointer-auth-link-with-c/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2FMakefile?ref=984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "patch": "@@ -5,10 +5,10 @@\n all:\n \t$(COMPILE_OBJ) $(TMPDIR)/test.o test.c\n \t$(AR) rcs $(TMPDIR)/libtest.a $(TMPDIR)/test.o\n-\t$(RUSTC) -C branch-protection=bti+pac-ret+leaf test.rs\n+\t$(RUSTC) -Z branch-protection=bti,pac-ret,leaf test.rs\n \t$(call RUN,test)\n \n \t$(COMPILE_OBJ) $(TMPDIR)/test.o test.c -mbranch-protection=bti+pac-ret+leaf\n \t$(AR) rcs $(TMPDIR)/libtest.a $(TMPDIR)/test.o\n-\t$(RUSTC) -C branch-protection=bti+pac-ret+leaf test.rs\n-\t$(call RUN,test)\n\\ No newline at end of file\n+\t$(RUSTC) -Z branch-protection=bti,pac-ret,leaf test.rs\n+\t$(call RUN,test)"}, {"sha": "4f39d223a2e0c83407536575b0fff35cfb841cf6", "filename": "src/test/ui/invalid-compile-flags/branch-protection-missing-pac-ret.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.rs?ref=984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "patch": "@@ -0,0 +1 @@\n+// compile-flags: -Z branch-protection=leaf"}, {"sha": "5528d2a0729c9b98749a71559c1128979621fe4a", "filename": "src/test/ui/invalid-compile-flags/branch-protection-missing-pac-ret.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/984ca4689dbceea29bbfcf54c4743b45fccf7ad1/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.stderr?ref=984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "patch": "@@ -0,0 +1,2 @@\n+error: incorrect value `leaf` for debugging option `branch-protection` - a `,` separated combination of `bti`, `b-key`, `pac-ret`, or `leaf` was expected\n+"}]}