{"sha": "df714cfda728e201dd6b2227caa425bca3e048c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNzE0Y2ZkYTcyOGUyMDFkZDZiMjIyN2NhYTQyNWJjYTNlMDQ4Yzc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-17T13:11:10Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-21T16:32:36Z"}, "message": "The new method lookup mechanism typechecks calls against the method type declared in the trait, not in the impl. In some cases that results in tighter rules, and in some cases looser. Correct for that.", "tree": {"sha": "985a91c7107444de3fb52dfb3cdacbaa88fea791", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/985a91c7107444de3fb52dfb3cdacbaa88fea791"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df714cfda728e201dd6b2227caa425bca3e048c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df714cfda728e201dd6b2227caa425bca3e048c7", "html_url": "https://github.com/rust-lang/rust/commit/df714cfda728e201dd6b2227caa425bca3e048c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df714cfda728e201dd6b2227caa425bca3e048c7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98e237a681c798ef6850395cb8483b82fc844452", "url": "https://api.github.com/repos/rust-lang/rust/commits/98e237a681c798ef6850395cb8483b82fc844452", "html_url": "https://github.com/rust-lang/rust/commit/98e237a681c798ef6850395cb8483b82fc844452"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "6c6750ad24b2e88f16be69ae2c4e155975827082", "filename": "src/librustc/middle/borrowck/graphviz.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df714cfda728e201dd6b2227caa425bca3e048c7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df714cfda728e201dd6b2227caa425bca3e048c7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs?ref=df714cfda728e201dd6b2227caa425bca3e048c7", "patch": "@@ -142,8 +142,8 @@ impl<'a, 'tcx> dot::Labeller<'a, Node<'a>, Edge<'a>> for DataflowLabeller<'a, 't\n }\n \n impl<'a, 'tcx> dot::GraphWalk<'a, Node<'a>, Edge<'a>> for DataflowLabeller<'a, 'tcx> {\n-    fn nodes(&self) -> dot::Nodes<'a, Node<'a>> { self.inner.nodes() }\n-    fn edges(&self) -> dot::Edges<'a, Edge<'a>> { self.inner.edges() }\n-    fn source(&self, edge: &Edge<'a>) -> Node<'a> { self.inner.source(edge) }\n-    fn target(&self, edge: &Edge<'a>) -> Node<'a> { self.inner.target(edge) }\n+    fn nodes(&'a self) -> dot::Nodes<'a, Node<'a>> { self.inner.nodes() }\n+    fn edges(&'a self) -> dot::Edges<'a, Edge<'a>> { self.inner.edges() }\n+    fn source(&'a self, edge: &Edge<'a>) -> Node<'a> { self.inner.source(edge) }\n+    fn target(&'a self, edge: &Edge<'a>) -> Node<'a> { self.inner.target(edge) }\n }"}, {"sha": "fcd9a166c6ab1df2353889f4a5257ebd9e597115", "filename": "src/librustc/middle/cfg/graphviz.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df714cfda728e201dd6b2227caa425bca3e048c7/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df714cfda728e201dd6b2227caa425bca3e048c7/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs?ref=df714cfda728e201dd6b2227caa425bca3e048c7", "patch": "@@ -91,29 +91,29 @@ impl<'a, 'ast> dot::Labeller<'a, Node<'a>, Edge<'a>> for LabelledCFG<'a, 'ast> {\n }\n \n impl<'a> dot::GraphWalk<'a, Node<'a>, Edge<'a>> for &'a cfg::CFG {\n-    fn nodes(&self) -> dot::Nodes<'a, Node<'a>> {\n+    fn nodes(&'a self) -> dot::Nodes<'a, Node<'a>> {\n         let mut v = Vec::new();\n         self.graph.each_node(|i, nd| { v.push((i, nd)); true });\n         dot::maybe_owned_vec::Growable(v)\n     }\n-    fn edges(&self) -> dot::Edges<'a, Edge<'a>> {\n+    fn edges(&'a self) -> dot::Edges<'a, Edge<'a>> {\n         self.graph.all_edges().iter().collect()\n     }\n-    fn source(&self, edge: &Edge<'a>) -> Node<'a> {\n+    fn source(&'a self, edge: &Edge<'a>) -> Node<'a> {\n         let i = edge.source();\n         (i, self.graph.node(i))\n     }\n-    fn target(&self, edge: &Edge<'a>) -> Node<'a> {\n+    fn target(&'a self, edge: &Edge<'a>) -> Node<'a> {\n         let i = edge.target();\n         (i, self.graph.node(i))\n     }\n }\n \n impl<'a, 'ast> dot::GraphWalk<'a, Node<'a>, Edge<'a>> for LabelledCFG<'a, 'ast>\n {\n-    fn nodes(&self) -> dot::Nodes<'a, Node<'a>> { self.cfg.nodes() }\n-    fn edges(&self) -> dot::Edges<'a, Edge<'a>> { self.cfg.edges() }\n-    fn source(&self, edge: &Edge<'a>) -> Node<'a> { self.cfg.source(edge) }\n-    fn target(&self, edge: &Edge<'a>) -> Node<'a> { self.cfg.target(edge) }\n+    fn nodes(&'a self) -> dot::Nodes<'a, Node<'a>> { self.cfg.nodes() }\n+    fn edges(&'a self) -> dot::Edges<'a, Edge<'a>> { self.cfg.edges() }\n+    fn source(&'a self, edge: &Edge<'a>) -> Node<'a> { self.cfg.source(edge) }\n+    fn target(&'a self, edge: &Edge<'a>) -> Node<'a> { self.cfg.target(edge) }\n }\n "}, {"sha": "000e42b9703566de3eb358f77012dabbfd4f04ec", "filename": "src/test/auxiliary/regions-bounded-method-type-parameters-cross-crate-lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df714cfda728e201dd6b2227caa425bca3e048c7/src%2Ftest%2Fauxiliary%2Fregions-bounded-method-type-parameters-cross-crate-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df714cfda728e201dd6b2227caa425bca3e048c7/src%2Ftest%2Fauxiliary%2Fregions-bounded-method-type-parameters-cross-crate-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fregions-bounded-method-type-parameters-cross-crate-lib.rs?ref=df714cfda728e201dd6b2227caa425bca3e048c7", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // Check that method bounds declared on traits/impls in a cross-crate\n-// scenario work. This is the libary portion of the test.\n+// scenario work. This is the library portion of the test.\n \n pub enum MaybeOwned<'a> {\n     Owned(int),\n@@ -24,10 +24,19 @@ pub struct Inv<'a> { // invariant w/r/t 'a\n // trait, so I'll use that as the template for this test.\n pub trait IntoMaybeOwned<'a> {\n     fn into_maybe_owned(self) -> MaybeOwned<'a>;\n+\n+    // Note: without this `into_inv` method, the trait is\n+    // contravariant w/r/t `'a`, since if you look strictly at the\n+    // interface, it only returns `'a`. This complicates the\n+    // downstream test since it wants invariance to force an error.\n+    // Hence we add this method.\n+    fn into_inv(self) -> Inv<'a>;\n+\n     fn bigger_region<'b:'a>(self, b: Inv<'b>);\n }\n \n impl<'a> IntoMaybeOwned<'a> for Inv<'a> {\n     fn into_maybe_owned(self) -> MaybeOwned<'a> { fail!() }\n+    fn into_inv(self) -> Inv<'a> { fail!() }\n     fn bigger_region<'b:'a>(self, b: Inv<'b>) { fail!() }\n }"}, {"sha": "1705cfec6e2beba63ac0b9a55ea012cd9fe783c7", "filename": "src/test/compile-fail/regions-bounded-method-type-parameters-cross-crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df714cfda728e201dd6b2227caa425bca3e048c7/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df714cfda728e201dd6b2227caa425bca3e048c7/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-cross-crate.rs?ref=df714cfda728e201dd6b2227caa425bca3e048c7", "patch": "@@ -18,15 +18,15 @@ use lib::Inv;\n use lib::MaybeOwned;\n use lib::IntoMaybeOwned;\n \n-fn call_into_maybe_owned<'a,F:IntoMaybeOwned<'a>>(f: F) {\n+fn call_into_maybe_owned<'x,F:IntoMaybeOwned<'x>>(f: F) {\n     // Exercise a code path I found to be buggy. We were not encoding\n     // the region parameters from the receiver correctly on trait\n     // methods.\n     f.into_maybe_owned();\n }\n \n-fn call_bigger_region<'a, 'b>(a: Inv<'a>, b: Inv<'b>) {\n-    // Here the value provided for 'y is 'b, and hence 'b:'a does not hold.\n+fn call_bigger_region<'x, 'y>(a: Inv<'x>, b: Inv<'y>) {\n+    // Here the value provided for 'y is 'y, and hence 'y:'x does not hold.\n     a.bigger_region(b) //~ ERROR cannot infer\n }\n "}, {"sha": "aead739d3e01a354250250bbad7ee4b9463504cd", "filename": "src/test/compile-fail/wrong-mul-method-signature.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df714cfda728e201dd6b2227caa425bca3e048c7/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df714cfda728e201dd6b2227caa425bca3e048c7/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs?ref=df714cfda728e201dd6b2227caa425bca3e048c7", "patch": "@@ -58,7 +58,13 @@ impl Mul<f64, i32> for Vec3 {\n }\n \n pub fn main() {\n-    Vec1 { x: 1.0 } * 2.0;\n-    Vec2 { x: 1.0, y: 2.0 } * 2.0;\n-    Vec3 { x: 1.0, y: 2.0, z: 3.0 } * 2.0;\n+    // Check that the usage goes from the trait declaration:\n+\n+    let x: Vec1 = Vec1 { x: 1.0 } * 2.0; // this is OK\n+\n+    let x: Vec2 = Vec2 { x: 1.0, y: 2.0 } * 2.0; // trait had reversed order\n+    //~^ ERROR mismatched types\n+    //~^^ ERROR mismatched types\n+\n+    let x: i32 = Vec3 { x: 1.0, y: 2.0, z: 3.0 } * 2.0;\n }"}]}