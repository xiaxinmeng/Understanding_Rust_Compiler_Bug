{"sha": "ce5aad2f107e79c5f1baab40aff35b7899322d94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNWFhZDJmMTA3ZTc5YzVmMWJhYWI0MGFmZjM1Yjc4OTkzMjJkOTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-07T16:14:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-07T16:14:20Z"}, "message": "Auto merge of #21982 - pnkfelix:extend-Z-print-region-graph, r=nikomatsakis\n\nExtend region-inference graphviz rendering with enclosing relationship as well as the constraint edges.", "tree": {"sha": "a1cf833eef7ca7aca3ce59e970ccff1ade81d3bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1cf833eef7ca7aca3ce59e970ccff1ade81d3bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce5aad2f107e79c5f1baab40aff35b7899322d94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce5aad2f107e79c5f1baab40aff35b7899322d94", "html_url": "https://github.com/rust-lang/rust/commit/ce5aad2f107e79c5f1baab40aff35b7899322d94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce5aad2f107e79c5f1baab40aff35b7899322d94/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8661b3dc0fbb9e21b94266ba62e23cebb8f0603f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8661b3dc0fbb9e21b94266ba62e23cebb8f0603f", "html_url": "https://github.com/rust-lang/rust/commit/8661b3dc0fbb9e21b94266ba62e23cebb8f0603f"}, {"sha": "7610feb82a386d1637c60a05d6c64b6c4c459bb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7610feb82a386d1637c60a05d6c64b6c4c459bb6", "html_url": "https://github.com/rust-lang/rust/commit/7610feb82a386d1637c60a05d6c64b6c4c459bb6"}], "stats": {"total": 89, "additions": 78, "deletions": 11}, "files": [{"sha": "362919755c35d74ab6a3cf2fee8a06ff2ce5be23", "filename": "src/librustc/middle/infer/region_inference/graphviz.rs", "status": "modified", "additions": 50, "deletions": 11, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ce5aad2f107e79c5f1baab40aff35b7899322d94/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5aad2f107e79c5f1baab40aff35b7899322d94/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=ce5aad2f107e79c5f1baab40aff35b7899322d94", "patch": "@@ -19,12 +19,14 @@\n use graphviz as dot;\n \n use middle::ty;\n+use middle::region::CodeExtent;\n use super::Constraint;\n use middle::infer::SubregionOrigin;\n use middle::infer::region_inference::RegionVarBindings;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n use util::ppaux::Repr;\n \n+use std::borrow::Cow;\n use std::collections::hash_map::Entry::Vacant;\n use std::old_io::{self, File};\n use std::env;\n@@ -120,13 +122,18 @@ struct ConstraintGraph<'a, 'tcx: 'a> {\n     node_ids: FnvHashMap<Node, uint>,\n }\n \n-#[derive(Clone, Hash, PartialEq, Eq, Debug)]\n+#[derive(Clone, Hash, PartialEq, Eq, Debug, Copy)]\n enum Node {\n     RegionVid(ty::RegionVid),\n     Region(ty::Region),\n }\n \n-type Edge = Constraint;\n+// type Edge = Constraint;\n+#[derive(Clone, PartialEq, Eq, Debug, Copy)]\n+enum Edge {\n+    Constraint(Constraint),\n+    EnclScope(CodeExtent, CodeExtent),\n+}\n \n impl<'a, 'tcx> ConstraintGraph<'a, 'tcx> {\n     fn new(tcx: &'a ty::ctxt<'tcx>,\n@@ -146,6 +153,11 @@ impl<'a, 'tcx> ConstraintGraph<'a, 'tcx> {\n                 add_node(n1);\n                 add_node(n2);\n             }\n+\n+            tcx.region_maps.each_encl_scope(|sub, sup| {\n+                add_node(Node::Region(ty::ReScope(*sub)));\n+                add_node(Node::Region(ty::ReScope(*sup)));\n+            });\n         }\n \n         ConstraintGraph { tcx: tcx,\n@@ -160,7 +172,17 @@ impl<'a, 'tcx> dot::Labeller<'a, Node, Edge> for ConstraintGraph<'a, 'tcx> {\n         dot::Id::new(&*self.graph_name).ok().unwrap()\n     }\n     fn node_id(&self, n: &Node) -> dot::Id {\n-        dot::Id::new(format!(\"node_{}\", self.node_ids.get(n).unwrap())).ok().unwrap()\n+        let node_id = match self.node_ids.get(n) {\n+            Some(node_id) => node_id,\n+            None => panic!(\"no node_id found for node: {:?}\", n),\n+        };\n+        let name = || format!(\"node_{}\", node_id);\n+        match dot::Id::new(name()) {\n+            Ok(id) => id,\n+            Err(_) => {\n+                panic!(\"failed to create graphviz node identified by {}\", name());\n+            }\n+        }\n     }\n     fn node_label(&self, n: &Node) -> dot::LabelText {\n         match *n {\n@@ -171,7 +193,12 @@ impl<'a, 'tcx> dot::Labeller<'a, Node, Edge> for ConstraintGraph<'a, 'tcx> {\n         }\n     }\n     fn edge_label(&self, e: &Edge) -> dot::LabelText {\n-        dot::LabelText::label(format!(\"{}\", self.map.get(e).unwrap().repr(self.tcx)))\n+        match *e {\n+            Edge::Constraint(ref c) =>\n+                dot::LabelText::label(format!(\"{}\", self.map.get(c).unwrap().repr(self.tcx))),\n+            Edge::EnclScope(..) =>\n+                dot::LabelText::label(format!(\"(enclosed)\")),\n+        }\n     }\n }\n \n@@ -186,28 +213,40 @@ fn constraint_to_nodes(c: &Constraint) -> (Node, Node) {\n     }\n }\n \n+fn edge_to_nodes(e: &Edge) -> (Node, Node) {\n+    match *e {\n+        Edge::Constraint(ref c) => constraint_to_nodes(c),\n+        Edge::EnclScope(sub, sup) => {\n+            (Node::Region(ty::ReScope(sub)), Node::Region(ty::ReScope(sup)))\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> dot::GraphWalk<'a, Node, Edge> for ConstraintGraph<'a, 'tcx> {\n     fn nodes(&self) -> dot::Nodes<Node> {\n         let mut set = FnvHashSet();\n-        for constraint in self.map.keys() {\n-            let (n1, n2) = constraint_to_nodes(constraint);\n-            set.insert(n1);\n-            set.insert(n2);\n+        for node in self.node_ids.keys() {\n+            set.insert(*node);\n         }\n         debug!(\"constraint graph has {} nodes\", set.len());\n         set.into_iter().collect()\n     }\n     fn edges(&self) -> dot::Edges<Edge> {\n         debug!(\"constraint graph has {} edges\", self.map.len());\n-        self.map.keys().map(|e|*e).collect()\n+        let mut v : Vec<_> = self.map.keys().map(|e| Edge::Constraint(*e)).collect();\n+        self.tcx.region_maps.each_encl_scope(|sub, sup| {\n+            v.push(Edge::EnclScope(*sub, *sup))\n+        });\n+        debug!(\"region graph has {} edges\", v.len());\n+        Cow::Owned(v)\n     }\n     fn source(&self, edge: &Edge) -> Node {\n-        let (n1, _) = constraint_to_nodes(edge);\n+        let (n1, _) = edge_to_nodes(edge);\n         debug!(\"edge {:?} has source {:?}\", edge, n1);\n         n1\n     }\n     fn target(&self, edge: &Edge) -> Node {\n-        let (_, n2) = constraint_to_nodes(edge);\n+        let (_, n2) = edge_to_nodes(edge);\n         debug!(\"edge {:?} has target {:?}\", edge, n2);\n         n2\n     }"}, {"sha": "037b1c31a17207fa9ec3153d6845af95f568755c", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ce5aad2f107e79c5f1baab40aff35b7899322d94/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5aad2f107e79c5f1baab40aff35b7899322d94/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=ce5aad2f107e79c5f1baab40aff35b7899322d94", "patch": "@@ -260,6 +260,34 @@ struct RegionResolutionVisitor<'a> {\n \n \n impl RegionMaps {\n+    pub fn each_encl_scope<E>(&self, mut e:E) where E: FnMut(&CodeExtent, &CodeExtent) {\n+        for (child, parent) in self.scope_map.borrow().iter() {\n+            e(child, parent)\n+        }\n+    }\n+    pub fn each_var_scope<E>(&self, mut e:E) where E: FnMut(&ast::NodeId, &CodeExtent) {\n+        for (child, parent) in self.var_map.borrow().iter() {\n+            e(child, parent)\n+        }\n+    }\n+    pub fn each_encl_free_region<E>(&self, mut e:E) where E: FnMut(&FreeRegion, &FreeRegion) {\n+        for (child, parents) in self.free_region_map.borrow().iter() {\n+            for parent in parents.iter() {\n+                e(child, parent)\n+            }\n+        }\n+    }\n+    pub fn each_rvalue_scope<E>(&self, mut e:E) where E: FnMut(&ast::NodeId, &CodeExtent) {\n+        for (child, parent) in self.rvalue_scopes.borrow().iter() {\n+            e(child, parent)\n+        }\n+    }\n+    pub fn each_terminating_scope<E>(&self, mut e:E) where E: FnMut(&CodeExtent) {\n+        for scope in self.terminating_scopes.borrow().iter() {\n+            e(scope)\n+        }\n+    }\n+\n     pub fn relate_free_regions(&self, sub: FreeRegion, sup: FreeRegion) {\n         match self.free_region_map.borrow_mut().get_mut(&sub) {\n             Some(sups) => {"}]}