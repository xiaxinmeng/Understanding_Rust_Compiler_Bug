{"sha": "b2c5065b0434f0986e45bdf5a5d0028972e8104c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYzUwNjViMDQzNGYwOTg2ZTQ1YmRmNWE1ZDAwMjg5NzJlODEwNGM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-30T18:12:52Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-31T12:55:37Z"}, "message": "Remove Span argument from ExtCtxt::attribute\n\nMetaItem.span was always equivalent", "tree": {"sha": "7db5a5565578de21f84e3a3883ef4c3be658aff3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7db5a5565578de21f84e3a3883ef4c3be658aff3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2c5065b0434f0986e45bdf5a5d0028972e8104c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c5065b0434f0986e45bdf5a5d0028972e8104c", "html_url": "https://github.com/rust-lang/rust/commit/b2c5065b0434f0986e45bdf5a5d0028972e8104c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2c5065b0434f0986e45bdf5a5d0028972e8104c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63", "html_url": "https://github.com/rust-lang/rust/commit/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "eabb6302d463bc5ff19cdf48c19f608a1425fae1", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=b2c5065b0434f0986e45bdf5a5d0028972e8104c", "patch": "@@ -929,7 +929,7 @@ pub fn find_transparency(\n pub fn check_builtin_macro_attribute(ecx: &ExtCtxt<'_>, meta_item: &MetaItem, name: Symbol) {\n     // All the built-in macro attributes are \"words\" at the moment.\n     let template = AttributeTemplate { word: true, list: None, name_value_str: None };\n-    let attr = ecx.attribute(meta_item.span, meta_item.clone());\n+    let attr = ecx.attribute(meta_item.clone());\n     check_builtin_attribute(ecx.parse_sess, &attr, name, template);\n }\n "}, {"sha": "ea2c1fd707811c83119d892f272e70dc599a3f19", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=b2c5065b0434f0986e45bdf5a5d0028972e8104c", "patch": "@@ -259,7 +259,7 @@ pub trait AstBuilder {\n                     generics: Generics) -> P<ast::Item>;\n     fn item_ty(&self, span: Span, name: Ident, ty: P<ast::Ty>) -> P<ast::Item>;\n \n-    fn attribute(&self, sp: Span, mi: ast::MetaItem) -> ast::Attribute;\n+    fn attribute(&self, mi: ast::MetaItem) -> ast::Attribute;\n \n     fn meta_word(&self, sp: Span, w: ast::Name) -> ast::MetaItem;\n \n@@ -1134,8 +1134,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.item_ty_poly(span, name, ty, Generics::default())\n     }\n \n-    fn attribute(&self, sp: Span, mi: ast::MetaItem) -> ast::Attribute {\n-        attr::mk_attr_outer(sp, mi)\n+    fn attribute(&self, mi: ast::MetaItem) -> ast::Attribute {\n+        attr::mk_attr_outer(mi.span, mi)\n     }\n \n     fn meta_word(&self, sp: Span, w: ast::Name) -> ast::MetaItem {"}, {"sha": "d1fabf963b5d99013007de042224f5cecc458d87", "filename": "src/libsyntax/ext/proc_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax%2Fext%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax%2Fext%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fproc_macro.rs?ref=b2c5065b0434f0986e45bdf5a5d0028972e8104c", "patch": "@@ -239,11 +239,11 @@ crate fn add_derived_markers<T: HasAttrs>(\n     item.visit_attrs(|attrs| {\n         if names.contains(&sym::Eq) && names.contains(&sym::PartialEq) {\n             let meta = cx.meta_word(span, sym::structural_match);\n-            attrs.push(cx.attribute(span, meta));\n+            attrs.push(cx.attribute(meta));\n         }\n         if names.contains(&sym::Copy) {\n             let meta = cx.meta_word(span, sym::rustc_copy_clone_marker);\n-            attrs.push(cx.attribute(span, meta));\n+            attrs.push(cx.attribute(meta));\n         }\n     });\n }"}, {"sha": "350eacc3230ef6a6c4404887615b3b03b17d92e2", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=b2c5065b0434f0986e45bdf5a5d0028972e8104c", "patch": "@@ -77,7 +77,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt<'_>,\n     }\n \n     let inline = cx.meta_word(span, sym::inline);\n-    let attrs = vec![cx.attribute(span, inline)];\n+    let attrs = vec![cx.attribute(inline)];\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),"}, {"sha": "5698a8e38239174dcf6373f97d50cf67f5ca07b2", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=b2c5065b0434f0986e45bdf5a5d0028972e8104c", "patch": "@@ -17,7 +17,7 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt<'_>,\n     let inline = cx.meta_word(span, sym::inline);\n     let hidden = cx.meta_list_item_word(span, sym::hidden);\n     let doc = cx.meta_list(span, sym::doc, vec![hidden]);\n-    let attrs = vec![cx.attribute(span, inline), cx.attribute(span, doc)];\n+    let attrs = vec![cx.attribute(inline), cx.attribute(doc)];\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),"}, {"sha": "8405d2898421736e68add3d0d5e92fe3d22ed0f5", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=b2c5065b0434f0986e45bdf5a5d0028972e8104c", "patch": "@@ -15,7 +15,7 @@ pub fn expand_deriving_ord(cx: &mut ExtCtxt<'_>,\n                            item: &Annotatable,\n                            push: &mut dyn FnMut(Annotatable)) {\n     let inline = cx.meta_word(span, sym::inline);\n-    let attrs = vec![cx.attribute(span, inline)];\n+    let attrs = vec![cx.attribute(inline)];\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),"}, {"sha": "4ab136538877a9037e2570fe7965c72ca136e870", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=b2c5065b0434f0986e45bdf5a5d0028972e8104c", "patch": "@@ -63,7 +63,7 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt<'_>,\n     macro_rules! md {\n         ($name:expr, $f:ident) => { {\n             let inline = cx.meta_word(span, sym::inline);\n-            let attrs = vec![cx.attribute(span, inline)];\n+            let attrs = vec![cx.attribute(inline)];\n             MethodDef {\n                 name: $name,\n                 generics: LifetimeBounds::empty(),"}, {"sha": "18354e94815b5909ce5f930b0e922f61ca6692e2", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=b2c5065b0434f0986e45bdf5a5d0028972e8104c", "patch": "@@ -19,7 +19,7 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt<'_>,\n     macro_rules! md {\n         ($name:expr, $op:expr, $equal:expr) => { {\n             let inline = cx.meta_word(span, sym::inline);\n-            let attrs = vec![cx.attribute(span, inline)];\n+            let attrs = vec![cx.attribute(inline)];\n             MethodDef {\n                 name: $name,\n                 generics: LifetimeBounds::empty(),\n@@ -43,7 +43,7 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt<'_>,\n                                     PathKind::Std));\n \n     let inline = cx.meta_word(span, sym::inline);\n-    let attrs = vec![cx.attribute(span, inline)];\n+    let attrs = vec![cx.attribute(inline)];\n \n     let partial_cmp_def = MethodDef {\n         name: \"partial_cmp\","}, {"sha": "e147782db2c06b2661466e34ad77327f073f2573", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=b2c5065b0434f0986e45bdf5a5d0028972e8104c", "patch": "@@ -16,7 +16,7 @@ pub fn expand_deriving_default(cx: &mut ExtCtxt<'_>,\n                                item: &Annotatable,\n                                push: &mut dyn FnMut(Annotatable)) {\n     let inline = cx.meta_word(span, sym::inline);\n-    let attrs = vec![cx.attribute(span, inline)];\n+    let attrs = vec![cx.attribute(inline)];\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),"}, {"sha": "1a4fce375498444933bbeee959cd7a29d4dbd9d8", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=b2c5065b0434f0986e45bdf5a5d0028972e8104c", "patch": "@@ -666,14 +666,13 @@ impl<'a> TraitDef<'a> {\n         let path = cx.path_all(self.span, false, vec![type_ident], self_params, vec![]);\n         let self_type = cx.ty_path(path);\n \n-        let attr = cx.attribute(self.span,\n-                                cx.meta_word(self.span, sym::automatically_derived));\n+        let attr = cx.attribute(cx.meta_word(self.span, sym::automatically_derived));\n         // Just mark it now since we know that it'll end up used downstream\n         attr::mark_used(&attr);\n         let opt_trait_ref = Some(trait_ref);\n         let unused_qual = {\n             let word = cx.meta_list_item_word(self.span, Symbol::intern(\"unused_qualifications\"));\n-            cx.attribute(self.span, cx.meta_list(self.span, sym::allow, vec![word]))\n+            cx.attribute(cx.meta_list(self.span, sym::allow, vec![word]))\n         };\n \n         let mut a = vec![attr, unused_qual];"}, {"sha": "7225ceb8fc9b7156174b6332cd4a44ba971f9704", "filename": "src/libsyntax_ext/global_allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_allocator.rs?ref=b2c5065b0434f0986e45bdf5a5d0028972e8104c", "patch": "@@ -110,7 +110,7 @@ impl AllocFnFactory<'_, '_> {\n     fn attrs(&self) -> Vec<Attribute> {\n         let special = sym::rustc_std_internal_symbol;\n         let special = self.cx.meta_word(self.span, special);\n-        vec![self.cx.attribute(self.span, special)]\n+        vec![self.cx.attribute(special)]\n     }\n \n     fn arg_ty("}, {"sha": "7c16d82fe3804c97a51c29dec244267486ddf85c", "filename": "src/libsyntax_ext/proc_macro_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_harness.rs?ref=b2c5065b0434f0986e45bdf5a5d0028972e8104c", "patch": "@@ -337,7 +337,7 @@ fn mk_decls(\n \n     let hidden = cx.meta_list_item_word(span, sym::hidden);\n     let doc = cx.meta_list(span, sym::doc, vec![hidden]);\n-    let doc_hidden = cx.attribute(span, doc);\n+    let doc_hidden = cx.attribute(doc);\n \n     let proc_macro = Ident::with_empty_ctxt(sym::proc_macro);\n     let krate = cx.item(span,\n@@ -394,7 +394,7 @@ fn mk_decls(\n         cx.expr_vec_slice(span, decls),\n     ).map(|mut i| {\n         let attr = cx.meta_word(span, sym::rustc_proc_macro_decls);\n-        i.attrs.push(cx.attribute(span, attr));\n+        i.attrs.push(cx.attribute(attr));\n         i.vis = respan(span, ast::VisibilityKind::Public);\n         i\n     });"}, {"sha": "ed4ea6b1bc90c1c870d7bb78e70aa270a3029d3f", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=b2c5065b0434f0986e45bdf5a5d0028972e8104c", "patch": "@@ -36,8 +36,7 @@ pub fn expand_test_case(\n         item.vis = respan(item.vis.span, ast::VisibilityKind::Public);\n         item.ident = item.ident.gensym();\n         item.attrs.push(\n-            ecx.attribute(sp,\n-                ecx.meta_word(sp, sym::rustc_test_marker))\n+            ecx.attribute(ecx.meta_word(sp, sym::rustc_test_marker))\n         );\n         item\n     });\n@@ -150,11 +149,11 @@ pub fn expand_test_or_bench(\n     let mut test_const = cx.item(sp, ast::Ident::new(item.ident.name, sp).gensym(),\n         vec![\n             // #[cfg(test)]\n-            cx.attribute(attr_sp, cx.meta_list(attr_sp, sym::cfg, vec![\n+            cx.attribute(cx.meta_list(attr_sp, sym::cfg, vec![\n                 cx.meta_list_item_word(attr_sp, sym::test)\n             ])),\n             // #[rustc_test_marker]\n-            cx.attribute(attr_sp, cx.meta_word(attr_sp, sym::rustc_test_marker)),\n+            cx.attribute(cx.meta_word(attr_sp, sym::rustc_test_marker)),\n         ],\n         // const $ident: test::TestDescAndFn =\n         ast::ItemKind::Const(cx.ty(sp, ast::TyKind::Path(None, test_path(\"TestDescAndFn\"))),"}, {"sha": "3fae6fc6195c37809a687633ff437c08f1b5e1a0", "filename": "src/libsyntax_ext/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c5065b0434f0986e45bdf5a5d0028972e8104c/src%2Flibsyntax_ext%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_harness.rs?ref=b2c5065b0434f0986e45bdf5a5d0028972e8104c", "patch": "@@ -294,7 +294,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n \n     // #![main]\n     let main_meta = ecx.meta_word(sp, sym::main);\n-    let main_attr = ecx.attribute(sp, main_meta);\n+    let main_attr = ecx.attribute(main_meta);\n \n     // extern crate test as test_gensym\n     let test_extern_stmt = ecx.stmt_item(sp, ecx.item(sp,"}]}