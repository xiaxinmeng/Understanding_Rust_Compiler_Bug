{"sha": "942cac1b8d9b9fa6a5ba372aaff815f565f302d0", "node_id": "C_kwDOAAsO6NoAKDk0MmNhYzFiOGQ5YjlmYTZhNWJhMzcyYWFmZjgxNWY1NjVmMzAyZDA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-16T16:06:12Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-16T16:06:12Z"}, "message": "Implement a minimal subset of MIR statements and terminators for smir", "tree": {"sha": "843f1c6ba82d60a03a79eda0bed0863479a4a0aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/843f1c6ba82d60a03a79eda0bed0863479a4a0aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/942cac1b8d9b9fa6a5ba372aaff815f565f302d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/942cac1b8d9b9fa6a5ba372aaff815f565f302d0", "html_url": "https://github.com/rust-lang/rust/commit/942cac1b8d9b9fa6a5ba372aaff815f565f302d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/942cac1b8d9b9fa6a5ba372aaff815f565f302d0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fe982283d70a9c6ab621093716ef616ce26e0b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe982283d70a9c6ab621093716ef616ce26e0b3", "html_url": "https://github.com/rust-lang/rust/commit/6fe982283d70a9c6ab621093716ef616ce26e0b3"}], "stats": {"total": 214, "additions": 209, "deletions": 5}, "files": [{"sha": "86e30dd0f6a2adcccd648e53cae8ce371ef3c395", "filename": "compiler/rustc_smir/src/rustc_smir/mod.rs", "status": "modified", "additions": 110, "deletions": 1, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/942cac1b8d9b9fa6a5ba372aaff815f565f302d0/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942cac1b8d9b9fa6a5ba372aaff815f565f302d0/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs?ref=942cac1b8d9b9fa6a5ba372aaff815f565f302d0", "patch": "@@ -8,7 +8,7 @@\n //! For now, we are developing everything inside `rustc`, thus, we keep this module private.\n \n use crate::{\n-    rustc_internal::crate_item,\n+    rustc_internal::{crate_item, item_def_id},\n     stable_mir::{self},\n };\n use rustc_middle::ty::{tls::with, TyCtxt};\n@@ -47,3 +47,112 @@ fn smir_crate(tcx: TyCtxt<'_>, crate_num: CrateNum) -> stable_mir::Crate {\n     debug!(?crate_name, ?crate_num, \"smir_crate\");\n     stable_mir::Crate { id: crate_num.into(), name: crate_name, is_local }\n }\n+\n+pub fn mir_body(item: &stable_mir::CrateItem) -> stable_mir::mir::Body {\n+    with(|tcx| {\n+        let def_id = item_def_id(item);\n+        let mir = tcx.optimized_mir(def_id);\n+        stable_mir::mir::Body {\n+            blocks: mir\n+                .basic_blocks\n+                .iter()\n+                .map(|block| stable_mir::mir::BasicBlock {\n+                    terminator: rustc_terminator_to_terminator(block.terminator()),\n+                    statements: block.statements.iter().map(rustc_statement_to_statement).collect(),\n+                })\n+                .collect(),\n+        }\n+    })\n+}\n+\n+fn rustc_statement_to_statement(\n+    s: &rustc_middle::mir::Statement<'_>,\n+) -> stable_mir::mir::Statement {\n+    use rustc_middle::mir::StatementKind::*;\n+    match &s.kind {\n+        Assign(assign) => stable_mir::mir::Statement::Assign(\n+            rustc_place_to_place(&assign.0),\n+            rustc_rvalue_to_rvalue(&assign.1),\n+        ),\n+        FakeRead(_) => todo!(),\n+        SetDiscriminant { .. } => todo!(),\n+        Deinit(_) => todo!(),\n+        StorageLive(_) => todo!(),\n+        StorageDead(_) => todo!(),\n+        Retag(_, _) => todo!(),\n+        PlaceMention(_) => todo!(),\n+        AscribeUserType(_, _) => todo!(),\n+        Coverage(_) => todo!(),\n+        Intrinsic(_) => todo!(),\n+        ConstEvalCounter => todo!(),\n+        Nop => stable_mir::mir::Statement::Nop,\n+    }\n+}\n+\n+fn rustc_rvalue_to_rvalue(rvalue: &rustc_middle::mir::Rvalue<'_>) -> stable_mir::mir::Operand {\n+    use rustc_middle::mir::Rvalue::*;\n+    match rvalue {\n+        Use(op) => rustc_op_to_op(op),\n+        Repeat(_, _) => todo!(),\n+        Ref(_, _, _) => todo!(),\n+        ThreadLocalRef(_) => todo!(),\n+        AddressOf(_, _) => todo!(),\n+        Len(_) => todo!(),\n+        Cast(_, _, _) => todo!(),\n+        BinaryOp(_, _) => todo!(),\n+        CheckedBinaryOp(_, _) => todo!(),\n+        NullaryOp(_, _) => todo!(),\n+        UnaryOp(_, _) => todo!(),\n+        Discriminant(_) => todo!(),\n+        Aggregate(_, _) => todo!(),\n+        ShallowInitBox(_, _) => todo!(),\n+        CopyForDeref(_) => todo!(),\n+    }\n+}\n+\n+fn rustc_op_to_op(op: &rustc_middle::mir::Operand<'_>) -> stable_mir::mir::Operand {\n+    use rustc_middle::mir::Operand::*;\n+    match op {\n+        Copy(place) => stable_mir::mir::Operand::Copy(rustc_place_to_place(place)),\n+        Move(place) => stable_mir::mir::Operand::Move(rustc_place_to_place(place)),\n+        Constant(c) => stable_mir::mir::Operand::Constant(c.to_string()),\n+    }\n+}\n+\n+fn rustc_place_to_place(place: &rustc_middle::mir::Place<'_>) -> stable_mir::mir::Place {\n+    assert_eq!(&place.projection[..], &[]);\n+    stable_mir::mir::Place { local: place.local.as_usize() }\n+}\n+\n+fn rustc_terminator_to_terminator(\n+    terminator: &rustc_middle::mir::Terminator<'_>,\n+) -> stable_mir::mir::Terminator {\n+    use rustc_middle::mir::TerminatorKind::*;\n+    use stable_mir::mir::Terminator;\n+    match &terminator.kind {\n+        Goto { target } => Terminator::Goto { target: target.as_usize() },\n+        SwitchInt { discr, targets } => Terminator::SwitchInt {\n+            discr: rustc_op_to_op(discr),\n+            targets: targets\n+                .iter()\n+                .map(|(value, target)| stable_mir::mir::SwitchTarget {\n+                    value,\n+                    target: target.as_usize(),\n+                })\n+                .collect(),\n+            otherwise: targets.otherwise().as_usize(),\n+        },\n+        Resume => Terminator::Resume,\n+        Abort => Terminator::Abort,\n+        Return => Terminator::Return,\n+        Unreachable => Terminator::Unreachable,\n+        Drop { .. } => todo!(),\n+        Call { .. } => todo!(),\n+        Assert { .. } => todo!(),\n+        Yield { .. } => todo!(),\n+        GeneratorDrop => todo!(),\n+        FalseEdge { .. } => todo!(),\n+        FalseUnwind { .. } => todo!(),\n+        InlineAsm { .. } => todo!(),\n+    }\n+}"}, {"sha": "a9dbc3463f80b3c5efbcf5103d5966b0b6aadc14", "filename": "compiler/rustc_smir/src/stable_mir/mir.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/942cac1b8d9b9fa6a5ba372aaff815f565f302d0/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942cac1b8d9b9fa6a5ba372aaff815f565f302d0/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir.rs?ref=942cac1b8d9b9fa6a5ba372aaff815f565f302d0", "patch": "@@ -0,0 +1,3 @@\n+mod body;\n+\n+pub use body::*;"}, {"sha": "613141952a788988bc59ade405bada603e72ecd2", "filename": "compiler/rustc_smir/src/stable_mir/mir/body.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/942cac1b8d9b9fa6a5ba372aaff815f565f302d0/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942cac1b8d9b9fa6a5ba372aaff815f565f302d0/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs?ref=942cac1b8d9b9fa6a5ba372aaff815f565f302d0", "patch": "@@ -0,0 +1,62 @@\n+pub struct Body {\n+    pub blocks: Vec<BasicBlock>,\n+}\n+\n+pub struct BasicBlock {\n+    pub statements: Vec<Statement>,\n+    pub terminator: Terminator,\n+}\n+\n+pub enum Terminator {\n+    Goto {\n+        target: usize,\n+    },\n+    SwitchInt {\n+        discr: Operand,\n+        targets: Vec<SwitchTarget>,\n+        otherwise: usize,\n+    },\n+    Resume,\n+    Abort,\n+    Return,\n+    Unreachable,\n+    Drop {\n+        place: Place,\n+        target: usize,\n+        unwind: Option<usize>,\n+    },\n+    Call {\n+        func: Operand,\n+        args: Vec<Operand>,\n+        destination: Place,\n+        target: Option<usize>,\n+        cleanup: Option<usize>,\n+    },\n+    Assert {\n+        cond: Operand,\n+        expected: bool,\n+        msg: String,\n+        target: usize,\n+        cleanup: Option<usize>,\n+    },\n+}\n+\n+pub enum Statement {\n+    Assign(Place, Operand),\n+    Nop,\n+}\n+\n+pub enum Operand {\n+    Copy(Place),\n+    Move(Place),\n+    Constant(String),\n+}\n+\n+pub struct Place {\n+    pub local: usize,\n+}\n+\n+pub struct SwitchTarget {\n+    pub value: u128,\n+    pub target: usize,\n+}"}, {"sha": "ba23186224a750fbc9662cbd68fa61c1fce09990", "filename": "compiler/rustc_smir/src/stable_mir/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/942cac1b8d9b9fa6a5ba372aaff815f565f302d0/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942cac1b8d9b9fa6a5ba372aaff815f565f302d0/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs?ref=942cac1b8d9b9fa6a5ba372aaff815f565f302d0", "patch": "@@ -11,6 +11,8 @@\n //! There shouldn't be any direct references to internal compiler constructs in this module.\n //! If you need an internal construct, consider using `rustc_internal` or `rustc_smir`.\n \n+pub mod mir;\n+\n /// Use String for now but we should replace it.\n pub type Symbol = String;\n \n@@ -37,6 +39,12 @@ pub struct Crate {\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct CrateItem(pub(crate) DefId);\n \n+impl CrateItem {\n+    pub fn body(&self) -> mir::Body {\n+        crate::rustc_smir::mir_body(self)\n+    }\n+}\n+\n /// Access to the local crate.\n pub fn local_crate() -> Crate {\n     crate::rustc_smir::local_crate()"}, {"sha": "95797ddf07399bd27ba0f4cf44338afd17f62914", "filename": "tests/ui-fulldeps/stable-mir/crate-info.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/942cac1b8d9b9fa6a5ba372aaff815f565f302d0/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942cac1b8d9b9fa6a5ba372aaff815f565f302d0/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs?ref=942cac1b8d9b9fa6a5ba372aaff815f565f302d0", "patch": "@@ -30,16 +30,34 @@ fn test_stable_mir(tcx: TyCtxt<'_>) {\n \n     // Find items in the local crate.\n     let items = stable_mir::all_local_items();\n-    assert!(has_item(tcx, &items, (DefKind::Fn, \"foo_bar\")));\n-    assert!(has_item(tcx, &items, (DefKind::Fn, \"foo::bar\")));\n+    assert!(get_item(tcx, &items, (DefKind::Fn, \"foo_bar\")).is_some());\n+    assert!(get_item(tcx, &items, (DefKind::Fn, \"foo::bar\")).is_some());\n \n     // Find the `std` crate.\n     assert!(stable_mir::find_crate(\"std\").is_some());\n+\n+    let bar = get_item(tcx, &items, (DefKind::Fn, \"bar\")).unwrap();\n+    let body = bar.body();\n+    assert_eq!(body.blocks.len(), 1);\n+    let block = &body.blocks[0];\n+    assert_eq!(block.statements.len(), 1);\n+    match &block.statements[0] {\n+        stable_mir::mir::Statement::Assign(..) => {}\n+        _ => panic!(),\n+    }\n+    match &block.terminator {\n+        stable_mir::mir::Terminator::Return => {}\n+        _ => panic!(),\n+    }\n }\n \n // Use internal API to find a function in a crate.\n-fn has_item(tcx: TyCtxt, items: &stable_mir::CrateItems, item: (DefKind, &str)) -> bool {\n-    items.iter().any(|crate_item| {\n+fn get_item<'a>(\n+    tcx: TyCtxt,\n+    items: &'a stable_mir::CrateItems,\n+    item: (DefKind, &str),\n+) -> Option<&'a stable_mir::CrateItem> {\n+    items.iter().find(|crate_item| {\n         let def_id = rustc_internal::item_def_id(crate_item);\n         tcx.def_kind(def_id) == item.0 && tcx.def_path_str(def_id) == item.1\n     })\n@@ -94,6 +112,10 @@ fn generate_input(path: &str) -> std::io::Result<()> {\n         }}\n     }}\n \n+    pub fn bar(x: i32) -> i32 {{\n+        x\n+    }}\n+\n     pub fn foo_bar(x: i32, y: i32) -> i64 {{\n         let x_64 = foo::bar(x);\n         let y_64 = foo::bar(y);"}]}