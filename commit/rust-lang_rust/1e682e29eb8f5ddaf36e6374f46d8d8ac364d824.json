{"sha": "1e682e29eb8f5ddaf36e6374f46d8d8ac364d824", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNjgyZTI5ZWI4ZjVkZGFmMzZlNjM3NGY0NmQ4ZDhhYzM2NGQ4MjQ=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-06-14T18:59:49Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-06-17T15:41:26Z"}, "message": "Refactoring and tidy warnings cleanup.", "tree": {"sha": "fa63ad7925ac9f797f5b4a209663a8d93097cb1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa63ad7925ac9f797f5b4a209663a8d93097cb1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e682e29eb8f5ddaf36e6374f46d8d8ac364d824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e682e29eb8f5ddaf36e6374f46d8d8ac364d824", "html_url": "https://github.com/rust-lang/rust/commit/1e682e29eb8f5ddaf36e6374f46d8d8ac364d824", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e682e29eb8f5ddaf36e6374f46d8d8ac364d824/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b45591daf9edb09d95007ecc658ac6cbaa7ee8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b45591daf9edb09d95007ecc658ac6cbaa7ee8a", "html_url": "https://github.com/rust-lang/rust/commit/2b45591daf9edb09d95007ecc658ac6cbaa7ee8a"}], "stats": {"total": 118, "additions": 63, "deletions": 55}, "files": [{"sha": "c00bb390edd28f55c5071f020d1410d235be5d45", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1e682e29eb8f5ddaf36e6374f46d8d8ac364d824/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e682e29eb8f5ddaf36e6374f46d8d8ac364d824/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=1e682e29eb8f5ddaf36e6374f46d8d8ac364d824", "patch": "@@ -225,12 +225,11 @@ pub enum Pass_opaque {}\n pub type PassRef = *Pass_opaque;\n \n pub mod debuginfo {\n-    use core::prelude::*;\n     use super::{ValueRef};\n-    \n+\n     pub enum DIBuilder_opaque {}\n     pub type DIBuilderRef = *DIBuilder_opaque;\n-    \n+\n     pub type DIDescriptor = ValueRef;\n     pub type DIScope = DIDescriptor;\n     pub type DILocation = DIDescriptor;\n@@ -295,6 +294,8 @@ pub mod llvm {\n         pub unsafe fn LLVMGetModuleContext(M: ModuleRef) -> ContextRef;\n         #[fast_ffi]\n         pub unsafe fn LLVMDisposeModule(M: ModuleRef);\n+        #[fast_ffi]\n+        pub unsafe fn LLVMGetModuleContext(M: ModuleRef) -> ContextRef;\n \n         /** Data layout. See Module::getDataLayout. */\n         #[fast_ffi]\n@@ -2045,14 +2046,14 @@ pub mod llvm {\n             AlwaysPreserve: bool,\n             Flags: c_uint,\n             ArgNo: c_uint) -> DIVariable;\n-            \n+\n         #[fast_ffi]\n         pub unsafe fn LLVMDIBuilderCreateArrayType(\n             Builder: DIBuilderRef,\n             Size: c_ulonglong,\n             AlignInBits: c_ulonglong,\n             Ty: DIType,\n-            Subscripts: DIArray) -> DIType;            \n+            Subscripts: DIArray) -> DIType;\n \n         #[fast_ffi]\n         pub unsafe fn LLVMDIBuilderCreateVectorType("}, {"sha": "467185f007e5a9a0761414dd639bbfb44a8741e1", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e682e29eb8f5ddaf36e6374f46d8d8ac364d824/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e682e29eb8f5ddaf36e6374f46d8d8ac364d824/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1e682e29eb8f5ddaf36e6374f46d8d8ac364d824", "patch": "@@ -1908,7 +1908,11 @@ pub fn trans_closure(ccx: @mut CrateContext,\n     finish(bcx);\n     cleanup_and_Br(bcx, bcx_top, fcx.llreturn);\n \n-    unsafe { llvm::LLVMMoveBasicBlockAfter(fcx.llreturn, bcx.llbb); }\n+    // Put return block after all other blocks.\n+    // This somewhat improves single-stepping experience in debugger.\n+    unsafe {\n+        llvm::LLVMMoveBasicBlockAfter(fcx.llreturn, bcx.llbb);\n+    }\n \n     // Insert the mandatory first few basic blocks before lltop.\n     finish_fn(fcx, lltop);\n@@ -3108,7 +3112,7 @@ pub fn trans_crate(sess: session::Session,\n         if ccx.sess.opts.debuginfo {\n             debuginfo::finalize(ccx);\n         }\n-        \n+\n     // Translate the metadata.\n     write_metadata(ccx, crate);\n     if ccx.sess.trans_stats() {"}, {"sha": "1f8b75d9e77d50adee7a54949e7ce7f958594f50", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 51, "deletions": 48, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/1e682e29eb8f5ddaf36e6374f46d8d8ac364d824/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e682e29eb8f5ddaf36e6374f46d8d8ac364d824/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=1e682e29eb8f5ddaf36e6374f46d8d8ac364d824", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -32,9 +32,7 @@ use core::vec;\n use syntax::codemap::span;\n use syntax::{ast, codemap, ast_util, ast_map};\n \n-static LLVMDebugVersion: int = (12 << 16);\n-\n-static DW_LANG_RUST: int = 12; //0x9000;\n+static DW_LANG_RUST: int = 0x9000;\n \n static CompileUnitTag: int = 17;\n static FileDescriptorTag: int = 41;\n@@ -65,6 +63,7 @@ pub type DebugContext = @mut _DebugContext;\n struct _DebugContext {\n     names: namegen,\n     crate_file: ~str,\n+    llcontext: ContextRef,\n     builder: DIBuilderRef,\n     curr_loc: (uint, uint),\n     created_files: HashMap<~str, DIFile>,\n@@ -73,13 +72,16 @@ struct _DebugContext {\n     created_types: HashMap<uint, DIType>\n }\n \n-/** Create new DebugContext */\n+/// Create new DebugContext\n pub fn mk_ctxt(llmod: ModuleRef, crate: ~str) -> DebugContext {\n     debug!(\"mk_ctxt\");\n     let builder = unsafe { llvm::LLVMDIBuilderCreate(llmod) };\n+    // DIBuilder inherits context from the module, so we'd better use the same one\n+    let llcontext = unsafe { llvm::LLVMGetModuleContext(llmod) };\n     let dcx = @mut _DebugContext {\n         names: new_namegen(),\n         crate_file: crate,\n+        llcontext: llcontext,\n         builder: builder,\n         curr_loc: (0, 0),\n         created_files: HashMap::new(),\n@@ -91,18 +93,11 @@ pub fn mk_ctxt(llmod: ModuleRef, crate: ~str) -> DebugContext {\n }\n \n #[inline(always)]\n-fn dbg_cx(cx: &CrateContext) -> DebugContext\n-{\n+fn dbg_cx(cx: &CrateContext) -> DebugContext {\n     return cx.dbg_cx.get();\n }\n \n-fn create_DIArray(builder: DIBuilderRef, arr: &[DIDescriptor]) -> DIArray {\n-    return unsafe {\n-        llvm::LLVMDIBuilderGetOrCreateArray(builder, vec::raw::to_ptr(arr), arr.len() as u32)\n-    };\n-}\n-\n-/** Create any deferred debug metadata nodes */\n+/// Create any deferred debug metadata nodes\n pub fn finalize(cx: @CrateContext) {\n     debug!(\"finalize\");\n     create_compile_unit(cx);\n@@ -113,6 +108,12 @@ pub fn finalize(cx: @CrateContext) {\n     };\n }\n \n+fn create_DIArray(builder: DIBuilderRef, arr: &[DIDescriptor]) -> DIArray {\n+    return unsafe {\n+        llvm::LLVMDIBuilderGetOrCreateArray(builder, vec::raw::to_ptr(arr), arr.len() as u32)\n+    };\n+}\n+\n fn create_compile_unit(cx: @CrateContext) {\n     let crate_name: &str = dbg_cx(cx).crate_file;\n     let work_dir = cx.sess.working_dir.to_str();\n@@ -158,6 +159,7 @@ fn create_file(cx: @CrateContext, full_path: &str) -> DIFile {\n     return file_md;\n }\n \n+/// Return codemap::Loc corresponding to the beginning of the span\n fn span_start(cx: @CrateContext, span: span) -> codemap::Loc {\n     return cx.sess.codemap.lookup_char_pos(span.lo);\n }\n@@ -208,7 +210,7 @@ fn size_and_align_of(cx: @CrateContext, t: ty::t) -> (uint, uint) {\n     (machine::llsize_of_real(cx, llty), machine::llalign_of_min(cx, llty))\n }\n \n-fn create_basic_type(cx: @CrateContext, t: ty::t, span: span) -> DIType{\n+fn create_basic_type(cx: @CrateContext, t: ty::t, _span: span) -> DIType{\n     let dcx = dbg_cx(cx);\n     let ty_id = ty::type_id(t);\n     match dcx.created_types.find(&ty_id) {\n@@ -255,7 +257,7 @@ fn create_basic_type(cx: @CrateContext, t: ty::t, span: span) -> DIType{\n     return ty_md;\n }\n \n-fn create_pointer_type(cx: @CrateContext, t: ty::t, span: span, pointee: DIType) -> DIType {\n+fn create_pointer_type(cx: @CrateContext, t: ty::t, _span: span, pointee: DIType) -> DIType {\n     let (size, align) = size_and_align_of(cx, t);\n     let name = ty_to_str(cx.tcx, t);\n     let ptr_md = do as_c_str(name) |name| { unsafe {\n@@ -291,7 +293,8 @@ impl StructContext {\n     }\n \n     fn add_member(&mut self, name: &str, line: uint, size: uint, align: uint, ty: DIType) {\n-        debug!(\"StructContext(%s)::add_member: %s, size=%u, align=%u\", self.name, name, size, align);\n+        debug!(\"StructContext(%s)::add_member: %s, size=%u, align=%u\",\n+                self.name, name, size, align);\n         let offset = roundup(self.total_size, align);\n         let mem_t = do as_c_str(name) |name| { unsafe {\n             llvm::LLVMDIBuilderCreateMemberType(dbg_cx(self.cx).builder,\n@@ -306,7 +309,8 @@ impl StructContext {\n     }\n \n     fn finalize(&self) -> DICompositeType {\n-        debug!(\"StructContext(%s)::finalize: total_size=%u, align=%u\", self.name, self.total_size, self.align);\n+        debug!(\"StructContext(%s)::finalize: total_size=%u, align=%u\",\n+                self.name, self.total_size, self.align);\n         let dcx = dbg_cx(self.cx);\n         let members_md = create_DIArray(dcx.builder, self.members);\n \n@@ -323,8 +327,8 @@ impl StructContext {\n }\n \n #[inline(always)]\n-fn roundup(x: uint, a: uint) -> uint { \n-    ((x + (a - 1)) / a) * a \n+fn roundup(x: uint, a: uint) -> uint {\n+    ((x + (a - 1)) / a) * a\n }\n \n fn create_struct(cx: @CrateContext, t: ty::t, fields: ~[ty::field], span: span) -> DICompositeType {\n@@ -353,7 +357,7 @@ fn voidptr(cx: @CrateContext) -> (DIDerivedType, uint, uint) {\n     return (vp, size, align);\n }\n \n-fn create_tuple(cx: @CrateContext, t: ty::t, elements: &[ty::t], span: span) -> DICompositeType {\n+fn create_tuple(cx: @CrateContext, _t: ty::t, elements: &[ty::t], span: span) -> DICompositeType {\n     let dcx = dbg_cx(cx);\n     let loc = span_start(cx, span);\n     let file_md = create_file(cx, loc.file.name);\n@@ -391,12 +395,10 @@ fn create_boxed_type(cx: @CrateContext, contents: ty::t,\n     return scx.finalize();\n }\n \n-fn create_fixed_vec(cx: @CrateContext, vec_t: ty::t, elem_t: ty::t,\n+fn create_fixed_vec(cx: @CrateContext, _vec_t: ty::t, elem_t: ty::t,\n                     len: uint, span: span) -> DIType {\n     let dcx = dbg_cx(cx);\n     let elem_ty_md = create_ty(cx, elem_t, span);\n-    let loc = span_start(cx, span);\n-    let file_md = create_file(cx, loc.file.name);\n     let (size, align) = size_and_align_of(cx, elem_t);\n \n     let subrange = unsafe {\n@@ -465,7 +467,7 @@ fn create_vec_slice(cx: @CrateContext, vec_t: ty::t, elem_t: ty::t, span: span)\n     return scx.finalize();\n }\n \n-fn create_fn_ty(cx: @CrateContext, fn_ty: ty::t, inputs: ~[ty::t], output: ty::t,\n+fn create_fn_ty(cx: @CrateContext, _fn_ty: ty::t, inputs: ~[ty::t], output: ty::t,\n                 span: span) -> DICompositeType {\n     let dcx = dbg_cx(cx);\n     let loc = span_start(cx, span);\n@@ -487,7 +489,7 @@ fn create_unimpl_ty(cx: @CrateContext, t: ty::t) -> DIType {\n     let name = ty_to_str(cx.tcx, t);\n     let md = do as_c_str(fmt!(\"NYI<%s>\", name)) |name| { unsafe {\n         llvm::LLVMDIBuilderCreateBasicType(\n-            dcx.builder, name, \n+            dcx.builder, name,\n             0_u64, 8_u64, DW_ATE_unsigned as c_uint)\n         }};\n     return md;\n@@ -621,7 +623,7 @@ pub fn create_local_var(bcx: block, local: @ast::local) -> DIVariable {\n         }\n     };\n \n-    set_debug_location(bcx, loc.line, loc.col.to_uint());\n+    set_debug_location(cx, create_block(bcx), loc.line, loc.col.to_uint());\n     unsafe {\n         let instr = llvm::LLVMDIBuilderInsertDeclareAtEnd(dcx.builder, llptr, var_md, bcx.llbb);\n         llvm::LLVMSetInstDebugLocation(trans::build::B(bcx), instr);\n@@ -633,7 +635,7 @@ pub fn create_local_var(bcx: block, local: @ast::local) -> DIVariable {\n pub fn create_arg(bcx: block, arg: ast::arg, span: span) -> Option<DIVariable> {\n     debug!(\"create_arg\");\n     if true {\n-        // FIXME(5848) create_arg disabled for now because \"node_id_type(bcx, arg.id)\" below blows\n+        // XXX create_arg disabled for now because \"node_id_type(bcx, arg.id)\" below blows\n         // up: \"error: internal compiler error: node_id_to_type: no type for node `arg (id=10)`\"\n         return None;\n     }\n@@ -661,12 +663,15 @@ pub fn create_arg(bcx: block, arg: ast::arg, span: span) -> Option<DIVariable> {\n                 llvm::LLVMDIBuilderCreateLocalVariable(dcx.builder,\n                     ArgVariableTag as u32, context, name,\n                     filemd, loc.line as c_uint, tymd, false, 0, 0)\n-                    // FIXME need to pass a real argument number\n+                    // XXX need to pass in a real argument number\n             }};\n \n             let llptr = fcx.llargs.get_copy(&arg.id);\n+            set_debug_location(cx, create_block(bcx), loc.line, loc.col.to_uint());\n             unsafe {\n-                llvm::LLVMDIBuilderInsertDeclareAtEnd(dcx.builder, llptr, mdnode, bcx.llbb);\n+                let instr = llvm::LLVMDIBuilderInsertDeclareAtEnd(\n+                        dcx.builder, llptr, mdnode, bcx.llbb);\n+                llvm::LLVMSetInstDebugLocation(trans::build::B(bcx), instr);\n             }\n             return Some(mdnode);\n         }\n@@ -676,33 +681,31 @@ pub fn create_arg(bcx: block, arg: ast::arg, span: span) -> Option<DIVariable> {\n     }\n }\n \n-fn set_debug_location(bcx: block, line: uint, col: uint) {\n-    let blockmd = create_block(bcx);\n-    let elems = ~[C_i32(line as i32), C_i32(col as i32), blockmd, ptr::null()];\n+fn set_debug_location(cx: @CrateContext, scope: DIScope, line: uint, col: uint) {\n+    let dcx = dbg_cx(cx);\n+    if dcx.curr_loc == (line, col) {\n+        return;\n+    }\n+    debug!(\"setting debug location to %u %u\", line, col);\n+    dcx.curr_loc = (line, col);\n+\n+    let elems = ~[C_i32(line as i32), C_i32(col as i32), scope, ptr::null()];\n     unsafe {\n-        let dbg_loc = llvm::LLVMMDNode(vec::raw::to_ptr(elems), elems.len() as libc::c_uint);\n-        llvm::LLVMSetCurrentDebugLocation(trans::build::B(bcx), dbg_loc);\n+        let dbg_loc = llvm::LLVMMDNodeInContext(\n+                dcx.llcontext, vec::raw::to_ptr(elems),\n+                elems.len() as libc::c_uint);\n+        llvm::LLVMSetCurrentDebugLocation(cx.builder.B, dbg_loc);\n     }\n }\n \n+/// Set current debug location at the beginning of the span\n pub fn update_source_pos(bcx: block, span: span) {\n     if !bcx.sess().opts.debuginfo || (*span.lo == 0 && *span.hi == 0) {\n         return;\n     }\n-\n     debug!(\"update_source_pos: %s\", bcx.sess().codemap.span_to_str(span));\n-\n-    let cx = bcx.ccx();\n-    let loc = span_start(cx, span);\n-    let dcx = dbg_cx(cx);\n-\n-    let loc = (loc.line, loc.col.to_uint());\n-    if  loc == dcx.curr_loc {\n-        return;\n-    }\n-    debug!(\"setting_location to %u %u\", loc.first(), loc.second());\n-    dcx.curr_loc = loc;\n-    set_debug_location(bcx, loc.first(), loc.second());\n+    let loc = span_start(bcx.ccx(), span);\n+    set_debug_location(bcx.ccx(), create_block(bcx), loc.line, loc.col.to_uint())\n }\n \n pub fn create_function(fcx: fn_ctxt) -> DISubprogram {"}]}