{"sha": "a379780fb667714bf2f8abeb93cebeaf3c8c3672", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNzk3ODBmYjY2NzcxNGJmMmY4YWJlYjkzY2ViZWFmM2M4YzM2NzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-29T03:54:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-29T03:54:12Z"}, "message": "Auto merge of #44811 - zilbuz:issue-44596/E0506, r=arielb1\n\nMIR-borrowck: Adding notes to E0506\n\nThis PR adds notes to the MIR borrowck error E0506.\n\nPart of #44596", "tree": {"sha": "825e927e718027996441578452ced5a15bd58e80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/825e927e718027996441578452ced5a15bd58e80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a379780fb667714bf2f8abeb93cebeaf3c8c3672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a379780fb667714bf2f8abeb93cebeaf3c8c3672", "html_url": "https://github.com/rust-lang/rust/commit/a379780fb667714bf2f8abeb93cebeaf3c8c3672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a379780fb667714bf2f8abeb93cebeaf3c8c3672/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46ef6208f8a3dd0629a9d6c592c2a980e52c9bee", "url": "https://api.github.com/repos/rust-lang/rust/commits/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee", "html_url": "https://github.com/rust-lang/rust/commit/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee"}, {"sha": "b683538ef233bf67fec1b8fc48778b13047e536c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b683538ef233bf67fec1b8fc48778b13047e536c", "html_url": "https://github.com/rust-lang/rust/commit/b683538ef233bf67fec1b8fc48778b13047e536c"}], "stats": {"total": 202, "additions": 162, "deletions": 40}, "files": [{"sha": "902e2de841f264d5128c724adb9c9e98eb18904c", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=a379780fb667714bf2f8abeb93cebeaf3c8c3672", "patch": "@@ -412,7 +412,7 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n                             WriteKind::StorageDead |\n                             WriteKind::Mutate =>\n                                 this.report_illegal_mutation_of_borrowed(\n-                                    context, lvalue_span),\n+                                    context, lvalue_span, borrow),\n                             WriteKind::Move =>\n                                 this.report_move_out_while_borrowed(\n                                     context, lvalue_span, borrow),\n@@ -987,10 +987,19 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n         err.emit();\n     }\n \n-    fn report_illegal_mutation_of_borrowed(&mut self, _: Context, (lvalue, span): (&Lvalue, Span)) {\n+    fn report_illegal_mutation_of_borrowed(&mut self,\n+                                           _: Context,\n+                                           (lvalue, span): (&Lvalue, Span),\n+                                           loan: &BorrowData) {\n+        let describe_lvalue = self.describe_lvalue(lvalue);\n+        let borrow_span = self.retrieve_borrow_span(loan);\n+\n         let mut err = self.tcx.cannot_assign_to_borrowed(\n             span, &self.describe_lvalue(lvalue), Origin::Mir);\n-        // FIXME: add span labels for borrow and assignment points\n+\n+        err.span_label(borrow_span, format!(\"borrow of `{}` occurs here\", describe_lvalue));\n+        err.span_label(span, format!(\"assignment to borrowed `{}` occurs here\", describe_lvalue));\n+\n         err.emit();\n     }\n "}, {"sha": "b2cf66849c75978b50931ef9e1bfc0949a332602", "filename": "src/test/compile-fail/E0506.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2FE0506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2FE0506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0506.rs?ref=a379780fb667714bf2f8abeb93cebeaf3c8c3672", "patch": "@@ -8,14 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n struct FancyNum {\n     num: u8,\n }\n \n fn main() {\n     let mut fancy_num = FancyNum { num: 5 };\n     let fancy_ref = &fancy_num;\n-    fancy_num = FancyNum { num: 6 }; //~ ERROR E0506\n+    fancy_num = FancyNum { num: 6 }; //[ast]~ ERROR E0506\n+                                     //[mir]~^ ERROR (Mir) [E0506]\n+                                     //[mir]~| ERROR (Ast) [E0506]\n \n     println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n }"}, {"sha": "e63de3a3bed7970700afab2c41a2377c3ee5897e", "filename": "src/test/compile-fail/borrowck/borrowck-assign-comp.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-comp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-comp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-comp.rs?ref=a379780fb667714bf2f8abeb93cebeaf3c8c3672", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n struct point { x: isize, y: isize }\n \n fn a() {\n@@ -17,7 +20,9 @@ fn a() {\n     // This assignment is illegal because the field x is not\n     // inherently mutable; since `p` was made immutable, `p.x` is now\n     // immutable.  Otherwise the type of &_q.x (&isize) would be wrong.\n-    p.x = 5; //~ ERROR cannot assign to `p.x`\n+    p.x = 5; //[ast]~ ERROR cannot assign to `p.x`\n+             //[mir]~^ ERROR cannot assign to `p.x` because it is borrowed (Ast)\n+             //[mir]~| ERROR cannot assign to `p.0` because it is borrowed (Mir)\n     q.x;\n }\n \n@@ -27,7 +32,9 @@ fn c() {\n \n     let mut p = point {x: 3, y: 4};\n     let q = &p.y;\n-    p = point {x: 5, y: 7};//~ ERROR cannot assign to `p`\n+    p = point {x: 5, y: 7};//[ast]~ ERROR cannot assign to `p`\n+                           //[mir]~^ ERROR cannot assign to `p` because it is borrowed (Ast)\n+                           //[mir]~| ERROR cannot assign to `p` because it is borrowed (Mir)\n     p.x; // silence warning\n     *q; // stretch loan\n }\n@@ -38,7 +45,9 @@ fn d() {\n \n     let mut p = point {x: 3, y: 4};\n     let q = &p.y;\n-    p.y = 5; //~ ERROR cannot assign to `p.y`\n+    p.y = 5; //[ast]~ ERROR cannot assign to `p.y`\n+             //[mir]~^ ERROR cannot assign to `p.y` because it is borrowed (Ast)\n+             //[mir]~| ERROR cannot assign to `p.1` because it is borrowed (Mir)\n     *q;\n }\n "}, {"sha": "6c003ec2d48b3057f7801caf38050d6d87eac312", "filename": "src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs?ref=a379780fb667714bf2f8abeb93cebeaf3c8c3672", "patch": "@@ -11,6 +11,10 @@\n // Tests that two closures cannot simultaneously have mutable\n // and immutable access to the variable. Issue #6801.\n \n+// ignore-tidy-linelength\n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n #![feature(box_syntax)]\n \n fn get(x: &isize) -> isize {\n@@ -24,37 +28,49 @@ fn set(x: &mut isize) {\n fn a() {\n     let mut x = 3;\n     let c1 = || x = 4;\n-    let c2 = || x * 5; //~ ERROR cannot borrow `x`\n+    let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n+                       //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable (Ast)\n+                       //[mir]~| ERROR cannot borrow `x` as immutable because it is also borrowed as mutable (Mir)\n }\n \n fn b() {\n     let mut x = 3;\n     let c1 = || set(&mut x);\n-    let c2 = || get(&x); //~ ERROR cannot borrow `x`\n+    let c2 = || get(&x); //[ast]~ ERROR cannot borrow `x`\n+                         //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable (Ast)\n+                         //[mir]~| ERROR cannot borrow `x` as immutable because it is also borrowed as mutable (Mir)\n }\n \n fn c() {\n     let mut x = 3;\n     let c1 = || set(&mut x);\n-    let c2 = || x * 5; //~ ERROR cannot borrow `x`\n+    let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n+                       //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable (Ast)\n+                       //[mir]~| ERROR cannot borrow `x` as immutable because it is also borrowed as mutable (Mir)\n }\n \n fn d() {\n     let mut x = 3;\n     let c2 = || x * 5;\n-    x = 5; //~ ERROR cannot assign\n+    x = 5; //[ast]~ ERROR cannot assign\n+           //[mir]~^ ERROR cannot assign to `x` because it is borrowed (Ast)\n+           //[mir]~| ERROR cannot assign to `x` because it is borrowed (Mir)\n }\n \n fn e() {\n     let mut x = 3;\n     let c1 = || get(&x);\n-    x = 5; //~ ERROR cannot assign\n+    x = 5; //[ast]~ ERROR cannot assign\n+           //[mir]~^ ERROR cannot assign to `x` because it is borrowed (Ast)\n+           //[mir]~| ERROR cannot assign to `x` because it is borrowed (Mir)\n }\n \n fn f() {\n     let mut x: Box<_> = box 3;\n     let c1 = || get(&*x);\n-    *x = 5; //~ ERROR cannot assign\n+    *x = 5; //[ast]~ ERROR cannot assign\n+            //[mir]~^ ERROR cannot assign to `*x` because it is borrowed (Ast)\n+            //[mir]~| ERROR cannot assign to `(*x)` because it is borrowed (Mir)\n }\n \n fn g() {\n@@ -64,7 +80,9 @@ fn g() {\n \n     let mut x: Box<_> = box Foo { f: box 3 };\n     let c1 = || get(&*x.f);\n-    *x.f = 5; //~ ERROR cannot assign to `*x.f`\n+    *x.f = 5; //[ast]~ ERROR cannot assign to `*x.f`\n+              //[mir]~^ ERROR cannot assign to `*x.f` because it is borrowed (Ast)\n+              //[mir]~| ERROR cannot assign to `(*(*x).0)` because it is borrowed (Mir)\n }\n \n fn h() {\n@@ -74,7 +92,9 @@ fn h() {\n \n     let mut x: Box<_> = box Foo { f: box 3 };\n     let c1 = || get(&*x.f);\n-    let c2 = || *x.f = 5; //~ ERROR cannot borrow `x` as mutable\n+    let c2 = || *x.f = 5; //[ast]~ ERROR cannot borrow `x` as mutable\n+                          //[mir]~^ ERROR cannot borrow `x` as mutable because it is also borrowed as immutable (Ast)\n+                          //[mir]~| ERROR cannot borrow `x` as mutable because it is also borrowed as immutable (Mir)\n }\n \n fn main() {"}, {"sha": "03b6b1d7324006edd8396cfedba10cfe0d1da439", "filename": "src/test/compile-fail/borrowck/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs?ref=a379780fb667714bf2f8abeb93cebeaf3c8c3672", "patch": "@@ -8,11 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n fn main() {\n     let mut _a = 3;\n     let _b = &mut _a;\n     {\n         let _c = &*_b;\n-        _a = 4; //~ ERROR cannot assign to `_a`\n+        _a = 4; //[ast]~ ERROR cannot assign to `_a`\n+                //[mir]~^ ERROR cannot assign to `_a` because it is borrowed (Ast)\n+                //[mir]~| ERROR cannot assign to `_a` because it is borrowed (Mir)\n     }\n }"}, {"sha": "0e8c003e408f6dcf9e8cd48bebe6ff03913b6f12", "filename": "src/test/compile-fail/borrowck/borrowck-lend-flow-match.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-lend-flow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-lend-flow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-lend-flow-match.rs?ref=a379780fb667714bf2f8abeb93cebeaf3c8c3672", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n \n@@ -22,7 +25,9 @@ fn separate_arms() {\n             x = Some(0);\n         }\n         Some(ref __isize) => {\n-            x = Some(1); //~ ERROR cannot assign\n+            x = Some(1); //[ast]~ ERROR cannot assign\n+                         //[mir]~^ ERROR cannot assign to `x` because it is borrowed (Ast)\n+                         //[mir]~| ERROR cannot assign to `x` because it is borrowed (Mir)\n         }\n     }\n     x.clone(); // just to prevent liveness warnings"}, {"sha": "9b20cd470f62bc1a783e45dc98f9c5ddcaba094d", "filename": "src/test/compile-fail/borrowck/borrowck-overloaded-index-and-overloaded-deref.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-and-overloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-and-overloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-and-overloaded-deref.rs?ref=a379780fb667714bf2f8abeb93cebeaf3c8c3672", "patch": "@@ -13,6 +13,9 @@\n // operator. The accounting of the all the implicit things going on\n // here is rather subtle. Issue #20232.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n use std::ops::{Deref, Index};\n \n struct MyVec<T> { x: T }\n@@ -39,7 +42,9 @@ fn main() {\n     let mut v = MyVec { x: MyPtr { x: Foo { f: 22 } } };\n     let i = &v[0].f;\n     v = MyVec { x: MyPtr { x: Foo { f: 23 } } };\n-    //~^ ERROR cannot assign to `v`\n+    //[ast]~^ ERROR cannot assign to `v`\n+    //[mir]~^^ ERROR cannot assign to `v` because it is borrowed (Ast)\n+    //[mir]~| ERROR cannot assign to `v` because it is borrowed (Mir)\n     read(*i);\n }\n "}, {"sha": "06bb98fa0ec10f95cae615a459424f6a69da702d", "filename": "src/test/compile-fail/borrowck/borrowck-pat-reassign-binding.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-pat-reassign-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-pat-reassign-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-pat-reassign-binding.rs?ref=a379780fb667714bf2f8abeb93cebeaf3c8c3672", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n fn main() {\n     let mut x: Option<isize> = None;\n     match x {\n@@ -17,7 +20,9 @@ fn main() {\n       }\n       Some(ref i) => {\n           // But on this branch, `i` is an outstanding borrow\n-          x = Some(*i+1); //~ ERROR cannot assign to `x`\n+          x = Some(*i+1); //[ast]~ ERROR cannot assign to `x`\n+                          //[mir]~^ ERROR cannot assign to `x` because it is borrowed (Ast)\n+                          //[mir]~| ERROR cannot assign to `x` because it is borrowed (Mir)\n       }\n     }\n     x.clone(); // just to prevent liveness warnings"}, {"sha": "73d323ea82cfb227eae2b822c79eebde43af3244", "filename": "src/test/compile-fail/borrowck/borrowck-union-borrow.rs", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-borrow.rs?ref=a379780fb667714bf2f8abeb93cebeaf3c8c3672", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n \n #[derive(Clone, Copy)]\n union U {\n@@ -30,11 +32,15 @@ fn main() {\n         }\n         {\n             let ra = &u.a;\n-            let rma = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n+            let rma = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n+                                //[mir]~^ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable (Ast)\n+                                //[mir]~| ERROR cannot borrow `u.0` as mutable because it is also borrowed as immutable (Mir)\n         }\n         {\n             let ra = &u.a;\n-            u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n+            u.a = 1; //[ast]~ ERROR cannot assign to `u.a` because it is borrowed\n+                     //[mir]~^ ERROR cannot assign to `u.a` because it is borrowed (Ast)\n+                     //[mir]~| ERROR cannot assign to `u.0` because it is borrowed (Mir)\n         }\n         // Imm borrow, other field\n         {\n@@ -47,45 +53,65 @@ fn main() {\n         }\n         {\n             let ra = &u.a;\n-            let rmb = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n+            let rmb = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n+                                //[mir]~^ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`) (Ast)\n+                                // FIXME Error for MIR (needs support for union)\n         }\n         {\n             let ra = &u.a;\n-            u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n+            u.b = 1; //[ast]~ ERROR cannot assign to `u.b` because it is borrowed\n+                     //[mir]~^ ERROR cannot assign to `u.b` because it is borrowed (Ast)\n+                     // FIXME Error for MIR (needs support for union)\n         }\n         // Mut borrow, same field\n         {\n             let rma = &mut u.a;\n-            let ra = &u.a; //~ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n+            let ra = &u.a; //[ast]~ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n+                         //[mir]~^ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable (Ast)\n+                         //[mir]~| ERROR cannot borrow `u.0` as immutable because it is also borrowed as mutable (Mir)\n         }\n         {\n             let ra = &mut u.a;\n-            let a = u.a; //~ ERROR cannot use `u.a` because it was mutably borrowed\n+            let a = u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n+                         //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed (Ast)\n+                         //[mir]~| ERROR cannot use `u.0` because it was mutably borrowed (Mir)\n         }\n         {\n             let rma = &mut u.a;\n-            let rma2 = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable more than once at a time\n+            let rma2 = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutable more than once at a time\n+                                 //[mir]~^ ERROR cannot borrow `u.a` as mutable more than once at a time (Ast)\n+                                 //[mir]~| ERROR cannot borrow `u.0` as mutable more than once at a time (Mir)\n         }\n         {\n             let rma = &mut u.a;\n-            u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n+            u.a = 1; //[ast]~ ERROR cannot assign to `u.a` because it is borrowed\n+                     //[mir]~^ ERROR cannot assign to `u.a` because it is borrowed (Ast)\n+                     //[mir]~| ERROR cannot assign to `u.0` because it is borrowed (Mir)\n         }\n         // Mut borrow, other field\n         {\n             let rma = &mut u.a;\n-            let rb = &u.b; //~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n+            let rb = &u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n+                           //[mir]~^ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`) (Ast)\n+                           // FIXME Error for MIR (needs support for union)\n         }\n         {\n             let ra = &mut u.a;\n-            let b = u.b; //~ ERROR cannot use `u.b` because it was mutably borrowed\n+            let b = u.b; //[ast]~ ERROR cannot use `u.b` because it was mutably borrowed\n+                         //[mir]~^ ERROR cannot use `u.b` because it was mutably borrowed (Ast)\n+                         // FIXME Error for MIR (needs support for union)\n         }\n         {\n             let rma = &mut u.a;\n-            let rmb2 = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time\n+            let rmb2 = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time\n+                                 //[mir]~^ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time (Ast)\n+                                 // FIXME Error for MIR (needs support for union)\n         }\n         {\n             let rma = &mut u.a;\n-            u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n+            u.b = 1; //[ast]~ ERROR cannot assign to `u.b` because it is borrowed\n+                     //[mir]~^ ERROR cannot assign to `u.b` because it is borrowed (Ast)\n+                     // FIXME Error for MIR (needs support for union)\n         }\n     }\n }"}, {"sha": "b5916584930b811749c2e47ea0a5d2c1bd44b202", "filename": "src/test/compile-fail/borrowck/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs?ref=a379780fb667714bf2f8abeb93cebeaf3c8c3672", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n #![feature(slice_patterns)]\n \n fn main() {\n@@ -17,7 +20,9 @@ fn main() {\n         _ => unreachable!()\n     };\n     println!(\"t[0]: {}\", t[0]);\n-    a[2] = 0; //~ ERROR cannot assign to `a[..]` because it is borrowed\n+    a[2] = 0; //[ast]~ ERROR cannot assign to `a[..]` because it is borrowed\n+              //[mir]~^ ERROR cannot assign to `a[..]` because it is borrowed (Ast)\n+              // FIXME Error for MIR (error missed)\n     println!(\"t[0]: {}\", t[0]);\n     t[0];\n }"}, {"sha": "43b771ce5dbedcfe0152d78384dc86b606e339f0", "filename": "src/test/compile-fail/coerce-overloaded-autoderef.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fcoerce-overloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fcoerce-overloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-overloaded-autoderef.rs?ref=a379780fb667714bf2f8abeb93cebeaf3c8c3672", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n fn borrow_mut<T>(x: &mut T) -> &mut T { x }\n fn borrow<T>(x: &T) -> &T { x }\n \n@@ -17,24 +20,32 @@ fn borrow2<T>(_: &mut T, _: &T) {}\n fn double_mut_borrow<T>(x: &mut Box<T>) {\n     let y = borrow_mut(x);\n     let z = borrow_mut(x);\n-    //~^ ERROR cannot borrow `*x` as mutable more than once at a time\n+    //[ast]~^ ERROR cannot borrow `*x` as mutable more than once at a time\n+    //[mir]~^^ ERROR cannot borrow `*x` as mutable more than once at a time (Ast)\n+    //[mir]~| ERROR cannot borrow `(*x)` as mutable more than once at a time (Mir)\n }\n \n fn double_imm_borrow(x: &mut Box<i32>) {\n     let y = borrow(x);\n     let z = borrow(x);\n     **x += 1;\n-    //~^ ERROR cannot assign to `**x` because it is borrowed\n+    //[ast]~^ ERROR cannot assign to `**x` because it is borrowed\n+    //[mir]~^^ ERROR cannot assign to `**x` because it is borrowed (Ast)\n+    //[mir]~| ERROR cannot assign to `(*(*x))` because it is borrowed (Mir)\n }\n \n fn double_mut_borrow2<T>(x: &mut Box<T>) {\n     borrow_mut2(x, x);\n-    //~^ ERROR cannot borrow `*x` as mutable more than once at a time\n+    //[ast]~^ ERROR cannot borrow `*x` as mutable more than once at a time\n+    //[mir]~^^ ERROR cannot borrow `*x` as mutable more than once at a time (Ast)\n+    //[mir]~| ERROR cannot borrow `(*x)` as mutable more than once at a time (Mir)\n }\n \n fn double_borrow2<T>(x: &mut Box<T>) {\n     borrow2(x, x);\n-    //~^ ERROR cannot borrow `*x` as immutable because it is also borrowed as mutable\n+    //[ast]~^ ERROR cannot borrow `*x` as immutable because it is also borrowed as mutable\n+    //[mir]~^^ ERROR cannot borrow `*x` as immutable because it is also borrowed as mutable (Ast)\n+    //[mir]~| ERROR cannot borrow `(*x)` as immutable because it is also borrowed as mutable (Mir)\n }\n \n pub fn main() {}"}, {"sha": "b6216ce05891569fa8e625b57e9860514e821b2c", "filename": "src/test/compile-fail/hrtb-identity-fn-borrows.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fhrtb-identity-fn-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fhrtb-identity-fn-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-identity-fn-borrows.rs?ref=a379780fb667714bf2f8abeb93cebeaf3c8c3672", "patch": "@@ -11,6 +11,9 @@\n // Test that the `'a` in the where clause correctly links the region\n // of the output to the region of the input.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n trait FnLike<A,R> {\n     fn call(&self, arg: A) -> R;\n }\n@@ -21,7 +24,9 @@ fn call_repeatedly<F>(f: F)\n     // Result is stored: cannot re-assign `x`\n     let mut x = 3;\n     let y = f.call(&x);\n-    x = 5; //~ ERROR cannot assign\n+    x = 5; //[ast]~ ERROR cannot assign\n+           //[mir]~^ ERROR cannot assign to `x` because it is borrowed (Ast)\n+           //[mir]~| ERROR cannot assign to `x` because it is borrowed (Mir)\n \n     // Result is not stored: can re-assign `x`\n     let mut x = 3;"}, {"sha": "3a84bd6565e8d10823fd69cf6298a1eb4b20cb49", "filename": "src/test/compile-fail/mut-pattern-internal-mutability.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs?ref=a379780fb667714bf2f8abeb93cebeaf3c8c3672", "patch": "@@ -8,17 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n fn main() {\n     let foo = &mut 1;\n \n     let &mut x = foo;\n-    x += 1; //~ ERROR re-assignment of immutable variable\n+    x += 1; //[ast]~ ERROR re-assignment of immutable variable\n+            //[mir]~^ ERROR re-assignment of immutable variable `x` (Ast)\n+            //[mir]~| ERROR re-assignment of immutable variable `x` (Mir)\n \n     // explicitly mut-ify internals\n     let &mut mut x = foo;\n     x += 1;\n \n     // check borrowing is detected successfully\n     let &mut ref x = foo;\n-    *foo += 1; //~ ERROR cannot assign to `*foo` because it is borrowed\n+    *foo += 1; //[ast]~ ERROR cannot assign to `*foo` because it is borrowed\n+               //[mir]~^ ERROR cannot assign to `*foo` because it is borrowed (Ast)\n+               //[mir]~| ERROR cannot assign to `(*foo)` because it is borrowed (Mir)\n }"}, {"sha": "91f5f048bc1c05676f45c21b8d3956066558f8b2", "filename": "src/test/compile-fail/regions-pattern-typing-issue-19997.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a379780fb667714bf2f8abeb93cebeaf3c8c3672/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19997.rs?ref=a379780fb667714bf2f8abeb93cebeaf3c8c3672", "patch": "@@ -8,13 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n fn main() {\n     let a0 = 0;\n     let f = 1;\n     let mut a1 = &a0;\n     match (&a1,) {\n         (&ref b0,) => {\n-            a1 = &f; //~ ERROR cannot assign\n+            a1 = &f; //[ast]~ ERROR cannot assign\n+                     //[mir]~^ ERROR cannot assign to `a1` because it is borrowed (Ast)\n+                     //[mir]~| ERROR cannot assign to `a1` because it is borrowed (Mir)\n         }\n     }\n }"}]}