{"sha": "8d0b64f16d4a477dcc194917b4c9e3d4c9459743", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMGI2NGYxNmQ0YTQ3N2RjYzE5NDkxN2I0YzllM2Q0Yzk0NTk3NDM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-11T08:07:03Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-11T09:27:00Z"}, "message": "Make `const unsafe fn` bodies `unsafe`", "tree": {"sha": "7ca32966e7942cda52a9326b8b1838352e173631", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ca32966e7942cda52a9326b8b1838352e173631"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d0b64f16d4a477dcc194917b4c9e3d4c9459743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d0b64f16d4a477dcc194917b4c9e3d4c9459743", "html_url": "https://github.com/rust-lang/rust/commit/8d0b64f16d4a477dcc194917b4c9e3d4c9459743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d0b64f16d4a477dcc194917b4c9e3d4c9459743/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c0116e13ffd4b84e6691cd3b1f09269c4e76728", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0116e13ffd4b84e6691cd3b1f09269c4e76728", "html_url": "https://github.com/rust-lang/rust/commit/4c0116e13ffd4b84e6691cd3b1f09269c4e76728"}], "stats": {"total": 164, "additions": 33, "deletions": 131}, "files": [{"sha": "01f3919199c3b213450e689f8d5775af2ee978a5", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d0b64f16d4a477dcc194917b4c9e3d4c9459743/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d0b64f16d4a477dcc194917b4c9e3d4c9459743/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=8d0b64f16d4a477dcc194917b4c9e3d4c9459743", "patch": "@@ -70,7 +70,7 @@ assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", st\n                 #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n                 #[inline]\n                 pub const unsafe fn new_unchecked(n: $Int) -> Self {\n-                    $Ty(unsafe { NonZero(n) })\n+                    $Ty(NonZero(n))\n                 }\n \n                 /// Create a non-zero if the given value is not zero."}, {"sha": "dce5ec113f79934b71152d584b04e2a842ee46fa", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d0b64f16d4a477dcc194917b4c9e3d4c9459743/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d0b64f16d4a477dcc194917b4c9e3d4c9459743/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=8d0b64f16d4a477dcc194917b4c9e3d4c9459743", "patch": "@@ -2928,7 +2928,7 @@ impl<T: ?Sized> NonNull<T> {\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n-        NonNull { pointer: unsafe { NonZero(ptr as _) } }\n+        NonNull { pointer: NonZero(ptr as _) }\n     }\n \n     /// Creates a new `NonNull` if `ptr` is non-null."}, {"sha": "06ba4f6df665eaf9cb0aa672ee969e9b7684456a", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d0b64f16d4a477dcc194917b4c9e3d4c9459743/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d0b64f16d4a477dcc194917b4c9e3d4c9459743/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=8d0b64f16d4a477dcc194917b4c9e3d4c9459743", "patch": "@@ -111,13 +111,6 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n \n             let safety = match fn_sig.unsafety {\n                 hir::Unsafety::Normal => Safety::Safe,\n-                hir::Unsafety::Unsafe if tcx.is_min_const_fn(fn_def_id) => {\n-                    // As specified in #55607, a `const unsafe fn` differs\n-                    // from an `unsafe fn` in that its body is still considered\n-                    // safe code by default.\n-                    assert!(implicit_argument.is_none());\n-                    Safety::Safe\n-                },\n                 hir::Unsafety::Unsafe => Safety::FnUnsafe,\n             };\n "}, {"sha": "3607869384077656bcc6591ceb6ee520d9f1bae4", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8d0b64f16d4a477dcc194917b4c9e3d4c9459743/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d0b64f16d4a477dcc194917b4c9e3d4c9459743/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=8d0b64f16d4a477dcc194917b4c9e3d4c9459743", "patch": "@@ -311,13 +311,9 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                            violations: &[UnsafetyViolation],\n                            unsafe_blocks: &[(ast::NodeId, bool)]) {\n         let safety = self.source_scope_local_data[self.source_info.scope].safety;\n-        let within_unsafe = match (safety, self.min_const_fn) {\n-            // Erring on the safe side, pun intended\n-            (Safety::BuiltinUnsafe, true) |\n-            // mir building encodes const fn bodies as safe, even for `const unsafe fn`\n-            (Safety::FnUnsafe, true) => bug!(\"const unsafe fn body treated as inherently unsafe\"),\n+        let within_unsafe = match safety {\n             // `unsafe` blocks are required in safe code\n-            (Safety::Safe, _) => {\n+            Safety::Safe => {\n                 for violation in violations {\n                     let mut violation = violation.clone();\n                     match violation.kind {\n@@ -342,9 +338,9 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                 }\n                 false\n             }\n-            // regular `unsafe` function bodies allow unsafe without additional unsafe blocks\n-            (Safety::BuiltinUnsafe, false) | (Safety::FnUnsafe, false) => true,\n-            (Safety::ExplicitUnsafe(node_id), _) => {\n+            // `unsafe` function bodies allow unsafe without additional unsafe blocks\n+            Safety::BuiltinUnsafe | Safety::FnUnsafe => true,\n+            Safety::ExplicitUnsafe(node_id) => {\n                 // mark unsafe block as used if there are any unsafe operations inside\n                 if !violations.is_empty() {\n                     self.used_unsafe.insert(node_id);\n@@ -616,21 +612,6 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     } in violations.iter() {\n         // Report an error.\n         match kind {\n-            UnsafetyViolationKind::General if tcx.is_min_const_fn(def_id) => {\n-                let mut err = tcx.sess.struct_span_err(\n-                    source_info.span,\n-                    &format!(\"{} is unsafe and unsafe operations \\\n-                            are not allowed in const fn\", description));\n-                err.span_label(source_info.span, &description.as_str()[..])\n-                    .note(&details.as_str()[..]);\n-                if tcx.fn_sig(def_id).unsafety() == hir::Unsafety::Unsafe {\n-                    err.note(\n-                        \"unsafe action within a `const unsafe fn` still require an `unsafe` \\\n-                        block in contrast to regular `unsafe fn`.\"\n-                    );\n-                }\n-                err.emit();\n-            }\n             UnsafetyViolationKind::GeneralAndConstFn |\n             UnsafetyViolationKind::General => {\n                 struct_span_err!("}, {"sha": "92e99c6228a9b853e471dc5d3257146e3808e758", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d0b64f16d4a477dcc194917b4c9e3d4c9459743/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d0b64f16d4a477dcc194917b4c9e3d4c9459743/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs?ref=8d0b64f16d4a477dcc194917b4c9e3d4c9459743", "patch": "@@ -28,13 +28,13 @@ const fn call_unsafe_generic_cell_const_fn() -> *const Vec<std::cell::Cell<u32>>\n     unsafe { ret_null_mut_ptr_no_unsafe::<Vec<std::cell::Cell<u32>>>() }\n     //~^ ERROR calls to `const unsafe fn` in const fns\n }\n-const unsafe fn deref_forbidden(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n+const unsafe fn deref_forbidden(x: *mut usize) -> usize { *x }\n //~^ dereferencing raw pointers in constant functions\n \n fn main() {}\n \n const unsafe fn no_union() {\n     union Foo { x: (), y: () }\n-    Foo { x: () }.y //~ ERROR not allowed in const fn\n+    Foo { x: () }.y\n     //~^ unions in const fn\n }"}, {"sha": "fafc89d1493685e1619b21729acec88de921ad7f", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.stderr", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8d0b64f16d4a477dcc194917b4c9e3d4c9459743/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d0b64f16d4a477dcc194917b4c9e3d4c9459743/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr?ref=8d0b64f16d4a477dcc194917b4c9e3d4c9459743", "patch": "@@ -1,15 +1,15 @@\n error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n   --> $DIR/min_const_fn_unsafe.rs:31:59\n    |\n-LL | const unsafe fn deref_forbidden(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n+LL | const unsafe fn deref_forbidden(x: *mut usize) -> usize { *x }\n    |                                                           ^^\n    |\n    = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n error[E0658]: unions in const fn are unstable (see issue #51909)\n   --> $DIR/min_const_fn_unsafe.rs:38:5\n    |\n-LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n+LL |     Foo { x: () }.y\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_fn_union)] to the crate attributes to enable\n@@ -38,24 +38,6 @@ LL |     unsafe { ret_null_mut_ptr_no_unsafe::<Vec<std::cell::Cell<u32>>>() }\n    |\n    = help: add #![feature(min_const_unsafe_fn)] to the crate attributes to enable\n \n-error: dereference of raw pointer is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe.rs:31:59\n-   |\n-LL | const unsafe fn deref_forbidden(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n-   |                                                           ^^ dereference of raw pointer\n-   |\n-   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n-   = note: unsafe action within a `const unsafe fn` still require an `unsafe` block in contrast to regular `unsafe fn`.\n-\n-error: access to union field is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe.rs:38:5\n-   |\n-LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n-   |     ^^^^^^^^^^^^^^^ access to union field\n-   |\n-   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n-   = note: unsafe action within a `const unsafe fn` still require an `unsafe` block in contrast to regular `unsafe fn`.\n-\n-error: aborting due to 7 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "67a48206126421f973e497d0c1ad2eae03dda04b", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_feature_gate.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8d0b64f16d4a477dcc194917b4c9e3d4c9459743/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d0b64f16d4a477dcc194917b4c9e3d4c9459743/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.rs?ref=8d0b64f16d4a477dcc194917b4c9e3d4c9459743", "patch": "@@ -34,29 +34,28 @@ const unsafe fn foo9_3() -> *const String {\n const unsafe fn foo10_3() -> *const Vec<std::cell::Cell<u32>> {\n     unsafe { foo6::<Vec<std::cell::Cell<u32>>>() }\n }\n-// not ok\n const unsafe fn foo8_2() -> i32 {\n-    foo4() //~ ERROR not allowed in const fn\n+    foo4()\n }\n const unsafe fn foo9_2() -> *const String {\n-    foo5::<String>() //~ ERROR not allowed in const fn\n+    foo5::<String>()\n }\n const unsafe fn foo10_2() -> *const Vec<std::cell::Cell<u32>> {\n-    foo6::<Vec<std::cell::Cell<u32>>>() //~ ERROR not allowed in const fn\n+    foo6::<Vec<std::cell::Cell<u32>>>()\n }\n-const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n+const unsafe fn foo30_3(x: *mut usize) -> usize { *x }\n //~^ dereferencing raw pointers in constant functions\n \n-const unsafe fn foo30_4(x: *mut usize) -> &'static usize { &*x } //~ ERROR not allowed in const fn\n+const unsafe fn foo30_4(x: *mut usize) -> &'static usize { &*x }\n //~^ dereferencing raw pointers in constant functions\n \n-const fn foo30_5(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ ERROR not allowed\n+const fn foo30_5(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ is unsafe\n //~^ dereferencing raw pointers in constant functions\n \n fn main() {}\n \n const unsafe fn no_union() {\n     union Foo { x: (), y: () }\n-    Foo { x: () }.y //~ ERROR not allowed in const fn\n+    Foo { x: () }.y\n     //~^ unions in const fn\n }"}, {"sha": "63bf9a53e509cc7a908b2813d23c5d92b00bbdd8", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_feature_gate.stderr", "status": "modified", "additions": 14, "deletions": 67, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/8d0b64f16d4a477dcc194917b4c9e3d4c9459743/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d0b64f16d4a477dcc194917b4c9e3d4c9459743/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.stderr?ref=8d0b64f16d4a477dcc194917b4c9e3d4c9459743", "patch": "@@ -1,97 +1,44 @@\n error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:47:51\n+  --> $DIR/min_const_fn_unsafe_feature_gate.rs:46:51\n    |\n-LL | const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n+LL | const unsafe fn foo30_3(x: *mut usize) -> usize { *x }\n    |                                                   ^^\n    |\n    = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:50:60\n+  --> $DIR/min_const_fn_unsafe_feature_gate.rs:49:60\n    |\n-LL | const unsafe fn foo30_4(x: *mut usize) -> &'static usize { &*x } //~ ERROR not allowed in const fn\n+LL | const unsafe fn foo30_4(x: *mut usize) -> &'static usize { &*x }\n    |                                                            ^^^\n    |\n    = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:53:62\n+  --> $DIR/min_const_fn_unsafe_feature_gate.rs:52:62\n    |\n-LL | const fn foo30_5(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ ERROR not allowed\n+LL | const fn foo30_5(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ is unsafe\n    |                                                              ^^^\n    |\n    = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n error[E0658]: unions in const fn are unstable (see issue #51909)\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:60:5\n+  --> $DIR/min_const_fn_unsafe_feature_gate.rs:59:5\n    |\n-LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n+LL |     Foo { x: () }.y\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_fn_union)] to the crate attributes to enable\n \n-error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:39:5\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/min_const_fn_unsafe_feature_gate.rs:52:62\n    |\n-LL |     foo4() //~ ERROR not allowed in const fn\n-   |     ^^^^^^ call to unsafe function\n-   |\n-   = note: consult the function's documentation for information on how to avoid undefined behavior\n-   = note: unsafe action within a `const unsafe fn` still require an `unsafe` block in contrast to regular `unsafe fn`.\n-\n-error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:42:5\n-   |\n-LL |     foo5::<String>() //~ ERROR not allowed in const fn\n-   |     ^^^^^^^^^^^^^^^^ call to unsafe function\n-   |\n-   = note: consult the function's documentation for information on how to avoid undefined behavior\n-   = note: unsafe action within a `const unsafe fn` still require an `unsafe` block in contrast to regular `unsafe fn`.\n-\n-error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:45:5\n-   |\n-LL |     foo6::<Vec<std::cell::Cell<u32>>>() //~ ERROR not allowed in const fn\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n-   |\n-   = note: consult the function's documentation for information on how to avoid undefined behavior\n-   = note: unsafe action within a `const unsafe fn` still require an `unsafe` block in contrast to regular `unsafe fn`.\n-\n-error: dereference of raw pointer is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:47:51\n-   |\n-LL | const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n-   |                                                   ^^ dereference of raw pointer\n-   |\n-   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n-   = note: unsafe action within a `const unsafe fn` still require an `unsafe` block in contrast to regular `unsafe fn`.\n-\n-error: dereference of raw pointer is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:50:60\n-   |\n-LL | const unsafe fn foo30_4(x: *mut usize) -> &'static usize { &*x } //~ ERROR not allowed in const fn\n-   |                                                            ^^^ dereference of raw pointer\n-   |\n-   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n-   = note: unsafe action within a `const unsafe fn` still require an `unsafe` block in contrast to regular `unsafe fn`.\n-\n-error: dereference of raw pointer is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:53:62\n-   |\n-LL | const fn foo30_5(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ ERROR not allowed\n+LL | const fn foo30_5(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ is unsafe\n    |                                                              ^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n-error: access to union field is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:60:5\n-   |\n-LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n-   |     ^^^^^^^^^^^^^^^ access to union field\n-   |\n-   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n-   = note: unsafe action within a `const unsafe fn` still require an `unsafe` block in contrast to regular `unsafe fn`.\n-\n-error: aborting due to 11 previous errors\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors occurred: E0133, E0658.\n+For more information about an error, try `rustc --explain E0133`."}]}