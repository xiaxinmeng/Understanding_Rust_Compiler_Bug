{"sha": "5ad42b3ae97fd363b1a13c43305995fe139fc8ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZDQyYjNhZTk3ZmQzNjNiMWExM2M0MzMwNTk5NWZlMTM5ZmM4ZWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-13T20:41:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-13T20:41:49Z"}, "message": "auto merge of #14052 : dylanbraithwaite/rust/char-fns-for-strbuf, r=alexcrichton\n\nAdded functions pop_char and shift_char to StrBuf along with unit tests, using the same test cases as push_char.", "tree": {"sha": "0db388e1a37864d6d15629157afbdd5e667ee0e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0db388e1a37864d6d15629157afbdd5e667ee0e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ad42b3ae97fd363b1a13c43305995fe139fc8ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ad42b3ae97fd363b1a13c43305995fe139fc8ef", "html_url": "https://github.com/rust-lang/rust/commit/5ad42b3ae97fd363b1a13c43305995fe139fc8ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ad42b3ae97fd363b1a13c43305995fe139fc8ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4537f13a877850d8a390acc2e3a80964532505b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4537f13a877850d8a390acc2e3a80964532505b3", "html_url": "https://github.com/rust-lang/rust/commit/4537f13a877850d8a390acc2e3a80964532505b3"}, {"sha": "1ca6b2cc664610dbbe9de07864d2016ead422460", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ca6b2cc664610dbbe9de07864d2016ead422460", "html_url": "https://github.com/rust-lang/rust/commit/1ca6b2cc664610dbbe9de07864d2016ead422460"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "575de89fae2ac121b88c375544649334b54476b9", "filename": "src/libstd/strbuf.rs", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/5ad42b3ae97fd363b1a13c43305995fe139fc8ef/src%2Flibstd%2Fstrbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad42b3ae97fd363b1a13c43305995fe139fc8ef/src%2Flibstd%2Fstrbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstrbuf.rs?ref=5ad42b3ae97fd363b1a13c43305995fe139fc8ef", "patch": "@@ -19,8 +19,9 @@ use iter::{Extendable, FromIterator, Iterator, range};\n use mem;\n use option::{None, Option, Some};\n use ptr::RawPtr;\n+use ptr;\n use slice::{OwnedVector, Vector, CloneableVector};\n-use str::{OwnedStr, Str, StrSlice, StrAllocating};\n+use str::{CharRange, OwnedStr, Str, StrSlice, StrAllocating};\n use str;\n use vec::Vec;\n \n@@ -215,19 +216,49 @@ impl StrBuf {\n         Some(byte)\n     }\n \n+    /// Removes the last character from the string buffer and returns it. Returns `None` if this\n+    /// string buffer is empty.\n+    #[inline]\n+    pub fn pop_char(&mut self) -> Option<char> {\n+        let len = self.len();\n+        if len == 0 {\n+            return None\n+        }\n+\n+        let CharRange {ch, next} = self.as_slice().char_range_at_reverse(len);\n+        unsafe {\n+            self.vec.set_len(next);\n+        }\n+        Some(ch)\n+    }\n+\n     /// Removes the first byte from the string buffer and returns it. Returns `None` if this string\n     /// buffer is empty.\n     ///\n     /// The caller must preserve the valid UTF-8 property.\n     pub unsafe fn shift_byte(&mut self) -> Option<u8> {\n+        self.vec.shift()\n+    }\n+\n+    /// Removes the first character from the string buffer and returns it. Returns `None` if this\n+    /// string buffer is empty.\n+    ///\n+    /// # Warning\n+    ///\n+    /// This is a O(n) operation as it requires copying every element in the buffer.\n+    pub fn shift_char (&mut self) -> Option<char> {\n         let len = self.len();\n         if len == 0 {\n             return None\n         }\n \n-        let byte = self.as_slice()[0];\n-        *self = self.as_slice().slice(1, len).into_strbuf();\n-        Some(byte)\n+        let CharRange {ch, next} = self.as_slice().char_range_at(0);\n+        let new_len = len - next;\n+        unsafe {\n+            ptr::copy_memory(self.vec.as_mut_ptr(), self.vec.as_ptr().offset(next as int), new_len);\n+            self.vec.set_len(new_len);\n+        }\n+        Some(ch)\n     }\n \n     /// Views the string buffer as a mutable sequence of bytes.\n@@ -357,6 +388,28 @@ mod tests {\n         assert_eq!(data.as_slice(), \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eb\u00a2\u20ac\ud852\udf62\");\n     }\n \n+    #[test]\n+    fn test_pop_char() {\n+        let mut data = StrBuf::from_str(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eb\u00a2\u20ac\ud852\udf62\");\n+        assert_eq!(data.pop_char().unwrap(), '\ud852\udf62'); // 4 bytes\n+        assert_eq!(data.pop_char().unwrap(), '\u20ac'); // 3 bytes\n+        assert_eq!(data.pop_char().unwrap(), '\u00a2'); // 2 bytes\n+        assert_eq!(data.pop_char().unwrap(), 'b'); // 1 bytes\n+        assert_eq!(data.pop_char().unwrap(), '\u534e');\n+        assert_eq!(data.as_slice(), \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\");\n+    }\n+\n+    #[test]\n+    fn test_shift_char() {\n+        let mut data = StrBuf::from_str(\"\ud852\udf62\u20ac\u00a2b\u534e\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\");\n+        assert_eq!(data.shift_char().unwrap(), '\ud852\udf62'); // 4 bytes\n+        assert_eq!(data.shift_char().unwrap(), '\u20ac'); // 3 bytes\n+        assert_eq!(data.shift_char().unwrap(), '\u00a2'); // 2 bytes\n+        assert_eq!(data.shift_char().unwrap(), 'b'); // 1 bytes\n+        assert_eq!(data.shift_char().unwrap(), '\u534e');\n+        assert_eq!(data.as_slice(), \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\");\n+    }\n+\n     #[test]\n     fn test_str_truncate() {\n         let mut s = StrBuf::from_str(\"12345\");"}]}