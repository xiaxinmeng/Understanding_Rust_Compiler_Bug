{"sha": "8ab2f880d00bea8822f78289bbd3d1ae59990121", "node_id": "C_kwDOAAsO6NoAKDhhYjJmODgwZDAwYmVhODgyMmY3ODI4OWJiZDNkMWFlNTk5OTAxMjE", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-05T13:13:13Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-19T14:23:19Z"}, "message": "Move `AsUnderscore` into `Casts` lint pass", "tree": {"sha": "e861b9eac46ba3aa304ad949f1a6088da539eeda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e861b9eac46ba3aa304ad949f1a6088da539eeda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ab2f880d00bea8822f78289bbd3d1ae59990121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab2f880d00bea8822f78289bbd3d1ae59990121", "html_url": "https://github.com/rust-lang/rust/commit/8ab2f880d00bea8822f78289bbd3d1ae59990121", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ab2f880d00bea8822f78289bbd3d1ae59990121/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "868dba9f65a40ffd406baba9ca301b4dc33ff641", "url": "https://api.github.com/repos/rust-lang/rust/commits/868dba9f65a40ffd406baba9ca301b4dc33ff641", "html_url": "https://github.com/rust-lang/rust/commit/868dba9f65a40ffd406baba9ca301b4dc33ff641"}], "stats": {"total": 143, "additions": 62, "deletions": 81}, "files": [{"sha": "5b4b2c631c89cd97df28d7e475934b38f19bbb18", "filename": "clippy_lints/src/as_underscore.rs", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Fas_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Fas_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fas_underscore.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -1,74 +0,0 @@\n-use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_then};\n-use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, TyKind};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Check for the usage of `as _` conversion using inferred type.\n-    ///\n-    /// ### Why is this bad?\n-    /// The conversion might include lossy conversion and dangerous cast that might go\n-    /// undetected due to the type being inferred.\n-    ///\n-    /// The lint is allowed by default as using `_` is less wordy than always specifying the type.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// fn foo(n: usize) {}\n-    /// let n: u16 = 256;\n-    /// foo(n as _);\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// fn foo(n: usize) {}\n-    /// let n: u16 = 256;\n-    /// foo(n as usize);\n-    /// ```\n-    #[clippy::version = \"1.63.0\"]\n-    pub AS_UNDERSCORE,\n-    restriction,\n-    \"detects `as _` conversion\"\n-}\n-declare_lint_pass!(AsUnderscore => [AS_UNDERSCORE]);\n-\n-impl<'tcx> LateLintPass<'tcx> for AsUnderscore {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'tcx>) {\n-        if in_external_macro(cx.sess(), expr.span) {\n-            return;\n-        }\n-\n-        if let ExprKind::Cast(_, ty) = expr.kind && let TyKind::Infer = ty.kind {\n-\n-            let ty_resolved = cx.typeck_results().expr_ty(expr);\n-            if let ty::Error(_) = ty_resolved.kind() {\n-                span_lint_and_help(\n-                    cx,\n-                AS_UNDERSCORE,\n-                expr.span,\n-                \"using `as _` conversion\",\n-                None,\n-                \"consider giving the type explicitly\",\n-                );\n-            } else {\n-            span_lint_and_then(\n-                cx,\n-                AS_UNDERSCORE,\n-                expr.span,\n-                \"using `as _` conversion\",\n-                |diag| {\n-                    diag.span_suggestion(\n-                        ty.span,\n-                        \"consider giving the type explicitly\",\n-                        ty_resolved,\n-                        Applicability::MachineApplicable,\n-                    );\n-            }\n-            );\n-        }\n-        }\n-    }\n-}"}, {"sha": "56e894c6261eeb27884db1f098eea1e145aca589", "filename": "clippy_lints/src/casts/as_underscore.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8ab2f880d00bea8822f78289bbd3d1ae59990121/clippy_lints%2Fsrc%2Fcasts%2Fas_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab2f880d00bea8822f78289bbd3d1ae59990121/clippy_lints%2Fsrc%2Fcasts%2Fas_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fas_underscore.rs?ref=8ab2f880d00bea8822f78289bbd3d1ae59990121", "patch": "@@ -0,0 +1,25 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, Ty, TyKind};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+\n+use super::AS_UNDERSCORE;\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, ty: &'tcx Ty<'_>) {\n+    if matches!(ty.kind, TyKind::Infer) {\n+        span_lint_and_then(cx, AS_UNDERSCORE, expr.span, \"using `as _` conversion\", |diag| {\n+            let ty_resolved = cx.typeck_results().expr_ty(expr);\n+            if let ty::Error(_) = ty_resolved.kind() {\n+                diag.help(\"consider giving the type explicitly\");\n+            } else {\n+                diag.span_suggestion(\n+                    ty.span,\n+                    \"consider giving the type explicitly\",\n+                    ty_resolved,\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        });\n+    }\n+}"}, {"sha": "01057d9f67c8c8393ca0a4ab3d8dd3a9e51b5e4b", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8ab2f880d00bea8822f78289bbd3d1ae59990121/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab2f880d00bea8822f78289bbd3d1ae59990121/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=8ab2f880d00bea8822f78289bbd3d1ae59990121", "patch": "@@ -1,3 +1,4 @@\n+mod as_underscore;\n mod cast_abs_to_unsigned;\n mod cast_enum_constructor;\n mod cast_lossless;\n@@ -506,6 +507,34 @@ declare_clippy_lint! {\n     \"casting the result of `abs()` to an unsigned integer can panic\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Check for the usage of `as _` conversion using inferred type.\n+    ///\n+    /// ### Why is this bad?\n+    /// The conversion might include lossy conversion and dangerous cast that might go\n+    /// undetected due to the type being inferred.\n+    ///\n+    /// The lint is allowed by default as using `_` is less wordy than always specifying the type.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// fn foo(n: usize) {}\n+    /// let n: u16 = 256;\n+    /// foo(n as _);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn foo(n: usize) {}\n+    /// let n: u16 = 256;\n+    /// foo(n as usize);\n+    /// ```\n+    #[clippy::version = \"1.63.0\"]\n+    pub AS_UNDERSCORE,\n+    restriction,\n+    \"detects `as _` conversion\"\n+}\n+\n pub struct Casts {\n     msrv: Option<RustcVersion>,\n }\n@@ -534,7 +563,8 @@ impl_lint_pass!(Casts => [\n     PTR_AS_PTR,\n     CAST_ENUM_TRUNCATION,\n     CAST_ENUM_CONSTRUCTOR,\n-    CAST_ABS_TO_UNSIGNED\n+    CAST_ABS_TO_UNSIGNED,\n+    AS_UNDERSCORE,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Casts {\n@@ -547,8 +577,8 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             return;\n         }\n \n-        if let ExprKind::Cast(cast_expr, cast_to) = expr.kind {\n-            if is_hir_ty_cfg_dependant(cx, cast_to) {\n+        if let ExprKind::Cast(cast_expr, cast_to_hir) = expr.kind {\n+            if is_hir_ty_cfg_dependant(cx, cast_to_hir) {\n                 return;\n             }\n             let (cast_from, cast_to) = (\n@@ -575,6 +605,8 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                 cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to, self.msrv);\n                 cast_enum_constructor::check(cx, expr, cast_expr, cast_from);\n             }\n+\n+            as_underscore::check(cx, expr, cast_to_hir);\n         }\n \n         cast_ref_to_mut::check(cx, expr);"}, {"sha": "e7665c3fa1d5df45b166e4cf9f92b7909cf385d0", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab2f880d00bea8822f78289bbd3d1ae59990121/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab2f880d00bea8822f78289bbd3d1ae59990121/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=8ab2f880d00bea8822f78289bbd3d1ae59990121", "patch": "@@ -38,7 +38,6 @@ store.register_lints(&[\n     almost_complete_letter_range::ALMOST_COMPLETE_LETTER_RANGE,\n     approx_const::APPROX_CONSTANT,\n     as_conversions::AS_CONVERSIONS,\n-    as_underscore::AS_UNDERSCORE,\n     asm_syntax::INLINE_ASM_X86_ATT_SYNTAX,\n     asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX,\n     assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n@@ -69,6 +68,7 @@ store.register_lints(&[\n     cargo::REDUNDANT_FEATURE_NAMES,\n     cargo::WILDCARD_DEPENDENCIES,\n     case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n+    casts::AS_UNDERSCORE,\n     casts::CAST_ABS_TO_UNSIGNED,\n     casts::CAST_ENUM_CONSTRUCTOR,\n     casts::CAST_ENUM_TRUNCATION,"}, {"sha": "890ae2792abf88bb3a2eb1af4df627f0c4ff2f6e", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab2f880d00bea8822f78289bbd3d1ae59990121/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab2f880d00bea8822f78289bbd3d1ae59990121/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=8ab2f880d00bea8822f78289bbd3d1ae59990121", "patch": "@@ -4,11 +4,11 @@\n \n store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n     LintId::of(as_conversions::AS_CONVERSIONS),\n-    LintId::of(as_underscore::AS_UNDERSCORE),\n     LintId::of(asm_syntax::INLINE_ASM_X86_ATT_SYNTAX),\n     LintId::of(asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX),\n     LintId::of(assertions_on_result_states::ASSERTIONS_ON_RESULT_STATES),\n     LintId::of(attrs::ALLOW_ATTRIBUTES_WITHOUT_REASON),\n+    LintId::of(casts::AS_UNDERSCORE),\n     LintId::of(casts::FN_TO_NUMERIC_CAST_ANY),\n     LintId::of(create_dir::CREATE_DIR),\n     LintId::of(dbg_macro::DBG_MACRO),"}, {"sha": "d32a2fad493a13b3e699969ef4ca9a649bdbbd5f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab2f880d00bea8822f78289bbd3d1ae59990121/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab2f880d00bea8822f78289bbd3d1ae59990121/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8ab2f880d00bea8822f78289bbd3d1ae59990121", "patch": "@@ -170,7 +170,6 @@ mod renamed_lints;\n mod almost_complete_letter_range;\n mod approx_const;\n mod as_conversions;\n-mod as_underscore;\n mod asm_syntax;\n mod assertions_on_constants;\n mod assertions_on_result_states;\n@@ -923,7 +922,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(move || Box::new(almost_complete_letter_range::AlmostCompleteLetterRange::new(msrv)));\n     store.register_late_pass(|| Box::new(swap_ptr_to_ref::SwapPtrToRef));\n     store.register_late_pass(|| Box::new(mismatching_type_param_order::TypeParamMismatch));\n-    store.register_late_pass(|| Box::new(as_underscore::AsUnderscore));\n     store.register_late_pass(|| Box::new(read_zero_byte_vec::ReadZeroByteVec));\n     store.register_late_pass(|| Box::new(default_instead_of_iter_empty::DefaultIterEmpty));\n     store.register_late_pass(move || Box::new(manual_rem_euclid::ManualRemEuclid::new(msrv)));"}]}