{"sha": "e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NzdlNDliOWY1YmEwZjFlOWMzZTY2ZDY3ZWY3Y2Y4MmRjMTFjMGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-18T08:58:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-18T08:58:45Z"}, "message": "Auto merge of #60058 - varkor:const-generics-ty-refactor, r=cramertj\n\nMake const parameters enforce no variance constraints\n\nFixes https://github.com/rust-lang/rust/issues/60047. Also includes some minor const refactoring for convenience.", "tree": {"sha": "19329fef81546f2905921c31c00da4a825d34fc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19329fef81546f2905921c31c00da4a825d34fc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e", "html_url": "https://github.com/rust-lang/rust/commit/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be1dbaffed6858ba176cd69e298c1be365d8f801", "url": "https://api.github.com/repos/rust-lang/rust/commits/be1dbaffed6858ba176cd69e298c1be365d8f801", "html_url": "https://github.com/rust-lang/rust/commit/be1dbaffed6858ba176cd69e298c1be365d8f801"}, {"sha": "318a10e9067408b0010804fe80c9dc99f3ad8c65", "url": "https://api.github.com/repos/rust-lang/rust/commits/318a10e9067408b0010804fe80c9dc99f3ad8c65", "html_url": "https://github.com/rust-lang/rust/commit/318a10e9067408b0010804fe80c9dc99f3ad8c65"}], "stats": {"total": 85, "additions": 47, "deletions": 38}, "files": [{"sha": "56fafacd722be19da753720e98683c4f4e0c8651", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e", "patch": "@@ -934,12 +934,10 @@ impl<'a, 'gcx, 'tcx> Generics {\n     }\n \n     pub fn requires_monomorphization(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n-        for param in &self.params {\n-            match param.kind {\n-                GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => return true,\n-                GenericParamDefKind::Lifetime => {}\n-            }\n+        if self.own_requires_monomorphization() {\n+            return true;\n         }\n+\n         if let Some(parent_def_id) = self.parent {\n             let parent = tcx.generics_of(parent_def_id);\n             parent.requires_monomorphization(tcx)\n@@ -948,6 +946,16 @@ impl<'a, 'gcx, 'tcx> Generics {\n         }\n     }\n \n+    pub fn own_requires_monomorphization(&self) -> bool {\n+        for param in &self.params {\n+            match param.kind {\n+                GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => return true,\n+                GenericParamDefKind::Lifetime => {}\n+            }\n+        }\n+        false\n+    }\n+\n     pub fn region_param(&'tcx self,\n                         param: &EarlyBoundRegion,\n                         tcx: TyCtxt<'a, 'gcx, 'tcx>)"}, {"sha": "78696da0470e741edcb7ff74c2faf56641c1b48d", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e", "patch": "@@ -480,6 +480,8 @@ fn check_type_length_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let type_length_limit = *tcx.sess.type_length_limit.get();\n     // We include the const length in the type length, as it's better\n     // to be overly conservative.\n+    // FIXME(const_generics): we should instead uniformly walk through `substs`,\n+    // ignoring lifetimes.\n     if type_length + const_length > type_length_limit {\n         // The instance name is already known to be too long for rustc.\n         // Show only the first and last 32 characters to avoid blasting\n@@ -1135,8 +1137,7 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         continue;\n                     }\n \n-                    let counts = tcx.generics_of(method.def_id).own_counts();\n-                    if counts.types + counts.consts != 0 {\n+                    if tcx.generics_of(method.def_id).own_requires_monomorphization() {\n                         continue;\n                     }\n "}, {"sha": "c9cccb2b03ac4ec9dad19cdd7e8c3d5af9a60cd1", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e", "patch": "@@ -560,8 +560,7 @@ fn unsafe_derive_on_repr_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: D\n \n     // FIXME: when we make this a hard error, this should have its\n     // own error code.\n-    let counts = tcx.generics_of(def_id).own_counts();\n-    let message = if counts.types + counts.consts != 0 {\n+    let message = if tcx.generics_of(def_id).own_requires_monomorphization() {\n         \"#[derive] can't be used on a #[repr(packed)] struct with \\\n          type or const parameters (error E0133)\".to_string()\n     } else {"}, {"sha": "644ba5981a63d692a94af924351b8d89b43a28c0", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e", "patch": "@@ -4,7 +4,6 @@\n //! We walk the set of items and, for each member, generate new constraints.\n \n use hir::def_id::DefId;\n-use rustc::mir::interpret::ConstValue;\n use rustc::ty::subst::{SubstsRef, UnpackedKind};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::hir;\n@@ -239,8 +238,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 UnpackedKind::Type(ty) => {\n                     self.add_constraints_from_ty(current, ty, variance_i)\n                 }\n-                UnpackedKind::Const(ct) => {\n-                    self.add_constraints_from_const(current, ct, variance_i)\n+                UnpackedKind::Const(_) => {\n+                    // Consts impose no constraints.\n                 }\n             }\n         }\n@@ -275,9 +274,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_mt(current, &ty::TypeAndMut { ty, mutbl }, variance);\n             }\n \n-            ty::Array(typ, len) => {\n+            ty::Array(typ, _) => {\n                 self.add_constraints_from_ty(current, typ, variance);\n-                self.add_constraints_from_const(current, len, variance);\n             }\n \n             ty::Slice(typ) => {\n@@ -395,8 +393,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 UnpackedKind::Type(ty) => {\n                     self.add_constraints_from_ty(current, ty, variance_i)\n                 }\n-                UnpackedKind::Const(ct) => {\n-                    self.add_constraints_from_const(current, ct, variance_i)\n+                UnpackedKind::Const(_) => {\n+                    // Consts impose no constraints.\n                 }\n             }\n         }\n@@ -449,24 +447,6 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n         }\n     }\n \n-    fn add_constraints_from_const(\n-        &mut self,\n-        current: &CurrentItem,\n-        ct: &ty::Const<'tcx>,\n-        variance: VarianceTermPtr<'a>\n-    ) {\n-        debug!(\n-            \"add_constraints_from_const(ct={:?}, variance={:?})\",\n-            ct,\n-            variance\n-        );\n-\n-        self.add_constraints_from_ty(current, ct.ty, variance);\n-        if let ConstValue::Param(ref data) = ct.val {\n-            self.add_constraint(current, data.index, variance);\n-        }\n-    }\n-\n     /// Adds constraints appropriate for a mutability-type pair\n     /// appearing in a context with ambient variance `variance`\n     fn add_constraints_from_mt(&mut self,"}, {"sha": "b783bbfad16e9e5a5e2dda74f26a2a645edde87c", "filename": "src/librustc_typeck/variance/solve.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs?ref=e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e", "patch": "@@ -85,12 +85,19 @@ impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n         self.terms_cx.inferred_starts.iter().map(|(&id, &InferredIndex(start))| {\n             let def_id = tcx.hir().local_def_id_from_hir_id(id);\n             let generics = tcx.generics_of(def_id);\n+            let count = generics.count();\n \n-            let mut variances = solutions[start..start+generics.count()].to_vec();\n-\n+            let mut variances = solutions[start..(start + count)].to_vec();\n             debug!(\"id={} variances={:?}\", id, variances);\n \n-            // Functions can have unused type parameters: make those invariant.\n+            // Const parameters are always invariant.\n+            for (idx, param) in generics.params.iter().enumerate() {\n+                if let ty::GenericParamDefKind::Const = param.kind {\n+                    variances[idx] = ty::Invariant;\n+                }\n+            }\n+\n+            // Functions are permitted to have unused generic parameters: make those invariant.\n             if let ty::FnDef(..) = tcx.type_of(def_id).sty {\n                 for variance in &mut variances {\n                     if *variance == ty::Bivariant {"}, {"sha": "efb221b92324e475f5a815216eebcec08f2346f8", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e", "patch": "@@ -119,7 +119,7 @@ impl<'a, 'tcx> TermsContext<'a, 'tcx> {\n         // for a particular item are assigned continuous indices.\n \n         let arena = self.arena;\n-        self.inferred_terms.extend((start..start+count).map(|i| {\n+        self.inferred_terms.extend((start..(start + count)).map(|i| {\n             &*arena.alloc(InferredTerm(InferredIndex(i)))\n         }));\n     }"}, {"sha": "ee98e5eb4a01fd070c385d68646b2c921ab09eae", "filename": "src/test/ui/const-generics/unused-const-param.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs?ref=e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e", "patch": "@@ -0,0 +1,8 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct A<const N: usize>; // ok\n+\n+fn main() {}"}, {"sha": "0e7acfb673d1d23ddcd137fde8206dc991ca27fd", "filename": "src/test/ui/const-generics/unused-const-param.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.stderr?ref=e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/unused-const-param.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+"}]}