{"sha": "8ac17731eba236648e86b4e760d6c93addf19fa0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYzE3NzMxZWJhMjM2NjQ4ZTg2YjRlNzYwZDZjOTNhZGRmMTlmYTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-17T07:22:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-17T07:22:05Z"}, "message": "auto merge of #8531 : brson/rust/test-waitpid-workaround, r=graydon\n\n...er\r\n\r\nI believe the calls to waitpid are interacting badly with the message passing that goes\r\non between schedulers and causing us to have very little parallelism in\r\nthe test suite. I don't fully understand the sequence of events that causes\r\nthe problem here but clearly blocking on waitpid is something that a\r\nwell-behaved task should not be doing.\r\n\r\nUnfortunately this adds quite a bit of overhead to each test: one thread, two\r\ntasks, three stacks, so there's a tradeoff. The time to execute run-pass on\r\nmy 4-core machine goes from ~750s to ~300s.\r\n\r\nThis should have a pretty good impact on cycle times.\r\n\r\ncc @toddaaro", "tree": {"sha": "90a16f68b156411aabc6ca625bb3f84fa39af671", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90a16f68b156411aabc6ca625bb3f84fa39af671"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ac17731eba236648e86b4e760d6c93addf19fa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac17731eba236648e86b4e760d6c93addf19fa0", "html_url": "https://github.com/rust-lang/rust/commit/8ac17731eba236648e86b4e760d6c93addf19fa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ac17731eba236648e86b4e760d6c93addf19fa0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1674b6150b20616c954e37206012b356ff81b1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1674b6150b20616c954e37206012b356ff81b1c", "html_url": "https://github.com/rust-lang/rust/commit/a1674b6150b20616c954e37206012b356ff81b1c"}, {"sha": "15fca2dad7c2abc60610635fd9ae0998abe43e54", "url": "https://api.github.com/repos/rust-lang/rust/commits/15fca2dad7c2abc60610635fd9ae0998abe43e54", "html_url": "https://github.com/rust-lang/rust/commit/15fca2dad7c2abc60610635fd9ae0998abe43e54"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "2346aba3bcbb655cd5553fe4a883cccb906b50b5", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ac17731eba236648e86b4e760d6c93addf19fa0/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac17731eba236648e86b4e760d6c93addf19fa0/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=8ac17731eba236648e86b4e760d6c93addf19fa0", "patch": "@@ -20,16 +20,30 @@ use procsrv;\n use util;\n use util::logv;\n \n+use std::cell::Cell;\n use std::io;\n use std::os;\n use std::str;\n+use std::task::{spawn_sched, SingleThreaded};\n use std::vec;\n \n use extra::test::MetricMap;\n \n pub fn run(config: config, testfile: ~str) {\n-    let mut _mm = MetricMap::new();\n-    run_metrics(config, testfile, &mut _mm);\n+    let config = Cell::new(config);\n+    let testfile = Cell::new(testfile);\n+    // FIXME #6436: Creating another thread to run the test because this\n+    // is going to call waitpid. The new scheduler has some strange\n+    // interaction between the blocking tasks and 'friend' schedulers\n+    // that destroys parallelism if we let normal schedulers block.\n+    // It should be possible to remove this spawn once std::run is\n+    // rewritten to be non-blocking.\n+    do spawn_sched(SingleThreaded) {\n+        let config = config.take();\n+        let testfile = testfile.take();\n+        let mut _mm = MetricMap::new();\n+        run_metrics(config, testfile, &mut _mm);\n+    }\n }\n \n pub fn run_metrics(config: config, testfile: ~str, mm: &mut MetricMap) {"}]}