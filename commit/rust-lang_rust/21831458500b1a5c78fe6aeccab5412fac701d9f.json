{"sha": "21831458500b1a5c78fe6aeccab5412fac701d9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxODMxNDU4NTAwYjFhNWM3OGZlNmFlY2NhYjU0MTJmYWM3MDFkOWY=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-16T17:42:12Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-20T09:12:04Z"}, "message": "Rename TCB to Taskgroup", "tree": {"sha": "01b2cc22e1b90e4d93c8e038eb420bec44311e0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01b2cc22e1b90e4d93c8e038eb420bec44311e0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21831458500b1a5c78fe6aeccab5412fac701d9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21831458500b1a5c78fe6aeccab5412fac701d9f", "html_url": "https://github.com/rust-lang/rust/commit/21831458500b1a5c78fe6aeccab5412fac701d9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21831458500b1a5c78fe6aeccab5412fac701d9f/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3c79c4026740ea2db0065ae14339d6586918a47", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c79c4026740ea2db0065ae14339d6586918a47", "html_url": "https://github.com/rust-lang/rust/commit/f3c79c4026740ea2db0065ae14339d6586918a47"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "d2975148350852aa2c46594651fb82120ea0c2bf", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21831458500b1a5c78fe6aeccab5412fac701d9f/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21831458500b1a5c78fe6aeccab5412fac701d9f/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=21831458500b1a5c78fe6aeccab5412fac701d9f", "patch": "@@ -27,7 +27,7 @@ use super::local_heap::LocalHeap;\n use rt::sched::{Scheduler, SchedHandle};\n use rt::stack::{StackSegment, StackPool};\n use rt::context::Context;\n-use task::spawn::TCB;\n+use task::spawn::Taskgroup;\n use cell::Cell;\n \n pub struct Task {\n@@ -37,7 +37,7 @@ pub struct Task {\n     logger: StdErrLogger,\n     unwinder: Unwinder,\n     home: Option<SchedHome>,\n-    taskgroup: Option<TCB>,\n+    taskgroup: Option<Taskgroup>,\n     death: Death,\n     destroyed: bool,\n     coroutine: Option<~Coroutine>"}, {"sha": "9734a41ba3b8d3260758fa2433b855957db20a70", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/21831458500b1a5c78fe6aeccab5412fac701d9f/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21831458500b1a5c78fe6aeccab5412fac701d9f/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=21831458500b1a5c78fe6aeccab5412fac701d9f", "patch": "@@ -338,7 +338,7 @@ fn each_ancestor(list:        &mut AncestorList,\n }\n \n // One of these per task.\n-pub struct TCB {\n+pub struct Taskgroup {\n     // List of tasks with whose fates this one's is intertwined.\n     tasks:      TaskGroupArc, // 'none' means the group has failed.\n     // Lists of tasks who will kill us if they fail, but whom we won't kill.\n@@ -347,12 +347,12 @@ pub struct TCB {\n     notifier:   Option<AutoNotify>,\n }\n \n-impl Drop for TCB {\n+impl Drop for Taskgroup {\n     // Runs on task exit.\n     fn drop(&self) {\n         unsafe {\n             // FIXME(#4330) Need self by value to get mutability.\n-            let this: &mut TCB = transmute(self);\n+            let this: &mut Taskgroup = transmute(self);\n \n             // If we are failing, the whole taskgroup needs to die.\n             do RuntimeGlue::with_task_handle_and_failing |me, failing| {\n@@ -382,15 +382,15 @@ impl Drop for TCB {\n     }\n }\n \n-pub fn TCB(tasks: TaskGroupArc,\n+pub fn Taskgroup(tasks: TaskGroupArc,\n        ancestors: AncestorList,\n        is_main: bool,\n-       mut notifier: Option<AutoNotify>) -> TCB {\n+       mut notifier: Option<AutoNotify>) -> Taskgroup {\n     for notifier.mut_iter().advance |x| {\n         x.failed = false;\n     }\n \n-    TCB {\n+    Taskgroup {\n         tasks: tasks,\n         ancestors: ancestors,\n         is_main: is_main,\n@@ -488,11 +488,11 @@ fn kill_taskgroup(state: TaskGroupInner, me: &TaskHandle, is_main: bool) {\n // FIXME (#2912): Work around core-vs-coretest function duplication. Can't use\n // a proper closure because the #[test]s won't understand. Have to fake it.\n #[cfg(not(stage0))]\n-fn taskgroup_key() -> local_data::Key<@@mut TCB> {\n+fn taskgroup_key() -> local_data::Key<@@mut Taskgroup> {\n     unsafe { cast::transmute(-2) }\n }\n #[cfg(stage0)]\n-fn taskgroup_key() -> local_data::Key<@@mut TCB> {\n+fn taskgroup_key() -> local_data::Key<@@mut Taskgroup> {\n     unsafe { cast::transmute((-2, 0)) }\n }\n \n@@ -540,7 +540,7 @@ impl RuntimeGlue {\n         }\n     }\n \n-    fn with_my_taskgroup<U>(blk: &fn(&TCB) -> U) -> U {\n+    fn with_my_taskgroup<U>(blk: &fn(&Taskgroup) -> U) -> U {\n         match context() {\n             OldTaskContext => unsafe {\n                 let me = rt::rust_get_task();\n@@ -555,7 +555,8 @@ impl RuntimeGlue {\n                                 descendants: TaskSet::new(),\n                             }));\n                             // Main task/group has no ancestors, no notifier, etc.\n-                            let group = @@mut TCB(tasks, AncestorList(None), true, None);\n+                            let group = @@mut Taskgroup(tasks, AncestorList(None),\n+                                                        true, None);\n                             local_set(OldHandle(me), taskgroup_key(), group);\n                             blk(&**group)\n                         }\n@@ -577,7 +578,7 @@ impl RuntimeGlue {\n                             members: members,\n                             descendants: TaskSet::new(),\n                         }));\n-                        let group = TCB(tasks, AncestorList(None), true, None);\n+                        let group = Taskgroup(tasks, AncestorList(None), true, None);\n                         (*me).taskgroup = Some(group);\n                         (*me).taskgroup.get_ref()\n                     }\n@@ -683,7 +684,7 @@ fn spawn_raw_newsched(mut opts: TaskOpts, f: ~fn()) {\n             if enlist_many(NewTask(handle), &child_tg, &mut ancestors) {\n                 // Got in. We can run the provided child body, and can also run\n                 // the taskgroup's exit-time-destructor afterward.\n-                me.taskgroup = Some(TCB(child_tg, ancestors, is_main, None));\n+                me.taskgroup = Some(Taskgroup(child_tg, ancestors, is_main, None));\n                 true\n             } else {\n                 false\n@@ -781,7 +782,7 @@ fn spawn_raw_oldsched(mut opts: TaskOpts, f: ~fn()) {\n             let notifier = notify_chan.map_consume(|c| AutoNotify(c));\n \n             if enlist_many(OldTask(child), &child_arc, &mut ancestors) {\n-                let group = @@mut TCB(child_arc, ancestors, is_main, notifier);\n+                let group = @@mut Taskgroup(child_arc, ancestors, is_main, notifier);\n                 unsafe {\n                     local_set(OldHandle(child), taskgroup_key(), group);\n                 }"}]}