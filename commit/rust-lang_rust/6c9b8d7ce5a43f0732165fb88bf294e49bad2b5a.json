{"sha": "6c9b8d7ce5a43f0732165fb88bf294e49bad2b5a", "node_id": "C_kwDOAAsO6NoAKDZjOWI4ZDdjZTVhNDNmMDczMjE2NWZiODhiZjI5NGU0OWJhZDJiNWE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-20T11:48:05Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-20T11:48:05Z"}, "message": "Generate rustdoc lints", "tree": {"sha": "497fc7476c9f0085bda001990c0101a0c7d42f06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/497fc7476c9f0085bda001990c0101a0c7d42f06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c9b8d7ce5a43f0732165fb88bf294e49bad2b5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9b8d7ce5a43f0732165fb88bf294e49bad2b5a", "html_url": "https://github.com/rust-lang/rust/commit/6c9b8d7ce5a43f0732165fb88bf294e49bad2b5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c9b8d7ce5a43f0732165fb88bf294e49bad2b5a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5051717856dd325027e003c6b64497a2b113ba07", "url": "https://api.github.com/repos/rust-lang/rust/commits/5051717856dd325027e003c6b64497a2b113ba07", "html_url": "https://github.com/rust-lang/rust/commit/5051717856dd325027e003c6b64497a2b113ba07"}], "stats": {"total": 181, "additions": 127, "deletions": 54}, "files": [{"sha": "e69b3fbdf8869537de286899bea2bd3556962013", "filename": "crates/ide_db/src/helpers/generated_lints.rs", "status": "modified", "additions": 75, "deletions": 31, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b8d7ce5a43f0732165fb88bf294e49bad2b5a/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b8d7ce5a43f0732165fb88bf294e49bad2b5a/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs?ref=6c9b8d7ce5a43f0732165fb88bf294e49bad2b5a", "patch": "@@ -502,6 +502,46 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n     },\n ];\n \n+pub const RUSTDOC_LINTS: &[Lint] = &[\n+    Lint {\n+        label: \"rustdoc::all\",\n+        description: r##\"lint group for: rustdoc::broken-intra-doc-links, rustdoc::private-intra-doc-links, rustdoc::missing-doc-code-examples, rustdoc::private-doc-tests, rustdoc::invalid-codeblock-attributes, rustdoc::invalid-rust-codeblocks, rustdoc::invalid-html-tags, rustdoc::bare-urls, rustdoc::missing-crate-level-docs\"##,\n+    },\n+    Lint { label: \"rustdoc::bare_urls\", description: r##\"detects URLs that are not hyperlinks\"## },\n+    Lint {\n+        label: \"rustdoc::broken_intra_doc_links\",\n+        description: r##\"failures in resolving intra-doc link targets\"##,\n+    },\n+    Lint {\n+        label: \"rustdoc::invalid_codeblock_attributes\",\n+        description: r##\"codeblock attribute looks a lot like a known one\"##,\n+    },\n+    Lint {\n+        label: \"rustdoc::invalid_html_tags\",\n+        description: r##\"detects invalid HTML tags in doc comments\"##,\n+    },\n+    Lint {\n+        label: \"rustdoc::invalid_rust_codeblocks\",\n+        description: r##\"codeblock could not be parsed as valid Rust or is empty\"##,\n+    },\n+    Lint {\n+        label: \"rustdoc::missing_crate_level_docs\",\n+        description: r##\"detects crates with no crate-level documentation\"##,\n+    },\n+    Lint {\n+        label: \"rustdoc::missing_doc_code_examples\",\n+        description: r##\"detects publicly-exported items without code samples in their documentation\"##,\n+    },\n+    Lint {\n+        label: \"rustdoc::private_doc_tests\",\n+        description: r##\"detects code samples in docs of private items not documented by rustdoc\"##,\n+    },\n+    Lint {\n+        label: \"rustdoc::private_intra_doc_links\",\n+        description: r##\"linking from a public item to a private one\"##,\n+    },\n+];\n+\n pub const FEATURES: &[Lint] = &[\n     Lint {\n         label: \"abi_c_cmse_nonsecure_call\",\n@@ -5572,11 +5612,9 @@ outside ticks in documentation.\"##,\n     },\n     Lint {\n         label: \"clippy::double_must_use\",\n-        description: r##\"Checks for a [`#[must_use]`] attribute without\n+        description: r##\"Checks for a `#[must_use]` attribute without\n further information on functions and methods that return a type already\n-marked as `#[must_use]`.\n-\n-[`#[must_use]`]: https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-must_use-attribute\"##,\n+marked as `#[must_use]`.\"##,\n     },\n     Lint {\n         label: \"clippy::double_neg\",\n@@ -5821,6 +5859,12 @@ derives the Copy trait\"##,\n         label: \"clippy::forget_ref\",\n         description: r##\"Checks for calls to `std::mem::forget` with a reference\n instead of an owned value.\"##,\n+    },\n+    Lint {\n+        label: \"clippy::format_in_format_args\",\n+        description: r##\"Detects `format!` within the arguments of another macro that does\n+formatting such as `format!` itself, `write!` or `println!`. Suggests\n+inlining the `format!` call.\"##,\n     },\n     Lint {\n         label: \"clippy::from_iter_instead_of_collect\",\n@@ -6120,8 +6164,7 @@ where expr has a type that implements `Drop`\"##,\n     },\n     Lint {\n         label: \"clippy::let_underscore_must_use\",\n-        description: r##\"Checks for `let _ = <expr>`\n-where expr is #[must_use]\"##,\n+        description: r##\"Checks for `let _ = <expr>` where expr is `#[must_use]`\"##,\n     },\n     Lint { label: \"clippy::let_unit_value\", description: r##\"Checks for binding a unit value.\"## },\n     Lint {\n@@ -6194,23 +6237,7 @@ be more readably expressed as `(3..8).contains(x)`.\"##,\n     },\n     Lint {\n         label: \"clippy::manual_split_once\",\n-        description: r##\"**What it does:** Checks for usages of `str::splitn(2, _)`\n-\n-**Why is this bad?** `split_once` is both clearer in intent and slightly more efficient.\n-\n-**Known problems:** None.\n-\n-**Example:**\n-\n-```rust\n-// Bad\n- let (key, value) = _.splitn(2, '=').next_tuple()?;\n- let value = _.splitn(2, '=').nth(1)?;\n-\n-// Good\n-let (key, value) = _.split_once('=')?;\n-let value = _.split_once('=')?.1;\n-```\"##,\n+        description: r##\"Checks for usages of `str::splitn(2, _)`\"##,\n     },\n     Lint {\n         label: \"clippy::manual_str_repeat\",\n@@ -6304,6 +6331,10 @@ instead. It also checks for `if let &foo = bar` blocks.\"##,\n         label: \"clippy::match_single_binding\",\n         description: r##\"Checks for useless match that binds to only one value.\"##,\n     },\n+    Lint {\n+        label: \"clippy::match_str_case_mismatch\",\n+        description: r##\"Checks for `match` expressions modifying the case of a string with non-compliant arms\"##,\n+    },\n     Lint {\n         label: \"clippy::match_wild_err_arm\",\n         description: r##\"Checks for arm which matches all errors with `Err(_)`\n@@ -6433,17 +6464,13 @@ used.\"##,\n     Lint {\n         label: \"clippy::must_use_candidate\",\n         description: r##\"Checks for public functions that have no\n-[`#[must_use]`] attribute, but return something not already marked\n-must-use, have no mutable arg and mutate no statics.\n-\n-[`#[must_use]`]: https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-must_use-attribute\"##,\n+`#[must_use]` attribute, but return something not already marked\n+must-use, have no mutable arg and mutate no statics.\"##,\n     },\n     Lint {\n         label: \"clippy::must_use_unit\",\n-        description: r##\"Checks for a [`#[must_use]`] attribute on\n-unit-returning functions and methods.\n-\n-[`#[must_use]`]: https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-must_use-attribute\"##,\n+        description: r##\"Checks for a `#[must_use]` attribute on\n+unit-returning functions and methods.\"##,\n     },\n     Lint {\n         label: \"clippy::mut_from_ref\",\n@@ -6591,6 +6618,10 @@ implementation of\n         label: \"clippy::no_effect\",\n         description: r##\"Checks for statements which have no effect.\"##,\n     },\n+    Lint {\n+        label: \"clippy::no_effect_underscore_binding\",\n+        description: r##\"Checks for binding to underscore prefixed variable without side-effects.\"##,\n+    },\n     Lint {\n         label: \"clippy::non_ascii_literal\",\n         description: r##\"Checks for non-ASCII characters in string literals.\"##,\n@@ -7155,6 +7186,12 @@ assign a value in it.\"##,\n         label: \"clippy::to_string_in_display\",\n         description: r##\"Checks for uses of `to_string()` in `Display` traits.\"##,\n     },\n+    Lint {\n+        label: \"clippy::to_string_in_format_args\",\n+        description: r##\"Checks for [`ToString::to_string`](https://doc.rust-lang.org/std/string/trait.ToString.html#tymethod.to_string)\n+applied to a type that implements [`Display`](https://doc.rust-lang.org/std/fmt/trait.Display.html)\n+in a macro that does formatting.\"##,\n+    },\n     Lint { label: \"clippy::todo\", description: r##\"Checks for usage of `todo!`.\"## },\n     Lint {\n         label: \"clippy::too_many_arguments\",\n@@ -7194,6 +7231,7 @@ syntax specifications for trait bounds are used simultaneously.\"##,\n         label: \"clippy::transmute_int_to_float\",\n         description: r##\"Checks for transmutes from an integer to a float.\"##,\n     },\n+    Lint { label: \"clippy::transmute_num_to_bytes\", description: r##\"\"## },\n     Lint {\n         label: \"clippy::transmute_ptr_to_ptr\",\n         description: r##\"Checks for transmutes from a pointer to a pointer, or\n@@ -7256,6 +7294,12 @@ that is not equal to its\n         label: \"clippy::uninit_assumed_init\",\n         description: r##\"Checks for `MaybeUninit::uninit().assume_init()`.\"##,\n     },\n+    Lint {\n+        label: \"clippy::uninit_vec\",\n+        description: r##\"Checks for `set_len()` call that creates `Vec` with uninitialized elements.\n+This is commonly caused by calling `set_len()` right after allocating or\n+reserving a buffer with `new()`, `default()`, `with_capacity()`, or `reserve()`.\"##,\n+    },\n     Lint {\n         label: \"clippy::unit_arg\",\n         description: r##\"Checks for passing a unit value as an argument to a function without using a"}, {"sha": "3c37aa6cb92cfddf40e8535635411f181e074e9a", "filename": "crates/ide_db/src/tests/sourcegen_lints.rs", "status": "modified", "additions": 52, "deletions": 23, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/6c9b8d7ce5a43f0732165fb88bf294e49bad2b5a/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9b8d7ce5a43f0732165fb88bf294e49bad2b5a/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs?ref=6c9b8d7ce5a43f0732165fb88bf294e49bad2b5a", "patch": "@@ -1,6 +1,7 @@\n //! Generates descriptors structure for unstable feature from Unstable Book\n use std::{borrow::Cow, fs, path::Path};\n \n+use itertools::Itertools;\n use stdx::format_to;\n use test_utils::project_root;\n use xshell::cmd;\n@@ -43,39 +44,62 @@ pub struct Lint {\n }\n \n fn generate_lint_descriptor(buf: &mut String) {\n-    let stdout = cmd!(\"rustc -W help\").read().unwrap();\n+    // FIXME: rustdoc currently requires an input file for -Whelp cc https://github.com/rust-lang/rust/pull/88831\n+    let file = project_root().join(file!());\n+    let stdout = cmd!(\"rustdoc -W help {file}\").read().unwrap();\n     let start_lints = stdout.find(\"----  -------  -------\").unwrap();\n     let start_lint_groups = stdout.find(\"----  ---------\").unwrap();\n-    let end_lints = stdout.find(\"Lint groups provided by rustc:\").unwrap();\n-    let end_lint_groups = stdout\n-        .find(\"Lint tools like Clippy can provide additional lints and lint groups.\")\n-        .unwrap();\n+    let start_lints_rustdoc =\n+        stdout.find(\"Lint checks provided by plugins loaded by this crate:\").unwrap();\n+    let start_lint_groups_rustdoc =\n+        stdout.find(\"Lint groups provided by plugins loaded by this crate:\").unwrap();\n+\n     buf.push_str(r#\"pub const DEFAULT_LINTS: &[Lint] = &[\"#);\n     buf.push('\\n');\n-    let mut lints = stdout[start_lints..end_lints]\n-        .lines()\n-        .skip(1)\n-        .filter(|l| !l.is_empty())\n-        .map(|line| {\n+\n+    let lints = stdout[start_lints..].lines().skip(1).take_while(|l| !l.is_empty()).map(|line| {\n+        let (name, rest) = line.trim().split_once(char::is_whitespace).unwrap();\n+        let (_default_level, description) = rest.trim().split_once(char::is_whitespace).unwrap();\n+        (name.trim(), Cow::Borrowed(description.trim()))\n+    });\n+    let lint_groups =\n+        stdout[start_lint_groups..].lines().skip(1).take_while(|l| !l.is_empty()).map(|line| {\n+            let (name, lints) = line.trim().split_once(char::is_whitespace).unwrap();\n+            (name.trim(), format!(\"lint group for: {}\", lints.trim()).into())\n+        });\n+\n+    lints.chain(lint_groups).sorted_by(|(ident, _), (ident2, _)| ident.cmp(ident2)).for_each(\n+        |(name, description)| push_lint_completion(buf, &name.replace(\"-\", \"_\"), &description),\n+    );\n+    buf.push_str(\"];\\n\");\n+\n+    // rustdoc\n+\n+    buf.push('\\n');\n+    buf.push_str(r#\"pub const RUSTDOC_LINTS: &[Lint] = &[\"#);\n+    buf.push('\\n');\n+\n+    let lints_rustdoc =\n+        stdout[start_lints_rustdoc..].lines().skip(2).take_while(|l| !l.is_empty()).map(|line| {\n             let (name, rest) = line.trim().split_once(char::is_whitespace).unwrap();\n             let (_default_level, description) =\n                 rest.trim().split_once(char::is_whitespace).unwrap();\n             (name.trim(), Cow::Borrowed(description.trim()))\n-        })\n-        .collect::<Vec<_>>();\n-    lints.extend(\n-        stdout[start_lint_groups..end_lint_groups].lines().skip(1).filter(|l| !l.is_empty()).map(\n+        });\n+    let lint_groups_rustdoc =\n+        stdout[start_lint_groups_rustdoc..].lines().skip(2).take_while(|l| !l.is_empty()).map(\n             |line| {\n                 let (name, lints) = line.trim().split_once(char::is_whitespace).unwrap();\n                 (name.trim(), format!(\"lint group for: {}\", lints.trim()).into())\n             },\n-        ),\n-    );\n-\n-    lints.sort_by(|(ident, _), (ident2, _)| ident.cmp(ident2));\n-    lints.into_iter().for_each(|(name, description)| {\n-        push_lint_completion(buf, &name.replace(\"-\", \"_\"), &description)\n-    });\n+        );\n+\n+    lints_rustdoc\n+        .chain(lint_groups_rustdoc)\n+        .sorted_by(|(ident, _), (ident2, _)| ident.cmp(ident2))\n+        .for_each(|(name, description)| {\n+            push_lint_completion(buf, &name.replace(\"-\", \"_\"), &description)\n+        });\n     buf.push_str(\"];\\n\");\n }\n \n@@ -126,8 +150,13 @@ fn generate_descriptor_clippy(buf: &mut String, path: &Path) {\n             clippy_lints.push(clippy_lint)\n         } else if let Some(line) = line.strip_prefix(r#\"\"docs\": \"\"#) {\n             let prefix_to_strip = r#\" ### What it does\"#;\n-            // FIXME: replace unwrap_or with expect again, currently there is one lint that uses a different format in the json...\n-            let line = line.strip_prefix(prefix_to_strip).unwrap_or(line);\n+            let line = match line.strip_prefix(prefix_to_strip) {\n+                Some(line) => line,\n+                None => {\n+                    eprintln!(\"unexpected clippy prefix for {}\", clippy_lints.last().unwrap().id);\n+                    continue;\n+                }\n+            };\n             // Only take the description, any more than this is a lot of additional data we would embed into the exe\n             // which seems unnecessary\n             let up_to = line.find(r#\"###\"#).expect(\"no second section found?\");"}]}