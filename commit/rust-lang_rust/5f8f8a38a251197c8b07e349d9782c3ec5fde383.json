{"sha": "5f8f8a38a251197c8b07e349d9782c3ec5fde383", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOGY4YTM4YTI1MTE5N2M4YjA3ZTM0OWQ5NzgyYzNlYzVmZGUzODM=", "commit": {"author": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-17T19:26:55Z"}, "committer": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-19T18:47:33Z"}, "message": "Don't show assist if all arms are present", "tree": {"sha": "0ba82b76bf9387d68ee2ee2c6a49f6cf0fef5044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ba82b76bf9387d68ee2ee2c6a49f6cf0fef5044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f8f8a38a251197c8b07e349d9782c3ec5fde383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f8f8a38a251197c8b07e349d9782c3ec5fde383", "html_url": "https://github.com/rust-lang/rust/commit/5f8f8a38a251197c8b07e349d9782c3ec5fde383", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f8f8a38a251197c8b07e349d9782c3ec5fde383/comments", "author": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6087c014608108e2b971608e214a74759743e95e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6087c014608108e2b971608e214a74759743e95e", "html_url": "https://github.com/rust-lang/rust/commit/6087c014608108e2b971608e214a74759743e95e"}], "stats": {"total": 70, "additions": 37, "deletions": 33}, "files": [{"sha": "f8859ff6d8fc3f8c5008bfaf3eea43d3e6ce8210", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/5f8f8a38a251197c8b07e349d9782c3ec5fde383/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f8f8a38a251197c8b07e349d9782c3ec5fde383/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=5f8f8a38a251197c8b07e349d9782c3ec5fde383", "patch": "@@ -50,45 +50,49 @@ pub(crate) fn fill_match_arms(ctx: AssistCtx) -> Option<Assist> {\n         return None;\n     }\n \n-    let db = ctx.db;\n-    ctx.add_assist(AssistId(\"fill_match_arms\"), \"Fill match arms\", |edit| {\n-        let mut arms: Vec<MatchArm> = match_arm_list.arms().collect();\n-        if arms.len() == 1 {\n-            if let Some(Pat::PlaceholderPat(..)) = arms[0].pat() {\n-                arms.clear();\n-            }\n+    let mut arms: Vec<MatchArm> = match_arm_list.arms().collect();\n+    if arms.len() == 1 {\n+        if let Some(Pat::PlaceholderPat(..)) = arms[0].pat() {\n+            arms.clear();\n         }\n+    }\n \n-        let mut has_partial_match = false;\n-        let variants: Vec<MatchArm> = variants\n-            .into_iter()\n-            .filter_map(|variant| build_pat(db, module, variant))\n-            .filter(|variant_pat| {\n-                !arms.iter().filter_map(|arm| arm.pat().map(|_| arm)).any(|arm| {\n-                    let pat = arm.pat().unwrap();\n-\n-                    // Special casee OrPat as separate top-level pats\n-                    let pats: Vec<Pat> = match Pat::from(pat.clone()) {\n-                        Pat::OrPat(pats) => pats.pats().collect::<Vec<_>>(),\n-                        _ => vec![pat],\n-                    };\n-\n-                    pats.iter().any(|pat| {\n-                        match does_arm_pat_match_variant(pat, arm.guard(), variant_pat) {\n-                            ArmMatch::Yes => true,\n-                            ArmMatch::No => false,\n-                            ArmMatch::Partial => {\n-                                has_partial_match = true;\n-                                true\n-                            }\n+    let mut has_partial_match = false;\n+    let db = ctx.db;\n+    let missing_arms: Vec<MatchArm> = variants\n+        .into_iter()\n+        .filter_map(|variant| build_pat(db, module, variant))\n+        .filter(|variant_pat| {\n+            !arms.iter().filter_map(|arm| arm.pat().map(|_| arm)).any(|arm| {\n+                let pat = arm.pat().unwrap();\n+\n+                // Special casee OrPat as separate top-level pats\n+                let pats: Vec<Pat> = match Pat::from(pat.clone()) {\n+                    Pat::OrPat(pats) => pats.pats().collect::<Vec<_>>(),\n+                    _ => vec![pat],\n+                };\n+\n+                pats.iter().any(|pat| {\n+                    match does_arm_pat_match_variant(pat, arm.guard(), variant_pat) {\n+                        ArmMatch::Yes => true,\n+                        ArmMatch::No => false,\n+                        ArmMatch::Partial => {\n+                            has_partial_match = true;\n+                            true\n                         }\n-                    })\n+                    }\n                 })\n             })\n-            .map(|pat| make::match_arm(iter::once(pat), make::expr_unit()))\n-            .collect();\n+        })\n+        .map(|pat| make::match_arm(iter::once(pat), make::expr_unit()))\n+        .collect();\n \n-        arms.extend(variants);\n+    if missing_arms.is_empty() && !has_partial_match {\n+        return None;\n+    }\n+\n+    ctx.add_assist(AssistId(\"fill_match_arms\"), \"Fill match arms\", |edit| {\n+        arms.extend(missing_arms);\n         if has_partial_match {\n             arms.push(make::match_arm(\n                 iter::once(make::placeholder_pat().into()),"}]}