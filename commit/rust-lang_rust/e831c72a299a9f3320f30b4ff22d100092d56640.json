{"sha": "e831c72a299a9f3320f30b4ff22d100092d56640", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MzFjNzJhMjk5YTlmMzMyMGYzMGI0ZmYyMmQxMDAwOTJkNTY2NDA=", "commit": {"author": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2016-05-21T16:55:13Z"}, "committer": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2016-05-23T14:03:44Z"}, "message": "Add an explicit \"How can I implement `PartialEq`\"? doc section\n\nIncluding an example of a custom implementation. I put this expanded\nsection after the `Derivable` section to encourage use of that first.", "tree": {"sha": "c1be5b06a73fe2ce8c3f38d30ca4b584ce1f15f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1be5b06a73fe2ce8c3f38d30ca4b584ce1f15f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e831c72a299a9f3320f30b4ff22d100092d56640", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e831c72a299a9f3320f30b4ff22d100092d56640", "html_url": "https://github.com/rust-lang/rust/commit/e831c72a299a9f3320f30b4ff22d100092d56640", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e831c72a299a9f3320f30b4ff22d100092d56640/comments", "author": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc467b31c2db57762ffed20a1305bb8830178071", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc467b31c2db57762ffed20a1305bb8830178071", "html_url": "https://github.com/rust-lang/rust/commit/fc467b31c2db57762ffed20a1305bb8830178071"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "f99358b09f4cb27c9a0f4a4fac499c62feac7035", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e831c72a299a9f3320f30b4ff22d100092d56640/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e831c72a299a9f3320f30b4ff22d100092d56640/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=e831c72a299a9f3320f30b4ff22d100092d56640", "patch": "@@ -53,16 +53,43 @@ use option::Option::{self, Some};\n /// symmetrically and transitively: if `T: PartialEq<U>` and `U: PartialEq<V>`\n /// then `U: PartialEq<T>` and `T: PartialEq<V>`.\n ///\n-/// PartialEq only requires the `eq` method to be implemented; `ne` is defined\n-/// in terms of it by default. Any manual implementation of `ne` *must* respect\n-/// the rule that `eq` is a strict inverse of `ne`; that is, `!(a == b)` if and\n-/// only if `a != b`.\n+/// ## Derivable\n ///\n /// This trait can be used with `#[derive]`. When `derive`d on structs, two\n /// instances are equal if all fields are equal, and non equal if any fields\n /// are not equal. When `derive`d on enums, each variant is equal to itself\n /// and not equal to the other variants.\n ///\n+/// ## How can I implement `PartialEq`?\n+///\n+/// PartialEq only requires the `eq` method to be implemented; `ne` is defined\n+/// in terms of it by default. Any manual implementation of `ne` *must* respect\n+/// the rule that `eq` is a strict inverse of `ne`; that is, `!(a == b)` if and\n+/// only if `a != b`.\n+///\n+/// An example implementation for a domain in which two books are considered\n+/// the same book if their ISBN matches, even if the formats differ:\n+///\n+/// ```\n+/// enum BookFormat { Paperback, Hardback, Ebook }\n+/// struct Book {\n+///     isbn: i32,\n+///     format: BookFormat,\n+/// }\n+/// impl PartialEq for Book {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.isbn == other.isbn\n+///     }\n+/// }\n+///\n+/// let b1 = Book { isbn: 3, format: BookFormat::Paperback };\n+/// let b2 = Book { isbn: 3, format: BookFormat::Ebook };\n+/// let b3 = Book { isbn: 10, format: BookFormat::Paperback };\n+///\n+/// assert!(b1 == b2);\n+/// assert!(b1 != b3);\n+/// ```\n+///\n /// # Examples\n ///\n /// ```"}]}