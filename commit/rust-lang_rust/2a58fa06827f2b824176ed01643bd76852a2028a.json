{"sha": "2a58fa06827f2b824176ed01643bd76852a2028a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNThmYTA2ODI3ZjJiODI0MTc2ZWQwMTY0M2JkNzY4NTJhMjAyOGE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-23T02:32:18Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-24T14:54:53Z"}, "message": "Get rid of doctree::Trait", "tree": {"sha": "b8d951afddf1eb7b3c3d538257e60efce84cb60e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8d951afddf1eb7b3c3d538257e60efce84cb60e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a58fa06827f2b824176ed01643bd76852a2028a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a58fa06827f2b824176ed01643bd76852a2028a", "html_url": "https://github.com/rust-lang/rust/commit/2a58fa06827f2b824176ed01643bd76852a2028a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a58fa06827f2b824176ed01643bd76852a2028a/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3a5d2cd133d659e25099eaa490f82fbfcdf57fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a5d2cd133d659e25099eaa490f82fbfcdf57fd", "html_url": "https://github.com/rust-lang/rust/commit/a3a5d2cd133d659e25099eaa490f82fbfcdf57fd"}], "stats": {"total": 63, "additions": 15, "deletions": 48}, "files": [{"sha": "ac02818224bc4b0bac12ff04c7720a4a13e4ea55", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2a58fa06827f2b824176ed01643bd76852a2028a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a58fa06827f2b824176ed01643bd76852a2028a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2a58fa06827f2b824176ed01643bd76852a2028a", "patch": "@@ -234,7 +234,6 @@ impl Clean<Item> for doctree::Module<'_> {\n         items.extend(self.foreigns.iter().map(|x| x.clean(cx)));\n         items.extend(self.mods.iter().map(|x| x.clean(cx)));\n         items.extend(self.items.iter().map(|x| x.clean(cx)).flatten());\n-        items.extend(self.traits.iter().map(|x| x.clean(cx)));\n         items.extend(self.macros.iter().map(|x| x.clean(cx)));\n \n         // determine if we should display the inner contents or\n@@ -1022,26 +1021,6 @@ impl Clean<FnRetTy> for hir::FnRetTy<'_> {\n     }\n }\n \n-impl Clean<Item> for doctree::Trait<'_> {\n-    fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        let attrs = self.attrs.clean(cx);\n-        let is_spotlight = attrs.has_doc_flag(sym::spotlight);\n-        Item::from_hir_id_and_parts(\n-            self.id,\n-            Some(self.name),\n-            TraitItem(Trait {\n-                unsafety: self.unsafety,\n-                items: self.items.iter().map(|ti| ti.clean(cx)).collect(),\n-                generics: self.generics.clean(cx),\n-                bounds: self.bounds.clean(cx),\n-                is_spotlight,\n-                is_auto: self.is_auto.clean(cx),\n-            }),\n-            cx,\n-        )\n-    }\n-}\n-\n impl Clean<bool> for hir::IsAuto {\n     fn clean(&self, _: &DocContext<'_>) -> bool {\n         match *self {\n@@ -2011,6 +1990,20 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Ident>) {\n             ItemKind::Fn(ref sig, ref generics, body_id) => {\n                 clean_fn_or_proc_macro(item, sig, generics, body_id, &mut name, cx)\n             }\n+            hir::ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, ref item_ids) => {\n+                let items =\n+                    item_ids.iter().map(|ti| cx.tcx.hir().trait_item(ti.id).clean(cx)).collect();\n+                let attrs = item.attrs.clean(cx);\n+                let is_spotlight = attrs.has_doc_flag(sym::spotlight);\n+                TraitItem(Trait {\n+                    unsafety,\n+                    items,\n+                    generics: generics.clean(cx),\n+                    bounds: bounds.clean(cx),\n+                    is_spotlight,\n+                    is_auto: is_auto.clean(cx),\n+                })\n+            }\n             _ => unreachable!(\"not yet converted\"),\n         };\n "}, {"sha": "6bcd6f0c1e9c3ca30a8528ad4c65a69d2cf28343", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2a58fa06827f2b824176ed01643bd76852a2028a/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a58fa06827f2b824176ed01643bd76852a2028a/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=2a58fa06827f2b824176ed01643bd76852a2028a", "patch": "@@ -20,7 +20,6 @@ crate struct Module<'hir> {\n     crate id: hir::HirId,\n     // (item, renamed)\n     crate items: Vec<(&'hir hir::Item<'hir>, Option<Ident>)>,\n-    crate traits: Vec<Trait<'hir>>,\n     crate foreigns: Vec<(&'hir hir::ForeignItem<'hir>, Option<Ident>)>,\n     crate macros: Vec<Macro>,\n     crate is_crate: bool,\n@@ -38,7 +37,6 @@ impl Module<'hir> {\n             imports: Vec::new(),\n             mods: Vec::new(),\n             items: Vec::new(),\n-            traits: Vec::new(),\n             foreigns: Vec::new(),\n             macros: Vec::new(),\n             is_crate: false,\n@@ -62,17 +60,6 @@ crate struct Variant<'hir> {\n     crate def: &'hir hir::VariantData<'hir>,\n }\n \n-crate struct Trait<'hir> {\n-    crate is_auto: hir::IsAuto,\n-    crate unsafety: hir::Unsafety,\n-    crate name: Symbol,\n-    crate items: Vec<&'hir hir::TraitItem<'hir>>,\n-    crate generics: &'hir hir::Generics<'hir>,\n-    crate bounds: &'hir [hir::GenericBound<'hir>],\n-    crate attrs: &'hir [ast::Attribute],\n-    crate id: hir::HirId,\n-}\n-\n // For Macro we store the DefId instead of the NodeId, since we also create\n // these imported macro_rules (which only have a DUMMY_NODE_ID).\n crate struct Macro {"}, {"sha": "d9326b56e9c10e9d931394b9c566c5c21267121b", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2a58fa06827f2b824176ed01643bd76852a2028a/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a58fa06827f2b824176ed01643bd76852a2028a/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=2a58fa06827f2b824176ed01643bd76852a2028a", "patch": "@@ -319,6 +319,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             | hir::ItemKind::TyAlias(..)\n             | hir::ItemKind::OpaqueTy(..)\n             | hir::ItemKind::Static(..)\n+            | hir::ItemKind::Trait(..)\n             | hir::ItemKind::TraitAlias(..) => om.items.push((item, renamed)),\n             hir::ItemKind::Const(..) => {\n                 // Underscore constants do not correspond to a nameable item and\n@@ -327,20 +328,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     om.items.push((item, renamed));\n                 }\n             }\n-            hir::ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, ref item_ids) => {\n-                let items = item_ids.iter().map(|ti| self.cx.tcx.hir().trait_item(ti.id)).collect();\n-                let t = Trait {\n-                    is_auto,\n-                    unsafety,\n-                    name: ident.name,\n-                    items,\n-                    generics,\n-                    bounds,\n-                    id: item.hir_id,\n-                    attrs: &item.attrs,\n-                };\n-                om.traits.push(t);\n-            }\n             hir::ItemKind::Impl { ref of_trait, .. } => {\n                 // Don't duplicate impls when inlining or if it's implementing a trait, we'll pick\n                 // them up regardless of where they're located."}]}