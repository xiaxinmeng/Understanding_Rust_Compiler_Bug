{"sha": "59d484575a714291481563d13ad058b9a3d31fa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZDQ4NDU3NWE3MTQyOTE0ODE1NjNkMTNhZDA1OGI5YTNkMzFmYTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-03T16:28:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-03T16:28:24Z"}, "message": "Auto merge of #45569 - zackmdavis:unexported_pub_lint, r=petrochenkov\n\n`unreachable-pub` lint (as authorized by RFC 2126)\n\nTo whom it may concern:\n\nRFC 2126 commissions the creation of a lint for `pub` items that are not visible from crate root (#45521). We understand (but seek confirmation from more knowledgable compiler elders) that this can be implemented by linting HIR items that are _not_ ~~`cx.access_levels.is_exported`~~ `cx.access_levels.is_reachable` but have a `vis` (-ibility) field of `hir::Visibility::Public`.\n\nThe lint, tentatively called ~~`unexported-pub`~~ `unreachable-pub` (with the understanding that much could be written on the merits of various names, as it is said of the colors of bicycle-sheds), suggests `crate` as a replacement for `pub` if the `crate_visibility_modifier` feature is enabled (see #45388), and `pub(crate)` otherwise. We also use help messaging to suggest the other potential fix of exporting the item; feedback is desired as to whether this may be confusing or could be worded better.\n\nAs a preview of what respecting the proposed lint would look like (and to generate confirmatory evidence that this implementation doesn't issue false positives), ~~we take its suggestions for `libcore`~~ (save one, which is deferred to another pull request because it brings up an unrelated technical matter). I remain your obedient servant.\n\n![unexported_pub](https://user-images.githubusercontent.com/1076988/32089794-fbd02420-baa0-11e7-87e5-3ec01f18924a.png)\n\nr? @petrochenkov", "tree": {"sha": "6051dd2e1575f007a9ed9d3d62970b16da63fd42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6051dd2e1575f007a9ed9d3d62970b16da63fd42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59d484575a714291481563d13ad058b9a3d31fa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59d484575a714291481563d13ad058b9a3d31fa8", "html_url": "https://github.com/rust-lang/rust/commit/59d484575a714291481563d13ad058b9a3d31fa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59d484575a714291481563d13ad058b9a3d31fa8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "525b81d570b15df2ed5896f0215baea5c64c650c", "url": "https://api.github.com/repos/rust-lang/rust/commits/525b81d570b15df2ed5896f0215baea5c64c650c", "html_url": "https://github.com/rust-lang/rust/commit/525b81d570b15df2ed5896f0215baea5c64c650c"}, {"sha": "085ec6d5286151fb06416965eb5ebaaf947b5ec8", "url": "https://api.github.com/repos/rust-lang/rust/commits/085ec6d5286151fb06416965eb5ebaaf947b5ec8", "html_url": "https://github.com/rust-lang/rust/commit/085ec6d5286151fb06416965eb5ebaaf947b5ec8"}], "stats": {"total": 469, "additions": 469, "deletions": 0}, "files": [{"sha": "daee2b783ef790cdde5f26706c91c200f932a652", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/59d484575a714291481563d13ad058b9a3d31fa8/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d484575a714291481563d13ad058b9a3d31fa8/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=59d484575a714291481563d13ad058b9a3d31fa8", "patch": "@@ -1301,3 +1301,60 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnionsWithDropFields {\n         }\n     }\n }\n+\n+/// Lint for items marked `pub` that aren't reachable from other crates\n+pub struct UnreachablePub;\n+\n+declare_lint! {\n+    UNREACHABLE_PUB,\n+    Allow,\n+    \"`pub` items not reachable from crate root\"\n+}\n+\n+impl LintPass for UnreachablePub {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(UNREACHABLE_PUB)\n+    }\n+}\n+\n+impl UnreachablePub {\n+    fn perform_lint(&self, cx: &LateContext, what: &str, id: ast::NodeId,\n+                    vis: &hir::Visibility, span: Span, exportable: bool) {\n+        if !cx.access_levels.is_reachable(id) && *vis == hir::Visibility::Public {\n+            let def_span = cx.tcx.sess.codemap().def_span(span);\n+            let mut err = cx.struct_span_lint(UNREACHABLE_PUB, def_span,\n+                                              &format!(\"unreachable `pub` {}\", what));\n+            // visibility is token at start of declaration (can be macro\n+            // variable rather than literal `pub`)\n+            let pub_span = cx.tcx.sess.codemap().span_until_char(def_span, ' ');\n+            let replacement = if cx.tcx.sess.features.borrow().crate_visibility_modifier {\n+                \"crate\"\n+            } else {\n+                \"pub(crate)\"\n+            }.to_owned();\n+            err.span_suggestion(pub_span, \"consider restricting its visibility\", replacement);\n+            if exportable {\n+                err.help(\"or consider exporting it for use by other crates\");\n+            }\n+            err.emit();\n+        }\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnreachablePub {\n+    fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n+        self.perform_lint(cx, \"item\", item.id, &item.vis, item.span, true);\n+    }\n+\n+    fn check_foreign_item(&mut self, cx: &LateContext, foreign_item: &hir::ForeignItem) {\n+        self.perform_lint(cx, \"item\", foreign_item.id, &foreign_item.vis, foreign_item.span, true);\n+    }\n+\n+    fn check_struct_field(&mut self, cx: &LateContext, field: &hir::StructField) {\n+        self.perform_lint(cx, \"field\", field.id, &field.vis, field.span, false);\n+    }\n+\n+    fn check_impl_item(&mut self, cx: &LateContext, impl_item: &hir::ImplItem) {\n+        self.perform_lint(cx, \"item\", impl_item.id, &impl_item.vis, impl_item.span, false);\n+    }\n+}"}, {"sha": "5ff29189b2c10f21b41b755d9b473a20b7856faf", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59d484575a714291481563d13ad058b9a3d31fa8/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d484575a714291481563d13ad058b9a3d31fa8/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=59d484575a714291481563d13ad058b9a3d31fa8", "patch": "@@ -137,6 +137,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  PluginAsLibrary,\n                  MutableTransmutes,\n                  UnionsWithDropFields,\n+                 UnreachablePub,\n                  );\n \n     add_builtin_with_new!(sess,"}, {"sha": "b794f6c9517e851fcb0da3d16b72c628dbd686b2", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/59d484575a714291481563d13ad058b9a3d31fa8/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d484575a714291481563d13ad058b9a3d31fa8/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs?ref=59d484575a714291481563d13ad058b9a3d31fa8", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This is just like unreachable_pub.rs, but without the\n+// `crate_visibility_modifier` feature (so that we can test the suggestions to\n+// use `pub(crate)` that are given when that feature is off, as opposed to the\n+// suggestions to use `crate` given when it is on). When that feature becomes\n+// stable, this test can be deleted.\n+\n+#![feature(macro_vis_matcher)]\n+\n+#![allow(unused)]\n+#![warn(unreachable_pub)]\n+\n+mod private_mod {\n+    // non-leaked `pub` items in private module should be linted\n+    pub use std::fmt;\n+\n+    pub struct Hydrogen {\n+        // `pub` struct fields, too\n+        pub neutrons: usize,\n+        // (... but not more-restricted fields)\n+        pub(crate) electrons: usize\n+    }\n+    impl Hydrogen {\n+        // impls, too\n+        pub fn count_neutrons(&self) -> usize { self.neutrons }\n+        pub(crate) fn count_electrons(&self) -> usize { self.electrons }\n+    }\n+\n+    pub enum Helium {}\n+    pub union Lithium { c1: usize, c2: u8 }\n+    pub fn beryllium() {}\n+    pub trait Boron {}\n+    pub const CARBON: usize = 1;\n+    pub static NITROGEN: usize = 2;\n+    pub type Oxygen = bool;\n+\n+    macro_rules! define_empty_struct_with_visibility {\n+        ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n+    }\n+    define_empty_struct_with_visibility!(pub, Fluorine);\n+\n+    extern {\n+        pub fn catalyze() -> bool;\n+    }\n+\n+    // items leaked through signatures (see `get_neon` below) are OK\n+    pub struct Neon {}\n+\n+    // crate-visible items are OK\n+    pub(crate) struct Sodium {}\n+}\n+\n+pub mod public_mod {\n+    // module is public: these are OK, too\n+    pub struct Magnesium {}\n+    pub(crate) struct Aluminum {}\n+}\n+\n+pub fn get_neon() -> private_mod::Neon {\n+    private_mod::Neon {}\n+}\n+\n+fn main() {\n+    let _ = get_neon();\n+}"}, {"sha": "84cbf87c1a1c46dfcff58b371d581d5c7fc057c6", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.stderr", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/59d484575a714291481563d13ad058b9a3d31fa8/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59d484575a714291481563d13ad058b9a3d31fa8/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr?ref=59d484575a714291481563d13ad058b9a3d31fa8", "patch": "@@ -0,0 +1,134 @@\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub-pub_crate.rs:24:5\n+   |\n+24 |     pub use std::fmt;\n+   |     ---^^^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `pub(crate)`\n+   |\n+note: lint level defined here\n+  --> $DIR/unreachable_pub-pub_crate.rs:20:9\n+   |\n+20 | #![warn(unreachable_pub)]\n+   |         ^^^^^^^^^^^^^^^\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub-pub_crate.rs:26:5\n+   |\n+26 |     pub struct Hydrogen {\n+   |     ---^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `pub(crate)`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` field\n+  --> $DIR/unreachable_pub-pub_crate.rs:28:9\n+   |\n+28 |         pub neutrons: usize,\n+   |         ---^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: consider restricting its visibility: `pub(crate)`\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub-pub_crate.rs:34:9\n+   |\n+34 |         pub fn count_neutrons(&self) -> usize { self.neutrons }\n+   |         ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: consider restricting its visibility: `pub(crate)`\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub-pub_crate.rs:38:5\n+   |\n+38 |     pub enum Helium {}\n+   |     ---^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `pub(crate)`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub-pub_crate.rs:39:5\n+   |\n+39 |     pub union Lithium { c1: usize, c2: u8 }\n+   |     ---^^^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `pub(crate)`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub-pub_crate.rs:40:5\n+   |\n+40 |     pub fn beryllium() {}\n+   |     ---^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `pub(crate)`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub-pub_crate.rs:41:5\n+   |\n+41 |     pub trait Boron {}\n+   |     ---^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `pub(crate)`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub-pub_crate.rs:42:5\n+   |\n+42 |     pub const CARBON: usize = 1;\n+   |     ---^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `pub(crate)`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub-pub_crate.rs:43:5\n+   |\n+43 |     pub static NITROGEN: usize = 2;\n+   |     ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `pub(crate)`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub-pub_crate.rs:44:5\n+   |\n+44 |     pub type Oxygen = bool;\n+   |     ---^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `pub(crate)`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub-pub_crate.rs:47:47\n+   |\n+47 |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n+   |                                               -----------^^^^^^^^^^^^^\n+   |                                               |\n+   |                                               help: consider restricting its visibility: `pub(crate)`\n+48 |     }\n+49 |     define_empty_struct_with_visibility!(pub, Fluorine);\n+   |     ---------------------------------------------------- in this macro invocation\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub-pub_crate.rs:52:9\n+   |\n+52 |         pub fn catalyze() -> bool;\n+   |         ---^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: consider restricting its visibility: `pub(crate)`\n+   |\n+   = help: or consider exporting it for use by other crates\n+"}, {"sha": "5812061dfdb1ec1e049071cdc838ec41f6031f3e", "filename": "src/test/ui/lint/unreachable_pub.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/59d484575a714291481563d13ad058b9a3d31fa8/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d484575a714291481563d13ad058b9a3d31fa8/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs?ref=59d484575a714291481563d13ad058b9a3d31fa8", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(crate_visibility_modifier)]\n+#![feature(macro_vis_matcher)]\n+\n+#![allow(unused)]\n+#![warn(unreachable_pub)]\n+\n+mod private_mod {\n+    // non-leaked `pub` items in private module should be linted\n+    pub use std::fmt;\n+\n+    pub struct Hydrogen {\n+        // `pub` struct fields, too\n+        pub neutrons: usize,\n+        // (... but not more-restricted fields)\n+        crate electrons: usize\n+    }\n+    impl Hydrogen {\n+        // impls, too\n+        pub fn count_neutrons(&self) -> usize { self.neutrons }\n+        crate fn count_electrons(&self) -> usize { self.electrons }\n+    }\n+\n+    pub enum Helium {}\n+    pub union Lithium { c1: usize, c2: u8 }\n+    pub fn beryllium() {}\n+    pub trait Boron {}\n+    pub const CARBON: usize = 1;\n+    pub static NITROGEN: usize = 2;\n+    pub type Oxygen = bool;\n+\n+    macro_rules! define_empty_struct_with_visibility {\n+        ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n+    }\n+    define_empty_struct_with_visibility!(pub, Fluorine);\n+\n+    extern {\n+        pub fn catalyze() -> bool;\n+    }\n+\n+    // items leaked through signatures (see `get_neon` below) are OK\n+    pub struct Neon {}\n+\n+    // crate-visible items are OK\n+    crate struct Sodium {}\n+}\n+\n+pub mod public_mod {\n+    // module is public: these are OK, too\n+    pub struct Magnesium {}\n+    crate struct Aluminum {}\n+}\n+\n+pub fn get_neon() -> private_mod::Neon {\n+    private_mod::Neon {}\n+}\n+\n+fn main() {\n+    let _ = get_neon();\n+}"}, {"sha": "bdd016ff2df209439e77cbb84e9f7681e8101267", "filename": "src/test/ui/lint/unreachable_pub.stderr", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/59d484575a714291481563d13ad058b9a3d31fa8/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59d484575a714291481563d13ad058b9a3d31fa8/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr?ref=59d484575a714291481563d13ad058b9a3d31fa8", "patch": "@@ -0,0 +1,134 @@\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub.rs:19:5\n+   |\n+19 |     pub use std::fmt;\n+   |     ---^^^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `crate`\n+   |\n+note: lint level defined here\n+  --> $DIR/unreachable_pub.rs:15:9\n+   |\n+15 | #![warn(unreachable_pub)]\n+   |         ^^^^^^^^^^^^^^^\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub.rs:21:5\n+   |\n+21 |     pub struct Hydrogen {\n+   |     ---^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `crate`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` field\n+  --> $DIR/unreachable_pub.rs:23:9\n+   |\n+23 |         pub neutrons: usize,\n+   |         ---^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: consider restricting its visibility: `crate`\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub.rs:29:9\n+   |\n+29 |         pub fn count_neutrons(&self) -> usize { self.neutrons }\n+   |         ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: consider restricting its visibility: `crate`\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub.rs:33:5\n+   |\n+33 |     pub enum Helium {}\n+   |     ---^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `crate`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub.rs:34:5\n+   |\n+34 |     pub union Lithium { c1: usize, c2: u8 }\n+   |     ---^^^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `crate`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub.rs:35:5\n+   |\n+35 |     pub fn beryllium() {}\n+   |     ---^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `crate`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub.rs:36:5\n+   |\n+36 |     pub trait Boron {}\n+   |     ---^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `crate`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub.rs:37:5\n+   |\n+37 |     pub const CARBON: usize = 1;\n+   |     ---^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `crate`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub.rs:38:5\n+   |\n+38 |     pub static NITROGEN: usize = 2;\n+   |     ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `crate`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub.rs:39:5\n+   |\n+39 |     pub type Oxygen = bool;\n+   |     ---^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `crate`\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub.rs:42:47\n+   |\n+42 |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n+   |                                               -----------^^^^^^^^^^^^^\n+   |                                               |\n+   |                                               help: consider restricting its visibility: `crate`\n+43 |     }\n+44 |     define_empty_struct_with_visibility!(pub, Fluorine);\n+   |     ---------------------------------------------------- in this macro invocation\n+   |\n+   = help: or consider exporting it for use by other crates\n+\n+warning: unreachable `pub` item\n+  --> $DIR/unreachable_pub.rs:47:9\n+   |\n+47 |         pub fn catalyze() -> bool;\n+   |         ---^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: consider restricting its visibility: `crate`\n+   |\n+   = help: or consider exporting it for use by other crates\n+"}]}