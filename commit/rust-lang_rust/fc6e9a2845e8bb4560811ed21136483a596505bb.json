{"sha": "fc6e9a2845e8bb4560811ed21136483a596505bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNmU5YTI4NDVlOGJiNDU2MDgxMWVkMjExMzY0ODNhNTk2NTA1YmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-03T08:48:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-03T08:48:35Z"}, "message": "Auto merge of #58062 - SimonSapin:iter_from_fn, r=alexcrichton\n\nRename iter::unfold to iter::from_fn and remove explicit state\n\nThis API is unstable.\n\nCC https://github.com/rust-lang/rust/issues/55977#issuecomment-459657195", "tree": {"sha": "7e784a3eb7ddcd609d32519bd2f8a27a33df397a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e784a3eb7ddcd609d32519bd2f8a27a33df397a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc6e9a2845e8bb4560811ed21136483a596505bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6e9a2845e8bb4560811ed21136483a596505bb", "html_url": "https://github.com/rust-lang/rust/commit/fc6e9a2845e8bb4560811ed21136483a596505bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc6e9a2845e8bb4560811ed21136483a596505bb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2966fbc10d0fd4fe15a25608b9eca3e52ba24995", "url": "https://api.github.com/repos/rust-lang/rust/commits/2966fbc10d0fd4fe15a25608b9eca3e52ba24995", "html_url": "https://github.com/rust-lang/rust/commit/2966fbc10d0fd4fe15a25608b9eca3e52ba24995"}, {"sha": "61e92b586b550fc46d0d8b83f711b27f937ca87f", "url": "https://api.github.com/repos/rust-lang/rust/commits/61e92b586b550fc46d0d8b83f711b27f937ca87f", "html_url": "https://github.com/rust-lang/rust/commit/61e92b586b550fc46d0d8b83f711b27f937ca87f"}], "stats": {"total": 57, "additions": 25, "deletions": 32}, "files": [{"sha": "4e1dc108cc9bd69e73f665eb6afc547db3b7fc3d", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc6e9a2845e8bb4560811ed21136483a596505bb/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6e9a2845e8bb4560811ed21136483a596505bb/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=fc6e9a2845e8bb4560811ed21136483a596505bb", "patch": "@@ -327,7 +327,7 @@ pub use self::sources::{Once, once};\n #[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n pub use self::sources::{OnceWith, once_with};\n #[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n-pub use self::sources::{Unfold, unfold, Successors, successors};\n+pub use self::sources::{FromFn, from_fn, Successors, successors};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::traits::{FromIterator, IntoIterator, DoubleEndedIterator, Extend};"}, {"sha": "2b741e66170aa2ac4f7e31720ada5c6fff6aae57", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 24, "deletions": 31, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fc6e9a2845e8bb4560811ed21136483a596505bb/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6e9a2845e8bb4560811ed21136483a596505bb/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=fc6e9a2845e8bb4560811ed21136483a596505bb", "patch": "@@ -491,24 +491,24 @@ pub fn once_with<A, F: FnOnce() -> A>(gen: F) -> OnceWith<F> {\n }\n \n /// Creates a new iterator where each iteration calls the provided closure\n-/// `F: FnMut(&mut St) -> Option<T>`.\n+/// `F: FnMut() -> Option<T>`.\n ///\n /// This allows creating a custom iterator with any behavior\n /// without using the more verbose syntax of creating a dedicated type\n /// and implementing the `Iterator` trait for it.\n ///\n-/// In addition to its captures and environment,\n-/// the closure is given a mutable reference to some state\n-/// that is preserved across iterations.\n-/// That state starts as the given `initial_state` value.\n-///\n-/// Note that the `Unfold` iterator doesn\u2019t make assumptions about the behavior of the closure,\n+/// Note that the `FromFn` iterator doesn\u2019t make assumptions about the behavior of the closure,\n /// and therefore conservatively does not implement [`FusedIterator`],\n /// or override [`Iterator::size_hint`] from its default `(0, None)`.\n ///\n /// [`FusedIterator`]: trait.FusedIterator.html\n /// [`Iterator::size_hint`]: trait.Iterator.html#method.size_hint\n ///\n+/// The closure can use its its captures and environment\n+/// to track state across iterations.\n+/// Depending on how the iterator is used,\n+/// this may require specifying the `move` keyword on the closure.\n+///\n /// # Examples\n ///\n /// Let\u2019s re-implement the counter iterator from [module-level documentation]:\n@@ -517,13 +517,14 @@ pub fn once_with<A, F: FnOnce() -> A>(gen: F) -> OnceWith<F> {\n ///\n /// ```\n /// #![feature(iter_unfold)]\n-/// let counter = std::iter::unfold(0, |count| {\n+/// let mut count = 0;\n+/// let counter = std::iter::from_fn(move || {\n ///     // Increment our count. This is why we started at zero.\n-///     *count += 1;\n+///     count += 1;\n ///\n ///     // Check to see if we've finished counting or not.\n-///     if *count < 6 {\n-///         Some(*count)\n+///     if count < 6 {\n+///         Some(count)\n ///     } else {\n ///         None\n ///     }\n@@ -532,46 +533,38 @@ pub fn once_with<A, F: FnOnce() -> A>(gen: F) -> OnceWith<F> {\n /// ```\n #[inline]\n #[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n-pub fn unfold<St, T, F>(initial_state: St, f: F) -> Unfold<St, F>\n-    where F: FnMut(&mut St) -> Option<T>\n+pub fn from_fn<T, F>(f: F) -> FromFn<F>\n+    where F: FnMut() -> Option<T>\n {\n-    Unfold {\n-        state: initial_state,\n-        f,\n-    }\n+    FromFn(f)\n }\n \n-/// An iterator where each iteration calls the provided closure `F: FnMut(&mut St) -> Option<T>`.\n+/// An iterator where each iteration calls the provided closure `F: FnMut() -> Option<T>`.\n ///\n-/// This `struct` is created by the [`unfold`] function.\n+/// This `struct` is created by the [`iter::from_fn`] function.\n /// See its documentation for more.\n ///\n-/// [`unfold`]: fn.unfold.html\n+/// [`iter::from_fn`]: fn.from_fn.html\n #[derive(Clone)]\n #[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n-pub struct Unfold<St, F> {\n-    state: St,\n-    f: F,\n-}\n+pub struct FromFn<F>(F);\n \n #[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n-impl<St, T, F> Iterator for Unfold<St, F>\n-    where F: FnMut(&mut St) -> Option<T>\n+impl<T, F> Iterator for FromFn<F>\n+    where F: FnMut() -> Option<T>\n {\n     type Item = T;\n \n     #[inline]\n     fn next(&mut self) -> Option<Self::Item> {\n-        (self.f)(&mut self.state)\n+        (self.0)()\n     }\n }\n \n #[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n-impl<St: fmt::Debug, F> fmt::Debug for Unfold<St, F> {\n+impl<F> fmt::Debug for FromFn<F> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_struct(\"Unfold\")\n-            .field(\"state\", &self.state)\n-            .finish()\n+        f.debug_struct(\"FromFn\").finish()\n     }\n }\n "}]}