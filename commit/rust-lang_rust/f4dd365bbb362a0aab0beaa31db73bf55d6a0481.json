{"sha": "f4dd365bbb362a0aab0beaa31db73bf55d6a0481", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZGQzNjViYmIzNjJhMGFhYjBiZWFhMzFkYjczYmY1NWQ2YTA0ODE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-10T19:19:40Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-11T17:48:53Z"}, "message": "Add E0609", "tree": {"sha": "0bbcccd00e35b8ce6146579fc6f95326cd0082fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bbcccd00e35b8ce6146579fc6f95326cd0082fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4dd365bbb362a0aab0beaa31db73bf55d6a0481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4dd365bbb362a0aab0beaa31db73bf55d6a0481", "html_url": "https://github.com/rust-lang/rust/commit/f4dd365bbb362a0aab0beaa31db73bf55d6a0481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4dd365bbb362a0aab0beaa31db73bf55d6a0481/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1480499b484d142dfa704ae20bd33eae518c1d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1480499b484d142dfa704ae20bd33eae518c1d0", "html_url": "https://github.com/rust-lang/rust/commit/e1480499b484d142dfa704ae20bd33eae518c1d0"}], "stats": {"total": 73, "additions": 64, "deletions": 9}, "files": [{"sha": "9f0ee92930d395a8594e05bb7715110a59c2847c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f4dd365bbb362a0aab0beaa31db73bf55d6a0481/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4dd365bbb362a0aab0beaa31db73bf55d6a0481/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f4dd365bbb362a0aab0beaa31db73bf55d6a0481", "patch": "@@ -2921,10 +2921,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 .emit();\n             self.tcx().types.err\n         } else {\n-            let mut err = self.type_error_struct(field.span, |actual| {\n-                format!(\"no field `{}` on type `{}`\",\n-                        field.node, actual)\n-            }, expr_t);\n+            let mut err = type_error_struct!(self.tcx().sess, field.span, expr_t, E0609,\n+                                             \"no field `{}` on type `{}`\",\n+                                             field.node, expr_t);\n             match expr_t.sty {\n                 ty::TyAdt(def, _) if !def.is_enum() => {\n                     if let Some(suggested_field_name) ="}, {"sha": "4f1eb929b8e839d12bd091cae719471c49dbaf0b", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f4dd365bbb362a0aab0beaa31db73bf55d6a0481/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4dd365bbb362a0aab0beaa31db73bf55d6a0481/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=f4dd365bbb362a0aab0beaa31db73bf55d6a0481", "patch": "@@ -4095,6 +4095,33 @@ assert_eq!(!Question::No, true);\n ```\n \"##,\n \n+E0609: r##\"\n+An attempt to access a non-existent field in a struct was performed.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0609\n+struct StructWithFields {\n+    x: u32,\n+}\n+\n+let s = StructWithFields { x: 0 };\n+println!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n+```\n+\n+To fix this error, check if you didn't misspell the field's name or that the\n+field actually exist. Example:\n+\n+```\n+struct StructWithFields {\n+    x: u32,\n+}\n+\n+let s = StructWithFields { x: 0 };\n+println!(\"{}\", s.x); // ok!\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "e8ecf58072a6988007148e277ddf40ca7b5a0a97", "filename": "src/libsyntax/diagnostics/macros.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f4dd365bbb362a0aab0beaa31db73bf55d6a0481/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4dd365bbb362a0aab0beaa31db73bf55d6a0481/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs?ref=f4dd365bbb362a0aab0beaa31db73bf55d6a0481", "patch": "@@ -74,6 +74,17 @@ macro_rules! struct_span_err {\n     })\n }\n \n+#[macro_export]\n+macro_rules! type_error_struct {\n+    ($session:expr, $span:expr, $typ:expr, $code:ident, $($message:tt)*) => ({\n+        if $typ.references_error() {\n+            $session.diagnostic().struct_dummy()\n+        } else {\n+            struct_span_err!($session, $span, $code, $($message)*)\n+        }\n+    })\n+}\n+\n #[macro_export]\n macro_rules! struct_span_warn {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({"}, {"sha": "f76c97274bdeaaa6109c8e4093c8302992b6bd31", "filename": "src/test/compile-fail/E0609.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f4dd365bbb362a0aab0beaa31db73bf55d6a0481/src%2Ftest%2Fcompile-fail%2FE0609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4dd365bbb362a0aab0beaa31db73bf55d6a0481/src%2Ftest%2Fcompile-fail%2FE0609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0609.rs?ref=f4dd365bbb362a0aab0beaa31db73bf55d6a0481", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    x: u32,\n+}\n+\n+fn main() {\n+    let x = Foo { x: 0 };\n+    let _ = x.foo; //~ ERROR E0609\n+}"}, {"sha": "a8d978d55140b93cf19f4715cfabd0fe866f0321", "filename": "src/test/ui/did_you_mean/issue-36798.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4dd365bbb362a0aab0beaa31db73bf55d6a0481/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4dd365bbb362a0aab0beaa31db73bf55d6a0481/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr?ref=f4dd365bbb362a0aab0beaa31db73bf55d6a0481", "patch": "@@ -1,4 +1,4 @@\n-error: no field `baz` on type `Foo`\n+error[E0609]: no field `baz` on type `Foo`\n   --> $DIR/issue-36798.rs:17:7\n    |\n 17 |     f.baz;"}, {"sha": "8228f9f3face95e36023fdd1fbb45d1d9e663cca", "filename": "src/test/ui/did_you_mean/issue-36798_unknown_field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4dd365bbb362a0aab0beaa31db73bf55d6a0481/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4dd365bbb362a0aab0beaa31db73bf55d6a0481/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr?ref=f4dd365bbb362a0aab0beaa31db73bf55d6a0481", "patch": "@@ -1,4 +1,4 @@\n-error: no field `zz` on type `Foo`\n+error[E0609]: no field `zz` on type `Foo`\n   --> $DIR/issue-36798_unknown_field.rs:17:7\n    |\n 17 |     f.zz;"}, {"sha": "9694783b08b94f0fb58ce4db67f12d020497365f", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4dd365bbb362a0aab0beaa31db73bf55d6a0481/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4dd365bbb362a0aab0beaa31db73bf55d6a0481/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=f4dd365bbb362a0aab0beaa31db73bf55d6a0481", "patch": "@@ -7,7 +7,7 @@ error[E0599]: no method named `fake` found for type `{integer}` in the current s\n 50 |     fake_method_stmt!();\n    |     -------------------- in this macro invocation\n \n-error: no field `fake` on type `{integer}`\n+error[E0609]: no field `fake` on type `{integer}`\n   --> $DIR/macro-backtrace-invalid-internals.rs:21:13\n    |\n 21 |           1.fake\n@@ -34,7 +34,7 @@ error[E0599]: no method named `fake` found for type `{integer}` in the current s\n 54 |     let _ = fake_method_expr!();\n    |             ------------------- in this macro invocation\n \n-error: no field `fake` on type `{integer}`\n+error[E0609]: no field `fake` on type `{integer}`\n   --> $DIR/macro-backtrace-invalid-internals.rs:39:13\n    |\n 39 |           1.fake"}, {"sha": "58cd130dcc2534d52f3f827e44b4953b83f15824", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4dd365bbb362a0aab0beaa31db73bf55d6a0481/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4dd365bbb362a0aab0beaa31db73bf55d6a0481/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=f4dd365bbb362a0aab0beaa31db73bf55d6a0481", "patch": "@@ -14,7 +14,7 @@ error: casting `*const U` as `*const str` is invalid\n    |\n    = note: vtable kinds may not match\n \n-error: no field `f` on type `fn() {main}`\n+error[E0609]: no field `f` on type `fn() {main}`\n   --> $DIR/cast-rfc0401.rs:75:18\n    |\n 75 |     let _ = main.f as *const u32;"}]}