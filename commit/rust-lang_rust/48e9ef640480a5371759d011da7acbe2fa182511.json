{"sha": "48e9ef640480a5371759d011da7acbe2fa182511", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZTllZjY0MDQ4MGE1MzcxNzU5ZDAxMWRhN2FjYmUyZmExODI1MTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-02T08:28:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-02T08:28:20Z"}, "message": "Auto merge of #25958 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #25751, #25821, #25920, #25932, #25933, #25936, #25941, #25949, #25951\n- Failed merges:", "tree": {"sha": "8655cf3be1ed8201ea85a47b0069cb3cb07f6474", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8655cf3be1ed8201ea85a47b0069cb3cb07f6474"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48e9ef640480a5371759d011da7acbe2fa182511", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48e9ef640480a5371759d011da7acbe2fa182511", "html_url": "https://github.com/rust-lang/rust/commit/48e9ef640480a5371759d011da7acbe2fa182511", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48e9ef640480a5371759d011da7acbe2fa182511/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f14190199cdbcd508e0ac28e8c62c61dea404230", "url": "https://api.github.com/repos/rust-lang/rust/commits/f14190199cdbcd508e0ac28e8c62c61dea404230", "html_url": "https://github.com/rust-lang/rust/commit/f14190199cdbcd508e0ac28e8c62c61dea404230"}, {"sha": "6e97b16d0277d86fb06a158683ef3c15ece14a62", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e97b16d0277d86fb06a158683ef3c15ece14a62", "html_url": "https://github.com/rust-lang/rust/commit/6e97b16d0277d86fb06a158683ef3c15ece14a62"}], "stats": {"total": 53, "additions": 31, "deletions": 22}, "files": [{"sha": "32d1fcf3968fc054dd67ac43c44434be19438249", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48e9ef640480a5371759d011da7acbe2fa182511/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/48e9ef640480a5371759d011da7acbe2fa182511/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=48e9ef640480a5371759d011da7acbe2fa182511", "patch": "@@ -74,9 +74,6 @@ ifneq ($(wildcard $(subst $(SPACE),\\$(SPACE),$(CFG_GIT_DIR))),)\n endif\n endif\n \n-CFG_BUILD_DATE = $(shell date +%F)\n-CFG_VERSION += (built $(CFG_BUILD_DATE))\n-\n # Windows exe's need numeric versions - don't use anything but\n # numbers and dots here\n CFG_VERSION_WIN = $(CFG_RELEASE_NUM)\n@@ -130,9 +127,7 @@ CFG_JEMALLOC_FLAGS += $(JEMALLOC_FLAGS)\n \n ifdef CFG_ENABLE_DEBUG_ASSERTIONS\n   $(info cfg: enabling debug assertions (CFG_ENABLE_DEBUG_ASSERTIONS))\n-  CFG_RUSTC_FLAGS += --cfg debug -C debug-assertions=on\n-else\n-  CFG_RUSTC_FLAGS += --cfg ndebug\n+  CFG_RUSTC_FLAGS += -C debug-assertions=on\n endif\n \n ifdef CFG_ENABLE_DEBUGINFO\n@@ -334,7 +329,6 @@ endif\n ifdef CFG_VER_HASH\n export CFG_VER_HASH\n endif\n-export CFG_BUILD_DATE\n export CFG_VERSION\n export CFG_VERSION_WIN\n export CFG_RELEASE"}, {"sha": "f561cf5d70f56633b3668897fdf68153e8e2fae4", "filename": "src/doc/index.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/48e9ef640480a5371759d011da7acbe2fa182511/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/48e9ef640480a5371759d011da7acbe2fa182511/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=48e9ef640480a5371759d011da7acbe2fa182511", "patch": "@@ -86,3 +86,14 @@ something if you know its name.\n \n If you encounter an error while compiling your code you may be able to look it\n up in the [Rust Compiler Error Index](error-index.html).\n+\n+# Community Translations\n+\n+Several projects have been started to translate the documentation into other\n+languages:\n+\n+- [Russian](https://github.com/kgv/rust_book_ru)\n+- [Korean](https://github.com/rust-kr/doc.rust-kr.org)\n+- [Chinese](https://github.com/KaiserY/rust-book-chinese)\n+- [Spanish](https://github.com/goyox86/elpr)\n+"}, {"sha": "249c1cc7e34f6171c9673204923226da5a70fd64", "filename": "src/doc/trpl/iterators.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48e9ef640480a5371759d011da7acbe2fa182511/src%2Fdoc%2Ftrpl%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/48e9ef640480a5371759d011da7acbe2fa182511/src%2Fdoc%2Ftrpl%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fiterators.md?ref=48e9ef640480a5371759d011da7acbe2fa182511", "patch": "@@ -321,7 +321,7 @@ You can chain all three things together: start with an iterator, adapt it\n a few times, and then consume the result. Check it out:\n \n ```rust\n-(1..1000)\n+(1..)\n     .filter(|&x| x % 2 == 0)\n     .filter(|&x| x % 3 == 0)\n     .take(5)"}, {"sha": "0f189adf40abf77b070c8b352e8fef7b80e859c8", "filename": "src/doc/trpl/raw-pointers.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48e9ef640480a5371759d011da7acbe2fa182511/src%2Fdoc%2Ftrpl%2Fraw-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/48e9ef640480a5371759d011da7acbe2fa182511/src%2Fdoc%2Ftrpl%2Fraw-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fraw-pointers.md?ref=48e9ef640480a5371759d011da7acbe2fa182511", "patch": "@@ -77,7 +77,7 @@ For more operations on raw pointers, see [their API documentation][rawapi].\n # FFI\n \n Raw pointers are useful for FFI: Rust\u2019s `*const T` and `*mut T` are similar to\n-C\u2019s `const T*` and `T*`, respectfully. For more about this use, consult the\n+C\u2019s `const T*` and `T*`, respectively. For more about this use, consult the\n [FFI chapter][ffi].\n \n [ffi]: ffi.html"}, {"sha": "c328a58f0770efcf7f97021857cdcd33f14c17df", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48e9ef640480a5371759d011da7acbe2fa182511/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e9ef640480a5371759d011da7acbe2fa182511/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=48e9ef640480a5371759d011da7acbe2fa182511", "patch": "@@ -495,8 +495,7 @@ impl String {\n     ///\n     /// ```\n     /// let s = String::from(\"hello\");\n-    /// let b: &[_] = &[104, 101, 108, 108, 111];\n-    /// assert_eq!(s.as_bytes(), b);\n+    /// assert_eq!(s.as_bytes(), [104, 101, 108, 108, 111]);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "8d2d725251220d5ee55721256785e198e990aa71", "filename": "src/libcore/option.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48e9ef640480a5371759d011da7acbe2fa182511/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e9ef640480a5371759d011da7acbe2fa182511/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=48e9ef640480a5371759d011da7acbe2fa182511", "patch": "@@ -409,9 +409,11 @@ impl<T> Option<T> {\n     /// Convert an `Option<String>` into an `Option<usize>`, consuming the original:\n     ///\n     /// ```\n-    /// let num_as_str: Option<String> = Some(\"10\".to_string());\n-    /// // `Option::map` takes self *by value*, consuming `num_as_str`\n-    /// let num_as_int: Option<usize> = num_as_str.map(|n| n.len());\n+    /// let maybe_some_string = Some(String::from(\"Hello, World!\"));\n+    /// // `Option::map` takes self *by value*, consuming `maybe_some_string`\n+    /// let maybe_some_len = maybe_some_string.map(|s| s.len());\n+    ///\n+    /// assert_eq!(maybe_some_len, Some(13));\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "49879b472feb7e1838598a2ce977ca708d24ce35", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48e9ef640480a5371759d011da7acbe2fa182511/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e9ef640480a5371759d011da7acbe2fa182511/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=48e9ef640480a5371759d011da7acbe2fa182511", "patch": "@@ -483,10 +483,6 @@ pub fn commit_date_str() -> Option<&'static str> {\n     option_env!(\"CFG_VER_DATE\")\n }\n \n-pub fn build_date_str() -> Option<&'static str> {\n-    option_env!(\"CFG_BUILD_DATE\")\n-}\n-\n /// Prints version information and returns None on success or an error\n /// message on panic.\n pub fn version(binary: &str, matches: &getopts::Matches) {\n@@ -498,7 +494,6 @@ pub fn version(binary: &str, matches: &getopts::Matches) {\n         println!(\"binary: {}\", binary);\n         println!(\"commit-hash: {}\", unw(commit_hash_str()));\n         println!(\"commit-date: {}\", unw(commit_date_str()));\n-        println!(\"build-date: {}\", unw(build_date_str()));\n         println!(\"host: {}\", config::host_triple());\n         println!(\"release: {}\", unw(release_str()));\n     }"}, {"sha": "aaebdc34cd464729ca782eea957780be535fbbc6", "filename": "src/librustdoc/html/static/main.css", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48e9ef640480a5371759d011da7acbe2fa182511/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/48e9ef640480a5371759d011da7acbe2fa182511/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css?ref=48e9ef640480a5371759d011da7acbe2fa182511", "patch": "@@ -338,10 +338,10 @@ nav.sub {\n     font-size: 1em;\n     position: relative;\n }\n-/* Shift \"where ...\" part of method definition down a line */\n-.content .method .where { display: block; }\n+/* Shift \"where ...\" part of method or fn definition down a line */\n+.content .method .where, .content .fn .where { display: block; }\n /* Bit of whitespace to indent it */\n-.content .method .where::before { content: '  '; }\n+.content .method .where::before, .content .fn .where::before { content: '  '; }\n \n .content .methods > div { margin-left: 40px; }\n "}, {"sha": "c22f5d073de89c346ade8ce6013efc9e2b9f882f", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48e9ef640480a5371759d011da7acbe2fa182511/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e9ef640480a5371759d011da7acbe2fa182511/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=48e9ef640480a5371759d011da7acbe2fa182511", "patch": "@@ -660,6 +660,8 @@ impl f32 {\n     ///\n     /// assert_eq!(x.max(y), y);\n     /// ```\n+    ///\n+    /// If one of the arguments is NaN, then the other argument is returned.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn max(self, other: f32) -> f32 {\n@@ -674,6 +676,8 @@ impl f32 {\n     ///\n     /// assert_eq!(x.min(y), x);\n     /// ```\n+    ///\n+    /// If one of the arguments is NaN, then the other argument is returned.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn min(self, other: f32) -> f32 {"}, {"sha": "cde0b567ade0fc935cc51a7d7235afbef999062c", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48e9ef640480a5371759d011da7acbe2fa182511/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e9ef640480a5371759d011da7acbe2fa182511/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=48e9ef640480a5371759d011da7acbe2fa182511", "patch": "@@ -636,6 +636,8 @@ impl f64 {\n     ///\n     /// assert_eq!(x.max(y), y);\n     /// ```\n+    ///\n+    /// If one of the arguments is NaN, then the other argument is returned.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn max(self, other: f64) -> f64 {\n@@ -650,6 +652,8 @@ impl f64 {\n     ///\n     /// assert_eq!(x.min(y), x);\n     /// ```\n+    ///\n+    /// If one of the arguments is NaN, then the other argument is returned.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn min(self, other: f64) -> f64 {"}]}