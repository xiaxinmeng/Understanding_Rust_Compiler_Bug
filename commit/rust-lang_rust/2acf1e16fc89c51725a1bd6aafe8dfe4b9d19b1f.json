{"sha": "2acf1e16fc89c51725a1bd6aafe8dfe4b9d19b1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhY2YxZTE2ZmM4OWM1MTcyNWExYmQ2YWFmZThkZmU0YjlkMTliMWY=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-06-08T19:27:01Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-06-08T19:27:01Z"}, "message": "Construct doc individually", "tree": {"sha": "585458401511e090db48f204dabd7082b4da9f5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/585458401511e090db48f204dabd7082b4da9f5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2acf1e16fc89c51725a1bd6aafe8dfe4b9d19b1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2acf1e16fc89c51725a1bd6aafe8dfe4b9d19b1f", "html_url": "https://github.com/rust-lang/rust/commit/2acf1e16fc89c51725a1bd6aafe8dfe4b9d19b1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2acf1e16fc89c51725a1bd6aafe8dfe4b9d19b1f/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d46278d320fbc580db81a60be26d8efa6b024433", "url": "https://api.github.com/repos/rust-lang/rust/commits/d46278d320fbc580db81a60be26d8efa6b024433", "html_url": "https://github.com/rust-lang/rust/commit/d46278d320fbc580db81a60be26d8efa6b024433"}], "stats": {"total": 186, "additions": 141, "deletions": 45}, "files": [{"sha": "b2a925e2a4092511f50042c630b833c72269a4e1", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 107, "deletions": 33, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/2acf1e16fc89c51725a1bd6aafe8dfe4b9d19b1f/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2acf1e16fc89c51725a1bd6aafe8dfe4b9d19b1f/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=2acf1e16fc89c51725a1bd6aafe8dfe4b9d19b1f", "patch": "@@ -2,7 +2,7 @@ use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n     SyntaxNode, AstNode, SmolStr, TextRange, AstPtr,\n     SyntaxKind::{self, NAME},\n-    ast::{self, NameOwner, VisibilityOwner, TypeAscriptionOwner},\n+    ast::{self, NameOwner, VisibilityOwner, TypeAscriptionOwner, DocCommentsOwner},\n     algo::visit::{visitor, Visitor},\n };\n use hir::{ModuleSource, FieldSource, ImplItem};\n@@ -63,7 +63,7 @@ impl NavigationTarget {\n     }\n \n     pub(crate) fn from_bind_pat(file_id: FileId, pat: &ast::BindPat) -> NavigationTarget {\n-        NavigationTarget::from_named(file_id, pat)\n+        NavigationTarget::from_named(file_id, pat, None)\n     }\n \n     pub(crate) fn from_symbol(db: &RootDatabase, symbol: FileSymbol) -> NavigationTarget {\n@@ -78,7 +78,7 @@ impl NavigationTarget {\n             focus_range: symbol.name_range,\n             container_name: symbol.container_name.clone(),\n             description: description_inner(&node),\n-            docs: docs_inner(&node),\n+            docs: docs_from_symbol(db, &symbol),\n         }\n     }\n \n@@ -102,7 +102,7 @@ impl NavigationTarget {\n             kind: NAME,\n             container_name: None,\n             description: description_inner(&node),\n-            docs: docs_inner(&node),\n+            docs: None, //< No documentation for Pattern\n         }\n     }\n \n@@ -113,7 +113,8 @@ impl NavigationTarget {\n     ) -> NavigationTarget {\n         let (name, full_range) = (\"self\".into(), par.syntax_node_ptr().range());\n         let file = db.parse(file_id).tree;\n-        let node = par.to_node(file.syntax()).syntax().to_owned();\n+        let ast = par.to_node(file.syntax());\n+        let node = ast.syntax().to_owned();\n \n         NavigationTarget {\n             file_id,\n@@ -123,7 +124,7 @@ impl NavigationTarget {\n             kind: NAME,\n             container_name: None,\n             description: description_inner(&node),\n-            docs: docs_inner(&node),\n+            docs: None, //< No document node for SelfParam\n         }\n     }\n \n@@ -133,35 +134,47 @@ impl NavigationTarget {\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n         match source {\n             ModuleSource::SourceFile(node) => {\n-                NavigationTarget::from_syntax(file_id, name, None, node.syntax())\n-            }\n-            ModuleSource::Module(node) => {\n-                NavigationTarget::from_syntax(file_id, name, None, node.syntax())\n+                NavigationTarget::from_syntax(file_id, name, None, node.syntax(), None)\n             }\n+            ModuleSource::Module(node) => NavigationTarget::from_syntax(\n+                file_id,\n+                name,\n+                None,\n+                node.syntax(),\n+                node.doc_comment_text(),\n+            ),\n         }\n     }\n \n     pub(crate) fn from_module_to_decl(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n         if let Some((file_id, source)) = module.declaration_source(db) {\n             let file_id = file_id.as_original_file();\n-            return NavigationTarget::from_syntax(file_id, name, None, source.syntax());\n+            return NavigationTarget::from_syntax(\n+                file_id,\n+                name,\n+                None,\n+                source.syntax(),\n+                source.doc_comment_text(),\n+            );\n         }\n         NavigationTarget::from_module(db, module)\n     }\n \n     pub(crate) fn from_function(db: &RootDatabase, func: hir::Function) -> NavigationTarget {\n         let (file_id, fn_def) = func.source(db);\n-        NavigationTarget::from_named(file_id.original_file(db), &*fn_def)\n+        NavigationTarget::from_named(file_id.original_file(db), &*fn_def, fn_def.doc_comment_text())\n     }\n \n     pub(crate) fn from_field(db: &RootDatabase, field: hir::StructField) -> NavigationTarget {\n         let (file_id, field) = field.source(db);\n         let file_id = file_id.original_file(db);\n         match field {\n-            FieldSource::Named(it) => NavigationTarget::from_named(file_id, &*it),\n+            FieldSource::Named(it) => {\n+                NavigationTarget::from_named(file_id, &*it, it.doc_comment_text())\n+            }\n             FieldSource::Pos(it) => {\n-                NavigationTarget::from_syntax(file_id, \"\".into(), None, it.syntax())\n+                NavigationTarget::from_syntax(file_id, \"\".into(), None, it.syntax(), None)\n             }\n         }\n     }\n@@ -170,15 +183,27 @@ impl NavigationTarget {\n         match adt_def {\n             hir::AdtDef::Struct(s) => {\n                 let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                )\n             }\n             hir::AdtDef::Union(s) => {\n                 let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                )\n             }\n             hir::AdtDef::Enum(s) => {\n                 let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                )\n             }\n         }\n     }\n@@ -192,35 +217,67 @@ impl NavigationTarget {\n             hir::ModuleDef::Function(func) => NavigationTarget::from_function(db, func),\n             hir::ModuleDef::Struct(s) => {\n                 let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                )\n             }\n             hir::ModuleDef::Union(s) => {\n                 let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                )\n             }\n             hir::ModuleDef::Const(s) => {\n                 let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                )\n             }\n             hir::ModuleDef::Static(s) => {\n                 let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                )\n             }\n             hir::ModuleDef::Enum(e) => {\n                 let (file_id, node) = e.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                )\n             }\n             hir::ModuleDef::EnumVariant(var) => {\n                 let (file_id, node) = var.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                )\n             }\n             hir::ModuleDef::Trait(e) => {\n                 let (file_id, node) = e.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                )\n             }\n             hir::ModuleDef::TypeAlias(e) => {\n                 let (file_id, node) = e.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                )\n             }\n             hir::ModuleDef::BuiltinType(..) => {\n                 return None;\n@@ -239,6 +296,7 @@ impl NavigationTarget {\n             \"impl\".into(),\n             None,\n             node.syntax(),\n+            None,\n         )\n     }\n \n@@ -247,19 +305,27 @@ impl NavigationTarget {\n             ImplItem::Method(f) => NavigationTarget::from_function(db, f),\n             ImplItem::Const(c) => {\n                 let (file_id, node) = c.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                )\n             }\n             ImplItem::TypeAlias(a) => {\n                 let (file_id, node) = a.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                )\n             }\n         }\n     }\n \n     pub(crate) fn from_macro_def(db: &RootDatabase, macro_call: hir::MacroDef) -> NavigationTarget {\n         let (file_id, node) = macro_call.source(db);\n         log::debug!(\"nav target {}\", node.syntax().debug_dump());\n-        NavigationTarget::from_named(file_id.original_file(db), &*node)\n+        NavigationTarget::from_named(file_id.original_file(db), &*node, node.doc_comment_text())\n     }\n \n     #[cfg(test)]\n@@ -287,18 +353,23 @@ impl NavigationTarget {\n     }\n \n     /// Allows `NavigationTarget` to be created from a `NameOwner`\n-    pub(crate) fn from_named(file_id: FileId, node: &impl ast::NameOwner) -> NavigationTarget {\n+    pub(crate) fn from_named(\n+        file_id: FileId,\n+        node: &impl ast::NameOwner,\n+        docs: Option<String>,\n+    ) -> NavigationTarget {\n         //FIXME: use `_` instead of empty string\n         let name = node.name().map(|it| it.text().clone()).unwrap_or_default();\n         let focus_range = node.name().map(|it| it.syntax().range());\n-        NavigationTarget::from_syntax(file_id, name, focus_range, node.syntax())\n+        NavigationTarget::from_syntax(file_id, name, focus_range, node.syntax(), docs)\n     }\n \n     fn from_syntax(\n         file_id: FileId,\n         name: SmolStr,\n         focus_range: Option<TextRange>,\n         node: &SyntaxNode,\n+        docs: Option<String>,\n     ) -> NavigationTarget {\n         NavigationTarget {\n             file_id,\n@@ -309,12 +380,15 @@ impl NavigationTarget {\n             // ptr: Some(LocalSyntaxPtr::new(node)),\n             container_name: None,\n             description: description_inner(node),\n-            docs: docs_inner(node),\n+            docs,\n         }\n     }\n }\n \n-fn docs_inner(node: &SyntaxNode) -> Option<String> {\n+fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n+    let file = db.parse(symbol.file_id).tree;\n+    let node = symbol.ptr.to_node(file.syntax()).to_owned();\n+\n     fn doc_comments<N: ast::DocCommentsOwner>(node: &N) -> Option<String> {\n         node.doc_comment_text()\n     }\n@@ -334,7 +408,7 @@ fn docs_inner(node: &SyntaxNode) -> Option<String> {\n         .accept(&node)?\n }\n \n-/// Get a description of this node.\n+/// Get a description of a node.\n ///\n /// e.g. `struct Name`, `enum Name`, `fn Name`\n fn description_inner(node: &SyntaxNode) -> Option<String> {"}, {"sha": "fbd881bfea1b3c3e89b43011d6faf33ff988130c", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2acf1e16fc89c51725a1bd6aafe8dfe4b9d19b1f/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2acf1e16fc89c51725a1bd6aafe8dfe4b9d19b1f/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=2acf1e16fc89c51725a1bd6aafe8dfe4b9d19b1f", "patch": "@@ -1,6 +1,6 @@\n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n-    AstNode, ast,\n+    AstNode, ast::{self, DocCommentsOwner},\n     algo::{\n         find_node_at_offset,\n         visit::{visitor, Visitor},\n@@ -114,17 +114,39 @@ pub(crate) fn name_definition(\n \n fn named_target(file_id: FileId, node: &SyntaxNode) -> Option<NavigationTarget> {\n     visitor()\n-        .visit(|node: &ast::StructDef| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::EnumDef| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::EnumVariant| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::FnDef| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::TypeAliasDef| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::ConstDef| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::StaticDef| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::TraitDef| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::NamedFieldDef| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::Module| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::MacroCall| NavigationTarget::from_named(file_id, node))\n+        .visit(|node: &ast::StructDef| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+        })\n+        .visit(|node: &ast::EnumDef| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+        })\n+        .visit(|node: &ast::EnumVariant| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+        })\n+        .visit(|node: &ast::FnDef| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+        })\n+        .visit(|node: &ast::TypeAliasDef| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+        })\n+        .visit(|node: &ast::ConstDef| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+        })\n+        .visit(|node: &ast::StaticDef| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+        })\n+        .visit(|node: &ast::TraitDef| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+        })\n+        .visit(|node: &ast::NamedFieldDef| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+        })\n+        .visit(|node: &ast::Module| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+        })\n+        .visit(|node: &ast::MacroCall| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+        })\n         .accept(node)\n }\n "}]}