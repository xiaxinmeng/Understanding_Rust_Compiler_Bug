{"sha": "5f6a1159bbddf95d977e813a59739462902d7777", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNmExMTU5YmJkZGY5NWQ5NzdlODEzYTU5NzM5NDYyOTAyZDc3Nzc=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-02T00:20:56Z"}, "committer": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-04T03:54:00Z"}, "message": "Fix q-q so that non-expression q-q actually work when there is embed anti-q.", "tree": {"sha": "06200fef30dad34e85e5284be56286c1b185e7da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06200fef30dad34e85e5284be56286c1b185e7da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f6a1159bbddf95d977e813a59739462902d7777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f6a1159bbddf95d977e813a59739462902d7777", "html_url": "https://github.com/rust-lang/rust/commit/5f6a1159bbddf95d977e813a59739462902d7777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f6a1159bbddf95d977e813a59739462902d7777/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2dde9a69218ab350b442caec00d2b991ba2262c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2dde9a69218ab350b442caec00d2b991ba2262c", "html_url": "https://github.com/rust-lang/rust/commit/a2dde9a69218ab350b442caec00d2b991ba2262c"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "999c2a2449cafea3c6718dae0656ae25eeea6785", "filename": "src/comp/syntax/ext/qquote.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5f6a1159bbddf95d977e813a59739462902d7777/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f6a1159bbddf95d977e813a59739462902d7777/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs?ref=5f6a1159bbddf95d977e813a59739462902d7777", "patch": "@@ -18,7 +18,8 @@ import codemap::span;\n \n type aq_ctxt = @{lo: uint,\n                  mutable gather: [{lo: uint, hi: uint,\n-                                   e: @ast::expr, constr: str}]};\n+                                   e: @ast::expr,\n+                                   constr: str}]};\n enum fragment {\n     from_expr(@ast::expr),\n     from_ty(@ast::ty)\n@@ -29,6 +30,7 @@ iface qq_helper {\n     fn visit(aq_ctxt, vt<aq_ctxt>);\n     fn extract_mac() -> option<ast::mac_>;\n     fn mk_parse_fn(ext_ctxt,span) -> @ast::expr;\n+    fn get_fold_fn() -> str;\n }\n impl of qq_helper for @ast::expr {\n     fn span() -> span {self.span}\n@@ -42,6 +44,7 @@ impl of qq_helper for @ast::expr {\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n         mk_path(cx, sp, [\"syntax\", \"parse\", \"parser\", \"parse_expr\"])\n     }\n+    fn get_fold_fn() -> str {\"fold_expr\"}\n }\n impl of qq_helper for @ast::ty {\n     fn span() -> span {self.span}\n@@ -55,6 +58,7 @@ impl of qq_helper for @ast::ty {\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n         mk_path(cx, sp, [\"syntax\", \"ext\", \"qquote\", \"parse_ty\"])\n     }\n+    fn get_fold_fn() -> str {\"fold_ty\"}\n }\n impl of qq_helper for @ast::item {\n     fn span() -> span {self.span}\n@@ -63,6 +67,7 @@ impl of qq_helper for @ast::item {\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n         mk_path(cx, sp, [\"syntax\", \"ext\", \"qquote\", \"parse_item\"])\n     }\n+    fn get_fold_fn() -> str {\"fold_item\"}\n }\n impl of qq_helper for @ast::stmt {\n     fn span() -> span {self.span}\n@@ -71,6 +76,7 @@ impl of qq_helper for @ast::stmt {\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n         mk_path(cx, sp, [\"syntax\", \"ext\", \"qquote\", \"parse_stmt\"])\n     }\n+    fn get_fold_fn() -> str {\"fold_stmt\"}\n }\n impl of qq_helper for @ast::pat {\n     fn span() -> span {self.span}\n@@ -79,6 +85,7 @@ impl of qq_helper for @ast::pat {\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n         mk_path(cx, sp, [\"syntax\", \"parse\", \"parser\", \"parse_pat\"])\n     }\n+    fn get_fold_fn() -> str {\"fold_pat\"}\n }\n \n fn gather_anti_quotes<N: qq_helper>(lo: uint, node: N) -> aq_ctxt\n@@ -244,23 +251,30 @@ fn expand_qquote<N: qq_helper>\n                          mk_vec_e(cx,sp, vec::map(qcx.gather) {|g|\n                              mk_call(cx,sp,\n                                      [\"syntax\", \"ext\", \"qquote\", g.constr],\n-                                     [g.e])\n-                         })]);\n+                                     [g.e])}),\n+                         mk_path(cx,sp,\n+                                 [\"syntax\", \"ext\", \"qquote\",\n+                                  node.get_fold_fn()])]);\n     }\n-\n     ret rcall;\n }\n \n-fn replace(e: @ast::expr, repls: [fragment]) -> @ast::expr {\n+fn replace<T>(node: T, repls: [fragment], ff: fn (ast_fold, T) -> T)\n+    -> T\n+{\n     let aft = default_ast_fold();\n     let f_pre = {fold_expr: bind replace_expr(repls, _, _, _,\n                                               aft.fold_expr),\n                  fold_ty: bind replace_ty(repls, _, _, _,\n                                           aft.fold_ty)\n                  with *aft};\n-    let f = make_fold(f_pre);\n-    ret f.fold_expr(e);\n+    ret ff(make_fold(f_pre), node);\n }\n+fn fold_expr(f: ast_fold, &&n: @ast::expr) -> @ast::expr {f.fold_expr(n)}\n+fn fold_ty(f: ast_fold, &&n: @ast::ty) -> @ast::ty {f.fold_ty(n)}\n+fn fold_item(f: ast_fold, &&n: @ast::item) -> @ast::item {f.fold_item(n)}\n+fn fold_stmt(f: ast_fold, &&n: @ast::stmt) -> @ast::stmt {f.fold_stmt(n)}\n+fn fold_pat(f: ast_fold, &&n: @ast::pat) -> @ast::pat {f.fold_pat(n)}\n \n fn replace_expr(repls: [fragment],\n                 e: ast::expr_, s: span, fld: ast_fold,"}, {"sha": "e80628536b3d4e65ea9221b2f3bd71469437821b", "filename": "src/test/run-pass/qquote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f6a1159bbddf95d977e813a59739462902d7777/src%2Ftest%2Frun-pass%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f6a1159bbddf95d977e813a59739462902d7777/src%2Ftest%2Frun-pass%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fqquote.rs?ref=5f6a1159bbddf95d977e813a59739462902d7777", "patch": "@@ -62,8 +62,8 @@ fn main() {\n     let item = #ast(item){const x : int = 10;};\n     check_pp(item, pprust::print_item, \"const x: int = 10;\");\n \n-    //let item2: @ast::item = #ast(item){const x : int = $(abc);};\n-    //check_pp(item2, pprust::print_item, \"const x: int = 23;\");\n+    let item2: @ast::item = #ast(item){const x : int = $(abc);};\n+    check_pp(item2, pprust::print_item, \"const x: int = 23;\");\n \n     let stmt = #ast(stmt){let x = 20;};\n     check_pp(*stmt, pprust::print_stmt, \"let x = 20;\");"}]}