{"sha": "2753f1cbd4623063f19ca27caaac67308c94a536", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NTNmMWNiZDQ2MjMwNjNmMTljYTI3Y2FhYWM2NzMwOGM5NGE1MzY=", "commit": {"author": {"name": "Guillem Nieto", "email": "gnieto.talo@gmail.com", "date": "2018-10-29T23:25:05Z"}, "committer": {"name": "Guillem Nieto", "email": "gnieto@scopely.com", "date": "2018-11-25T22:34:23Z"}, "message": "Split lint into slow and unsafe vector initalization", "tree": {"sha": "7a9992dca3f6859e2c2d9922a85e5ed6ebac3ac7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a9992dca3f6859e2c2d9922a85e5ed6ebac3ac7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2753f1cbd4623063f19ca27caaac67308c94a536", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2753f1cbd4623063f19ca27caaac67308c94a536", "html_url": "https://github.com/rust-lang/rust/commit/2753f1cbd4623063f19ca27caaac67308c94a536", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2753f1cbd4623063f19ca27caaac67308c94a536/comments", "author": {"login": "gnieto", "id": 4637936, "node_id": "MDQ6VXNlcjQ2Mzc5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/4637936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnieto", "html_url": "https://github.com/gnieto", "followers_url": "https://api.github.com/users/gnieto/followers", "following_url": "https://api.github.com/users/gnieto/following{/other_user}", "gists_url": "https://api.github.com/users/gnieto/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnieto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnieto/subscriptions", "organizations_url": "https://api.github.com/users/gnieto/orgs", "repos_url": "https://api.github.com/users/gnieto/repos", "events_url": "https://api.github.com/users/gnieto/events{/privacy}", "received_events_url": "https://api.github.com/users/gnieto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnieto", "id": 4637936, "node_id": "MDQ6VXNlcjQ2Mzc5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/4637936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnieto", "html_url": "https://github.com/gnieto", "followers_url": "https://api.github.com/users/gnieto/followers", "following_url": "https://api.github.com/users/gnieto/following{/other_user}", "gists_url": "https://api.github.com/users/gnieto/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnieto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnieto/subscriptions", "organizations_url": "https://api.github.com/users/gnieto/orgs", "repos_url": "https://api.github.com/users/gnieto/repos", "events_url": "https://api.github.com/users/gnieto/events{/privacy}", "received_events_url": "https://api.github.com/users/gnieto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b4bc3b6efcb9daf8c1daf9f7f2a8bfa19973ad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4bc3b6efcb9daf8c1daf9f7f2a8bfa19973ad8", "html_url": "https://github.com/rust-lang/rust/commit/9b4bc3b6efcb9daf8c1daf9f7f2a8bfa19973ad8"}], "stats": {"total": 190, "additions": 96, "deletions": 94}, "files": [{"sha": "090125e36945cfcf05471ada4beea8d76e45fa80", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 72, "deletions": 28, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/2753f1cbd4623063f19ca27caaac67308c94a536/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2753f1cbd4623063f19ca27caaac67308c94a536/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=2753f1cbd4623063f19ca27caaac67308c94a536", "patch": "@@ -37,15 +37,36 @@ use crate::rustc_errors::{Applicability};\n declare_clippy_lint! {\n     pub SLOW_VECTOR_INITIALIZATION,\n     perf,\n-    \"slow or unsafe vector initialization\"\n+    \"slow vector initialization\"\n+}\n+\n+/// **What it does:** Checks unsafe vector initialization\n+///\n+/// **Why is this bad?** Changing the length of a vector may expose uninitialized memory, which\n+/// can lead to memory safety issues\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let mut vec1 = Vec::with_capacity(len);\n+/// unsafe { vec1.set_len(len); }\n+/// ```\n+declare_clippy_lint! {\n+    pub UNSAFE_VECTOR_INITIALIZATION,\n+    correctness,\n+    \"unsafe vector initialization\"\n }\n \n #[derive(Copy, Clone, Default)]\n pub struct Pass;\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(SLOW_VECTOR_INITIALIZATION)\n+        lint_array!(\n+            SLOW_VECTOR_INITIALIZATION,\n+            UNSAFE_VECTOR_INITIALIZATION,\n+        )\n     }\n }\n \n@@ -96,7 +117,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     len_expr: len_arg,\n                 };\n \n-                Pass::search_slow_initialization(cx, vi, expr.id, expr.span);\n+                Pass::search_slow_initialization(cx, vi, expr.id);\n             }\n         }\n     }\n@@ -117,7 +138,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     len_expr: len_arg,\n                 };\n \n-                Pass::search_slow_initialization(cx, vi, stmt.node.id(), stmt.span);\n+                Pass::search_slow_initialization(cx, vi, stmt.node.id());\n             }\n         }\n     }\n@@ -145,8 +166,7 @@ impl Pass {\n     fn search_slow_initialization<'tcx>(\n         cx: &LateContext<'_, 'tcx>,\n         vec_initialization: VecInitialization<'tcx>,\n-        parent_node: NodeId,\n-        parent_span: Span\n+        parent_node: NodeId\n     ) {\n         let enclosing_body = get_enclosing_block(cx, parent_node);\n \n@@ -163,30 +183,54 @@ impl Pass {\n \n         v.visit_block(enclosing_body.unwrap());\n \n-        if let Some(ref repeat_expr) = v.slow_expression {\n-            span_lint_and_then(\n-                cx,\n-                SLOW_VECTOR_INITIALIZATION,\n-                parent_span,\n-                \"detected slow zero-filling initialization\",\n-                |db| {\n-                    db.span_suggestion_with_applicability(v.vec_ini.initialization_expr.span, \"consider replacing with\", \"vec![0; ..]\".to_string(), Applicability::Unspecified);\n-\n-                    match repeat_expr {\n-                        InitializationType::Extend(e) => {\n-                            db.span_note(e.span, \"extended at\");\n-                        },\n-                        InitializationType::Resize(e) => {\n-                            db.span_note(e.span, \"resized at\");\n-                        },\n-                        InitializationType::UnsafeSetLen(e) => {\n-                            db.span_note(e.span, \"changed len at\");\n-                        },\n-                    }\n-                }\n-            );\n+        if let Some(ref initialization_expr) = v.slow_expression {\n+            let alloc_span = v.vec_ini.initialization_expr.span;\n+            Pass::lint_initialization(cx, initialization_expr, alloc_span);\n         }\n     }\n+\n+    fn lint_initialization<'tcx>(cx: &LateContext<'_, 'tcx>, initialization: &InitializationType<'tcx>, alloc_span: Span) {\n+        match initialization {\n+            InitializationType::UnsafeSetLen(e) =>\n+                Pass::lint_unsafe_initialization(cx, e, alloc_span),\n+\n+            InitializationType::Extend(e) |\n+            InitializationType::Resize(e) =>\n+                Pass::lint_slow_initialization(cx, e, alloc_span),\n+        };\n+    }\n+\n+    fn lint_slow_initialization<'tcx>(\n+        cx: &LateContext<'_, 'tcx>,\n+        slow_fill: &Expr,\n+        alloc_span: Span,\n+    ) {\n+        span_lint_and_then(\n+            cx,\n+            SLOW_VECTOR_INITIALIZATION,\n+            slow_fill.span,\n+            \"detected slow zero-filling initialization\",\n+            |db| {\n+                db.span_suggestion_with_applicability(alloc_span, \"consider replacing with\", \"vec![0; ..]\".to_string(), Applicability::Unspecified);\n+            }\n+        );\n+    }\n+\n+    fn lint_unsafe_initialization<'tcx>(\n+        cx: &LateContext<'_, 'tcx>,\n+        slow_fill: &Expr,\n+        alloc_span: Span,\n+    ) {\n+        span_lint_and_then(\n+            cx,\n+            UNSAFE_VECTOR_INITIALIZATION,\n+            slow_fill.span,\n+            \"detected unsafe vector initialization\",\n+            |db| {\n+                db.span_suggestion_with_applicability(alloc_span, \"consider replacing with\", \"vec![0; ..]\".to_string(), Applicability::Unspecified);\n+            }\n+        );\n+    }\n }\n \n /// SlowInitializationVisitor searches for slow zero filling vector initialization, for the given"}, {"sha": "74fd9be0a0be365174f2dcabf270a34b6dd905bd", "filename": "tests/ui/slow_vector_initialization.stderr", "status": "modified", "additions": 24, "deletions": 66, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/2753f1cbd4623063f19ca27caaac67308c94a536/tests%2Fui%2Fslow_vector_initialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2753f1cbd4623063f19ca27caaac67308c94a536/tests%2Fui%2Fslow_vector_initialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fslow_vector_initialization.stderr?ref=2753f1cbd4623063f19ca27caaac67308c94a536", "patch": "@@ -1,115 +1,73 @@\n error: detected slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:22:5\n-   |\n-22 |     let mut vec1 = Vec::with_capacity(len);\n-   |     ^^^^^^^^^^^^^^^-----------------------^\n-   |                    |\n-   |                    help: consider replacing with: `vec![0; ..]`\n-   |\n-   = note: `-D clippy::slow-vector-initialization` implied by `-D warnings`\n-note: extended at\n   --> $DIR/slow_vector_initialization.rs:23:5\n    |\n+22 |     let mut vec1 = Vec::with_capacity(len);\n+   |                    ----------------------- help: consider replacing with: `vec![0; ..]`\n 23 |     vec1.extend(repeat(0).take(len));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::slow-vector-initialization` implied by `-D warnings`\n \n error: detected slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:26:5\n-   |\n-26 |     let mut vec2 = Vec::with_capacity(len - 10);\n-   |     ^^^^^^^^^^^^^^^----------------------------^\n-   |                    |\n-   |                    help: consider replacing with: `vec![0; ..]`\n-   |\n-note: extended at\n   --> $DIR/slow_vector_initialization.rs:27:5\n    |\n+26 |     let mut vec2 = Vec::with_capacity(len - 10);\n+   |                    ---------------------------- help: consider replacing with: `vec![0; ..]`\n 27 |     vec2.extend(repeat(0).take(len - 10));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: detected slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:39:5\n-   |\n-39 |     let mut resized_vec = Vec::with_capacity(30);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^----------------------^\n-   |                           |\n-   |                           help: consider replacing with: `vec![0; ..]`\n-   |\n-note: resized at\n   --> $DIR/slow_vector_initialization.rs:42:5\n    |\n+39 |     let mut resized_vec = Vec::with_capacity(30);\n+   |                           ---------------------- help: consider replacing with: `vec![0; ..]`\n+...\n 42 |     resized_vec.resize(30, 0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: detected slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:40:5\n-   |\n-40 |     let mut extend_vec = Vec::with_capacity(30);\n-   |     ^^^^^^^^^^^^^^^^^^^^^----------------------^\n-   |                          |\n-   |                          help: consider replacing with: `vec![0; ..]`\n-   |\n-note: extended at\n   --> $DIR/slow_vector_initialization.rs:44:5\n    |\n+40 |     let mut extend_vec = Vec::with_capacity(30);\n+   |                          ---------------------- help: consider replacing with: `vec![0; ..]`\n+...\n 44 |     extend_vec.extend(repeat(0).take(30));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: detected slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:50:5\n-   |\n-50 |     let mut vec1 = Vec::with_capacity(len);\n-   |     ^^^^^^^^^^^^^^^-----------------------^\n-   |                    |\n-   |                    help: consider replacing with: `vec![0; ..]`\n-   |\n-note: resized at\n   --> $DIR/slow_vector_initialization.rs:51:5\n    |\n+50 |     let mut vec1 = Vec::with_capacity(len);\n+   |                    ----------------------- help: consider replacing with: `vec![0; ..]`\n 51 |     vec1.resize(len, 0);\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: detected slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:58:5\n-   |\n-58 |     let mut vec3 = Vec::with_capacity(len - 10);\n-   |     ^^^^^^^^^^^^^^^----------------------------^\n-   |                    |\n-   |                    help: consider replacing with: `vec![0; ..]`\n-   |\n-note: resized at\n   --> $DIR/slow_vector_initialization.rs:59:5\n    |\n+58 |     let mut vec3 = Vec::with_capacity(len - 10);\n+   |                    ---------------------------- help: consider replacing with: `vec![0; ..]`\n 59 |     vec3.resize(len - 10, 0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: detected slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:62:5\n-   |\n-62 |     vec1 = Vec::with_capacity(10);\n-   |     ^^^^^^^----------------------\n-   |            |\n-   |            help: consider replacing with: `vec![0; ..]`\n-   |\n-note: resized at\n   --> $DIR/slow_vector_initialization.rs:63:5\n    |\n+62 |     vec1 = Vec::with_capacity(10);\n+   |            ---------------------- help: consider replacing with: `vec![0; ..]`\n 63 |     vec1.resize(10, 0);\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: detected slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:67:5\n-   |\n-67 |     let mut unsafe_vec: Vec<u8> = Vec::with_capacity(200);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------^\n-   |                                   |\n-   |                                   help: consider replacing with: `vec![0; ..]`\n-   |\n-note: changed len at\n+error: detected unsafe vector initialization\n   --> $DIR/slow_vector_initialization.rs:70:9\n    |\n+67 |     let mut unsafe_vec: Vec<u8> = Vec::with_capacity(200);\n+   |                                   ----------------------- help: consider replacing with: `vec![0; ..]`\n+...\n 70 |         unsafe_vec.set_len(200);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(clippy::unsafe_vector_initialization)] on by default\n \n error: aborting due to 8 previous errors\n "}]}