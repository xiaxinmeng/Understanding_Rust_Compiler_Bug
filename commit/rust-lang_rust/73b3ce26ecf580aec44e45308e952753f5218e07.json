{"sha": "73b3ce26ecf580aec44e45308e952753f5218e07", "node_id": "C_kwDOAAsO6NoAKDczYjNjZTI2ZWNmNTgwYWVjNDRlNDUzMDhlOTUyNzUzZjUyMThlMDc", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-05-05T20:42:51Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-05-05T20:42:54Z"}, "message": "improve diagnostics and bless tests", "tree": {"sha": "ff5d8fd4f2caaef008268039953bed147c0f6dd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff5d8fd4f2caaef008268039953bed147c0f6dd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73b3ce26ecf580aec44e45308e952753f5218e07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73b3ce26ecf580aec44e45308e952753f5218e07", "html_url": "https://github.com/rust-lang/rust/commit/73b3ce26ecf580aec44e45308e952753f5218e07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73b3ce26ecf580aec44e45308e952753f5218e07/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "442617c0468018aa88bcee8a8b12da8525352708", "url": "https://api.github.com/repos/rust-lang/rust/commits/442617c0468018aa88bcee8a8b12da8525352708", "html_url": "https://github.com/rust-lang/rust/commit/442617c0468018aa88bcee8a8b12da8525352708"}], "stats": {"total": 1125, "additions": 644, "deletions": 481}, "files": [{"sha": "ff8bd462dd8d8277fbdd34c7bf32dc0f8b9dda2e", "filename": "compiler/rustc_resolve/messages.ftl", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/compiler%2Frustc_resolve%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/compiler%2Frustc_resolve%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fmessages.ftl?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -145,6 +145,15 @@ resolve_param_in_ty_of_const_param =\n     the type of const parameters must not depend on other generic parameters\n     .label = the type must not depend on the parameter `{$name}`\n \n+resolve_type_param_in_ty_of_const_param =\n+    type parameters may not be used in the type of const parameters\n+\n+resolve_const_param_in_ty_of_const_param =\n+    const parameters may not be used in the type of const parameters\n+\n+resolve_lifetime_param_in_ty_of_const_param =\n+    lifetime parameters may not be used in the type of const parameters\n+\n resolve_self_in_generic_param_default =\n     generic parameters cannot use `Self` in their defaults\n     .label = `Self` in generic parameter default\n@@ -156,12 +165,15 @@ resolve_param_in_non_trivial_anon_const =\n resolve_param_in_non_trivial_anon_const_help =\n     use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-resolve_param_in_non_trivial_anon_const_sub_type =\n+resolve_type_param_in_non_trivial_anon_const =\n     type parameters may not be used in const expressions\n \n-resolve_param_in_non_trivial_anon_const_sub_non_type =\n+resolve_const_param_in_non_trivial_anon_const =\n     const parameters may only be used as standalone arguments, i.e. `{$name}`\n \n+resolve_lifetime_param_in_non_trivial_anon_const =\n+    lifetime parameters may not be used in const expressions\n+\n resolve_unreachable_label =\n     use of unreachable label `{$name}`\n     .label = unreachable label `{$name}`\n@@ -233,3 +245,16 @@ resolve_macro_use_extern_crate_self = `#[macro_use]` is not supported on `extern\n \n resolve_accessible_unsure = not sure whether the path is accessible or not\n     .note = the type may have associated items, but we are currently not checking them\n+\n+resolve_param_in_enum_discriminant =\n+    generic parameters may not be used in enum discriminant values\n+    .label = cannot perform const operation using `{$name}`\n+\n+resolve_type_param_in_enum_discriminant =\n+    type parameters may not be used in enum discriminant values\n+\n+resolve_const_param_in_enum_discriminant =\n+    const parameters may not be used in enum discriminant values\n+\n+resolve_lifetime_param_in_enum_discriminant =\n+    lifetime parameters may not be used in enum discriminant values"}, {"sha": "72cdce5c8f05e2a1dea05a73f0faab0dfdf9f0be", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -864,25 +864,26 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             ResolutionError::ForwardDeclaredGenericParam => {\n                 self.tcx.sess.create_err(errs::ForwardDeclaredGenericParam { span })\n             }\n-            ResolutionError::ParamInTyOfConstParam(name) => {\n-                self.tcx.sess.create_err(errs::ParamInTyOfConstParam { span, name })\n-            }\n-            ResolutionError::ParamInNonTrivialAnonConst { name, is_type } => {\n+            ResolutionError::ParamInTyOfConstParam { name, param_kind: is_type } => self\n+                .tcx\n+                .sess\n+                .create_err(errs::ParamInTyOfConstParam { span, name, param_kind: is_type }),\n+            ResolutionError::ParamInNonTrivialAnonConst { name, param_kind: is_type } => {\n                 self.tcx.sess.create_err(errs::ParamInNonTrivialAnonConst {\n                     span,\n                     name,\n-                    sub_is_type: if is_type {\n-                        errs::ParamInNonTrivialAnonConstIsType::AType\n-                    } else {\n-                        errs::ParamInNonTrivialAnonConstIsType::NotAType { name }\n-                    },\n+                    param_kind: is_type,\n                     help: self\n                         .tcx\n                         .sess\n                         .is_nightly_build()\n                         .then_some(errs::ParamInNonTrivialAnonConstHelp),\n                 })\n             }\n+            ResolutionError::ParamInEnumDiscriminant { name, param_kind: is_type } => self\n+                .tcx\n+                .sess\n+                .create_err(errs::ParamInEnumDiscriminant { span, name, param_kind: is_type }),\n             ResolutionError::SelfInGenericParamDefault => {\n                 self.tcx.sess.create_err(errs::SelfInGenericParamDefault { span })\n             }"}, {"sha": "f6d7e8b4c873d932c5afbc5852642eaa25986253", "filename": "compiler/rustc_resolve/src/errors.rs", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -326,6 +326,18 @@ pub(crate) struct ParamInTyOfConstParam {\n     #[label]\n     pub(crate) span: Span,\n     pub(crate) name: Symbol,\n+    #[subdiagnostic]\n+    pub(crate) param_kind: Option<ParamKindInTyOfConstParam>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub(crate) enum ParamKindInTyOfConstParam {\n+    #[note(resolve_type_param_in_ty_of_const_param)]\n+    Type,\n+    #[note(resolve_const_param_in_ty_of_const_param)]\n+    Const,\n+    #[note(resolve_lifetime_param_in_ty_of_const_param)]\n+    Lifetime,\n }\n \n #[derive(Diagnostic)]\n@@ -344,7 +356,7 @@ pub(crate) struct ParamInNonTrivialAnonConst {\n     pub(crate) span: Span,\n     pub(crate) name: Symbol,\n     #[subdiagnostic]\n-    pub(crate) sub_is_type: ParamInNonTrivialAnonConstIsType,\n+    pub(crate) param_kind: ParamKindInNonTrivialAnonConst,\n     #[subdiagnostic]\n     pub(crate) help: Option<ParamInNonTrivialAnonConstHelp>,\n }\n@@ -354,11 +366,13 @@ pub(crate) struct ParamInNonTrivialAnonConst {\n pub(crate) struct ParamInNonTrivialAnonConstHelp;\n \n #[derive(Subdiagnostic)]\n-pub(crate) enum ParamInNonTrivialAnonConstIsType {\n-    #[note(resolve_param_in_non_trivial_anon_const_sub_type)]\n-    AType,\n-    #[help(resolve_param_in_non_trivial_anon_const_sub_non_type)]\n-    NotAType { name: Symbol },\n+pub(crate) enum ParamKindInNonTrivialAnonConst {\n+    #[note(resolve_type_param_in_non_trivial_anon_const)]\n+    Type,\n+    #[help(resolve_const_param_in_non_trivial_anon_const)]\n+    Const { name: Symbol },\n+    #[note(resolve_lifetime_param_in_non_trivial_anon_const)]\n+    Lifetime,\n }\n \n #[derive(Diagnostic)]\n@@ -539,3 +553,24 @@ pub(crate) struct CfgAccessibleUnsure {\n     #[primary_span]\n     pub(crate) span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_param_in_enum_discriminant)]\n+pub(crate) struct ParamInEnumDiscriminant {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    pub(crate) name: Symbol,\n+    #[subdiagnostic]\n+    pub(crate) param_kind: ParamKindInEnumDiscriminant,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub(crate) enum ParamKindInEnumDiscriminant {\n+    #[note(resolve_type_param_in_enum_discriminant)]\n+    Type,\n+    #[note(resolve_const_param_in_enum_discriminant)]\n+    Const,\n+    #[note(resolve_lifetime_param_in_enum_discriminant)]\n+    Lifetime,\n+}"}, {"sha": "5a3ae656ad459c1943906d793a4f99b2ff4fe961", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 51, "deletions": 19, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -13,8 +13,10 @@ use rustc_span::{Span, DUMMY_SP};\n \n use std::ptr;\n \n+use crate::errors::{ParamKindInEnumDiscriminant, ParamKindInNonTrivialAnonConst};\n use crate::late::{\n-    ConstantHasGenerics, ConstantItemKind, HasGenericParams, PathSource, Rib, RibKind,\n+    ConstantHasGenerics, ConstantItemKind, HasGenericParams, NoConstantGenericsReason, PathSource,\n+    Rib, RibKind,\n };\n use crate::macros::{sub_namespace_match, MacroRulesScope};\n use crate::{errors, AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy, Finalize};\n@@ -1153,7 +1155,13 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         }\n                         RibKind::ConstParamTy => {\n                             if let Some(span) = finalize {\n-                                self.report_error(span, ParamInTyOfConstParam(rib_ident.name));\n+                                self.report_error(\n+                                    span,\n+                                    ParamInTyOfConstParam {\n+                                        name: rib_ident.name,\n+                                        param_kind: None,\n+                                    },\n+                                );\n                             }\n                             return Res::Err;\n                         }\n@@ -1206,13 +1214,22 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     }\n                                 } else {\n                                     if let Some(span) = finalize {\n-                                        self.report_error(\n-                                            span,\n-                                            ResolutionError::ParamInNonTrivialAnonConst {\n-                                                name: rib_ident.name,\n-                                                is_type: true,\n-                                            },\n-                                        );\n+                                        let error = match cause {\n+                                            NoConstantGenericsReason::IsEnumDiscriminant => {\n+                                                ResolutionError::ParamInEnumDiscriminant {\n+                                                    name: rib_ident.name,\n+                                                    param_kind: ParamKindInEnumDiscriminant::Type,\n+                                                }\n+                                            }\n+                                            NoConstantGenericsReason::NonTrivialConstArg => {\n+                                                ResolutionError::ParamInNonTrivialAnonConst {\n+                                                    name: rib_ident.name,\n+                                                    param_kind:\n+                                                        ParamKindInNonTrivialAnonConst::Type,\n+                                                }\n+                                            }\n+                                        };\n+                                        self.report_error(span, error);\n                                         self.tcx.sess.delay_span_bug(span, CG_BUG_STR);\n                                     }\n \n@@ -1229,7 +1246,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             if let Some(span) = finalize {\n                                 self.report_error(\n                                     span,\n-                                    ResolutionError::ParamInTyOfConstParam(rib_ident.name),\n+                                    ResolutionError::ParamInTyOfConstParam {\n+                                        name: rib_ident.name,\n+                                        param_kind: Some(errors::ParamKindInTyOfConstParam::Type),\n+                                    },\n                                 );\n                             }\n                             return Res::Err;\n@@ -1262,14 +1282,23 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         RibKind::ConstantItem(trivial, _) => {\n                             if let ConstantHasGenerics::No(cause) = trivial {\n                                 if let Some(span) = finalize {\n-                                    self.report_error(\n-                                        span,\n-                                        ResolutionError::ParamInNonTrivialAnonConst {\n-                                            name: rib_ident.name,\n-                                            is_type: false,\n-                                        },\n-                                    );\n-                                    self.tcx.sess.delay_span_bug(span, CG_BUG_STR);\n+                                    let error = match cause {\n+                                        NoConstantGenericsReason::IsEnumDiscriminant => {\n+                                            ResolutionError::ParamInEnumDiscriminant {\n+                                                name: rib_ident.name,\n+                                                param_kind: ParamKindInEnumDiscriminant::Const,\n+                                            }\n+                                        }\n+                                        NoConstantGenericsReason::NonTrivialConstArg => {\n+                                            ResolutionError::ParamInNonTrivialAnonConst {\n+                                                name: rib_ident.name,\n+                                                param_kind: ParamKindInNonTrivialAnonConst::Const {\n+                                                    name: rib_ident.name,\n+                                                },\n+                                            }\n+                                        }\n+                                    };\n+                                    self.report_error(span, error);\n                                 }\n \n                                 return Res::Err;\n@@ -1283,7 +1312,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             if let Some(span) = finalize {\n                                 self.report_error(\n                                     span,\n-                                    ResolutionError::ParamInTyOfConstParam(rib_ident.name),\n+                                    ResolutionError::ParamInTyOfConstParam {\n+                                        name: rib_ident.name,\n+                                        param_kind: Some(errors::ParamKindInTyOfConstParam::Const),\n+                                    },\n                                 );\n                             }\n                             return Res::Err;"}, {"sha": "2a8287d5554f874f8b6d9fbbb458721165ff61fc", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1529,7 +1529,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             match rib.kind {\n                 LifetimeRibKind::Item => break,\n                 LifetimeRibKind::ConstParamTy => {\n-                    self.emit_non_static_lt_in_const_generic_error(lifetime);\n+                    self.emit_non_static_lt_in_const_param_ty_error(lifetime);\n                     self.record_lifetime_res(\n                         lifetime.id,\n                         LifetimeRes::Error,\n@@ -1538,7 +1538,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                     return;\n                 }\n                 LifetimeRibKind::ConcreteAnonConst(cause) => {\n-                    self.maybe_emit_forbidden_non_static_lifetime_error(lifetime);\n+                    self.emit_forbidden_non_static_lifetime_error(cause, lifetime);\n                     self.record_lifetime_res(\n                         lifetime.id,\n                         LifetimeRes::Error,"}, {"sha": "c9131d8c8a917d181e9c3a8bfb109a1d25d01f27", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 45, "deletions": 25, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,7 +1,7 @@\n use crate::diagnostics::{ImportSuggestion, LabelSuggestion, TypoSuggestion};\n use crate::late::{AliasPossibility, LateResolutionVisitor, RibKind};\n use crate::late::{LifetimeBinderKind, LifetimeRes, LifetimeRibKind, LifetimeUseSet};\n-use crate::path_names_to_string;\n+use crate::{errors, path_names_to_string};\n use crate::{Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{PathResult, PathSource, Segment};\n \n@@ -22,7 +22,6 @@ use rustc_hir::def::{self, CtorKind, CtorOf, DefKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_ID};\n use rustc_hir::PrimTy;\n use rustc_session::lint;\n-use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::edition::Edition;\n@@ -35,6 +34,8 @@ use std::ops::Deref;\n \n use thin_vec::ThinVec;\n \n+use super::NoConstantGenericsReason;\n+\n type Res = def::Res<ast::NodeId>;\n \n /// A field or associated item from self type suggested in case of resolution failure.\n@@ -2316,37 +2317,56 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n         }\n     }\n \n-    pub(crate) fn emit_non_static_lt_in_const_generic_error(&self, lifetime_ref: &ast::Lifetime) {\n-        struct_span_err!(\n-            self.r.tcx.sess,\n-            lifetime_ref.ident.span,\n-            E0771,\n-            \"use of non-static lifetime `{}` in const generic\",\n-            lifetime_ref.ident\n-        )\n-        .note(\n-            \"for more information, see issue #74052 \\\n-            <https://github.com/rust-lang/rust/issues/74052>\",\n-        )\n-        .emit();\n+    pub(crate) fn emit_non_static_lt_in_const_param_ty_error(&self, lifetime_ref: &ast::Lifetime) {\n+        self.r\n+            .tcx\n+            .sess\n+            .create_err(errors::ParamInTyOfConstParam {\n+                span: lifetime_ref.ident.span,\n+                name: lifetime_ref.ident.name,\n+                param_kind: Some(errors::ParamKindInTyOfConstParam::Lifetime),\n+            })\n+            .emit();\n     }\n \n     /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics`.\n     /// This function will emit an error if `generic_const_exprs` is not enabled, the body identified by\n     /// `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n-    pub(crate) fn maybe_emit_forbidden_non_static_lifetime_error(\n+    pub(crate) fn emit_forbidden_non_static_lifetime_error(\n         &self,\n+        cause: NoConstantGenericsReason,\n         lifetime_ref: &ast::Lifetime,\n     ) {\n-        let feature_active = self.r.tcx.sess.features_untracked().generic_const_exprs;\n-        if !feature_active {\n-            feature_err(\n-                &self.r.tcx.sess.parse_sess,\n-                sym::generic_const_exprs,\n-                lifetime_ref.ident.span,\n-                \"a non-static lifetime is not allowed in a `const`\",\n-            )\n-            .emit();\n+        match cause {\n+            NoConstantGenericsReason::IsEnumDiscriminant => {\n+                self.r\n+                    .tcx\n+                    .sess\n+                    .create_err(errors::ParamInEnumDiscriminant {\n+                        span: lifetime_ref.ident.span,\n+                        name: lifetime_ref.ident.name,\n+                        param_kind: errors::ParamKindInEnumDiscriminant::Lifetime,\n+                    })\n+                    .emit();\n+            }\n+            NoConstantGenericsReason::NonTrivialConstArg => {\n+                assert!(!self.r.tcx.features().generic_const_exprs);\n+                self.r\n+                    .tcx\n+                    .sess\n+                    .create_err(errors::ParamInNonTrivialAnonConst {\n+                        span: lifetime_ref.ident.span,\n+                        name: lifetime_ref.ident.name,\n+                        param_kind: errors::ParamKindInNonTrivialAnonConst::Lifetime,\n+                        help: self\n+                            .r\n+                            .tcx\n+                            .sess\n+                            .is_nightly_build()\n+                            .then_some(errors::ParamInNonTrivialAnonConstHelp),\n+                    })\n+                    .emit();\n+            }\n         }\n     }\n "}, {"sha": "590609f9ed3dbfe4d268a25c41bee942959f67ab", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -21,6 +21,9 @@\n #[macro_use]\n extern crate tracing;\n \n+use errors::{\n+    ParamKindInEnumDiscriminant, ParamKindInNonTrivialAnonConst, ParamKindInTyOfConstParam,\n+};\n use rustc_arena::{DroplessArena, TypedArena};\n use rustc_ast::node_id::NodeMap;\n use rustc_ast::{self as ast, attr, NodeId, CRATE_NODE_ID};\n@@ -223,11 +226,15 @@ enum ResolutionError<'a> {\n     /// Error E0128: generic parameters with a default cannot use forward-declared identifiers.\n     ForwardDeclaredGenericParam,\n     /// ERROR E0770: the type of const parameters must not depend on other generic parameters.\n-    ParamInTyOfConstParam(Symbol),\n+    ParamInTyOfConstParam { name: Symbol, param_kind: Option<ParamKindInTyOfConstParam> },\n     /// generic parameters must not be used inside const evaluations.\n     ///\n     /// This error is only emitted when using `min_const_generics`.\n-    ParamInNonTrivialAnonConst { name: Symbol, is_type: bool },\n+    ParamInNonTrivialAnonConst { name: Symbol, param_kind: ParamKindInNonTrivialAnonConst },\n+    /// generic parameters must not be used inside enum discriminants.\n+    ///\n+    /// This error is emitted even with `generic_const_exprs`.\n+    ParamInEnumDiscriminant { name: Symbol, param_kind: ParamKindInEnumDiscriminant },\n     /// Error E0735: generic parameters with a default cannot use `Self`\n     SelfInGenericParamDefault,\n     /// Error E0767: use of unreachable label"}, {"sha": "ffc7f116a94ef584380d2740621758ff74c0913e", "filename": "tests/ui/const-generics/assoc_const_as_type_argument.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fassoc_const_as_type_argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fassoc_const_as_type_argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fassoc_const_as_type_argument.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -0,0 +1,13 @@\n+trait Trait {\n+    const ASSOC: usize;\n+}\n+\n+fn bar<const N: usize>() {}\n+\n+fn foo<T: Trait>() {\n+    bar::<<T as Trait>::ASSOC>();\n+    //~^ ERROR: expected associated type, found associated constant `Trait::ASSOC`\n+    //~| ERROR: unresolved item provided when a constant was expected\n+}\n+\n+fn main() {}"}, {"sha": "ac009546135060e5acda79b0baa1e921c7104998", "filename": "tests/ui/const-generics/assoc_const_as_type_argument.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fassoc_const_as_type_argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fassoc_const_as_type_argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fassoc_const_as_type_argument.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -0,0 +1,21 @@\n+error[E0575]: expected associated type, found associated constant `Trait::ASSOC`\n+  --> $DIR/assoc_const_as_type_argument.rs:8:11\n+   |\n+LL |     bar::<<T as Trait>::ASSOC>();\n+   |           ^^^^^^^^^^^^^^^^^^^ not a associated type\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/assoc_const_as_type_argument.rs:8:11\n+   |\n+LL |     bar::<<T as Trait>::ASSOC>();\n+   |           ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL |     bar::<{ <T as Trait>::ASSOC }>();\n+   |           +                     +\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0575, E0747.\n+For more information about an error, try `rustc --explain E0575`."}, {"sha": "463a37d7e3d1357f3c4d6d8d63c9ff8a3c15aa11", "filename": "tests/ui/const-generics/const-arg-in-const-arg.full.stderr", "status": "removed", "additions": 0, "deletions": 163, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/442617c0468018aa88bcee8a8b12da8525352708/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/442617c0468018aa88bcee8a8b12da8525352708/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr?ref=442617c0468018aa88bcee8a8b12da8525352708", "patch": "@@ -1,163 +0,0 @@\n-error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:18:23\n-   |\n-LL |     let _: [u8; faz::<'a>(&())];\n-   |                       ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n-error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:21:23\n-   |\n-LL |     let _: [u8; faz::<'b>(&())];\n-   |                       ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n-error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:41:24\n-   |\n-LL |     let _: Foo<{ faz::<'a>(&()) }>;\n-   |                        ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n-error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:44:24\n-   |\n-LL |     let _: Foo<{ faz::<'b>(&()) }>;\n-   |                        ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n-error: unconstrained generic constant\n-  --> $DIR/const-arg-in-const-arg.rs:13:12\n-   |\n-LL |     let _: [u8; foo::<T>()];\n-   |            ^^^^^^^^^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); foo::<T>()]:`\n-\n-error: unconstrained generic constant\n-  --> $DIR/const-arg-in-const-arg.rs:15:12\n-   |\n-LL |     let _: [u8; bar::<N>()];\n-   |            ^^^^^^^^^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); bar::<N>()]:`\n-\n-error: unconstrained generic constant\n-  --> $DIR/const-arg-in-const-arg.rs:36:12\n-   |\n-LL |     let _: Foo<{ foo::<T>() }>;\n-   |            ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); { foo::<T>() }]:`\n-\n-error: unconstrained generic constant\n-  --> $DIR/const-arg-in-const-arg.rs:38:12\n-   |\n-LL |     let _: Foo<{ bar::<N>() }>;\n-   |            ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); { bar::<N>() }]:`\n-\n-error: unconstrained generic constant\n-  --> $DIR/const-arg-in-const-arg.rs:25:17\n-   |\n-LL |     let _ = [0; foo::<T>()];\n-   |                 ^^^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); foo::<T>()]:`\n-\n-error: unconstrained generic constant\n-  --> $DIR/const-arg-in-const-arg.rs:27:17\n-   |\n-LL |     let _ = [0; bar::<N>()];\n-   |                 ^^^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); bar::<N>()]:`\n-\n-error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:30:23\n-   |\n-LL |     let _ = [0; faz::<'a>(&())];\n-   |                       ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n-error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:33:23\n-   |\n-LL |     let _ = [0; faz::<'b>(&())];\n-   |                       ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n-error: unconstrained generic constant\n-  --> $DIR/const-arg-in-const-arg.rs:47:19\n-   |\n-LL |     let _ = Foo::<{ foo::<T>() }>;\n-   |                   ^^^^^^^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); { foo::<T>() }]:`\n-\n-error: unconstrained generic constant\n-  --> $DIR/const-arg-in-const-arg.rs:49:19\n-   |\n-LL |     let _ = Foo::<{ bar::<N>() }>;\n-   |                   ^^^^^^^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); { bar::<N>() }]:`\n-\n-error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:52:27\n-   |\n-LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n-   |                           ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n-error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:55:27\n-   |\n-LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n-   |                           ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n-error: aborting due to 16 previous errors\n-\n-For more information about this error, try `rustc --explain E0794`."}, {"sha": "f1f22e2342d4dfc45be03c140475d40a26d9ea39", "filename": "tests/ui/const-generics/const-arg-in-const-arg.min.stderr", "status": "modified", "additions": 103, "deletions": 103, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:13:23\n+  --> $DIR/const-arg-in-const-arg.rs:15:23\n    |\n LL |     let _: [u8; foo::<T>()];\n    |                       ^ cannot perform const operation using `T`\n@@ -8,97 +8,97 @@ LL |     let _: [u8; foo::<T>()];\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:15:23\n+  --> $DIR/const-arg-in-const-arg.rs:16:23\n    |\n LL |     let _: [u8; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:18:23\n    |\n LL |     let _: [u8; faz::<'a>(&())];\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:20:23\n    |\n LL |     let _: [u8; baz::<'a>(&())];\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:21:23\n    |\n LL |     let _: [u8; faz::<'b>(&())];\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'b`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:23:23\n    |\n LL |     let _: [u8; baz::<'b>(&())];\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'b`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:27:23\n+  --> $DIR/const-arg-in-const-arg.rs:26:23\n    |\n LL |     let _ = [0; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:30:23\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:28:23\n    |\n LL |     let _ = [0; faz::<'a>(&())];\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:32:23\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:30:23\n    |\n LL |     let _ = [0; baz::<'a>(&())];\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:33:23\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:31:23\n    |\n LL |     let _ = [0; faz::<'b>(&())];\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'b`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:35:23\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:33:23\n    |\n LL |     let _ = [0; baz::<'b>(&())];\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'b`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:36:24\n+  --> $DIR/const-arg-in-const-arg.rs:34:24\n    |\n LL |     let _: Foo<{ foo::<T>() }>;\n    |                        ^ cannot perform const operation using `T`\n@@ -107,52 +107,52 @@ LL |     let _: Foo<{ foo::<T>() }>;\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:38:24\n+  --> $DIR/const-arg-in-const-arg.rs:35:24\n    |\n LL |     let _: Foo<{ bar::<N>() }>;\n    |                        ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:41:24\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:37:24\n    |\n LL |     let _: Foo<{ faz::<'a>(&()) }>;\n-   |                        ^^\n+   |                        ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:43:24\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:39:24\n    |\n LL |     let _: Foo<{ baz::<'a>(&()) }>;\n-   |                        ^^\n+   |                        ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:44:24\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:40:24\n    |\n LL |     let _: Foo<{ faz::<'b>(&()) }>;\n-   |                        ^^\n+   |                        ^^ cannot perform const operation using `'b`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:46:24\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:42:24\n    |\n LL |     let _: Foo<{ baz::<'b>(&()) }>;\n-   |                        ^^\n+   |                        ^^ cannot perform const operation using `'b`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:47:27\n+  --> $DIR/const-arg-in-const-arg.rs:43:27\n    |\n LL |     let _ = Foo::<{ foo::<T>() }>;\n    |                           ^ cannot perform const operation using `T`\n@@ -161,52 +161,52 @@ LL |     let _ = Foo::<{ foo::<T>() }>;\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:49:27\n+  --> $DIR/const-arg-in-const-arg.rs:44:27\n    |\n LL |     let _ = Foo::<{ bar::<N>() }>;\n    |                           ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:52:27\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:46:27\n    |\n LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n-   |                           ^^\n+   |                           ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:54:27\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:48:27\n    |\n LL |     let _ = Foo::<{ baz::<'a>(&()) }>;\n-   |                           ^^\n+   |                           ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:55:27\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:49:27\n    |\n LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n-   |                           ^^\n+   |                           ^^ cannot perform const operation using `'b`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:57:27\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:51:27\n    |\n LL |     let _ = Foo::<{ baz::<'b>(&()) }>;\n-   |                           ^^\n+   |                           ^^ cannot perform const operation using `'b`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:15:23\n+  --> $DIR/const-arg-in-const-arg.rs:16:23\n    |\n LL |     let _: [u8; bar::<N>()];\n    |                       ^\n@@ -223,7 +223,7 @@ LL |     let _: [u8; faz::<'a>(&())];\n    |                       ^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n+  --> $DIR/const-arg-in-const-arg.rs:10:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n@@ -235,13 +235,13 @@ LL |     let _: [u8; faz::<'b>(&())];\n    |                       ^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n+  --> $DIR/const-arg-in-const-arg.rs:10:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:38:24\n+  --> $DIR/const-arg-in-const-arg.rs:35:24\n    |\n LL |     let _: Foo<{ bar::<N>() }>;\n    |                        ^\n@@ -252,25 +252,25 @@ LL |     let _: Foo<{ bar::<{ N }>() }>;\n    |                        +   +\n \n error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:41:24\n+  --> $DIR/const-arg-in-const-arg.rs:37:24\n    |\n LL |     let _: Foo<{ faz::<'a>(&()) }>;\n    |                        ^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n+  --> $DIR/const-arg-in-const-arg.rs:10:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:44:24\n+  --> $DIR/const-arg-in-const-arg.rs:40:24\n    |\n LL |     let _: Foo<{ faz::<'b>(&()) }>;\n    |                        ^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n+  --> $DIR/const-arg-in-const-arg.rs:10:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n@@ -284,7 +284,7 @@ LL |     let _ = [0; foo::<T>()];\n    = note: this may fail depending on what value the parameter takes\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:27:23\n+  --> $DIR/const-arg-in-const-arg.rs:26:23\n    |\n LL |     let _ = [0; bar::<N>()];\n    |                       ^\n@@ -295,31 +295,31 @@ LL |     let _ = [0; bar::<{ N }>()];\n    |                       +   +\n \n error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:30:23\n+  --> $DIR/const-arg-in-const-arg.rs:28:23\n    |\n LL |     let _ = [0; faz::<'a>(&())];\n    |                       ^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n+  --> $DIR/const-arg-in-const-arg.rs:10:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:33:23\n+  --> $DIR/const-arg-in-const-arg.rs:31:23\n    |\n LL |     let _ = [0; faz::<'b>(&())];\n    |                       ^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n+  --> $DIR/const-arg-in-const-arg.rs:10:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:49:27\n+  --> $DIR/const-arg-in-const-arg.rs:44:27\n    |\n LL |     let _ = Foo::<{ bar::<N>() }>;\n    |                           ^\n@@ -330,30 +330,30 @@ LL |     let _ = Foo::<{ bar::<{ N }>() }>;\n    |                           +   +\n \n error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:52:27\n+  --> $DIR/const-arg-in-const-arg.rs:46:27\n    |\n LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n    |                           ^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n+  --> $DIR/const-arg-in-const-arg.rs:10:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:55:27\n+  --> $DIR/const-arg-in-const-arg.rs:49:27\n    |\n LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n    |                           ^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n+  --> $DIR/const-arg-in-const-arg.rs:10:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error: aborting due to 36 previous errors\n \n-Some errors have detailed explanations: E0658, E0747, E0794.\n-For more information about an error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0747, E0794.\n+For more information about an error, try `rustc --explain E0747`."}, {"sha": "9eaa54347f18e46b6191b51a87a720261b31889c", "filename": "tests/ui/const-generics/const-arg-in-const-arg.rs", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,4 +1,6 @@\n-// revisions: full min\n+// revisions: min\n+// we use a single revision because t his shoudl have a `full` revision\n+// but right now that ICEs and I(@BoxyUwU) could not get stderr normalization to work\n \n #![cfg_attr(full, feature(generic_const_exprs))]\n #![cfg_attr(full, allow(incomplete_features))]\n@@ -11,50 +13,42 @@ const fn baz<'a>(_: &'a ()) -> usize where &'a (): Sized { 13 }\n struct Foo<const N: usize>;\n fn test<'a, 'b, T, const N: usize>() where &'b (): Sized {\n     let _: [u8; foo::<T>()]; //[min]~ ERROR generic parameters may not\n-                             //[full]~^ ERROR unconstrained generic constant\n     let _: [u8; bar::<N>()]; //[min]~ ERROR generic parameters may not\n                              //[min]~^ ERROR unresolved item provided when a constant was expected\n-                             //[full]~^^ ERROR unconstrained generic constant\n-    let _: [u8; faz::<'a>(&())]; //[min]~ ERROR a non-static lifetime\n-                                 //~^ ERROR cannot specify lifetime arguments\n-    let _: [u8; baz::<'a>(&())]; //[min]~ ERROR a non-static lifetime\n-    let _: [u8; faz::<'b>(&())]; //[min]~ ERROR a non-static lifetime\n-                                 //~^ ERROR cannot specify lifetime arguments\n-    let _: [u8; baz::<'b>(&())]; //[min]~ ERROR a non-static lifetime\n+    let _: [u8; faz::<'a>(&())]; //[min]~ ERROR generic parameters may not\n+                                 //[min]~^ ERROR cannot specify lifetime arguments\n+    let _: [u8; baz::<'a>(&())]; //[min]~ ERROR generic parameters may not\n+    let _: [u8; faz::<'b>(&())]; //[min]~ ERROR generic parameters may not\n+                                 //[min]~^ ERROR cannot specify lifetime arguments\n+    let _: [u8; baz::<'b>(&())]; //[min]~ ERROR generic parameters may not\n \n     let _ = [0; foo::<T>()]; //[min]~ ERROR constant expression depends on a generic parameter\n-                             //[full]~^ ERROR unconstrained generic constant\n     let _ = [0; bar::<N>()]; //[min]~ ERROR generic parameters may not\n                              //[min]~^ ERROR unresolved item provided when a constant was expected\n-                             //[full]~^^ ERROR unconstrained generic constant\n-    let _ = [0; faz::<'a>(&())]; //[min]~ ERROR a non-static lifetime\n-                                 //~^ ERROR cannot specify lifetime arguments\n-    let _ = [0; baz::<'a>(&())]; //[min]~ ERROR a non-static lifetime\n-    let _ = [0; faz::<'b>(&())]; //[min]~ ERROR a non-static lifetime\n-                                 //~^ ERROR cannot specify lifetime arguments\n-    let _ = [0; baz::<'b>(&())]; //[min]~ ERROR a non-static lifetime\n+    let _ = [0; faz::<'a>(&())]; //[min]~ ERROR generic parameters may not\n+                                 //[min]~^ ERROR cannot specify lifetime arguments\n+    let _ = [0; baz::<'a>(&())]; //[min]~ ERROR generic parameters may not\n+    let _ = [0; faz::<'b>(&())]; //[min]~ ERROR generic parameters may not\n+                                 //[min]~^ ERROR cannot specify lifetime arguments\n+    let _ = [0; baz::<'b>(&())]; //[min]~ ERROR generic parameters may not\n     let _: Foo<{ foo::<T>() }>; //[min]~ ERROR generic parameters may not\n-                                //[full]~^ ERROR unconstrained generic constant\n     let _: Foo<{ bar::<N>() }>; //[min]~ ERROR generic parameters may not\n                                 //[min]~^ ERROR unresolved item provided when a constant was expected\n-                                //[full]~^^ ERROR unconstrained generic constant\n-    let _: Foo<{ faz::<'a>(&()) }>; //[min]~ ERROR a non-static lifetime\n-                                    //~^ ERROR cannot specify lifetime arguments\n-    let _: Foo<{ baz::<'a>(&()) }>; //[min]~ ERROR a non-static lifetime\n-    let _: Foo<{ faz::<'b>(&()) }>; //[min]~ ERROR a non-static lifetime\n-                                    //~^ ERROR cannot specify lifetime arguments\n-    let _: Foo<{ baz::<'b>(&()) }>; //[min]~ ERROR a non-static lifetime\n+    let _: Foo<{ faz::<'a>(&()) }>; //[min]~ ERROR generic parameters may not\n+                                    //[min]~^ ERROR cannot specify lifetime arguments\n+    let _: Foo<{ baz::<'a>(&()) }>; //[min]~ ERROR generic parameters may not\n+    let _: Foo<{ faz::<'b>(&()) }>; //[min]~ ERROR generic parameters may not\n+                                    //[min]~^ ERROR cannot specify lifetime arguments\n+    let _: Foo<{ baz::<'b>(&()) }>; //[min]~ ERROR generic parameters may not\n     let _ = Foo::<{ foo::<T>() }>; //[min]~ ERROR generic parameters may not\n-                                   //[full]~^ ERROR unconstrained generic constant\n     let _ = Foo::<{ bar::<N>() }>; //[min]~ ERROR generic parameters may not\n                                    //[min]~^ ERROR unresolved item provided when a constant was expected\n-                                   //[full]~^^ ERROR unconstrained generic constant\n-    let _ = Foo::<{ faz::<'a>(&()) }>; //[min]~ ERROR a non-static lifetime\n-                                       //~^ ERROR cannot specify lifetime arguments\n-    let _ = Foo::<{ baz::<'a>(&()) }>; //[min]~ ERROR a non-static lifetime\n-    let _ = Foo::<{ faz::<'b>(&()) }>; //[min]~ ERROR a non-static lifetime\n-                                       //~^ ERROR cannot specify lifetime arguments\n-    let _ = Foo::<{ baz::<'b>(&()) }>; //[min]~ ERROR a non-static lifetime\n+    let _ = Foo::<{ faz::<'a>(&()) }>; //[min]~ ERROR generic parameters may not\n+                                       //[min]~^ ERROR cannot specify lifetime arguments\n+    let _ = Foo::<{ baz::<'a>(&()) }>; //[min]~ ERROR generic parameters may not\n+    let _ = Foo::<{ faz::<'b>(&()) }>; //[min]~ ERROR generic parameters may not\n+                                       //[min]~^ ERROR cannot specify lifetime arguments\n+    let _ = Foo::<{ baz::<'b>(&()) }>; //[min]~ ERROR generic parameters may not\n }\n \n fn main() {}"}, {"sha": "310ca75fdc90c0e7930d24914160de0971263775", "filename": "tests/ui/const-generics/const-argument-non-static-lifetime.min.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.min.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,12 +1,11 @@\n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/const-argument-non-static-lifetime.rs:14:17\n    |\n LL |         let _: &'a ();\n-   |                 ^^\n+   |                 ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "df2f3b7918cf948af96304137d2801927cd021cb", "filename": "tests/ui/const-generics/const-argument-non-static-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -11,7 +11,7 @@ fn test<const N: usize>() {}\n \n fn wow<'a>() -> &'a () {\n     test::<{\n-        let _: &'a (); //[min]~ ERROR a non-static lifetime\n+        let _: &'a (); //[min]~ ERROR generic parameters may not be used in const operations\n         3\n     }>();\n     &()"}, {"sha": "539d840f0a80301a880e7c2732152f959240b25b", "filename": "tests/ui/const-generics/const-param-type-depends-on-const-param.full.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.full.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -3,12 +3,16 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n    |                                                    ^ the type must not depend on the parameter `N`\n+   |\n+   = note: const parameters may not be used in the type of const parameters\n \n error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/const-param-type-depends-on-const-param.rs:15:40\n    |\n LL | pub struct SelfDependent<const N: [u8; N]>;\n    |                                        ^ the type must not depend on the parameter `N`\n+   |\n+   = note: const parameters may not be used in the type of const parameters\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f829526ca1dc8e8c8848c4cfe665c7a03f6c611d", "filename": "tests/ui/const-generics/const-param-type-depends-on-const-param.min.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -3,12 +3,16 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n    |                                                    ^ the type must not depend on the parameter `N`\n+   |\n+   = note: const parameters may not be used in the type of const parameters\n \n error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/const-param-type-depends-on-const-param.rs:15:40\n    |\n LL | pub struct SelfDependent<const N: [u8; N]>;\n    |                                        ^ the type must not depend on the parameter `N`\n+   |\n+   = note: const parameters may not be used in the type of const parameters\n \n error: `[u8; N]` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-type-depends-on-const-param.rs:11:47"}, {"sha": "c5160d1c3848d23690343eef28b84caaeb4e69a9", "filename": "tests/ui/const-generics/const-param-type-depends-on-type-param-ungated.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n    |                      ^ the type must not depend on the parameter `T`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error: aborting due to previous error\n "}, {"sha": "938fb08b7956ef3135374b7248647a02ed60caeb", "filename": "tests/ui/const-generics/const-param-type-depends-on-type-param.full.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | pub struct Dependent<T, const X: T>([(); X]);\n    |                                  ^ the type must not depend on the parameter `T`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/const-param-type-depends-on-type-param.rs:11:22"}, {"sha": "938fb08b7956ef3135374b7248647a02ed60caeb", "filename": "tests/ui/const-generics/const-param-type-depends-on-type-param.min.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | pub struct Dependent<T, const X: T>([(); X]);\n    |                                  ^ the type must not depend on the parameter `T`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/const-param-type-depends-on-type-param.rs:11:22"}, {"sha": "205d031d4a31047b586f3824e672eb035194e90e", "filename": "tests/ui/const-generics/generic_const_exprs/issue-74713.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,7 +1,7 @@\n fn bug<'a>()\n where\n     [(); { //~ ERROR mismatched types\n-        let _: &'a (); //~ ERROR a non-static lifetime is not allowed in a `const`\n+        let _: &'a (); //~ ERROR generic parameters may not be used in const operations\n     }]:\n {}\n "}, {"sha": "f0e0a4b971106da69983c74e0f7106bf08f59628", "filename": "tests/ui/const-generics/generic_const_exprs/issue-74713.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,11 +1,11 @@\n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-74713.rs:4:17\n    |\n LL |         let _: &'a ();\n-   |                 ^^\n+   |                 ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0308]: mismatched types\n   --> $DIR/issue-74713.rs:3:10\n@@ -18,5 +18,4 @@ LL | |     }]:\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0308, E0658.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "96aeec77c13007a22a52ddbbe5d81f7db7063f82", "filename": "tests/ui/const-generics/generic_const_exprs/unresolved_lifetimes_error.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funresolved_lifetimes_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funresolved_lifetimes_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funresolved_lifetimes_error.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -0,0 +1,12 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+fn foo() -> [(); {\n+    let a: &'a ();\n+    //~^ ERROR: use of undeclared lifetime name `'a`\n+    10_usize\n+}] {\n+    loop {}\n+}\n+\n+fn main() {}"}, {"sha": "976f037062dd9a45cdc34bff3e6b18a226b3d36d", "filename": "tests/ui/const-generics/generic_const_exprs/unresolved_lifetimes_error.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funresolved_lifetimes_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funresolved_lifetimes_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funresolved_lifetimes_error.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -0,0 +1,11 @@\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/unresolved_lifetimes_error.rs:5:13\n+   |\n+LL | fn foo() -> [(); {\n+   |       - help: consider introducing lifetime `'a` here: `<'a>`\n+LL |     let a: &'a ();\n+   |             ^^ undeclared lifetime\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0261`."}, {"sha": "78baba818ad765975758264bfb389eb43ede278c", "filename": "tests/ui/const-generics/issue-46511.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissue-46511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissue-46511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissue-46511.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -2,7 +2,7 @@\n \n struct Foo<'a> //~ ERROR parameter `'a` is never used [E0392]\n {\n-    _a: [u8; std::mem::size_of::<&'a mut u8>()] //~ ERROR  a non-static lifetime is not allowed in a `const`\n+    _a: [u8; std::mem::size_of::<&'a mut u8>()] //~ ERROR generic parameters may not be used in const operations\n }\n \n pub fn main() {}"}, {"sha": "58c93a1fab49cce3acfbb8927199c7b02b4a4f5c", "filename": "tests/ui/const-generics/issue-46511.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissue-46511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissue-46511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissue-46511.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,11 +1,11 @@\n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-46511.rs:5:35\n    |\n LL |     _a: [u8; std::mem::size_of::<&'a mut u8>()]\n-   |                                   ^^\n+   |                                   ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0392]: parameter `'a` is never used\n   --> $DIR/issue-46511.rs:3:12\n@@ -17,5 +17,4 @@ LL | struct Foo<'a>\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0392, E0658.\n-For more information about an error, try `rustc --explain E0392`.\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "5fc0ec260474cd300746b2b42aab681e807008a2", "filename": "tests/ui/const-generics/issues/issue-56445-1.full.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.full.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,11 +1,11 @@\n-error[E0771]: use of non-static lifetime `'a` in const generic\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/issue-56445-1.rs:9:26\n    |\n LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n-   |                          ^^\n+   |                          ^^ the type must not depend on the parameter `'a`\n    |\n-   = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n+   = note: lifetime parameters may not be used in the type of const parameters\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0771`.\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "71a7051f25bfa7f94dbf40a9ee2d1546af26a6c5", "filename": "tests/ui/const-generics/issues/issue-56445-1.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,10 +1,10 @@\n-error[E0771]: use of non-static lifetime `'a` in const generic\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/issue-56445-1.rs:9:26\n    |\n LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n-   |                          ^^\n+   |                          ^^ the type must not depend on the parameter `'a`\n    |\n-   = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n+   = note: lifetime parameters may not be used in the type of const parameters\n \n error: `&str` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-56445-1.rs:9:25\n@@ -17,4 +17,4 @@ LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0771`.\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "d862bf24aef7bef5c3e01c031b7f92de0411643c", "filename": "tests/ui/const-generics/issues/issue-56445-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -7,7 +7,7 @@\n use std::marker::PhantomData;\n \n struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n-//~^ ERROR: use of non-static lifetime `'a` in const generic\n+//~^ ERROR: the type of const parameters must not depend on other generic parameters\n //[min]~| ERROR: `&str` is forbidden as the type of a const generic parameter\n \n impl Bug<'_, \"\"> {}"}, {"sha": "c658b5a6e686683f3787685fa016a226b3d656e9", "filename": "tests/ui/const-generics/issues/issue-62878.full.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                      ^ the type must not depend on the parameter `N`\n+   |\n+   = note: const parameters may not be used in the type of const parameters\n \n error: aborting due to previous error\n "}, {"sha": "9c0e5179cc4c2daca7e8bfe06ff3ffcbcfecb1fb", "filename": "tests/ui/const-generics/issues/issue-62878.min.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                      ^ the type must not depend on the parameter `N`\n+   |\n+   = note: const parameters may not be used in the type of const parameters\n \n error: `[u8; N]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-62878.rs:5:33"}, {"sha": "ccdfbbd54cfbbf684697a8e7a56cb76e2e3ce5d4", "filename": "tests/ui/const-generics/issues/issue-71169.full.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n    |                                           ^^^ the type must not depend on the parameter `LEN`\n+   |\n+   = note: const parameters may not be used in the type of const parameters\n \n error: aborting due to previous error\n "}, {"sha": "ebfb24bec28df2bbf78d98874c09c752ed318196", "filename": "tests/ui/const-generics/issues/issue-71169.min.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n    |                                           ^^^ the type must not depend on the parameter `LEN`\n+   |\n+   = note: const parameters may not be used in the type of const parameters\n \n error: `[u8; LEN]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-71169.rs:5:38"}, {"sha": "962eaf75b98f54aa18798b602075cb0f1b5a2051", "filename": "tests/ui/const-generics/issues/issue-71381.full.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -3,12 +3,16 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n    |                                                                                  ^^^^ the type must not depend on the parameter `Args`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/issue-71381.rs:23:40\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                                        ^^^^ the type must not depend on the parameter `Args`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error[E0741]: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71381.rs:14:61"}, {"sha": "e1e140071fc1353bbb69ed4f34b2977ade8f440e", "filename": "tests/ui/const-generics/issues/issue-71381.min.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.min.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -3,12 +3,16 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n    |                                                                                  ^^^^ the type must not depend on the parameter `Args`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/issue-71381.rs:23:40\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                                        ^^^^ the type must not depend on the parameter `Args`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71381.rs:14:61"}, {"sha": "e109459f2be6f883930af3775395ad8353c71216", "filename": "tests/ui/const-generics/issues/issue-71611.full.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n    |                               ^ the type must not depend on the parameter `A`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error[E0741]: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71611.rs:5:21"}, {"sha": "b33d7cf9850faa140a5aa6caa63d1e195d46cb8d", "filename": "tests/ui/const-generics/issues/issue-71611.min.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.min.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n    |                               ^ the type must not depend on the parameter `A`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71611.rs:5:21"}, {"sha": "3cb8d3846ab7c62096ece221024c778fe366d6cb", "filename": "tests/ui/const-generics/issues/issue-77357.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/442617c0468018aa88bcee8a8b12da8525352708/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442617c0468018aa88bcee8a8b12da8525352708/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.rs?ref=442617c0468018aa88bcee8a8b12da8525352708", "patch": "@@ -1,11 +0,0 @@\n-#![feature(generic_const_exprs)]\n-#![allow(incomplete_features)]\n-\n-trait MyTrait<T> {}\n-\n-fn bug<'a, T>() -> &'static dyn MyTrait<[(); { |x: &'a u32| { x }; 4 }]> {\n-    //~^ ERROR overly complex generic constant\n-    todo!()\n-}\n-\n-fn main() {}"}, {"sha": "68b35a38b0f8ada52a5a18342d537854369fe012", "filename": "tests/ui/const-generics/issues/issue-77357.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/442617c0468018aa88bcee8a8b12da8525352708/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/442617c0468018aa88bcee8a8b12da8525352708/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr?ref=442617c0468018aa88bcee8a8b12da8525352708", "patch": "@@ -1,11 +0,0 @@\n-error: overly complex generic constant\n-  --> $DIR/issue-77357.rs:6:46\n-   |\n-LL | fn bug<'a, T>() -> &'static dyn MyTrait<[(); { |x: &'a u32| { x }; 4 }]> {\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constants\n-   |\n-   = help: consider moving this anonymous constant into a `const` function\n-   = note: this operation may be supported in the future\n-\n-error: aborting due to previous error\n-"}, {"sha": "f2f05d9526bc5f898516a4c6b3ca909432496c1c", "filename": "tests/ui/const-generics/issues/issue-83993.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/442617c0468018aa88bcee8a8b12da8525352708/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-83993.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442617c0468018aa88bcee8a8b12da8525352708/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-83993.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-83993.rs?ref=442617c0468018aa88bcee8a8b12da8525352708", "patch": "@@ -1,14 +0,0 @@\n-// check-pass\n-\n-#![feature(generic_const_exprs)]\n-#![allow(incomplete_features)]\n-\n-fn bug<'a>()\n-where\n-    for<'b> [(); {\n-        let x: &'b ();\n-        0\n-    }]:\n-{}\n-\n-fn main() {}"}, {"sha": "b49d52dd0babcff951009f2c1352a1b377a6cac6", "filename": "tests/ui/const-generics/issues/issue-88997.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-88997.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-88997.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-88997.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -3,12 +3,16 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | struct Range<T: PartialOrd, const MIN: T, const MAX: T>(T)\n    |                                        ^ the type must not depend on the parameter `T`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/issue-88997.rs:8:54\n    |\n LL | struct Range<T: PartialOrd, const MIN: T, const MAX: T>(T)\n    |                                                      ^ the type must not depend on the parameter `T`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error: aborting due to 2 previous errors\n "}, {"sha": "23424d7b919b62112bb546c087af6c6c9a3bf0e9", "filename": "tests/ui/const-generics/issues/issue-90364.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90364.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | pub struct Foo<T, const H: T>(T)\n    |                            ^ the type must not depend on the parameter `T`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error: aborting due to previous error\n "}, {"sha": "00fb535f048795a8f9328bc316f127b361fbe983", "filename": "tests/ui/const-generics/late-bound-vars/in_closure.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fin_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fin_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fin_closure.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,4 +1,22 @@\n-// run-pass\n+// failure-status: 101\n+// known-bug: unknown\n+// error-pattern:internal compiler error\n+// normalize-stderr-test \"internal compiler error.*\" -> \"\"\n+// normalize-stderr-test \"DefId\\([^)]*\\)\" -> \"...\"\n+// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"thread.*panicked.*\\n\" -> \"\"\n+// normalize-stderr-test \"stack backtrace:\\n\" -> \"\"\n+// normalize-stderr-test \"\\s\\d{1,}: .*\\n\" -> \"\"\n+// normalize-stderr-test \"\\s at .*\\n\" -> \"\"\n+// normalize-stderr-test \".*note: Some details.*\\n\" -> \"\"\n+// normalize-stderr-test \"\\n\\n[ ]*\\n\" -> \"\"\n+// normalize-stderr-test \"compiler/.*: projection\" -> \"projection\"\n+// this should run-pass\n+\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n "}, {"sha": "557fbea2e056eb938900dbb6292b071ef0ec0a6a", "filename": "tests/ui/const-generics/late-bound-vars/in_closure.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fin_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fin_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fin_closure.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -0,0 +1,13 @@\n+error: query stack during panic:\n+#0 [mir_borrowck] borrow-checking `test::{closure#0}::{constant#1}`\n+#1 [mir_drops_elaborated_and_const_checked] elaborating drops for `test::{closure#0}::{constant#1}`\n+#2 [mir_for_ctfe] caching mir of `test::{closure#0}::{constant#1}` for CTFE\n+#3 [eval_to_allocation_raw] const-evaluating + checking `test::{closure#0}::{constant#1}`\n+#4 [eval_to_allocation_raw] const-evaluating + checking `test::{closure#0}::{constant#1}`\n+#5 [eval_to_valtree] evaluating type-level constant\n+#6 [typeck] type-checking `test`\n+#7 [used_trait_imports] finding used_trait_imports `test`\n+#8 [analysis] running analysis passes on this crate\n+end of query stack\n+error: aborting due to previous error\n+"}, {"sha": "5d19aaf0b9555032621c4120b644a3515ed95bc3", "filename": "tests/ui/const-generics/late-bound-vars/simple.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fsimple.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,4 +1,21 @@\n-// run-pass\n+// failure-status: 101\n+// known-bug: unknown\n+// error-pattern:internal compiler error\n+// normalize-stderr-test \"internal compiler error.*\" -> \"\"\n+// normalize-stderr-test \"DefId\\([^)]*\\)\" -> \"...\"\n+// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"thread.*panicked.*\\n\" -> \"\"\n+// normalize-stderr-test \"stack backtrace:\\n\" -> \"\"\n+// normalize-stderr-test \"\\s\\d{1,}: .*\\n\" -> \"\"\n+// normalize-stderr-test \"\\s at .*\\n\" -> \"\"\n+// normalize-stderr-test \".*note: Some details.*\\n\" -> \"\"\n+// normalize-stderr-test \"\\n\\n[ ]*\\n\" -> \"\"\n+// normalize-stderr-test \"compiler/.*: projection\" -> \"projection\"\n+\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n "}, {"sha": "c0568f5a5cfa32d2bcf1acdfaa13bcf52b6a72f7", "filename": "tests/ui/const-generics/late-bound-vars/simple.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fsimple.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -0,0 +1,13 @@\n+error: query stack during panic:\n+#0 [mir_borrowck] borrow-checking `test::{constant#1}`\n+#1 [mir_drops_elaborated_and_const_checked] elaborating drops for `test::{constant#1}`\n+#2 [mir_for_ctfe] caching mir of `test::{constant#1}` for CTFE\n+#3 [eval_to_allocation_raw] const-evaluating + checking `test::{constant#1}`\n+#4 [eval_to_allocation_raw] const-evaluating + checking `test::{constant#1}`\n+#5 [eval_to_valtree] evaluating type-level constant\n+#6 [typeck] type-checking `test`\n+#7 [used_trait_imports] finding used_trait_imports `test`\n+#8 [analysis] running analysis passes on this crate\n+end of query stack\n+error: aborting due to previous error\n+"}, {"sha": "86f2bc9c74b93d3aced5b6499865110e7ab72a60", "filename": "tests/ui/const-generics/min_const_generics/forbid-non-static-lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -5,7 +5,7 @@ fn test<const N: usize>() {}\n \n fn issue_75323_and_74447_1<'a>() -> &'a () {\n     test::<{ let _: &'a (); 3 },>();\n-   //~^ ERROR a non-static lifetime is not allowed in a `const`\n+   //~^ ERROR generic parameters may not be used in const operations\n     &()\n }\n \n@@ -19,7 +19,7 @@ fn issue_75323_and_74447_3() {\n \n fn issue_73375<'a>() {\n     [(); (|_: &'a u8| (), 0).1];\n-    //~^ ERROR a non-static lifetime is not allowed in a `const`\n+    //~^ ERROR generic parameters may not be used in const operations\n }\n \n fn main() {}"}, {"sha": "7726016eb835f36a646f10b3ff3626a712b2b5ca", "filename": "tests/ui/const-generics/min_const_generics/forbid-non-static-lifetimes.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,21 +1,20 @@\n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/forbid-non-static-lifetimes.rs:7:22\n    |\n LL |     test::<{ let _: &'a (); 3 },>();\n-   |                      ^^\n+   |                      ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/forbid-non-static-lifetimes.rs:21:16\n    |\n LL |     [(); (|_: &'a u8| (), 0).1];\n-   |                ^^\n+   |                ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "de710b0e37d3222411db707e6cab3d3f851effea", "filename": "tests/ui/const-generics/outer-lifetime-in-const-generic-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -2,7 +2,7 @@ struct Foo<\n     'a,\n     const N: usize = {\n         let x: &'a ();\n-        //~^ ERROR use of non-static lifetime `'a` in const generic\n+        //~^ ERROR generic parameters may not be used in const operations\n         3\n     },\n >(&'a ());"}, {"sha": "6b0d18f1989aa5182c5891b33651471766dabba8", "filename": "tests/ui/const-generics/outer-lifetime-in-const-generic-default.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,11 +1,11 @@\n-error[E0771]: use of non-static lifetime `'a` in const generic\n+error: generic parameters may not be used in const operations\n   --> $DIR/outer-lifetime-in-const-generic-default.rs:4:17\n    |\n LL |         let x: &'a ();\n-   |                 ^^\n+   |                 ^^ cannot perform const operation using `'a`\n    |\n-   = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0771`."}, {"sha": "2f03b8e1f66413cf14f7404967f266506f32ac09", "filename": "tests/ui/const-generics/variant-discrimiant-no-generics.full.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.full.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -0,0 +1,34 @@\n+error: generic parameters may not be used in enum discriminant values\n+  --> $DIR/variant-discrimiant-no-generics.rs:7:15\n+   |\n+LL |     Variant = N,\n+   |               ^ cannot perform const operation using `N`\n+   |\n+   = note: const parameters may not be used in enum discriminant values\n+\n+error: generic parameters may not be used in enum discriminant values\n+  --> $DIR/variant-discrimiant-no-generics.rs:12:17\n+   |\n+LL |     Variant = { N + 1 },\n+   |                 ^ cannot perform const operation using `N`\n+   |\n+   = note: const parameters may not be used in enum discriminant values\n+\n+error: generic parameters may not be used in enum discriminant values\n+  --> $DIR/variant-discrimiant-no-generics.rs:18:37\n+   |\n+LL |     Variant = { std::mem::size_of::<T>() as isize },\n+   |                                     ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in enum discriminant values\n+\n+error: generic parameters may not be used in enum discriminant values\n+  --> $DIR/variant-discrimiant-no-generics.rs:25:17\n+   |\n+LL |         let a: &'a ();\n+   |                 ^^ cannot perform const operation using `'a`\n+   |\n+   = note: lifetime parameters may not be used in enum discriminant values\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "2f03b8e1f66413cf14f7404967f266506f32ac09", "filename": "tests/ui/const-generics/variant-discrimiant-no-generics.min.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.min.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -0,0 +1,34 @@\n+error: generic parameters may not be used in enum discriminant values\n+  --> $DIR/variant-discrimiant-no-generics.rs:7:15\n+   |\n+LL |     Variant = N,\n+   |               ^ cannot perform const operation using `N`\n+   |\n+   = note: const parameters may not be used in enum discriminant values\n+\n+error: generic parameters may not be used in enum discriminant values\n+  --> $DIR/variant-discrimiant-no-generics.rs:12:17\n+   |\n+LL |     Variant = { N + 1 },\n+   |                 ^ cannot perform const operation using `N`\n+   |\n+   = note: const parameters may not be used in enum discriminant values\n+\n+error: generic parameters may not be used in enum discriminant values\n+  --> $DIR/variant-discrimiant-no-generics.rs:18:37\n+   |\n+LL |     Variant = { std::mem::size_of::<T>() as isize },\n+   |                                     ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in enum discriminant values\n+\n+error: generic parameters may not be used in enum discriminant values\n+  --> $DIR/variant-discrimiant-no-generics.rs:25:17\n+   |\n+LL |         let a: &'a ();\n+   |                 ^^ cannot perform const operation using `'a`\n+   |\n+   = note: lifetime parameters may not be used in enum discriminant values\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "e286aa9a6139fdc0388523f4de66ea8a81cd80b2", "filename": "tests/ui/const-generics/variant-discrimiant-no-generics.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -0,0 +1,32 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(generic_const_exprs))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+\n+enum Foo<const N: isize> {\n+    Variant = N,\n+    //~^ ERROR: generic parameters may not be used in enum discriminant values\n+}\n+\n+enum Owo<const N: isize> {\n+    Variant = { N + 1 },\n+    //~^ ERROR: generic parameters may not be used in enum discriminant values\n+}\n+\n+#[repr(isize)]\n+enum Bar<T> {\n+    Variant = { std::mem::size_of::<T>() as isize },\n+    Other(T), //~^ ERROR: generic parameters may not be used in enum discriminant values\n+}\n+\n+#[repr(isize)]\n+enum UwU<'a> {\n+    Variant = {\n+        let a: &'a ();\n+        //~^ ERROR: generic parameters may not be used in enum discriminant values\n+        10_isize\n+    },\n+    Other(&'a ()),\n+}\n+\n+fn main() {}"}, {"sha": "62137c0c8d340d9c037ba9fa19556cdec7984b1c", "filename": "tests/ui/enum-discriminant/issue-70453-generics-in-discr-ice-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -7,7 +7,7 @@ use core::intrinsics::discriminant_value;\n enum MyWeirdOption<T> {\n     None = 0,\n     Some(T) = std::mem::size_of::<T>(),\n-    //~^ ERROR generic parameters may not be used in const operations\n+    //~^ ERROR generic parameters may not be used in enum discriminant values\n }\n \n fn main() {"}, {"sha": "2cb159ee291023def40cd9f5265804616361e225", "filename": "tests/ui/enum-discriminant/issue-70453-generics-in-discr-ice-2.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,11 +1,10 @@\n-error: generic parameters may not be used in const operations\n+error: generic parameters may not be used in enum discriminant values\n   --> $DIR/issue-70453-generics-in-discr-ice-2.rs:9:35\n    |\n LL |     Some(T) = std::mem::size_of::<T>(),\n    |                                   ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = note: type parameters may not be used in enum discriminant values\n \n error: aborting due to previous error\n "}, {"sha": "093c57534a4c52e7d9e1e1494857c2a32a72f197", "filename": "tests/ui/enum-discriminant/issue-70453-generics-in-discr-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -8,7 +8,7 @@ enum MyWeirdOption<T> {\n //~^ ERROR parameter `T` is never used\n     None = 0,\n     Some = std::mem::size_of::<T>(),\n-    //~^ ERROR generic parameters may not be used in const operations\n+    //~^ ERROR generic parameters may not be used in enum discriminant values\n }\n \n fn main() {"}, {"sha": "fac3ce07aeb927d077a2bc476ffbccc91d2e837b", "filename": "tests/ui/enum-discriminant/issue-70453-generics-in-discr-ice.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,11 +1,10 @@\n-error: generic parameters may not be used in const operations\n+error: generic parameters may not be used in enum discriminant values\n   --> $DIR/issue-70453-generics-in-discr-ice.rs:10:32\n    |\n LL |     Some = std::mem::size_of::<T>(),\n    |                                ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = note: type parameters may not be used in enum discriminant values\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/issue-70453-generics-in-discr-ice.rs:7:20"}, {"sha": "15cd6d30364b91ed741c55a926f08efb3caa357b", "filename": "tests/ui/enum-discriminant/issue-70453-polymorphic-ctfe.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,11 +1,10 @@\n-error: generic parameters may not be used in const operations\n+error: generic parameters may not be used in enum discriminant values\n   --> $DIR/issue-70453-polymorphic-ctfe.rs:9:41\n    |\n LL |     Some(T) = core::mem::size_of::<*mut T>(),\n    |                                         ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = note: type parameters may not be used in enum discriminant values\n \n error: aborting due to previous error\n "}, {"sha": "878fa322f02d503f14f05ffb85d1f95d55890af9", "filename": "tests/ui/enum/issue-67945-1.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fenum%2Fissue-67945-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fenum%2Fissue-67945-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum%2Fissue-67945-1.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,11 +1,10 @@\n-error: generic parameters may not be used in const operations\n+error: generic parameters may not be used in enum discriminant values\n   --> $DIR/issue-67945-1.rs:3:16\n    |\n LL |         let x: S = 0;\n    |                ^ cannot perform const operation using `S`\n    |\n-   = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = note: type parameters may not be used in enum discriminant values\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-1.rs:1:10"}, {"sha": "f8ec12d470acfe415a0e32beaf219c8a82234ab9", "filename": "tests/ui/enum/issue-67945-2.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fenum%2Fissue-67945-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Fenum%2Fissue-67945-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum%2Fissue-67945-2.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,11 +1,10 @@\n-error: generic parameters may not be used in const operations\n+error: generic parameters may not be used in enum discriminant values\n   --> $DIR/issue-67945-2.rs:4:28\n    |\n LL |     Var = type_ascribe!(0, S),\n    |                            ^ cannot perform const operation using `S`\n    |\n-   = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = note: type parameters may not be used in enum discriminant values\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-2.rs:3:10"}, {"sha": "c0a2e98a7df60bcb7597ad34f50c56bfc8eb1976", "filename": "tests/ui/error-codes/E0771.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Ferror-codes%2FE0771.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Ferror-codes%2FE0771.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0771.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,7 +1,7 @@\n #![feature(adt_const_params)]\n //~^ WARN the feature `adt_const_params` is incomplete\n \n-fn function_with_str<'a, const STRING: &'a str>() {} //~ ERROR E0771\n+fn function_with_str<'a, const STRING: &'a str>() {} //~ ERROR E0770\n \n fn main() {\n     function_with_str::<\"Hello, world!\">()"}, {"sha": "9450c61c27be05d50666accd1dd752955bf51da0", "filename": "tests/ui/error-codes/E0771.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Ferror-codes%2FE0771.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Ferror-codes%2FE0771.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0771.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,10 +1,10 @@\n-error[E0771]: use of non-static lifetime `'a` in const generic\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/E0771.rs:4:41\n    |\n LL | fn function_with_str<'a, const STRING: &'a str>() {}\n-   |                                         ^^\n+   |                                         ^^ the type must not depend on the parameter `'a`\n    |\n-   = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n+   = note: lifetime parameters may not be used in the type of const parameters\n \n warning: the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/E0771.rs:1:12\n@@ -17,4 +17,4 @@ LL | #![feature(adt_const_params)]\n \n error: aborting due to previous error; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0771`.\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "3879784d0b0f1d9ed5f510721e1500189b6bd421", "filename": "tests/ui/lifetimes/issue-64173-unused-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -13,7 +13,7 @@ const fn foo<T>() -> usize {\n }\n \n struct Bar<'a> { //~ ERROR: parameter `'a` is never used\n-    beta: [(); foo::<&'a ()>()], //~ ERROR: a non-static lifetime is not allowed in a `const`\n+    beta: [(); foo::<&'a ()>()], //~ ERROR: generic parameters may not be used in const operations\n }\n \n fn main() {}"}, {"sha": "02ca10b2eb67cfdf02baafa0568f7738591ebf02", "filename": "tests/ui/lifetimes/issue-64173-unused-lifetimes.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -1,11 +1,11 @@\n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-64173-unused-lifetimes.rs:16:23\n    |\n LL |     beta: [(); foo::<&'a ()>()],\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic `Self` types are currently not permitted in anonymous constants\n   --> $DIR/issue-64173-unused-lifetimes.rs:4:28\n@@ -31,5 +31,4 @@ LL | struct Bar<'a> {\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0392, E0658.\n-For more information about an error, try `rustc --explain E0392`.\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "2f5ba98445bdc8d086b5c99a55a96256836abead", "filename": "tests/ui/lifetimes/unusual-rib-combinations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.rs?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -27,7 +27,7 @@ fn d<const C: S>() {}\n \n trait Foo<'a> {}\n struct Bar<const N: &'a (dyn for<'a> Foo<'a>)>;\n-//~^ ERROR use of non-static lifetime `'a` in const generic\n+//~^ ERROR the type of const parameters must not depend on other generic parameters\n //~| ERROR `&dyn for<'a> Foo<'a>` is forbidden as the type of a const generic parameter\n \n fn main() {}"}, {"sha": "4994e4dc444ee47e9c902c7b46fc7df1c6b51387", "filename": "tests/ui/lifetimes/unusual-rib-combinations.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ce26ecf580aec44e45308e952753f5218e07/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr?ref=73b3ce26ecf580aec44e45308e952753f5218e07", "patch": "@@ -9,13 +9,13 @@ help: consider introducing a named lifetime parameter\n LL | fn d<'a, const C: S<'a>>() {}\n    |      +++           ++++\n \n-error[E0771]: use of non-static lifetime `'a` in const generic\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/unusual-rib-combinations.rs:29:22\n    |\n LL | struct Bar<const N: &'a (dyn for<'a> Foo<'a>)>;\n-   |                      ^^\n+   |                      ^^ the type must not depend on the parameter `'a`\n    |\n-   = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n+   = note: lifetime parameters may not be used in the type of const parameters\n \n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/unusual-rib-combinations.rs:7:16\n@@ -74,5 +74,5 @@ LL | struct Bar<const N: &'a (dyn for<'a> Foo<'a>)>;\n \n error: aborting due to 9 previous errors\n \n-Some errors have detailed explanations: E0106, E0214, E0308, E0771.\n+Some errors have detailed explanations: E0106, E0214, E0308, E0770.\n For more information about an error, try `rustc --explain E0106`."}]}