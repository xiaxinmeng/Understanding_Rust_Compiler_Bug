{"sha": "d56e52402eedbd738b5161cd1e5a8c152cb65e21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NmU1MjQwMmVlZGJkNzM4YjUxNjFjZDFlNWE4YzE1MmNiNjVlMjE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-22T13:54:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-22T13:54:13Z"}, "message": "Merge #8922\n\n8922: Add more docs r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c88222888e201b2173cd4a15673bd879cb88dd95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c88222888e201b2173cd4a15673bd879cb88dd95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d56e52402eedbd738b5161cd1e5a8c152cb65e21", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgqQ0FCRBK7hj4Ov3rIwAAgBEIAI6ecNVjHusv9YoZxJJMsad0\nMFOX/baPKcLmmBbiKJGOJDulRt2LFr6sC+/fBKiPZGlWvB9pApHjrw1k/15z1xMz\nTPg7en0gaVz0Vyj2WBhkpj3hfzH3vf4ldRp/iF6s9YbpRyA40pdIRDuHw7AceoUO\nrMv3TRtDToET9SVd5pQRPy4p/ZXz5xPR4Kw6B78AYLXCh97Eoq6Bm0OrPv/NS6QA\nf8jmiL7B5k11O6lo3k1AjgBoMv9dEUVHqrc5yf8EzxDaUtAD4OAKDfJ+iVWguuhG\nTeuF9gextN1yTc9H7nLuS0CxZngx8vxUY/Glf6n3OsiYM40b7kLAYzL3/RD/mAg=\n=WhD1\n-----END PGP SIGNATURE-----\n", "payload": "tree c88222888e201b2173cd4a15673bd879cb88dd95\nparent 542337eca49986d785db2318bfe9c70809d4a229\nparent 188b0f96f98feaa0771f941343887c46113c8ced\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621691653 +0000\ncommitter GitHub <noreply@github.com> 1621691653 +0000\n\nMerge #8922\n\n8922: Add more docs r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d56e52402eedbd738b5161cd1e5a8c152cb65e21", "html_url": "https://github.com/rust-lang/rust/commit/d56e52402eedbd738b5161cd1e5a8c152cb65e21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d56e52402eedbd738b5161cd1e5a8c152cb65e21/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "542337eca49986d785db2318bfe9c70809d4a229", "url": "https://api.github.com/repos/rust-lang/rust/commits/542337eca49986d785db2318bfe9c70809d4a229", "html_url": "https://github.com/rust-lang/rust/commit/542337eca49986d785db2318bfe9c70809d4a229"}, {"sha": "188b0f96f98feaa0771f941343887c46113c8ced", "url": "https://api.github.com/repos/rust-lang/rust/commits/188b0f96f98feaa0771f941343887c46113c8ced", "html_url": "https://github.com/rust-lang/rust/commit/188b0f96f98feaa0771f941343887c46113c8ced"}], "stats": {"total": 112, "additions": 72, "deletions": 40}, "files": [{"sha": "19898f683910ecf39a72033b385bffbbc608b1ea", "filename": "crates/hir/src/db.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fhir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fhir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdb.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -1,5 +1,8 @@\n-//! FIXME: write short doc here\n-\n+//! Re-exports various subcrates databases so that the calling code can depend\n+//! only on `hir`. This breaks abstraction boundary a bit, it would be cool if\n+//! we didn't do that.\n+//!\n+//! But we need this for at least LRU caching at the query level.\n pub use hir_def::db::*;\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, HygieneFrameQuery, InternMacroQuery,"}, {"sha": "414c3f35ee011412e0d2627d24a0f6cb1d6392ca", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -1,4 +1,8 @@\n-//! FIXME: write short doc here\n+//! Re-export diagnostics such that clients of `hir` don't have to depend on\n+//! low-level crates.\n+//!\n+//! This probably isn't the best way to do this -- ideally, diagnistics should\n+//! be expressed in terms of hir types themselves.\n pub use hir_def::diagnostics::{\n     InactiveCode, UnresolvedMacroCall, UnresolvedModule, UnresolvedProcMacro,\n };"}, {"sha": "b75ec411cf679bd56e9dd90bb0216c68ef1d5bdd", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! See [`NavigationTarget`].\n \n use std::fmt;\n "}, {"sha": "b893c1c5412cb0debb4cf7221f8ddac47ea69fa2", "filename": "crates/ide/src/folding_ranges.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffolding_ranges.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use rustc_hash::FxHashSet;\n \n use syntax::{\n@@ -29,6 +27,10 @@ pub struct Fold {\n     pub kind: FoldKind,\n }\n \n+// Feature: Folding\n+//\n+// Defines folding regions for curly braced blocks, runs of consecutive import\n+// statements, and `region` / `endregion` comment markers.\n pub(crate) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {\n     let mut res = vec![];\n     let mut visited_comments = FxHashSet::default();"}, {"sha": "8fc40f9bdf226de39f9346a722b9a5b9296ae49c", "filename": "crates/ide_assists/src/assist_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fassist_context.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -1,4 +1,4 @@\n-//! See `AssistContext`\n+//! See [`AssistContext`].\n \n use std::mem;\n "}, {"sha": "48a7fa06a220a209f3ec9f659cb7b50d9aa2b7f5", "filename": "crates/ide_assists/src/path_transform.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fide_assists%2Fsrc%2Fpath_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fide_assists%2Fsrc%2Fpath_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fpath_transform.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -1,4 +1,5 @@\n-//! See `PathTransform`\n+//! See [`PathTransform`].\n+\n use hir::{HirDisplay, SemanticsScope};\n use ide_db::helpers::mod_path_to_ast;\n use rustc_hash::FxHashMap;"}, {"sha": "7cd01a7dfc63766f0f4a7eff5e844952c5bb328c", "filename": "crates/profile/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fprofile%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fprofile%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Flib.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -124,5 +124,5 @@ impl Drop for CpuSpan {\n }\n \n pub fn memory_usage() -> MemoryUsage {\n-    MemoryUsage::current()\n+    MemoryUsage::now()\n }"}, {"sha": "2917ded60f4691c0251263497b1dde787543743c", "filename": "crates/profile/src/memory_usage.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -1,4 +1,6 @@\n-//! FIXME: write short doc here\n+//! Like [`std::time::Instant`], but for memory.\n+//!\n+//! Measures the total size of all currently allocated objects.\n use std::fmt;\n \n use cfg_if::cfg_if;\n@@ -22,7 +24,7 @@ impl std::ops::Sub for MemoryUsage {\n }\n \n impl MemoryUsage {\n-    pub fn current() -> MemoryUsage {\n+    pub fn now() -> MemoryUsage {\n         cfg_if! {\n             if #[cfg(all(feature = \"jemalloc\", not(target_env = \"msvc\")))] {\n                 jemalloc_ctl::epoch::advance().unwrap();"}, {"sha": "112d03a9c7a09aa69a441a27132e8b7780bcd6b0", "filename": "crates/profile/src/stop_watch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fprofile%2Fsrc%2Fstop_watch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fprofile%2Fsrc%2Fstop_watch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fstop_watch.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -44,7 +44,7 @@ impl StopWatch {\n     }\n     pub fn memory(mut self, yes: bool) -> StopWatch {\n         if yes {\n-            self.memory = Some(MemoryUsage::current());\n+            self.memory = Some(MemoryUsage::now());\n         }\n         self\n     }\n@@ -58,7 +58,7 @@ impl StopWatch {\n         #[cfg(not(target_os = \"linux\"))]\n         let instructions = None;\n \n-        let memory = self.memory.map(|it| MemoryUsage::current() - it);\n+        let memory = self.memory.map(|it| MemoryUsage::now() - it);\n         StopWatchSpan { time, instructions, memory }\n     }\n }"}, {"sha": "ad705c75278a72d5168271f57c193aa3397f52c7", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! See [`CargoWorkspace`].\n \n use std::path::PathBuf;\n use std::{convert::TryInto, ops, process::Command, sync::Arc};\n@@ -12,10 +12,9 @@ use rustc_hash::FxHashMap;\n use serde::Deserialize;\n use serde_json::from_value;\n \n-use crate::build_data::BuildDataConfig;\n-use crate::utf8_stdout;\n+use crate::{build_data::BuildDataConfig, utf8_stdout};\n \n-/// `CargoWorkspace` represents the logical structure of, well, a Cargo\n+/// [`CargoWorkspace`] represents the logical structure of, well, a Cargo\n /// workspace. It pretty closely mirrors `cargo metadata` output.\n ///\n /// Note that internally, rust analyzer uses a different structure:"}, {"sha": "8c6cf94c249fa73e7f43914d4bd29b14bc6f6c42", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -1,4 +1,19 @@\n-//! FIXME: write short doc here\n+//! In rust-analyzer, we maintain a strict separation between pure abstract\n+//! semantic project model and a concrete model of a particular build system.\n+//!\n+//! Pure model is represented by the [`base_db::CrateGraph`] from another crate.\n+//!\n+//! In this crate, we are conserned with \"real world\" project models.\n+//!\n+//! Specifically, here we have a representation for a Cargo project\n+//! ([`CargoWorkspace`]) and for manually specified layout ([`ProjectJson`]).\n+//!\n+//! Roughly, the things we do here are:\n+//!\n+//! * Project discovery (where's the relevant Cargo.toml for the current dir).\n+//! * Custom build steps (`build.rs` code generation and compilation of\n+//!   procedural macros).\n+//! * Lowering of concrete model to a [`base_db::CrateGraph`]\n \n mod cargo_workspace;\n mod cfg_flag;"}, {"sha": "e8f1aca61b343923f5a4820cac9c156df28ce6a0", "filename": "crates/project_model/src/project_json.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fproject_json.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -1,4 +1,9 @@\n-//! FIXME: write short doc here\n+//! `rust-project.json` file format.\n+//!\n+//! This format is spiritually a serialization of [`base_db::CrateGraph`]. The\n+//! idea here is that people who do not use Cargo, can instead teach their build\n+//! system to generate `rust-project.json` which can be ingested by\n+//! rust-analyzer.\n \n use std::path::PathBuf;\n "}, {"sha": "f80e130021d4672f6e0cb7286ff54ee950b6bd80", "filename": "crates/syntax/fuzz/fuzz_targets/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fsyntax%2Ffuzz%2Ffuzz_targets%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fsyntax%2Ffuzz%2Ffuzz_targets%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ffuzz%2Ffuzz_targets%2Fparser.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! Fuzzing for from-scratch parsing.\n \n #![no_main]\n use libfuzzer_sys::fuzz_target;"}, {"sha": "f865ce8d67abfebb194397702facec0d27464f92", "filename": "crates/syntax/fuzz/fuzz_targets/reparse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fsyntax%2Ffuzz%2Ffuzz_targets%2Freparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fsyntax%2Ffuzz%2Ffuzz_targets%2Freparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ffuzz%2Ffuzz_targets%2Freparse.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! Fuzzing for incremental parsing.\n \n #![no_main]\n use libfuzzer_sys::fuzz_target;"}, {"sha": "8d7a77b507d8c96443388123429ae277c0cf8319", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! Collection of assorted algorithms for syntax trees.\n \n use std::{hash::BuildHasherDefault, ops::RangeInclusive};\n "}, {"sha": "256999fe09cf88356fbb286741ea20250e758344", "filename": "crates/syntax/src/fuzz.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fsyntax%2Fsrc%2Ffuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fsyntax%2Fsrc%2Ffuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ffuzz.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -1,4 +1,6 @@\n-//! FIXME: write short doc here\n+//! Some infrastructure for fuzzy testing.\n+//!\n+//! We don't normally run fuzzying, so this is hopelessly bitrotten :(\n \n use std::{\n     convert::TryInto,"}, {"sha": "25bfd41a1601346d4a18a8918f162319f3e11626", "filename": "crates/syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! See [`TextTreeSink`].\n \n use std::mem;\n "}, {"sha": "195d2251b18bc8ae6ce1eb36f54d90ac76030982", "filename": "crates/syntax/src/ptr.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fsyntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Fsyntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fptr.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -1,4 +1,13 @@\n-//! FIXME: write short doc here\n+//! In rust-analyzer, syntax trees are transient objects.\n+//!\n+//! That means that we create trees when we need them, and tear them down to\n+//! save memory. In this architecture, hanging on to a particular syntax node\n+//! for a long time is ill-advisable, as that keeps the whole tree resident.\n+//!\n+//! Instead, we provide a [`SyntaxNodePtr`] type, which stores information about\n+//! *location* of a particular syntax node in a tree. Its a small type which can\n+//! be cheaply stored, and which can be resolved to a real [`SyntaxNode`] when\n+//! necessary.\n \n use std::{\n     hash::{Hash, Hasher},"}, {"sha": "e0021039aea74d4322ad1651932a717fccf98dd7", "filename": "crates/tt/src/buffer.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Ftt%2Fsrc%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/crates%2Ftt%2Fsrc%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Fbuffer.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -1,5 +1,6 @@\n-//! FIXME: write short doc here\n-\n+//! Stateful iteration over token trees.\n+//!\n+//! We use this as the source of tokens for parser.\n use crate::{Leaf, Subtree, TokenTree};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n@@ -104,7 +105,7 @@ impl<'t> TokenBuffer<'t> {\n \n     /// Creates a cursor referencing the first token in the buffer and able to\n     /// traverse until the end of the buffer.\n-    pub fn begin(&self) -> Cursor {\n+    pub fn begin(&self) -> Cursor<'_> {\n         Cursor::create(self, EntryPtr(EntryId(0), 0))\n     }\n "}, {"sha": "e31cc2a6738e8214d7524ec26e9b67a26cf0e4e1", "filename": "xtask/src/tidy.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d56e52402eedbd738b5161cd1e5a8c152cb65e21/xtask%2Fsrc%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56e52402eedbd738b5161cd1e5a8c152cb65e21/xtask%2Fsrc%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Ftidy.rs?ref=d56e52402eedbd738b5161cd1e5a8c152cb65e21", "patch": "@@ -392,18 +392,7 @@ impl TidyDocs {\n             )\n         }\n \n-        let poorly_documented = [\n-            \"hir\",\n-            \"hir_expand\",\n-            \"ide\",\n-            \"mbe\",\n-            \"parser\",\n-            \"profile\",\n-            \"project_model\",\n-            \"syntax\",\n-            \"tt\",\n-            \"hir_ty\",\n-        ];\n+        let poorly_documented = [\"hir_expand\", \"mbe\", \"parser\", \"hir_ty\"];\n \n         let mut has_fixmes =\n             poorly_documented.iter().map(|it| (*it, false)).collect::<HashMap<&str, bool>>();"}]}