{"sha": "9e0426d7842c4a603237789b59e6c491d2dd3b4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMDQyNmQ3ODQyYzRhNjAzMjM3Nzg5YjU5ZTZjNDkxZDJkZDNiNGE=", "commit": {"author": {"name": "Andy Wang", "email": "qian.wang19@imperial.ac.uk", "date": "2021-04-08T23:54:51Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-05-05T14:10:57Z"}, "message": "Make local_path in RealFileName::Remapped Option to be removed in exported metadata", "tree": {"sha": "76ee0c8c2456a172edf48cb9c4385d71d0b8ff0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76ee0c8c2456a172edf48cb9c4385d71d0b8ff0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e0426d7842c4a603237789b59e6c491d2dd3b4a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmCSp3EACgkQGBtJ+fOP\nM3SMKgv/cqsnnBhyejpaLf7Xg4blSBjOaYh0ZLc/VJd/adhsYNDjdTimr9NITVlk\nL3UiXMRHffVvGFQbPjXsgL68Z/y7M/3JrIFCxea9JiyUD6fWjaFLPUbL14NgiIn2\nPLkc8153GLKvdFTbUJ8zHaGfldV9lcCKzRATLylI+60K5CCen8A4C2siBtOMeHMV\n3NIcfQWB+XIKtAOyXZR20BOMhSAwYczOa1BwN974af/8BoyCUhC6ke5STHJXDC4P\nOHu9WD2hwFc7gDDWs6vubWZAay1z9kRFo7QszrpMou0otkfYHTC2hN21vt6YpMFG\n8ixz5Al3ydnfsssiW3sBe4mskjuoGtE/fZb4Czah1dsukQxRYNURQl6GSbitXGVO\n/1dhzsauXBFs3PeILfHz0AbBhBLbVcMGx1zh6NjPdcnDbzG68a3QERSPZ5+MmYSA\nTduCWCKeYRKTLkOXkjryfADpV2XAWIxJe5K9Rda5Ar/HJmROOz1zd0FStJOEEuox\nB02Do4Lp\n=Sdl8\n-----END PGP SIGNATURE-----", "payload": "tree 76ee0c8c2456a172edf48cb9c4385d71d0b8ff0f\nparent 6720a370429282e071042af315d712e716d88abf\nauthor Andy Wang <qian.wang19@imperial.ac.uk> 1617926091 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1620223857 +0100\n\nMake local_path in RealFileName::Remapped Option to be removed in exported metadata\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e0426d7842c4a603237789b59e6c491d2dd3b4a", "html_url": "https://github.com/rust-lang/rust/commit/9e0426d7842c4a603237789b59e6c491d2dd3b4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e0426d7842c4a603237789b59e6c491d2dd3b4a/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6720a370429282e071042af315d712e716d88abf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6720a370429282e071042af315d712e716d88abf", "html_url": "https://github.com/rust-lang/rust/commit/6720a370429282e071042af315d712e716d88abf"}], "stats": {"total": 175, "additions": 123, "deletions": 52}, "files": [{"sha": "5c83d6c7ad598335228ec43083f7bf7847874416", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e0426d7842c4a603237789b59e6c491d2dd3b4a/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0426d7842c4a603237789b59e6c491d2dd3b4a/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=9e0426d7842c4a603237789b59e6c491d2dd3b4a", "patch": "@@ -1073,7 +1073,9 @@ impl<'a> ExtCtxt<'a> {\n         if !path.is_absolute() {\n             let callsite = span.source_callsite();\n             let mut result = match self.source_map().span_to_filename(callsite) {\n-                FileName::Real(name) => name.into_local_path(),\n+                FileName::Real(name) => name\n+                    .into_local_path()\n+                    .expect(\"attempting to resolve a file path in an external file\"),\n                 FileName::DocTest(path, _) => path,\n                 other => {\n                     return Err(self.struct_span_err("}, {"sha": "03910f4e18d9a224814c44b2b221d9b8204b84a2", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e0426d7842c4a603237789b59e6c491d2dd3b4a/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0426d7842c4a603237789b59e6c491d2dd3b4a/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=9e0426d7842c4a603237789b59e6c491d2dd3b4a", "patch": "@@ -362,7 +362,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n     // make crate a first class expansion target instead.\n     pub fn expand_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n         let file_path = match self.cx.source_map().span_to_filename(krate.span) {\n-            FileName::Real(name) => name.into_local_path(),\n+            FileName::Real(name) => name\n+                .into_local_path()\n+                .expect(\"attempting to resolve a file path in an external file\"),\n             other => PathBuf::from(other.to_string()),\n         };\n         let dir_path = file_path.parent().unwrap_or(&file_path).to_owned();"}, {"sha": "f91c0d8313824cc05f6f15e4282d557c93d0e18b", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e0426d7842c4a603237789b59e6c491d2dd3b4a/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0426d7842c4a603237789b59e6c491d2dd3b4a/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=9e0426d7842c4a603237789b59e6c491d2dd3b4a", "patch": "@@ -623,6 +623,7 @@ impl server::SourceFile for Rustc<'_> {\n         match file.name {\n             FileName::Real(ref name) => name\n                 .local_path()\n+                .expect(\"attempting to get a file path in an imported file in `proc_macro::SourceFile::path`\")\n                 .to_str()\n                 .expect(\"non-UTF8 file path in `proc_macro::SourceFile::path`\")\n                 .to_string(),"}, {"sha": "4cb90d5a6d618c98c4377dc7569ac119d0187c7f", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e0426d7842c4a603237789b59e6c491d2dd3b4a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0426d7842c4a603237789b59e6c491d2dd3b4a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=9e0426d7842c4a603237789b59e6c491d2dd3b4a", "patch": "@@ -1676,7 +1676,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                                     new_path.display(),\n                                 );\n                                 let new_name = rustc_span::RealFileName::Remapped {\n-                                    local_path: new_path,\n+                                    local_path: Some(new_path),\n                                     virtual_name,\n                                 };\n                                 *old_name = new_name;"}, {"sha": "9a398d902a781beef037f09465a64b41d379efd0", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e0426d7842c4a603237789b59e6c491d2dd3b4a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0426d7842c4a603237789b59e6c491d2dd3b4a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=9e0426d7842c4a603237789b59e6c491d2dd3b4a", "patch": "@@ -497,9 +497,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                             RealFileName::LocalPath(local_path) => {\n                                 Path::new(&working_dir).join(local_path).into()\n                             }\n-                            RealFileName::Remapped { local_path, virtual_name } => {\n+                            RealFileName::Remapped { local_path: _, virtual_name } => {\n                                 FileName::Real(RealFileName::Remapped {\n-                                    local_path: Path::new(&working_dir).join(local_path),\n+                                    // We do not want any local path to be exported into metadata\n+                                    local_path: None,\n                                     virtual_name: virtual_name.clone(),\n                                 })\n                             }"}, {"sha": "e5e6f31886c4bde1ec8dfccfc436e6cfb792e347", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 54, "deletions": 12, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9e0426d7842c4a603237789b59e6c491d2dd3b4a/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0426d7842c4a603237789b59e6c491d2dd3b4a/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=9e0426d7842c4a603237789b59e6c491d2dd3b4a", "patch": "@@ -115,38 +115,80 @@ scoped_tls::scoped_thread_local!(pub static SESSION_GLOBALS: SessionGlobals);\n \n // FIXME: We should use this enum or something like it to get rid of the\n // use of magic `/rust/1.x/...` paths across the board.\n-#[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]\n-#[derive(HashStable_Generic, Decodable, Encodable)]\n+#[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]\n+#[derive(HashStable_Generic, Decodable)]\n pub enum RealFileName {\n     LocalPath(PathBuf),\n     /// For remapped paths (namely paths into libstd that have been mapped\n     /// to the appropriate spot on the local host's file system, and local file\n     /// system paths that have been remapped with `FilePathMapping`),\n     Remapped {\n-        /// `local_path` is the (host-dependent) local path to the file.\n-        local_path: PathBuf,\n+        /// `local_path` is the (host-dependent) local path to the file. This is\n+        /// None if the file was imported from another crate\n+        local_path: Option<PathBuf>,\n         /// `virtual_name` is the stable path rustc will store internally within\n         /// build artifacts.\n         virtual_name: PathBuf,\n     },\n }\n \n+impl Hash for RealFileName {\n+    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {\n+        // To prevent #70924 from happening again we should only hash the\n+        // remapped (virtualized) path if that exists. This is because\n+        // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)\n+        // remain stable even if the corresponding local_path changes\n+        self.remapped_path_if_available().hash(state)\n+    }\n+}\n+\n+// This is functionally identical to #[derive(Encodable)], with the exception of\n+// an added assert statement\n+impl<S: Encoder> Encodable<S> for RealFileName {\n+    fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {\n+        encoder.emit_enum(\"RealFileName\", |encoder| match *self {\n+            RealFileName::LocalPath(ref local_path) => {\n+                encoder.emit_enum_variant(\"LocalPath\", 0, 1, |encoder| {\n+                    Ok({\n+                        encoder.emit_enum_variant_arg(0, |encoder| local_path.encode(encoder))?;\n+                    })\n+                })\n+            }\n+\n+            RealFileName::Remapped { ref local_path, ref virtual_name } => encoder\n+                .emit_enum_variant(\"Remapped\", 1, 2, |encoder| {\n+                    // For privacy and build reproducibility, we must not embed host-dependant path in artifacts\n+                    // if they have been remapped by --remap-path-prefix\n+                    assert!(local_path.is_none());\n+                    Ok({\n+                        encoder.emit_enum_variant_arg(0, |encoder| local_path.encode(encoder))?;\n+                        encoder.emit_enum_variant_arg(1, |encoder| virtual_name.encode(encoder))?;\n+                    })\n+                }),\n+        })\n+    }\n+}\n+\n impl RealFileName {\n-    /// Returns the path suitable for reading from the file system on the local host.\n+    /// Returns the path suitable for reading from the file system on the local host,\n+    /// if this information exists.\n     /// Avoid embedding this in build artifacts; see `stable_name()` for that.\n-    pub fn local_path(&self) -> &Path {\n+    pub fn local_path(&self) -> Option<&Path> {\n         match self {\n-            RealFileName::LocalPath(p)\n-            | RealFileName::Remapped { local_path: p, virtual_name: _ } => &p,\n+            RealFileName::LocalPath(p) => Some(p),\n+            RealFileName::Remapped { local_path: p, virtual_name: _ } => {\n+                p.as_ref().map(PathBuf::as_path)\n+            }\n         }\n     }\n \n-    /// Returns the path suitable for reading from the file system on the local host.\n+    /// Returns the path suitable for reading from the file system on the local host,\n+    /// if this information exists.\n     /// Avoid embedding this in build artifacts; see `stable_name()` for that.\n-    pub fn into_local_path(self) -> PathBuf {\n+    pub fn into_local_path(self) -> Option<PathBuf> {\n         match self {\n-            RealFileName::LocalPath(p)\n-            | RealFileName::Remapped { local_path: p, virtual_name: _ } => p,\n+            RealFileName::LocalPath(p) => Some(p),\n+            RealFileName::Remapped { local_path: p, virtual_name: _ } => p,\n         }\n     }\n "}, {"sha": "4e60d071c687337b2a070dbc66c586a3b4b1bae6", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9e0426d7842c4a603237789b59e6c491d2dd3b4a/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0426d7842c4a603237789b59e6c491d2dd3b4a/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=9e0426d7842c4a603237789b59e6c491d2dd3b4a", "patch": "@@ -133,9 +133,6 @@ impl StableSourceFileId {\n     fn new_from_name(name: &FileName) -> StableSourceFileId {\n         let mut hasher = StableHasher::new();\n \n-        // If name was remapped, we need to take both the local path\n-        // and stablised path into account, in case two different paths were\n-        // mapped to the same\n         name.hash(&mut hasher);\n \n         StableSourceFileId(hasher.finish())\n@@ -954,7 +951,13 @@ impl SourceMap {\n     }\n     pub fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {\n         source_file.add_external_src(|| match source_file.name {\n-            FileName::Real(ref name) => self.file_loader.read_file(name.local_path()).ok(),\n+            FileName::Real(ref name) => {\n+                if let Some(local_path) = name.local_path() {\n+                    self.file_loader.read_file(local_path).ok()\n+                } else {\n+                    None\n+                }\n+            }\n             _ => None,\n         })\n     }\n@@ -999,23 +1002,17 @@ impl FilePathMapping {\n     fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {\n         match file {\n             FileName::Real(realfile) => {\n-                // If the file is the Name variant with only local_path, then clearly we want to map that\n-                // to a virtual_name\n-                // If the file is already remapped, then we want to map virtual_name further\n-                // but we leave local_path alone\n-                let path = realfile.stable_name();\n-                let (mapped_path, mapped) = self.map_prefix(path.to_path_buf());\n-                if mapped {\n-                    let mapped_realfile = match realfile {\n-                        RealFileName::LocalPath(local_path)\n-                        | RealFileName::Remapped { local_path, virtual_name: _ } => {\n-                            RealFileName::Remapped {\n-                                local_path: local_path.clone(),\n-                                virtual_name: mapped_path,\n-                            }\n+                if let RealFileName::LocalPath(local_path) = realfile {\n+                    let (mapped_path, mapped) = self.map_prefix(local_path.to_path_buf());\n+                    let realfile = if mapped {\n+                        RealFileName::Remapped {\n+                            local_path: Some(local_path.clone()),\n+                            virtual_name: mapped_path,\n                         }\n+                    } else {\n+                        realfile.clone()\n                     };\n-                    (FileName::Real(mapped_realfile), mapped)\n+                    (FileName::Real(realfile), mapped)\n                 } else {\n                     unreachable!(\"attempted to remap an already remapped filename\");\n                 }"}, {"sha": "576f27f8f5c5cf7e220021a569b3109e389dd06a", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9e0426d7842c4a603237789b59e6c491d2dd3b4a/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0426d7842c4a603237789b59e6c491d2dd3b4a/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=9e0426d7842c4a603237789b59e6c491d2dd3b4a", "patch": "@@ -852,8 +852,10 @@ impl Collector {\n             let filename = source_map.span_to_filename(self.position);\n             if let FileName::Real(ref filename) = filename {\n                 if let Ok(cur_dir) = env::current_dir() {\n-                    if let Ok(path) = filename.local_path().strip_prefix(&cur_dir) {\n-                        return path.to_owned().into();\n+                    if let Some(local_path) = filename.local_path() {\n+                        if let Ok(path) = local_path.strip_prefix(&cur_dir) {\n+                            return path.to_owned().into();\n+                        }\n                     }\n                 }\n             }\n@@ -884,7 +886,14 @@ impl Tester for Collector {\n         }\n \n         let path = match &filename {\n-            FileName::Real(path) => path.local_path().to_path_buf(),\n+            FileName::Real(path) => {\n+                if let Some(local_path) = path.local_path() {\n+                    local_path.to_path_buf()\n+                } else {\n+                    // Somehow we got the filename from the metadata of another crate, should never happen\n+                    PathBuf::from(r\"doctest.rs\")\n+                }\n+            }\n             _ => PathBuf::from(r\"doctest.rs\"),\n         };\n "}, {"sha": "95f3a32e41f89736add7e612b4dc2842da050c3c", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9e0426d7842c4a603237789b59e6c491d2dd3b4a/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0426d7842c4a603237789b59e6c491d2dd3b4a/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=9e0426d7842c4a603237789b59e6c491d2dd3b4a", "patch": "@@ -290,7 +290,7 @@ impl<'tcx> Context<'tcx> {\n \n         // We can safely ignore synthetic `SourceFile`s.\n         let file = match item.span(self.tcx()).filename(self.sess()) {\n-            FileName::Real(ref path) => path.local_path().to_path_buf(),\n+            FileName::Real(ref path) => path.local_path_if_available().to_path_buf(),\n             _ => return None,\n         };\n         let file = &file;\n@@ -376,10 +376,17 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         } = options;\n \n         let src_root = match krate.src {\n-            FileName::Real(ref p) => match p.local_path().parent() {\n-                Some(p) => p.to_path_buf(),\n-                None => PathBuf::new(),\n-            },\n+            FileName::Real(ref p) => {\n+                if let Some(local_path) = p.local_path() {\n+                    match local_path.parent() {\n+                        Some(p) => p.to_path_buf(),\n+                        None => PathBuf::new(),\n+                    }\n+                } else {\n+                    // Somehow we got the filename from the metadata of another crate, should never happen\n+                    PathBuf::new()\n+                }\n+            }\n             _ => PathBuf::new(),\n         };\n         // If user passed in `--playground-url` arg, we fill in crate name here"}, {"sha": "9753179b6e18d020fce91be3e3238b94bfe19512", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e0426d7842c4a603237789b59e6c491d2dd3b4a/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0426d7842c4a603237789b59e6c491d2dd3b4a/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=9e0426d7842c4a603237789b59e6c491d2dd3b4a", "patch": "@@ -76,7 +76,13 @@ impl SourceCollector<'_, 'tcx> {\n     /// Renders the given filename into its corresponding HTML source file.\n     fn emit_source(&mut self, filename: &FileName) -> Result<(), Error> {\n         let p = match *filename {\n-            FileName::Real(ref file) => file.local_path().to_path_buf(),\n+            FileName::Real(ref file) => {\n+                if let Some(local_path) = file.local_path() {\n+                    local_path.to_path_buf()\n+                } else {\n+                    return Ok(());\n+                }\n+            }\n             _ => return Ok(()),\n         };\n         if self.scx.local_sources.contains_key(&*p) {"}, {"sha": "e0009bf264a130ad95751036447782cb8b540da1", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9e0426d7842c4a603237789b59e6c491d2dd3b4a/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0426d7842c4a603237789b59e6c491d2dd3b4a/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=9e0426d7842c4a603237789b59e6c491d2dd3b4a", "patch": "@@ -63,13 +63,17 @@ impl JsonRenderer<'_> {\n     fn convert_span(&self, span: clean::Span) -> Option<Span> {\n         match span.filename(self.sess()) {\n             rustc_span::FileName::Real(name) => {\n-                let hi = span.hi(self.sess());\n-                let lo = span.lo(self.sess());\n-                Some(Span {\n-                    filename: name.into_local_path(),\n-                    begin: (lo.line, lo.col.to_usize()),\n-                    end: (hi.line, hi.col.to_usize()),\n-                })\n+                if let Some(local_path) = name.into_local_path() {\n+                    let hi = span.hi(self.sess());\n+                    let lo = span.lo(self.sess());\n+                    Some(Span {\n+                        filename: local_path,\n+                        begin: (lo.line, lo.col.to_usize()),\n+                        end: (hi.line, hi.col.to_usize()),\n+                    })\n+                } else {\n+                    None\n+                }\n             }\n             _ => None,\n         }"}]}