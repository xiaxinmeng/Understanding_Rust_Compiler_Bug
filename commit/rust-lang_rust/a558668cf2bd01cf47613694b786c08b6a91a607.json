{"sha": "a558668cf2bd01cf47613694b786c08b6a91a607", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NTg2NjhjZjJiZDAxY2Y0NzYxMzY5NGI3ODZjMDhiNmE5MWE2MDc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T09:11:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-28T09:11:12Z"}, "message": "Rollup merge of #63051 - estebank:borrow-ice, r=matthewjasper\n\nAvoid ICE when referencing desugared local binding in borrow error\n\nTo avoid leaking the names of local bindings from expressions like for loops, #60984 explicitly ignored them, but an assertion that `LocalKind::Var` *must* have a name would trigger an ICE.\n\nBefore this change, the binding generated by desugaring the for loop would leak into the diagnostic (#63027):\n```\nerror[E0515]: cannot return value referencing local variable `__next`\n  --> return-local-binding-from-desugaring.rs:LL:CC\n   |\nLL |     for ref x in xs {\n   |         ----- `__next` is borrowed here\n...\nLL |     result\n   |     ^^^^^^ returns a value referencing data owned by the current function\n```\n\nIdeally `LocalKind` would carry more information to more accurately explain the problem, but for now, in order to avoid the ICE (fix #63026), we accept `LocalKind::Var` without a name and produce the following output:\n\n```\nerror[E0515]: cannot return value referencing local binding\n  --> $DIR/return-local-binding-from-desugaring.rs:30:5\n   |\nLL |     for ref x in xs {\n   |                  -- local binding introduced here\n...\nLL |     result\n   |     ^^^^^^ returns a value referencing data owned by the current function\n```", "tree": {"sha": "3ed6abc5656b8c07f4e9076c6296d7c5e165031f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ed6abc5656b8c07f4e9076c6296d7c5e165031f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a558668cf2bd01cf47613694b786c08b6a91a607", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdPWawCRBK7hj4Ov3rIwAAdHIIADxHLKLSfFB7Lakm+GemlDrd\nDa8yuLkeqB1y9sxGOlIoXlV0EEegH4ZZZkF6VrbQkbWqzHUm0Y10ordnx1piFIoM\nYhUrokkLBiAj/1QErJeSVwOOr0Mb6WtvHz+HmAh+VjVLTZ7ibLYLdNkGCuwcgx0T\nOcLisRLTbvnnzeQnqickKOWlFZ8+EvOPtWA6oWSFO0fOBoyZuWFW2YJOUmxQOyyw\naQr5IialeNlqyLlMzy3+GWsL8Uih6jlZe8wQsiBDsLfrB8EtMhOWYGwk/ztMC/Gb\nBFl8RWWiMtnE79vaZBHVC9rXpT5kq2x4RvhqX3nSdRV4bjI2LN6o29O2dbBrCIg=\n=9yF/\n-----END PGP SIGNATURE-----\n", "payload": "tree 3ed6abc5656b8c07f4e9076c6296d7c5e165031f\nparent 48802974aa2caabc7d386e4a39c72fd765f5b98e\nparent 01ba0e3718b9006030d2d5391176745547f7c9a7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564305072 +0200\ncommitter GitHub <noreply@github.com> 1564305072 +0200\n\nRollup merge of #63051 - estebank:borrow-ice, r=matthewjasper\n\nAvoid ICE when referencing desugared local binding in borrow error\n\nTo avoid leaking the names of local bindings from expressions like for loops, #60984 explicitly ignored them, but an assertion that `LocalKind::Var` *must* have a name would trigger an ICE.\n\nBefore this change, the binding generated by desugaring the for loop would leak into the diagnostic (#63027):\n```\nerror[E0515]: cannot return value referencing local variable `__next`\n  --> return-local-binding-from-desugaring.rs:LL:CC\n   |\nLL |     for ref x in xs {\n   |         ----- `__next` is borrowed here\n...\nLL |     result\n   |     ^^^^^^ returns a value referencing data owned by the current function\n```\n\nIdeally `LocalKind` would carry more information to more accurately explain the problem, but for now, in order to avoid the ICE (fix #63026), we accept `LocalKind::Var` without a name and produce the following output:\n\n```\nerror[E0515]: cannot return value referencing local binding\n  --> $DIR/return-local-binding-from-desugaring.rs:30:5\n   |\nLL |     for ref x in xs {\n   |                  -- local binding introduced here\n...\nLL |     result\n   |     ^^^^^^ returns a value referencing data owned by the current function\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a558668cf2bd01cf47613694b786c08b6a91a607", "html_url": "https://github.com/rust-lang/rust/commit/a558668cf2bd01cf47613694b786c08b6a91a607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a558668cf2bd01cf47613694b786c08b6a91a607/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48802974aa2caabc7d386e4a39c72fd765f5b98e", "url": "https://api.github.com/repos/rust-lang/rust/commits/48802974aa2caabc7d386e4a39c72fd765f5b98e", "html_url": "https://github.com/rust-lang/rust/commit/48802974aa2caabc7d386e4a39c72fd765f5b98e"}, {"sha": "01ba0e3718b9006030d2d5391176745547f7c9a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/01ba0e3718b9006030d2d5391176745547f7c9a7", "html_url": "https://github.com/rust-lang/rust/commit/01ba0e3718b9006030d2d5391176745547f7c9a7"}], "stats": {"total": 70, "additions": 57, "deletions": 13}, "files": [{"sha": "77e5ac2f865142d2615999739c729910b1ab8f34", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a558668cf2bd01cf47613694b786c08b6a91a607/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a558668cf2bd01cf47613694b786c08b6a91a607/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=a558668cf2bd01cf47613694b786c08b6a91a607", "patch": "@@ -1140,19 +1140,18 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 bug!(\"try_report_cannot_return_reference_to_local: not a local\")\n             };\n             match self.body.local_kind(*local) {\n-                LocalKind::ReturnPointer | LocalKind::Temp => {\n-                    (\n-                        \"temporary value\".to_string(),\n-                        \"temporary value created here\".to_string(),\n-                    )\n-                }\n-                LocalKind::Arg => {\n-                    (\n-                        \"function parameter\".to_string(),\n-                        \"function parameter borrowed here\".to_string(),\n-                    )\n-                },\n-                LocalKind::Var => bug!(\"local variable without a name\"),\n+                LocalKind::ReturnPointer | LocalKind::Temp => (\n+                    \"temporary value\".to_string(),\n+                    \"temporary value created here\".to_string(),\n+                ),\n+                LocalKind::Arg => (\n+                    \"function parameter\".to_string(),\n+                    \"function parameter borrowed here\".to_string(),\n+                ),\n+                LocalKind::Var => (\n+                    \"local binding\".to_string(),\n+                    \"local binding introduced here\".to_string(),\n+                ),\n             }\n         };\n "}, {"sha": "b2dcd54ec2e900c097be7f68cff75a8a933b79d4", "filename": "src/test/ui/borrowck/return-local-binding-from-desugaring.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a558668cf2bd01cf47613694b786c08b6a91a607/src%2Ftest%2Fui%2Fborrowck%2Freturn-local-binding-from-desugaring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a558668cf2bd01cf47613694b786c08b6a91a607/src%2Ftest%2Fui%2Fborrowck%2Freturn-local-binding-from-desugaring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freturn-local-binding-from-desugaring.rs?ref=a558668cf2bd01cf47613694b786c08b6a91a607", "patch": "@@ -0,0 +1,33 @@\n+// To avoid leaking the names of local bindings from expressions like for loops, #60984\n+// explicitly ignored them, but an assertion that `LocalKind::Var` *must* have a name would\n+// trigger an ICE. Before this change, this file's output would be:\n+// ```\n+// error[E0515]: cannot return value referencing local variable `__next`\n+//   --> return-local-binding-from-desugaring.rs:LL:CC\n+//    |\n+// LL |     for ref x in xs {\n+//    |         ----- `__next` is borrowed here\n+// ...\n+// LL |     result\n+//    |     ^^^^^^ returns a value referencing data owned by the current function\n+// ```\n+// FIXME: ideally `LocalKind` would carry more information to more accurately explain the problem.\n+\n+use std::collections::HashMap;\n+use std::hash::Hash;\n+\n+fn group_by<I, F, T>(xs: &mut I, f: F) -> HashMap<T, Vec<&I::Item>>\n+where\n+    I: Iterator,\n+    F: Fn(&I::Item) -> T,\n+    T: Eq + Hash,\n+{\n+    let mut result = HashMap::new();\n+    for ref x in xs {\n+        let key = f(x);\n+        result.entry(key).or_insert(Vec::new()).push(x);\n+    }\n+    result //~ ERROR cannot return value referencing local binding\n+}\n+\n+fn main() {}"}, {"sha": "293dbe628131384525abb7445a0b33ddda807f03", "filename": "src/test/ui/borrowck/return-local-binding-from-desugaring.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a558668cf2bd01cf47613694b786c08b6a91a607/src%2Ftest%2Fui%2Fborrowck%2Freturn-local-binding-from-desugaring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a558668cf2bd01cf47613694b786c08b6a91a607/src%2Ftest%2Fui%2Fborrowck%2Freturn-local-binding-from-desugaring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freturn-local-binding-from-desugaring.stderr?ref=a558668cf2bd01cf47613694b786c08b6a91a607", "patch": "@@ -0,0 +1,12 @@\n+error[E0515]: cannot return value referencing local binding\n+  --> $DIR/return-local-binding-from-desugaring.rs:30:5\n+   |\n+LL |     for ref x in xs {\n+   |                  -- local binding introduced here\n+...\n+LL |     result\n+   |     ^^^^^^ returns a value referencing data owned by the current function\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0515`."}]}