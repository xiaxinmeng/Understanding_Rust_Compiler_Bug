{"sha": "d6f2352a084ad405f1380c7b9389aa8ddf326760", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZjIzNTJhMDg0YWQ0MDVmMTM4MGM3YjkzODlhYThkZGYzMjY3NjA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-02T12:41:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-02T12:41:15Z"}, "message": "Merge #9757\n\n9757: intenral: completion cleanups r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4b753fd9caa8f5ec5e5976a1b5a9ad545b4ab62b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b753fd9caa8f5ec5e5976a1b5a9ad545b4ab62b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6f2352a084ad405f1380c7b9389aa8ddf326760", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhB+frCRBK7hj4Ov3rIwAA0QYIAGDj+m4g+Qya5PraPot28w3M\ngV5MuxyYX95T9O6jnHu82yjrbGSy+YtNqT7WNIzrjVNXTLb/yx/SY1YiQdc3bsEG\nyJX921+Xx/w/B0OW6PMDOBKZBebvnrwjG5p1nuHcRy6b9GM2rG53Wgnn1YRlQA10\n39hU9+y6NCQ1oVtcl0XTzrqhk7PWtjEF5y14GGe+vqftyTfCl2lVus/Czx25G+9a\nY6u3q2jHBOzs21zu1PwfifelbyVJEkpEudXrHxFJODph2/Y8p+5xIqKdOGW4hpZv\n07C66bMBvO3PTw5CtfJ4e/HJAwUR9HuhsL7BobAA6BSwYkqUbrQrb1EdTKqs/SY=\n=cSrY\n-----END PGP SIGNATURE-----\n", "payload": "tree 4b753fd9caa8f5ec5e5976a1b5a9ad545b4ab62b\nparent e7be544b7c309d96c6755189151739c9984dde3c\nparent 5f3662e01ce7d5216b3dd7ce3095402af1d75c17\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1627908075 +0000\ncommitter GitHub <noreply@github.com> 1627908075 +0000\n\nMerge #9757\n\n9757: intenral: completion cleanups r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f2352a084ad405f1380c7b9389aa8ddf326760", "html_url": "https://github.com/rust-lang/rust/commit/d6f2352a084ad405f1380c7b9389aa8ddf326760", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6f2352a084ad405f1380c7b9389aa8ddf326760/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7be544b7c309d96c6755189151739c9984dde3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7be544b7c309d96c6755189151739c9984dde3c", "html_url": "https://github.com/rust-lang/rust/commit/e7be544b7c309d96c6755189151739c9984dde3c"}, {"sha": "5f3662e01ce7d5216b3dd7ce3095402af1d75c17", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3662e01ce7d5216b3dd7ce3095402af1d75c17", "html_url": "https://github.com/rust-lang/rust/commit/5f3662e01ce7d5216b3dd7ce3095402af1d75c17"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "188e2aea9abcc5c6bfbab15198fd54b584a577b3", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d6f2352a084ad405f1380c7b9389aa8ddf326760/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f2352a084ad405f1380c7b9389aa8ddf326760/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=d6f2352a084ad405f1380c7b9389aa8ddf326760", "patch": "@@ -28,7 +28,10 @@ use crate::{\n \n #[derive(Debug, Clone, Default)]\n pub struct Resolver {\n-    // FIXME: all usages generally call `.rev`, so maybe reverse once in construction?\n+    /// The stack of scopes, where the inner-most scope is the last item.\n+    ///\n+    /// When using, you generally want to process the scopes in reverse order,\n+    /// there's `scopes` *method* for that.\n     scopes: Vec<Scope>,\n }\n \n@@ -123,6 +126,10 @@ impl Resolver {\n         }\n     }\n \n+    fn scopes(&self) -> impl Iterator<Item = &Scope> {\n+        self.scopes.iter().rev()\n+    }\n+\n     fn resolve_module_path(\n         &self,\n         db: &dyn DefDatabase,\n@@ -177,7 +184,7 @@ impl Resolver {\n     ) -> Option<(TypeNs, Option<usize>)> {\n         let first_name = path.segments().first()?;\n         let skip_to_mod = path.kind != PathKind::Plain;\n-        for scope in self.scopes.iter().rev() {\n+        for scope in self.scopes() {\n             match scope {\n                 Scope::ExprScope(_) => continue,\n                 Scope::GenericParams { .. } | Scope::ImplDefScope(_) if skip_to_mod => continue,\n@@ -251,7 +258,7 @@ impl Resolver {\n         let tmp = name![self];\n         let first_name = if path.is_self() { &tmp } else { path.segments().first()? };\n         let skip_to_mod = path.kind != PathKind::Plain && !path.is_self();\n-        for scope in self.scopes.iter().rev() {\n+        for scope in self.scopes() {\n             match scope {\n                 Scope::AdtScope(_)\n                 | Scope::ExprScope(_)\n@@ -342,14 +349,14 @@ impl Resolver {\n     }\n \n     pub fn process_all_names(&self, db: &dyn DefDatabase, f: &mut dyn FnMut(Name, ScopeDef)) {\n-        for scope in self.scopes.iter().rev() {\n+        for scope in self.scopes() {\n             scope.process_names(db, f);\n         }\n     }\n \n     pub fn traits_in_scope(&self, db: &dyn DefDatabase) -> FxHashSet<TraitId> {\n         let mut traits = FxHashSet::default();\n-        for scope in &self.scopes {\n+        for scope in self.scopes() {\n             match scope {\n                 Scope::ModuleScope(m) => {\n                     if let Some(prelude) = m.def_map.prelude() {\n@@ -384,7 +391,7 @@ impl Resolver {\n     }\n \n     fn module_scope(&self) -> Option<(&DefMap, LocalModuleId)> {\n-        self.scopes.iter().rev().find_map(|scope| match scope {\n+        self.scopes().find_map(|scope| match scope {\n             Scope::ModuleScope(m) => Some((&*m.def_map, m.module_id)),\n \n             _ => None,\n@@ -404,9 +411,7 @@ impl Resolver {\n     pub fn where_predicates_in_scope(\n         &self,\n     ) -> impl Iterator<Item = &crate::generics::WherePredicate> {\n-        self.scopes\n-            .iter()\n-            .rev()\n+        self.scopes()\n             .filter_map(|scope| match scope {\n                 Scope::GenericParams { params, .. } => Some(params),\n                 _ => None,\n@@ -415,14 +420,14 @@ impl Resolver {\n     }\n \n     pub fn generic_def(&self) -> Option<GenericDefId> {\n-        self.scopes.iter().rev().find_map(|scope| match scope {\n+        self.scopes().find_map(|scope| match scope {\n             Scope::GenericParams { def, .. } => Some(*def),\n             _ => None,\n         })\n     }\n \n     pub fn body_owner(&self) -> Option<DefWithBodyId> {\n-        self.scopes.iter().rev().find_map(|scope| match scope {\n+        self.scopes().find_map(|scope| match scope {\n             Scope::ExprScope(it) => Some(it.owner),\n             _ => None,\n         })"}, {"sha": "0af282d83dbca8ecafd9db4bc1737391bb12f083", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d6f2352a084ad405f1380c7b9389aa8ddf326760/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f2352a084ad405f1380c7b9389aa8ddf326760/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=d6f2352a084ad405f1380c7b9389aa8ddf326760", "patch": "@@ -84,13 +84,11 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     }\n \n     ctx.process_all_names(&mut |name, res| {\n-        if let ScopeDef::GenericParam(hir::GenericParam::LifetimeParam(_)) | ScopeDef::Label(_) =\n-            res\n-        {\n-            cov_mark::hit!(unqualified_skip_lifetime_completion);\n-            return;\n-        }\n         let add_resolution = match res {\n+            ScopeDef::GenericParam(hir::GenericParam::LifetimeParam(_)) | ScopeDef::Label(_) => {\n+                cov_mark::hit!(unqualified_skip_lifetime_completion);\n+                return;\n+            }\n             ScopeDef::ImplSelfType(_) => {\n                 !ctx.previous_token_is(syntax::T![impl]) && !ctx.previous_token_is(syntax::T![for])\n             }\n@@ -306,4 +304,25 @@ pub mod prelude {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn local_variable_shadowing() {\n+        // FIXME: this isn't actually correct, should emit `x` only once.\n+        check(\n+            r#\"\n+fn main() {\n+    let x = 92;\n+    {\n+        let x = 92;\n+        x$0;\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                lc x      i32\n+                lc x      i32\n+                fn main() fn()\n+            \"#]],\n+        );\n+    }\n }"}]}