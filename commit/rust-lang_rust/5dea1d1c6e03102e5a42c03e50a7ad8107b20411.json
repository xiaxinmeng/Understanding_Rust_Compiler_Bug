{"sha": "5dea1d1c6e03102e5a42c03e50a7ad8107b20411", "node_id": "C_kwDOAAsO6NoAKDVkZWExZDFjNmUwMzEwMmU1YTQyYzAzZTUwYTdhZDgxMDdiMjA0MTE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-26T21:50:25Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-13T04:53:36Z"}, "message": "EarlyBinder nits", "tree": {"sha": "cf55d9dd669269403facb23b6479f400babd91ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf55d9dd669269403facb23b6479f400babd91ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dea1d1c6e03102e5a42c03e50a7ad8107b20411", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dea1d1c6e03102e5a42c03e50a7ad8107b20411", "html_url": "https://github.com/rust-lang/rust/commit/5dea1d1c6e03102e5a42c03e50a7ad8107b20411", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dea1d1c6e03102e5a42c03e50a7ad8107b20411/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b96d9e0e20adb7716aa32a56fe96fde15c75d517", "url": "https://api.github.com/repos/rust-lang/rust/commits/b96d9e0e20adb7716aa32a56fe96fde15c75d517", "html_url": "https://github.com/rust-lang/rust/commit/b96d9e0e20adb7716aa32a56fe96fde15c75d517"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "01ffa28ca1ab141a63763517dcd494c5dd16a957", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5dea1d1c6e03102e5a42c03e50a7ad8107b20411/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dea1d1c6e03102e5a42c03e50a7ad8107b20411/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=5dea1d1c6e03102e5a42c03e50a7ad8107b20411", "patch": "@@ -26,11 +26,9 @@ use rustc_hir::intravisit::{walk_generics, Visitor as _};\n use rustc_hir::{GenericArg, GenericArgs, OpaqueTyOrigin};\n use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, SubstsRef};\n-use rustc_middle::ty::DynKind;\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{\n-    self, Const, DefIdTree, EarlyBinder, IsSuggestable, Ty, TyCtxt, TypeVisitable,\n-};\n+use rustc_middle::ty::{self, Const, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{DynKind, EarlyBinder};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECTS};\n use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;\n@@ -490,7 +488,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             self.astconv\n                                 .normalize_ty(\n                                     self.span,\n-                                    EarlyBinder(tcx.at(self.span).type_of(param.def_id))\n+                                    tcx.at(self.span)\n+                                        .bound_type_of(param.def_id)\n                                         .subst(tcx, substs),\n                                 )\n                                 .into()\n@@ -1258,10 +1257,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         item_segment: &hir::PathSegment<'_>,\n     ) -> Ty<'tcx> {\n         let substs = self.ast_path_substs_for_ty(span, did, item_segment);\n-        self.normalize_ty(\n-            span,\n-            EarlyBinder(self.tcx().at(span).type_of(did)).subst(self.tcx(), substs),\n-        )\n+        self.normalize_ty(span, self.tcx().at(span).bound_type_of(did).subst(self.tcx(), substs))\n     }\n \n     fn conv_object_ty_poly_trait_ref("}, {"sha": "5ca986f23ff5c37084367fa17609a5d797dd3ef9", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5dea1d1c6e03102e5a42c03e50a7ad8107b20411/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dea1d1c6e03102e5a42c03e50a7ad8107b20411/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=5dea1d1c6e03102e5a42c03e50a7ad8107b20411", "patch": "@@ -336,6 +336,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Basically whenever we are converting from a type scheme into\n     /// the fn body space, we always want to normalize associated\n     /// types as well. This function combines the two.\n+    // FIXME(compiler-errors): Remove this.\n     fn instantiate_type_scheme<T>(&self, span: Span, substs: SubstsRef<'tcx>, value: T) -> T\n     where\n         T: TypeFoldable<'tcx>,"}, {"sha": "644b34fa1b6d60d464e3d131f36907c1be2ded43", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5dea1d1c6e03102e5a42c03e50a7ad8107b20411/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dea1d1c6e03102e5a42c03e50a7ad8107b20411/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=5dea1d1c6e03102e5a42c03e50a7ad8107b20411", "patch": "@@ -5,7 +5,7 @@ use crate::infer::{GenericKind, VerifyBound};\n use rustc_data_structures::sso::SsoHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::GenericArg;\n-use rustc_middle::ty::{self, EarlyBinder, OutlivesPredicate, SubstsRef, Ty, TyCtxt};\n+use rustc_middle::ty::{self, OutlivesPredicate, SubstsRef, Ty, TyCtxt};\n \n use smallvec::smallvec;\n \n@@ -304,14 +304,13 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> impl Iterator<Item = ty::Region<'tcx>> {\n         let tcx = self.tcx;\n-        let bounds = tcx.item_bounds(def_id);\n-        trace!(\"{:#?}\", bounds);\n+        let bounds = tcx.bound_item_bounds(def_id);\n+        trace!(\"{:#?}\", bounds.0);\n         bounds\n-            .into_iter()\n+            .subst_iter(tcx, substs)\n             .filter_map(|p| p.to_opt_type_outlives())\n             .filter_map(|p| p.no_bound_vars())\n-            .map(|b| b.1)\n-            .map(move |r| EarlyBinder(r).subst(tcx, substs))\n+            .map(|OutlivesPredicate(_, r)| r)\n     }\n \n     /// Searches through a predicate list for a predicate `T: 'a`."}, {"sha": "ce2519787ec82948b5b30c53b2ea072fa0c5c9a5", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5dea1d1c6e03102e5a42c03e50a7ad8107b20411/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dea1d1c6e03102e5a42c03e50a7ad8107b20411/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=5dea1d1c6e03102e5a42c03e50a7ad8107b20411", "patch": "@@ -4,9 +4,10 @@ use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir;\n use crate::ty::layout::IntegerExt;\n use crate::ty::{\n-    self, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n-    TypeVisitable,\n+    self, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable, TypeFolder,\n+    TypeSuperFoldable, TypeVisitable,\n };\n+use crate::ty::query::TyCtxtAt;\n use crate::ty::{GenericArgKind, SubstsRef};\n use rustc_apfloat::Float as _;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -770,6 +771,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n+impl<'tcx> TyCtxtAt<'tcx> {\n+    pub fn bound_type_of(self, def_id: DefId) -> ty::EarlyBinder<Ty<'tcx>> {\n+        ty::EarlyBinder(self.type_of(def_id))\n+    }\n+}\n+\n struct OpaqueTypeExpander<'tcx> {\n     // Contains the DefIds of the opaque types that are currently being\n     // expanded. When we expand an opaque type we insert the DefId of"}]}