{"sha": "c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MWNhZmIxMGMzZTFjZDUwNjNiY2FjZDY2M2QwZmMxN2ZkZGM4YzM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-12-09T17:25:37Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-08T08:10:50Z"}, "message": "librustc_driver: Add support for loading plugins via command line (fixes #15446)", "tree": {"sha": "5e37af7d2fc0ad0b6f59ba6792fff3911a21625d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e37af7d2fc0ad0b6f59ba6792fff3911a21625d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3", "html_url": "https://github.com/rust-lang/rust/commit/c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f5f706f96e5940a6149257feda6a70844067d7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f5f706f96e5940a6149257feda6a70844067d7a", "html_url": "https://github.com/rust-lang/rust/commit/9f5f706f96e5940a6149257feda6a70844067d7a"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "3ab5b0a3bc463a36ce35ad7c6d63003307e7be59", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3", "patch": "@@ -516,7 +516,7 @@ impl<'a> CrateReader<'a> {\n     }\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum CrateOrString<'a> {\n     Krate(&'a ast::ViewItem),\n     Str(&'a str)"}, {"sha": "ef8a89c40fb5ade2daba2b139355ece146001b22", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3", "patch": "@@ -44,11 +44,11 @@ pub struct Plugins {\n     pub registrars: Vec<PluginRegistrar>,\n }\n \n-struct PluginLoader<'a> {\n+pub struct PluginLoader<'a> {\n     sess: &'a Session,\n     span_whitelist: HashSet<Span>,\n     reader: CrateReader<'a>,\n-    plugins: Plugins,\n+    pub plugins: Plugins,\n }\n \n impl<'a> PluginLoader<'a> {\n@@ -67,7 +67,7 @@ impl<'a> PluginLoader<'a> {\n \n /// Read plugin metadata and dynamically load registrar functions.\n pub fn load_plugins(sess: &Session, krate: &ast::Crate,\n-                    addl_plugins: Option<Plugins>) -> Plugins {\n+                    addl_plugins: Option<Vec<String>>) -> Plugins {\n     let mut loader = PluginLoader::new(sess);\n \n     // We need to error on `#[macro_use] extern crate` when it isn't at the\n@@ -79,19 +79,14 @@ pub fn load_plugins(sess: &Session, krate: &ast::Crate,\n \n     visit::walk_crate(&mut loader, krate);\n \n-    let mut plugins = loader.plugins;\n-\n-    match addl_plugins {\n-        Some(addl_plugins) => {\n-            // Add in the additional plugins requested by the frontend\n-            let Plugins { macros: addl_macros, registrars: addl_registrars } = addl_plugins;\n-            plugins.macros.extend(addl_macros.into_iter());\n-            plugins.registrars.extend(addl_registrars.into_iter());\n+    if let Some(plugins) = addl_plugins {\n+        for plugin in plugins.iter() {\n+            loader.load_plugin(CrateOrString::Str(plugin.as_slice()),\n+                                                  None, None, None)\n         }\n-        None => ()\n     }\n \n-    return plugins;\n+    return loader.plugins;\n }\n \n // note that macros aren't expanded yet, and therefore macros can't add plugins.\n@@ -160,7 +155,7 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n             }\n         }\n \n-        self.load_plugin(CrateOrString::Krate(vi), plugin_attr, macro_selection, reexport)\n+        self.load_plugin(CrateOrString::Krate(vi), plugin_attr, macro_selection, Some(reexport))\n     }\n \n     fn visit_mac(&mut self, _: &ast::Mac) {\n@@ -174,13 +169,13 @@ impl<'a> PluginLoader<'a> {\n                            c: CrateOrString<'b>,\n                            plugin_attr: Option<P<ast::MetaItem>>,\n                            macro_selection: Option<HashSet<token::InternedString>>,\n-                           reexport: HashSet<token::InternedString>) {\n+                           reexport: Option<HashSet<token::InternedString>>) {\n         let mut macros = vec![];\n         let mut registrar = None;\n \n-        let load_macros = match macro_selection.as_ref() {\n-            Some(sel) => sel.len() != 0 || reexport.len() != 0,\n-            None => true,\n+        let load_macros = match (macro_selection.as_ref(), reexport.as_ref()) {\n+            (Some(sel), Some(re)) => sel.len() != 0 || re.len() != 0,\n+            _ => true,\n         };\n         let load_registrar = plugin_attr.is_some();\n \n@@ -207,7 +202,11 @@ impl<'a> PluginLoader<'a> {\n                 None => true,\n                 Some(sel) => sel.contains(&name),\n             };\n-            def.export = reexport.contains(&name);\n+            def.export = if let Some(ref re) = reexport {\n+                re.contains(&name)\n+            } else {\n+                false // Don't reexport macros from crates loaded from the command line\n+            };\n             self.plugins.macros.push(def);\n         }\n "}, {"sha": "c506d32fc94f2404d7f9a21461affd1397a2238f", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3", "patch": "@@ -574,6 +574,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"Run all passes except translation; no output\"),\n     no_analysis: bool = (false, parse_bool,\n           \"Parse and expand the source, but run no analysis\"),\n+    extra_plugins: Vec<String> = (Vec::new(), parse_list,\n+        \"load extra plugins\"),\n     unstable_options: bool = (false, parse_bool,\n           \"Adds unstable command line options to rustc interface\"),\n     print_enum_sizes: bool = (false, parse_bool,"}, {"sha": "c2af4315b06a2c7bbb80e8c821aec3644bb2edea", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3", "patch": "@@ -47,7 +47,7 @@ pub fn compile_input(sess: Session,\n                      input: &Input,\n                      outdir: &Option<Path>,\n                      output: &Option<Path>,\n-                     addl_plugins: Option<Plugins>) {\n+                     addl_plugins: Option<Vec<String>>) {\n     // We need nested scopes here, because the intermediate results can keep\n     // large chunks of memory alive and we want to free them as soon as\n     // possible to keep the peak memory usage low\n@@ -166,7 +166,7 @@ pub fn phase_1_parse_input(sess: &Session, cfg: ast::CrateConfig, input: &Input)\n pub fn phase_2_configure_and_expand(sess: &Session,\n                                     mut krate: ast::Crate,\n                                     crate_name: &str,\n-                                    addl_plugins: Option<Plugins>)\n+                                    addl_plugins: Option<Vec<String>>)\n                                     -> Option<ast::Crate> {\n     let time_passes = sess.time_passes();\n "}, {"sha": "da2ec948cc96a61fa48126aa433449b059c1e17d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3", "patch": "@@ -53,6 +53,7 @@ use rustc::session::config::{Input, PrintRequest, UnstableFeatures};\n use rustc::lint::Lint;\n use rustc::lint;\n use rustc::metadata;\n+use rustc::metadata::creader::CrateOrString::Str;\n use rustc::DIAGNOSTICS;\n \n use std::cmp::Ordering::Equal;\n@@ -185,7 +186,8 @@ fn run_compiler(args: &[String]) {\n         return;\n     }\n \n-    driver::compile_input(sess, cfg, &input, &odir, &ofile, None);\n+    let plugins = sess.opts.debugging_opts.extra_plugins.clone();\n+    driver::compile_input(sess, cfg, &input, &odir, &ofile, Some(plugins));\n }\n \n pub fn get_unstable_features_setting() -> UnstableFeatures {"}]}