{"sha": "c5be0b2589e5ed732ae5001122e453f0903bfdf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1YmUwYjI1ODllNWVkNzMyYWU1MDAxMTIyZTQ1M2YwOTAzYmZkZjI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-09T15:03:39Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-12T17:58:29Z"}, "message": "Use NameLike in FileReference directly as its not exported from ide anymore", "tree": {"sha": "e60864d41fd22f995b424b057f4e225609577c26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e60864d41fd22f995b424b057f4e225609577c26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5be0b2589e5ed732ae5001122e453f0903bfdf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5be0b2589e5ed732ae5001122e453f0903bfdf2", "html_url": "https://github.com/rust-lang/rust/commit/c5be0b2589e5ed732ae5001122e453f0903bfdf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5be0b2589e5ed732ae5001122e453f0903bfdf2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d644728d82df10b034d0ea736590c781afa2ba15", "url": "https://api.github.com/repos/rust-lang/rust/commits/d644728d82df10b034d0ea736590c781afa2ba15", "html_url": "https://github.com/rust-lang/rust/commit/d644728d82df10b034d0ea736590c781afa2ba15"}], "stats": {"total": 88, "additions": 29, "deletions": 59}, "files": [{"sha": "8d28431cf6d32a85fc739b7f57a4db583e42782a", "filename": "crates/assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5be0b2589e5ed732ae5001122e453f0903bfdf2/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5be0b2589e5ed732ae5001122e453f0903bfdf2/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=c5be0b2589e5ed732ae5001122e453f0903bfdf2", "patch": "@@ -124,11 +124,10 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n         move |builder| {\n             builder.delete(delete_range);\n             for (file_id, references) in usages.references {\n-                let root = ctx.sema.parse(file_id);\n                 for (&should_wrap, reference) in wrap_in_parens[&file_id].iter().zip(references) {\n                     let replacement =\n                         if should_wrap { init_in_paren.clone() } else { init_str.clone() };\n-                    match &reference.as_name_ref(root.syntax()) {\n+                    match reference.name.as_name_ref() {\n                         Some(name_ref)\n                             if ast::RecordExprField::for_field_name(name_ref).is_some() =>\n                         {"}, {"sha": "592b12925a1a5a4a683d2d0d0681abca6bd8ce6a", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5be0b2589e5ed732ae5001122e453f0903bfdf2/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5be0b2589e5ed732ae5001122e453f0903bfdf2/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=c5be0b2589e5ed732ae5001122e453f0903bfdf2", "patch": "@@ -94,7 +94,7 @@ pub use ide_db::{\n     call_info::CallInfo,\n     label::Label,\n     line_index::{LineCol, LineIndex},\n-    search::{FileReference, ReferenceAccess, SearchScope},\n+    search::{ReferenceAccess, SearchScope},\n     source_change::{FileSystemEdit, SourceChange},\n     symbol_index::Query,\n     RootDatabase,"}, {"sha": "77c208be9a89c3ee9f926ac8db31435ddffa23e2", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5be0b2589e5ed732ae5001122e453f0903bfdf2/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5be0b2589e5ed732ae5001122e453f0903bfdf2/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=c5be0b2589e5ed732ae5001122e453f0903bfdf2", "patch": "@@ -66,12 +66,8 @@ pub(crate) fn find_all_refs(\n     let mut usages = def.usages(sema).set_scope(search_scope).all();\n     if let Some(ctor_filter) = ctor_filter {\n         // filter for constructor-literals\n-        usages.references.iter_mut().for_each(|(&file_id, it)| {\n-            let root = sema.parse(file_id);\n-            let root = root.syntax();\n-            it.retain(|reference| {\n-                reference.as_name_ref(root).map_or(false, |name_ref| ctor_filter(&name_ref))\n-            })\n+        usages.references.values_mut().for_each(|it| {\n+            it.retain(|reference| reference.name.as_name_ref().map_or(false, ctor_filter));\n         });\n         usages.references.retain(|_, it| !it.is_empty());\n     }"}, {"sha": "b04214291ae1816f39ca8db4790042ebe898333b", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5be0b2589e5ed732ae5001122e453f0903bfdf2/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5be0b2589e5ed732ae5001122e453f0903bfdf2/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=c5be0b2589e5ed732ae5001122e453f0903bfdf2", "patch": "@@ -164,20 +164,18 @@ fn find_definition(\n }\n \n fn source_edit_from_references(\n-    sema: &Semantics<RootDatabase>,\n+    _sema: &Semantics<RootDatabase>,\n     file_id: FileId,\n     references: &[FileReference],\n     def: Definition,\n     new_name: &str,\n ) -> (FileId, TextEdit) {\n-    let root = sema.parse(file_id);\n     let mut edit = TextEdit::builder();\n     for reference in references {\n-        let (range, replacement) = match &reference.name_from_syntax(root.syntax()) {\n-            Some(NameLike::Name(_)) => (None, format!(\"{}\", new_name)),\n-            Some(NameLike::NameRef(name_ref)) => source_edit_from_name_ref(name_ref, new_name, def),\n-            Some(NameLike::Lifetime(_)) => (None, format!(\"{}\", new_name)),\n-            None => (None, new_name.to_owned()),\n+        let (range, replacement) = match &reference.name {\n+            NameLike::Name(_) => (None, format!(\"{}\", new_name)),\n+            NameLike::NameRef(name_ref) => source_edit_from_name_ref(name_ref, new_name, def),\n+            NameLike::Lifetime(_) => (None, format!(\"{}\", new_name)),\n         };\n         // FIXME: Some(range) will be incorrect when we are inside macros\n         edit.replace(range.unwrap_or(reference.range), replacement);"}, {"sha": "38b20f2dc543707d9e171015c524a144ce011295", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 20, "deletions": 43, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/c5be0b2589e5ed732ae5001122e453f0903bfdf2/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5be0b2589e5ed732ae5001122e453f0903bfdf2/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=c5be0b2589e5ed732ae5001122e453f0903bfdf2", "patch": "@@ -10,23 +10,14 @@ use base_db::{FileId, FileRange, SourceDatabaseExt};\n use hir::{DefWithBody, HasSource, Module, ModuleSource, Semantics, Visibility};\n use once_cell::unsync::Lazy;\n use rustc_hash::FxHashMap;\n-use syntax::{\n-    ast, match_ast, AstNode, NodeOrToken, SyntaxElement, SyntaxNode, TextRange, TextSize,\n-};\n+use syntax::{ast, match_ast, AstNode, TextRange, TextSize};\n \n use crate::defs::NameClass;\n use crate::{\n     defs::{Definition, NameRefClass},\n     RootDatabase,\n };\n \n-#[derive(Debug, Clone)]\n-pub enum NameKind {\n-    Name,\n-    NameRef,\n-    Lifetime,\n-}\n-\n #[derive(Debug, Default, Clone)]\n pub struct UsageSearchResult {\n     pub references: FxHashMap<FileId, Vec<FileReference>>,\n@@ -68,6 +59,15 @@ pub enum NameLike {\n     Lifetime(ast::Lifetime),\n }\n \n+impl NameLike {\n+    pub fn as_name_ref(&self) -> Option<&ast::NameRef> {\n+        match self {\n+            NameLike::NameRef(name_ref) => Some(name_ref),\n+            _ => None,\n+        }\n+    }\n+}\n+\n mod __ {\n     use super::{\n         ast::{Lifetime, Name, NameRef},\n@@ -79,37 +79,10 @@ mod __ {\n #[derive(Debug, Clone)]\n pub struct FileReference {\n     pub range: TextRange,\n-    pub name: NameKind,\n+    pub name: NameLike,\n     pub access: Option<ReferenceAccess>,\n }\n \n-impl FileReference {\n-    pub fn name_from_syntax(&self, root: &SyntaxNode) -> Option<NameLike> {\n-        let node = node_or_parent(root.covering_element(self.range));\n-        match self.name {\n-            NameKind::Name => ast::Name::cast(node).map(Into::into),\n-            NameKind::NameRef => ast::NameRef::cast(node).map(Into::into),\n-            NameKind::Lifetime => ast::Lifetime::cast(node).map(Into::into),\n-        }\n-    }\n-\n-    pub fn as_name_ref(&self, root: &SyntaxNode) -> Option<ast::NameRef> {\n-        match self.name {\n-            NameKind::NameRef => {\n-                ast::NameRef::cast(node_or_parent(root.covering_element(self.range)))\n-            }\n-            _ => None,\n-        }\n-    }\n-}\n-\n-fn node_or_parent(ele: SyntaxElement) -> SyntaxNode {\n-    match ele {\n-        NodeOrToken::Node(node) => node,\n-        NodeOrToken::Token(token) => token.parent(),\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq)]\n pub enum ReferenceAccess {\n     Read,\n@@ -408,7 +381,11 @@ impl<'a> FindUsages<'a> {\n         match NameRefClass::classify_lifetime(self.sema, lifetime) {\n             Some(NameRefClass::Definition(def)) if &def == self.def => {\n                 let FileRange { file_id, range } = self.sema.original_range(lifetime.syntax());\n-                let reference = FileReference { range, name: NameKind::Lifetime, access: None };\n+                let reference = FileReference {\n+                    range,\n+                    name: NameLike::Lifetime(lifetime.clone()),\n+                    access: None,\n+                };\n                 sink(file_id, reference)\n             }\n             _ => false, // not a usage\n@@ -425,7 +402,7 @@ impl<'a> FindUsages<'a> {\n                 let FileRange { file_id, range } = self.sema.original_range(name_ref.syntax());\n                 let reference = FileReference {\n                     range,\n-                    name: NameKind::NameRef,\n+                    name: NameLike::NameRef(name_ref.clone()),\n                     access: reference_access(&def, &name_ref),\n                 };\n                 sink(file_id, reference)\n@@ -435,12 +412,12 @@ impl<'a> FindUsages<'a> {\n                 let reference = match self.def {\n                     Definition::Field(_) if &field == self.def => FileReference {\n                         range,\n-                        name: NameKind::NameRef,\n+                        name: NameLike::NameRef(name_ref.clone()),\n                         access: reference_access(&field, &name_ref),\n                     },\n                     Definition::Local(l) if &local == l => FileReference {\n                         range,\n-                        name: NameKind::NameRef,\n+                        name: NameLike::NameRef(name_ref.clone()),\n                         access: reference_access(&Definition::Local(local), &name_ref),\n                     },\n                     _ => return false, // not a usage\n@@ -464,7 +441,7 @@ impl<'a> FindUsages<'a> {\n                 let FileRange { file_id, range } = self.sema.original_range(name.syntax());\n                 let reference = FileReference {\n                     range,\n-                    name: NameKind::Name,\n+                    name: NameLike::Name(name.clone()),\n                     // FIXME: mutable patterns should have `Write` access\n                     access: Some(ReferenceAccess::Read),\n                 };"}]}