{"sha": "51d66714aca5886382c92ea929cc59c1c3b166d9", "node_id": "C_kwDOAAsO6NoAKDUxZDY2NzE0YWNhNTg4NjM4MmM5MmVhOTI5Y2M1OWMxYzNiMTY2ZDk", "commit": {"author": {"name": "Alex Chi", "email": "iskyzh@gmail.com", "date": "2022-04-11T05:44:01Z"}, "committer": {"name": "Alex Chi", "email": "iskyzh@gmail.com", "date": "2022-04-11T05:52:02Z"}, "message": "fix panic on GAT\n\nSigned-off-by: Alex Chi <iskyzh@gmail.com>", "tree": {"sha": "0725e36e04747d16ad60f3ed737969cb1b1ebc35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0725e36e04747d16ad60f3ed737969cb1b1ebc35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51d66714aca5886382c92ea929cc59c1c3b166d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51d66714aca5886382c92ea929cc59c1c3b166d9", "html_url": "https://github.com/rust-lang/rust/commit/51d66714aca5886382c92ea929cc59c1c3b166d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51d66714aca5886382c92ea929cc59c1c3b166d9/comments", "author": {"login": "skyzh", "id": 4198311, "node_id": "MDQ6VXNlcjQxOTgzMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4198311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skyzh", "html_url": "https://github.com/skyzh", "followers_url": "https://api.github.com/users/skyzh/followers", "following_url": "https://api.github.com/users/skyzh/following{/other_user}", "gists_url": "https://api.github.com/users/skyzh/gists{/gist_id}", "starred_url": "https://api.github.com/users/skyzh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skyzh/subscriptions", "organizations_url": "https://api.github.com/users/skyzh/orgs", "repos_url": "https://api.github.com/users/skyzh/repos", "events_url": "https://api.github.com/users/skyzh/events{/privacy}", "received_events_url": "https://api.github.com/users/skyzh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "skyzh", "id": 4198311, "node_id": "MDQ6VXNlcjQxOTgzMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4198311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skyzh", "html_url": "https://github.com/skyzh", "followers_url": "https://api.github.com/users/skyzh/followers", "following_url": "https://api.github.com/users/skyzh/following{/other_user}", "gists_url": "https://api.github.com/users/skyzh/gists{/gist_id}", "starred_url": "https://api.github.com/users/skyzh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skyzh/subscriptions", "organizations_url": "https://api.github.com/users/skyzh/orgs", "repos_url": "https://api.github.com/users/skyzh/repos", "events_url": "https://api.github.com/users/skyzh/events{/privacy}", "received_events_url": "https://api.github.com/users/skyzh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24cf957627d5ede1b395f92ff871fd7a281d49a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/24cf957627d5ede1b395f92ff871fd7a281d49a4", "html_url": "https://github.com/rust-lang/rust/commit/24cf957627d5ede1b395f92ff871fd7a281d49a4"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "c3c934c4680c1546abeabde089792d753c6dd7ed", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/51d66714aca5886382c92ea929cc59c1c3b166d9/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d66714aca5886382c92ea929cc59c1c3b166d9/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=51d66714aca5886382c92ea929cc59c1c3b166d9", "patch": "@@ -1471,7 +1471,7 @@ fn regression_11688_3() {\n }\n \n #[test]\n-fn gat_crash() {\n+fn gat_crash_1() {\n     cov_mark::check!(ignore_gats);\n     check_no_mismatches(\n         r#\"\n@@ -1489,6 +1489,26 @@ fn test<T: Crash>() {\n     );\n }\n \n+#[test]\n+fn gat_crash_2() {\n+    check_no_mismatches(\n+        r#\"\n+pub struct InlineStorage {}\n+\n+pub struct InlineStorageHandle<T: ?Sized> {}\n+\n+pub unsafe trait Storage {\n+    type Handle<T: ?Sized>;\n+    fn create<T: ?Sized>() -> Self::Handle<T>;\n+}\n+\n+unsafe impl Storage for InlineStorage {\n+    type Handle<T: ?Sized> = InlineStorageHandle<T>;\n+}\n+\"#,\n+    );\n+}\n+\n #[test]\n fn cfgd_out_self_param() {\n     cov_mark::check!(cfgd_out_self_param);"}, {"sha": "bdb7677f5d7863e1e7b67067a5d702d89a3db663", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/51d66714aca5886382c92ea929cc59c1c3b166d9/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d66714aca5886382c92ea929cc59c1c3b166d9/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=51d66714aca5886382c92ea929cc59c1c3b166d9", "patch": "@@ -176,13 +176,22 @@ pub(super) fn associated_type_by_name_including_super_traits(\n pub(crate) fn generics(db: &dyn DefDatabase, def: GenericDefId) -> Generics {\n     let parent_generics = parent_generic_def(db, def).map(|def| Box::new(generics(db, def)));\n     if parent_generics.is_some() && matches!(def, GenericDefId::TypeAliasId(_)) {\n-        // XXX: treat generic associated types as not existing to avoid crashes (#)\n-        //\n-        // Chalk expects the inner associated type's parameters to come\n-        // *before*, not after the trait's generics as we've always done it.\n-        // Adapting to this requires a larger refactoring\n-        cov_mark::hit!(ignore_gats);\n-        return Generics { def, params: Interned::new(Default::default()), parent_generics };\n+        let params = db.generic_params(def);\n+        if params\n+            .type_or_consts\n+            .iter()\n+            .any(|(_, x)| matches!(x, TypeOrConstParamData::ConstParamData(_)))\n+        {\n+            // XXX: treat const generic associated types as not existing to avoid crashes (#11769)\n+            //\n+            // Chalk expects the inner associated type's parameters to come\n+            // *before*, not after the trait's generics as we've always done it.\n+            // Adapting to this requires a larger refactoring\n+            cov_mark::hit!(ignore_gats);\n+            return Generics { def, params: Interned::new(Default::default()), parent_generics };\n+        } else {\n+            return Generics { def, params, parent_generics };\n+        }\n     }\n     Generics { def, params: db.generic_params(def), parent_generics }\n }"}]}