{"sha": "9de54570d6f41ad2ba55f7d46b0ffbdefc1c3c45", "node_id": "C_kwDOAAsO6NoAKDlkZTU0NTcwZDZmNDFhZDJiYTU1ZjdkNDZiMGZmYmRlZmMxYzNjNDU", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-05T15:59:48Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-05T15:59:48Z"}, "message": "Remove hir_expand macro recursion check", "tree": {"sha": "2d007947a0aa86597155dc0aedce708fe88e6357", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d007947a0aa86597155dc0aedce708fe88e6357"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9de54570d6f41ad2ba55f7d46b0ffbdefc1c3c45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9de54570d6f41ad2ba55f7d46b0ffbdefc1c3c45", "html_url": "https://github.com/rust-lang/rust/commit/9de54570d6f41ad2ba55f7d46b0ffbdefc1c3c45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9de54570d6f41ad2ba55f7d46b0ffbdefc1c3c45/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5eaf566669055b4dfb191b21117cff8125ada7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5eaf566669055b4dfb191b21117cff8125ada7f", "html_url": "https://github.com/rust-lang/rust/commit/b5eaf566669055b4dfb191b21117cff8125ada7f"}], "stats": {"total": 41, "additions": 1, "deletions": 40}, "files": [{"sha": "e14c669b4c9e14e4d221b0f9bb98cc89ea385573", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9de54570d6f41ad2ba55f7d46b0ffbdefc1c3c45/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9de54570d6f41ad2ba55f7d46b0ffbdefc1c3c45/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=9de54570d6f41ad2ba55f7d46b0ffbdefc1c3c45", "patch": "@@ -8,7 +8,6 @@ use limit::Limit;\n use mbe::syntax_node_to_token_tree;\n use rustc_hash::FxHashSet;\n use syntax::{\n-    algo::diff,\n     ast::{self, HasAttrs, HasDocComments},\n     AstNode, GreenNode, Parse, SyntaxNode, SyntaxToken, T,\n };\n@@ -283,28 +282,7 @@ fn parse_macro_expansion(\n \n     let (parse, rev_token_map) = token_tree_to_syntax_node(&tt, expand_to);\n \n-    match result.err {\n-        Some(err) => {\n-            // Safety check for recursive identity macro.\n-            let node = parse.syntax_node();\n-            let file: HirFileId = macro_file.into();\n-            let call_node = match file.call_node(db) {\n-                Some(it) => it,\n-                None => {\n-                    return ExpandResult::only_err(err);\n-                }\n-            };\n-            if is_self_replicating(&node, &call_node.value) {\n-                ExpandResult::only_err(err)\n-            } else {\n-                ExpandResult { value: Some((parse, Arc::new(rev_token_map))), err: Some(err) }\n-            }\n-        }\n-        None => {\n-            tracing::debug!(\"parse = {:?}\", parse.syntax_node().kind());\n-            ExpandResult { value: Some((parse, Arc::new(rev_token_map))), err: None }\n-        }\n-    }\n+    ExpandResult { value: Some((parse, Arc::new(rev_token_map))), err: result.err }\n }\n \n fn macro_arg(\n@@ -507,23 +485,6 @@ fn expand_proc_macro(db: &dyn AstDatabase, id: MacroCallId) -> ExpandResult<tt::\n     expander.expand(db, loc.krate, &macro_arg.0, attr_arg.as_ref())\n }\n \n-fn is_self_replicating(from: &SyntaxNode, to: &SyntaxNode) -> bool {\n-    if diff(from, to).is_empty() {\n-        return true;\n-    }\n-    if let Some(stmts) = ast::MacroStmts::cast(from.clone()) {\n-        if stmts.statements().any(|stmt| diff(stmt.syntax(), to).is_empty()) {\n-            return true;\n-        }\n-        if let Some(expr) = stmts.expr() {\n-            if diff(expr.syntax(), to).is_empty() {\n-                return true;\n-            }\n-        }\n-    }\n-    false\n-}\n-\n fn hygiene_frame(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<HygieneFrame> {\n     Arc::new(HygieneFrame::new(db, file_id))\n }"}]}