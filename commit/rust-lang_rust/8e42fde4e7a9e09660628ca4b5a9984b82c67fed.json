{"sha": "8e42fde4e7a9e09660628ca4b5a9984b82c67fed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNDJmZGU0ZTdhOWUwOTY2MDYyOGNhNGI1YTk5ODRiODJjNjdmZWQ=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-04T01:33:48Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-08T19:06:21Z"}, "message": "More fallout from removing FromIterator on ~[T]", "tree": {"sha": "acf955834d900a41a1cd8813e2ecbe108501d1fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acf955834d900a41a1cd8813e2ecbe108501d1fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e42fde4e7a9e09660628ca4b5a9984b82c67fed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e42fde4e7a9e09660628ca4b5a9984b82c67fed", "html_url": "https://github.com/rust-lang/rust/commit/8e42fde4e7a9e09660628ca4b5a9984b82c67fed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e42fde4e7a9e09660628ca4b5a9984b82c67fed/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "189dc5f30b2f4198a6ddbe917e2dd6644799f44e", "url": "https://api.github.com/repos/rust-lang/rust/commits/189dc5f30b2f4198a6ddbe917e2dd6644799f44e", "html_url": "https://github.com/rust-lang/rust/commit/189dc5f30b2f4198a6ddbe917e2dd6644799f44e"}], "stats": {"total": 84, "additions": 42, "deletions": 42}, "files": [{"sha": "42ffce56e875e7b98d755c18c0b54525be618c30", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/8e42fde4e7a9e09660628ca4b5a9984b82c67fed/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e42fde4e7a9e09660628ca4b5a9984b82c67fed/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=8e42fde4e7a9e09660628ca4b5a9984b82c67fed", "patch": "@@ -1352,7 +1352,7 @@ mod tests {\n                         let n = task_rng().gen::<uint>() % 10;\n                         counts[n] += 1;\n                         (n, counts[n])\n-                    }).collect::<~[(uint, int)]>();\n+                    }).collect::<Vec<(uint, int)>>();\n \n                 // only sort on the first element, so an unstable sort\n                 // may mix up the counts.\n@@ -1363,7 +1363,7 @@ mod tests {\n                 // will need to be ordered with increasing\n                 // counts... i.e. exactly asserting that this sort is\n                 // stable.\n-                assert!(v.windows(2).all(|w| w[0] <= w[1]));\n+                assert!(v.as_slice().windows(2).all(|w| w[0] <= w[1]));\n             }\n         }\n     }\n@@ -1663,74 +1663,74 @@ mod tests {\n     fn test_splitator() {\n         let xs = &[1i,2,3,4,5];\n \n-        assert_eq!(xs.split(|x| *x % 2 == 0).collect::<~[&[int]]>(),\n-                   box [&[1], &[3], &[5]]);\n-        assert_eq!(xs.split(|x| *x == 1).collect::<~[&[int]]>(),\n-                   box [&[], &[2,3,4,5]]);\n-        assert_eq!(xs.split(|x| *x == 5).collect::<~[&[int]]>(),\n-                   box [&[1,2,3,4], &[]]);\n-        assert_eq!(xs.split(|x| *x == 10).collect::<~[&[int]]>(),\n-                   box [&[1,2,3,4,5]]);\n-        assert_eq!(xs.split(|_| true).collect::<~[&[int]]>(),\n-                   box [&[], &[], &[], &[], &[], &[]]);\n+        assert_eq!(xs.split(|x| *x % 2 == 0).collect::<Vec<&[int]>>().as_slice(),\n+                   &[&[1], &[3], &[5]]);\n+        assert_eq!(xs.split(|x| *x == 1).collect::<Vec<&[int]>>().as_slice(),\n+                   &[&[], &[2,3,4,5]]);\n+        assert_eq!(xs.split(|x| *x == 5).collect::<Vec<&[int]>>().as_slice(),\n+                   &[&[1,2,3,4], &[]]);\n+        assert_eq!(xs.split(|x| *x == 10).collect::<Vec<&[int]>>().as_slice(),\n+                   &[&[1,2,3,4,5]]);\n+        assert_eq!(xs.split(|_| true).collect::<Vec<&[int]>>().as_slice(),\n+                   &[&[], &[], &[], &[], &[], &[]]);\n \n         let xs: &[int] = &[];\n-        assert_eq!(xs.split(|x| *x == 5).collect::<~[&[int]]>(), box [&[]]);\n+        assert_eq!(xs.split(|x| *x == 5).collect::<Vec<&[int]>>().as_slice(), &[&[]]);\n     }\n \n     #[test]\n     fn test_splitnator() {\n         let xs = &[1i,2,3,4,5];\n \n-        assert_eq!(xs.splitn(0, |x| *x % 2 == 0).collect::<~[&[int]]>(),\n-                   box [&[1,2,3,4,5]]);\n-        assert_eq!(xs.splitn(1, |x| *x % 2 == 0).collect::<~[&[int]]>(),\n-                   box [&[1], &[3,4,5]]);\n-        assert_eq!(xs.splitn(3, |_| true).collect::<~[&[int]]>(),\n-                   box [&[], &[], &[], &[4,5]]);\n+        assert_eq!(xs.splitn(0, |x| *x % 2 == 0).collect::<Vec<&[int]>>().as_slice(),\n+                   &[&[1,2,3,4,5]]);\n+        assert_eq!(xs.splitn(1, |x| *x % 2 == 0).collect::<Vec<&[int]>>().as_slice(),\n+                   &[&[1], &[3,4,5]]);\n+        assert_eq!(xs.splitn(3, |_| true).collect::<Vec<&[int]>>().as_slice(),\n+                   &[&[], &[], &[], &[4,5]]);\n \n         let xs: &[int] = &[];\n-        assert_eq!(xs.splitn(1, |x| *x == 5).collect::<~[&[int]]>(), box [&[]]);\n+        assert_eq!(xs.splitn(1, |x| *x == 5).collect::<Vec<&[int]>>().as_slice(), &[&[]]);\n     }\n \n     #[test]\n     fn test_rsplitator() {\n         let xs = &[1i,2,3,4,5];\n \n-        assert_eq!(xs.split(|x| *x % 2 == 0).rev().collect::<~[&[int]]>(),\n-                   box [&[5], &[3], &[1]]);\n-        assert_eq!(xs.split(|x| *x == 1).rev().collect::<~[&[int]]>(),\n-                   box [&[2,3,4,5], &[]]);\n-        assert_eq!(xs.split(|x| *x == 5).rev().collect::<~[&[int]]>(),\n-                   box [&[], &[1,2,3,4]]);\n-        assert_eq!(xs.split(|x| *x == 10).rev().collect::<~[&[int]]>(),\n-                   box [&[1,2,3,4,5]]);\n+        assert_eq!(xs.split(|x| *x % 2 == 0).rev().collect::<Vec<&[int]>>().as_slice(),\n+                   &[&[5], &[3], &[1]]);\n+        assert_eq!(xs.split(|x| *x == 1).rev().collect::<Vec<&[int]>>().as_slice(),\n+                   &[&[2,3,4,5], &[]]);\n+        assert_eq!(xs.split(|x| *x == 5).rev().collect::<Vec<&[int]>>().as_slice(),\n+                   &[&[], &[1,2,3,4]]);\n+        assert_eq!(xs.split(|x| *x == 10).rev().collect::<Vec<&[int]>>().as_slice(),\n+                   &[&[1,2,3,4,5]]);\n \n         let xs: &[int] = &[];\n-        assert_eq!(xs.split(|x| *x == 5).rev().collect::<~[&[int]]>(), box [&[]]);\n+        assert_eq!(xs.split(|x| *x == 5).rev().collect::<Vec<&[int]>>().as_slice(), &[&[]]);\n     }\n \n     #[test]\n     fn test_rsplitnator() {\n         let xs = &[1,2,3,4,5];\n \n-        assert_eq!(xs.rsplitn(0, |x| *x % 2 == 0).collect::<~[&[int]]>(),\n-                   box [&[1,2,3,4,5]]);\n-        assert_eq!(xs.rsplitn(1, |x| *x % 2 == 0).collect::<~[&[int]]>(),\n-                   box [&[5], &[1,2,3]]);\n-        assert_eq!(xs.rsplitn(3, |_| true).collect::<~[&[int]]>(),\n-                   box [&[], &[], &[], &[1,2]]);\n+        assert_eq!(xs.rsplitn(0, |x| *x % 2 == 0).collect::<Vec<&[int]>>().as_slice(),\n+                   &[&[1,2,3,4,5]]);\n+        assert_eq!(xs.rsplitn(1, |x| *x % 2 == 0).collect::<Vec<&[int]>>().as_slice(),\n+                   &[&[5], &[1,2,3]]);\n+        assert_eq!(xs.rsplitn(3, |_| true).collect::<Vec<&[int]>>().as_slice(),\n+                   &[&[], &[], &[], &[1,2]]);\n \n         let xs: &[int] = &[];\n-        assert_eq!(xs.rsplitn(1, |x| *x == 5).collect::<~[&[int]]>(), box [&[]]);\n+        assert_eq!(xs.rsplitn(1, |x| *x == 5).collect::<Vec<&[int]>>().as_slice(), &[&[]]);\n     }\n \n     #[test]\n     fn test_windowsator() {\n         let v = &[1i,2,3,4];\n \n-        assert_eq!(v.windows(2).collect::<~[&[int]]>(), box [&[1,2], &[2,3], &[3,4]]);\n-        assert_eq!(v.windows(3).collect::<~[&[int]]>(), box [&[1i,2,3], &[2,3,4]]);\n+        assert_eq!(v.windows(2).collect::<Vec<&[int]>>().as_slice(), &[&[1,2], &[2,3], &[3,4]]);\n+        assert_eq!(v.windows(3).collect::<Vec<&[int]>>().as_slice(), &[&[1i,2,3], &[2,3,4]]);\n         assert!(v.windows(6).next().is_none());\n     }\n \n@@ -1745,11 +1745,11 @@ mod tests {\n     fn test_chunksator() {\n         let v = &[1i,2,3,4,5];\n \n-        assert_eq!(v.chunks(2).collect::<~[&[int]]>(), box [&[1i,2], &[3,4], &[5]]);\n-        assert_eq!(v.chunks(3).collect::<~[&[int]]>(), box [&[1i,2,3], &[4,5]]);\n-        assert_eq!(v.chunks(6).collect::<~[&[int]]>(), box [&[1i,2,3,4,5]]);\n+        assert_eq!(v.chunks(2).collect::<Vec<&[int]>>().as_slice(), &[&[1i,2], &[3,4], &[5]]);\n+        assert_eq!(v.chunks(3).collect::<Vec<&[int]>>().as_slice(), &[&[1i,2,3], &[4,5]]);\n+        assert_eq!(v.chunks(6).collect::<Vec<&[int]>>().as_slice(), &[&[1i,2,3,4,5]]);\n \n-        assert_eq!(v.chunks(2).rev().collect::<~[&[int]]>(), box [&[5i], &[3,4], &[1,2]]);\n+        assert_eq!(v.chunks(2).rev().collect::<Vec<&[int]>>().as_slice(), &[&[5i], &[3,4], &[1,2]]);\n         let mut it = v.chunks(2);\n         assert_eq!(it.indexable(), 3);\n         assert_eq!(it.idx(0).unwrap(), &[1,2]);"}]}