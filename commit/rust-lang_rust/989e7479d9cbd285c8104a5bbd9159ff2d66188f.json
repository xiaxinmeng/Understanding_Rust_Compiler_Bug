{"sha": "989e7479d9cbd285c8104a5bbd9159ff2d66188f", "node_id": "C_kwDOAAsO6NoAKDk4OWU3NDc5ZDljYmQyODVjODEwNGE1YmJkOTE1OWZmMmQ2NjE4OGY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-17T22:07:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-18T00:52:30Z"}, "message": "interpret: more debug logging for read_scalar and write_scalar", "tree": {"sha": "1fc0e683db2426f19269481f20213639688e328f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fc0e683db2426f19269481f20213639688e328f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/989e7479d9cbd285c8104a5bbd9159ff2d66188f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/989e7479d9cbd285c8104a5bbd9159ff2d66188f", "html_url": "https://github.com/rust-lang/rust/commit/989e7479d9cbd285c8104a5bbd9159ff2d66188f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/989e7479d9cbd285c8104a5bbd9159ff2d66188f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5640304c63c5c77b721424be88791503a0e0ea3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5640304c63c5c77b721424be88791503a0e0ea3d", "html_url": "https://github.com/rust-lang/rust/commit/5640304c63c5c77b721424be88791503a0e0ea3d"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "6504624ad67c5ed7938453d3a539b25ade5fdc28", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/989e7479d9cbd285c8104a5bbd9159ff2d66188f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989e7479d9cbd285c8104a5bbd9159ff2d66188f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=989e7479d9cbd285c8104a5bbd9159ff2d66188f", "patch": "@@ -877,9 +877,17 @@ impl<'tcx, 'a, Tag: Provenance, Extra> AllocRefMut<'a, 'tcx, Tag, Extra> {\n         range: AllocRange,\n         val: ScalarMaybeUninit<Tag>,\n     ) -> InterpResult<'tcx> {\n+        let range = self.range.subrange(range);\n+        debug!(\n+            \"write_scalar in {} at {:#x}, size {}: {:?}\",\n+            self.alloc_id,\n+            range.start.bytes(),\n+            range.size.bytes(),\n+            val\n+        );\n         Ok(self\n             .alloc\n-            .write_scalar(&self.tcx, self.range.subrange(range), val)\n+            .write_scalar(&self.tcx, range, val)\n             .map_err(|e| e.to_interp_error(self.alloc_id))?)\n     }\n \n@@ -899,10 +907,19 @@ impl<'tcx, 'a, Tag: Provenance, Extra> AllocRefMut<'a, 'tcx, Tag, Extra> {\n \n impl<'tcx, 'a, Tag: Provenance, Extra> AllocRef<'a, 'tcx, Tag, Extra> {\n     pub fn read_scalar(&self, range: AllocRange) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n-        Ok(self\n+        let range = self.range.subrange(range);\n+        let res = self\n             .alloc\n-            .read_scalar(&self.tcx, self.range.subrange(range))\n-            .map_err(|e| e.to_interp_error(self.alloc_id))?)\n+            .read_scalar(&self.tcx, range)\n+            .map_err(|e| e.to_interp_error(self.alloc_id))?;\n+        debug!(\n+            \"read_scalar in {} at {:#x}, size {}: {:?}\",\n+            self.alloc_id,\n+            range.start.bytes(),\n+            range.size.bytes(),\n+            res\n+        );\n+        Ok(res)\n     }\n \n     pub fn read_ptr_sized(&self, offset: Size) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {"}]}