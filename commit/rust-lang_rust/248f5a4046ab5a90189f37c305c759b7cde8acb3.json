{"sha": "248f5a4046ab5a90189f37c305c759b7cde8acb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0OGY1YTQwNDZhYjVhOTAxODlmMzdjMzA1Yzc1OWI3Y2RlOGFjYjM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-13T00:50:28Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-13T01:26:49Z"}, "message": "Add trait `Self` filtering to `rustc_on_unimplemented`", "tree": {"sha": "14dc517ba94fb0888679c3e1daece849bb0e527b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14dc517ba94fb0888679c3e1daece849bb0e527b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/248f5a4046ab5a90189f37c305c759b7cde8acb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/248f5a4046ab5a90189f37c305c759b7cde8acb3", "html_url": "https://github.com/rust-lang/rust/commit/248f5a4046ab5a90189f37c305c759b7cde8acb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/248f5a4046ab5a90189f37c305c759b7cde8acb3/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c376fc001772200e2de8d7a610a5b67dcf642432", "url": "https://api.github.com/repos/rust-lang/rust/commits/c376fc001772200e2de8d7a610a5b67dcf642432", "html_url": "https://github.com/rust-lang/rust/commit/c376fc001772200e2de8d7a610a5b67dcf642432"}], "stats": {"total": 93, "additions": 27, "deletions": 66}, "files": [{"sha": "2800f11cc01b1ae43600b4e82df2ceac154050e8", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/248f5a4046ab5a90189f37c305c759b7cde8acb3/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248f5a4046ab5a90189f37c305c759b7cde8acb3/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=248f5a4046ab5a90189f37c305c759b7cde8acb3", "patch": "@@ -728,10 +728,7 @@ unsafe impl<T: ?Sized> Freeze for &mut T {}\n /// [`pin module`]: ../../std/pin/index.html\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n #[rustc_on_unimplemented(\n-    on(\n-        _Self = \"dyn std::future::Future<Output = i32> + std::marker::Send\",\n-        note = \"consider using `Box::pin`\",\n-    ),\n+    on(_Self = \"std::future::Future\", note = \"consider using `Box::pin`\",),\n     message = \"`{Self}` cannot be unpinned\"\n )]\n #[lang = \"unpin\"]"}, {"sha": "ab2d74b1c8deb809bbbc2a0e4baad96811e601c4", "filename": "src/librustc/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/248f5a4046ab5a90189f37c305c759b7cde8acb3/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248f5a4046ab5a90189f37c305c759b7cde8acb3/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=248f5a4046ab5a90189f37c305c759b7cde8acb3", "patch": "@@ -201,6 +201,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             }\n         }\n+        if let ty::Dynamic(traits, _) = self_ty.kind {\n+            for t in *traits.skip_binder() {\n+                match t {\n+                    ty::ExistentialPredicate::Trait(trait_ref) => {\n+                        flags.push((sym::_Self, Some(self.tcx.def_path_str(trait_ref.def_id))))\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n \n         if let Ok(Some(command)) =\n             OnUnimplementedDirective::of_item(self.tcx, trait_ref.def_id, def_id)"}, {"sha": "0a1686eac9d349ec3320a0486a160e0bf39a7024", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/248f5a4046ab5a90189f37c305c759b7cde8acb3/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248f5a4046ab5a90189f37c305c759b7cde8acb3/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs?ref=248f5a4046ab5a90189f37c305c759b7cde8acb3", "patch": "@@ -11,17 +11,19 @@ fn foo<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32>\n     x //~ ERROR mismatched types\n }\n \n-fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n-    Box::new(x) //~ ERROR mismatched types\n-}\n-\n-fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n-    Pin::new(x) //~ ERROR mismatched types\n-    //~^ ERROR E0277\n-}\n-\n-fn qux<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n-    Pin::new(Box::new(x)) //~ ERROR E0277\n-}\n+// FIXME: uncomment these once this commit is in Beta and we can rely on `rustc_on_unimplemented`\n+//        having filtering for `Self` being a trait.\n+//\n+// fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+//     Box::new(x)\n+// }\n+//\n+// fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+//     Pin::new(x)\n+// }\n+//\n+// fn qux<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+//     Pin::new(Box::new(x))\n+// }\n \n fn main() {}"}, {"sha": "48d941283b62de912189fe0811766552ea3fe001", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 2, "deletions": 50, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/248f5a4046ab5a90189f37c305c759b7cde8acb3/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/248f5a4046ab5a90189f37c305c759b7cde8acb3/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=248f5a4046ab5a90189f37c305c759b7cde8acb3", "patch": "@@ -15,54 +15,6 @@ LL |     x\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n-error[E0308]: mismatched types\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:15:5\n-   |\n-LL | fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n-   |                                                         ----------------------- expected `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>` because of return type\n-LL |     Box::new(x)\n-   |     ^^^^^^^^^^^ expected struct `std::pin::Pin`, found struct `std::boxed::Box`\n-   |\n-   = note: expected struct `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>`\n-              found struct `std::boxed::Box<F>`\n-   = help: use `Box::pin`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:19:14\n-   |\n-LL | fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n-   |        - this type parameter\n-LL |     Pin::new(x)\n-   |              ^\n-   |              |\n-   |              expected struct `std::boxed::Box`, found type parameter `F`\n-   |              help: store this in the heap by calling `Box::new`: `Box::new(x)`\n-   |\n-   = note:      expected struct `std::boxed::Box<dyn std::future::Future<Output = i32> + std::marker::Send>`\n-           found type parameter `F`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n-   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n-\n-error[E0277]: `dyn std::future::Future<Output = i32> + std::marker::Send` cannot be unpinned\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:19:5\n-   |\n-LL |     Pin::new(x)\n-   |     ^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `dyn std::future::Future<Output = i32> + std::marker::Send`\n-   |\n-   = note: consider using `Box::pin`\n-   = note: required by `std::pin::Pin::<P>::new`\n-\n-error[E0277]: `dyn std::future::Future<Output = i32> + std::marker::Send` cannot be unpinned\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:24:5\n-   |\n-LL |     Pin::new(Box::new(x))\n-   |     ^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `dyn std::future::Future<Output = i32> + std::marker::Send`\n-   |\n-   = note: consider using `Box::pin`\n-   = note: required by `std::pin::Pin::<P>::new`\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0277, E0308.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0308`."}]}