{"sha": "d4d3f53468cb392cb9b80278a232857ad8d68992", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZDNmNTM0NjhjYjM5MmNiOWI4MDI3OGEyMzI4NTdhZDhkNjg5OTI=", "commit": {"author": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-05-27T15:39:51Z"}, "committer": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-05-27T15:39:51Z"}, "message": "better respect alignment for copying tail", "tree": {"sha": "3e3d9d7fa5afdd158132d6c5ca52f9809bf58a0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e3d9d7fa5afdd158132d6c5ca52f9809bf58a0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4d3f53468cb392cb9b80278a232857ad8d68992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d3f53468cb392cb9b80278a232857ad8d68992", "html_url": "https://github.com/rust-lang/rust/commit/d4d3f53468cb392cb9b80278a232857ad8d68992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4d3f53468cb392cb9b80278a232857ad8d68992/comments", "author": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74751358e625878306aa193fed788e79aa53d4fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/74751358e625878306aa193fed788e79aa53d4fa", "html_url": "https://github.com/rust-lang/rust/commit/74751358e625878306aa193fed788e79aa53d4fa"}], "stats": {"total": 62, "additions": 37, "deletions": 25}, "files": [{"sha": "a2154e7fc69e5852209103251b84c9e35e3284b0", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 37, "deletions": 25, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d4d3f53468cb392cb9b80278a232857ad8d68992/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d3f53468cb392cb9b80278a232857ad8d68992/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=d4d3f53468cb392cb9b80278a232857ad8d68992", "patch": "@@ -532,35 +532,47 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n             i += block_size as isize;\n         }\n \n-        // Swap remaining bytes 8 at a time if x & y are properly aligned\n-        if align_of::<T>() % 8 == 0 {\n-            while i + 8 <= len as isize {\n-                let t = *(x.offset(i) as *mut u64);\n-                *(x.offset(i) as *mut u64) = *(y.offset(i) as *mut u64);\n-                *(y.offset(i) as *mut u64) = t;\n-                i += 8;\n-            }\n-        }\n-\n-        // Swap remaining bytes 4 at a time if x & y are properly aligned\n-        if align_of::<T>() % 4 == 0 {\n-            while i + 4 <= len as isize {\n-                let t = *(x.offset(i) as *mut u32);\n-                *(x.offset(i) as *mut u32) = *(y.offset(i) as *mut u32);\n-                *(y.offset(i) as *mut u32) = t;\n-                i += 4;\n-            }\n-        }\n \n         if i < len {\n-            // Swap any remaining bytes\n+            // Swap any remaining bytes, using aligned types to copy\n+            // where appropriate (this information is lost by conversion\n+            // to *mut u8, so restore it manually here)\n             let mut t: UnalignedBlock = uninitialized();\n-            let t = &mut t as *mut _ as *mut u8;\n-\n             let rem = (len - i) as usize;\n-            ptr::copy_nonoverlapping(x.offset(i), t, rem);\n-            ptr::copy_nonoverlapping(y.offset(i), x.offset(i), rem);\n-            ptr::copy_nonoverlapping(t, y.offset(i), rem);\n+\n+            if align_of::<T>() % 8 == 0 && len % 8 == 0 {\n+                let t = &mut t as *mut _ as *mut u64;\n+                let x = x.offset(i) as *mut u64;\n+                let y = y.offset(i) as *mut u64;\n+\n+                ptr::copy_nonoverlapping(x, t, rem / 8);\n+                ptr::copy_nonoverlapping(y, x, rem / 8);\n+                ptr::copy_nonoverlapping(t, y, rem / 8);\n+            } else if align_of::<T>() % 4 == 0 && len % 4 == 0 {\n+                let t = &mut t as *mut _ as *mut u32;\n+                let x = x.offset(i) as *mut u32;\n+                let y = y.offset(i) as *mut u32;\n+\n+                ptr::copy_nonoverlapping(x, t, rem / 4);\n+                ptr::copy_nonoverlapping(y, x, rem / 4);\n+                ptr::copy_nonoverlapping(t, y, rem / 4);\n+            } else if align_of::<T>() % 2 == 0 && len % 2 == 0 {\n+                let t = &mut t as *mut _ as *mut u16;\n+                let x = x.offset(i) as *mut u16;\n+                let y = y.offset(i) as *mut u16;\n+\n+                ptr::copy_nonoverlapping(x, t, rem / 2);\n+                ptr::copy_nonoverlapping(y, x, rem / 2);\n+                ptr::copy_nonoverlapping(t, y, rem / 2);\n+            } else {\n+                let t = &mut t as *mut _ as *mut u8;\n+                let x = x.offset(i);\n+                let y = y.offset(i);\n+\n+                ptr::copy_nonoverlapping(x, t, rem);\n+                ptr::copy_nonoverlapping(y, x, rem);\n+                ptr::copy_nonoverlapping(t, y, rem);\n+            }\n         }\n     }\n }"}]}