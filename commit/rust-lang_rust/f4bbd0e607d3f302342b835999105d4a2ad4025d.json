{"sha": "f4bbd0e607d3f302342b835999105d4a2ad4025d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YmJkMGU2MDdkM2YzMDIzNDJiODM1OTk5MTA1ZDRhMmFkNDAyNWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-15T18:01:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-15T18:01:26Z"}, "message": "Rollup merge of #74337 - estebank:ty-parse-recovery, r=varkor\n\nHandle case of incomplete local ty more gracefully\n\nWhen encountering a local binding with a type that isn't completed, the\nparser will reach a `=` token. When this happen, consider the type\n\"complete\" as far as the parser is concerned to avoid further errors\nbeing emitted by parse recovery logic.", "tree": {"sha": "67b9a7de2c75e5ca3140ada8fdec0b04a44a068a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67b9a7de2c75e5ca3140ada8fdec0b04a44a068a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4bbd0e607d3f302342b835999105d4a2ad4025d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfD0R2CRBK7hj4Ov3rIwAAdHIIABHkm+lYYTrqv/OxVuk6ou7N\nVUDVHg3O1xcUgUK8oWokvTVkEn6BpE4MrPyNx0pFAtBxOZmTg3Ta3F/34s7vKSOq\nPcecaBgOYbJfZIPoPxM2SAsHIzaH2r+BXG1g0RqpRelzOWCsVJG4/Qa6Gl+3qjvz\ngSBsQF/JsAN4/W9Ao5gr6BO6l9TNK3/XEzXTMGA6w5yXkCRZYYAmBGMUf6FwZDqR\nXE7FVni4LtW5F7gllyLlOhpq3GtGQqwzoXLf6djonA9mOG1TEj8TnCWlH7bMI2Bj\nqiqao5MrVwEq6QtBsBjBq/9i0Meq8cpQWPRj1KBsN5Vhs3KUiAcx/RAgUL9nw/Y=\n=LdFz\n-----END PGP SIGNATURE-----\n", "payload": "tree 67b9a7de2c75e5ca3140ada8fdec0b04a44a068a\nparent 64a27880de6dc7362cb5453807859324d9ce34b7\nparent ce3bd29c68a4fa78b95de7b98241726e5ba4f5e3\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594836086 -0700\ncommitter GitHub <noreply@github.com> 1594836086 -0700\n\nRollup merge of #74337 - estebank:ty-parse-recovery, r=varkor\n\nHandle case of incomplete local ty more gracefully\n\nWhen encountering a local binding with a type that isn't completed, the\nparser will reach a `=` token. When this happen, consider the type\n\"complete\" as far as the parser is concerned to avoid further errors\nbeing emitted by parse recovery logic.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4bbd0e607d3f302342b835999105d4a2ad4025d", "html_url": "https://github.com/rust-lang/rust/commit/f4bbd0e607d3f302342b835999105d4a2ad4025d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4bbd0e607d3f302342b835999105d4a2ad4025d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64a27880de6dc7362cb5453807859324d9ce34b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a27880de6dc7362cb5453807859324d9ce34b7", "html_url": "https://github.com/rust-lang/rust/commit/64a27880de6dc7362cb5453807859324d9ce34b7"}, {"sha": "ce3bd29c68a4fa78b95de7b98241726e5ba4f5e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce3bd29c68a4fa78b95de7b98241726e5ba4f5e3", "html_url": "https://github.com/rust-lang/rust/commit/ce3bd29c68a4fa78b95de7b98241726e5ba4f5e3"}], "stats": {"total": 75, "additions": 20, "deletions": 55}, "files": [{"sha": "d04920de47f09c44a70f7cada631d53f13c1c6cd", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f4bbd0e607d3f302342b835999105d4a2ad4025d/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bbd0e607d3f302342b835999105d4a2ad4025d/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=f4bbd0e607d3f302342b835999105d4a2ad4025d", "patch": "@@ -162,13 +162,19 @@ impl<'a> Parser<'a> {\n             match self.parse_ty() {\n                 Ok(ty) => (None, Some(ty)),\n                 Err(mut err) => {\n-                    // Rewind to before attempting to parse the type and continue parsing.\n-                    let parser_snapshot_after_type =\n-                        mem::replace(self, parser_snapshot_before_type);\n                     if let Ok(snip) = self.span_to_snippet(pat.span) {\n                         err.span_label(pat.span, format!(\"while parsing the type for `{}`\", snip));\n                     }\n-                    (Some((parser_snapshot_after_type, colon_sp, err)), None)\n+                    let err = if self.check(&token::Eq) {\n+                        err.emit();\n+                        None\n+                    } else {\n+                        // Rewind to before attempting to parse the type and continue parsing.\n+                        let parser_snapshot_after_type =\n+                            mem::replace(self, parser_snapshot_before_type);\n+                        Some((parser_snapshot_after_type, colon_sp, err))\n+                    };\n+                    (err, None)\n                 }\n             }\n         } else {"}, {"sha": "97905e2f8fa432532c2cecd8ea9c4a1e435b36cd", "filename": "src/test/ui/issues/issue-34334.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f4bbd0e607d3f302342b835999105d4a2ad4025d/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bbd0e607d3f302342b835999105d4a2ad4025d/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs?ref=f4bbd0e607d3f302342b835999105d4a2ad4025d", "patch": "@@ -1,11 +1,6 @@\n fn main () {\n     let sr: Vec<(u32, _, _) = vec![];\n     //~^ ERROR expected one of `,` or `>`, found `=`\n-    //~| ERROR expected value, found struct `Vec`\n-    //~| ERROR mismatched types\n-    //~| ERROR invalid left-hand side of assignment\n-    //~| ERROR expected expression, found reserved identifier `_`\n-    //~| ERROR expected expression, found reserved identifier `_`\n     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n-    //~^ ERROR no method named `iter` found\n+    //~^ ERROR a value of type `std::vec::Vec<(u32, _, _)>` cannot be built\n }"}, {"sha": "364f8264db463b8b64b5c077523070a3f1856969", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 9, "deletions": 45, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f4bbd0e607d3f302342b835999105d4a2ad4025d/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4bbd0e607d3f302342b835999105d4a2ad4025d/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=f4bbd0e607d3f302342b835999105d4a2ad4025d", "patch": "@@ -1,55 +1,19 @@\n-error: expected expression, found reserved identifier `_`\n-  --> $DIR/issue-34334.rs:2:23\n-   |\n-LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |                       ^ expected expression\n-\n-error: expected expression, found reserved identifier `_`\n-  --> $DIR/issue-34334.rs:2:26\n-   |\n-LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |                          ^ expected expression\n-\n error: expected one of `,` or `>`, found `=`\n   --> $DIR/issue-34334.rs:2:29\n    |\n LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |         ---                 ^ expected one of `,` or `>`\n-   |         | |\n-   |         | help: use `=` if you meant to assign\n+   |         --                  ^ expected one of `,` or `>`\n+   |         |\n    |         while parsing the type for `sr`\n \n-error[E0423]: expected value, found struct `Vec`\n-  --> $DIR/issue-34334.rs:2:13\n-   |\n-LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |             ^^^ help: use struct literal syntax instead: `Vec { buf: val, len: val }`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-34334.rs:2:31\n-   |\n-LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |                               ^^^^^^ expected `bool`, found struct `std::vec::Vec`\n-   |\n-   = note: expected type `bool`\n-            found struct `std::vec::Vec<_>`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/issue-34334.rs:2:29\n-   |\n-LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |             --------------- ^\n-   |             |\n-   |             cannot assign to this expression\n-\n-error[E0599]: no method named `iter` found for unit type `()` in the current scope\n-  --> $DIR/issue-34334.rs:9:36\n+error[E0277]: a value of type `std::vec::Vec<(u32, _, _)>` cannot be built from an iterator over elements of type `()`\n+  --> $DIR/issue-34334.rs:4:87\n    |\n LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n-   |                                    ^^^^ method not found in `()`\n+   |                                                                                       ^^^^^^^ value of type `std::vec::Vec<(u32, _, _)>` cannot be built from `std::iter::Iterator<Item=()>`\n+   |\n+   = help: the trait `std::iter::FromIterator<()>` is not implemented for `std::vec::Vec<(u32, _, _)>`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0070, E0308, E0423, E0599.\n-For more information about an error, try `rustc --explain E0070`.\n+For more information about this error, try `rustc --explain E0277`."}]}