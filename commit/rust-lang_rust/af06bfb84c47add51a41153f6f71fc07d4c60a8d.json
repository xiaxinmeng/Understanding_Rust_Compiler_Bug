{"sha": "af06bfb84c47add51a41153f6f71fc07d4c60a8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMDZiZmI4NGM0N2FkZDUxYTQxMTUzZjZmNzFmYzA3ZDRjNjBhOGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-28T05:20:54Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T06:33:09Z"}, "message": "resolve: extract `resolve_params`.", "tree": {"sha": "2846d50e32e979febdd40ba63c4c8c668a21d0b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2846d50e32e979febdd40ba63c4c8c668a21d0b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af06bfb84c47add51a41153f6f71fc07d4c60a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af06bfb84c47add51a41153f6f71fc07d4c60a8d", "html_url": "https://github.com/rust-lang/rust/commit/af06bfb84c47add51a41153f6f71fc07d4c60a8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af06bfb84c47add51a41153f6f71fc07d4c60a8d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a24f636e60a5da57ab641d800ac5952bbde98b65", "url": "https://api.github.com/repos/rust-lang/rust/commits/a24f636e60a5da57ab641d800ac5952bbde98b65", "html_url": "https://github.com/rust-lang/rust/commit/a24f636e60a5da57ab641d800ac5952bbde98b65"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "4595b1ff3f1cbdcb5410cc335c1e692139e9dbac", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/af06bfb84c47add51a41153f6f71fc07d4c60a8d/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af06bfb84c47add51a41153f6f71fc07d4c60a8d/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=af06bfb84c47add51a41153f6f71fc07d4c60a8d", "patch": "@@ -425,14 +425,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n         self.label_ribs.push(Rib::new(rib_kind));\n \n         // Add each argument to the rib.\n-        let mut bindings_list = FxHashMap::default();\n-        for argument in &declaration.inputs {\n-            self.resolve_pattern(&argument.pat, PatternSource::FnParam, &mut bindings_list);\n-\n-            self.visit_ty(&argument.ty);\n+        self.resolve_params(&declaration.inputs);\n \n-            debug!(\"(resolving function) recorded argument\");\n-        }\n         visit::walk_fn_ret_ty(self, &declaration.output);\n \n         // Resolve the function body, potentially inside the body of an async closure\n@@ -1135,6 +1129,15 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n         }\n     }\n \n+    fn resolve_params(&mut self, params: &[Arg]) {\n+        let mut bindings_list = FxHashMap::default();\n+        for param in params {\n+            self.resolve_pattern(&param.pat, PatternSource::FnParam, &mut bindings_list);\n+            self.visit_ty(&param.ty);\n+            debug!(\"(resolving function / closure) recorded parameter\");\n+        }\n+    }\n+\n     fn resolve_local(&mut self, local: &Local) {\n         // Resolve the type.\n         walk_list!(self, visit_ty, &local.ty);\n@@ -1860,20 +1863,12 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n             // `async |x| ...` gets desugared to `|x| future_from_generator(|| ...)`, so we need to\n             // resolve the arguments within the proper scopes so that usages of them inside the\n             // closure are detected as upvars rather than normal closure arg usages.\n-            ExprKind::Closure(\n-                _, IsAsync::Async { .. }, _,\n-                ref fn_decl, ref body, _span,\n-            ) => {\n-                let rib_kind = NormalRibKind;\n-                self.ribs[ValueNS].push(Rib::new(rib_kind));\n+            ExprKind::Closure(_, IsAsync::Async { .. }, _, ref fn_decl, ref body, _span) => {\n+                self.ribs[ValueNS].push(Rib::new(NormalRibKind));\n                 // Resolve arguments:\n-                let mut bindings_list = FxHashMap::default();\n-                for argument in &fn_decl.inputs {\n-                    self.resolve_pattern(&argument.pat, PatternSource::FnParam, &mut bindings_list);\n-                    self.visit_ty(&argument.ty);\n-                }\n-                // No need to resolve return type-- the outer closure return type is\n-                // FunctionRetTy::Default\n+                self.resolve_params(&fn_decl.inputs);\n+                // No need to resolve return type --\n+                // the outer closure return type is `FunctionRetTy::Default`.\n \n                 // Now resolve the inner closure\n                 {"}]}