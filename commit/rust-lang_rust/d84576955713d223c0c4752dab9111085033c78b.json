{"sha": "d84576955713d223c0c4752dab9111085033c78b", "node_id": "C_kwDOAAsO6NoAKGQ4NDU3Njk1NTcxM2QyMjNjMGM0NzUyZGFiOTExMTA4NTAzM2M3OGI", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-27T01:32:07Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-03-02T02:42:19Z"}, "message": "Restrict `#[rustc_box]` to `Box::new` calls", "tree": {"sha": "a3700bffff00a0eef54566e08082e29a7699b545", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3700bffff00a0eef54566e08082e29a7699b545"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d84576955713d223c0c4752dab9111085033c78b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d84576955713d223c0c4752dab9111085033c78b", "html_url": "https://github.com/rust-lang/rust/commit/d84576955713d223c0c4752dab9111085033c78b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d84576955713d223c0c4752dab9111085033c78b/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4e0cd966062ca67daed20775f4e8a60c28e57df", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e0cd966062ca67daed20775f4e8a60c28e57df", "html_url": "https://github.com/rust-lang/rust/commit/c4e0cd966062ca67daed20775f4e8a60c28e57df"}], "stats": {"total": 144, "additions": 115, "deletions": 29}, "files": [{"sha": "3ccd84398ec2720b45a71eb71dcbb1cae73f3a10", "filename": "compiler/rustc_ast_lowering/locales/en-US.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d84576955713d223c0c4752dab9111085033c78b/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d84576955713d223c0c4752dab9111085033c78b/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl?ref=d84576955713d223c0c4752dab9111085033c78b", "patch": "@@ -22,9 +22,6 @@ ast_lowering_misplaced_impl_trait =\n ast_lowering_misplaced_assoc_ty_binding =\n     associated type bounds are only allowed in where clauses and function signatures, not in {$position}\n \n-ast_lowering_rustc_box_attribute_error =\n-    #[rustc_box] requires precisely one argument and no other attributes are allowed\n-\n ast_lowering_underscore_expr_lhs_assign =\n     in expressions, `_` can only be used on the left-hand side of an assignment\n     .label = `_` not allowed here"}, {"sha": "5e6b6050bc0eaeaa8ba1c96c41be008607745b20", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d84576955713d223c0c4752dab9111085033c78b/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84576955713d223c0c4752dab9111085033c78b/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=d84576955713d223c0c4752dab9111085033c78b", "patch": "@@ -87,13 +87,6 @@ pub struct MisplacedAssocTyBinding<'a> {\n     pub position: DiagnosticArgFromDisplay<'a>,\n }\n \n-#[derive(Diagnostic, Clone, Copy)]\n-#[diag(ast_lowering_rustc_box_attribute_error)]\n-pub struct RustcBoxAttributeError {\n-    #[primary_span]\n-    pub span: Span,\n-}\n-\n #[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering_underscore_expr_lhs_assign)]\n pub struct UnderscoreExprLhsAssign {"}, {"sha": "ffb30b1b39127972724c914624007b4cd1fe2f87", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d84576955713d223c0c4752dab9111085033c78b/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84576955713d223c0c4752dab9111085033c78b/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=d84576955713d223c0c4752dab9111085033c78b", "patch": "@@ -2,7 +2,7 @@ use super::errors::{\n     AsyncGeneratorsNotSupported, AsyncNonMoveClosureNotSupported, AwaitOnlyInAsyncFnAndBlocks,\n     BaseExpressionDoubleDot, ClosureCannotBeStatic, FunctionalRecordUpdateDestructuringAssignemnt,\n     GeneratorTooManyParameters, InclusiveRangeWithNoEnd, NotSupportedForLifetimeBinderAsyncClosure,\n-    RustcBoxAttributeError, UnderscoreExprLhsAssign,\n+    UnderscoreExprLhsAssign,\n };\n use super::ResolverAstLoweringExt;\n use super::{ImplTraitContext, LoweringContext, ParamMode, ParenthesizedGenericArgs};\n@@ -83,15 +83,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ExprKind::Tup(elts) => hir::ExprKind::Tup(self.lower_exprs(elts)),\n                 ExprKind::Call(f, args) => {\n-                    if e.attrs.get(0).map_or(false, |a| a.has_name(sym::rustc_box)) {\n-                        if let [inner] = &args[..] && e.attrs.len() == 1 {\n-                            let kind = hir::ExprKind::Box(self.lower_expr(&inner));\n-                            return hir::Expr { hir_id, kind, span: self.lower_span(e.span) };\n-                        } else {\n-                            let guar = self.tcx.sess.emit_err(RustcBoxAttributeError { span: e.span });\n-                            hir::ExprKind::Err(guar)\n-                        }\n-                    } else if let Some(legacy_args) = self.resolver.legacy_const_generic_args(f) {\n+                    if let Some(legacy_args) = self.resolver.legacy_const_generic_args(f) {\n                         self.lower_legacy_const_generics((**f).clone(), args.clone(), &legacy_args)\n                     } else {\n                         let f = self.lower_expr(f);"}, {"sha": "93e7fb330e093e165a6f38dd37701af5eb535874", "filename": "compiler/rustc_mir_build/locales/en-US.ftl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d84576955713d223c0c4752dab9111085033c78b/compiler%2Frustc_mir_build%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d84576955713d223c0c4752dab9111085033c78b/compiler%2Frustc_mir_build%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Flocales%2Fen-US.ftl?ref=d84576955713d223c0c4752dab9111085033c78b", "patch": "@@ -374,3 +374,9 @@ mir_build_suggest_let_else = you might want to use `let else` to handle the {$co\n     } matched\n \n mir_build_suggest_attempted_int_lit = alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits\n+\n+\n+mir_build_rustc_box_attribute_error = `#[rustc_box]` attribute used incorrectly\n+    .attributes = no other attributes may be applied\n+    .not_box = `#[rustc_box]` may only be applied to a `Box::new()` call\n+    .missing_box = `#[rustc_box]` requires the `owned_box` lang item"}, {"sha": "dc4d2276e4aab43439bb00f729f4a64b52f40b04", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d84576955713d223c0c4752dab9111085033c78b/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84576955713d223c0c4752dab9111085033c78b/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=d84576955713d223c0c4752dab9111085033c78b", "patch": "@@ -888,3 +888,22 @@ pub enum MiscPatternSuggestion {\n         start_span: Span,\n     },\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(mir_build_rustc_box_attribute_error)]\n+pub struct RustcBoxAttributeError {\n+    #[primary_span]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub reason: RustcBoxAttrReason,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum RustcBoxAttrReason {\n+    #[note(mir_build_attributes)]\n+    Attributes,\n+    #[note(mir_build_not_box)]\n+    NotBoxNew,\n+    #[note(mir_build_missing_box)]\n+    MissingBox,\n+}"}, {"sha": "f3fa0c37be9853ef65e2368c14133de26c2f35bf", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d84576955713d223c0c4752dab9111085033c78b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84576955713d223c0c4752dab9111085033c78b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=d84576955713d223c0c4752dab9111085033c78b", "patch": "@@ -1,3 +1,4 @@\n+use crate::errors;\n use crate::thir::cx::region::Scope;\n use crate::thir::cx::Cx;\n use crate::thir::util::UserAnnotatedTyHelpers;\n@@ -18,7 +19,7 @@ use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{\n     self, AdtKind, InlineConstSubsts, InlineConstSubstsParts, ScalarInt, Ty, UpvarSubsts, UserType,\n };\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n use rustc_target::abi::VariantIdx;\n \n impl<'tcx> Cx<'tcx> {\n@@ -262,6 +263,7 @@ impl<'tcx> Cx<'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn make_mirror_unadjusted(&mut self, expr: &'tcx hir::Expr<'tcx>) -> Expr<'tcx> {\n         let tcx = self.tcx;\n         let expr_ty = self.typeck_results().expr_ty(expr);\n@@ -322,6 +324,34 @@ impl<'tcx> Cx<'tcx> {\n                         fn_span: expr.span,\n                     }\n                 } else {\n+                    let attrs = tcx.hir().attrs(expr.hir_id);\n+                    if attrs.iter().any(|a| a.name_or_empty() == sym::rustc_box) {\n+                        if attrs.len() != 1 {\n+                            tcx.sess.emit_err(errors::RustcBoxAttributeError {\n+                                span: attrs[0].span,\n+                                reason: errors::RustcBoxAttrReason::Attributes,\n+                            });\n+                        } else if let Some(box_item) = tcx.lang_items().owned_box() {\n+                            if let hir::ExprKind::Path(hir::QPath::TypeRelative(ty, fn_path)) = fun.kind\n+                                && let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = ty.kind\n+                                && path.res.opt_def_id().map_or(false, |did| did == box_item)\n+                                && fn_path.ident.name == sym::new\n+                                && let [value] = args\n+                            {\n+                                return Expr { temp_lifetime, ty: expr_ty, span: expr.span, kind: ExprKind::Box { value: self.mirror_expr(value) } }\n+                            } else {\n+                                tcx.sess.emit_err(errors::RustcBoxAttributeError {\n+                                    span: expr.span,\n+                                    reason: errors::RustcBoxAttrReason::NotBoxNew\n+                                });\n+                            }\n+                        } else {\n+                            tcx.sess.emit_err(errors::RustcBoxAttributeError {\n+                                span: attrs[0].span,\n+                                reason: errors::RustcBoxAttrReason::MissingBox,\n+                            });\n+                        }\n+                    }\n                     let adt_data =\n                         if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = fun.kind {\n                             // Tuple-like ADTs are represented as ExprKind::Call. We convert them here."}, {"sha": "50bef3709309d66e3fc117850ebe09dc1b223a67", "filename": "src/tools/clippy/clippy_utils/src/higher.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d84576955713d223c0c4752dab9111085033c78b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84576955713d223c0c4752dab9111085033c78b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs?ref=d84576955713d223c0c4752dab9111085033c78b", "patch": "@@ -287,15 +287,12 @@ impl<'a> VecArgs<'a> {\n                     Some(VecArgs::Repeat(&args[0], &args[1]))\n                 } else if match_def_path(cx, fun_def_id, &paths::SLICE_INTO_VEC) && args.len() == 1 {\n                     // `vec![a, b, c]` case\n-                    if_chain! {\n-                        if let hir::ExprKind::Box(boxed) = args[0].kind;\n-                        if let hir::ExprKind::Array(args) = boxed.kind;\n-                        then {\n-                            return Some(VecArgs::Vec(args));\n-                        }\n+                    if let hir::ExprKind::Call(_, [arg]) = &args[0].kind\n+                        && let hir::ExprKind::Array(args) = arg.kind {\n+                        Some(VecArgs::Vec(args))\n+                    } else {\n+                        None\n                     }\n-\n-                    None\n                 } else if match_def_path(cx, fun_def_id, &paths::VEC_NEW) && args.is_empty() {\n                     Some(VecArgs::Vec(&[]))\n                 } else {"}, {"sha": "b3726fb38671b00a0c9df1798a1dcd9a7ee8990b", "filename": "tests/ui/attributes/rustc-box.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d84576955713d223c0c4752dab9111085033c78b/tests%2Fui%2Fattributes%2Frustc-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84576955713d223c0c4752dab9111085033c78b/tests%2Fui%2Fattributes%2Frustc-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattributes%2Frustc-box.rs?ref=d84576955713d223c0c4752dab9111085033c78b", "patch": "@@ -0,0 +1,18 @@\n+#![feature(rustc_attrs, stmt_expr_attributes)]\n+\n+fn foo(_: u32, _: u32) {}\n+fn bar(_: u32) {}\n+\n+fn main() {\n+    #[rustc_box]\n+    Box::new(1); // OK\n+    #[rustc_box]\n+    Box::pin(1); //~ ERROR `#[rustc_box]` attribute used incorrectly\n+    #[rustc_box]\n+    foo(1, 1); //~ ERROR `#[rustc_box]` attribute used incorrectly\n+    #[rustc_box]\n+    bar(1); //~ ERROR `#[rustc_box]` attribute used incorrectly\n+    #[rustc_box] //~ ERROR `#[rustc_box]` attribute used incorrectly\n+    #[rustfmt::skip]\n+    Box::new(1);\n+}"}, {"sha": "073a18c7d58ec3fade1f8851a8d658f1cbcda206", "filename": "tests/ui/attributes/rustc-box.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d84576955713d223c0c4752dab9111085033c78b/tests%2Fui%2Fattributes%2Frustc-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84576955713d223c0c4752dab9111085033c78b/tests%2Fui%2Fattributes%2Frustc-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattributes%2Frustc-box.stderr?ref=d84576955713d223c0c4752dab9111085033c78b", "patch": "@@ -0,0 +1,34 @@\n+error: `#[rustc_box]` attribute used incorrectly\n+  --> $DIR/rustc-box.rs:10:5\n+   |\n+LL |     Box::pin(1);\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: `#[rustc_box]` may only be applied to a `Box::new()` call\n+\n+error: `#[rustc_box]` attribute used incorrectly\n+  --> $DIR/rustc-box.rs:12:5\n+   |\n+LL |     foo(1, 1);\n+   |     ^^^^^^^^^\n+   |\n+   = note: `#[rustc_box]` may only be applied to a `Box::new()` call\n+\n+error: `#[rustc_box]` attribute used incorrectly\n+  --> $DIR/rustc-box.rs:14:5\n+   |\n+LL |     bar(1);\n+   |     ^^^^^^\n+   |\n+   = note: `#[rustc_box]` may only be applied to a `Box::new()` call\n+\n+error: `#[rustc_box]` attribute used incorrectly\n+  --> $DIR/rustc-box.rs:15:5\n+   |\n+LL |     #[rustc_box]\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: no other attributes may be applied\n+\n+error: aborting due to 4 previous errors\n+"}]}