{"sha": "fef872a8757eaf6964c1af0dcd2b5b4751c056c4", "node_id": "C_kwDOAAsO6NoAKGZlZjg3MmE4NzU3ZWFmNjk2NGMxYWYwZGNkMmI1YjQ3NTFjMDU2YzQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-13T10:25:21Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-14T15:36:39Z"}, "message": "Guard `AliasTy` creation against passing the wrong number of substs", "tree": {"sha": "91fb5f636b312820a4371d966b166ea1c0870bb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91fb5f636b312820a4371d966b166ea1c0870bb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fef872a8757eaf6964c1af0dcd2b5b4751c056c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fef872a8757eaf6964c1af0dcd2b5b4751c056c4", "html_url": "https://github.com/rust-lang/rust/commit/fef872a8757eaf6964c1af0dcd2b5b4751c056c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bdda8f801818c1e9455725a964a3fa4f02c2bb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bdda8f801818c1e9455725a964a3fa4f02c2bb8", "html_url": "https://github.com/rust-lang/rust/commit/7bdda8f801818c1e9455725a964a3fa4f02c2bb8"}], "stats": {"total": 73, "additions": 35, "deletions": 38}, "files": [{"sha": "babf2ef1af418f9cb22f4870d276e8985974948d", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=fef872a8757eaf6964c1af0dcd2b5b4751c056c4", "patch": "@@ -1146,7 +1146,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n             debug!(?substs_trait_ref_and_assoc_item);\n \n-            ty::AliasTy { def_id: assoc_item.def_id, substs: substs_trait_ref_and_assoc_item }\n+            self.tcx().mk_alias_ty(assoc_item.def_id, substs_trait_ref_and_assoc_item)\n         });\n \n         if !speculative {"}, {"sha": "4f4e9a89fc7411c1bf09ac150d874f669e9cdd71", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=fef872a8757eaf6964c1af0dcd2b5b4751c056c4", "patch": "@@ -1746,10 +1746,7 @@ pub fn check_type_bounds<'tcx>(\n             _ => predicates.push(\n                 ty::Binder::bind_with_vars(\n                     ty::ProjectionPredicate {\n-                        projection_ty: ty::AliasTy {\n-                            def_id: trait_ty.def_id,\n-                            substs: rebased_substs,\n-                        },\n+                        projection_ty: tcx.mk_alias_ty(trait_ty.def_id, rebased_substs),\n                         term: impl_ty_value.into(),\n                     },\n                     bound_vars,"}, {"sha": "0103f58d0614c6e6b59bf6f5a865a6de0f7a3171", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=fef872a8757eaf6964c1af0dcd2b5b4751c056c4", "patch": "@@ -557,10 +557,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         .chain(projection_ty.substs.iter().skip(1)),\n                                 );\n \n-                                let quiet_projection_ty = ty::AliasTy {\n-                                    substs: substs_with_infer_self,\n-                                    def_id: projection_ty.def_id,\n-                                };\n+                                let quiet_projection_ty =\n+                                    tcx.mk_alias_ty(projection_ty.def_id, substs_with_infer_self);\n \n                                 let term = pred.skip_binder().term;\n "}, {"sha": "ad097b39d10844987aefbad1859c7dadf8f2d427", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=fef872a8757eaf6964c1af0dcd2b5b4751c056c4", "patch": "@@ -18,7 +18,7 @@ use crate::thir::Thir;\n use crate::traits;\n use crate::ty::query::{self, TyCtxtAt};\n use crate::ty::{\n-    self, AdtDef, AdtDefData, AdtKind, AliasTy, Binder, BindingMode, BoundVar, CanonicalPolyFnSig,\n+    self, AdtDef, AdtDefData, AdtKind, Binder, BindingMode, BoundVar, CanonicalPolyFnSig,\n     ClosureSizeProfileData, Const, ConstS, DefIdTree, FloatTy, FloatVar, FloatVid,\n     GenericParamDefKind, InferTy, IntTy, IntVar, IntVid, List, ParamConst, ParamTy,\n     PolyExistentialPredicate, PolyFnSig, Predicate, PredicateKind, Region, RegionKind, ReprOptions,\n@@ -2591,12 +2591,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_projection(self, item_def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n-        debug_assert_eq!(\n-            self.generics_of(item_def_id).count(),\n-            substs.len(),\n-            \"wrong number of generic parameters for {item_def_id:?}: {substs:?}\",\n-        );\n-        self.mk_ty(Alias(ty::Projection, AliasTy { def_id: item_def_id, substs }))\n+        self.mk_ty(Alias(ty::Projection, self.mk_alias_ty(item_def_id, substs)))\n     }\n \n     #[inline]\n@@ -2867,6 +2862,23 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty::TraitRef::new(trait_def_id, substs)\n     }\n \n+    pub fn mk_alias_ty(\n+        self,\n+        def_id: DefId,\n+        substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+    ) -> ty::AliasTy<'tcx> {\n+        let substs = substs.into_iter().map(Into::into);\n+        let n = self.generics_of(def_id).count();\n+        debug_assert_eq!(\n+            (n, Some(n)),\n+            substs.size_hint(),\n+            \"wrong number of generic parameters for {def_id:?}: {:?} \\nDid you accidentally include the self-type in the params list?\",\n+            substs.collect::<Vec<_>>(),\n+        );\n+        let substs = self.mk_substs(substs);\n+        ty::AliasTy { def_id, substs }\n+    }\n+\n     pub fn mk_bound_variable_kinds<\n         I: InternAs<ty::BoundVariableKind, &'tcx List<ty::BoundVariableKind>>,\n     >("}, {"sha": "c463980bed50d5e78824810bf6c1bf7b14974d38", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=fef872a8757eaf6964c1af0dcd2b5b4751c056c4", "patch": "@@ -280,7 +280,7 @@ impl<'tcx> Relate<'tcx> for ty::AliasTy<'tcx> {\n             Err(TypeError::ProjectionMismatched(expected_found(relation, a.def_id, b.def_id)))\n         } else {\n             let substs = relation.relate(a.substs, b.substs)?;\n-            Ok(ty::AliasTy { def_id: a.def_id, substs: &substs })\n+            Ok(relation.tcx().mk_alias_ty(a.def_id, substs))\n         }\n     }\n }"}, {"sha": "092e68a4bf79674406b97904e036d3ea1eeff098", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=fef872a8757eaf6964c1af0dcd2b5b4751c056c4", "patch": "@@ -1449,10 +1449,8 @@ impl<'tcx> ExistentialProjection<'tcx> {\n         debug_assert!(!self_ty.has_escaping_bound_vars());\n \n         ty::ProjectionPredicate {\n-            projection_ty: ty::AliasTy {\n-                def_id: self.def_id,\n-                substs: tcx.mk_substs_trait(self_ty, self.substs),\n-            },\n+            projection_ty: tcx\n+                .mk_alias_ty(self.def_id, [self_ty.into()].into_iter().chain(self.substs)),\n             term: self.term,\n         }\n     }"}, {"sha": "f2ee0387888a0692b5c82e543ffac99a66356b56", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=fef872a8757eaf6964c1af0dcd2b5b4751c056c4", "patch": "@@ -3265,9 +3265,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 // in. For example, this would be what `Iterator::Item` is here.\n                 let ty_var = self.infcx.next_ty_var(origin);\n                 // This corresponds to `<ExprTy as Iterator>::Item = _`.\n-                let trait_ref = ty::Binder::dummy(ty::PredicateKind::Clause(\n+                let projection = ty::Binder::dummy(ty::PredicateKind::Clause(\n                     ty::Clause::Projection(ty::ProjectionPredicate {\n-                        projection_ty: ty::AliasTy { substs, def_id: proj.def_id },\n+                        projection_ty: tcx.mk_alias_ty(proj.def_id, substs),\n                         term: ty_var.into(),\n                     }),\n                 ));\n@@ -3277,7 +3277,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     span,\n                     expr.hir_id,\n                     param_env,\n-                    trait_ref,\n+                    projection,\n                 ));\n                 if ocx.select_where_possible().is_empty() {\n                     // `ty_var` now holds the type that `Item` is for `ExprTy`."}, {"sha": "445d783aabcf575d6e726b28cabf5fdab2b95a91", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=fef872a8757eaf6964c1af0dcd2b5b4751c056c4", "patch": "@@ -1867,10 +1867,7 @@ fn confirm_generator_candidate<'cx, 'tcx>(\n         };\n \n         ty::ProjectionPredicate {\n-            projection_ty: ty::AliasTy {\n-                substs: trait_ref.substs,\n-                def_id: obligation.predicate.def_id,\n-            },\n+            projection_ty: tcx.mk_alias_ty(obligation.predicate.def_id, trait_ref.substs),\n             term: ty.into(),\n         }\n     });\n@@ -1909,10 +1906,7 @@ fn confirm_future_candidate<'cx, 'tcx>(\n         debug_assert_eq!(tcx.associated_item(obligation.predicate.def_id).name, sym::Output);\n \n         ty::ProjectionPredicate {\n-            projection_ty: ty::AliasTy {\n-                substs: trait_ref.substs,\n-                def_id: obligation.predicate.def_id,\n-            },\n+            projection_ty: tcx.mk_alias_ty(obligation.predicate.def_id, trait_ref.substs),\n             term: return_ty.into(),\n         }\n     });\n@@ -1965,10 +1959,8 @@ fn confirm_builtin_candidate<'cx, 'tcx>(\n         bug!(\"unexpected builtin trait with associated type: {:?}\", obligation.predicate);\n     };\n \n-    let predicate = ty::ProjectionPredicate {\n-        projection_ty: ty::AliasTy { substs, def_id: item_def_id },\n-        term,\n-    };\n+    let predicate =\n+        ty::ProjectionPredicate { projection_ty: tcx.mk_alias_ty(item_def_id, substs), term };\n \n     confirm_param_env_candidate(selcx, obligation, ty::Binder::dummy(predicate), false)\n         .with_addl_obligations(obligations)\n@@ -2037,7 +2029,7 @@ fn confirm_callable_candidate<'cx, 'tcx>(\n         flag,\n     )\n     .map_bound(|(trait_ref, ret_type)| ty::ProjectionPredicate {\n-        projection_ty: ty::AliasTy { substs: trait_ref.substs, def_id: fn_once_output_def_id },\n+        projection_ty: tcx.mk_alias_ty(fn_once_output_def_id, trait_ref.substs),\n         term: ret_type.into(),\n     });\n "}, {"sha": "c54d901e9b10aff43f7e9106632beef59ae3e495", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef872a8757eaf6964c1af0dcd2b5b4751c056c4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=fef872a8757eaf6964c1af0dcd2b5b4751c056c4", "patch": "@@ -536,7 +536,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let ty = traits::normalize_projection_type(\n                 self,\n                 param_env,\n-                ty::AliasTy { def_id: tcx.lang_items().deref_target()?, substs: trait_ref.substs },\n+                tcx.mk_alias_ty(tcx.lang_items().deref_target()?, trait_ref.substs),\n                 cause.clone(),\n                 0,\n                 // We're *intentionally* throwing these away,"}]}