{"sha": "82f8d8cb2a139a303354358ea272948fd177dab3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZjhkOGNiMmExMzlhMzAzMzU0MzU4ZWEyNzI5NDhmZDE3N2RhYjM=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-04-04T16:28:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-06T22:35:50Z"}, "message": "removing some unneeded native fn mappingsin uv.rs and misc clean\n\n.. 32bit linux issues persist.", "tree": {"sha": "0c2e22fee48eb8ebcfb7cce25c23480489761cd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c2e22fee48eb8ebcfb7cce25c23480489761cd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82f8d8cb2a139a303354358ea272948fd177dab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82f8d8cb2a139a303354358ea272948fd177dab3", "html_url": "https://github.com/rust-lang/rust/commit/82f8d8cb2a139a303354358ea272948fd177dab3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82f8d8cb2a139a303354358ea272948fd177dab3/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b349f3d11349cf96be0bd68e20578fd5608b090", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b349f3d11349cf96be0bd68e20578fd5608b090", "html_url": "https://github.com/rust-lang/rust/commit/6b349f3d11349cf96be0bd68e20578fd5608b090"}], "stats": {"total": 59, "additions": 11, "deletions": 48}, "files": [{"sha": "914ebfc811dd7f3f0a654ca62e410f0ab2cc0af8", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/82f8d8cb2a139a303354358ea272948fd177dab3/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f8d8cb2a139a303354358ea272948fd177dab3/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=82f8d8cb2a139a303354358ea272948fd177dab3", "patch": "@@ -63,36 +63,6 @@ native mod rustrt {\n         repeat: libc::c_uint);\n     fn rust_uv_timer_stop(handle: *libc::c_void);\n     fn rust_uv_free(ptr: *libc::c_void);\n-    fn rust_uv_tcp_init(\n-        loop_handle: *libc::c_void,\n-        handle_ptr: *ll::uv_tcp_t) -> libc::c_int;\n-    // FIXME ref #2064\n-    fn rust_uv_strerror(err: *ll::uv_err_t) -> *libc::c_char;\n-    // FIXME ref #2064\n-    fn rust_uv_err_name(err: *ll::uv_err_t) -> *libc::c_char;\n-    fn rust_uv_ip4_addr(ip: *u8, port: libc::c_int)\n-        -> ll::sockaddr_in;\n-    // FIXME ref #2064\n-    fn rust_uv_tcp_connect(connect_ptr: *ll::uv_connect_t,\n-                           tcp_handle_ptr: *ll::uv_tcp_t,\n-                           ++after_cb: *u8,\n-                           ++addr: *ll::sockaddr_in) -> libc::c_int;\n-    // FIXME ref 2064\n-    fn rust_uv_tcp_bind(tcp_server: *ll::uv_tcp_t,\n-                        ++addr: *ll::sockaddr_in) -> libc::c_int;\n-    fn rust_uv_listen(stream: *libc::c_void, backlog: libc::c_int,\n-                      cb: *u8) -> libc::c_int;\n-    fn rust_uv_accept(server: *libc::c_void, client: *libc::c_void)\n-        -> libc::c_int;\n-    fn rust_uv_write(req: *libc::c_void, stream: *libc::c_void,\n-             ++buf_in: *ll::uv_buf_t, buf_cnt: libc::c_int,\n-             cb: *u8) -> libc::c_int;\n-    fn rust_uv_read_start(stream: *libc::c_void, on_alloc: *u8,\n-                          on_read: *u8) -> libc::c_int;\n-    fn rust_uv_read_stop(stream: *libc::c_void) -> libc::c_int;\n-    fn rust_uv_malloc_buf_base_of(sug_size: libc::size_t) -> *u8;\n-    fn rust_uv_free_base_of_buf(++buf: ll::uv_buf_t);\n-\n     // sizeof testing helpers\n     fn rust_uv_helper_uv_tcp_t_size() -> libc::c_uint;\n     fn rust_uv_helper_uv_connect_t_size() -> libc::c_uint;\n@@ -715,7 +685,7 @@ crust fn after_close_cb(handle: *libc::c_void) {\n }\n \n crust fn on_alloc_cb(handle: *libc::c_void,\n-                     suggested_size: libc::size_t)\n+                     ++suggested_size: libc::size_t)\n     -> ll::uv_buf_t unsafe {\n     io::println(\"on_alloc_cb!\");\n     let char_ptr = ll::malloc_buf_base_of(suggested_size);\n@@ -909,6 +879,10 @@ crust fn on_server_read_cb(client_stream_ptr: *ll::uv_stream_t,\n         // pull out the contents of the write from the client\n         let buf_base = ll::get_base_from_buf(buf);\n         let buf_len = ll::get_len_from_buf(buf);\n+        io::println(#fmt(\"SERVER buf base: %u, len: %u, nread: %d\",\n+                         buf_base as uint,\n+                         buf_len as uint,\n+                         nread));\n         let bytes = vec::unsafe::from_buf(buf_base, buf_len);\n         let request_str = str::from_bytes(bytes);\n \n@@ -1246,3 +1220,4 @@ fn test_uv_struct_size_uv_async_t() {\n     io::println(output);\n     assert native_handle_size as uint == rust_handle_size;\n }\n+"}, {"sha": "24fceadd9fbd25652633a80adc39b55a1ec7c882", "filename": "src/libstd/uv_hl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82f8d8cb2a139a303354358ea272948fd177dab3/src%2Flibstd%2Fuv_hl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f8d8cb2a139a303354358ea272948fd177dab3/src%2Flibstd%2Fuv_hl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_hl.rs?ref=82f8d8cb2a139a303354358ea272948fd177dab3", "patch": "@@ -71,7 +71,6 @@ immediately after using `uv::ll::loop_new()`\n A `high_level_loop` record that can be used to interact with the\n loop (after you use `uv::ll::run()` on the `uv_loop_t*`, of course\n \"]\n-#[cfg(target_archsdfsdf=\"bleh\")]\n unsafe fn prepare_loop(loop_ptr: *libc::c_void)\n     -> high_level_loop {\n     // will probably need to stake out a data record"}, {"sha": "1b36b96d0f2708afc20b91e2a1efe8d7efaa96e6", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f8d8cb2a139a303354358ea272948fd177dab3/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f8d8cb2a139a303354358ea272948fd177dab3/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=82f8d8cb2a139a303354358ea272948fd177dab3", "patch": "@@ -442,8 +442,6 @@ native mod rustrt {\n     // FIXME ref #2604 .. ?\n     fn rust_uv_buf_init(out_buf: *uv_buf_t, base: *u8,\n                         len: libc::size_t);\n-    fn rust_uv_buf_init_2(++base: *u8, len: libc::size_t)\n-        -> uv_buf_t;\n     fn rust_uv_last_error(loop_handle: *libc::c_void) -> uv_err_t;\n     // FIXME ref #2064\n     fn rust_uv_strerror(err: *uv_err_t) -> *libc::c_char;"}, {"sha": "2b1e5d1ca3c57c3cf635ba2871021aa5cdefe9dc", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/82f8d8cb2a139a303354358ea272948fd177dab3/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/82f8d8cb2a139a303354358ea272948fd177dab3/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=82f8d8cb2a139a303354358ea272948fd177dab3", "patch": "@@ -302,22 +302,13 @@ current_kernel_malloc_alloc_cb(uv_handle_t* handle,\n \n extern \"C\" void\n rust_uv_buf_init(uv_buf_t* out_buf, char* base, size_t len) {\n-  printf(\"rust_uv_buf_init: base: %lu len: %lu\\n\",\n-\t\t (long unsigned int)base,\n-\t\t (long unsigned int)len);\n+    printf(\"rust_uv_buf_init: base: %lu len: %lu\\n\",\n+        (long unsigned int)base,\n+        (long unsigned int)len);\n     *out_buf = uv_buf_init(base, len);\n     printf(\"rust_uv_buf_init: after: result->base: %lu len: %lu\\n\",\n-\t\t   (unsigned long int)(*out_buf).base,\n-\t\t   (unsigned long int)(*out_buf).len);\n-}\n-extern \"C\" uv_buf_t\n-rust_uv_buf_init_2(char* base, size_t len) {\n-  printf(\"uv_buf_init: base ptr %p\\n len: %lu\", base,\n-\t\t (long unsigned int)len);\n-    uv_buf_t result = uv_buf_init(base, len);\n-    printf(\"after uv_buf_init: result->base %p\\n\",\n-\t\t   result.base);\n-\treturn result;\n+           (unsigned long int)(*out_buf).base,\n+           (unsigned long int)(*out_buf).len);\n }\n \n extern \"C\" uv_loop_t*"}]}