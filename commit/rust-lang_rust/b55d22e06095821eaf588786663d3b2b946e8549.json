{"sha": "b55d22e06095821eaf588786663d3b2b946e8549", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NWQyMmUwNjA5NTgyMWVhZjU4ODc4NjY2M2QzYjJiOTQ2ZTg1NDk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-03T13:45:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-03T13:45:26Z"}, "message": "Merge #3388\n\n3388: Remove inlay hint in diff views r=matklad a=vbfox\n\nIf the left side of a diff view that contain the old version of the file apply inlays they are misplaced and produce a weird display:\r\n\r\n![image](https://user-images.githubusercontent.com/131878/75628802-b1ac1900-5bdc-11ea-8c26-6722d8e38371.png)\r\n\r\nAfter the change:\r\n\r\n![image](https://user-images.githubusercontent.com/131878/75628831-e91ac580-5bdc-11ea-9039-c6b4ffbdb2be.png)\r\n\r\nThe detection is done by blacklisting the url schemes used by git and subversion scm extensions, whitelisting `file` is also possible but neither is perfect as VSCode now support both pluggable scm extensions and pluggable remote filesystems. But I suspect that the list of scm extensions is more easily manageable.\r\n\r\n**Note**: I can rebase on #3378 if needed as it touches the same lines of code\n\nCo-authored-by: Julien Roncaglia <julien@roncaglia.fr>", "tree": {"sha": "72c430f62b2d238ceee60b2441796fff5483161f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72c430f62b2d238ceee60b2441796fff5483161f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b55d22e06095821eaf588786663d3b2b946e8549", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeXl93CRBK7hj4Ov3rIwAAdHIIAKy5Er7Q7rp2pqGb3Gap2wJj\nsCu0qJwlZyK+5tu5Wf8Tsc83qQjHdjZxaot79ZbnrTq0LbYNmckT158UrOTzNcpH\n0vuKL6hA/KwK/Sy4BQJdXdqTeLe6AhvGn4ZNGQAkKkmosJprAvYzbgIgdYHPHb7c\nVrWcYVbtKtZWIktWk4Fm7hJ+I5lWPguIq+4BDXwaNqZ9NGW69Z+EmM+ItDz4WsWm\nJYz695B5sB/13dm5IxG1JoWyp3x/5/4TGKYPhFRfkJsLAyXFYyhT5GIhcZKsk9wj\nxAAJRyB6y/+X7slYnVst4XCcnhxW3GeAy7hovpN/sAdin3P8/WsmhjO9Ifnk450=\n=D6xJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 72c430f62b2d238ceee60b2441796fff5483161f\nparent 0cb387c36257a2811046f1ed65e59f83a1ea03bc\nparent 2f54c1d653d46831eeb7d691c5f25b78ca63378a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583243126 +0000\ncommitter GitHub <noreply@github.com> 1583243126 +0000\n\nMerge #3388\n\n3388: Remove inlay hint in diff views r=matklad a=vbfox\n\nIf the left side of a diff view that contain the old version of the file apply inlays they are misplaced and produce a weird display:\r\n\r\n![image](https://user-images.githubusercontent.com/131878/75628802-b1ac1900-5bdc-11ea-8c26-6722d8e38371.png)\r\n\r\nAfter the change:\r\n\r\n![image](https://user-images.githubusercontent.com/131878/75628831-e91ac580-5bdc-11ea-9039-c6b4ffbdb2be.png)\r\n\r\nThe detection is done by blacklisting the url schemes used by git and subversion scm extensions, whitelisting `file` is also possible but neither is perfect as VSCode now support both pluggable scm extensions and pluggable remote filesystems. But I suspect that the list of scm extensions is more easily manageable.\r\n\r\n**Note**: I can rebase on #3378 if needed as it touches the same lines of code\n\nCo-authored-by: Julien Roncaglia <julien@roncaglia.fr>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b55d22e06095821eaf588786663d3b2b946e8549", "html_url": "https://github.com/rust-lang/rust/commit/b55d22e06095821eaf588786663d3b2b946e8549", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b55d22e06095821eaf588786663d3b2b946e8549/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cb387c36257a2811046f1ed65e59f83a1ea03bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb387c36257a2811046f1ed65e59f83a1ea03bc", "html_url": "https://github.com/rust-lang/rust/commit/0cb387c36257a2811046f1ed65e59f83a1ea03bc"}, {"sha": "2f54c1d653d46831eeb7d691c5f25b78ca63378a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f54c1d653d46831eeb7d691c5f25b78ca63378a", "html_url": "https://github.com/rust-lang/rust/commit/2f54c1d653d46831eeb7d691c5f25b78ca63378a"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "2e08e8f115b63f50461ef8215f10e48e0a7e48dc", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b55d22e06095821eaf588786663d3b2b946e8549/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b55d22e06095821eaf588786663d3b2b946e8549/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=b55d22e06095821eaf588786663d3b2b946e8549", "patch": "@@ -2,6 +2,7 @@ import * as vscode from 'vscode';\n import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n+import { isRustDocument } from '../util';\n \n // Opens the virtual file that will show the syntax tree\n //\n@@ -19,7 +20,7 @@ export function syntaxTree(ctx: Ctx): Cmd {\n     vscode.workspace.onDidChangeTextDocument(\n         (event: vscode.TextDocumentChangeEvent) => {\n             const doc = event.document;\n-            if (doc.languageId !== 'rust') return;\n+            if (!isRustDocument(doc)) return;\n             afterLs(() => tdcp.eventEmitter.fire(tdcp.uri));\n         },\n         null,\n@@ -28,7 +29,7 @@ export function syntaxTree(ctx: Ctx): Cmd {\n \n     vscode.window.onDidChangeActiveTextEditor(\n         (editor: vscode.TextEditor | undefined) => {\n-            if (!editor || editor.document.languageId !== 'rust') return;\n+            if (!editor || !isRustDocument(editor.document)) return;\n             tdcp.eventEmitter.fire(tdcp.uri);\n         },\n         null,"}, {"sha": "b4e983a0cd9dae9ae7418b408dd2c638a2231d12", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b55d22e06095821eaf588786663d3b2b946e8549/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b55d22e06095821eaf588786663d3b2b946e8549/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=b55d22e06095821eaf588786663d3b2b946e8549", "patch": "@@ -3,6 +3,7 @@ import * as lc from 'vscode-languageclient';\n \n import { Config } from './config';\n import { createClient } from './client';\n+import { isRustDocument } from './util';\n \n export class Ctx {\n     private constructor(\n@@ -23,11 +24,17 @@ export class Ctx {\n \n     get activeRustEditor(): vscode.TextEditor | undefined {\n         const editor = vscode.window.activeTextEditor;\n-        return editor && editor.document.languageId === 'rust'\n+        return editor && isRustDocument(editor.document)\n             ? editor\n             : undefined;\n     }\n \n+    get visibleRustEditors(): vscode.TextEditor[] {\n+        return vscode.window.visibleTextEditors.filter(\n+            editor => isRustDocument(editor.document),\n+        );\n+    }\n+\n     registerCommand(name: string, factory: (ctx: Ctx) => Cmd) {\n         const fullName = `rust-analyzer.${name}`;\n         const cmd = factory(this);"}, {"sha": "ea2dfc0e39f640d9d87d7163d592d2faa23a9ae5", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b55d22e06095821eaf588786663d3b2b946e8549/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b55d22e06095821eaf588786663d3b2b946e8549/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=b55d22e06095821eaf588786663d3b2b946e8549", "patch": "@@ -4,7 +4,7 @@ import * as ra from './rust-analyzer-api';\n import { ColorTheme, TextMateRuleSettings } from './color_theme';\n \n import { Ctx } from './ctx';\n-import { sendRequestWithRetry } from './util';\n+import { sendRequestWithRetry, isRustDocument } from './util';\n \n export function activateHighlighting(ctx: Ctx) {\n     const highlighter = new Highlighter(ctx);\n@@ -36,7 +36,7 @@ export function activateHighlighting(ctx: Ctx) {\n \n     vscode.window.onDidChangeActiveTextEditor(\n         async (editor: vscode.TextEditor | undefined) => {\n-            if (!editor || editor.document.languageId !== 'rust') return;\n+            if (!editor || !isRustDocument(editor.document)) return;\n             if (!ctx.config.highlightingOn) return;\n             const client = ctx.client;\n             if (!client) return;"}, {"sha": "08d3a64a770d1b505dcc2d49693b5ee5d8ce911d", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b55d22e06095821eaf588786663d3b2b946e8549/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b55d22e06095821eaf588786663d3b2b946e8549/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=b55d22e06095821eaf588786663d3b2b946e8549", "patch": "@@ -2,7 +2,7 @@ import * as vscode from 'vscode';\n import * as ra from './rust-analyzer-api';\n \n import { Ctx } from './ctx';\n-import { log, sendRequestWithRetry } from './util';\n+import { log, sendRequestWithRetry, isRustDocument } from './util';\n \n export function activateInlayHints(ctx: Ctx) {\n     const hintsUpdater = new HintsUpdater(ctx);\n@@ -15,7 +15,7 @@ export function activateInlayHints(ctx: Ctx) {\n     vscode.workspace.onDidChangeTextDocument(\n         async event => {\n             if (event.contentChanges.length === 0) return;\n-            if (event.document.languageId !== 'rust') return;\n+            if (!isRustDocument(event.document)) return;\n             await hintsUpdater.refresh();\n         },\n         null,\n@@ -77,21 +77,15 @@ class HintsUpdater {\n     }\n \n     clear() {\n-        this.allEditors.forEach(it => {\n+        this.ctx.visibleRustEditors.forEach(it => {\n             this.setTypeDecorations(it, []);\n             this.setParameterDecorations(it, []);\n         });\n     }\n \n     async refresh() {\n         if (!this.enabled) return;\n-        await Promise.all(this.allEditors.map(it => this.refreshEditor(it)));\n-    }\n-\n-    private get allEditors(): vscode.TextEditor[] {\n-        return vscode.window.visibleTextEditors.filter(\n-            editor => editor.document.languageId === 'rust',\n-        );\n+        await Promise.all(this.ctx.visibleRustEditors.map(it => this.refreshEditor(it)));\n     }\n \n     private async refreshEditor(editor: vscode.TextEditor): Promise<void> {"}, {"sha": "7c95769bb8c36844409492e3adfaf6199528586a", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b55d22e06095821eaf588786663d3b2b946e8549/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b55d22e06095821eaf588786663d3b2b946e8549/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=b55d22e06095821eaf588786663d3b2b946e8549", "patch": "@@ -1,6 +1,7 @@\n import * as lc from \"vscode-languageclient\";\n import * as vscode from \"vscode\";\n import { strict as nativeAssert } from \"assert\";\n+import { TextDocument } from \"vscode\";\n \n export function assert(condition: boolean, explanation: string): asserts condition {\n     try {\n@@ -65,3 +66,10 @@ export async function sendRequestWithRetry<TParam, TRet>(\n function sleep(ms: number) {\n     return new Promise(resolve => setTimeout(resolve, ms));\n }\n+\n+export function isRustDocument(document: TextDocument) {\n+    return document.languageId === 'rust'\n+        // SCM diff views have the same URI as the on-disk document but not the same content\n+        && document.uri.scheme !== 'git'\n+        && document.uri.scheme !== 'svn';\n+}\n\\ No newline at end of file"}]}