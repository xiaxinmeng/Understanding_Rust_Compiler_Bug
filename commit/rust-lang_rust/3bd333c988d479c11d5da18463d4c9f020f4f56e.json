{"sha": "3bd333c988d479c11d5da18463d4c9f020f4f56e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZDMzM2M5ODhkNDc5YzExZDVkYTE4NDYzZDRjOWYwMjBmNGY1NmU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-13T15:35:51Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-13T15:35:51Z"}, "message": "incr.comp.: Add CacheEncoder for encoding query results into the incr.comp. cache.", "tree": {"sha": "715d93fe5799edc57442694de0acfbc38bcfbb8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/715d93fe5799edc57442694de0acfbc38bcfbb8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bd333c988d479c11d5da18463d4c9f020f4f56e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bd333c988d479c11d5da18463d4c9f020f4f56e", "html_url": "https://github.com/rust-lang/rust/commit/3bd333c988d479c11d5da18463d4c9f020f4f56e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bd333c988d479c11d5da18463d4c9f020f4f56e/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ac102645fd6413ae460b34ec4c06eec25979355", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac102645fd6413ae460b34ec4c06eec25979355", "html_url": "https://github.com/rust-lang/rust/commit/9ac102645fd6413ae460b34ec4c06eec25979355"}], "stats": {"total": 137, "additions": 118, "deletions": 19}, "files": [{"sha": "a5ca699fd5d912fcc2deaae1d94b43c9d7c058ba", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bd333c988d479c11d5da18463d4c9f020f4f56e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd333c988d479c11d5da18463d4c9f020f4f56e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3bd333c988d479c11d5da18463d4c9f020f4f56e", "patch": "@@ -1311,9 +1311,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn serialize_query_result_cache<E>(self,\n                                            encoder: &mut E)\n                                            -> Result<(), E::Error>\n-        where E: ::rustc_serialize::Encoder\n+        where E: ty::codec::TyEncoder\n     {\n-        self.on_disk_query_result_cache.serialize(encoder)\n+        self.on_disk_query_result_cache.serialize(self, encoder)\n     }\n \n }"}, {"sha": "8d65fd50ee5344701322283a56dc07025b7d4fa5", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 116, "deletions": 17, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/3bd333c988d479c11d5da18463d4c9f020f4f56e/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd333c988d479c11d5da18463d4c9f020f4f56e/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=3bd333c988d479c11d5da18463d4c9f020f4f56e", "patch": "@@ -13,14 +13,17 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use errors::Diagnostic;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n-                      SpecializedDecoder};\n+                      SpecializedDecoder, SpecializedEncoder};\n use session::Session;\n use std::borrow::Cow;\n use std::cell::RefCell;\n use std::collections::BTreeMap;\n use std::mem;\n use syntax::codemap::{CodeMap, StableFilemapId};\n use syntax_pos::{BytePos, Span, NO_EXPANSION, DUMMY_SP};\n+use ty;\n+use ty::codec::{self as ty_codec};\n+use ty::context::TyCtxt;\n \n /// `OnDiskCache` provides an interface to incr. comp. data cached from the\n /// previous compilation session. This data will eventually include the results\n@@ -46,11 +49,7 @@ struct Header {\n     prev_filemap_starts: BTreeMap<BytePos, StableFilemapId>,\n }\n \n-// This type is used only for (de-)serialization.\n-#[derive(RustcEncodable, RustcDecodable)]\n-struct Body {\n-    diagnostics: Vec<(SerializedDepNodeIndex, Vec<Diagnostic>)>,\n-}\n+type EncodedPrevDiagnostics = Vec<(SerializedDepNodeIndex, Vec<Diagnostic>)>;\n \n impl<'sess> OnDiskCache<'sess> {\n     /// Create a new OnDiskCache instance from the serialized data in `data`.\n@@ -64,14 +63,21 @@ impl<'sess> OnDiskCache<'sess> {\n         let mut decoder = opaque::Decoder::new(&data[..], start_pos);\n         let header = Header::decode(&mut decoder).unwrap();\n \n-        let prev_diagnostics: FxHashMap<_, _> = {\n+        let prev_diagnostics = {\n             let mut decoder = CacheDecoder {\n                 opaque: decoder,\n                 codemap: sess.codemap(),\n                 prev_filemap_starts: &header.prev_filemap_starts,\n             };\n-            let body = Body::decode(&mut decoder).unwrap();\n-            body.diagnostics.into_iter().collect()\n+\n+            let prev_diagnostics: FxHashMap<_, _> = {\n+                let diagnostics = EncodedPrevDiagnostics::decode(&mut decoder)\n+                    .expect(\"Error while trying to decode prev. diagnostics \\\n+                             from incr. comp. cache.\");\n+                diagnostics.into_iter().collect()\n+            };\n+\n+            prev_diagnostics\n         };\n \n         OnDiskCache {\n@@ -91,28 +97,38 @@ impl<'sess> OnDiskCache<'sess> {\n         }\n     }\n \n-    pub fn serialize<'a, 'tcx, E>(&self,\n-                                  encoder: &mut E)\n-                                  -> Result<(), E::Error>\n-        where E: Encoder\n-    {\n+    pub fn serialize<'a, 'gcx, 'lcx, E>(&self,\n+                                        tcx: TyCtxt<'a, 'gcx, 'lcx>,\n+                                        encoder: &mut E)\n+                                        -> Result<(), E::Error>\n+        where E: ty_codec::TyEncoder\n+     {\n+        // Serializing the DepGraph should not modify it:\n+        let _in_ignore = tcx.dep_graph.in_ignore();\n+\n+        let mut encoder = CacheEncoder {\n+            encoder,\n+            type_shorthands: FxHashMap(),\n+            predicate_shorthands: FxHashMap(),\n+        };\n+\n         let prev_filemap_starts: BTreeMap<_, _> = self\n             .codemap\n             .files()\n             .iter()\n             .map(|fm| (fm.start_pos, StableFilemapId::new(fm)))\n             .collect();\n \n-        Header { prev_filemap_starts }.encode(encoder)?;\n+        Header { prev_filemap_starts }.encode(&mut encoder)?;\n \n-        let diagnostics: Vec<(SerializedDepNodeIndex, Vec<Diagnostic>)> =\n+        let diagnostics: EncodedPrevDiagnostics =\n             self.current_diagnostics\n                 .borrow()\n                 .iter()\n                 .map(|(k, v)| (SerializedDepNodeIndex::new(k.index()), v.clone()))\n                 .collect();\n \n-        Body { diagnostics }.encode(encoder)?;\n+        diagnostics.encode(&mut encoder)?;\n \n         Ok(())\n     }\n@@ -152,6 +168,9 @@ impl<'sess> OnDiskCache<'sess> {\n     }\n }\n \n+\n+//- DECODING -------------------------------------------------------------------\n+\n /// A decoder that can read the incr. comp. cache. It is similar to the one\n /// we use for crate metadata decoding in that it can rebase spans and\n /// eventually will also handle things that contain `Ty` instances.\n@@ -229,3 +248,83 @@ impl<'a> SpecializedDecoder<Span> for CacheDecoder<'a> {\n         Ok(DUMMY_SP)\n     }\n }\n+\n+\n+//- ENCODING -------------------------------------------------------------------\n+\n+struct CacheEncoder<'enc, 'tcx, E>\n+    where E: 'enc + ty_codec::TyEncoder\n+{\n+    encoder: &'enc mut E,\n+    type_shorthands: FxHashMap<ty::Ty<'tcx>, usize>,\n+    predicate_shorthands: FxHashMap<ty::Predicate<'tcx>, usize>,\n+}\n+\n+impl<'enc, 'tcx, E> ty_codec::TyEncoder for CacheEncoder<'enc, 'tcx, E>\n+    where E: 'enc + ty_codec::TyEncoder\n+{\n+    fn position(&self) -> usize {\n+        self.encoder.position()\n+    }\n+}\n+\n+impl<'enc, 'tcx, E> SpecializedEncoder<ty::Ty<'tcx>> for CacheEncoder<'enc, 'tcx, E>\n+    where E: 'enc + ty_codec::TyEncoder\n+{\n+    fn specialized_encode(&mut self, ty: &ty::Ty<'tcx>) -> Result<(), Self::Error> {\n+        ty_codec::encode_with_shorthand(self, ty,\n+            |encoder| &mut encoder.type_shorthands)\n+    }\n+}\n+\n+impl<'enc, 'tcx, E> SpecializedEncoder<ty::GenericPredicates<'tcx>>\n+    for CacheEncoder<'enc, 'tcx, E>\n+    where E: 'enc + ty_codec::TyEncoder\n+{\n+    fn specialized_encode(&mut self,\n+                          predicates: &ty::GenericPredicates<'tcx>)\n+                          -> Result<(), Self::Error> {\n+        ty_codec::encode_predicates(self, predicates,\n+            |encoder| &mut encoder.predicate_shorthands)\n+    }\n+}\n+\n+macro_rules! encoder_methods {\n+    ($($name:ident($ty:ty);)*) => {\n+        $(fn $name(&mut self, value: $ty) -> Result<(), Self::Error> {\n+            self.encoder.$name(value)\n+        })*\n+    }\n+}\n+\n+impl<'enc, 'tcx, E> Encoder for CacheEncoder<'enc, 'tcx, E>\n+    where E: 'enc + ty_codec::TyEncoder\n+{\n+    type Error = E::Error;\n+\n+    fn emit_nil(&mut self) -> Result<(), Self::Error> {\n+        Ok(())\n+    }\n+\n+    encoder_methods! {\n+        emit_usize(usize);\n+        emit_u128(u128);\n+        emit_u64(u64);\n+        emit_u32(u32);\n+        emit_u16(u16);\n+        emit_u8(u8);\n+\n+        emit_isize(isize);\n+        emit_i128(i128);\n+        emit_i64(i64);\n+        emit_i32(i32);\n+        emit_i16(i16);\n+        emit_i8(i8);\n+\n+        emit_bool(bool);\n+        emit_f64(f64);\n+        emit_f32(f32);\n+        emit_char(char);\n+        emit_str(&str);\n+    }\n+}"}]}