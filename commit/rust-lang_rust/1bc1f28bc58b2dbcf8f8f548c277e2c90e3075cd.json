{"sha": "1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYzFmMjhiYzU4YjJkYmNmOGY4ZjU0OGMyNzdlMmM5MGUzMDc1Y2Q=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-19T18:29:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-19T18:29:46Z"}, "message": "Merge #4494\n\n4494: Support snippet text edit r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "7d059b65919b1b64196cc3fc6830eeb99f2f9af0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d059b65919b1b64196cc3fc6830eeb99f2f9af0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJexCWaCRBK7hj4Ov3rIwAAdHIIADW/J1QXaeUewv+KFowfD/6t\n3hAxO8G/SMZ3bx7hD/ro818E1DMPM75UJ5ZA/ZbwcnipHRH/swbz9VcYTO8L8GJT\nOW04epQeCQScXCtAGadOiCBUrYHqKWdqkFYo8MNhrl1HJozTJHGnQMVoKWV5mXer\nasXnRFEoOGaJ18gvh6+xN7mgnlLVBpL8uBV5GCrgUJm3Q9+mt7El5m9p3rGjKswY\nnIuGLAgm70ISUdZCPlMP9PXO+wBahvmxlB6jEgn+/H6+4iZcNb21a1H0nxRBu9CN\nWB7bPiytVdGWijl9Mhav1I3pXgXOQ3Qk8NmUeZHbZTpyP2cJlVMjX+ZcEpjTADs=\n=j24q\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d059b65919b1b64196cc3fc6830eeb99f2f9af0\nparent 131849f2abd94dc8143f0c5d65e022136f29561a\nparent 3e9bf7ebabdaa8e9a2972af2dd8e8089a3a0341e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589912986 +0000\ncommitter GitHub <noreply@github.com> 1589912986 +0000\n\nMerge #4494\n\n4494: Support snippet text edit r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "html_url": "https://github.com/rust-lang/rust/commit/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "131849f2abd94dc8143f0c5d65e022136f29561a", "url": "https://api.github.com/repos/rust-lang/rust/commits/131849f2abd94dc8143f0c5d65e022136f29561a", "html_url": "https://github.com/rust-lang/rust/commit/131849f2abd94dc8143f0c5d65e022136f29561a"}, {"sha": "3e9bf7ebabdaa8e9a2972af2dd8e8089a3a0341e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9bf7ebabdaa8e9a2972af2dd8e8089a3a0341e", "html_url": "https://github.com/rust-lang/rust/commit/3e9bf7ebabdaa8e9a2972af2dd8e8089a3a0341e"}], "stats": {"total": 795, "additions": 543, "deletions": 252}, "files": [{"sha": "c0a0226fb247bb4aa96a57d501556ccfe32ae219", "filename": "crates/ra_assists/src/assist_config.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_assists%2Fsrc%2Fassist_config.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_assists%2Fsrc%2Fassist_config.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_config.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -0,0 +1,27 @@\n+//! Settings for tweaking assists.\n+//!\n+//! The fun thing here is `SnippetCap` -- this type can only be created in this\n+//! module, and we use to statically check that we only produce snippet\n+//! assists if we are allowed to.\n+\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct AssistConfig {\n+    pub snippet_cap: Option<SnippetCap>,\n+}\n+\n+impl AssistConfig {\n+    pub fn allow_snippets(&mut self, yes: bool) {\n+        self.snippet_cap = if yes { Some(SnippetCap { _private: () }) } else { None }\n+    }\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n+pub struct SnippetCap {\n+    _private: (),\n+}\n+\n+impl Default for AssistConfig {\n+    fn default() -> Self {\n+        AssistConfig { snippet_cap: Some(SnippetCap { _private: () }) }\n+    }\n+}"}, {"sha": "0dcd9df61fbf6cec7da3be9402acb07f207f5eab", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -15,7 +15,10 @@ use ra_syntax::{\n };\n use ra_text_edit::TextEditBuilder;\n \n-use crate::{Assist, AssistId, GroupLabel, ResolvedAssist};\n+use crate::{\n+    assist_config::{AssistConfig, SnippetCap},\n+    Assist, AssistId, GroupLabel, ResolvedAssist,\n+};\n \n /// `AssistContext` allows to apply an assist or check if it could be applied.\n ///\n@@ -48,17 +51,22 @@ use crate::{Assist, AssistId, GroupLabel, ResolvedAssist};\n /// moment, because the LSP API is pretty awkward in this place, and it's much\n /// easier to just compute the edit eagerly :-)\n pub(crate) struct AssistContext<'a> {\n+    pub(crate) config: &'a AssistConfig,\n     pub(crate) sema: Semantics<'a, RootDatabase>,\n     pub(crate) db: &'a RootDatabase,\n     pub(crate) frange: FileRange,\n     source_file: SourceFile,\n }\n \n impl<'a> AssistContext<'a> {\n-    pub fn new(sema: Semantics<'a, RootDatabase>, frange: FileRange) -> AssistContext<'a> {\n+    pub(crate) fn new(\n+        sema: Semantics<'a, RootDatabase>,\n+        config: &'a AssistConfig,\n+        frange: FileRange,\n+    ) -> AssistContext<'a> {\n         let source_file = sema.parse(frange.file_id);\n         let db = sema.db;\n-        AssistContext { sema, db, frange, source_file }\n+        AssistContext { config, sema, db, frange, source_file }\n     }\n \n     // NB, this ignores active selection.\n@@ -165,11 +173,17 @@ pub(crate) struct AssistBuilder {\n     edit: TextEditBuilder,\n     cursor_position: Option<TextSize>,\n     file: FileId,\n+    is_snippet: bool,\n }\n \n impl AssistBuilder {\n     pub(crate) fn new(file: FileId) -> AssistBuilder {\n-        AssistBuilder { edit: TextEditBuilder::default(), cursor_position: None, file }\n+        AssistBuilder {\n+            edit: TextEditBuilder::default(),\n+            cursor_position: None,\n+            file,\n+            is_snippet: false,\n+        }\n     }\n \n     /// Remove specified `range` of text.\n@@ -180,6 +194,16 @@ impl AssistBuilder {\n     pub(crate) fn insert(&mut self, offset: TextSize, text: impl Into<String>) {\n         self.edit.insert(offset, text.into())\n     }\n+    /// Append specified `text` at the given `offset`\n+    pub(crate) fn insert_snippet(\n+        &mut self,\n+        _cap: SnippetCap,\n+        offset: TextSize,\n+        text: impl Into<String>,\n+    ) {\n+        self.is_snippet = true;\n+        self.edit.insert(offset, text.into())\n+    }\n     /// Replaces specified `range` of text with a given string.\n     pub(crate) fn replace(&mut self, range: TextRange, replace_with: impl Into<String>) {\n         self.edit.replace(range, replace_with.into())\n@@ -227,7 +251,12 @@ impl AssistBuilder {\n         if edit.is_empty() && self.cursor_position.is_none() {\n             panic!(\"Only call `add_assist` if the assist can be applied\")\n         }\n-        SingleFileChange { label: change_label, edit, cursor_position: self.cursor_position }\n-            .into_source_change(self.file)\n+        let mut res =\n+            SingleFileChange { label: change_label, edit, cursor_position: self.cursor_position }\n+                .into_source_change(self.file);\n+        if self.is_snippet {\n+            res.is_snippet = true;\n+        }\n+        res\n     }\n }"}, {"sha": "fa70c849684a625b70989b0684358911f664ba0c", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -25,7 +25,7 @@ use crate::{\n // struct S;\n //\n // impl Debug for S {\n-//\n+//     $0\n // }\n // ```\n pub(crate) fn add_custom_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -52,7 +52,7 @@ pub(crate) fn add_custom_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         format!(\"Add custom impl `{}` for `{}`\", trait_token.text().as_str(), annotated_name);\n \n     let target = attr.syntax().text_range();\n-    acc.add(AssistId(\"add_custom_impl\"), label, target, |edit| {\n+    acc.add(AssistId(\"add_custom_impl\"), label, target, |builder| {\n         let new_attr_input = input\n             .syntax()\n             .descendants_with_tokens()\n@@ -63,35 +63,36 @@ pub(crate) fn add_custom_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         let has_more_derives = !new_attr_input.is_empty();\n         let new_attr_input = new_attr_input.iter().sep_by(\", \").surround_with(\"(\", \")\").to_string();\n \n-        let mut buf = String::new();\n-        buf.push_str(\"\\n\\nimpl \");\n-        buf.push_str(trait_token.text().as_str());\n-        buf.push_str(\" for \");\n-        buf.push_str(annotated_name.as_str());\n-        buf.push_str(\" {\\n\");\n-\n-        let cursor_delta = if has_more_derives {\n-            let delta = input.syntax().text_range().len() - TextSize::of(&new_attr_input);\n-            edit.replace(input.syntax().text_range(), new_attr_input);\n-            delta\n+        if has_more_derives {\n+            builder.replace(input.syntax().text_range(), new_attr_input);\n         } else {\n             let attr_range = attr.syntax().text_range();\n-            edit.delete(attr_range);\n+            builder.delete(attr_range);\n \n             let line_break_range = attr\n                 .syntax()\n                 .next_sibling_or_token()\n                 .filter(|t| t.kind() == WHITESPACE)\n                 .map(|t| t.text_range())\n                 .unwrap_or_else(|| TextRange::new(TextSize::from(0), TextSize::from(0)));\n-            edit.delete(line_break_range);\n-\n-            attr_range.len() + line_break_range.len()\n-        };\n-\n-        edit.set_cursor(start_offset + TextSize::of(&buf) - cursor_delta);\n-        buf.push_str(\"\\n}\");\n-        edit.insert(start_offset, buf);\n+            builder.delete(line_break_range);\n+        }\n+\n+        match ctx.config.snippet_cap {\n+            Some(cap) => {\n+                builder.insert_snippet(\n+                    cap,\n+                    start_offset,\n+                    format!(\"\\n\\nimpl {} for {} {{\\n    $0\\n}}\", trait_token, annotated_name),\n+                );\n+            }\n+            None => {\n+                builder.insert(\n+                    start_offset,\n+                    format!(\"\\n\\nimpl {} for {} {{\\n\\n}}\", trait_token, annotated_name),\n+                );\n+            }\n+        }\n     })\n }\n \n@@ -117,7 +118,7 @@ struct Foo {\n }\n \n impl Debug for Foo {\n-<|>\n+    $0\n }\n             \",\n         )\n@@ -139,7 +140,7 @@ pub struct Foo {\n }\n \n impl Debug for Foo {\n-<|>\n+    $0\n }\n             \",\n         )\n@@ -158,7 +159,7 @@ struct Foo {}\n struct Foo {}\n \n impl Debug for Foo {\n-<|>\n+    $0\n }\n             \",\n         )"}, {"sha": "b123b84988cf4e730a9a68b1488b69ddc16463dd", "filename": "crates/ra_assists/src/handlers/add_derive.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -18,31 +18,37 @@ use crate::{AssistContext, AssistId, Assists};\n // ```\n // ->\n // ```\n-// #[derive()]\n+// #[derive($0)]\n // struct Point {\n //     x: u32,\n //     y: u32,\n // }\n // ```\n pub(crate) fn add_derive(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let cap = ctx.config.snippet_cap?;\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let node_start = derive_insertion_offset(&nominal)?;\n     let target = nominal.syntax().text_range();\n-    acc.add(AssistId(\"add_derive\"), \"Add `#[derive]`\", target, |edit| {\n+    acc.add(AssistId(\"add_derive\"), \"Add `#[derive]`\", target, |builder| {\n         let derive_attr = nominal\n             .attrs()\n             .filter_map(|x| x.as_simple_call())\n             .filter(|(name, _arg)| name == \"derive\")\n             .map(|(_name, arg)| arg)\n             .next();\n-        let offset = match derive_attr {\n+        match derive_attr {\n             None => {\n-                edit.insert(node_start, \"#[derive()]\\n\");\n-                node_start + TextSize::of(\"#[derive(\")\n+                builder.insert_snippet(cap, node_start, \"#[derive($0)]\\n\");\n+            }\n+            Some(tt) => {\n+                // Just move the cursor.\n+                builder.insert_snippet(\n+                    cap,\n+                    tt.syntax().text_range().end() - TextSize::of(')'),\n+                    \"$0\",\n+                )\n             }\n-            Some(tt) => tt.syntax().text_range().end() - TextSize::of(')'),\n         };\n-        edit.set_cursor(offset)\n     })\n }\n \n@@ -66,12 +72,12 @@ mod tests {\n         check_assist(\n             add_derive,\n             \"struct Foo { a: i32, <|>}\",\n-            \"#[derive(<|>)]\\nstruct Foo { a: i32, }\",\n+            \"#[derive($0)]\\nstruct Foo { a: i32, }\",\n         );\n         check_assist(\n             add_derive,\n             \"struct Foo { <|> a: i32, }\",\n-            \"#[derive(<|>)]\\nstruct Foo {  a: i32, }\",\n+            \"#[derive($0)]\\nstruct Foo {  a: i32, }\",\n         );\n     }\n \n@@ -80,7 +86,7 @@ mod tests {\n         check_assist(\n             add_derive,\n             \"#[derive(Clone)]\\nstruct Foo { a: i32<|>, }\",\n-            \"#[derive(Clone<|>)]\\nstruct Foo { a: i32, }\",\n+            \"#[derive(Clone$0)]\\nstruct Foo { a: i32, }\",\n         );\n     }\n \n@@ -96,7 +102,7 @@ struct Foo { a: i32<|>, }\n             \"\n /// `Foo` is a pretty important struct.\n /// It does stuff.\n-#[derive(<|>)]\n+#[derive($0)]\n struct Foo { a: i32, }\n             \",\n         );"}, {"sha": "eceba7d0ae671c11d8de5cb7aa29892762a2e4f7", "filename": "crates/ra_assists/src/handlers/add_impl.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -1,7 +1,4 @@\n-use ra_syntax::{\n-    ast::{self, AstNode, NameOwner, TypeParamsOwner},\n-    TextSize,\n-};\n+use ra_syntax::ast::{self, AstNode, NameOwner, TypeParamsOwner};\n use stdx::{format_to, SepBy};\n \n use crate::{AssistContext, AssistId, Assists};\n@@ -12,17 +9,17 @@ use crate::{AssistContext, AssistId, Assists};\n //\n // ```\n // struct Ctx<T: Clone> {\n-//      data: T,<|>\n+//     data: T,<|>\n // }\n // ```\n // ->\n // ```\n // struct Ctx<T: Clone> {\n-//      data: T,\n+//     data: T,\n // }\n //\n // impl<T: Clone> Ctx<T> {\n-//\n+//     $0\n // }\n // ```\n pub(crate) fn add_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -50,30 +47,37 @@ pub(crate) fn add_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n             let generic_params = lifetime_params.chain(type_params).sep_by(\", \");\n             format_to!(buf, \"<{}>\", generic_params)\n         }\n-        buf.push_str(\" {\\n\");\n-        edit.set_cursor(start_offset + TextSize::of(&buf));\n-        buf.push_str(\"\\n}\");\n-        edit.insert(start_offset, buf);\n+        match ctx.config.snippet_cap {\n+            Some(cap) => {\n+                buf.push_str(\" {\\n    $0\\n}\");\n+                edit.insert_snippet(cap, start_offset, buf);\n+            }\n+            None => {\n+                buf.push_str(\" {\\n}\");\n+                edit.insert(start_offset, buf);\n+            }\n+        }\n     })\n }\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n     use crate::tests::{check_assist, check_assist_target};\n \n+    use super::*;\n+\n     #[test]\n     fn test_add_impl() {\n-        check_assist(add_impl, \"struct Foo {<|>}\\n\", \"struct Foo {}\\n\\nimpl Foo {\\n<|>\\n}\\n\");\n+        check_assist(add_impl, \"struct Foo {<|>}\\n\", \"struct Foo {}\\n\\nimpl Foo {\\n    $0\\n}\\n\");\n         check_assist(\n             add_impl,\n             \"struct Foo<T: Clone> {<|>}\",\n-            \"struct Foo<T: Clone> {}\\n\\nimpl<T: Clone> Foo<T> {\\n<|>\\n}\",\n+            \"struct Foo<T: Clone> {}\\n\\nimpl<T: Clone> Foo<T> {\\n    $0\\n}\",\n         );\n         check_assist(\n             add_impl,\n             \"struct Foo<'a, T: Foo<'a>> {<|>}\",\n-            \"struct Foo<'a, T: Foo<'a>> {}\\n\\nimpl<'a, T: Foo<'a>> Foo<'a, T> {\\n<|>\\n}\",\n+            \"struct Foo<'a, T: Foo<'a>> {}\\n\\nimpl<'a, T: Foo<'a>> Foo<'a, T> {\\n    $0\\n}\",\n         );\n     }\n "}, {"sha": "7f0a723c9e75c0a61819e922e763b2ab72c89527", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -10,6 +10,7 @@ macro_rules! eprintln {\n     ($($tt:tt)*) => { stdx::eprintln!($($tt)*) };\n }\n \n+mod assist_config;\n mod assist_context;\n mod marks;\n #[cfg(test)]\n@@ -24,6 +25,8 @@ use ra_syntax::TextRange;\n \n pub(crate) use crate::assist_context::{AssistContext, Assists};\n \n+pub use assist_config::AssistConfig;\n+\n /// Unique identifier of the assist, should not be shown to the user\n /// directly.\n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -54,9 +57,9 @@ impl Assist {\n     ///\n     /// Assists are returned in the \"unresolved\" state, that is only labels are\n     /// returned, without actual edits.\n-    pub fn unresolved(db: &RootDatabase, range: FileRange) -> Vec<Assist> {\n+    pub fn unresolved(db: &RootDatabase, config: &AssistConfig, range: FileRange) -> Vec<Assist> {\n         let sema = Semantics::new(db);\n-        let ctx = AssistContext::new(sema, range);\n+        let ctx = AssistContext::new(sema, config, range);\n         let mut acc = Assists::new_unresolved(&ctx);\n         handlers::all().iter().for_each(|handler| {\n             handler(&mut acc, &ctx);\n@@ -68,9 +71,13 @@ impl Assist {\n     ///\n     /// Assists are returned in the \"resolved\" state, that is with edit fully\n     /// computed.\n-    pub fn resolved(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssist> {\n+    pub fn resolved(\n+        db: &RootDatabase,\n+        config: &AssistConfig,\n+        range: FileRange,\n+    ) -> Vec<ResolvedAssist> {\n         let sema = Semantics::new(db);\n-        let ctx = AssistContext::new(sema, range);\n+        let ctx = AssistContext::new(sema, config, range);\n         let mut acc = Assists::new_resolved(&ctx);\n         handlers::all().iter().for_each(|handler| {\n             handler(&mut acc, &ctx);"}, {"sha": "9ba3da78622eaf638c73ec35d44ba1c87a330828", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -11,7 +11,7 @@ use test_utils::{\n     RangeOrOffset,\n };\n \n-use crate::{handlers::Handler, Assist, AssistContext, Assists};\n+use crate::{handlers::Handler, Assist, AssistConfig, AssistContext, Assists};\n \n pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n     let (mut db, file_id) = RootDatabase::with_single_file(text);\n@@ -41,14 +41,14 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n     let (db, file_id) = crate::tests::with_single_file(&before);\n     let frange = FileRange { file_id, range: selection.into() };\n \n-    let mut assist = Assist::resolved(&db, frange)\n+    let mut assist = Assist::resolved(&db, &AssistConfig::default(), frange)\n         .into_iter()\n         .find(|assist| assist.assist.id.0 == assist_id)\n         .unwrap_or_else(|| {\n             panic!(\n                 \"\\n\\nAssist is not applicable: {}\\nAvailable assists: {}\",\n                 assist_id,\n-                Assist::resolved(&db, frange)\n+                Assist::resolved(&db, &AssistConfig::default(), frange)\n                     .into_iter()\n                     .map(|assist| assist.assist.id.0)\n                     .collect::<Vec<_>>()\n@@ -90,7 +90,8 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult) {\n     let frange = FileRange { file_id: file_with_caret_id, range: range_or_offset.into() };\n \n     let sema = Semantics::new(&db);\n-    let ctx = AssistContext::new(sema, frange);\n+    let config = AssistConfig::default();\n+    let ctx = AssistContext::new(sema, &config, frange);\n     let mut acc = Assists::new_resolved(&ctx);\n     handler(&mut acc, &ctx);\n     let mut res = acc.finish_resolved();\n@@ -103,19 +104,20 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult) {\n             let mut actual = db.file_text(change.file_id).as_ref().to_owned();\n             change.edit.apply(&mut actual);\n \n-            match source_change.cursor_position {\n-                None => {\n-                    if let RangeOrOffset::Offset(before_cursor_pos) = range_or_offset {\n-                        let off = change\n-                            .edit\n-                            .apply_to_offset(before_cursor_pos)\n-                            .expect(\"cursor position is affected by the edit\");\n-                        actual = add_cursor(&actual, off)\n+            if !source_change.is_snippet {\n+                match source_change.cursor_position {\n+                    None => {\n+                        if let RangeOrOffset::Offset(before_cursor_pos) = range_or_offset {\n+                            let off = change\n+                                .edit\n+                                .apply_to_offset(before_cursor_pos)\n+                                .expect(\"cursor position is affected by the edit\");\n+                            actual = add_cursor(&actual, off)\n+                        }\n                     }\n-                }\n-                Some(off) => actual = add_cursor(&actual, off.offset),\n-            };\n-\n+                    Some(off) => actual = add_cursor(&actual, off.offset),\n+                };\n+            }\n             assert_eq_text!(after, &actual);\n         }\n         (Some(assist), ExpectedResult::Target(target)) => {\n@@ -136,7 +138,7 @@ fn assist_order_field_struct() {\n     let (before_cursor_pos, before) = extract_offset(before);\n     let (db, file_id) = with_single_file(&before);\n     let frange = FileRange { file_id, range: TextRange::empty(before_cursor_pos) };\n-    let assists = Assist::resolved(&db, frange);\n+    let assists = Assist::resolved(&db, &AssistConfig::default(), frange);\n     let mut assists = assists.iter();\n \n     assert_eq!(\n@@ -159,7 +161,7 @@ fn assist_order_if_expr() {\n     let (range, before) = extract_range(before);\n     let (db, file_id) = with_single_file(&before);\n     let frange = FileRange { file_id, range };\n-    let assists = Assist::resolved(&db, frange);\n+    let assists = Assist::resolved(&db, &AssistConfig::default(), frange);\n     let mut assists = assists.iter();\n \n     assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Extract into variable\");"}, {"sha": "9487c9239f010f8e7131682170bd92eb6131a227", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -15,7 +15,7 @@ struct S;\n struct S;\n \n impl Debug for S {\n-\n+    $0\n }\n \"#####,\n     )\n@@ -32,7 +32,7 @@ struct Point {\n }\n \"#####,\n         r#####\"\n-#[derive()]\n+#[derive($0)]\n struct Point {\n     x: u32,\n     y: u32,\n@@ -108,16 +108,16 @@ fn doctest_add_impl() {\n         \"add_impl\",\n         r#####\"\n struct Ctx<T: Clone> {\n-     data: T,<|>\n+    data: T,<|>\n }\n \"#####,\n         r#####\"\n struct Ctx<T: Clone> {\n-     data: T,\n+    data: T,\n }\n \n impl<T: Clone> Ctx<T> {\n-\n+    $0\n }\n \"#####,\n     )"}, {"sha": "191300704b5531ac1ea396ac110ab777c4907373", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -59,8 +59,8 @@ pub use crate::completion::{\n /// with ordering of completions (currently this is done by the client).\n pub(crate) fn completions(\n     db: &RootDatabase,\n-    position: FilePosition,\n     config: &CompletionConfig,\n+    position: FilePosition,\n ) -> Option<Completions> {\n     let ctx = CompletionContext::new(db, position, config)?;\n "}, {"sha": "bf22452a281c76cf798aad520d97064151bf5fb3", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -20,7 +20,7 @@ pub(crate) fn do_completion_with_options(\n     } else {\n         single_file_with_position(code)\n     };\n-    let completions = analysis.completions(position, options).unwrap().unwrap();\n+    let completions = analysis.completions(options, position).unwrap().unwrap();\n     let completion_items: Vec<CompletionItem> = completions.into();\n     let mut kind_completions: Vec<CompletionItem> =\n         completion_items.into_iter().filter(|c| c.completion_kind == kind).collect();"}, {"sha": "54c2bcc0942aab887b0cc8e13f98392e65ed0d9e", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -629,6 +629,7 @@ mod tests {\n                             },\n                         ],\n                         cursor_position: None,\n+                        is_snippet: false,\n                     },\n                 ),\n                 severity: Error,\n@@ -685,6 +686,7 @@ mod tests {\n                         ],\n                         file_system_edits: [],\n                         cursor_position: None,\n+                        is_snippet: false,\n                     },\n                 ),\n                 severity: Error,"}, {"sha": "66125f2f59b5cb751e05a653a43213c8e6601a95", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -82,7 +82,7 @@ pub use crate::{\n };\n \n pub use hir::Documentation;\n-pub use ra_assists::AssistId;\n+pub use ra_assists::{AssistConfig, AssistId};\n pub use ra_db::{\n     Canceled, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange, SourceRootId,\n };\n@@ -458,17 +458,17 @@ impl Analysis {\n     /// Computes completions at the given position.\n     pub fn completions(\n         &self,\n-        position: FilePosition,\n         config: &CompletionConfig,\n+        position: FilePosition,\n     ) -> Cancelable<Option<Vec<CompletionItem>>> {\n-        self.with_db(|db| completion::completions(db, position, config).map(Into::into))\n+        self.with_db(|db| completion::completions(db, config, position).map(Into::into))\n     }\n \n     /// Computes assists (aka code actions aka intentions) for the given\n     /// position.\n-    pub fn assists(&self, frange: FileRange) -> Cancelable<Vec<Assist>> {\n+    pub fn assists(&self, config: &AssistConfig, frange: FileRange) -> Cancelable<Vec<Assist>> {\n         self.with_db(|db| {\n-            ra_assists::Assist::resolved(db, frange)\n+            ra_assists::Assist::resolved(db, config, frange)\n                 .into_iter()\n                 .map(|assist| Assist {\n                     id: assist.assist.id,"}, {"sha": "68a53ad4b07e86b640a56d50e9b7bc61a7459718", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -670,6 +670,7 @@ mod tests {\n                         },\n                     ],\n                     cursor_position: None,\n+                    is_snippet: false,\n                 },\n             },\n         )\n@@ -722,6 +723,7 @@ mod tests {\n                         },\n                     ],\n                     cursor_position: None,\n+                    is_snippet: false,\n                 },\n             },\n         )\n@@ -818,6 +820,7 @@ mod tests {\n                         },\n                     ],\n                     cursor_position: None,\n+                    is_snippet: false,\n                 },\n             },\n         )"}, {"sha": "c64165f3a90028681f4694050f541dd9fc5770ae", "filename": "crates/ra_ide_db/src/source_change.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -13,6 +13,7 @@ pub struct SourceChange {\n     pub source_file_edits: Vec<SourceFileEdit>,\n     pub file_system_edits: Vec<FileSystemEdit>,\n     pub cursor_position: Option<FilePosition>,\n+    pub is_snippet: bool,\n }\n \n impl SourceChange {\n@@ -28,6 +29,7 @@ impl SourceChange {\n             source_file_edits,\n             file_system_edits,\n             cursor_position: None,\n+            is_snippet: false,\n         }\n     }\n \n@@ -41,6 +43,7 @@ impl SourceChange {\n             source_file_edits: edits,\n             file_system_edits: vec![],\n             cursor_position: None,\n+            is_snippet: false,\n         }\n     }\n \n@@ -52,6 +55,7 @@ impl SourceChange {\n             source_file_edits: vec![],\n             file_system_edits: edits,\n             cursor_position: None,\n+            is_snippet: false,\n         }\n     }\n \n@@ -115,6 +119,7 @@ impl SingleFileChange {\n             source_file_edits: vec![SourceFileEdit { file_id, edit: self.edit }],\n             file_system_edits: Vec::new(),\n             cursor_position: self.cursor_position.map(|offset| FilePosition { file_id, offset }),\n+            is_snippet: false,\n         }\n     }\n }"}, {"sha": "b20efe98d8cb2156547443ae367666f32c02eb32", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -105,7 +105,7 @@ pub fn analysis_bench(\n             if is_completion {\n                 let options = CompletionConfig::default();\n                 let res = do_work(&mut host, file_id, |analysis| {\n-                    analysis.completions(file_position, &options)\n+                    analysis.completions(&options, file_position)\n                 });\n                 if verbosity.is_verbose() {\n                     println!(\"\\n{:#?}\", res);"}, {"sha": "d75c48597bce46abb4494d53304d87957c2c95cf", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -11,7 +11,7 @@ use std::{ffi::OsString, path::PathBuf};\n \n use lsp_types::ClientCapabilities;\n use ra_flycheck::FlycheckConfig;\n-use ra_ide::{CompletionConfig, InlayHintsConfig};\n+use ra_ide::{AssistConfig, CompletionConfig, InlayHintsConfig};\n use ra_project_model::CargoConfig;\n use serde::Deserialize;\n \n@@ -32,6 +32,7 @@ pub struct Config {\n \n     pub inlay_hints: InlayHintsConfig,\n     pub completion: CompletionConfig,\n+    pub assist: AssistConfig,\n     pub call_info_full: bool,\n     pub lens: LensConfig,\n }\n@@ -136,6 +137,7 @@ impl Default for Config {\n                 add_call_argument_snippets: true,\n                 ..CompletionConfig::default()\n             },\n+            assist: AssistConfig::default(),\n             call_info_full: true,\n             lens: LensConfig::default(),\n         }\n@@ -273,6 +275,7 @@ impl Config {\n             {\n                 self.client_caps.code_action_literals = value;\n             }\n+\n             self.completion.allow_snippets(false);\n             if let Some(completion) = &doc_caps.completion {\n                 if let Some(completion_item) = &completion.completion_item {\n@@ -288,5 +291,12 @@ impl Config {\n                 self.client_caps.work_done_progress = value;\n             }\n         }\n+\n+        self.assist.allow_snippets(false);\n+        if let Some(experimental) = &caps.experimental {\n+            let enable =\n+                experimental.get(\"snippetTextEdit\").and_then(|it| it.as_bool()) == Some(true);\n+            self.assist.allow_snippets(enable);\n+        }\n     }\n }"}, {"sha": "25856c5436b47d12a5ac141d62cf63b7eb61cb7c", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -3,9 +3,11 @@ pub(crate) mod to_proto;\n \n use std::{collections::HashMap, sync::Arc};\n \n-use lsp_types::{CodeActionOrCommand, Diagnostic, Range};\n+use lsp_types::{Diagnostic, Range};\n use ra_ide::FileId;\n \n+use crate::lsp_ext;\n+\n pub type CheckFixes = Arc<HashMap<FileId, Vec<Fix>>>;\n \n #[derive(Debug, Default, Clone)]\n@@ -18,13 +20,13 @@ pub struct DiagnosticCollection {\n #[derive(Debug, Clone)]\n pub struct Fix {\n     pub range: Range,\n-    pub action: CodeActionOrCommand,\n+    pub action: lsp_ext::CodeAction,\n }\n \n #[derive(Debug)]\n pub enum DiagnosticTask {\n     ClearCheck,\n-    AddCheck(FileId, Diagnostic, Vec<CodeActionOrCommand>),\n+    AddCheck(FileId, Diagnostic, Vec<lsp_ext::CodeAction>),\n     SetNative(FileId, Vec<Diagnostic>),\n }\n \n@@ -38,7 +40,7 @@ impl DiagnosticCollection {\n         &mut self,\n         file_id: FileId,\n         diagnostic: Diagnostic,\n-        fixes: Vec<CodeActionOrCommand>,\n+        fixes: Vec<lsp_ext::CodeAction>,\n     ) {\n         let diagnostics = self.check.entry(file_id).or_default();\n         for existing_diagnostic in diagnostics.iter() {"}, {"sha": "96466b5c90b3002efd484f20078bb512445c02cb", "filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -68,9 +68,9 @@ expression: diag\n                 kind: Some(\n                     \"quickfix\",\n                 ),\n-                diagnostics: None,\n+                command: None,\n                 edit: Some(\n-                    WorkspaceEdit {\n+                    SnippetWorkspaceEdit {\n                         changes: Some(\n                             {\n                                 \"file:///test/src/main.rs\": [\n@@ -106,8 +106,6 @@ expression: diag\n                         document_changes: None,\n                     },\n                 ),\n-                command: None,\n-                is_preferred: None,\n             },\n         ],\n     },"}, {"sha": "8f962277f079c0e399b3aaa9bf6597b2beacbc3a", "filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -53,9 +53,9 @@ expression: diag\n                 kind: Some(\n                     \"quickfix\",\n                 ),\n-                diagnostics: None,\n+                command: None,\n                 edit: Some(\n-                    WorkspaceEdit {\n+                    SnippetWorkspaceEdit {\n                         changes: Some(\n                             {\n                                 \"file:///test/driver/subcommand/repl.rs\": [\n@@ -78,8 +78,6 @@ expression: diag\n                         document_changes: None,\n                     },\n                 ),\n-                command: None,\n-                is_preferred: None,\n             },\n         ],\n     },"}, {"sha": "afea595254622ed66178a03dca41115c67c787b0", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -7,13 +7,13 @@ use std::{\n };\n \n use lsp_types::{\n-    CodeAction, Diagnostic, DiagnosticRelatedInformation, DiagnosticSeverity, DiagnosticTag,\n-    Location, NumberOrString, Position, Range, TextEdit, Url, WorkspaceEdit,\n+    Diagnostic, DiagnosticRelatedInformation, DiagnosticSeverity, DiagnosticTag, Location,\n+    NumberOrString, Position, Range, TextEdit, Url,\n };\n use ra_flycheck::{Applicability, DiagnosticLevel, DiagnosticSpan, DiagnosticSpanMacroExpansion};\n use stdx::format_to;\n \n-use crate::Result;\n+use crate::{lsp_ext, Result};\n \n /// Converts a Rust level string to a LSP severity\n fn map_level_to_severity(val: DiagnosticLevel) -> Option<DiagnosticSeverity> {\n@@ -110,7 +110,7 @@ fn is_deprecated(rd: &ra_flycheck::Diagnostic) -> bool {\n \n enum MappedRustChildDiagnostic {\n     Related(DiagnosticRelatedInformation),\n-    SuggestedFix(CodeAction),\n+    SuggestedFix(lsp_ext::CodeAction),\n     MessageLine(String),\n }\n \n@@ -143,13 +143,15 @@ fn map_rust_child_diagnostic(\n             message: rd.message.clone(),\n         })\n     } else {\n-        MappedRustChildDiagnostic::SuggestedFix(CodeAction {\n+        MappedRustChildDiagnostic::SuggestedFix(lsp_ext::CodeAction {\n             title: rd.message.clone(),\n             kind: Some(\"quickfix\".to_string()),\n-            diagnostics: None,\n-            edit: Some(WorkspaceEdit::new(edit_map)),\n+            edit: Some(lsp_ext::SnippetWorkspaceEdit {\n+                // FIXME: there's no good reason to use edit_map here....\n+                changes: Some(edit_map),\n+                document_changes: None,\n+            }),\n             command: None,\n-            is_preferred: None,\n         })\n     }\n }\n@@ -158,7 +160,7 @@ fn map_rust_child_diagnostic(\n pub(crate) struct MappedRustDiagnostic {\n     pub location: Location,\n     pub diagnostic: Diagnostic,\n-    pub fixes: Vec<CodeAction>,\n+    pub fixes: Vec<lsp_ext::CodeAction>,\n }\n \n /// Converts a Rust root diagnostic to LSP form"}, {"sha": "f75a26eb79672601e29ccdc8477946b544fd59ff", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -1,6 +1,6 @@\n //! rust-analyzer extensions to the LSP.\n \n-use std::path::PathBuf;\n+use std::{collections::HashMap, path::PathBuf};\n \n use lsp_types::request::Request;\n use lsp_types::{Location, Position, Range, TextDocumentIdentifier};\n@@ -137,7 +137,7 @@ pub struct Runnable {\n #[serde(rename_all = \"camelCase\")]\n pub struct SourceChange {\n     pub label: String,\n-    pub workspace_edit: lsp_types::WorkspaceEdit,\n+    pub workspace_edit: SnippetWorkspaceEdit,\n     pub cursor_position: Option<lsp_types::TextDocumentPositionParams>,\n }\n \n@@ -183,3 +183,54 @@ pub struct SsrParams {\n     pub query: String,\n     pub parse_only: bool,\n }\n+\n+pub enum CodeActionRequest {}\n+\n+impl Request for CodeActionRequest {\n+    type Params = lsp_types::CodeActionParams;\n+    type Result = Option<Vec<CodeAction>>;\n+    const METHOD: &'static str = \"textDocument/codeAction\";\n+}\n+\n+#[derive(Debug, PartialEq, Clone, Default, Deserialize, Serialize)]\n+pub struct CodeAction {\n+    pub title: String,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub kind: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub command: Option<lsp_types::Command>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub edit: Option<SnippetWorkspaceEdit>,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Clone, Default, Deserialize, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct SnippetWorkspaceEdit {\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub changes: Option<HashMap<lsp_types::Url, Vec<lsp_types::TextEdit>>>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub document_changes: Option<Vec<SnippetDocumentChangeOperation>>,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Clone, Deserialize, Serialize)]\n+#[serde(untagged, rename_all = \"lowercase\")]\n+pub enum SnippetDocumentChangeOperation {\n+    Op(lsp_types::ResourceOp),\n+    Edit(SnippetTextDocumentEdit),\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Clone, Deserialize, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct SnippetTextDocumentEdit {\n+    pub text_document: lsp_types::VersionedTextDocumentIdentifier,\n+    pub edits: Vec<SnippetTextEdit>,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Clone, Default, Deserialize, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct SnippetTextEdit {\n+    pub range: Range,\n+    pub new_text: String,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub insert_text_format: Option<lsp_types::InsertTextFormat>,\n+}"}, {"sha": "87795fffbd6742189c164dcccd9165304f161ccd", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -518,14 +518,14 @@ fn on_request(\n         .on::<lsp_ext::ParentModule>(handlers::handle_parent_module)?\n         .on::<lsp_ext::Runnables>(handlers::handle_runnables)?\n         .on::<lsp_ext::InlayHints>(handlers::handle_inlay_hints)?\n+        .on::<lsp_ext::CodeActionRequest>(handlers::handle_code_action)?\n         .on::<lsp_types::request::OnTypeFormatting>(handlers::handle_on_type_formatting)?\n         .on::<lsp_types::request::DocumentSymbolRequest>(handlers::handle_document_symbol)?\n         .on::<lsp_types::request::WorkspaceSymbol>(handlers::handle_workspace_symbol)?\n         .on::<lsp_types::request::GotoDefinition>(handlers::handle_goto_definition)?\n         .on::<lsp_types::request::GotoImplementation>(handlers::handle_goto_implementation)?\n         .on::<lsp_types::request::GotoTypeDefinition>(handlers::handle_goto_type_definition)?\n         .on::<lsp_types::request::Completion>(handlers::handle_completion)?\n-        .on::<lsp_types::request::CodeActionRequest>(handlers::handle_code_action)?\n         .on::<lsp_types::request::CodeLensRequest>(handlers::handle_code_lens)?\n         .on::<lsp_types::request::CodeLensResolve>(handlers::handle_code_lens_resolve)?\n         .on::<lsp_types::request::FoldingRangeRequest>(handlers::handle_folding_range)?"}, {"sha": "4ff8fa69e92b916ca12bb9d1c0f443fb82fd0f8a", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 31, "deletions": 57, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -11,12 +11,11 @@ use lsp_server::ErrorCode;\n use lsp_types::{\n     CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n     CallHierarchyOutgoingCall, CallHierarchyOutgoingCallsParams, CallHierarchyPrepareParams,\n-    CodeAction, CodeActionResponse, CodeLens, Command, CompletionItem, Diagnostic,\n-    DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange, FoldingRangeParams,\n-    Hover, HoverContents, Location, MarkupContent, MarkupKind, Position, PrepareRenameResponse,\n-    Range, RenameParams, SemanticTokensParams, SemanticTokensRangeParams,\n-    SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation, TextDocumentIdentifier,\n-    TextEdit, Url, WorkspaceEdit,\n+    CodeLens, Command, CompletionItem, Diagnostic, DocumentFormattingParams, DocumentHighlight,\n+    DocumentSymbol, FoldingRange, FoldingRangeParams, Hover, HoverContents, Location,\n+    MarkupContent, MarkupKind, Position, PrepareRenameResponse, Range, RenameParams,\n+    SemanticTokensParams, SemanticTokensRangeParams, SemanticTokensRangeResult,\n+    SemanticTokensResult, SymbolInformation, TextDocumentIdentifier, TextEdit, Url, WorkspaceEdit,\n };\n use ra_ide::{\n     Assist, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n@@ -476,7 +475,7 @@ pub fn handle_completion(\n         return Ok(None);\n     }\n \n-    let items = match world.analysis().completions(position, &world.config.completion)? {\n+    let items = match world.analysis().completions(&world.config.completion, position)? {\n         None => return Ok(None),\n         Some(items) => items,\n     };\n@@ -585,9 +584,8 @@ pub fn handle_rename(world: WorldSnapshot, params: RenameParams) -> Result<Optio\n         None => return Ok(None),\n         Some(it) => it.info,\n     };\n-\n-    let source_change = to_proto::source_change(&world, source_change)?;\n-    Ok(Some(source_change.workspace_edit))\n+    let workspace_edit = to_proto::workspace_edit(&world, source_change)?;\n+    Ok(Some(workspace_edit))\n }\n \n pub fn handle_references(\n@@ -696,14 +694,21 @@ pub fn handle_formatting(\n pub fn handle_code_action(\n     world: WorldSnapshot,\n     params: lsp_types::CodeActionParams,\n-) -> Result<Option<CodeActionResponse>> {\n+) -> Result<Option<Vec<lsp_ext::CodeAction>>> {\n     let _p = profile(\"handle_code_action\");\n+    // We intentionally don't support command-based actions, as those either\n+    // requires custom client-code anyway, or requires server-initiated edits.\n+    // Server initiated edits break causality, so we avoid those as well.\n+    if !world.config.client_caps.code_action_literals {\n+        return Ok(None);\n+    }\n+\n     let file_id = from_proto::file_id(&world, &params.text_document.uri)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.range);\n \n     let diagnostics = world.analysis().diagnostics(file_id)?;\n-    let mut res = CodeActionResponse::default();\n+    let mut res: Vec<lsp_ext::CodeAction> = Vec::new();\n \n     let fixes_from_diagnostics = diagnostics\n         .into_iter()\n@@ -713,22 +718,9 @@ pub fn handle_code_action(\n \n     for source_edit in fixes_from_diagnostics {\n         let title = source_edit.label.clone();\n-        let edit = to_proto::source_change(&world, source_edit)?;\n-\n-        let command = Command {\n-            title,\n-            command: \"rust-analyzer.applySourceChange\".to_string(),\n-            arguments: Some(vec![to_value(edit).unwrap()]),\n-        };\n-        let action = CodeAction {\n-            title: command.title.clone(),\n-            kind: None,\n-            diagnostics: None,\n-            edit: None,\n-            command: Some(command),\n-            is_preferred: None,\n-        };\n-        res.push(action.into());\n+        let edit = to_proto::snippet_workspace_edit(&world, source_edit)?;\n+        let action = lsp_ext::CodeAction { title, kind: None, edit: Some(edit), command: None };\n+        res.push(action);\n     }\n \n     for fix in world.check_fixes.get(&file_id).into_iter().flatten() {\n@@ -740,14 +732,21 @@ pub fn handle_code_action(\n     }\n \n     let mut grouped_assists: FxHashMap<String, (usize, Vec<Assist>)> = FxHashMap::default();\n-    for assist in world.analysis().assists(FileRange { file_id, range })?.into_iter() {\n+    for assist in\n+        world.analysis().assists(&world.config.assist, FileRange { file_id, range })?.into_iter()\n+    {\n         match &assist.group_label {\n             Some(label) => grouped_assists\n                 .entry(label.to_owned())\n                 .or_insert_with(|| {\n                     let idx = res.len();\n-                    let dummy = Command::new(String::new(), String::new(), None);\n-                    res.push(dummy.into());\n+                    let dummy = lsp_ext::CodeAction {\n+                        title: String::new(),\n+                        kind: None,\n+                        command: None,\n+                        edit: None,\n+                    };\n+                    res.push(dummy);\n                     (idx, Vec::new())\n                 })\n                 .1\n@@ -775,35 +774,10 @@ pub fn handle_code_action(\n                 command: \"rust-analyzer.selectAndApplySourceChange\".to_string(),\n                 arguments: Some(vec![serde_json::Value::Array(arguments)]),\n             });\n-            res[idx] = CodeAction {\n-                title,\n-                kind: None,\n-                diagnostics: None,\n-                edit: None,\n-                command,\n-                is_preferred: None,\n-            }\n-            .into();\n+            res[idx] = lsp_ext::CodeAction { title, kind: None, edit: None, command };\n         }\n     }\n \n-    // If the client only supports commands then filter the list\n-    // and remove and actions that depend on edits.\n-    if !world.config.client_caps.code_action_literals {\n-        // FIXME: use drain_filter once it hits stable.\n-        res = res\n-            .into_iter()\n-            .filter_map(|it| match it {\n-                cmd @ lsp_types::CodeActionOrCommand::Command(_) => Some(cmd),\n-                lsp_types::CodeActionOrCommand::CodeAction(action) => match action.command {\n-                    Some(cmd) if action.edit.is_none() => {\n-                        Some(lsp_types::CodeActionOrCommand::Command(cmd))\n-                    }\n-                    _ => None,\n-                },\n-            })\n-            .collect();\n-    }\n     Ok(Some(res))\n }\n "}, {"sha": "2b1a3378f8ac1384b48a7915a414a6733256b1d7", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 100, "deletions": 30, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -112,6 +112,22 @@ pub(crate) fn text_edit(\n     lsp_types::TextEdit { range, new_text }\n }\n \n+pub(crate) fn snippet_text_edit(\n+    line_index: &LineIndex,\n+    line_endings: LineEndings,\n+    is_snippet: bool,\n+    indel: Indel,\n+) -> lsp_ext::SnippetTextEdit {\n+    let text_edit = text_edit(line_index, line_endings, indel);\n+    let insert_text_format =\n+        if is_snippet { Some(lsp_types::InsertTextFormat::Snippet) } else { None };\n+    lsp_ext::SnippetTextEdit {\n+        range: text_edit.range,\n+        new_text: text_edit.new_text,\n+        insert_text_format,\n+    }\n+}\n+\n pub(crate) fn text_edit_vec(\n     line_index: &LineIndex,\n     line_endings: LineEndings,\n@@ -441,20 +457,21 @@ pub(crate) fn goto_definition_response(\n     }\n }\n \n-pub(crate) fn text_document_edit(\n+pub(crate) fn snippet_text_document_edit(\n     world: &WorldSnapshot,\n+    is_snippet: bool,\n     source_file_edit: SourceFileEdit,\n-) -> Result<lsp_types::TextDocumentEdit> {\n+) -> Result<lsp_ext::SnippetTextDocumentEdit> {\n     let text_document = versioned_text_document_identifier(world, source_file_edit.file_id, None)?;\n     let line_index = world.analysis().file_line_index(source_file_edit.file_id)?;\n     let line_endings = world.file_line_endings(source_file_edit.file_id);\n     let edits = source_file_edit\n         .edit\n         .as_indels()\n         .iter()\n-        .map(|it| text_edit(&line_index, line_endings, it.clone()))\n+        .map(|it| snippet_text_edit(&line_index, line_endings, is_snippet, it.clone()))\n         .collect();\n-    Ok(lsp_types::TextDocumentEdit { text_document, edits })\n+    Ok(lsp_ext::SnippetTextDocumentEdit { text_document, edits })\n }\n \n pub(crate) fn resource_op(\n@@ -500,20 +517,70 @@ pub(crate) fn source_change(\n             })\n         }\n     };\n-    let mut document_changes: Vec<lsp_types::DocumentChangeOperation> = Vec::new();\n+    let label = source_change.label.clone();\n+    let workspace_edit = self::snippet_workspace_edit(world, source_change)?;\n+    Ok(lsp_ext::SourceChange { label, workspace_edit, cursor_position })\n+}\n+\n+pub(crate) fn snippet_workspace_edit(\n+    world: &WorldSnapshot,\n+    source_change: SourceChange,\n+) -> Result<lsp_ext::SnippetWorkspaceEdit> {\n+    let mut document_changes: Vec<lsp_ext::SnippetDocumentChangeOperation> = Vec::new();\n     for op in source_change.file_system_edits {\n         let op = resource_op(&world, op)?;\n-        document_changes.push(lsp_types::DocumentChangeOperation::Op(op));\n+        document_changes.push(lsp_ext::SnippetDocumentChangeOperation::Op(op));\n     }\n     for edit in source_change.source_file_edits {\n-        let edit = text_document_edit(&world, edit)?;\n-        document_changes.push(lsp_types::DocumentChangeOperation::Edit(edit));\n+        let edit = snippet_text_document_edit(&world, source_change.is_snippet, edit)?;\n+        document_changes.push(lsp_ext::SnippetDocumentChangeOperation::Edit(edit));\n+    }\n+    let workspace_edit =\n+        lsp_ext::SnippetWorkspaceEdit { changes: None, document_changes: Some(document_changes) };\n+    Ok(workspace_edit)\n+}\n+\n+pub(crate) fn workspace_edit(\n+    world: &WorldSnapshot,\n+    source_change: SourceChange,\n+) -> Result<lsp_types::WorkspaceEdit> {\n+    assert!(!source_change.is_snippet);\n+    snippet_workspace_edit(world, source_change).map(|it| it.into())\n+}\n+\n+impl From<lsp_ext::SnippetWorkspaceEdit> for lsp_types::WorkspaceEdit {\n+    fn from(snippet_workspace_edit: lsp_ext::SnippetWorkspaceEdit) -> lsp_types::WorkspaceEdit {\n+        lsp_types::WorkspaceEdit {\n+            changes: None,\n+            document_changes: snippet_workspace_edit.document_changes.map(|changes| {\n+                lsp_types::DocumentChanges::Operations(\n+                    changes\n+                        .into_iter()\n+                        .map(|change| match change {\n+                            lsp_ext::SnippetDocumentChangeOperation::Op(op) => {\n+                                lsp_types::DocumentChangeOperation::Op(op)\n+                            }\n+                            lsp_ext::SnippetDocumentChangeOperation::Edit(edit) => {\n+                                lsp_types::DocumentChangeOperation::Edit(\n+                                    lsp_types::TextDocumentEdit {\n+                                        text_document: edit.text_document,\n+                                        edits: edit\n+                                            .edits\n+                                            .into_iter()\n+                                            .map(|edit| lsp_types::TextEdit {\n+                                                range: edit.range,\n+                                                new_text: edit.new_text,\n+                                            })\n+                                            .collect(),\n+                                    },\n+                                )\n+                            }\n+                        })\n+                        .collect(),\n+                )\n+            }),\n+        }\n     }\n-    let workspace_edit = lsp_types::WorkspaceEdit {\n-        changes: None,\n-        document_changes: Some(lsp_types::DocumentChanges::Operations(document_changes)),\n-    };\n-    Ok(lsp_ext::SourceChange { label: source_change.label, workspace_edit, cursor_position })\n }\n \n pub fn call_hierarchy_item(\n@@ -571,22 +638,25 @@ fn main() <fold>{\n     }\n }\n \n-pub(crate) fn code_action(world: &WorldSnapshot, assist: Assist) -> Result<lsp_types::CodeAction> {\n-    let source_change = source_change(&world, assist.source_change)?;\n-    let arg = serde_json::to_value(source_change)?;\n-    let title = assist.label;\n-    let command = lsp_types::Command {\n-        title: title.clone(),\n-        command: \"rust-analyzer.applySourceChange\".to_string(),\n-        arguments: Some(vec![arg]),\n-    };\n+pub(crate) fn code_action(world: &WorldSnapshot, assist: Assist) -> Result<lsp_ext::CodeAction> {\n+    let res = if assist.source_change.is_snippet {\n+        lsp_ext::CodeAction {\n+            title: assist.label,\n+            kind: Some(String::new()),\n+            edit: Some(snippet_workspace_edit(world, assist.source_change)?),\n+            command: None,\n+        }\n+    } else {\n+        let source_change = source_change(&world, assist.source_change)?;\n+        let arg = serde_json::to_value(source_change)?;\n+        let title = assist.label;\n+        let command = lsp_types::Command {\n+            title: title.clone(),\n+            command: \"rust-analyzer.applySourceChange\".to_string(),\n+            arguments: Some(vec![arg]),\n+        };\n \n-    Ok(lsp_types::CodeAction {\n-        title,\n-        kind: Some(String::new()),\n-        diagnostics: None,\n-        edit: None,\n-        command: Some(command),\n-        is_preferred: None,\n-    })\n+        lsp_ext::CodeAction { title, kind: Some(String::new()), edit: None, command: Some(command) }\n+    };\n+    Ok(res)\n }"}, {"sha": "74676b3eede866320df3cbd901430907c8eaebad", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 14, "deletions": 38, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -333,29 +333,17 @@ fn main() {}\n             partial_result_params: PartialResultParams::default(),\n             work_done_progress_params: WorkDoneProgressParams::default(),\n         },\n-        json!([\n-          {\n-            \"command\": {\n-              \"arguments\": [\n+        json!([{\n+            \"edit\": {\n+              \"documentChanges\": [\n                 {\n-                  \"cursorPosition\": null,\n-                  \"label\": \"Create module\",\n-                  \"workspaceEdit\": {\n-                    \"documentChanges\": [\n-                      {\n-                        \"kind\": \"create\",\n-                        \"uri\": \"file:///[..]/src/bar.rs\"\n-                      }\n-                    ]\n-                  }\n+                  \"kind\": \"create\",\n+                  \"uri\": \"file:///[..]/src/bar.rs\"\n                 }\n-              ],\n-              \"command\": \"rust-analyzer.applySourceChange\",\n-              \"title\": \"Create module\"\n+              ]\n             },\n             \"title\": \"Create module\"\n-          }\n-        ]),\n+        }]),\n     );\n \n     server.request::<CodeActionRequest>(\n@@ -416,29 +404,17 @@ fn main() {{}}\n             partial_result_params: PartialResultParams::default(),\n             work_done_progress_params: WorkDoneProgressParams::default(),\n         },\n-        json!([\n-          {\n-            \"command\": {\n-              \"arguments\": [\n+        json!([{\n+            \"edit\": {\n+              \"documentChanges\": [\n                 {\n-                  \"cursorPosition\": null,\n-                  \"label\": \"Create module\",\n-                  \"workspaceEdit\": {\n-                    \"documentChanges\": [\n-                      {\n-                        \"kind\": \"create\",\n-                        \"uri\": \"file:///[..]/src/bar.rs\"\n-                      }\n-                    ]\n-                  }\n+                  \"kind\": \"create\",\n+                  \"uri\": \"file://[..]/src/bar.rs\"\n                 }\n-              ],\n-              \"command\": \"rust-analyzer.applySourceChange\",\n-              \"title\": \"Create module\"\n+              ]\n             },\n             \"title\": \"Create module\"\n-          }\n-        ]),\n+        }]),\n     );\n \n     server.request::<CodeActionRequest>("}, {"sha": "d2ec6c0215b39457e2471e4715c1a5f05c1cb880", "filename": "docs/dev/lsp-extensions.md", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -0,0 +1,34 @@\n+# LSP Extensions\n+\n+This document describes LSP extensions used by rust-analyzer.\n+It's a best effort document, when in doubt, consult the source (and send a PR with clarification ;-) ).\n+We aim to upstream all non Rust-specific extensions to the protocol, but this is not a top priority.\n+All capabilities are enabled via `experimental` field of `ClientCapabilities`.\n+\n+## `SnippetTextEdit`\n+\n+**Capability**\n+\n+```typescript\n+{\n+    \"snippetTextEdit\": boolean\n+}\n+```\n+\n+If this capability is set, `WorkspaceEdit`s returned from `codeAction` requests might contain `SnippetTextEdit`s instead of usual `TextEdit`s:\n+\n+```typescript\n+interface SnippetTextEdit extends TextEdit {\n+    insertTextFormat?: InsertTextFormat;\n+}\n+```\n+\n+```typescript\n+export interface TextDocumentEdit {\n+\ttextDocument: VersionedTextDocumentIdentifier;\n+\tedits: (TextEdit | SnippetTextEdit)[];\n+}\n+```\n+\n+When applying such code action, the editor should insert snippet, with tab stops and placeholder.\n+At the moment, rust-analyzer guarantees that only a single edit will have `InsertTextFormat.Snippet`."}, {"sha": "41c5df5287c3f6e335517523de9469d233a288ee", "filename": "docs/user/assists.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -17,7 +17,7 @@ struct S;\n struct S;\n \n impl Debug for S {\n-\n+    $0\n }\n ```\n \n@@ -33,7 +33,7 @@ struct Point {\n }\n \n // AFTER\n-#[derive()]\n+#[derive($0)]\n struct Point {\n     x: u32,\n     y: u32,\n@@ -105,16 +105,16 @@ Adds a new inherent impl for a type.\n ```rust\n // BEFORE\n struct Ctx<T: Clone> {\n-     data: T,\u2503\n+    data: T,\u2503\n }\n \n // AFTER\n struct Ctx<T: Clone> {\n-     data: T,\n+    data: T,\n }\n \n impl<T: Clone> Ctx<T> {\n-\n+    $0\n }\n ```\n "}, {"sha": "fac1a0be3180231a52c9f43995b280dac6c3e477", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 60, "deletions": 5, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -31,24 +31,79 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n                 const res = await next(document, token);\n                 if (res === undefined) throw new Error('busy');\n                 return res;\n+            },\n+            async provideCodeActions(document: vscode.TextDocument, range: vscode.Range, context: vscode.CodeActionContext, token: vscode.CancellationToken, _next: lc.ProvideCodeActionsSignature) {\n+                const params: lc.CodeActionParams = {\n+                    textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n+                    range: client.code2ProtocolConverter.asRange(range),\n+                    context: client.code2ProtocolConverter.asCodeActionContext(context)\n+                };\n+                return client.sendRequest(lc.CodeActionRequest.type, params, token).then((values) => {\n+                    if (values === null) return undefined;\n+                    const result: (vscode.CodeAction | vscode.Command)[] = [];\n+                    for (const item of values) {\n+                        if (lc.CodeAction.is(item)) {\n+                            const action = client.protocol2CodeConverter.asCodeAction(item);\n+                            if (isSnippetEdit(item)) {\n+                                action.command = {\n+                                    command: \"rust-analyzer.applySnippetWorkspaceEdit\",\n+                                    title: \"\",\n+                                    arguments: [action.edit],\n+                                };\n+                                action.edit = undefined;\n+                            }\n+                            result.push(action);\n+                        } else {\n+                            const command = client.protocol2CodeConverter.asCommand(item);\n+                            result.push(command);\n+                        }\n+                    }\n+                    return result;\n+                },\n+                    (_error) => undefined\n+                );\n             }\n+\n         } as any\n     };\n \n-    const res = new lc.LanguageClient(\n+    const client = new lc.LanguageClient(\n         'rust-analyzer',\n         'Rust Analyzer Language Server',\n         serverOptions,\n         clientOptions,\n     );\n \n-    // To turn on all proposed features use: res.registerProposedFeatures();\n+    // To turn on all proposed features use: client.registerProposedFeatures();\n     // Here we want to enable CallHierarchyFeature and SemanticTokensFeature\n     // since they are available on stable.\n     // Note that while these features are stable in vscode their LSP protocol\n     // implementations are still in the \"proposed\" category for 3.16.\n-    res.registerFeature(new CallHierarchyFeature(res));\n-    res.registerFeature(new SemanticTokensFeature(res));\n+    client.registerFeature(new CallHierarchyFeature(client));\n+    client.registerFeature(new SemanticTokensFeature(client));\n+    client.registerFeature(new SnippetTextEditFeature());\n+\n+    return client;\n+}\n \n-    return res;\n+class SnippetTextEditFeature implements lc.StaticFeature {\n+    fillClientCapabilities(capabilities: lc.ClientCapabilities): void {\n+        const caps: any = capabilities.experimental ?? {};\n+        caps.snippetTextEdit = true;\n+        capabilities.experimental = caps;\n+    }\n+    initialize(_capabilities: lc.ServerCapabilities<any>, _documentSelector: lc.DocumentSelector | undefined): void {\n+    }\n+}\n+\n+function isSnippetEdit(action: lc.CodeAction): boolean {\n+    const documentChanges = action.edit?.documentChanges ?? [];\n+    for (const edit of documentChanges) {\n+        if (lc.TextDocumentEdit.is(edit)) {\n+            if (edit.edits.some((indel) => (indel as any).insertTextFormat === lc.InsertTextFormat.Snippet)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n }"}, {"sha": "770d11bd36fafadfbbda578484d8bb50cb402667", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -4,6 +4,7 @@ import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n import * as sourceChange from '../source_change';\n+import { assert } from '../util';\n \n export * from './analyzer_status';\n export * from './matching_brace';\n@@ -51,3 +52,36 @@ export function selectAndApplySourceChange(ctx: Ctx): Cmd {\n         }\n     };\n }\n+\n+export function applySnippetWorkspaceEdit(_ctx: Ctx): Cmd {\n+    return async (edit: vscode.WorkspaceEdit) => {\n+        assert(edit.entries().length === 1, `bad ws edit: ${JSON.stringify(edit)}`);\n+        const [uri, edits] = edit.entries()[0];\n+\n+        const editor = vscode.window.visibleTextEditors.find((it) => it.document.uri.toString() === uri.toString());\n+        if (!editor) return;\n+\n+        let editWithSnippet: vscode.TextEdit | undefined = undefined;\n+        let lineDelta = 0;\n+        await editor.edit((builder) => {\n+            for (const indel of edits) {\n+                if (indel.newText.indexOf('$0') !== -1) {\n+                    editWithSnippet = indel;\n+                } else {\n+                    if (!editWithSnippet) {\n+                        lineDelta = (indel.newText.match(/\\n/g) || []).length - (indel.range.end.line - indel.range.start.line);\n+                    }\n+                    builder.replace(indel.range, indel.newText);\n+                }\n+            }\n+        });\n+        if (editWithSnippet) {\n+            const snip = editWithSnippet as vscode.TextEdit;\n+            const range = snip.range.with(\n+                snip.range.start.with(snip.range.start.line + lineDelta),\n+                snip.range.end.with(snip.range.end.line + lineDelta),\n+            );\n+            await editor.insertSnippet(new vscode.SnippetString(snip.newText), range);\n+        }\n+    };\n+}"}, {"sha": "ac3bb365e2f0b5cb94b5a970ace34fcac66a73b4", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "patch": "@@ -91,6 +91,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('debugSingle', commands.debugSingle);\n     ctx.registerCommand('showReferences', commands.showReferences);\n     ctx.registerCommand('applySourceChange', commands.applySourceChange);\n+    ctx.registerCommand('applySnippetWorkspaceEdit', commands.applySnippetWorkspaceEdit);\n     ctx.registerCommand('selectAndApplySourceChange', commands.selectAndApplySourceChange);\n \n     ctx.pushCleanup(activateTaskProvider(workspaceFolder));"}]}