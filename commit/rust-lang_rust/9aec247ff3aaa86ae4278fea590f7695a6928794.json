{"sha": "9aec247ff3aaa86ae4278fea590f7695a6928794", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZWMyNDdmZjNhYWE4NmFlNDI3OGZlYTU5MGY3Njk1YTY5Mjg3OTQ=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-06-01T12:09:20Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-06-01T12:09:20Z"}, "message": "Merge pull request #81 from Manishearth/len_zero\n\nLen zero extended with check for is_empty() (so we should no longer get false positives).", "tree": {"sha": "9011c1a59654e7fd6bdb0aec488bd84d8372bf2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9011c1a59654e7fd6bdb0aec488bd84d8372bf2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aec247ff3aaa86ae4278fea590f7695a6928794", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aec247ff3aaa86ae4278fea590f7695a6928794", "html_url": "https://github.com/rust-lang/rust/commit/9aec247ff3aaa86ae4278fea590f7695a6928794", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aec247ff3aaa86ae4278fea590f7695a6928794/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c76465154408e2361699696e7d9f321bd60954c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c76465154408e2361699696e7d9f321bd60954c", "html_url": "https://github.com/rust-lang/rust/commit/4c76465154408e2361699696e7d9f321bd60954c"}, {"sha": "7f5891184d55c3d01f57cf480d718e19f9f8268d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5891184d55c3d01f57cf480d718e19f9f8268d", "html_url": "https://github.com/rust-lang/rust/commit/7f5891184d55c3d01f57cf480d718e19f9f8268d"}], "stats": {"total": 199, "additions": 179, "deletions": 20}, "files": [{"sha": "3ad3889f9db2537d6bb2fcbdd23b2d4d8e11b33d", "filename": "src/attrs.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9aec247ff3aaa86ae4278fea590f7695a6928794/src%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aec247ff3aaa86ae4278fea590f7695a6928794/src%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattrs.rs?ref=9aec247ff3aaa86ae4278fea590f7695a6928794", "patch": "@@ -0,0 +1,48 @@\n+/// checks for attributes\n+\n+use rustc::plugin::Registry;\n+use rustc::lint::*;\n+use syntax::ast::*;\n+use syntax::ptr::P;\n+use syntax::codemap::Span;\n+use syntax::parse::token::InternedString;\n+\n+declare_lint! { pub INLINE_ALWAYS, Warn,\n+    \"#[inline(always)] is usually a bad idea.\"}\n+\n+\n+#[derive(Copy,Clone)]\n+pub struct AttrPass;\n+\n+impl LintPass for AttrPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(INLINE_ALWAYS)\n+    }\n+    \n+    fn check_item(&mut self, cx: &Context, item: &Item) {\n+\t\tcheck_attrs(cx, &item.ident, &item.attrs)\n+\t}\n+    \n+    fn check_impl_item(&mut self, cx: &Context, item: &ImplItem) { \n+\t\tcheck_attrs(cx, &item.ident, &item.attrs)\n+\t}\n+        \n+\tfn check_trait_item(&mut self, cx: &Context, item: &TraitItem) {\n+\t\tcheck_attrs(cx, &item.ident, &item.attrs)\n+\t}\n+}\n+\n+fn check_attrs(cx: &Context, ident: &Ident, attrs: &[Attribute]) {\n+\tfor attr in attrs {\n+\t\tif let MetaList(ref inline, ref values) = attr.node.value.node {\n+\t\t\tif values.len() != 1 || inline != &\"inline\" { continue; }\n+\t\t\tif let MetaWord(ref always) = values[0].node {\n+\t\t\t\tif always != &\"always\" { continue; }\n+\t\t\t\tcx.span_lint(INLINE_ALWAYS, attr.span, &format!(\n+\t\t\t\t\t\"You have declared #[inline(always)] on {}. This \\\n+\t\t\t\t\tis usually a bad idea. Are you sure?\", \n+\t\t\t\t\tident.as_str()));\n+\t\t\t}\n+\t\t}\n+\t}\n+}"}, {"sha": "5d97efdf02c0c7b30f8e8b62a1a75f7b9f09c79d", "filename": "src/len_zero.rs", "status": "modified", "additions": 61, "deletions": 11, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9aec247ff3aaa86ae4278fea590f7695a6928794/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aec247ff3aaa86ae4278fea590f7695a6928794/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=9aec247ff3aaa86ae4278fea590f7695a6928794", "patch": "@@ -1,11 +1,16 @@\n extern crate rustc_typeck as typeck;\n \n+use std::rc::Rc;\n+use std::cell::RefCell;\n use syntax::ptr::P;\n-use syntax::ast::*;\n use rustc::lint::{Context, LintPass, LintArray, Lint};\n-use rustc::middle::ty::{self, node_id_to_type, sty, ty_ptr, ty_rptr, mt, MethodTraitItemId};\n+use rustc::util::nodemap::DefIdMap;\n+use rustc::middle::ty::{self, node_id_to_type, sty, ty_ptr, ty_rptr, expr_ty,\n+\tmt, ty_to_def_id, impl_or_trait_item, MethodTraitItemId, ImplOrTraitItemId};\n use rustc::middle::def::{DefTy, DefStruct, DefTrait};\n use syntax::codemap::{Span, Spanned};\n+use syntax::ast::*;\n+use misc::walk_ty;\n \n declare_lint!(pub LEN_ZERO, Warn,\n               \"Warn when .is_empty() could be used instead of checking .len()\");\n@@ -45,16 +50,17 @@ impl LintPass for LenZero {\n \n fn check_trait_items(cx: &Context, item: &Item, trait_items: &[P<TraitItem>]) {\n \tfn is_named_self(item: &TraitItem, name: &str) -> bool {\n-\t\titem.ident.as_str() == name && item.attrs.len() == 0\n+\t\titem.ident.as_str() == name && if let MethodTraitItem(ref sig, _) =\n+\t\t\titem.node { is_self_sig(sig) } else { false }\n \t}\n \n \tif !trait_items.iter().any(|i| is_named_self(i, \"is_empty\")) {\n \t\t//cx.span_lint(LEN_WITHOUT_IS_EMPTY, item.span, &format!(\"trait {}\", item.ident.as_str()));\n \t\tfor i in trait_items {\n \t\t\tif is_named_self(i, \"len\") {\n \t\t\t\tcx.span_lint(LEN_WITHOUT_IS_EMPTY, i.span,\n-\t\t\t\t\t&format!(\"Trait '{}' has a '.len()' method, but no \\\n-\t\t\t\t\t\t'.is_empty()' method. Consider adding one.\", \n+\t\t\t\t\t&format!(\"Trait '{}' has a '.len(_: &Self)' method, but no \\\n+\t\t\t\t\t\t'.is_empty(_: &Self)' method. Consider adding one.\", \n \t\t\t\t\t\titem.ident.as_str()));\n \t\t\t}\n \t\t};\n@@ -63,22 +69,30 @@ fn check_trait_items(cx: &Context, item: &Item, trait_items: &[P<TraitItem>]) {\n \n fn check_impl_items(cx: &Context, item: &Item, impl_items: &[P<ImplItem>]) {\n \tfn is_named_self(item: &ImplItem, name: &str) -> bool {\n-\t\titem.ident.as_str() == name && item.attrs.len() == 0\n+\t\titem.ident.as_str() == name && if let MethodImplItem(ref sig, _) = \n+\t\t\t\titem.node { is_self_sig(sig) } else { false }\n \t}\n \n \tif !impl_items.iter().any(|i| is_named_self(i, \"is_empty\")) {\n \t\tfor i in impl_items {\n \t\t\tif is_named_self(i, \"len\") {\n-\t\t\t\tcx.span_lint(LEN_WITHOUT_IS_EMPTY, i.span,\n-\t\t\t\t\t&format!(\"Item '{}' has a '.len()' method, but no \\\n-\t\t\t\t\t\t'.is_empty()' method. Consider adding one.\", \n+\t\t\t\tlet s = i.span;\n+\t\t\t\tcx.span_lint(LEN_WITHOUT_IS_EMPTY, \n+\t\t\t\t\tSpan{ lo: s.lo, hi: s.lo, expn_id: s.expn_id },\n+\t\t\t\t\t&format!(\"Item '{}' has a '.len(_: &Self)' method, but no \\\n+\t\t\t\t\t\t'.is_empty(_: &Self)' method. Consider adding one.\", \n \t\t\t\t\t\titem.ident.as_str()));\n \t\t\t\treturn;\n \t\t\t}\n \t\t}\n \t}\n }\n \n+fn is_self_sig(sig: &MethodSig) -> bool {\n+\tif let SelfStatic = sig.explicit_self.node { \n+\t\tfalse } else { sig.decl.inputs.len() == 1 }\n+}\n+\n fn check_cmp(cx: &Context, span: Span, left: &Expr, right: &Expr, empty: &str) {\n \tmatch (&left.node, &right.node) {\n \t\t(&ExprLit(ref lit), &ExprMethodCall(ref method, _, ref args)) => \n@@ -92,10 +106,46 @@ fn check_cmp(cx: &Context, span: Span, left: &Expr, right: &Expr, empty: &str) {\n fn check_len_zero(cx: &Context, span: Span, method: &SpannedIdent, \n \t\targs: &[P<Expr>], lit: &Lit, empty: &str) {\n \tif let &Spanned{node: LitInt(0, _), ..} = lit {\n-\t\tif method.node.as_str() == \"len\" && args.len() == 1 {\n+\t\tif method.node.as_str() == \"len\" && args.len() == 1 &&\n+\t\t\thas_is_empty(cx, &*args[0]) {\n \t\t\tcx.span_lint(LEN_ZERO, span, &format!(\n-\t\t\t\t\"Consider replacing the len comparison with '{}_.is_empty()' if available\",\n+\t\t\t\t\"Consider replacing the len comparison with '{}_.is_empty()'\",\n \t\t\t\t\tempty))\n \t\t}\n \t}\n }\n+\n+/// check if this type has an is_empty method\n+fn has_is_empty(cx: &Context, expr: &Expr) -> bool {\n+\t/// get a ImplOrTraitItem and return true if it matches is_empty(self)\n+\tfn is_is_empty(cx: &Context, id: &ImplOrTraitItemId) -> bool {\n+\t\tif let &MethodTraitItemId(def_id) = id {\n+\t\t\tif let ty::MethodTraitItem(ref method) = \n+\t\t\t\t\tty::impl_or_trait_item(cx.tcx, def_id) {\n+\t\t\t\tmethod.name.as_str() == \"is_empty\"\n+\t\t\t\t\t&& method.fty.sig.skip_binder().inputs.len() == 1 \n+\t\t\t} else { false }\n+\t\t} else { false }\n+\t}\n+\t\n+\t/// check the inherent impl's items for an is_empty(self) method\n+\tfn has_is_empty_impl(cx: &Context, id: &DefId) -> bool {\n+\t\tlet impl_items = cx.tcx.impl_items.borrow();\n+\t\tcx.tcx.inherent_impls.borrow().get(id).map_or(false, \n+\t\t\t|ids| ids.iter().any(|iid| impl_items.get(iid).map_or(false, \n+\t\t\t\t|iids| iids.iter().any(|i| is_is_empty(cx, i)))))\n+\t}\n+\t\n+\tlet ty = &walk_ty(&expr_ty(cx.tcx, expr));\n+\tmatch ty.sty {\n+\t\tty::ty_trait(_) => cx.tcx.trait_item_def_ids.borrow().get(\n+\t\t\t&ty::ty_to_def_id(ty).expect(\"trait impl not found\")).map_or(false, \n+\t\t\t|ids| ids.iter().any(|i| is_is_empty(cx, i))),\n+\t\tty::ty_projection(_) => ty::ty_to_def_id(ty).map_or(false, \n+\t\t\t|id| has_is_empty_impl(cx, &id)),\n+\t\tty::ty_enum(ref id, _) | ty::ty_struct(ref id, _) => \n+\t\t\thas_is_empty_impl(cx, id),\n+\t\tty::ty_vec(..) => true,\n+\t\t_ => false,\n+\t}\n+}"}, {"sha": "37cdf6a9c582558b97530394ddcfb5c62f5eb38b", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9aec247ff3aaa86ae4278fea590f7695a6928794/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aec247ff3aaa86ae4278fea590f7695a6928794/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=9aec247ff3aaa86ae4278fea590f7695a6928794", "patch": "@@ -24,6 +24,7 @@ pub mod eta_reduction;\n pub mod identity_op;\n pub mod mut_mut;\n pub mod len_zero;\n+pub mod attrs;\n pub mod collapsible_if;\n \n #[plugin_registrar]\n@@ -45,6 +46,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box mut_mut::MutMut as LintPassObject);\n     reg.register_lint_pass(box len_zero::LenZero as LintPassObject);\n     reg.register_lint_pass(box misc::CmpOwned as LintPassObject);\n+    reg.register_lint_pass(box attrs::AttrPass as LintPassObject);\n     reg.register_lint_pass(box collapsible_if::CollapsibleIf as LintPassObject);\n     \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n@@ -62,6 +64,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            mut_mut::MUT_MUT,\n                                            len_zero::LEN_ZERO,\n                                            len_zero::LEN_WITHOUT_IS_EMPTY,\n+                                           attrs::INLINE_ALWAYS,\n                                            collapsible_if::COLLAPSIBLE_IF,\n                                            ]);\n }"}, {"sha": "5d0d79544e974eda1b73a9ea92c001c5aa2543ea", "filename": "src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aec247ff3aaa86ae4278fea590f7695a6928794/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aec247ff3aaa86ae4278fea590f7695a6928794/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=9aec247ff3aaa86ae4278fea590f7695a6928794", "patch": "@@ -10,7 +10,7 @@ use syntax::codemap::{Span, Spanned};\n \n use types::span_note_and_lint;\n \n-fn walk_ty<'t>(ty: ty::Ty<'t>) -> ty::Ty<'t> {\n+pub fn walk_ty<'t>(ty: ty::Ty<'t>) -> ty::Ty<'t> {\n \tmatch ty.sty {\n \t\tty_ptr(ref tm) | ty_rptr(_, ref tm) => walk_ty(tm.ty),\n \t\t_ => ty"}, {"sha": "30ce191d3db89d3f6b87a2af3d3b153a7640b50d", "filename": "tests/compile-fail/attrs.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9aec247ff3aaa86ae4278fea590f7695a6928794/tests%2Fcompile-fail%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aec247ff3aaa86ae4278fea590f7695a6928794/tests%2Fcompile-fail%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fattrs.rs?ref=9aec247ff3aaa86ae4278fea590f7695a6928794", "patch": "@@ -0,0 +1,12 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(inline_always)]\n+#[inline(always)] //~ERROR You have declared #[inline(always)] on test_attr_lint.\n+fn test_attr_lint() {\n+\tassert!(true)\n+}\n+\n+fn main() {\n+\ttest_attr_lint()\n+}"}, {"sha": "e64010d334d0fe3d9ddf7410c2edf33725e149bd", "filename": "tests/compile-fail/len_zero.rs", "status": "modified", "additions": 54, "deletions": 8, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9aec247ff3aaa86ae4278fea590f7695a6928794/tests%2Fcompile-fail%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aec247ff3aaa86ae4278fea590f7695a6928794/tests%2Fcompile-fail%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flen_zero.rs?ref=9aec247ff3aaa86ae4278fea590f7695a6928794", "patch": "@@ -5,14 +5,14 @@ struct One;\n \n #[deny(len_without_is_empty)]\n impl One {\n-\tfn len(self: &Self) -> isize { //~ERROR Item 'One' has a '.len()' method\n+\tfn len(self: &Self) -> isize { //~ERROR Item 'One' has a '.len(_: &Self)'\n \t\t1\n \t}\n }\n \n #[deny(len_without_is_empty)]\n trait TraitsToo {\n-\tfn len(self: &Self) -> isize; //~ERROR Trait 'TraitsToo' has a '.len()' method,\n+\tfn len(self: &Self) -> isize; //~ERROR Trait 'TraitsToo' has a '.len(_:\n }\n \n impl TraitsToo for One {\n@@ -21,17 +21,47 @@ impl TraitsToo for One {\n \t}\n }\n \n-#[allow(dead_code)]\n struct HasIsEmpty;\n \n #[deny(len_without_is_empty)]\n-#[allow(dead_code)]\n impl HasIsEmpty {\n \tfn len(self: &Self) -> isize {\n \t\t1\n \t}\n+\n+\tfn is_empty(self: &Self) -> bool {\n+\t\tfalse\n+\t}\n+}\n+\n+struct Wither;\n+\n+#[deny(len_without_is_empty)]\n+trait WithIsEmpty {\n+\tfn len(self: &Self) -> isize;\n+\tfn is_empty(self: &Self) -> bool;\n+}\n+\n+impl WithIsEmpty for Wither {\n+\tfn len(self: &Self) -> isize {\n+\t\t1\n+\t}\n+\n+\tfn is_empty(self: &Self) -> bool {\n+\t\tfalse\n+\t}\n+}\n+\n+struct HasWrongIsEmpty;\n+\n+#[deny(len_without_is_empty)]\n+impl HasWrongIsEmpty {\n+\tfn len(self: &Self) -> isize { //~ERROR Item 'HasWrongIsEmpty' has a '.len(_: &Self)'\n+\t\t1\n+\t}\n \t\n-\tfn is_empty() -> bool {\n+\t#[allow(dead_code, unused)]\n+\tfn is_empty(self: &Self, x : u32) -> bool {\n \t\tfalse\n \t}\n }\n@@ -44,13 +74,29 @@ fn main() {\n \t}\n \t\n \tlet y = One;\n-\t// false positives here\n-\tif y.len()  == 0 { //~ERROR Consider replacing the len comparison\n+\tif y.len()  == 0 { //no error because One does not have .is_empty()\n \t\tprintln!(\"This should not happen either!\");\n \t}\n \t\n \tlet z : &TraitsToo = &y;\n-\tif z.len() > 0 { //~ERROR Consider replacing the len comparison\n+\tif z.len() > 0 { //no error, because TraitsToo has no .is_empty() method\n \t\tprintln!(\"Nor should this!\");\n \t}\n+\t\n+\tlet hie = HasIsEmpty;\n+\tif hie.len() == 0 { //~ERROR Consider replacing the len comparison\n+\t\tprintln!(\"Or this!\");\n+\t}\n+\tassert!(!hie.is_empty());\n+\t\n+\tlet wie : &WithIsEmpty = &Wither;\n+\tif wie.len() == 0 { //~ERROR Consider replacing the len comparison\n+\t\tprintln!(\"Or this!\");\n+\t}\n+\tassert!(!wie.is_empty());\n+\t\n+\tlet hwie = HasWrongIsEmpty;\n+\tif hwie.len() == 0 { //no error as HasWrongIsEmpty does not have .is_empty()\n+\t\tprintln!(\"Or this!\");\n+\t}\n }"}, {"sha": "32fdea3a3402f0f6774f1c1f6122760336ac25d2", "filename": "tests/mut_mut_macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9aec247ff3aaa86ae4278fea590f7695a6928794/tests%2Fmut_mut_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aec247ff3aaa86ae4278fea590f7695a6928794/tests%2Fmut_mut_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmut_mut_macro.rs?ref=9aec247ff3aaa86ae4278fea590f7695a6928794", "previous_filename": "tests/run-pass.rs"}]}