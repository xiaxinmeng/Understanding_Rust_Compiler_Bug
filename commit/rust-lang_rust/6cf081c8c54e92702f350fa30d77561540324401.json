{"sha": "6cf081c8c54e92702f350fa30d77561540324401", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZjA4MWM4YzU0ZTkyNzAyZjM1MGZhMzBkNzc1NjE1NDAzMjQ0MDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-13T05:02:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-13T05:02:04Z"}, "message": "Auto merge of #46592 - o01eg:fix-45345, r=alexcrichton\n\nFix 45345\n\nThere is a fix for https://github.com/rust-lang/rust/issues/45345\n\nIt re-introduces `CFG_LIBDIR_RELATIVE` which was broken when migration from `configure` script to `x.py`.\n\nOther commits fix errors which happen after rustbuild cleanups.", "tree": {"sha": "e6586c055b163b60c6c7f1e29d4d248cf96571cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6586c055b163b60c6c7f1e29d4d248cf96571cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cf081c8c54e92702f350fa30d77561540324401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf081c8c54e92702f350fa30d77561540324401", "html_url": "https://github.com/rust-lang/rust/commit/6cf081c8c54e92702f350fa30d77561540324401", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cf081c8c54e92702f350fa30d77561540324401/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eff103aa1f93cbc07b1e5684e695635993c9752", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eff103aa1f93cbc07b1e5684e695635993c9752", "html_url": "https://github.com/rust-lang/rust/commit/6eff103aa1f93cbc07b1e5684e695635993c9752"}, {"sha": "472f4e1cc8c3a94f97a127334a82aeee43909577", "url": "https://api.github.com/repos/rust-lang/rust/commits/472f4e1cc8c3a94f97a127334a82aeee43909577", "html_url": "https://github.com/rust-lang/rust/commit/472f4e1cc8c3a94f97a127334a82aeee43909577"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "389b504c64cdcdb5a4718424cdff3deeddd51ea5", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6cf081c8c54e92702f350fa30d77561540324401/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf081c8c54e92702f350fa30d77561540324401/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=6cf081c8c54e92702f350fa30d77561540324401", "patch": "@@ -23,10 +23,17 @@ use std::path::PathBuf;\n fn main() {\n     let args = env::args_os().skip(1).collect::<Vec<_>>();\n     let rustdoc = env::var_os(\"RUSTDOC_REAL\").expect(\"RUSTDOC_REAL was not set\");\n-    let libdir = env::var_os(\"RUSTC_LIBDIR\").expect(\"RUSTC_LIBDIR was not set\");\n+    let libdir = env::var_os(\"RUSTDOC_LIBDIR\").expect(\"RUSTDOC_LIBDIR was not set\");\n     let stage = env::var(\"RUSTC_STAGE\").expect(\"RUSTC_STAGE was not set\");\n     let sysroot = env::var_os(\"RUSTC_SYSROOT\").expect(\"RUSTC_SYSROOT was not set\");\n \n+    use std::str::FromStr;\n+\n+    let verbose = match env::var(\"RUSTC_VERBOSE\") {\n+        Ok(s) => usize::from_str(&s).expect(\"RUSTC_VERBOSE should be an integer\"),\n+        Err(_) => 0,\n+    };\n+\n     let mut dylib_path = bootstrap::util::dylib_path();\n     dylib_path.insert(0, PathBuf::from(libdir));\n \n@@ -63,6 +70,10 @@ fn main() {\n         cmd.arg(\"--deny-render-differences\");\n     }\n \n+    if verbose > 1 {\n+        eprintln!(\"rustdoc command: {:?}\", cmd);\n+    }\n+\n     std::process::exit(match cmd.status() {\n         Ok(s) => s.code().unwrap_or(1),\n         Err(e) => panic!(\"\\n\\nfailed to run {:?}: {}\\n\\n\", cmd, e),"}, {"sha": "a660b5cf852aa991af8d51139da1dfa5cac6da99", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6cf081c8c54e92702f350fa30d77561540324401/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf081c8c54e92702f350fa30d77561540324401/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=6cf081c8c54e92702f350fa30d77561540324401", "patch": "@@ -357,8 +357,8 @@ impl<'a> Builder<'a> {\n \n             fn run(self, builder: &Builder) -> Interned<PathBuf> {\n                 let compiler = self.compiler;\n-                let lib = if compiler.stage >= 2 && builder.build.config.libdir_relative.is_some() {\n-                    builder.build.config.libdir_relative.clone().unwrap()\n+                let lib = if compiler.stage >= 1 && builder.build.config.libdir.is_some() {\n+                    builder.build.config.libdir.clone().unwrap()\n                 } else {\n                     PathBuf::from(\"lib\")\n                 };\n@@ -416,7 +416,7 @@ impl<'a> Builder<'a> {\n         let compiler = self.compiler(self.top_stage, host);\n         cmd.env(\"RUSTC_STAGE\", compiler.stage.to_string())\n            .env(\"RUSTC_SYSROOT\", self.sysroot(compiler))\n-           .env(\"RUSTC_LIBDIR\", self.sysroot_libdir(compiler, self.build.build))\n+           .env(\"RUSTDOC_LIBDIR\", self.sysroot_libdir(compiler, self.build.build))\n            .env(\"CFG_RELEASE_CHANNEL\", &self.build.config.channel)\n            .env(\"RUSTDOC_REAL\", self.rustdoc(host))\n            .env(\"RUSTDOC_CRATE_VERSION\", self.build.rust_version())\n@@ -496,6 +496,9 @@ impl<'a> Builder<'a> {\n         if let Some(target_linker) = self.build.linker(target) {\n             cargo.env(\"RUSTC_TARGET_LINKER\", target_linker);\n         }\n+        if cmd != \"build\" {\n+            cargo.env(\"RUSTDOC_LIBDIR\", self.rustc_libdir(self.compiler(2, self.build.build)));\n+        }\n \n         if mode != Mode::Tool {\n             // Tools don't get debuginfo right now, e.g. cargo and rls don't"}, {"sha": "ed110762cb3c0f74a12aa581ec8139ab3f2563d3", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cf081c8c54e92702f350fa30d77561540324401/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf081c8c54e92702f350fa30d77561540324401/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=6cf081c8c54e92702f350fa30d77561540324401", "patch": "@@ -1166,7 +1166,7 @@ impl Step for Crate {\n             }\n             Mode::Librustc => {\n                 builder.ensure(compile::Rustc { compiler, target });\n-                compile::rustc_cargo(build, &compiler, target, &mut cargo);\n+                compile::rustc_cargo(build, target, &mut cargo);\n                 (\"librustc\", \"rustc-main\")\n             }\n             _ => panic!(\"can only test libraries\"),"}, {"sha": "c6adfc7ffae47598b6c930e14dee3f5e842418c1", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6cf081c8c54e92702f350fa30d77561540324401/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf081c8c54e92702f350fa30d77561540324401/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=6cf081c8c54e92702f350fa30d77561540324401", "patch": "@@ -485,7 +485,7 @@ impl Step for Rustc {\n         build.clear_if_dirty(&stage_out, &libtest_stamp(build, compiler, target));\n \n         let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"build\");\n-        rustc_cargo(build, &compiler, target, &mut cargo);\n+        rustc_cargo(build, target, &mut cargo);\n         run_cargo(build,\n                   &mut cargo,\n                   &librustc_stamp(build, compiler, target));\n@@ -500,7 +500,6 @@ impl Step for Rustc {\n \n /// Same as `std_cargo`, but for libtest\n pub fn rustc_cargo(build: &Build,\n-                   compiler: &Compiler,\n                    target: Interned<String>,\n                    cargo: &mut Command) {\n     cargo.arg(\"--features\").arg(build.rustc_features())\n@@ -514,13 +513,9 @@ pub fn rustc_cargo(build: &Build,\n          .env(\"CFG_VERSION\", build.rust_version())\n          .env(\"CFG_PREFIX\", build.config.prefix.clone().unwrap_or_default());\n \n-    if compiler.stage == 0 {\n-        cargo.env(\"CFG_LIBDIR_RELATIVE\", \"lib\");\n-    } else {\n-        let libdir_relative =\n-            build.config.libdir_relative.clone().unwrap_or(PathBuf::from(\"lib\"));\n-        cargo.env(\"CFG_LIBDIR_RELATIVE\", libdir_relative);\n-    }\n+    let libdir_relative =\n+        build.config.libdir.clone().unwrap_or(PathBuf::from(\"lib\"));\n+    cargo.env(\"CFG_LIBDIR_RELATIVE\", libdir_relative);\n \n     // If we're not building a compiler with debugging information then remove\n     // these two env vars which would be set otherwise."}, {"sha": "72e75fddc1942cbbfcc3bd399d110c5f910845a6", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cf081c8c54e92702f350fa30d77561540324401/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf081c8c54e92702f350fa30d77561540324401/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=6cf081c8c54e92702f350fa30d77561540324401", "patch": "@@ -121,7 +121,6 @@ pub struct Config {\n     pub docdir: Option<PathBuf>,\n     pub bindir: Option<PathBuf>,\n     pub libdir: Option<PathBuf>,\n-    pub libdir_relative: Option<PathBuf>,\n     pub mandir: Option<PathBuf>,\n     pub codegen_tests: bool,\n     pub nodejs: Option<PathBuf>,"}, {"sha": "178d60dd7df73a07bffdddb76f6e8174d8c17132", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cf081c8c54e92702f350fa30d77561540324401/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf081c8c54e92702f350fa30d77561540324401/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=6cf081c8c54e92702f350fa30d77561540324401", "patch": "@@ -616,7 +616,7 @@ impl Step for Rustc {\n         t!(symlink_dir_force(&my_out, &out_dir));\n \n         let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"doc\");\n-        compile::rustc_cargo(build, &compiler, target, &mut cargo);\n+        compile::rustc_cargo(build, target, &mut cargo);\n \n         if build.config.compiler_docs {\n             // src/rustc/Cargo.toml contains a bin crate called rustc which"}]}