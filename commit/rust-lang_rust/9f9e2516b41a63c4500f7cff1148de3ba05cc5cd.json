{"sha": "9f9e2516b41a63c4500f7cff1148de3ba05cc5cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmOWUyNTE2YjQxYTYzYzQ1MDBmN2NmZjExNDhkZTNiYTA1Y2M1Y2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-28T05:43:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-28T05:43:12Z"}, "message": "Auto merge of #23798 - alexcrichton:issue-23781, r=aturon\n\nPreviously a panic was generated for recursive prints due to a double-borrow of\r\na `RefCell`. This was solved by the second borrow's output being directed\r\ntowards the global stdout instead of the per-thread stdout (still experimental\r\nfunctionality).\r\n\r\nAfter this functionality was altered, however, recursive prints still deadlocked\r\ndue to the overridden `write_fmt` method which locked itself first and then\r\nwrote all the data. This was fixed by removing the override of the `write_fmt`\r\nmethod. This means that unlocked usage of `write!` on a `Stdout`/`Stderr` may be\r\nslower due to acquiring more locks, but it's easy to make more performant with a\r\ncall to `.lock()`.\r\n\r\nCloses #23781", "tree": {"sha": "be933a2b49d7340af37718ec4945b173593795f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be933a2b49d7340af37718ec4945b173593795f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f9e2516b41a63c4500f7cff1148de3ba05cc5cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f9e2516b41a63c4500f7cff1148de3ba05cc5cd", "html_url": "https://github.com/rust-lang/rust/commit/9f9e2516b41a63c4500f7cff1148de3ba05cc5cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f9e2516b41a63c4500f7cff1148de3ba05cc5cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e58f05717d49a4404638da81cb5ae431d2c7a6b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e58f05717d49a4404638da81cb5ae431d2c7a6b6", "html_url": "https://github.com/rust-lang/rust/commit/e58f05717d49a4404638da81cb5ae431d2c7a6b6"}, {"sha": "e2fd2dffde52a59f7d59d67460aeb2ebf33f77dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2fd2dffde52a59f7d59d67460aeb2ebf33f77dd", "html_url": "https://github.com/rust-lang/rust/commit/e2fd2dffde52a59f7d59d67460aeb2ebf33f77dd"}], "stats": {"total": 63, "additions": 52, "deletions": 11}, "files": [{"sha": "d361f17cbe41bc87bfafba0ee601edac29b9c2cf", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9f9e2516b41a63c4500f7cff1148de3ba05cc5cd/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9e2516b41a63c4500f7cff1148de3ba05cc5cd/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=9f9e2516b41a63c4500f7cff1148de3ba05cc5cd", "patch": "@@ -11,7 +11,7 @@\n use prelude::v1::*;\n use io::prelude::*;\n \n-use cell::RefCell;\n+use cell::{RefCell, BorrowState};\n use cmp;\n use fmt;\n use io::lazy::Lazy;\n@@ -264,9 +264,8 @@ impl Write for Stdout {\n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n         self.lock().write_all(buf)\n     }\n-    fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> {\n-        self.lock().write_fmt(fmt)\n-    }\n+    // Don't override write_fmt as it's possible to run arbitrary code during a\n+    // write_fmt, allowing the possibility of a recursive lock (aka deadlock)\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Write for StdoutLock<'a> {\n@@ -334,9 +333,7 @@ impl Write for Stderr {\n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n         self.lock().write_all(buf)\n     }\n-    fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> {\n-        self.lock().write_fmt(fmt)\n-    }\n+    // Don't override write_fmt for the same reasons as Stdout\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Write for StderrLock<'a> {\n@@ -395,10 +392,15 @@ pub fn set_print(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n            reason = \"implementation detail which may disappear or be replaced at any time\")]\n #[doc(hidden)]\n pub fn _print(args: fmt::Arguments) {\n-    if let Err(e) = LOCAL_STDOUT.with(|s| match s.borrow_mut().as_mut() {\n-        Some(w) => w.write_fmt(args),\n-        None => stdout().write_fmt(args)\n-    }) {\n+    let result = LOCAL_STDOUT.with(|s| {\n+        if s.borrow_state() == BorrowState::Unused {\n+            if let Some(w) = s.borrow_mut().as_mut() {\n+                return w.write_fmt(args);\n+            }\n+        }\n+        stdout().write_fmt(args)\n+    });\n+    if let Err(e) = result {\n         panic!(\"failed printing to stdout: {}\", e);\n     }\n }"}, {"sha": "5f5f2fed567328a26fba2a8256d53bbe87e5b6ac", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f9e2516b41a63c4500f7cff1148de3ba05cc5cd/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9e2516b41a63c4500f7cff1148de3ba05cc5cd/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=9f9e2516b41a63c4500f7cff1148de3ba05cc5cd", "patch": "@@ -127,6 +127,7 @@\n #![feature(str_char)]\n #![feature(into_cow)]\n #![feature(slice_patterns)]\n+#![feature(std_misc)]\n #![cfg_attr(test, feature(test, rustc_private, std_misc))]\n \n // Don't link to std. We are std."}, {"sha": "23ac8d2b782142ce493b38b8532134a995cc840e", "filename": "src/test/run-pass/issue-23781.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9f9e2516b41a63c4500f7cff1148de3ba05cc5cd/src%2Ftest%2Frun-pass%2Fissue-23781.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9e2516b41a63c4500f7cff1148de3ba05cc5cd/src%2Ftest%2Frun-pass%2Fissue-23781.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23781.rs?ref=9f9e2516b41a63c4500f7cff1148de3ba05cc5cd", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+\n+struct Foo;\n+impl fmt::Debug for Foo {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        println!(\"<Foo as Debug>::fmt()\");\n+\n+        write!(fmt, \"\")\n+    }\n+}\n+\n+fn test1() {\n+    let foo_str = format!(\"{:?}\", Foo);\n+\n+    println!(\"{}\", foo_str);\n+}\n+\n+fn test2() {\n+    println!(\"{:?}\", Foo);\n+}\n+\n+fn main() {\n+    // This works fine\n+    test1();\n+\n+    // This fails\n+    test2();\n+}"}]}