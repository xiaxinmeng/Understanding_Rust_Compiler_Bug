{"sha": "0f2eba54db7a16d2790f621adec54daa3e829973", "node_id": "C_kwDOAAsO6NoAKDBmMmViYTU0ZGI3YTE2ZDI3OTBmNjIxYWRlYzU0ZGFhM2U4Mjk5NzM", "commit": {"author": {"name": "Hongxu Xu", "email": "xuhongxu96@hotmail.com", "date": "2022-07-06T14:58:27Z"}, "committer": {"name": "Hongxu Xu", "email": "xuhongxu96@hotmail.com", "date": "2022-07-06T14:58:27Z"}, "message": "Show only assoc type args in the correct arg pos", "tree": {"sha": "0f8d52dda6fc7e8e0f8fe286f91ce4e7db79b37d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f8d52dda6fc7e8e0f8fe286f91ce4e7db79b37d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f2eba54db7a16d2790f621adec54daa3e829973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f2eba54db7a16d2790f621adec54daa3e829973", "html_url": "https://github.com/rust-lang/rust/commit/0f2eba54db7a16d2790f621adec54daa3e829973", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f2eba54db7a16d2790f621adec54daa3e829973/comments", "author": {"login": "xuhongxu96", "id": 2201482, "node_id": "MDQ6VXNlcjIyMDE0ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/2201482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xuhongxu96", "html_url": "https://github.com/xuhongxu96", "followers_url": "https://api.github.com/users/xuhongxu96/followers", "following_url": "https://api.github.com/users/xuhongxu96/following{/other_user}", "gists_url": "https://api.github.com/users/xuhongxu96/gists{/gist_id}", "starred_url": "https://api.github.com/users/xuhongxu96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xuhongxu96/subscriptions", "organizations_url": "https://api.github.com/users/xuhongxu96/orgs", "repos_url": "https://api.github.com/users/xuhongxu96/repos", "events_url": "https://api.github.com/users/xuhongxu96/events{/privacy}", "received_events_url": "https://api.github.com/users/xuhongxu96/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xuhongxu96", "id": 2201482, "node_id": "MDQ6VXNlcjIyMDE0ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/2201482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xuhongxu96", "html_url": "https://github.com/xuhongxu96", "followers_url": "https://api.github.com/users/xuhongxu96/followers", "following_url": "https://api.github.com/users/xuhongxu96/following{/other_user}", "gists_url": "https://api.github.com/users/xuhongxu96/gists{/gist_id}", "starred_url": "https://api.github.com/users/xuhongxu96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xuhongxu96/subscriptions", "organizations_url": "https://api.github.com/users/xuhongxu96/orgs", "repos_url": "https://api.github.com/users/xuhongxu96/repos", "events_url": "https://api.github.com/users/xuhongxu96/events{/privacy}", "received_events_url": "https://api.github.com/users/xuhongxu96/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "441e659aa15b98ca6adc428b8c48343202e58a28", "url": "https://api.github.com/repos/rust-lang/rust/commits/441e659aa15b98ca6adc428b8c48343202e58a28", "html_url": "https://github.com/rust-lang/rust/commit/441e659aa15b98ca6adc428b8c48343202e58a28"}], "stats": {"total": 72, "additions": 69, "deletions": 3}, "files": [{"sha": "38beb90b36466907c55446b6b33d280b1db37b45", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0f2eba54db7a16d2790f621adec54daa3e829973/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2eba54db7a16d2790f621adec54daa3e829973/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=0f2eba54db7a16d2790f621adec54daa3e829973", "patch": "@@ -41,6 +41,7 @@ use hir_def::{\n     adt::{ReprKind, VariantData},\n     body::{BodyDiagnostic, SyntheticSyntax},\n     expr::{BindingAnnotation, LabelId, Pat, PatId},\n+    generics::{TypeOrConstParamData, TypeParamProvenance},\n     item_tree::ItemTreeNode,\n     lang_item::LangItemTarget,\n     nameres::{self, diagnostics::DefDiagnostic},\n@@ -1707,6 +1708,22 @@ impl Trait {\n     pub fn is_unsafe(&self, db: &dyn HirDatabase) -> bool {\n         db.trait_data(self.id).is_unsafe\n     }\n+\n+    pub fn type_parameters(&self, db: &dyn HirDatabase) -> Vec<TypeOrConstParamData> {\n+        db.generic_params(GenericDefId::from(self.id))\n+            .type_or_consts\n+            .iter()\n+            .filter(|(_, ty)| match ty {\n+                TypeOrConstParamData::TypeParamData(ty)\n+                    if ty.provenance != TypeParamProvenance::TypeParamList =>\n+                {\n+                    false\n+                }\n+                _ => true,\n+            })\n+            .map(|(_, ty)|ty.clone())\n+            .collect()\n+        }\n }\n \n impl HasVisibility for Trait {"}, {"sha": "0167098da1c62ddd9deef6e75d13f6aa924aeef6", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f2eba54db7a16d2790f621adec54daa3e829973/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2eba54db7a16d2790f621adec54daa3e829973/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=0f2eba54db7a16d2790f621adec54daa3e829973", "patch": "@@ -1,6 +1,7 @@\n //! Completion of names from the current scope in type position.\n \n use hir::{HirDisplay, ScopeDef};\n+use itertools::Itertools;\n use syntax::{ast, AstNode};\n \n use crate::{\n@@ -140,6 +141,18 @@ pub(crate) fn complete_type_path(\n                     return;\n                 }\n                 TypeLocation::GenericArgList(Some(arg_list)) => {\n+                    // the current token is in which generic arg\n+                    let arg_pos = if let Some((pos, _)) =\n+                        arg_list.generic_args().find_position(|arg| {\n+                            arg.syntax()\n+                                .descendants_with_tokens()\n+                                .any(|t| t.as_token() == Some(&ctx.original_token))\n+                        }) {\n+                        pos\n+                    } else {\n+                        0\n+                    };\n+\n                     match arg_list.generic_args().next() {\n                         Some(ast::GenericArg::AssocTypeArg(_)) => {}\n                         _ => {\n@@ -167,7 +180,10 @@ pub(crate) fn complete_type_path(\n                                                     acc.add_type_alias_with_eq(ctx, alias);\n                                                 }\n                                             });\n-                                        return; // only AssocTypeArgs make sense\n+\n+                                        if arg_pos >= trait_.type_parameters(ctx.sema.db).len() {\n+                                            return; // only AssocTypeArgs make sense\n+                                        }\n                                     }\n                                 }\n                             }"}, {"sha": "175acab57fe8988d121d9f3a864632838643cee3", "filename": "crates/ide-completion/src/tests/type_pos.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0f2eba54db7a16d2790f621adec54daa3e829973/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2eba54db7a16d2790f621adec54daa3e829973/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=0f2eba54db7a16d2790f621adec54daa3e829973", "patch": "@@ -386,6 +386,39 @@ fn foo<'lt, T: Trait2<$0>, const CONST_PARAM: usize>(_: T) {}\n     );\n     check(\n         r#\"\n+trait Trait1 {\n+    type Super;\n+}\n+trait Trait2<T>: Trait1 {\n+    type Foo;\n+}\n+\n+fn foo<'lt, T: Trait2<$0>, const CONST_PARAM: usize>(_: T) {}\n+\"#,\n+        expect![[r#\"\n+            ct CONST\n+            cp CONST_PARAM\n+            en Enum\n+            ma makro!(\u2026)            macro_rules! makro\n+            md module\n+            st Record\n+            st Tuple\n+            st Unit\n+            tt Trait\n+            tt Trait1\n+            tt Trait2\n+            ta Foo =  (as Trait2)   type Foo\n+            ta Super =  (as Trait1) type Super\n+            tp T\n+            un Union\n+            bt u32\n+            kw crate::\n+            kw self::\n+            kw super::\n+        \"#]],\n+    );\n+    check(\n+        r#\"\n trait Trait2 {\n     type Foo;\n }\n@@ -460,11 +493,11 @@ fn func(_: Enum::$0) {}\n fn completes_associated_type_only() {\n     check(\n         r#\"\n-trait MyTrait {\n+trait MyTrait<T> {\n     type Item;\n };\n \n-fn f(t: impl MyTrait<I$0\n+fn f(t: impl MyTrait<u8,I$0\n \"#,\n         expect![[r#\"\n             ta Item =  (as MyTrait) type Item"}]}