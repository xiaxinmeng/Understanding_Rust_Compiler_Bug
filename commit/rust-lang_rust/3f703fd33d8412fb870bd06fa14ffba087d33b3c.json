{"sha": "3f703fd33d8412fb870bd06fa14ffba087d33b3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNzAzZmQzM2Q4NDEyZmI4NzBiZDA2ZmExNGZmYmEwODdkMzNiM2M=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-03T02:21:31Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-03T02:21:31Z"}, "message": "Use block indent when visual indent failed inside closure block", "tree": {"sha": "6b172e771e1fc46a8b61bd095d35a55b203f102f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b172e771e1fc46a8b61bd095d35a55b203f102f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f703fd33d8412fb870bd06fa14ffba087d33b3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f703fd33d8412fb870bd06fa14ffba087d33b3c", "html_url": "https://github.com/rust-lang/rust/commit/3f703fd33d8412fb870bd06fa14ffba087d33b3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f703fd33d8412fb870bd06fa14ffba087d33b3c/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59d66c3ae876a32d8f62ce6f9eec58aa37a142e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/59d66c3ae876a32d8f62ce6f9eec58aa37a142e8", "html_url": "https://github.com/rust-lang/rust/commit/59d66c3ae876a32d8f62ce6f9eec58aa37a142e8"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "75a7ff21abe4a7547dc979617c1d2e3f32e60efe", "filename": "src/expr.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3f703fd33d8412fb870bd06fa14ffba087d33b3c/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f703fd33d8412fb870bd06fa14ffba087d33b3c/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=3f703fd33d8412fb870bd06fa14ffba087d33b3c", "patch": "@@ -570,29 +570,47 @@ fn rewrite_closure(capture: ast::CaptureBy,\n         rewrite.map(|rw| format!(\"{} {}\", prefix, rw))\n     }\n \n+    fn no_weird_visual_indent(block_str: &str, context: &RewriteContext) -> bool {\n+        let mut prev_indent_width = 0;\n+        for line in block_str.lines() {\n+            let cur_indent_width = line.find(|c: char| !c.is_whitespace()).unwrap_or(0);\n+            if prev_indent_width > cur_indent_width + context.config.tab_spaces &&\n+               line.find('}').unwrap_or(0) != cur_indent_width {\n+                return false;\n+            }\n+            prev_indent_width = cur_indent_width;\n+        }\n+        true\n+    }\n+\n     fn rewrite_closure_block(block: &ast::Block,\n                              prefix: String,\n                              context: &RewriteContext,\n                              shape: Shape)\n                              -> Option<String> {\n         // Start with visual indent, then fall back to block indent if the\n         // closure is large.\n-        let rewrite = try_opt!(block.rewrite(&context, shape));\n-\n-        let block_threshold = context.config.closure_block_indent_threshold;\n-        if block_threshold < 0 || rewrite.matches('\\n').count() <= block_threshold as usize {\n-            if let Some(rewrite) = wrap_str(rewrite, context.config.max_width, shape) {\n-                return Some(format!(\"{} {}\", prefix, rewrite));\n+        if let Some(block_str) = block.rewrite(&context, shape) {\n+            let block_threshold = context.config.closure_block_indent_threshold;\n+            if (block_threshold < 0 ||\n+                block_str.matches('\\n').count() <= block_threshold as usize) &&\n+               no_weird_visual_indent(&block_str, context) {\n+                if let Some(block_str) = block_str.rewrite(context, shape) {\n+                    return Some(format!(\"{} {}\", prefix, block_str));\n+                }\n             }\n         }\n \n         // The body of the closure is big enough to be block indented, that\n         // means we must re-format.\n-        let block_shape = shape.block();\n-        let rewrite = try_opt!(block.rewrite(&context, block_shape));\n+        let block_shape = Shape {\n+            width: context.config.max_width - shape.block().indent.width(),\n+            ..shape.block()\n+        };\n+        let block_str = try_opt!(block.rewrite(&context, block_shape));\n         Some(format!(\"{} {}\",\n                      prefix,\n-                     try_opt!(wrap_str(rewrite, block_shape.width, block_shape))))\n+                     try_opt!(block_str.rewrite(context, block_shape))))\n     }\n }\n "}]}