{"sha": "5d739180cde7f7350b7a90e8a7542bd9c4cd6783", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNzM5MTgwY2RlN2Y3MzUwYjdhOTBlOGE3NTQyYmQ5YzRjZDY3ODM=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-01-28T14:47:59Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-01-28T14:47:59Z"}, "message": "Clone entire `TokenCursor` when collecting tokens\n\nReverts PR #80830\nFixes taiki-e/pin-project#312\n\nWe can have an arbitrary number of `None`-delimited group frames pushed\non the stack due to proc-macro invocations, which can legally be exited.\nAttempting to account for this would add a lot of complexity for a tiny\nperformance gain, so let's just use the original strategy.", "tree": {"sha": "322588cf6174cc22fc95ca2bc8523112f4a690ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/322588cf6174cc22fc95ca2bc8523112f4a690ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d739180cde7f7350b7a90e8a7542bd9c4cd6783", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmASz2kACgkQtAh+UQ6Y\nsWSeow//VclCqwnh1tQuHMzUa1SajFuM6Ny7gzM1P9GHiFdGubSaqdZAz9ftbjjs\n0Jm6v2feeRNfXFrxVEH9VW1f0HYpt0+Xd6/anUUZR5IBas6QX9GPP3515PdL67dg\nV7wNw0W/HlCAN1Vh1q0geyV/Y8K37dBz+aX/sFVH7misL+QuTMHjj2HjvB0/m7od\n9Z97tL7UDoj6bZclbxsHUTg3tlI8G1HcPLDwCU2Je/ssg6pEw7RqVvoGdnX/rb+V\nIELh3aoDivZBFthJ3npI+jwD18LjAjH16I54GgUHpZbkoQcMjdPnW2Pnm+sBz4xo\n0gF7VVA+NBMHrMzxuF3ZB8SRFQ3F3iBsQ8g131/hXoaCWTUwOPMndYq4kYgvm/+e\nqi/dh3jup6rWeF7XvKBR5zVBq/Du2cPXAW+Nk+9PsDB+EeI9IP9sXAPTbKx5xcna\nJvzKpsripR7njkXPfLgic6Wt4sVo9QH9S4u6IzPcz8vyzjsUpD3BjI+tBZj8leaq\nSkeC7S4bZQQAp+63ip6oKjxNmzU+AGSrmnozSu+hMDPHYMQL6kRtqtuUJpqujKAE\njmd9NxFOmz4ZG9G0dpwc2WeTKybs4hHkqx6sJGs35Zm8uLqSHVbyZ3jlogTeq5DF\nT195y9oknH9QX0TCvMMjlF3PNtzhkjnnNL907Cyno1iYv622420=\n=zhDV\n-----END PGP SIGNATURE-----", "payload": "tree 322588cf6174cc22fc95ca2bc8523112f4a690ba\nparent 0e190206e2ff0c13d64701d9b4145bf89a2d0cab\nauthor Aaron Hill <aa1ronham@gmail.com> 1611845279 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1611845279 -0500\n\nClone entire `TokenCursor` when collecting tokens\n\nReverts PR #80830\nFixes taiki-e/pin-project#312\n\nWe can have an arbitrary number of `None`-delimited group frames pushed\non the stack due to proc-macro invocations, which can legally be exited.\nAttempting to account for this would add a lot of complexity for a tiny\nperformance gain, so let's just use the original strategy.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d739180cde7f7350b7a90e8a7542bd9c4cd6783", "html_url": "https://github.com/rust-lang/rust/commit/5d739180cde7f7350b7a90e8a7542bd9c4cd6783", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d739180cde7f7350b7a90e8a7542bd9c4cd6783/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e190206e2ff0c13d64701d9b4145bf89a2d0cab", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e190206e2ff0c13d64701d9b4145bf89a2d0cab", "html_url": "https://github.com/rust-lang/rust/commit/0e190206e2ff0c13d64701d9b4145bf89a2d0cab"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "e2af63d1744ec3b1b1c226fe7c64d060975452e4", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d739180cde7f7350b7a90e8a7542bd9c4cd6783/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d739180cde7f7350b7a90e8a7542bd9c4cd6783/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=5d739180cde7f7350b7a90e8a7542bd9c4cd6783", "patch": "@@ -1254,15 +1254,7 @@ impl<'a> Parser<'a> {\n         f: impl FnOnce(&mut Self) -> PResult<'a, (R, TrailingToken)>,\n     ) -> PResult<'a, R> {\n         let start_token = (self.token.clone(), self.token_spacing);\n-        let cursor_snapshot = TokenCursor {\n-            frame: self.token_cursor.frame.clone(),\n-            // We only ever capture tokens within our current frame,\n-            // so we can just use an empty frame stack\n-            stack: vec![],\n-            desugar_doc_comments: self.token_cursor.desugar_doc_comments,\n-            num_next_calls: self.token_cursor.num_next_calls,\n-            append_unglued_token: self.token_cursor.append_unglued_token.clone(),\n-        };\n+        let cursor_snapshot = self.token_cursor.clone();\n \n         let (mut ret, trailing_token) = f(self)?;\n "}, {"sha": "a6903283aa108e7d3512da81ba636d1e16984aad", "filename": "src/test/ui/proc-macro/auxiliary/nonterminal-recollect-attr.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5d739180cde7f7350b7a90e8a7542bd9c4cd6783/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnonterminal-recollect-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d739180cde7f7350b7a90e8a7542bd9c4cd6783/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnonterminal-recollect-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnonterminal-recollect-attr.rs?ref=5d739180cde7f7350b7a90e8a7542bd9c4cd6783", "patch": "@@ -0,0 +1,23 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro_quote)]\n+\n+extern crate proc_macro;\n+use proc_macro::{TokenStream, quote};\n+\n+#[proc_macro_attribute]\n+pub fn first_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n+    let recollected: TokenStream = input.into_iter().collect();\n+    quote! {\n+        #[second_attr]\n+        $recollected\n+    }\n+}\n+\n+#[proc_macro_attribute]\n+pub fn second_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n+    let _recollected: TokenStream = input.into_iter().collect();\n+    TokenStream::new()\n+}"}, {"sha": "5d4649b78c270a96c5517cf2d98752c0a1d22000", "filename": "src/test/ui/proc-macro/nonterminal-recollect-attr.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5d739180cde7f7350b7a90e8a7542bd9c4cd6783/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-recollect-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d739180cde7f7350b7a90e8a7542bd9c4cd6783/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-recollect-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-recollect-attr.rs?ref=5d739180cde7f7350b7a90e8a7542bd9c4cd6783", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+// aux-build:nonterminal-recollect-attr.rs\n+\n+extern crate nonterminal_recollect_attr;\n+use nonterminal_recollect_attr::*;\n+\n+macro_rules! my_macro {\n+    ($v:ident) => {\n+        #[first_attr]\n+        $v struct Foo {\n+            field: u8\n+        }\n+    }\n+}\n+\n+my_macro!(pub);\n+fn main() {}"}]}