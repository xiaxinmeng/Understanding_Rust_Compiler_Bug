{"sha": "59e9b629c042e9417e5ac662cbf21c0205e765c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZTliNjI5YzA0MmU5NDE3ZTVhYzY2MmNiZjIxYzAyMDVlNzY1Yzc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-05T18:38:06Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-05T18:38:06Z"}, "message": "Revert \"rustc: Introduce the concept of inline to the AST\"\n\nThis reverts commit 9b9170f9fe2e4701255a5bd0630c203409d8e934.", "tree": {"sha": "9230a3c4a944f26e6ef45a8e7453bcc3268ef949", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9230a3c4a944f26e6ef45a8e7453bcc3268ef949"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59e9b629c042e9417e5ac662cbf21c0205e765c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59e9b629c042e9417e5ac662cbf21c0205e765c7", "html_url": "https://github.com/rust-lang/rust/commit/59e9b629c042e9417e5ac662cbf21c0205e765c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59e9b629c042e9417e5ac662cbf21c0205e765c7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b9170f9fe2e4701255a5bd0630c203409d8e934", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b9170f9fe2e4701255a5bd0630c203409d8e934", "html_url": "https://github.com/rust-lang/rust/commit/9b9170f9fe2e4701255a5bd0630c203409d8e934"}], "stats": {"total": 190, "additions": 86, "deletions": 104}, "files": [{"sha": "8f4afc86877d4ce24d1f91698f1c852e85a0ae5e", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=59e9b629c042e9417e5ac662cbf21c0205e765c7", "patch": "@@ -59,7 +59,7 @@ fn fold_mod(cx: &test_ctxt, m: &ast::_mod, fld: fold::ast_fold) -> ast::_mod {\n     // we want to be main.\n     fn nomain(item: &@ast::item) -> option::t[@ast::item] {\n         alt item.node {\n-          ast::item_fn(f, _, _) {\n+          ast::item_fn(f, _) {\n             if item.ident == \"main\" {\n                 option::none\n             } else { option::some(item) }\n@@ -107,7 +107,7 @@ fn is_test_fn(i: &@ast::item) -> bool {\n \n     fn has_test_signature(i: &@ast::item) -> bool {\n         alt i.node {\n-          ast::item_fn(f, tps, _) {\n+          ast::item_fn(f, tps) {\n             let input_cnt = ivec::len(f.decl.inputs);\n             let no_output = f.decl.output.node == ast::ty_nil;\n             let tparm_cnt = ivec::len(tps);\n@@ -191,7 +191,7 @@ fn mk_tests(cx: &test_ctxt) -> @ast::item {\n \n     let fn_ = {decl: decl, proto: proto, body: body};\n \n-    let item_ = ast::item_fn(fn_, ~[], ast::il_normal);\n+    let item_ = ast::item_fn(fn_, ~[]);\n     let item: ast::item =\n         {ident: \"tests\",\n          attrs: ~[],\n@@ -309,7 +309,7 @@ fn mk_main(cx: &test_ctxt) -> @ast::item {\n \n     let fn_ = {decl: decl, proto: proto, body: body};\n \n-    let item_ = ast::item_fn(fn_, ~[], ast::il_normal);\n+    let item_ = ast::item_fn(fn_, ~[]);\n     let item: ast::item =\n         {ident: \"main\",\n          attrs: ~[],"}, {"sha": "b9a1fa3886a0f0d40a64e80f6fae66e10658c17e", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=59e9b629c042e9417e5ac662cbf21c0205e765c7", "patch": "@@ -81,7 +81,7 @@ fn encode_module_item_paths(ebml_w: &ebmlivec::writer, module: &_mod,\n             encode_def_id(ebml_w, local_def(it.id));\n             ebmlivec::end_tag(ebml_w);\n           }\n-          item_fn(_, tps, _) {\n+          item_fn(_, tps) {\n             add_to_index(ebml_w, path, index, it.ident);\n             ebmlivec::start_tag(ebml_w, tag_paths_data_item);\n             encode_name(ebml_w, it.ident);\n@@ -250,7 +250,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: &ebmlivec::writer,\n         encode_symbol(ecx, ebml_w, item.id);\n         ebmlivec::end_tag(ebml_w);\n       }\n-      item_fn(fd, tps, _) {\n+      item_fn(fd, tps) {\n         ebmlivec::start_tag(ebml_w, tag_items_data_item);\n         encode_def_id(ebml_w, local_def(item.id));\n         encode_family(ebml_w,"}, {"sha": "d6aca1cf36c04773bab7cfb762f3601b1d834c01", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=59e9b629c042e9417e5ac662cbf21c0205e765c7", "patch": "@@ -4,7 +4,6 @@ import ast::ident;\n import ast::fn_ident;\n import ast::node_id;\n import ast::def_id;\n-import ast::inlineness;\n import syntax::codemap::span;\n import syntax::visit;\n import visit::vt;\n@@ -43,7 +42,7 @@ fn check_crate(tcx: ty::ctxt, crate: &@ast::crate) {\n     // Stores information about object fields and function\n     // arguments that's otherwise not easily available.\n     let cx = @{tcx: tcx, local_map: std::map::new_int_hash()};\n-    let v = @{visit_fn: bind visit_fn(cx, _, _, _, _, _, _, _, _),\n+    let v = @{visit_fn: bind visit_fn(cx, _, _, _, _, _, _, _),\n               visit_item: bind visit_item(cx, _, _, _),\n               visit_expr: bind visit_expr(cx, _, _, _),\n               visit_decl: bind visit_decl(cx, _, _, _)\n@@ -52,9 +51,8 @@ fn check_crate(tcx: ty::ctxt, crate: &@ast::crate) {\n     tcx.sess.abort_if_errors();\n }\n \n-fn visit_fn(cx: &@ctx, f: &ast::_fn, tp: &ast::ty_param[], il: inlineness,\n-            sp: &span, name: &fn_ident, id: ast::node_id, sc: &scope,\n-            v: &vt[scope]) {\n+fn visit_fn(cx: &@ctx, f: &ast::_fn, tp: &ast::ty_param[], sp: &span,\n+            name: &fn_ident, id: ast::node_id, sc: &scope, v: &vt[scope]) {\n     visit::visit_fn_decl(f.decl, sc, v);\n     for arg_: ast::arg  in f.decl.inputs {\n         cx.local_map.insert(arg_.id, arg(arg_.mode));"}, {"sha": "4b3ac5739dd3c230f60e2d2928c9ca8d619d6861", "filename": "src/comp/middle/freevars.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffreevars.rs?ref=59e9b629c042e9417e5ac662cbf21c0205e765c7", "patch": "@@ -8,7 +8,6 @@ import std::option;\n import std::int;\n import std::option::*;\n import syntax::ast;\n-import syntax::ast::inlineness;\n import syntax::visit;\n import driver::session;\n import middle::resolve;\n@@ -46,8 +45,8 @@ fn collect_freevars(def_map: &resolve::def_map, sess: &session::session,\n     for decl: ast::node_id  in initial_decls { set_add(decls, decl); }\n     let refs = @mutable ~[];\n \n-    let walk_fn = lambda(f: &ast::_fn, tps: &ast::ty_param[], il: inlineness,\n-                         sp: &span, i: &ast::fn_ident, nid: ast::node_id) {\n+    let walk_fn = lambda(f: &ast::_fn, tps: &ast::ty_param[], sp: &span,\n+                         i: &ast::fn_ident, nid: ast::node_id) {\n         for a: ast::arg  in f.decl.inputs { set_add(decls, a.id); }\n     };\n     let walk_expr = lambda(expr: &@ast::expr) {\n@@ -108,10 +107,10 @@ fn annotate_freevars(sess: &session::session, def_map: &resolve::def_map,\n                      crate: &@ast::crate) -> freevar_map {\n     let freevars = new_int_hash();\n \n-    let walk_fn = lambda(f: &ast::_fn, tps: &ast::ty_param[], il: inlineness,\n-                         sp: &span, i: &ast::fn_ident, nid: ast::node_id) {\n+    let walk_fn = lambda(f: &ast::_fn, tps: &ast::ty_param[], sp: &span,\n+                         i: &ast::fn_ident, nid: ast::node_id) {\n         let start_walk = lambda(v: &visit::vt[()]) {\n-            v.visit_fn(f, tps, il, sp, i, nid, (), v);\n+            v.visit_fn(f, tps, sp, i, nid, (), v);\n         };\n         let vars = collect_freevars(def_map, sess, start_walk, ~[]);\n         freevars.insert(nid, vars);"}, {"sha": "5aa955e7c44f05fec9d7bae1dc562c896e9151fe", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=59e9b629c042e9417e5ac662cbf21c0205e765c7", "patch": "@@ -7,7 +7,6 @@ import ast::def;\n import ast::def_id;\n import ast::node_id;\n import ast::local_def;\n-import ast::inlineness;\n \n import metadata::csearch;\n import metadata::cstore;\n@@ -260,7 +259,7 @@ fn resolve_names(e: &@env, c: &@ast::crate) {\n           visit_expr: bind walk_expr(e, _, _, _),\n           visit_ty: bind walk_ty(e, _, _, _),\n           visit_constr: bind walk_constr(e, _, _, _, _, _),\n-          visit_fn: bind visit_fn_with_scope(e, _, _, _, _, _, _, _, _)\n+          visit_fn: bind visit_fn_with_scope(e, _, _, _, _, _, _, _)\n              with *visit::default_visitor()};\n     visit::visit_crate(*c, cons(scope_crate, @nil), visit::mk_vt(v));\n     e.sess.abort_if_errors();\n@@ -329,8 +328,8 @@ fn visit_native_item_with_scope(ni: &@ast::native_item, sc: &scopes,\n }\n \n fn visit_fn_with_scope(e: &@env, f: &ast::_fn, tp: &ast::ty_param[],\n-                       il: inlineness, sp: &span, name: &fn_ident,\n-                       id: node_id, sc: &scopes, v: &vt[scopes]) {\n+                       sp: &span, name: &fn_ident, id: node_id, sc: &scopes,\n+                       v: &vt[scopes]) {\n     // is this a main fn declaration?\n     alt name {\n       some(nm) {\n@@ -349,7 +348,7 @@ fn visit_fn_with_scope(e: &@env, f: &ast::_fn, tp: &ast::ty_param[],\n     for c: @ast::constr  in f.decl.constraints {\n         resolve_constr(e, id, c, sc, v);\n     }\n-    visit::visit_fn(f, tp, il, sp, name, id,\n+    visit::visit_fn(f, tp, sp, name, id,\n                     cons(scope_fn(f.decl, f.proto, tp), @sc), v);\n }\n \n@@ -825,7 +824,7 @@ fn found_def_item(i: &@ast::item, ns: namespace) -> option::t[def] {\n       ast::item_const(_, _) {\n         if ns == ns_value { ret some(ast::def_const(local_def(i.id))); }\n       }\n-      ast::item_fn(f, _, _) {\n+      ast::item_fn(f, _) {\n         if ns == ns_value {\n             ret some(ast::def_fn(local_def(i.id), f.decl.purity));\n         }\n@@ -1083,7 +1082,7 @@ fn index_mod(md: &ast::_mod) -> mod_index {\n     }\n     for it: @ast::item  in md.items {\n         alt it.node {\n-          ast::item_const(_, _) | ast::item_fn(_, _, _) | ast::item_mod(_) |\n+          ast::item_const(_, _) | ast::item_fn(_, _) | ast::item_mod(_) |\n           ast::item_native_mod(_) | ast::item_ty(_, _) |\n           ast::item_res(_, _, _, _) | ast::item_obj(_, _, _) {\n             add_to_index(index, it.ident, mie_item(it));\n@@ -1219,7 +1218,7 @@ fn check_item(e: &@env, i: &@ast::item, x: &(), v: &vt[()]) {\n     }\n     visit::visit_item(i, x, v);\n     alt i.node {\n-      ast::item_fn(f, ty_params, _) {\n+      ast::item_fn(f, ty_params) {\n         check_fn(*e, i.span, f);\n         ensure_unique(*e, i.span, typaram_names(ty_params),\n                       ident_id, \"type parameter\");\n@@ -1303,7 +1302,7 @@ fn check_block(e: &@env, b: &ast::blk, x: &(), v: &vt[()]) {\n                   ast::item_mod(_) | ast::item_native_mod(_) {\n                     add_name(mods, it.span, it.ident);\n                   }\n-                  ast::item_const(_, _) | ast::item_fn(_, _, _) {\n+                  ast::item_const(_, _) | ast::item_fn(_, _) {\n                     add_name(values, it.span, it.ident);\n                   }\n                   ast::item_ty(_, _) { add_name(types, it.span, it.ident); }"}, {"sha": "7e913c528396b65078cbaebd3896c0a1efcd6bfd", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=59e9b629c042e9417e5ac662cbf21c0205e765c7", "patch": "@@ -7329,7 +7329,7 @@ fn trans_const(cx: &@crate_ctxt, e: @ast::expr, id: ast::node_id) {\n \n fn trans_item(cx: @local_ctxt, item: &ast::item) {\n     alt item.node {\n-      ast::item_fn(f, tps, _) {\n+      ast::item_fn(f, tps) {\n         let sub_cx = extend_path(cx, item.ident);\n         alt cx.ccx.item_ids.find(item.id) {\n           some(llfndecl) {\n@@ -7740,7 +7740,7 @@ fn collect_item_2(ccx: &@crate_ctxt, i: &@ast::item, pt: &str[],\n     let new_pt = pt + item_path(i);\n     visit::visit_item(i, new_pt, v);\n     alt i.node {\n-      ast::item_fn(f, tps, _) {\n+      ast::item_fn(f, tps) {\n         if !ccx.obj_methods.contains_key(i.id) {\n             decl_fn_and_pair(ccx, i.span, new_pt, \"fn\", tps, i.id);\n         }"}, {"sha": "705a2dc534c678003a79c7aea3209240e5d657ec", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=59e9b629c042e9417e5ac662cbf21c0205e765c7", "patch": "@@ -47,15 +47,15 @@ fn collect_ids_local(l: &@local, rs: @mutable node_id[]) {\n     *rs += pat_binding_ids(l.node.pat);\n }\n \n-fn node_ids_in_fn(f: &_fn, tps: &ty_param[], il: inlineness, sp: &span,\n-                  i: &fn_ident, id: node_id, rs: @mutable node_id[]) {\n+fn node_ids_in_fn(f: &_fn, tps: &ty_param[], sp: &span, i: &fn_ident,\n+                  id: node_id, rs: @mutable node_id[]) {\n     let collect_ids =\n         visit::mk_simple_visitor(@{visit_expr: bind collect_ids_expr(_, rs),\n                                    visit_block: bind collect_ids_block(_, rs),\n                                    visit_stmt: bind collect_ids_stmt(_, rs),\n                                    visit_local: bind collect_ids_local(_, rs)\n                                       with *visit::default_simple_visitor()});\n-    visit::visit_fn(f, tps, il, sp, i, id, (), collect_ids);\n+    visit::visit_fn(f, tps, sp, i, id, (), collect_ids);\n }\n \n fn init_vecs(ccx: &crate_ctxt, node_ids: &node_id[], len: uint) {\n@@ -66,25 +66,24 @@ fn init_vecs(ccx: &crate_ctxt, node_ids: &node_id[], len: uint) {\n }\n \n fn visit_fn(ccx: &crate_ctxt, num_constraints: uint, f: &_fn,\n-            tps: &ty_param[], il: inlineness, sp: &span, i: &fn_ident,\n-            id: node_id) {\n+            tps: &ty_param[], sp: &span, i: &fn_ident, id: node_id) {\n     let node_ids: @mutable node_id[] = @mutable ~[];\n-    node_ids_in_fn(f, tps, il, sp, i, id, node_ids);\n+    node_ids_in_fn(f, tps, sp, i, id, node_ids);\n     let node_id_vec = *node_ids;\n     init_vecs(ccx, node_id_vec, num_constraints);\n }\n \n-fn annotate_in_fn(ccx: &crate_ctxt, f: &_fn, tps: &ty_param[], il: inlineness,\n-                  sp: &span, i: &fn_ident, id: node_id) {\n+fn annotate_in_fn(ccx: &crate_ctxt, f: &_fn, tps: &ty_param[], sp: &span,\n+                  i: &fn_ident, id: node_id) {\n     let f_info = get_fn_info(ccx, id);\n-    visit_fn(ccx, num_constraints(f_info), f, tps, il, sp, i, id);\n+    visit_fn(ccx, num_constraints(f_info), f, tps, sp, i, id);\n }\n \n fn annotate_crate(ccx: &crate_ctxt, crate: &crate) {\n     let do_ann =\n         visit::mk_simple_visitor(@{visit_fn:\n-                                   bind annotate_in_fn(ccx, _, _, _, _, _, _)\n-                                   with *visit::default_simple_visitor()});\n+                                       bind annotate_in_fn(ccx, _, _, _, _, _)\n+                                      with *visit::default_simple_visitor()});\n     visit::visit_crate(crate, (), do_ann);\n }\n //"}, {"sha": "2b08dde75c6dcd7bafafc86bf4e89fdac743fe4c", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=59e9b629c042e9417e5ac662cbf21c0205e765c7", "patch": "@@ -1051,8 +1051,8 @@ fn op_to_oper_ty(io: init_op) -> oper_type {\n }\n \n // default function visitor\n-fn do_nothing[T](f: &_fn, tp: &ty_param[], il: inlineness, sp: &span,\n-                 i: &fn_ident, iid: node_id, cx: &T, v: &visit::vt[T]) {\n+fn do_nothing[T](f: &_fn, tp: &ty_param[], sp: &span, i: &fn_ident,\n+                 iid: node_id, cx: &T, v: &visit::vt[T]) {\n }\n \n "}, {"sha": "73b845ac3bfb100ea5efc9a3dd4aefbfcf503661", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=59e9b629c042e9417e5ac662cbf21c0205e765c7", "patch": "@@ -17,7 +17,6 @@ import ast::crate;\n import ast::return;\n import ast::noreturn;\n import ast::expr;\n-import ast::inlineness;\n import syntax::visit;\n import syntax::codemap::span;\n import middle::ty::type_is_nil;\n@@ -126,8 +125,8 @@ fn check_states_stmt(s: &@stmt, fcx: &fn_ctxt, v: &visit::vt[fn_ctxt]) {\n }\n \n fn check_states_against_conditions(fcx: &fn_ctxt, f: &_fn,\n-                                   tps: &ast::ty_param[], il: inlineness,\n-                                   id: node_id, sp: &span, i: &fn_ident) {\n+                                   tps: &ast::ty_param[], id: node_id,\n+                                   sp: &span, i: &fn_ident) {\n     /* Postorder traversal instead of pre is important\n        because we want the smallest possible erroneous statement\n        or expression. */\n@@ -138,7 +137,7 @@ fn check_states_against_conditions(fcx: &fn_ctxt, f: &_fn,\n         @{visit_stmt: check_states_stmt,\n           visit_expr: check_states_expr,\n           visit_fn: do_nothing with *visitor};\n-    visit::visit_fn(f, tps, il, sp, i, id, fcx, visit::mk_vt(visitor));\n+    visit::visit_fn(f, tps, sp, i, id, fcx, visit::mk_vt(visitor));\n \n     /* Check that the return value is initialized */\n     let post = aux::block_poststate(fcx.ccx, f.body);\n@@ -171,8 +170,8 @@ fn check_states_against_conditions(fcx: &fn_ctxt, f: &_fn,\n     check_unused_vars(fcx);\n }\n \n-fn check_fn_states(fcx: &fn_ctxt, f: &_fn, tps: &ast::ty_param[],\n-                   il: inlineness, id: node_id, sp: &span, i: &fn_ident) {\n+fn check_fn_states(fcx: &fn_ctxt, f: &_fn, tps: &ast::ty_param[], id: node_id,\n+                   sp: &span, i: &fn_ident) {\n     /* Compute the pre- and post-states for this function */\n \n     // Fixpoint iteration\n@@ -181,20 +180,19 @@ fn check_fn_states(fcx: &fn_ctxt, f: &_fn, tps: &ast::ty_param[],\n     /* Now compare each expr's pre-state to its precondition\n        and post-state to its postcondition */\n \n-    check_states_against_conditions(fcx, f, tps, il, id, sp, i);\n+    check_states_against_conditions(fcx, f, tps, id, sp, i);\n }\n \n-fn fn_states(f: &_fn, tps: &ast::ty_param[], il: inlineness, sp: &span,\n-             i: &fn_ident, id: node_id, ccx: &crate_ctxt,\n-             v: &visit::vt[crate_ctxt]) {\n-    visit::visit_fn(f, tps, il, sp, i, id, ccx, v);\n+fn fn_states(f: &_fn, tps: &ast::ty_param[], sp: &span, i: &fn_ident,\n+             id: node_id, ccx: &crate_ctxt, v: &visit::vt[crate_ctxt]) {\n+    visit::visit_fn(f, tps, sp, i, id, ccx, v);\n     /* Look up the var-to-bit-num map for this function */\n \n     assert (ccx.fm.contains_key(id));\n     let f_info = ccx.fm.get(id);\n     let name = option::from_maybe(\"anon\", i);\n     let fcx = {enclosing: f_info, id: id, name: name, ccx: ccx};\n-    check_fn_states(fcx, f, tps, il, id, sp, i);\n+    check_fn_states(fcx, f, tps, id, sp, i);\n }\n \n fn check_crate(cx: ty::ctxt, crate: @crate) {"}, {"sha": "c420bc0151cfd892d995fc5ef4c340de9950d6b5", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=59e9b629c042e9417e5ac662cbf21c0205e765c7", "patch": "@@ -43,16 +43,16 @@ fn collect_pred(e: &@expr, cx: &ctxt, v: &visit::vt[ctxt]) {\n     visit::visit_expr(e, cx, v);\n }\n \n-fn find_locals(tcx: &ty::ctxt, f: &_fn, tps: &ty_param[], il: inlineness,\n-               sp: &span, i: &fn_ident, id: node_id) -> ctxt {\n+fn find_locals(tcx: &ty::ctxt, f: &_fn, tps: &ty_param[], sp: &span,\n+               i: &fn_ident, id: node_id) -> ctxt {\n     let cx: ctxt = {cs: @mutable ~[], tcx: tcx};\n     let visitor = visit::default_visitor[ctxt]();\n \n     visitor =\n         @{visit_local: collect_local,\n           visit_expr: collect_pred,\n           visit_fn: do_nothing with *visitor};\n-    visit::visit_fn(f, tps, il, sp, i, id, cx, visit::mk_vt(visitor));\n+    visit::visit_fn(f, tps, sp, i, id, cx, visit::mk_vt(visitor));\n     ret cx;\n }\n \n@@ -88,13 +88,13 @@ fn add_constraint(tcx: &ty::ctxt, c: sp_constr, next: uint, tbl: constr_map)\n \n /* builds a table mapping each local var defined in f\n    to a bit number in the precondition/postcondition vectors */\n-fn mk_fn_info(ccx: &crate_ctxt, f: &_fn, tp: &ty_param[], il: inlineness,\n-              f_sp: &span, f_name: &fn_ident, id: node_id) {\n+fn mk_fn_info(ccx: &crate_ctxt, f: &_fn, tp: &ty_param[], f_sp: &span,\n+              f_name: &fn_ident, id: node_id) {\n     let name = fn_ident_to_string(id, f_name);\n     let res_map = @new_def_hash[constraint]();\n     let next: uint = 0u;\n \n-    let cx: ctxt = find_locals(ccx.tcx, f, tp, il, f_sp, f_name, id);\n+    let cx: ctxt = find_locals(ccx.tcx, f, tp, f_sp, f_name, id);\n     /* now we have to add bit nums for both the constraints\n        and the variables... */\n \n@@ -144,7 +144,7 @@ fn mk_fn_info(ccx: &crate_ctxt, f: &_fn, tp: &ty_param[], il: inlineness,\n fn mk_f_to_fn_info(ccx: &crate_ctxt, c: @crate) {\n     let visitor =\n         visit::mk_simple_visitor(@{visit_fn:\n-                                       bind mk_fn_info(ccx, _, _, _, _, _, _)\n+                                       bind mk_fn_info(ccx, _, _, _, _, _)\n                                       with *visit::default_simple_visitor()});\n     visit::visit_crate(*c, (), visitor);\n }"}, {"sha": "473e1cfbf2bdd5d0e6d06681fa853f734a521b09", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=59e9b629c042e9417e5ac662cbf21c0205e765c7", "patch": "@@ -88,7 +88,7 @@ fn find_pre_post_item(ccx: &crate_ctxt, i: &item) {\n              ccx: ccx};\n         find_pre_post_expr(fake_fcx, e);\n       }\n-      item_fn(f, _, _) {\n+      item_fn(f, _) {\n         assert (ccx.fm.contains_key(i.id));\n         let fcx =\n             {enclosing: ccx.fm.get(i.id), id: i.id, name: i.ident, ccx: ccx};\n@@ -709,10 +709,9 @@ fn find_pre_post_fn(fcx: &fn_ctxt, f: &_fn) {\n     }\n }\n \n-fn fn_pre_post(f: &_fn, tps: &ty_param[], il: inlineness, sp: &span,\n-               i: &fn_ident, id: node_id, ccx: &crate_ctxt,\n-               v: &visit::vt[crate_ctxt]) {\n-    visit::visit_fn(f, tps, il, sp, i, id, ccx, v);\n+fn fn_pre_post(f: &_fn, tps: &ty_param[], sp: &span, i: &fn_ident,\n+               id: node_id, ccx: &crate_ctxt, v: &visit::vt[crate_ctxt]) {\n+    visit::visit_fn(f, tps, sp, i, id, ccx, v);\n     assert (ccx.fm.contains_key(id));\n     let fcx =\n         {enclosing: ccx.fm.get(id),"}, {"sha": "99e10eafa3cf2d741728f3e80a49c424498ae520", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=59e9b629c042e9417e5ac662cbf21c0205e765c7", "patch": "@@ -1,6 +1,5 @@\n import syntax::ast;\n import ast::mutability;\n-import ast::inlineness;\n import ast::local_def;\n import ast::respan;\n import ast::spanned;\n@@ -648,7 +647,7 @@ mod collect {\n             cx.tcx.tcache.insert(local_def(it.id), tpt);\n             ret tpt;\n           }\n-          ast::item_fn(fn_info, tps, _) {\n+          ast::item_fn(fn_info, tps) {\n             let f = bind ty_of_arg(cx, _);\n             ret ty_of_fn_decl(cx, convert, f, fn_info.decl, fn_info.proto,\n                               tps, some(local_def(it.id)));\n@@ -1297,8 +1296,8 @@ fn gather_locals(ccx: &@crate_ctxt, f: &ast::_fn, id: &ast::node_id,\n     };\n \n     // Don't descend into fns and items\n-    fn visit_fn[E](f: &ast::_fn, tp: &ast::ty_param[], il: inlineness,\n-                   sp: &span, i: &ast::fn_ident, id: ast::node_id, e: &E,\n+    fn visit_fn[E](f: &ast::_fn, tp: &ast::ty_param[], sp: &span,\n+                   i: &ast::fn_ident, id: ast::node_id, e: &E,\n                    v: &visit::vt[E]) { }\n     fn visit_item[E](i: &@ast::item, e: &E, v: &visit::vt[E]) { }\n \n@@ -2704,7 +2703,7 @@ fn check_method(ccx: &@crate_ctxt, method: &@ast::method) {\n fn check_item(ccx: @crate_ctxt, it: &@ast::item) {\n     alt it.node {\n       ast::item_const(_, e) { check_const(ccx, it.span, e, it.id); }\n-      ast::item_fn(f, _, _) { check_fn(ccx, f, it.id, none); }\n+      ast::item_fn(f, _) { check_fn(ccx, f, it.id, none); }\n       ast::item_res(f, dtor_id, _, _) { check_fn(ccx, f, dtor_id, none); }\n       ast::item_obj(ob, _, _) {\n         // We're entering an object, so gather up the info we need."}, {"sha": "ff8e6c0893c1ae869274c6dfa1334920a513ddda", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=59e9b629c042e9417e5ac662cbf21c0205e765c7", "patch": "@@ -604,11 +604,9 @@ type attribute_ = {style: attr_style, value: meta_item};\n type item =  // For objs and resources, this is the type def_id\n     {ident: ident, attrs: attribute[], id: node_id, node: item_, span: span};\n \n-tag inlineness { il_normal; il_inline; }\n-\n tag item_ {\n     item_const(@ty, @expr);\n-    item_fn(_fn, ty_param[], inlineness);\n+    item_fn(_fn, ty_param[]);\n     item_mod(_mod);\n     item_native_mod(native_mod);\n     item_ty(@ty, ty_param[]);"}, {"sha": "e2bb0380c0474e815bdf2273526d931dd50f528a", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=59e9b629c042e9417e5ac662cbf21c0205e765c7", "patch": "@@ -223,7 +223,7 @@ fn noop_fold_item_underscore(i: &item_, fld: ast_fold) -> item_ {\n \n     ret alt i {\n           item_const(t, e) { item_const(fld.fold_ty(t), fld.fold_expr(e)) }\n-          item_fn(f, typms, il) { item_fn(fld.fold_fn(f), typms, il) }\n+          item_fn(f, typms) { item_fn(fld.fold_fn(f), typms) }\n           item_mod(m) { item_mod(fld.fold_mod(m)) }\n           item_native_mod(nm) { item_native_mod(fld.fold_native_mod(nm)) }\n           item_ty(t, typms) { item_ty(fld.fold_ty(t), typms) }"}, {"sha": "9e7f693c74b2d9c67d7862d72c37bad956c0e9f8", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=59e9b629c042e9417e5ac662cbf21c0205e765c7", "patch": "@@ -1769,8 +1769,8 @@ fn parse_item_fn_or_iter(p: &parser, purity: ast::purity, proto: ast::proto,\n     let lo = p.get_last_lo_pos();\n     let t = parse_fn_header(p);\n     let f = parse_fn(p, proto, purity);\n-    ret mk_item(p, lo, f.body.span.hi, t.ident,\n-                ast::item_fn(f, t.tps, ast::il_normal), attrs);\n+    ret mk_item(p, lo, f.body.span.hi, t.ident, ast::item_fn(f, t.tps),\n+                attrs);\n }\n \n fn parse_obj_field(p: &parser) -> ast::obj_field {"}, {"sha": "dab764c5baabf4564c2c6b5152538dac03a046ac", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=59e9b629c042e9417e5ac662cbf21c0205e765c7", "patch": "@@ -412,7 +412,7 @@ fn print_item(s: &ps, item: &@ast::item) {\n         end(s); // end the outer cbox\n \n       }\n-      ast::item_fn(_fn, typarams, _) {\n+      ast::item_fn(_fn, typarams) {\n         print_fn(s, _fn.decl, _fn.proto, item.ident, typarams,\n                  _fn.decl.constraints);\n         word(s.s, \" \");"}, {"sha": "673fa46d466cd85a13c1b85561a8ae2aabfb6efe", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9b629c042e9417e5ac662cbf21c0205e765c7/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=59e9b629c042e9417e5ac662cbf21c0205e765c7", "patch": "@@ -33,9 +33,7 @@ type visitor[E] =\n       visit_ty: fn(&@ty, &E, &vt[E]) ,\n       visit_constr: fn(&path, &span, node_id, &E, &vt[E]) ,\n       visit_fn:\n-          fn(&_fn, &ty_param[], inlineness, &span, &fn_ident, node_id, &E,\n-             &vt[E])\n-    };\n+          fn(&_fn, &ty_param[], &span, &fn_ident, node_id, &E, &vt[E]) };\n \n fn default_visitor[E]() -> visitor[E] {\n     ret @{visit_mod: bind visit_mod[E](_, _, _, _),\n@@ -51,7 +49,7 @@ fn default_visitor[E]() -> visitor[E] {\n           visit_expr: bind visit_expr[E](_, _, _),\n           visit_ty: bind visit_ty[E](_, _, _),\n           visit_constr: bind visit_constr[E](_, _, _, _, _),\n-          visit_fn: bind visit_fn[E](_, _, _, _, _, _, _, _)};\n+          visit_fn: bind visit_fn[E](_, _, _, _, _, _, _)};\n }\n \n fn visit_crate[E](c: &crate, e: &E, v: &vt[E]) {\n@@ -88,17 +86,15 @@ fn visit_local[E](loc: &@local, e: &E, v: &vt[E]) {\n fn visit_item[E](i: &@item, e: &E, v: &vt[E]) {\n     alt i.node {\n       item_const(t, ex) { v.visit_ty(t, e, v); v.visit_expr(ex, e, v); }\n-      item_fn(f, tp, il) {\n-        v.visit_fn(f, tp, il, i.span, some(i.ident), i.id, e, v);\n-      }\n+      item_fn(f, tp) { v.visit_fn(f, tp, i.span, some(i.ident), i.id, e, v); }\n       item_mod(m) { v.visit_mod(m, i.span, e, v); }\n       item_native_mod(nm) {\n         for vi: @view_item  in nm.view_items { v.visit_view_item(vi, e, v); }\n         for ni: @native_item  in nm.items { v.visit_native_item(ni, e, v); }\n       }\n       item_ty(t, _) { v.visit_ty(t, e, v); }\n       item_res(f, dtor_id, tps, _) {\n-        v.visit_fn(f, tps, il_normal, i.span, some(i.ident), dtor_id, e, v);\n+        v.visit_fn(f, tps, i.span, some(i.ident), dtor_id, e, v);\n       }\n       item_tag(variants, _) {\n         for vr: variant  in variants {\n@@ -108,8 +104,8 @@ fn visit_item[E](i: &@item, e: &E, v: &vt[E]) {\n       item_obj(ob, _, _) {\n         for f: obj_field  in ob.fields { v.visit_ty(f.ty, e, v); }\n         for m: @method  in ob.methods {\n-            v.visit_fn(m.node.meth, ~[], il_normal, m.span,\n-                       some(m.node.ident), m.node.id, e, v);\n+            v.visit_fn(m.node.meth, ~[], m.span, some(m.node.ident),\n+                       m.node.id, e, v);\n         }\n       }\n     }\n@@ -199,8 +195,8 @@ fn visit_fn_decl[E](fd: &fn_decl, e: &E, v: &vt[E]) {\n     v.visit_ty(fd.output, e, v);\n }\n \n-fn visit_fn[E](f: &_fn, tp: &ty_param[], il: inlineness, sp: &span,\n-               i: &fn_ident, id: node_id, e: &E, v: &vt[E]) {\n+fn visit_fn[E](f: &_fn, tp: &ty_param[], sp: &span, i: &fn_ident, id: node_id,\n+               e: &E, v: &vt[E]) {\n     visit_fn_decl(f.decl, e, v);\n     v.visit_block(f.body, e, v);\n }\n@@ -294,9 +290,7 @@ fn visit_expr[E](ex: &@expr, e: &E, v: &vt[E]) {\n         v.visit_expr(x, e, v);\n         for a: arm  in arms { v.visit_arm(a, e, v); }\n       }\n-      expr_fn(f) {\n-        v.visit_fn(f, ~[], il_normal, ex.span, none, ex.id, e, v);\n-      }\n+      expr_fn(f) { v.visit_fn(f, ~[], ex.span, none, ex.id, e, v); }\n       expr_block(b) { v.visit_block(b, e, v); }\n       expr_assign(a, b) { v.visit_expr(b, e, v); v.visit_expr(a, e, v); }\n       expr_move(a, b) { v.visit_expr(b, e, v); v.visit_expr(a, e, v); }\n@@ -336,8 +330,8 @@ fn visit_expr[E](ex: &@expr, e: &E, v: &vt[E]) {\n           some(ex) { v.visit_expr(ex, e, v); }\n         }\n         for m: @method  in anon_obj.methods {\n-            v.visit_fn(m.node.meth, ~[], il_normal, m.span,\n-                       some(m.node.ident), m.node.id, e, v);\n+            v.visit_fn(m.node.meth, ~[], m.span, some(m.node.ident),\n+                       m.node.id, e, v);\n         }\n       }\n       expr_mac(mac) { visit_mac(mac, e, v); }\n@@ -368,8 +362,7 @@ type simple_visitor =\n       visit_expr: fn(&@expr) ,\n       visit_ty: fn(&@ty) ,\n       visit_constr: fn(&path, &span, node_id) ,\n-      visit_fn: fn(&_fn, &ty_param[], inlineness, &span, &fn_ident, node_id)\n-    };\n+      visit_fn: fn(&_fn, &ty_param[], &span, &fn_ident, node_id) };\n \n fn default_simple_visitor() -> simple_visitor {\n     ret @{visit_mod: fn (m: &_mod, sp: &span) { },\n@@ -386,8 +379,8 @@ fn default_simple_visitor() -> simple_visitor {\n           visit_ty: fn (t: &@ty) { },\n           visit_constr: fn (p: &path, sp: &span, id: node_id) { },\n           visit_fn:\n-              fn (f: &_fn, tps: &ty_param[], il: inlineness, sp: &span,\n-                  ident: &fn_ident, id: node_id) {\n+              fn (f: &_fn, tps: &ty_param[], sp: &span, ident: &fn_ident,\n+                  id: node_id) {\n               }};\n }\n \n@@ -446,11 +439,11 @@ fn mk_simple_visitor(v: &simple_visitor) -> vt[()] {\n         f(pt, sp, id);\n         visit_constr(pt, sp, id, e, v);\n     }\n-    fn v_fn(f: fn(&_fn, &ty_param[], inlineness, &span, &fn_ident, node_id),\n-            ff: &_fn, tps: &ty_param[], il: inlineness, sp: &span,\n-            ident: &fn_ident, id: node_id, e: &(), v: &vt[()]) {\n-        f(ff, tps, il, sp, ident, id);\n-        visit_fn(ff, tps, il, sp, ident, id, e, v);\n+    fn v_fn(f: fn(&_fn, &ty_param[], &span, &fn_ident, node_id) , ff: &_fn,\n+            tps: &ty_param[], sp: &span, ident: &fn_ident, id: node_id,\n+            e: &(), v: &vt[()]) {\n+        f(ff, tps, sp, ident, id);\n+        visit_fn(ff, tps, sp, ident, id, e, v);\n     }\n     ret mk_vt(@{visit_mod: bind v_mod(v.visit_mod, _, _, _, _),\n                 visit_view_item: bind v_view_item(v.visit_view_item, _, _, _),\n@@ -466,7 +459,7 @@ fn mk_simple_visitor(v: &simple_visitor) -> vt[()] {\n                 visit_expr: bind v_expr(v.visit_expr, _, _, _),\n                 visit_ty: bind v_ty(v.visit_ty, _, _, _),\n                 visit_constr: bind v_constr(v.visit_constr, _, _, _, _, _),\n-                visit_fn: bind v_fn(v.visit_fn, _, _, _, _, _, _, _, _)});\n+                visit_fn: bind v_fn(v.visit_fn, _, _, _, _, _, _, _)});\n }\n \n // Local Variables:"}]}