{"sha": "42510327061bd94110ddee6251107686d4ec30db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNTEwMzI3MDYxYmQ5NDExMGRkZWU2MjUxMTA3Njg2ZDRlYzMwZGI=", "commit": {"author": {"name": "Matthew Hammer", "email": "matthew.hammer@colorado.edu", "date": "2017-07-23T16:02:07Z"}, "committer": {"name": "Matthew Hammer", "email": "matthew.hammer@colorado.edu", "date": "2017-08-23T15:26:48Z"}, "message": "-Z profile-queries includes dep_graph.with_task uses in output", "tree": {"sha": "36c380454dde8d3dc03ba6029851ca586638cc6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36c380454dde8d3dc03ba6029851ca586638cc6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42510327061bd94110ddee6251107686d4ec30db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42510327061bd94110ddee6251107686d4ec30db", "html_url": "https://github.com/rust-lang/rust/commit/42510327061bd94110ddee6251107686d4ec30db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42510327061bd94110ddee6251107686d4ec30db/comments", "author": null, "committer": null, "parents": [{"sha": "3c24fea882b9152f8b84ac9d5fa63da8ae831ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c24fea882b9152f8b84ac9d5fa63da8ae831ade", "html_url": "https://github.com/rust-lang/rust/commit/3c24fea882b9152f8b84ac9d5fa63da8ae831ade"}], "stats": {"total": 112, "additions": 99, "deletions": 13}, "files": [{"sha": "a9701cbf23cf0290e85b990455f9fb7c4209d53b", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42510327061bd94110ddee6251107686d4ec30db/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42510327061bd94110ddee6251107686d4ec30db/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=42510327061bd94110ddee6251107686d4ec30db", "patch": "@@ -12,6 +12,7 @@ use rustc_data_structures::fx::FxHashMap;\n use session::config::OutputType;\n use std::cell::{Ref, RefCell};\n use std::rc::Rc;\n+use util::common::{ProfileQueriesMsg, profq_msg};\n \n use super::dep_node::{DepNode, DepKind, WorkProductId};\n use super::query::DepGraphQuery;\n@@ -118,7 +119,13 @@ impl DepGraph {\n     {\n         if let Some(ref data) = self.data {\n             data.edges.borrow_mut().push_task(key);\n+            if cfg!(debug_assertions) {\n+                profq_msg(ProfileQueriesMsg::TaskBegin(key.clone()))\n+            };\n             let result = task(cx, arg);\n+            if cfg!(debug_assertions) {\n+                profq_msg(ProfileQueriesMsg::TaskEnd)\n+            };\n             let dep_node_index = data.edges.borrow_mut().pop_task(key);\n             (result, dep_node_index)\n         } else {"}, {"sha": "618a4ed331e766056cf1a207a86cd5dca747902e", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42510327061bd94110ddee6251107686d4ec30db/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42510327061bd94110ddee6251107686d4ec30db/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=42510327061bd94110ddee6251107686d4ec30db", "patch": "@@ -22,6 +22,7 @@ use std::time::{Duration, Instant};\n use std::sync::mpsc::{Sender};\n use syntax_pos::{Span};\n use ty::maps::{QueryMsg};\n+use dep_graph::{DepNode};\n \n // The name of the associated type for `Fn` return types\n pub const FN_OUTPUT_NAME: &'static str = \"Output\";\n@@ -53,8 +54,12 @@ pub struct ProfQDumpParams {\n pub enum ProfileQueriesMsg {\n     /// begin a timed pass\n     TimeBegin(String),\n-    // end a timed pass\n+    /// end a timed pass\n     TimeEnd,\n+    /// begin a task (see dep_graph::graph::with_task)\n+    TaskBegin(DepNode),\n+    /// end a task\n+    TaskEnd,\n     /// begin a new query\n     QueryBegin(Span, QueryMsg),\n     /// query is satisfied by using an already-known value for the given key"}, {"sha": "f77748447fef93b20f8b0351485523127d8608c2", "filename": "src/librustc_driver/profile/mod.rs", "status": "modified", "additions": 53, "deletions": 12, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/42510327061bd94110ddee6251107686d4ec30db/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42510327061bd94110ddee6251107686d4ec30db/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Fmod.rs?ref=42510327061bd94110ddee6251107686d4ec30db", "patch": "@@ -12,6 +12,7 @@ use std::time::{Instant};\n use rustc::util::common::{ProfQDumpParams, ProfileQueriesMsg, profq_msg, profq_set_chan};\n use std::sync::mpsc::{Receiver};\n use std::io::{Write};\n+use rustc::dep_graph::{DepNode};\n \n pub mod trace;\n \n@@ -52,6 +53,8 @@ enum ParseState {\n     HaveQuery(trace::Query, Instant),\n     // Have \"time-begin\" information from the last message (doit flag, and message)\n     HaveTimeBegin(String, Instant),\n+    // Have \"task-begin\" information from the last message\n+    HaveTaskBegin(DepNode, Instant),\n }\n struct StackFrame {\n     pub parse_st: ParseState,\n@@ -170,7 +173,7 @@ fn profile_queries_thread(r:Receiver<ProfileQueriesMsg>) {\n                                 }\n                             }\n                         }\n-                   },\n+                    },\n \n \n                     (ParseState::Clear,\n@@ -212,19 +215,44 @@ fn profile_queries_thread(r:Receiver<ProfileQueriesMsg>) {\n                     },\n                     (_, ProfileQueriesMsg::TimeEnd) => { panic!(\"parse error\") }\n \n+                    (ParseState::Clear,\n+                     ProfileQueriesMsg::TaskBegin(key)) => {\n+                        let start = Instant::now();\n+                        frame.parse_st = ParseState::HaveTaskBegin(key, start);\n+                        stack.push(frame);\n+                        frame = StackFrame{parse_st:ParseState::Clear, traces:vec![]};\n+                    },\n+                    (_, ProfileQueriesMsg::TaskBegin(_)) =>\n+                        panic!(\"parse error; did not expect time begin here\"),\n \n-                    // Parse State: HaveTimeBegin -- for timing old\n-                    // passes in driver (outside of query model, but\n-                    // still in use)\n-                    (ParseState::HaveTimeBegin(_, _),\n-                     ProfileQueriesMsg::ProviderBegin) => {\n+                    (ParseState::Clear,\n+                     ProfileQueriesMsg::TaskEnd) => {\n+                        let provider_extent = frame.traces;\n+                        match stack.pop() {\n+                            None =>\n+                                panic!(\"parse error: expected a stack frame; found an empty stack\"),\n+                            Some(old_frame) => {\n+                                match old_frame.parse_st {\n+                                    ParseState::HaveTaskBegin(key, start) => {\n+                                        let duration = start.elapsed();\n+                                        frame = StackFrame{\n+                                            parse_st:ParseState::Clear,\n+                                            traces:old_frame.traces\n+                                        };\n+                                        let trace = Rec {\n+                                            effect: Effect::TaskBegin(key),\n+                                            extent: Box::new(provider_extent),\n+                                            start: start,\n+                                            duration: duration,\n+                                        };\n+                                        frame.traces.push( trace );\n+                                    },\n+                                    _ => panic!(\"internal parse error: malformed parse stack\")\n+                                }\n+                            }\n+                        }\n                     },\n-                    (ParseState::HaveTimeBegin(_, _),\n-                     ProfileQueriesMsg::CacheHit) => { unreachable!() },\n-                    (ParseState::HaveTimeBegin(_, _),\n-                     ProfileQueriesMsg::QueryBegin(_, _)) => { unreachable!() },\n-                    (ParseState::HaveTimeBegin(_, _),\n-                     ProfileQueriesMsg::ProviderEnd) => { unreachable!() },\n+                    (_, ProfileQueriesMsg::TaskEnd) => { panic!(\"parse error\") }\n \n                     // Parse State: HaveQuery\n                     (ParseState::HaveQuery(q,start),\n@@ -244,6 +272,11 @@ fn profile_queries_thread(r:Receiver<ProfileQueriesMsg>) {\n                         stack.push(frame);\n                         frame = StackFrame{parse_st:ParseState::Clear, traces:vec![]};\n                     },\n+\n+                    //\n+                    //\n+                    // Parse errors:\n+\n                     (ParseState::HaveQuery(q,_),\n                      ProfileQueriesMsg::ProviderEnd) => {\n                         panic!(\"parse error: unexpected ProviderEnd; \\\n@@ -255,7 +288,15 @@ fn profile_queries_thread(r:Receiver<ProfileQueriesMsg>) {\n                                 earlier query is unfinished: {:?} and now {:?}\",\n                                q1, Query{span:span2, msg:querymsg2})\n                     },\n+\n+                    (ParseState::HaveTimeBegin(_, _), _) => {\n+                        unreachable!()\n+                    },\n+                    (ParseState::HaveTaskBegin(_, _), _) => {\n+                        unreachable!()\n+                    },\n                 }\n+\n             }\n         }\n     }"}, {"sha": "22ca69fe3b4446e9f3b34b26dc828cdca2b40d20", "filename": "src/librustc_driver/profile/trace.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/42510327061bd94110ddee6251107686d4ec30db/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42510327061bd94110ddee6251107686d4ec30db/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs?ref=42510327061bd94110ddee6251107686d4ec30db", "patch": "@@ -14,6 +14,7 @@ use rustc::ty::maps::QueryMsg;\n use std::fs::File;\n use std::time::{Duration, Instant};\n use std::collections::hash_map::HashMap;\n+use rustc::dep_graph::{DepNode};\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Query {\n@@ -23,6 +24,7 @@ pub struct Query {\n pub enum Effect {\n     QueryBegin(Query, CacheCase),\n     TimeBegin(String),\n+    TaskBegin(DepNode),\n }\n pub enum CacheCase {\n     Hit, Miss\n@@ -46,13 +48,24 @@ pub fn cons_of_query_msg(q: &trace::Query) -> String {\n     cons[0].to_string()\n }\n \n+pub fn cons_of_key(k: &DepNode) -> String {\n+    let s = format!(\"{:?}\", k);\n+    let cons: Vec<&str> = s.split(|d| d == '(' || d == '{').collect();\n+    assert!(cons.len() > 0 && cons[0] != \"\");\n+    cons[0].to_string()\n+}\n+\n // First return value is text; second return value is a CSS class\n pub fn html_of_effect(eff: &Effect) -> (String, String) {\n     match *eff {\n         Effect::TimeBegin(ref msg) => {\n             (msg.clone(),\n              format!(\"time-begin\"))\n         },\n+        Effect::TaskBegin(ref key) => {\n+            let cons = cons_of_key(key);\n+            (cons.clone(), format!(\"{} task-begin\", cons))\n+        },\n         Effect::QueryBegin(ref qmsg, ref cc) => {\n             let cons = cons_of_query_msg(qmsg);\n             (cons.clone(),\n@@ -146,6 +159,20 @@ fn compute_counts_rec(counts: &mut HashMap<String,QueryMetric>, traces: &Vec<Rec\n                     }};\n                 counts.insert(msg.clone(), qm);\n             },\n+            Effect::TaskBegin(ref key) => {\n+                let cons = cons_of_key(key);\n+                let qm = match counts.get(&cons) {\n+                    Some(qm) =>\n+                        QueryMetric{\n+                            count: qm.count + 1,\n+                            duration: qm.duration + t.duration\n+                        },\n+                    None => QueryMetric{\n+                        count: 1,\n+                        duration: t.duration\n+                    }};\n+                counts.insert(cons, qm);\n+            },\n             Effect::QueryBegin(ref qmsg, ref _cc) => {\n                 let qcons = cons_of_query_msg(qmsg);\n                 let qm = match counts.get(&qcons) {\n@@ -209,6 +236,12 @@ body {\n     margin: 1px;\n     font-size: 0px;\n }\n+.task-begin {\n+    border-width: 1px;\n+    color: white;\n+    border-color: #ff8;\n+    font-size: 0px;\n+}\n .miss {\n     border-color: red;\n     border-width: 1px;"}]}