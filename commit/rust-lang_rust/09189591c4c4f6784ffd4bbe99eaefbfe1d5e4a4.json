{"sha": "09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MTg5NTkxYzRjNGY2Nzg0ZmZkNGJiZTk5ZWFlZmJmZTFkNWU0YTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-20T21:38:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-20T21:38:19Z"}, "message": "Auto merge of #60986 - Centril:rollup-nhpgrfb, r=Centril\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #60383 (Fix position source code files toggle)\n - #60453 (Fall back to `/dev/urandom` on `EPERM` for `getrandom`)\n - #60487 (Fix search sidebar width when no crate select is present)\n - #60511 (Fix intra-doc link resolution failure on re-exporting libstd)\n - #60823 (Fix incremental compilation of cdylib emitting spurious unused_attributes lint)\n - #60915 (stable hashing: Remove unused field and add documentation.)\n - #60942 (Misc changes to rustc_metadata)\n - #60952 (Document BinaryHeap time complexity)\n - #60959 (rustc: Improve type size assertions)\n - #60972 (remove confusing remarks about mixed volatile and non-volatile accesses)\n - #60983 (Set -funwind-tables and -fno-exceptions unconditionally for LLVM's libunwind)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "e2b332a585664a9225c26a37f9848501c9a7e8c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2b332a585664a9225c26a37f9848501c9a7e8c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "html_url": "https://github.com/rust-lang/rust/commit/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d35181ad8785fa958e43580a29a982afe02c728f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d35181ad8785fa958e43580a29a982afe02c728f", "html_url": "https://github.com/rust-lang/rust/commit/d35181ad8785fa958e43580a29a982afe02c728f"}, {"sha": "0c97800f93e13b5339773158502257b556db8392", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c97800f93e13b5339773158502257b556db8392", "html_url": "https://github.com/rust-lang/rust/commit/0c97800f93e13b5339773158502257b556db8392"}], "stats": {"total": 728, "additions": 441, "deletions": 287}, "files": [{"sha": "41ff06d70ff09eb7897af0f71c5385e42807483d", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -37,6 +37,8 @@ extern \"Rust\" {\n ///\n /// Note: while this type is unstable, the functionality it provides can be\n /// accessed through the [free functions in `alloc`](index.html#functions).\n+///\n+/// [`Alloc`]: trait.Alloc.html\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n #[derive(Copy, Clone, Default, Debug)]\n pub struct Global;\n@@ -54,6 +56,10 @@ pub struct Global;\n ///\n /// See [`GlobalAlloc::alloc`].\n ///\n+/// [`Global`]: struct.Global.html\n+/// [`Alloc`]: trait.Alloc.html\n+/// [`GlobalAlloc::alloc`]: trait.GlobalAlloc.html#tymethod.alloc\n+///\n /// # Examples\n ///\n /// ```\n@@ -87,6 +93,10 @@ pub unsafe fn alloc(layout: Layout) -> *mut u8 {\n /// # Safety\n ///\n /// See [`GlobalAlloc::dealloc`].\n+///\n+/// [`Global`]: struct.Global.html\n+/// [`Alloc`]: trait.Alloc.html\n+/// [`GlobalAlloc::dealloc`]: trait.GlobalAlloc.html#tymethod.dealloc\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n #[inline]\n pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {\n@@ -105,6 +115,10 @@ pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {\n /// # Safety\n ///\n /// See [`GlobalAlloc::realloc`].\n+///\n+/// [`Global`]: struct.Global.html\n+/// [`Alloc`]: trait.Alloc.html\n+/// [`GlobalAlloc::realloc`]: trait.GlobalAlloc.html#method.realloc\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n #[inline]\n pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n@@ -124,6 +138,10 @@ pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8\n ///\n /// See [`GlobalAlloc::alloc_zeroed`].\n ///\n+/// [`Global`]: struct.Global.html\n+/// [`Alloc`]: trait.Alloc.html\n+/// [`GlobalAlloc::alloc_zeroed`]: trait.GlobalAlloc.html#method.alloc_zeroed\n+///\n /// # Examples\n ///\n /// ```"}, {"sha": "c5a0b6e877b65f124f61e925ab8989c5e02547e1", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -231,6 +231,20 @@ use super::SpecExtend;\n /// assert_eq!(heap.pop(), Some(Reverse(5)));\n /// assert_eq!(heap.pop(), None);\n /// ```\n+///\n+/// # Time complexity\n+///\n+/// | [push] | [pop]    | [peek]/[peek\\_mut] |\n+/// |--------|----------|--------------------|\n+/// | O(1)~  | O(log n) | O(1)               |\n+///\n+/// The value for `push` is an expected cost; the method documentation gives a\n+/// more detailed analysis.\n+///\n+/// [push]: #method.push\n+/// [pop]: #method.pop\n+/// [peek]: #method.peek\n+/// [peek\\_mut]: #method.peek_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BinaryHeap<T> {\n     data: Vec<T>,\n@@ -384,6 +398,10 @@ impl<T: Ord> BinaryHeap<T> {\n     /// }\n     /// assert_eq!(heap.peek(), Some(&2));\n     /// ```\n+    ///\n+    /// # Time complexity\n+    ///\n+    /// Cost is O(1) in the worst case.\n     #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n     pub fn peek_mut(&mut self) -> Option<PeekMut<'_, T>> {\n         if self.is_empty() {\n@@ -411,6 +429,11 @@ impl<T: Ord> BinaryHeap<T> {\n     /// assert_eq!(heap.pop(), Some(1));\n     /// assert_eq!(heap.pop(), None);\n     /// ```\n+    ///\n+    /// # Time complexity\n+    ///\n+    /// The worst case cost of `pop` on a heap containing *n* elements is O(log\n+    /// n).\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn pop(&mut self) -> Option<T> {\n         self.data.pop().map(|mut item| {\n@@ -438,6 +461,22 @@ impl<T: Ord> BinaryHeap<T> {\n     /// assert_eq!(heap.len(), 3);\n     /// assert_eq!(heap.peek(), Some(&5));\n     /// ```\n+    ///\n+    /// # Time complexity\n+    ///\n+    /// The expected cost of `push`, averaged over every possible ordering of\n+    /// the elements being pushed, and over a sufficiently large number of\n+    /// pushes, is O(1). This is the most meaningful cost metric when pushing\n+    /// elements that are *not* already in any sorted pattern.\n+    ///\n+    /// The time complexity degrades if elements are pushed in predominantly\n+    /// ascending order. In the worst case, elements are pushed in ascending\n+    /// sorted order and the amortized cost per push is O(log n) against a heap\n+    /// containing *n* elements.\n+    ///\n+    /// The worst case cost of a *single* call to `push` is O(n). The worst case\n+    /// occurs when capacity is exhausted and needs a resize. The resize cost\n+    /// has been amortized in the previous figures.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push(&mut self, item: T) {\n         let old_len = self.len();\n@@ -650,6 +689,10 @@ impl<T> BinaryHeap<T> {\n     /// assert_eq!(heap.peek(), Some(&5));\n     ///\n     /// ```\n+    ///\n+    /// # Time complexity\n+    ///\n+    /// Cost is O(1) in the worst case.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn peek(&self) -> Option<&T> {\n         self.data.get(0)"}, {"sha": "006b1e143eeec54772b4f7d06c385ad3b6c53c3f", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -810,9 +810,6 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n /// to not be elided or reordered by the compiler across other volatile\n /// operations.\n ///\n-/// Memory accessed with `read_volatile` or [`write_volatile`] should not be\n-/// accessed with non-volatile operations.\n-///\n /// [`write_volatile`]: ./fn.write_volatile.html\n ///\n /// # Notes\n@@ -881,9 +878,6 @@ pub unsafe fn read_volatile<T>(src: *const T) -> T {\n /// to not be elided or reordered by the compiler across other volatile\n /// operations.\n ///\n-/// Memory accessed with [`read_volatile`] or `write_volatile` should not be\n-/// accessed with non-volatile operations.\n-///\n /// `write_volatile` does not drop the contents of `dst`. This is safe, but it\n /// could leak allocations or resources, so care should be taken not to overwrite\n /// an object that should be dropped."}, {"sha": "a6d611d2e93c4b83847a9791a39a28bb1a270e14", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -10,6 +10,8 @@ use crate::marker::{PhantomData, Unpin};\n ///\n /// It consists of a data pointer and a [virtual function pointer table (vtable)][vtable] that\n /// customizes the behavior of the `RawWaker`.\n+///\n+/// [`Waker`]: struct.Waker.html\n #[derive(PartialEq, Debug)]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub struct RawWaker {\n@@ -55,6 +57,8 @@ impl RawWaker {\n /// pointer of a properly constructed [`RawWaker`] object from inside the\n /// [`RawWaker`] implementation. Calling one of the contained functions using\n /// any other `data` pointer will cause undefined behavior.\n+///\n+/// [`RawWaker`]: struct.RawWaker.html\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n #[derive(PartialEq, Copy, Clone, Debug)]\n pub struct RawWakerVTable {\n@@ -65,6 +69,9 @@ pub struct RawWakerVTable {\n     /// required for this additional instance of a [`RawWaker`] and associated\n     /// task. Calling `wake` on the resulting [`RawWaker`] should result in a wakeup\n     /// of the same task that would have been awoken by the original [`RawWaker`].\n+    ///\n+    /// [`Waker`]: struct.Waker.html\n+    /// [`RawWaker`]: struct.RawWaker.html\n     clone: unsafe fn(*const ()) -> RawWaker,\n \n     /// This function will be called when `wake` is called on the [`Waker`].\n@@ -73,20 +80,28 @@ pub struct RawWakerVTable {\n     /// The implementation of this function must make sure to release any\n     /// resources that are associated with this instance of a [`RawWaker`] and\n     /// associated task.\n+    ///\n+    /// [`Waker`]: struct.Waker.html\n+    /// [`RawWaker`]: struct.RawWaker.html\n     wake: unsafe fn(*const ()),\n \n     /// This function will be called when `wake_by_ref` is called on the [`Waker`].\n     /// It must wake up the task associated with this [`RawWaker`].\n     ///\n     /// This function is similar to `wake`, but must not consume the provided data\n     /// pointer.\n+    ///\n+    /// [`Waker`]: struct.Waker.html\n+    /// [`RawWaker`]: struct.RawWaker.html\n     wake_by_ref: unsafe fn(*const ()),\n \n     /// This function gets called when a [`RawWaker`] gets dropped.\n     ///\n     /// The implementation of this function must make sure to release any\n     /// resources that are associated with this instance of a [`RawWaker`] and\n     /// associated task.\n+    ///\n+    /// [`RawWaker`]: struct.RawWaker.html\n     drop: unsafe fn(*const ()),\n }\n \n@@ -128,6 +143,9 @@ impl RawWakerVTable {\n     /// The implementation of this function must make sure to release any\n     /// resources that are associated with this instance of a [`RawWaker`] and\n     /// associated task.\n+    ///\n+    /// [`Waker`]: struct.Waker.html\n+    /// [`RawWaker`]: struct.RawWaker.html\n     #[rustc_promotable]\n     #[cfg_attr(stage0, unstable(feature = \"futures_api_const_fn_ptr\", issue = \"50547\"))]\n     #[cfg_attr(not(stage0), stable(feature = \"futures_api\", since = \"1.36.0\"))]\n@@ -201,6 +219,8 @@ impl fmt::Debug for Context<'_> {\n /// executor-specific wakeup behavior.\n ///\n /// Implements [`Clone`], [`Send`], and [`Sync`].\n+///\n+/// [`RawWaker`]: struct.RawWaker.html\n #[repr(transparent)]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub struct Waker {\n@@ -266,6 +286,9 @@ impl Waker {\n     /// The behavior of the returned `Waker` is undefined if the contract defined\n     /// in [`RawWaker`]'s and [`RawWakerVTable`]'s documentation is not upheld.\n     /// Therefore this method is unsafe.\n+    ///\n+    /// [`RawWaker`]: struct.RawWaker.html\n+    /// [`RawWakerVTable`]: struct.RawWakerVTable.html\n     #[inline]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub unsafe fn from_raw(waker: RawWaker) -> Waker {"}, {"sha": "57304c5ed37aec722b0f860cab48ff126235fb2f", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -1356,7 +1356,7 @@ pub struct Expr {\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_EXPR: std::mem::size_of::<Expr>() == 72);\n+static_assert_size!(Expr, 72);\n \n impl Expr {\n     pub fn precedence(&self) -> ExprPrecedence {"}, {"sha": "37681ad7fcdd2bc51708264a8246e7a8a3ede9f0", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -158,7 +158,7 @@ newtype_index! {\n impl_stable_hash_for!(struct crate::middle::region::FirstStatementIndex { private });\n \n // compilation error if size of `ScopeData` is not the same as a `u32`\n-static_assert!(ASSERT_SCOPE_DATA: mem::size_of::<ScopeData>() == 4);\n+static_assert_size!(ScopeData, 4);\n \n impl Scope {\n     /// Returns a item-local ID associated with this scope."}, {"sha": "59b7891b90fde918284e32a82dfdf68ffa0aeeec", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -78,7 +78,7 @@ pub struct Pointer<Tag=(),Id=AllocId> {\n     pub tag: Tag,\n }\n \n-static_assert!(POINTER_SIZE: ::std::mem::size_of::<Pointer>() == 16);\n+static_assert_size!(Pointer, 16);\n \n /// Produces a `Pointer` which points to the beginning of the Allocation\n impl From<AllocId> for Pointer {"}, {"sha": "551b86390db4c43d1e0a3253cf2a16c11776c2ae", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -54,7 +54,7 @@ pub enum ConstValue<'tcx> {\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(CONST_SIZE: ::std::mem::size_of::<ConstValue<'static>>() == 40);\n+static_assert_size!(ConstValue<'_>, 40);\n \n impl<'tcx> ConstValue<'tcx> {\n     #[inline]\n@@ -111,7 +111,7 @@ pub enum Scalar<Tag=(), Id=AllocId> {\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(SCALAR_SIZE: ::std::mem::size_of::<Scalar>() == 24);\n+static_assert_size!(Scalar, 24);\n \n impl<Tag> fmt::Display for Scalar<Tag> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "dd43cb2f18ece8d3c09ec480dc786b12f97c2295", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -1738,7 +1738,7 @@ pub struct Statement<'tcx> {\n \n // `Statement` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_STATEMENT: mem::size_of::<Statement<'_>>() == 56);\n+static_assert_size!(Statement<'_>, 56);\n \n impl<'tcx> Statement<'tcx> {\n     /// Changes a statement to a nop. This is both faster than deleting instructions and avoids\n@@ -1997,10 +1997,9 @@ pub type PlaceProjection<'tcx> = Projection<Place<'tcx>, Local, Ty<'tcx>>;\n /// and the index is a local.\n pub type PlaceElem<'tcx> = ProjectionElem<Local, Ty<'tcx>>;\n \n-// at least on 64 bit systems, `PlaceElem` should not be larger than two pointers\n-static_assert!(PROJECTION_ELEM_IS_2_PTRS_LARGE:\n-    mem::size_of::<PlaceElem<'_>>() <= 16\n-);\n+// At least on 64 bit systems, `PlaceElem` should not be larger than two pointers.\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(PlaceElem<'_>, 16);\n \n /// Alias for projections as they appear in `UserTypeProjection`, where we\n /// need neither the `V` parameter for `Index` nor the `T` for `Field`."}, {"sha": "5135aeb2392cd85e054023c22c1cf6077a004bac", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -17,9 +17,9 @@ pub struct PlaceTy<'tcx> {\n     pub variant_index: Option<VariantIdx>,\n }\n \n-static_assert!(PLACE_TY_IS_3_PTRS_LARGE:\n-    mem::size_of::<PlaceTy<'_>>() <= 24\n-);\n+// At least on 64 bit systems, `PlaceTy` should not be larger than two or three pointers.\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(PlaceTy<'_>, 16);\n \n impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n     pub fn from_ty(ty: Ty<'tcx>) -> PlaceTy<'tcx> {"}, {"sha": "91e996178e7d54904cbdde900e8524bf60d1f5da", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -510,7 +510,7 @@ pub struct TyS<'tcx> {\n \n // `TyS` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_TY_S: ::std::mem::size_of::<TyS<'_>>() == 32);\n+static_assert_size!(TyS<'_>, 32);\n \n impl<'tcx> Ord for TyS<'tcx> {\n     fn cmp(&self, other: &TyS<'tcx>) -> Ordering {"}, {"sha": "e8f3bad4d3ee32832666fd66f72f4cc502707da8", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -211,7 +211,7 @@ pub enum TyKind<'tcx> {\n \n // `TyKind` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_TY_KIND: ::std::mem::size_of::<TyKind<'_>>() == 24);\n+static_assert_size!(TyKind<'_>, 24);\n \n /// A closure can be modeled as a struct that looks like:\n ///\n@@ -2207,7 +2207,7 @@ pub struct Const<'tcx> {\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(CONST_SIZE: ::std::mem::size_of::<Const<'static>>() == 48);\n+static_assert_size!(Const<'_>, 48);\n \n impl<'tcx> Const<'tcx> {\n     #[inline]"}, {"sha": "7fc23999284a71681dc53506aba56a12bc42f526", "filename": "src/librustc_data_structures/macros.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc_data_structures%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc_data_structures%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fmacros.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -10,3 +10,12 @@ macro_rules! static_assert {\n         static $name: () = [()][!($test: bool) as usize];\n     }\n }\n+\n+/// Type size assertion. The first argument is a type and the second argument is its expected size.\n+#[macro_export]\n+#[allow_internal_unstable(underscore_const_names)]\n+macro_rules! static_assert_size {\n+    ($ty:ty, $size:expr) => {\n+        const _: [(); $size] = [(); ::std::mem::size_of::<$ty>()];\n+    }\n+}"}, {"sha": "2b844aa24d49c92a6d5bdbd165762f5a00908b31", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -15,7 +15,6 @@ use crate::bit_set;\n /// extended to 64 bits if needed.\n pub struct StableHasher<W> {\n     state: SipHasher128,\n-    bytes_hashed: u64,\n     width: PhantomData<W>,\n }\n \n@@ -33,7 +32,6 @@ impl<W: StableHasherResult> StableHasher<W> {\n     pub fn new() -> Self {\n         StableHasher {\n             state: SipHasher128::new_with_keys(0, 0),\n-            bytes_hashed: 0,\n             width: PhantomData,\n         }\n     }\n@@ -61,11 +59,6 @@ impl<W> StableHasher<W> {\n     pub fn finalize(self) -> (u64, u64) {\n         self.state.finish128()\n     }\n-\n-    #[inline]\n-    pub fn bytes_hashed(&self) -> u64 {\n-        self.bytes_hashed\n-    }\n }\n \n impl<W> Hasher for StableHasher<W> {\n@@ -76,37 +69,31 @@ impl<W> Hasher for StableHasher<W> {\n     #[inline]\n     fn write(&mut self, bytes: &[u8]) {\n         self.state.write(bytes);\n-        self.bytes_hashed += bytes.len() as u64;\n     }\n \n     #[inline]\n     fn write_u8(&mut self, i: u8) {\n         self.state.write_u8(i);\n-        self.bytes_hashed += 1;\n     }\n \n     #[inline]\n     fn write_u16(&mut self, i: u16) {\n         self.state.write_u16(i.to_le());\n-        self.bytes_hashed += 2;\n     }\n \n     #[inline]\n     fn write_u32(&mut self, i: u32) {\n         self.state.write_u32(i.to_le());\n-        self.bytes_hashed += 4;\n     }\n \n     #[inline]\n     fn write_u64(&mut self, i: u64) {\n         self.state.write_u64(i.to_le());\n-        self.bytes_hashed += 8;\n     }\n \n     #[inline]\n     fn write_u128(&mut self, i: u128) {\n         self.state.write_u128(i.to_le());\n-        self.bytes_hashed += 16;\n     }\n \n     #[inline]\n@@ -115,37 +102,31 @@ impl<W> Hasher for StableHasher<W> {\n         // platforms. This is important for symbol hashes when cross compiling,\n         // for example.\n         self.state.write_u64((i as u64).to_le());\n-        self.bytes_hashed += 8;\n     }\n \n     #[inline]\n     fn write_i8(&mut self, i: i8) {\n         self.state.write_i8(i);\n-        self.bytes_hashed += 1;\n     }\n \n     #[inline]\n     fn write_i16(&mut self, i: i16) {\n         self.state.write_i16(i.to_le());\n-        self.bytes_hashed += 2;\n     }\n \n     #[inline]\n     fn write_i32(&mut self, i: i32) {\n         self.state.write_i32(i.to_le());\n-        self.bytes_hashed += 4;\n     }\n \n     #[inline]\n     fn write_i64(&mut self, i: i64) {\n         self.state.write_i64(i.to_le());\n-        self.bytes_hashed += 8;\n     }\n \n     #[inline]\n     fn write_i128(&mut self, i: i128) {\n         self.state.write_i128(i.to_le());\n-        self.bytes_hashed += 16;\n     }\n \n     #[inline]\n@@ -154,12 +135,35 @@ impl<W> Hasher for StableHasher<W> {\n         // platforms. This is important for symbol hashes when cross compiling,\n         // for example.\n         self.state.write_i64((i as i64).to_le());\n-        self.bytes_hashed += 8;\n     }\n }\n \n /// Something that implements `HashStable<CTX>` can be hashed in a way that is\n /// stable across multiple compilation sessions.\n+///\n+/// Note that `HashStable` imposes rather more strict requirements than usual\n+/// hash functions:\n+///\n+/// - Stable hashes are sometimes used as identifiers. Therefore they must\n+///   conform to the corresponding `PartialEq` implementations:\n+///\n+///     - `x == y` implies `hash_stable(x) == hash_stable(y)`, and\n+///     - `x != y` implies `hash_stable(x) != hash_stable(y)`.\n+///\n+///   That second condition is usually not required for hash functions\n+///   (e.g. `Hash`). In practice this means that `hash_stable` must feed any\n+///   information into the hasher that a `PartialEq` comparision takes into\n+///   account. See [#49300](https://github.com/rust-lang/rust/issues/49300)\n+///   for an example where violating this invariant has caused trouble in the\n+///   past.\n+///\n+/// - `hash_stable()` must be independent of the current\n+///    compilation session. E.g. they must not hash memory addresses or other\n+///    things that are \"randomly\" assigned per compilation session.\n+///\n+/// - `hash_stable()` must be independent of the host architecture. The\n+///   `StableHasher` takes care of endianness and `isize`/`usize` platform\n+///   differences.\n pub trait HashStable<CTX> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut CTX,"}, {"sha": "3e00ba3c62004bf435cea8598604e15a7a274b55", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -95,7 +95,7 @@ enum LoadError<'a> {\n impl<'a> LoadError<'a> {\n     fn report(self) -> ! {\n         match self {\n-            LoadError::LocatorError(mut locate_ctxt) => locate_ctxt.report_errs(),\n+            LoadError::LocatorError(locate_ctxt) => locate_ctxt.report_errs(),\n         }\n     }\n }\n@@ -365,8 +365,8 @@ impl<'a> CrateLoader<'a> {\n                 span,\n                 ident,\n                 crate_name: name,\n-                hash: hash.map(|a| &*a),\n-                extra_filename: extra_filename,\n+                hash,\n+                extra_filename,\n                 filesearch: self.sess.target_filesearch(path_kind),\n                 target: &self.sess.target.target,\n                 triple: self.sess.opts.target_triple.clone(),"}, {"sha": "3832c8ee227de1208bab95dd5bf864d93ccc964f", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -321,7 +321,7 @@ impl<'a> Context<'a> {\n         }\n     }\n \n-    pub fn report_errs(&mut self) -> ! {\n+    pub fn report_errs(self) -> ! {\n         let add = match self.root {\n             &None => String::new(),\n             &Some(ref r) => format!(\" which `{}` depends on\", r.ident),\n@@ -901,8 +901,7 @@ fn get_metadata_section_imp(target: &Target,\n             let mut inflated = Vec::new();\n             match DeflateDecoder::new(compressed_bytes).read_to_end(&mut inflated) {\n                 Ok(_) => {\n-                    let buf = unsafe { OwningRef::new_assert_stable_address(inflated) };\n-                    rustc_erase_owner!(buf.map_owner_box())\n+                    rustc_erase_owner!(OwningRef::new(inflated).map_owner_box())\n                 }\n                 Err(_) => {\n                     return Err(format!(\"failed to decompress metadata: {}\", filename.display()));"}, {"sha": "0493bf7c5c0f51c9045f89337db911f0c1a2d0a6", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 216, "deletions": 209, "changes": 425, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -671,18 +671,18 @@ a {\n \ttransition: border-color 300ms ease;\n \ttransition: border-radius 300ms ease-in-out;\n \ttransition: box-shadow 300ms ease-in-out;\n-\twidth: calc(100% - 32px);\n+\twidth: 100%;\n }\n \n #crate-search + .search-input {\n \tborder-radius: 0 1px 1px 0;\n+\twidth: calc(100% - 32px);\n }\n \n .search-input:focus {\n \tborder-radius: 2px;\n \tborder: 0;\n \toutline: 0;\n-\tbox-shadow: 0 0 8px #078dd8;\n }\n \n .search-results .desc {\n@@ -1011,6 +1011,195 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \topacity: 1;\n }\n \n+.information {\n+\tposition: absolute;\n+\tleft: -20px;\n+\tmargin-top: 7px;\n+\tz-index: 1;\n+}\n+\n+.tooltip {\n+\tposition: relative;\n+\tdisplay: inline-block;\n+\tcursor: pointer;\n+}\n+\n+.tooltip .tooltiptext {\n+\twidth: 120px;\n+\tdisplay: none;\n+\ttext-align: center;\n+\tpadding: 5px 3px;\n+\tborder-radius: 6px;\n+\tmargin-left: 5px;\n+\ttop: -5px;\n+\tleft: 105%;\n+\tz-index: 10;\n+}\n+\n+.tooltip:hover .tooltiptext {\n+\tdisplay: inline;\n+}\n+\n+.tooltip .tooltiptext::after {\n+\tcontent: \" \";\n+\tposition: absolute;\n+\ttop: 50%;\n+\tleft: 11px;\n+\tmargin-top: -5px;\n+\tborder-width: 5px;\n+\tborder-style: solid;\n+}\n+\n+.important-traits .tooltip .tooltiptext {\n+\tborder: 1px solid;\n+}\n+\n+pre.rust {\n+\tposition: relative;\n+\ttab-width: 4;\n+\t-moz-tab-width: 4;\n+}\n+\n+.search-failed {\n+\ttext-align: center;\n+\tmargin-top: 20px;\n+}\n+\n+.search-failed > ul {\n+\ttext-align: left;\n+\tmax-width: 570px;\n+\tmargin-left: auto;\n+\tmargin-right: auto;\n+}\n+\n+#titles {\n+\theight: 35px;\n+}\n+\n+#titles > div {\n+\tfloat: left;\n+\twidth: 33.3%;\n+\ttext-align: center;\n+\tfont-size: 18px;\n+\tcursor: pointer;\n+\tborder-top: 2px solid;\n+}\n+\n+#titles > div:not(:last-child) {\n+\tmargin-right: 1px;\n+\twidth: calc(33.3% - 1px);\n+}\n+\n+#titles > div > div.count {\n+\tdisplay: inline-block;\n+\tfont-size: 16px;\n+}\n+\n+.important-traits {\n+\tcursor: pointer;\n+\tz-index: 2;\n+}\n+\n+h4 > .important-traits {\n+\tposition: absolute;\n+\tleft: -44px;\n+\ttop: 2px;\n+}\n+\n+#all-types {\n+\ttext-align: center;\n+\tborder: 1px solid;\n+\tmargin: 0 10px;\n+\tmargin-bottom: 10px;\n+\tdisplay: block;\n+\tborder-radius: 7px;\n+}\n+#all-types > p {\n+\tmargin: 5px 0;\n+}\n+\n+#sidebar-toggle {\n+\tposition: fixed;\n+\ttop: 30px;\n+\tleft: 300px;\n+\tz-index: 10;\n+\tpadding: 3px;\n+\tborder-top-right-radius: 3px;\n+\tborder-bottom-right-radius: 3px;\n+\tcursor: pointer;\n+\tfont-weight: bold;\n+\ttransition: left .5s;\n+\tfont-size: 1.2em;\n+\tborder: 1px solid;\n+\tborder-left: 0;\n+}\n+#source-sidebar {\n+\tposition: fixed;\n+\ttop: 0;\n+\tbottom: 0;\n+\tleft: 0;\n+\twidth: 300px;\n+\tz-index: 1;\n+\toverflow: auto;\n+\ttransition: left .5s;\n+\tborder-right: 1px solid;\n+}\n+#source-sidebar > .title {\n+\tfont-size: 1.5em;\n+\ttext-align: center;\n+\tborder-bottom: 1px solid;\n+\tmargin-bottom: 6px;\n+}\n+\n+.theme-picker {\n+\tposition: absolute;\n+\tleft: 211px;\n+\ttop: 19px;\n+}\n+\n+.theme-picker button {\n+\toutline: none;\n+}\n+\n+#settings-menu {\n+\tposition: absolute;\n+\tright: 0;\n+\ttop: 10px;\n+\toutline: none;\n+}\n+\n+#theme-picker, #settings-menu {\n+\tpadding: 4px;\n+\twidth: 27px;\n+\theight: 29px;\n+\tborder: 1px solid;\n+\tborder-radius: 3px;\n+\tcursor: pointer;\n+}\n+\n+#theme-choices {\n+\tdisplay: none;\n+\tposition: absolute;\n+\tleft: 0;\n+\ttop: 28px;\n+\tborder: 1px solid;\n+\tborder-radius: 3px;\n+\tz-index: 1;\n+\tcursor: pointer;\n+}\n+\n+#theme-choices > button {\n+\tborder: none;\n+\twidth: 100%;\n+\tpadding: 4px;\n+\ttext-align: center;\n+\tbackground: rgba(0,0,0,0);\n+}\n+\n+#theme-choices > button:not(:first-child) {\n+\tborder-top: 1px solid;\n+}\n+\n /* Media Queries */\n \n @media (max-width: 700px) {\n@@ -1137,125 +1326,12 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \t\toverflow: initial;\n \t}\n \n-\t#main > .line-numbers {\n-\t\tmargin-top: 0;\n-\t}\n-}\n-\n-@media print {\n-\tnav.sub, .content .out-of-band, .collapse-toggle {\n-\t\tdisplay: none;\n+\t.theme-picker {\n+\t\tleft: 10px;\n+\t\ttop: 54px;\n+\t\tz-index: 1;\n \t}\n-}\n \n-.information {\n-\tposition: absolute;\n-\tleft: -20px;\n-\tmargin-top: 7px;\n-\tz-index: 1;\n-}\n-\n-.tooltip {\n-\tposition: relative;\n-\tdisplay: inline-block;\n-\tcursor: pointer;\n-}\n-\n-.tooltip .tooltiptext {\n-\twidth: 120px;\n-\tdisplay: none;\n-\ttext-align: center;\n-\tpadding: 5px 3px;\n-\tborder-radius: 6px;\n-\tmargin-left: 5px;\n-\ttop: -5px;\n-\tleft: 105%;\n-\tz-index: 10;\n-}\n-\n-.tooltip:hover .tooltiptext {\n-\tdisplay: inline;\n-}\n-\n-.tooltip .tooltiptext::after {\n-\tcontent: \" \";\n-\tposition: absolute;\n-\ttop: 50%;\n-\tleft: 11px;\n-\tmargin-top: -5px;\n-\tborder-width: 5px;\n-\tborder-style: solid;\n-}\n-\n-.important-traits .tooltip .tooltiptext {\n-\tborder: 1px solid;\n-}\n-\n-pre.rust {\n-\tposition: relative;\n-\ttab-width: 4;\n-\t-moz-tab-width: 4;\n-}\n-\n-.search-failed {\n-\ttext-align: center;\n-\tmargin-top: 20px;\n-}\n-\n-.search-failed > ul {\n-\ttext-align: left;\n-\tmax-width: 570px;\n-\tmargin-left: auto;\n-\tmargin-right: auto;\n-}\n-\n-#titles {\n-\theight: 35px;\n-}\n-\n-#titles > div {\n-\tfloat: left;\n-\twidth: 33.3%;\n-\ttext-align: center;\n-\tfont-size: 18px;\n-\tcursor: pointer;\n-\tborder-top: 2px solid;\n-}\n-\n-#titles > div:not(:last-child) {\n-\tmargin-right: 1px;\n-\twidth: calc(33.3% - 1px);\n-}\n-\n-#titles > div > div.count {\n-\tdisplay: inline-block;\n-\tfont-size: 16px;\n-}\n-\n-.important-traits {\n-\tcursor: pointer;\n-\tz-index: 2;\n-}\n-\n-h4 > .important-traits {\n-\tposition: absolute;\n-\tleft: -44px;\n-\ttop: 2px;\n-}\n-\n-#all-types {\n-\ttext-align: center;\n-\tborder: 1px solid;\n-\tmargin: 0 10px;\n-\tmargin-bottom: 10px;\n-\tdisplay: block;\n-\tborder-radius: 7px;\n-}\n-#all-types > p {\n-\tmargin: 5px 0;\n-}\n-\n-@media (max-width: 700px) {\n \th4 > .important-traits {\n \t\tposition: absolute;\n \t\tleft: -22px;\n@@ -1330,8 +1406,29 @@ h4 > .important-traits {\n \t#all-types {\n \t\tmargin: 10px;\n \t}\n+\n+\t#sidebar-toggle {\n+\t\ttop: 100px;\n+\t\twidth: 30px;\n+\t\tfont-size: 1.5rem;\n+\t\ttext-align: center;\n+\t\tpadding: 0;\n+\t}\n+\n+\t#source-sidebar {\n+\t\tz-index: 11;\n+\t}\n+\n+\t#main > .line-numbers {\n+\t\tmargin-top: 0;\n+\t}\n }\n \n+@media print {\n+\tnav.sub, .content .out-of-band, .collapse-toggle {\n+\t\tdisplay: none;\n+\t}\n+}\n \n @media (max-width: 416px) {\n \t#titles {\n@@ -1431,63 +1528,6 @@ kbd {\n \tcursor: default;\n }\n \n-.theme-picker {\n-\tposition: absolute;\n-\tleft: 211px;\n-\ttop: 19px;\n-}\n-\n-.theme-picker button {\n-\toutline: none;\n-}\n-\n-#settings-menu {\n-\tposition: absolute;\n-\tright: 0;\n-\ttop: 10px;\n-\toutline: none;\n-}\n-\n-#theme-picker, #settings-menu {\n-\tpadding: 4px;\n-\twidth: 27px;\n-\theight: 29px;\n-\tborder: 1px solid;\n-\tborder-radius: 3px;\n-\tcursor: pointer;\n-}\n-\n-#theme-choices {\n-\tdisplay: none;\n-\tposition: absolute;\n-\tleft: 0;\n-\ttop: 28px;\n-\tborder: 1px solid;\n-\tborder-radius: 3px;\n-\tz-index: 1;\n-\tcursor: pointer;\n-}\n-\n-#theme-choices > button {\n-\tborder: none;\n-\twidth: 100%;\n-\tpadding: 4px;\n-\ttext-align: center;\n-\tbackground: rgba(0,0,0,0);\n-}\n-\n-#theme-choices > button:not(:first-child) {\n-\tborder-top: 1px solid;\n-}\n-\n-@media (max-width: 700px) {\n-\t.theme-picker {\n-\t\tleft: 10px;\n-\t\ttop: 54px;\n-\t\tz-index: 1;\n-\t}\n-}\n-\n .hidden-by-impl-hider,\n .hidden-by-usual-hider {\n \t/* important because of conflicting rule for small screens */\n@@ -1539,39 +1579,6 @@ kbd {\n \tmargin-bottom: 1em;\n }\n \n-#sidebar-toggle {\n-\tposition: fixed;\n-\ttop: 30px;\n-\tleft: 300px;\n-\tz-index: 10;\n-\tpadding: 3px;\n-\tborder-top-right-radius: 3px;\n-\tborder-bottom-right-radius: 3px;\n-\tcursor: pointer;\n-\tfont-weight: bold;\n-\ttransition: left .5s;\n-\tfont-size: 1.2em;\n-\tborder: 1px solid;\n-\tborder-left: 0;\n-}\n-#source-sidebar {\n-\tposition: fixed;\n-\ttop: 0;\n-\tbottom: 0;\n-\tleft: 0;\n-\twidth: 300px;\n-\tz-index: 1;\n-\toverflow: auto;\n-\ttransition: left .5s;\n-\tborder-right: 1px solid;\n-}\n-#source-sidebar > .title {\n-\tfont-size: 1.5em;\n-\ttext-align: center;\n-\tborder-bottom: 1px solid;\n-\tmargin-bottom: 6px;\n-}\n-\n div.children {\n \tpadding-left: 27px;\n \tdisplay: none;"}, {"sha": "e44ae2ad10cee286cba893f9ac63cffd2f96e6de", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -164,20 +164,21 @@ a.test-arrow {\n \tcolor: #111;\n \tbackground-color: #f0f0f0;\n \tborder-color: #000;\n+\tbox-shadow: 0 0 0 1px #000, 0 0 0 2px transparent;\n }\n \n .search-input {\n \tcolor: #111;\n-\tbox-shadow: 0 0 0 1px #000, 0 0 0 2px transparent;\n \tbackground-color: #f0f0f0;\n+\tbox-shadow: 0 0 0 1px #000, 0 0 0 2px transparent;\n }\n \n .search-input:focus {\n \tborder-color: #008dfd;\n }\n \n-#crate-search + .search-input {\n-\tbox-shadow: 1px 0 0 1px #000, 0 0 0 2px transparent;\n+#crate-search + .search-input:focus {\n+\tbox-shadow: 0 0 8px 4px #078dd8;\n }\n \n .module-item .stab {"}, {"sha": "4c37000dde2c5e4f6840309b237eae17d85e0461", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -164,21 +164,21 @@ a.test-arrow {\n \tcolor: #555;\n \tbackground-color: white;\n \tborder-color: #e0e0e0;\n-\tbox-shadow: 0px 0 0 1px #e0e0e0, 0 0 0 2px transparent;\n+\tbox-shadow: 0 0 0 1px #e0e0e0, 0 0 0 2px transparent;\n }\n \n .search-input {\n \tcolor: #555;\n-\tbox-shadow: 0 0 0 1px #e0e0e0, 0 0 0 2px transparent;\n \tbackground-color: white;\n+\tbox-shadow: 0 0 0 1px #e0e0e0, 0 0 0 2px transparent;\n }\n \n .search-input:focus {\n \tborder-color: #66afe9;\n }\n \n-#crate-search + .search-input {\n-\tbox-shadow: 1px 0 0 1px #e0e0e0, 0 0 0 2px transparent;\n+#crate-search + .search-input:focus {\n+\tbox-shadow: 0 0 8px #078dd8;\n }\n \n .module-item .stab {"}, {"sha": "ff52974775b05268e1a4b3b49a704340a6f24d50", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -173,6 +173,9 @@ static HOOK: AtomicPtr<()> = AtomicPtr::new(ptr::null_mut());\n /// about the allocation that failed.\n ///\n /// The allocation error hook is a global resource.\n+///\n+/// [`set_alloc_error_hook`]: fn.set_alloc_error_hook.html\n+/// [`take_alloc_error_hook`]: fn.take_alloc_error_hook.html\n #[unstable(feature = \"alloc_error_hook\", issue = \"51245\")]\n pub fn set_alloc_error_hook(hook: fn(Layout)) {\n     HOOK.store(hook as *mut (), Ordering::SeqCst);\n@@ -183,6 +186,8 @@ pub fn set_alloc_error_hook(hook: fn(Layout)) {\n /// *See also the function [`set_alloc_error_hook`].*\n ///\n /// If no custom hook is registered, the default hook will be returned.\n+///\n+/// [`set_alloc_error_hook`]: fn.set_alloc_error_hook.html\n #[unstable(feature = \"alloc_error_hook\", issue = \"51245\")]\n pub fn take_alloc_error_hook() -> fn(Layout) {\n     let hook = HOOK.swap(ptr::null_mut(), Ordering::SeqCst);"}, {"sha": "5a2fe2b244f556d16127daf3244da70fed785ecc", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -2494,7 +2494,10 @@ impl DefaultHasher {\n \n #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n impl Default for DefaultHasher {\n-    /// Creates a new `DefaultHasher` using [`new`][DefaultHasher::new].\n+    // FIXME: here should link `new` to [DefaultHasher::new], but it occurs intra-doc link\n+    // resolution failure when re-exporting libstd items. When #56922 fixed,\n+    // link `new` to [DefaultHasher::new] again.\n+    /// Creates a new `DefaultHasher` using `new`.\n     /// See its documentation for more.\n     fn default() -> DefaultHasher {\n         DefaultHasher::new()"}, {"sha": "aeb822fa99e66a6fd1920de1c16aea4203ff4677", "filename": "src/libstd/error.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -218,6 +218,8 @@ mod private {\n impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n     /// Converts a type of [`Error`] into a box of dyn [`Error`].\n     ///\n+    /// [`Error`]: ../error/trait.Error.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -255,6 +257,8 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n     /// Converts a type of [`Error`] + [`Send`] + [`Sync`] into a box of dyn [`Error`] +\n     /// [`Send`] + [`Sync`].\n     ///\n+    /// [`Error`]: ../error/trait.Error.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -296,6 +300,8 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n impl From<String> for Box<dyn Error + Send + Sync> {\n     /// Converts a [`String`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n     ///\n+    /// [`Error`]: ../error/trait.Error.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -329,6 +335,8 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n impl From<String> for Box<dyn Error> {\n     /// Converts a [`String`] into a box of dyn [`Error`].\n     ///\n+    /// [`Error`]: ../error/trait.Error.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -350,6 +358,8 @@ impl From<String> for Box<dyn Error> {\n impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n     /// Converts a [`str`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n     ///\n+    /// [`Error`]: ../error/trait.Error.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -370,6 +380,8 @@ impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n impl From<&str> for Box<dyn Error> {\n     /// Converts a [`str`] into a box of dyn [`Error`].\n     ///\n+    /// [`Error`]: ../error/trait.Error.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -389,6 +401,9 @@ impl From<&str> for Box<dyn Error> {\n impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n     /// Converts a [`Cow`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n     ///\n+    /// [`Cow`]: ../borrow/enum.Cow.html\n+    /// [`Error`]: ../error/trait.Error.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -410,6 +425,9 @@ impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n     /// Converts a [`Cow`] into a box of dyn [`Error`].\n     ///\n+    /// [`Cow`]: ../borrow/enum.Cow.html\n+    /// [`Error`]: ../error/trait.Error.html\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "c7c5849a00fa03e7ded2fe25de405f195575d0f2", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -351,6 +351,8 @@ impl From<String> for OsString {\n     /// Converts a [`String`] into a [`OsString`].\n     ///\n     /// The conversion copies the data, and includes an allocation on the heap.\n+    ///\n+    /// [`OsString`]: ../../std/ffi/struct.OsString.html\n     fn from(s: String) -> OsString {\n         OsString { inner: Buf::from_string(s) }\n     }"}, {"sha": "616b5eb836ffd6c8c20163cd752790ade30ef170", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -1812,6 +1812,8 @@ pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n ///   function.)\n /// * `path` already exists.\n ///\n+/// [`create_dir_all`]: fn.create_dir_all.html\n+///\n /// # Examples\n ///\n /// ```no_run"}, {"sha": "e309f81192cf3ffb7322bd4540da7beb5c384461", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -754,7 +754,7 @@ impl<W> fmt::Display for IntoInnerError<W> {\n /// completed, rather than the entire buffer at once. Enter `LineWriter`. It\n /// does exactly that.\n ///\n-/// Like [`BufWriter`], a `LineWriter`\u2019s buffer will also be flushed when the\n+/// Like [`BufWriter`][bufwriter], a `LineWriter`\u2019s buffer will also be flushed when the\n /// `LineWriter` goes out of scope or when its internal buffer is full.\n ///\n /// [bufwriter]: struct.BufWriter.html"}, {"sha": "ca86a175058b512dd2259349393a2c200565f920", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -546,6 +546,9 @@ impl FromInner<c::sockaddr_in6> for SocketAddrV6 {\n #[stable(feature = \"ip_from_ip\", since = \"1.16.0\")]\n impl From<SocketAddrV4> for SocketAddr {\n     /// Converts a [`SocketAddrV4`] into a [`SocketAddr::V4`].\n+    ///\n+    /// [`SocketAddrV4`]: ../../std/net/struct.SocketAddrV4.html\n+    /// [`SocketAddr::V4`]: ../../std/net/enum.SocketAddr.html#variant.V4\n     fn from(sock4: SocketAddrV4) -> SocketAddr {\n         SocketAddr::V4(sock4)\n     }\n@@ -554,6 +557,9 @@ impl From<SocketAddrV4> for SocketAddr {\n #[stable(feature = \"ip_from_ip\", since = \"1.16.0\")]\n impl From<SocketAddrV6> for SocketAddr {\n     /// Converts a [`SocketAddrV6`] into a [`SocketAddr::V6`].\n+    ///\n+    /// [`SocketAddrV6`]: ../../std/net/struct.SocketAddrV6.html\n+    /// [`SocketAddr::V6`]: ../../std/net/enum.SocketAddr.html#variant.V6\n     fn from(sock6: SocketAddrV6) -> SocketAddr {\n         SocketAddr::V6(sock6)\n     }\n@@ -567,6 +573,13 @@ impl<I: Into<IpAddr>> From<(I, u16)> for SocketAddr {\n     /// and creates a [`SocketAddr::V6`] for a [`IpAddr::V6`].\n     ///\n     /// `u16` is treated as port of the newly created [`SocketAddr`].\n+    ///\n+    /// [`IpAddr`]: ../../std/net/enum.IpAddr.html\n+    /// [`IpAddr::V4`]: ../../std/net/enum.IpAddr.html#variant.V4\n+    /// [`IpAddr::V6`]: ../../std/net/enum.IpAddr.html#variant.V6\n+    /// [`SocketAddr`]: ../../std/net/enum.SocketAddr.html\n+    /// [`SocketAddr::V4`]: ../../std/net/enum.SocketAddr.html#variant.V4\n+    /// [`SocketAddr::V6`]: ../../std/net/enum.SocketAddr.html#variant.V6\n     fn from(pieces: (I, u16)) -> SocketAddr {\n         SocketAddr::new(pieces.0.into(), pieces.1)\n     }"}, {"sha": "87c2318a9377c56ff3b3922915d664cd2aeaeaa8", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -376,6 +376,8 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Mutex<T> {\n impl<T> From<T> for Mutex<T> {\n     /// Creates a new mutex in an unlocked state ready for use.\n     /// This is equivalent to [`Mutex::new`].\n+    ///\n+    /// [`Mutex::new`]: ../../std/sync/struct.Mutex.html#method.new\n     fn from(t: T) -> Self {\n         Mutex::new(t)\n     }"}, {"sha": "b1b56f321fc6b8fb162c68a7ba2362de91621ab3", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -453,6 +453,8 @@ impl<T: Default> Default for RwLock<T> {\n impl<T> From<T> for RwLock<T> {\n     /// Creates a new instance of an `RwLock<T>` which is unlocked.\n     /// This is equivalent to [`RwLock::new`].\n+    ///\n+    /// [`RwLock::new`]: ../../std/sync/struct.RwLock.html#method.new\n     fn from(t: T) -> Self {\n         RwLock::new(t)\n     }"}, {"sha": "71c62461ee9cb4aef5aa6e01652c37165842f25e", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -47,7 +47,12 @@ mod imp {\n                 let err = errno() as libc::c_int;\n                 if err == libc::EINTR {\n                     continue;\n-                } else if err == libc::ENOSYS {\n+                } else if err == libc::ENOSYS || err == libc::EPERM {\n+                    // Fall back to reading /dev/urandom if `getrandom` is not\n+                    // supported on the current kernel.\n+                    //\n+                    // Also fall back in case it is disabled by something like\n+                    // seccomp or inside of virtual machines.\n                     GETRANDOM_UNAVAILABLE.store(true, Ordering::Relaxed);\n                     return false;\n                 } else if err == libc::EAGAIN {"}, {"sha": "35de4f4008b6723a67aa2c567ee4fde6987c0067", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -443,6 +443,7 @@ impl Builder {\n     /// [`Builder::spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n     /// [`io::Result`]: ../../std/io/type.Result.html\n     /// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n+    /// [`JoinHandle::join`]: ../../std/thread/struct.JoinHandle.html#method.join\n     #[unstable(feature = \"thread_spawn_unchecked\", issue = \"55132\")]\n     pub unsafe fn spawn_unchecked<'a, F, T>(self, f: F) -> io::Result<JoinHandle<T>> where\n         F: FnOnce() -> T, F: Send + 'a, T: Send + 'a"}, {"sha": "b55ca453fb3dcc8b959a26e05da40cdf67b91b13", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -16,7 +16,7 @@ use crate::ThinVec;\n \n use rustc_data_structures::indexed_vec::Idx;\n #[cfg(target_arch = \"x86_64\")]\n-use rustc_data_structures::static_assert;\n+use rustc_data_structures::static_assert_size;\n use rustc_target::spec::abi::Abi;\n use syntax_pos::{Span, DUMMY_SP};\n \n@@ -964,7 +964,7 @@ pub struct Expr {\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_EXPR: std::mem::size_of::<Expr>() == 96);\n+static_assert_size!(Expr, 96);\n \n impl Expr {\n     /// Whether this expression would be valid somewhere that expects a value; for example, an `if`"}, {"sha": "5b1a9bb739ff8346ec9e889b313d0bebf67129e2", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -998,7 +998,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     (sym::repr, Normal, template!(List: \"C, packed, ...\"), Ungated),\n     (sym::path, Normal, template!(NameValueStr: \"file\"), Ungated),\n     (sym::automatically_derived, Normal, template!(Word), Ungated),\n-    (sym::no_mangle, Normal, template!(Word), Ungated),\n+    (sym::no_mangle, Whitelisted, template!(Word), Ungated),\n     (sym::no_link, Normal, template!(Word), Ungated),\n     (sym::derive, Normal, template!(List: \"Trait1, Trait2, ...\"), Ungated),\n     ("}, {"sha": "068fc41c87a0baadcff9b67938019cef4880684b", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -19,7 +19,7 @@ use log::info;\n use std::fmt;\n use std::mem;\n #[cfg(target_arch = \"x86_64\")]\n-use rustc_data_structures::static_assert;\n+use rustc_data_structures::static_assert_size;\n use rustc_data_structures::sync::Lrc;\n \n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n@@ -74,7 +74,7 @@ pub enum Lit {\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_LIT: mem::size_of::<Lit>() == 8);\n+static_assert_size!(Lit, 8);\n \n impl Lit {\n     crate fn literal_name(&self) -> &'static str {\n@@ -220,7 +220,7 @@ pub enum Token {\n \n // `Token` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_STATEMENT: mem::size_of::<Token>() == 16);\n+static_assert_size!(Token, 16);\n \n impl Token {\n     /// Recovers a `Token` from an `ast::Ident`. This creates a raw identifier if necessary."}, {"sha": "3cb16c30a50d477692ea93960a1c2f67864c1b36", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -21,7 +21,7 @@ use crate::print::pprust;\n \n use syntax_pos::{BytePos, Mark, Span, DUMMY_SP};\n #[cfg(target_arch = \"x86_64\")]\n-use rustc_data_structures::static_assert;\n+use rustc_data_structures::static_assert_size;\n use rustc_data_structures::sync::Lrc;\n use serialize::{Decoder, Decodable, Encoder, Encodable};\n use smallvec::{SmallVec, smallvec};\n@@ -158,7 +158,7 @@ pub type TreeAndJoint = (TokenTree, IsJoint);\n \n // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_TOKEN_STREAM: mem::size_of::<TokenStream>() == 8);\n+static_assert_size!(TokenStream, 8);\n \n #[derive(Clone, Copy, Debug, PartialEq)]\n pub enum IsJoint {"}, {"sha": "20280aa3c41300b96d90efe626d21e41f5c18bc4", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -67,13 +67,10 @@ mod llvm_libunwind {\n             cfg.flag(\"-std=c99\");\n             cfg.flag(\"-std=c++11\");\n             cfg.flag(\"-nostdinc++\");\n-            if cfg.is_flag_supported(\"-funwind-tables\").unwrap_or_default() &&\n-               cfg.is_flag_supported(\"-fno-exceptions\").unwrap_or_default() {\n-                cfg.flag(\"-funwind-tables\");\n-                cfg.flag(\"-fno-exceptions\");\n-            }\n+            cfg.flag(\"-fno-exceptions\");\n             cfg.flag(\"-fno-rtti\");\n             cfg.flag(\"-fstrict-aliasing\");\n+            cfg.flag(\"-funwind-tables\");\n         }\n \n         let mut unwind_sources = vec!["}, {"sha": "1b17886a4f9b5bafd696fb8c71eb2f2f3f621129", "filename": "src/test/incremental/no_mangle.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Ftest%2Fincremental%2Fno_mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Ftest%2Fincremental%2Fno_mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fno_mangle.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -0,0 +1,10 @@\n+// revisions:rpass1 rpass2\n+// compile-flags: --crate-type cdylib\n+// skip-codegen\n+\n+#![deny(unused_attributes)]\n+\n+#[no_mangle]\n+pub extern \"C\" fn rust_no_mangle() -> i32 {\n+    42\n+}"}, {"sha": "6f239292ec2004be6a68e597d5355951bb9a38b6", "filename": "src/test/rustdoc/intra-link-libstd-re-export.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Ftest%2Frustdoc%2Fintra-link-libstd-re-export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Ftest%2Frustdoc%2Fintra-link-libstd-re-export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-libstd-re-export.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -0,0 +1,3 @@\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+pub use std::*;"}, {"sha": "ca0a432d3396e1a446f26c91c5018a5b000d115c", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -52,7 +52,7 @@\n //~^ WARN unused attribute\n #![path = \"3800\"] //~ WARN unused attribute\n #![automatically_derived] //~ WARN unused attribute\n-#![no_mangle] //~ WARN unused attribute\n+#![no_mangle]\n #![no_link] //~ WARN unused attribute\n // see issue-43106-gating-of-derive.rs\n #![should_panic] //~ WARN unused attribute"}, {"sha": "c7081205e148195bdc5e2007bd025d2ffaf59a3f", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=09189591c4c4f6784ffd4bbe99eaefbfe1d5e4a4", "patch": "@@ -1152,12 +1152,6 @@ warning: unused attribute\n LL | #![automatically_derived]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:55:1\n-   |\n-LL | #![no_mangle]\n-   | ^^^^^^^^^^^^^\n-\n warning: unused attribute\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:56:1\n    |"}]}