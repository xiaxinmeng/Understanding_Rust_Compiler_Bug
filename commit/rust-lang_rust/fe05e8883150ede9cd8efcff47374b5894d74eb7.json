{"sha": "fe05e8883150ede9cd8efcff47374b5894d74eb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMDVlODg4MzE1MGVkZTljZDhlZmNmZjQ3Mzc0YjU4OTRkNzRlYjc=", "commit": {"author": {"name": "rChaser53", "email": "tayoshizawa29@gmail.com", "date": "2019-07-30T05:32:38Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-07-30T05:32:38Z"}, "message": "fix to build with rustc 1.38.0-nightly (4560cb830 2019-07-28) (#3712)", "tree": {"sha": "65799ff6ed2f40b9de3e7bf696e18fededab613a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65799ff6ed2f40b9de3e7bf696e18fededab613a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe05e8883150ede9cd8efcff47374b5894d74eb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe05e8883150ede9cd8efcff47374b5894d74eb7", "html_url": "https://github.com/rust-lang/rust/commit/fe05e8883150ede9cd8efcff47374b5894d74eb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe05e8883150ede9cd8efcff47374b5894d74eb7/comments", "author": {"login": "rchaser53", "id": 9676954, "node_id": "MDQ6VXNlcjk2NzY5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9676954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchaser53", "html_url": "https://github.com/rchaser53", "followers_url": "https://api.github.com/users/rchaser53/followers", "following_url": "https://api.github.com/users/rchaser53/following{/other_user}", "gists_url": "https://api.github.com/users/rchaser53/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchaser53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchaser53/subscriptions", "organizations_url": "https://api.github.com/users/rchaser53/orgs", "repos_url": "https://api.github.com/users/rchaser53/repos", "events_url": "https://api.github.com/users/rchaser53/events{/privacy}", "received_events_url": "https://api.github.com/users/rchaser53/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "365461349d83e5b39bd3dcc704356f0822de0f65", "url": "https://api.github.com/repos/rust-lang/rust/commits/365461349d83e5b39bd3dcc704356f0822de0f65", "html_url": "https://github.com/rust-lang/rust/commit/365461349d83e5b39bd3dcc704356f0822de0f65"}], "stats": {"total": 257, "additions": 120, "deletions": 137}, "files": [{"sha": "dfaef1a7faadcec40926d225abd08a97aca050c5", "filename": "Cargo.lock", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/fe05e8883150ede9cd8efcff47374b5894d74eb7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fe05e8883150ede9cd8efcff47374b5894d74eb7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=fe05e8883150ede9cd8efcff47374b5894d74eb7", "patch": "@@ -691,21 +691,21 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-arena\"\n-version = \"541.0.0\"\n+version = \"542.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-graphviz\"\n-version = \"541.0.0\"\n+version = \"542.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"541.0.0\"\n+version = \"542.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -716,8 +716,8 @@ dependencies = [\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-graphviz 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-graphviz 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon-core 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -727,27 +727,27 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"541.0.0\"\n+version = \"542.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"annotate-snippets 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_lexer\"\n-version = \"541.0.0\"\n+version = \"542.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-rustc_macros\"\n-version = \"541.0.0\"\n+version = \"542.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -759,19 +759,19 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_target\"\n-version = \"541.0.0\"\n+version = \"542.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-serialize\"\n-version = \"541.0.0\"\n+version = \"542.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -780,33 +780,33 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-syntax\"\n-version = \"541.0.0\"\n+version = \"542.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_lexer 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_lexer 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-syntax_pos\"\n-version = \"541.0.0\"\n+version = \"542.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-arena 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-arena 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -886,9 +886,9 @@ dependencies = [\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-workspace-hack 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustfmt-config_proc_macro 0.1.2\",\n  \"serde 1.0.97 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1238,16 +1238,16 @@ dependencies = [\n \"checksum redox_users 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fe5204c3a17e97dde73f285d49be585df59ed84b50a872baf416e73b62c3828\"\n \"checksum regex 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6b23da8dfd98a84bd7e08700190a5d9f7d2d38abd4369dd1dae651bc40bfd2cc\"\n \"checksum regex-syntax 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd5485bf1523a9ed51c4964273f22f63f24e31632adb5dad134f488f86a3875c\"\n-\"checksum rustc-ap-arena 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4999a492d178380404acf4db84a5f963308abc6517c9d7e1c365b8a3f71b9c76\"\n-\"checksum rustc-ap-graphviz 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ec0487de365719ea61197aba6ff7d8ddbcbc7f405efabe45779531006eea8af2\"\n-\"checksum rustc-ap-rustc_data_structures 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73123645a853dfe21d834e68a9794b7102dd8f853de1f4fb3afb6ab157a391f3\"\n-\"checksum rustc-ap-rustc_errors 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0054a08e965f4139a5b506b5c2ffeba0c8675e2644f6de8598b46430adbc31b5\"\n-\"checksum rustc-ap-rustc_lexer 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dee482133f8d62afa26c5fc1bb0e5058fe20f2d8f4fd62e0b19b8573b79d46da\"\n-\"checksum rustc-ap-rustc_macros 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"19a6a47f58ec7b082c706fa45d000bb32b68f69be4144d321346c5fcdf553e78\"\n-\"checksum rustc-ap-rustc_target 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e6906ce7105780a97c9b3b0a8ca8d5fca098fa9ad63ff8d76db4196977991ed8\"\n-\"checksum rustc-ap-serialize 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ae328d35a0fe825d87e3a9d758aa7be6351da0da95a900b67bc725a2ff353f4\"\n-\"checksum rustc-ap-syntax 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8386699c409cc149144e2e97eb4afa6bc2443d8c32a2fb6815d31642c6b5ee97\"\n-\"checksum rustc-ap-syntax_pos 541.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4b0155cbc5e3cf2291da98d2dd7a0614595e3363cfde39c719c17c50a1a06668\"\n+\"checksum rustc-ap-arena 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"60ae3caf12a5dfa3181e12e813b090b0b41d43b91b193759ba9084520aeb2459\"\n+\"checksum rustc-ap-graphviz 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0113b8888a3f0a68825ed0dea6d3a1aa71b5d0cd6ff16854252c4faea253cf9b\"\n+\"checksum rustc-ap-rustc_data_structures 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3bd9eec8c9fbdac20e631f995861c5c854b3f8b2347955614854571457117e51\"\n+\"checksum rustc-ap-rustc_errors 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f55baa0fa4a42a8b354f02015755e7db5619125ad3e625923865f6f1f5688753\"\n+\"checksum rustc-ap-rustc_lexer 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2875181a7886d83b727b1d08291ee430728c2d94c9a7e3f4359df2a14e6c462b\"\n+\"checksum rustc-ap-rustc_macros 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3cadcc9dd4fc3c94c89e103e91f8792f19a1466e0a127d9fb29a2c0ee069389\"\n+\"checksum rustc-ap-rustc_target 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4bdcce1900404a6907785dd31a152ddd723766dfbe29bed6bcca255e7347abdd\"\n+\"checksum rustc-ap-serialize 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"550e295fa077784f7145ba77591aff952fad2279f3ce23a53cf8750fb366c622\"\n+\"checksum rustc-ap-syntax 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"594006d7e68bcff9b5356517667c4e9dd5ec925a2a08660d129b705d0b741ad7\"\n+\"checksum rustc-ap-syntax_pos 542.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0ae6751bf44d949b430b151c81772b585686f0ff31e328b68eaa7d406590f848\"\n \"checksum rustc-demangle 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7f4dccf6f4891ebcc0c39f9b6eb1a83b9bf5d747cb439ec6fba4f3b977038af\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc-rayon 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d2e07e19601f21c59aad953c2632172ba70cb27e685771514ea66e4062b3363\""}, {"sha": "2754fcf838e08f8c9ba9cdf0688939fe0707d24c", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe05e8883150ede9cd8efcff47374b5894d74eb7/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fe05e8883150ede9cd8efcff47374b5894d74eb7/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=fe05e8883150ede9cd8efcff47374b5894d74eb7", "patch": "@@ -48,9 +48,9 @@ env_logger = \"0.6\"\n getopts = \"0.2\"\n derive-new = \"0.5\"\n cargo_metadata = \"0.8\"\n-rustc-ap-rustc_target = \"541.0.0\"\n-rustc-ap-syntax = \"541.0.0\"\n-rustc-ap-syntax_pos = \"541.0.0\"\n+rustc-ap-rustc_target = \"542.0.0\"\n+rustc-ap-syntax = \"542.0.0\"\n+rustc-ap-syntax_pos = \"542.0.0\"\n failure = \"0.1.3\"\n bytecount = \"0.5\"\n unicode-width = \"0.1.5\""}, {"sha": "e7b7f8adbb21e39bde6ac8896712c55c8e737ea8", "filename": "src/patterns.rs", "status": "modified", "additions": 40, "deletions": 81, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/fe05e8883150ede9cd8efcff47374b5894d74eb7/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe05e8883150ede9cd8efcff47374b5894d74eb7/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=fe05e8883150ede9cd8efcff47374b5894d74eb7", "patch": "@@ -37,15 +37,15 @@ pub(crate) fn is_short_pattern(pat: &ast::Pat, pat_str: &str) -> bool {\n \n fn is_short_pattern_inner(pat: &ast::Pat) -> bool {\n     match pat.node {\n-        ast::PatKind::Wild | ast::PatKind::Lit(_) => true,\n+        ast::PatKind::Rest | ast::PatKind::Wild | ast::PatKind::Lit(_) => true,\n         ast::PatKind::Ident(_, _, ref pat) => pat.is_none(),\n         ast::PatKind::Struct(..)\n         | ast::PatKind::Mac(..)\n         | ast::PatKind::Slice(..)\n         | ast::PatKind::Path(..)\n         | ast::PatKind::Range(..) => false,\n-        ast::PatKind::Tuple(ref subpats, _) => subpats.len() <= 1,\n-        ast::PatKind::TupleStruct(ref path, ref subpats, _) => {\n+        ast::PatKind::Tuple(ref subpats) => subpats.len() <= 1,\n+        ast::PatKind::TupleStruct(ref path, ref subpats) => {\n             path.segments.len() <= 1 && subpats.len() <= 1\n         }\n         ast::PatKind::Box(ref p) | ast::PatKind::Ref(ref p, _) | ast::PatKind::Paren(ref p) => {\n@@ -88,6 +88,13 @@ impl Rewrite for Pat {\n                     None\n                 }\n             }\n+            PatKind::Rest => {\n+                if 1 <= shape.width {\n+                    Some(\"..\".to_owned())\n+                } else {\n+                    None\n+                }\n+            }\n             PatKind::Range(ref lhs, ref rhs, ref end_kind) => {\n                 let infix = match end_kind.node {\n                     RangeEnd::Included(RangeSyntax::DotDotDot) => \"...\",\n@@ -112,42 +119,27 @@ impl Rewrite for Pat {\n                 let prefix = format!(\"&{}\", format_mutability(mutability));\n                 rewrite_unary_prefix(context, &prefix, &**pat, shape)\n             }\n-            PatKind::Tuple(ref items, dotdot_pos) => {\n-                rewrite_tuple_pat(items, dotdot_pos, None, self.span, context, shape)\n-            }\n+            PatKind::Tuple(ref items) => rewrite_tuple_pat(items, None, self.span, context, shape),\n             PatKind::Path(ref q_self, ref path) => {\n                 rewrite_path(context, PathContext::Expr, q_self.as_ref(), path, shape)\n             }\n-            PatKind::TupleStruct(ref path, ref pat_vec, dotdot_pos) => {\n+            PatKind::TupleStruct(ref path, ref pat_vec) => {\n                 let path_str = rewrite_path(context, PathContext::Expr, None, path, shape)?;\n-                rewrite_tuple_pat(\n-                    pat_vec,\n-                    dotdot_pos,\n-                    Some(path_str),\n-                    self.span,\n-                    context,\n-                    shape,\n-                )\n+                rewrite_tuple_pat(pat_vec, Some(path_str), self.span, context, shape)\n             }\n             PatKind::Lit(ref expr) => expr.rewrite(context, shape),\n-            PatKind::Slice(ref prefix, ref slice_pat, ref suffix) => {\n-                // Rewrite all the sub-patterns.\n-                let prefix = prefix.iter().map(|p| p.rewrite(context, shape));\n-                let slice_pat = slice_pat\n-                    .as_ref()\n-                    .and_then(|p| p.rewrite(context, shape))\n-                    .map(|rw| Some(format!(\"{}..\", if rw == \"_\" { \"\" } else { &rw })));\n-                let suffix = suffix.iter().map(|p| p.rewrite(context, shape));\n-\n-                // Munge them together.\n-                let pats: Option<Vec<String>> =\n-                    prefix.chain(slice_pat.into_iter()).chain(suffix).collect();\n-\n-                // Check that all the rewrites succeeded, and if not return `None`.\n-                let pats = pats?;\n-\n-                // Unwrap all the sub-strings and join them with commas.\n-                Some(format!(\"[{}]\", pats.join(\", \")))\n+            PatKind::Slice(ref slice_pat) => {\n+                let rw: Vec<String> = slice_pat\n+                    .iter()\n+                    .map(|p| {\n+                        if let Some(rw) = p.rewrite(context, shape) {\n+                            format!(\"{}\", if rw == \"_\" { \"\" } else { &rw })\n+                        } else {\n+                            format!(\"{}\", context.snippet(p.span))\n+                        }\n+                    })\n+                    .collect();\n+                Some(format!(\"[{}]\", rw.join(\", \")))\n             }\n             PatKind::Struct(ref path, ref fields, ellipsis) => {\n                 rewrite_struct_pat(path, fields, ellipsis, self.span, context, shape)\n@@ -303,74 +295,41 @@ pub(crate) fn can_be_overflowed_pat(\n \n fn rewrite_tuple_pat(\n     pats: &[ptr::P<ast::Pat>],\n-    dotdot_pos: Option<usize>,\n     path_str: Option<String>,\n     span: Span,\n     context: &RewriteContext<'_>,\n     shape: Shape,\n ) -> Option<String> {\n     let mut pat_vec: Vec<_> = pats.iter().map(|x| TuplePatField::Pat(x)).collect();\n \n-    if let Some(pos) = dotdot_pos {\n-        let prev = if pos == 0 {\n-            span.lo()\n-        } else {\n-            pats[pos - 1].span().hi()\n-        };\n-        let next = if pos + 1 >= pats.len() {\n-            span.hi()\n-        } else {\n-            pats[pos + 1].span().lo()\n-        };\n-        let dot_span = mk_sp(prev, next);\n-        let snippet = context.snippet(dot_span);\n-        let lo = dot_span.lo() + BytePos(snippet.find_uncommented(\"..\").unwrap() as u32);\n-        let dotdot = TuplePatField::Dotdot(Span::new(\n-            lo,\n-            // 2 == \"..\".len()\n-            lo + BytePos(2),\n-            source_map::NO_EXPANSION,\n-        ));\n-        pat_vec.insert(pos, dotdot);\n-    }\n     if pat_vec.is_empty() {\n         return Some(format!(\"{}()\", path_str.unwrap_or_default()));\n     }\n     let wildcard_suffix_len = count_wildcard_suffix_len(context, &pat_vec, span, shape);\n-    let (pat_vec, span, condensed) =\n-        if context.config.condense_wildcard_suffixes() && wildcard_suffix_len >= 2 {\n-            let new_item_count = 1 + pat_vec.len() - wildcard_suffix_len;\n-            let sp = pat_vec[new_item_count - 1].span();\n-            let snippet = context.snippet(sp);\n-            let lo = sp.lo() + BytePos(snippet.find_uncommented(\"_\").unwrap() as u32);\n-            pat_vec[new_item_count - 1] = TuplePatField::Dotdot(mk_sp(lo, lo + BytePos(1)));\n-            (\n-                &pat_vec[..new_item_count],\n-                mk_sp(span.lo(), lo + BytePos(1)),\n-                true,\n-            )\n-        } else {\n-            (&pat_vec[..], span, false)\n-        };\n+    let (pat_vec, span) = if context.config.condense_wildcard_suffixes() && wildcard_suffix_len >= 2\n+    {\n+        let new_item_count = 1 + pat_vec.len() - wildcard_suffix_len;\n+        let sp = pat_vec[new_item_count - 1].span();\n+        let snippet = context.snippet(sp);\n+        let lo = sp.lo() + BytePos(snippet.find_uncommented(\"_\").unwrap() as u32);\n+        pat_vec[new_item_count - 1] = TuplePatField::Dotdot(mk_sp(lo, lo + BytePos(1)));\n+        (\n+            &pat_vec[..new_item_count],\n+            mk_sp(span.lo(), lo + BytePos(1)),\n+        )\n+    } else {\n+        (&pat_vec[..], span)\n+    };\n \n-    // add comma if `(x,)`\n-    let add_comma = path_str.is_none() && pat_vec.len() == 1 && dotdot_pos.is_none() && !condensed;\n     let path_str = path_str.unwrap_or_default();\n-\n     overflow::rewrite_with_parens(\n         &context,\n         &path_str,\n         pat_vec.iter(),\n         shape,\n         span,\n         context.config.max_width(),\n-        if dotdot_pos.is_some() {\n-            Some(SeparatorTactic::Never)\n-        } else if add_comma {\n-            Some(SeparatorTactic::Always)\n-        } else {\n-            None\n-        },\n+        None,\n     )\n }\n "}, {"sha": "fc3b1455e0d48473e5ec62362c3a4881db5398fd", "filename": "tests/source/pattern.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fe05e8883150ede9cd8efcff47374b5894d74eb7/tests%2Fsource%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe05e8883150ede9cd8efcff47374b5894d74eb7/tests%2Fsource%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fpattern.rs?ref=fe05e8883150ede9cd8efcff47374b5894d74eb7", "patch": "@@ -1,4 +1,7 @@\n // rustfmt-normalize_comments: true\n+#![feature(exclusive_range_pattern)]\n+use core::u8::MAX;\n+\n fn main() {\n     let z = match x {\n         \"pat1\" => 1,\n@@ -16,16 +19,23 @@ fn main() {\n     let foo@bar (f) = 42;\n     let a::foo ( ..) = 42;\n     let [ ] = 42;\n-    let [a..,     b,c ] = 42;\n-    let [ a,b,c.. ] = 42;\n-    let [a,    b, c, d..,e,f,     g] = 42;\n+    let [a,     b,c ] = 42;\n+    let [ a,b,c ] = 42;\n+    let [a,    b, c, d,e,f,     g] = 42;\n     let foo {   } = 42;\n     let foo {..} = 42;\n     let foo { x, y: ref foo,     .. } = 42;\n     let foo { x, yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: ref foo,     .. } = 42;\n     let foo { x,       yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: ref foo,      } = 42;\n     let foo { x, yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: ref foo,     .. };\n     let foo { x,       yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: ref foo,      };\n+\n+    match b\"12\" {\n+        [0,\n+        1..MAX\n+        ] => {}\n+        _ => {}\n+    }\n }\n \n impl<'a,'b> ResolveGeneratedContentFragmentMutator<'a,'b> {\n@@ -67,7 +77,7 @@ fn combine_patterns() {\n fn slice_patterns() {\n     match b\"123\" {\n         [0, ..] => {}\n-        [0, foo..] => {}\n+        [0, foo] => {}\n         _ => {}\n     }\n }"}, {"sha": "94911d1f8eefaa90737fe9ac26accad72f36a3cb", "filename": "tests/target/issue-1021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe05e8883150ede9cd8efcff47374b5894d74eb7/tests%2Ftarget%2Fissue-1021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe05e8883150ede9cd8efcff47374b5894d74eb7/tests%2Ftarget%2Fissue-1021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1021.rs?ref=fe05e8883150ede9cd8efcff47374b5894d74eb7", "patch": "@@ -15,7 +15,7 @@ fn main() {\n         (true, ..) => (),\n         (.., true) => (),\n         (..) => (),\n-        (_,) => (),\n+        (_) => (),\n         (/* .. */ ..) => (),\n         (/* .. */ .., true) => (),\n     }"}, {"sha": "3d5207597c46df06b0670e17ea1fb3f687dbebf3", "filename": "tests/target/issue-2936.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe05e8883150ede9cd8efcff47374b5894d74eb7/tests%2Ftarget%2Fissue-2936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe05e8883150ede9cd8efcff47374b5894d74eb7/tests%2Ftarget%2Fissue-2936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2936.rs?ref=fe05e8883150ede9cd8efcff47374b5894d74eb7", "patch": "@@ -10,7 +10,7 @@ impl Something for AStruct {\n             ContextualParseError::InvalidMediaRule(ref err) => {\n                 let err: &CStr = match err.kind {\n                     ParseErrorKind::Custom(StyleParseErrorKind::MediaQueryExpectedFeatureName(\n-                        ..\n+                        ..,\n                     )) => cstr!(\"PEMQExpectedFeatureName\"),\n                 };\n             }"}, {"sha": "62d986e77341ff91f0491a8010b80da7da61b296", "filename": "tests/target/issue-3711.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe05e8883150ede9cd8efcff47374b5894d74eb7/tests%2Ftarget%2Fissue-3711.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe05e8883150ede9cd8efcff47374b5894d74eb7/tests%2Ftarget%2Fissue-3711.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3711.rs?ref=fe05e8883150ede9cd8efcff47374b5894d74eb7", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    println!(\n+        \"{}\", // comment\n+        111\n+    );\n+}"}, {"sha": "d8a96d649200b5873b7141fe1b62fd4767ceb910", "filename": "tests/target/pattern.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fe05e8883150ede9cd8efcff47374b5894d74eb7/tests%2Ftarget%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe05e8883150ede9cd8efcff47374b5894d74eb7/tests%2Ftarget%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fpattern.rs?ref=fe05e8883150ede9cd8efcff47374b5894d74eb7", "patch": "@@ -1,4 +1,7 @@\n // rustfmt-normalize_comments: true\n+#![feature(exclusive_range_pattern)]\n+use core::u8::MAX;\n+\n fn main() {\n     let z = match x {\n         \"pat1\" => 1,\n@@ -18,9 +21,9 @@ fn main() {\n     let foo @ bar(f) = 42;\n     let a::foo(..) = 42;\n     let [] = 42;\n-    let [a.., b, c] = 42;\n-    let [a, b, c..] = 42;\n-    let [a, b, c, d.., e, f, g] = 42;\n+    let [a, b, c] = 42;\n+    let [a, b, c] = 42;\n+    let [a, b, c, d, e, f, g] = 42;\n     let foo {} = 42;\n     let foo { .. } = 42;\n     let foo { x, y: ref foo, .. } = 42;\n@@ -42,6 +45,11 @@ fn main() {\n         x,\n         yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: ref foo,\n     };\n+\n+    match b\"12\" {\n+        [0, 1..MAX] => {}\n+        _ => {}\n+    }\n }\n \n impl<'a, 'b> ResolveGeneratedContentFragmentMutator<'a, 'b> {\n@@ -79,7 +87,7 @@ fn combine_patterns() {\n fn slice_patterns() {\n     match b\"123\" {\n         [0, ..] => {}\n-        [0, foo..] => {}\n+        [0, foo] => {}\n         _ => {}\n     }\n }"}]}