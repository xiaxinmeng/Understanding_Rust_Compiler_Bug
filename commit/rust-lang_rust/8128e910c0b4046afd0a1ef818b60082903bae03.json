{"sha": "8128e910c0b4046afd0a1ef818b60082903bae03", "node_id": "C_kwDOAAsO6NoAKDgxMjhlOTEwYzBiNDA0NmFmZDBhMWVmODE4YjYwMDgyOTAzYmFlMDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-26T09:41:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-26T09:41:19Z"}, "message": "Auto merge of #94127 - erikdesjardins:debugattr, r=nikic\n\nAt opt-level=0, apply only ABI-affecting attributes to functions\n\nThis should provide a small perf improvement for debug builds,\nand should more than cancel out the perf regression from adding noundef (https://github.com/rust-lang/rust/pull/93670#issuecomment-1038347581, #94106).\n\nr? `@nikic`", "tree": {"sha": "1f03704853e404d693ef825a3a69582b36c39016", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f03704853e404d693ef825a3a69582b36c39016"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8128e910c0b4046afd0a1ef818b60082903bae03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8128e910c0b4046afd0a1ef818b60082903bae03", "html_url": "https://github.com/rust-lang/rust/commit/8128e910c0b4046afd0a1ef818b60082903bae03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8128e910c0b4046afd0a1ef818b60082903bae03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5a9bc947617babe3833458f3e09f3d6d5e3d736", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a9bc947617babe3833458f3e09f3d6d5e3d736", "html_url": "https://github.com/rust-lang/rust/commit/d5a9bc947617babe3833458f3e09f3d6d5e3d736"}, {"sha": "945276c92076ea82747b4c8d0b19206c2940e7d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/945276c92076ea82747b4c8d0b19206c2940e7d8", "html_url": "https://github.com/rust-lang/rust/commit/945276c92076ea82747b4c8d0b19206c2940e7d8"}], "stats": {"total": 180, "additions": 127, "deletions": 53}, "files": [{"sha": "6b53702a1b55d8ba26339bb941671437c4e77d46", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 60, "deletions": 49, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/8128e910c0b4046afd0a1ef818b60082903bae03/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8128e910c0b4046afd0a1ef818b60082903bae03/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=8128e910c0b4046afd0a1ef818b60082903bae03", "patch": "@@ -13,34 +13,14 @@ use rustc_middle::bug;\n use rustc_middle::ty::layout::LayoutOf;\n pub use rustc_middle::ty::layout::{FAT_PTR_ADDR, FAT_PTR_EXTRA};\n use rustc_middle::ty::Ty;\n+use rustc_session::config;\n use rustc_target::abi::call::ArgAbi;\n pub use rustc_target::abi::call::*;\n use rustc_target::abi::{self, HasDataLayout, Int};\n pub use rustc_target::spec::abi::Abi;\n \n use libc::c_uint;\n \n-macro_rules! for_each_kind {\n-    ($flags: ident, $f: ident, $($kind: ident),+) => ({\n-        $(if $flags.contains(ArgAttribute::$kind) { $f(llvm::Attribute::$kind) })+\n-    })\n-}\n-\n-trait ArgAttributeExt {\n-    fn for_each_kind<F>(&self, f: F)\n-    where\n-        F: FnMut(llvm::Attribute);\n-}\n-\n-impl ArgAttributeExt for ArgAttribute {\n-    fn for_each_kind<F>(&self, mut f: F)\n-    where\n-        F: FnMut(llvm::Attribute),\n-    {\n-        for_each_kind!(self, f, NoAlias, NoCapture, NonNull, ReadOnly, InReg, NoUndef)\n-    }\n-}\n-\n pub trait ArgAttributesExt {\n     fn apply_attrs_to_llfn(&self, idx: AttributePlace, cx: &CodegenCx<'_, '_>, llfn: &Value);\n     fn apply_attrs_to_callsite(\n@@ -58,10 +38,39 @@ fn should_use_mutable_noalias(cx: &CodegenCx<'_, '_>) -> bool {\n     cx.tcx.sess.opts.debugging_opts.mutable_noalias.unwrap_or(true)\n }\n \n+const ABI_AFFECTING_ATTRIBUTES: [(ArgAttribute, llvm::Attribute); 1] =\n+    [(ArgAttribute::InReg, llvm::Attribute::InReg)];\n+\n+const OPTIMIZATION_ATTRIBUTES: [(ArgAttribute, llvm::Attribute); 5] = [\n+    (ArgAttribute::NoAlias, llvm::Attribute::NoAlias),\n+    (ArgAttribute::NoCapture, llvm::Attribute::NoCapture),\n+    (ArgAttribute::NonNull, llvm::Attribute::NonNull),\n+    (ArgAttribute::ReadOnly, llvm::Attribute::ReadOnly),\n+    (ArgAttribute::NoUndef, llvm::Attribute::NoUndef),\n+];\n+\n impl ArgAttributesExt for ArgAttributes {\n     fn apply_attrs_to_llfn(&self, idx: AttributePlace, cx: &CodegenCx<'_, '_>, llfn: &Value) {\n         let mut regular = self.regular;\n         unsafe {\n+            // ABI-affecting attributes must always be applied\n+            for (attr, llattr) in ABI_AFFECTING_ATTRIBUTES {\n+                if regular.contains(attr) {\n+                    llattr.apply_llfn(idx, llfn);\n+                }\n+            }\n+            if let Some(align) = self.pointee_align {\n+                llvm::LLVMRustAddAlignmentAttr(llfn, idx.as_uint(), align.bytes() as u32);\n+            }\n+            match self.arg_ext {\n+                ArgExtension::None => {}\n+                ArgExtension::Zext => llvm::Attribute::ZExt.apply_llfn(idx, llfn),\n+                ArgExtension::Sext => llvm::Attribute::SExt.apply_llfn(idx, llfn),\n+            }\n+            // Only apply remaining attributes when optimizing\n+            if cx.sess().opts.optimize == config::OptLevel::No {\n+                return;\n+            }\n             let deref = self.pointee_size.bytes();\n             if deref != 0 {\n                 if regular.contains(ArgAttribute::NonNull) {\n@@ -71,22 +80,14 @@ impl ArgAttributesExt for ArgAttributes {\n                 }\n                 regular -= ArgAttribute::NonNull;\n             }\n-            if let Some(align) = self.pointee_align {\n-                llvm::LLVMRustAddAlignmentAttr(llfn, idx.as_uint(), align.bytes() as u32);\n+            for (attr, llattr) in OPTIMIZATION_ATTRIBUTES {\n+                if regular.contains(attr) {\n+                    llattr.apply_llfn(idx, llfn);\n+                }\n             }\n-            regular.for_each_kind(|attr| attr.apply_llfn(idx, llfn));\n             if regular.contains(ArgAttribute::NoAliasMutRef) && should_use_mutable_noalias(cx) {\n                 llvm::Attribute::NoAlias.apply_llfn(idx, llfn);\n             }\n-            match self.arg_ext {\n-                ArgExtension::None => {}\n-                ArgExtension::Zext => {\n-                    llvm::Attribute::ZExt.apply_llfn(idx, llfn);\n-                }\n-                ArgExtension::Sext => {\n-                    llvm::Attribute::SExt.apply_llfn(idx, llfn);\n-                }\n-            }\n         }\n     }\n \n@@ -98,6 +99,28 @@ impl ArgAttributesExt for ArgAttributes {\n     ) {\n         let mut regular = self.regular;\n         unsafe {\n+            // ABI-affecting attributes must always be applied\n+            for (attr, llattr) in ABI_AFFECTING_ATTRIBUTES {\n+                if regular.contains(attr) {\n+                    llattr.apply_callsite(idx, callsite);\n+                }\n+            }\n+            if let Some(align) = self.pointee_align {\n+                llvm::LLVMRustAddAlignmentCallSiteAttr(\n+                    callsite,\n+                    idx.as_uint(),\n+                    align.bytes() as u32,\n+                );\n+            }\n+            match self.arg_ext {\n+                ArgExtension::None => {}\n+                ArgExtension::Zext => llvm::Attribute::ZExt.apply_callsite(idx, callsite),\n+                ArgExtension::Sext => llvm::Attribute::SExt.apply_callsite(idx, callsite),\n+            }\n+            // Only apply remaining attributes when optimizing\n+            if cx.sess().opts.optimize == config::OptLevel::No {\n+                return;\n+            }\n             let deref = self.pointee_size.bytes();\n             if deref != 0 {\n                 if regular.contains(ArgAttribute::NonNull) {\n@@ -111,26 +134,14 @@ impl ArgAttributesExt for ArgAttributes {\n                 }\n                 regular -= ArgAttribute::NonNull;\n             }\n-            if let Some(align) = self.pointee_align {\n-                llvm::LLVMRustAddAlignmentCallSiteAttr(\n-                    callsite,\n-                    idx.as_uint(),\n-                    align.bytes() as u32,\n-                );\n+            for (attr, llattr) in OPTIMIZATION_ATTRIBUTES {\n+                if regular.contains(attr) {\n+                    llattr.apply_callsite(idx, callsite);\n+                }\n             }\n-            regular.for_each_kind(|attr| attr.apply_callsite(idx, callsite));\n             if regular.contains(ArgAttribute::NoAliasMutRef) && should_use_mutable_noalias(cx) {\n                 llvm::Attribute::NoAlias.apply_callsite(idx, callsite);\n             }\n-            match self.arg_ext {\n-                ArgExtension::None => {}\n-                ArgExtension::Zext => {\n-                    llvm::Attribute::ZExt.apply_callsite(idx, callsite);\n-                }\n-                ArgExtension::Sext => {\n-                    llvm::Attribute::SExt.apply_callsite(idx, callsite);\n-                }\n-            }\n         }\n     }\n }"}, {"sha": "f550ac11f64aefd54c660064f6112f218f0bf8d8", "filename": "src/test/codegen/fastcall-inreg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8128e910c0b4046afd0a1ef818b60082903bae03/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8128e910c0b4046afd0a1ef818b60082903bae03/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs?ref=8128e910c0b4046afd0a1ef818b60082903bae03", "patch": "@@ -2,7 +2,7 @@\n // as \"inreg\" like the C/C++ compilers for the platforms.\n // x86 only.\n \n-// compile-flags: --target i686-unknown-linux-gnu -C no-prepopulate-passes\n+// compile-flags: --target i686-unknown-linux-gnu -O -C no-prepopulate-passes\n // needs-llvm-components: x86\n \n #![crate_type = \"lib\"]"}, {"sha": "94561288dc5b9778cac7070d97c7a629f7ca9eb0", "filename": "src/test/codegen/function-arguments-noopt.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/8128e910c0b4046afd0a1ef818b60082903bae03/src%2Ftest%2Fcodegen%2Ffunction-arguments-noopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8128e910c0b4046afd0a1ef818b60082903bae03/src%2Ftest%2Fcodegen%2Ffunction-arguments-noopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments-noopt.rs?ref=8128e910c0b4046afd0a1ef818b60082903bae03", "patch": "@@ -0,0 +1,63 @@\n+// compile-flags: -C opt-level=0 -C no-prepopulate-passes\n+\n+// This test checks that arguments/returns in opt-level=0 builds,\n+// while lacking attributes used for optimization, still have ABI-affecting attributes.\n+\n+#![crate_type = \"lib\"]\n+#![feature(rustc_attrs)]\n+\n+pub struct S {\n+  _field: [i32; 8],\n+}\n+\n+// CHECK: zeroext i1 @boolean(i1 zeroext %x)\n+#[no_mangle]\n+pub fn boolean(x: bool) -> bool {\n+  x\n+}\n+\n+// CHECK-LABEL: @boolean_call\n+#[no_mangle]\n+pub fn boolean_call(x: bool, f: fn(bool) -> bool) -> bool {\n+// CHECK: call zeroext i1 %f(i1 zeroext %x)\n+  f(x)\n+}\n+\n+// CHECK: align 4 i32* @borrow(i32* align 4 %x)\n+#[no_mangle]\n+pub fn borrow(x: &i32) -> &i32 {\n+  x\n+}\n+\n+// CHECK-LABEL: @borrow_call\n+#[no_mangle]\n+pub fn borrow_call(x: &i32, f: fn(&i32) -> &i32) -> &i32 {\n+  // CHECK: call align 4 i32* %f(i32* align 4 %x)\n+  f(x)\n+}\n+\n+// CHECK: void @struct_(%S* sret(%S){{( %0)?}}, %S* %x)\n+#[no_mangle]\n+pub fn struct_(x: S) -> S {\n+  x\n+}\n+\n+// CHECK-LABEL: @struct_call\n+#[no_mangle]\n+pub fn struct_call(x: S, f: fn(S) -> S) -> S {\n+  // CHECK: call void %f(%S* sret(%S){{( %0)?}}, %S* %{{.+}})\n+  f(x)\n+}\n+\n+// CHECK: { i8, i8 } @enum_(i1 zeroext %x.0, i8 %x.1)\n+#[no_mangle]\n+pub fn enum_(x: Option<u8>) -> Option<u8> {\n+  x\n+}\n+\n+// CHECK-LABEL: @enum_call\n+#[no_mangle]\n+pub fn enum_call(x: Option<u8>, f: fn(Option<u8>) -> Option<u8>) -> Option<u8> {\n+  // CHECK: call { i8, i8 } %f(i1 zeroext %x.0, i8 %x.1)\n+  f(x)\n+}"}, {"sha": "4ad3642c03d682da5647c408ba6eb69084227557", "filename": "src/test/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8128e910c0b4046afd0a1ef818b60082903bae03/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8128e910c0b4046afd0a1ef818b60082903bae03/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=8128e910c0b4046afd0a1ef818b60082903bae03", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -O -C no-prepopulate-passes\n //\n \n // ignore-arm"}, {"sha": "faf81b5ae76057c8028a4b465430367c094c1864", "filename": "src/test/codegen/riscv-abi/riscv64-lp64-lp64f-lp64d-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8128e910c0b4046afd0a1ef818b60082903bae03/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8128e910c0b4046afd0a1ef818b60082903bae03/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs?ref=8128e910c0b4046afd0a1ef818b60082903bae03", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: --target riscv64gc-unknown-linux-gnu -C no-prepopulate-passes\n+// compile-flags: --target riscv64gc-unknown-linux-gnu -O -C no-prepopulate-passes\n // needs-llvm-components: riscv\n \n #![crate_type = \"lib\"]"}, {"sha": "99576a5f57e90e3246bd9184a250c5c4d8cb2ed6", "filename": "src/test/codegen/union-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8128e910c0b4046afd0a1ef818b60082903bae03/src%2Ftest%2Fcodegen%2Funion-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8128e910c0b4046afd0a1ef818b60082903bae03/src%2Ftest%2Fcodegen%2Funion-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funion-abi.rs?ref=8128e910c0b4046afd0a1ef818b60082903bae03", "patch": "@@ -1,5 +1,5 @@\n // ignore-emscripten vectors passed directly\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -O -C no-prepopulate-passes\n \n // This test that using union forward the abi of the inner type, as\n // discussed in #54668"}]}