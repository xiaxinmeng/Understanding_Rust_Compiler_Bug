{"sha": "a05e09e9c514878148ddf26aa76d6b9183583d0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNWUwOWU5YzUxNDg3ODE0OGRkZjI2YWE3NmQ2YjkxODM1ODNkMGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-08T14:33:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-08T14:36:38Z"}, "message": "Attach comments smartly", "tree": {"sha": "f9d1d3baaa8aead60d356f0e60ca8f5e0fdcd308", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9d1d3baaa8aead60d356f0e60ca8f5e0fdcd308"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a05e09e9c514878148ddf26aa76d6b9183583d0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a05e09e9c514878148ddf26aa76d6b9183583d0f", "html_url": "https://github.com/rust-lang/rust/commit/a05e09e9c514878148ddf26aa76d6b9183583d0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a05e09e9c514878148ddf26aa76d6b9183583d0f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b642e6c6451b21d9b3fc719472a1802ea70a83d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b642e6c6451b21d9b3fc719472a1802ea70a83d8", "html_url": "https://github.com/rust-lang/rust/commit/b642e6c6451b21d9b3fc719472a1802ea70a83d8"}], "stats": {"total": 121, "additions": 97, "deletions": 24}, "files": [{"sha": "e12346cb606f9c9bcbb1a199a338ccfb777ffa8a", "filename": "crates/ra_editor/src/extend_selection.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a05e09e9c514878148ddf26aa76d6b9183583d0f/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05e09e9c514878148ddf26aa76d6b9183583d0f/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs?ref=a05e09e9c514878148ddf26aa76d6b9183583d0f", "patch": "@@ -153,6 +153,22 @@ impl S {\n         );\n     }\n \n+    #[test]\n+    fn test_extend_selection_doc_comments() {\n+        do_check(\n+            r#\"\n+struct A;\n+\n+/// bla\n+/// bla\n+struct B {\n+    <|>\n+}\n+            \"#,\n+            &[\"\\n    \\n\", \"{\\n    \\n}\", \"/// bla\\n/// bla\\nstruct B {\\n    \\n}\"]\n+        )\n+    }\n+\n     #[test]\n     fn test_extend_selection_comments() {\n         do_check("}, {"sha": "95e5ce4cc83c8ea1f7d9a2faa0c4195fb68e9289", "filename": "crates/ra_syntax/src/parser_impl/event.rs", "status": "modified", "additions": 75, "deletions": 18, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/a05e09e9c514878148ddf26aa76d6b9183583d0f/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05e09e9c514878148ddf26aa76d6b9183583d0f/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fevent.rs?ref=a05e09e9c514878148ddf26aa76d6b9183583d0f", "patch": "@@ -12,7 +12,7 @@ use {\n     TextUnit, TextRange, SmolStr,\n     lexer::Token,\n     parser_impl::Sink,\n-    SyntaxKind::{self, TOMBSTONE},\n+    SyntaxKind::{self, *},\n };\n \n \n@@ -104,7 +104,6 @@ impl<'a, S: Sink> EventProcessor<'a, S> {\n         fn tombstone() -> Event {\n             Event::Start { kind: TOMBSTONE, forward_parent: None }\n         }\n-        let mut depth = 0;\n         let mut forward_parents = Vec::new();\n \n         for i in 0..self.events.len() {\n@@ -131,25 +130,14 @@ impl<'a, S: Sink> EventProcessor<'a, S> {\n                         };\n                     }\n                     for kind in forward_parents.drain(..).rev() {\n-                        if depth > 0 {\n-                            self.eat_ws();\n-                        }\n-                        depth += 1;\n-                        self.sink.start_internal(kind);\n+                        self.start(kind);\n                     }\n                 }\n                 Event::Finish => {\n-                    depth -= 1;\n-                    if depth == 0 {\n-                        self.eat_ws();\n-                    }\n-\n-                    self.sink.finish_internal();\n-                }\n-                Event::Token {\n-                    kind,\n-                    n_raw_tokens,\n-                } => {\n+                    let last = i == self.events.len() - 1;\n+                    self.finish(last);\n+                },\n+                Event::Token { kind, n_raw_tokens } => {\n                     self.eat_ws();\n                     let n_raw_tokens = n_raw_tokens as usize;\n                     let len = self.tokens[self.token_pos..self.token_pos + n_raw_tokens]\n@@ -164,6 +152,43 @@ impl<'a, S: Sink> EventProcessor<'a, S> {\n         self.sink\n     }\n \n+    fn start(&mut self, kind: SyntaxKind) {\n+        if kind == ROOT {\n+            self.sink.start_internal(kind);\n+            return;\n+        }\n+        let n_trivias = self.tokens[self.token_pos..]\n+            .iter()\n+            .take_while(|it| it.kind.is_trivia())\n+            .count();\n+        let leading_trivias = &self.tokens[self.token_pos..self.token_pos + n_trivias];\n+        let mut trivia_end = self.text_pos + leading_trivias\n+            .iter()\n+            .map(|it| it.len)\n+            .sum::<TextUnit>();\n+\n+        let n_attached_trivias = {\n+            let leading_trivias = leading_trivias.iter().rev()\n+                .map(|it| {\n+                    let next_end = trivia_end - it.len;\n+                    let range = TextRange::from_to(next_end, trivia_end);\n+                    trivia_end = next_end;\n+                    (it.kind, &self.text[range])\n+                });\n+            n_attached_trivias(kind, leading_trivias)\n+        };\n+        self.eat_n_trivias(n_trivias - n_attached_trivias);\n+        self.sink.start_internal(kind);\n+        self.eat_n_trivias(n_attached_trivias);\n+    }\n+\n+    fn finish(&mut self, last: bool) {\n+        if last {\n+            self.eat_ws()\n+        }\n+        self.sink.finish_internal();\n+    }\n+\n     fn eat_ws(&mut self) {\n         while let Some(&token) = self.tokens.get(self.token_pos) {\n             if !token.kind.is_trivia() {\n@@ -173,6 +198,14 @@ impl<'a, S: Sink> EventProcessor<'a, S> {\n         }\n     }\n \n+    fn eat_n_trivias(&mut self, n: usize) {\n+        for _ in 0..n {\n+            let token = self.tokens[self.token_pos];\n+            assert!(token.kind.is_trivia());\n+            self.leaf(token.kind, token.len, 1);\n+        }\n+    }\n+\n     fn leaf(&mut self, kind: SyntaxKind, len: TextUnit, n_tokens: usize) {\n         let range = TextRange::offset_len(self.text_pos, len);\n         let text: SmolStr = self.text[range].into();\n@@ -181,3 +214,27 @@ impl<'a, S: Sink> EventProcessor<'a, S> {\n         self.sink.leaf(kind, text);\n     }\n }\n+\n+fn n_attached_trivias<'a>(kind: SyntaxKind, trivias: impl Iterator<Item=(SyntaxKind, &'a str)>) -> usize {\n+    match kind {\n+        STRUCT_DEF | ENUM_DEF | FN_DEF | TRAIT_DEF | MODULE => {\n+            let mut res = 0;\n+            for (i, (kind, text)) in trivias.enumerate() {\n+                match kind {\n+                    WHITESPACE => {\n+                        if text.contains(\"\\n\\n\") {\n+                            break;\n+                        }\n+                    }\n+                    COMMENT => {\n+                        res = i + 1;\n+                    }\n+                    _ => (),\n+                }\n+            }\n+            res\n+        }\n+        _ => 0,\n+    }\n+\n+}"}, {"sha": "6879c8d0a3a458d08e5a1bfc7b1b1a1ec559226e", "filename": "crates/ra_syntax/tests/data/parser/err/0025_nope.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a05e09e9c514878148ddf26aa76d6b9183583d0f/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0025_nope.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a05e09e9c514878148ddf26aa76d6b9183583d0f/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0025_nope.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0025_nope.txt?ref=a05e09e9c514878148ddf26aa76d6b9183583d0f", "patch": "@@ -137,9 +137,9 @@ ROOT@[0; 575)\n           BLOCK@[306; 459)\n             L_CURLY@[306; 307)\n             WHITESPACE@[307; 316)\n-            COMMENT@[316; 329)\n-            WHITESPACE@[329; 338)\n-            ENUM_DEF@[338; 453)\n+            ENUM_DEF@[316; 453)\n+              COMMENT@[316; 329)\n+              WHITESPACE@[329; 338)\n               ENUM_KW@[338; 342)\n               WHITESPACE@[342; 343)\n               NAME@[343; 348)"}, {"sha": "201eca644eb5682569ece56348720b556074703f", "filename": "crates/ra_syntax/tests/data/parser/ok/0033_label_break.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a05e09e9c514878148ddf26aa76d6b9183583d0f/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0033_label_break.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a05e09e9c514878148ddf26aa76d6b9183583d0f/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0033_label_break.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0033_label_break.txt?ref=a05e09e9c514878148ddf26aa76d6b9183583d0f", "patch": "@@ -1,7 +1,7 @@\n ROOT@[0; 506)\n-  COMMENT@[0; 33)\n-  WHITESPACE@[33; 34)\n-  FN_DEF@[34; 505)\n+  FN_DEF@[0; 505)\n+    COMMENT@[0; 33)\n+    WHITESPACE@[33; 34)\n     FN_KW@[34; 36)\n     WHITESPACE@[36; 37)\n     NAME@[37; 41)"}]}