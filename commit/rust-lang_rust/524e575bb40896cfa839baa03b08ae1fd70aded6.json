{"sha": "524e575bb40896cfa839baa03b08ae1fd70aded6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNGU1NzViYjQwODk2Y2ZhODM5YmFhMDNiMDhhZTFmZDcwYWRlZDY=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-06-12T23:49:48Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-06-29T23:08:26Z"}, "message": "Support allocation failures when interperting MIR\n\nNote that this breaks Miri.\n\nCloses #79601", "tree": {"sha": "dcecefffb61a7a04c9726cd0671e368cdc335d07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcecefffb61a7a04c9726cd0671e368cdc335d07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/524e575bb40896cfa839baa03b08ae1fd70aded6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/524e575bb40896cfa839baa03b08ae1fd70aded6", "html_url": "https://github.com/rust-lang/rust/commit/524e575bb40896cfa839baa03b08ae1fd70aded6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/524e575bb40896cfa839baa03b08ae1fd70aded6/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e0b554619a3bb7e75b3334e97f191af20ef5d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e0b554619a3bb7e75b3334e97f191af20ef5d76", "html_url": "https://github.com/rust-lang/rust/commit/6e0b554619a3bb7e75b3334e97f191af20ef5d76"}], "stats": {"total": 142, "additions": 103, "deletions": 39}, "files": [{"sha": "5788aabaadcd2a75f1954297576edb36a29e2609", "filename": "compiler/rustc_codegen_cranelift/src/vtable.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -72,7 +72,10 @@ pub(crate) fn get_vtable<'tcx>(\n     let vtable_ptr = if let Some(vtable_ptr) = fx.vtables.get(&(ty, trait_ref)) {\n         *vtable_ptr\n     } else {\n-        let vtable_alloc_id = fx.tcx.vtable_allocation(ty, trait_ref);\n+        let vtable_alloc_id = match fx.tcx.vtable_allocation(ty, trait_ref) {\n+            Ok(alloc) => alloc,\n+            Err(_) => fx.tcx.sess().fatal(\"allocation of constant vtable failed\"),\n+        };\n         let vtable_allocation = fx.tcx.global_alloc(vtable_alloc_id).unwrap_memory();\n         let vtable_ptr = pointer_for_allocation(fx, vtable_allocation);\n "}, {"sha": "fcaafb94cfd5bb903d8654728b7ce63e71557a92", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -70,7 +70,10 @@ pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n         return val;\n     }\n \n-    let vtable_alloc_id = tcx.vtable_allocation(ty, trait_ref);\n+    let vtable_alloc_id = match tcx.vtable_allocation(ty, trait_ref) {\n+        Ok(alloc) => alloc,\n+        Err(_) => tcx.sess.fatal(\"allocation of constant vtable failed\"),\n+    };\n     let vtable_allocation = tcx.global_alloc(vtable_alloc_id).unwrap_memory();\n     let vtable_const = cx.const_data_from_alloc(vtable_allocation);\n     let align = cx.data_layout().pointer_align.abi;"}, {"sha": "57f507290e8945723738309478171b8ec422a9a6", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -48,6 +48,7 @@\n #![feature(associated_type_defaults)]\n #![feature(iter_zip)]\n #![feature(thread_local_const_init)]\n+#![feature(try_reserve)]\n #![recursion_limit = \"512\"]\n \n #[macro_use]"}, {"sha": "7405a70d39ad07fa64be055b3f6e782e8d4e1e53", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -11,8 +11,9 @@ use rustc_data_structures::sorted_map::SortedMap;\n use rustc_target::abi::{Align, HasDataLayout, Size};\n \n use super::{\n-    read_target_uint, write_target_uint, AllocId, InterpError, Pointer, Scalar, ScalarMaybeUninit,\n-    UndefinedBehaviorInfo, UninitBytesAccess, UnsupportedOpInfo,\n+    read_target_uint, write_target_uint, AllocId, InterpError, InterpResult, Pointer,\n+    ResourceExhaustionInfo, Scalar, ScalarMaybeUninit, UndefinedBehaviorInfo, UninitBytesAccess,\n+    UnsupportedOpInfo,\n };\n \n /// This type represents an Allocation in the Miri/CTFE core engine.\n@@ -121,15 +122,23 @@ impl<Tag> Allocation<Tag> {\n         Allocation::from_bytes(slice, Align::ONE, Mutability::Not)\n     }\n \n-    pub fn uninit(size: Size, align: Align) -> Self {\n-        Allocation {\n-            bytes: vec![0; size.bytes_usize()],\n+    /// Try to create an Allocation of `size` bytes, failing if there is not enough memory\n+    /// available to the compiler to do so.\n+    pub fn uninit(size: Size, align: Align) -> InterpResult<'static, Self> {\n+        let mut bytes = Vec::new();\n+        bytes.try_reserve(size.bytes_usize()).map_err(|_| {\n+            InterpError::ResourceExhaustion(ResourceExhaustionInfo::MemoryExhausted)\n+        })?;\n+        bytes.resize(size.bytes_usize(), 0);\n+        bytes.fill(0);\n+        Ok(Allocation {\n+            bytes: bytes,\n             relocations: Relocations::new(),\n             init_mask: InitMask::new(size, false),\n             align,\n             mutability: Mutability::Mut,\n             extra: (),\n-        }\n+        })\n     }\n }\n "}, {"sha": "137a0bb77e3b5a9f8850d9fc282b8d5c3cc9ddcc", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -423,6 +423,8 @@ pub enum ResourceExhaustionInfo {\n     ///\n     /// The exact limit is set by the `const_eval_limit` attribute.\n     StepLimitReached,\n+    /// There is not enough memory to perform an allocation.\n+    MemoryExhausted,\n }\n \n impl fmt::Display for ResourceExhaustionInfo {\n@@ -435,6 +437,9 @@ impl fmt::Display for ResourceExhaustionInfo {\n             StepLimitReached => {\n                 write!(f, \"exceeded interpreter step limit (see `#[const_eval_limit]`)\")\n             }\n+            MemoryExhausted => {\n+                write!(f, \"tried to allocate more memory than available to compiler\")\n+            }\n         }\n     }\n }"}, {"sha": "61c146d03a328337ca21bdaeb1bcc7b6f2dad243", "filename": "compiler/rustc_middle/src/ty/vtable.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -1,6 +1,6 @@\n use std::convert::TryFrom;\n \n-use crate::mir::interpret::{alloc_range, AllocId, Allocation, Pointer, Scalar};\n+use crate::mir::interpret::{alloc_range, AllocId, Allocation, Pointer, Scalar, InterpResult};\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{self, DefId, SubstsRef, Ty, TyCtxt};\n use rustc_ast::Mutability;\n@@ -28,11 +28,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         ty: Ty<'tcx>,\n         poly_trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n-    ) -> AllocId {\n+    ) -> InterpResult<'tcx, AllocId> {\n         let tcx = self;\n         let vtables_cache = tcx.vtables_cache.lock();\n         if let Some(alloc_id) = vtables_cache.get(&(ty, poly_trait_ref)).cloned() {\n-            return alloc_id;\n+            return Ok(alloc_id);\n         }\n         drop(vtables_cache);\n \n@@ -60,7 +60,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let ptr_align = tcx.data_layout.pointer_align.abi;\n \n         let vtable_size = ptr_size * u64::try_from(vtable_entries.len()).unwrap();\n-        let mut vtable = Allocation::uninit(vtable_size, ptr_align);\n+        let mut vtable = Allocation::uninit(vtable_size, ptr_align)?;\n \n         // No need to do any alignment checks on the memory accesses below, because we know the\n         // allocation is correctly aligned as we created it above. Also we're only offsetting by\n@@ -101,6 +101,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         let alloc_id = tcx.create_memory_alloc(tcx.intern_const_alloc(vtable));\n         let mut vtables_cache = self.vtables_cache.lock();\n         vtables_cache.insert((ty, poly_trait_ref), alloc_id);\n-        alloc_id\n+        Ok(alloc_id)\n     }\n }"}, {"sha": "7a7dbe50e72f9447f808b10bce25a734863e427c", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -48,7 +48,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     );\n     let layout = ecx.layout_of(body.return_ty().subst(tcx, cid.instance.substs))?;\n     assert!(!layout.is_unsized());\n-    let ret = ecx.allocate(layout, MemoryKind::Stack);\n+    let ret = ecx.allocate(layout, MemoryKind::Stack)?;\n \n     let name =\n         with_no_trimmed_paths(|| ty::tls::with(|tcx| tcx.def_path_str(cid.instance.def_id())));"}, {"sha": "ddc87084e9fd19cf075f68e9e2d818351e8ad544", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -306,7 +306,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                     Size::from_bytes(size as u64),\n                     align,\n                     interpret::MemoryKind::Machine(MemoryKind::Heap),\n-                );\n+                )?;\n                 ecx.write_scalar(Scalar::Ptr(ptr), dest)?;\n             }\n             _ => {"}, {"sha": "8e379f9eb28340daccc39f65d2a78b3b2275f658", "filename": "compiler/rustc_mir/src/const_eval/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -31,7 +31,11 @@ pub(crate) fn const_caller_location(\n     trace!(\"const_caller_location: {}:{}:{}\", file, line, col);\n     let mut ecx = mk_eval_cx(tcx, DUMMY_SP, ty::ParamEnv::reveal_all(), false);\n \n-    let loc_place = ecx.alloc_caller_location(file, line, col);\n+    // This can fail if rustc runs out of memory right here. Trying to emit an error would be\n+    // pointless, since that would require allocating more memory than a Location.\n+    let loc_place = ecx\n+        .alloc_caller_location(file, line, col)\n+        .expect(\"not enough memory to allocate location?\");\n     if intern_const_alloc_recursive(&mut ecx, InternKind::Constant, &loc_place).is_err() {\n         bug!(\"intern_const_alloc_recursive should not error in this case\")\n     }"}, {"sha": "2862670dc7c46d0c1c48b5e09343c1e13c7070c8", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -428,7 +428,7 @@ impl<'mir, 'tcx: 'mir, M: super::intern::CompileTimeMachine<'mir, 'tcx, !>>\n             &MPlaceTy<'tcx, M::PointerTag>,\n         ) -> InterpResult<'tcx, ()>,\n     ) -> InterpResult<'tcx, &'tcx Allocation> {\n-        let dest = self.allocate(layout, MemoryKind::Stack);\n+        let dest = self.allocate(layout, MemoryKind::Stack)?;\n         f(self, &dest)?;\n         let ptr = dest.ptr.assert_ptr();\n         assert_eq!(ptr.offset, Size::ZERO);"}, {"sha": "92484054e86a317c795208dc4b2d6358cde738b4", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -137,7 +137,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match intrinsic_name {\n             sym::caller_location => {\n                 let span = self.find_closest_untracked_caller_location();\n-                let location = self.alloc_caller_location_for_span(span);\n+                let location = self.alloc_caller_location_for_span(span)?;\n                 self.write_scalar(location.ptr, dest)?;\n             }\n "}, {"sha": "d3e3a565adafbfb7a34c0ed102c26e897ce947e2", "filename": "compiler/rustc_mir/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -9,7 +9,7 @@ use rustc_target::abi::LayoutOf;\n \n use crate::interpret::{\n     intrinsics::{InterpCx, Machine},\n-    MPlaceTy, MemoryKind, Scalar,\n+    InterpResult, MPlaceTy, MemoryKind, Scalar,\n };\n \n impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n@@ -79,7 +79,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         filename: Symbol,\n         line: u32,\n         col: u32,\n-    ) -> MPlaceTy<'tcx, M::PointerTag> {\n+    ) -> InterpResult<'static, MPlaceTy<'tcx, M::PointerTag>> {\n         let file =\n             self.allocate_str(&filename.as_str(), MemoryKind::CallerLocation, Mutability::Not);\n         let line = Scalar::from_u32(line);\n@@ -91,7 +91,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             .type_of(self.tcx.require_lang_item(LangItem::PanicLocation, None))\n             .subst(*self.tcx, self.tcx.mk_substs([self.tcx.lifetimes.re_erased.into()].iter()));\n         let loc_layout = self.layout_of(loc_ty).unwrap();\n-        let location = self.allocate(loc_layout, MemoryKind::CallerLocation);\n+        let location = self.allocate(loc_layout, MemoryKind::CallerLocation)?;\n \n         // Initialize fields.\n         self.write_immediate(file.to_ref(), &self.mplace_field(&location, 0).unwrap().into())\n@@ -101,7 +101,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.write_scalar(col, &self.mplace_field(&location, 2).unwrap().into())\n             .expect(\"writing to memory we just allocated cannot fail\");\n \n-        location\n+        Ok(location)\n     }\n \n     crate fn location_triple_for_span(&self, span: Span) -> (Symbol, u32, u32) {\n@@ -114,7 +114,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         )\n     }\n \n-    pub fn alloc_caller_location_for_span(&mut self, span: Span) -> MPlaceTy<'tcx, M::PointerTag> {\n+    pub fn alloc_caller_location_for_span(\n+        &mut self,\n+        span: Span,\n+    ) -> InterpResult<'static, MPlaceTy<'tcx, M::PointerTag>> {\n         let (file, line, column) = self.location_triple_for_span(span);\n         self.alloc_caller_location(file, line, column)\n     }"}, {"sha": "671e3d278f3669f0bf469cc952df7ef54e0d5d96", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -207,9 +207,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         size: Size,\n         align: Align,\n         kind: MemoryKind<M::MemoryKind>,\n-    ) -> Pointer<M::PointerTag> {\n-        let alloc = Allocation::uninit(size, align);\n-        self.allocate_with(alloc, kind)\n+    ) -> InterpResult<'static, Pointer<M::PointerTag>> {\n+        let alloc = Allocation::uninit(size, align)?;\n+        Ok(self.allocate_with(alloc, kind))\n     }\n \n     pub fn allocate_bytes(\n@@ -257,7 +257,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n         // For simplicities' sake, we implement reallocate as \"alloc, copy, dealloc\".\n         // This happens so rarely, the perf advantage is outweighed by the maintenance cost.\n-        let new_ptr = self.allocate(new_size, new_align, kind);\n+        let new_ptr = self.allocate(new_size, new_align, kind)?;\n         let old_size = match old_size_and_align {\n             Some((size, _align)) => size,\n             None => self.get_raw(ptr.alloc_id)?.size(),"}, {"sha": "42a304ce41213337d7614c1063c74e4c9ab8604d", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -982,7 +982,7 @@ where\n                         let (size, align) = self\n                             .size_and_align_of(&meta, &local_layout)?\n                             .expect(\"Cannot allocate for non-dyn-sized type\");\n-                        let ptr = self.memory.allocate(size, align, MemoryKind::Stack);\n+                        let ptr = self.memory.allocate(size, align, MemoryKind::Stack)?;\n                         let mplace = MemPlace { ptr: ptr.into(), align, meta };\n                         if let LocalValue::Live(Operand::Immediate(value)) = local_val {\n                             // Preserve old value.\n@@ -1018,9 +1018,9 @@ where\n         &mut self,\n         layout: TyAndLayout<'tcx>,\n         kind: MemoryKind<M::MemoryKind>,\n-    ) -> MPlaceTy<'tcx, M::PointerTag> {\n-        let ptr = self.memory.allocate(layout.size, layout.align.abi, kind);\n-        MPlaceTy::from_aligned_ptr(ptr, layout)\n+    ) -> InterpResult<'static, MPlaceTy<'tcx, M::PointerTag>> {\n+        let ptr = self.memory.allocate(layout.size, layout.align.abi, kind)?;\n+        Ok(MPlaceTy::from_aligned_ptr(ptr, layout))\n     }\n \n     /// Returns a wide MPlace of type `&'static [mut] str` to a new 1-aligned allocation."}, {"sha": "94948948ccfac618ea4f88aa3b7ee57da9276422", "filename": "compiler/rustc_mir/src/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -30,7 +30,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         ensure_monomorphic_enough(*self.tcx, ty)?;\n         ensure_monomorphic_enough(*self.tcx, poly_trait_ref)?;\n \n-        let vtable_allocation = self.tcx.vtable_allocation(ty, poly_trait_ref);\n+        let vtable_allocation = self.tcx.vtable_allocation(ty, poly_trait_ref)?;\n \n         let vtable_ptr = self.memory.global_base_pointer(Pointer::from(vtable_allocation))?;\n "}, {"sha": "a58ded9cfd3a4b77f682fe61775aa5fdabf88cdb", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -29,6 +29,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(option_get_or_insert_default)]\n #![feature(once_cell)]\n #![feature(control_flow_enum)]\n+#![feature(try_reserve)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "48108b69a370260499a809ad9acebbb480dc43af", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -385,15 +385,19 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             (),\n         );\n \n-        let ret = ecx\n-            .layout_of(body.return_ty().subst(tcx, substs))\n-            .ok()\n+        let ret = if let Ok(layout) = ecx.layout_of(body.return_ty().subst(tcx, substs)) {\n             // Don't bother allocating memory for ZST types which have no values\n             // or for large values.\n-            .filter(|ret_layout| {\n-                !ret_layout.is_zst() && ret_layout.size < Size::from_bytes(MAX_ALLOC_LIMIT)\n-            })\n-            .map(|ret_layout| ecx.allocate(ret_layout, MemoryKind::Stack).into());\n+            if !layout.is_zst() && layout.size < Size::from_bytes(MAX_ALLOC_LIMIT) {\n+                // hopefully all types will allocate, since large types have already been removed,\n+                // but check anyways\n+                ecx.allocate(layout, MemoryKind::Stack).ok().map(Into::into)\n+            } else {\n+                None\n+            }\n+        } else {\n+            None\n+        };\n \n         ecx.push_stack_frame(\n             Instance::new(def_id, substs),"}, {"sha": "d5c90c0d6cf2180b584690f1c171adcbce9d799d", "filename": "src/test/ui/consts/large_const_alloc.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/src%2Ftest%2Fui%2Fconsts%2Flarge_const_alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/src%2Ftest%2Fui%2Fconsts%2Flarge_const_alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Flarge_const_alloc.rs?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -0,0 +1,13 @@\n+// only-64bit\n+// on 32bit and 16bit platforms it is plausible that the maximum allocation size will succeed\n+\n+const FOO: () = {\n+    // 128 TiB, unlikely anyone has that much RAM\n+    let x = [0_u8; (1 << 47) - 1];\n+    //~^ ERROR any use of this value will cause an error\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+};\n+\n+fn main() {\n+    let _ = FOO;\n+}"}, {"sha": "bf05cdb4a1d1156fb8f65545f6bd147409766e10", "filename": "src/test/ui/consts/large_const_alloc.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/524e575bb40896cfa839baa03b08ae1fd70aded6/src%2Ftest%2Fui%2Fconsts%2Flarge_const_alloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/524e575bb40896cfa839baa03b08ae1fd70aded6/src%2Ftest%2Fui%2Fconsts%2Flarge_const_alloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Flarge_const_alloc.stderr?ref=524e575bb40896cfa839baa03b08ae1fd70aded6", "patch": "@@ -0,0 +1,18 @@\n+error: any use of this value will cause an error\n+  --> $DIR/large_const_alloc.rs:6:13\n+   |\n+LL | / const FOO: () = {\n+LL | |     // 128 TiB, unlikely anyone has that much RAM\n+LL | |     let x = [0_u8; (1 << 47) - 1];\n+   | |             ^^^^^^^^^^^^^^^^^^^^^ tried to allocate more memory than available to compiler\n+LL | |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to previous error\n+"}]}