{"sha": "b8075e4550a3ec9110930b41e09e77266482e54f", "node_id": "C_kwDOAAsO6NoAKGI4MDc1ZTQ1NTBhM2VjOTExMDkzMGI0MWUwOWU3NzI2NjQ4MmU1NGY", "commit": {"author": {"name": "Yuanheng Li", "email": "520dhh@gmail.com", "date": "2022-08-21T13:37:05Z"}, "committer": {"name": "Li Yuanheng", "email": "520dhh@gmail.com", "date": "2022-08-31T11:33:51Z"}, "message": "migrate rustc_query_system to use SessionDiagnostic\n\nwith manual impl SessionDiagnostic", "tree": {"sha": "7c00a0bc626ab45b7937332a03f2b5ece4f3e4e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c00a0bc626ab45b7937332a03f2b5ece4f3e4e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8075e4550a3ec9110930b41e09e77266482e54f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8075e4550a3ec9110930b41e09e77266482e54f", "html_url": "https://github.com/rust-lang/rust/commit/b8075e4550a3ec9110930b41e09e77266482e54f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8075e4550a3ec9110930b41e09e77266482e54f/comments", "author": {"login": "evopen", "id": 1773234, "node_id": "MDQ6VXNlcjE3NzMyMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1773234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evopen", "html_url": "https://github.com/evopen", "followers_url": "https://api.github.com/users/evopen/followers", "following_url": "https://api.github.com/users/evopen/following{/other_user}", "gists_url": "https://api.github.com/users/evopen/gists{/gist_id}", "starred_url": "https://api.github.com/users/evopen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evopen/subscriptions", "organizations_url": "https://api.github.com/users/evopen/orgs", "repos_url": "https://api.github.com/users/evopen/repos", "events_url": "https://api.github.com/users/evopen/events{/privacy}", "received_events_url": "https://api.github.com/users/evopen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "evopen", "id": 1773234, "node_id": "MDQ6VXNlcjE3NzMyMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1773234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evopen", "html_url": "https://github.com/evopen", "followers_url": "https://api.github.com/users/evopen/followers", "following_url": "https://api.github.com/users/evopen/following{/other_user}", "gists_url": "https://api.github.com/users/evopen/gists{/gist_id}", "starred_url": "https://api.github.com/users/evopen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evopen/subscriptions", "organizations_url": "https://api.github.com/users/evopen/orgs", "repos_url": "https://api.github.com/users/evopen/repos", "events_url": "https://api.github.com/users/evopen/events{/privacy}", "received_events_url": "https://api.github.com/users/evopen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12e4fd0755d7d976d4ee0f2004dc938290752ff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/12e4fd0755d7d976d4ee0f2004dc938290752ff7", "html_url": "https://github.com/rust-lang/rust/commit/12e4fd0755d7d976d4ee0f2004dc938290752ff7"}], "stats": {"total": 154, "additions": 108, "deletions": 46}, "files": [{"sha": "2d8c7a65122515a7a87f65db498fdcd5432ff25b", "filename": "compiler/rustc_error_messages/locales/en-US/query_system.ftl", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b8075e4550a3ec9110930b41e09e77266482e54f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fquery_system.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/b8075e4550a3ec9110930b41e09e77266482e54f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fquery_system.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fquery_system.ftl?ref=b8075e4550a3ec9110930b41e09e77266482e54f", "patch": "@@ -0,0 +1,21 @@\n+query_system_reentrant = internal compiler error: re-entrant incremental verify failure, suppressing message\n+\n+query_system_increment_compilation = internal compiler error: encountered incremental compilation error with {$dep_node}\n+    .help = This is a known issue with the compiler. Run {$run_cmd} to allow your project to compile\n+\n+query_system_increment_compilation_note1 = Please follow the instructions below to create a bug report with the provided information\n+query_system_increment_compilation_note2 = See <https://github.com/rust-lang/rust/issues/84970> for more information\n+\n+query_system_cycle = cycle detected when {$stack_bottom}\n+\n+query_system_cycle_usage = cycle used when {$usage}\n+\n+query_system_cycle_stack_single = ...which immediately requires {$stack_bottom} again\n+\n+query_system_cycle_stack_multiple = ...which again requires {$stack_bottom}, completing the cycle\n+\n+query_system_cycle_recursive_ty_alias = type aliases cannot be recursive\n+query_system_cycle_recursive_ty_alias_help1 = consider using a struct, enum, or union instead to break the cycle\n+query_system_cycle_recursive_ty_alias_help2 = see <https://doc.rust-lang.org/reference/types.html#recursive-types> for more information\n+\n+query_system_cycle_recursive_trait_alias = trait aliases cannot be recursive"}, {"sha": "601fa4c72f0bd7096df5805387a6a8ec8a3d0667", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8075e4550a3ec9110930b41e09e77266482e54f/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8075e4550a3ec9110930b41e09e77266482e54f/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=b8075e4550a3ec9110930b41e09e77266482e54f", "patch": "@@ -52,6 +52,7 @@ fluent_messages! {\n     ty_utils => \"../locales/en-US/ty_utils.ftl\",\n     typeck => \"../locales/en-US/typeck.ftl\",\n     mir_dataflow => \"../locales/en-US/mir_dataflow.ftl\",\n+    query_system => \"../locales/en-US/query_system.ftl\",\n }\n \n pub use fluent_generated::{self as fluent, DEFAULT_LOCALE_RESOURCES};"}, {"sha": "2ae6d10b82839c60e3b70149959f95e60db67dd0", "filename": "compiler/rustc_query_system/src/error.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b8075e4550a3ec9110930b41e09e77266482e54f/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8075e4550a3ec9110930b41e09e77266482e54f/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs?ref=b8075e4550a3ec9110930b41e09e77266482e54f", "patch": "@@ -0,0 +1,60 @@\n+use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_session::SessionDiagnostic;\n+use rustc_span::Span;\n+\n+pub struct Cycle {\n+    pub span: Span,\n+    pub stack_bottom: String,\n+    pub upper_stack_info: Vec<(Span, String)>,\n+    pub recursive_ty_alias: bool,\n+    pub recursive_trait_alias: bool,\n+    pub cycle_usage: Option<(Span, String)>,\n+}\n+\n+impl SessionDiagnostic<'_> for Cycle {\n+    fn into_diagnostic(\n+        self,\n+        sess: &'_ rustc_session::parse::ParseSess,\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let mut diag = sess.struct_err(rustc_errors::fluent::query_system::cycle);\n+        diag.set_span(self.span);\n+        diag.code(rustc_errors::DiagnosticId::Error(\"E0391\".to_string()));\n+        let upper_stack_len = self.upper_stack_info.len();\n+        for (span, desc) in self.upper_stack_info.into_iter() {\n+            // FIXME: use fluent translation\n+            diag.span_note(span, &format!(\"...which requires {}...\", desc));\n+        }\n+        diag.set_arg(\"stack_bottom\", self.stack_bottom);\n+        if upper_stack_len == 0 {\n+            diag.note(rustc_errors::fluent::query_system::cycle_stack_single);\n+        } else {\n+            diag.note(rustc_errors::fluent::query_system::cycle_stack_multiple);\n+        }\n+        if self.recursive_trait_alias {\n+            diag.note(rustc_errors::fluent::query_system::cycle_recursive_trait_alias);\n+        } else if self.recursive_ty_alias {\n+            diag.note(rustc_errors::fluent::query_system::cycle_recursive_ty_alias);\n+            diag.help(rustc_errors::fluent::query_system::cycle_recursive_ty_alias_help1);\n+            diag.help(rustc_errors::fluent::query_system::cycle_recursive_ty_alias_help2);\n+        }\n+        if let Some((span, desc)) = self.cycle_usage {\n+            diag.set_arg(\"usage\", desc);\n+            diag.span_note(span, rustc_errors::fluent::query_system::cycle_usage);\n+        }\n+        diag\n+    }\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(query_system::reentrant)]\n+pub struct Reentrant;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(query_system::increment_compilation)]\n+#[help]\n+#[note(query_system::increment_compilation_note1)]\n+#[note(query_system::increment_compilation_note2)]\n+pub struct IncrementCompilation {\n+    pub run_cmd: String,\n+    pub dep_node: String,\n+}"}, {"sha": "da775893a2b0a568e15cda3238406129c4d6c06a", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8075e4550a3ec9110930b41e09e77266482e54f/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8075e4550a3ec9110930b41e09e77266482e54f/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=b8075e4550a3ec9110930b41e09e77266482e54f", "patch": "@@ -5,6 +5,8 @@\n #![feature(min_specialization)]\n #![feature(extern_types)]\n #![allow(rustc::potential_query_instability)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate tracing;\n@@ -15,5 +17,6 @@ extern crate rustc_macros;\n \n pub mod cache;\n pub mod dep_graph;\n+mod error;\n pub mod ich;\n pub mod query;"}, {"sha": "718ec14db3624b6021f85725ddd83419099eb823", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 18, "deletions": 37, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b8075e4550a3ec9110930b41e09e77266482e54f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8075e4550a3ec9110930b41e09e77266482e54f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=b8075e4550a3ec9110930b41e09e77266482e54f", "patch": "@@ -1,12 +1,10 @@\n use crate::query::plumbing::CycleError;\n use crate::query::{QueryContext, QueryStackFrame};\n-use rustc_hir::def::DefKind;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{\n-    struct_span_err, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, Handler, Level,\n-};\n-use rustc_session::Session;\n+use rustc_errors::{Diagnostic, DiagnosticBuilder, ErrorGuaranteed, Handler, Level};\n+use rustc_hir::def::DefKind;\n+use rustc_session::{Session, SessionDiagnostic};\n use rustc_span::Span;\n \n use std::hash::Hash;\n@@ -536,46 +534,29 @@ pub(crate) fn report_cycle<'a>(\n     assert!(!stack.is_empty());\n \n     let span = stack[0].query.default_span(stack[1 % stack.len()].span);\n-    let mut err =\n-        struct_span_err!(sess, span, E0391, \"cycle detected when {}\", stack[0].query.description);\n+\n+    let mut cycle_diag = crate::error::Cycle {\n+        span,\n+        upper_stack_info: Vec::with_capacity(stack.len() - 1),\n+        stack_bottom: stack[0].query.description.to_owned(),\n+        recursive_ty_alias: false,\n+        recursive_trait_alias: false,\n+        cycle_usage: usage.map(|(span, query)| (query.default_span(span), query.description)),\n+    };\n \n     for i in 1..stack.len() {\n         let query = &stack[i].query;\n         let span = query.default_span(stack[(i + 1) % stack.len()].span);\n-        err.span_note(span, &format!(\"...which requires {}...\", query.description));\n-    }\n-\n-    if stack.len() == 1 {\n-        err.note(&format!(\"...which immediately requires {} again\", stack[0].query.description));\n-    } else {\n-        err.note(&format!(\n-            \"...which again requires {}, completing the cycle\",\n-            stack[0].query.description\n-        ));\n-    }\n-\n-    if stack.iter().all(|entry| {\n-        entry\n-            .query\n-            .def_kind\n-            .map_or(false, |def_kind| matches!(def_kind, DefKind::TyAlias | DefKind::TraitAlias))\n-    }) {\n-        if stack.iter().all(|entry| {\n-            entry.query.def_kind.map_or(false, |def_kind| matches!(def_kind, DefKind::TyAlias))\n-        }) {\n-            err.note(\"type aliases cannot be recursive\");\n-            err.help(\"consider using a struct, enum, or union instead to break the cycle\");\n-            err.help(\"see <https://doc.rust-lang.org/reference/types.html#recursive-types> for more information\");\n-        } else {\n-            err.note(\"trait aliases cannot be recursive\");\n-        }\n+        cycle_diag.upper_stack_info.push((span, query.description.to_owned()));\n     }\n \n-    if let Some((span, query)) = usage {\n-        err.span_note(query.default_span(span), &format!(\"cycle used when {}\", query.description));\n+    if stack.iter().all(|entry| entry.query.def_kind == Some(DefKind::TyAlias)) {\n+        cycle_diag.recursive_ty_alias = true;\n+    } else if stack.iter().all(|entry| entry.query.def_kind == Some(DefKind::TraitAlias)) {\n+        cycle_diag.recursive_trait_alias = true;\n     }\n \n-    err\n+    cycle_diag.into_diagnostic(&sess.parse_sess)\n }\n \n pub fn print_query_stack<CTX: QueryContext>("}, {"sha": "e97411b777b4f847740916904d6390621f8a724b", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8075e4550a3ec9110930b41e09e77266482e54f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8075e4550a3ec9110930b41e09e77266482e54f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=b8075e4550a3ec9110930b41e09e77266482e54f", "patch": "@@ -618,16 +618,12 @@ fn incremental_verify_ich_cold(sess: &Session, dep_node: DebugArg<'_>, result: D\n     let old_in_panic = INSIDE_VERIFY_PANIC.with(|in_panic| in_panic.replace(true));\n \n     if old_in_panic {\n-        sess.struct_err(\n-            \"internal compiler error: re-entrant incremental verify failure, suppressing message\",\n-        )\n-        .emit();\n+        sess.emit_err(crate::error::Reentrant);\n     } else {\n-        sess.struct_err(&format!(\"internal compiler error: encountered incremental compilation error with {:?}\", dep_node))\n-                .help(&format!(\"This is a known issue with the compiler. Run {} to allow your project to compile\", run_cmd))\n-                .note(\"Please follow the instructions below to create a bug report with the provided information\")\n-                .note(\"See <https://github.com/rust-lang/rust/issues/84970> for more information\")\n-                .emit();\n+        sess.emit_err(crate::error::IncrementCompilation {\n+            run_cmd,\n+            dep_node: format!(\"{:?}\", dep_node),\n+        });\n         panic!(\"Found unstable fingerprints for {:?}: {:?}\", dep_node, result);\n     }\n "}]}