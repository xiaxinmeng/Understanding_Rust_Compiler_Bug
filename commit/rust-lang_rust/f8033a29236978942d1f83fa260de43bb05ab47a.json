{"sha": "f8033a29236978942d1f83fa260de43bb05ab47a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MDMzYTI5MjM2OTc4OTQyZDFmODNmYTI2MGRlNDNiYjA1YWI0N2E=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-23T20:31:45Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-08T14:21:06Z"}, "message": "fixup", "tree": {"sha": "7e176723032c7c1551afb92566d292bdba323e9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e176723032c7c1551afb92566d292bdba323e9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8033a29236978942d1f83fa260de43bb05ab47a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8033a29236978942d1f83fa260de43bb05ab47a", "html_url": "https://github.com/rust-lang/rust/commit/f8033a29236978942d1f83fa260de43bb05ab47a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8033a29236978942d1f83fa260de43bb05ab47a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83530120eabdaf770d5d2f19c7fd656cf59efdbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/83530120eabdaf770d5d2f19c7fd656cf59efdbb", "html_url": "https://github.com/rust-lang/rust/commit/83530120eabdaf770d5d2f19c7fd656cf59efdbb"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "3f9a093149423344e7d59a3d3d79da2b06f68992", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f8033a29236978942d1f83fa260de43bb05ab47a/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8033a29236978942d1f83fa260de43bb05ab47a/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=f8033a29236978942d1f83fa260de43bb05ab47a", "patch": "@@ -32,6 +32,8 @@ pub fn pkgname(builder: &Builder, component: &str) -> String {\n         format!(\"{}-{}\", component, builder.rls_package_vers())\n     } else if component == \"clippy\" {\n         format!(\"{}-{}\", component, builder.clippy_package_vers())\n+    } else if component == \"miri\" {\n+        format!(\"{}-{}\", component, builder.miri_package_vers())\n     } else if component == \"rustfmt\" {\n         format!(\"{}-{}\", component, builder.rustfmt_package_vers())\n     } else if component == \"llvm-tools\" {\n@@ -1480,6 +1482,7 @@ impl Step for Extended {\n         let rls_installer = builder.ensure(Rls { stage, target });\n         let llvm_tools_installer = builder.ensure(LlvmTools { stage, target });\n         let clippy_installer = builder.ensure(Clippy { stage, target });\n+        let miri_installer = builder.ensure(Miri { stage, target });\n         let lldb_installer = builder.ensure(Lldb { target });\n         let mingw_installer = builder.ensure(Mingw { host: target });\n         let analysis_installer = builder.ensure(Analysis {\n@@ -1518,6 +1521,7 @@ impl Step for Extended {\n         tarballs.push(cargo_installer);\n         tarballs.extend(rls_installer.clone());\n         tarballs.extend(clippy_installer.clone());\n+        tarballs.extend(miri_installer.clone());\n         tarballs.extend(rustfmt_installer.clone());\n         tarballs.extend(llvm_tools_installer);\n         tarballs.extend(lldb_installer);\n@@ -1590,6 +1594,9 @@ impl Step for Extended {\n             if clippy_installer.is_none() {\n                 contents = filter(&contents, \"clippy\");\n             }\n+            if miri_installer.is_none() {\n+                contents = filter(&contents, \"miri\");\n+            }\n             if rustfmt_installer.is_none() {\n                 contents = filter(&contents, \"rustfmt\");\n             }\n@@ -1630,6 +1637,9 @@ impl Step for Extended {\n             if clippy_installer.is_some() {\n                 prepare(\"clippy\");\n             }\n+            if miri_installer.is_some() {\n+                prepare(\"miri\");\n+            }\n \n             // create an 'uninstall' package\n             builder.install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"uninstall\"), 0o755);\n@@ -1660,6 +1670,8 @@ impl Step for Extended {\n                     \"rls-preview\".to_string()\n                 } else if name == \"clippy\" {\n                     \"clippy-preview\".to_string()\n+                } else if name == \"miri\" {\n+                    \"miri-preview\".to_string()\n                 } else {\n                     name.to_string()\n                 };\n@@ -1679,6 +1691,9 @@ impl Step for Extended {\n             if clippy_installer.is_some() {\n                 prepare(\"clippy\");\n             }\n+            if miri_installer.is_some() {\n+                prepare(\"miri\");\n+            }\n             if target.contains(\"windows-gnu\") {\n                 prepare(\"rust-mingw\");\n             }\n@@ -1771,6 +1786,18 @@ impl Step for Extended {\n                                 .arg(\"-out\").arg(exe.join(\"ClippyGroup.wxs\"))\n                                 .arg(\"-t\").arg(etc.join(\"msi/remove-duplicates.xsl\")));\n             }\n+            if miri_installer.is_some() {\n+                builder.run(Command::new(&heat)\n+                                .current_dir(&exe)\n+                                .arg(\"dir\")\n+                                .arg(\"miri\")\n+                                .args(&heat_flags)\n+                                .arg(\"-cg\").arg(\"MiriGroup\")\n+                                .arg(\"-dr\").arg(\"Miri\")\n+                                .arg(\"-var\").arg(\"var.MiriDir\")\n+                                .arg(\"-out\").arg(exe.join(\"MiriGroup.wxs\"))\n+                                .arg(\"-t\").arg(etc.join(\"msi/remove-duplicates.xsl\")));\n+            }\n             builder.run(Command::new(&heat)\n                             .current_dir(&exe)\n                             .arg(\"dir\")\n@@ -1816,6 +1843,9 @@ impl Step for Extended {\n                 if clippy_installer.is_some() {\n                     cmd.arg(\"-dClippyDir=clippy\");\n                 }\n+                if miri_installer.is_some() {\n+                    cmd.arg(\"-dMiriDir=miri\");\n+                }\n                 if target.contains(\"windows-gnu\") {\n                     cmd.arg(\"-dGccDir=rust-mingw\");\n                 }\n@@ -1834,6 +1864,9 @@ impl Step for Extended {\n             if clippy_installer.is_some() {\n                 candle(\"ClippyGroup.wxs\".as_ref());\n             }\n+            if miri_installer.is_some() {\n+                candle(\"MiriGroup.wxs\".as_ref());\n+            }\n             candle(\"AnalysisGroup.wxs\".as_ref());\n \n             if target.contains(\"windows-gnu\") {\n@@ -1866,6 +1899,9 @@ impl Step for Extended {\n             if clippy_installer.is_some() {\n                 cmd.arg(\"ClippyGroup.wixobj\");\n             }\n+            if miri_installer.is_some() {\n+                cmd.arg(\"MiriGroup.wixobj\");\n+            }\n \n             if target.contains(\"windows-gnu\") {\n                 cmd.arg(\"GccGroup.wixobj\");\n@@ -1951,6 +1987,7 @@ impl Step for HashSign {\n         cmd.arg(builder.package_vers(&builder.release_num(\"cargo\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"rls\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"clippy\")));\n+        cmd.arg(builder.package_vers(&builder.release_num(\"miri\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"rustfmt\")));\n         cmd.arg(builder.llvm_tools_package_vers());\n         cmd.arg(builder.lldb_package_vers());"}, {"sha": "1265fa9eff45bca8485b491edd564def56a28883", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8033a29236978942d1f83fa260de43bb05ab47a/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8033a29236978942d1f83fa260de43bb05ab47a/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=f8033a29236978942d1f83fa260de43bb05ab47a", "patch": "@@ -221,7 +221,7 @@ install!((self, builder, _config),\n         }\n     };\n     Miri, \"miri\", Self::should_build(_config), only_hosts: true, {\n-        if builder.ensure(dist::Clippy { stage: self.stage, target: self.target }).is_some() ||\n+        if builder.ensure(dist::Miri { stage: self.stage, target: self.target }).is_some() ||\n             Self::should_install(builder) {\n             install_miri(builder, self.stage, self.target);\n         } else {"}, {"sha": "bddc6362389adcbecd4a1bf41b5f50b7d68862e2", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8033a29236978942d1f83fa260de43bb05ab47a/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8033a29236978942d1f83fa260de43bb05ab47a/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=f8033a29236978942d1f83fa260de43bb05ab47a", "patch": "@@ -1019,6 +1019,11 @@ impl Build {\n         self.package_vers(&self.release_num(\"clippy\"))\n     }\n \n+    /// Returns the value of `package_vers` above for miri\n+    fn miri_package_vers(&self) -> String {\n+        self.package_vers(&self.release_num(\"miri\"))\n+    }\n+\n     /// Returns the value of `package_vers` above for rustfmt\n     fn rustfmt_package_vers(&self) -> String {\n         self.package_vers(&self.release_num(\"rustfmt\"))"}, {"sha": "9f6db73e6f71389dd2456e234964a23dde40d23f", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8033a29236978942d1f83fa260de43bb05ab47a/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8033a29236978942d1f83fa260de43bb05ab47a/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=f8033a29236978942d1f83fa260de43bb05ab47a", "patch": "@@ -83,6 +83,7 @@ impl Step for ToolBuild {\n                 | \"rls\"\n                 | \"cargo\"\n                 | \"clippy-driver\"\n+                | \"miri\"\n                 => {}\n \n                 _ => return,\n@@ -218,6 +219,7 @@ pub fn prepare_tool_cargo(\n         if path.ends_with(\"cargo\") ||\n             path.ends_with(\"rls\") ||\n             path.ends_with(\"clippy\") ||\n+            path.ends_with(\"miri\") ||\n             path.ends_with(\"rustfmt\")\n         {\n             cargo.env(\"LIBZ_SYS_STATIC\", \"1\");\n@@ -592,7 +594,7 @@ tool_extended!((self, builder),\n         });\n     };\n     Miri, miri, \"src/tools/miri\", \"miri\", {};\n-    CargoMiri, clippy, \"src/tools/miri\", \"cargo-miri\", {\n+    CargoMiri, miri, \"src/tools/miri\", \"cargo-miri\", {\n         // Miri depends on procedural macros (serde), which requires a full host\n         // compiler to be available, so we need to depend on that.\n         builder.ensure(compile::Rustc {"}]}