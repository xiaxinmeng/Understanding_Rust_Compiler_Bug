{"sha": "6635fbed4ca8c65822f99e994735bd1877fb063e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MzVmYmVkNGNhOGM2NTgyMmY5OWU5OTQ3MzViZDE4NzdmYjA2M2U=", "commit": {"author": {"name": "CrLF0710", "email": "crlf0710@gmail.com", "date": "2019-04-09T16:46:28Z"}, "committer": {"name": "CrLF0710", "email": "crlf0710@gmail.com", "date": "2019-04-10T01:40:44Z"}, "message": "Eliminate `FnBox` usages from libstd.", "tree": {"sha": "b025f0af7d69a1aa1713e81fbece7dfad30c1b3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b025f0af7d69a1aa1713e81fbece7dfad30c1b3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6635fbed4ca8c65822f99e994735bd1877fb063e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6635fbed4ca8c65822f99e994735bd1877fb063e", "html_url": "https://github.com/rust-lang/rust/commit/6635fbed4ca8c65822f99e994735bd1877fb063e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6635fbed4ca8c65822f99e994735bd1877fb063e/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3750348daff89741e3153e0e120aa70a45ff5b68", "url": "https://api.github.com/repos/rust-lang/rust/commits/3750348daff89741e3153e0e120aa70a45ff5b68", "html_url": "https://github.com/rust-lang/rust/commit/3750348daff89741e3153e0e120aa70a45ff5b68"}], "stats": {"total": 39, "additions": 15, "deletions": 24}, "files": [{"sha": "7da16c4d247aa287e1bbfee79651343460254fdf", "filename": "src/libstd/sys/cloudabi/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs?ref=6635fbed4ca8c65822f99e994735bd1877fb063e", "patch": "@@ -1,4 +1,3 @@\n-use crate::boxed::FnBox;\n use crate::cmp;\n use crate::ffi::CStr;\n use crate::io;\n@@ -22,7 +21,7 @@ unsafe impl Sync for Thread {}\n \n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n-    pub unsafe fn new(stack: usize, p: Box<dyn FnBox()>) -> io::Result<Thread> {\n+    pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {\n         let p = box p;\n         let mut native: libc::pthread_t = mem::zeroed();\n         let mut attr: libc::pthread_attr_t = mem::zeroed();"}, {"sha": "9d40a7e8bb8b35d30d098822d6c595e165dc18d1", "filename": "src/libstd/sys/redox/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs?ref=6635fbed4ca8c65822f99e994735bd1877fb063e", "patch": "@@ -1,4 +1,3 @@\n-use crate::boxed::FnBox;\n use crate::ffi::CStr;\n use crate::io;\n use crate::mem;\n@@ -19,7 +18,7 @@ unsafe impl Sync for Thread {}\n \n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n-    pub unsafe fn new(_stack: usize, p: Box<dyn FnBox()>) -> io::Result<Thread> {\n+    pub unsafe fn new(_stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {\n         let p = box p;\n \n         let id = cvt(syscall::clone(syscall::CLONE_VM | syscall::CLONE_FS | syscall::CLONE_FILES))?;"}, {"sha": "b9f42d4ad1c594409bb5c13ea7d33733b2fbbe8c", "filename": "src/libstd/sys/sgx/thread.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs?ref=6635fbed4ca8c65822f99e994735bd1877fb063e", "patch": "@@ -1,5 +1,4 @@\n #![cfg_attr(test, allow(dead_code))] // why is this necessary?\n-use crate::boxed::FnBox;\n use crate::ffi::CStr;\n use crate::io;\n use crate::time::Duration;\n@@ -13,17 +12,16 @@ pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n mod task_queue {\n     use crate::sync::{Mutex, MutexGuard, Once};\n     use crate::sync::mpsc;\n-    use crate::boxed::FnBox;\n \n     pub type JoinHandle = mpsc::Receiver<()>;\n \n     pub(super) struct Task {\n-        p: Box<dyn FnBox()>,\n+        p: Box<dyn FnOnce()>,\n         done: mpsc::Sender<()>,\n     }\n \n     impl Task {\n-        pub(super) fn new(p: Box<dyn FnBox()>) -> (Task, JoinHandle) {\n+        pub(super) fn new(p: Box<dyn FnOnce()>) -> (Task, JoinHandle) {\n             let (done, recv) = mpsc::channel();\n             (Task { p, done }, recv)\n         }\n@@ -51,7 +49,7 @@ mod task_queue {\n \n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n-    pub unsafe fn new(_stack: usize, p: Box<dyn FnBox()>)\n+    pub unsafe fn new(_stack: usize, p: Box<dyn FnOnce()>)\n         -> io::Result<Thread>\n     {\n         let mut queue_lock = task_queue::lock();"}, {"sha": "f7d604ac4c8c1d95570addc93c27987f51b9a2fa", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=6635fbed4ca8c65822f99e994735bd1877fb063e", "patch": "@@ -1,4 +1,3 @@\n-use crate::boxed::FnBox;\n use crate::cmp;\n use crate::ffi::CStr;\n use crate::io;\n@@ -39,7 +38,7 @@ unsafe fn pthread_attr_setstacksize(_attr: *mut libc::pthread_attr_t,\n \n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n-    pub unsafe fn new(stack: usize, p: Box<dyn FnBox()>)\n+    pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>)\n                           -> io::Result<Thread> {\n         let p = box p;\n         let mut native: libc::pthread_t = mem::zeroed();"}, {"sha": "5e69e4d948fee42c853b5d6334e34893cd8b9299", "filename": "src/libstd/sys/wasi/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs?ref=6635fbed4ca8c65822f99e994735bd1877fb063e", "patch": "@@ -1,4 +1,3 @@\n-use crate::boxed::FnBox;\n use crate::cmp;\n use crate::ffi::CStr;\n use crate::io;\n@@ -13,7 +12,7 @@ pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n \n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n-    pub unsafe fn new(_stack: usize, _p: Box<dyn FnBox()>)\n+    pub unsafe fn new(_stack: usize, _p: Box<dyn FnOnce()>)\n         -> io::Result<Thread>\n     {\n         unsupported()"}, {"sha": "1dc786cd5d7b60e9e67f3082fe0aa1c4a0e6b8e0", "filename": "src/libstd/sys/wasm/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs?ref=6635fbed4ca8c65822f99e994735bd1877fb063e", "patch": "@@ -1,4 +1,3 @@\n-use crate::boxed::FnBox;\n use crate::ffi::CStr;\n use crate::io;\n use crate::sys::{unsupported, Void};\n@@ -10,7 +9,7 @@ pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n \n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n-    pub unsafe fn new(_stack: usize, _p: Box<dyn FnBox()>)\n+    pub unsafe fn new(_stack: usize, _p: Box<dyn FnOnce()>)\n         -> io::Result<Thread>\n     {\n         unsupported()"}, {"sha": "ebdf3612e0602f7a5b9b3be0912642c7feb37a87", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=6635fbed4ca8c65822f99e994735bd1877fb063e", "patch": "@@ -1,4 +1,3 @@\n-use crate::boxed::FnBox;\n use crate::io;\n use crate::ffi::CStr;\n use crate::mem;\n@@ -20,7 +19,7 @@ pub struct Thread {\n \n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n-    pub unsafe fn new(stack: usize, p: Box<dyn FnBox()>)\n+    pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>)\n                           -> io::Result<Thread> {\n         let p = box p;\n "}, {"sha": "cdb72ee872e04040292f81c32f36d0f6f116909a", "filename": "src/libstd/sys_common/at_exit_imp.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs?ref=6635fbed4ca8c65822f99e994735bd1877fb063e", "patch": "@@ -2,12 +2,11 @@\n //!\n //! Documentation can be found on the `rt::at_exit` function.\n \n-use crate::boxed::FnBox;\n use crate::ptr;\n use crate::mem;\n use crate::sys_common::mutex::Mutex;\n \n-type Queue = Vec<Box<dyn FnBox()>>;\n+type Queue = Vec<Box<dyn FnOnce()>>;\n \n // NB these are specifically not types from `std::sync` as they currently rely\n // on poisoning and this module needs to operate at a lower level than requiring\n@@ -61,7 +60,7 @@ pub fn cleanup() {\n     }\n }\n \n-pub fn push(f: Box<dyn FnBox()>) -> bool {\n+pub fn push(f: Box<dyn FnOnce()>) -> bool {\n     unsafe {\n         let _guard = LOCK.lock();\n         if init() {"}, {"sha": "6ab0d5cbe9c9651d1d370170477c00e1fb02e42a", "filename": "src/libstd/sys_common/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys_common%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fsys_common%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread.rs?ref=6635fbed4ca8c65822f99e994735bd1877fb063e", "patch": "@@ -1,4 +1,3 @@\n-use crate::boxed::FnBox;\n use crate::env;\n use crate::sync::atomic::{self, Ordering};\n use crate::sys::stack_overflow;\n@@ -11,7 +10,7 @@ pub unsafe fn start_thread(main: *mut u8) {\n     let _handler = stack_overflow::Handler::new();\n \n     // Finally, let's run some code.\n-    Box::from_raw(main as *mut Box<dyn FnBox()>)()\n+    Box::from_raw(main as *mut Box<dyn FnOnce()>)()\n }\n \n pub fn min_stack() -> usize {"}, {"sha": "c59226e0c0b98d0a1d1e1e9fdf0c55886a04ae2e", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6635fbed4ca8c65822f99e994735bd1877fb063e/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=6635fbed4ca8c65822f99e994735bd1877fb063e", "patch": "@@ -157,7 +157,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::any::Any;\n-use crate::boxed::FnBox;\n use crate::cell::UnsafeCell;\n use crate::ffi::{CStr, CString};\n use crate::fmt;\n@@ -488,7 +487,9 @@ impl Builder {\n             // returning.\n             native: Some(imp::Thread::new(\n                 stack_size,\n-                mem::transmute::<Box<dyn FnBox() + 'a>, Box<dyn FnBox() + 'static>>(Box::new(main))\n+                mem::transmute::<Box<dyn FnOnce() + 'a>, Box<dyn FnOnce() + 'static>>(Box::new(\n+                    main,\n+                )),\n             )?),\n             thread: my_thread,\n             packet: Packet(my_packet),"}]}