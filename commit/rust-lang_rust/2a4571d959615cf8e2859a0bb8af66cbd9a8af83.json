{"sha": "2a4571d959615cf8e2859a0bb8af66cbd9a8af83", "node_id": "C_kwDOAAsO6NoAKDJhNDU3MWQ5NTk2MTVjZjhlMjg1OWEwYmI4YWY2NmNiZDlhOGFmODM", "commit": {"author": {"name": "blyxyas", "email": "blyxyas@gmail.com", "date": "2023-05-06T06:38:47Z"}, "committer": {"name": "blyxyas", "email": "blyxyas@gmail.com", "date": "2023-05-06T06:38:47Z"}, "message": "Minimizing changes", "tree": {"sha": "a6c35c8712461b4c255d6eb2b890d3ebbf520021", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6c35c8712461b4c255d6eb2b890d3ebbf520021"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a4571d959615cf8e2859a0bb8af66cbd9a8af83", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEM3aofraJSaf7CtgpTTgXC1ovwzQFAmRV9fgACgkQTTgXC1ov\nwzQssxAAhYMLGierT9mlIH3G8RWOgC0gp3+iOF/lnYGBv+uGNmu9yGzFccGZKKeU\nPFoAQ8fPoYv9YBf1Q3I+4KdiKyNR17ChQvrkgVzeSiYDWK/8QoD4MQa85vJoY8TX\n7Zl7wcy1RTdDBTFBjz06Kj3ntsV7dQnK531xoEs0oy5T04m7JvyBynfuVtvi42vl\n2JKXyIvSzawfUgOS9eLKr0OtJp0IeNHOGzDKZijdlDZDSzRmb6wzXfdyHqfFlGUh\ni49xRE6b6Q3WOwMrwdeGVycANLVRCz+HrWdYCez880jSukFhg7ig9gl8iehv7Epe\nGkHXKmDKgg9FrPYglgaYYlhcOVHz+ZUv/0QPeYqQyY2a7xc1ltquC5zZ7uajMMFs\nTeBqOvQnBZzC2zU20IXI6SD6h0li4EQaQNaTqmN8xyMvbbh05Ma2gY2d8+/nvHD0\n8AIG6P88wKkD8nJ0/aedn0n7IqDRI7hM/vjhDNOPxwAXyvcA6z7ucC+8hjYgrMw5\nx179TJ7mJV4izQKePcm5Xo9Ta/w5mM+CYHAVPbarzptjQk4MJr8rDyEDJ5kwtUl6\nJ/YQSgQcEI0m31pEjfSFtiM5Xdzr3OHiKmUFxfZnp/KkTLUDCKGxW58pQxxHAH8T\nR5v68m1/teX8LKOwuoqH4Ux00p3AMhHjfL4lwB4Bpu9H/pxqc6o=\n=e6iz\n-----END PGP SIGNATURE-----", "payload": "tree a6c35c8712461b4c255d6eb2b890d3ebbf520021\nparent f9c1d155b4c9cad224fe96aad486993dc123c9b6\nauthor blyxyas <blyxyas@gmail.com> 1683355127 +0200\ncommitter blyxyas <blyxyas@gmail.com> 1683355127 +0200\n\nMinimizing changes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a4571d959615cf8e2859a0bb8af66cbd9a8af83", "html_url": "https://github.com/rust-lang/rust/commit/2a4571d959615cf8e2859a0bb8af66cbd9a8af83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a4571d959615cf8e2859a0bb8af66cbd9a8af83/comments", "author": {"login": "blyxyas", "id": 73757586, "node_id": "MDQ6VXNlcjczNzU3NTg2", "avatar_url": "https://avatars.githubusercontent.com/u/73757586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blyxyas", "html_url": "https://github.com/blyxyas", "followers_url": "https://api.github.com/users/blyxyas/followers", "following_url": "https://api.github.com/users/blyxyas/following{/other_user}", "gists_url": "https://api.github.com/users/blyxyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/blyxyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blyxyas/subscriptions", "organizations_url": "https://api.github.com/users/blyxyas/orgs", "repos_url": "https://api.github.com/users/blyxyas/repos", "events_url": "https://api.github.com/users/blyxyas/events{/privacy}", "received_events_url": "https://api.github.com/users/blyxyas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blyxyas", "id": 73757586, "node_id": "MDQ6VXNlcjczNzU3NTg2", "avatar_url": "https://avatars.githubusercontent.com/u/73757586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blyxyas", "html_url": "https://github.com/blyxyas", "followers_url": "https://api.github.com/users/blyxyas/followers", "following_url": "https://api.github.com/users/blyxyas/following{/other_user}", "gists_url": "https://api.github.com/users/blyxyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/blyxyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blyxyas/subscriptions", "organizations_url": "https://api.github.com/users/blyxyas/orgs", "repos_url": "https://api.github.com/users/blyxyas/repos", "events_url": "https://api.github.com/users/blyxyas/events{/privacy}", "received_events_url": "https://api.github.com/users/blyxyas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9c1d155b4c9cad224fe96aad486993dc123c9b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c1d155b4c9cad224fe96aad486993dc123c9b6", "html_url": "https://github.com/rust-lang/rust/commit/f9c1d155b4c9cad224fe96aad486993dc123c9b6"}], "stats": {"total": 280, "additions": 168, "deletions": 112}, "files": [{"sha": "8b88dab6ae61dbce443b0866bbca06469ea436e2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2a4571d959615cf8e2859a0bb8af66cbd9a8af83/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4571d959615cf8e2859a0bb8af66cbd9a8af83/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=2a4571d959615cf8e2859a0bb8af66cbd9a8af83", "patch": "@@ -331,8 +331,11 @@ mod zero_div_zero;\n mod zero_sized_map_values;\n // end lints modules, do not remove this comment, it\u2019s used in `update_lints`\n \n-use crate::utils::conf::{format_error, TryConf};\n pub use crate::utils::conf::{lookup_conf_file, Conf};\n+use crate::utils::{\n+    conf::{format_error, metadata::get_configuration_metadata, TryConf},\n+    FindAll,\n+};\n \n /// Register all pre expansion lints\n ///\n@@ -388,7 +391,7 @@ pub fn read_conf(sess: &Session, path: &io::Result<(Option<PathBuf>, Vec<String>\n     conf\n }\n \n-#[derive(Default)]\n+#[derive(Default)] //~ ERROR no such field\n struct RegistrationGroups {\n     all: Vec<LintId>,\n     cargo: Vec<LintId>,\n@@ -471,7 +474,22 @@ pub(crate) struct LintInfo {\n pub fn explain(name: &str) {\n     let target = format!(\"clippy::{}\", name.to_ascii_uppercase());\n     match declared_lints::LINTS.iter().find(|info| info.lint.name == target) {\n-        Some(info) => print!(\"{}\", info.explanation),\n+        Some(info) => {\n+            println!(\"{}\", info.explanation);\n+            // Check if the lint has configuration\n+            let mdconf = get_configuration_metadata();\n+            if let Some(config_vec_positions) = mdconf\n+                .iter()\n+                .find_all(|cconf| cconf.lints.contains(&info.lint.name_lower()[8..].to_owned()))\n+            {\n+                // If it has, print it\n+                println!(\"### Configuration for {}:\", info.lint.name_lower());\n+                for position in config_vec_positions {\n+                    let conf = &mdconf[position];\n+                    println!(\"    - {}: {} (default: {})\", conf.name, conf.doc, conf.default);\n+                }\n+            }\n+        },\n         None => println!(\"unknown lint: {name}\"),\n     }\n }"}, {"sha": "f6de66bb5145b5c2d6c2692b96c55c0e6b204829", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a4571d959615cf8e2859a0bb8af66cbd9a8af83/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4571d959615cf8e2859a0bb8af66cbd9a8af83/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=2a4571d959615cf8e2859a0bb8af66cbd9a8af83", "patch": "@@ -174,16 +174,15 @@ macro_rules! define_Conf {\n             }\n         }\n \n-        #[cfg(feature = \"internal\")]\n         pub mod metadata {\n-            use crate::utils::internal_lints::metadata_collector::ClippyConfiguration;\n+            use crate::utils::ClippyConfiguration;\n \n             macro_rules! wrap_option {\n                 () => (None);\n                 ($x:literal) => (Some($x));\n             }\n \n-            pub(crate) fn get_configuration_metadata() -> Vec<ClippyConfiguration> {\n+            pub fn get_configuration_metadata() -> Vec<ClippyConfiguration> {\n                 vec![\n                     $(\n                         {"}, {"sha": "7a1cd3effaef2ae79f48d1cf34734098f9b437fc", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 5, "deletions": 106, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/2a4571d959615cf8e2859a0bb8af66cbd9a8af83/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4571d959615cf8e2859a0bb8af66cbd9a8af83/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=2a4571d959615cf8e2859a0bb8af66cbd9a8af83", "patch": "@@ -8,7 +8,11 @@\n //! a simple mistake)\n \n use crate::renamed_lints::RENAMED_LINTS;\n-use crate::utils::internal_lints::lint_without_lint_pass::{extract_clippy_version_value, is_lint_ref_type};\n+use crate::utils::{\n+    collect_configs,\n+    internal_lints::lint_without_lint_pass::{extract_clippy_version_value, is_lint_ref_type},\n+    ClippyConfiguration,\n+};\n \n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::ty::{match_type, walk_ptrs_ty_depth};\n@@ -520,111 +524,6 @@ impl Serialize for ApplicabilityInfo {\n     }\n }\n \n-// ==================================================================\n-// Configuration\n-// ==================================================================\n-#[derive(Debug, Clone, Default)]\n-pub struct ClippyConfiguration {\n-    name: String,\n-    config_type: &'static str,\n-    default: String,\n-    lints: Vec<String>,\n-    doc: String,\n-    #[allow(dead_code)]\n-    deprecation_reason: Option<&'static str>,\n-}\n-\n-impl ClippyConfiguration {\n-    pub fn new(\n-        name: &'static str,\n-        config_type: &'static str,\n-        default: String,\n-        doc_comment: &'static str,\n-        deprecation_reason: Option<&'static str>,\n-    ) -> Self {\n-        let (lints, doc) = parse_config_field_doc(doc_comment)\n-            .unwrap_or_else(|| (vec![], \"[ERROR] MALFORMED DOC COMMENT\".to_string()));\n-\n-        Self {\n-            name: to_kebab(name),\n-            lints,\n-            doc,\n-            config_type,\n-            default,\n-            deprecation_reason,\n-        }\n-    }\n-\n-    fn to_markdown_paragraph(&self) -> String {\n-        format!(\n-            \"### {}\\n{}\\n\\n**Default Value:** `{}` (`{}`)\\n\\n{}\\n\\n\",\n-            self.name,\n-            self.doc\n-                .lines()\n-                .map(|line| line.strip_prefix(\"    \").unwrap_or(line))\n-                .join(\"\\n\"),\n-            self.default,\n-            self.config_type,\n-            self.lints\n-                .iter()\n-                .map(|name| name.to_string().split_whitespace().next().unwrap().to_string())\n-                .map(|name| format!(\"* [{name}](https://rust-lang.github.io/rust-clippy/master/index.html#{name})\"))\n-                .join(\"\\n\"),\n-        )\n-    }\n-\n-    fn to_markdown_table_entry(&self) -> String {\n-        format!(\"| [{}](#{}) | `{}` |\", self.name, self.name, self.default)\n-    }\n-}\n-\n-fn collect_configs() -> Vec<ClippyConfiguration> {\n-    crate::utils::conf::metadata::get_configuration_metadata()\n-}\n-\n-/// This parses the field documentation of the config struct.\n-///\n-/// ```rust, ignore\n-/// parse_config_field_doc(cx, \"Lint: LINT_NAME_1, LINT_NAME_2. Papa penguin, papa penguin\")\n-/// ```\n-///\n-/// Would yield:\n-/// ```rust, ignore\n-/// Some([\"lint_name_1\", \"lint_name_2\"], \"Papa penguin, papa penguin\")\n-/// ```\n-fn parse_config_field_doc(doc_comment: &str) -> Option<(Vec<String>, String)> {\n-    const DOC_START: &str = \" Lint: \";\n-    if_chain! {\n-        if doc_comment.starts_with(DOC_START);\n-        if let Some(split_pos) = doc_comment.find('.');\n-        then {\n-            let mut doc_comment = doc_comment.to_string();\n-            let mut documentation = doc_comment.split_off(split_pos);\n-\n-            // Extract lints\n-            doc_comment.make_ascii_lowercase();\n-            let lints: Vec<String> = doc_comment\n-                .split_off(DOC_START.len())\n-                .split(\", \")\n-                .map(str::to_string)\n-                .collect();\n-\n-            // Format documentation correctly\n-            // split off leading `.` from lint name list and indent for correct formatting\n-            documentation = documentation.trim_start_matches('.').trim().replace(\"\\n \", \"\\n    \");\n-\n-            Some((lints, documentation))\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-/// Transforms a given `snake_case_string` to a tasty `kebab-case-string`\n-fn to_kebab(config_name: &str) -> String {\n-    config_name.replace('_', \"-\")\n-}\n-\n impl fmt::Display for ClippyConfiguration {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> fmt::Result {\n         writeln!("}, {"sha": "d3ea7cafa80c2f57b44db3d1b7f1d095c8b4e85e", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/2a4571d959615cf8e2859a0bb8af66cbd9a8af83/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4571d959615cf8e2859a0bb8af66cbd9a8af83/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=2a4571d959615cf8e2859a0bb8af66cbd9a8af83", "patch": "@@ -4,3 +4,143 @@ pub mod dump_hir;\n pub mod format_args_collector;\n #[cfg(feature = \"internal\")]\n pub mod internal_lints;\n+#[cfg(feature = \"internal\")]\n+use itertools::Itertools;\n+\n+/// Transforms a given `snake_case_string` to a tasty `kebab-case-string`\n+fn to_kebab(config_name: &str) -> String {\n+    config_name.replace('_', \"-\")\n+}\n+\n+// ==================================================================\n+// Configuration\n+// ==================================================================\n+#[derive(Debug, Clone, Default)] //~ ERROR no such field\n+pub struct ClippyConfiguration {\n+    pub name: String,\n+    #[allow(dead_code)]\n+    config_type: &'static str,\n+    pub default: String,\n+    pub lints: Vec<String>,\n+    pub doc: String,\n+    #[allow(dead_code)]\n+    deprecation_reason: Option<&'static str>,\n+}\n+\n+impl ClippyConfiguration {\n+    pub fn new(\n+        name: &'static str,\n+        config_type: &'static str,\n+        default: String,\n+        doc_comment: &'static str,\n+        deprecation_reason: Option<&'static str>,\n+    ) -> Self {\n+        let (lints, doc) = parse_config_field_doc(doc_comment)\n+            .unwrap_or_else(|| (vec![], \"[ERROR] MALFORMED DOC COMMENT\".to_string()));\n+\n+        Self {\n+            name: to_kebab(name),\n+            lints,\n+            doc,\n+            config_type,\n+            default,\n+            deprecation_reason,\n+        }\n+    }\n+\n+    #[cfg(feature = \"internal\")]\n+    fn to_markdown_paragraph(&self) -> String {\n+        format!(\n+            \"### {}\\n{}\\n\\n**Default Value:** `{}` (`{}`)\\n\\n{}\\n\\n\",\n+            self.name,\n+            self.doc\n+                .lines()\n+                .map(|line| line.strip_prefix(\"    \").unwrap_or(line))\n+                .join(\"\\n\"),\n+            self.default,\n+            self.config_type,\n+            self.lints\n+                .iter()\n+                .map(|name| name.to_string().split_whitespace().next().unwrap().to_string())\n+                .map(|name| format!(\"* [{name}](https://rust-lang.github.io/rust-clippy/master/index.html#{name})\"))\n+                .join(\"\\n\"),\n+        )\n+    }\n+\n+    #[cfg(feature = \"internal\")]\n+    fn to_markdown_table_entry(&self) -> String {\n+        format!(\"| [{}](#{}) | `{}` |\", self.name, self.name, self.default)\n+    }\n+}\n+\n+#[cfg(feature = \"internal\")]\n+fn collect_configs() -> Vec<ClippyConfiguration> {\n+    crate::utils::conf::metadata::get_configuration_metadata()\n+}\n+\n+/// This parses the field documentation of the config struct.\n+///\n+/// ```rust, ignore\n+/// parse_config_field_doc(cx, \"Lint: LINT_NAME_1, LINT_NAME_2. Papa penguin, papa penguin\")\n+/// ```\n+///\n+/// Would yield:\n+/// ```rust, ignore\n+/// Some([\"lint_name_1\", \"lint_name_2\"], \"Papa penguin, papa penguin\")\n+/// ```\n+fn parse_config_field_doc(doc_comment: &str) -> Option<(Vec<String>, String)> {\n+    const DOC_START: &str = \" Lint: \";\n+    if_chain! {\n+        if doc_comment.starts_with(DOC_START);\n+        if let Some(split_pos) = doc_comment.find('.');\n+        then {\n+            let mut doc_comment = doc_comment.to_string();\n+            let mut documentation = doc_comment.split_off(split_pos);\n+\n+            // Extract lints\n+            doc_comment.make_ascii_lowercase();\n+            let lints: Vec<String> = doc_comment\n+                .split_off(DOC_START.len())\n+                .split(\", \")\n+                .map(str::to_string)\n+                .collect();\n+\n+            // Format documentation correctly\n+            // split off leading `.` from lint name list and indent for correct formatting\n+            documentation = documentation.trim_start_matches('.').trim().replace(\"\\n \", \"\\n    \");\n+\n+            Some((lints, documentation))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+// Shamelessly stolen from find_all (https://github.com/nectariner/find_all)\n+pub trait FindAll: Iterator + Sized {\n+    fn find_all<P>(&mut self, predicate: P) -> Option<Vec<usize>>\n+    where\n+        P: FnMut(&Self::Item) -> bool;\n+}\n+\n+impl<I> FindAll for I\n+where\n+    I: Iterator,\n+{\n+    fn find_all<P>(&mut self, mut predicate: P) -> Option<Vec<usize>>\n+    where\n+        P: FnMut(&Self::Item) -> bool,\n+    {\n+        let mut occurences = Vec::<usize>::default();\n+        for (index, element) in self.enumerate() {\n+            if predicate(&element) {\n+                occurences.push(index);\n+            }\n+        }\n+\n+        match occurences.len() {\n+            0 => None,\n+            _ => Some(occurences),\n+        }\n+    }\n+}"}]}