{"sha": "3ff4c347c7f8958fe6fabf5dd385409ff84b3a54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZjRjMzQ3YzdmODk1OGZlNmZhYmY1ZGQzODU0MDlmZjg0YjNhNTQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-02-21T19:39:32Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-09T14:45:29Z"}, "message": "typeck: don't wastefully clone expressions for cast checks.", "tree": {"sha": "ccf57c54d92e36cb3f1aa346a723a5171510625c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccf57c54d92e36cb3f1aa346a723a5171510625c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ff4c347c7f8958fe6fabf5dd385409ff84b3a54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ff4c347c7f8958fe6fabf5dd385409ff84b3a54", "html_url": "https://github.com/rust-lang/rust/commit/3ff4c347c7f8958fe6fabf5dd385409ff84b3a54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ff4c347c7f8958fe6fabf5dd385409ff84b3a54/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbab236a9efc396d44e9ca1954ed4a4c877faebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbab236a9efc396d44e9ca1954ed4a4c877faebd", "html_url": "https://github.com/rust-lang/rust/commit/dbab236a9efc396d44e9ca1954ed4a4c877faebd"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "6468713d07aab5ce40a3aa00973194a4f1217bfd", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ff4c347c7f8958fe6fabf5dd385409ff84b3a54/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ff4c347c7f8958fe6fabf5dd385409ff84b3a54/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=3ff4c347c7f8958fe6fabf5dd385409ff84b3a54", "patch": "@@ -55,7 +55,7 @@ use syntax::ast;\n /// Reifies a cast check to be checked once we have full type information for\n /// a function context.\n pub struct CastCheck<'tcx> {\n-    expr: hir::Expr,\n+    expr: &'tcx hir::Expr,\n     expr_ty: Ty<'tcx>,\n     cast_ty: Ty<'tcx>,\n     span: Span,\n@@ -109,7 +109,7 @@ enum CastError {\n }\n \n impl<'tcx> CastCheck<'tcx> {\n-    pub fn new(expr: hir::Expr, expr_ty: Ty<'tcx>, cast_ty: Ty<'tcx>, span: Span)\n+    pub fn new(expr: &'tcx hir::Expr, expr_ty: Ty<'tcx>, cast_ty: Ty<'tcx>, span: Span)\n                -> CastCheck<'tcx> {\n         CastCheck {\n             expr: expr,\n@@ -239,7 +239,7 @@ impl<'tcx> CastCheck<'tcx> {\n             (None, Some(t_cast)) => {\n                 if let ty::TyFnDef(_, _, f) = self.expr_ty.sty {\n                     // Attempt a coercion to a fn pointer type.\n-                    let res = coercion::try(fcx, &self.expr,\n+                    let res = coercion::try(fcx, self.expr,\n                         self.expr_ty, fcx.tcx().mk_ty(ty::TyFnPtr(f)));\n                     if !res.is_ok() {\n                         return Err(CastError::NonScalar);\n@@ -390,7 +390,7 @@ impl<'tcx> CastCheck<'tcx> {\n     }\n \n     fn try_coercion_cast<'a>(&self, fcx: &FnCtxt<'a, 'tcx>) -> bool {\n-        coercion::try(fcx, &self.expr, self.expr_ty, self.cast_ty).is_ok()\n+        coercion::try(fcx, self.expr, self.expr_ty, self.cast_ty).is_ok()\n     }\n \n }"}, {"sha": "1c0430f0b7cef2f199bc65fcb43e7a7f677d74b2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ff4c347c7f8958fe6fabf5dd385409ff84b3a54/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ff4c347c7f8958fe6fabf5dd385409ff84b3a54/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3ff4c347c7f8958fe6fabf5dd385409ff84b3a54", "patch": "@@ -1701,6 +1701,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     // FIXME(arielb1): use this instead of field.ty everywhere\n+    // Only for fields! Returns <none> for methods>\n+    // Indifferent to privacy flags\n     pub fn field_ty(&self,\n                     span: Span,\n                     field: ty::FieldDef<'tcx>,\n@@ -1711,8 +1713,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                            &field.ty(self.tcx(), substs))\n     }\n \n-    // Only for fields! Returns <none> for methods>\n-    // Indifferent to privacy flags\n     fn check_casts(&self) {\n         let mut deferred_cast_checks = self.inh.deferred_cast_checks.borrow_mut();\n         for cast in deferred_cast_checks.drain(..) {\n@@ -3511,7 +3511,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n \n             // Defer other checks until we're done type checking.\n             let mut deferred_cast_checks = fcx.inh.deferred_cast_checks.borrow_mut();\n-            let cast_check = cast::CastCheck::new((**e).clone(), t_expr, t_cast, expr.span);\n+            let cast_check = cast::CastCheck::new(e, t_expr, t_cast, expr.span);\n             deferred_cast_checks.push(cast_check);\n         }\n       }"}]}