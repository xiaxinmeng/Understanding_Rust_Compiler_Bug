{"sha": "4b9670a2459fe2b3a8d647d3edefe9fa92299a5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiOTY3MGEyNDU5ZmUyYjNhOGQ2NDdkM2VkZWZlOWZhOTIyOTlhNWE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-04T02:05:38Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-01T16:01:09Z"}, "message": "rustc: remove the index field from Res::Upvar.", "tree": {"sha": "48b36d5133087bb4ad5fb0027ad46fa51b19b7cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48b36d5133087bb4ad5fb0027ad46fa51b19b7cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a", "html_url": "https://github.com/rust-lang/rust/commit/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0", "html_url": "https://github.com/rust-lang/rust/commit/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "f342b230a7176b97803717e0209ccc3fd8b3a337", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=4b9670a2459fe2b3a8d647d3edefe9fa92299a5a", "patch": "@@ -140,7 +140,6 @@ pub enum Res<Id = hir::HirId> {\n     SelfCtor(DefId /* impl */),  // `DefId` refers to the impl\n     Local(Id),\n     Upvar(Id,           // `HirId` of closed over local\n-          usize,        // index in the `upvars` list of the closure\n           ast::NodeId), // expr node that creates the closure\n \n     // Macro namespace\n@@ -397,11 +396,7 @@ impl<Id> Res<Id> {\n             Res::SelfCtor(id) => Res::SelfCtor(id),\n             Res::PrimTy(id) => Res::PrimTy(id),\n             Res::Local(id) => Res::Local(map(id)),\n-            Res::Upvar(id, index, closure) => Res::Upvar(\n-                map(id),\n-                index,\n-                closure\n-            ),\n+            Res::Upvar(id, closure) => Res::Upvar(map(id), closure),\n             Res::SelfTy(a, b) => Res::SelfTy(a, b),\n             Res::ToolMod => Res::ToolMod,\n             Res::NonMacroAttr(attr_kind) => Res::NonMacroAttr(attr_kind),"}, {"sha": "547a7a7930c875383567af203729b053b8b655d9", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=4b9670a2459fe2b3a8d647d3edefe9fa92299a5a", "patch": "@@ -2497,9 +2497,8 @@ pub struct Upvar<Id = HirId> {\n     /// The variable being captured.\n     pub var_id: Id,\n \n-    /// The parent closure, if this is not a direct capture,\n-    /// and the index within that closure's capture list.\n-    pub parent: Option<(ast::NodeId, usize)>,\n+    /// The parent closure, if this is not a direct capture.\n+    pub parent: Option<ast::NodeId>,\n \n     // First span where it is accessed (there can be multiple).\n     pub span: Span"}, {"sha": "b10acc987a2141aaafe9d49d1702bff6143224eb", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=4b9670a2459fe2b3a8d647d3edefe9fa92299a5a", "patch": "@@ -964,7 +964,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n         let var_ty = self.mc.node_ty(upvar.var_id)?;\n         let res = upvar.parent.map_or(\n             Res::Local(upvar.var_id),\n-            |(closure_node_id, i)| Res::Upvar(upvar.var_id, i, closure_node_id),\n+            |closure_node_id| Res::Upvar(upvar.var_id, closure_node_id),\n         );\n         self.mc.cat_res(closure_hir_id, closure_span, var_ty, res)\n     }"}, {"sha": "c58ce762773237b4255cb1f84f898ff3def63a24", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=4b9670a2459fe2b3a8d647d3edefe9fa92299a5a", "patch": "@@ -737,7 +737,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 })\n             }\n \n-            Res::Upvar(var_id, _, fn_node_id) => {\n+            Res::Upvar(var_id, fn_node_id) => {\n                 let var_nid = self.tcx.hir().hir_to_node_id(var_id);\n                 self.cat_upvar(hir_id, span, var_nid, fn_node_id)\n             }"}, {"sha": "870de08264d74fde4a77f11f4fc5bc2399af278f", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=4b9670a2459fe2b3a8d647d3edefe9fa92299a5a", "patch": "@@ -975,7 +975,9 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     match res {\n         Res::Local(id) => ExprKind::VarRef { id },\n \n-        Res::Upvar(var_hir_id, index, closure_expr_id) => {\n+        Res::Upvar(var_hir_id, closure_expr_id) => {\n+            let index = cx.upvar_indices[&var_hir_id];\n+\n             debug!(\"convert_var(upvar({:?}, {:?}, {:?}))\",\n                    var_hir_id,\n                    index,\n@@ -1190,7 +1192,7 @@ fn capture_upvar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     let var_ty = cx.tables().node_type(upvar.var_id);\n     let upvar_res = upvar.parent.map_or(\n         Res::Local(upvar.var_id),\n-        |(closure_node_id, i)| Res::Upvar(upvar.var_id, i, closure_node_id),\n+        |closure_node_id| Res::Upvar(upvar.var_id, closure_node_id),\n     );\n     let captured_var = Expr {\n         temp_lifetime,"}, {"sha": "74382bb1fe25dc760438d2e67afee99489b0723f", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=4b9670a2459fe2b3a8d647d3edefe9fa92299a5a", "patch": "@@ -5,6 +5,7 @@\n use crate::hair::*;\n use crate::hair::util::UserAnnotatedTyHelpers;\n \n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc::hir::def_id::DefId;\n use rustc::hir::Node;\n@@ -46,13 +47,17 @@ pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n \n     /// See field with the same name on `mir::Body`.\n     control_flow_destroyed: Vec<(Span, String)>,\n+\n+    /// Reverse map, from upvar variable `HirId`s to their indices.\n+    upvar_indices: FxHashMap<hir::HirId, usize>,\n }\n \n impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n     pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n                src_id: hir::HirId) -> Cx<'a, 'gcx, 'tcx> {\n         let tcx = infcx.tcx;\n         let src_def_id = tcx.hir().local_def_id_from_hir_id(src_id);\n+        let tables = tcx.typeck_tables_of(src_def_id);\n         let body_owner_kind = tcx.hir().body_owner_kind_by_hir_id(src_id);\n \n         let constness = match body_owner_kind {\n@@ -75,18 +80,27 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         // Constants always need overflow checks.\n         check_overflow |= constness == hir::Constness::Const;\n \n+        // Compute reverse mapping, of uvpars to their indices.\n+        let mut upvar_indices = FxHashMap::default();\n+        if let Some(upvars) = tables.upvar_list.get(&src_def_id) {\n+            upvar_indices.extend(\n+                upvars.iter().enumerate().map(|(i, upvar_id)| (upvar_id.var_path.hir_id, i)),\n+            );\n+        }\n+\n         Cx {\n             tcx,\n             infcx,\n             root_lint_level: src_id,\n             param_env: tcx.param_env(src_def_id),\n             identity_substs: InternalSubsts::identity_for_item(tcx.global_tcx(), src_def_id),\n             region_scope_tree: tcx.region_scope_tree(src_def_id),\n-            tables: tcx.typeck_tables_of(src_def_id),\n+            tables,\n             constness,\n             body_owner_kind,\n             check_overflow,\n             control_flow_destroyed: Vec::new(),\n+            upvar_indices,\n         }\n     }\n "}, {"sha": "490d5ae83b8b13b4973e3a709be4b38db18a7fbf", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9670a2459fe2b3a8d647d3edefe9fa92299a5a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4b9670a2459fe2b3a8d647d3edefe9fa92299a5a", "patch": "@@ -1669,7 +1669,7 @@ pub struct Resolver<'a> {\n     label_res_map: NodeMap<NodeId>,\n \n     pub upvars: UpvarMap,\n-    upvars_seen: NodeMap<NodeMap<usize>>,\n+    upvars_seen: NodeMap<NodeSet>,\n     pub export_map: ExportMap<NodeId>,\n     pub trait_map: TraitMap,\n \n@@ -4052,30 +4052,29 @@ impl<'a> Resolver<'a> {\n                         }\n                         ClosureRibKind(function_id) => {\n                             let parent = match res {\n-                                Res::Upvar(_, i, closure) => Some((closure, i)),\n+                                Res::Upvar(_, closure) => Some(closure),\n                                 _ => None,\n                             };\n \n                             let seen = self.upvars_seen\n                                            .entry(function_id)\n                                            .or_default();\n-                            if let Some(&index) = seen.get(&var_id) {\n-                                res = Res::Upvar(var_id, index, function_id);\n+                            if seen.contains(&var_id) {\n+                                res = Res::Upvar(var_id, function_id);\n                                 continue;\n                             }\n                             let vec = self.upvars\n                                           .entry(function_id)\n                                           .or_default();\n-                            let depth = vec.len();\n-                            res = Res::Upvar(var_id, depth, function_id);\n+                            res = Res::Upvar(var_id, function_id);\n \n                             if record_used {\n                                 vec.push(Upvar {\n                                     var_id,\n                                     parent,\n                                     span,\n                                 });\n-                                seen.insert(var_id, depth);\n+                                seen.insert(var_id);\n                             }\n                         }\n                         ItemRibKind | FnItemRibKind | AssocItemRibKind => {"}]}