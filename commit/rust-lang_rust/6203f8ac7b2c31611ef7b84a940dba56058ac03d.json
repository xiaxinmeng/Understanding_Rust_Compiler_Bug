{"sha": "6203f8ac7b2c31611ef7b84a940dba56058ac03d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMDNmOGFjN2IyYzMxNjExZWY3Yjg0YTk0MGRiYTU2MDU4YWMwM2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-24T13:51:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-24T13:51:17Z"}, "message": "auto merge of #15922 : poiru/rust/remove-whitespace-mk-backslash, r=brson\n\nThe alignment of the line continuation backslashes is rather inconsistent. These commits solve that by removing the extra whitespace and adding a space where there previously was none. An alternative solution would be to fix the alignment.", "tree": {"sha": "f9d8ad202aeb706ae80e9dfeee297ee308937c54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9d8ad202aeb706ae80e9dfeee297ee308937c54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6203f8ac7b2c31611ef7b84a940dba56058ac03d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6203f8ac7b2c31611ef7b84a940dba56058ac03d", "html_url": "https://github.com/rust-lang/rust/commit/6203f8ac7b2c31611ef7b84a940dba56058ac03d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6203f8ac7b2c31611ef7b84a940dba56058ac03d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "482c776d5a705d62a8093f2a441919278eb2b1d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/482c776d5a705d62a8093f2a441919278eb2b1d0", "html_url": "https://github.com/rust-lang/rust/commit/482c776d5a705d62a8093f2a441919278eb2b1d0"}, {"sha": "6511053d1cc9a85c721c4eba9931389958b92104", "url": "https://api.github.com/repos/rust-lang/rust/commits/6511053d1cc9a85c721c4eba9931389958b92104", "html_url": "https://github.com/rust-lang/rust/commit/6511053d1cc9a85c721c4eba9931389958b92104"}], "stats": {"total": 464, "additions": 232, "deletions": 232}, "files": [{"sha": "97c823c9e2de936ac427cd5fa819370064580754", "filename": "mk/clean.mk", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=6203f8ac7b2c31611ef7b84a940dba56058ac03d", "patch": "@@ -12,21 +12,21 @@\n # Cleanup\n ######################################################################\n \n-CLEAN_STAGE_RULES :=\t\t\t\t\t\t\t\\\n- $(foreach stage, $(STAGES),\t\t\t\t\t\t\\\n-  $(foreach host, $(CFG_HOST),\t\t\t\t\t\t\\\n-   clean$(stage)_H_$(host)\t\t\t\t\t\t\\\n-   $(foreach target, $(CFG_TARGET),\t\t\t\t\t\\\n+CLEAN_STAGE_RULES := \\\n+ $(foreach stage, $(STAGES), \\\n+  $(foreach host, $(CFG_HOST), \\\n+   clean$(stage)_H_$(host) \\\n+   $(foreach target, $(CFG_TARGET), \\\n     clean$(stage)_T_$(target)_H_$(host))))\n \n-CLEAN_STAGE_RULES := $(CLEAN_STAGE_RULES)\t\t\t\t\\\n+CLEAN_STAGE_RULES := $(CLEAN_STAGE_RULES) \\\n     $(foreach host, $(CFG_HOST), clean-generic-H-$(host))\n \n-CLEAN_STAGE_RULES := $(CLEAN_STAGE_RULES)\t\t\t\t\\\n+CLEAN_STAGE_RULES := $(CLEAN_STAGE_RULES) \\\n     $(foreach host, $(CFG_TARGET), clean-generic-T-$(host))\n \n-CLEAN_LLVM_RULES = \t\t\t\t\t\t\t\t\\\n- $(foreach target, $(CFG_HOST),\t\t\\\n+CLEAN_LLVM_RULES = \\\n+ $(foreach target, $(CFG_HOST), \\\n   clean-llvm$(target))\n \n .PHONY: clean clean-all clean-misc clean-llvm\n@@ -54,20 +54,20 @@ clean-generic-$(2)-$(1):\n \t         $(1)/rt \\\n \t\t $(1)/test \\\n \t\t $(1)/stage* \\\n-\t\t -type f \\(           \\\n+\t\t -type f \\( \\\n          -name '*.[odasS]' -o \\\n-         -name '*.so' -o      \\\n-         -name '*.dylib' -o   \\\n-         -name '*.rlib' -o   \\\n-         -name 'stamp.*' -o   \\\n-         -name '*.lib' -o     \\\n-         -name '*.dll' -o     \\\n-         -name '*.def' -o     \\\n-         -name '*.bc'         \\\n-         \\)                   \\\n+         -name '*.so' -o \\\n+         -name '*.dylib' -o \\\n+         -name '*.rlib' -o \\\n+         -name 'stamp.*' -o \\\n+         -name '*.lib' -o \\\n+         -name '*.dll' -o \\\n+         -name '*.def' -o \\\n+         -name '*.bc' \\\n+         \\) \\\n          | xargs rm -f\n-\t$(Q)find $(1)\\\n-         -name '*.dSYM'       \\\n+\t$(Q)find $(1) \\\n+         -name '*.dSYM' \\\n          | xargs rm -Rf\n endef\n \n@@ -76,8 +76,8 @@ $(foreach targ, $(CFG_TARGET), $(eval $(call CLEAN_GENERIC,$(targ),T)))\n \n define CLEAN_HOST_STAGE_N\n \n-clean$(1)_H_$(2):\t\t\t\t\t\t\t    \\\n-\t    $$(foreach crate,$$(CRATES),clean$(1)_H_$(2)-lib-$$(crate))\t    \\\n+clean$(1)_H_$(2): \\\n+\t    $$(foreach crate,$$(CRATES),clean$(1)_H_$(2)-lib-$$(crate)) \\\n \t    $$(foreach tool,$$(TOOLS),clean$(1)_H_$(2)-tool-$$(tool))\n \t$$(Q)rm -fr $(2)/rt/libbacktrace\n \n@@ -96,8 +96,8 @@ $(foreach host, $(CFG_HOST), \\\n \n define CLEAN_TARGET_STAGE_N\n \n-clean$(1)_T_$(2)_H_$(3):\t\t\t\t\t\t       \\\n-\t    $$(foreach crate,$$(CRATES),clean$(1)_T_$(2)_H_$(3)-lib-$$(crate))  \\\n+clean$(1)_T_$(2)_H_$(3): \\\n+\t    $$(foreach crate,$$(CRATES),clean$(1)_T_$(2)_H_$(3)-lib-$$(crate)) \\\n \t    $$(foreach tool,$$(TOOLS),clean$(1)_T_$(2)_H_$(3)-tool-$$(tool))\n \t$$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a\n \t$$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libcompiler-rt.a"}, {"sha": "bda2731babe0cf2a1595131175c2958c796a070f", "filename": "mk/ctags.mk", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fctags.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fctags.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fctags.mk?ref=6203f8ac7b2c31611ef7b84a940dba56058ac03d", "patch": "@@ -18,18 +18,18 @@\n # This is using a blacklist approach, probably more durable than a whitelist.\n # We exclude: external dependencies (llvm, libuv, gyp, rt/{msvc,sundown,vg}),\n # tests (compiletest, test) and a couple of other things (rt/arch, etc)\n-CTAGS_LOCATIONS=$(patsubst ${CFG_SRC_DIR}src/llvm,,\\\n-\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/libuv,,\\\n-\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/compiletest,,\\\n-\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/test,,\\\n-\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/gyp,,\\\n-\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/etc,,\\\n-\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/rt,,\\\n-\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/rt/arch,,\\\n-\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/rt/msvc,,\\\n-\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/rt/sundown,,\\\n-\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/rt/vg,,\\\n-\t\t\t\t$(wildcard ${CFG_SRC_DIR}src/*) $(wildcard ${CFG_SRC_DIR}src/rt/*)\\\n+CTAGS_LOCATIONS=$(patsubst ${CFG_SRC_DIR}src/llvm,, \\\n+\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/libuv,, \\\n+\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/compiletest,, \\\n+\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/test,, \\\n+\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/gyp,, \\\n+\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/etc,, \\\n+\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/rt,, \\\n+\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/rt/arch,, \\\n+\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/rt/msvc,, \\\n+\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/rt/sundown,, \\\n+\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/rt/vg,, \\\n+\t\t\t\t$(wildcard ${CFG_SRC_DIR}src/*) $(wildcard ${CFG_SRC_DIR}src/rt/*) \\\n \t\t\t\t)))))))))))\n CTAGS_OPTS=--options=\"${CFG_SRC_DIR}src/etc/ctags.rust\" --languages=-javascript --recurse ${CTAGS_LOCATIONS}\n # We could use `--languages=Rust`, but there is value in producing tags for the"}, {"sha": "718916d99bbbf80cc633e4324e8bd1e3f04303e8", "filename": "mk/docs.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=6203f8ac7b2c31611ef7b84a940dba56058ac03d", "patch": "@@ -112,8 +112,8 @@ HTML_DEPS += doc/version_info.html\n doc/version_info.html: $(D)/version_info.html.template $(MKFILE_DEPS) \\\n                        $(wildcard $(D)/*.*) | doc/\n \t@$(call E, version-info: $@)\n-\t$(Q)sed -e \"s/VERSION/$(CFG_RELEASE)/; s/SHORT_HASH/$(\\\n-                    CFG_SHORT_VER_HASH)/;\\\n+\t$(Q)sed -e \"s/VERSION/$(CFG_RELEASE)/; s/SHORT_HASH/$( \\\n+                    CFG_SHORT_VER_HASH)/; \\\n                 s/STAMP/$(CFG_VER_HASH)/;\" $< >$@\n \n GENERATED += doc/version.tex doc/version_info.html"}, {"sha": "59a00950b5cfde17634027417cb08d100fff3bcb", "filename": "mk/host.mk", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fhost.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fhost.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fhost.mk?ref=6203f8ac7b2c31611ef7b84a940dba56058ac03d", "patch": "@@ -19,17 +19,17 @@\n define CP_HOST_STAGE_N_CRATE\n \n ifeq ($$(ONLY_RLIB_$(5)),)\n-$$(HLIB$(2)_H_$(4))/stamp.$(5):\t\t\t\t\t\\\n-\t$$(TLIB$(1)_T_$(3)_H_$(4))/stamp.$(5)\t\t\t\\\n-\t$$(RUST_DEPS_$(5):%=$$(HLIB$(2)_H_$(4))/stamp.%)\t\\\n+$$(HLIB$(2)_H_$(4))/stamp.$(5): \\\n+\t$$(TLIB$(1)_T_$(3)_H_$(4))/stamp.$(5) \\\n+\t$$(RUST_DEPS_$(5):%=$$(HLIB$(2)_H_$(4))/stamp.%) \\\n \t| $$(HLIB$(2)_H_$(4))/\n \t@$$(call E, cp: $$(@D)/lib$(5))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES,\\\n+\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES, \\\n \t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(3),$(5)))\n \t$$(Q)cp $$< $$@\n \t$$(Q)cp -R $$(TLIB$(1)_T_$(3)_H_$(4))/$$(call CFG_LIB_GLOB_$(3),$(5)) \\\n \t        $$(HLIB$(2)_H_$(4))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES,\\\n+\t$$(call LIST_ALL_OLD_GLOB_MATCHES, \\\n \t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(3),$(5)))\n else\n $$(HLIB$(2)_H_$(4))/stamp.$(5):\n@@ -66,19 +66,19 @@ endif\n \n endef\n \n-$(foreach t,$(CFG_HOST),\t\t\t\t\t\t    \\\n-\t$(eval $(call CP_HOST_STAGE_N,0,1,$(t),$(t)))\t\t\t    \\\n-\t$(eval $(call CP_HOST_STAGE_N,1,2,$(t),$(t)))\t\t\t    \\\n+$(foreach t,$(CFG_HOST), \\\n+\t$(eval $(call CP_HOST_STAGE_N,0,1,$(t),$(t))) \\\n+\t$(eval $(call CP_HOST_STAGE_N,1,2,$(t),$(t))) \\\n \t$(eval $(call CP_HOST_STAGE_N,2,3,$(t),$(t))))\n \n-$(foreach crate,$(CRATES),\t\t\t\t\t\t    \\\n- $(foreach t,$(CFG_HOST),\t\t\t\t\t\t    \\\n-  $(eval $(call CP_HOST_STAGE_N_CRATE,0,1,$(t),$(t),$(crate)))\t\t    \\\n-  $(eval $(call CP_HOST_STAGE_N_CRATE,1,2,$(t),$(t),$(crate)))\t\t    \\\n+$(foreach crate,$(CRATES), \\\n+ $(foreach t,$(CFG_HOST), \\\n+  $(eval $(call CP_HOST_STAGE_N_CRATE,0,1,$(t),$(t),$(crate))) \\\n+  $(eval $(call CP_HOST_STAGE_N_CRATE,1,2,$(t),$(t),$(crate))) \\\n   $(eval $(call CP_HOST_STAGE_N_CRATE,2,3,$(t),$(t),$(crate)))))\n \n-$(foreach tool,$(TOOLS),\t\t\t\t\t\t    \\\n- $(foreach t,$(CFG_HOST),\t\t\t\t\t\t    \\\n-  $(eval $(call CP_HOST_STAGE_N_TOOL,0,1,$(t),$(t),$(tool)))\t\t    \\\n-  $(eval $(call CP_HOST_STAGE_N_TOOL,1,2,$(t),$(t),$(tool)))\t\t    \\\n+$(foreach tool,$(TOOLS), \\\n+ $(foreach t,$(CFG_HOST), \\\n+  $(eval $(call CP_HOST_STAGE_N_TOOL,0,1,$(t),$(t),$(tool))) \\\n+  $(eval $(call CP_HOST_STAGE_N_TOOL,1,2,$(t),$(t),$(tool))) \\\n   $(eval $(call CP_HOST_STAGE_N_TOOL,2,3,$(t),$(t),$(tool)))))"}, {"sha": "ddbbac495433da8eec81a04ac1d3a4bd0e8c5d6a", "filename": "mk/install.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=6203f8ac7b2c31611ef7b84a940dba56058ac03d", "patch": "@@ -81,15 +81,15 @@ endif\n define INSTALL_RUNTIME_TARGET_N\n install-runtime-target-$(1)-host-$(2): $$(TSREQ$$(ISTAGE)_T_$(1)_H_$(2)) $$(SREQ$$(ISTAGE)_T_$(1)_H_$(2))\n \t$$(Q)$$(call ADB_SHELL,mkdir,$(CFG_RUNTIME_PUSH_DIR))\n-\t$$(Q)$$(foreach crate,$$(TARGET_CRATES),\\\n-\t    $$(call ADB_PUSH,$$(TL$(1)$(2))/$$(call CFG_LIB_GLOB_$(1),$$(crate)),\\\n+\t$$(Q)$$(foreach crate,$$(TARGET_CRATES), \\\n+\t    $$(call ADB_PUSH,$$(TL$(1)$(2))/$$(call CFG_LIB_GLOB_$(1),$$(crate)), \\\n \t\t\t$$(CFG_RUNTIME_PUSH_DIR));)\n endef\n \n define INSTALL_RUNTIME_TARGET_CLEANUP_N\n install-runtime-target-$(1)-cleanup:\n \t$$(Q)$$(call ADB,remount)\n-\t$$(Q)$$(foreach crate,$$(TARGET_CRATES),\\\n+\t$$(Q)$$(foreach crate,$$(TARGET_CRATES), \\\n \t    $$(call ADB_SHELL,rm,$$(CFG_RUNTIME_PUSH_DIR)/$$(call CFG_LIB_GLOB_$(1),$$(crate)));)\n endef\n "}, {"sha": "4d354908b6898d32f6390f2db34c5e19e9c92088", "filename": "mk/main.mk", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=6203f8ac7b2c31611ef7b84a940dba56058ac03d", "patch": "@@ -167,7 +167,7 @@ endif\n define DEF_X\n X_$(1) := $(CFG_EXE_SUFFIX_$(1))\n endef\n-$(foreach target,$(CFG_TARGET),\\\n+$(foreach target,$(CFG_TARGET), \\\n   $(eval $(call DEF_X,$(target))))\n \n # \"Source\" files we generate in builddir along the way.\n@@ -333,7 +333,7 @@ TSREQ$(1)_T_$(2)_H_$(3) = \\\n # target\n SREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t$$(foreach dep,$$(TARGET_CRATES),\\\n+\t$$(foreach dep,$$(TARGET_CRATES), \\\n \t    $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep))\n \n # Prerequisites for a working stageN compiler and complete set of target\n@@ -416,20 +416,20 @@ RPATH_VAR$(1)_T_$(2)_H_$(3) := $$(TARGET_RPATH_VAR$(1)_T_$(2)_H_$(3))\n endif\n endif\n \n-STAGE$(1)_T_$(2)_H_$(3) := \t\t\t\t\t\t\\\n-\t$$(Q)$$(RPATH_VAR$(1)_T_$(2)_H_$(3))                            \\\n-\t\t$$(call CFG_RUN_TARG_$(3),$(1),\t\t\t\t\\\n-\t\t$$(CFG_VALGRIND_COMPILE$(1))\t\t\t\t\\\n-\t\t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\t\t\t\\\n-\t\t--cfg $$(CFGFLAG$(1)_T_$(2)_H_$(3))\t\t\t\\\n+STAGE$(1)_T_$(2)_H_$(3) := \\\n+\t$$(Q)$$(RPATH_VAR$(1)_T_$(2)_H_$(3)) \\\n+\t\t$$(call CFG_RUN_TARG_$(3),$(1), \\\n+\t\t$$(CFG_VALGRIND_COMPILE$(1)) \\\n+\t\t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n+\t\t--cfg $$(CFGFLAG$(1)_T_$(2)_H_$(3)) \\\n \t\t$$(CFG_RUSTC_FLAGS) $$(EXTRAFLAGS_STAGE$(1)) --target=$(2)) \\\n                 $$(RUSTC_FLAGS_$(2))\n \n-PERF_STAGE$(1)_T_$(2)_H_$(3) :=\t\t\t\t\t\t\\\n-\t$$(Q)$$(call CFG_RUN_TARG_$(3),$(1),\t\t\t\t\\\n-\t\t$$(CFG_PERF_TOOL) \t\t\t\t\t\\\n-\t\t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\t\t\t\\\n-\t\t--cfg $$(CFGFLAG$(1)_T_$(2)_H_$(3))\t\t\t\\\n+PERF_STAGE$(1)_T_$(2)_H_$(3) := \\\n+\t$$(Q)$$(call CFG_RUN_TARG_$(3),$(1), \\\n+\t\t$$(CFG_PERF_TOOL) \\\n+\t\t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n+\t\t--cfg $$(CFGFLAG$(1)_T_$(2)_H_$(3)) \\\n \t\t$$(CFG_RUSTC_FLAGS) $$(EXTRAFLAGS_STAGE$(1)) --target=$(2)) \\\n                 $$(RUSTC_FLAGS_$(2))\n \n@@ -455,13 +455,13 @@ define DEF_RUSTC_STAGE_TARGET\n # $(1) == architecture\n # $(2) == stage\n \n-rustc-stage$(2)-H-$(1):\t\t\t\t\t\t\t\\\n+rustc-stage$(2)-H-$(1): \\\n \t$$(foreach target,$$(CFG_TARGET),$$(SREQ$(2)_T_$$(target)_H_$(1)))\n \n endef\n \n-$(foreach host,$(CFG_HOST),\t\t\t\t\t\t\\\n- $(eval $(foreach stage,1 2 3,\t\t\t\t\t\t\\\n+$(foreach host,$(CFG_HOST), \\\n+ $(eval $(foreach stage,1 2 3, \\\n   $(eval $(call DEF_RUSTC_STAGE_TARGET,$(host),$(stage))))))\n \n rustc-stage1: rustc-stage1-H-$(CFG_BUILD)\n@@ -474,7 +474,7 @@ define DEF_RUSTC_TARGET\n rustc-H-$(1): rustc-stage2-H-$(1)\n endef\n \n-$(foreach host,$(CFG_TARGET),\t\t\t\\\n+$(foreach host,$(CFG_TARGET), \\\n  $(eval $(call DEF_RUSTC_TARGET,$(host))))\n \n rustc-stage1: rustc-stage1-H-$(CFG_BUILD)"}, {"sha": "b72574f6fe326bf3d2385e2b0c7034749c1fad60", "filename": "mk/platform.mk", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=6203f8ac7b2c31611ef7b84a940dba56058ac03d", "patch": "@@ -32,7 +32,7 @@ $(foreach t,$(CFG_TARGET),$(info cfg: os for $(t) is $(OSTYPE_$(t))))\n CFG_DSYMUTIL := true\n \n # Hack: not sure how to test if a file exists in make other than this\n-OS_SUPP = $(patsubst %,--suppressions=%,\\\n+OS_SUPP = $(patsubst %,--suppressions=%, \\\n       $(wildcard $(CFG_SRC_DIR)src/etc/$(CFG_OSTYPE).supp*))\n \n ifdef CFG_DISABLE_OPTIMIZE_CXX\n@@ -67,7 +67,7 @@ ifneq ($(findstring linux,$(CFG_OSTYPE)),)\n     endif\n   else\n     ifdef CFG_VALGRIND\n-      CFG_PERF_TOOL :=\\\n+      CFG_PERF_TOOL := \\\n         $(CFG_VALGRIND) --tool=cachegrind --cache-sim=yes --branch-sim=yes\n     else\n       CFG_PERF_TOOL := /usr/bin/time --verbose\n@@ -94,7 +94,7 @@ define SET_FROM_CFG\n   endif\n endef\n \n-$(foreach cvar,CC CXX CPP CFLAGS CXXFLAGS CPPFLAGS,\\\n+$(foreach cvar,CC CXX CPP CFLAGS CXXFLAGS CPPFLAGS, \\\n   $(eval $(call SET_FROM_CFG,$(cvar))))\n \n CFG_RLIB_GLOB=lib$(1)-*.rlib\n@@ -486,8 +486,8 @@ CFG_LIBUV_LINK_FLAGS_i586-mingw32msvc := -L$(CFG_MINGW32_CROSS_PATH)/i586-mingw3\n CFG_EXE_SUFFIX_i586-mingw32msvc := .exe\n CFG_WINDOWSY_i586-mingw32msvc := 1\n CFG_UNIXY_i586-mingw32msvc :=\n-CFG_PATH_MUNGE_i586-mingw32msvc := $(strip perl -i.bak -p   \\\n-                             -e 's@\\\\(\\S)@/\\1@go;'       \\\n+CFG_PATH_MUNGE_i586-mingw32msvc := $(strip perl -i.bak -p \\\n+                             -e 's@\\\\(\\S)@/\\1@go;' \\\n                              -e 's@^/([a-zA-Z])/@\\1:/@o;')\n CFG_LDPATH_i586-mingw32msvc :=\n CFG_RUN_i586-mingw32msvc=\n@@ -591,7 +591,7 @@ define FILTER_FLAGS\n   endif\n endef\n \n-$(foreach target,$(CFG_TARGET),\\\n+$(foreach target,$(CFG_TARGET), \\\n   $(eval $(call FILTER_FLAGS,$(target))))\n \n \n@@ -620,27 +620,27 @@ define CFG_MAKE_TOOLCHAIN\n \tRUSTC_FLAGS_$(1)=$$(RUSTC_CROSS_FLAGS_$(1)) $(RUSTC_FLAGS_$(1))\n   endif\n \n-  CFG_COMPILE_C_$(1) = $$(CC_$(1))  \\\n-        $$(CFG_GCCISH_CFLAGS)      \\\n+  CFG_COMPILE_C_$(1) = $$(CC_$(1)) \\\n+        $$(CFG_GCCISH_CFLAGS) \\\n         $$(CFG_GCCISH_CFLAGS_$(1)) \\\n-        $$(CFG_DEPEND_FLAGS)       \\\n+        $$(CFG_DEPEND_FLAGS) \\\n         -c -o $$(1) $$(2)\n   CFG_LINK_C_$(1) = $$(CC_$(1)) \\\n-        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)          \\\n-        $$(CFG_GCCISH_LINK_FLAGS_$(1))              \\\n-        $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2)     \\\n+        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1) \\\n+        $$(CFG_GCCISH_LINK_FLAGS_$(1)) \\\n+        $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2) \\\n         $$(call CFG_INSTALL_NAME_$(1),$$(4))\n   CFG_COMPILE_CXX_$(1) = $$(CXX_$(1)) \\\n-        $$(CFG_GCCISH_CFLAGS)      \\\n-        $$(CFG_GCCISH_CXXFLAGS)    \\\n+        $$(CFG_GCCISH_CFLAGS) \\\n+        $$(CFG_GCCISH_CXXFLAGS) \\\n         $$(CFG_GCCISH_CFLAGS_$(1)) \\\n-        $$(CFG_GCCISH_CXXFLAGS_$(1))    \\\n-        $$(CFG_DEPEND_FLAGS)       \\\n+        $$(CFG_GCCISH_CXXFLAGS_$(1)) \\\n+        $$(CFG_DEPEND_FLAGS) \\\n         -c -o $$(1) $$(2)\n   CFG_LINK_CXX_$(1) = $$(CXX_$(1)) \\\n-        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)             \\\n-        $$(CFG_GCCISH_LINK_FLAGS_$(1))                 \\\n-        $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2)        \\\n+        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1) \\\n+        $$(CFG_GCCISH_LINK_FLAGS_$(1)) \\\n+        $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2) \\\n         $$(call CFG_INSTALL_NAME_$(1),$$(4))\n \n   ifeq ($$(findstring $(HOST_$(1)),arm mips mipsel),)\n@@ -664,5 +664,5 @@ define CFG_MAKE_TOOLCHAIN\n \n endef\n \n-$(foreach target,$(CFG_TARGET),\\\n+$(foreach target,$(CFG_TARGET), \\\n   $(eval $(call CFG_MAKE_TOOLCHAIN,$(target))))"}, {"sha": "7df2489744b6707bfd5ba7c2811bc87593d157fe", "filename": "mk/prepare.mk", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fprepare.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fprepare.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fprepare.mk?ref=6203f8ac7b2c31611ef7b84a940dba56058ac03d", "patch": "@@ -52,13 +52,13 @@ define PREPARE_LIB\n \t$(nop)\n \t@$(call E, prepare: $(PREPARE_WORKING_DEST_LIB_DIR)/$(1))\n \t$(Q)LIB_NAME=\"$(notdir $(lastword $(wildcard $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1))))\"; \\\n-\tMATCHES=\"$(filter-out %$(notdir $(lastword $(wildcard $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1)))),\\\n+\tMATCHES=\"$(filter-out %$(notdir $(lastword $(wildcard $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1)))), \\\n                         $(wildcard $(PREPARE_WORKING_DEST_LIB_DIR)/$(1)))\"; \\\n-\tif [ -n \"$$MATCHES\" ]; then                                              \\\n-\t  echo \"warning: one or libraries matching Rust library '$(1)'\" &&       \\\n-\t  echo \"  (other than '$$LIB_NAME' itself) already present\"     &&       \\\n-\t  echo \"  at destination $(PREPARE_WORKING_DEST_LIB_DIR):\"                    &&       \\\n-\t  echo $$MATCHES ;                                                       \\\n+\tif [ -n \"$$MATCHES\" ]; then \\\n+\t  echo \"warning: one or libraries matching Rust library '$(1)'\" && \\\n+\t  echo \"  (other than '$$LIB_NAME' itself) already present\"     && \\\n+\t  echo \"  at destination $(PREPARE_WORKING_DEST_LIB_DIR):\"      && \\\n+\t  echo $$MATCHES ; \\\n \tfi\n \t$(Q)$(PREPARE_LIB_CMD) `ls -drt1 $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1) | tail -1` $(PREPARE_WORKING_DEST_LIB_DIR)/\n endef\n@@ -82,11 +82,11 @@ prepare-host-tool-$(1)-$(2)-$(3)-$(4): prepare-maybe-clean-$(4) \\\n                                   $$(foreach dep,$$(TOOL_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3)-$(4)) \\\n                                   $$(HBIN$(2)_H_$(3))/$(1)$$(X_$(3)) \\\n                                   prepare-host-dirs-$(4)\n-\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)),\\\n-      $$(if $$(findstring $(3), $$(PREPARE_HOST)),\\\n+\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)), \\\n+      $$(if $$(findstring $(3), $$(PREPARE_HOST)), \\\n         $$(call PREPARE_BIN,$(1)$$(X_$$(PREPARE_HOST))),),)\n-\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)),\\\n-      $$(if $$(findstring $(3), $$(PREPARE_HOST)),\\\n+\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)), \\\n+      $$(if $$(findstring $(3), $$(PREPARE_HOST)), \\\n         $$(call PREPARE_MAN,$(1).1),),)\n endef\n \n@@ -101,12 +101,12 @@ define DEF_PREPARE_HOST_LIB\n prepare-host-lib-$(1)-$(2)-$(3)-$(4): PREPARE_WORKING_SOURCE_LIB_DIR=$$(PREPARE_SOURCE_LIB_DIR)\n prepare-host-lib-$(1)-$(2)-$(3)-$(4): PREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_LIB_DIR)\n prepare-host-lib-$(1)-$(2)-$(3)-$(4): prepare-maybe-clean-$(4) \\\n-                                 $$(foreach dep,$$(RUST_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3)-$(4))\\\n+                                 $$(foreach dep,$$(RUST_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3)-$(4)) \\\n                                  $$(HLIB$(2)_H_$(3))/stamp.$(1) \\\n                                  prepare-host-dirs-$(4)\n-\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)),\\\n-      $$(if $$(findstring $(3), $$(PREPARE_HOST)),\\\n-        $$(if $$(findstring 1,$$(ONLY_RLIB_$(1))),,\\\n+\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)), \\\n+      $$(if $$(findstring $(3), $$(PREPARE_HOST)), \\\n+        $$(if $$(findstring 1,$$(ONLY_RLIB_$(1))),, \\\n           $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$$(PREPARE_HOST),$(1)))),),)\n endef\n \n@@ -129,17 +129,17 @@ prepare-target-$(2)-host-$(3)-$(1)-$(4): prepare-maybe-clean-$(4) \\\n # *not* install the rlibs for host crates because there's no need to statically\n # link against most of them. They just produce a large amount of extra size\n # bloat.\n-\t$$(if $$(findstring $(1), $$(PREPARE_STAGE)),\\\n-      $$(if $$(findstring $(2), $$(PREPARE_TARGETS)),\\\n-        $$(if $$(findstring $(3), $$(PREPARE_HOST)),\\\n-          $$(call PREPARE_DIR,$$(PREPARE_WORKING_DEST_LIB_DIR))\\\n-          $$(foreach crate,$$(TARGET_CRATES),\\\n-\t    $$(if $$(findstring 1, $$(ONLY_RLIB_$$(crate))),,\\\n-              $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$(2),$$(crate))))\\\n-            $$(call PREPARE_LIB,$$(call CFG_RLIB_GLOB,$$(crate))))\\\n-          $$(if $$(findstring $(2),$$(CFG_HOST)),\\\n-            $$(foreach crate,$$(HOST_CRATES),\\\n-              $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$(2),$$(crate)))),)\\\n+\t$$(if $$(findstring $(1), $$(PREPARE_STAGE)), \\\n+      $$(if $$(findstring $(2), $$(PREPARE_TARGETS)), \\\n+        $$(if $$(findstring $(3), $$(PREPARE_HOST)), \\\n+          $$(call PREPARE_DIR,$$(PREPARE_WORKING_DEST_LIB_DIR)) \\\n+          $$(foreach crate,$$(TARGET_CRATES), \\\n+\t    $$(if $$(findstring 1, $$(ONLY_RLIB_$$(crate))),, \\\n+              $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$(2),$$(crate)))) \\\n+            $$(call PREPARE_LIB,$$(call CFG_RLIB_GLOB,$$(crate)))) \\\n+          $$(if $$(findstring $(2),$$(CFG_HOST)), \\\n+            $$(foreach crate,$$(HOST_CRATES), \\\n+              $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$(2),$$(crate)))),) \\\n           $$(call PREPARE_LIB,libmorestack.a) \\\n           $$(call PREPARE_LIB,libcompiler-rt.a),),),)\n endef\n@@ -160,36 +160,36 @@ prepare-everything-$(1): prepare-host-$(1) prepare-targets-$(1)\n prepare-host-$(1): prepare-host-tools-$(1)\n \n prepare-host-tools-$(1): \\\n-        $$(foreach tool, $$(PREPARE_TOOLS),\\\n-          $$(foreach host,$$(CFG_HOST),\\\n+        $$(foreach tool, $$(PREPARE_TOOLS), \\\n+          $$(foreach host,$$(CFG_HOST), \\\n             prepare-host-tool-$$(tool)-$$(PREPARE_STAGE)-$$(host)-$(1)))\n \n prepare-host-dirs-$(1): prepare-maybe-clean-$(1)\n \t$$(call PREPARE_DIR,$$(PREPARE_DEST_BIN_DIR))\n \t$$(call PREPARE_DIR,$$(PREPARE_DEST_LIB_DIR))\n \t$$(call PREPARE_DIR,$$(PREPARE_DEST_MAN_DIR))\n \n-$$(foreach tool,$$(PREPARE_TOOLS),\\\n-  $$(foreach host,$$(CFG_HOST),\\\n+$$(foreach tool,$$(PREPARE_TOOLS), \\\n+  $$(foreach host,$$(CFG_HOST), \\\n       $$(eval $$(call DEF_PREPARE_HOST_TOOL,$$(tool),$$(PREPARE_STAGE),$$(host),$(1)))))\n \n-$$(foreach lib,$$(CRATES),\\\n-  $$(foreach host,$$(CFG_HOST),\\\n+$$(foreach lib,$$(CRATES), \\\n+  $$(foreach host,$$(CFG_HOST), \\\n     $$(eval $$(call DEF_PREPARE_HOST_LIB,$$(lib),$$(PREPARE_STAGE),$$(host),$(1)))))\n \n-prepare-targets-$(1):\\\n-        $$(foreach host,$$(CFG_HOST),\\\n-           $$(foreach target,$$(CFG_TARGET),\\\n+prepare-targets-$(1): \\\n+        $$(foreach host,$$(CFG_HOST), \\\n+           $$(foreach target,$$(CFG_TARGET), \\\n              prepare-target-$$(target)-host-$$(host)-$$(PREPARE_STAGE)-$(1)))\n \n-$$(foreach host,$$(CFG_HOST),\\\n+$$(foreach host,$$(CFG_HOST), \\\n   $$(foreach target,$$(CFG_TARGET), \\\n     $$(eval $$(call DEF_PREPARE_TARGET_N,$$(PREPARE_STAGE),$$(target),$$(host),$(1)))))\n \n prepare-maybe-clean-$(1):\n-\t$$(if $$(findstring true,$$(PREPARE_CLEAN)),\\\n+\t$$(if $$(findstring true,$$(PREPARE_CLEAN)), \\\n       @$$(call E, cleaning destination $$(PREPARE_DEST_DIR)),)\n-\t$$(if $$(findstring true,$$(PREPARE_CLEAN)),\\\n+\t$$(if $$(findstring true,$$(PREPARE_CLEAN)), \\\n       $$(Q)rm -rf $$(PREPARE_DEST_DIR),)\n \n "}, {"sha": "e41dc8f4daab342cc7240881f55f4e1066404bb4", "filename": "mk/rt.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=6203f8ac7b2c31611ef7b84a940dba56058ac03d", "patch": "@@ -114,10 +114,10 @@ $$(RT_OUTPUT_DIR_$(1))/$$(NATIVE_$(2)_$(1)): $$(OBJS_$(2)_$(1))\n \n endef\n \n-$(foreach target,$(CFG_TARGET),\t\t\t\t\t    \\\n+$(foreach target,$(CFG_TARGET), \\\n  $(eval $(call RUNTIME_RULES,$(target))))\n-$(foreach lib,$(NATIVE_LIBS),\t\t\t\t\t    \\\n- $(foreach target,$(CFG_TARGET),\t\t\t\t    \\\n+$(foreach lib,$(NATIVE_LIBS), \\\n+ $(foreach target,$(CFG_TARGET), \\\n   $(eval $(call THIRD_PARTY_LIB,$(target),$(lib)))))\n \n "}, {"sha": "86c89cf0210eefae6cdc6c00aa87313df982932f", "filename": "mk/snap.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fsnap.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fsnap.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fsnap.mk?ref=6203f8ac7b2c31611ef7b84a940dba56058ac03d", "patch": "@@ -17,8 +17,8 @@ snap-stage$(1)-H-$(2): $$(HSREQ$(1)_H_$(2))\n \n endef\n \n-$(foreach host,$(CFG_HOST),\t\t\t\t\t\t\\\n- $(eval $(foreach stage,1 2 3,\t\t\t\t\t\t\t\t\\\n+$(foreach host,$(CFG_HOST), \\\n+ $(eval $(foreach stage,1 2 3, \\\n   $(eval $(call DEF_SNAP_FOR_STAGE_H,$(stage),$(host))))))\n \n snap-stage1: snap-stage1-H-$(CFG_BUILD)"}, {"sha": "4edd9118a5695ec7aca6f2044c5f89c005d51106", "filename": "mk/stage0.mk", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=6203f8ac7b2c31611ef7b84a940dba56058ac03d", "patch": "@@ -6,9 +6,9 @@ $(HBIN0_H_$(CFG_BUILD))/:\n $(HLIB0_H_$(CFG_BUILD))/:\n \tmkdir -p $@\n \n-$(SNAPSHOT_RUSTC_POST_CLEANUP):\t\t\t\t\t\t\\\n-\t\t$(S)src/snapshots.txt\t\t\t\t\t\\\n-\t\t$(S)src/etc/get-snapshot.py $(MKFILE_DEPS)\t\t\\\n+$(SNAPSHOT_RUSTC_POST_CLEANUP): \\\n+\t\t$(S)src/snapshots.txt \\\n+\t\t$(S)src/etc/get-snapshot.py $(MKFILE_DEPS) \\\n \t\t| $(HBIN0_H_$(CFG_BUILD))/\n \n \t@$(call E, fetch: $@)\n@@ -44,5 +44,5 @@ endef\n \n # Use stage1 to build other architectures: then you don't have to wait\n # for stage2, but you get the latest updates to the compiler source.\n-$(foreach t,$(NON_BUILD_HOST),\t\t\t\t\t\t\t\t\\\n+$(foreach t,$(NON_BUILD_HOST), \\\n  $(eval $(call BOOTSTRAP_STAGE0,$(t),1,$(CFG_BUILD))))"}, {"sha": "10fed6ad98d93375cf7af842f8b410ebee3a453a", "filename": "mk/target.mk", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=6203f8ac7b2c31611ef7b84a940dba56058ac03d", "patch": "@@ -29,19 +29,19 @@ WFLAGS_ST2 = -D warnings\n # $(3) - host\n # $(4) crate\n define RUST_CRATE_FULLDEPS\n-CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4) :=\t\t\t    \\\n-\t\t$$(CRATEFILE_$(4))\t\t\t\t    \\\n-\t\t$$(RSINPUTS_$(4))\t\t\t\t    \\\n-\t\t$$(foreach dep,$$(RUST_DEPS_$(4)),\t\t    \\\n-\t\t  $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep))\t    \\\n-\t\t$$(foreach dep,$$(NATIVE_DEPS_$(4)),\t\t    \\\n+CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4) := \\\n+\t\t$$(CRATEFILE_$(4)) \\\n+\t\t$$(RSINPUTS_$(4)) \\\n+\t\t$$(foreach dep,$$(RUST_DEPS_$(4)), \\\n+\t\t  $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep)) \\\n+\t\t$$(foreach dep,$$(NATIVE_DEPS_$(4)), \\\n \t\t  $$(RT_OUTPUT_DIR_$(2))/$$(call CFG_STATIC_LIB_NAME_$(2),$$(dep)))\n endef\n \n-$(foreach host,$(CFG_HOST),\t\t\t\t\t\t    \\\n- $(foreach target,$(CFG_TARGET),\t\t\t\t\t    \\\n-  $(foreach stage,$(STAGES),\t\t\t\t\t\t    \\\n-   $(foreach crate,$(CRATES),\t\t\t\t\t\t    \\\n+$(foreach host,$(CFG_HOST), \\\n+ $(foreach target,$(CFG_TARGET), \\\n+  $(foreach stage,$(STAGES), \\\n+   $(foreach crate,$(CRATES), \\\n     $(eval $(call RUST_CRATE_FULLDEPS,$(stage),$(target),$(host),$(crate)))))))\n \n # RUST_TARGET_STAGE_N template: This defines how target artifacts are built\n@@ -69,15 +69,15 @@ $(foreach host,$(CFG_HOST),\t\t\t\t\t\t    \\\n define RUST_TARGET_STAGE_N\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): CFG_COMPILER_HOST_TRIPLE = $(2)\n-$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4):\t\t\t\t    \\\n-\t\t$$(CRATEFILE_$(4))\t\t\t\t    \\\n-\t\t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4))\t    \\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\t\t\t    \\\n+$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): \\\n+\t\t$$(CRATEFILE_$(4)) \\\n+\t\t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4)) \\\n+\t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, rustc: $$(@D)/lib$(4))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES,\\\n+\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES, \\\n \t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(2),$(4)))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES,\\\n+\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES, \\\n \t    $$(dir $$@)$$(call CFG_RLIB_GLOB,$(4)))\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) \\\n \t\t$$(WFLAGS_ST$(1)) \\\n@@ -89,9 +89,9 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4):\t\t\t\t    \\\n \t\t-C extra-filename=-$$(CFG_FILENAME_EXTRA) \\\n \t\t$$<\n \t@touch $$@\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES,\\\n+\t$$(call LIST_ALL_OLD_GLOB_MATCHES, \\\n \t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(2),$(4)))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES,\\\n+\t$$(call LIST_ALL_OLD_GLOB_MATCHES, \\\n \t    $$(dir $$@)$$(call CFG_RLIB_GLOB,$(4)))\n \n endef\n@@ -110,12 +110,12 @@ endef\n # $(4) - name of the tool being built\n define TARGET_TOOL\n \n-$$(TBIN$(1)_T_$(2)_H_$(3))/$(4)$$(X_$(2)):\t\t\t\\\n-\t\t$$(TOOL_SOURCE_$(4))\t\t\t\t\\\n-\t\t$$(TOOL_INPUTS_$(4))\t\t\t\t\\\n-\t\t$$(foreach dep,$$(TOOL_DEPS_$(4)),\t\t\\\n-\t\t    $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep))\t\\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\t\t\t\\\n+$$(TBIN$(1)_T_$(2)_H_$(3))/$(4)$$(X_$(2)): \\\n+\t\t$$(TOOL_SOURCE_$(4)) \\\n+\t\t$$(TOOL_INPUTS_$(4)) \\\n+\t\t$$(foreach dep,$$(TOOL_DEPS_$(4)), \\\n+\t\t    $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep)) \\\n+\t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n \t\t| $$(TBIN$(1)_T_$(4)_H_$(3))/\n \t@$$(call E, rustc: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --cfg $(4)\n@@ -155,24 +155,24 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a: \\\n \t$$(Q)cp $$< $$@\n endef\n \n-$(foreach source,$(CFG_HOST),\t\t\t\t\t\t    \\\n- $(foreach target,$(CFG_TARGET),\t\t\t\t\t    \\\n-  $(eval $(call TARGET_HOST_RULES,0,$(target),$(source)))\t\t    \\\n-  $(eval $(call TARGET_HOST_RULES,1,$(target),$(source)))\t\t    \\\n-  $(eval $(call TARGET_HOST_RULES,2,$(target),$(source)))\t\t    \\\n+$(foreach source,$(CFG_HOST), \\\n+ $(foreach target,$(CFG_TARGET), \\\n+  $(eval $(call TARGET_HOST_RULES,0,$(target),$(source))) \\\n+  $(eval $(call TARGET_HOST_RULES,1,$(target),$(source))) \\\n+  $(eval $(call TARGET_HOST_RULES,2,$(target),$(source))) \\\n   $(eval $(call TARGET_HOST_RULES,3,$(target),$(source)))))\n \n # In principle, each host can build each target for both libs and tools\n-$(foreach crate,$(CRATES),\t\t\t\t\t\t    \\\n- $(foreach source,$(CFG_HOST),\t\t\t\t\t\t    \\\n-  $(foreach target,$(CFG_TARGET),\t\t\t\t\t    \\\n-   $(eval $(call RUST_TARGET_STAGE_N,0,$(target),$(source),$(crate)))\t    \\\n-   $(eval $(call RUST_TARGET_STAGE_N,1,$(target),$(source),$(crate)))\t    \\\n-   $(eval $(call RUST_TARGET_STAGE_N,2,$(target),$(source),$(crate)))\t    \\\n+$(foreach crate,$(CRATES), \\\n+ $(foreach source,$(CFG_HOST), \\\n+  $(foreach target,$(CFG_TARGET), \\\n+   $(eval $(call RUST_TARGET_STAGE_N,0,$(target),$(source),$(crate))) \\\n+   $(eval $(call RUST_TARGET_STAGE_N,1,$(target),$(source),$(crate))) \\\n+   $(eval $(call RUST_TARGET_STAGE_N,2,$(target),$(source),$(crate))) \\\n    $(eval $(call RUST_TARGET_STAGE_N,3,$(target),$(source),$(crate))))))\n \n-$(foreach host,$(CFG_HOST),\t\t\t\t\t\t    \\\n- $(foreach target,$(CFG_TARGET),\t\t\t\t\t    \\\n-  $(foreach stage,$(STAGES),\t\t\t\t\t\t    \\\n-   $(foreach tool,$(TOOLS),\t\t\t\t\t\t    \\\n+$(foreach host,$(CFG_HOST), \\\n+ $(foreach target,$(CFG_TARGET), \\\n+  $(foreach stage,$(STAGES), \\\n+   $(foreach tool,$(TOOLS), \\\n     $(eval $(call TARGET_TOOL,$(stage),$(target),$(host),$(tool)))))))"}, {"sha": "fbbc79f684a73c85ec634061cef897653ecafd65", "filename": "mk/tests.mk", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6203f8ac7b2c31611ef7b84a940dba56058ac03d/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=6203f8ac7b2c31611ef7b84a940dba56058ac03d", "patch": "@@ -75,12 +75,12 @@ TEST_RATCHET_NOISE_PERCENT=10.0\n \n # Whether to ratchet or merely save benchmarks\n ifdef CFG_RATCHET_BENCH\n-CRATE_TEST_EXTRA_ARGS=\\\n+CRATE_TEST_EXTRA_ARGS= \\\n   --test $(TEST_BENCH) \\\n   --ratchet-metrics $(call TEST_RATCHET_FILE,$(1),$(2),$(3),$(4)) \\\n   --ratchet-noise-percent $(TEST_RATCHET_NOISE_PERCENT)\n else\n-CRATE_TEST_EXTRA_ARGS=\\\n+CRATE_TEST_EXTRA_ARGS= \\\n   --test $(TEST_BENCH) \\\n   --save-metrics $(call TEST_RATCHET_FILE,$(1),$(2),$(3),$(4))\n endif\n@@ -158,9 +158,9 @@ $(info check: android device test dir $(CFG_ADB_TEST_DIR) ready \\\n  $(shell $(CFG_ADB) shell mkdir $(CFG_ADB_TEST_DIR)) \\\n  $(shell $(CFG_ADB) shell mkdir $(CFG_ADB_TEST_DIR)/tmp) \\\n  $(shell $(CFG_ADB) push $(S)src/etc/adb_run_wrapper.sh $(CFG_ADB_TEST_DIR) 1>/dev/null) \\\n- $(foreach crate,$(TARGET_CRATES),\\\n+ $(foreach crate,$(TARGET_CRATES), \\\n     $(shell $(CFG_ADB) push $(TLIB2_T_arm-linux-androideabi_H_$(CFG_BUILD))/$(call CFG_LIB_GLOB_arm-linux-androideabi,$(crate)) \\\n-                    $(CFG_ADB_TEST_DIR)))\\\n+                    $(CFG_ADB_TEST_DIR))) \\\n  )\n else\n CFG_ADB_TEST_DIR=\n@@ -202,15 +202,15 @@ cleantmptestlogs:\n cleantestlibs:\n \t$(Q)find $(CFG_BUILD)/test \\\n          -name '*.[odasS]' -o \\\n-         -name '*.so' -o      \\\n-         -name '*.dylib' -o   \\\n-         -name '*.dll' -o     \\\n-         -name '*.def' -o     \\\n-         -name '*.bc' -o      \\\n-         -name '*.dSYM' -o    \\\n-         -name '*.libaux' -o      \\\n-         -name '*.out' -o     \\\n-         -name '*.err' -o     \\\n+         -name '*.so' -o \\\n+         -name '*.dylib' -o \\\n+         -name '*.dll' -o \\\n+         -name '*.def' -o \\\n+         -name '*.bc' -o \\\n+         -name '*.dSYM' -o \\\n+         -name '*.libaux' -o \\\n+         -name '*.out' -o \\\n+         -name '*.err' -o \\\n \t -name '*.debugger.script' \\\n          | xargs rm -rf\n \n@@ -293,16 +293,16 @@ endif\n \n define DEF_TEST_SETS\n \n-check-stage$(1)-T-$(2)-H-$(3)-exec:     \t\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-exec\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rfail-exec\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-cfail-exec\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-full-exec\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-cfail-full-exec\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rmake-exec\t\t\t\\\n-        check-stage$(1)-T-$(2)-H-$(3)-crates-exec                       \\\n-        check-stage$(1)-T-$(2)-H-$(3)-doc-crates-exec                   \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-bench-exec\t\t\t\\\n+check-stage$(1)-T-$(2)-H-$(3)-exec: \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-exec \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-rfail-exec \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-cfail-exec \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-full-exec \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-cfail-full-exec \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-rmake-exec \\\n+        check-stage$(1)-T-$(2)-H-$(3)-crates-exec \\\n+        check-stage$(1)-T-$(2)-H-$(3)-doc-crates-exec \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-bench-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-debuginfo-gdb-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-debuginfo-lldb-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-codegen-exec \\\n@@ -334,10 +334,10 @@ check-stage$(1)-T-$(2)-H-$(3)-doc-exec: \\\n            check-stage$(1)-T-$(2)-H-$(3)-doc-$$(docname)-exec)\n \n check-stage$(1)-T-$(2)-H-$(3)-pretty-exec: \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-exec\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-full-exec\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rfail-exec\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-bench-exec\t\\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-exec \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-full-exec \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rfail-exec \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-bench-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-pretty-exec\n \n endef\n@@ -359,7 +359,7 @@ define TEST_RUNNER\n # parent crates.\n ifeq ($(NO_REBUILD),)\n TESTDEP_$(1)_$(2)_$(3)_$(4) = $$(SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t\t    $$(foreach crate,$$(TARGET_CRATES),\\\n+\t\t\t    $$(foreach crate,$$(TARGET_CRATES), \\\n \t\t\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate)) \\\n \t\t\t\t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4))\n \n@@ -377,13 +377,13 @@ TESTDEP_$(1)_$(2)_$(3)_$(4) = $$(RSINPUTS_$(4))\n endif\n \n $(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2)): CFG_COMPILER_HOST_TRIPLE = $(2)\n-$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2)):\t\t\t\t\\\n+$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2)): \\\n \t\t$$(CRATEFILE_$(4)) \\\n \t\t$$(TESTDEP_$(1)_$(2)_$(3)_$(4))\n \t@$$(call E, rustc: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\t\\\n-\t\t-L \"$$(RT_OUTPUT_DIR_$(2))\"\t\t\\\n-\t\t-L \"$$(LLVM_LIBDIR_$(2))\"\t\t\\\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test \\\n+\t\t-L \"$$(RT_OUTPUT_DIR_$(2))\" \\\n+\t\t-L \"$$(LLVM_LIBDIR_$(2))\" \\\n \t\t$$(RUSTFLAGS_$(4))\n \n endef\n@@ -600,19 +600,19 @@ ifndef CFG_DISABLE_OPTIMIZE_TESTS\n CTEST_RUSTC_FLAGS += -O\n endif\n \n-CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\t\\\n-\t\t--compile-lib-path $$(HLIB$(1)_H_$(3))\t\t\t\t\\\n-        --run-lib-path $$(TLIB$(1)_T_$(2)_H_$(3))\t\t\t\\\n-        --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\t\t\t\\\n+CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) := \\\n+\t\t--compile-lib-path $$(HLIB$(1)_H_$(3)) \\\n+        --run-lib-path $$(TLIB$(1)_T_$(2)_H_$(3)) \\\n+        --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n         --clang-path $(if $(CFG_CLANG),$(CFG_CLANG),clang) \\\n         --llvm-bin-path $(CFG_LLVM_INST_DIR_$(CFG_BUILD))/bin \\\n-        --aux-base $$(S)src/test/auxiliary/                 \\\n-        --stage-id stage$(1)-$(2)\t\t\t\t\t\t\t\\\n-        --target $(2)                                       \\\n-        --host $(3)                                       \\\n-        --android-cross-path=$(CFG_ANDROID_CROSS_PATH)    \\\n-        --adb-path=$(CFG_ADB)                          \\\n-        --adb-test-dir=$(CFG_ADB_TEST_DIR)                  \\\n+        --aux-base $$(S)src/test/auxiliary/ \\\n+        --stage-id stage$(1)-$(2) \\\n+        --target $(2) \\\n+        --host $(3) \\\n+        --android-cross-path=$(CFG_ANDROID_CROSS_PATH) \\\n+        --adb-path=$(CFG_ADB) \\\n+        --adb-test-dir=$(CFG_ADB_TEST_DIR) \\\n         --host-rustcflags \"$(RUSTC_FLAGS_$(3)) $$(CTEST_RUSTC_FLAGS) -L $$(RT_OUTPUT_DIR_$(3))\" \\\n         --lldb-python-dir=$(CFG_LLDB_PYTHON_DIR) \\\n         --target-rustcflags \"$(RUSTC_FLAGS_$(2)) $$(CTEST_RUSTC_FLAGS) -L $$(RT_OUTPUT_DIR_$(2))\" \\\n@@ -639,7 +639,7 @@ $(foreach host,$(CFG_HOST), \\\n define DEF_RUN_COMPILETEST\n \n CTEST_ARGS$(1)-T-$(2)-H-$(3)-$(4) := \\\n-        $$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n+        $$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3)) \\\n         --src-base $$(S)src/test/$$(CTEST_SRC_BASE_$(4))/ \\\n         --build-base $(3)/test/$$(CTEST_BUILD_BASE_$(4))/ \\\n         --ratchet-metrics $(call TEST_RATCHET_FILE,$(1),$(2),$(3),$(4)) \\\n@@ -712,16 +712,16 @@ PRETTY_DIRNAME_pretty-pretty = pretty\n \n define DEF_RUN_PRETTY_TEST\n \n-PRETTY_ARGS$(1)-T-$(2)-H-$(3)-$(4) :=\t\t\t\\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n+PRETTY_ARGS$(1)-T-$(2)-H-$(3)-$(4) := \\\n+\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3)) \\\n         --src-base $$(S)src/test/$$(PRETTY_DIRNAME_$(4))/ \\\n         --build-base $(3)/test/$$(PRETTY_DIRNAME_$(4))/ \\\n         --mode pretty\n \n check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n \n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n+\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n \t        $$(PRETTY_DEPS_$(4))\n \t@$$(call E, run pretty-rpass [$(2)]: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST_$(2),$(1),$$<,$(3)) \\\n@@ -764,7 +764,7 @@ check-stage$(1)-T-$(2)-H-$(3)-doc-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3)\n ifeq ($(NO_REBUILD),)\n DOCTESTDEP_$(1)_$(2)_$(3)_$(4) = \\\n \t$$(D)/$(4).md \\\n-\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\\\n+\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n \t$$(RUSTDOC_EXE_$(1)_T_$(2)_H_$(3))\n else\n DOCTESTDEP_$(1)_$(2)_$(3)_$(4) = $$(D)/$(4).md\n@@ -795,8 +795,8 @@ define DEF_CRATE_DOC_TEST\n # rebuilding any of the parent crates.\n ifeq ($(NO_REBUILD),)\n CRATEDOCTESTDEP_$(1)_$(2)_$(3)_$(4) = \\\n-\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\\\n-\t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4))\t\t\\\n+\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n+\t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4)) \\\n \t$$(RUSTDOC_EXE_$(1)_T_$(2)_H_$(3))\n else\n CRATEDOCTESTDEP_$(1)_$(2)_$(3)_$(4) = $$(RSINPUTS_$(4))\n@@ -930,9 +930,9 @@ $(foreach stage,$(STAGES), \\\n    $(eval $(call DEF_CHECK_FOR_STAGE_AND_HOSTS_AND_GROUP,$(stage),$(host),$(group))))))\n \n define DEF_CHECK_DOC_FOR_STAGE\n-check-stage$(1)-docs: $$(foreach docname,$$(DOCS),\\\n+check-stage$(1)-docs: $$(foreach docname,$$(DOCS), \\\n                        check-stage$(1)-T-$$(CFG_BUILD)-H-$$(CFG_BUILD)-doc-$$(docname)) \\\n-                     $$(foreach crate,$$(TEST_DOC_CRATES),\\\n+                     $$(foreach crate,$$(TEST_DOC_CRATES), \\\n                        check-stage$(1)-T-$$(CFG_BUILD)-H-$$(CFG_BUILD)-doc-crate-$$(crate))\n endef\n "}]}