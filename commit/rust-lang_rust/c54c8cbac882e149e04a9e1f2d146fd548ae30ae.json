{"sha": "c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "node_id": "C_kwDOAAsO6NoAKGM1NGM4Y2JhYzg4MmUxNDllMDRhOWUxZjJkMTQ2ZmQ1NDhhZTMwYWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T08:40:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T08:40:08Z"}, "message": "Auto merge of #106582 - compiler-errors:better-spans-on-bad-tys, r=lcnr\n\nImprove spans of non-WF implied bound types\n\nFixes #60980", "tree": {"sha": "150c71f8e82da696d81c791a7e4e732b660a79bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/150c71f8e82da696d81c791a7e4e732b660a79bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "html_url": "https://github.com/rust-lang/rust/commit/c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e677c0645862d17a12c6d04b3019203c8e23fcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e677c0645862d17a12c6d04b3019203c8e23fcc", "html_url": "https://github.com/rust-lang/rust/commit/2e677c0645862d17a12c6d04b3019203c8e23fcc"}, {"sha": "e77e8eb9455264b70eb4344a404243b7c012db08", "url": "https://api.github.com/repos/rust-lang/rust/commits/e77e8eb9455264b70eb4344a404243b7c012db08", "html_url": "https://github.com/rust-lang/rust/commit/e77e8eb9455264b70eb4344a404243b7c012db08"}], "stats": {"total": 216, "additions": 89, "deletions": 127}, "files": [{"sha": "969f7de51cebd4326f2c515648f6466f5e8485a8", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 25, "deletions": 40, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -97,21 +97,22 @@ pub(super) fn enter_wf_checking_ctxt<'tcx, F>(\n     let infcx = &tcx.infer_ctxt().build();\n     let ocx = ObligationCtxt::new(infcx);\n \n-    let assumed_wf_types = ocx.assumed_wf_types(param_env, span, body_def_id);\n-\n     let mut wfcx = WfCheckingCtxt { ocx, span, body_id, param_env };\n \n     if !tcx.features().trivial_bounds {\n         wfcx.check_false_global_bounds()\n     }\n     f(&mut wfcx);\n+\n+    let assumed_wf_types = wfcx.ocx.assumed_wf_types(param_env, span, body_def_id);\n+    let implied_bounds = infcx.implied_bounds_tys(param_env, body_id, assumed_wf_types);\n+\n     let errors = wfcx.select_all_or_error();\n     if !errors.is_empty() {\n         infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n         return;\n     }\n \n-    let implied_bounds = infcx.implied_bounds_tys(param_env, body_id, assumed_wf_types);\n     let outlives_environment =\n         OutlivesEnvironment::with_bounds(param_env, Some(infcx), implied_bounds);\n \n@@ -1489,54 +1490,38 @@ fn check_fn_or_method<'tcx>(\n     def_id: LocalDefId,\n ) {\n     let tcx = wfcx.tcx();\n-    let sig = tcx.liberate_late_bound_regions(def_id.to_def_id(), sig);\n+    let mut sig = tcx.liberate_late_bound_regions(def_id.to_def_id(), sig);\n \n     // Normalize the input and output types one at a time, using a different\n     // `WellFormedLoc` for each. We cannot call `normalize_associated_types`\n     // on the entire `FnSig`, since this would use the same `WellFormedLoc`\n     // for each type, preventing the HIR wf check from generating\n     // a nice error message.\n-    let ty::FnSig { mut inputs_and_output, c_variadic, unsafety, abi } = sig;\n-    inputs_and_output = tcx.mk_type_list(inputs_and_output.iter().enumerate().map(|(i, ty)| {\n-        wfcx.normalize(\n-            span,\n-            Some(WellFormedLoc::Param {\n-                function: def_id,\n-                // Note that the `param_idx` of the output type is\n-                // one greater than the index of the last input type.\n-                param_idx: i.try_into().unwrap(),\n-            }),\n-            ty,\n-        )\n-    }));\n-    // Manually call `normalize_associated_types_in` on the other types\n-    // in `FnSig`. This ensures that if the types of these fields\n-    // ever change to include projections, we will start normalizing\n-    // them automatically.\n-    let sig = ty::FnSig {\n-        inputs_and_output,\n-        c_variadic: wfcx.normalize(span, None, c_variadic),\n-        unsafety: wfcx.normalize(span, None, unsafety),\n-        abi: wfcx.normalize(span, None, abi),\n-    };\n+    let arg_span =\n+        |idx| hir_decl.inputs.get(idx).map_or(hir_decl.output.span(), |arg: &hir::Ty<'_>| arg.span);\n+\n+    sig.inputs_and_output =\n+        tcx.mk_type_list(sig.inputs_and_output.iter().enumerate().map(|(idx, ty)| {\n+            wfcx.normalize(\n+                arg_span(idx),\n+                Some(WellFormedLoc::Param {\n+                    function: def_id,\n+                    // Note that the `param_idx` of the output type is\n+                    // one greater than the index of the last input type.\n+                    param_idx: idx.try_into().unwrap(),\n+                }),\n+                ty,\n+            )\n+        }));\n \n-    for (i, (&input_ty, ty)) in iter::zip(sig.inputs(), hir_decl.inputs).enumerate() {\n+    for (idx, ty) in sig.inputs_and_output.iter().enumerate() {\n         wfcx.register_wf_obligation(\n-            ty.span,\n-            Some(WellFormedLoc::Param { function: def_id, param_idx: i.try_into().unwrap() }),\n-            input_ty.into(),\n+            arg_span(idx),\n+            Some(WellFormedLoc::Param { function: def_id, param_idx: idx.try_into().unwrap() }),\n+            ty.into(),\n         );\n     }\n \n-    wfcx.register_wf_obligation(\n-        hir_decl.output.span(),\n-        Some(WellFormedLoc::Param {\n-            function: def_id,\n-            param_idx: sig.inputs().len().try_into().unwrap(),\n-        }),\n-        sig.output().into(),\n-    );\n-\n     check_where_clauses(wfcx, span, def_id);\n \n     check_return_position_impl_trait_in_trait_bounds("}, {"sha": "6552c8be7808926e1b4acb7cd25536ed2c708795", "filename": "src/test/ui/associated-types/associated-types-for-unimpl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `Self: Get` is not satisfied\n-  --> $DIR/associated-types-for-unimpl-trait.rs:10:5\n+  --> $DIR/associated-types-for-unimpl-trait.rs:10:40\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n+   |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n help: consider further restricting `Self`\n    |"}, {"sha": "b2ee1b5e6d04527fb56eb6eddb0b65ce4e8d8381", "filename": "src/test/ui/associated-types/associated-types-no-suitable-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: Get` is not satisfied\n-  --> $DIR/associated-types-no-suitable-bound.rs:11:5\n+  --> $DIR/associated-types-no-suitable-bound.rs:11:21\n    |\n LL |     fn uhoh<T>(foo: <T as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `T`\n+   |                     ^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "2e40dbd065d3ef5579d5495b95590646d5e086a0", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `Self: Get` is not satisfied\n-  --> $DIR/associated-types-no-suitable-supertrait-2.rs:17:5\n+  --> $DIR/associated-types-no-suitable-supertrait-2.rs:17:40\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n+   |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n help: consider further restricting `Self`\n    |"}, {"sha": "bd3ee2abd2c7604da8473500748cdb10eea74504", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -1,14 +1,14 @@\n error[E0277]: the trait bound `(T, U): Get` is not satisfied\n-  --> $DIR/associated-types-no-suitable-supertrait.rs:22:5\n+  --> $DIR/associated-types-no-suitable-supertrait.rs:22:40\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <(T, U) as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `(T, U)`\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `(T, U)`\n \n error[E0277]: the trait bound `Self: Get` is not satisfied\n-  --> $DIR/associated-types-no-suitable-supertrait.rs:17:5\n+  --> $DIR/associated-types-no-suitable-supertrait.rs:17:40\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n+   |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n help: consider further restricting `Self`\n    |"}, {"sha": "2e67c21940fc712c05aebfd3170128e287c54434", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `Self: Get` is not satisfied\n-  --> $DIR/associated-types-projection-to-unrelated-trait-in-method-without-default.rs:10:5\n+  --> $DIR/associated-types-projection-to-unrelated-trait-in-method-without-default.rs:10:40\n    |\n LL |     fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n+   |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n help: consider further restricting `Self`\n    |"}, {"sha": "551f13ee178da679e098d86985dfc43ed7f28534", "filename": "src/test/ui/associated-types/issue-59324.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -15,9 +15,9 @@ pub trait ThriftService<Bug: NotFoo>:\n {\n     fn get_service(\n     //~^ ERROR the trait bound `Bug: Foo` is not satisfied\n-    //~| ERROR the trait bound `Bug: Foo` is not satisfied\n         &self,\n     ) -> Self::AssocType;\n+    //~^ ERROR the trait bound `Bug: Foo` is not satisfied\n }\n \n fn with_factory<H>(factory: dyn ThriftService<()>) {}"}, {"sha": "a84b599b52b68d2c28913dfdb70c5d08f8714bf6", "filename": "src/test/ui/associated-types/issue-59324.stderr", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -20,7 +20,7 @@ LL | |\n LL | |\n LL | |     Service<AssocType = <Bug as Foo>::OnlyFoo>\n ...  |\n-LL | |     ) -> Self::AssocType;\n+LL | |\n LL | | }\n    | |_^ the trait `Foo` is not implemented for `Bug`\n    |\n@@ -34,7 +34,6 @@ error[E0277]: the trait bound `Bug: Foo` is not satisfied\n    |\n LL | /     fn get_service(\n LL | |\n-LL | |\n LL | |         &self,\n LL | |     ) -> Self::AssocType;\n    | |_________________________^ the trait `Foo` is not implemented for `Bug`\n@@ -45,20 +44,16 @@ LL | pub trait ThriftService<Bug: NotFoo + Foo>:\n    |                                     +++++\n \n error[E0277]: the trait bound `(): Foo` is not satisfied\n-  --> $DIR/issue-59324.rs:23:1\n+  --> $DIR/issue-59324.rs:23:29\n    |\n LL | fn with_factory<H>(factory: dyn ThriftService<()>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `()`\n+   |                             ^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `()`\n \n error[E0277]: the trait bound `Bug: Foo` is not satisfied\n-  --> $DIR/issue-59324.rs:16:5\n+  --> $DIR/issue-59324.rs:19:10\n    |\n-LL | /     fn get_service(\n-LL | |\n-LL | |\n-LL | |         &self,\n-LL | |     ) -> Self::AssocType;\n-   | |_________________________^ the trait `Foo` is not implemented for `Bug`\n+LL |     ) -> Self::AssocType;\n+   |          ^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `Bug`\n    |\n help: consider further restricting this bound\n    |"}, {"sha": "bd18d46223e69162ae8cdd869df402f0d84b35d7", "filename": "src/test/ui/issues/issue-18611.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fissues%2Fissue-18611.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fissues%2Fissue-18611.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18611.stderr?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `isize: HasState` is not satisfied\n-  --> $DIR/issue-18611.rs:1:1\n+  --> $DIR/issue-18611.rs:1:18\n    |\n-LL | / fn add_state(op: <isize as HasState>::State) {\n-LL | |\n-LL | | }\n-   | |_^ the trait `HasState` is not implemented for `isize`\n+LL | fn add_state(op: <isize as HasState>::State) {\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `HasState` is not implemented for `isize`\n \n error: aborting due to previous error\n "}, {"sha": "c3af1f6786b34a01a1b003b1fd8609cd33af3385", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -1,14 +1,8 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n+  --> $DIR/issue-20831-debruijn.rs:28:33\n    |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |         //\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^\n+LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n   --> $DIR/issue-20831-debruijn.rs:28:58\n@@ -21,16 +15,10 @@ note: ...but the lifetime must also be valid for the lifetime `'a` as defined he\n LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n    |      ^^\n note: ...so that the types are compatible\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n+  --> $DIR/issue-20831-debruijn.rs:28:33\n    |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |         //\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^\n+LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `<MyStruct<'a> as Publisher<'_>>`\n               found `<MyStruct<'_> as Publisher<'_>>`\n "}, {"sha": "3dc33729d8fdb1394e8cb6869899c1cbc719bdfd", "filename": "src/test/ui/issues/issue-35570.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -1,3 +1,9 @@\n+error[E0277]: the trait bound `for<'a> (): Trait2<'a>` is not satisfied\n+  --> $DIR/issue-35570.rs:8:40\n+   |\n+LL | fn _ice(param: Box<dyn for <'a> Trait1<<() as Trait2<'a>>::Ty>>) {\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Trait2<'a>` is not implemented for `()`\n+\n error[E0277]: the trait bound `for<'a> (): Trait2<'a>` is not satisfied\n   --> $DIR/issue-35570.rs:8:1\n    |\n@@ -8,12 +14,6 @@ LL | |     let _e: (usize, usize) = unsafe{mem::transmute(param)};\n LL | | }\n    | |_^ the trait `for<'a> Trait2<'a>` is not implemented for `()`\n \n-error[E0277]: the trait bound `for<'a> (): Trait2<'a>` is not satisfied\n-  --> $DIR/issue-35570.rs:8:40\n-   |\n-LL | fn _ice(param: Box<dyn for <'a> Trait1<<() as Trait2<'a>>::Ty>>) {\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Trait2<'a>` is not implemented for `()`\n-\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "0fc3670d6c52343f4fee8e87e57d6e6fb46b622a", "filename": "src/test/ui/nll/normalization-bounds-error.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -1,8 +1,8 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'d` due to conflicting requirements\n-  --> $DIR/normalization-bounds-error.rs:12:1\n+  --> $DIR/normalization-bounds-error.rs:12:31\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'d` as defined here...\n   --> $DIR/normalization-bounds-error.rs:12:14\n@@ -15,10 +15,10 @@ note: ...but the lifetime must also be valid for the lifetime `'a` as defined he\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n    |                  ^^\n note: ...so that the types are compatible\n-  --> $DIR/normalization-bounds-error.rs:12:1\n+  --> $DIR/normalization-bounds-error.rs:12:31\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `Visitor<'d>`\n               found `Visitor<'_>`\n "}, {"sha": "3fd39810d445397b1cd151b0160d1e74db31bd10", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-hr-1.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -1,23 +1,23 @@\n error[E0277]: the trait bound `for<'z> T: Trait2<'y, 'z>` is not satisfied\n-  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:1\n+  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:49\n    |\n-LL | / fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n-LL | |\n-LL | |\n-LL | | {\n-LL | | }\n-   | |_^ the trait `for<'z> Trait2<'y, 'z>` is not implemented for `T`\n+LL | fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'z> Trait2<'y, 'z>` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |\n LL | fn callee<'x, 'y, T: for<'z> Trait2<'y, 'z>>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n    |                    ++++++++++++++++++++++++\n \n error[E0277]: the trait bound `for<'z> T: Trait2<'y, 'z>` is not satisfied\n-  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:49\n+  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:1\n    |\n-LL | fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n-   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'z> Trait2<'y, 'z>` is not implemented for `T`\n+LL | / fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n+LL | |\n+LL | |\n+LL | | {\n+LL | | }\n+   | |_^ the trait `for<'z> Trait2<'y, 'z>` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "104bddd076ec18f5da6d703f959d51fbe42a0068", "filename": "src/test/ui/specialization/min_specialization/issue-79224.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.rs?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -15,8 +15,10 @@ impl ToString for Cow<'_, str> {\n     }\n }\n \n-impl<B: ?Sized> Display for Cow<'_, B> { //~ ERROR: the trait bound `B: Clone` is not satisfied [E0277]\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result { //~ ERROR: the trait bound `B: Clone` is not satisfied [E0277]\n+impl<B: ?Sized> Display for Cow<'_, B> {\n+    //~^ ERROR: the trait bound `B: Clone` is not satisfied [E0277]\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        //~^ ERROR: the trait bound `B: Clone` is not satisfied [E0277]\n         write!(f, \"foo\")\n     }\n }"}, {"sha": "be6f04ae62a0d247ccce29f54176a8b5fdff63a5", "filename": "src/test/ui/specialization/min_specialization/issue-79224.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -1,12 +1,8 @@\n error[E0277]: the trait bound `B: Clone` is not satisfied\n-  --> $DIR/issue-79224.rs:18:1\n+  --> $DIR/issue-79224.rs:18:17\n    |\n-LL | / impl<B: ?Sized> Display for Cow<'_, B> {\n-LL | |     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-LL | |         write!(f, \"foo\")\n-LL | |     }\n-LL | | }\n-   | |_^ the trait `Clone` is not implemented for `B`\n+LL | impl<B: ?Sized> Display for Cow<'_, B> {\n+   |                 ^^^^^^^ the trait `Clone` is not implemented for `B`\n    |\n    = note: required for `B` to implement `ToOwned`\n help: consider further restricting this bound\n@@ -15,12 +11,10 @@ LL | impl<B: ?Sized + std::clone::Clone> Display for Cow<'_, B> {\n    |                +++++++++++++++++++\n \n error[E0277]: the trait bound `B: Clone` is not satisfied\n-  --> $DIR/issue-79224.rs:19:5\n+  --> $DIR/issue-79224.rs:20:12\n    |\n-LL | /     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-LL | |         write!(f, \"foo\")\n-LL | |     }\n-   | |_____^ the trait `Clone` is not implemented for `B`\n+LL |     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+   |            ^^^^^ the trait `Clone` is not implemented for `B`\n    |\n    = note: required for `B` to implement `ToOwned`\n help: consider further restricting this bound"}, {"sha": "9f9acf851135f4d0a3282cede8249af04ad6f6fa", "filename": "src/test/ui/traits/issue-91594.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Ftraits%2Fissue-91594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Ftraits%2Fissue-91594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91594.stderr?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `Foo: HasComponent<()>` is not satisfied\n-  --> $DIR/issue-91594.rs:10:1\n+  --> $DIR/issue-91594.rs:10:6\n    |\n LL | impl HasComponent<<Foo as Component<Foo>>::Interface> for Foo {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `HasComponent<()>` is not implemented for `Foo`\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `HasComponent<()>` is not implemented for `Foo`\n    |\n    = help: the trait `HasComponent<<Foo as Component<Foo>>::Interface>` is implemented for `Foo`\n note: required for `Foo` to implement `Component<Foo>`"}, {"sha": "5227badb77dde78a122aaa4cc59465b3ffceb844", "filename": "src/test/ui/wf/issue-103573.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fwf%2Fissue-103573.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fwf%2Fissue-103573.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fissue-103573.stderr?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `<<Self as TraitC<E>>::TypeC<'a> as TraitB>::TypeB: TraitA` is not satisfied\n-  --> $DIR/issue-103573.rs:18:5\n+  --> $DIR/issue-103573.rs:18:18\n    |\n LL |     fn g<'a>(_: &<<Self::TypeC<'a> as TraitB>::TypeB as TraitA>::TypeA);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `TraitA` is not implemented for `<<Self as TraitC<E>>::TypeC<'a> as TraitB>::TypeB`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `TraitA` is not implemented for `<<Self as TraitC<E>>::TypeC<'a> as TraitB>::TypeB`\n    |\n help: consider further restricting the associated type\n    |"}, {"sha": "b03023b5fd14f707d69bdeb7c927305ae6a36cac", "filename": "src/test/ui/wf/wf-foreign-fn-decl-ret.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c54c8cbac882e149e04a9e1f2d146fd548ae30ae/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr?ref=c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `(): Foo` is not satisfied\n-  --> $DIR/wf-foreign-fn-decl-ret.rs:11:5\n+  --> $DIR/wf-foreign-fn-decl-ret.rs:11:25\n    |\n LL |     pub fn lint_me() -> <() as Foo>::Assoc;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `()`\n+   |                         ^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `()`\n \n error[E0277]: the trait bound `u32: Unsatisfied` is not satisfied\n   --> $DIR/wf-foreign-fn-decl-ret.rs:14:32"}]}