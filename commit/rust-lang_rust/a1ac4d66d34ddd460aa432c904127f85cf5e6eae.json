{"sha": "a1ac4d66d34ddd460aa432c904127f85cf5e6eae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYWM0ZDY2ZDM0ZGRkNDYwYWE0MzJjOTA0MTI3Zjg1Y2Y1ZTZlYWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-05T23:07:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-05T23:07:27Z"}, "message": "Rollup merge of #73937 - JohnTitor:note-exhaustive-sized-int, r=varkor\n\nExplain exhaustive matching on {usize,isize} maximum values\n\nThe wording is taken from https://github.com/rust-lang/rfcs/blob/master/text/2591-exhaustive-integer-pattern-matching.md#reference-level-explanation.\nFixes #73919\n\nr? @varkor", "tree": {"sha": "adcdd32553fe0516fe98feecdfaa8354cd9d9f65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adcdd32553fe0516fe98feecdfaa8354cd9d9f65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1ac4d66d34ddd460aa432c904127f85cf5e6eae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfAl0vCRBK7hj4Ov3rIwAAdHIIAFo3/ud0SMFQvksN2BZC7e8s\nw5HDv+4y3yPsV6Efr3Ea33c+x2AAZwxYC0ggcRiSJYSuURZY0Kpq+Pk7shmgKZFD\nhegRjyN3cHHhJbTGa8i3PHcr/WoD0sBLlHN7IljbQc7vWHiNTPoAOxZyj8PMy9pX\nY5Y7j9ltpzBjhWZExCixeW0XFmHwqmF0jC4ZBa1z8uYaEIIcAzPYPVtY8mOzBiEg\nX3TcLzjm8bZEF9WD7BV3tECI2kM30vNt7J0WzKveX3sLiUrmFygFW8fQED4YC1wl\nURUwGTuoX5FX3YjWeTGtTy794ofGDEHQk9mMx1pQeWLfVbMNmn2A0iDgjutMWks=\n=Bno+\n-----END PGP SIGNATURE-----\n", "payload": "tree adcdd32553fe0516fe98feecdfaa8354cd9d9f65\nparent 3e78eac206fbc17d0a16d0cb1ba2c58469d8cc15\nparent b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593990447 -0700\ncommitter GitHub <noreply@github.com> 1593990447 -0700\n\nRollup merge of #73937 - JohnTitor:note-exhaustive-sized-int, r=varkor\n\nExplain exhaustive matching on {usize,isize} maximum values\n\nThe wording is taken from https://github.com/rust-lang/rfcs/blob/master/text/2591-exhaustive-integer-pattern-matching.md#reference-level-explanation.\nFixes #73919\n\nr? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1ac4d66d34ddd460aa432c904127f85cf5e6eae", "html_url": "https://github.com/rust-lang/rust/commit/a1ac4d66d34ddd460aa432c904127f85cf5e6eae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1ac4d66d34ddd460aa432c904127f85cf5e6eae/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e78eac206fbc17d0a16d0cb1ba2c58469d8cc15", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e78eac206fbc17d0a16d0cb1ba2c58469d8cc15", "html_url": "https://github.com/rust-lang/rust/commit/3e78eac206fbc17d0a16d0cb1ba2c58469d8cc15"}, {"sha": "b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889", "url": "https://api.github.com/repos/rust-lang/rust/commits/b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889", "html_url": "https://github.com/rust-lang/rust/commit/b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "4bfb6cccbcb300df71192b8b40db83df41a32c6d", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a1ac4d66d34ddd460aa432c904127f85cf5e6eae/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ac4d66d34ddd460aa432c904127f85cf5e6eae/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=a1ac4d66d34ddd460aa432c904127f85cf5e6eae", "patch": "@@ -12,6 +12,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{HirId, Pat};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_session::config::nightly_options;\n use rustc_session::lint::builtin::BINDINGS_WITH_VARIANT_NAME;\n use rustc_session::lint::builtin::{IRREFUTABLE_LET_PATTERNS, UNREACHABLE_PATTERNS};\n use rustc_session::parse::feature_err;\n@@ -487,9 +488,27 @@ fn check_exhaustive<'p, 'tcx>(\n     adt_defined_here(cx, &mut err, scrut_ty, &witnesses);\n     err.help(\n         \"ensure that all possible cases are being handled, \\\n-         possibly by adding wildcards or more match arms\",\n+              possibly by adding wildcards or more match arms\",\n     );\n     err.note(&format!(\"the matched value is of type `{}`\", scrut_ty));\n+    if (scrut_ty == cx.tcx.types.usize || scrut_ty == cx.tcx.types.isize)\n+        && !is_empty_match\n+        && witnesses.len() == 1\n+        && witnesses[0].is_wildcard()\n+    {\n+        err.note(&format!(\n+            \"`{}` does not have a fixed maximum value, \\\n+                so a wildcard `_` is necessary to match exhaustively\",\n+            scrut_ty,\n+        ));\n+        if nightly_options::is_nightly_build() {\n+            err.help(&format!(\n+                \"add `#![feature(precise_pointer_size_matching)]` \\\n+                    to the crate attributes to enable precise `{}` matching\",\n+                scrut_ty,\n+            ));\n+        }\n+    }\n     err.emit();\n }\n "}, {"sha": "c7a63e5d50252cc02765ee334de9ee95e727c203", "filename": "src/test/ui/feature-gates/feature-gate-precise_pointer_size_matching.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1ac4d66d34ddd460aa432c904127f85cf5e6eae/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1ac4d66d34ddd460aa432c904127f85cf5e6eae/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr?ref=a1ac4d66d34ddd460aa432c904127f85cf5e6eae", "patch": "@@ -6,6 +6,8 @@ LL |     match 0usize {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `usize`\n+   = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n+   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/feature-gate-precise_pointer_size_matching.rs:10:11\n@@ -15,6 +17,8 @@ LL |     match 0isize {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `isize`\n+   = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n+   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0c52876e21f9519b370765f838445936d98bbec0", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-pointer-size-int.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a1ac4d66d34ddd460aa432c904127f85cf5e6eae/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ac4d66d34ddd460aa432c904127f85cf5e6eae/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.rs?ref=a1ac4d66d34ddd460aa432c904127f85cf5e6eae", "patch": "@@ -0,0 +1,23 @@\n+use std::{usize, isize};\n+\n+fn main() {\n+    match 0usize {\n+        //~^ ERROR non-exhaustive patterns\n+        //~| NOTE pattern `_` not covered\n+        //~| NOTE the matched value is of type `usize`\n+        //~| NOTE `usize` does not have a fixed maximum value\n+        0 ..= usize::MAX => {}\n+    }\n+\n+    match 0isize {\n+        //~^ ERROR non-exhaustive patterns\n+        //~| NOTE pattern `_` not covered\n+        //~| NOTE the matched value is of type `isize`\n+        //~| NOTE `isize` does not have a fixed maximum value\n+        isize::MIN ..= isize::MAX => {}\n+    }\n+\n+    match 7usize {}\n+    //~^ ERROR non-exhaustive patterns\n+    //~| NOTE the matched value is of type `usize`\n+}"}, {"sha": "d0aa452fd386176ea93435fe1fee7fdbd51fb4de", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-pointer-size-int.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a1ac4d66d34ddd460aa432c904127f85cf5e6eae/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1ac4d66d34ddd460aa432c904127f85cf5e6eae/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.stderr?ref=a1ac4d66d34ddd460aa432c904127f85cf5e6eae", "patch": "@@ -0,0 +1,34 @@\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/non-exhaustive-pattern-pointer-size-int.rs:4:11\n+   |\n+LL |     match 0usize {\n+   |           ^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `usize`\n+   = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n+   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/non-exhaustive-pattern-pointer-size-int.rs:12:11\n+   |\n+LL |     match 0isize {\n+   |           ^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `isize`\n+   = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n+   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n+\n+error[E0004]: non-exhaustive patterns: type `usize` is non-empty\n+  --> $DIR/non-exhaustive-pattern-pointer-size-int.rs:20:11\n+   |\n+LL |     match 7usize {}\n+   |           ^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `usize`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}]}