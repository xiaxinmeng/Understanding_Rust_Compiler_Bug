{"sha": "0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMTVjYWIxZmQ3YjRiNDcwMzBjODA4YTgyNWJiNTU5NGNjMWQ0YWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-13T06:34:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-16T05:56:46Z"}, "message": "Test fixes and rebase conflicts\n\nThis commit switches over the backtrace infrastructure from piggy-backing off\nthe RUST_LOG environment variable to using the RUST_BACKTRACE environment\nvariable (logging is now disabled in libstd).", "tree": {"sha": "cf054fdf43843170e6479675e62a29b6213e2ce2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf054fdf43843170e6479675e62a29b6213e2ce2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "html_url": "https://github.com/rust-lang/rust/commit/0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17ad504fef35191fe53874bd2fe77ffd14d8e1b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/17ad504fef35191fe53874bd2fe77ffd14d8e1b9", "html_url": "https://github.com/rust-lang/rust/commit/17ad504fef35191fe53874bd2fe77ffd14d8e1b9"}], "stats": {"total": 88, "additions": 63, "deletions": 25}, "files": [{"sha": "e3534b6664cbefd8880b96df40040d92a684dfc4", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "patch": "@@ -82,7 +82,7 @@ DEPS_test := std collections getopts serialize term time\n DEPS_time := std serialize\n DEPS_rand := std\n DEPS_url := std collections\n-DEPS_workcache := std serialize collections std\n+DEPS_workcache := std serialize collections log\n DEPS_log := std sync\n \n TOOL_DEPS_compiletest := test green rustuv getopts"}, {"sha": "5bcfd8e8305339cd82efa44bd6704303d2f3386f", "filename": "src/doc/index.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "patch": "@@ -51,6 +51,7 @@ li {list-style-type: none; }\n * [The `uuid` 128-bit universally unique identifier library](uuid/index.html)\n * [The `url` library](url/index.html)\n * [The `workcache` library](workcache/index.html)\n+* [The `log` library](log/index.html)\n \n # Tooling\n "}, {"sha": "d9f7ae9a856ca519dc04074c9c8d3f94ae15b0ba", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "patch": "@@ -18,6 +18,7 @@ Simple compression\n #[crate_type = \"rlib\"];\n #[crate_type = \"dylib\"];\n #[license = \"MIT/ASL2\"];\n+#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n #[feature(phase)];"}, {"sha": "3ff7ee390f1e8bb4e473b4094b2bc963e60d6226", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "patch": "@@ -12,9 +12,24 @@\n \n Utilities for program-wide and customizable logging\n \n-This module is used by the compiler when emitting output for the logging family\n-of macros. The methods of this module shouldn't necessarily be used directly,\n-but rather through the logging macros defined.\n+## Example\n+\n+```\n+#[feature(phase)];\n+#[phase(syntax, link)] extern crate log;\n+\n+fn main() {\n+    debug!(\"this is a debug {}\", \"message\");\n+    error!(\"this is printed by default\");\n+\n+    if log_enabled!(log::INFO) {\n+        let x = 3 * 4; // expensive computation\n+        info!(\"the answer was: {}\", x);\n+    }\n+}\n+```\n+\n+## Logging Macros\n \n There are five macros that the logging subsystem uses:\n "}, {"sha": "c5ae4f00017a9fca2f3b369fb4ef7d6472370cea", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "patch": "@@ -238,7 +238,7 @@ impl Drop for Inner {\n         if self.close_on_drop && self.fd > libc::STDERR_FILENO {\n             let n = unsafe { libc::close(self.fd) };\n             if n != 0 {\n-                warn!(\"error {} when closing file descriptor {}\", n, self.fd);\n+                println!(\"error {} when closing file descriptor {}\", n, self.fd);\n             }\n         }\n     }"}, {"sha": "dc4e3e50b653801f0c1c2fa3239cd9f87a758426", "filename": "src/librand/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "patch": "@@ -70,9 +70,12 @@ println!(\"{:?}\", tuple_ptr)\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n-#[feature(macro_rules, managed_boxes)];\n+#[feature(macro_rules, managed_boxes, phase)];\n #[allow(deprecated_owned_vector)];\n \n+#[cfg(test)]\n+#[phase(syntax, link)] extern crate log;\n+\n use std::cast;\n use std::kinds::marker;\n use std::local_data;"}, {"sha": "00cde129d1e403ba8d9565a3fba79585bda9e591", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "patch": "@@ -410,7 +410,7 @@ pub fn monitor(f: proc()) {\n                 let xs = [\n                     ~\"the compiler hit an unexpected failure path. this is a bug.\",\n                     \"we would appreciate a bug report: \" + BUG_REPORT_URL,\n-                    ~\"run with `RUST_LOG=std::rt::backtrace` for a backtrace\",\n+                    ~\"run with `RUST_BACKTRACE=1` for a backtrace\",\n                 ];\n                 for note in xs.iter() {\n                     emitter.emit(None, *note, diagnostic::Note)"}, {"sha": "deadfb429046a331e0ccf9204096b4f39b21c42f", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "patch": "@@ -176,7 +176,7 @@ impl CStore {\n                 RequireDynamic => src.dylib.clone(),\n                 RequireStatic => src.rlib.clone(),\n             }))\n-            .collect();\n+            .collect::<Vec<(ast::CrateNum, Option<Path>)>>();\n         libs.sort_by(|&(a, _), &(b, _)| {\n             ordering.position_elem(&a).cmp(&ordering.position_elem(&b))\n         });"}, {"sha": "040d5c0e175fb0cc827dcc69b72f359b428e6bd4", "filename": "src/libstd/os.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "patch": "@@ -1155,10 +1155,7 @@ impl MemoryMap {\n                 MapAddr(addr_) => { lpAddress = addr_ as LPVOID; },\n                 MapFd(fd_) => { fd = fd_; },\n                 MapOffset(offset_) => { offset = offset_; },\n-                MapNonStandardFlags(f) => {\n-                    info!(\"MemoryMap::new: MapNonStandardFlags used on \\\n-                           Windows: {}\", f)\n-                }\n+                MapNonStandardFlags(..) => {}\n             }\n         }\n \n@@ -1256,15 +1253,15 @@ impl Drop for MemoryMap {\n                 MapVirtual => {\n                     if libc::VirtualFree(self.data as *mut c_void, 0,\n                                          libc::MEM_RELEASE) == 0 {\n-                        error!(\"VirtualFree failed: {}\", errno());\n+                        println!(\"VirtualFree failed: {}\", errno());\n                     }\n                 },\n                 MapFile(mapping) => {\n                     if libc::UnmapViewOfFile(self.data as LPCVOID) == FALSE {\n-                        error!(\"UnmapViewOfFile failed: {}\", errno());\n+                        println!(\"UnmapViewOfFile failed: {}\", errno());\n                     }\n                     if libc::CloseHandle(mapping as HANDLE) == FALSE {\n-                        error!(\"CloseHandle failed: {}\", errno());\n+                        println!(\"CloseHandle failed: {}\", errno());\n                     }\n                 }\n             }"}, {"sha": "bc75a98e0856597eca04a20782e716de17e2b836", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "patch": "@@ -16,15 +16,31 @@ use from_str::from_str;\n use io::{IoResult, Writer};\n use iter::Iterator;\n use option::{Some, None};\n+use os;\n use result::{Ok, Err};\n use str::StrSlice;\n+use sync::atomics;\n \n pub use self::imp::write;\n \n-// This function is defined in this module so that the way to enable logging of\n-// backtraces has the word 'backtrace' in it: std::rt::backtrace.\n+// For now logging is turned off by default, and this function checks to see\n+// whether the magical environment variable is present to see if it's turned on.\n pub fn log_enabled() -> bool {\n-    log_enabled!(::logging::DEBUG)\n+    static mut ENABLED: atomics::AtomicInt = atomics::INIT_ATOMIC_INT;\n+    unsafe {\n+        match ENABLED.load(atomics::SeqCst) {\n+            1 => return false,\n+            2 => return true,\n+            _ => {}\n+        }\n+    }\n+\n+    let val = match os::getenv(\"RUST_BACKTRACE\") {\n+        Some(..) => 2,\n+        None => 1,\n+    };\n+    unsafe { ENABLED.store(val, atomics::SeqCst); }\n+    val == 2\n }\n \n #[cfg(target_word_size = \"64\")] static HEX_WIDTH: uint = 18;"}, {"sha": "7f54b8b332067355612943ae7bdf6c404c0bbff9", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "patch": "@@ -398,6 +398,8 @@ fn begin_unwind_inner(msg: ~Any, file: &'static str, line: uint) -> ! {\n                 if backtrace::log_enabled() {\n                     let mut err = ::rt::util::Stderr;\n                     let _err = backtrace::write(&mut err);\n+                } else {\n+                    rterrln!(\"run with `RUST_BACKTRACE=1` to see a backtrace\");\n                 }\n                 unsafe { intrinsics::abort() }\n             }"}, {"sha": "d4593318eafb5853e06f543fed4f117d6056b7be", "filename": "src/libsync/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "patch": "@@ -21,10 +21,10 @@\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n #[feature(phase)];\n \n-#[cfg(test)] #[phase(syntax, link)] extern crate log;\n-\n #[allow(deprecated_owned_vector)];\n \n+#[cfg(test)] #[phase(syntax, link)] extern crate log;\n+\n pub use arc::{Arc, MutexArc, RWArc, RWWriteMode, RWReadMode, ArcCondvar, CowArc};\n pub use sync::{Mutex, RWLock, Condvar, Semaphore, RWLockWriteMode,\n                RWLockReadMode, Barrier, one, mutex};"}, {"sha": "219bb38b3c83099d667e0cbe964166a4d95b9fb0", "filename": "src/libworkcache/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibworkcache%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Flibworkcache%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibworkcache%2Flib.rs?ref=0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "patch": "@@ -15,8 +15,10 @@\n #[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n+#[feature(phase)];\n #[allow(deprecated_owned_vector, visible_private_types)];\n \n+#[phase(syntax, link)] extern crate log;\n extern crate serialize;\n extern crate collections;\n extern crate sync;"}, {"sha": "7252e319372e6dab385c4fdb6f26bf751daa5f7e", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "patch": "@@ -37,11 +37,11 @@ fn double() {\n \n fn runtest(me: &str) {\n     let mut env = os::env();\n-    match env.iter().position(|&(ref s, _)| \"RUST_LOG\" == *s) {\n+    match env.iter().position(|&(ref s, _)| \"RUST_BACKTRACE\" == *s) {\n         Some(i) => { env.remove(i); }\n         None => {}\n     }\n-    env.push((~\"RUST_LOG\", ~\"std::rt::backtrace\"));\n+    env.push((~\"RUST_BACKTRACE\", ~\"1\"));\n \n     // Make sure that the stack trace is printed\n     let mut p = Process::configure(ProcessConfig {"}, {"sha": "03617537c49bba0ae704029ad17fbb409649240d", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n }\n \n fn child(c: &Sender<int>) {\n-    error!(\"sending\");\n+    println!(\"sending\");\n     c.send(10);\n     println!(\"value sent\");\n }"}, {"sha": "197032b3315d33d5feb12f9b82433f50d7768105", "filename": "src/test/run-pass/dead-code-one-arm-if.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs?ref=0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n+// ignore-test #12920\n \n pub fn main() { if 1 == 1 { return; } println!(\"Paul is dead\"); }"}, {"sha": "03f45900238663ff3c0fe8c4ebf6717dcd67ccc7", "filename": "src/test/run-pass/parse-fail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Ftest%2Frun-pass%2Fparse-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0015cab1fd7b4b47030c808a825bb5594cc1d4ac/src%2Ftest%2Frun-pass%2Fparse-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparse-fail.rs?ref=0015cab1fd7b4b47030c808a825bb5594cc1d4ac", "patch": "@@ -10,6 +10,8 @@\n \n #[allow(unreachable_code)];\n \n+// ignore-test #12920\n+\n fn dont_call_me() { fail!(); println!(\"{}\", 1); }\n \n pub fn main() { }"}]}