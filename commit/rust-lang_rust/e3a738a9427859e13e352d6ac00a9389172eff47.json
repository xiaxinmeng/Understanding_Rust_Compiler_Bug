{"sha": "e3a738a9427859e13e352d6ac00a9389172eff47", "node_id": "C_kwDOAAsO6NoAKGUzYTczOGE5NDI3ODU5ZTEzZTM1MmQ2YWMwMGE5Mzg5MTcyZWZmNDc", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-09-06T20:24:36Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-09-07T13:46:14Z"}, "message": "Add instrument and debug calls", "tree": {"sha": "588b97e711dd27bde847472969b176bfda56d9af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/588b97e711dd27bde847472969b176bfda56d9af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3a738a9427859e13e352d6ac00a9389172eff47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmMYoKcACgkQgTGiTgx5\n76/VcA/+JaqIYq6y+y3Lie5Nmt0B+4ft7da4vY+hvIP9JXq7BmGH/WeyMmjsbJ6H\n6fy4BXShRtAewVQc7EvZqZ2I8rx9bSrmv/OFjoBFAEIS9GQqqhe1pFqYBb923hp2\nWXnI280tBlPELNWESNvVolqkiQ1RPoS8R1Vv5lLsu0KIMYp1vcdBoOeaFVpl++0n\nhGSh/ZyFGOEvHTiSIc3oBXaFAfaFgrg42al4XXcpEp2lwgzWZ30a77/t8Bx3Lg4n\nfhG+nw/jmPXv1IAHt8NlGM7tYfdtnoGE2S26WdbFuBLUajtETNior2zQqSgKQC3F\n7Wt+MfVhphbVJ1H2cgqyqvShdsFokhatbOeQZYQvUISnA58BPITwf3Rcr1ML11Ti\nX0HzBG3ZuI2hqRz8D/DnxXBh0VHyNmPVuyUFWwa44Nr5VZ46qxvFBq2gpeTwi7NR\nuAcCJ/hbTAJaJmztxMofKFectYPgv2XRas4Lv9VvCOM6z9I51JmuVgclJo01wxW/\nvm61yJE/w2Y7s3sLYAp/QLD3M3MP60q/LjuZcOhvVPhNGc26cST7M4y6kTS0d2cX\nydUxvk2WvvdXA0vCbfjb3FNkN9jUMc5m1VJiYWyoOfXonqZWjM1sQE5TOrl6PZtY\nyW+Xoar6JPPFHdBth6aRf1g6tMHbInKnHXvfitvbplkf01nbpUA=\n=IRXC\n-----END PGP SIGNATURE-----", "payload": "tree 588b97e711dd27bde847472969b176bfda56d9af\nparent 3c7278846102bb829c9a789e91bc43f0ed612943\nauthor Santiago Pastorino <spastorino@gmail.com> 1662495876 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1662558374 -0300\n\nAdd instrument and debug calls\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a738a9427859e13e352d6ac00a9389172eff47", "html_url": "https://github.com/rust-lang/rust/commit/e3a738a9427859e13e352d6ac00a9389172eff47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3a738a9427859e13e352d6ac00a9389172eff47/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c7278846102bb829c9a789e91bc43f0ed612943", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7278846102bb829c9a789e91bc43f0ed612943", "html_url": "https://github.com/rust-lang/rust/commit/3c7278846102bb829c9a789e91bc43f0ed612943"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "d9a7f91a4d9c08513a68a0ea2e809d1d211f9074", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a738a9427859e13e352d6ac00a9389172eff47/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a738a9427859e13e352d6ac00a9389172eff47/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=e3a738a9427859e13e352d6ac00a9389172eff47", "patch": "@@ -660,6 +660,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// actually used in the HIR, as that would trigger an assertion in the\n     /// `HirIdValidator` later on, which makes sure that all `NodeId`s got mapped\n     /// properly. Calling the method twice with the same `NodeId` is fine though.\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn lower_node_id(&mut self, ast_node_id: NodeId) -> hir::HirId {\n         assert_ne!(ast_node_id, DUMMY_NODE_ID);\n \n@@ -693,6 +694,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     /// Generate a new `HirId` without a backing `NodeId`.\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn next_id(&mut self) -> hir::HirId {\n         let owner = self.current_hir_id_owner;\n         let local_id = self.item_local_id_counter;\n@@ -1381,7 +1383,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// added explicitly in the HIR). But this includes all the lifetimes, and we only want to\n     /// capture the lifetimes that are referenced in the bounds. Therefore, we add *extra* lifetime parameters\n     /// for the lifetimes that get captured (`'x`, in our example above) and reference those.\n-    #[instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn lower_opaque_impl_trait(\n         &mut self,\n         span: Span,\n@@ -2143,6 +2145,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::MutTy { ty: self.lower_ty(&mt.ty, itctx), mutbl: mt.mutbl }\n     }\n \n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn lower_param_bounds(\n         &mut self,\n         bounds: &[GenericBound],\n@@ -2159,6 +2162,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         bounds.iter().map(move |bound| self.lower_param_bound(bound, itctx))\n     }\n \n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn lower_generic_and_bounds(\n         &mut self,\n         node_id: NodeId,"}, {"sha": "75233495040ca561dfed4ab9a4425641bd816e64", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a738a9427859e13e352d6ac00a9389172eff47/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a738a9427859e13e352d6ac00a9389172eff47/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=e3a738a9427859e13e352d6ac00a9389172eff47", "patch": "@@ -50,13 +50,13 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn param_bound(&self, param_ty: ty::ParamTy) -> VerifyBound<'tcx> {\n-        debug!(\"param_bound(param_ty={:?})\", param_ty);\n-\n         // Start with anything like `T: 'a` we can scrape from the\n         // environment. If the environment contains something like\n         // `for<'a> T: 'a`, then we know that `T` outlives everything.\n         let declared_bounds_from_env = self.declared_generic_bounds_from_env(param_ty);\n+        debug!(?declared_bounds_from_env);\n         let mut param_bounds = vec![];\n         for declared_bound in declared_bounds_from_env {\n             let bound_region = declared_bound.map_bound(|outlives| outlives.1);\n@@ -65,13 +65,15 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n                 param_bounds.push(VerifyBound::OutlivedBy(region));\n             } else {\n                 // This is `for<'a> T: 'a`. This means that `T` outlives everything! All done here.\n+                debug!(\"found that {param_ty:?} outlives any lifetime, returning empty vector\");\n                 return VerifyBound::AllBounds(vec![]);\n             }\n         }\n \n         // Add in the default bound of fn body that applies to all in\n         // scope type parameters:\n         if let Some(r) = self.implicit_region_bound {\n+            debug!(\"adding implicit region bound of {r:?}\");\n             param_bounds.push(VerifyBound::OutlivedBy(r));\n         }\n "}, {"sha": "8631ee91fa456c280b9b01eb80339c1565e20519", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3a738a9427859e13e352d6ac00a9389172eff47/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a738a9427859e13e352d6ac00a9389172eff47/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=e3a738a9427859e13e352d6ac00a9389172eff47", "patch": "@@ -328,6 +328,7 @@ impl<'tcx> GenericPredicates<'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self, tcx))]\n     fn instantiate_into(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "101679aa6dc93fade0f481b74e1cd03dff34f7dd", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3a738a9427859e13e352d6ac00a9389172eff47/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a738a9427859e13e352d6ac00a9389172eff47/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=e3a738a9427859e13e352d6ac00a9389172eff47", "patch": "@@ -525,6 +525,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         match &item.kind {\n             hir::ItemKind::Impl(hir::Impl { of_trait, .. }) => {\n@@ -839,6 +840,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         use self::hir::TraitItemKind::*;\n         match trait_item.kind {\n@@ -888,6 +890,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         use self::hir::ImplItemKind::*;\n         match impl_item.kind {"}, {"sha": "20d0c15e8e42a1cf0e1c86a389264dcaaf203ef3", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3a738a9427859e13e352d6ac00a9389172eff47/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a738a9427859e13e352d6ac00a9389172eff47/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=e3a738a9427859e13e352d6ac00a9389172eff47", "patch": "@@ -434,6 +434,7 @@ impl<'tcx> WfPredicates<'tcx> {\n     }\n \n     /// Pushes all the predicates needed to validate that `ty` is WF into `out`.\n+    #[instrument(level = \"debug\", skip(self))]\n     fn compute(&mut self, arg: GenericArg<'tcx>) {\n         let mut walker = arg.walk();\n         let param_env = self.param_env;\n@@ -488,6 +489,8 @@ impl<'tcx> WfPredicates<'tcx> {\n                 }\n             };\n \n+            debug!(\"wf bounds for ty={:?} ty.kind={:#?}\", ty, ty.kind());\n+\n             match *ty.kind() {\n                 ty::Bool\n                 | ty::Char"}, {"sha": "c1e258f5e89160db8510b0c9ce68a1d396b87d20", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3a738a9427859e13e352d6ac00a9389172eff47/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a738a9427859e13e352d6ac00a9389172eff47/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=e3a738a9427859e13e352d6ac00a9389172eff47", "patch": "@@ -2695,6 +2695,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         result_ty\n     }\n \n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn impl_trait_ty_to_ty(\n         &self,\n         def_id: DefId,\n@@ -2743,9 +2744,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         });\n         debug!(\"impl_trait_ty_to_ty: substs={:?}\", substs);\n \n-        let ty = tcx.mk_opaque(def_id, substs);\n-        debug!(\"impl_trait_ty_to_ty: {}\", ty);\n-        ty\n+        tcx.mk_opaque(def_id, substs)\n     }\n \n     pub fn ty_of_arg(&self, ty: &hir::Ty<'_>, expected_ty: Option<Ty<'tcx>>) -> Ty<'tcx> {"}, {"sha": "e70f728d7dcce3db1bdff7e48aa5e20b8be200a5", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e3a738a9427859e13e352d6ac00a9389172eff47/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a738a9427859e13e352d6ac00a9389172eff47/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=e3a738a9427859e13e352d6ac00a9389172eff47", "patch": "@@ -573,6 +573,7 @@ fn get_new_lifetime_name<'tcx>(\n \n /// Returns the predicates defined on `item_def_id` of the form\n /// `X: Foo` where `X` is the type parameter `def_id`.\n+#[instrument(level = \"trace\", skip(tcx))]\n fn type_param_predicates(\n     tcx: TyCtxt<'_>,\n     (item_def_id, def_id, assoc_name): (DefId, LocalDefId, Ident),\n@@ -679,7 +680,7 @@ impl<'tcx> ItemCtxt<'tcx> {\n         assoc_name: Option<Ident>,\n     ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n         let param_def_id = self.tcx.hir().local_def_id(param_id).to_def_id();\n-        debug!(?param_def_id);\n+        trace!(?param_def_id);\n         ast_generics\n             .predicates\n             .iter()\n@@ -708,9 +709,8 @@ impl<'tcx> ItemCtxt<'tcx> {\n             .collect()\n     }\n \n+    #[instrument(level = \"trace\", skip(self))]\n     fn bound_defines_assoc_item(&self, b: &hir::GenericBound<'_>, assoc_name: Ident) -> bool {\n-        debug!(\"bound_defines_assoc_item(b={:?}, assoc_name={:?})\", b, assoc_name);\n-\n         match b {\n             hir::GenericBound::Trait(poly_trait_ref, _) => {\n                 let trait_ref = &poly_trait_ref.trait_ref;\n@@ -2105,11 +2105,10 @@ fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n \n /// Returns a list of user-specified type predicates for the definition with ID `def_id`.\n /// N.B., this does not include any implied/inferred constraints.\n+#[instrument(level = \"trace\", skip(tcx), ret)]\n fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n     use rustc_hir::*;\n \n-    debug!(\"explicit_predicates_of(def_id={:?})\", def_id);\n-\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n     let node = tcx.hir().get(hir_id);\n \n@@ -2224,6 +2223,9 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n         + has_own_self as u32\n         + early_bound_lifetimes_from_generics(tcx, ast_generics).count() as u32;\n \n+    trace!(?predicates);\n+    trace!(?ast_generics);\n+\n     // Collect the predicates that were written inline by the user on each\n     // type parameter (e.g., `<T: Foo>`).\n     for param in ast_generics.params {\n@@ -2244,7 +2246,9 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                     Some((param.hir_id, ast_generics.predicates)),\n                     param.span,\n                 );\n+                trace!(?bounds);\n                 predicates.extend(bounds.predicates(tcx, param_ty));\n+                trace!(?predicates);\n             }\n             GenericParamKind::Const { .. } => {\n                 // Bounds on const parameters are currently not possible.\n@@ -2253,6 +2257,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n         }\n     }\n \n+    trace!(?predicates);\n     // Add in the bounds that appear in the where-clause.\n     for predicate in ast_generics.predicates {\n         match predicate {\n@@ -2338,12 +2343,10 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n         );\n     }\n \n-    let result = ty::GenericPredicates {\n+    ty::GenericPredicates {\n         parent: generics.parent,\n         predicates: tcx.arena.alloc_from_iter(predicates),\n-    };\n-    debug!(\"explicit_predicates_of(def_id={:?}) = {:?}\", def_id, result);\n-    result\n+    }\n }\n \n fn const_evaluatable_predicates_of<'tcx>("}, {"sha": "318e8f581f7c8b42f711887229ff2133ebfe058b", "filename": "compiler/rustc_typeck/src/collect/item_bounds.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3a738a9427859e13e352d6ac00a9389172eff47/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a738a9427859e13e352d6ac00a9389172eff47/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=e3a738a9427859e13e352d6ac00a9389172eff47", "patch": "@@ -53,6 +53,7 @@ fn associated_type_bounds<'tcx>(\n /// impl trait it isn't possible to write a suitable predicate on the\n /// containing function and for type-alias impl trait we don't have a backwards\n /// compatibility issue.\n+#[instrument(level = \"trace\", skip(tcx), ret)]\n fn opaque_type_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     opaque_def_id: DefId,\n@@ -67,6 +68,8 @@ fn opaque_type_bounds<'tcx>(\n         let mut bounds = <dyn AstConv<'_>>::compute_bounds(&icx, item_ty, ast_bounds);\n         // Opaque types are implicitly sized unless a `?Sized` bound is found\n         <dyn AstConv<'_>>::add_implicitly_sized(&icx, &mut bounds, ast_bounds, None, span);\n+        debug!(?bounds);\n+\n         tcx.arena.alloc_from_iter(bounds.predicates(tcx, item_ty))\n     })\n }"}]}