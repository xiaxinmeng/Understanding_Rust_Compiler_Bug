{"sha": "662811b3f0a4187f1a27eaa9880581329f256d85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MjgxMWIzZjBhNDE4N2YxYTI3ZWFhOTg4MDU4MTMyOWYyNTZkODU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-25T20:35:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-25T20:35:25Z"}, "message": "Merge pull request #1584 from topecongiro/poor/chain-trailing-try\n\nEnhance chain", "tree": {"sha": "37d1d1fcbd4bb9daa0147af49d3a34c0719659d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37d1d1fcbd4bb9daa0147af49d3a34c0719659d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/662811b3f0a4187f1a27eaa9880581329f256d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/662811b3f0a4187f1a27eaa9880581329f256d85", "html_url": "https://github.com/rust-lang/rust/commit/662811b3f0a4187f1a27eaa9880581329f256d85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/662811b3f0a4187f1a27eaa9880581329f256d85/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7b8dcc60d50f9be0785ec5a572f813691af2032", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b8dcc60d50f9be0785ec5a572f813691af2032", "html_url": "https://github.com/rust-lang/rust/commit/a7b8dcc60d50f9be0785ec5a572f813691af2032"}, {"sha": "986abc24b4266a12dbaadb0966f41e1c53cddaf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/986abc24b4266a12dbaadb0966f41e1c53cddaf5", "html_url": "https://github.com/rust-lang/rust/commit/986abc24b4266a12dbaadb0966f41e1c53cddaf5"}], "stats": {"total": 225, "additions": 161, "deletions": 64}, "files": [{"sha": "a0c6ba407d955e4f4ca1ef59e8b9ebfdec031b3c", "filename": "Configurations.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -112,6 +112,28 @@ let lorem = ipsum.dolor().sit().amet().consectetur().adipiscing().elit();\n #### Lines longer than `chain_one_line_max`:\n See [`chain_indent`](#chain_indent).\n \n+## `chain_split_single_child`\n+\n+Split a chain with a single child if its length exceeds [`chain_one_line_max`](#chain_one_line_max).\n+\n+- **Default value**: `false`\n+- **Possible values**: `false`, `true`\n+\n+#### `false`\n+\n+```rust\n+let files = fs::read_dir(\"tests/coverage/source\").expect(\"Couldn't read source dir\");\n+```\n+\n+#### `true`\n+\n+```rust\n+let files = fs::read_dir(\"tests/coverage/source\")\n+    .expect(\"Couldn't read source dir\");\n+```\n+\n+See also [`chain_one_line_max`](#chain_one_line_max).\n+\n ## `closure_block_indent_threshold`\n \n How many lines a closure must have before it is block indented. -1 means never use block indent."}, {"sha": "9a8a69144403039f37e6131a54366d8ea52e3568", "filename": "src/chains.rs", "status": "modified", "additions": 58, "deletions": 8, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -83,6 +83,7 @@ use expr::rewrite_call;\n use config::IndentStyle;\n use macros::convert_try_mac;\n \n+use std::cmp::min;\n use std::iter;\n use syntax::{ast, ptr};\n use syntax::codemap::{mk_sp, Span};\n@@ -97,6 +98,13 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     if chain_only_try(&subexpr_list) {\n         return rewrite_try(&parent, subexpr_list.len(), context, shape);\n     }\n+    let trailing_try_num = subexpr_list\n+        .iter()\n+        .take_while(|e| match e.node {\n+                        ast::ExprKind::Try(..) => true,\n+                        _ => false,\n+                    })\n+        .count();\n \n     // Parent is the first item in the chain, e.g., `foo` in `foo.bar.baz()`.\n     let parent_shape = if is_block_expr(context, &parent, \"\\n\") {\n@@ -155,28 +163,30 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n            first_child_shape,\n            other_child_shape);\n \n-    let child_shape_iter = Some(first_child_shape)\n-        .into_iter()\n-        .chain(::std::iter::repeat(other_child_shape)\n-                   .take(subexpr_list.len() - 1));\n+    let child_shape_iter =\n+        Some(first_child_shape)\n+            .into_iter()\n+            .chain(::std::iter::repeat(other_child_shape).take(subexpr_list.len() - 1));\n     let iter = subexpr_list.iter().rev().zip(child_shape_iter);\n     let mut rewrites = try_opt!(iter.map(|(e, shape)| {\n                                              rewrite_chain_subexpr(e, total_span, context, shape)\n                                          })\n                                     .collect::<Option<Vec<_>>>());\n \n     // Total of all items excluding the last.\n-    let almost_total = rewrites[..rewrites.len() - 1]\n+    let last_non_try_index = rewrites.len() - (1 + trailing_try_num);\n+    let almost_total = rewrites[..last_non_try_index]\n         .iter()\n         .fold(0, |a, b| a + first_line_width(b)) + parent_rewrite.len();\n     let one_line_len = rewrites.iter().fold(0, |a, r| a + first_line_width(r)) +\n                        parent_rewrite.len();\n \n-    let veto_single_line = if one_line_len > context.config.chain_one_line_max() {\n+    let one_line_budget = min(shape.width, context.config.chain_one_line_max());\n+    let veto_single_line = if one_line_len > one_line_budget {\n         if rewrites.len() > 1 {\n             true\n         } else if rewrites.len() == 1 {\n-            parent_rewrite.len() > context.config.chain_one_line_max() / 2\n+            context.config.chain_split_single_child() || one_line_len > shape.width\n         } else {\n             false\n         }\n@@ -195,7 +205,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let mut fits_single_line = !veto_single_line && almost_total <= shape.width;\n     if fits_single_line {\n         let len = rewrites.len();\n-        let (init, last) = rewrites.split_at_mut(len - 1);\n+        let (init, last) = rewrites.split_at_mut(len - (1 + trailing_try_num));\n         fits_single_line = init.iter().all(|s| !s.contains('\\n'));\n \n         if fits_single_line {\n@@ -219,6 +229,25 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         }\n     }\n \n+    // Try overflowing the last element if we are using block indent.\n+    if !fits_single_line && context.config.fn_call_style() == IndentStyle::Block {\n+        let (init, last) = rewrites.split_at_mut(last_non_try_index);\n+        let almost_single_line = init.iter().all(|s| !s.contains('\\n'));\n+        if almost_single_line {\n+            let overflow_shape = Shape {\n+                width: one_line_budget,\n+                ..parent_shape\n+            };\n+            fits_single_line = rewrite_last_child_with_overflow(context,\n+                                                                &subexpr_list[trailing_try_num],\n+                                                                overflow_shape,\n+                                                                total_span,\n+                                                                almost_total,\n+                                                                one_line_budget,\n+                                                                &mut last[0]);\n+        }\n+    }\n+\n     let connector = if fits_single_line && !parent_rewrite_contains_newline {\n         // Yay, we can put everything on one line.\n         String::new()\n@@ -258,6 +287,27 @@ fn chain_only_try(exprs: &[ast::Expr]) -> bool {\n                      })\n }\n \n+// Try to rewrite and replace the last non-try child. Return `true` if\n+// replacing succeeds.\n+fn rewrite_last_child_with_overflow(context: &RewriteContext,\n+                                    expr: &ast::Expr,\n+                                    shape: Shape,\n+                                    span: Span,\n+                                    almost_total: usize,\n+                                    one_line_budget: usize,\n+                                    last_child: &mut String)\n+                                    -> bool {\n+    if let Some(shape) = shape.shrink_left(almost_total) {\n+        if let Some(ref mut rw) = rewrite_chain_subexpr(expr, span, context, shape) {\n+            if almost_total + first_line_width(rw) <= one_line_budget {\n+                ::std::mem::swap(last_child, rw);\n+                return true;\n+            }\n+        }\n+    }\n+    false\n+}\n+\n pub fn rewrite_try(expr: &ast::Expr,\n                    try_count: usize,\n                    context: &RewriteContext,"}, {"sha": "0c73b64c6b22fd137d3d398e8fa7ea07e668633a", "filename": "src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -448,6 +448,8 @@ create_config! {\n         \"Report all, none or unnumbered occurrences of FIXME in source file comments\";\n     chain_indent: IndentStyle, IndentStyle::Block, \"Indentation of chain\";\n     chain_one_line_max: usize, 60, \"Maximum length of a chain to fit on a single line\";\n+    chain_split_single_child: bool, false, \"Split a chain with a single child if its length \\\n+                                            exceeds `chain_one_line_max`\";\n     reorder_imports: bool, false, \"Reorder import statements alphabetically\";\n     reorder_imports_in_group: bool, false, \"Reorder import statements in group\";\n     reorder_imported_names: bool, false,"}, {"sha": "4a415a5cc82ef4f7c12b014867e2d686701aedc1", "filename": "src/expr.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -98,20 +98,16 @@ fn format_expr(expr: &ast::Expr,\n         }\n         ast::ExprKind::Tup(ref items) => rewrite_tuple(context, items, expr.span, shape),\n         ast::ExprKind::While(ref cond, ref block, label) => {\n-            ControlFlow::new_while(None, cond, block, label, expr.span)\n-                .rewrite(context, shape)\n+            ControlFlow::new_while(None, cond, block, label, expr.span).rewrite(context, shape)\n         }\n         ast::ExprKind::WhileLet(ref pat, ref cond, ref block, label) => {\n-            ControlFlow::new_while(Some(pat), cond, block, label, expr.span)\n-                .rewrite(context, shape)\n+            ControlFlow::new_while(Some(pat), cond, block, label, expr.span).rewrite(context, shape)\n         }\n         ast::ExprKind::ForLoop(ref pat, ref cond, ref block, label) => {\n-            ControlFlow::new_for(pat, cond, block, label, expr.span)\n-                .rewrite(context, shape)\n+            ControlFlow::new_for(pat, cond, block, label, expr.span).rewrite(context, shape)\n         }\n         ast::ExprKind::Loop(ref block, label) => {\n-            ControlFlow::new_loop(block, label, expr.span)\n-                .rewrite(context, shape)\n+            ControlFlow::new_loop(block, label, expr.span).rewrite(context, shape)\n         }\n         ast::ExprKind::Block(ref block) => block.rewrite(context, shape),\n         ast::ExprKind::If(ref cond, ref if_block, ref else_block) => {\n@@ -179,12 +175,11 @@ fn format_expr(expr: &ast::Expr,\n         ast::ExprKind::Mac(ref mac) => {\n             // Failure to rewrite a marco should not imply failure to\n             // rewrite the expression.\n-            rewrite_macro(mac, None, context, shape, MacroPosition::Expression)\n-                .or_else(|| {\n-                             wrap_str(context.snippet(expr.span),\n-                                      context.config.max_width(),\n-                                      shape)\n-                         })\n+            rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n+                wrap_str(context.snippet(expr.span),\n+                         context.config.max_width(),\n+                         shape)\n+            })\n         }\n         ast::ExprKind::Ret(None) => {\n             wrap_str(\"return\".to_owned(), context.config.max_width(), shape)\n@@ -324,8 +319,7 @@ pub fn rewrite_pair<LHS, RHS>(lhs: &LHS,\n                                   .checked_sub(shape.used_width() + prefix.len() + infix.len()));\n     let rhs_shape = match context.config.control_style() {\n         Style::Default => {\n-            try_opt!(shape.sub_width(suffix.len() + prefix.len()))\n-                .visual_indent(prefix.len())\n+            try_opt!(shape.sub_width(suffix.len() + prefix.len())).visual_indent(prefix.len())\n         }\n         Style::Rfc => try_opt!(shape.block_left(context.config.tab_spaces())),\n     };\n@@ -516,8 +510,7 @@ fn rewrite_closure(capture: ast::CaptureBy,\n \n     // 1 = space between `|...|` and body.\n     let extra_offset = extra_offset(&prefix, shape) + 1;\n-    let body_shape = try_opt!(shape.sub_width(extra_offset))\n-        .add_offset(extra_offset);\n+    let body_shape = try_opt!(shape.sub_width(extra_offset)).add_offset(extra_offset);\n \n     if let ast::ExprKind::Block(ref block) = body.node {\n         // The body of the closure is an empty block.\n@@ -859,8 +852,8 @@ impl<'a> ControlFlow<'a> {\n \n             let new_width = try_opt!(new_width.checked_sub(if_str.len()));\n             let else_expr = &else_node.stmts[0];\n-            let else_str = try_opt!(else_expr.rewrite(context,\n-                                                      Shape::legacy(new_width, Indent::empty())));\n+            let else_str =\n+                try_opt!(else_expr.rewrite(context, Shape::legacy(new_width, Indent::empty())));\n \n             if if_str.contains('\\n') || else_str.contains('\\n') {\n                 return None;\n@@ -1765,6 +1758,7 @@ fn rewrite_call_args(context: &RewriteContext,\n         config: context.config,\n     };\n \n+    let one_line_budget = min(one_line_width, context.config.fn_call_width());\n     let almost_no_newline =\n         item_vec\n             .iter()\n@@ -1774,17 +1768,17 @@ fn rewrite_call_args(context: &RewriteContext,\n     let extendable = almost_no_newline &&\n                      item_vec.iter().fold(0, |acc, item| {\n         acc + item.item.as_ref().map_or(0, |s| 2 + first_line_width(s))\n-    }) <= min(one_line_width, context.config.fn_call_width()) + 2;\n+    }) <= one_line_budget + 2;\n \n     match write_list(&item_vec, &fmt) {\n         // If arguments do not fit in a single line and do not contain newline,\n         // try to put it on the next line. Try this only when we are in block mode\n         // and not rewriting macro.\n         Some(ref s) if context.config.fn_call_style() == IndentStyle::Block &&\n                        !context.inside_macro &&\n-                       (!can_be_overflowed(context, args) && args.len() == 1 && s.contains('\\n') ||\n-                        first_line_width(s) > one_line_width ||\n-                        first_line_width(s) > context.config.fn_call_width()) => {\n+                       ((!can_be_overflowed(context, args) && args.len() == 1 &&\n+                         s.contains('\\n')) ||\n+                        first_line_width(s) > one_line_budget) => {\n             fmt.trailing_separator = SeparatorTactic::Vertical;\n             fmt.tactic = DefinitiveListTactic::Vertical;\n             write_list(&item_vec, &fmt).map(|rw| (false, rw))"}, {"sha": "2d1fa33a90e3d746936f850cd8de7153a01986fb", "filename": "src/file_lines.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -135,8 +135,7 @@ impl FileLines {\n             Some(ref map) => map,\n         };\n \n-        match canonicalize_path_string(file_name)\n-                  .and_then(|file| map.get(&file)) {\n+        match canonicalize_path_string(file_name).and_then(|file| map.get(&file)) {\n             Some(ranges) => ranges.iter().any(f),\n             None => false,\n         }"}, {"sha": "37ffb4792ebe1ed56341e9fb059bbc6cec13ad82", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -1125,8 +1125,7 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n \n     let generics_indent = indent + result.len();\n     let generics_span = mk_sp(context.codemap.span_after(span, \"type\"), ty.span.lo);\n-    let shape = try_opt!(Shape::indented(generics_indent, context.config)\n-                             .sub_width(\" =\".len()));\n+    let shape = try_opt!(Shape::indented(generics_indent, context.config).sub_width(\" =\".len()));\n     let generics_str = try_opt!(rewrite_generics(context, generics, shape, generics_span));\n \n     result.push_str(&generics_str);"}, {"sha": "3448f8a446a2390c0ed80918163bb723d7406401", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -430,8 +430,7 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n             let post_snippet_trimmed = if post_snippet.starts_with(',') {\n                 post_snippet[1..].trim_matches(white_space)\n             } else if post_snippet.ends_with(',') {\n-                post_snippet[..(post_snippet.len() - 1)]\n-                    .trim_matches(white_space)\n+                post_snippet[..(post_snippet.len() - 1)].trim_matches(white_space)\n             } else {\n                 post_snippet\n             };\n@@ -529,8 +528,7 @@ pub fn struct_lit_shape(shape: Shape,\n                         -> Option<(Option<Shape>, Shape)> {\n     let v_shape = match context.config.struct_lit_style() {\n         IndentStyle::Visual => {\n-            try_opt!(try_opt!(shape.shrink_left(prefix_width))\n-                         .sub_width(suffix_width))\n+            try_opt!(try_opt!(shape.shrink_left(prefix_width)).sub_width(suffix_width))\n         }\n         IndentStyle::Block => {\n             let shape = shape.block_indent(context.config.tab_spaces());"}, {"sha": "3c6c54f42cfa89d14b033117f31409be9c5367c9", "filename": "src/macros.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -172,11 +172,12 @@ pub fn rewrite_macro(mac: &ast::Mac,\n         MacroStyle::Parens => {\n             // Format macro invocation as function call, forcing no trailing\n             // comma because not all macros support them.\n-            rewrite_call(context, &macro_name, &expr_vec, mac.span, shape)\n-                .map(|rw| match position {\n-                         MacroPosition::Item => format!(\"{};\", rw),\n-                         _ => rw,\n-                     })\n+            rewrite_call(context, &macro_name, &expr_vec, mac.span, shape).map(|rw| {\n+                match position {\n+                    MacroPosition::Item => format!(\"{};\", rw),\n+                    _ => rw,\n+                }\n+            })\n         }\n         MacroStyle::Brackets => {\n             let mac_shape = try_opt!(shape.shrink_left(macro_name.len()));"}, {"sha": "3d2c3b0ac9f3c64643df0979bf290c6c8b8986b5", "filename": "src/modules.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -68,8 +68,7 @@ fn module_file(id: ast::Ident,\n         return path;\n     }\n \n-    match parser::Parser::default_submod_path(id, dir_path, codemap)\n-              .result {\n+    match parser::Parser::default_submod_path(id, dir_path, codemap).result {\n         Ok(parser::ModulePathSuccess { path, .. }) => path,\n         Err(_) => panic!(\"Couldn't find module {}\", id),\n     }"}, {"sha": "312f2b0ace932b8520636e069aed2326431bb0c1", "filename": "src/patterns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -39,10 +39,10 @@ impl Rewrite for Pat {\n                 let sub_pat = match *sub_pat {\n                     Some(ref p) => {\n                         // 3 - ` @ `.\n-                        let width = try_opt!(shape.width.checked_sub(prefix.len() +\n-                                                                     mut_infix.len() +\n-                                                                     id_str.len() +\n-                                                                     3));\n+                        let width =\n+                            try_opt!(shape.width.checked_sub(prefix.len() + mut_infix.len() +\n+                                                             id_str.len() +\n+                                                             3));\n                         format!(\" @ {}\",\n                                 try_opt!(p.rewrite(context, Shape::legacy(width, shape.indent))))\n                     }"}, {"sha": "365d205aef100a4187fe1018aa7f3d764a19c043", "filename": "src/string.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -35,8 +35,7 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n     let re = Regex::new(r\"([^\\\\](\\\\\\\\)*)\\\\[\\n\\r][[:space:]]*\").unwrap();\n     let stripped_str = re.replace_all(orig, \"$1\");\n \n-    let graphemes = UnicodeSegmentation::graphemes(&*stripped_str, false)\n-        .collect::<Vec<&str>>();\n+    let graphemes = UnicodeSegmentation::graphemes(&*stripped_str, false).collect::<Vec<&str>>();\n     let shape = fmt.shape.visual_indent(0);\n     let indent = shape.indent.to_string(fmt.config);\n     let punctuation = \":,;.\";"}, {"sha": "e80c558e51eadd1449bc1eb7adbd3140998d8dfb", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -332,8 +332,7 @@ pub fn wrap_str<S: AsRef<str>>(s: S, max_width: usize, shape: Shape) -> Option<S\n \n impl Rewrite for String {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        wrap_str(self, context.config.max_width(), shape)\n-            .map(ToOwned::to_owned)\n+        wrap_str(self, context.config.max_width(), shape).map(ToOwned::to_owned)\n     }\n }\n "}, {"sha": "aae6693f43f9c7eee818549037ab50fe3502d210", "filename": "tests/source/configs-fn_call_style-block.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/tests%2Fsource%2Fconfigs-fn_call_style-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/tests%2Fsource%2Fconfigs-fn_call_style-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-fn_call_style-block.rs?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -5,6 +5,17 @@ fn main() {\n     lorem(\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipiscing\", \"elit\");\n     // #1501\n     let hyper = Arc::new(Client::with_connector(HttpsConnector::new(TlsClient::new())));\n+\n+    // chain\n+    let x = yooooooooooooo.fooooooooooooooo.baaaaaaaaaaaaar(hello, world);\n+\n+    // #1380\n+    {\n+        {\n+            let creds = self.client\n+                .client_credentials(&self.config.auth.oauth2.id, &self.config.auth.oauth2.secret)?;\n+        }\n+    }\n }\n \n // #1521"}, {"sha": "58e44ee538100fc397e24674c6f964991c145335", "filename": "tests/system.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -55,8 +55,7 @@ fn system_tests() {\n // the only difference is the coverage mode\n #[test]\n fn coverage_tests() {\n-    let files = fs::read_dir(\"tests/coverage/source\")\n-        .expect(\"Couldn't read source dir\");\n+    let files = fs::read_dir(\"tests/coverage/source\").expect(\"Couldn't read source dir\");\n     let files = files.map(get_path_string);\n     let (_reports, count, fails) = check_files(files);\n \n@@ -83,8 +82,7 @@ fn assert_output(source: &str, expected_filename: &str) {\n     let _ = filemap::write_all_files(&file_map, &mut out, &config);\n     let output = String::from_utf8(out).unwrap();\n \n-    let mut expected_file = fs::File::open(&expected_filename)\n-        .expect(\"Couldn't open target\");\n+    let mut expected_file = fs::File::open(&expected_filename).expect(\"Couldn't open target\");\n     let mut expected_text = String::new();\n     expected_file\n         .read_to_string(&mut expected_text)\n@@ -279,8 +277,7 @@ fn get_config(config_file: Option<&str>) -> Config {\n         }\n     };\n \n-    let mut def_config_file = fs::File::open(config_file_name)\n-        .expect(\"Couldn't open config\");\n+    let mut def_config_file = fs::File::open(config_file_name).expect(\"Couldn't open config\");\n     let mut def_config = String::new();\n     def_config_file\n         .read_to_string(&mut def_config)"}, {"sha": "143f59b596217a8d5202d119f44c79da32ec6bc4", "filename": "tests/target/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/tests%2Ftarget%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/tests%2Ftarget%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure.rs?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -144,9 +144,9 @@ fn issue470() {\n impl Foo {\n     pub fn bar(&self) {\n         Some(SomeType {\n-                 push_closure_out_to_100_chars: iter(otherwise_it_works_ok.into_iter().map(|f| {\n-                                                                                               Ok(f)\n-                                                                                           })),\n+                 push_closure_out_to_100_chars: iter(otherwise_it_works_ok\n+                                                         .into_iter()\n+                                                         .map(|f| Ok(f))),\n              })\n     }\n }"}, {"sha": "1863c6ac33f5f44dbe95871e85ca01ace740c831", "filename": "tests/target/configs-chain_split_single_child-false.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/tests%2Ftarget%2Fconfigs-chain_split_single_child-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/tests%2Ftarget%2Fconfigs-chain_split_single_child-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-chain_split_single_child-false.rs?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -0,0 +1,5 @@\n+// rustfmt-chain_split_single_child: false\n+\n+fn main() {\n+    let files = fs::read_dir(\"tests/source\").expect(\"Couldn't read source dir\");\n+}"}, {"sha": "154fa0bfa2e6131b9842cf90476fe50510bc0038", "filename": "tests/target/configs-chain_split_single_child-true.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/tests%2Ftarget%2Fconfigs-chain_split_single_child-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/tests%2Ftarget%2Fconfigs-chain_split_single_child-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-chain_split_single_child-true.rs?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-chain_split_single_child: true\n+\n+fn main() {\n+    let files = fs::read_dir(\"tests/source\")\n+        .expect(\"Couldn't read source dir\");\n+}"}, {"sha": "2ac5340059c9d56e0f3406616a7222568a963b75", "filename": "tests/target/configs-fn_call_style-block.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/662811b3f0a4187f1a27eaa9880581329f256d85/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662811b3f0a4187f1a27eaa9880581329f256d85/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs?ref=662811b3f0a4187f1a27eaa9880581329f256d85", "patch": "@@ -16,6 +16,22 @@ fn main() {\n     let hyper = Arc::new(Client::with_connector(\n         HttpsConnector::new(TlsClient::new()),\n     ));\n+\n+    // chain\n+    let x = yooooooooooooo.fooooooooooooooo.baaaaaaaaaaaaar(\n+        hello,\n+        world,\n+    );\n+\n+    // #1380\n+    {\n+        {\n+            let creds = self.client.client_credentials(\n+                &self.config.auth.oauth2.id,\n+                &self.config.auth.oauth2.secret,\n+            )?;\n+        }\n+    }\n }\n \n // #1521"}]}