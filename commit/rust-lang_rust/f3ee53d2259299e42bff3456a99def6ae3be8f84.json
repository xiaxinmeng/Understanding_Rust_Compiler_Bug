{"sha": "f3ee53d2259299e42bff3456a99def6ae3be8f84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZWU1M2QyMjU5Mjk5ZTQyYmZmMzQ1NmE5OWRlZjZhZTNiZThmODQ=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-02-04T05:29:19Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-02-04T05:30:24Z"}, "message": "Document `get_def_path`", "tree": {"sha": "f5e1032b181ee747014576a8effe5750c780c89e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5e1032b181ee747014576a8effe5750c780c89e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3ee53d2259299e42bff3456a99def6ae3be8f84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ee53d2259299e42bff3456a99def6ae3be8f84", "html_url": "https://github.com/rust-lang/rust/commit/f3ee53d2259299e42bff3456a99def6ae3be8f84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3ee53d2259299e42bff3456a99def6ae3be8f84/comments", "author": null, "committer": null, "parents": [{"sha": "b6c3a6a09f339079aa1213226aa43b65a3fe0fe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6c3a6a09f339079aa1213226aa43b65a3fe0fe9", "html_url": "https://github.com/rust-lang/rust/commit/b6c3a6a09f339079aa1213226aa43b65a3fe0fe9"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "eebc2913d29a999d90e433d3cd193d5a322db288", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f3ee53d2259299e42bff3456a99def6ae3be8f84/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ee53d2259299e42bff3456a99def6ae3be8f84/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=f3ee53d2259299e42bff3456a99def6ae3be8f84", "patch": "@@ -130,6 +130,15 @@ pub fn match_def_path(tcx: TyCtxt<'_, '_, '_>, def_id: DefId, path: &[&str]) ->\n     apb.names.len() == path.len() && apb.names.into_iter().zip(path.iter()).all(|(a, &b)| *a == *b)\n }\n \n+/// Get the absolute path of `def_id` as a vector of `&str`.\n+///\n+/// # Examples\n+/// ```rust,ignore\n+/// let def_path = get_def_path(tcx, def_id);\n+/// if let &[\"core\", \"option\", \"Option\"] = &def_path[..] {\n+///     // The given `def_id` is that of an `Option` type\n+/// };\n+/// ```\n pub fn get_def_path(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Vec<&'static str> {\n     let mut apb = AbsolutePathBuffer { names: vec![] };\n     tcx.push_item_path(&mut apb, def_id, false);"}]}