{"sha": "4b1d83ca6494d10cb1ffaf50032e0a2d833ad635", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMWQ4M2NhNjQ5NGQxMGNiMWZmYWY1MDAzMmUwYTJkODMzYWQ2MzU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-18T00:29:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-18T00:31:03Z"}, "message": "fix deprecated-mode lint warning to consider dtors", "tree": {"sha": "7d0eafe6a203ca7b06fc408c379e097895832000", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d0eafe6a203ca7b06fc408c379e097895832000"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b1d83ca6494d10cb1ffaf50032e0a2d833ad635", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b1d83ca6494d10cb1ffaf50032e0a2d833ad635", "html_url": "https://github.com/rust-lang/rust/commit/4b1d83ca6494d10cb1ffaf50032e0a2d833ad635", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b1d83ca6494d10cb1ffaf50032e0a2d833ad635/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "457e78cd538ed057a2546ced28688cec44dcf264", "url": "https://api.github.com/repos/rust-lang/rust/commits/457e78cd538ed057a2546ced28688cec44dcf264", "html_url": "https://github.com/rust-lang/rust/commit/457e78cd538ed057a2546ced28688cec44dcf264"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "2cd9c547bf9de64574cb58fdb7bcc4a857a8131c", "filename": "src/libcore/task.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4b1d83ca6494d10cb1ffaf50032e0a2d833ad635/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1d83ca6494d10cb1ffaf50032e0a2d833ad635/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=4b1d83ca6494d10cb1ffaf50032e0a2d833ad635", "patch": "@@ -767,11 +767,11 @@ enum AncestorList = option<unsafe::Exclusive<AncestorNode>>;\n \n // Accessors for taskgroup arcs and ancestor arcs that wrap the unsafety.\n #[inline(always)]\n-fn access_group<U>(x: TaskGroupArc, blk: fn(TaskGroupInner) -> U) -> U {\n+fn access_group<U>(x: &TaskGroupArc, blk: fn(TaskGroupInner) -> U) -> U {\n     unsafe { x.with(blk) }\n }\n #[inline(always)]\n-fn access_ancestors<U>(x: unsafe::Exclusive<AncestorNode>,\n+fn access_ancestors<U>(x: &unsafe::Exclusive<AncestorNode>,\n                        blk: fn(x: &mut AncestorNode) -> U) -> U {\n     unsafe { x.with(blk) }\n }\n@@ -800,7 +800,7 @@ fn each_ancestor(list:        &mut AncestorList,\n         // Need to swap the list out to use it, to appease borrowck.\n         let tmp_list = util::replace(list, AncestorList(none));\n         let (coalesce_this, early_break) =\n-            iterate(tmp_list, bail_opt, forward_blk, last_generation);\n+            iterate(&tmp_list, bail_opt, forward_blk, last_generation);\n         // What should our next ancestor end up being?\n         if coalesce_this.is_some() {\n             // Needed coalesce. Our next ancestor becomes our old\n@@ -821,7 +821,7 @@ fn each_ancestor(list:        &mut AncestorList,\n     // bool:\n     //     True if the supplied block did 'break', here or in any recursive\n     //     calls. If so, must call the unwinder on all previous nodes.\n-    fn iterate(ancestors:       AncestorList,\n+    fn iterate(ancestors:       &AncestorList,\n                bail_opt:        option<fn@(TaskGroupInner)>,\n                forward_blk:     fn(TaskGroupInner) -> bool,\n                last_generation: uint) -> (option<AncestorList>, bool) {\n@@ -836,9 +836,9 @@ fn each_ancestor(list:        &mut AncestorList,\n \n         // The map defaults to none, because if ancestors is none, we're at\n         // the end of the list, which doesn't make sense to coalesce.\n-        return do (*ancestors).map_default((none,false)) |ancestor_arc| {\n+        return do (**ancestors).map_default((none,false)) |ancestor_arc| {\n             // NB: Takes a lock! (this ancestor node)\n-            do access_ancestors(ancestor_arc) |nobe| {\n+            do access_ancestors(&ancestor_arc) |nobe| {\n                 // Check monotonicity\n                 assert last_generation > nobe.generation;\n                 /*##########################################################*\n@@ -903,7 +903,7 @@ fn each_ancestor(list:        &mut AncestorList,\n                              blk: fn(TaskGroupInner) -> U) -> U {\n             // If this trips, more likely the problem is 'blk' failed inside.\n             let tmp_arc = option::swap_unwrap(parent_group);\n-            let result = do access_group(tmp_arc) |tg_opt| { blk(tg_opt) };\n+            let result = do access_group(&tmp_arc) |tg_opt| { blk(tg_opt) };\n             *parent_group <- some(tmp_arc);\n             result\n         }\n@@ -934,12 +934,12 @@ struct Tcb {\n         if rustrt::rust_task_is_unwinding(self.me) {\n             self.notifier.iter(|x| { x.failed = true; });\n             // Take everybody down with us.\n-            do access_group(self.tasks) |tg| {\n+            do access_group(&self.tasks) |tg| {\n                 kill_taskgroup(tg, self.me, self.is_main);\n             }\n         } else {\n             // Remove ourselves from the group(s).\n-            do access_group(self.tasks) |tg| {\n+            do access_group(&self.tasks) |tg| {\n                 leave_taskgroup(tg, self.me, true);\n             }\n         }\n@@ -1080,7 +1080,7 @@ fn gen_child_taskgroup(linked: bool, supervised: bool)\n             // it should be enabled only in debug builds.\n             let new_generation =\n                 match *old_ancestors {\n-                    some(arc) => access_ancestors(arc, |a| a.generation+1),\n+                    some(arc) => access_ancestors(&arc, |a| a.generation+1),\n                     none      => 0 // the actual value doesn't really matter.\n                 };\n             assert new_generation < uint::max_value;\n@@ -1165,7 +1165,7 @@ fn spawn_raw(+opts: TaskOpts, +f: fn~()) {\n             // send something on the notify channel.\n             let notifier = notify_chan.map(|c| AutoNotify(c));\n \n-            if enlist_many(child, child_arc, &mut ancestors) {\n+            if enlist_many(child, &child_arc, &mut ancestors) {\n                 let group = @Tcb(child, child_arc, ancestors,\n                                  is_main, notifier);\n                 unsafe { local_set(child, taskgroup_key!(), group); }\n@@ -1178,7 +1178,7 @@ fn spawn_raw(+opts: TaskOpts, +f: fn~()) {\n         // Set up membership in taskgroup and descendantship in all ancestor\n         // groups. If any enlistment fails, some task was already failing, so\n         // don't let the child task run, and undo every successful enlistment.\n-        fn enlist_many(child: *rust_task, child_arc: TaskGroupArc,\n+        fn enlist_many(child: *rust_task, child_arc: &TaskGroupArc,\n                        ancestors: &mut AncestorList) -> bool {\n             // Join this taskgroup.\n             let mut result ="}, {"sha": "fa6ca057602da2eeaacc4862de69fe6b636b826b", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b1d83ca6494d10cb1ffaf50032e0a2d833ad635/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1d83ca6494d10cb1ffaf50032e0a2d833ad635/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=4b1d83ca6494d10cb1ffaf50032e0a2d833ad635", "patch": "@@ -1519,7 +1519,7 @@ fn remove_owned_send(k: kind) -> kind {\n }\n \n fn remove_copyable(k: kind) -> kind {\n-    k - kind_(KIND_MASK_COPY)\n+    k - kind_(KIND_MASK_COPY | KIND_MASK_DEFAULT_MODE)\n }\n \n impl kind: ops::bitand<kind,kind> {"}]}