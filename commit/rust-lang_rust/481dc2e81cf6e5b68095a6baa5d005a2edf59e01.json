{"sha": "481dc2e81cf6e5b68095a6baa5d005a2edf59e01", "node_id": "C_kwDOAAsO6NoAKDQ4MWRjMmU4MWNmNmU1YjY4MDk1YTZiYWE1ZDAwNWEyZWRmNTllMDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-16T08:44:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-16T08:44:58Z"}, "message": "Auto merge of #9409 - DesmondWillowbrook:iter_kv_map, r=xFrednet\n\nAdd `iter_kv_map` lint\n\nfixes #9376\n\n| before | after |\n| -------------- | ------------------------- |\n| `hmap.iter().map(\\|(key, _)\\| key)` | `hmap.keys()` |\n| `hmap.iter().map(\\|(_, v)\\| v + 2)` | `hmap.values().map(\\|v\\| v + 2)` |\n| `hmap.into_iter().map(\\|(key, _)\\| key)` | `hmap.into_keys()` |\n\nIs `MachineApplicable`\n\nchangelog: [`iter_kv_map`]: added lint", "tree": {"sha": "03a5c5e82c663d9998492a5d4dd5103ca6ecd0f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03a5c5e82c663d9998492a5d4dd5103ca6ecd0f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/481dc2e81cf6e5b68095a6baa5d005a2edf59e01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/481dc2e81cf6e5b68095a6baa5d005a2edf59e01", "html_url": "https://github.com/rust-lang/rust/commit/481dc2e81cf6e5b68095a6baa5d005a2edf59e01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56a8ef4dbe13a537e18ad6cdb0e1dabd25a1250a", "url": "https://api.github.com/repos/rust-lang/rust/commits/56a8ef4dbe13a537e18ad6cdb0e1dabd25a1250a", "html_url": "https://github.com/rust-lang/rust/commit/56a8ef4dbe13a537e18ad6cdb0e1dabd25a1250a"}, {"sha": "c6219b2ece469a17e3c6d7e28e0acbd6ce5c9d44", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6219b2ece469a17e3c6d7e28e0acbd6ce5c9d44", "html_url": "https://github.com/rust-lang/rust/commit/c6219b2ece469a17e3c6d7e28e0acbd6ce5c9d44"}], "stats": {"total": 414, "additions": 414, "deletions": 0}, "files": [{"sha": "044cbff4b78e5a8156384bbc18e7a0d0a25ecb7c", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=481dc2e81cf6e5b68095a6baa5d005a2edf59e01", "patch": "@@ -3800,6 +3800,7 @@ Released 2018-09-13\n [`items_after_statements`]: https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements\n [`iter_cloned_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_cloned_collect\n [`iter_count`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_count\n+[`iter_kv_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_kv_map\n [`iter_next_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_loop\n [`iter_next_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_slice\n [`iter_not_returning_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_not_returning_iterator"}, {"sha": "ae57a9a24a76a8af1222a8fa966149150e91d771", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=481dc2e81cf6e5b68095a6baa5d005a2edf59e01", "patch": "@@ -171,6 +171,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::ITERATOR_STEP_BY_ZERO),\n     LintId::of(methods::ITER_CLONED_COLLECT),\n     LintId::of(methods::ITER_COUNT),\n+    LintId::of(methods::ITER_KV_MAP),\n     LintId::of(methods::ITER_NEXT_SLICE),\n     LintId::of(methods::ITER_NTH),\n     LintId::of(methods::ITER_NTH_ZERO),"}, {"sha": "185189a6af5b63f02de49bb0384e59f5c4553af8", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=481dc2e81cf6e5b68095a6baa5d005a2edf59e01", "patch": "@@ -40,6 +40,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(methods::GET_LAST_WITH_LEN),\n     LintId::of(methods::INSPECT_FOR_EACH),\n     LintId::of(methods::ITER_COUNT),\n+    LintId::of(methods::ITER_KV_MAP),\n     LintId::of(methods::MANUAL_FILTER_MAP),\n     LintId::of(methods::MANUAL_FIND_MAP),\n     LintId::of(methods::MANUAL_SPLIT_ONCE),"}, {"sha": "02fcc8de50727c90179322b374176b460edf9a65", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=481dc2e81cf6e5b68095a6baa5d005a2edf59e01", "patch": "@@ -313,6 +313,7 @@ store.register_lints(&[\n     methods::ITERATOR_STEP_BY_ZERO,\n     methods::ITER_CLONED_COLLECT,\n     methods::ITER_COUNT,\n+    methods::ITER_KV_MAP,\n     methods::ITER_NEXT_SLICE,\n     methods::ITER_NTH,\n     methods::ITER_NTH_ZERO,"}, {"sha": "a7eecabd68495093b54fb67c0924caaa41c8acf0", "filename": "clippy_lints/src/methods/iter_kv_map.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/clippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/clippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs?ref=481dc2e81cf6e5b68095a6baa5d005a2edf59e01", "patch": "@@ -0,0 +1,87 @@\n+#![allow(unused_imports)]\n+\n+use super::ITER_KV_MAP;\n+use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::{snippet, snippet_with_applicability};\n+use clippy_utils::sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::visitors::is_local_used;\n+use rustc_hir::{BindingAnnotation, Body, BorrowKind, Expr, ExprKind, Mutability, Pat, PatKind};\n+use rustc_lint::{LateContext, LintContext};\n+use rustc_middle::ty;\n+use rustc_span::sym;\n+use rustc_span::Span;\n+\n+/// lint use of:\n+/// - `hashmap.iter().map(|(_, v)| v)`\n+/// - `hashmap.into_iter().map(|(_, v)| v)`\n+/// on `HashMaps` and `BTreeMaps` in std\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    map_type: &'tcx str,     // iter / into_iter\n+    expr: &'tcx Expr<'tcx>,  // .iter().map(|(_, v_| v))\n+    recv: &'tcx Expr<'tcx>,  // hashmap\n+    m_arg: &'tcx Expr<'tcx>, // |(_, v)| v\n+) {\n+    if_chain! {\n+        if !expr.span.from_expansion();\n+        if let ExprKind::Closure(c) = m_arg.kind;\n+        if let Body {params: [p], value: body_expr, generator_kind: _ } = cx.tcx.hir().body(c.body);\n+        if let PatKind::Tuple([key_pat, val_pat], _) = p.pat.kind;\n+\n+        let (replacement_kind, binded_ident) = match (&key_pat.kind, &val_pat.kind) {\n+            (key, PatKind::Binding(_, _, value, _)) if pat_is_wild(cx, key, m_arg) => (\"value\", value),\n+            (PatKind::Binding(_, _, key, _), value) if pat_is_wild(cx, value, m_arg) => (\"key\", key),\n+            _ => return,\n+        };\n+\n+        let ty = cx.typeck_results().expr_ty(recv);\n+        if is_type_diagnostic_item(cx, ty, sym::HashMap) || is_type_diagnostic_item(cx, ty, sym::BTreeMap);\n+\n+        then {\n+            let mut applicability = rustc_errors::Applicability::MachineApplicable;\n+            let recv_snippet = snippet_with_applicability(cx, recv.span, \"map\", &mut applicability);\n+            let into_prefix = if map_type == \"into_iter\" {\"into_\"} else {\"\"};\n+\n+            if_chain! {\n+                if let ExprKind::Path(rustc_hir::QPath::Resolved(_, path)) = body_expr.kind;\n+                if let [local_ident] = path.segments;\n+                if local_ident.ident.as_str() == binded_ident.as_str();\n+\n+                then {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        ITER_KV_MAP,\n+                        expr.span,\n+                        &format!(\"iterating on a map's {}s\", replacement_kind),\n+                        \"try\",\n+                        format!(\"{}.{}{}s()\", recv_snippet, into_prefix, replacement_kind),\n+                        applicability,\n+                    );\n+                } else {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        ITER_KV_MAP,\n+                        expr.span,\n+                        &format!(\"iterating on a map's {}s\", replacement_kind),\n+                        \"try\",\n+                        format!(\"{}.{}{}s().map(|{}| {})\", recv_snippet, into_prefix, replacement_kind, binded_ident,\n+                            snippet_with_applicability(cx, body_expr.span, \"/* body */\", &mut applicability)),\n+                        applicability,\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+/// Returns `true` if the pattern is a `PatWild`, or is an ident prefixed with `_`\n+/// that is not locally used.\n+fn pat_is_wild<'tcx>(cx: &LateContext<'tcx>, pat: &'tcx PatKind<'_>, body: &'tcx Expr<'_>) -> bool {\n+    match *pat {\n+        PatKind::Wild => true,\n+        PatKind::Binding(_, id, ident, None) if ident.as_str().starts_with('_') => !is_local_used(cx, body, id),\n+        _ => false,\n+    }\n+}"}, {"sha": "cdde4c54d6378d283c1ff22262d6062e3794f535", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=481dc2e81cf6e5b68095a6baa5d005a2edf59e01", "patch": "@@ -35,6 +35,7 @@ mod into_iter_on_ref;\n mod is_digit_ascii_radix;\n mod iter_cloned_collect;\n mod iter_count;\n+mod iter_kv_map;\n mod iter_next_slice;\n mod iter_nth;\n mod iter_nth_zero;\n@@ -3036,6 +3037,37 @@ declare_clippy_lint! {\n     \"use of `File::read_to_end` or `File::read_to_string`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Checks for iterating a map (`HashMap` or `BTreeMap`) and\n+    /// ignoring either the keys or values.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Readability. There are `keys` and `values` methods that\n+    /// can be used to express that we only need the keys or the values.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```\n+    /// # use std::collections::HashMap;\n+    /// let map: HashMap<u32, u32> = HashMap::new();\n+    /// let values = map.iter().map(|(_, value)| value).collect::<Vec<_>>();\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```\n+    /// # use std::collections::HashMap;\n+    /// let map: HashMap<u32, u32> = HashMap::new();\n+    /// let values = map.values().collect::<Vec<_>>();\n+    /// ```\n+    #[clippy::version = \"1.65.0\"]\n+    pub ITER_KV_MAP,\n+    complexity,\n+    \"iterating on map using `iter` when `keys` or `values` would do\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -3159,6 +3191,7 @@ impl_lint_pass!(Methods => [\n     UNNECESSARY_SORT_BY,\n     VEC_RESIZE_TO_ZERO,\n     VERBOSE_FILE_READS,\n+    ITER_KV_MAP,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -3498,6 +3531,9 @@ impl Methods {\n                 (name @ (\"map\" | \"map_err\"), [m_arg]) => {\n                     if name == \"map\" {\n                         map_clone::check(cx, expr, recv, m_arg, self.msrv);\n+                        if let Some((map_name @ (\"iter\" | \"into_iter\"), recv2, _, _)) = method_call(recv) {\n+                            iter_kv_map::check(cx, map_name, expr, recv2, m_arg);\n+                        }\n                     } else {\n                         map_err_ignore::check(cx, expr, m_arg);\n                     }"}, {"sha": "6c89b4dde372dd04a360d4be038ffafa50de6357", "filename": "src/docs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/src%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/src%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs.rs?ref=481dc2e81cf6e5b68095a6baa5d005a2edf59e01", "patch": "@@ -221,6 +221,7 @@ docs! {\n     \"items_after_statements\",\n     \"iter_cloned_collect\",\n     \"iter_count\",\n+    \"iter_kv_map\",\n     \"iter_next_loop\",\n     \"iter_next_slice\",\n     \"iter_not_returning_iterator\","}, {"sha": "a063c8195ef57f1d893d3662ab0bd90f2005ef4e", "filename": "src/docs/iter_kv_map.txt", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/src%2Fdocs%2Fiter_kv_map.txt", "raw_url": "https://github.com/rust-lang/rust/raw/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/src%2Fdocs%2Fiter_kv_map.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Fiter_kv_map.txt?ref=481dc2e81cf6e5b68095a6baa5d005a2edf59e01", "patch": "@@ -0,0 +1,22 @@\n+### What it does\n+\n+Checks for iterating a map (`HashMap` or `BTreeMap`) and\n+ignoring either the keys or values.\n+\n+### Why is this bad?\n+\n+Readability. There are `keys` and `values` methods that\n+can be used to express that we only need the keys or the values.\n+\n+### Example\n+\n+```\n+let map: HashMap<u32, u32> = HashMap::new();\n+let values = map.iter().map(|(_, value)| value).collect::<Vec<_>>();\n+```\n+\n+Use instead:\n+```\n+let map: HashMap<u32, u32> = HashMap::new();\n+let values = map.values().collect::<Vec<_>>();\n+```\n\\ No newline at end of file"}, {"sha": "83fee04080fa76507d15d19f1376f35ed48caf96", "filename": "tests/ui/iter_kv_map.fixed", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/tests%2Fui%2Fiter_kv_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/tests%2Fui%2Fiter_kv_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_kv_map.fixed?ref=481dc2e81cf6e5b68095a6baa5d005a2edf59e01", "patch": "@@ -0,0 +1,64 @@\n+// run-rustfix\n+\n+#![warn(clippy::iter_kv_map)]\n+#![allow(clippy::redundant_clone)]\n+#![allow(clippy::suspicious_map)]\n+#![allow(clippy::map_identity)]\n+\n+use std::collections::{BTreeMap, HashMap};\n+\n+fn main() {\n+    let get_key = |(key, _val)| key;\n+\n+    let map: HashMap<u32, u32> = HashMap::new();\n+\n+    let _ = map.keys().collect::<Vec<_>>();\n+    let _ = map.values().collect::<Vec<_>>();\n+    let _ = map.values().map(|v| v + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().into_keys().collect::<Vec<_>>();\n+    let _ = map.clone().into_keys().map(|key| key + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().into_values().collect::<Vec<_>>();\n+    let _ = map.clone().into_values().map(|val| val + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().values().collect::<Vec<_>>();\n+    let _ = map.keys().filter(|x| *x % 2 == 0).count();\n+\n+    // Don't lint\n+    let _ = map.iter().filter(|(_, val)| *val % 2 == 0).map(|(key, _)| key).count();\n+    let _ = map.iter().map(get_key).collect::<Vec<_>>();\n+\n+    // Linting the following could be an improvement to the lint\n+    // map.iter().filter_map(|(_, val)| (val % 2 == 0).then(val * 17)).count();\n+\n+    // Lint\n+    let _ = map.keys().map(|key| key * 9).count();\n+    let _ = map.values().map(|value| value * 17).count();\n+\n+    let map: BTreeMap<u32, u32> = BTreeMap::new();\n+\n+    let _ = map.keys().collect::<Vec<_>>();\n+    let _ = map.values().collect::<Vec<_>>();\n+    let _ = map.values().map(|v| v + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().into_keys().collect::<Vec<_>>();\n+    let _ = map.clone().into_keys().map(|key| key + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().into_values().collect::<Vec<_>>();\n+    let _ = map.clone().into_values().map(|val| val + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().values().collect::<Vec<_>>();\n+    let _ = map.keys().filter(|x| *x % 2 == 0).count();\n+\n+    // Don't lint\n+    let _ = map.iter().filter(|(_, val)| *val % 2 == 0).map(|(key, _)| key).count();\n+    let _ = map.iter().map(get_key).collect::<Vec<_>>();\n+\n+    // Linting the following could be an improvement to the lint\n+    // map.iter().filter_map(|(_, val)| (val % 2 == 0).then(val * 17)).count();\n+\n+    // Lint\n+    let _ = map.keys().map(|key| key * 9).count();\n+    let _ = map.values().map(|value| value * 17).count();\n+}"}, {"sha": "7a1f1fb0198c7a3b160280fb55ec0fd84436b800", "filename": "tests/ui/iter_kv_map.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/tests%2Fui%2Fiter_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/tests%2Fui%2Fiter_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_kv_map.rs?ref=481dc2e81cf6e5b68095a6baa5d005a2edf59e01", "patch": "@@ -0,0 +1,64 @@\n+// run-rustfix\n+\n+#![warn(clippy::iter_kv_map)]\n+#![allow(clippy::redundant_clone)]\n+#![allow(clippy::suspicious_map)]\n+#![allow(clippy::map_identity)]\n+\n+use std::collections::{BTreeMap, HashMap};\n+\n+fn main() {\n+    let get_key = |(key, _val)| key;\n+\n+    let map: HashMap<u32, u32> = HashMap::new();\n+\n+    let _ = map.iter().map(|(key, _)| key).collect::<Vec<_>>();\n+    let _ = map.iter().map(|(_, value)| value).collect::<Vec<_>>();\n+    let _ = map.iter().map(|(_, v)| v + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().into_iter().map(|(key, _)| key).collect::<Vec<_>>();\n+    let _ = map.clone().into_iter().map(|(key, _)| key + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().into_iter().map(|(_, val)| val).collect::<Vec<_>>();\n+    let _ = map.clone().into_iter().map(|(_, val)| val + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().iter().map(|(_, val)| val).collect::<Vec<_>>();\n+    let _ = map.iter().map(|(key, _)| key).filter(|x| *x % 2 == 0).count();\n+\n+    // Don't lint\n+    let _ = map.iter().filter(|(_, val)| *val % 2 == 0).map(|(key, _)| key).count();\n+    let _ = map.iter().map(get_key).collect::<Vec<_>>();\n+\n+    // Linting the following could be an improvement to the lint\n+    // map.iter().filter_map(|(_, val)| (val % 2 == 0).then(val * 17)).count();\n+\n+    // Lint\n+    let _ = map.iter().map(|(key, _value)| key * 9).count();\n+    let _ = map.iter().map(|(_key, value)| value * 17).count();\n+\n+    let map: BTreeMap<u32, u32> = BTreeMap::new();\n+\n+    let _ = map.iter().map(|(key, _)| key).collect::<Vec<_>>();\n+    let _ = map.iter().map(|(_, value)| value).collect::<Vec<_>>();\n+    let _ = map.iter().map(|(_, v)| v + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().into_iter().map(|(key, _)| key).collect::<Vec<_>>();\n+    let _ = map.clone().into_iter().map(|(key, _)| key + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().into_iter().map(|(_, val)| val).collect::<Vec<_>>();\n+    let _ = map.clone().into_iter().map(|(_, val)| val + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().iter().map(|(_, val)| val).collect::<Vec<_>>();\n+    let _ = map.iter().map(|(key, _)| key).filter(|x| *x % 2 == 0).count();\n+\n+    // Don't lint\n+    let _ = map.iter().filter(|(_, val)| *val % 2 == 0).map(|(key, _)| key).count();\n+    let _ = map.iter().map(get_key).collect::<Vec<_>>();\n+\n+    // Linting the following could be an improvement to the lint\n+    // map.iter().filter_map(|(_, val)| (val % 2 == 0).then(val * 17)).count();\n+\n+    // Lint\n+    let _ = map.iter().map(|(key, _value)| key * 9).count();\n+    let _ = map.iter().map(|(_key, value)| value * 17).count();\n+}"}, {"sha": "9b9b04c97d81ef40e76d8fa4d9bce42639d1400f", "filename": "tests/ui/iter_kv_map.stderr", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/tests%2Fui%2Fiter_kv_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/481dc2e81cf6e5b68095a6baa5d005a2edf59e01/tests%2Fui%2Fiter_kv_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_kv_map.stderr?ref=481dc2e81cf6e5b68095a6baa5d005a2edf59e01", "patch": "@@ -0,0 +1,136 @@\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:15:13\n+   |\n+LL |     let _ = map.iter().map(|(key, _)| key).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys()`\n+   |\n+   = note: `-D clippy::iter-kv-map` implied by `-D warnings`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:16:13\n+   |\n+LL |     let _ = map.iter().map(|(_, value)| value).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values()`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:17:13\n+   |\n+LL |     let _ = map.iter().map(|(_, v)| v + 2).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values().map(|v| v + 2)`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:19:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(key, _)| key).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_keys()`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:20:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(key, _)| key + 2).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_keys().map(|key| key + 2)`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:22:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(_, val)| val).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values()`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:23:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(_, val)| val + 2).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values().map(|val| val + 2)`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:25:13\n+   |\n+LL |     let _ = map.clone().iter().map(|(_, val)| val).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().values()`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:26:13\n+   |\n+LL |     let _ = map.iter().map(|(key, _)| key).filter(|x| *x % 2 == 0).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys()`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:36:13\n+   |\n+LL |     let _ = map.iter().map(|(key, _value)| key * 9).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys().map(|key| key * 9)`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:37:13\n+   |\n+LL |     let _ = map.iter().map(|(_key, value)| value * 17).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values().map(|value| value * 17)`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:41:13\n+   |\n+LL |     let _ = map.iter().map(|(key, _)| key).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys()`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:42:13\n+   |\n+LL |     let _ = map.iter().map(|(_, value)| value).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values()`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:43:13\n+   |\n+LL |     let _ = map.iter().map(|(_, v)| v + 2).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values().map(|v| v + 2)`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:45:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(key, _)| key).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_keys()`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:46:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(key, _)| key + 2).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_keys().map(|key| key + 2)`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:48:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(_, val)| val).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values()`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:49:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(_, val)| val + 2).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values().map(|val| val + 2)`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:51:13\n+   |\n+LL |     let _ = map.clone().iter().map(|(_, val)| val).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().values()`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:52:13\n+   |\n+LL |     let _ = map.iter().map(|(key, _)| key).filter(|x| *x % 2 == 0).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys()`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:62:13\n+   |\n+LL |     let _ = map.iter().map(|(key, _value)| key * 9).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys().map(|key| key * 9)`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:63:13\n+   |\n+LL |     let _ = map.iter().map(|(_key, value)| value * 17).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values().map(|value| value * 17)`\n+\n+error: aborting due to 22 previous errors\n+"}]}