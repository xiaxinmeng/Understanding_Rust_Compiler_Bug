{"sha": "c4636abe7270a76b0fe85a1b66be3d646607313d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NjM2YWJlNzI3MGE3NmIwZmU4NWExYjY2YmUzZDY0NjYwNzMxM2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-10T00:30:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-10T00:30:36Z"}, "message": "Auto merge of #7315 - DevinR528:disallowed-ty, r=giraffate\n\nAdd disallowed_type lint, this adds a field to the conf struct\n\nFixes #7277\n\nchangelog: Add ``[`disallowed_type`]`` a lint that can enforce banning types specified in the config.", "tree": {"sha": "37d0b357f3b5082c9777bb10424bbaf938047195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37d0b357f3b5082c9777bb10424bbaf938047195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4636abe7270a76b0fe85a1b66be3d646607313d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4636abe7270a76b0fe85a1b66be3d646607313d", "html_url": "https://github.com/rust-lang/rust/commit/c4636abe7270a76b0fe85a1b66be3d646607313d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4636abe7270a76b0fe85a1b66be3d646607313d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2464ee92840f8d081bb2f546020581e73ab789fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2464ee92840f8d081bb2f546020581e73ab789fa", "html_url": "https://github.com/rust-lang/rust/commit/2464ee92840f8d081bb2f546020581e73ab789fa"}, {"sha": "ea45e2a9cf13b59e6366a6cacb7f0088f9cadeda", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea45e2a9cf13b59e6366a6cacb7f0088f9cadeda", "html_url": "https://github.com/rust-lang/rust/commit/ea45e2a9cf13b59e6366a6cacb7f0088f9cadeda"}], "stats": {"total": 264, "additions": 263, "deletions": 1}, "files": [{"sha": "13f0fc8f609d47022578d05e85b9b2634846ff56", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4636abe7270a76b0fe85a1b66be3d646607313d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c4636abe7270a76b0fe85a1b66be3d646607313d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c4636abe7270a76b0fe85a1b66be3d646607313d", "patch": "@@ -2358,6 +2358,7 @@ Released 2018-09-13\n [`derive_hash_xor_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_hash_xor_eq\n [`derive_ord_xor_partial_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_ord_xor_partial_ord\n [`disallowed_method`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_method\n+[`disallowed_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_type\n [`diverging_sub_expression`]: https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression\n [`doc_markdown`]: https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown\n [`double_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_comparisons"}, {"sha": "f8ac7d76d8fb40770ca234644fcb4c2adaf15061", "filename": "clippy_lints/src/disallowed_type.rs", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/c4636abe7270a76b0fe85a1b66be3d646607313d/clippy_lints%2Fsrc%2Fdisallowed_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4636abe7270a76b0fe85a1b66be3d646607313d/clippy_lints%2Fsrc%2Fdisallowed_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_type.rs?ref=c4636abe7270a76b0fe85a1b66be3d646607313d", "patch": "@@ -0,0 +1,122 @@\n+use clippy_utils::diagnostics::span_lint;\n+\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir::{def::Res, Item, ItemKind, PolyTraitRef, TraitBoundModifier, Ty, TyKind, UseKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{Span, Symbol};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Denies the configured types in clippy.toml.\n+    ///\n+    /// **Why is this bad?** Some types are undesirable in certain contexts.\n+    ///\n+    /// **Known problems:** The fully qualified path must be used. This lint\n+    /// doesn't support aliases or reexported names; be aware that many types\n+    /// in `std` are actually reexports.\n+    ///\n+    /// For example, if you want to disallow `BTreeMap`, your clippy.toml\n+    /// configuration would look like\n+    /// `disallowed-methods = [\"alloc::collections::btree::map::BTreeMap\"]` and not\n+    /// `disallowed-methods = [\"std::collections::BTreeMap\"]` as you might expect.\n+    ///\n+    /// N.B. There is no way to ban primitive types.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// An example clippy.toml configuration:\n+    /// ```toml\n+    /// # clippy.toml\n+    /// disallowed-methods = [\"alloc::collections::btree::map::BTreeMap\"]\n+    /// ```\n+    ///\n+    /// ```rust,ignore\n+    /// use std::collections::BTreeMap;\n+    /// // or its use\n+    /// let x = std::collections::BTreeMap::new();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// // A similar type that is allowed by the config\n+    /// use std::collections::HashMap;\n+    /// ```\n+    pub DISALLOWED_TYPE,\n+    nursery,\n+    \"use of a disallowed type\"\n+}\n+#[derive(Clone, Debug)]\n+pub struct DisallowedType {\n+    disallowed: FxHashSet<Vec<Symbol>>,\n+}\n+\n+impl DisallowedType {\n+    pub fn new(disallowed: &FxHashSet<String>) -> Self {\n+        Self {\n+            disallowed: disallowed\n+                .iter()\n+                .map(|s| s.split(\"::\").map(|seg| Symbol::intern(seg)).collect::<Vec<_>>())\n+                .collect(),\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(DisallowedType => [DISALLOWED_TYPE]);\n+\n+impl<'tcx> LateLintPass<'tcx> for DisallowedType {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n+        if_chain! {\n+            if let ItemKind::Use(path, UseKind::Single) = &item.kind;\n+            if let Res::Def(_, id) = path.res;\n+            let use_path = cx.get_def_path(id);\n+            if let Some(name) = self.disallowed.iter().find(|path| **path == use_path);\n+            then {\n+                emit(cx, name, item.span,);\n+            }\n+        }\n+    }\n+\n+    fn check_ty(&mut self, cx: &LateContext<'tcx>, ty: &'tcx Ty<'tcx>) {\n+        if_chain! {\n+            if let TyKind::Path(path) = &ty.kind;\n+            if let Some(did) = cx.qpath_res(path, ty.hir_id).opt_def_id();\n+            let use_path = cx.get_def_path(did);\n+            if let Some(name) = self.disallowed.iter().find(|path| **path == use_path);\n+            then {\n+                emit(cx, name, path.span());\n+            }\n+        }\n+    }\n+\n+    fn check_poly_trait_ref(&mut self, cx: &LateContext<'tcx>, poly: &'tcx PolyTraitRef<'tcx>, _: TraitBoundModifier) {\n+        if_chain! {\n+            if let Res::Def(_, did) = poly.trait_ref.path.res;\n+            let use_path = cx.get_def_path(did);\n+            if let Some(name) = self.disallowed.iter().find(|path| **path == use_path);\n+            then {\n+                emit(cx, name, poly.trait_ref.path.span);\n+            }\n+        }\n+    }\n+\n+    // TODO: if non primitive const generics are a thing\n+    // fn check_generic_arg(&mut self, cx: &LateContext<'tcx>, arg: &'tcx GenericArg<'tcx>) {\n+    //     match arg {\n+    //         GenericArg::Const(c) => {},\n+    //     }\n+    // }\n+    // fn check_generic_param(&mut self, cx: &LateContext<'tcx>, param: &'tcx GenericParam<'tcx>) {\n+    //     match param.kind {\n+    //         GenericParamKind::Const { .. } => {},\n+    //     }\n+    // }\n+}\n+\n+fn emit(cx: &LateContext<'_>, name: &[Symbol], span: Span) {\n+    let name = name.iter().map(|s| s.to_ident_string()).collect::<Vec<_>>().join(\"::\");\n+    span_lint(\n+        cx,\n+        DISALLOWED_TYPE,\n+        span,\n+        &format!(\"`{}` is not allowed according to config\", name),\n+    );\n+}"}, {"sha": "591bf68f927af65657817a276a0e427ca18c8d71", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c4636abe7270a76b0fe85a1b66be3d646607313d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4636abe7270a76b0fe85a1b66be3d646607313d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c4636abe7270a76b0fe85a1b66be3d646607313d", "patch": "@@ -187,6 +187,7 @@ mod default_numeric_fallback;\n mod dereference;\n mod derive;\n mod disallowed_method;\n+mod disallowed_type;\n mod doc;\n mod double_comparison;\n mod double_parens;\n@@ -582,6 +583,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         derive::EXPL_IMPL_CLONE_ON_COPY,\n         derive::UNSAFE_DERIVE_DESERIALIZE,\n         disallowed_method::DISALLOWED_METHOD,\n+        disallowed_type::DISALLOWED_TYPE,\n         doc::DOC_MARKDOWN,\n         doc::MISSING_ERRORS_DOC,\n         doc::MISSING_PANICS_DOC,\n@@ -1760,6 +1762,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n         LintId::of(cognitive_complexity::COGNITIVE_COMPLEXITY),\n         LintId::of(disallowed_method::DISALLOWED_METHOD),\n+        LintId::of(disallowed_type::DISALLOWED_TYPE),\n         LintId::of(fallible_impl_from::FALLIBLE_IMPL_FROM),\n         LintId::of(floating_point_arithmetic::IMPRECISE_FLOPS),\n         LintId::of(floating_point_arithmetic::SUBOPTIMAL_FLOPS),\n@@ -2064,6 +2067,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box if_then_some_else_none::IfThenSomeElseNone::new(msrv));\n     store.register_early_pass(|| box bool_assert_comparison::BoolAssertComparison);\n     store.register_late_pass(|| box unused_async::UnusedAsync);\n+    let disallowed_types = conf.disallowed_types.iter().cloned().collect::<FxHashSet<_>>();\n+    store.register_late_pass(move || box disallowed_type::DisallowedType::new(&disallowed_types));\n \n }\n "}, {"sha": "ad2cb27650ece69e674ba1d48049eb84360977af", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4636abe7270a76b0fe85a1b66be3d646607313d/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4636abe7270a76b0fe85a1b66be3d646607313d/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=c4636abe7270a76b0fe85a1b66be3d646607313d", "patch": "@@ -190,6 +190,8 @@ define_Conf! {\n     (warn_on_all_wildcard_imports: bool = false),\n     /// Lint: DISALLOWED_METHOD. The list of disallowed methods, written as fully qualified paths.\n     (disallowed_methods: Vec<String> = Vec::new()),\n+    /// Lint: DISALLOWED_TYPE. The list of disallowed types, written as fully qualified paths.\n+    (disallowed_types: Vec<String> = Vec::new()),\n     /// Lint: UNREADABLE_LITERAL. Should the fraction of a decimal be linted to include separators.\n     (unreadable_literal_lint_fractions: bool = true),\n     /// Lint: UPPER_CASE_ACRONYMS. Enables verbose mode. Triggers if there is more than one uppercase char next to each other"}, {"sha": "57dfdc584bb3d0bcc71d189190568d30c25c6586", "filename": "tests/ui-toml/toml_disallowed_type/clippy.toml", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c4636abe7270a76b0fe85a1b66be3d646607313d/tests%2Fui-toml%2Ftoml_disallowed_type%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c4636abe7270a76b0fe85a1b66be3d646607313d/tests%2Fui-toml%2Ftoml_disallowed_type%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_type%2Fclippy.toml?ref=c4636abe7270a76b0fe85a1b66be3d646607313d", "patch": "@@ -0,0 +1,9 @@\n+disallowed-types = [\n+    \"std::collections::hash::map::HashMap\",\n+    \"core::sync::atomic::AtomicU32\",\n+    \"syn::ty::TypePath\",\n+    \"proc_macro2::Ident\",\n+    \"std::thread::Thread\",\n+    \"std::time::Instant\",\n+    \"std::io::Read\",\n+]"}, {"sha": "567afb5aec1df83290478d785c28621b15c619fb", "filename": "tests/ui-toml/toml_disallowed_type/conf_disallowed_type.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c4636abe7270a76b0fe85a1b66be3d646607313d/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4636abe7270a76b0fe85a1b66be3d646607313d/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.rs?ref=c4636abe7270a76b0fe85a1b66be3d646607313d", "patch": "@@ -0,0 +1,35 @@\n+#![warn(clippy::disallowed_type)]\n+\n+extern crate quote;\n+extern crate syn;\n+\n+use std::sync as foo;\n+use std::sync::atomic::AtomicU32;\n+use std::time::Instant as Sneaky;\n+\n+struct HashMap;\n+\n+fn bad_return_type() -> fn() -> Sneaky {\n+    todo!()\n+}\n+\n+fn bad_arg_type(_: impl Fn(Sneaky) -> foo::atomic::AtomicU32) {\n+    todo!()\n+}\n+\n+fn trait_obj(_: &dyn std::io::Read) {\n+    todo!()\n+}\n+\n+static BAD: foo::atomic::AtomicPtr<()> = foo::atomic::AtomicPtr::new(std::ptr::null_mut());\n+\n+#[allow(clippy::diverging_sub_expression)]\n+fn main() {\n+    let _: std::collections::HashMap<(), ()> = std::collections::HashMap::new();\n+    let _ = Sneaky::now();\n+    let _ = foo::atomic::AtomicU32::new(0);\n+    static FOO: std::sync::atomic::AtomicU32 = foo::atomic::AtomicU32::new(1);\n+    let _: std::collections::BTreeMap<(), syn::TypePath> = Default::default();\n+    let _ = syn::Ident::new(\"\", todo!());\n+    let _ = HashMap;\n+}"}, {"sha": "e5ea23cc0bcafab7bfa1e68cac40d5caf04bacce", "filename": "tests/ui-toml/toml_disallowed_type/conf_disallowed_type.stderr", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/c4636abe7270a76b0fe85a1b66be3d646607313d/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4636abe7270a76b0fe85a1b66be3d646607313d/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.stderr?ref=c4636abe7270a76b0fe85a1b66be3d646607313d", "patch": "@@ -0,0 +1,88 @@\n+error: `core::sync::atomic::AtomicU32` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:7:1\n+   |\n+LL | use std::sync::atomic::AtomicU32;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::disallowed-type` implied by `-D warnings`\n+\n+error: `std::time::Instant` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:8:1\n+   |\n+LL | use std::time::Instant as Sneaky;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `std::time::Instant` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:12:33\n+   |\n+LL | fn bad_return_type() -> fn() -> Sneaky {\n+   |                                 ^^^^^^\n+\n+error: `std::time::Instant` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:16:28\n+   |\n+LL | fn bad_arg_type(_: impl Fn(Sneaky) -> foo::atomic::AtomicU32) {\n+   |                            ^^^^^^\n+\n+error: `core::sync::atomic::AtomicU32` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:16:39\n+   |\n+LL | fn bad_arg_type(_: impl Fn(Sneaky) -> foo::atomic::AtomicU32) {\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `std::io::Read` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:20:22\n+   |\n+LL | fn trait_obj(_: &dyn std::io::Read) {\n+   |                      ^^^^^^^^^^^^^\n+\n+error: `std::collections::hash::map::HashMap` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:28:48\n+   |\n+LL |     let _: std::collections::HashMap<(), ()> = std::collections::HashMap::new();\n+   |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `std::collections::hash::map::HashMap` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:28:12\n+   |\n+LL |     let _: std::collections::HashMap<(), ()> = std::collections::HashMap::new();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `std::time::Instant` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:29:13\n+   |\n+LL |     let _ = Sneaky::now();\n+   |             ^^^^^^\n+\n+error: `core::sync::atomic::AtomicU32` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:30:13\n+   |\n+LL |     let _ = foo::atomic::AtomicU32::new(0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `core::sync::atomic::AtomicU32` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:31:17\n+   |\n+LL |     static FOO: std::sync::atomic::AtomicU32 = foo::atomic::AtomicU32::new(1);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `core::sync::atomic::AtomicU32` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:31:48\n+   |\n+LL |     static FOO: std::sync::atomic::AtomicU32 = foo::atomic::AtomicU32::new(1);\n+   |                                                ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `syn::ty::TypePath` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:32:43\n+   |\n+LL |     let _: std::collections::BTreeMap<(), syn::TypePath> = Default::default();\n+   |                                           ^^^^^^^^^^^^^\n+\n+error: `proc_macro2::Ident` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:33:13\n+   |\n+LL |     let _ = syn::Ident::new(\"\", todo!());\n+   |             ^^^^^^^^^^\n+\n+error: aborting due to 14 previous errors\n+"}, {"sha": "06d70b66fda869e5c906c6a1c0a94569d3fd75d3", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4636abe7270a76b0fe85a1b66be3d646607313d/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4636abe7270a76b0fe85a1b66be3d646607313d/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=c4636abe7270a76b0fe85a1b66be3d646607313d", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}]}