{"sha": "ed9c0e3030917edb705d40358a7d6bdcc043099b", "node_id": "C_kwDOAAsO6NoAKGVkOWMwZTMwMzA5MTdlZGI3MDVkNDAzNThhN2Q2YmRjYzA0MzA5OWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-28T21:44:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-28T21:44:52Z"}, "message": "Auto merge of #9550 - alex-semenyuk:fix_typo, r=xFrednet\n\nFix typo\n\nchangelog: none", "tree": {"sha": "1790be7773a908ca938227653751b6f73fc2e2fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1790be7773a908ca938227653751b6f73fc2e2fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed9c0e3030917edb705d40358a7d6bdcc043099b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed9c0e3030917edb705d40358a7d6bdcc043099b", "html_url": "https://github.com/rust-lang/rust/commit/ed9c0e3030917edb705d40358a7d6bdcc043099b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed9c0e3030917edb705d40358a7d6bdcc043099b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8845f8214201bf8945de37997394994c5f6f7ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/8845f8214201bf8945de37997394994c5f6f7ace", "html_url": "https://github.com/rust-lang/rust/commit/8845f8214201bf8945de37997394994c5f6f7ace"}, {"sha": "8ba081c59734c48a6f3dea6fdf35767da5652a3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ba081c59734c48a6f3dea6fdf35767da5652a3b", "html_url": "https://github.com/rust-lang/rust/commit/8ba081c59734c48a6f3dea6fdf35767da5652a3b"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "2c1e3b855d52c883e7b1df645617189a9c9a1de3", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ed9c0e3030917edb705d40358a7d6bdcc043099b/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9c0e3030917edb705d40358a7d6bdcc043099b/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=ed9c0e3030917edb705d40358a7d6bdcc043099b", "patch": "@@ -88,7 +88,7 @@ declare_lint_pass!(OptionIfLetElse => [OPTION_IF_LET_ELSE]);\n ///     None/_ => {..}\n /// }\n /// ```\n-struct OptionOccurence {\n+struct OptionOccurrence {\n     option: String,\n     method_sugg: String,\n     some_expr: String,\n@@ -109,13 +109,13 @@ fn format_option_in_sugg(cx: &LateContext<'_>, cond_expr: &Expr<'_>, as_ref: boo\n     )\n }\n \n-fn try_get_option_occurence<'tcx>(\n+fn try_get_option_occurrence<'tcx>(\n     cx: &LateContext<'tcx>,\n     pat: &Pat<'tcx>,\n     expr: &Expr<'_>,\n     if_then: &'tcx Expr<'_>,\n     if_else: &'tcx Expr<'_>,\n-) -> Option<OptionOccurence> {\n+) -> Option<OptionOccurrence> {\n     let cond_expr = match expr.kind {\n         ExprKind::Unary(UnOp::Deref, inner_expr) | ExprKind::AddrOf(_, _, inner_expr) => inner_expr,\n         _ => expr,\n@@ -160,7 +160,7 @@ fn try_get_option_occurence<'tcx>(\n                 }\n             }\n \n-            return Some(OptionOccurence {\n+            return Some(OptionOccurrence {\n                 option: format_option_in_sugg(cx, cond_expr, as_ref, as_mut),\n                 method_sugg: method_sugg.to_string(),\n                 some_expr: format!(\"|{capture_mut}{capture_name}| {}\", Sugg::hir_with_macro_callsite(cx, some_body, \"..\")),\n@@ -182,9 +182,9 @@ fn try_get_inner_pat<'tcx>(cx: &LateContext<'tcx>, pat: &Pat<'tcx>) -> Option<&'\n }\n \n /// If this expression is the option if let/else construct we're detecting, then\n-/// this function returns an `OptionOccurence` struct with details if\n+/// this function returns an `OptionOccurrence` struct with details if\n /// this construct is found, or None if this construct is not found.\n-fn detect_option_if_let_else<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) -> Option<OptionOccurence> {\n+fn detect_option_if_let_else<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) -> Option<OptionOccurrence> {\n     if let Some(higher::IfLet {\n         let_pat,\n         let_expr,\n@@ -193,16 +193,16 @@ fn detect_option_if_let_else<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) ->\n     }) = higher::IfLet::hir(cx, expr)\n     {\n         if !is_else_clause(cx.tcx, expr) {\n-            return try_get_option_occurence(cx, let_pat, let_expr, if_then, if_else);\n+            return try_get_option_occurrence(cx, let_pat, let_expr, if_then, if_else);\n         }\n     }\n     None\n }\n \n-fn detect_option_match<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) -> Option<OptionOccurence> {\n+fn detect_option_match<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) -> Option<OptionOccurrence> {\n     if let ExprKind::Match(ex, arms, MatchSource::Normal) = expr.kind {\n         if let Some((let_pat, if_then, if_else)) = try_convert_match(cx, arms) {\n-            return try_get_option_occurence(cx, let_pat, ex, if_then, if_else);\n+            return try_get_option_occurrence(cx, let_pat, ex, if_then, if_else);\n         }\n     }\n     None"}]}