{"sha": "fb33fad08e8f08c032b443bab0df299ce22fe61b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMzNmYWQwOGU4ZjA4YzAzMmI0NDNiYWIwZGYyOTljZTIyZmU2MWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-28T08:59:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-28T08:59:06Z"}, "message": "Auto merge of #4142 - agnxy:rename-assoc, r=flip1995\n\nRename \"Associated*\" to \"Assoc*\"\n\nThis is to fix the breakage introduced by rust-lang/rust#60163.\n\nchangelog: none", "tree": {"sha": "77e8978ede2b942e6437edaba5ba0bd9398f411d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77e8978ede2b942e6437edaba5ba0bd9398f411d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb33fad08e8f08c032b443bab0df299ce22fe61b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb33fad08e8f08c032b443bab0df299ce22fe61b", "html_url": "https://github.com/rust-lang/rust/commit/fb33fad08e8f08c032b443bab0df299ce22fe61b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb33fad08e8f08c032b443bab0df299ce22fe61b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d57845ffdfe8af3ede8f612168ea30002d0c2fec", "url": "https://api.github.com/repos/rust-lang/rust/commits/d57845ffdfe8af3ede8f612168ea30002d0c2fec", "html_url": "https://github.com/rust-lang/rust/commit/d57845ffdfe8af3ede8f612168ea30002d0c2fec"}, {"sha": "dcf064a4f958aa8749c4021dfaa823a08deb2cec", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf064a4f958aa8749c4021dfaa823a08deb2cec", "html_url": "https://github.com/rust-lang/rust/commit/dcf064a4f958aa8749c4021dfaa823a08deb2cec"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "ef415f453305bfe47d03313a5a4af1ad44fc37ec", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb33fad08e8f08c032b443bab0df299ce22fe61b/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb33fad08e8f08c032b443bab0df299ce22fe61b/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=fb33fad08e8f08c032b443bab0df299ce22fe61b", "patch": "@@ -330,7 +330,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n \n         let res = self.tables.qpath_res(qpath, id);\n         match res {\n-            Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssociatedConst, def_id) => {\n+            Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssocConst, def_id) => {\n                 let substs = self.tables.node_substs(id);\n                 let substs = if self.substs.is_empty() {\n                     substs"}, {"sha": "3dc0765c6373e677273681dcd8d14a6636fa2a71", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fb33fad08e8f08c032b443bab0df299ce22fe61b/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb33fad08e8f08c032b443bab0df299ce22fe61b/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=fb33fad08e8f08c032b443bab0df299ce22fe61b", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item, trait_items: &[TraitItemRef]) {\n     fn is_named_self(cx: &LateContext<'_, '_>, item: &TraitItemRef, name: &str) -> bool {\n         item.ident.name.as_str() == name\n-            && if let AssociatedItemKind::Method { has_self } = item.kind {\n+            && if let AssocItemKind::Method { has_self } = item.kind {\n                 has_self && {\n                     let did = cx.tcx.hir().local_def_id_from_hir_id(item.id.hir_id);\n                     cx.tcx.fn_sig(did).inputs().skip_binder().len() == 1\n@@ -148,7 +148,7 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item, trait_items\n             .iter()\n             .flat_map(|&i| cx.tcx.associated_items(i))\n             .any(|i| {\n-                i.kind == ty::AssociatedKind::Method\n+                i.kind == ty::AssocKind::Method\n                     && i.method_has_self_argument\n                     && i.ident.name == sym!(is_empty)\n                     && cx.tcx.fn_sig(i.def_id).inputs().skip_binder().len() == 1\n@@ -171,7 +171,7 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item, trait_items\n fn check_impl_items(cx: &LateContext<'_, '_>, item: &Item, impl_items: &[ImplItemRef]) {\n     fn is_named_self(cx: &LateContext<'_, '_>, item: &ImplItemRef, name: &str) -> bool {\n         item.ident.name.as_str() == name\n-            && if let AssociatedItemKind::Method { has_self } = item.kind {\n+            && if let AssocItemKind::Method { has_self } = item.kind {\n                 has_self && {\n                     let did = cx.tcx.hir().local_def_id_from_hir_id(item.id.hir_id);\n                     cx.tcx.fn_sig(did).inputs().skip_binder().len() == 1\n@@ -258,9 +258,9 @@ fn check_len(\n \n /// Checks if this type has an `is_empty` method.\n fn has_is_empty(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n-    /// Gets an `AssociatedItem` and return true if it matches `is_empty(self)`.\n-    fn is_is_empty(cx: &LateContext<'_, '_>, item: &ty::AssociatedItem) -> bool {\n-        if let ty::AssociatedKind::Method = item.kind {\n+    /// Gets an `AssocItem` and return true if it matches `is_empty(self)`.\n+    fn is_is_empty(cx: &LateContext<'_, '_>, item: &ty::AssocItem) -> bool {\n+        if let ty::AssocKind::Method = item.kind {\n             if item.ident.name.as_str() == \"is_empty\" {\n                 let sig = cx.tcx.fn_sig(item.def_id);\n                 let ty = sig.skip_binder();"}, {"sha": "747548328264c691423de3c254ea7368878de0de", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb33fad08e8f08c032b443bab0df299ce22fe61b/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb33fad08e8f08c032b443bab0df299ce22fe61b/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=fb33fad08e8f08c032b443bab0df299ce22fe61b", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n         if let hir::ItemKind::Impl(_, _, _, _, None, _, ref items) = item.node {\n             for assoc_item in items {\n-                if let hir::AssociatedItemKind::Method { has_self: false } = assoc_item.kind {\n+                if let hir::AssocItemKind::Method { has_self: false } = assoc_item.kind {\n                     let impl_item = cx.tcx.hir().impl_item(assoc_item.id);\n                     if in_external_macro(cx.sess(), impl_item.span) {\n                         return;"}, {"sha": "2652e5e75d33de8f3ec68437f1f79b65066bb356", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb33fad08e8f08c032b443bab0df299ce22fe61b/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb33fad08e8f08c032b443bab0df299ce22fe61b/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=fb33fad08e8f08c032b443bab0df299ce22fe61b", "patch": "@@ -195,7 +195,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCopyConst {\n \n             // Make sure it is a const item.\n             match cx.tables.qpath_res(qpath, expr.hir_id) {\n-                Res::Def(DefKind::Const, _) | Res::Def(DefKind::AssociatedConst, _) => {},\n+                Res::Def(DefKind::Const, _) | Res::Def(DefKind::AssocConst, _) => {},\n                 _ => return,\n             };\n "}, {"sha": "319f6311e88e01ff30a04d67a9b26a604ac6cd1b", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb33fad08e8f08c032b443bab0df299ce22fe61b/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb33fad08e8f08c032b443bab0df299ce22fe61b/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=fb33fad08e8f08c032b443bab0df299ce22fe61b", "patch": "@@ -130,7 +130,7 @@ impl<'a, 'tcx> TriviallyCopyPassByRef {\n \n     fn check_trait_items(&mut self, cx: &LateContext<'_, '_>, trait_items: &[TraitItemRef]) {\n         for item in trait_items {\n-            if let AssociatedItemKind::Method { .. } = item.kind {\n+            if let AssocItemKind::Method { .. } = item.kind {\n                 self.check_trait_method(cx, item);\n             }\n         }"}, {"sha": "c18922a394c72083df06321055ac4c05cd6add0a", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb33fad08e8f08c032b443bab0df299ce22fe61b/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb33fad08e8f08c032b443bab0df299ce22fe61b/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=fb33fad08e8f08c032b443bab0df299ce22fe61b", "patch": "@@ -119,7 +119,7 @@ fn check_trait_method_impl_decl<'a, 'tcx: 'a>(\n         .tcx\n         .associated_items(impl_trait_ref.def_id)\n         .find(|assoc_item| {\n-            assoc_item.kind == ty::AssociatedKind::Method\n+            assoc_item.kind == ty::AssocKind::Method\n                 && cx\n                     .tcx\n                     .hygienic_eq(impl_item.ident, assoc_item.ident, impl_trait_ref.def_id)"}]}