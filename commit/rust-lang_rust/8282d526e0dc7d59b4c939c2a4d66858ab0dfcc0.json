{"sha": "8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyODJkNTI2ZTBkYzdkNTliNGM5MzljMmE0ZDY2ODU4YWIwZGZjYzA=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-11-01T17:04:13Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-11-04T10:12:41Z"}, "message": "Replace `Scalar::zst` with a `Scalar::ZST` constant", "tree": {"sha": "90c92d0159cc82bc679395ad96682444e9817def", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90c92d0159cc82bc679395ad96682444e9817def"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0", "html_url": "https://github.com/rust-lang/rust/commit/8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8751c1fbb6489916a3fea9378e493710d2765ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8751c1fbb6489916a3fea9378e493710d2765ba", "html_url": "https://github.com/rust-lang/rust/commit/b8751c1fbb6489916a3fea9378e493710d2765ba"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "2a879302d0d3b63f7a6be845bacc5e44ef19c1f9", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0", "patch": "@@ -178,10 +178,7 @@ impl<'tcx, Tag> Scalar<Tag> {\n         Scalar::Int(ScalarInt::null(cx.data_layout().pointer_size))\n     }\n \n-    #[inline]\n-    pub fn zst() -> Self {\n-        Scalar::Int(ScalarInt::ZST)\n-    }\n+    pub const ZST: Self = Scalar::Int(ScalarInt::ZST);\n \n     #[inline(always)]\n     fn ptr_op("}, {"sha": "0af884a286d6ec15897ad5899e0cd6cd7cbf6059", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0", "patch": "@@ -132,7 +132,7 @@ impl<'tcx> Const<'tcx> {\n     #[inline]\n     /// Creates an interned zst constant.\n     pub fn zero_sized(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> &'tcx Self {\n-        Self::from_scalar(tcx, Scalar::zst(), ty)\n+        Self::from_scalar(tcx, Scalar::ZST, ty)\n     }\n \n     #[inline]"}, {"sha": "216451f268f4e049399335642c1f7dfdd17e3318", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0", "patch": "@@ -844,7 +844,7 @@ impl<'tcx> CommonConsts<'tcx> {\n \n         CommonConsts {\n             unit: mk_const(ty::Const {\n-                val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::zst())),\n+                val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),\n                 ty: types.unit,\n             }),\n         }"}, {"sha": "f1631d1b4401f7253b4cc0865f7367154715eb62", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0", "patch": "@@ -146,7 +146,7 @@ pub(super) fn op_to_const<'tcx>(\n                 \"this MPlaceTy must come from a validated constant, thus we can assume the \\\n                 alignment is correct\",\n             );\n-            ConstValue::Scalar(Scalar::zst())\n+            ConstValue::Scalar(Scalar::ZST)\n         }\n     };\n     match immediate {"}, {"sha": "55672a201eeffeaa0f2ab5acc63630132698ecd0", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=8282d526e0dc7d59b4c939c2a4d66858ab0dfcc0", "patch": "@@ -259,7 +259,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 }\n                 return Ok(Some(ImmTy {\n                     // zero-sized type\n-                    imm: Scalar::zst().into(),\n+                    imm: Scalar::ZST.into(),\n                     layout: mplace.layout,\n                 }));\n             }\n@@ -358,7 +358,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         let field_layout = op.layout.field(self, field)?;\n         if field_layout.is_zst() {\n-            let immediate = Scalar::zst().into();\n+            let immediate = Scalar::ZST.into();\n             return Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout });\n         }\n         let offset = op.layout.fields.offset(field);\n@@ -443,7 +443,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let layout = self.layout_of_local(frame, local, layout)?;\n         let op = if layout.is_zst() {\n             // Do not read from ZST, they might not be initialized\n-            Operand::Immediate(Scalar::zst().into())\n+            Operand::Immediate(Scalar::ZST.into())\n         } else {\n             M::access_local(&self, frame, local)?\n         };"}]}