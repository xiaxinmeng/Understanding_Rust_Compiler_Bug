{"sha": "614624a34c7917c76927163ca3d82eef01e1c369", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNDYyNGEzNGM3OTE3Yzc2OTI3MTYzY2EzZDgyZWVmMDFlMWMzNjk=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2012-10-12T02:47:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-21T00:50:46Z"}, "message": "No longer parse old fixed-length vec sytnax", "tree": {"sha": "0755701f6549af9ebbff04d610553e6b899da234", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0755701f6549af9ebbff04d610553e6b899da234"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/614624a34c7917c76927163ca3d82eef01e1c369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/614624a34c7917c76927163ca3d82eef01e1c369", "html_url": "https://github.com/rust-lang/rust/commit/614624a34c7917c76927163ca3d82eef01e1c369", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/614624a34c7917c76927163ca3d82eef01e1c369/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "684d945ab78d6779c198dcb4a340b2269b0fb8aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/684d945ab78d6779c198dcb4a340b2269b0fb8aa", "html_url": "https://github.com/rust-lang/rust/commit/684d945ab78d6779c198dcb4a340b2269b0fb8aa"}], "stats": {"total": 39, "additions": 1, "deletions": 38}, "files": [{"sha": "879df19f11a9b151a045fb536e4e02da72f0ff6d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/614624a34c7917c76927163ca3d82eef01e1c369/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/614624a34c7917c76927163ca3d82eef01e1c369/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=614624a34c7917c76927163ca3d82eef01e1c369", "patch": "@@ -554,12 +554,7 @@ impl Parser {\n \n         let sp = mk_sp(lo, self.last_span.hi);\n         return @{id: self.get_id(),\n-              node: match self.maybe_parse_fixed_vstore() {\n-                // Consider a fixed vstore suffix (/N or /_)\n-                None => t,\n-                Some(v) => {\n-                  ty_fixed_length(@{id: self.get_id(), node:t, span: sp}, v)\n-                } },\n+              node: t,\n               span: sp}\n     }\n \n@@ -691,23 +686,6 @@ impl Parser {\n         }\n     }\n \n-    fn maybe_parse_fixed_vstore() -> Option<Option<uint>> {\n-        if self.token == token::BINOP(token::SLASH) {\n-            self.bump();\n-            match copy self.token {\n-              token::UNDERSCORE => {\n-                self.bump(); Some(None)\n-              }\n-              token::LIT_INT_UNSUFFIXED(i) if i >= 0i64 => {\n-                self.bump(); Some(Some(i as uint))\n-              }\n-              _ => None\n-            }\n-        } else {\n-            None\n-        }\n-    }\n-\n     fn maybe_parse_fixed_vstore_with_star() -> Option<Option<uint>> {\n         if self.eat(token::BINOP(token::STAR)) {\n             match copy self.token {\n@@ -1083,21 +1061,6 @@ impl Parser {\n             ex = expr_lit(@lit);\n         }\n \n-        // Vstore is legal following expr_lit(lit_str(...)) and expr_vec(...)\n-        // only.\n-        match ex {\n-          expr_lit(@{node: lit_str(_), span: _}) |\n-          expr_vec(_, _)  => match self.maybe_parse_fixed_vstore() {\n-            None => (),\n-            Some(v) => {\n-                hi = self.span.hi;\n-                ex = expr_vstore(self.mk_expr(lo, hi, ex),\n-                                 expr_vstore_fixed(v));\n-            }\n-          },\n-          _ => ()\n-        }\n-\n         return self.mk_pexpr(lo, hi, ex);\n     }\n "}]}