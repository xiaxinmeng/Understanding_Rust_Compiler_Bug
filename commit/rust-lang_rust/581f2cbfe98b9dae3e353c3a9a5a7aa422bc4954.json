{"sha": "581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MWYyY2JmZTk4YjlkYWUzZTM1M2MzYTlhNWE3YWE0MjJiYzQ5NTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-02T04:46:35Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-30T08:55:45Z"}, "message": "Adjust tests. wrt. await_macro being removed.", "tree": {"sha": "64202fea7ee23f290ac6e8638073f48616a34bc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64202fea7ee23f290ac6e8638073f48616a34bc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954", "html_url": "https://github.com/rust-lang/rust/commit/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "758931948f3bd1a871133777279fbf5c8cebea8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/758931948f3bd1a871133777279fbf5c8cebea8f", "html_url": "https://github.com/rust-lang/rust/commit/758931948f3bd1a871133777279fbf5c8cebea8f"}], "stats": {"total": 393, "additions": 117, "deletions": 276}, "files": [{"sha": "422a5a6394f8e71fc2948427cee8a3f72b36a3a9", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.rs", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs?ref=581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954", "patch": "@@ -1,4 +1,4 @@\n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n #![allow(non_camel_case_types)]\n #![deny(keyword_idents)]\n \n@@ -29,6 +29,9 @@ macro_rules! await {\n }\n \n fn main() {\n+    await!(); //~ ERROR `await` is a keyword in the 2018 edition\n+    //~^ WARN this was previously accepted by the compiler\n+\n     match await { await => {} } //~ ERROR `await` is a keyword in the 2018 edition\n     //~^ ERROR `await` is a keyword in the 2018 edition\n     //~^^ WARN this was previously accepted by the compiler", "previous_filename": "src/test/ui/async-await/await-keyword/2015-edition-error-in-non-macro-position.rs"}, {"sha": "8af0110169ebd2deaee4a15617e0400a71113cf8", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.stderr", "status": "renamed", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr?ref=581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954", "patch": "@@ -1,19 +1,19 @@\n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:6:13\n+  --> $DIR/2015-edition-error-various-positions.rs:6:13\n    |\n LL |     pub mod await {\n    |             ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n note: lint level defined here\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:3:9\n+  --> $DIR/2015-edition-error-various-positions.rs:3:9\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:8:20\n+  --> $DIR/2015-edition-error-various-positions.rs:8:20\n    |\n LL |         pub struct await;\n    |                    ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -22,7 +22,7 @@ LL |         pub struct await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:12:16\n+  --> $DIR/2015-edition-error-various-positions.rs:12:16\n    |\n LL | use outer_mod::await::await;\n    |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -31,7 +31,7 @@ LL | use outer_mod::await::await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:12:23\n+  --> $DIR/2015-edition-error-various-positions.rs:12:23\n    |\n LL | use outer_mod::await::await;\n    |                       ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -40,7 +40,7 @@ LL | use outer_mod::await::await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:17:14\n+  --> $DIR/2015-edition-error-various-positions.rs:17:14\n    |\n LL | struct Foo { await: () }\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -49,7 +49,7 @@ LL | struct Foo { await: () }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:21:15\n+  --> $DIR/2015-edition-error-various-positions.rs:21:15\n    |\n LL | impl Foo { fn await() {} }\n    |               ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -58,7 +58,7 @@ LL | impl Foo { fn await() {} }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:25:14\n+  --> $DIR/2015-edition-error-various-positions.rs:25:14\n    |\n LL | macro_rules! await {\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -67,7 +67,16 @@ LL | macro_rules! await {\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:32:11\n+  --> $DIR/2015-edition-error-various-positions.rs:32:5\n+   |\n+LL |     await!();\n+   |     ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `await` is a keyword in the 2018 edition\n+  --> $DIR/2015-edition-error-various-positions.rs:35:11\n    |\n LL |     match await { await => {} }\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -76,13 +85,13 @@ LL |     match await { await => {} }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:32:19\n+  --> $DIR/2015-edition-error-various-positions.rs:35:19\n    |\n LL |     match await { await => {} }\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n ", "previous_filename": "src/test/ui/async-await/await-keyword/2015-edition-error-in-non-macro-position.stderr"}, {"sha": "e620c27f9e36de8bafa376753bfa452718103320", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.rs?ref=581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954", "patch": "@@ -9,4 +9,8 @@ mod outer_mod {\n use self::outer_mod::await::await; //~ ERROR expected identifier\n     //~^ ERROR expected identifier, found reserved keyword `await`\n \n-fn main() {}\n+macro_rules! await { () => {}; } //~ ERROR expected identifier, found reserved keyword `await`\n+\n+fn main() {\n+    await!(); //~ ERROR expected expression, found `)`\n+}"}, {"sha": "9304928cfde5d8183bae99410a6dc3f4136e2a87", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr?ref=581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954", "patch": "@@ -38,5 +38,21 @@ help: you can escape reserved keywords to use them as identifiers\n LL | use self::outer_mod::await::r#await;\n    |                             ^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: expected identifier, found reserved keyword `await`\n+  --> $DIR/2018-edition-error.rs:12:14\n+   |\n+LL | macro_rules! await { () => {}; }\n+   |              ^^^^^ expected identifier, found reserved keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL | macro_rules! r#await { () => {}; }\n+   |              ^^^^^^^\n+\n+error: expected expression, found `)`\n+  --> $DIR/2018-edition-error.rs:15:12\n+   |\n+LL |     await!();\n+   |            ^ expected expression\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "25da337c58798c2542af2b2bbb1c2530cdfa7cda", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs?ref=581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954", "patch": "@@ -104,6 +104,31 @@ fn foo25() -> Result<(), ()> {\n     foo()\n }\n \n+async fn foo26() -> Result<(), ()> {\n+    let _ = await!(bar()); //~ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+async fn foo27() -> Result<(), ()> {\n+    let _ = await!(bar())?; //~ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+fn foo28() -> Result<(), ()> {\n+    fn foo() -> Result<(), ()> {\n+        let _ = await!(bar())?; //~ ERROR incorrect use of `await`\n+        //~^ ERROR `await` is only allowed inside `async` functions\n+        Ok(())\n+    }\n+    foo()\n+}\n+fn foo29() -> Result<(), ()> {\n+    let foo = || {\n+        let _ = await!(bar())?; //~ ERROR incorrect use of `await`\n+        //~^ ERROR `await` is only allowed inside `async` functions\n+        Ok(())\n+    };\n+    foo()\n+}\n+\n fn main() {\n     match await { await => () }\n     //~^ ERROR expected expression, found `=>`"}, {"sha": "db86d3d5d03ba8ac79fe7ad24a7badf1edd73741", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954", "patch": "@@ -88,22 +88,46 @@ error: incorrect use of `await`\n LL |     let _ = bar().await()?;\n    |                        ^^ help: `await` is not a method call, remove the parentheses\n \n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:108:13\n+   |\n+LL |     let _ = await!(bar());\n+   |             ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:112:13\n+   |\n+LL |     let _ = await!(bar())?;\n+   |             ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:117:17\n+   |\n+LL |         let _ = await!(bar())?;\n+   |                 ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:125:17\n+   |\n+LL |         let _ = await!(bar())?;\n+   |                 ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n+\n error: expected expression, found `=>`\n-  --> $DIR/incorrect-syntax-suggestions.rs:108:25\n+  --> $DIR/incorrect-syntax-suggestions.rs:133:25\n    |\n LL |     match await { await => () }\n    |                   ----- ^^ expected expression\n    |                   |\n    |                   while parsing this incorrect await expression\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:108:11\n+  --> $DIR/incorrect-syntax-suggestions.rs:133:11\n    |\n LL |     match await { await => () }\n    |           ^^^^^^^^^^^^^^^^^^^^^ help: `await` is a postfix operation: `{ await => () }.await`\n \n error: expected one of `.`, `?`, `{`, or an operator, found `}`\n-  --> $DIR/incorrect-syntax-suggestions.rs:111:1\n+  --> $DIR/incorrect-syntax-suggestions.rs:136:1\n    |\n LL |     match await { await => () }\n    |     -----                      - expected one of `.`, `?`, `{`, or an operator here\n@@ -193,6 +217,22 @@ LL |     let foo = || {\n LL |         let _ = bar().await?;\n    |                 ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n+error[E0728]: `await` is only allowed inside `async` functions and blocks\n+  --> $DIR/incorrect-syntax-suggestions.rs:117:17\n+   |\n+LL |     fn foo() -> Result<(), ()> {\n+   |        --- this is not `async`\n+LL |         let _ = await!(bar())?;\n+   |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+\n+error[E0728]: `await` is only allowed inside `async` functions and blocks\n+  --> $DIR/incorrect-syntax-suggestions.rs:125:17\n+   |\n+LL |     let foo = || {\n+   |               -- this is not `async`\n+LL |         let _ = await!(bar())?;\n+   |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+\n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n   --> $DIR/incorrect-syntax-suggestions.rs:18:19\n    |\n@@ -202,6 +242,6 @@ LL |     let _ = await bar()?;\n    = help: the trait `std::ops::Try` is not implemented for `impl std::future::Future`\n    = note: required by `std::ops::Try::into_result`\n \n-error: aborting due to 29 previous errors\n+error: aborting due to 35 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "0996c38b3b6c61f18efcbefa970c498b3457bf8b", "filename": "src/test/ui/async-await/await-keyword/post_expansion_error.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fpost_expansion_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fpost_expansion_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fpost_expansion_error.stderr?ref=581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954", "patch": "@@ -2,9 +2,7 @@ error: expected expression, found `)`\n   --> $DIR/post_expansion_error.rs:8:12\n    |\n LL |     await!()\n-   |     -----  ^ expected expression\n-   |     |\n-   |     while parsing this await macro call\n+   |            ^ expected expression\n \n error: aborting due to previous error\n "}, {"sha": "b9cd3903513a47492bb528adf9b61f50ee7a4ad3", "filename": "src/test/ui/async-await/await-macro.rs", "status": "removed", "additions": 0, "deletions": 230, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs?ref=758931948f3bd1a871133777279fbf5c8cebea8f", "patch": "@@ -1,230 +0,0 @@\n-// run-pass\n-\n-// edition:2018\n-// aux-build:arc_wake.rs\n-\n-#![feature(async_await, async_closure, await_macro)]\n-\n-extern crate arc_wake;\n-\n-use std::pin::Pin;\n-use std::future::Future;\n-use std::sync::{\n-    Arc,\n-    atomic::{self, AtomicUsize},\n-};\n-use std::task::{Context, Poll};\n-use arc_wake::ArcWake;\n-\n-struct Counter {\n-    wakes: AtomicUsize,\n-}\n-\n-impl ArcWake for Counter {\n-    fn wake(self: Arc<Self>) {\n-        Self::wake_by_ref(&self)\n-    }\n-    fn wake_by_ref(arc_self: &Arc<Self>) {\n-        arc_self.wakes.fetch_add(1, atomic::Ordering::SeqCst);\n-    }\n-}\n-\n-struct WakeOnceThenComplete(bool);\n-\n-fn wake_and_yield_once() -> WakeOnceThenComplete { WakeOnceThenComplete(false) }\n-\n-impl Future for WakeOnceThenComplete {\n-    type Output = ();\n-    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {\n-        if self.0 {\n-            Poll::Ready(())\n-        } else {\n-            cx.waker().wake_by_ref();\n-            self.0 = true;\n-            Poll::Pending\n-        }\n-    }\n-}\n-\n-fn async_block(x: u8) -> impl Future<Output = u8> {\n-    async move {\n-        await!(wake_and_yield_once());\n-        x\n-    }\n-}\n-\n-fn async_block_with_borrow_named_lifetime<'a>(x: &'a u8) -> impl Future<Output = u8> + 'a {\n-    async move {\n-        await!(wake_and_yield_once());\n-        *x\n-    }\n-}\n-\n-fn async_nonmove_block(x: u8) -> impl Future<Output = u8> {\n-    async move {\n-        let future = async {\n-            await!(wake_and_yield_once());\n-            x\n-        };\n-        await!(future)\n-    }\n-}\n-\n-fn async_closure(x: u8) -> impl Future<Output = u8> {\n-    (async move |x: u8| -> u8 {\n-        await!(wake_and_yield_once());\n-        x\n-    })(x)\n-}\n-\n-fn async_closure_in_unsafe_block(x: u8) -> impl Future<Output = u8> {\n-    (unsafe {\n-        async move |x: u8| unsafe_fn(await!(unsafe_async_fn(x)))\n-    })(x)\n-}\n-\n-async fn async_fn(x: u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    x\n-}\n-\n-async fn generic_async_fn<T>(x: T) -> T {\n-    await!(wake_and_yield_once());\n-    x\n-}\n-\n-async fn async_fn_with_borrow(x: &u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    *x\n-}\n-\n-async fn async_fn_with_borrow_named_lifetime<'a>(x: &'a u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    *x\n-}\n-\n-fn async_fn_with_impl_future_named_lifetime<'a>(x: &'a u8) -> impl Future<Output = u8> + 'a {\n-    async move {\n-        await!(wake_and_yield_once());\n-        *x\n-    }\n-}\n-\n-/* FIXME(cramertj) support when `existential type T<'a, 'b>:;` works\n-async fn async_fn_multiple_args(x: &u8, _y: &u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    *x\n-}\n-*/\n-\n-async fn async_fn_multiple_args_named_lifetime<'a>(x: &'a u8, _y: &'a u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    *x\n-}\n-\n-fn async_fn_with_internal_borrow(y: u8) -> impl Future<Output = u8> {\n-    async move {\n-        await!(async_fn_with_borrow_named_lifetime(&y))\n-    }\n-}\n-\n-async unsafe fn unsafe_async_fn(x: u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    x\n-}\n-\n-unsafe fn unsafe_fn(x: u8) -> u8 {\n-    x\n-}\n-\n-fn async_block_in_unsafe_block(x: u8) -> impl Future<Output = u8> {\n-    unsafe {\n-        async move {\n-            unsafe_fn(await!(unsafe_async_fn(x)))\n-        }\n-    }\n-}\n-\n-struct Foo;\n-\n-trait Bar {\n-    fn foo() {}\n-}\n-\n-impl Foo {\n-    async fn async_assoc_item(x: u8) -> u8 {\n-        unsafe {\n-            await!(unsafe_async_fn(x))\n-        }\n-    }\n-\n-    async unsafe fn async_unsafe_assoc_item(x: u8) -> u8 {\n-        await!(unsafe_async_fn(x))\n-    }\n-}\n-\n-fn test_future_yields_once_then_returns<F, Fut>(f: F)\n-where\n-    F: FnOnce(u8) -> Fut,\n-    Fut: Future<Output = u8>,\n-{\n-    let mut fut = Box::pin(f(9));\n-    let counter = Arc::new(Counter { wakes: AtomicUsize::new(0) });\n-    let waker = ArcWake::into_waker(counter.clone());\n-    let mut cx = Context::from_waker(&waker);\n-    assert_eq!(0, counter.wakes.load(atomic::Ordering::SeqCst));\n-    assert_eq!(Poll::Pending, fut.as_mut().poll(&mut cx));\n-    assert_eq!(1, counter.wakes.load(atomic::Ordering::SeqCst));\n-    assert_eq!(Poll::Ready(9), fut.as_mut().poll(&mut cx));\n-}\n-\n-fn main() {\n-    macro_rules! test {\n-        ($($fn_name:expr,)*) => { $(\n-            test_future_yields_once_then_returns($fn_name);\n-        )* }\n-    }\n-\n-    macro_rules! test_with_borrow {\n-        ($($fn_name:expr,)*) => { $(\n-            test_future_yields_once_then_returns(|x| {\n-                async move {\n-                    await!($fn_name(&x))\n-                }\n-            });\n-        )* }\n-    }\n-\n-    test! {\n-        async_block,\n-        async_nonmove_block,\n-        async_closure,\n-        async_closure_in_unsafe_block,\n-        async_fn,\n-        generic_async_fn,\n-        async_fn_with_internal_borrow,\n-        async_block_in_unsafe_block,\n-        Foo::async_assoc_item,\n-        |x| {\n-            async move {\n-                unsafe { await!(unsafe_async_fn(x)) }\n-            }\n-        },\n-        |x| {\n-            async move {\n-                unsafe { await!(Foo::async_unsafe_assoc_item(x)) }\n-            }\n-        },\n-    }\n-    test_with_borrow! {\n-        async_block_with_borrow_named_lifetime,\n-        async_fn_with_borrow,\n-        async_fn_with_borrow_named_lifetime,\n-        async_fn_with_impl_future_named_lifetime,\n-        |x| {\n-            async move {\n-                await!(async_fn_multiple_args_named_lifetime(x, x))\n-            }\n-        },\n-    }\n-}"}, {"sha": "cd479e256b4e55e0215724f197abaf72633e351e", "filename": "src/test/ui/async-await/multiple-lifetimes/named.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs?ref=581f2cbfe98b9dae3e353c3a9a5a7aa422bc4954", "patch": "@@ -3,7 +3,7 @@\n \n // Test that we can use async fns with multiple arbitrary lifetimes.\n \n-#![feature(arbitrary_self_types, async_await, await_macro)]\n+#![feature(async_await)]\n \n async fn multiple_named_lifetimes<'a, 'b>(_: &'a u8, _: &'b u8) {}\n "}, {"sha": "291db9ba41370637b608f5981a73b3d12b2c50cc", "filename": "src/test/ui/feature-gate/await-macro.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.rs?ref=758931948f3bd1a871133777279fbf5c8cebea8f", "patch": "@@ -1,12 +0,0 @@\n-// gate-test-await_macro\n-// edition:2018\n-\n-#![feature(async_await)]\n-\n-async fn bar() {}\n-\n-async fn foo() {\n-    await!(bar()); //~ ERROR `await!(<expr>)` macro syntax is unstable, and will soon be removed\n-}\n-\n-fn main() {}"}, {"sha": "0d4f03e211b52d98b610b07aef2ca83fc01e4ddc", "filename": "src/test/ui/feature-gate/await-macro.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.stderr?ref=758931948f3bd1a871133777279fbf5c8cebea8f", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: `await!(<expr>)` macro syntax is unstable, and will soon be removed in favor of `<expr>.await` syntax.\n-  --> $DIR/await-macro.rs:9:5\n-   |\n-LL |     await!(bar());\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n-   = help: add `#![feature(await_macro)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}]}