{"sha": "22ebb867f747c0832a3065abb333d6533c7f8340", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZWJiODY3Zjc0N2MwODMyYTMwNjVhYmIzMzNkNjUzM2M3ZjgzNDA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-01T23:50:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-01T23:50:06Z"}, "message": "Rollup merge of #81932 - jyn514:rustdoc-logging, r=Mark-Simulacrum\n\nAlways compile rustdoc with debug logging enabled when `download-rustc` is set\n\nPreviously, logging at DEBUG or below would always be silenced, because\nrustc compiles tracing with the `static_max_level_info` feature. That\nmakes sense for release artifacts, but not for developing rustdoc.\n\nInstead, this compiles two different versions of tracing: one in the\nrelease artifacts, distributed in the sysroot, and a new version\ncompiled by rustdoc. Since `rustc_driver` is always linked to the\nversion of sysroot, this copy/pastes `init_env_logging` into rustdoc.\n\nTo avoid compiling an unnecessary version of tracing when\n`download-rustc` isn't set, this adds a new `using-ci-artifacts`\nfeature for rustdoc and passes that feature in bootstrap.\n\nAddresses https://github.com/rust-lang/rust/issues/81930. This builds on https://github.com/rust-lang/rust/pull/79540.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "e064e4753dad73df9faf5ef6f14fefad04b8afe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e064e4753dad73df9faf5ef6f14fefad04b8afe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22ebb867f747c0832a3065abb333d6533c7f8340", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPX2uCRBK7hj4Ov3rIwAAdHIIACsjpIU3+Ho+PkouhVfDe+iN\ngOkd+7k3PPraYgHCEHXuZI9Iy5rpXD5hKgYbE0YcO9S5TniasRzy59Cj4VQixpES\nzaJ5YRJVyWqfzLycLjB+sxdEPKzaN7fNpfpUJaU3Fc7ytewUy2Q0Et2QnI74TT25\nJsYC5iNGtOFdpxDrX3OEh0TBbuYs6OtZVyhoOiqsllKF5+eFom9fD86BB8G9UCw9\n8T+e5iF1NkTGc0VwBMjfM++W8yG+ufL0R9AHmmrtt/b0PtzY6F964vyaf5O5ymZK\nn4KiXT10jSPO/18Mf145TGxVbDDch0pfScX7XzCQ/zvIBerKMdaai6Vfa/szjls=\n=mIqN\n-----END PGP SIGNATURE-----\n", "payload": "tree e064e4753dad73df9faf5ef6f14fefad04b8afe2\nparent 865cf0c3b69540f236f95e0cd0ecf939f4834b6c\nparent 6dc99346413292f85cfe572f3ced29242c36e8e7\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1614642606 +0100\ncommitter GitHub <noreply@github.com> 1614642606 +0100\n\nRollup merge of #81932 - jyn514:rustdoc-logging, r=Mark-Simulacrum\n\nAlways compile rustdoc with debug logging enabled when `download-rustc` is set\n\nPreviously, logging at DEBUG or below would always be silenced, because\nrustc compiles tracing with the `static_max_level_info` feature. That\nmakes sense for release artifacts, but not for developing rustdoc.\n\nInstead, this compiles two different versions of tracing: one in the\nrelease artifacts, distributed in the sysroot, and a new version\ncompiled by rustdoc. Since `rustc_driver` is always linked to the\nversion of sysroot, this copy/pastes `init_env_logging` into rustdoc.\n\nTo avoid compiling an unnecessary version of tracing when\n`download-rustc` isn't set, this adds a new `using-ci-artifacts`\nfeature for rustdoc and passes that feature in bootstrap.\n\nAddresses https://github.com/rust-lang/rust/issues/81930. This builds on https://github.com/rust-lang/rust/pull/79540.\n\nr? `@Mark-Simulacrum`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22ebb867f747c0832a3065abb333d6533c7f8340", "html_url": "https://github.com/rust-lang/rust/commit/22ebb867f747c0832a3065abb333d6533c7f8340", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22ebb867f747c0832a3065abb333d6533c7f8340/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "865cf0c3b69540f236f95e0cd0ecf939f4834b6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/865cf0c3b69540f236f95e0cd0ecf939f4834b6c", "html_url": "https://github.com/rust-lang/rust/commit/865cf0c3b69540f236f95e0cd0ecf939f4834b6c"}, {"sha": "6dc99346413292f85cfe572f3ced29242c36e8e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc99346413292f85cfe572f3ced29242c36e8e7", "html_url": "https://github.com/rust-lang/rust/commit/6dc99346413292f85cfe572f3ced29242c36e8e7"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "2e46d43a790980472ddb49069339aca750e45d44", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22ebb867f747c0832a3065abb333d6533c7f8340/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/22ebb867f747c0832a3065abb333d6533c7f8340/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=22ebb867f747c0832a3065abb333d6533c7f8340", "patch": "@@ -4554,6 +4554,9 @@ dependencies = [\n  \"serde_json\",\n  \"smallvec 1.6.1\",\n  \"tempfile\",\n+ \"tracing\",\n+ \"tracing-subscriber\",\n+ \"tracing-tree\",\n ]\n \n [[package]]"}, {"sha": "44c2c3b17860b29d944b45deb1c1d4528e77b905", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22ebb867f747c0832a3065abb333d6533c7f8340/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/22ebb867f747c0832a3065abb333d6533c7f8340/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=22ebb867f747c0832a3065abb333d6533c7f8340", "patch": "@@ -19,6 +19,13 @@ tempfile = \"3\"\n itertools = \"0.9\"\n regex = \"1\"\n rustdoc-json-types = { path = \"../rustdoc-json-types\" }\n+tracing = \"0.1\"\n+tracing-tree = \"0.1.6\"\n+\n+[dependencies.tracing-subscriber]\n+version = \"0.2.13\"\n+default-features = false\n+features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"]\n \n [dev-dependencies]\n expect-test = \"1.0\""}, {"sha": "8cae9584951a8d1f7c3d21a14de1501197e4b3d6", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/22ebb867f747c0832a3065abb333d6533c7f8340/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22ebb867f747c0832a3065abb333d6533c7f8340/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=22ebb867f747c0832a3065abb333d6533c7f8340", "patch": "@@ -94,14 +94,88 @@ mod visit_lib;\n pub fn main() {\n     rustc_driver::set_sigpipe_handler();\n     rustc_driver::install_ice_hook();\n+\n+    // When using CI artifacts (with `download_stage1 = true`), tracing is unconditionally built\n+    // with `--features=static_max_level_info`, which disables almost all rustdoc logging. To avoid\n+    // this, compile our own version of `tracing` that logs all levels.\n+    // NOTE: this compiles both versions of tracing unconditionally, because\n+    // - The compile time hit is not that bad, especially compared to rustdoc's incremental times, and\n+    // - Otherwise, there's no warning that logging is being ignored when `download_stage1 = true`.\n+    // NOTE: The reason this doesn't show double logging when `download_stage1 = false` and\n+    // `debug_logging = true` is because all rustc logging goes to its version of tracing (the one\n+    // in the sysroot), and all of rustdoc's logging goes to its version (the one in Cargo.toml).\n+    init_logging();\n     rustc_driver::init_env_logger(\"RUSTDOC_LOG\");\n+\n     let exit_code = rustc_driver::catch_with_exit_code(|| match get_args() {\n         Some(args) => main_args(&args),\n         _ => Err(ErrorReported),\n     });\n     process::exit(exit_code);\n }\n \n+fn init_logging() {\n+    use std::io;\n+\n+    // FIXME remove these and use winapi 0.3 instead\n+    // Duplicates: bootstrap/compile.rs, librustc_errors/emitter.rs, rustc_driver/lib.rs\n+    #[cfg(unix)]\n+    fn stdout_isatty() -> bool {\n+        extern crate libc;\n+        unsafe { libc::isatty(libc::STDOUT_FILENO) != 0 }\n+    }\n+\n+    #[cfg(windows)]\n+    fn stdout_isatty() -> bool {\n+        extern crate winapi;\n+        use winapi::um::consoleapi::GetConsoleMode;\n+        use winapi::um::processenv::GetStdHandle;\n+        use winapi::um::winbase::STD_OUTPUT_HANDLE;\n+\n+        unsafe {\n+            let handle = GetStdHandle(STD_OUTPUT_HANDLE);\n+            let mut out = 0;\n+            GetConsoleMode(handle, &mut out) != 0\n+        }\n+    }\n+\n+    let color_logs = match std::env::var(\"RUSTDOC_LOG_COLOR\") {\n+        Ok(value) => match value.as_ref() {\n+            \"always\" => true,\n+            \"never\" => false,\n+            \"auto\" => stdout_isatty(),\n+            _ => early_error(\n+                ErrorOutputType::default(),\n+                &format!(\n+                    \"invalid log color value '{}': expected one of always, never, or auto\",\n+                    value\n+                ),\n+            ),\n+        },\n+        Err(std::env::VarError::NotPresent) => stdout_isatty(),\n+        Err(std::env::VarError::NotUnicode(_value)) => early_error(\n+            ErrorOutputType::default(),\n+            \"non-Unicode log color value: expected one of always, never, or auto\",\n+        ),\n+    };\n+    let filter = tracing_subscriber::EnvFilter::from_env(\"RUSTDOC_LOG\");\n+    let layer = tracing_tree::HierarchicalLayer::default()\n+        .with_writer(io::stderr)\n+        .with_indent_lines(true)\n+        .with_ansi(color_logs)\n+        .with_targets(true)\n+        .with_wraparound(10)\n+        .with_verbose_exit(true)\n+        .with_verbose_entry(true)\n+        .with_indent_amount(2);\n+    #[cfg(parallel_compiler)]\n+    let layer = layer.with_thread_ids(true).with_thread_names(true);\n+\n+    use tracing_subscriber::layer::SubscriberExt;\n+    let subscriber = tracing_subscriber::Registry::default().with(filter).with(layer);\n+    tracing::subscriber::set_global_default(subscriber).unwrap();\n+}\n+\n fn get_args() -> Option<Vec<String>> {\n     env::args_os()\n         .enumerate()"}, {"sha": "ca626afbe53597da12aa95a432baf8ee80e8540f", "filename": "src/test/rustdoc-ui/deprecated-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22ebb867f747c0832a3065abb333d6533c7f8340/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22ebb867f747c0832a3065abb333d6533c7f8340/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.rs?ref=22ebb867f747c0832a3065abb333d6533c7f8340", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![doc(no_default_passes, passes = \"collapse-docs unindent-comments\")]\n+#![doc(no_default_passes, passes = \"unindent-comments\")]\n \n struct SomeStruct;\n "}]}