{"sha": "c1f6f135e1f9ec056e930394a4838aa63fd17b96", "node_id": "C_kwDOAAsO6NoAKGMxZjZmMTM1ZTFmOWVjMDU2ZTkzMDM5NGE0ODM4YWE2M2ZkMTdiOTY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-16T15:32:36Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-16T15:32:36Z"}, "message": "Remove code duplication", "tree": {"sha": "ccf15541a387f08c55fb5bda121e067db58b0fdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccf15541a387f08c55fb5bda121e067db58b0fdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1f6f135e1f9ec056e930394a4838aa63fd17b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f6f135e1f9ec056e930394a4838aa63fd17b96", "html_url": "https://github.com/rust-lang/rust/commit/c1f6f135e1f9ec056e930394a4838aa63fd17b96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1f6f135e1f9ec056e930394a4838aa63fd17b96/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02b401b130fc048a9f863fe0a58655f540947ff6", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b401b130fc048a9f863fe0a58655f540947ff6", "html_url": "https://github.com/rust-lang/rust/commit/02b401b130fc048a9f863fe0a58655f540947ff6"}], "stats": {"total": 99, "additions": 10, "deletions": 89}, "files": [{"sha": "10211cd9710a395c863f48cb4582b2edf11f36ea", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 10, "deletions": 89, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/c1f6f135e1f9ec056e930394a4838aa63fd17b96/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f6f135e1f9ec056e930394a4838aa63fd17b96/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=c1f6f135e1f9ec056e930394a4838aa63fd17b96", "patch": "@@ -177,103 +177,24 @@ fn render_resolution_(\n     let _p = profile::span(\"render_resolution\");\n     use hir::ModuleDef::*;\n \n-    let db = ctx.db();\n-    let ctx = ctx.import_to_add(import_to_add);\n-    let kind = match resolution {\n+    match resolution {\n+        ScopeDef::ModuleDef(Macro(mac)) => {\n+            let ctx = ctx.import_to_add(import_to_add);\n+            return render_macro(ctx, local_name, mac);\n+        }\n         ScopeDef::ModuleDef(Function(func)) => {\n+            let ctx = ctx.import_to_add(import_to_add);\n             return render_fn(ctx, Some(local_name), func);\n         }\n         ScopeDef::ModuleDef(Variant(var)) if ctx.completion.pattern_ctx.is_none() => {\n-            if let Some(item) = render_variant_lit(ctx.clone(), Some(local_name.clone()), var, None)\n-            {\n+            let ctx = ctx.clone().import_to_add(import_to_add.clone());\n+            if let Some(item) = render_variant_lit(ctx, Some(local_name.clone()), var, None) {\n                 return item;\n             }\n-            CompletionItemKind::SymbolKind(SymbolKind::Variant)\n-        }\n-        ScopeDef::ModuleDef(Macro(mac)) => return render_macro(ctx, local_name, mac),\n-        ScopeDef::Unknown => {\n-            let mut item = CompletionItem::new(\n-                CompletionItemKind::UnresolvedReference,\n-                ctx.source_range(),\n-                local_name.to_smol_str(),\n-            );\n-            if let Some(import_to_add) = ctx.import_to_add {\n-                item.add_import(import_to_add);\n-            }\n-            return item.build();\n-        }\n-\n-        ScopeDef::ModuleDef(Variant(_)) => CompletionItemKind::SymbolKind(SymbolKind::Variant),\n-        ScopeDef::ModuleDef(Module(..)) => CompletionItemKind::SymbolKind(SymbolKind::Module),\n-        ScopeDef::ModuleDef(Adt(adt)) => CompletionItemKind::SymbolKind(match adt {\n-            hir::Adt::Struct(_) => SymbolKind::Struct,\n-            hir::Adt::Union(_) => SymbolKind::Union,\n-            hir::Adt::Enum(_) => SymbolKind::Enum,\n-        }),\n-        ScopeDef::ModuleDef(Const(..)) => CompletionItemKind::SymbolKind(SymbolKind::Const),\n-        ScopeDef::ModuleDef(Static(..)) => CompletionItemKind::SymbolKind(SymbolKind::Static),\n-        ScopeDef::ModuleDef(Trait(..)) => CompletionItemKind::SymbolKind(SymbolKind::Trait),\n-        ScopeDef::ModuleDef(TypeAlias(..)) => CompletionItemKind::SymbolKind(SymbolKind::TypeAlias),\n-        ScopeDef::ModuleDef(BuiltinType(..)) => CompletionItemKind::BuiltinType,\n-        ScopeDef::GenericParam(param) => CompletionItemKind::SymbolKind(match param {\n-            hir::GenericParam::TypeParam(_) => SymbolKind::TypeParam,\n-            hir::GenericParam::ConstParam(_) => SymbolKind::ConstParam,\n-            hir::GenericParam::LifetimeParam(_) => SymbolKind::LifetimeParam,\n-        }),\n-        ScopeDef::Local(..) => CompletionItemKind::SymbolKind(SymbolKind::Local),\n-        ScopeDef::Label(..) => CompletionItemKind::SymbolKind(SymbolKind::Label),\n-        ScopeDef::AdtSelfType(..) | ScopeDef::ImplSelfType(..) => {\n-            CompletionItemKind::SymbolKind(SymbolKind::SelfParam)\n-        }\n-    };\n-\n-    let local_name = local_name.to_smol_str();\n-    let mut item = CompletionItem::new(kind, ctx.source_range(), local_name.clone());\n-    if let ScopeDef::Local(local) = resolution {\n-        let ty = local.ty(db);\n-        if !ty.is_unknown() {\n-            item.detail(ty.display(db).to_string());\n-        }\n-\n-        item.set_relevance(CompletionRelevance {\n-            type_match: compute_type_match(ctx.completion, &ty),\n-            exact_name_match: compute_exact_name_match(ctx.completion, &local_name),\n-            is_local: true,\n-            ..CompletionRelevance::default()\n-        });\n-\n-        if let Some(ref_match) = compute_ref_match(ctx.completion, &ty) {\n-            item.ref_match(ref_match);\n-        }\n-    };\n-\n-    // Add `<>` for generic types\n-    let type_path_no_ty_args = matches!(\n-        ctx.completion.path_context,\n-        Some(PathCompletionCtx { kind: Some(PathKind::Type), has_type_args: false, .. })\n-    ) && ctx.completion.config.add_call_parenthesis;\n-    if type_path_no_ty_args {\n-        if let Some(cap) = ctx.snippet_cap() {\n-            let has_non_default_type_params = match resolution {\n-                ScopeDef::ModuleDef(Adt(it)) => it.has_non_default_type_params(db),\n-                ScopeDef::ModuleDef(TypeAlias(it)) => it.has_non_default_type_params(db),\n-                _ => false,\n-            };\n-            if has_non_default_type_params {\n-                cov_mark::hit!(inserts_angle_brackets_for_generics);\n-                item.lookup_by(local_name.clone())\n-                    .label(SmolStr::from_iter([&local_name, \"<\u2026>\"]))\n-                    .insert_snippet(cap, format!(\"{}<$0>\", local_name));\n-            }\n         }\n+        _ => (),\n     }\n-    item.set_documentation(scope_def_docs(db, resolution))\n-        .set_deprecated(scope_def_is_deprecated(&ctx, resolution));\n-\n-    if let Some(import_to_add) = ctx.import_to_add {\n-        item.add_import(import_to_add);\n-    }\n-    item.build()\n+    render_resolution_simple_(ctx, local_name, import_to_add, resolution)\n }\n \n fn render_resolution_simple_("}]}