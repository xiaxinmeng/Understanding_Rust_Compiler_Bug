{"sha": "ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4", "node_id": "C_kwDOAAsO6NoAKGNlNTg1OWUzODc0NWQzZTVlNWZjNDhmNTRmNmE5YjVkMTAxNTBmZjQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-20T11:29:13Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-20T11:29:13Z"}, "message": "Lift out PathKind variant fields into structs", "tree": {"sha": "d8b675bad71d9618d025144f211cdd2f461fe8fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8b675bad71d9618d025144f211cdd2f461fe8fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4", "html_url": "https://github.com/rust-lang/rust/commit/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c69df93df2746d0bd97ec81c48668729568dcb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c69df93df2746d0bd97ec81c48668729568dcb9", "html_url": "https://github.com/rust-lang/rust/commit/5c69df93df2746d0bd97ec81c48668729568dcb9"}], "stats": {"total": 177, "additions": 86, "deletions": 91}, "files": [{"sha": "a82ebbdd918f188397abc6d8752fd49ef8e8671c", "filename": "crates/ide-completion/src/completions/attribute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4", "patch": "@@ -18,7 +18,7 @@ use syntax::{\n \n use crate::{\n     completions::module_or_attr,\n-    context::{CompletionContext, PathCompletionCtx, PathKind, Qualified},\n+    context::{AttrCtx, CompletionContext, PathCompletionCtx, PathKind, Qualified},\n     item::CompletionItem,\n     Completions,\n };\n@@ -76,7 +76,7 @@ pub(crate) fn complete_attribute(\n ) {\n     let (qualified, is_inner, annotated_item_kind) = match path_ctx {\n         &PathCompletionCtx {\n-            kind: PathKind::Attr { kind, annotated_item_kind },\n+            kind: PathKind::Attr { attr_ctx: AttrCtx { kind, annotated_item_kind } },\n             ref qualified,\n             ..\n         } => (qualified, kind == AttrKind::Inner, annotated_item_kind),"}, {"sha": "fea4fbf4d5064fbd52bf2d3bee3c7e0322528c6e", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4", "patch": "@@ -4,7 +4,8 @@ use ide_db::FxHashSet;\n \n use crate::{\n     context::{\n-        CompletionContext, DotAccess, DotAccessKind, PathCompletionCtx, PathKind, Qualified,\n+        CompletionContext, DotAccess, DotAccessKind, ExprCtx, PathCompletionCtx, PathKind,\n+        Qualified,\n     },\n     CompletionItem, CompletionItemKind, Completions,\n };\n@@ -49,7 +50,7 @@ pub(crate) fn complete_undotted_self(\n     let self_param = match path_ctx {\n         PathCompletionCtx {\n             qualified: Qualified::No,\n-            kind: PathKind::Expr { self_param: Some(self_param), .. },\n+            kind: PathKind::Expr { expr_ctx: ExprCtx { self_param: Some(self_param), .. } },\n             ..\n         } if path_ctx.is_trivial_path() && ctx.qualifier_ctx.none() => self_param,\n         _ => return,"}, {"sha": "6bc453a514cc13d119a8d09e470f1dfc423e82d6", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 17, "deletions": 36, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4", "patch": "@@ -4,7 +4,7 @@ use hir::ScopeDef;\n use ide_db::FxHashSet;\n \n use crate::{\n-    context::{PathCompletionCtx, PathKind, Qualified},\n+    context::{ExprCtx, PathCompletionCtx, PathKind, Qualified},\n     CompletionContext, Completions,\n };\n \n@@ -19,47 +19,28 @@ pub(crate) fn complete_expr_path(\n     }\n     let (\n         qualified,\n-        in_block_expr,\n-        in_loop_body,\n-        is_func_update,\n-        after_if_expr,\n-        wants_mut_token,\n-        in_condition,\n-        ty,\n-        incomplete_let,\n-        impl_,\n-    ) = match path_ctx {\n-        &PathCompletionCtx {\n-            kind:\n-                PathKind::Expr {\n-                    in_block_expr,\n-                    in_loop_body,\n-                    after_if_expr,\n-                    in_condition,\n-                    incomplete_let,\n-                    ref ref_expr_parent,\n-                    ref is_func_update,\n-                    ref innermost_ret_ty,\n-                    ref impl_,\n-                    ..\n-                },\n-            ref qualified,\n-            ..\n-        } => (\n-            qualified,\n+        &ExprCtx {\n             in_block_expr,\n             in_loop_body,\n-            is_func_update.is_some(),\n             after_if_expr,\n-            ref_expr_parent.as_ref().map(|it| it.mut_token().is_none()).unwrap_or(false),\n             in_condition,\n-            innermost_ret_ty,\n             incomplete_let,\n-            impl_,\n-        ),\n+            ref ref_expr_parent,\n+            ref is_func_update,\n+            ref innermost_ret_ty,\n+            ref impl_,\n+            ..\n+        },\n+    ) = match path_ctx {\n+        PathCompletionCtx { kind: PathKind::Expr { expr_ctx }, qualified, .. } => {\n+            (qualified, expr_ctx)\n+        }\n         _ => return,\n     };\n \n+    let wants_mut_token =\n+        ref_expr_parent.as_ref().map(|it| it.mut_token().is_none()).unwrap_or(false);\n+\n     let scope_def_applicable = |def| {\n         use hir::{GenericParam::*, ModuleDef::*};\n         match def {\n@@ -230,7 +211,7 @@ pub(crate) fn complete_expr_path(\n                 }\n             });\n \n-            if !is_func_update {\n+            if is_func_update.is_none() {\n                 let mut add_keyword =\n                     |kw, snippet| acc.add_keyword_snippet_expr(ctx, kw, snippet, incomplete_let);\n \n@@ -270,7 +251,7 @@ pub(crate) fn complete_expr_path(\n                     }\n                 }\n \n-                if let Some(ty) = ty {\n+                if let Some(ty) = innermost_ret_ty {\n                     add_keyword(\n                         \"return\",\n                         match (in_block_expr, ty.is_unit()) {"}, {"sha": "8ced01da6795a29a508e09b663d8f16ede543816", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4", "patch": "@@ -2,7 +2,7 @@\n \n use crate::{\n     completions::module_or_fn_macro,\n-    context::{ItemListKind, PathCompletionCtx, PathKind, Qualified},\n+    context::{ExprCtx, ItemListKind, PathCompletionCtx, PathKind, Qualified},\n     CompletionContext, Completions,\n };\n \n@@ -21,9 +21,10 @@ pub(crate) fn complete_item_list(\n             }\n             qualified\n         }\n-        PathCompletionCtx { kind: PathKind::Expr { in_block_expr: true, .. }, .. }\n-            if path_ctx.is_trivial_path() =>\n-        {\n+        PathCompletionCtx {\n+            kind: PathKind::Expr { expr_ctx: ExprCtx { in_block_expr: true, .. } },\n+            ..\n+        } if path_ctx.is_trivial_path() => {\n             add_keywords(acc, ctx, None);\n             return;\n         }"}, {"sha": "18115241067fc35ee0e2c46e40b799395eb39fb1", "filename": "crates/ide-completion/src/completions/record.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4", "patch": "@@ -6,7 +6,7 @@ use syntax::{\n };\n \n use crate::{\n-    context::{PathCompletionCtx, PathKind, PatternContext, Qualified},\n+    context::{ExprCtx, PathCompletionCtx, PathKind, PatternContext, Qualified},\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionRelevance,\n     CompletionRelevancePostfixMatch, Completions,\n };\n@@ -87,7 +87,7 @@ pub(crate) fn complete_record_expr_func_update(\n     path_ctx: &PathCompletionCtx,\n ) {\n     if let PathCompletionCtx {\n-        kind: PathKind::Expr { is_func_update: Some(record_expr), .. },\n+        kind: PathKind::Expr { expr_ctx: ExprCtx { is_func_update: Some(record_expr), .. } },\n         qualified: Qualified::No,\n         ..\n     } = path_ctx"}, {"sha": "af315616fad24e1587fce74357b6e6f813f20604", "filename": "crates/ide-completion/src/completions/snippet.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4", "patch": "@@ -4,7 +4,7 @@ use hir::Documentation;\n use ide_db::{imports::insert_use::ImportScope, SnippetCap};\n \n use crate::{\n-    context::{ItemListKind, PathCompletionCtx, PathKind, Qualified},\n+    context::{ExprCtx, ItemListKind, PathCompletionCtx, PathKind, Qualified},\n     item::Builder,\n     CompletionContext, CompletionItem, CompletionItemKind, Completions, SnippetScope,\n };\n@@ -23,7 +23,7 @@ pub(crate) fn complete_expr_snippet(\n     let &can_be_stmt = match path_ctx {\n         PathCompletionCtx {\n             qualified: Qualified::No,\n-            kind: PathKind::Expr { in_block_expr, .. },\n+            kind: PathKind::Expr { expr_ctx: ExprCtx { in_block_expr, .. } },\n             ..\n         } => in_block_expr,\n         _ => return,\n@@ -52,7 +52,9 @@ pub(crate) fn complete_item_snippet(\n     let path_kind = match path_ctx {\n         PathCompletionCtx {\n             qualified: Qualified::No,\n-            kind: kind @ (PathKind::Item { .. } | PathKind::Expr { in_block_expr: true, .. }),\n+            kind:\n+                kind @ (PathKind::Item { .. }\n+                | PathKind::Expr { expr_ctx: ExprCtx { in_block_expr: true, .. }, .. }),\n             ..\n         } => kind,\n         _ => return,"}, {"sha": "c212b5b9b9d459c0acd3664ad99e6da13658f3ea", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4", "patch": "@@ -88,24 +88,13 @@ impl PathCompletionCtx {\n #[derive(Debug, PartialEq, Eq)]\n pub(super) enum PathKind {\n     Expr {\n-        in_block_expr: bool,\n-        in_loop_body: bool,\n-        after_if_expr: bool,\n-        /// Whether this expression is the direct condition of an if or while expression\n-        in_condition: bool,\n-        incomplete_let: bool,\n-        ref_expr_parent: Option<ast::RefExpr>,\n-        is_func_update: Option<ast::RecordExpr>,\n-        self_param: Option<hir::SelfParam>,\n-        innermost_ret_ty: Option<hir::Type>,\n-        impl_: Option<ast::Impl>,\n+        expr_ctx: ExprCtx,\n     },\n     Type {\n         location: TypeLocation,\n     },\n     Attr {\n-        kind: AttrKind,\n-        annotated_item_kind: Option<SyntaxKind>,\n+        attr_ctx: AttrCtx,\n     },\n     Derive {\n         existing_derives: FxHashSet<hir::Macro>,\n@@ -122,6 +111,26 @@ pub(super) enum PathKind {\n     },\n     Use,\n }\n+#[derive(Debug, PartialEq, Eq)]\n+pub(crate) struct AttrCtx {\n+    pub(crate) kind: AttrKind,\n+    pub(crate) annotated_item_kind: Option<SyntaxKind>,\n+}\n+\n+#[derive(Debug, PartialEq, Eq)]\n+pub(crate) struct ExprCtx {\n+    pub(crate) in_block_expr: bool,\n+    pub(crate) in_loop_body: bool,\n+    pub(crate) after_if_expr: bool,\n+    /// Whether this expression is the direct condition of an if or while expression\n+    pub(crate) in_condition: bool,\n+    pub(crate) incomplete_let: bool,\n+    pub(crate) ref_expr_parent: Option<ast::RefExpr>,\n+    pub(crate) is_func_update: Option<ast::RecordExpr>,\n+    pub(crate) self_param: Option<hir::SelfParam>,\n+    pub(crate) innermost_ret_ty: Option<hir::Type>,\n+    pub(crate) impl_: Option<ast::Impl>,\n+}\n \n /// Original file ast nodes\n #[derive(Clone, Debug, PartialEq, Eq)]"}, {"sha": "551fa7fb865f1fc2bfa4d9f2fde9f54f98c7c837", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4", "patch": "@@ -11,10 +11,10 @@ use syntax::{\n };\n \n use crate::context::{\n-    CompletionContext, DotAccess, DotAccessKind, IdentContext, ItemListKind, LifetimeContext,\n-    LifetimeKind, NameContext, NameKind, NameRefContext, NameRefKind, ParamKind, PathCompletionCtx,\n-    PathKind, PatternContext, PatternRefutability, Qualified, QualifierCtx, TypeAscriptionTarget,\n-    TypeLocation, COMPLETION_MARKER,\n+    AttrCtx, CompletionContext, DotAccess, DotAccessKind, ExprCtx, IdentContext, ItemListKind,\n+    LifetimeContext, LifetimeKind, NameContext, NameKind, NameRefContext, NameRefKind, ParamKind,\n+    PathCompletionCtx, PathKind, PatternContext, PatternRefutability, Qualified, QualifierCtx,\n+    TypeAscriptionTarget, TypeLocation, COMPLETION_MARKER,\n };\n \n impl<'a> CompletionContext<'a> {\n@@ -765,16 +765,18 @@ impl<'a> CompletionContext<'a> {\n             let impl_ = fetch_immediate_impl(sema, original_file, expr.syntax());\n \n             PathKind::Expr {\n-                in_block_expr,\n-                in_loop_body,\n-                after_if_expr,\n-                in_condition,\n-                ref_expr_parent,\n-                is_func_update,\n-                innermost_ret_ty,\n-                self_param,\n-                incomplete_let,\n-                impl_,\n+                expr_ctx: ExprCtx {\n+                    in_block_expr,\n+                    in_loop_body,\n+                    after_if_expr,\n+                    in_condition,\n+                    ref_expr_parent,\n+                    is_func_update,\n+                    innermost_ret_ty,\n+                    self_param,\n+                    incomplete_let,\n+                    impl_,\n+                },\n             }\n         };\n         let make_path_kind_type = |ty: ast::Type| {\n@@ -858,8 +860,10 @@ impl<'a> CompletionContext<'a> {\n                             Some(attached.kind())\n                         };\n                         PathKind::Attr {\n-                            kind,\n-                            annotated_item_kind,\n+                            attr_ctx: AttrCtx {\n+                                kind,\n+                                annotated_item_kind,\n+                            }\n                         }\n                     },\n                     ast::Visibility(it) => PathKind::Vis { has_in_token: it.in_token().is_some() },\n@@ -914,7 +918,7 @@ impl<'a> CompletionContext<'a> {\n         if path_ctx.is_trivial_path() {\n             // fetch the full expression that may have qualifiers attached to it\n             let top_node = match path_ctx.kind {\n-                PathKind::Expr { in_block_expr: true, .. } => {\n+                PathKind::Expr { expr_ctx: ExprCtx { in_block_expr: true, .. } } => {\n                     parent.ancestors().find(|it| ast::PathExpr::can_cast(it.kind())).and_then(|p| {\n                         let parent = p.parent()?;\n                         if ast::StmtList::can_cast(parent.kind()) {"}, {"sha": "5a3ddeea25e8a0ddcdccd2c9adbed6939861cffe", "filename": "crates/ide-completion/src/lib.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4/crates%2Fide-completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Flib.rs?ref=ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4", "patch": "@@ -165,6 +165,13 @@ pub fn completions(\n     {\n         let acc = &mut completions;\n \n+        let mut complete_patterns = |pattern_ctx| {\n+            completions::flyimport::import_on_the_fly_pat(acc, ctx, pattern_ctx);\n+            completions::fn_param::complete_fn_param(acc, ctx, pattern_ctx);\n+            completions::pattern::complete_pattern(acc, ctx, pattern_ctx);\n+            completions::record::complete_record_pattern_fields(acc, ctx, pattern_ctx);\n+        };\n+\n         match &ctx.ident_ctx {\n             IdentContext::Name(NameContext { name, kind }) => match kind {\n                 NameKind::Const => {\n@@ -173,12 +180,7 @@ pub fn completions(\n                 NameKind::Function => {\n                     completions::item_list::trait_impl::complete_trait_impl_fn(acc, ctx, name);\n                 }\n-                NameKind::IdentPat(pattern_ctx) => {\n-                    completions::flyimport::import_on_the_fly_pat(acc, ctx, pattern_ctx);\n-                    completions::fn_param::complete_fn_param(acc, ctx, pattern_ctx);\n-                    completions::pattern::complete_pattern(acc, ctx, pattern_ctx);\n-                    completions::record::complete_record_pattern_fields(acc, ctx, pattern_ctx);\n-                }\n+                NameKind::IdentPat(pattern_ctx) => complete_patterns(pattern_ctx),\n                 NameKind::Module(mod_under_caret) => {\n                     completions::mod_::complete_mod(acc, ctx, mod_under_caret);\n                 }\n@@ -239,12 +241,7 @@ pub fn completions(\n                         record_expr,\n                     );\n                 }\n-                NameRefKind::Pattern(pattern_ctx) => {\n-                    completions::flyimport::import_on_the_fly_pat(acc, ctx, pattern_ctx);\n-                    completions::fn_param::complete_fn_param(acc, ctx, pattern_ctx);\n-                    completions::pattern::complete_pattern(acc, ctx, pattern_ctx);\n-                    completions::record::complete_record_pattern_fields(acc, ctx, pattern_ctx);\n-                }\n+                NameRefKind::Pattern(pattern_ctx) => complete_patterns(pattern_ctx),\n             },\n             IdentContext::Lifetime(lifetime_ctx) => {\n                 completions::lifetime::complete_label(acc, ctx, lifetime_ctx);"}]}