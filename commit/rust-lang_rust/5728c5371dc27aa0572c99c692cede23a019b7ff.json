{"sha": "5728c5371dc27aa0572c99c692cede23a019b7ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MjhjNTM3MWRjMjdhYTA1NzJjOTljNjkyY2VkZTIzYTAxOWI3ZmY=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-05-20T17:35:58Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-05-21T16:07:47Z"}, "message": "Use `HirId` as key for `ResolverOutputs::trait_map` instead of `NodeId`", "tree": {"sha": "12c2d8d6bb053531f88b23a1b5a0d2d00256e7dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12c2d8d6bb053531f88b23a1b5a0d2d00256e7dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5728c5371dc27aa0572c99c692cede23a019b7ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5728c5371dc27aa0572c99c692cede23a019b7ff", "html_url": "https://github.com/rust-lang/rust/commit/5728c5371dc27aa0572c99c692cede23a019b7ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5728c5371dc27aa0572c99c692cede23a019b7ff/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06c9fef822b890054fcefa9a567b57eb6edfe638", "url": "https://api.github.com/repos/rust-lang/rust/commits/06c9fef822b890054fcefa9a567b57eb6edfe638", "html_url": "https://github.com/rust-lang/rust/commit/06c9fef822b890054fcefa9a567b57eb6edfe638"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "c7a0822d27dd62c91e9af85fbeaaf19426a96cca", "filename": "src/librustc_hir/definitions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5728c5371dc27aa0572c99c692cede23a019b7ff/src%2Flibrustc_hir%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728c5371dc27aa0572c99c692cede23a019b7ff/src%2Flibrustc_hir%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdefinitions.rs?ref=5728c5371dc27aa0572c99c692cede23a019b7ff", "patch": "@@ -327,7 +327,9 @@ impl Definitions {\n \n     #[inline]\n     pub fn local_def_id(&self, node: ast::NodeId) -> LocalDefId {\n-        self.opt_local_def_id(node).unwrap()\n+        self.opt_local_def_id(node).unwrap_or_else(|| {\n+            panic!(\"no entry for node id: `{:?}` / `{:?}`\", node, self.opt_node_id_to_hir_id(node))\n+        })\n     }\n \n     #[inline]"}, {"sha": "a09d1c16986bdef49b233531c7580d8abfb0b269", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5728c5371dc27aa0572c99c692cede23a019b7ff/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728c5371dc27aa0572c99c692cede23a019b7ff/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=5728c5371dc27aa0572c99c692cede23a019b7ff", "patch": "@@ -1113,8 +1113,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         };\n \n         let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n-        for (k, v) in resolutions.trait_map {\n-            let hir_id = definitions.node_id_to_hir_id(k);\n+        for (hir_id, v) in resolutions.trait_map.into_iter() {\n             let map = trait_map.entry(hir_id.owner).or_default();\n             let v = v\n                 .into_iter()"}, {"sha": "4b9f77b4b4b57f052cba98163f8084cd86fcfea9", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5728c5371dc27aa0572c99c692cede23a019b7ff/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728c5371dc27aa0572c99c692cede23a019b7ff/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=5728c5371dc27aa0572c99c692cede23a019b7ff", "patch": "@@ -31,7 +31,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::lang_items::{FnMutTraitLangItem, FnOnceTraitLangItem, FnTraitLangItem};\n-use rustc_hir::{Constness, GlobMap, Node, TraitMap};\n+use rustc_hir::{Constness, GlobMap, Node};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Encodable, Encoder};\n@@ -121,7 +121,7 @@ pub struct ResolverOutputs {\n     pub definitions: rustc_hir::definitions::Definitions,\n     pub cstore: Box<CrateStoreDyn>,\n     pub extern_crate_map: NodeMap<CrateNum>,\n-    pub trait_map: TraitMap<NodeId>,\n+    pub trait_map: FxHashMap<hir::HirId, Vec<hir::TraitCandidate<NodeId>>>,\n     pub maybe_unused_trait_imports: NodeSet,\n     pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n     pub export_map: ExportMap<NodeId>,"}, {"sha": "625ca5dec50835148dc91478c4114e1d2776298e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5728c5371dc27aa0572c99c692cede23a019b7ff/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728c5371dc27aa0572c99c692cede23a019b7ff/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5728c5371dc27aa0572c99c692cede23a019b7ff", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! This crate is responsible for the part of name resolution that doesn't require type checker.\n //!\n //! Module structure of the crate is built here.\n@@ -1271,12 +1273,19 @@ impl<'a> Resolver<'a> {\n     }\n \n     pub fn into_outputs(self) -> ResolverOutputs {\n+        let trait_map = {\n+            let mut map = FxHashMap::default();\n+            for (k, v) in self.trait_map.into_iter() {\n+                map.insert(self.definitions.node_id_to_hir_id(k), v);\n+            }\n+            map\n+        };\n         ResolverOutputs {\n             definitions: self.definitions,\n             cstore: Box::new(self.crate_loader.into_cstore()),\n             extern_crate_map: self.extern_crate_map,\n             export_map: self.export_map,\n-            trait_map: self.trait_map,\n+            trait_map,\n             glob_map: self.glob_map,\n             maybe_unused_trait_imports: self.maybe_unused_trait_imports,\n             maybe_unused_extern_crates: self.maybe_unused_extern_crates,\n@@ -1294,7 +1303,13 @@ impl<'a> Resolver<'a> {\n             cstore: Box::new(self.cstore().clone()),\n             extern_crate_map: self.extern_crate_map.clone(),\n             export_map: self.export_map.clone(),\n-            trait_map: self.trait_map.clone(),\n+            trait_map: {\n+                let mut map = FxHashMap::default();\n+                for (k, v) in self.trait_map.iter() {\n+                    map.insert(self.definitions.node_id_to_hir_id(k.clone()), v.clone());\n+                }\n+                map\n+            },\n             glob_map: self.glob_map.clone(),\n             maybe_unused_trait_imports: self.maybe_unused_trait_imports.clone(),\n             maybe_unused_extern_crates: self.maybe_unused_extern_crates.clone(),"}]}