{"sha": "a69fc239257bff1cda54bc2070cb197d477bb563", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2OWZjMjM5MjU3YmZmMWNkYTU0YmMyMDcwY2IxOTdkNDc3YmI1NjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-25T14:56:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-25T14:56:52Z"}, "message": "Merge #3718\n\n3718: Fix couple of assists r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "6a6f16e8d540bfc42edf636e02c489f6d97fd488", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a6f16e8d540bfc42edf636e02c489f6d97fd488"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a69fc239257bff1cda54bc2070cb197d477bb563", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJee3E0CRBK7hj4Ov3rIwAAdHIIAH+FRTGcz+HhmJ5xu8G0WBmJ\n9+ZX7lMeN4MiIvcbOFVem6wHjc6pBMtLl518QzgYQrV/XyAqEFxf8ehij8Pvrwgh\n1ClmPVd/WqqdaPnCY+m2Wprefa9CITmmdQp5BFA8tlRVCGS9OMeZqBjzQIjB06yX\nbQqdlPtVzu9OaI/n7hmrUHHQrZ/vWiN1FtW8tbtnGT08DQOddynYUlSY4gE7kKw8\nT9KlevnCUJV34rlh9QHT4FpsmbLKTEOmr95hx0V+crDRb7KDVwIyq7uHgu1voOII\nyyewFa4t/KAo/X+woL+7cZ/ar2lB0DYHaVpqpJbofZRBqLdFWtM7ScmSvOnvkfU=\n=Wvzk\n-----END PGP SIGNATURE-----\n", "payload": "tree 6a6f16e8d540bfc42edf636e02c489f6d97fd488\nparent 785eb32f49653fbc5789396af4fa6ad61f89fb38\nparent 72c6fc3ff0dff472c93468d97b96230f64aefe69\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585148212 +0000\ncommitter GitHub <noreply@github.com> 1585148212 +0000\n\nMerge #3718\n\n3718: Fix couple of assists r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a69fc239257bff1cda54bc2070cb197d477bb563", "html_url": "https://github.com/rust-lang/rust/commit/a69fc239257bff1cda54bc2070cb197d477bb563", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a69fc239257bff1cda54bc2070cb197d477bb563/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "785eb32f49653fbc5789396af4fa6ad61f89fb38", "url": "https://api.github.com/repos/rust-lang/rust/commits/785eb32f49653fbc5789396af4fa6ad61f89fb38", "html_url": "https://github.com/rust-lang/rust/commit/785eb32f49653fbc5789396af4fa6ad61f89fb38"}, {"sha": "72c6fc3ff0dff472c93468d97b96230f64aefe69", "url": "https://api.github.com/repos/rust-lang/rust/commits/72c6fc3ff0dff472c93468d97b96230f64aefe69", "html_url": "https://github.com/rust-lang/rust/commit/72c6fc3ff0dff472c93468d97b96230f64aefe69"}], "stats": {"total": 85, "additions": 55, "deletions": 30}, "files": [{"sha": "cd6d1ee6c3cbe8f019264793ead1588f1f625db8", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a69fc239257bff1cda54bc2070cb197d477bb563/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69fc239257bff1cda54bc2070cb197d477bb563/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=a69fc239257bff1cda54bc2070cb197d477bb563", "patch": "@@ -2,13 +2,14 @@ use ra_syntax::{\n     ast::{self, NameOwner, VisibilityOwner},\n     AstNode,\n     SyntaxKind::{\n-        ATTR, COMMENT, CONST_DEF, ENUM_DEF, FN_DEF, IDENT, MODULE, STRUCT_DEF, TRAIT_DEF,\n-        VISIBILITY, WHITESPACE,\n+        ATTR, COMMENT, CONST_DEF, ENUM_DEF, FN_DEF, MODULE, STRUCT_DEF, TRAIT_DEF, VISIBILITY,\n+        WHITESPACE,\n     },\n     SyntaxNode, TextUnit, T,\n };\n \n use crate::{Assist, AssistCtx, AssistId};\n+use test_utils::tested_by;\n \n // Assist: change_visibility\n //\n@@ -47,13 +48,16 @@ fn add_vis(ctx: AssistCtx) -> Option<Assist> {\n         }\n         (vis_offset(&parent), keyword.text_range())\n     } else {\n-        let ident = ctx.token_at_offset().find(|leaf| leaf.kind() == IDENT)?;\n-        let field = ident.parent().ancestors().find_map(ast::RecordFieldDef::cast)?;\n-        if field.name()?.syntax().text_range() != ident.text_range() && field.visibility().is_some()\n-        {\n+        let field_name: ast::Name = ctx.find_node_at_offset()?;\n+        let field = field_name.syntax().ancestors().find_map(ast::RecordFieldDef::cast)?;\n+        if field.name()? != field_name {\n+            tested_by!(change_visibility_field_false_positive);\n             return None;\n         }\n-        (vis_offset(field.syntax()), ident.text_range())\n+        if field.visibility().is_some() {\n+            return None;\n+        }\n+        (vis_offset(field.syntax()), field_name.syntax().text_range())\n     };\n \n     ctx.add_assist(AssistId(\"change_visibility\"), \"Change visibility to pub(crate)\", |edit| {\n@@ -98,8 +102,11 @@ fn change_vis(ctx: AssistCtx, vis: ast::Visibility) -> Option<Assist> {\n \n #[cfg(test)]\n mod tests {\n+    use test_utils::covers;\n+\n+    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+\n     use super::*;\n-    use crate::helpers::{check_assist, check_assist_target};\n \n     #[test]\n     fn change_visibility_adds_pub_crate_to_items() {\n@@ -120,8 +127,17 @@ mod tests {\n     fn change_visibility_works_with_struct_fields() {\n         check_assist(\n             change_visibility,\n-            \"struct S { <|>field: u32 }\",\n-            \"struct S { <|>pub(crate) field: u32 }\",\n+            r\"struct S { <|>field: u32 }\",\n+            r\"struct S { <|>pub(crate) field: u32 }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn change_visibility_field_false_positive() {\n+        covers!(change_visibility_field_false_positive);\n+        check_assist_not_applicable(\n+            change_visibility,\n+            r\"struct S { field: [(); { let <|>x = ();}] }\",\n         )\n     }\n \n@@ -144,15 +160,15 @@ mod tests {\n     fn change_visibility_handles_comment_attrs() {\n         check_assist(\n             change_visibility,\n-            \"\n+            r\"\n             /// docs\n \n             // comments\n \n             #[derive(Debug)]\n             <|>struct Foo;\n             \",\n-            \"\n+            r\"\n             /// docs\n \n             // comments"}, {"sha": "6c2a2b8b6ea66f6a7cdfd0a937dbda0f387633fd", "filename": "crates/ra_assists/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a69fc239257bff1cda54bc2070cb197d477bb563/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69fc239257bff1cda54bc2070cb197d477bb563/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmarks.rs?ref=a69fc239257bff1cda54bc2070cb197d477bb563", "patch": "@@ -7,4 +7,5 @@ test_utils::marks![\n     not_applicable_outside_of_bind_pat\n     test_not_inline_mut_variable\n     test_not_applicable_if_variable_unused\n+    change_visibility_field_false_positive\n ];"}, {"sha": "1033d6de94bd005f86e64a7a29d5ed18a3812ae9", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a69fc239257bff1cda54bc2070cb197d477bb563/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69fc239257bff1cda54bc2070cb197d477bb563/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=a69fc239257bff1cda54bc2070cb197d477bb563", "patch": "@@ -734,19 +734,29 @@ pub fn handle_code_action(\n         res.push(fix.action.clone());\n     }\n \n-    let mut grouped_assists: FxHashMap<String, Vec<Assist>> = FxHashMap::default();\n+    let mut grouped_assists: FxHashMap<String, (usize, Vec<Assist>)> = FxHashMap::default();\n     for assist in world.analysis().assists(FileRange { file_id, range })?.into_iter() {\n         match &assist.group_label {\n-            Some(label) => grouped_assists.entry(label.to_owned()).or_default().push(assist),\n-            None => res.push(create_single_code_action(assist, &world)?.into()),\n+            Some(label) => grouped_assists\n+                .entry(label.to_owned())\n+                .or_insert_with(|| {\n+                    let idx = res.len();\n+                    let dummy = Command::new(String::new(), String::new(), None);\n+                    res.push(dummy.into());\n+                    (idx, Vec::new())\n+                })\n+                .1\n+                .push(assist),\n+            None => {\n+                res.push(create_single_code_action(assist, &world)?.into());\n+            }\n         }\n     }\n \n-    for (group_label, assists) in grouped_assists {\n+    for (group_label, (idx, assists)) in grouped_assists {\n         if assists.len() == 1 {\n-            res.push(\n-                create_single_code_action(assists.into_iter().next().unwrap(), &world)?.into(),\n-            );\n+            res[idx] =\n+                create_single_code_action(assists.into_iter().next().unwrap(), &world)?.into();\n         } else {\n             let title = group_label;\n \n@@ -760,17 +770,15 @@ pub fn handle_code_action(\n                 command: \"rust-analyzer.selectAndApplySourceChange\".to_string(),\n                 arguments: Some(vec![serde_json::Value::Array(arguments)]),\n             });\n-            res.push(\n-                CodeAction {\n-                    title,\n-                    kind: None,\n-                    diagnostics: None,\n-                    edit: None,\n-                    command,\n-                    is_preferred: None,\n-                }\n-                .into(),\n-            );\n+            res[idx] = CodeAction {\n+                title,\n+                kind: None,\n+                diagnostics: None,\n+                edit: None,\n+                command,\n+                is_preferred: None,\n+            }\n+            .into();\n         }\n     }\n "}]}