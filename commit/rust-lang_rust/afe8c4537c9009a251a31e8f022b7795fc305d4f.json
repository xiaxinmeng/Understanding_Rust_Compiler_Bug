{"sha": "afe8c4537c9009a251a31e8f022b7795fc305d4f", "node_id": "C_kwDOAAsO6NoAKGFmZThjNDUzN2M5MDA5YTI1MWEzMWU4ZjAyMmI3Nzk1ZmMzMDVkNGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-06T15:20:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-06T15:20:58Z"}, "message": "Auto merge of #106474 - erikdesjardins:noalias, r=bjorn3\n\ncleanup: handle -Zmutable-noalias like -Zbox-noalias\n\nr? `@bjorn3`\n\ncc `@RalfJung` this will conflict with #106180", "tree": {"sha": "47f65b14f307c56212bb6538f378970b5131c214", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47f65b14f307c56212bb6538f378970b5131c214"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afe8c4537c9009a251a31e8f022b7795fc305d4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afe8c4537c9009a251a31e8f022b7795fc305d4f", "html_url": "https://github.com/rust-lang/rust/commit/afe8c4537c9009a251a31e8f022b7795fc305d4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afe8c4537c9009a251a31e8f022b7795fc305d4f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bbbaabbb6ec93800409478e2af7bc063701604b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bbbaabbb6ec93800409478e2af7bc063701604b", "html_url": "https://github.com/rust-lang/rust/commit/7bbbaabbb6ec93800409478e2af7bc063701604b"}, {"sha": "d165a6d70844020e4958ded4f80e30d64dd0bac1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d165a6d70844020e4958ded4f80e30d64dd0bac1", "html_url": "https://github.com/rust-lang/rust/commit/d165a6d70844020e4958ded4f80e30d64dd0bac1"}], "stats": {"total": 59, "additions": 31, "deletions": 28}, "files": [{"sha": "546540dfd76232ad2b6d50887e1b9304d1f9e63d", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/afe8c4537c9009a251a31e8f022b7795fc305d4f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe8c4537c9009a251a31e8f022b7795fc305d4f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=afe8c4537c9009a251a31e8f022b7795fc305d4f", "patch": "@@ -34,13 +34,6 @@ pub trait ArgAttributesExt {\n     );\n }\n \n-fn should_use_mutable_noalias(cx: &CodegenCx<'_, '_>) -> bool {\n-    // LLVM prior to version 12 had known miscompiles in the presence of\n-    // noalias attributes (see #54878), but we don't support earlier\n-    // versions at all anymore. We now enable mutable noalias by default.\n-    cx.tcx.sess.opts.unstable_opts.mutable_noalias.unwrap_or(true)\n-}\n-\n const ABI_AFFECTING_ATTRIBUTES: [(ArgAttribute, llvm::AttributeKind); 1] =\n     [(ArgAttribute::InReg, llvm::AttributeKind::InReg)];\n \n@@ -88,9 +81,6 @@ fn get_attrs<'ll>(this: &ArgAttributes, cx: &CodegenCx<'ll, '_>) -> SmallVec<[&'\n                 attrs.push(llattr.create_attr(cx.llcx));\n             }\n         }\n-        if regular.contains(ArgAttribute::NoAliasMutRef) && should_use_mutable_noalias(cx) {\n-            attrs.push(llvm::AttributeKind::NoAlias.create_attr(cx.llcx));\n-        }\n     } else if cx.tcx.sess.opts.unstable_opts.sanitizer.contains(SanitizerSet::MEMORY) {\n         // If we're not optimising, *but* memory sanitizer is on, emit noundef, since it affects\n         // memory sanitizer's behavior."}, {"sha": "3b8c867d35ba37b3a06e41b64b90123c19f514d6", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/afe8c4537c9009a251a31e8f022b7795fc305d4f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe8c4537c9009a251a31e8f022b7795fc305d4f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=afe8c4537c9009a251a31e8f022b7795fc305d4f", "patch": "@@ -71,12 +71,7 @@ mod attr_impl {\n             const NonNull   = 1 << 3;\n             const ReadOnly  = 1 << 4;\n             const InReg     = 1 << 5;\n-            // Due to past miscompiles in LLVM, we use a separate attribute for\n-            // &mut arguments, so that the codegen backend can decide whether\n-            // or not to actually emit the attribute. It can also be controlled\n-            // with the `-Zmutable-noalias` debugging option.\n-            const NoAliasMutRef = 1 << 6;\n-            const NoUndef = 1 << 7;\n+            const NoUndef = 1 << 6;\n         }\n     }\n }"}, {"sha": "f8a5691f29de0b0626d207779af0c2ccd997ee47", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/afe8c4537c9009a251a31e8f022b7795fc305d4f/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe8c4537c9009a251a31e8f022b7795fc305d4f/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=afe8c4537c9009a251a31e8f022b7795fc305d4f", "patch": "@@ -256,22 +256,21 @@ fn adjust_for_rust_scalar<'tcx>(\n             // See https://github.com/rust-lang/unsafe-code-guidelines/issues/326\n             let noalias_for_box = cx.tcx.sess.opts.unstable_opts.box_noalias.unwrap_or(true);\n \n+            // LLVM prior to version 12 had known miscompiles in the presence of noalias attributes\n+            // (see #54878), so it was conditionally disabled, but we don't support earlier\n+            // versions at all anymore. We still support turning it off using -Zmutable-noalias.\n+            let noalias_mut_ref = cx.tcx.sess.opts.unstable_opts.mutable_noalias.unwrap_or(true);\n+\n             // `&mut` pointer parameters never alias other parameters,\n             // or mutable global data\n             //\n             // `&T` where `T` contains no `UnsafeCell<U>` is immutable,\n             // and can be marked as both `readonly` and `noalias`, as\n             // LLVM's definition of `noalias` is based solely on memory\n             // dependencies rather than pointer equality\n-            //\n-            // Due to past miscompiles in LLVM, we apply a separate NoAliasMutRef attribute\n-            // for UniqueBorrowed arguments, so that the codegen backend can decide whether\n-            // or not to actually emit the attribute. It can also be controlled with the\n-            // `-Zmutable-noalias` debugging option.\n             let no_alias = match kind {\n-                PointerKind::SharedMutable\n-                | PointerKind::UniqueBorrowed\n-                | PointerKind::UniqueBorrowedPinned => false,\n+                PointerKind::SharedMutable | PointerKind::UniqueBorrowedPinned => false,\n+                PointerKind::UniqueBorrowed => noalias_mut_ref,\n                 PointerKind::UniqueOwned => noalias_for_box,\n                 PointerKind::Frozen => true,\n             };\n@@ -284,10 +283,6 @@ fn adjust_for_rust_scalar<'tcx>(\n             if kind == PointerKind::Frozen && !is_return {\n                 attrs.set(ArgAttribute::ReadOnly);\n             }\n-\n-            if kind == PointerKind::UniqueBorrowed && !is_return {\n-                attrs.set(ArgAttribute::NoAliasMutRef);\n-            }\n         }\n     }\n }"}, {"sha": "a9ec61e286d0da46d05171e01013177b61616396", "filename": "src/test/codegen/noalias-flag.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/afe8c4537c9009a251a31e8f022b7795fc305d4f/src%2Ftest%2Fcodegen%2Fnoalias-flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe8c4537c9009a251a31e8f022b7795fc305d4f/src%2Ftest%2Fcodegen%2Fnoalias-flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnoalias-flag.rs?ref=afe8c4537c9009a251a31e8f022b7795fc305d4f", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags: -O -Zmutable-noalias=no\n+\n+#![crate_type = \"lib\"]\n+\n+// `-Zmutable-noalias=no` should disable noalias on mut refs...\n+\n+// CHECK-LABEL: @test_mut_ref(\n+// CHECK-NOT: noalias\n+// CHECK-SAME: %x\n+#[no_mangle]\n+pub fn test_mut_ref(x: &mut i32) -> &mut i32 {\n+    x\n+}\n+\n+// ...but not on shared refs\n+\n+// CHECK-LABEL: @test_ref(\n+// CHECK-SAME: noalias\n+// CHECK-SAME: %x\n+#[no_mangle]\n+pub fn test_ref(x: &i32) -> &i32 {\n+    x\n+}"}]}