{"sha": "d65c8636d994ffefc36b1a690fcf6c2796e6e325", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NWM4NjM2ZDk5NGZmZWZjMzZiMWE2OTBmY2Y2YzI3OTZlNmUzMjU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-08-10T17:36:08Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-09-06T21:32:30Z"}, "message": "Fix hover on impls", "tree": {"sha": "119723e579b8a9e353516a7ce95ce89e60fe588e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/119723e579b8a9e353516a7ce95ce89e60fe588e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d65c8636d994ffefc36b1a690fcf6c2796e6e325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d65c8636d994ffefc36b1a690fcf6c2796e6e325", "html_url": "https://github.com/rust-lang/rust/commit/d65c8636d994ffefc36b1a690fcf6c2796e6e325", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d65c8636d994ffefc36b1a690fcf6c2796e6e325/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3186914071b71af2c771ec0c0d044a1a8c215c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3186914071b71af2c771ec0c0d044a1a8c215c2", "html_url": "https://github.com/rust-lang/rust/commit/c3186914071b71af2c771ec0c0d044a1a8c215c2"}], "stats": {"total": 86, "additions": 47, "deletions": 39}, "files": [{"sha": "2ccad08e03d05bcce3fd512d7f100d335ba649d5", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d65c8636d994ffefc36b1a690fcf6c2796e6e325/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65c8636d994ffefc36b1a690fcf6c2796e6e325/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d65c8636d994ffefc36b1a690fcf6c2796e6e325", "patch": "@@ -2678,7 +2678,6 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n fn render_implementor(cx: &Context, implementor: &Impl, w: &mut fmt::Formatter,\n                       implementor_dups: &FxHashMap<&str, (DefId, bool)>) -> fmt::Result {\n-    write!(w, \"<li><table class='table-display'><tbody><tr><td><code>\")?;\n     // If there's already another implementor that has the same abbridged name, use the\n     // full path, for example in `std::iter::ExactSizeIterator`\n     let use_absolute = match implementor.inner_impl().for_ {\n@@ -2689,22 +2688,8 @@ fn render_implementor(cx: &Context, implementor: &Impl, w: &mut fmt::Formatter,\n         } => implementor_dups[path.last_name()].1,\n         _ => false,\n     };\n-    fmt_impl_for_trait_page(&implementor.inner_impl(), w, use_absolute)?;\n-    for it in &implementor.inner_impl().items {\n-        if let clean::TypedefItem(ref tydef, _) = it.inner {\n-            write!(w, \"<span class=\\\"where fmt-newline\\\">  \")?;\n-            assoc_type(w, it, &[], Some(&tydef.type_), AssocItemLink::Anchor(None))?;\n-            write!(w, \";</span>\")?;\n-        }\n-    }\n-    write!(w, \"</code><td>\")?;\n-    if let Some(l) = (Item { cx, item: &implementor.impl_item }).src_href() {\n-        write!(w, \"<div class='out-of-band'>\")?;\n-        write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n-                    l, \"goto source code\")?;\n-        write!(w, \"</div>\")?;\n-    }\n-    writeln!(w, \"</td></tr></tbody></table></li>\")?;\n+    render_impl(w, cx, implementor, AssocItemLink::Anchor(None), RenderMode::Normal,\n+                implementor.impl_item.stable_since(), true, Some(use_absolute))?;\n     Ok(())\n }\n \n@@ -2715,7 +2700,7 @@ fn render_impls(cx: &Context, w: &mut fmt::Formatter,\n         let did = i.trait_did().unwrap();\n         let assoc_link = AssocItemLink::GotoSource(did, &i.inner_impl().provided_trait_methods);\n         render_impl(w, cx, i, assoc_link,\n-                    RenderMode::Normal, containing_item.stable_since(), true)?;\n+                    RenderMode::Normal, containing_item.stable_since(), true, None)?;\n     }\n     Ok(())\n }\n@@ -2964,7 +2949,8 @@ fn item_trait(\n                         &implementor.inner_impl().provided_trait_methods\n                     );\n                     render_impl(w, cx, &implementor, assoc_link,\n-                                RenderMode::Normal, implementor.impl_item.stable_since(), false)?;\n+                                RenderMode::Normal, implementor.impl_item.stable_since(), false,\n+                                None)?;\n                 }\n             }\n         }\n@@ -2973,7 +2959,7 @@ fn item_trait(\n         for implementor in concrete {\n             render_implementor(cx, implementor, w, &implementor_dups)?;\n         }\n-        write!(w, \"</ul>\")?;\n+        write!(w, \"</div>\")?;\n \n         if t.auto {\n             write!(w, \"{}\", synthetic_impl_header)?;\n@@ -2983,17 +2969,17 @@ fn item_trait(\n                 );\n                 render_implementor(cx, implementor, w, &implementor_dups)?;\n             }\n-            write!(w, \"</ul>\")?;\n+            write!(w, \"</div>\")?;\n         }\n     } else {\n         // even without any implementations to write in, we still want the heading and list, so the\n         // implementors javascript file pulled in below has somewhere to write the impls into\n         write!(w, \"{}\", impl_header)?;\n-        write!(w, \"</ul>\")?;\n+        write!(w, \"</div>\")?;\n \n         if t.auto {\n             write!(w, \"{}\", synthetic_impl_header)?;\n-            write!(w, \"</ul>\")?;\n+            write!(w, \"</div>\")?;\n         }\n     }\n     write!(w, r#\"<script type=\"text/javascript\">window.inlined_types=new Set({});</script>\"#,\n@@ -3616,7 +3602,7 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n         };\n         for i in &non_trait {\n             render_impl(w, cx, i, AssocItemLink::Anchor(None), render_mode,\n-                        containing_item.stable_since(), true)?;\n+                        containing_item.stable_since(), true, None)?;\n         }\n     }\n     if let AssocItemRender::DerefFor { .. } = what {\n@@ -3797,15 +3783,29 @@ fn spotlight_decl(decl: &clean::FnDecl) -> Result<String, fmt::Error> {\n \n fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLink,\n                render_mode: RenderMode, outer_version: Option<&str>,\n-               show_def_docs: bool) -> fmt::Result {\n+               show_def_docs: bool, use_absolute: Option<bool>) -> fmt::Result {\n     if render_mode == RenderMode::Normal {\n         let id = cx.derive_id(match i.inner_impl().trait_ {\n             Some(ref t) => format!(\"impl-{}\", small_url_encode(&format!(\"{:#}\", t))),\n             None => \"impl\".to_string(),\n         });\n-        write!(w, \"<h3 id='{}' class='impl'><span class='in-band'><table class='table-display'>\\\n-                   <tbody><tr><td><code>{}</code>\",\n-               id, i.inner_impl())?;\n+        if let Some(use_absolute) = use_absolute {\n+            write!(w, \"<h3 id='{}' class='impl'><span class='in-band'><table class='table-display'>\\\n+                       <tbody><tr><td><code>\", id)?;\n+            fmt_impl_for_trait_page(&i.inner_impl(), w, use_absolute)?;\n+            for it in &i.inner_impl().items {\n+                if let clean::TypedefItem(ref tydef, _) = it.inner {\n+                    write!(w, \"<span class=\\\"where fmt-newline\\\">  \")?;\n+                    assoc_type(w, it, &vec![], Some(&tydef.type_), AssocItemLink::Anchor(None))?;\n+                    write!(w, \";</span>\")?;\n+                }\n+            }\n+            write!(w, \"</code>\")?;\n+        } else {\n+            write!(w, \"<h3 id='{}' class='impl'><span class='in-band'><table class='table-display'>\\\n+                       <tbody><tr><td><code>{}</code>\",\n+                   id, i.inner_impl())?;\n+        }\n         write!(w, \"<a href='#{}' class='anchor'></a>\", id)?;\n         write!(w, \"</span></td><td><span class='out-of-band'>\")?;\n         let since = i.impl_item.stability.as_ref().map(|s| &s.since[..]);"}, {"sha": "3a54cb6389b5b2abec17f8a6b2b86622a587ef3f", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d65c8636d994ffefc36b1a690fcf6c2796e6e325/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/d65c8636d994ffefc36b1a690fcf6c2796e6e325/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=d65c8636d994ffefc36b1a690fcf6c2796e6e325", "patch": "@@ -114,7 +114,7 @@ h3.impl, h3.method, h3.type {\n \n h1, h2, h3, h4,\n .sidebar, a.source, .search-input, .content table :not(code)>a,\n-.collapse-toggle, ul.item-list > li > .out-of-band {\n+.collapse-toggle, div.item-list .out-of-band {\n \tfont-family: \"Fira Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n }\n \n@@ -367,10 +367,6 @@ h4.method > .out-of-band {\n \tfont-size: 19px;\n }\n \n-ul.item-list > li > .out-of-band {\n-\tfont-size: 19px;\n-}\n-\n h4 > code, h3 > code, .invisible > code {\n \tmax-width: calc(100% - 41px);\n \tdisplay: block;\n@@ -436,10 +432,6 @@ h4 > code, h3 > code, .invisible > code {\n \tpadding: 0;\n }\n \n-.content .item-list li {\n-\tmargin-bottom: 1em;\n-}\n-\n .content .multi-column {\n \t-moz-column-count: 5;\n \t-moz-column-gap: 2.5em;\n@@ -473,6 +465,11 @@ h4 > code, h3 > code, .invisible > code {\n .content .impl-items .docblock, .content .impl-items .stability {\n \tmargin-bottom: .6em;\n }\n+\n+.content .impl-items > .stability {\n+\tmargin-left: 40px;\n+}\n+\n .content .docblock > .impl-items {\n \tmargin-left: 20px;\n \tmargin-top: -34px;\n@@ -1363,6 +1360,15 @@ kbd {\n \tfont-size: 19px;\n \tdisplay: block;\n }\n+#implementors-list > .impl-items .table-display .out-of-band {\n+\tfont-size: 17px;\n+}\n+\n+.table-display td:hover .anchor {\n+\tdisplay: block;\n+\ttop: 2px;\n+\tleft: -5px;\n+}\n \n #main > ul {\n \tpadding-left: 10px;"}, {"sha": "27077ed4f1ac12671d4a096e71c5a6ea3bdf1046", "filename": "src/test/rustdoc/doc-cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d65c8636d994ffefc36b1a690fcf6c2796e6e325/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65c8636d994ffefc36b1a690fcf6c2796e6e325/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs?ref=d65c8636d994ffefc36b1a690fcf6c2796e6e325", "patch": "@@ -36,7 +36,7 @@ pub mod unix_only {\n     // @has doc_cfg/unix_only/trait.ArmOnly.html \\\n     //  '//*[@id=\"main\"]/*[@class=\"stability\"]/*[@class=\"stab portability\"]' \\\n     //  'This is supported on Unix and ARM only.'\n-    // @count - '//*[@class=\"stab portability\"]' 2\n+    // @count - '//*[@class=\"stab portability\"]' 3\n     #[doc(cfg(target_arch = \"arm\"))]\n     pub trait ArmOnly {\n         fn unix_and_arm_only_function();"}, {"sha": "104e8d62f19f22afc6b68ea3aa173d06fe738743", "filename": "src/test/rustdoc/issue-29503.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d65c8636d994ffefc36b1a690fcf6c2796e6e325/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65c8636d994ffefc36b1a690fcf6c2796e6e325/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-29503.rs?ref=d65c8636d994ffefc36b1a690fcf6c2796e6e325", "patch": "@@ -8,14 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n+\n use std::fmt;\n \n // @has issue_29503/trait.MyTrait.html\n pub trait MyTrait {\n     fn my_string(&self) -> String;\n }\n \n-// @has - \"//ul[@id='implementors-list']/li\" \"impl<T> MyTrait for T where T: Debug\"\n+// @has - \"//div[@id='implementors-list']/h3[@id='impl-MyTrait']//code\" \"impl<T> MyTrait for T where T: Debug\"\n impl<T> MyTrait for T where T: fmt::Debug {\n     fn my_string(&self) -> String {\n         format!(\"{:?}\", self)"}]}