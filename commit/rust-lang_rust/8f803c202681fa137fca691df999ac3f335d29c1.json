{"sha": "8f803c202681fa137fca691df999ac3f335d29c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmODAzYzIwMjY4MWZhMTM3ZmNhNjkxZGY5OTlhYzNmMzM1ZDI5YzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-01-30T21:27:00Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-02T04:39:07Z"}, "message": "Remove \"powerpc64le\" and \"mipsel\" target_arch\n\nCurrently the `mipsel-unknown-linux-gnu` target doesn't actually set the\n`target_arch` value to `mipsel` but it rather uses `mips`. Alternatively the\n`powerpc64le` target does indeed set the `target_arch` as `powerpc64le`,\ncausing a bit of inconsistency between theset two.\n\nAs these are just the same instance of one instruction set, let's use\n`target_endian` to switch between them and only set the `target_arch` as one\nvalue. This should cut down on the number of `#[cfg]` annotations necessary and\nall around be a little more ergonomic.", "tree": {"sha": "fab48b98c0d3460bb113a883e5c159be4b88454c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fab48b98c0d3460bb113a883e5c159be4b88454c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f803c202681fa137fca691df999ac3f335d29c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f803c202681fa137fca691df999ac3f335d29c1", "html_url": "https://github.com/rust-lang/rust/commit/8f803c202681fa137fca691df999ac3f335d29c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f803c202681fa137fca691df999ac3f335d29c1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "449e8bf3048d144fd5b82dd1a1a1060ff86b2877", "url": "https://api.github.com/repos/rust-lang/rust/commits/449e8bf3048d144fd5b82dd1a1a1060ff86b2877", "html_url": "https://github.com/rust-lang/rust/commit/449e8bf3048d144fd5b82dd1a1a1060ff86b2877"}], "stats": {"total": 63, "additions": 17, "deletions": 46}, "files": [{"sha": "844c4c7683bccf95146840e7e0af7a2ef186b6c9", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f803c202681fa137fca691df999ac3f335d29c1/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f803c202681fa137fca691df999ac3f335d29c1/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=8f803c202681fa137fca691df999ac3f335d29c1", "patch": "@@ -39,7 +39,6 @@ const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"msp430\", \"msp430\"),\n     (\"powerpc\", \"powerpc\"),\n     (\"powerpc64\", \"powerpc64\"),\n-    (\"powerpc64le\", \"powerpc64le\"),\n     (\"s390x\", \"systemz\"),\n     (\"sparc\", \"sparc\"),\n     (\"x86_64\", \"x86_64\"),"}, {"sha": "16ff95abef6b63d51a45b97b4558be55580cfdfd", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f803c202681fa137fca691df999ac3f335d29c1/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/8f803c202681fa137fca691df999ac3f335d29c1/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=8f803c202681fa137fca691df999ac3f335d29c1", "patch": "@@ -2044,7 +2044,7 @@ The following configurations must be defined by the implementation:\n   production.  For example, it controls the behavior of the standard library's\n   `debug_assert!` macro.\n * `target_arch = \"...\"` - Target CPU architecture, such as `\"x86\"`, `\"x86_64\"`\n-  `\"mips\"`, `\"powerpc\"`, `\"powerpc64\"`, `\"powerpc64le\"`, `\"arm\"`, or `\"aarch64\"`.\n+  `\"mips\"`, `\"powerpc\"`, `\"powerpc64\"`, `\"arm\"`, or `\"aarch64\"`.\n * `target_endian = \"...\"` - Endianness of the target CPU, either `\"little\"` or\n   `\"big\"`.\n * `target_env = \"..\"` - An option provided by the compiler by default"}, {"sha": "8bdbd1a926fee58bc633151fe21b34f80c5e0983", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f803c202681fa137fca691df999ac3f335d29c1/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f803c202681fa137fca691df999ac3f335d29c1/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=8f803c202681fa137fca691df999ac3f335d29c1", "patch": "@@ -51,7 +51,6 @@ extern \"C\" {\n // constant at the call site and the branch will be optimized out.\n #[cfg(all(any(target_arch = \"arm\",\n               target_arch = \"mips\",\n-              target_arch = \"mipsel\",\n               target_arch = \"powerpc\")))]\n const MIN_ALIGN: usize = 8;\n #[cfg(all(any(target_arch = \"x86\","}, {"sha": "8423492caf155cac495774f8ee12e7a5573e913e", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f803c202681fa137fca691df999ac3f335d29c1/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f803c202681fa137fca691df999ac3f335d29c1/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=8f803c202681fa137fca691df999ac3f335d29c1", "patch": "@@ -29,10 +29,8 @@ extern crate libc;\n #[cfg(all(any(target_arch = \"x86\",\n               target_arch = \"arm\",\n               target_arch = \"mips\",\n-              target_arch = \"mipsel\",\n               target_arch = \"powerpc\",\n-              target_arch = \"powerpc64\",\n-              target_arch = \"powerpc64le\")))]\n+              target_arch = \"powerpc64\")))]\n const MIN_ALIGN: usize = 8;\n #[cfg(all(any(target_arch = \"x86_64\",\n               target_arch = \"aarch64\")))]"}, {"sha": "abd705ce6bc8b18d21711250a5f00a19336f6387", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f803c202681fa137fca691df999ac3f335d29c1/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f803c202681fa137fca691df999ac3f335d29c1/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=8f803c202681fa137fca691df999ac3f335d29c1", "patch": "@@ -79,8 +79,8 @@ pub struct Target {\n     pub target_env: String,\n     /// Vendor name to use for conditional compilation.\n     pub target_vendor: String,\n-    /// Architecture to use for ABI considerations. Valid options: \"x86\", \"x86_64\", \"arm\",\n-    /// \"aarch64\", \"mips\", \"powerpc\", \"powerpc64\" and \"powerpc64le\". \"mips\" includes \"mipsel\".\n+    /// Architecture to use for ABI considerations. Valid options: \"x86\",\n+    /// \"x86_64\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", and \"powerpc64\".\n     pub arch: String,\n     /// Optional settings with defaults.\n     pub options: TargetOptions,"}, {"sha": "f0fac14dae08a24a679539d2df6fe991c7f3087c", "filename": "src/librustc_back/target/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f803c202681fa137fca691df999ac3f335d29c1/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f803c202681fa137fca691df999ac3f335d29c1/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs?ref=8f803c202681fa137fca691df999ac3f335d29c1", "patch": "@@ -19,7 +19,7 @@ pub fn target() -> Target {\n         llvm_target: \"powerpc64le-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n-        arch: \"powerpc64le\".to_string(),\n+        arch: \"powerpc64\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),"}, {"sha": "a30133d3905d8bb6accc1cab35955086c5d29d1a", "filename": "src/librustc_trans/trans/cabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f803c202681fa137fca691df999ac3f335d29c1/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f803c202681fa137fca691df999ac3f335d29c1/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs?ref=8f803c202681fa137fca691df999ac3f335d29c1", "patch": "@@ -128,7 +128,7 @@ pub fn compute_abi_info(ccx: &CrateContext,\n         },\n         \"mips\" => cabi_mips::compute_abi_info(ccx, atys, rty, ret_def),\n         \"powerpc\" => cabi_powerpc::compute_abi_info(ccx, atys, rty, ret_def),\n-        \"powerpc64\" | \"powerpc64le\" => cabi_powerpc64::compute_abi_info(ccx, atys, rty, ret_def),\n+        \"powerpc64\" => cabi_powerpc64::compute_abi_info(ccx, atys, rty, ret_def),\n         a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a)\n                               ),\n     }"}, {"sha": "410d7a6c91fc9af37e5fe499233cb9e74a308874", "filename": "src/libstd/env.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8f803c202681fa137fca691df999ac3f335d29c1/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f803c202681fa137fca691df999ac3f335d29c1/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=8f803c202681fa137fca691df999ac3f335d29c1", "patch": "@@ -613,10 +613,8 @@ pub mod consts {\n     /// - arm\n     /// - aarch64\n     /// - mips\n-    /// - mipsel\n     /// - powerpc\n     /// - powerpc64\n-    /// - powerpc64le\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n     pub const ARCH: &'static str = super::arch::ARCH;\n \n@@ -859,11 +857,6 @@ mod arch {\n     pub const ARCH: &'static str = \"mips\";\n }\n \n-#[cfg(target_arch = \"mipsel\")]\n-mod arch {\n-    pub const ARCH: &'static str = \"mipsel\";\n-}\n-\n #[cfg(target_arch = \"powerpc\")]\n mod arch {\n     pub const ARCH: &'static str = \"powerpc\";\n@@ -874,11 +867,6 @@ mod arch {\n     pub const ARCH: &'static str = \"powerpc64\";\n }\n \n-#[cfg(target_arch = \"powerpc64le\")]\n-mod arch {\n-    pub const ARCH: &'static str = \"powerpc64le\";\n-}\n-\n #[cfg(target_arch = \"le32\")]\n mod arch {\n     pub const ARCH: &'static str = \"le32\";"}, {"sha": "03a1fdaac4687123b6f2e97d0ccd007fa2952a76", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f803c202681fa137fca691df999ac3f335d29c1/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f803c202681fa137fca691df999ac3f335d29c1/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=8f803c202681fa137fca691df999ac3f335d29c1", "patch": "@@ -86,8 +86,7 @@ mod arch {\n     }\n }\n \n-#[cfg(any(target_arch = \"mips\",\n-          target_arch = \"mipsel\"))]\n+#[cfg(target_arch = \"mips\")]\n mod arch {\n     use super::mode_t;\n     use os::raw::{c_long, c_ulong};\n@@ -205,8 +204,7 @@ mod arch {\n     }\n }\n \n-#[cfg(any(target_arch = \"x86_64\", target_arch = \"powerpc64\",\n-          target_arch = \"powerpc64le\"))]\n+#[cfg(any(target_arch = \"x86_64\", target_arch = \"powerpc64\"))]\n mod arch {\n     use super::{dev_t, mode_t};\n     use os::raw::{c_long, c_int};"}, {"sha": "bd353f066cfd74577a1a6f10d662cd68f130bc23", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f803c202681fa137fca691df999ac3f335d29c1/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f803c202681fa137fca691df999ac3f335d29c1/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=8f803c202681fa137fca691df999ac3f335d29c1", "patch": "@@ -16,15 +16,13 @@\n           all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                        target_arch = \"arm\",\n                                        target_arch = \"powerpc\",\n-                                       target_arch = \"powerpc64\",\n-                                       target_arch = \"powerpc64le\"))))]\n+                                       target_arch = \"powerpc64\"))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n #[cfg(not(any(target_os = \"android\",\n               all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                            target_arch = \"arm\",\n                                            target_arch = \"powerpc\",\n-                                           target_arch = \"powerpc64\",\n-                                           target_arch = \"powerpc64le\")))))]\n+                                           target_arch = \"powerpc64\")))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = i8;\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_schar = i8;\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uchar = u8;"}, {"sha": "8d92909faf52884d73f11adc71b97a7d786ad3bd", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8f803c202681fa137fca691df999ac3f335d29c1/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f803c202681fa137fca691df999ac3f335d29c1/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=8f803c202681fa137fca691df999ac3f335d29c1", "patch": "@@ -31,17 +31,15 @@ mod imp {\n                   target_arch = \"arm\",\n                   target_arch = \"aarch64\",\n                   target_arch = \"powerpc\",\n-                  target_arch = \"powerpc64\",\n-                  target_arch = \"powerpc64le\")))]\n+                  target_arch = \"powerpc64\")))]\n     fn getrandom(buf: &mut [u8]) -> libc::c_long {\n         #[cfg(target_arch = \"x86_64\")]\n         const NR_GETRANDOM: libc::c_long = 318;\n         #[cfg(target_arch = \"x86\")]\n         const NR_GETRANDOM: libc::c_long = 355;\n         #[cfg(target_arch = \"arm\")]\n         const NR_GETRANDOM: libc::c_long = 384;\n-        #[cfg(any(target_arch = \"powerpc\", target_arch = \"powerpc64\",\n-                  target_arch = \"powerpc64le\"))]\n+        #[cfg(any(target_arch = \"powerpc\", target_arch = \"powerpc64\"))]\n         const NR_GETRANDOM: libc::c_long = 359;\n         #[cfg(target_arch = \"aarch64\")]\n         const NR_GETRANDOM: libc::c_long = 278;\n@@ -57,8 +55,7 @@ mod imp {\n                       target_arch = \"arm\",\n                       target_arch = \"aarch64\",\n                       target_arch = \"powerpc\",\n-                      target_arch = \"powerpc64\",\n-                      target_arch = \"powerpc64le\"))))]\n+                      target_arch = \"powerpc64\"))))]\n     fn getrandom(_buf: &mut [u8]) -> libc::c_long { -1 }\n \n     fn getrandom_fill_bytes(v: &mut [u8]) {\n@@ -96,8 +93,7 @@ mod imp {\n                   target_arch = \"arm\",\n                   target_arch = \"aarch64\",\n                   target_arch = \"powerpc\",\n-                  target_arch = \"powerpc64\",\n-                  target_arch = \"powerpc64le\")))]\n+                  target_arch = \"powerpc64\")))]\n     fn is_getrandom_available() -> bool {\n         use sync::atomic::{AtomicBool, Ordering};\n         use sync::Once;\n@@ -126,8 +122,7 @@ mod imp {\n                       target_arch = \"arm\",\n                       target_arch = \"aarch64\",\n                       target_arch = \"powerpc\",\n-                      target_arch = \"powerpc64\",\n-                      target_arch = \"powerpc64le\"))))]\n+                      target_arch = \"powerpc64\"))))]\n     fn is_getrandom_available() -> bool { false }\n \n     /// A random number generator that retrieves randomness straight from"}, {"sha": "145f158d5391e37dfb6621a13c1724da9c87272a", "filename": "src/libstd/sys/common/libunwind.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f803c202681fa137fca691df999ac3f335d29c1/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f803c202681fa137fca691df999ac3f335d29c1/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs?ref=8f803c202681fa137fca691df999ac3f335d29c1", "patch": "@@ -80,11 +80,10 @@ pub const unwinder_private_data_size: usize = 5;\n #[cfg(target_arch = \"aarch64\")]\n pub const unwinder_private_data_size: usize = 2;\n \n-#[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n+#[cfg(target_arch = \"mips\")]\n pub const unwinder_private_data_size: usize = 2;\n \n-#[cfg(any(target_arch = \"powerpc\", target_arch = \"powerpc64\",\n-          target_arch = \"powerpc64le\"))]\n+#[cfg(any(target_arch = \"powerpc\", target_arch = \"powerpc64\"))]\n pub const unwinder_private_data_size: usize = 2;\n \n #[repr(C)]"}, {"sha": "462be5807cf8cfa9fcb544ba267a3e692831dc77", "filename": "src/test/run-pass/conditional-compile-arch.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f803c202681fa137fca691df999ac3f335d29c1/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f803c202681fa137fca691df999ac3f335d29c1/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs?ref=8f803c202681fa137fca691df999ac3f335d29c1", "patch": "@@ -24,6 +24,3 @@ pub fn main() { }\n \n #[cfg(target_arch = \"powerpc64\")]\n pub fn main() { }\n-\n-#[cfg(target_arch = \"powerpc64le\")]\n-pub fn main() { }"}]}