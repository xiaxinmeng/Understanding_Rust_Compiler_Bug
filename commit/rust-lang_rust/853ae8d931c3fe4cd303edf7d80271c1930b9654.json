{"sha": "853ae8d931c3fe4cd303edf7d80271c1930b9654", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1M2FlOGQ5MzFjM2ZlNGNkMzAzZWRmN2Q4MDI3MWMxOTMwYjk2NTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-03-19T08:46:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-03-26T08:23:19Z"}, "message": "fix some uses I missed", "tree": {"sha": "40886165f9fcd93316af8df1e5e24df224debee0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40886165f9fcd93316af8df1e5e24df224debee0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/853ae8d931c3fe4cd303edf7d80271c1930b9654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/853ae8d931c3fe4cd303edf7d80271c1930b9654", "html_url": "https://github.com/rust-lang/rust/commit/853ae8d931c3fe4cd303edf7d80271c1930b9654", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/853ae8d931c3fe4cd303edf7d80271c1930b9654/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e0383abc6d1f7d1edc456f66a2e3f4082e9a0a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e0383abc6d1f7d1edc456f66a2e3f4082e9a0a8", "html_url": "https://github.com/rust-lang/rust/commit/0e0383abc6d1f7d1edc456f66a2e3f4082e9a0a8"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "5056e388112cedade9af31eb9f1bfd266019ff78", "filename": "src/libstd/sys/sgx/ext/arch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/853ae8d931c3fe4cd303edf7d80271c1930b9654/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853ae8d931c3fe4cd303edf7d80271c1930b9654/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs?ref=853ae8d931c3fe4cd303edf7d80271c1930b9654", "patch": "@@ -28,7 +28,7 @@ const ENCLU_EGETKEY: u32 = 1;\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n pub fn egetkey(request: &Align512<[u8; 512]>) -> Result<Align16<[u8; 16]>, u32> {\n     unsafe {\n-        let mut out = MaybeUninit::uninitialized();\n+        let mut out = MaybeUninit::uninit();\n         let error;\n \n         asm!(\n@@ -41,7 +41,7 @@ pub fn egetkey(request: &Align512<[u8; 512]>) -> Result<Align16<[u8; 16]>, u32>\n         );\n \n         match error {\n-            0 => Ok(out.into_initialized()),\n+            0 => Ok(out.assume_init()),\n             err => Err(err),\n         }\n     }\n@@ -58,7 +58,7 @@ pub fn ereport(\n     reportdata: &Align128<[u8; 64]>,\n ) -> Align512<[u8; 432]> {\n     unsafe {\n-        let mut report = MaybeUninit::uninitialized();\n+        let mut report = MaybeUninit::uninit();\n \n         asm!(\n             \"enclu\"\n@@ -69,6 +69,6 @@ pub fn ereport(\n               \"{rdx}\"(report.as_mut_ptr())\n         );\n \n-        report.into_initialized()\n+        report.assume_init()\n     }\n }"}, {"sha": "7e2d13b9e24765865c2c5d8fe8eb99bb5839829d", "filename": "src/libstd/sys/sgx/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853ae8d931c3fe4cd303edf7d80271c1930b9654/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853ae8d931c3fe4cd303edf7d80271c1930b9654/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs?ref=853ae8d931c3fe4cd303edf7d80271c1930b9654", "patch": "@@ -280,7 +280,7 @@ mod tests {\n             let mut init = MaybeUninit::<RWLock>::zeroed();\n             rwlock_new(&mut init);\n             assert_eq!(\n-                mem::transmute::<_, [u8; 128]>(init.into_initialized()).as_slice(),\n+                mem::transmute::<_, [u8; 128]>(init.assume_init()).as_slice(),\n                 RWLOCK_INIT\n             )\n         };"}, {"sha": "37cbdcefcedcc6777eebdaa55026d9d5d9f5dc13", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853ae8d931c3fe4cd303edf7d80271c1930b9654/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853ae8d931c3fe4cd303edf7d80271c1930b9654/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=853ae8d931c3fe4cd303edf7d80271c1930b9654", "patch": "@@ -154,7 +154,7 @@ unsafe impl Sync for ReentrantMutex {}\n \n impl ReentrantMutex {\n     pub fn uninitialized() -> ReentrantMutex {\n-        ReentrantMutex { inner: UnsafeCell::new(MaybeUninit::uninitialized()) }\n+        ReentrantMutex { inner: UnsafeCell::new(MaybeUninit::uninit()) }\n     }\n \n     pub unsafe fn init(&mut self) {"}, {"sha": "0dd67bb95ccaa5d500d2ef6157eedbfc933985d9", "filename": "src/test/codegen/box-maybe-uninit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/853ae8d931c3fe4cd303edf7d80271c1930b9654/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853ae8d931c3fe4cd303edf7d80271c1930b9654/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit.rs?ref=853ae8d931c3fe4cd303edf7d80271c1930b9654", "patch": "@@ -12,5 +12,8 @@ pub fn box_uninitialized() -> Box<MaybeUninit<usize>> {\n     // CHECK-NOT: alloca\n     // CHECK-NOT: memcpy\n     // CHECK-NOT: memset\n-    Box::new(MaybeUninit::uninitialized())\n+    Box::new(MaybeUninit::uninit())\n }\n+\n+// FIXME: add a test for a bigger box. Currently broken, see\n+// https://github.com/rust-lang/rust/issues/58201."}, {"sha": "3f6e489bb83275f6f7b7bbee03806579e91ea459", "filename": "src/test/run-pass/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/853ae8d931c3fe4cd303edf7d80271c1930b9654/src%2Ftest%2Frun-pass%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853ae8d931c3fe4cd303edf7d80271c1930b9654/src%2Ftest%2Frun-pass%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-uninitialized-zeroed.rs?ref=853ae8d931c3fe4cd303edf7d80271c1930b9654", "patch": "@@ -36,7 +36,7 @@ fn main() {\n \n         assert_eq!(\n             panic::catch_unwind(|| {\n-                mem::MaybeUninit::<!>::uninitialized().into_initialized()\n+                mem::MaybeUninit::<!>::uninit().assume_init()\n             }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n                 s == \"Attempted to instantiate uninhabited type !\"\n             })),\n@@ -63,7 +63,7 @@ fn main() {\n \n         assert_eq!(\n             panic::catch_unwind(|| {\n-                mem::MaybeUninit::<Foo>::uninitialized().into_initialized()\n+                mem::MaybeUninit::<Foo>::uninit().assume_init()\n             }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n                 s == \"Attempted to instantiate uninhabited type Foo\"\n             })),\n@@ -90,7 +90,7 @@ fn main() {\n \n         assert_eq!(\n             panic::catch_unwind(|| {\n-                mem::MaybeUninit::<Bar>::uninitialized().into_initialized()\n+                mem::MaybeUninit::<Bar>::uninit().assume_init()\n             }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n                 s == \"Attempted to instantiate uninhabited type Bar\"\n             })),"}]}