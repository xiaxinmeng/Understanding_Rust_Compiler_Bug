{"sha": "e59b08e62ea691916d2f063cac5aab4634128022", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1OWIwOGU2MmVhNjkxOTE2ZDJmMDYzY2FjNWFhYjQ2MzQxMjgwMjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-09T21:32:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-09T21:32:02Z"}, "message": "Auto merge of #74195 - Manishearth:rollup-h3m0sl8, r=Manishearth\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #73292 (Fixing broken link for the Eq trait)\n - #73791 (Allow for parentheses after macro intra-doc-links)\n - #74070 ( Use for<'tcx> fn pointers in Providers, instead of having Providers<'tcx>.)\n - #74077 (Use relative path for local links to primitives)\n - #74079 (Eliminate confusing \"globals\" terminology.)\n - #74107 (Hide `&mut self` methods from Deref in sidebar if there are no `DerefMut` impl for the type.)\n - #74136 (Fix broken link in rustdocdoc)\n - #74137 (Update cargo)\n - #74142 (Liballoc use vec instead of vector)\n - #74143 (Try remove unneeded ToString import in liballoc slice)\n - #74146 (update miri)\n - #74150 (Avoid \"blacklist\")\n - #74184 (Add docs for intra-doc-links)\n - #74188 (Tweak `::` -> `:` typo heuristic and reduce verbosity)\n\nFailed merges:\n\n - #74122 (Start-up clean-up)\n - #74127 (Avoid \"whitelist\")\n\nr? @ghost", "tree": {"sha": "7bafe998869c457ebaa9f82179f49c37baf7a551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bafe998869c457ebaa9f82179f49c37baf7a551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e59b08e62ea691916d2f063cac5aab4634128022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e59b08e62ea691916d2f063cac5aab4634128022", "html_url": "https://github.com/rust-lang/rust/commit/e59b08e62ea691916d2f063cac5aab4634128022", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e59b08e62ea691916d2f063cac5aab4634128022/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5db778affee7c6600c8e7a177c48282dab3f6292", "url": "https://api.github.com/repos/rust-lang/rust/commits/5db778affee7c6600c8e7a177c48282dab3f6292", "html_url": "https://github.com/rust-lang/rust/commit/5db778affee7c6600c8e7a177c48282dab3f6292"}, {"sha": "9353e21bfdea148e910b2530270a3418db836bf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9353e21bfdea148e910b2530270a3418db836bf3", "html_url": "https://github.com/rust-lang/rust/commit/9353e21bfdea148e910b2530270a3418db836bf3"}], "stats": {"total": 1032, "additions": 587, "deletions": 445}, "files": [{"sha": "eea674f2b84b9193d16322cff968cfb5b285d798", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 43, "deletions": 31, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -38,50 +38,62 @@ future.\n Attempting to use these error numbers on stable will result in the code sample being interpreted as\n plain text.\n \n-### Linking to items by type\n+### Linking to items by name\n \n-As designed in [RFC 1946], Rustdoc can parse paths to items when you use them as links. To resolve\n-these type names, it uses the items currently in-scope, either by declaration or by `use` statement.\n-For modules, the \"active scope\" depends on whether the documentation is written outside the module\n-(as `///` comments on the `mod` statement) or inside the module (at `//!` comments inside the file\n-or block). For all other items, it uses the enclosing module's scope.\n+Rustdoc is capable of directly linking to other rustdoc pages in Markdown documentation using the path of item as a link.\n \n-[RFC 1946]: https://github.com/rust-lang/rfcs/pull/1946\n-\n-For example, in the following code:\n+For example, in the following code all of the links will link to the rustdoc page for `Bar`:\n \n ```rust\n-/// Does the thing.\n-pub fn do_the_thing(_: SomeType) {\n-    println!(\"Let's do the thing!\");\n-}\n+/// This struct is not [Bar]\n+pub struct Foo1;\n+\n+/// This struct is also not [bar](Bar)\n+pub struct Foo2;\n+\n+/// This struct is also not [bar][b]\n+///\n+/// [b]: Bar\n+pub struct Foo3;\n+\n+/// This struct is also not [`Bar`]\n+pub struct Foo4;\n \n-/// Token you use to [`do_the_thing`].\n-pub struct SomeType;\n+pub struct Bar;\n ```\n \n-The link to ``[`do_the_thing`]`` in `SomeType`'s docs will properly link to the page for `fn\n-do_the_thing`. Note that here, rustdoc will insert the link target for you, but manually writing the\n-target out also works:\n+You can refer to anything in scope, and use paths, including `Self`. You may also use `foo()` and `foo!()` to refer to methods/functions and macros respectively.\n \n-```rust\n-pub mod some_module {\n-    /// Token you use to do the thing.\n-    pub struct SomeStruct;\n-}\n+```rust,edition2018\n+use std::sync::mpsc::Receiver;\n \n-/// Does the thing. Requires one [`SomeStruct`] for the thing to work.\n+/// This is an version of [`Receiver`], with support for [`std::future`].\n ///\n-/// [`SomeStruct`]: some_module::SomeStruct\n-pub fn do_the_thing(_: some_module::SomeStruct) {\n-    println!(\"Let's do the thing!\");\n+/// You can obtain a [`std::future::Future`] by calling [`Self::recv()`].\n+pub struct AsyncReceiver<T> {\n+    sender: Receiver<T>\n+}\n+\n+impl<T> AsyncReceiver<T> {\n+    pub async fn recv() -> T {\n+        unimplemented!()\n+    }\n }\n ```\n \n-For more details, check out [the RFC][RFC 1946], and see [the tracking issue][43466] for more\n-information about what parts of the feature are available.\n+Paths in Rust have three namespaces: type, value, and macro. Items from these namespaces are allowed to overlap. In case of ambiguity, rustdoc will warn about the ambiguity and ask you to disambiguate, which can be done by using a prefix like `struct@`, `enum@`, `type@`, `trait@`, `union@`, `const@`, `static@`, `value@`, `function@`, `mod@`, `fn@`, `module@`, `method@` , `macro@`, or `derive@`:\n+\n+```rust\n+/// See also: [`Foo`](struct@Foo)\n+struct Bar;\n+\n+/// This is different from [`Foo`](fn@Foo)\n+struct Foo {}\n+\n+fn Foo() {}\n+```\n \n-[43466]: https://github.com/rust-lang/rust/issues/43466\n+Note: Because of how `macro_rules` macros are scoped in Rust, the intra-doc links of a `macro_rules` macro will be resolved relative to the crate root, as opposed to the module it is defined in.\n \n ## Extensions to the `#[doc]` attribute\n \n@@ -321,7 +333,7 @@ library, as an equivalent command-line argument is provided to `rustc` when buil\n ### `--index-page`: provide a top-level landing page for docs\n \n This feature allows you to generate an index-page with a given markdown file. A good example of it\n-is the [rust documentation index](https://doc.rust-lang.org/index.html).\n+is the [rust documentation index](https://doc.rust-lang.org/nightly/index.html).\n \n With this, you'll have a page which you can custom as much as you want at the top of your crates.\n "}, {"sha": "3d51115fe01d3ab161d242f5a0ac968d74be7cbf", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -136,8 +136,6 @@ pub use hack::to_vec;\n // `test_permutations` test\n mod hack {\n     use crate::boxed::Box;\n-    #[cfg(test)]\n-    use crate::string::ToString;\n     use crate::vec::Vec;\n \n     // We shouldn't add inline attribute to this since this is used in\n@@ -156,9 +154,9 @@ mod hack {\n     where\n         T: Clone,\n     {\n-        let mut vector = Vec::with_capacity(s.len());\n-        vector.extend_from_slice(s);\n-        vector\n+        let mut vec = Vec::with_capacity(s.len());\n+        vec.extend_from_slice(s);\n+        vec\n     }\n }\n "}, {"sha": "79085740119bd4b978be812188cbb766ad1b087a", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -35,7 +35,7 @@ use self::Ordering::*;\n ///\n /// This trait allows for partial equality, for types that do not have a full\n /// equivalence relation. For example, in floating point numbers `NaN != NaN`,\n-/// so floating point types implement `PartialEq` but not [`Eq`].\n+/// so floating point types implement `PartialEq` but not [`Eq`](Eq).\n ///\n /// Formally, the equality must be (for all `a`, `b` and `c`):\n ///\n@@ -191,7 +191,6 @@ use self::Ordering::*;\n /// assert_eq!(x.eq(&y), false);\n /// ```\n ///\n-/// [`Eq`]: Eq\n /// [`eq`]: PartialEq::eq\n /// [`ne`]: PartialEq::ne\n #[lang = \"eq\"]"}, {"sha": "9d4b6dbed98701cbe54b07f18d40ced4913b2ba1", "filename": "src/librustc_ast/attr/mod.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fattr%2Fmod.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -21,55 +21,61 @@ use log::debug;\n use std::iter;\n use std::ops::DerefMut;\n \n-pub struct Globals {\n+// Per-session global variables: this struct is stored in thread-local storage\n+// in such a way that it is accessible without any kind of handle to all\n+// threads within the compilation session, but is not accessible outside the\n+// session.\n+pub struct SessionGlobals {\n     used_attrs: Lock<GrowableBitSet<AttrId>>,\n     known_attrs: Lock<GrowableBitSet<AttrId>>,\n-    rustc_span_globals: rustc_span::Globals,\n+    span_session_globals: rustc_span::SessionGlobals,\n }\n \n-impl Globals {\n-    fn new(edition: Edition) -> Globals {\n-        Globals {\n+impl SessionGlobals {\n+    fn new(edition: Edition) -> SessionGlobals {\n+        SessionGlobals {\n             // We have no idea how many attributes there will be, so just\n             // initiate the vectors with 0 bits. We'll grow them as necessary.\n             used_attrs: Lock::new(GrowableBitSet::new_empty()),\n             known_attrs: Lock::new(GrowableBitSet::new_empty()),\n-            rustc_span_globals: rustc_span::Globals::new(edition),\n+            span_session_globals: rustc_span::SessionGlobals::new(edition),\n         }\n     }\n }\n \n-pub fn with_globals<R>(edition: Edition, f: impl FnOnce() -> R) -> R {\n-    let globals = Globals::new(edition);\n-    GLOBALS.set(&globals, || rustc_span::GLOBALS.set(&globals.rustc_span_globals, f))\n+pub fn with_session_globals<R>(edition: Edition, f: impl FnOnce() -> R) -> R {\n+    let ast_session_globals = SessionGlobals::new(edition);\n+    SESSION_GLOBALS.set(&ast_session_globals, || {\n+        rustc_span::SESSION_GLOBALS.set(&ast_session_globals.span_session_globals, f)\n+    })\n }\n \n-pub fn with_default_globals<R>(f: impl FnOnce() -> R) -> R {\n-    with_globals(DEFAULT_EDITION, f)\n+pub fn with_default_session_globals<R>(f: impl FnOnce() -> R) -> R {\n+    with_session_globals(DEFAULT_EDITION, f)\n }\n \n-scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n+scoped_tls::scoped_thread_local!(pub static SESSION_GLOBALS: SessionGlobals);\n \n pub fn mark_used(attr: &Attribute) {\n     debug!(\"marking {:?} as used\", attr);\n-    GLOBALS.with(|globals| {\n-        globals.used_attrs.lock().insert(attr.id);\n+    SESSION_GLOBALS.with(|session_globals| {\n+        session_globals.used_attrs.lock().insert(attr.id);\n     });\n }\n \n pub fn is_used(attr: &Attribute) -> bool {\n-    GLOBALS.with(|globals| globals.used_attrs.lock().contains(attr.id))\n+    SESSION_GLOBALS.with(|session_globals| session_globals.used_attrs.lock().contains(attr.id))\n }\n \n pub fn mark_known(attr: &Attribute) {\n     debug!(\"marking {:?} as known\", attr);\n-    GLOBALS.with(|globals| {\n-        globals.known_attrs.lock().insert(attr.id);\n+    SESSION_GLOBALS.with(|session_globals| {\n+        session_globals.known_attrs.lock().insert(attr.id);\n     });\n }\n \n pub fn is_known(attr: &Attribute) -> bool {\n-    GLOBALS.with(|globals| globals.known_attrs.lock().contains(attr.id))\n+    SESSION_GLOBALS.with(|session_globals| session_globals.known_attrs.lock().contains(attr.id))\n }\n \n pub fn is_known_lint_tool(m_item: Ident) -> bool {"}, {"sha": "ffd2aa61f286677204716fa826efc80490ebae8f", "filename": "src/librustc_ast/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ast%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ast%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Flib.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -43,7 +43,7 @@ pub mod util {\n \n pub mod ast;\n pub mod attr;\n-pub use attr::{with_default_globals, with_globals, GLOBALS};\n+pub use attr::{with_default_session_globals, with_session_globals, SESSION_GLOBALS};\n pub mod crate_disambiguator;\n pub mod entry;\n pub mod expand;"}, {"sha": "e9b6c9759b64409db1808f9965bfb8022c5adc48", "filename": "src/librustc_ast/util/lev_distance/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ast%2Futil%2Flev_distance%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ast%2Futil%2Flev_distance%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Flev_distance%2Ftests.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -21,8 +21,8 @@ fn test_lev_distance() {\n \n #[test]\n fn test_find_best_match_for_name() {\n-    use crate::with_default_globals;\n-    with_default_globals(|| {\n+    use crate::with_default_session_globals;\n+    with_default_session_globals(|| {\n         let input = vec![Symbol::intern(\"aaab\"), Symbol::intern(\"aaabc\")];\n         assert_eq!(\n             find_best_match_for_name(input.iter(), \"aaaa\", None),"}, {"sha": "96377a4ae02faf68c2af06002a1e4344298a982c", "filename": "src/librustc_ast_pretty/pprust/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -1,7 +1,7 @@\n use super::*;\n \n use rustc_ast::ast;\n-use rustc_ast::with_default_globals;\n+use rustc_ast::with_default_session_globals;\n use rustc_span::source_map::respan;\n use rustc_span::symbol::Ident;\n \n@@ -25,7 +25,7 @@ fn variant_to_string(var: &ast::Variant) -> String {\n \n #[test]\n fn test_fun_to_string() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let abba_ident = Ident::from_str(\"abba\");\n \n         let decl =\n@@ -40,7 +40,7 @@ fn test_fun_to_string() {\n \n #[test]\n fn test_variant_to_string() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let ident = Ident::from_str(\"principal_skinner\");\n \n         let var = ast::Variant {"}, {"sha": "c53a64664a6395e568e921a80bf13791b7dac420", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -342,7 +342,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.target_features_whitelist = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         if tcx.sess.opts.actually_rustdoc {\n@@ -360,7 +360,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     provide_extern(providers);\n }\n \n-pub fn provide_extern(providers: &mut Providers<'_>) {\n+pub fn provide_extern(providers: &mut Providers) {\n     providers.wasm_import_module_map = |tcx, cnum| {\n         // Build up a map from DefId to a `NativeLib` structure, where\n         // `NativeLib` internally contains information about"}, {"sha": "67d4b2642c058d3cfe26ea411a7bbfd29a4c6cbf", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -241,11 +241,11 @@ impl CodegenBackend for LlvmCodegenBackend {\n         Box::new(metadata::LlvmMetadataLoader)\n     }\n \n-    fn provide(&self, providers: &mut ty::query::Providers<'_>) {\n+    fn provide(&self, providers: &mut ty::query::Providers) {\n         attributes::provide(providers);\n     }\n \n-    fn provide_extern(&self, providers: &mut ty::query::Providers<'_>) {\n+    fn provide_extern(&self, providers: &mut ty::query::Providers) {\n         attributes::provide_extern(providers);\n     }\n "}, {"sha": "2efbfcb995027bcef5825636460d6fe5746dcfd8", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -161,9 +161,9 @@ fn is_reachable_non_generic_provider_extern(tcx: TyCtxt<'_>, def_id: DefId) -> b\n }\n \n fn exported_symbols_provider_local(\n-    tcx: TyCtxt<'_>,\n+    tcx: TyCtxt<'tcx>,\n     cnum: CrateNum,\n-) -> &'tcx [(ExportedSymbol<'_>, SymbolExportLevel)] {\n+) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n@@ -366,7 +366,7 @@ fn is_unreachable_local_definition_provider(tcx: TyCtxt<'_>, def_id: DefId) -> b\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.reachable_non_generics = reachable_non_generics_provider;\n     providers.is_reachable_non_generic = is_reachable_non_generic_provider_local;\n     providers.exported_symbols = exported_symbols_provider_local;\n@@ -375,7 +375,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     providers.upstream_drop_glue_for = upstream_drop_glue_for_provider;\n }\n \n-pub fn provide_extern(providers: &mut Providers<'_>) {\n+pub fn provide_extern(providers: &mut Providers) {\n     providers.is_reachable_non_generic = is_reachable_non_generic_provider_extern;\n     providers.upstream_monomorphizations_for = upstream_monomorphizations_for_provider;\n }"}, {"sha": "4e257fba44ab69769cb04f89333e21b7fa076826", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -853,7 +853,7 @@ impl CrateInfo {\n     }\n }\n \n-pub fn provide_both(providers: &mut Providers<'_>) {\n+pub fn provide_both(providers: &mut Providers) {\n     providers.backend_optimization_level = |tcx, cratenum| {\n         let for_speed = match tcx.sess.opts.optimize {\n             // If globally no optimisation is done, #[optimize] has no effect."}, {"sha": "bdd73c083135299021638c22d4b3c8ce505dcdd4", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -138,12 +138,12 @@ pub struct CodegenResults {\n     pub crate_info: CrateInfo,\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     crate::back::symbol_export::provide(providers);\n     crate::base::provide_both(providers);\n }\n \n-pub fn provide_extern(providers: &mut Providers<'_>) {\n+pub fn provide_extern(providers: &mut Providers) {\n     crate::back::symbol_export::provide_extern(providers);\n     crate::base::provide_both(providers);\n }"}, {"sha": "3522ea0115334bba1ca196a42f9398470f98d437", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -55,8 +55,8 @@ pub trait CodegenBackend {\n     fn print_version(&self) {}\n \n     fn metadata_loader(&self) -> Box<MetadataLoaderDyn>;\n-    fn provide(&self, _providers: &mut Providers<'_>);\n-    fn provide_extern(&self, _providers: &mut Providers<'_>);\n+    fn provide(&self, _providers: &mut Providers);\n+    fn provide_extern(&self, _providers: &mut Providers);\n     fn codegen_crate<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "355e71ffb43293766d9a3b34004b83b0a9852054", "filename": "src/librustc_error_codes/error_codes/E0570.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_error_codes%2Ferror_codes%2FE0570.md", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_error_codes%2Ferror_codes%2FE0570.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0570.md?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -1,6 +1,6 @@\n The requested ABI is unsupported by the current target.\n \n-The rust compiler maintains for each target a blacklist of ABIs unsupported on\n+The rust compiler maintains for each target a list of unsupported ABIs on\n that target. If an ABI is present in such a list this usually means that the\n target / ABI combination is currently unsupported by llvm.\n "}, {"sha": "dcfcdbc63f29f95650d0cd2392dbab94fbf61a4e", "filename": "src/librustc_errors/json/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_errors%2Fjson%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_errors%2Fjson%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fjson%2Ftests.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -39,16 +39,16 @@ impl<T: Write> Write for Shared<T> {\n     }\n }\n \n-fn with_default_globals(f: impl FnOnce()) {\n-    let globals = rustc_span::Globals::new(rustc_span::edition::DEFAULT_EDITION);\n-    rustc_span::GLOBALS.set(&globals, || rustc_span::GLOBALS.set(&globals, f))\n+fn with_default_session_globals(f: impl FnOnce()) {\n+    let session_globals = rustc_span::SessionGlobals::new(rustc_span::edition::DEFAULT_EDITION);\n+    rustc_span::SESSION_GLOBALS.set(&session_globals, f);\n }\n \n /// Test the span yields correct positions in JSON.\n fn test_positions(code: &str, span: (u32, u32), expected_output: SpanTestData) {\n     let expected_output = TestData { spans: vec![expected_output] };\n \n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         sm.new_source_file(Path::new(\"test.rs\").to_owned().into(), code.to_owned());\n "}, {"sha": "c22d2a100c32ed9ee81e2566ab38e91fab7030b6", "filename": "src/librustc_expand/mut_visit/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -2,7 +2,7 @@ use crate::tests::{matches_codepattern, string_to_crate};\n \n use rustc_ast::ast;\n use rustc_ast::mut_visit::{self, MutVisitor};\n-use rustc_ast::with_default_globals;\n+use rustc_ast::with_default_session_globals;\n use rustc_ast_pretty::pprust;\n use rustc_span::symbol::Ident;\n \n@@ -38,7 +38,7 @@ macro_rules! assert_pred {\n // Make sure idents get transformed everywhere.\n #[test]\n fn ident_transformation() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let mut zz_visitor = ToZzIdentMutVisitor;\n         let mut krate =\n             string_to_crate(\"#[a] mod b {fn c (d : e, f : g) {h!(i,j,k);l;m}}\".to_string());\n@@ -55,7 +55,7 @@ fn ident_transformation() {\n // Make sure idents get transformed even inside macro defs.\n #[test]\n fn ident_transformation_in_defs() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let mut zz_visitor = ToZzIdentMutVisitor;\n         let mut krate = string_to_crate(\n             \"macro_rules! a {(b $c:expr $(d $e:token)f+ => \\"}, {"sha": "b3775c78e7345c568a274dfe2a6d788bfe3dfb3a", "filename": "src/librustc_expand/parse/lexer/tests.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -1,6 +1,6 @@\n use rustc_ast::token::{self, Token, TokenKind};\n use rustc_ast::util::comments::is_doc_comment;\n-use rustc_ast::with_default_globals;\n+use rustc_ast::with_default_session_globals;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{emitter::EmitterWriter, Handler};\n use rustc_parse::lexer::StringReader;\n@@ -33,7 +33,7 @@ fn setup<'a>(sm: &SourceMap, sess: &'a ParseSess, teststr: String) -> StringRead\n \n #[test]\n fn t1() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         let mut string_reader = setup(\n@@ -79,7 +79,7 @@ fn mk_lit(kind: token::LitKind, symbol: &str, suffix: Option<&str>) -> TokenKind\n \n #[test]\n fn doublecolon_parsing() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         check_tokenization(\n@@ -91,7 +91,7 @@ fn doublecolon_parsing() {\n \n #[test]\n fn doublecolon_parsing_2() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         check_tokenization(\n@@ -103,7 +103,7 @@ fn doublecolon_parsing_2() {\n \n #[test]\n fn doublecolon_parsing_3() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         check_tokenization(\n@@ -115,7 +115,7 @@ fn doublecolon_parsing_3() {\n \n #[test]\n fn doublecolon_parsing_4() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         check_tokenization(\n@@ -127,7 +127,7 @@ fn doublecolon_parsing_4() {\n \n #[test]\n fn character_a() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         assert_eq!(setup(&sm, &sh, \"'a'\".to_string()).next_token(), mk_lit(token::Char, \"a\", None),);\n@@ -136,7 +136,7 @@ fn character_a() {\n \n #[test]\n fn character_space() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         assert_eq!(setup(&sm, &sh, \"' '\".to_string()).next_token(), mk_lit(token::Char, \" \", None),);\n@@ -145,7 +145,7 @@ fn character_space() {\n \n #[test]\n fn character_escaped() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         assert_eq!(\n@@ -157,7 +157,7 @@ fn character_escaped() {\n \n #[test]\n fn lifetime_name() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         assert_eq!(\n@@ -169,7 +169,7 @@ fn lifetime_name() {\n \n #[test]\n fn raw_string() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         assert_eq!(\n@@ -181,7 +181,7 @@ fn raw_string() {\n \n #[test]\n fn literal_suffixes() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         macro_rules! test {\n@@ -232,7 +232,7 @@ fn line_doc_comments() {\n \n #[test]\n fn nested_block_comments() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         let mut lexer = setup(&sm, &sh, \"/* /* */ */'a'\".to_string());\n@@ -243,7 +243,7 @@ fn nested_block_comments() {\n \n #[test]\n fn crlf_comments() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n         let mut lexer = setup(&sm, &sh, \"// test\\r\\n/// test\\r\\n\".to_string());"}, {"sha": "fc9b9f2dab04e964d2119b400a419c6a6a1ec390", "filename": "src/librustc_expand/parse/tests.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Ftests.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use rustc_ast::visit;\n-use rustc_ast::with_default_globals;\n+use rustc_ast::with_default_session_globals;\n use rustc_ast_pretty::pprust::item_to_string;\n use rustc_errors::PResult;\n use rustc_parse::new_parser_from_source_str;\n@@ -50,15 +50,15 @@ fn string_to_item(source_str: String) -> Option<P<ast::Item>> {\n #[should_panic]\n #[test]\n fn bad_path_expr_1() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         string_to_expr(\"::abc::def::return\".to_string());\n     })\n }\n \n // Checks the token-tree-ization of macros.\n #[test]\n fn string_to_tts_macro() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let tts: Vec<_> =\n             string_to_stream(\"macro_rules! zip (($a)=>($a))\".to_string()).trees().collect();\n         let tts: &[TokenTree] = &tts[..];\n@@ -95,7 +95,7 @@ fn string_to_tts_macro() {\n \n #[test]\n fn string_to_tts_1() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let tts = string_to_stream(\"fn a (b : i32) { b; }\".to_string());\n \n         let expected = TokenStream::new(vec![\n@@ -130,7 +130,7 @@ fn string_to_tts_1() {\n \n #[test]\n fn parse_use() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let use_s = \"use foo::bar::baz;\";\n         let vitem = string_to_item(use_s.to_string()).unwrap();\n         let vitem_s = item_to_string(&vitem);\n@@ -145,7 +145,7 @@ fn parse_use() {\n \n #[test]\n fn parse_extern_crate() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let ex_s = \"extern crate foo;\";\n         let vitem = string_to_item(ex_s.to_string()).unwrap();\n         let vitem_s = item_to_string(&vitem);\n@@ -183,7 +183,7 @@ fn get_spans_of_pat_idents(src: &str) -> Vec<Span> {\n \n #[test]\n fn span_of_self_arg_pat_idents_are_correct() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let srcs = [\n             \"impl z { fn a (&self, &myarg: i32) {} }\",\n             \"impl z { fn a (&mut self, &myarg: i32) {} }\",\n@@ -207,7 +207,7 @@ fn span_of_self_arg_pat_idents_are_correct() {\n \n #[test]\n fn parse_exprs() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         // just make sure that they parse....\n         string_to_expr(\"3 + 4\".to_string());\n         string_to_expr(\"a::z.froob(b,&(987+3))\".to_string());\n@@ -216,7 +216,7 @@ fn parse_exprs() {\n \n #[test]\n fn attrs_fix_bug() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         string_to_item(\n             \"pub fn mk_file_writer(path: &Path, flags: &[FileFlag])\n                 -> Result<Box<Writer>, String> {\n@@ -237,7 +237,7 @@ let mut fflags: c_int = wb();\n \n #[test]\n fn crlf_doc_comments() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sess = sess();\n \n         let name_1 = FileName::Custom(\"crlf_source_1\".to_string());\n@@ -271,7 +271,7 @@ fn ttdelim_span() {\n         new_parser_from_source_str(sess, name, source).parse_expr()\n     }\n \n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let sess = sess();\n         let expr = parse_expr_from_source_str(\n             PathBuf::from(\"foo\").into(),\n@@ -299,7 +299,7 @@ fn ttdelim_span() {\n // See `recurse_into_file_modules` in the parser.\n #[test]\n fn out_of_line_mod() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let item = parse_item_from_source_str(\n             PathBuf::from(\"foo\").into(),\n             \"mod foo { struct S; mod this_does_not_exist; }\".to_owned(),"}, {"sha": "283ea0f68d9248f175253a391d33dc3350f0e3be", "filename": "src/librustc_expand/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_expand%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_expand%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Ftests.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -1,6 +1,6 @@\n use rustc_ast::ast;\n use rustc_ast::tokenstream::TokenStream;\n-use rustc_ast::with_default_globals;\n+use rustc_ast::with_default_session_globals;\n use rustc_parse::{new_parser_from_source_str, parser::Parser, source_file_to_stream};\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n@@ -124,7 +124,7 @@ impl<T: Write> Write for Shared<T> {\n }\n \n fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &str) {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let output = Arc::new(Mutex::new(Vec::new()));\n \n         let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));"}, {"sha": "bc171bec6ff7a88fda026c6cdecda8d3bfd9fdc3", "filename": "src/librustc_expand/tokenstream/tests.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -2,7 +2,7 @@ use crate::tests::string_to_stream;\n \n use rustc_ast::token;\n use rustc_ast::tokenstream::{TokenStream, TokenStreamBuilder, TokenTree};\n-use rustc_ast::with_default_globals;\n+use rustc_ast::with_default_session_globals;\n use rustc_span::{BytePos, Span, Symbol};\n use smallvec::smallvec;\n \n@@ -16,7 +16,7 @@ fn sp(a: u32, b: u32) -> Span {\n \n #[test]\n fn test_concat() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let test_res = string_to_ts(\"foo::bar::baz\");\n         let test_fst = string_to_ts(\"foo::bar\");\n         let test_snd = string_to_ts(\"::baz\");\n@@ -29,7 +29,7 @@ fn test_concat() {\n \n #[test]\n fn test_to_from_bijection() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let test_start = string_to_ts(\"foo::bar(baz)\");\n         let test_end = test_start.trees().collect();\n         assert_eq!(test_start, test_end)\n@@ -38,7 +38,7 @@ fn test_to_from_bijection() {\n \n #[test]\n fn test_eq_0() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let test_res = string_to_ts(\"foo\");\n         let test_eqs = string_to_ts(\"foo\");\n         assert_eq!(test_res, test_eqs)\n@@ -47,7 +47,7 @@ fn test_eq_0() {\n \n #[test]\n fn test_eq_1() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let test_res = string_to_ts(\"::bar::baz\");\n         let test_eqs = string_to_ts(\"::bar::baz\");\n         assert_eq!(test_res, test_eqs)\n@@ -56,7 +56,7 @@ fn test_eq_1() {\n \n #[test]\n fn test_eq_3() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let test_res = string_to_ts(\"\");\n         let test_eqs = string_to_ts(\"\");\n         assert_eq!(test_res, test_eqs)\n@@ -65,7 +65,7 @@ fn test_eq_3() {\n \n #[test]\n fn test_diseq_0() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let test_res = string_to_ts(\"::bar::baz\");\n         let test_eqs = string_to_ts(\"bar::baz\");\n         assert_eq!(test_res == test_eqs, false)\n@@ -74,7 +74,7 @@ fn test_diseq_0() {\n \n #[test]\n fn test_diseq_1() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let test_res = string_to_ts(\"(bar,baz)\");\n         let test_eqs = string_to_ts(\"bar,baz\");\n         assert_eq!(test_res == test_eqs, false)\n@@ -83,7 +83,7 @@ fn test_diseq_1() {\n \n #[test]\n fn test_is_empty() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let test0: TokenStream = Vec::<TokenTree>::new().into_iter().collect();\n         let test1: TokenStream =\n             TokenTree::token(token::Ident(Symbol::intern(\"a\"), false), sp(0, 1)).into();\n@@ -97,7 +97,7 @@ fn test_is_empty() {\n \n #[test]\n fn test_dotdotdot() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let mut builder = TokenStreamBuilder::new();\n         builder.push(TokenTree::token(token::Dot, sp(0, 1)).joint());\n         builder.push(TokenTree::token(token::Dot, sp(1, 2)).joint());"}, {"sha": "f89be02099e8c5a7f557c42b2c1a9ad8b7461f3d", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -38,7 +38,7 @@ pub struct Compiler {\n     pub(crate) crate_name: Option<String>,\n     pub(crate) register_lints: Option<Box<dyn Fn(&Session, &mut LintStore) + Send + Sync>>,\n     pub(crate) override_queries:\n-        Option<fn(&Session, &mut ty::query::Providers<'_>, &mut ty::query::Providers<'_>)>,\n+        Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::Providers)>,\n }\n \n impl Compiler {\n@@ -74,7 +74,7 @@ impl Compiler {\n \n /// Converts strings provided as `--cfg [cfgspec]` into a `crate_cfg`.\n pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String>)> {\n-    rustc_ast::with_default_globals(move || {\n+    rustc_ast::with_default_session_globals(move || {\n         let cfg = cfgspecs\n             .into_iter()\n             .map(|s| {\n@@ -153,7 +153,7 @@ pub struct Config {\n     ///\n     /// The second parameter is local providers and the third parameter is external providers.\n     pub override_queries:\n-        Option<fn(&Session, &mut ty::query::Providers<'_>, &mut ty::query::Providers<'_>)>,\n+        Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::Providers)>,\n \n     /// Registry of diagnostics codes.\n     pub registry: Registry,"}, {"sha": "6d85c2f1825447c8ebf6a577684a7f055a2cecc4", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -719,7 +719,7 @@ pub fn prepare_outputs(\n     Ok(outputs)\n }\n \n-pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn default_provide(providers: &mut ty::query::Providers) {\n     providers.analysis = analysis;\n     proc_macro_decls::provide(providers);\n     plugin::build::provide(providers);\n@@ -740,7 +740,7 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     rustc_codegen_ssa::provide(providers);\n }\n \n-pub fn default_provide_extern(providers: &mut ty::query::Providers<'_>) {\n+pub fn default_provide_extern(providers: &mut ty::query::Providers) {\n     rustc_metadata::provide_extern(providers);\n     rustc_codegen_ssa::provide_extern(providers);\n }"}, {"sha": "e91003b450c3c0087fb7881778019c27327f8007", "filename": "src/librustc_interface/proc_macro_decls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fproc_macro_decls.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -35,6 +35,6 @@ impl<'v> ItemLikeVisitor<'v> for Finder {\n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n }\n \n-pub(crate) fn provide(providers: &mut Providers<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { proc_macro_decls_static, ..*providers };\n }"}, {"sha": "651a77912c6d046ebff69a3a7f674fc0b3122849", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -73,7 +73,7 @@ fn mk_map<K: Ord, V>(entries: Vec<(K, V)>) -> BTreeMap<K, V> {\n // When the user supplies --test we should implicitly supply --cfg test\n #[test]\n fn test_switch_implies_cfg_test() {\n-    rustc_ast::with_default_globals(|| {\n+    rustc_ast::with_default_session_globals(|| {\n         let matches = optgroups().parse(&[\"--test\".to_string()]).unwrap();\n         let (sess, cfg) = mk_session(matches);\n         let cfg = build_configuration(&sess, to_crate_config(cfg));\n@@ -84,7 +84,7 @@ fn test_switch_implies_cfg_test() {\n // When the user supplies --test and --cfg test, don't implicitly add another --cfg test\n #[test]\n fn test_switch_implies_cfg_test_unless_cfg_test() {\n-    rustc_ast::with_default_globals(|| {\n+    rustc_ast::with_default_session_globals(|| {\n         let matches = optgroups().parse(&[\"--test\".to_string(), \"--cfg=test\".to_string()]).unwrap();\n         let (sess, cfg) = mk_session(matches);\n         let cfg = build_configuration(&sess, to_crate_config(cfg));\n@@ -96,20 +96,20 @@ fn test_switch_implies_cfg_test_unless_cfg_test() {\n \n #[test]\n fn test_can_print_warnings() {\n-    rustc_ast::with_default_globals(|| {\n+    rustc_ast::with_default_session_globals(|| {\n         let matches = optgroups().parse(&[\"-Awarnings\".to_string()]).unwrap();\n         let (sess, _) = mk_session(matches);\n         assert!(!sess.diagnostic().can_emit_warnings());\n     });\n \n-    rustc_ast::with_default_globals(|| {\n+    rustc_ast::with_default_session_globals(|| {\n         let matches =\n             optgroups().parse(&[\"-Awarnings\".to_string(), \"-Dwarnings\".to_string()]).unwrap();\n         let (sess, _) = mk_session(matches);\n         assert!(sess.diagnostic().can_emit_warnings());\n     });\n \n-    rustc_ast::with_default_globals(|| {\n+    rustc_ast::with_default_session_globals(|| {\n         let matches = optgroups().parse(&[\"-Adead_code\".to_string()]).unwrap();\n         let (sess, _) = mk_session(matches);\n         assert!(sess.diagnostic().can_emit_warnings());"}, {"sha": "fe091e920627cafea679b9e4df9766f27d082f77", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -141,7 +141,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n     crate::callbacks::setup_callbacks();\n \n     scoped_thread(cfg, || {\n-        rustc_ast::with_globals(edition, || {\n+        rustc_ast::with_session_globals(edition, || {\n             ty::tls::GCX_PTR.set(&Lock::new(0), || {\n                 if let Some(stderr) = stderr {\n                     io::set_panic(Some(box Sink(stderr.clone())));\n@@ -177,16 +177,17 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n \n     let with_pool = move |pool: &ThreadPool| pool.install(move || f());\n \n-    rustc_ast::with_globals(edition, || {\n-        rustc_ast::GLOBALS.with(|syntax_globals| {\n-            rustc_span::GLOBALS.with(|rustc_span_globals| {\n-                // The main handler runs for each Rayon worker thread and sets up\n-                // the thread local rustc uses. syntax_globals and rustc_span_globals are\n-                // captured and set on the new threads. ty::tls::with_thread_locals sets up\n-                // thread local callbacks from librustc_ast\n+    rustc_ast::with_session_globals(edition, || {\n+        rustc_ast::SESSION_GLOBALS.with(|ast_session_globals| {\n+            rustc_span::SESSION_GLOBALS.with(|span_session_globals| {\n+                // The main handler runs for each Rayon worker thread and sets\n+                // up the thread local rustc uses. ast_session_globals and\n+                // span_session_globals are captured and set on the new\n+                // threads. ty::tls::with_thread_locals sets up thread local\n+                // callbacks from librustc_ast.\n                 let main_handler = move |thread: ThreadBuilder| {\n-                    rustc_ast::GLOBALS.set(syntax_globals, || {\n-                        rustc_span::GLOBALS.set(rustc_span_globals, || {\n+                    rustc_ast::SESSION_GLOBALS.set(ast_session_globals, || {\n+                        rustc_span::SESSION_GLOBALS.set(span_session_globals, || {\n                             if let Some(stderr) = stderr {\n                                 io::set_panic(Some(box Sink(stderr.clone())));\n                             }"}, {"sha": "2e9cd962a7401e13f4979f6db1895b6686c0c84c", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -571,6 +571,6 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.lint_levels = lint_levels;\n }"}, {"sha": "6b5353e033fc8136dbac699037f66f5b4f5d27ec", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -88,7 +88,7 @@ pub use rustc_session::lint::Level::{self, *};\n pub use rustc_session::lint::{BufferedEarlyLint, FutureIncompatibleInfo, Lint, LintId};\n pub use rustc_session::lint::{LintArray, LintPass};\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     levels::provide(providers);\n     *providers = Providers { lint_mod, ..*providers };\n }"}, {"sha": "201a32d387779bc31084052007d0e86dc77394cc", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -17,7 +17,6 @@ use rustc_middle::middle::cstore::{CrateSource, CrateStore, EncodedMetadata};\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::query::QueryConfig;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::{CrateDisambiguator, Session};\n@@ -31,13 +30,11 @@ use std::any::Any;\n macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n       $($name:ident => $compute:block)*) => {\n-        pub fn provide_extern<$lt>(providers: &mut Providers<$lt>) {\n-            // HACK(eddyb) `$lt: $lt` forces `$lt` to be early-bound, which\n-            // allows the associated type in the return type to be normalized.\n-            $(fn $name<$lt: $lt, T: IntoArgs>(\n+        pub fn provide_extern(providers: &mut Providers) {\n+            $(fn $name<$lt>(\n                 $tcx: TyCtxt<$lt>,\n-                def_id_arg: T,\n-            ) -> <ty::queries::$name<$lt> as QueryConfig<TyCtxt<$lt>>>::Value {\n+                def_id_arg: ty::query::query_keys::$name<$lt>,\n+            ) -> ty::query::query_values::$name<$lt> {\n                 let _prof_timer =\n                     $tcx.prof.generic_activity(\"metadata_decode_entry\");\n \n@@ -243,7 +240,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     crate_extern_paths => { cdata.source().paths().cloned().collect() }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     // FIXME(#44234) - almost all of these queries have no sub-queries and\n     // therefore no actual inputs, they're just reading tables calculated in\n     // resolve! Does this work? Unsure! That's what the issue is about"}, {"sha": "250f4d5187f2fa7c920d53844276134f8abbdef2", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -1067,6 +1067,6 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.def_kind = |tcx, def_id| tcx.hir().def_kind(def_id.expect_local());\n }"}, {"sha": "485f9b7ce8a6c204e37933ab83e33cfc386dd6b1", "filename": "src/librustc_middle/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmod.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -62,7 +62,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.parent_module_from_def_id = |tcx, id| {\n         let hir = tcx.hir();\n         hir.local_def_id(hir.get_module_parent_node(hir.as_local_hir_id(id)))"}, {"sha": "c4a5bc302227d00e7006785724f564101f579e79", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -1060,8 +1060,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn create_global_ctxt(\n         s: &'tcx Session,\n         lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,\n-        local_providers: ty::query::Providers<'tcx>,\n-        extern_providers: ty::query::Providers<'tcx>,\n+        local_providers: ty::query::Providers,\n+        extern_providers: ty::query::Providers,\n         arena: &'tcx WorkerLocal<Arena<'tcx>>,\n         resolutions: ty::ResolverOutputs,\n         krate: &'tcx hir::Crate<'tcx>,\n@@ -2699,7 +2699,7 @@ fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {\n     t as *const () == u as *const ()\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     providers.in_scope_traits_map = |tcx, id| tcx.gcx.trait_map.get(&id);\n     providers.module_exports = |tcx, id| tcx.gcx.export_map.get(&id).map(|v| &v[..]);\n     providers.crate_name = |tcx, id| {"}, {"sha": "48d0fc1839e2f2fe66357e4a1908c5455b1ec5fd", "filename": "src/librustc_middle/ty/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ferase_regions.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -1,7 +1,7 @@\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::ty::{self, Ty, TyCtxt, TypeFlags};\n \n-pub(super) fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub(super) fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { erase_regions_ty, ..*providers };\n }\n "}, {"sha": "5afcb23f2f299033b93461335aff54e860953978", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -210,7 +210,7 @@ fn layout_raw<'tcx>(\n     })\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { layout_raw, ..*providers };\n }\n "}, {"sha": "7ca9569a0a13370b9dd226ac34bd2e1263669d06", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -2966,7 +2966,7 @@ pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n     None\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     context::provide(providers);\n     erase_regions::provide(providers);\n     layout::provide(providers);"}, {"sha": "60b93b3d44d28590b594aa10bae1b9eaf9cee548", "filename": "src/librustc_middle/ty/query/job.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fjob.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -13,16 +13,15 @@ pub unsafe fn handle_deadlock() {\n     let gcx_ptr = tls::GCX_PTR.with(|gcx_ptr| gcx_ptr as *const _);\n     let gcx_ptr = &*gcx_ptr;\n \n-    let rustc_span_globals =\n-        rustc_span::GLOBALS.with(|rustc_span_globals| rustc_span_globals as *const _);\n-    let rustc_span_globals = &*rustc_span_globals;\n-    let syntax_globals = rustc_ast::attr::GLOBALS.with(|syntax_globals| syntax_globals as *const _);\n-    let syntax_globals = &*syntax_globals;\n+    let span_session_globals = rustc_span::SESSION_GLOBALS.with(|ssg| ssg as *const _);\n+    let span_session_globals = &*span_session_globals;\n+    let ast_session_globals = rustc_ast::attr::SESSION_GLOBALS.with(|asg| asg as *const _);\n+    let ast_session_globals = &*ast_session_globals;\n     thread::spawn(move || {\n         tls::GCX_PTR.set(gcx_ptr, || {\n-            rustc_ast::attr::GLOBALS.set(syntax_globals, || {\n-                rustc_span::GLOBALS\n-                    .set(rustc_span_globals, || tls::with_global(|tcx| deadlock(tcx, &registry)))\n+            rustc_ast::attr::SESSION_GLOBALS.set(ast_session_globals, || {\n+                rustc_span::SESSION_GLOBALS\n+                    .set(span_session_globals, || tls::with_global(|tcx| deadlock(tcx, &registry)))\n             });\n         })\n     });"}, {"sha": "f3fa3634026fd73a4ee8b309307f359bf048c2e9", "filename": "src/librustc_middle/ty/query/plumbing.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -318,15 +318,34 @@ macro_rules! define_queries_inner {\n             }\n         }\n \n+        #[allow(nonstandard_style)]\n         pub mod queries {\n             use std::marker::PhantomData;\n \n-            $(#[allow(nonstandard_style)]\n-            pub struct $name<$tcx> {\n+            $(pub struct $name<$tcx> {\n                 data: PhantomData<&$tcx ()>\n             })*\n         }\n \n+        // HACK(eddyb) this is like the `impl QueryConfig for queries::$name`\n+        // below, but using type aliases instead of associated types, to bypass\n+        // the limitations around normalizing under HRTB - for example, this:\n+        // `for<'tcx> fn(...) -> <queries::$name<'tcx> as QueryConfig<TyCtxt<'tcx>>>::Value`\n+        // doesn't currently normalize to `for<'tcx> fn(...) -> query_values::$name<'tcx>`.\n+        // This is primarily used by the `provide!` macro in `rustc_metadata`.\n+        #[allow(nonstandard_style, unused_lifetimes)]\n+        pub mod query_keys {\n+            use super::*;\n+\n+            $(pub type $name<$tcx> = $($K)*;)*\n+        }\n+        #[allow(nonstandard_style, unused_lifetimes)]\n+        pub mod query_values {\n+            use super::*;\n+\n+            $(pub type $name<$tcx> = $V;)*\n+        }\n+\n         $(impl<$tcx> QueryConfig<TyCtxt<$tcx>> for queries::$name<$tcx> {\n             type Key = $($K)*;\n             type Value = $V;\n@@ -478,13 +497,16 @@ macro_rules! define_queries_inner {\n             input: ($(([$($modifiers)*] [$name] [$($K)*] [$V]))*)\n         }\n \n-        impl<$tcx> Copy for Providers<$tcx> {}\n-        impl<$tcx> Clone for Providers<$tcx> {\n+        impl Copy for Providers {}\n+        impl Clone for Providers {\n             fn clone(&self) -> Self { *self }\n         }\n     }\n }\n \n+// FIXME(eddyb) this macro (and others?) use `$tcx` and `'tcx` interchangeably.\n+// We should either not take `$tcx` at all and use `'tcx` everywhere, or use\n+// `$tcx` everywhere (even if that isn't necessary due to lack of hygiene).\n macro_rules! define_queries_struct {\n     (tcx: $tcx:tt,\n      input: ($(([$($modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n@@ -494,8 +516,8 @@ macro_rules! define_queries_struct {\n             /// `DepGraph::try_mark_green()` and the query infrastructure.\n             pub(crate) on_disk_cache: OnDiskCache<'tcx>,\n \n-            providers: IndexVec<CrateNum, Providers<$tcx>>,\n-            fallback_extern_providers: Box<Providers<$tcx>>,\n+            providers: IndexVec<CrateNum, Providers>,\n+            fallback_extern_providers: Box<Providers>,\n \n             $($(#[$attr])*  $name: QueryState<\n                 TyCtxt<$tcx>,\n@@ -505,8 +527,8 @@ macro_rules! define_queries_struct {\n \n         impl<$tcx> Queries<$tcx> {\n             pub(crate) fn new(\n-                providers: IndexVec<CrateNum, Providers<$tcx>>,\n-                fallback_extern_providers: Providers<$tcx>,\n+                providers: IndexVec<CrateNum, Providers>,\n+                fallback_extern_providers: Providers,\n                 on_disk_cache: OnDiskCache<'tcx>,\n             ) -> Self {\n                 Queries {\n@@ -539,11 +561,11 @@ macro_rules! define_queries_struct {\n macro_rules! define_provider_struct {\n     (tcx: $tcx:tt,\n      input: ($(([$($modifiers:tt)*] [$name:ident] [$K:ty] [$R:ty]))*)) => {\n-        pub struct Providers<$tcx> {\n-            $(pub $name: fn(TyCtxt<$tcx>, $K) -> $R,)*\n+        pub struct Providers {\n+            $(pub $name: for<$tcx> fn(TyCtxt<$tcx>, $K) -> $R,)*\n         }\n \n-        impl<$tcx> Default for Providers<$tcx> {\n+        impl Default for Providers {\n             fn default() -> Self {\n                 $(fn $name<$tcx>(_: TyCtxt<$tcx>, key: $K) -> $R {\n                     bug!(\"`tcx.{}({:?})` unsupported by its crate\","}, {"sha": "0903ef5089861737c190dbb57773ca4178a65e0c", "filename": "src/librustc_middle/util/bug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_middle%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Futil%2Fbug.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -47,6 +47,6 @@ pub fn trigger_delay_span_bug(tcx: TyCtxt<'_>, key: rustc_hir::def_id::DefId) {\n     );\n }\n \n-pub fn provide(providers: &mut crate::ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut crate::ty::query::Providers) {\n     *providers = crate::ty::query::Providers { trigger_delay_span_bug, ..*providers };\n }"}, {"sha": "beb5f1fe924ece19bac9235d3152dd4b0cdfef52", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -86,7 +86,7 @@ crate struct Upvar {\n \n const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { mir_borrowck, ..*providers };\n }\n "}, {"sha": "daa458f70f9a7f7f9d74eaf7c56666c14a283c2c", "filename": "src/librustc_mir/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -156,7 +156,7 @@ fn const_fn_is_allowed_fn_ptr(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         && tcx.lookup_const_stability(def_id).map(|stab| stab.allow_const_fn_ptr).unwrap_or(false)\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         is_const_fn_raw,\n         is_const_impl_raw: |tcx, def_id| is_const_impl_raw(tcx, def_id.expect_local()),"}, {"sha": "eff1dc135554fd9cc1efcdd9e1e21e52bedf9c8e", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -47,7 +47,7 @@ pub mod util;\n \n use rustc_middle::ty::query::Providers;\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     borrow_check::provide(providers);\n     const_eval::provide(providers);\n     shim::provide(providers);"}, {"sha": "ebea65c8f96f288f795346ed3bd39a2a348ace1f", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -880,9 +880,9 @@ where\n }\n \n fn collect_and_partition_mono_items(\n-    tcx: TyCtxt<'_>,\n+    tcx: TyCtxt<'tcx>,\n     cnum: CrateNum,\n-) -> (&'tcx DefIdSet, &'tcx [CodegenUnit<'_>]) {\n+) -> (&'tcx DefIdSet, &'tcx [CodegenUnit<'tcx>]) {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let collection_mode = match tcx.sess.opts.debugging_opts.print_mono_items {\n@@ -994,7 +994,7 @@ fn collect_and_partition_mono_items(\n     (tcx.arena.alloc(mono_items), codegen_units)\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.collect_and_partition_mono_items = collect_and_partition_mono_items;\n \n     providers.is_codegened_item = |tcx, def_id| {"}, {"sha": "98286cddea68b8d03085f7772b080adac3a37ca4", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -23,7 +23,7 @@ use crate::util::elaborate_drops::{self, DropElaborator, DropFlagMode, DropStyle\n use crate::util::expand_aggregate;\n use crate::util::patch::MirPatch;\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.mir_shims = make_shim;\n }\n "}, {"sha": "f218dd397c0c8d9e59558b9d7b5da3adede2e6e9", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -488,7 +488,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     }\n }\n \n-pub(crate) fn provide(providers: &mut Providers<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { unsafety_check_result, unsafe_derive_on_repr_packed, ..*providers };\n }\n "}, {"sha": "76904b7edd533525da8d826d0c9c0bbe6fb8fd1a", "filename": "src/librustc_mir/transform/instrument_coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir%2Ftransform%2Finstrument_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir%2Ftransform%2Finstrument_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstrument_coverage.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -25,7 +25,7 @@ pub struct InstrumentCoverage;\n \n /// The `query` provider for `CoverageInfo`, requested by `codegen_intrinsic_call()` when\n /// constructing the arguments for `llvm.instrprof.increment`.\n-pub(crate) fn provide(providers: &mut Providers<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n     providers.coverageinfo = |tcx, def_id| coverageinfo_from_mir(tcx, def_id);\n }\n "}, {"sha": "816cf08a6da488c739e6f0952a87857c08d5d9e4", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -43,7 +43,7 @@ pub mod uninhabited_enum_branching;\n pub mod unreachable_prop;\n pub mod validate;\n \n-pub(crate) fn provide(providers: &mut Providers<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n     self::check_unsafety::provide(providers);\n     *providers = Providers {\n         mir_keys,"}, {"sha": "be495e431eb3cf3262610cf47d3e13e1ee8bb380", "filename": "src/librustc_mir_build/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir_build%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_mir_build%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flib.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -23,7 +23,7 @@ mod lints;\n \n use rustc_middle::ty::query::Providers;\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.check_match = hair::pattern::check_match;\n     providers.lit_to_const = hair::constant::lit_to_const;\n     providers.mir_built = build::mir_built;"}, {"sha": "3244b35e89b0e0062d1bfa48e0fdfe5bb2a8830f", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -346,13 +346,16 @@ impl<'a> Parser<'a> {\n             if allow_unstable {\n                 // Give extra information about type ascription only if it's a nightly compiler.\n                 err.note(\n-                    \"`#![feature(type_ascription)]` lets you annotate an expression with a \\\n-                          type: `<expr>: <type>`\",\n-                );\n-                err.note(\n-                    \"see issue #23416 <https://github.com/rust-lang/rust/issues/23416> \\\n-                     for more information\",\n+                    \"`#![feature(type_ascription)]` lets you annotate an expression with a type: \\\n+                     `<expr>: <type>`\",\n                 );\n+                if !likely_path {\n+                    // Avoid giving too much info when it was likely an unrelated typo.\n+                    err.note(\n+                        \"see issue #23416 <https://github.com/rust-lang/rust/issues/23416> \\\n+                        for more information\",\n+                    );\n+                }\n             }\n         }\n     }\n@@ -1161,8 +1164,10 @@ impl<'a> Parser<'a> {\n             } &&\n             !self.token.is_reserved_ident() &&           // v `foo:bar(baz)`\n             self.look_ahead(1, |t| t == &token::OpenDelim(token::Paren))\n-            || self.look_ahead(1, |t| t == &token::Lt) &&     // `foo:bar<baz`\n-            self.look_ahead(2, |t| t.is_ident())\n+            || self.look_ahead(1, |t| t == &token::OpenDelim(token::Brace)) // `foo:bar {`\n+            || self.look_ahead(1, |t| t == &token::Colon) &&     // `foo:bar::<baz`\n+            self.look_ahead(2, |t| t == &token::Lt) &&\n+            self.look_ahead(3, |t| t.is_ident())\n             || self.look_ahead(1, |t| t == &token::Colon) &&  // `foo:bar:baz`\n             self.look_ahead(2, |t| t.is_ident())\n             || self.look_ahead(1, |t| t == &token::ModSep)"}, {"sha": "9fd0497fffee59519dada7ac76c3e491396aad3b", "filename": "src/librustc_parse_format/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_parse_format%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_parse_format%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse_format%2Ftests.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -144,8 +144,8 @@ fn format_align_fill() {\n }\n #[test]\n fn format_counts() {\n-    use rustc_span::{edition, Globals, GLOBALS};\n-    GLOBALS.set(&Globals::new(edition::DEFAULT_EDITION), || {\n+    use rustc_span::{edition, SessionGlobals, SESSION_GLOBALS};\n+    SESSION_GLOBALS.set(&SessionGlobals::new(edition::DEFAULT_EDITION), || {\n         same(\n             \"{:10x}\",\n             &[NextArgument(Argument {"}, {"sha": "3272ac8f9c73d9ab9341fd11ad79aa7996a71373", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -469,6 +469,6 @@ fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n         .visit_item_likes_in_module(module_def_id, &mut CheckAttrVisitor { tcx }.as_deep_visitor());\n }\n \n-pub(crate) fn provide(providers: &mut Providers<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_attrs, ..*providers };\n }"}, {"sha": "b1ebab3f2f8064de56ce69ea0aba654b6aa45a4f", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -62,7 +62,7 @@ fn check_mod_const_bodies(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut vis.as_deep_visitor());\n }\n \n-pub(crate) fn provide(providers: &mut Providers<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_const_bodies, ..*providers };\n }\n "}, {"sha": "3cce4b8d00e8b8572593d9596c9251fa01c52fdd", "filename": "src/librustc_passes/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostic_items.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -118,7 +118,7 @@ fn collect_all<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n     collector\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.diagnostic_items = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n         collect(tcx)"}, {"sha": "11612101e377131a7db58e8eb28cc5035d2baf62", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -217,6 +217,6 @@ pub fn find_entry_point(tcx: TyCtxt<'_>) -> Option<(LocalDefId, EntryFnType)> {\n     tcx.entry_fn(LOCAL_CRATE)\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { entry_fn, ..*providers };\n }"}, {"sha": "25edfad86e8ec8a932fa84ffd6188b9e33305b2f", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -18,7 +18,7 @@ fn check_mod_intrinsics(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut ItemVisitor { tcx }.as_deep_visitor());\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_intrinsics, ..*providers };\n }\n "}, {"sha": "809697134b759c89c02cf37341e725d78ce8977c", "filename": "src/librustc_passes/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flang_items.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -205,7 +205,7 @@ fn collect(tcx: TyCtxt<'_>) -> LanguageItems {\n     items\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.get_lang_items = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n         collect(tcx)"}, {"sha": "3f10c418811b71c62f94e248bb4637720c747942", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -37,7 +37,7 @@ pub mod stability;\n mod upvars;\n mod weak_lang_items;\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     check_attr::provide(providers);\n     check_const::provide(providers);\n     diagnostic_items::provide(providers);"}, {"sha": "922a475e5f4e480ad4ca700938883c5ba44cd43a", "filename": "src/librustc_passes/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib_features.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -135,7 +135,7 @@ fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n     collector.lib_features\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.get_lib_features = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n         collect(tcx)"}, {"sha": "3675a987644daef2d3cfea1f44b521e3007f3ffb", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -179,7 +179,7 @@ fn check_mod_liveness(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     );\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_liveness, ..*providers };\n }\n "}, {"sha": "9b4da71e5e961e9d0d1f4a8418aed02e4bceeaca", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -36,7 +36,7 @@ fn check_mod_loops(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     );\n }\n \n-pub(crate) fn provide(providers: &mut Providers<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_loops, ..*providers };\n }\n "}, {"sha": "c46f4856cfe3a84e520852ca3605ae69382a0dd2", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -425,6 +425,6 @@ fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) -> &'tcx HirIdSet\n     tcx.arena.alloc(reachable_context.reachable_symbols)\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { reachable_set, ..*providers };\n }"}, {"sha": "b2a89651881e5142252b86240e7a8caaaee86f9d", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -842,6 +842,6 @@ fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n     tcx.arena.alloc(scope_tree)\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { region_scope_tree, ..*providers };\n }"}, {"sha": "5bacab671ec146febe32eb4ddf6630d48821ac58", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -476,7 +476,7 @@ fn check_mod_unstable_api_usage(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut Checker { tcx }.as_deep_visitor());\n }\n \n-pub(crate) fn provide(providers: &mut Providers<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_unstable_api_usage, ..*providers };\n     providers.stability_index = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "3aed4942563ddcffb6267e9ede9554c862f2374f", "filename": "src/librustc_passes/upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_passes%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fupvars.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::Span;\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.upvars_mentioned = |tcx, def_id| {\n         if !tcx.is_closure(def_id) {\n             return None;"}, {"sha": "db2363316cd1a71bd7b18005a94d04b70fd941a3", "filename": "src/librustc_plugin_impl/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_plugin_impl%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_plugin_impl%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fbuild.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -57,6 +57,6 @@ fn plugin_registrar_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<DefId> {\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { plugin_registrar_fn, ..*providers };\n }"}, {"sha": "2c5cbed2192ef35b1a38f8e418bd66b9101845ae", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -2029,7 +2029,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         privacy_access_levels,\n         check_private_in_public,"}, {"sha": "561890723b30b4d315a183e96ab3409aac40e6a6", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 33, "deletions": 35, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -898,44 +898,42 @@ impl<'a> Resolver<'a> {\n         suggestion: Option<TypoSuggestion>,\n         span: Span,\n     ) -> bool {\n-        if let Some(suggestion) = suggestion {\n+        let suggestion = match suggestion {\n+            None => return false,\n             // We shouldn't suggest underscore.\n-            if suggestion.candidate == kw::Underscore {\n-                return false;\n-            }\n-\n-            let msg = format!(\n-                \"{} {} with a similar name exists\",\n-                suggestion.res.article(),\n-                suggestion.res.descr()\n-            );\n-            err.span_suggestion(\n-                span,\n-                &msg,\n-                suggestion.candidate.to_string(),\n-                Applicability::MaybeIncorrect,\n-            );\n-            let def_span = suggestion.res.opt_def_id().and_then(|def_id| match def_id.krate {\n-                LOCAL_CRATE => self.opt_span(def_id),\n-                _ => Some(\n-                    self.session\n-                        .source_map()\n-                        .guess_head_span(self.cstore().get_span_untracked(def_id, self.session)),\n+            Some(suggestion) if suggestion.candidate == kw::Underscore => return false,\n+            Some(suggestion) => suggestion,\n+        };\n+        let msg = format!(\n+            \"{} {} with a similar name exists\",\n+            suggestion.res.article(),\n+            suggestion.res.descr()\n+        );\n+        err.span_suggestion(\n+            span,\n+            &msg,\n+            suggestion.candidate.to_string(),\n+            Applicability::MaybeIncorrect,\n+        );\n+        let def_span = suggestion.res.opt_def_id().and_then(|def_id| match def_id.krate {\n+            LOCAL_CRATE => self.opt_span(def_id),\n+            _ => Some(\n+                self.session\n+                    .source_map()\n+                    .guess_head_span(self.cstore().get_span_untracked(def_id, self.session)),\n+            ),\n+        });\n+        if let Some(span) = def_span {\n+            err.span_label(\n+                self.session.source_map().guess_head_span(span),\n+                &format!(\n+                    \"similarly named {} `{}` defined here\",\n+                    suggestion.res.descr(),\n+                    suggestion.candidate.as_str(),\n                 ),\n-            });\n-            if let Some(span) = def_span {\n-                err.span_label(\n-                    self.session.source_map().guess_head_span(span),\n-                    &format!(\n-                        \"similarly named {} `{}` defined here\",\n-                        suggestion.res.descr(),\n-                        suggestion.candidate.as_str(),\n-                    ),\n-                );\n-            }\n-            return true;\n+            );\n         }\n-        false\n+        true\n     }\n \n     fn binding_description(&self, b: &NameBinding<'_>, ident: Ident, from_prelude: bool) -> String {"}, {"sha": "4595a96ce24f53d166a735c869950f2ed0234d10", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -262,8 +262,8 @@ impl<'a> Resolver<'a> {\n         }\n \n         let check_usable = |this: &mut Self, binding: &'a NameBinding<'a>| {\n-            if let Some(blacklisted_binding) = this.blacklisted_binding {\n-                if ptr::eq(binding, blacklisted_binding) {\n+            if let Some(unusable_binding) = this.unusable_binding {\n+                if ptr::eq(binding, unusable_binding) {\n                     return Err((Determined, Weak::No));\n                 }\n             }\n@@ -278,12 +278,12 @@ impl<'a> Resolver<'a> {\n             return resolution\n                 .binding\n                 .and_then(|binding| {\n-                    // If the primary binding is blacklisted, search further and return the shadowed\n-                    // glob binding if it exists. What we really want here is having two separate\n-                    // scopes in a module - one for non-globs and one for globs, but until that's done\n-                    // use this hack to avoid inconsistent resolution ICEs during import validation.\n-                    if let Some(blacklisted_binding) = self.blacklisted_binding {\n-                        if ptr::eq(binding, blacklisted_binding) {\n+                    // If the primary binding is unusable, search further and return the shadowed glob\n+                    // binding if it exists. What we really want here is having two separate scopes in\n+                    // a module - one for non-globs and one for globs, but until that's done use this\n+                    // hack to avoid inconsistent resolution ICEs during import validation.\n+                    if let Some(unusable_binding) = self.unusable_binding {\n+                        if ptr::eq(binding, unusable_binding) {\n                             return resolution.shadowed_glob;\n                         }\n                     }\n@@ -875,9 +875,9 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n     /// consolidate multiple unresolved import errors into a single diagnostic.\n     fn finalize_import(&mut self, import: &'b Import<'b>) -> Option<UnresolvedImportError> {\n         let orig_vis = import.vis.replace(ty::Visibility::Invisible);\n-        let orig_blacklisted_binding = match &import.kind {\n+        let orig_unusable_binding = match &import.kind {\n             ImportKind::Single { target_bindings, .. } => {\n-                Some(mem::replace(&mut self.r.blacklisted_binding, target_bindings[TypeNS].get()))\n+                Some(mem::replace(&mut self.r.unusable_binding, target_bindings[TypeNS].get()))\n             }\n             _ => None,\n         };\n@@ -891,8 +891,8 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             import.crate_lint(),\n         );\n         let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;\n-        if let Some(orig_blacklisted_binding) = orig_blacklisted_binding {\n-            self.r.blacklisted_binding = orig_blacklisted_binding;\n+        if let Some(orig_unusable_binding) = orig_unusable_binding {\n+            self.r.unusable_binding = orig_unusable_binding;\n         }\n         import.vis.set(orig_vis);\n         if let PathResult::Failed { .. } | PathResult::NonModule(..) = path_res {\n@@ -1013,8 +1013,8 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         self.r.per_ns(|this, ns| {\n             if !type_ns_only || ns == TypeNS {\n                 let orig_vis = import.vis.replace(ty::Visibility::Invisible);\n-                let orig_blacklisted_binding =\n-                    mem::replace(&mut this.blacklisted_binding, target_bindings[ns].get());\n+                let orig_unusable_binding =\n+                    mem::replace(&mut this.unusable_binding, target_bindings[ns].get());\n                 let orig_last_import_segment = mem::replace(&mut this.last_import_segment, true);\n                 let binding = this.resolve_ident_in_module(\n                     module,\n@@ -1025,7 +1025,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     import.span,\n                 );\n                 this.last_import_segment = orig_last_import_segment;\n-                this.blacklisted_binding = orig_blacklisted_binding;\n+                this.unusable_binding = orig_unusable_binding;\n                 import.vis.set(orig_vis);\n \n                 match binding {\n@@ -1291,8 +1291,8 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     return;\n                 }\n \n-                let orig_blacklisted_binding =\n-                    mem::replace(&mut this.blacklisted_binding, target_bindings[ns].get());\n+                let orig_unusable_binding =\n+                    mem::replace(&mut this.unusable_binding, target_bindings[ns].get());\n \n                 match this.early_resolve_ident_in_lexical_scope(\n                     target,\n@@ -1311,7 +1311,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     Err(_) => is_redundant[ns] = Some(false),\n                 }\n \n-                this.blacklisted_binding = orig_blacklisted_binding;\n+                this.unusable_binding = orig_unusable_binding;\n             }\n         });\n "}, {"sha": "679f5637686ff4eddbddd3c7a0cf59c4f7a3d552", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -842,14 +842,14 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         report_error(self, ns);\n                     }\n                     Some(LexicalScopeBinding::Item(binding)) => {\n-                        let orig_blacklisted_binding =\n-                            replace(&mut self.r.blacklisted_binding, Some(binding));\n+                        let orig_unusable_binding =\n+                            replace(&mut self.r.unusable_binding, Some(binding));\n                         if let Some(LexicalScopeBinding::Res(..)) = self\n                             .resolve_ident_in_lexical_scope(ident, ns, None, use_tree.prefix.span)\n                         {\n                             report_error(self, ns);\n                         }\n-                        self.r.blacklisted_binding = orig_blacklisted_binding;\n+                        self.r.unusable_binding = orig_unusable_binding;\n                     }\n                     None => {}\n                 }"}, {"sha": "e9b917168d67b14ce3dfdc1f273639cde2398add", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -278,7 +278,7 @@ type ScopeRef<'a> = &'a Scope<'a>;\n \n const ROOT_SCOPE: ScopeRef<'static> = &Scope::Root;\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n         resolve_lifetimes,\n "}, {"sha": "0f1618031d034eb62d9f9ba580c83248adb46470", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -867,7 +867,7 @@ pub struct Resolver<'a> {\n     last_import_segment: bool,\n     /// This binding should be ignored during in-module resolution, so that we don't get\n     /// \"self-confirming\" import resolutions during import validation.\n-    blacklisted_binding: Option<&'a NameBinding<'a>>,\n+    unusable_binding: Option<&'a NameBinding<'a>>,\n \n     /// The idents for the primitive types.\n     primitive_type_table: PrimitiveTypeTable,\n@@ -1266,7 +1266,7 @@ impl<'a> Resolver<'a> {\n             indeterminate_imports: Vec::new(),\n \n             last_import_segment: false,\n-            blacklisted_binding: None,\n+            unusable_binding: None,\n \n             primitive_type_table: PrimitiveTypeTable::new(),\n \n@@ -3102,6 +3102,6 @@ impl CrateLint {\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     late::lifetimes::provide(providers);\n }"}, {"sha": "7249894ba28be785b99485cb7ce07fafee762873", "filename": "src/librustc_span/hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_span%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_span%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fhygiene.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -27,7 +27,7 @@\n use crate::def_id::{DefId, CRATE_DEF_INDEX};\n use crate::edition::Edition;\n use crate::symbol::{kw, sym, Symbol};\n-use crate::GLOBALS;\n+use crate::SESSION_GLOBALS;\n use crate::{Span, DUMMY_SP};\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -174,7 +174,7 @@ impl HygieneData {\n     }\n \n     fn with<T, F: FnOnce(&mut HygieneData) -> T>(f: F) -> T {\n-        GLOBALS.with(|globals| f(&mut *globals.hygiene_data.borrow_mut()))\n+        SESSION_GLOBALS.with(|session_globals| f(&mut *session_globals.hygiene_data.borrow_mut()))\n     }\n \n     fn fresh_expn(&mut self, expn_data: Option<ExpnData>) -> ExpnId {"}, {"sha": "699871f1c61ce766cf2776ba8c2e65f5d631126c", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -65,16 +65,20 @@ use sha1::Sha1;\n #[cfg(test)]\n mod tests;\n \n-pub struct Globals {\n+// Per-session global variables: this struct is stored in thread-local storage\n+// in such a way that it is accessible without any kind of handle to all\n+// threads within the compilation session, but is not accessible outside the\n+// session.\n+pub struct SessionGlobals {\n     symbol_interner: Lock<symbol::Interner>,\n     span_interner: Lock<span_encoding::SpanInterner>,\n     hygiene_data: Lock<hygiene::HygieneData>,\n     source_map: Lock<Option<Lrc<SourceMap>>>,\n }\n \n-impl Globals {\n-    pub fn new(edition: Edition) -> Globals {\n-        Globals {\n+impl SessionGlobals {\n+    pub fn new(edition: Edition) -> SessionGlobals {\n+        SessionGlobals {\n             symbol_interner: Lock::new(symbol::Interner::fresh()),\n             span_interner: Lock::new(span_encoding::SpanInterner::default()),\n             hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),\n@@ -83,7 +87,7 @@ impl Globals {\n     }\n }\n \n-scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n+scoped_tls::scoped_thread_local!(pub static SESSION_GLOBALS: SessionGlobals);\n \n // FIXME: Perhaps this should not implement Rustc{Decodable, Encodable}\n //\n@@ -713,14 +717,14 @@ impl rustc_serialize::UseSpecializedDecodable for Span {\n /// the `SourceMap` provided to this function. If that is not available,\n /// we fall back to printing the raw `Span` field values\n pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {\n-    GLOBALS.with(|globals| {\n-        *globals.source_map.borrow_mut() = Some(source_map);\n+    SESSION_GLOBALS.with(|session_globals| {\n+        *session_globals.source_map.borrow_mut() = Some(source_map);\n     });\n     struct ClearSourceMap;\n     impl Drop for ClearSourceMap {\n         fn drop(&mut self) {\n-            GLOBALS.with(|globals| {\n-                globals.source_map.borrow_mut().take();\n+            SESSION_GLOBALS.with(|session_globals| {\n+                session_globals.source_map.borrow_mut().take();\n             });\n         }\n     }\n@@ -738,8 +742,8 @@ pub fn debug_with_source_map(\n }\n \n pub fn default_span_debug(span: Span, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    GLOBALS.with(|globals| {\n-        if let Some(source_map) = &*globals.source_map.borrow() {\n+    SESSION_GLOBALS.with(|session_globals| {\n+        if let Some(source_map) = &*session_globals.source_map.borrow() {\n             debug_with_source_map(span, f, source_map)\n         } else {\n             f.debug_struct(\"Span\")"}, {"sha": "6b672d344fa512104403bfddd16987c3bf9c83d2", "filename": "src/librustc_span/span_encoding.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_span%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_span%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fspan_encoding.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -5,7 +5,7 @@\n // See https://internals.rust-lang.org/t/rfc-compiler-refactoring-spans/1357/28\n \n use crate::hygiene::SyntaxContext;\n-use crate::GLOBALS;\n+use crate::SESSION_GLOBALS;\n use crate::{BytePos, SpanData};\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -136,5 +136,5 @@ impl SpanInterner {\n // If an interner exists, return it. Otherwise, prepare a fresh one.\n #[inline]\n fn with_span_interner<T, F: FnOnce(&mut SpanInterner) -> T>(f: F) -> T {\n-    GLOBALS.with(|globals| f(&mut *globals.span_interner.lock()))\n+    SESSION_GLOBALS.with(|session_globals| f(&mut *session_globals.span_interner.lock()))\n }"}, {"sha": "37fb7548e1d54f5b9dcaba2576d276840533e7e9", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -14,7 +14,7 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::str;\n \n-use crate::{Span, DUMMY_SP, GLOBALS};\n+use crate::{Span, DUMMY_SP, SESSION_GLOBALS};\n \n #[cfg(test)]\n mod tests;\n@@ -1387,7 +1387,7 @@ impl Ident {\n \n #[inline]\n fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n-    GLOBALS.with(|globals| f(&mut *globals.symbol_interner.lock()))\n+    SESSION_GLOBALS.with(|session_globals| f(&mut *session_globals.symbol_interner.lock()))\n }\n \n /// An alternative to `Symbol`, useful when the chars within the symbol need to"}, {"sha": "47da03424b7705f472e2ae95aa748065c2974c02", "filename": "src/librustc_span/symbol/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_span%2Fsymbol%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_span%2Fsymbol%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol%2Ftests.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -1,6 +1,6 @@\n use super::*;\n \n-use crate::{edition, Globals};\n+use crate::{edition, SessionGlobals};\n \n #[test]\n fn interner_tests() {\n@@ -18,7 +18,7 @@ fn interner_tests() {\n \n #[test]\n fn without_first_quote_test() {\n-    GLOBALS.set(&Globals::new(edition::DEFAULT_EDITION), || {\n+    SESSION_GLOBALS.set(&SessionGlobals::new(edition::DEFAULT_EDITION), || {\n         let i = Ident::from_str(\"'break\");\n         assert_eq!(i.without_first_quote().name, kw::Break);\n     });"}, {"sha": "012321026938e8643ccadd213890e59ee0b4e2dc", "filename": "src/librustc_symbol_mangling/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_symbol_mangling%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_symbol_mangling%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Flib.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -126,7 +126,7 @@ pub fn symbol_name_for_instance_in_crate(\n     compute_symbol_name(tcx, instance, || instantiating_crate)\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { symbol_name: symbol_name_provider, ..*providers };\n }\n "}, {"sha": "21dcec8d5e384ae0f9cef73305c540924cc03423", "filename": "src/librustc_target/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> TargetResult {\n             features: \"+neon,+fp-armv8,+apple-a7\".to_string(),\n             eliminate_frame_pointer: false,\n             max_atomic_width: Some(128),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             forces_embed_bitcode: true,\n             // Taken from a clang build on Xcode 11.4.1.\n             // These arguments are not actually invoked - they just have"}, {"sha": "2b0cd6cabf80f6619be97fde6d427d283ce05e59", "filename": "src/librustc_target/spec/aarch64_apple_tvos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> TargetResult {\n             features: \"+neon,+fp-armv8,+apple-a7\".to_string(),\n             eliminate_frame_pointer: false,\n             max_atomic_width: Some(128),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             forces_embed_bitcode: true,\n             ..base\n         },"}, {"sha": "aabfe458ca3b62f9bc81c9ce823698081080365a", "filename": "src/librustc_target/spec/aarch64_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -15,6 +15,6 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-        options: TargetOptions { abi_blacklist: super::arm_base::abi_blacklist(), ..base },\n+        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     })\n }"}, {"sha": "e4ecc7ac2dc801003783ceaff03f58e1c5401bfd", "filename": "src/librustc_target/spec/aarch64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -20,6 +20,6 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { abi_blacklist: super::arm_base::abi_blacklist(), ..base },\n+        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     })\n }"}, {"sha": "1278b89c7fde2a64b4852146aa6e0225b248a17b", "filename": "src/librustc_target/spec/aarch64_unknown_cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::cloudabi_base::opts();\n     base.max_atomic_width = Some(128);\n-    base.abi_blacklist = super::arm_base::abi_blacklist();\n+    base.unsupported_abis = super::arm_base::unsupported_abis();\n     base.linker = Some(\"aarch64-unknown-cloudabi-cc\".to_string());\n \n     Ok(Target {"}, {"sha": "5ae592c5139c8ee386705f44d8fdd3ccd559a1f2", "filename": "src/librustc_target/spec/aarch64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -15,6 +15,6 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { abi_blacklist: super::arm_base::abi_blacklist(), ..base },\n+        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     })\n }"}, {"sha": "5f978c03248b2ab85337255e0d0ad95a2f451621", "filename": "src/librustc_target/spec/aarch64_unknown_hermit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::hermit_base::opts();\n     base.max_atomic_width = Some(128);\n-    base.abi_blacklist = super::arm_base::abi_blacklist();\n+    base.unsupported_abis = super::arm_base::unsupported_abis();\n     base.linker = Some(\"aarch64-hermit-gcc\".to_string());\n \n     Ok(Target {"}, {"sha": "036162248c76e8e819680992b8010d713b0cc74e", "filename": "src/librustc_target/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}_mcount\".to_string(),\n             ..base\n         },"}, {"sha": "dc613f35d1d311129602b8309dbc2c6b329ed618", "filename": "src/librustc_target/spec/aarch64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}_mcount\".to_string(),\n             ..base\n         },"}, {"sha": "8c2f6fcff7304b90972e1e2f17a1d0780f8877d0", "filename": "src/librustc_target/spec/aarch64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n     base.max_atomic_width = Some(128);\n-    base.abi_blacklist = super::arm_base::abi_blacklist();\n+    base.unsupported_abis = super::arm_base::unsupported_abis();\n \n     Ok(Target {\n         llvm_target: \"aarch64-unknown-netbsd\".to_string(),"}, {"sha": "e012dce73fecb95911ec565588d75a93a8cf5ea1", "filename": "src/librustc_target/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> Result<Target, String> {\n         linker_is_gnu: true,\n         max_atomic_width: Some(128),\n         panic_strategy: PanicStrategy::Abort,\n-        abi_blacklist: super::arm_base::abi_blacklist(),\n+        unsupported_abis: super::arm_base::unsupported_abis(),\n         ..Default::default()\n     };\n     Ok(Target {"}, {"sha": "e2aa6e3b8f52c13a6cbab6c0c0f5a2f14506372f", "filename": "src/librustc_target/spec/aarch64_unknown_none_softfloat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none_softfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none_softfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none_softfloat.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> Result<Target, String> {\n         linker_is_gnu: true,\n         max_atomic_width: Some(128),\n         panic_strategy: PanicStrategy::Abort,\n-        abi_blacklist: super::arm_base::abi_blacklist(),\n+        unsupported_abis: super::arm_base::unsupported_abis(),\n         ..Default::default()\n     };\n     Ok(Target {"}, {"sha": "fd726c70f496bec51ba179bf9c465664f88cbc7a", "filename": "src/librustc_target/spec/aarch64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_openbsd.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::openbsd_base::opts();\n     base.max_atomic_width = Some(128);\n-    base.abi_blacklist = super::arm_base::abi_blacklist();\n+    base.unsupported_abis = super::arm_base::unsupported_abis();\n \n     Ok(Target {\n         llvm_target: \"aarch64-unknown-openbsd\".to_string(),"}, {"sha": "05f5d7d3a8b471683fe09cdb9863898d16d1de64", "filename": "src/librustc_target/spec/aarch64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Faarch64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_wrs_vxworks.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -15,6 +15,6 @@ pub fn target() -> TargetResult {\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"wrs\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { abi_blacklist: super::arm_base::abi_blacklist(), ..base },\n+        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     })\n }"}, {"sha": "b74d80dc6bb2b1892da790cae9ecd5c53ef3b294", "filename": "src/librustc_target/spec/arm_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_base.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -1,6 +1,6 @@\n use crate::spec::abi::Abi;\n \n // All the calling conventions trigger an assertion(Unsupported calling convention) in llvm on arm\n-pub fn abi_blacklist() -> Vec<Abi> {\n+pub fn unsupported_abis() -> Vec<Abi> {\n     vec![Abi::Stdcall, Abi::Fastcall, Abi::Vectorcall, Abi::Thiscall, Abi::Win64, Abi::SysV64]\n }"}, {"sha": "7109d043f519ce35399ddfa7a9312a0c886e0565", "filename": "src/librustc_target/spec/arm_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -17,6 +17,6 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { abi_blacklist: super::arm_base::abi_blacklist(), ..base },\n+        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     })\n }"}, {"sha": "2e3bad83e255969268cd7fcc0413e9868ad2c5aa", "filename": "src/librustc_target/spec/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n \n         options: TargetOptions {\n             features: \"+strict-align,+v6\".to_string(),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },"}, {"sha": "f8e357cce663600ab0bb74d80140da7aa413bd94", "filename": "src/librustc_target/spec/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n \n         options: TargetOptions {\n             features: \"+strict-align,+v6,+vfp2,-d32\".to_string(),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },"}, {"sha": "75753af9f30789003b592a98b1b429abeef68e77", "filename": "src/librustc_target/spec/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -22,7 +22,7 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },"}, {"sha": "c74c88e36125f74a4c2a63d35b4aadc3ecb74149", "filename": "src/librustc_target/spec/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -22,7 +22,7 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },"}, {"sha": "e0d1f2653ce0bfb99ede96659282f65b997aa269", "filename": "src/librustc_target/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -22,7 +22,7 @@ pub fn target() -> TargetResult {\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             max_atomic_width: Some(32),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             emit_debug_gdb_scripts: false,\n             ..Default::default()\n         },"}, {"sha": "e2d37d45bf1477f83f7f71003d4b55c825c93651", "filename": "src/librustc_target/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n             panic_strategy: PanicStrategy::Abort,\n             features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             emit_debug_gdb_scripts: false,\n             ..Default::default()\n         },"}, {"sha": "2580e8b0f851593ef08e6adf08e6563083a6a74d", "filename": "src/librustc_target/spec/armv4t_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> TargetResult {\n             features: \"+soft-float,+strict-align\".to_string(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },"}, {"sha": "f28421dc77593c1f23b5e3b0447ef131db863176", "filename": "src/librustc_target/spec/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> TargetResult {\n             features: \"+soft-float,+strict-align\".to_string(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },"}, {"sha": "fe1fa88883d3e05035a3c9ef9aeeaebd4cba8b07", "filename": "src/librustc_target/spec/armv5te_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n             features: \"+soft-float,+strict-align\".to_string(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },"}, {"sha": "1e06f837997a18d7cd4119d80c6b9fb12d7d84be", "filename": "src/librustc_target/spec/armv6_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             features: \"+v6,+vfp2,-d32\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },"}, {"sha": "ef40085888c81f86edc22fd0f12bda698d2bdf8f", "filename": "src/librustc_target/spec/armv6_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n \n         options: TargetOptions {\n             features: \"+v6,+vfp2,-d32\".to_string(),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"__mcount\".to_string(),\n             ..base\n         },"}, {"sha": "393843526a8cc29caeebf3d9d15047b31b257ad4", "filename": "src/librustc_target/spec/armv7_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             features: \"+v7,+vfp3,+neon\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n     })"}, {"sha": "38c6c31bd10dad047aeea6520d16d7c3c8b748ba", "filename": "src/librustc_target/spec/armv7_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -25,6 +25,6 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { abi_blacklist: super::arm_base::abi_blacklist(), ..base },\n+        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     })\n }"}, {"sha": "e3f4fe0b2efb6ed410547d1dbf2d0bfbaae3b073", "filename": "src/librustc_target/spec/armv7_unknown_cloudabi_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -5,7 +5,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"cortex-a8\".to_string();\n     base.max_atomic_width = Some(64);\n     base.features = \"+v7,+vfp3,+neon\".to_string();\n-    base.abi_blacklist = super::arm_base::abi_blacklist();\n+    base.unsupported_abis = super::arm_base::unsupported_abis();\n     base.linker = Some(\"armv7-unknown-cloudabi-eabihf-cc\".to_string());\n \n     Ok(Target {"}, {"sha": "80a9e6d7e3c8032ef20bccb0f8cdd3ca38f87a72", "filename": "src/librustc_target/spec/armv7_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },"}, {"sha": "0f175e9aef5e86401a7b52f3835e08cfb7ba23e7", "filename": "src/librustc_target/spec/armv7_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabi.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+thumb2,+soft-float,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },"}, {"sha": "27923457cd16eeb9809c0a8cd7ae1c95537eb53f", "filename": "src/librustc_target/spec/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -22,7 +22,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },"}, {"sha": "3d1bf05237fd99e1a2660b574dd7c69574ef6776", "filename": "src/librustc_target/spec/armv7_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabi.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+thumb2,+soft-float,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },"}, {"sha": "03d7d88b0d6d03617f730343d1bcdcd9cee9923b", "filename": "src/librustc_target/spec/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },"}, {"sha": "18fc9ed2ec63843239edba14141858856d847031", "filename": "src/librustc_target/spec/armv7_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"__mcount\".to_string(),\n             ..base\n         },"}, {"sha": "04d8702471af5a93558f05c85fadda8deae69fa8", "filename": "src/librustc_target/spec/armv7_wrs_vxworks_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n     })"}, {"sha": "1db279defff39e14db5df51ac07a4ceba8f56cb2", "filename": "src/librustc_target/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabi.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -28,7 +28,7 @@ pub fn target() -> Result<Target, String> {\n         disable_redzone: true,\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,\n-        abi_blacklist: super::arm_base::abi_blacklist(),\n+        unsupported_abis: super::arm_base::unsupported_abis(),\n         emit_debug_gdb_scripts: false,\n         ..Default::default()\n     };"}, {"sha": "22c2b306b43bb3c8071c1dbd70e29542f68b0165", "filename": "src/librustc_target/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabihf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> Result<Target, String> {\n         disable_redzone: true,\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,\n-        abi_blacklist: super::arm_base::abi_blacklist(),\n+        unsupported_abis: super::arm_base::unsupported_abis(),\n         emit_debug_gdb_scripts: false,\n         ..Default::default()\n     };"}, {"sha": "fed83997190a766e645a01083b84fbaffe8460c0", "filename": "src/librustc_target/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -22,7 +22,7 @@ pub fn target() -> TargetResult {\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             max_atomic_width: Some(32),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             emit_debug_gdb_scripts: false,\n             ..Default::default()\n         },"}, {"sha": "769ac13e51506f5c6a23d9d58079fcd7c29abca5", "filename": "src/librustc_target/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n             panic_strategy: PanicStrategy::Abort,\n             features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             emit_debug_gdb_scripts: false,\n             ..Default::default()\n         },"}, {"sha": "998a7b2e16489a57d37f0ec7c052b7cddea0e6e5", "filename": "src/librustc_target/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             features: \"+v7,+vfp4,+neon\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n     })"}, {"sha": "4a2dd8913185f421940fb139689bba38a9058b65", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -902,9 +902,10 @@ pub struct TargetOptions {\n     /// Panic strategy: \"unwind\" or \"abort\"\n     pub panic_strategy: PanicStrategy,\n \n-    /// A blacklist of ABIs unsupported by the current target. Note that generic\n-    /// ABIs are considered to be supported on all platforms and cannot be blacklisted.\n-    pub abi_blacklist: Vec<Abi>,\n+    /// A list of ABIs unsupported by the current target. Note that generic ABIs\n+    /// are considered to be supported on all platforms and cannot be marked\n+    /// unsupported.\n+    pub unsupported_abis: Vec<Abi>,\n \n     /// Whether or not linking dylibs to a static CRT is allowed.\n     pub crt_static_allows_dylibs: bool,\n@@ -1056,7 +1057,7 @@ impl Default for TargetOptions {\n             max_atomic_width: None,\n             atomic_cas: true,\n             panic_strategy: PanicStrategy::Unwind,\n-            abi_blacklist: vec![],\n+            unsupported_abis: vec![],\n             crt_static_allows_dylibs: false,\n             crt_static_default: false,\n             crt_static_respected: false,\n@@ -1125,7 +1126,7 @@ impl Target {\n     }\n \n     pub fn is_abi_supported(&self, abi: Abi) -> bool {\n-        abi.generic() || !self.options.abi_blacklist.contains(&abi)\n+        abi.generic() || !self.options.unsupported_abis.contains(&abi)\n     }\n \n     /// Loads a target descriptor from a JSON object.\n@@ -1474,22 +1475,29 @@ impl Target {\n         key!(llvm_args, list);\n         key!(use_ctors_section, bool);\n \n-        if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n-            for name in array.iter().filter_map(|abi| abi.as_string()) {\n-                match lookup_abi(name) {\n-                    Some(abi) => {\n-                        if abi.generic() {\n+        // NB: The old name is deprecated, but support for it is retained for\n+        // compatibility.\n+        for name in [\"abi-blacklist\", \"unsupported-abis\"].iter() {\n+            if let Some(array) = obj.find(name).and_then(Json::as_array) {\n+                for name in array.iter().filter_map(|abi| abi.as_string()) {\n+                    match lookup_abi(name) {\n+                        Some(abi) => {\n+                            if abi.generic() {\n+                                return Err(format!(\n+                                    \"The ABI \\\"{}\\\" is considered to be supported on all \\\n+                                    targets and cannot be marked unsupported\",\n+                                    abi\n+                                ));\n+                            }\n+\n+                            base.options.unsupported_abis.push(abi)\n+                        }\n+                        None => {\n                             return Err(format!(\n-                                \"The ABI \\\"{}\\\" is considered to be supported on \\\n-                                                all targets and cannot be blacklisted\",\n-                                abi\n+                                \"Unknown ABI \\\"{}\\\" in target specification\",\n+                                name\n                             ));\n                         }\n-\n-                        base.options.abi_blacklist.push(abi)\n-                    }\n-                    None => {\n-                        return Err(format!(\"Unknown ABI \\\"{}\\\" in target specification\", name));\n                     }\n                 }\n             }\n@@ -1705,11 +1713,11 @@ impl ToJson for Target {\n         target_option_val!(llvm_args);\n         target_option_val!(use_ctors_section);\n \n-        if default.abi_blacklist != self.options.abi_blacklist {\n+        if default.unsupported_abis != self.options.unsupported_abis {\n             d.insert(\n-                \"abi-blacklist\".to_string(),\n+                \"unsupported-abis\".to_string(),\n                 self.options\n-                    .abi_blacklist\n+                    .unsupported_abis\n                     .iter()\n                     .map(|&name| Abi::name(name).to_json())\n                     .collect::<Vec<_>>()"}, {"sha": "0c8f2a34301eea08370eab434a4d39b72afd3068", "filename": "src/librustc_target/spec/nvptx64_nvidia_cuda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Fnvptx64_nvidia_cuda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Fnvptx64_nvidia_cuda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fnvptx64_nvidia_cuda.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -55,7 +55,7 @@ pub fn target() -> TargetResult {\n \n             // FIXME: enable compilation tests for the target and\n             // create the tests for this.\n-            abi_blacklist: vec![\n+            unsupported_abis: vec![\n                 Abi::Cdecl,\n                 Abi::Stdcall,\n                 Abi::Fastcall,"}, {"sha": "977aa896f2520573df84a8c8b7eea9b708f7d078", "filename": "src/librustc_target/spec/riscv32i_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n-            abi_blacklist: super::riscv_base::abi_blacklist(),\n+            unsupported_abis: super::riscv_base::unsupported_abis(),\n             ..Default::default()\n         },\n     })"}, {"sha": "1a85cdff1315ca0f41a4fc2b1b2a89fd3ad606df", "filename": "src/librustc_target/spec/riscv32imac_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n-            abi_blacklist: super::riscv_base::abi_blacklist(),\n+            unsupported_abis: super::riscv_base::unsupported_abis(),\n             ..Default::default()\n         },\n     })"}, {"sha": "e3c1c6908a23af24a13cba44b2bf421fe0bf3a0c", "filename": "src/librustc_target/spec/riscv32imc_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n-            abi_blacklist: super::riscv_base::abi_blacklist(),\n+            unsupported_abis: super::riscv_base::unsupported_abis(),\n             ..Default::default()\n         },\n     })"}, {"sha": "f7a93c916d1d5d8557587391cd6ac78262fcf462", "filename": "src/librustc_target/spec/riscv64gc_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_linux_gnu.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -13,7 +13,7 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n-            abi_blacklist: super::riscv_base::abi_blacklist(),\n+            unsupported_abis: super::riscv_base::unsupported_abis(),\n             code_model: Some(CodeModel::Medium),\n             cpu: \"generic-rv64\".to_string(),\n             features: \"+m,+a,+f,+d,+c\".to_string(),"}, {"sha": "857af4ceb0d9f1635a8e3cfbd9af18b07720372a", "filename": "src/librustc_target/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n             relocation_model: RelocModel::Static,\n             code_model: Some(CodeModel::Medium),\n             emit_debug_gdb_scripts: false,\n-            abi_blacklist: super::riscv_base::abi_blacklist(),\n+            unsupported_abis: super::riscv_base::unsupported_abis(),\n             ..Default::default()\n         },\n     })"}, {"sha": "36fe7730f95bfcaea3837c556d2a93683ea804e5", "filename": "src/librustc_target/spec/riscv64imac_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n             relocation_model: RelocModel::Static,\n             code_model: Some(CodeModel::Medium),\n             emit_debug_gdb_scripts: false,\n-            abi_blacklist: super::riscv_base::abi_blacklist(),\n+            unsupported_abis: super::riscv_base::unsupported_abis(),\n             ..Default::default()\n         },\n     })"}, {"sha": "64cf890037e5132c75d3d05fa92fce63022436d0", "filename": "src/librustc_target/spec/riscv_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Friscv_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Friscv_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv_base.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -2,7 +2,7 @@ use crate::spec::abi::Abi;\n \n // All the calling conventions trigger an assertion(Unsupported calling\n // convention) in llvm on RISCV\n-pub fn abi_blacklist() -> Vec<Abi> {\n+pub fn unsupported_abis() -> Vec<Abi> {\n     vec![\n         Abi::Cdecl,\n         Abi::Stdcall,"}, {"sha": "2f7d15d5856f6887011d5e1ad4fee6c83a913e55", "filename": "src/librustc_target/spec/thumb_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -41,7 +41,7 @@ pub fn opts() -> TargetOptions {\n         // Similarly, one almost always never wants to use relocatable code because of the extra\n         // costs it involves.\n         relocation_model: RelocModel::Static,\n-        abi_blacklist: super::arm_base::abi_blacklist(),\n+        unsupported_abis: super::arm_base::unsupported_abis(),\n         // When this section is added a volatile load to its start address is also generated. This\n         // volatile load is a footgun as it can end up loading an invalid memory address, depending\n         // on how the user set up their linker scripts. This section adds pretty printer for stuff"}, {"sha": "37828026fe11303200bcfa4408a3393cb081e2c9", "filename": "src/librustc_target/spec/thumbv7a_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -37,7 +37,7 @@ pub fn target() -> TargetResult {\n             features: \"+vfp3,+neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n     })"}, {"sha": "29a4a9875e5b0dfa9d02b74186dcb68f64774512", "filename": "src/librustc_target/spec/thumbv7a_uwp_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             features: \"+vfp3,+neon\".to_string(),\n             cpu: \"generic\".to_string(),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n     })"}, {"sha": "c52f077f6f16c297beddf8d71c1fd7dfabc78bcb", "filename": "src/librustc_target/spec/thumbv7neon_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -25,6 +25,6 @@ pub fn target() -> TargetResult {\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { abi_blacklist: super::arm_base::abi_blacklist(), ..base },\n+        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     })\n }"}, {"sha": "78936948e642ee31d38551af23299872c8b47ad5", "filename": "src/librustc_target/spec/thumbv7neon_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n     })"}, {"sha": "f759c3eeb011c2c5eed4959ea4480f088b305ebc", "filename": "src/librustc_target/spec/thumbv7neon_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -29,7 +29,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },"}, {"sha": "e8006129e3ef8666f8148c34c7f185a97cbe282e", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -550,7 +550,7 @@ fn type_implements_trait<'tcx>(\n     tcx.infer_ctxt().enter(|infcx| infcx.predicate_must_hold_modulo_regions(&obligation))\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     object_safety::provide(providers);\n     structural_match::provide(providers);\n     *providers = ty::query::Providers {"}, {"sha": "f00d668e1ae5074ec7a67ecfa20049a7d642b437", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -792,6 +792,6 @@ fn contains_illegal_self_type_reference<'tcx>(\n     })\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { object_safety_violations, ..*providers };\n }"}, {"sha": "377d163d1043913cc4e92035bc8a2901563db11c", "filename": "src/librustc_trait_selection/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -271,7 +271,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.has_structural_eq_impls = |tcx, ty| {\n         tcx.infer_ctxt().enter(|infcx| {\n             let cause = ObligationCause::dummy();"}, {"sha": "0c5d57551f9c552976e84b9f046c107308be7181", "filename": "src/librustc_traits/chalk/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_traits%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_traits%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fmod.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -29,7 +29,7 @@ use crate::chalk::lowering::{LowerInto, ParamsSubstitutor};\n \n use chalk_solve::Solution;\n \n-crate fn provide(p: &mut Providers<'_>) {\n+crate fn provide(p: &mut Providers) {\n     *p = Providers { evaluate_goal, ..*p };\n }\n "}, {"sha": "ce00060b9b17270d2a6d473308758c98271545ea", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -17,7 +17,7 @@ use rustc_trait_selection::traits::{\n     Normalized, ObligationCause, TraitEngine, TraitEngineExt as _,\n };\n \n-crate fn provide(p: &mut Providers<'_>) {\n+crate fn provide(p: &mut Providers) {\n     *p = Providers { dropck_outlives, adt_dtorck_constraint, ..*p };\n }\n "}, {"sha": "2404b7ff4b54a69223b555ee0a9abaffd06ab15b", "filename": "src/librustc_traits/evaluate_obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fevaluate_obligation.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -7,7 +7,7 @@ use rustc_trait_selection::traits::{\n     EvaluationResult, Obligation, ObligationCause, OverflowError, SelectionContext, TraitQueryMode,\n };\n \n-crate fn provide(p: &mut Providers<'_>) {\n+crate fn provide(p: &mut Providers) {\n     *p = Providers { evaluate_obligation, ..*p };\n }\n "}, {"sha": "bda3da120e958893fbfd7082413197d836f82317", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -18,7 +18,7 @@ use rustc_trait_selection::traits::FulfillmentContext;\n use rustc_trait_selection::traits::TraitEngine;\n use smallvec::{smallvec, SmallVec};\n \n-crate fn provide(p: &mut Providers<'_>) {\n+crate fn provide(p: &mut Providers) {\n     *p = Providers { implied_outlives_bounds, ..*p };\n }\n "}, {"sha": "b8e23760ba5d4aeba071b7f9abb4170e28801dab", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -22,7 +22,7 @@ mod type_op;\n \n use rustc_middle::ty::query::Providers;\n \n-pub fn provide(p: &mut Providers<'_>) {\n+pub fn provide(p: &mut Providers) {\n     dropck_outlives::provide(p);\n     evaluate_obligation::provide(p);\n     implied_outlives_bounds::provide(p);"}, {"sha": "7092515af0882709a597517b3d1a875d19220082", "filename": "src/librustc_traits/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -7,7 +7,7 @@ use rustc_trait_selection::traits::query::normalize::AtExt;\n use rustc_trait_selection::traits::{Normalized, ObligationCause};\n use std::sync::atomic::Ordering;\n \n-crate fn provide(p: &mut Providers<'_>) {\n+crate fn provide(p: &mut Providers) {\n     *p = Providers { normalize_generic_arg_after_erasing_regions, ..*p };\n }\n "}, {"sha": "a8e376838e218c0c516ab22236dbb176a857816a", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -10,7 +10,7 @@ use rustc_trait_selection::traits::query::{\n use rustc_trait_selection::traits::{self, ObligationCause, SelectionContext};\n use std::sync::atomic::Ordering;\n \n-crate fn provide(p: &mut Providers<'_>) {\n+crate fn provide(p: &mut Providers) {\n     *p = Providers { normalize_projection_ty, ..*p };\n }\n "}, {"sha": "9cc9a35b38b8adfb5b9293cb89f147cdb8197214", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -21,7 +21,7 @@ use rustc_trait_selection::traits::query::{Fallible, NoSolution};\n use rustc_trait_selection::traits::{Normalized, Obligation, ObligationCause, TraitEngine};\n use std::fmt;\n \n-crate fn provide(p: &mut Providers<'_>) {\n+crate fn provide(p: &mut Providers) {\n     *p = Providers {\n         type_op_ascribe_user_type,\n         type_op_eq,"}, {"sha": "8d153e77f0b7d402e6791aeb48822bdd5703ae33", "filename": "src/librustc_ty/common_traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ty%2Fcommon_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ty%2Fcommon_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fcommon_traits.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -36,6 +36,6 @@ fn is_item_raw<'tcx>(\n     })\n }\n \n-pub(crate) fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub(crate) fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { is_copy_raw, is_sized_raw, is_freeze_raw, ..*providers };\n }"}, {"sha": "9f5ab7f8e4a0233ae6acaafb9520a0a316a7c714", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -243,6 +243,6 @@ fn resolve_associated_item<'tcx>(\n     })\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { resolve_instance, ..*providers };\n }"}, {"sha": "8f3b20c7aaf406ff682857c34c5b55ac77d375bf", "filename": "src/librustc_ty/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Flib.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -21,7 +21,7 @@ pub mod instance;\n mod needs_drop;\n mod ty;\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     common_traits::provide(providers);\n     needs_drop::provide(providers);\n     ty::provide(providers);"}, {"sha": "c4af95205fe27171ad23cb5995bcffe0d21298ea", "filename": "src/librustc_ty/needs_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ty%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ty%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fneeds_drop.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -183,6 +183,6 @@ fn adt_drop_tys(tcx: TyCtxt<'_>, def_id: DefId) -> Result<&ty::List<Ty<'_>>, Alw\n     res.map(|components| tcx.intern_type_list(&components))\n }\n \n-pub(crate) fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub(crate) fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { needs_drop_raw, adt_drop_tys, ..*providers };\n }"}, {"sha": "c99bc8a47e33b45524d1d55b51ab22e0fea0bc2d", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -494,7 +494,7 @@ fn projection_predicates(tcx: TyCtxt<'_>, def_id: DefId) -> &'_ ty::List<ty::Pre\n     }\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n         asyncness,\n         associated_item,"}, {"sha": "b1799c6eef3365cf5c5e20e8cb033cd44bbc0031", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -28,7 +28,7 @@ use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n \n use self::probe::{IsSuggestion, ProbeScope};\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     suggest::provide(providers);\n     probe::provide(providers);\n }"}, {"sha": "ba952df7e4e2861dc1b914c59d3e56f057cc1c9f", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -440,7 +440,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     providers.method_autoderef_steps = method_autoderef_steps;\n }\n "}, {"sha": "44ffabc4c266222617f11b17708e22c0330cf386", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -1292,7 +1292,7 @@ fn compute_all_traits(tcx: TyCtxt<'_>) -> Vec<DefId> {\n     traits\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     providers.all_traits = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         &tcx.arena.alloc(compute_all_traits(tcx))[..]"}, {"sha": "fa7360ce90051b36abb43327375ae195ffd67093", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -760,7 +760,7 @@ fn check_impl_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     wfcheck::check_impl_item(tcx, def_id);\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     method::provide(providers);\n     *providers = Providers {\n         typeck_item_bodies,"}, {"sha": "1483244717b4fda8609a91a63c89e13540f95c33", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -151,7 +151,7 @@ fn enforce_empty_impls_for_marker_traits(\n     struct_span_err!(tcx.sess, span, E0715, \"impls for marker traits cannot contain items\").emit();\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     use self::builtin::coerce_unsized_info;\n     use self::inherent_impls::{crate_inherent_impls, inherent_impls};\n     use self::inherent_impls_overlap::crate_inherent_impls_overlap_check;"}, {"sha": "4f88836118d52b2cee33125fe31df08e929427e9", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -62,7 +62,7 @@ fn collect_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     );\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         type_of: type_of::type_of,\n         generics_of,"}, {"sha": "891e482b43133d9fbc48573c1cde7491370f7210", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -69,7 +69,7 @@ fn check_mod_impl_wf(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n         .visit_item_likes_in_module(module_def_id, &mut ImplWfCheck { tcx, min_specialization });\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_impl_wf, ..*providers };\n }\n "}, {"sha": "9ba2545ba63cbc8d98d512826a4679d9667f3f01", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -309,7 +309,7 @@ fn check_for_entry_fn(tcx: TyCtxt<'_>) {\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     collect::provide(providers);\n     coherence::provide(providers);\n     check::provide(providers);"}, {"sha": "cc5858314597c2f49ce23547bcdb711493f410e5", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -13,7 +13,7 @@ mod implicit_infer;\n pub mod test;\n mod utils;\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { inferred_outlives_of, inferred_outlives_crate, ..*providers };\n }\n "}, {"sha": "b307363dc3ab05a8e648bc8c00efe8e4073a7523", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -26,7 +26,7 @@ pub mod test;\n /// Code for transforming variances.\n mod xform;\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { variances_of, crate_variances, ..*providers };\n }\n "}, {"sha": "8d1193e7f82b51cce1c8c8b1746b2e502ca46ce5", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n use rustc_ast::ast::*;\n use rustc_ast::attr;\n-use rustc_ast::with_default_globals;\n+use rustc_ast::with_default_session_globals;\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::DUMMY_SP;\n \n@@ -52,7 +52,7 @@ macro_rules! dummy_meta_item_list {\n \n #[test]\n fn test_cfg_not() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         assert_eq!(!Cfg::False, Cfg::True);\n         assert_eq!(!Cfg::True, Cfg::False);\n         assert_eq!(!word_cfg(\"test\"), Cfg::Not(Box::new(word_cfg(\"test\"))));\n@@ -70,7 +70,7 @@ fn test_cfg_not() {\n \n #[test]\n fn test_cfg_and() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let mut x = Cfg::False;\n         x &= Cfg::True;\n         assert_eq!(x, Cfg::False);\n@@ -154,7 +154,7 @@ fn test_cfg_and() {\n \n #[test]\n fn test_cfg_or() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let mut x = Cfg::True;\n         x |= Cfg::False;\n         assert_eq!(x, Cfg::True);\n@@ -238,7 +238,7 @@ fn test_cfg_or() {\n \n #[test]\n fn test_parse_ok() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let mi = dummy_meta_item_word(\"all\");\n         assert_eq!(Cfg::parse(&mi), Ok(word_cfg(\"all\")));\n \n@@ -271,7 +271,7 @@ fn test_parse_ok() {\n \n #[test]\n fn test_parse_err() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         let mi = attr::mk_name_value_item(Ident::from_str(\"foo\"), LitKind::Bool(false), DUMMY_SP);\n         assert!(Cfg::parse(&mi).is_err());\n \n@@ -303,7 +303,7 @@ fn test_parse_err() {\n \n #[test]\n fn test_render_short_html() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         assert_eq!(word_cfg(\"unix\").render_short_html(), \"Unix\");\n         assert_eq!(name_value_cfg(\"target_os\", \"macos\").render_short_html(), \"macOS\");\n         assert_eq!(name_value_cfg(\"target_pointer_width\", \"16\").render_short_html(), \"16-bit\");\n@@ -358,7 +358,7 @@ fn test_render_short_html() {\n \n #[test]\n fn test_render_long_html() {\n-    with_default_globals(|| {\n+    with_default_session_globals(|| {\n         assert_eq!(\n             word_cfg(\"unix\").render_long_html(),\n             \"This is supported on <strong>Unix</strong> only.\""}, {"sha": "34f91bfec5a88ee9bf9e505981c69fd0cf372e6b", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -628,6 +628,7 @@ impl Attributes {\n     /// Cache must be populated before call\n     pub fn links(&self, krate: &CrateNum) -> Vec<(String, String)> {\n         use crate::html::format::href;\n+        use crate::html::render::CURRENT_DEPTH;\n \n         self.links\n             .iter()\n@@ -648,12 +649,13 @@ impl Attributes {\n                         if let Some(ref fragment) = *fragment {\n                             let cache = cache();\n                             let url = match cache.extern_locations.get(krate) {\n-                                Some(&(_, ref src, ExternalLocation::Local)) => {\n-                                    src.to_str().expect(\"invalid file path\")\n+                                Some(&(_, _, ExternalLocation::Local)) => {\n+                                    let depth = CURRENT_DEPTH.with(|l| l.get());\n+                                    \"../\".repeat(depth)\n                                 }\n-                                Some(&(_, _, ExternalLocation::Remote(ref s))) => s,\n+                                Some(&(_, _, ExternalLocation::Remote(ref s))) => s.to_string(),\n                                 Some(&(_, _, ExternalLocation::Unknown)) | None => {\n-                                    \"https://doc.rust-lang.org/nightly\"\n+                                    String::from(\"https://doc.rust-lang.org/nightly\")\n                                 }\n                             };\n                             // This is a primitive so the url is done \"by hand\"."}, {"sha": "f769a0920d16bb92e942ffb075e08bdf17c2ee81", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -4054,6 +4054,10 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                         _ => None,\n                     })\n                 {\n+                    let deref_mut = v\n+                        .iter()\n+                        .filter(|i| i.inner_impl().trait_.is_some())\n+                        .any(|i| i.inner_impl().trait_.def_id() == c.deref_mut_trait_did);\n                     let inner_impl = target\n                         .def_id()\n                         .or(target\n@@ -4074,7 +4078,9 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                         let mut ret = impls\n                             .iter()\n                             .filter(|i| i.inner_impl().trait_.is_none())\n-                            .flat_map(|i| get_methods(i.inner_impl(), true, &mut used_links, true))\n+                            .flat_map(|i| {\n+                                get_methods(i.inner_impl(), true, &mut used_links, deref_mut)\n+                            })\n                             .collect::<Vec<_>>();\n                         // We want links' order to be reproducible so we don't use unstable sort.\n                         ret.sort();"}, {"sha": "4fcf6ceb44d507635840971204bb60c1cfeb9c96", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -602,6 +602,9 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                     kind = Some(ValueNS);\n                     disambiguator = Some(&prefix[..prefix.len() - 1]);\n                     link.trim_start_matches(prefix)\n+                } else if link.ends_with(\"!()\") {\n+                    kind = Some(MacroNS);\n+                    link.trim_end_matches(\"!()\")\n                 } else if link.ends_with(\"()\") {\n                     kind = Some(ValueNS);\n                     disambiguator = Some(\"fn\");"}, {"sha": "b40a5ef5950097130c4fe1b9cac07c2361421a0e", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -1,5 +1,4 @@\n use rustc_ast::ast;\n-use rustc_ast::with_globals;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::ErrorReported;\n use rustc_feature::UnstableFeatures;\n@@ -399,7 +398,7 @@ pub fn make_test(\n     // Uses librustc_ast to parse the doctest and find if there's a main fn and the extern\n     // crate already is included.\n     let result = rustc_driver::catch_fatal_errors(|| {\n-        with_globals(edition, || {\n+        rustc_ast::with_session_globals(edition, || {\n             use rustc_errors::emitter::EmitterWriter;\n             use rustc_errors::Handler;\n             use rustc_parse::maybe_new_parser_from_source_str;"}, {"sha": "54e986be9eccf2b2094796f2e68a9471070a3ebb", "filename": "src/test/rustdoc/auxiliary/my-core.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Frustdoc%2Fauxiliary%2Fmy-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Frustdoc%2Fauxiliary%2Fmy-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fmy-core.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -0,0 +1,19 @@\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+#![crate_type=\"rlib\"]\n+\n+#[lang = \"char\"]\n+impl char {\n+    pub fn len_utf8(self) -> usize {\n+        42\n+    }\n+}\n+\n+#[lang = \"sized\"]\n+pub trait Sized {}\n+\n+#[lang = \"clone\"]\n+pub trait Clone: Sized {}\n+\n+#[lang = \"copy\"]\n+pub trait Copy: Clone {}"}, {"sha": "e09d36594edf996f665559ed3524f0a7f3c31574", "filename": "src/test/rustdoc/intra-link-prim-methods-external-core.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Frustdoc%2Fintra-link-prim-methods-external-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Frustdoc%2Fintra-link-prim-methods-external-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-prim-methods-external-core.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -0,0 +1,18 @@\n+// aux-build:my-core.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+// ignore-windows\n+// ignore-tidy-linelength\n+\n+#![deny(intra_doc_link_resolution_failure)]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+#![crate_type = \"rlib\"]\n+\n+// @has intra_link_prim_methods_external_core/index.html\n+// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html\"]' 'char'\n+// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html#method.len_utf8\"]' 'char::len_utf8'\n+\n+//! A [`char`] and its [`char::len_utf8`].\n+\n+extern crate my_core;"}, {"sha": "d24cd2cbb5e20a563908ab920a72bbab1b8fd64f", "filename": "src/test/rustdoc/intra-link-prim-methods-local.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Frustdoc%2Fintra-link-prim-methods-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Frustdoc%2Fintra-link-prim-methods-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-prim-methods-local.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -0,0 +1,28 @@\n+#![deny(intra_doc_link_resolution_failure)]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+#![crate_type = \"rlib\"]\n+\n+// ignore-tidy-linelength\n+\n+// @has intra_link_prim_methods_local/index.html\n+// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html\"]' 'char'\n+// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html#method.len_utf8\"]' 'char::len_utf8'\n+\n+//! A [`char`] and its [`char::len_utf8`].\n+\n+#[lang = \"char\"]\n+impl char {\n+    pub fn len_utf8(self) -> usize {\n+        42\n+    }\n+}\n+\n+#[lang = \"sized\"]\n+pub trait Sized {}\n+\n+#[lang = \"clone\"]\n+pub trait Clone: Sized {}\n+\n+#[lang = \"copy\"]\n+pub trait Copy: Clone {}"}, {"sha": "76636b80b5eb5192f8c356ecf310518f01cf62f3", "filename": "src/test/rustdoc/intra-link-prim-methods.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Frustdoc%2Fintra-link-prim-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Frustdoc%2Fintra-link-prim-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-prim-methods.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -1,3 +1,9 @@\n #![deny(intra_doc_link_resolution_failure)]\n \n+// ignore-tidy-linelength\n+\n+// @has intra_link_prim_methods/index.html\n+// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html\"]' 'char'\n+// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html#method.len_utf8\"]' 'char::len_utf8'\n+\n //! A [`char`] and its [`char::len_utf8`]."}, {"sha": "751c10925c017aa7f23472dca961844d31345d2b", "filename": "src/test/rustdoc/intra-links.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Frustdoc%2Fintra-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Frustdoc%2Fintra-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-links.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -46,6 +46,8 @@ macro_rules! this_macro {\n     () => {};\n }\n \n+// @has intra_links/struct.ThisType.html '//a/@href' '../intra_links/macro.this_macro.html'\n+/// another link to [`this_macro!()`]\n pub struct ThisType;\n \n impl ThisType {\n@@ -70,7 +72,7 @@ pub trait SoAmbiguous {}\n pub fn SoAmbiguous() {}\n \n \n-// @has - '//a/@href' '../intra_links/struct.ThisType.html'\n+// @has intra_links/struct.SomeOtherType.html '//a/@href' '../intra_links/struct.ThisType.html'\n // @has - '//a/@href' '../intra_links/struct.ThisType.html#method.this_method'\n // @has - '//a/@href' '../intra_links/enum.ThisEnum.html'\n // @has - '//a/@href' '../intra_links/enum.ThisEnum.html#variant.ThisVariant'"}, {"sha": "28585dafa142a693d81a36dcb03f5cf6e1b6d118", "filename": "src/test/rustdoc/issue-74083.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Frustdoc%2Fissue-74083.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Frustdoc%2Fissue-74083.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-74083.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -0,0 +1,21 @@\n+use std::ops::Deref;\n+\n+pub struct Foo;\n+\n+impl Foo {\n+    pub fn foo(&mut self) {}\n+}\n+\n+// @has issue_74083/struct.Bar.html\n+// !@has - '//div[@class=\"sidebar-links\"]/a[@href=\"#method.foo\"]' 'foo'\n+pub struct Bar {\n+    foo: Foo,\n+}\n+\n+impl Deref for Bar {\n+    type Target = Foo;\n+\n+    fn deref(&self) -> &Foo {\n+        &self.foo\n+    }\n+}"}, {"sha": "836cb07d5d17221d18df157f2d6c8ed76b37ebdc", "filename": "src/test/ui-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -19,7 +19,7 @@ use std::path::Path;\n mod gravy;\n \n pub fn main() {\n-    rustc_ast::with_default_globals(|| parse());\n+    rustc_ast::with_default_session_globals(|| parse());\n \n     assert_eq!(gravy::foo(), 10);\n }"}, {"sha": "8286b7fdb66984dfe28ac24919c7522d9c339b3c", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -208,7 +208,7 @@ impl MutVisitor for AddParens {\n }\n \n fn main() {\n-    rustc_ast::with_default_globals(|| run());\n+    rustc_ast::with_default_session_globals(|| run());\n }\n \n fn run() {"}, {"sha": "c0de20822bacf4c4320a4c5d34ccf3a7bd76ad6a", "filename": "src/test/ui/issues/issue-29540.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Fissues%2Fissue-29540.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Fissues%2Fissue-29540.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29540.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -283,7 +283,7 @@ pub struct Config {\n     pub mds_beacon_interval: String,\n     pub mds_beacon_grace: String,\n     pub mds_enforce_unique_name: String,\n-    pub mds_blacklist_interval: String,\n+    pub mds_interval: String,\n     pub mds_session_timeout: String,\n     pub mds_freeze_tree_timeout: String,\n     pub mds_session_autoclose: String,"}, {"sha": "7275841ebb808da6eb92da54862be7b2af5b7c96", "filename": "src/test/ui/lifetime_starts_expressions.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -15,10 +15,9 @@ error: expected type, found keyword `loop`\n LL |     loop { break 'label: loop { break 'label 42; }; }\n    |                        - ^^^^ expected type\n    |                        |\n-   |                        tried to parse a type due to this type ascription\n+   |                        help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9ccf17a6cb10ea9833f9dbf79892672714a7dc81", "filename": "src/test/ui/parser/issue-35813-postfix-after-cast.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Fparser%2Fissue-35813-postfix-after-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Fparser%2Fissue-35813-postfix-after-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-35813-postfix-after-cast.stderr?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -280,12 +280,12 @@ error: casts cannot be followed by ?\n   --> $DIR/issue-35813-postfix-after-cast.rs:121:5\n    |\n LL |     Err(0u64): Result<u64,u64>?;\n-   |     ^^^^^^^^^-^^^^^^^^^^^^^^^^\n-   |              |\n-   |              help: maybe write a path separator here: `::`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+help: try surrounding the expression in parentheses\n+   |\n+LL |     (Err(0u64): Result<u64,u64>)?;\n+   |     ^                          ^\n \n error: casts cannot be followed by a function call\n   --> $DIR/issue-35813-postfix-after-cast.rs:145:5\n@@ -324,12 +324,12 @@ error: casts cannot be followed by `.await`\n   --> $DIR/issue-35813-postfix-after-cast.rs:155:5\n    |\n LL |     Box::pin(noop()): Pin<Box<_>>.await;\n-   |     ^^^^^^^^^^^^^^^^-^^^^^^^^^^^^\n-   |                     |\n-   |                     help: maybe write a path separator here: `::`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try surrounding the expression in parentheses\n    |\n-   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+LL |     (Box::pin(noop()): Pin<Box<_>>).await;\n+   |     ^                             ^\n \n error: casts cannot be followed by a field access\n   --> $DIR/issue-35813-postfix-after-cast.rs:167:5"}, {"sha": "c111b4a9bc706e038a585f018641b46e898a6b4a", "filename": "src/test/ui/suggestions/type-ascription-instead-of-method.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -7,7 +7,6 @@ LL |     Box:new(\"foo\".to_string())\n    |        help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to previous error\n "}, {"sha": "1d1999d350fe449b0ec06688a6aa973b959f845b", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path-2.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -7,7 +7,6 @@ LL |     vec![Ok(2)].into_iter().collect:<Result<Vec<_>,_>>()?;\n    |                                    help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to previous error\n "}, {"sha": "f38020dcc3820c74bcd8b976919b54d62a389d82", "filename": "src/test/ui/suggestions/type-ascription-instead-of-variant.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -7,7 +7,6 @@ LL |     let _ = Option:Some(\"\");\n    |                   help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to previous error\n "}, {"sha": "72c7c144b537d0702909a20069d168f5b1ab8523", "filename": "src/test/ui/type/ascription/issue-47666.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -10,7 +10,6 @@ LL |     let _ = Option:Some(vec![0, 1]);\n    |                   help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0423]: expected value, found enum `Option`"}, {"sha": "ec08cf209c21a509ffb5ab2b5faf7ff9a8257af6", "filename": "src/test/ui/type/ascription/issue-54516.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -7,7 +7,6 @@ LL |     println!(\"{}\", std::mem:size_of::<BTreeMap<u32, u32>>());\n    |                            help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error[E0423]: expected value, found module `std::mem`\n   --> $DIR/issue-54516.rs:4:20"}, {"sha": "2006362e1bb7e5a0584d5cbad89319e0e0f7261c", "filename": "src/test/ui/type/ascription/issue-60933.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -7,7 +7,6 @@ LL |     let u: usize = std::mem:size_of::<u32>();\n    |                            help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error[E0423]: expected value, found module `std::mem`\n   --> $DIR/issue-60933.rs:2:20"}, {"sha": "4f74d9b2a771c58b7ef4906b2668afd075bc8081", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -1 +1 @@\n-Subproject commit fede83ccf973457de319ba6fa0e36ead454d2e20\n+Subproject commit 4f74d9b2a771c58b7ef4906b2668afd075bc8081"}, {"sha": "97272f1a9c1b6e342f08adfcbc456fd3a14f9574", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -401,7 +401,7 @@ fn configure_lldb(config: &Config) -> Option<Config> {\n     }\n \n     if let Some(lldb_version) = config.lldb_version.as_ref() {\n-        if is_blacklisted_lldb_version(&lldb_version) {\n+        if lldb_version == \"350\" {\n             println!(\n                 \"WARNING: The used version of LLDB ({}) has a \\\n                  known issue that breaks debuginfo tests. See \\\n@@ -979,7 +979,3 @@ fn extract_lldb_version(full_version_line: Option<String>) -> (Option<String>, b\n     }\n     (None, false)\n }\n-\n-fn is_blacklisted_lldb_version(version: &str) -> bool {\n-    version == \"350\"\n-}"}, {"sha": "9aea859999ceab51fadcc53249641f777aabc311", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b08e62ea691916d2f063cac5aab4634128022/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -284,7 +284,7 @@ fn parse_args() -> (OutputFormat, PathBuf) {\n fn main() {\n     env_logger::init();\n     let (format, dst) = parse_args();\n-    let result = rustc_ast::with_default_globals(move || main_with_result(format, &dst));\n+    let result = rustc_ast::with_default_session_globals(move || main_with_result(format, &dst));\n     if let Err(e) = result {\n         panic!(\"{}\", e.to_string());\n     }"}, {"sha": "eb5ff1791be706d173b4f4c29e9c0529b4235c0e", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=e59b08e62ea691916d2f063cac5aab4634128022", "patch": "@@ -1 +1 @@\n-Subproject commit fd8101247749c5be6850d5cb5096f01a1867e5ba\n+Subproject commit eb5ff1791be706d173b4f4c29e9c0529b4235c0e"}]}