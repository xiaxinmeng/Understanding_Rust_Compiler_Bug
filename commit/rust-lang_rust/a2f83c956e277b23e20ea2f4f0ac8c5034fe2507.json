{"sha": "a2f83c956e277b23e20ea2f4f0ac8c5034fe2507", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZjgzYzk1NmUyNzdiMjNlMjBlYTJmNGYwYWM4YzUwMzRmZTI1MDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-16T13:48:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-16T13:48:23Z"}, "message": "Merge #9614\n\n9614: Parse input expressions for dbg! invocations in remove_dbg r=Veykril a=Veykril\n\nInstead of inspecting the input tokentree manually, parse the input as `,` delimited expressions instead and act on that. This simplifies the assist quite a bit.\r\n\r\nFixes #8455\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "5b1e1b35e13cf67fa024ab90b272a65573e844dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b1e1b35e13cf67fa024ab90b272a65573e844dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2f83c956e277b23e20ea2f4f0ac8c5034fe2507", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg8Y4nCRBK7hj4Ov3rIwAAfn4IAFljAC5JqHBfX8/jLWyeHh84\n9aNQBq5tYyhimibXQsfUHedgji1WGdL/gsHVp+68wK+w3NMzruSio6p315ef/sCg\nWLk7gOtz9STjnGv+d8+AfUFxWmywUteiqKEybYy0wliN8ho5kervnAjaNj12IQWD\nWVCsLt1Uyiw9s30vMuk2qcFbDQizA2IZ2U5A4SNntCc1FbpsgBs6KqMRuAfxTCqm\nO2M3QuGf1FzcUJRrAcScrIe4obxEu1z9CDXQxiPvpCNIVulK8trhd7OvpjOVZYva\nXXfQRSJUFGAIJB7oROyJ/a2IPzTMeNh0e26PyBjmm7eGg+vdaSbLda1BddcCJ3g=\n=UHjl\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b1e1b35e13cf67fa024ab90b272a65573e844dc\nparent ed83b243aaf776ff8287b273ef041d2fd4547b80\nparent c5bcd56433a0279d6ac1448f35a4c6588e422080\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626443303 +0000\ncommitter GitHub <noreply@github.com> 1626443303 +0000\n\nMerge #9614\n\n9614: Parse input expressions for dbg! invocations in remove_dbg r=Veykril a=Veykril\n\nInstead of inspecting the input tokentree manually, parse the input as `,` delimited expressions instead and act on that. This simplifies the assist quite a bit.\r\n\r\nFixes #8455\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f83c956e277b23e20ea2f4f0ac8c5034fe2507", "html_url": "https://github.com/rust-lang/rust/commit/a2f83c956e277b23e20ea2f4f0ac8c5034fe2507", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2f83c956e277b23e20ea2f4f0ac8c5034fe2507/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed83b243aaf776ff8287b273ef041d2fd4547b80", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed83b243aaf776ff8287b273ef041d2fd4547b80", "html_url": "https://github.com/rust-lang/rust/commit/ed83b243aaf776ff8287b273ef041d2fd4547b80"}, {"sha": "c5bcd56433a0279d6ac1448f35a4c6588e422080", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5bcd56433a0279d6ac1448f35a4c6588e422080", "html_url": "https://github.com/rust-lang/rust/commit/c5bcd56433a0279d6ac1448f35a4c6588e422080"}], "stats": {"total": 503, "additions": 120, "deletions": 383}, "files": [{"sha": "e6aab9e84813d9f3d8d5b8f70a46b69de4f11068", "filename": "crates/ide_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 120, "deletions": 383, "changes": 503, "blob_url": "https://github.com/rust-lang/rust/blob/a2f83c956e277b23e20ea2f4f0ac8c5034fe2507/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f83c956e277b23e20ea2f4f0ac8c5034fe2507/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=a2f83c956e277b23e20ea2f4f0ac8c5034fe2507", "patch": "@@ -1,6 +1,7 @@\n+use itertools::Itertools;\n use syntax::{\n     ast::{self, AstNode, AstToken},\n-    match_ast, SyntaxElement, TextRange, TextSize, T,\n+    match_ast, NodeOrToken, SyntaxElement, TextSize, T,\n };\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -22,440 +23,170 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // ```\n pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let macro_call = ctx.find_node_at_offset::<ast::MacroCall>()?;\n-    let new_contents = adjusted_macro_contents(&macro_call)?;\n+    let tt = macro_call.token_tree()?;\n+    let r_delim = NodeOrToken::Token(tt.right_delimiter_token()?);\n+    if macro_call.path()?.segment()?.name_ref()?.text() != \"dbg\"\n+        || macro_call.excl_token().is_none()\n+    {\n+        return None;\n+    }\n \n-    let parent = macro_call.syntax().parent();\n+    let mac_input = tt.syntax().children_with_tokens().skip(1).take_while(|it| *it != r_delim);\n+    let input_expressions = mac_input.into_iter().group_by(|tok| tok.kind() == T![,]);\n+    let input_expressions = input_expressions\n+        .into_iter()\n+        .filter_map(|(is_sep, group)| (!is_sep).then(|| group))\n+        .map(|mut tokens| ast::Expr::parse(&tokens.join(\"\")))\n+        .collect::<Result<Vec<ast::Expr>, _>>()\n+        .ok()?;\n \n-    let macro_text_range = if let Some(it) = parent.as_ref() {\n-        if new_contents.is_empty() {\n+    let parent = macro_call.syntax().parent()?;\n+    let (range, text) = match &*input_expressions {\n+        // dbg!()\n+        [] => {\n             match_ast! {\n-                match it {\n-                    ast::BlockExpr(_it) => {\n-                        macro_call.syntax()\n-                            .prev_sibling_or_token()\n-                            .and_then(whitespace_start)\n-                            .map(|start| TextRange::new(start, macro_call.syntax().text_range().end()))\n-                            .unwrap_or_else(|| macro_call.syntax().text_range())\n+                match parent {\n+                    ast::BlockExpr(__) => {\n+                        let range = macro_call.syntax().text_range();\n+                        let range = match whitespace_start(macro_call.syntax().prev_sibling_or_token()) {\n+                            Some(start) => range.cover_offset(start),\n+                            None => range,\n+                        };\n+                        (range, String::new())\n                     },\n                     ast::ExprStmt(it) => {\n-                        let start = it\n-                            .syntax()\n-                            .prev_sibling_or_token()\n-                            .and_then(whitespace_start)\n-                            .unwrap_or_else(|| it.syntax().text_range().start());\n-                        let end = it.syntax().text_range().end();\n-\n-                        TextRange::new(start, end)\n+                        let range = it.syntax().text_range();\n+                        let range = match whitespace_start(it.syntax().prev_sibling_or_token()) {\n+                            Some(start) => range.cover_offset(start),\n+                            None => range,\n+                        };\n+                        (range, String::new())\n                     },\n-                    _ => macro_call.syntax().text_range()\n+                    _ => (macro_call.syntax().text_range(), \"()\".to_owned())\n                 }\n             }\n-        } else {\n-            macro_call.syntax().text_range()\n         }\n-    } else {\n-        macro_call.syntax().text_range()\n-    };\n-\n-    let macro_end = if macro_call.semicolon_token().is_some() {\n-        macro_text_range.end() - TextSize::of(';')\n-    } else {\n-        macro_text_range.end()\n-    };\n-\n-    acc.add(\n-        AssistId(\"remove_dbg\", AssistKind::Refactor),\n-        \"Remove dbg!()\",\n-        macro_text_range,\n-        |builder| {\n-            builder.replace(\n-                TextRange::new(macro_text_range.start(), macro_end),\n-                if new_contents.is_empty() && parent.and_then(ast::LetStmt::cast).is_some() {\n-                    ast::make::expr_unit().to_string()\n-                } else {\n-                    new_contents\n-                },\n-            );\n-        },\n-    )\n-}\n-\n-fn whitespace_start(it: SyntaxElement) -> Option<TextSize> {\n-    Some(it.into_token().and_then(ast::Whitespace::cast)?.syntax().text_range().start())\n-}\n-\n-fn adjusted_macro_contents(macro_call: &ast::MacroCall) -> Option<String> {\n-    let contents = get_valid_macrocall_contents(macro_call, \"dbg\")?;\n-    let macro_text_with_brackets = macro_call.token_tree()?.syntax().text();\n-    let macro_text_in_brackets = macro_text_with_brackets.slice(TextRange::new(\n-        TextSize::of('('),\n-        macro_text_with_brackets.len() - TextSize::of(')'),\n-    ));\n-\n-    Some(\n-        if !is_leaf_or_control_flow_expr(macro_call)\n-            && needs_parentheses_around_macro_contents(contents)\n-        {\n-            format!(\"({})\", macro_text_in_brackets)\n-        } else {\n-            macro_text_in_brackets.to_string()\n-        },\n-    )\n-}\n-\n-fn is_leaf_or_control_flow_expr(macro_call: &ast::MacroCall) -> bool {\n-    macro_call.syntax().next_sibling().is_none()\n-        || match macro_call.syntax().parent() {\n-            Some(parent) => match_ast! {\n-                match parent {\n-                    ast::Condition(_it) => true,\n-                    ast::MatchExpr(_it) => true,\n+        // dbg!(expr0)\n+        [expr] => {\n+            let wrap = match ast::Expr::cast(parent) {\n+                Some(parent) => match (expr, parent) {\n+                    (ast::Expr::CastExpr(_), ast::Expr::CastExpr(_)) => false,\n+                    (\n+                        ast::Expr::BoxExpr(_) | ast::Expr::PrefixExpr(_) | ast::Expr::RefExpr(_),\n+                        ast::Expr::AwaitExpr(_)\n+                        | ast::Expr::CallExpr(_)\n+                        | ast::Expr::CastExpr(_)\n+                        | ast::Expr::FieldExpr(_)\n+                        | ast::Expr::IndexExpr(_)\n+                        | ast::Expr::MethodCallExpr(_)\n+                        | ast::Expr::RangeExpr(_)\n+                        | ast::Expr::TryExpr(_),\n+                    ) => true,\n+                    (\n+                        ast::Expr::BinExpr(_) | ast::Expr::CastExpr(_) | ast::Expr::RangeExpr(_),\n+                        ast::Expr::AwaitExpr(_)\n+                        | ast::Expr::BinExpr(_)\n+                        | ast::Expr::CallExpr(_)\n+                        | ast::Expr::CastExpr(_)\n+                        | ast::Expr::FieldExpr(_)\n+                        | ast::Expr::IndexExpr(_)\n+                        | ast::Expr::MethodCallExpr(_)\n+                        | ast::Expr::PrefixExpr(_)\n+                        | ast::Expr::RangeExpr(_)\n+                        | ast::Expr::RefExpr(_)\n+                        | ast::Expr::TryExpr(_),\n+                    ) => true,\n                     _ => false,\n-                }\n-            },\n-            None => false,\n+                },\n+                None => false,\n+            };\n+            (\n+                macro_call.syntax().text_range(),\n+                if wrap { format!(\"({})\", expr) } else { expr.to_string() },\n+            )\n         }\n-}\n-\n-/// Verifies that the given macro_call actually matches the given name\n-/// and contains proper ending tokens, then returns the contents between the ending tokens\n-fn get_valid_macrocall_contents(\n-    macro_call: &ast::MacroCall,\n-    macro_name: &str,\n-) -> Option<Vec<SyntaxElement>> {\n-    let path = macro_call.path()?;\n-    let name_ref = path.segment()?.name_ref()?;\n-\n-    // Make sure it is actually a dbg-macro call, dbg followed by !\n-    let excl = path.syntax().next_sibling_or_token()?;\n-    if name_ref.text() != macro_name || excl.kind() != T![!] {\n-        return None;\n-    }\n-\n-    let mut children_with_tokens = macro_call.token_tree()?.syntax().children_with_tokens();\n-    let first_child = children_with_tokens.next()?;\n-    let mut contents_between_brackets = children_with_tokens.collect::<Vec<_>>();\n-    let last_child = contents_between_brackets.pop()?;\n+        // dbg!(expr0, expr1, ...)\n+        exprs => (macro_call.syntax().text_range(), format!(\"({})\", exprs.iter().format(\", \"))),\n+    };\n \n-    match (first_child.kind(), last_child.kind()) {\n-        (T!['('], T![')']) | (T!['['], T![']']) | (T!['{'], T!['}']) => {\n-            Some(contents_between_brackets)\n-        }\n-        _ => None,\n-    }\n+    acc.add(AssistId(\"remove_dbg\", AssistKind::Refactor), \"Remove dbg!()\", range, |builder| {\n+        builder.replace(range, text);\n+    })\n }\n \n-fn needs_parentheses_around_macro_contents(macro_contents: Vec<SyntaxElement>) -> bool {\n-    if macro_contents.len() < 2 {\n-        return false;\n-    }\n-    let mut macro_contents = macro_contents.into_iter().peekable();\n-    let mut unpaired_brackets_in_contents = Vec::new();\n-    while let Some(element) = macro_contents.next() {\n-        match element.kind() {\n-            T!['('] | T!['['] | T!['{'] => unpaired_brackets_in_contents.push(element),\n-            T![')'] => {\n-                if !matches!(unpaired_brackets_in_contents.pop(), Some(correct_bracket) if correct_bracket.kind() == T!['('])\n-                {\n-                    return true;\n-                }\n-            }\n-            T![']'] => {\n-                if !matches!(unpaired_brackets_in_contents.pop(), Some(correct_bracket) if correct_bracket.kind() == T!['['])\n-                {\n-                    return true;\n-                }\n-            }\n-            T!['}'] => {\n-                if !matches!(unpaired_brackets_in_contents.pop(), Some(correct_bracket) if correct_bracket.kind() == T!['{'])\n-                {\n-                    return true;\n-                }\n-            }\n-            symbol_kind => {\n-                let symbol_not_in_bracket = unpaired_brackets_in_contents.is_empty();\n-                if symbol_not_in_bracket\n-                    && symbol_kind != T![:] // paths\n-                    && (symbol_kind != T![.] // field/method access\n-                        || macro_contents // range expressions consist of two SyntaxKind::Dot in macro invocations\n-                            .peek()\n-                            .map(|element| element.kind() == T![.])\n-                            .unwrap_or(false))\n-                    && symbol_kind != T![?] // try operator\n-                    && (symbol_kind.is_punct() || symbol_kind == T![as])\n-                {\n-                    return true;\n-                }\n-            }\n-        }\n-    }\n-    !unpaired_brackets_in_contents.is_empty()\n+fn whitespace_start(it: Option<SyntaxElement>) -> Option<TextSize> {\n+    Some(it?.into_token().and_then(ast::Whitespace::cast)?.syntax().text_range().start())\n }\n \n #[cfg(test)]\n mod tests {\n-    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n \n-    #[test]\n-    fn test_remove_dbg() {\n-        check_assist(remove_dbg, \"$0dbg!(1 + 1)\", \"1 + 1\");\n-\n-        check_assist(remove_dbg, \"dbg!$0((1 + 1))\", \"(1 + 1)\");\n-\n-        check_assist(remove_dbg, \"dbg!(1 $0+ 1)\", \"1 + 1\");\n-\n-        check_assist(remove_dbg, \"let _ = $0dbg!(1 + 1)\", \"let _ = 1 + 1\");\n-\n+    fn check(ra_fixture_before: &str, ra_fixture_after: &str) {\n         check_assist(\n             remove_dbg,\n-            \"\n-fn foo(n: usize) {\n-    if let Some(_) = dbg!(n.$0checked_sub(4)) {\n-        // ...\n-    }\n-}\n-\",\n-            \"\n-fn foo(n: usize) {\n-    if let Some(_) = n.checked_sub(4) {\n-        // ...\n-    }\n-}\n-\",\n+            &format!(\"fn main() {{\\n{}\\n}}\", ra_fixture_before),\n+            &format!(\"fn main() {{\\n{}\\n}}\", ra_fixture_after),\n         );\n-\n-        check_assist(remove_dbg, \"$0dbg!(Foo::foo_test()).bar()\", \"Foo::foo_test().bar()\");\n     }\n \n     #[test]\n-    fn test_remove_dbg_with_brackets_and_braces() {\n-        check_assist(remove_dbg, \"dbg![$01 + 1]\", \"1 + 1\");\n-        check_assist(remove_dbg, \"dbg!{$01 + 1}\", \"1 + 1\");\n+    fn test_remove_dbg() {\n+        check(\"$0dbg!(1 + 1)\", \"1 + 1\");\n+        check(\"dbg!$0(1 + 1)\", \"1 + 1\");\n+        check(\"dbg!(1 $0+ 1)\", \"1 + 1\");\n+        check(\"dbg![$01 + 1]\", \"1 + 1\");\n+        check(\"dbg!{$01 + 1}\", \"1 + 1\");\n     }\n \n     #[test]\n     fn test_remove_dbg_not_applicable() {\n-        check_assist_not_applicable(remove_dbg, \"$0vec![1, 2, 3]\");\n-        check_assist_not_applicable(remove_dbg, \"$0dbg(5, 6, 7)\");\n-        check_assist_not_applicable(remove_dbg, \"$0dbg!(5, 6, 7\");\n-    }\n-\n-    #[test]\n-    fn test_remove_dbg_target() {\n-        check_assist_target(\n-            remove_dbg,\n-            \"\n-fn foo(n: usize) {\n-    if let Some(_) = dbg!(n.$0checked_sub(4)) {\n-        // ...\n-    }\n-}\n-\",\n-            \"dbg!(n.checked_sub(4))\",\n-        );\n+        check_assist_not_applicable(remove_dbg, \"fn main() {$0vec![1, 2, 3]}\");\n+        check_assist_not_applicable(remove_dbg, \"fn main() {$0dbg(5, 6, 7)}\");\n+        check_assist_not_applicable(remove_dbg, \"fn main() {$0dbg!(5, 6, 7}\");\n     }\n \n     #[test]\n-    fn test_remove_dbg_keep_semicolon() {\n+    fn test_remove_dbg_keep_semicolon_in_let() {\n         // https://github.com/rust-analyzer/rust-analyzer/issues/5129#issuecomment-651399779\n-        // not quite though\n-        // adding a comment at the end of the line makes\n-        // the ast::MacroCall to include the semicolon at the end\n-        check_assist(\n-            remove_dbg,\n+        check(\n             r#\"let res = $0dbg!(1 * 20); // needless comment\"#,\n             r#\"let res = 1 * 20; // needless comment\"#,\n         );\n-    }\n-\n-    #[test]\n-    fn remove_dbg_from_non_leaf_simple_expression() {\n-        check_assist(\n-            remove_dbg,\n-            \"\n-fn main() {\n-    let mut a = 1;\n-    while dbg!$0(a) < 10000 {\n-        a += 1;\n-    }\n-}\n-\",\n-            \"\n-fn main() {\n-    let mut a = 1;\n-    while a < 10000 {\n-        a += 1;\n-    }\n-}\n-\",\n+        check(r#\"let res = $0dbg!(); // needless comment\"#, r#\"let res = (); // needless comment\"#);\n+        check(\n+            r#\"let res = $0dbg!(1, 2); // needless comment\"#,\n+            r#\"let res = (1, 2); // needless comment\"#,\n         );\n     }\n \n     #[test]\n-    fn test_remove_dbg_keep_expression() {\n-        check_assist(\n-            remove_dbg,\n-            r#\"let res = $0dbg!(a + b).foo();\"#,\n-            r#\"let res = (a + b).foo();\"#,\n-        );\n-\n-        check_assist(remove_dbg, r#\"let res = $0dbg!(2 + 2) * 5\"#, r#\"let res = (2 + 2) * 5\"#);\n-        check_assist(remove_dbg, r#\"let res = $0dbg![2 + 2] * 5\"#, r#\"let res = (2 + 2) * 5\"#);\n+    fn test_remove_dbg_cast_cast() {\n+        check(r#\"let res = $0dbg!(x as u32) as u32;\"#, r#\"let res = x as u32 as u32;\"#);\n     }\n \n     #[test]\n-    fn test_remove_dbg_method_chaining() {\n-        check_assist(\n-            remove_dbg,\n-            r#\"let res = $0dbg!(foo().bar()).baz();\"#,\n-            r#\"let res = foo().bar().baz();\"#,\n-        );\n-        check_assist(\n-            remove_dbg,\n-            r#\"let res = $0dbg!(foo.bar()).baz();\"#,\n-            r#\"let res = foo.bar().baz();\"#,\n-        );\n+    fn test_remove_dbg_prefix() {\n+        check(r#\"let res = $0dbg!(&result).foo();\"#, r#\"let res = (&result).foo();\"#);\n+        check(r#\"let res = &$0dbg!(&result);\"#, r#\"let res = &&result;\"#);\n+        check(r#\"let res = $0dbg!(!result) && true;\"#, r#\"let res = !result && true;\"#);\n     }\n \n     #[test]\n-    fn test_remove_dbg_field_chaining() {\n-        check_assist(remove_dbg, r#\"let res = $0dbg!(foo.bar).baz;\"#, r#\"let res = foo.bar.baz;\"#);\n-    }\n-\n-    #[test]\n-    fn test_remove_dbg_from_inside_fn() {\n-        check_assist_target(\n-            remove_dbg,\n-            r#\"\n-fn square(x: u32) -> u32 {\n-    x * x\n-}\n-\n-fn main() {\n-    let x = square(dbg$0!(5 + 10));\n-    println!(\"{}\", x);\n-}\"#,\n-            \"dbg!(5 + 10)\",\n-        );\n-\n-        check_assist(\n-            remove_dbg,\n-            r#\"\n-fn square(x: u32) -> u32 {\n-    x * x\n-}\n-\n-fn main() {\n-    let x = square(dbg$0!(5 + 10));\n-    println!(\"{}\", x);\n-}\"#,\n-            r#\"\n-fn square(x: u32) -> u32 {\n-    x * x\n-}\n-\n-fn main() {\n-    let x = square(5 + 10);\n-    println!(\"{}\", x);\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_remove_dbg_try_expr() {\n-        check_assist(\n-            remove_dbg,\n-            r#\"let res = $0dbg!(result?).foo();\"#,\n-            r#\"let res = result?.foo();\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_remove_dbg_await_expr() {\n-        check_assist(\n-            remove_dbg,\n-            r#\"let res = $0dbg!(fut.await).foo();\"#,\n-            r#\"let res = fut.await.foo();\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_remove_dbg_as_cast() {\n-        check_assist(\n-            remove_dbg,\n-            r#\"let res = $0dbg!(3 as usize).foo();\"#,\n-            r#\"let res = (3 as usize).foo();\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_remove_dbg_index_expr() {\n-        check_assist(\n-            remove_dbg,\n-            r#\"let res = $0dbg!(array[3]).foo();\"#,\n-            r#\"let res = array[3].foo();\"#,\n-        );\n-        check_assist(\n-            remove_dbg,\n-            r#\"let res = $0dbg!(tuple.3).foo();\"#,\n-            r#\"let res = tuple.3.foo();\"#,\n-        );\n+    fn test_remove_dbg_post_expr() {\n+        check(r#\"let res = $0dbg!(fut.await).foo();\"#, r#\"let res = fut.await.foo();\"#);\n+        check(r#\"let res = $0dbg!(result?).foo();\"#, r#\"let res = result?.foo();\"#);\n+        check(r#\"let res = $0dbg!(foo as u32).foo();\"#, r#\"let res = (foo as u32).foo();\"#);\n+        check(r#\"let res = $0dbg!(array[3]).foo();\"#, r#\"let res = array[3].foo();\"#);\n+        check(r#\"let res = $0dbg!(tuple.3).foo();\"#, r#\"let res = tuple.3.foo();\"#);\n     }\n \n     #[test]\n     fn test_remove_dbg_range_expr() {\n-        check_assist(\n-            remove_dbg,\n-            r#\"let res = $0dbg!(foo..bar).foo();\"#,\n-            r#\"let res = (foo..bar).foo();\"#,\n-        );\n-        check_assist(\n-            remove_dbg,\n-            r#\"let res = $0dbg!(foo..=bar).foo();\"#,\n-            r#\"let res = (foo..=bar).foo();\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_remove_dbg_followed_by_block() {\n-        check_assist(\n-            remove_dbg,\n-            r#\"fn foo() {\n-    if $0dbg!(x || y) {}\n-}\"#,\n-            r#\"fn foo() {\n-    if x || y {}\n-}\"#,\n-        );\n-        check_assist(\n-            remove_dbg,\n-            r#\"fn foo() {\n-    while let foo = $0dbg!(&x) {}\n-}\"#,\n-            r#\"fn foo() {\n-    while let foo = &x {}\n-}\"#,\n-        );\n-        check_assist(\n-            remove_dbg,\n-            r#\"fn foo() {\n-    if let foo = $0dbg!(&x) {}\n-}\"#,\n-            r#\"fn foo() {\n-    if let foo = &x {}\n-}\"#,\n-        );\n-        check_assist(\n-            remove_dbg,\n-            r#\"fn foo() {\n-    match $0dbg!(&x) {}\n-}\"#,\n-            r#\"fn foo() {\n-    match &x {}\n-}\"#,\n-        );\n+        check(r#\"let res = $0dbg!(foo..bar).foo();\"#, r#\"let res = (foo..bar).foo();\"#);\n+        check(r#\"let res = $0dbg!(foo..=bar).foo();\"#, r#\"let res = (foo..=bar).foo();\"#);\n     }\n \n     #[test]\n@@ -501,4 +232,10 @@ fn foo() {\n }\"#,\n         );\n     }\n+\n+    #[test]\n+    fn test_remove_multi_dbg() {\n+        check(r#\"$0dbg!(0, 1)\"#, r#\"(0, 1)\"#);\n+        check(r#\"$0dbg!(0, (1, 2))\"#, r#\"(0, (1, 2))\"#);\n+    }\n }"}]}