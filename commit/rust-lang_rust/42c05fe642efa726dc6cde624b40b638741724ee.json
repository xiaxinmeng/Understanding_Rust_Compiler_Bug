{"sha": "42c05fe642efa726dc6cde624b40b638741724ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYzA1ZmU2NDJlZmE3MjZkYzZjZGU2MjRiNDBiNjM4NzQxNzI0ZWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-10-22T06:02:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-10-22T06:52:36Z"}, "message": "Correct propagation of mutability from components to base in borrowck\n\nFixes #3828.", "tree": {"sha": "83157898659c1ed919751917858a40d5c1873c0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83157898659c1ed919751917858a40d5c1873c0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42c05fe642efa726dc6cde624b40b638741724ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42c05fe642efa726dc6cde624b40b638741724ee", "html_url": "https://github.com/rust-lang/rust/commit/42c05fe642efa726dc6cde624b40b638741724ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42c05fe642efa726dc6cde624b40b638741724ee/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "082d3d51674203d97fd21e6cda6181b4dccfb2e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/082d3d51674203d97fd21e6cda6181b4dccfb2e1", "html_url": "https://github.com/rust-lang/rust/commit/082d3d51674203d97fd21e6cda6181b4dccfb2e1"}], "stats": {"total": 126, "additions": 117, "deletions": 9}, "files": [{"sha": "71414e6e72453c334fe8d6ed227a39cf7da8ae19", "filename": "src/rustc/middle/borrowck/loan.rs", "status": "modified", "additions": 61, "deletions": 9, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/42c05fe642efa726dc6cde624b40b638741724ee/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c05fe642efa726dc6cde624b40b638741724ee/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs?ref=42c05fe642efa726dc6cde624b40b638741724ee", "patch": "@@ -106,23 +106,26 @@ impl LoanContext {\n           cat_discr(base, _) => {\n             self.loan(base, req_mutbl)\n           }\n-          cat_comp(cmt_base, comp_field(*)) |\n-          cat_comp(cmt_base, comp_index(*)) |\n-          cat_comp(cmt_base, comp_tuple) => {\n+          cat_comp(cmt_base, comp_field(_, m)) |\n+          cat_comp(cmt_base, comp_index(_, m)) => {\n             // For most components, the type of the embedded data is\n             // stable.  Therefore, the base structure need only be\n             // const---unless the component must be immutable.  In\n             // that case, it must also be embedded in an immutable\n             // location, or else the whole structure could be\n             // overwritten and the component along with it.\n-            self.loan_stable_comp(cmt, cmt_base, req_mutbl)\n+            self.loan_stable_comp(cmt, cmt_base, req_mutbl, m)\n+          }\n+          cat_comp(cmt_base, comp_tuple) => {\n+            // As above.\n+            self.loan_stable_comp(cmt, cmt_base, req_mutbl, m_imm)\n           }\n           cat_comp(cmt_base, comp_variant(enum_did)) => {\n             // For enums, the memory is unstable if there are multiple\n             // variants, because if the enum value is overwritten then\n             // the memory changes type.\n             if ty::enum_is_univariant(self.bccx.tcx, enum_did) {\n-                self.loan_stable_comp(cmt, cmt_base, req_mutbl)\n+                self.loan_stable_comp(cmt, cmt_base, req_mutbl, m_imm)\n             } else {\n                 self.loan_unstable_deref(cmt, cmt_base, req_mutbl)\n             }\n@@ -150,10 +153,59 @@ impl LoanContext {\n     fn loan_stable_comp(&self,\n                         cmt: cmt,\n                         cmt_base: cmt,\n-                        req_mutbl: ast::mutability) -> bckres<()> {\n-        let base_mutbl = match req_mutbl {\n-          m_imm => m_imm,\n-          m_const | m_mutbl => m_const\n+                        req_mutbl: ast::mutability,\n+                        comp_mutbl: ast::mutability) -> bckres<()> {\n+        // Determine the mutability that the base component must have,\n+        // given the required mutability of the pointer (`req_mutbl`)\n+        // and the declared mutability of the component (`comp_mutbl`).\n+        // This is surprisingly subtle.\n+        //\n+        // Note that the *declared* mutability of the component is not\n+        // necessarily the same as cmt.mutbl, since a component\n+        // declared as immutable but embedded in a mutable context\n+        // becomes mutable.  It's best to think of comp_mutbl as being\n+        // either MUTABLE or DEFAULT, not MUTABLE or IMMUTABLE.  We\n+        // should really patch up the AST to reflect this distinction.\n+        //\n+        // Let's consider the cases below:\n+        //\n+        // 1. mut required, mut declared: In this case, the base\n+        //    component must merely be const.  The reason is that it\n+        //    does not matter if the base component is borrowed as\n+        //    mutable or immutable, as the mutability of the base\n+        //    component is overridden in the field declaration itself\n+        //    (see `compile-fail/borrowck-mut-field-imm-base.rs`)\n+        //\n+        // 2. mut required, imm declared: This would only be legal if\n+        //    the component is embeded in a mutable context.  However,\n+        //    we detect mismatches between the mutability of the value\n+        //    as a whole and the required mutability in `issue_loan()`\n+        //    above.  In any case, presuming that the component IS\n+        //    embedded in a mutable context, both the component and\n+        //    the base must be loaned as MUTABLE.  This is to ensure\n+        //    that there is no loan of the base as IMMUTABLE, which\n+        //    would imply that the component must be IMMUTABLE too\n+        //    (see `compile-fail/borrowck-imm-field-imm-base.rs`).\n+        //\n+        // 3. mut required, const declared: this shouldn't really be\n+        //    possible, since I don't think you can declare a const\n+        //    field, but I guess if we DID permit such a declaration\n+        //    it would be equivalent to the case above?\n+        //\n+        // 4. imm required, * declared: In this case, the base must be\n+        //    immutable.  This is true regardless of what was declared\n+        //    for this subcomponent, this if the base is mutable, the\n+        //    subcomponent must be mutable.\n+        //    (see `compile-fail/borrowck-imm-field-mut-base.rs`).\n+        //\n+        // 5. const required, * declared: In this case, the base need\n+        //    only be const, since we don't ultimately care whether\n+        //    the subcomponent is mutable or not.\n+        let base_mutbl = match (req_mutbl, comp_mutbl) {\n+            (m_mutbl, m_mutbl) => m_const, // (1)\n+            (m_mutbl, _) => m_mutbl,       // (2, 3)\n+            (m_imm, _) => m_imm,           // (4)\n+            (m_const, _) => m_const        // (5)\n         };\n \n         do self.loan(cmt_base, base_mutbl).chain |_ok| {"}, {"sha": "69ff3b103786cf01c269481b5617e49d16f919ac", "filename": "src/test/compile-fail/borrowck-imm-field-imm-base.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/42c05fe642efa726dc6cde624b40b638741724ee/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-field-imm-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c05fe642efa726dc6cde624b40b638741724ee/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-field-imm-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-field-imm-base.rs?ref=42c05fe642efa726dc6cde624b40b638741724ee", "patch": "@@ -0,0 +1,17 @@\n+struct Foo {\n+    x: uint\n+}\n+\n+struct Bar {\n+    foo: Foo\n+}\n+\n+fn main() {\n+    let mut b = Bar { foo: Foo { x: 3 } };\n+    let p = &b; //~ NOTE prior loan as immutable granted here\n+    let q = &mut b.foo.x; //~ ERROR loan of mutable local variable as mutable conflicts with prior loan\n+    let r = &p.foo.x;\n+    io::println(fmt!(\"*r = %u\", *r));\n+    *q += 1;\n+    io::println(fmt!(\"*r = %u\", *r));\n+}\n\\ No newline at end of file"}, {"sha": "6b9d93462d94589bad77f80643093624cb5c30a5", "filename": "src/test/compile-fail/borrowck-imm-field-mut-base.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/42c05fe642efa726dc6cde624b40b638741724ee/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-field-mut-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c05fe642efa726dc6cde624b40b638741724ee/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-field-mut-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-field-mut-base.rs?ref=42c05fe642efa726dc6cde624b40b638741724ee", "patch": "@@ -0,0 +1,19 @@\n+struct Foo {\n+    mut x: uint\n+}\n+\n+struct Bar {\n+    foo: Foo\n+}\n+\n+fn main() {\n+    let mut b = Bar { foo: Foo { x: 3 } };\n+    let p = &b.foo.x;\n+    let q = &mut b.foo; //~ ERROR loan of mutable field as mutable conflicts with prior loan\n+    //~^ ERROR loan of mutable local variable as mutable conflicts with prior loan\n+    let r = &mut b; //~ ERROR loan of mutable local variable as mutable conflicts with prior loan\n+    io::println(fmt!(\"*p = %u\", *p));\n+    q.x += 1;\n+    r.foo.x += 1;\n+    io::println(fmt!(\"*p = %u\", *p));\n+}\n\\ No newline at end of file"}, {"sha": "f13637ab86a8b51934caa4fa8712624d29f357dc", "filename": "src/test/compile-fail/borrowck-mut-field-imm-base.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42c05fe642efa726dc6cde624b40b638741724ee/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-field-imm-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c05fe642efa726dc6cde624b40b638741724ee/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-field-imm-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-field-imm-base.rs?ref=42c05fe642efa726dc6cde624b40b638741724ee", "patch": "@@ -0,0 +1,20 @@\n+struct Foo {\n+    mut x: uint\n+}\n+\n+struct Bar {\n+    foo: Foo\n+}\n+\n+fn main() {\n+    let mut b = Bar { foo: Foo { x: 3 } };\n+    let p = &b;\n+    let q = &mut b.foo.x;\n+    let r = &p.foo.x; //~ ERROR illegal borrow unless pure\n+    let s = &b.foo.x; //~ ERROR loan of mutable field as immutable conflicts with prior loan\n+    io::println(fmt!(\"*r = %u\", *r));\n+    io::println(fmt!(\"*r = %u\", *s));\n+    *q += 1;\n+    io::println(fmt!(\"*r = %u\", *r));\n+    io::println(fmt!(\"*r = %u\", *s));\n+}\n\\ No newline at end of file"}]}