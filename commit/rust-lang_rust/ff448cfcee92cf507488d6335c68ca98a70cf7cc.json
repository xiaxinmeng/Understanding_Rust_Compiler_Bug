{"sha": "ff448cfcee92cf507488d6335c68ca98a70cf7cc", "node_id": "C_kwDOAAsO6NoAKGZmNDQ4Y2ZjZWU5MmNmNTA3NDg4ZDYzMzVjNjhjYTk4YTcwY2Y3Y2M", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-11-26T16:41:22Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-12-01T11:12:38Z"}, "message": "implement version of normalize_erasing_regions that doesn't assume value is normalizable", "tree": {"sha": "bacc2f296373f92178357976a9f93d2b3ac71bd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bacc2f296373f92178357976a9f93d2b3ac71bd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff448cfcee92cf507488d6335c68ca98a70cf7cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff448cfcee92cf507488d6335c68ca98a70cf7cc", "html_url": "https://github.com/rust-lang/rust/commit/ff448cfcee92cf507488d6335c68ca98a70cf7cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff448cfcee92cf507488d6335c68ca98a70cf7cc/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2446a215954a99f9d33019fad7d415ef9c083502", "url": "https://api.github.com/repos/rust-lang/rust/commits/2446a215954a99f9d33019fad7d415ef9c083502", "html_url": "https://github.com/rust-lang/rust/commit/2446a215954a99f9d33019fad7d415ef9c083502"}], "stats": {"total": 206, "additions": 203, "deletions": 3}, "files": [{"sha": "b20f7357b35b898ac537887318b59999575b6bcf", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff448cfcee92cf507488d6335c68ca98a70cf7cc/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff448cfcee92cf507488d6335c68ca98a70cf7cc/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=ff448cfcee92cf507488d6335c68ca98a70cf7cc", "patch": "@@ -1337,7 +1337,9 @@ impl<'tcx> LateLintPass<'tcx> for VariantSizeDifferences {\n             let layout = match cx.layout_of(ty) {\n                 Ok(layout) => layout,\n                 Err(\n-                    ty::layout::LayoutError::Unknown(_) | ty::layout::LayoutError::SizeOverflow(_),\n+                    ty::layout::LayoutError::Unknown(_)\n+                    | ty::layout::LayoutError::SizeOverflow(_)\n+                    | ty::layout::LayoutError::NormalizationFailure(_, _),\n                 ) => return,\n             };\n             let (variants, tag) = match layout.variants {"}, {"sha": "3e307979f2d0ae823417c2f82de994e609c6c29e", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff448cfcee92cf507488d6335c68ca98a70cf7cc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff448cfcee92cf507488d6335c68ca98a70cf7cc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=ff448cfcee92cf507488d6335c68ca98a70cf7cc", "patch": "@@ -493,7 +493,7 @@ impl dyn MachineStopType {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(InterpError<'_>, 64);\n+static_assert_size!(InterpError<'_>, 88);\n \n pub enum InterpError<'tcx> {\n     /// The program caused undefined behavior."}, {"sha": "12665be3354927883d8a38c0f0e3f029b789a72d", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff448cfcee92cf507488d6335c68ca98a70cf7cc/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff448cfcee92cf507488d6335c68ca98a70cf7cc/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ff448cfcee92cf507488d6335c68ca98a70cf7cc", "patch": "@@ -1658,6 +1658,20 @@ rustc_queries! {\n         desc { \"normalizing `{}`\", goal.value }\n     }\n \n+    /// Do not call this query directly: invoke `try_normalize_erasing_regions` instead.\n+    query try_normalize_generic_arg_after_erasing_regions(\n+        goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>\n+    ) -> Result<GenericArg<'tcx>, NoSolution> {\n+        desc { \"trying to normalize `{}`\", goal.value }\n+    }\n+\n+    /// Do not call this query directly: invoke `try_normalize_erasing_regions` instead.\n+    query try_normalize_mir_const_after_erasing_regions(\n+        goal: ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>\n+    ) -> Result<mir::ConstantKind<'tcx>, NoSolution> {\n+        desc { \"trying to normalize `{}`\", goal.value }\n+    }\n+\n     query implied_outlives_bounds(\n         goal: CanonicalTyGoal<'tcx>\n     ) -> Result<"}, {"sha": "9c1407de812f5c351be2140d2909c723531df607", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ff448cfcee92cf507488d6335c68ca98a70cf7cc/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff448cfcee92cf507488d6335c68ca98a70cf7cc/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=ff448cfcee92cf507488d6335c68ca98a70cf7cc", "patch": "@@ -1,5 +1,6 @@\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir::{GeneratorLayout, GeneratorSavedLocal};\n+use crate::ty::normalize_erasing_regions::NormalizationError;\n use crate::ty::subst::Subst;\n use crate::ty::{self, subst::SubstsRef, ReprOptions, Ty, TyCtxt, TypeFoldable};\n use rustc_ast as ast;\n@@ -199,6 +200,7 @@ pub const MAX_SIMD_LANES: u64 = 1 << 0xF;\n pub enum LayoutError<'tcx> {\n     Unknown(Ty<'tcx>),\n     SizeOverflow(Ty<'tcx>),\n+    NormalizationFailure(Ty<'tcx>, NormalizationError<'tcx>),\n }\n \n impl<'tcx> fmt::Display for LayoutError<'tcx> {\n@@ -208,16 +210,24 @@ impl<'tcx> fmt::Display for LayoutError<'tcx> {\n             LayoutError::SizeOverflow(ty) => {\n                 write!(f, \"values of the type `{}` are too big for the current architecture\", ty)\n             }\n+            LayoutError::NormalizationFailure(t, e) => write!(\n+                f,\n+                \"unable to determine layout for `{}` because `{}` cannot be normalized\",\n+                t,\n+                e.get_type_for_failure()\n+            ),\n         }\n     }\n }\n \n+#[instrument(skip(tcx, query), level = \"debug\")]\n fn layout_of<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n ) -> Result<TyAndLayout<'tcx>, LayoutError<'tcx>> {\n     ty::tls::with_related_context(tcx, move |icx| {\n         let (param_env, ty) = query.into_parts();\n+        debug!(?ty);\n \n         if !tcx.recursion_limit().value_within_limit(icx.layout_depth) {\n             tcx.sess.fatal(&format!(\"overflow representing the type `{}`\", ty));\n@@ -229,7 +239,14 @@ fn layout_of<'tcx>(\n         ty::tls::enter_context(&icx, |_| {\n             let param_env = param_env.with_reveal_all_normalized(tcx);\n             let unnormalized_ty = ty;\n-            let ty = tcx.normalize_erasing_regions(param_env, ty);\n+\n+            let ty = match tcx.try_normalize_erasing_regions(param_env, ty) {\n+                Ok(t) => t,\n+                Err(normalization_error) => {\n+                    return Err(LayoutError::NormalizationFailure(ty, normalization_error));\n+                }\n+            };\n+\n             if ty != unnormalized_ty {\n                 // Ensure this layout is also cached for the normalized type.\n                 return tcx.layout_of(param_env.and(ty));"}, {"sha": "0915228d07022fb20a32f3bcb501c75882e8e93c", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/ff448cfcee92cf507488d6335c68ca98a70cf7cc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff448cfcee92cf507488d6335c68ca98a70cf7cc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=ff448cfcee92cf507488d6335c68ca98a70cf7cc", "patch": "@@ -8,10 +8,28 @@\n //! or constant found within. (This underlying query is what is cached.)\n \n use crate::mir;\n+use crate::traits::query::NoSolution;\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt};\n \n+#[derive(Debug, Copy, Clone, HashStable, TyEncodable, TyDecodable)]\n+pub enum NormalizationError<'tcx> {\n+    Type(Ty<'tcx>),\n+    Const(ty::Const<'tcx>),\n+    ConstantKind(mir::ConstantKind<'tcx>),\n+}\n+\n+impl<'tcx> NormalizationError<'tcx> {\n+    pub fn get_type_for_failure(&self) -> String {\n+        match self {\n+            NormalizationError::Type(t) => format!(\"{}\", t),\n+            NormalizationError::Const(c) => format!(\"{}\", c),\n+            NormalizationError::ConstantKind(ck) => format!(\"{}\", ck),\n+        }\n+    }\n+}\n+\n impl<'tcx> TyCtxt<'tcx> {\n     /// Erase the regions in `value` and then fully normalize all the\n     /// types found within. The result will also have regions erased.\n@@ -32,6 +50,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         // Erase first before we do the real query -- this keeps the\n         // cache from being too polluted.\n         let value = self.erase_regions(value);\n+        debug!(?value);\n+\n         if !value.has_projections() {\n             value\n         } else {\n@@ -41,6 +61,44 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// Tries to erase the regions in `value` and then fully normalize all the\n+    /// types found within. The result will also have regions erased.\n+    ///\n+    /// Contrary to `normalize_erasing_regions` this function does not assume that normalization\n+    /// succeeds.\n+    pub fn try_normalize_erasing_regions<T>(\n+        self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        value: T,\n+    ) -> Result<T, NormalizationError<'tcx>>\n+    where\n+        T: TypeFoldable<'tcx>,\n+    {\n+        debug!(\n+            \"try_normalize_erasing_regions::<{}>(value={:?}, param_env={:?})\",\n+            std::any::type_name::<T>(),\n+            value,\n+            param_env,\n+        );\n+\n+        // Erase first before we do the real query -- this keeps the\n+        // cache from being too polluted.\n+        let value = self.erase_regions(value);\n+        debug!(?value);\n+\n+        if !value.has_projections() {\n+            Ok(value)\n+        } else {\n+            let mut folder = TryNormalizeAfterErasingRegionsFolder::new(self, param_env);\n+            let result = value.fold_with(&mut folder);\n+\n+            match folder.found_normalization_error() {\n+                Some(e) => Err(e),\n+                None => Ok(result),\n+            }\n+        }\n+    }\n+\n     /// If you have a `Binder<'tcx, T>`, you can do this to strip out the\n     /// late-bound regions and then normalize the result, yielding up\n     /// a `T` (with regions erased). This is appropriate when the\n@@ -91,11 +149,14 @@ struct NormalizeAfterErasingRegionsFolder<'tcx> {\n }\n \n impl<'tcx> NormalizeAfterErasingRegionsFolder<'tcx> {\n+    #[instrument(skip(self), level = \"debug\")]\n     fn normalize_generic_arg_after_erasing_regions(\n         &self,\n         arg: ty::GenericArg<'tcx>,\n     ) -> ty::GenericArg<'tcx> {\n         let arg = self.param_env.and(arg);\n+        debug!(?arg);\n+\n         self.tcx.normalize_generic_arg_after_erasing_regions(arg)\n     }\n }\n@@ -126,3 +187,69 @@ impl TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n         Ok(self.tcx.normalize_mir_const_after_erasing_regions(arg))\n     }\n }\n+\n+struct TryNormalizeAfterErasingRegionsFolder<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    normalization_error: Option<NormalizationError<'tcx>>,\n+}\n+\n+impl<'tcx> TryNormalizeAfterErasingRegionsFolder<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Self {\n+        TryNormalizeAfterErasingRegionsFolder { tcx, param_env, normalization_error: None }\n+    }\n+\n+    #[instrument(skip(self), level = \"debug\")]\n+    fn try_normalize_generic_arg_after_erasing_regions(\n+        &self,\n+        arg: ty::GenericArg<'tcx>,\n+    ) -> Result<ty::GenericArg<'tcx>, NoSolution> {\n+        let arg = self.param_env.and(arg);\n+        debug!(?arg);\n+\n+        self.tcx.try_normalize_generic_arg_after_erasing_regions(arg)\n+    }\n+\n+    pub fn found_normalization_error(&self) -> Option<NormalizationError<'tcx>> {\n+        self.normalization_error\n+    }\n+}\n+\n+impl TypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        match self.try_normalize_generic_arg_after_erasing_regions(ty.into()) {\n+            Ok(t) => t.expect_ty(),\n+            Err(_) => {\n+                self.normalization_error = Some(NormalizationError::Type(ty));\n+                ty\n+            }\n+        }\n+    }\n+\n+    fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+        match self.try_normalize_generic_arg_after_erasing_regions(c.into()) {\n+            Ok(t) => t.expect_const(),\n+            Err(_) => {\n+                self.normalization_error = Some(NormalizationError::Const(*c));\n+                c\n+            }\n+        }\n+    }\n+\n+    #[inline]\n+    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n+        // FIXME: This *probably* needs canonicalization too!\n+        let arg = self.param_env.and(c);\n+        match self.tcx.try_normalize_mir_const_after_erasing_regions(arg) {\n+            Ok(c) => c,\n+            Err(_) => {\n+                self.normalization_error = Some(NormalizationError::ConstantKind(c));\n+                c\n+            }\n+        }\n+    }\n+}"}, {"sha": "4f35909df7f6a8d1ff200a93dad4dcbc21fe5b2c", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ff448cfcee92cf507488d6335c68ca98a70cf7cc/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff448cfcee92cf507488d6335c68ca98a70cf7cc/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=ff448cfcee92cf507488d6335c68ca98a70cf7cc", "patch": "@@ -20,6 +20,14 @@ crate fn provide(p: &mut Providers) {\n         normalize_mir_const_after_erasing_regions: |tcx, goal| {\n             normalize_after_erasing_regions(tcx, goal)\n         },\n+        try_normalize_generic_arg_after_erasing_regions: |tcx, goal| {\n+            debug!(\"try_normalize_generic_arg_after_erasing_regions(goal={:#?}\", goal);\n+\n+            try_normalize_after_erasing_regions(tcx, goal)\n+        },\n+        try_normalize_mir_const_after_erasing_regions: |tcx, goal| {\n+            try_normalize_after_erasing_regions(tcx, goal)\n+        },\n         ..*p\n     };\n }\n@@ -56,6 +64,38 @@ fn normalize_after_erasing_regions<'tcx, T: TypeFoldable<'tcx> + PartialEq + Cop\n     })\n }\n \n+#[instrument(level = \"debug\", skip(tcx))]\n+fn try_normalize_after_erasing_regions<'tcx, T: TypeFoldable<'tcx> + PartialEq + Copy>(\n+    tcx: TyCtxt<'tcx>,\n+    goal: ParamEnvAnd<'tcx, T>,\n+) -> Result<T, NoSolution> {\n+    let ParamEnvAnd { param_env, value } = goal;\n+    tcx.infer_ctxt().enter(|infcx| {\n+        let cause = ObligationCause::dummy();\n+        match infcx.at(&cause, param_env).normalize(value) {\n+            Ok(Normalized { value: normalized_value, obligations: normalized_obligations }) => {\n+                // We don't care about the `obligations`; they are\n+                // always only region relations, and we are about to\n+                // erase those anyway:\n+                debug_assert_eq!(\n+                    normalized_obligations.iter().find(|p| not_outlives_predicate(&p.predicate)),\n+                    None,\n+                );\n+\n+                let resolved_value = infcx.resolve_vars_if_possible(normalized_value);\n+                // It's unclear when `resolve_vars` would have an effect in a\n+                // fresh `InferCtxt`. If this assert does trigger, it will give\n+                // us a test case.\n+                debug_assert_eq!(normalized_value, resolved_value);\n+                let erased = infcx.tcx.erase_regions(resolved_value);\n+                debug_assert!(!erased.needs_infer(), \"{:?}\", erased);\n+                Ok(erased)\n+            }\n+            Err(NoSolution) => Err(NoSolution),\n+        }\n+    })\n+}\n+\n fn not_outlives_predicate(p: &ty::Predicate<'tcx>) -> bool {\n     match p.kind().skip_binder() {\n         ty::PredicateKind::RegionOutlives(..) | ty::PredicateKind::TypeOutlives(..) => false,"}]}