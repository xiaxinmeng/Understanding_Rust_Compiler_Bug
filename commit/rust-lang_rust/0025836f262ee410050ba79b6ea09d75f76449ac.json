{"sha": "0025836f262ee410050ba79b6ea09d75f76449ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMjU4MzZmMjYyZWU0MTAwNTBiYTc5YjZlYTA5ZDc1Zjc2NDQ5YWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-12T21:44:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-16T16:17:32Z"}, "message": "Make it easy to add additional context for offset conversion", "tree": {"sha": "7559a66efac8a3b988f1e65341d54fca42378721", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7559a66efac8a3b988f1e65341d54fca42378721"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0025836f262ee410050ba79b6ea09d75f76449ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0025836f262ee410050ba79b6ea09d75f76449ac", "html_url": "https://github.com/rust-lang/rust/commit/0025836f262ee410050ba79b6ea09d75f76449ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0025836f262ee410050ba79b6ea09d75f76449ac/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95209aa3f8e4b149da6adb374611ece76c2b82ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/95209aa3f8e4b149da6adb374611ece76c2b82ca", "html_url": "https://github.com/rust-lang/rust/commit/95209aa3f8e4b149da6adb374611ece76c2b82ca"}], "stats": {"total": 224, "additions": 111, "deletions": 113}, "files": [{"sha": "c671b5f649c2748dde14877138fd4c2df2e7287f", "filename": "crates/rust-analyzer/src/from_proto.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0025836f262ee410050ba79b6ea09d75f76449ac/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0025836f262ee410050ba79b6ea09d75f76449ac/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs?ref=0025836f262ee410050ba79b6ea09d75f76449ac", "patch": "@@ -1,12 +1,14 @@\n //! Conversion lsp_types types to rust-analyzer specific ones.\n use std::convert::TryFrom;\n \n-use ide::{Annotation, AnnotationKind, AssistKind, LineColUtf16, LineIndex};\n+use ide::{Annotation, AnnotationKind, AssistKind, LineColUtf16};\n use ide_db::base_db::{FileId, FilePosition, FileRange};\n use syntax::{TextRange, TextSize};\n use vfs::AbsPathBuf;\n \n-use crate::{from_json, global_state::GlobalStateSnapshot, lsp_ext, Result};\n+use crate::{\n+    from_json, global_state::GlobalStateSnapshot, line_endings::LineIndex, lsp_ext, Result,\n+};\n \n pub(crate) fn abs_path(url: &lsp_types::Url) -> Result<AbsPathBuf> {\n     let path = url.to_file_path().map_err(|()| \"url is not a file\")?;\n@@ -19,8 +21,8 @@ pub(crate) fn vfs_path(url: &lsp_types::Url) -> Result<vfs::VfsPath> {\n \n pub(crate) fn offset(line_index: &LineIndex, position: lsp_types::Position) -> TextSize {\n     let line_col = LineColUtf16 { line: position.line as u32, col: position.character as u32 };\n-    let line_col = line_index.to_utf8(line_col);\n-    line_index.offset(line_col)\n+    let line_col = line_index.index.to_utf8(line_col);\n+    line_index.index.offset(line_col)\n }\n \n pub(crate) fn text_range(line_index: &LineIndex, range: lsp_types::Range) -> TextRange {\n@@ -38,8 +40,8 @@ pub(crate) fn file_position(\n     tdpp: lsp_types::TextDocumentPositionParams,\n ) -> Result<FilePosition> {\n     let file_id = file_id(world, &tdpp.text_document.uri)?;\n-    let line_index = world.analysis.file_line_index(file_id)?;\n-    let offset = offset(&*line_index, tdpp.position);\n+    let line_index = world.file_line_index(file_id)?;\n+    let offset = offset(&line_index, tdpp.position);\n     Ok(FilePosition { file_id, offset })\n }\n \n@@ -49,7 +51,7 @@ pub(crate) fn file_range(\n     range: lsp_types::Range,\n ) -> Result<FileRange> {\n     let file_id = file_id(world, &text_document_identifier.uri)?;\n-    let line_index = world.analysis.file_line_index(file_id)?;\n+    let line_index = world.file_line_index(file_id)?;\n     let range = text_range(&line_index, range);\n     Ok(FileRange { file_id, range })\n }\n@@ -79,7 +81,7 @@ pub(crate) fn annotation(\n         lsp_ext::CodeLensResolveData::Impls(params) => {\n             let file_id =\n                 world.url_to_file_id(&params.text_document_position_params.text_document.uri)?;\n-            let line_index = world.analysis.file_line_index(file_id)?;\n+            let line_index = world.file_line_index(file_id)?;\n \n             Ok(Annotation {\n                 range: text_range(&line_index, code_lens.range),\n@@ -91,7 +93,7 @@ pub(crate) fn annotation(\n         }\n         lsp_ext::CodeLensResolveData::References(params) => {\n             let file_id = world.url_to_file_id(&params.text_document.uri)?;\n-            let line_index = world.analysis.file_line_index(file_id)?;\n+            let line_index = world.file_line_index(file_id)?;\n \n             Ok(Annotation {\n                 range: text_range(&line_index, code_lens.range),"}, {"sha": "ffef33430ca74e3073580bd987b069776f0287b4", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0025836f262ee410050ba79b6ea09d75f76449ac/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0025836f262ee410050ba79b6ea09d75f76449ac/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=0025836f262ee410050ba79b6ea09d75f76449ac", "patch": "@@ -7,7 +7,7 @@ use std::{sync::Arc, time::Instant};\n \n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::FlycheckHandle;\n-use ide::{Analysis, AnalysisHost, Change, FileId};\n+use ide::{Analysis, AnalysisHost, Cancelable, Change, FileId};\n use ide_db::base_db::{CrateId, VfsPath};\n use lsp_types::{SemanticTokens, Url};\n use parking_lot::{Mutex, RwLock};\n@@ -22,7 +22,7 @@ use crate::{\n     diagnostics::{CheckFixes, DiagnosticCollection},\n     document::DocumentData,\n     from_proto,\n-    line_endings::LineEndings,\n+    line_endings::{LineEndings, LineIndex},\n     main_loop::Task,\n     op_queue::OpQueue,\n     reload::SourceRootConfig,\n@@ -271,8 +271,11 @@ impl GlobalStateSnapshot {\n         file_id_to_url(&self.vfs.read().0, id)\n     }\n \n-    pub(crate) fn file_line_endings(&self, id: FileId) -> LineEndings {\n-        self.vfs.read().1[&id]\n+    pub(crate) fn file_line_index(&self, file_id: FileId) -> Cancelable<LineIndex> {\n+        let endings = self.vfs.read().1[&file_id];\n+        let index = self.analysis.file_line_index(file_id)?;\n+        let res = LineIndex { index, endings };\n+        Ok(res)\n     }\n \n     pub(crate) fn url_file_version(&self, url: &Url) -> Option<i32> {"}, {"sha": "d8b00e9c5824ba2b15e6d8c7e4176c0f3ed0f696", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 38, "deletions": 52, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/0025836f262ee410050ba79b6ea09d75f76449ac/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0025836f262ee410050ba79b6ea09d75f76449ac/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=0025836f262ee410050ba79b6ea09d75f76449ac", "patch": "@@ -5,12 +5,11 @@\n use std::{\n     io::Write as _,\n     process::{self, Stdio},\n-    sync::Arc,\n };\n \n use ide::{\n-    AnnotationConfig, FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, LineIndex,\n-    Query, RangeInfo, Runnable, RunnableKind, SearchScope, SourceChange, TextEdit,\n+    AnnotationConfig, FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, Query,\n+    RangeInfo, Runnable, RunnableKind, SearchScope, SourceChange, TextEdit,\n };\n use ide_db::SymbolKind;\n use itertools::Itertools;\n@@ -38,6 +37,7 @@ use crate::{\n     from_proto,\n     global_state::{GlobalState, GlobalStateSnapshot},\n     line_endings::LineEndings,\n+    line_endings::LineIndex,\n     lsp_ext::{self, InlayHint, InlayHintsParams},\n     lsp_utils::all_edits_are_disjoint,\n     to_proto, LspError, Result,\n@@ -100,7 +100,7 @@ pub(crate) fn handle_syntax_tree(\n ) -> Result<String> {\n     let _p = profile::span(\"handle_syntax_tree\");\n     let id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis.file_line_index(id)?;\n+    let line_index = snap.file_line_index(id)?;\n     let text_range = params.range.map(|r| from_proto::text_range(&line_index, r));\n     let res = snap.analysis.syntax_tree(id, text_range)?;\n     Ok(res)\n@@ -122,7 +122,7 @@ pub(crate) fn handle_expand_macro(\n ) -> Result<Option<lsp_ext::ExpandedMacro>> {\n     let _p = profile::span(\"handle_expand_macro\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis.file_line_index(file_id)?;\n+    let line_index = snap.file_line_index(file_id)?;\n     let offset = from_proto::offset(&line_index, params.position);\n \n     let res = snap.analysis.expand_macro(FilePosition { file_id, offset })?;\n@@ -135,7 +135,7 @@ pub(crate) fn handle_selection_range(\n ) -> Result<Option<Vec<lsp_types::SelectionRange>>> {\n     let _p = profile::span(\"handle_selection_range\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis.file_line_index(file_id)?;\n+    let line_index = snap.file_line_index(file_id)?;\n     let res: Result<Vec<lsp_types::SelectionRange>> = params\n         .positions\n         .into_iter()\n@@ -178,7 +178,7 @@ pub(crate) fn handle_matching_brace(\n ) -> Result<Vec<Position>> {\n     let _p = profile::span(\"handle_matching_brace\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis.file_line_index(file_id)?;\n+    let line_index = snap.file_line_index(file_id)?;\n     let res = params\n         .positions\n         .into_iter()\n@@ -200,8 +200,7 @@ pub(crate) fn handle_join_lines(\n ) -> Result<Vec<lsp_types::TextEdit>> {\n     let _p = profile::span(\"handle_join_lines\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis.file_line_index(file_id)?;\n-    let line_endings = snap.file_line_endings(file_id);\n+    let line_index = snap.file_line_index(file_id)?;\n     let mut res = TextEdit::default();\n     for range in params.ranges {\n         let range = from_proto::text_range(&line_index, range);\n@@ -213,7 +212,7 @@ pub(crate) fn handle_join_lines(\n             }\n         }\n     }\n-    let res = to_proto::text_edit_vec(&line_index, line_endings, res);\n+    let res = to_proto::text_edit_vec(&line_index, res);\n     Ok(res)\n }\n \n@@ -227,9 +226,8 @@ pub(crate) fn handle_on_enter(\n         None => return Ok(None),\n         Some(it) => it,\n     };\n-    let line_index = snap.analysis.file_line_index(position.file_id)?;\n-    let line_endings = snap.file_line_endings(position.file_id);\n-    let edit = to_proto::snippet_text_edit_vec(&line_index, line_endings, true, edit);\n+    let line_index = snap.file_line_index(position.file_id)?;\n+    let edit = to_proto::snippet_text_edit_vec(&line_index, true, edit);\n     Ok(Some(edit))\n }\n \n@@ -240,8 +238,7 @@ pub(crate) fn handle_on_type_formatting(\n ) -> Result<Option<Vec<lsp_types::TextEdit>>> {\n     let _p = profile::span(\"handle_on_type_formatting\");\n     let mut position = from_proto::file_position(&snap, params.text_document_position)?;\n-    let line_index = snap.analysis.file_line_index(position.file_id)?;\n-    let line_endings = snap.file_line_endings(position.file_id);\n+    let line_index = snap.file_line_index(position.file_id)?;\n \n     // in `ide`, the `on_type` invariant is that\n     // `text.char_at(position) == typed_char`.\n@@ -269,7 +266,7 @@ pub(crate) fn handle_on_type_formatting(\n     // This should be a single-file edit\n     let (_, edit) = edit.source_file_edits.into_iter().next().unwrap();\n \n-    let change = to_proto::text_edit_vec(&line_index, line_endings, edit);\n+    let change = to_proto::text_edit_vec(&line_index, edit);\n     Ok(Some(change))\n }\n \n@@ -279,7 +276,7 @@ pub(crate) fn handle_document_symbol(\n ) -> Result<Option<lsp_types::DocumentSymbolResponse>> {\n     let _p = profile::span(\"handle_document_symbol\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis.file_line_index(file_id)?;\n+    let line_index = snap.file_line_index(file_id)?;\n \n     let mut parents: Vec<(lsp_types::DocumentSymbol, Option<usize>)> = Vec::new();\n \n@@ -535,7 +532,7 @@ pub(crate) fn handle_runnables(\n ) -> Result<Vec<lsp_ext::Runnable>> {\n     let _p = profile::span(\"handle_runnables\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis.file_line_index(file_id)?;\n+    let line_index = snap.file_line_index(file_id)?;\n     let offset = params.position.map(|it| from_proto::offset(&line_index, it));\n     let cargo_spec = CargoTargetSpec::for_file(&snap, file_id)?;\n \n@@ -645,14 +642,12 @@ pub(crate) fn handle_completion(\n         None => return Ok(None),\n         Some(items) => items,\n     };\n-    let line_index = snap.analysis.file_line_index(position.file_id)?;\n-    let line_endings = snap.file_line_endings(position.file_id);\n+    let line_index = snap.file_line_index(position.file_id)?;\n \n     let items: Vec<CompletionItem> = items\n         .into_iter()\n         .flat_map(|item| {\n-            let mut new_completion_items =\n-                to_proto::completion_item(&line_index, line_endings, item.clone());\n+            let mut new_completion_items = to_proto::completion_item(&line_index, item.clone());\n \n             if completion_config.enable_imports_on_the_fly {\n                 for new_item in &mut new_completion_items {\n@@ -693,8 +688,7 @@ pub(crate) fn handle_completion_resolve(\n     };\n \n     let file_id = from_proto::file_id(&snap, &resolve_data.position.text_document.uri)?;\n-    let line_index = snap.analysis.file_line_index(file_id)?;\n-    let line_endings = snap.file_line_endings(file_id);\n+    let line_index = snap.file_line_index(file_id)?;\n     let offset = from_proto::offset(&line_index, resolve_data.position.position);\n \n     let additional_edits = snap\n@@ -707,9 +701,7 @@ pub(crate) fn handle_completion_resolve(\n             resolve_data.import_for_trait_assoc_item,\n         )?\n         .into_iter()\n-        .flat_map(|edit| {\n-            edit.into_iter().map(|indel| to_proto::text_edit(&line_index, line_endings, indel))\n-        })\n+        .flat_map(|edit| edit.into_iter().map(|indel| to_proto::text_edit(&line_index, indel)))\n         .collect_vec();\n \n     if !all_edits_are_disjoint(&original_completion, &additional_edits) {\n@@ -738,7 +730,7 @@ pub(crate) fn handle_folding_range(\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let folds = snap.analysis.folding_ranges(file_id)?;\n     let text = snap.analysis.file_text(file_id)?;\n-    let line_index = snap.analysis.file_line_index(file_id)?;\n+    let line_index = snap.file_line_index(file_id)?;\n     let line_folding_only = snap.config.line_folding_only();\n     let res = folds\n         .into_iter()\n@@ -775,7 +767,7 @@ pub(crate) fn handle_hover(\n             None => return Ok(None),\n             Some(info) => info,\n         };\n-    let line_index = snap.analysis.file_line_index(position.file_id)?;\n+    let line_index = snap.file_line_index(position.file_id)?;\n     let range = to_proto::range(&line_index, info.range);\n     let hover = lsp_ext::Hover {\n         hover: lsp_types::Hover {\n@@ -797,7 +789,7 @@ pub(crate) fn handle_prepare_rename(\n \n     let change = snap.analysis.prepare_rename(position)?.map_err(to_proto::rename_error)?;\n \n-    let line_index = snap.analysis.file_line_index(position.file_id)?;\n+    let line_index = snap.file_line_index(position.file_id)?;\n     let range = to_proto::range(&line_index, change.range);\n     Ok(Some(PrepareRenameResponse::Range(range)))\n }\n@@ -857,8 +849,7 @@ pub(crate) fn handle_formatting(\n     let file = snap.analysis.file_text(file_id)?;\n     let crate_ids = snap.analysis.crate_for(file_id)?;\n \n-    let file_line_index = snap.analysis.file_line_index(file_id)?;\n-    let file_line_endings = snap.file_line_endings(file_id);\n+    let line_index = snap.file_line_index(file_id)?;\n \n     let mut rustfmt = match snap.config.rustfmt() {\n         RustfmtConfig::Rustfmt { extra_args } => {\n@@ -935,24 +926,19 @@ pub(crate) fn handle_formatting(\n \n     let (new_text, new_line_endings) = LineEndings::normalize(captured_stdout);\n \n-    if file_line_endings != new_line_endings {\n+    if line_index.endings != new_line_endings {\n         // If line endings are different, send the entire file.\n         // Diffing would not work here, as the line endings might be the only\n         // difference.\n         Ok(Some(to_proto::text_edit_vec(\n-            &file_line_index,\n-            new_line_endings,\n+            &line_index,\n             TextEdit::replace(TextRange::up_to(TextSize::of(&*file)), new_text),\n         )))\n     } else if *file == new_text {\n         // The document is already formatted correctly -- no edits needed.\n         Ok(None)\n     } else {\n-        Ok(Some(to_proto::text_edit_vec(\n-            &file_line_index,\n-            file_line_endings,\n-            diff(&file, &new_text),\n-        )))\n+        Ok(Some(to_proto::text_edit_vec(&line_index, diff(&file, &new_text))))\n     }\n }\n \n@@ -969,7 +955,7 @@ pub(crate) fn handle_code_action(\n     }\n \n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis.file_line_index(file_id)?;\n+    let line_index = snap.file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.range);\n     let frange = FileRange { file_id, range };\n \n@@ -1010,7 +996,7 @@ pub(crate) fn handle_code_action(\n fn add_quick_fixes(\n     snap: &GlobalStateSnapshot,\n     frange: FileRange,\n-    line_index: &Arc<LineIndex>,\n+    line_index: &LineIndex,\n     acc: &mut Vec<lsp_ext::CodeAction>,\n ) -> Result<()> {\n     let diagnostics = snap.analysis.diagnostics(&snap.config.diagnostics(), frange.file_id)?;\n@@ -1052,7 +1038,7 @@ pub(crate) fn handle_code_action_resolve(\n     };\n \n     let file_id = from_proto::file_id(&snap, &params.code_action_params.text_document.uri)?;\n-    let line_index = snap.analysis.file_line_index(file_id)?;\n+    let line_index = snap.file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.code_action_params.range);\n     let frange = FileRange { file_id, range };\n \n@@ -1131,7 +1117,7 @@ pub(crate) fn handle_document_highlight(\n ) -> Result<Option<Vec<DocumentHighlight>>> {\n     let _p = profile::span(\"handle_document_highlight\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n-    let line_index = snap.analysis.file_line_index(position.file_id)?;\n+    let line_index = snap.file_line_index(position.file_id)?;\n \n     let refs = match snap\n         .analysis\n@@ -1192,7 +1178,7 @@ pub(crate) fn publish_diagnostics(\n     file_id: FileId,\n ) -> Result<Vec<Diagnostic>> {\n     let _p = profile::span(\"publish_diagnostics\");\n-    let line_index = snap.analysis.file_line_index(file_id)?;\n+    let line_index = snap.file_line_index(file_id)?;\n \n     let diagnostics: Vec<Diagnostic> = snap\n         .analysis\n@@ -1226,7 +1212,7 @@ pub(crate) fn handle_inlay_hints(\n ) -> Result<Vec<InlayHint>> {\n     let _p = profile::span(\"handle_inlay_hints\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis.file_line_index(file_id)?;\n+    let line_index = snap.file_line_index(file_id)?;\n     Ok(snap\n         .analysis\n         .inlay_hints(file_id, &snap.config.inlay_hints())?\n@@ -1277,7 +1263,7 @@ pub(crate) fn handle_call_hierarchy_incoming(\n \n     for call_item in call_items.into_iter() {\n         let file_id = call_item.target.file_id;\n-        let line_index = snap.analysis.file_line_index(file_id)?;\n+        let line_index = snap.file_line_index(file_id)?;\n         let item = to_proto::call_hierarchy_item(&snap, call_item.target)?;\n         res.push(CallHierarchyIncomingCall {\n             from: item,\n@@ -1312,7 +1298,7 @@ pub(crate) fn handle_call_hierarchy_outgoing(\n \n     for call_item in call_items.into_iter() {\n         let file_id = call_item.target.file_id;\n-        let line_index = snap.analysis.file_line_index(file_id)?;\n+        let line_index = snap.file_line_index(file_id)?;\n         let item = to_proto::call_hierarchy_item(&snap, call_item.target)?;\n         res.push(CallHierarchyOutgoingCall {\n             to: item,\n@@ -1335,7 +1321,7 @@ pub(crate) fn handle_semantic_tokens_full(\n \n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let text = snap.analysis.file_text(file_id)?;\n-    let line_index = snap.analysis.file_line_index(file_id)?;\n+    let line_index = snap.file_line_index(file_id)?;\n \n     let highlights = snap.analysis.highlight(file_id)?;\n     let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n@@ -1354,7 +1340,7 @@ pub(crate) fn handle_semantic_tokens_full_delta(\n \n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let text = snap.analysis.file_text(file_id)?;\n-    let line_index = snap.analysis.file_line_index(file_id)?;\n+    let line_index = snap.file_line_index(file_id)?;\n \n     let highlights = snap.analysis.highlight(file_id)?;\n \n@@ -1384,7 +1370,7 @@ pub(crate) fn handle_semantic_tokens_range(\n \n     let frange = from_proto::file_range(&snap, params.text_document, params.range)?;\n     let text = snap.analysis.file_text(frange.file_id)?;\n-    let line_index = snap.analysis.file_line_index(frange.file_id)?;\n+    let line_index = snap.file_line_index(frange.file_id)?;\n \n     let highlights = snap.analysis.highlight_range(frange)?;\n     let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n@@ -1432,7 +1418,7 @@ fn show_impl_command_link(\n     if snap.config.hover().implementations {\n         if let Some(nav_data) = snap.analysis.goto_implementation(*position).unwrap_or(None) {\n             let uri = to_proto::url(snap, position.file_id);\n-            let line_index = snap.analysis.file_line_index(position.file_id).ok()?;\n+            let line_index = snap.file_line_index(position.file_id).ok()?;\n             let position = to_proto::position(&line_index, position.offset);\n             let locations: Vec<_> = nav_data\n                 .info"}, {"sha": "cc152c529d14ed6c2d02dc38bc2dfa9efeade5dc", "filename": "crates/rust-analyzer/src/line_endings.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0025836f262ee410050ba79b6ea09d75f76449ac/crates%2Frust-analyzer%2Fsrc%2Fline_endings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0025836f262ee410050ba79b6ea09d75f76449ac/crates%2Frust-analyzer%2Fsrc%2Fline_endings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fline_endings.rs?ref=0025836f262ee410050ba79b6ea09d75f76449ac", "patch": "@@ -2,6 +2,13 @@\n //! This module does line ending conversion and detection (so that we can\n //! convert back to `\\r\\n` on the way out).\n \n+use std::sync::Arc;\n+\n+pub(crate) struct LineIndex {\n+    pub(crate) index: Arc<ide::LineIndex>,\n+    pub(crate) endings: LineEndings,\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub(crate) enum LineEndings {\n     Unix,"}, {"sha": "25162185e042361d7fb8d0c87bdd9197a69149a7", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0025836f262ee410050ba79b6ea09d75f76449ac/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0025836f262ee410050ba79b6ea09d75f76449ac/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=0025836f262ee410050ba79b6ea09d75f76449ac", "patch": "@@ -1,11 +1,14 @@\n //! Utilities for LSP-related boilerplate code.\n-use std::{error::Error, ops::Range};\n+use std::{error::Error, ops::Range, sync::Arc};\n \n-use ide::LineIndex;\n use ide_db::base_db::Canceled;\n use lsp_server::Notification;\n \n-use crate::{from_proto, global_state::GlobalState};\n+use crate::{\n+    from_proto,\n+    global_state::GlobalState,\n+    line_endings::{LineEndings, LineIndex},\n+};\n \n pub(crate) fn is_canceled(e: &(dyn Error + 'static)) -> bool {\n     e.downcast_ref::<Canceled>().is_some()\n@@ -90,7 +93,12 @@ pub(crate) fn apply_document_changes(\n     old_text: &mut String,\n     content_changes: Vec<lsp_types::TextDocumentContentChangeEvent>,\n ) {\n-    let mut line_index = LineIndex::new(old_text);\n+    let mut line_index = LineIndex {\n+        index: Arc::new(ide::LineIndex::new(old_text)),\n+        // We don't care about line endings here.\n+        endings: LineEndings::Unix,\n+    };\n+\n     // The changes we got must be applied sequentially, but can cross lines so we\n     // have to keep our line index updated.\n     // Some clients (e.g. Code) sort the ranges in reverse. As an optimization, we\n@@ -115,7 +123,7 @@ pub(crate) fn apply_document_changes(\n         match change.range {\n             Some(range) => {\n                 if !index_valid.covers(range.end.line) {\n-                    line_index = LineIndex::new(&old_text);\n+                    line_index.index = Arc::new(ide::LineIndex::new(&old_text));\n                 }\n                 index_valid = IndexValid::UpToLineExclusive(range.start.line);\n                 let range = from_proto::text_range(&line_index, range);"}, {"sha": "43e29ef04ef1f6cc9a14f3b499895f38f908154f", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 35, "deletions": 43, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/0025836f262ee410050ba79b6ea09d75f76449ac/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0025836f262ee410050ba79b6ea09d75f76449ac/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=0025836f262ee410050ba79b6ea09d75f76449ac", "patch": "@@ -7,22 +7,23 @@ use std::{\n use ide::{\n     Annotation, AnnotationKind, Assist, AssistKind, CallInfo, CompletionItem, CompletionItemKind,\n     Documentation, FileId, FileRange, FileSystemEdit, Fold, FoldKind, Highlight, HlMod, HlPunct,\n-    HlRange, HlTag, Indel, InlayHint, InlayKind, InsertTextFormat, LineIndex, Markup,\n-    NavigationTarget, ReferenceAccess, RenameError, Runnable, Severity, SourceChange, TextEdit,\n-    TextRange, TextSize,\n+    HlRange, HlTag, Indel, InlayHint, InlayKind, InsertTextFormat, Markup, NavigationTarget,\n+    ReferenceAccess, RenameError, Runnable, Severity, SourceChange, TextEdit, TextRange, TextSize,\n };\n use ide_db::SymbolKind;\n use itertools::Itertools;\n use serde_json::to_value;\n \n use crate::{\n-    cargo_target_spec::CargoTargetSpec, global_state::GlobalStateSnapshot,\n-    line_endings::LineEndings, lsp_ext, semantic_tokens, Result,\n+    cargo_target_spec::CargoTargetSpec,\n+    global_state::GlobalStateSnapshot,\n+    line_endings::{LineEndings, LineIndex},\n+    lsp_ext, semantic_tokens, Result,\n };\n \n pub(crate) fn position(line_index: &LineIndex, offset: TextSize) -> lsp_types::Position {\n-    let line_col = line_index.line_col(offset);\n-    let line_col = line_index.to_utf16(line_col);\n+    let line_col = line_index.index.line_col(offset);\n+    let line_col = line_index.index.to_utf16(line_col);\n     lsp_types::Position::new(line_col.line, line_col.col)\n }\n \n@@ -123,13 +124,9 @@ pub(crate) fn completion_item_kind(\n     }\n }\n \n-pub(crate) fn text_edit(\n-    line_index: &LineIndex,\n-    line_endings: LineEndings,\n-    indel: Indel,\n-) -> lsp_types::TextEdit {\n+pub(crate) fn text_edit(line_index: &LineIndex, indel: Indel) -> lsp_types::TextEdit {\n     let range = range(line_index, indel.delete);\n-    let new_text = match line_endings {\n+    let new_text = match line_index.endings {\n         LineEndings::Unix => indel.insert,\n         LineEndings::Dos => indel.insert.replace('\\n', \"\\r\\n\"),\n     };\n@@ -138,11 +135,10 @@ pub(crate) fn text_edit(\n \n pub(crate) fn snippet_text_edit(\n     line_index: &LineIndex,\n-    line_endings: LineEndings,\n     is_snippet: bool,\n     indel: Indel,\n ) -> lsp_ext::SnippetTextEdit {\n-    let text_edit = text_edit(line_index, line_endings, indel);\n+    let text_edit = text_edit(line_index, indel);\n     let insert_text_format =\n         if is_snippet { Some(lsp_types::InsertTextFormat::Snippet) } else { None };\n     lsp_ext::SnippetTextEdit {\n@@ -154,27 +150,24 @@ pub(crate) fn snippet_text_edit(\n \n pub(crate) fn text_edit_vec(\n     line_index: &LineIndex,\n-    line_endings: LineEndings,\n     text_edit: TextEdit,\n ) -> Vec<lsp_types::TextEdit> {\n-    text_edit.into_iter().map(|indel| self::text_edit(line_index, line_endings, indel)).collect()\n+    text_edit.into_iter().map(|indel| self::text_edit(line_index, indel)).collect()\n }\n \n pub(crate) fn snippet_text_edit_vec(\n     line_index: &LineIndex,\n-    line_endings: LineEndings,\n     is_snippet: bool,\n     text_edit: TextEdit,\n ) -> Vec<lsp_ext::SnippetTextEdit> {\n     text_edit\n         .into_iter()\n-        .map(|indel| self::snippet_text_edit(line_index, line_endings, is_snippet, indel))\n+        .map(|indel| self::snippet_text_edit(line_index, is_snippet, indel))\n         .collect()\n }\n \n pub(crate) fn completion_item(\n     line_index: &LineIndex,\n-    line_endings: LineEndings,\n     completion_item: CompletionItem,\n ) -> Vec<lsp_types::CompletionItem> {\n     fn set_score(res: &mut lsp_types::CompletionItem, label: &str) {\n@@ -191,19 +184,19 @@ pub(crate) fn completion_item(\n     for indel in completion_item.text_edit().iter() {\n         if indel.delete.contains_range(source_range) {\n             text_edit = Some(if indel.delete == source_range {\n-                self::text_edit(line_index, line_endings, indel.clone())\n+                self::text_edit(line_index, indel.clone())\n             } else {\n                 assert!(source_range.end() == indel.delete.end());\n                 let range1 = TextRange::new(indel.delete.start(), source_range.start());\n                 let range2 = source_range;\n                 let indel1 = Indel::replace(range1, String::new());\n                 let indel2 = Indel::replace(range2, indel.insert.clone());\n-                additional_text_edits.push(self::text_edit(line_index, line_endings, indel1));\n-                self::text_edit(line_index, line_endings, indel2)\n+                additional_text_edits.push(self::text_edit(line_index, indel1));\n+                self::text_edit(line_index, indel2)\n             })\n         } else {\n             assert!(source_range.intersect(indel.delete).is_none());\n-            let text_edit = self::text_edit(line_index, line_endings, indel.clone());\n+            let text_edit = self::text_edit(line_index, indel.clone());\n             additional_text_edits.push(text_edit);\n         }\n     }\n@@ -359,7 +352,7 @@ pub(crate) fn semantic_tokens(\n         let token_index = semantic_tokens::type_index(type_);\n         let modifier_bitset = mods.0;\n \n-        for mut text_range in line_index.lines(highlight_range.range) {\n+        for mut text_range in line_index.index.lines(highlight_range.range) {\n             if text[text_range].ends_with('\\n') {\n                 text_range =\n                     TextRange::new(text_range.start(), text_range.end() - TextSize::of('\\n'));\n@@ -566,7 +559,7 @@ pub(crate) fn location(\n     frange: FileRange,\n ) -> Result<lsp_types::Location> {\n     let url = url(snap, frange.file_id);\n-    let line_index = snap.analysis.file_line_index(frange.file_id)?;\n+    let line_index = snap.file_line_index(frange.file_id)?;\n     let range = range(&line_index, frange.range);\n     let loc = lsp_types::Location::new(url, range);\n     Ok(loc)\n@@ -578,7 +571,7 @@ pub(crate) fn location_from_nav(\n     nav: NavigationTarget,\n ) -> Result<lsp_types::Location> {\n     let url = url(snap, nav.file_id);\n-    let line_index = snap.analysis.file_line_index(nav.file_id)?;\n+    let line_index = snap.file_line_index(nav.file_id)?;\n     let range = range(&line_index, nav.full_range);\n     let loc = lsp_types::Location::new(url, range);\n     Ok(loc)\n@@ -591,7 +584,7 @@ pub(crate) fn location_link(\n ) -> Result<lsp_types::LocationLink> {\n     let origin_selection_range = match src {\n         Some(src) => {\n-            let line_index = snap.analysis.file_line_index(src.file_id)?;\n+            let line_index = snap.file_line_index(src.file_id)?;\n             let range = range(&line_index, src.range);\n             Some(range)\n         }\n@@ -611,7 +604,7 @@ fn location_info(\n     snap: &GlobalStateSnapshot,\n     target: NavigationTarget,\n ) -> Result<(lsp_types::Url, lsp_types::Range, lsp_types::Range)> {\n-    let line_index = snap.analysis.file_line_index(target.file_id)?;\n+    let line_index = snap.file_line_index(target.file_id)?;\n \n     let target_uri = url(snap, target.file_id);\n     let target_range = range(&line_index, target.full_range);\n@@ -649,12 +642,8 @@ pub(crate) fn snippet_text_document_edit(\n     edit: TextEdit,\n ) -> Result<lsp_ext::SnippetTextDocumentEdit> {\n     let text_document = optional_versioned_text_document_identifier(snap, file_id);\n-    let line_index = snap.analysis.file_line_index(file_id)?;\n-    let line_endings = snap.file_line_endings(file_id);\n-    let edits = edit\n-        .into_iter()\n-        .map(|it| snippet_text_edit(&line_index, line_endings, is_snippet, it))\n-        .collect();\n+    let line_index = snap.file_line_index(file_id)?;\n+    let edits = edit.into_iter().map(|it| snippet_text_edit(&line_index, is_snippet, it)).collect();\n     Ok(lsp_ext::SnippetTextDocumentEdit { text_document, edits })\n }\n \n@@ -675,9 +664,8 @@ pub(crate) fn snippet_text_document_ops(\n             if !initial_contents.is_empty() {\n                 let text_document =\n                     lsp_types::OptionalVersionedTextDocumentIdentifier { uri, version: None };\n-                let range = range(&LineIndex::new(\"\"), TextRange::empty(TextSize::from(0)));\n                 let text_edit = lsp_ext::SnippetTextEdit {\n-                    range,\n+                    range: lsp_types::Range::default(),\n                     new_text: initial_contents,\n                     insert_text_format: Some(lsp_types::InsertTextFormat::PlainText),\n                 };\n@@ -868,7 +856,7 @@ pub(crate) fn code_lens(\n ) -> Result<lsp_types::CodeLens> {\n     match annotation.kind {\n         AnnotationKind::Runnable { debug, runnable: run } => {\n-            let line_index = snap.analysis.file_line_index(run.nav.file_id)?;\n+            let line_index = snap.file_line_index(run.nav.file_id)?;\n             let annotation_range = range(&line_index, annotation.range);\n \n             let action = run.action();\n@@ -884,7 +872,7 @@ pub(crate) fn code_lens(\n             Ok(lsp_types::CodeLens { range: annotation_range, command: Some(command), data: None })\n         }\n         AnnotationKind::HasImpls { position: file_position, data } => {\n-            let line_index = snap.analysis.file_line_index(file_position.file_id)?;\n+            let line_index = snap.file_line_index(file_position.file_id)?;\n             let annotation_range = range(&line_index, annotation.range);\n             let url = url(snap, file_position.file_id);\n \n@@ -927,7 +915,7 @@ pub(crate) fn code_lens(\n             })\n         }\n         AnnotationKind::HasReferences { position: file_position, data } => {\n-            let line_index = snap.analysis.file_line_index(file_position.file_id)?;\n+            let line_index = snap.file_line_index(file_position.file_id)?;\n             let annotation_range = range(&line_index, annotation.range);\n             let url = url(snap, file_position.file_id);\n \n@@ -1061,6 +1049,8 @@ pub(crate) fn rename_error(err: RenameError) -> crate::LspError {\n \n #[cfg(test)]\n mod tests {\n+    use std::sync::Arc;\n+\n     use hir::PrefixKind;\n     use ide::Analysis;\n     use ide_db::helpers::{insert_use::InsertUseConfig, SnippetCap};\n@@ -1078,7 +1068,8 @@ mod tests {\n         }\"#;\n \n         let (offset, text) = test_utils::extract_offset(fixture);\n-        let line_index = LineIndex::new(&text);\n+        let line_index =\n+            LineIndex { index: Arc::new(ide::LineIndex::new(&text)), endings: LineEndings::Unix };\n         let (analysis, file_id) = Analysis::from_single_file(text);\n         let completions: Vec<(String, Option<String>)> = analysis\n             .completions(\n@@ -1096,7 +1087,7 @@ mod tests {\n             .unwrap()\n             .into_iter()\n             .filter(|c| c.label().ends_with(\"arg\"))\n-            .map(|c| completion_item(&line_index, LineEndings::Unix, c))\n+            .map(|c| completion_item(&line_index, c))\n             .flat_map(|comps| comps.into_iter().map(|c| (c.label, c.sort_text)))\n             .collect();\n         expect_test::expect![[r#\"\n@@ -1134,7 +1125,8 @@ fn main() {\n         let folds = analysis.folding_ranges(file_id).unwrap();\n         assert_eq!(folds.len(), 4);\n \n-        let line_index = LineIndex::new(&text);\n+        let line_index =\n+            LineIndex { index: Arc::new(ide::LineIndex::new(&text)), endings: LineEndings::Unix };\n         let converted: Vec<lsp_types::FoldingRange> =\n             folds.into_iter().map(|it| folding_range(&text, &line_index, true, it)).collect();\n "}]}