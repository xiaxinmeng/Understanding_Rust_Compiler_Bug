{"sha": "d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "node_id": "C_kwDOAAsO6NoAKGQwZTE0OTFlY2Q2YWIzMGE0N2ViZTI5ZjhhODY0NjNlYWNjNmE5OTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-27T06:12:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-27T06:12:17Z"}, "message": "Auto merge of #101074 - JohnTitor:rollup-zwznihq, r=JohnTitor\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #96240 (Stabilize `const_ptr_offset_from`.)\n - #99784 (Make forward compatibility lint deprecated_cfg_attr_crate_type_name deny by default)\n - #100811 (Fix wrong compiletest filters on Windows)\n - #100924 (Smaller improvements of tidy and the unicode generator)\n - #100953 (Update documentation for `write!` and `writeln!`)\n - #101018 (rustdoc: omit start/end tags for empty item description blocks)\n - #101044 (rustdoc: remove unused CSS for `hidden-by-*-hider`)\n - #101046 (rustdoc: remove incorrect CSS selector `.impl-items table td`)\n - #101057 (Merge implementations of HIR fn_decl and fn_sig.)\n - #101062 (rustdoc: remove empty extern_crates and type=\"text/javascript\" on script)\n - #101063 (Merge duplicated CSS rules)\n\nFailed merges:\n\n - #101055 (Use smaller span for suggestions)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "80b3628973454308a3c7a18bae640c758422db31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80b3628973454308a3c7a18bae640c758422db31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "html_url": "https://github.com/rust-lang/rust/commit/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9845f4c47e7062867c73b6bed8f1df273b56d5d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9845f4c47e7062867c73b6bed8f1df273b56d5d7", "html_url": "https://github.com/rust-lang/rust/commit/9845f4c47e7062867c73b6bed8f1df273b56d5d7"}, {"sha": "bd893725637d38e508811c868f100bda3d13583b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd893725637d38e508811c868f100bda3d13583b", "html_url": "https://github.com/rust-lang/rust/commit/bd893725637d38e508811c868f100bda3d13583b"}], "stats": {"total": 279, "additions": 132, "deletions": 147}, "files": [{"sha": "a069c49b0cc1eff6b8d8618a789bbcba1e0eba2b", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -3216,7 +3216,7 @@ impl<'hir> OwnerNode<'hir> {\n         }\n     }\n \n-    pub fn fn_decl(&self) -> Option<&FnDecl<'hir>> {\n+    pub fn fn_decl(self) -> Option<&'hir FnDecl<'hir>> {\n         match self {\n             OwnerNode::TraitItem(TraitItem { kind: TraitItemKind::Fn(fn_sig, _), .. })\n             | OwnerNode::ImplItem(ImplItem { kind: ImplItemKind::Fn(fn_sig, _), .. })\n@@ -3400,19 +3400,20 @@ impl<'hir> Node<'hir> {\n         }\n     }\n \n-    pub fn fn_decl(&self) -> Option<&'hir FnDecl<'hir>> {\n+    pub fn fn_decl(self) -> Option<&'hir FnDecl<'hir>> {\n         match self {\n             Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(fn_sig, _), .. })\n             | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(fn_sig, _), .. })\n             | Node::Item(Item { kind: ItemKind::Fn(fn_sig, _, _), .. }) => Some(fn_sig.decl),\n-            Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, _, _), .. }) => {\n+            Node::Expr(Expr { kind: ExprKind::Closure(Closure { fn_decl, .. }), .. })\n+            | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, _, _), .. }) => {\n                 Some(fn_decl)\n             }\n             _ => None,\n         }\n     }\n \n-    pub fn fn_sig(&self) -> Option<&'hir FnSig<'hir>> {\n+    pub fn fn_sig(self) -> Option<&'hir FnSig<'hir>> {\n         match self {\n             Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(fn_sig, _), .. })\n             | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(fn_sig, _), .. })"}, {"sha": "2dca6acdd6d6fb562331476c6bec93a59df7f847", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -3094,7 +3094,7 @@ declare_lint! {\n     ///\n     /// ### Example\n     ///\n-    /// ```rust\n+    /// ```rust,compile_fail\n     /// #![cfg_attr(debug_assertions, crate_type = \"lib\")]\n     /// ```\n     ///\n@@ -3114,7 +3114,7 @@ declare_lint! {\n     /// rustc instead of `#![cfg_attr(..., crate_type = \"...\")]` and\n     /// `--crate-name` instead of `#![cfg_attr(..., crate_name = \"...\")]`.\n     pub DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,\n-    Warn,\n+    Deny,\n     \"detects usage of `#![cfg_attr(..., crate_type/crate_name = \\\"...\\\")]`\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #91632 <https://github.com/rust-lang/rust/issues/91632>\","}, {"sha": "25c18cf50c11f3663aa19d3ce98fbede33efa959", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -17,28 +17,6 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n-fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {\n-    match node {\n-        Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })\n-        | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })\n-        | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),\n-        Node::Expr(Expr { kind: ExprKind::Closure(Closure { fn_decl, .. }), .. })\n-        | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {\n-            Some(fn_decl)\n-        }\n-        _ => None,\n-    }\n-}\n-\n-pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {\n-    match &node {\n-        Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })\n-        | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })\n-        | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),\n-        _ => None,\n-    }\n-}\n-\n #[inline]\n pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {\n     match node {\n@@ -389,15 +367,15 @@ impl<'hir> Map<'hir> {\n \n     pub fn fn_decl_by_hir_id(self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {\n         if let Some(node) = self.find(hir_id) {\n-            fn_decl(node)\n+            node.fn_decl()\n         } else {\n             bug!(\"no node for hir_id `{}`\", hir_id)\n         }\n     }\n \n     pub fn fn_sig_by_hir_id(self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {\n         if let Some(node) = self.find(hir_id) {\n-            fn_sig(node)\n+            node.fn_sig()\n         } else {\n             bug!(\"no node for hir_id `{}`\", hir_id)\n         }"}, {"sha": "e72d016d7ac91ded55717bb4007ab24ae0021fda", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -541,7 +541,7 @@ fn fn_sig_and_body<'tcx>(\n     // to HIR for it.\n     let hir_node = tcx.hir().get_if_local(def_id).expect(\"expected DefId is local\");\n     let fn_body_id = hir::map::associated_body(hir_node).expect(\"HIR node is a function with body\");\n-    (hir::map::fn_sig(hir_node), tcx.hir().body(fn_body_id))\n+    (hir_node.fn_sig(), tcx.hir().body(fn_body_id))\n }\n \n fn get_body_span<'tcx>("}, {"sha": "f654d6e560c806d1fcb3fe9ccbe572664f0e1cb2", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -4,7 +4,6 @@ use rustc_errors::{\n     MultiSpan,\n };\n use rustc_hir as hir;\n-use rustc_middle::hir::map::fn_sig;\n use rustc_middle::ty::{self as ty, AssocItems, AssocKind, TyCtxt};\n use rustc_session::Session;\n use rustc_span::def_id::DefId;\n@@ -368,7 +367,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         &self,\n         num_params_to_take: usize,\n     ) -> String {\n-        let fn_sig = self.tcx.hir().get_if_local(self.def_id).and_then(fn_sig);\n+        let fn_sig = self.tcx.hir().get_if_local(self.def_id).and_then(hir::Node::fn_sig);\n         let is_used_in_input = |def_id| {\n             fn_sig.map_or(false, |fn_sig| {\n                 fn_sig.decl.inputs.iter().any(|ty| match ty.kind {"}, {"sha": "50ee97e980ce71c8c39a1d419293f48988017dac", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -1992,11 +1992,11 @@ extern \"rust-intrinsic\" {\n     pub fn nontemporal_store<T>(ptr: *mut T, val: T);\n \n     /// See documentation of `<*const T>::offset_from` for details.\n-    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"92980\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset_from\", since = \"1.65.0\")]\n     pub fn ptr_offset_from<T>(ptr: *const T, base: *const T) -> isize;\n \n     /// See documentation of `<*const T>::sub_ptr` for details.\n-    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"92980\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_sub_ptr\", issue = \"95892\")]\n     pub fn ptr_offset_from_unsigned<T>(ptr: *const T, base: *const T) -> usize;\n \n     /// See documentation of `<*const T>::guaranteed_eq` for details."}, {"sha": "bf75796f1fcb2d2bc6fedf979848b0e0f3854d9c", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -130,7 +130,6 @@\n #![feature(const_replace)]\n #![feature(const_ptr_as_ref)]\n #![feature(const_ptr_is_null)]\n-#![feature(const_ptr_offset_from)]\n #![feature(const_ptr_read)]\n #![feature(const_ptr_write)]\n #![feature(const_raw_ptr_comparison)]"}, {"sha": "0bd9c8e9acfcb7424908c1ee8a041e2ff108a256", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -457,11 +457,12 @@ macro_rules! r#try {\n ///\n /// A module can import both `std::fmt::Write` and `std::io::Write` and call `write!` on objects\n /// implementing either, as objects do not typically implement both. However, the module must\n-/// import the traits qualified so their names do not conflict:\n+/// avoid conflict between the trait names, such as by importing them as `_` or otherwise renaming\n+/// them:\n ///\n /// ```\n-/// use std::fmt::Write as FmtWrite;\n-/// use std::io::Write as IoWrite;\n+/// use std::fmt::Write as _;\n+/// use std::io::Write as _;\n ///\n /// fn main() -> Result<(), Box<dyn std::error::Error>> {\n ///     let mut s = String::new();\n@@ -474,6 +475,23 @@ macro_rules! r#try {\n /// }\n /// ```\n ///\n+/// If you also need the trait names themselves, such as to implement one or both on your types,\n+/// import the containing module and then name them with a prefix:\n+///\n+/// ```\n+/// # #![allow(unused_imports)]\n+/// use std::fmt::{self, Write as _};\n+/// use std::io::{self, Write as _};\n+///\n+/// struct Example;\n+///\n+/// impl fmt::Write for Example {\n+///     fn write_str(&mut self, _s: &str) -> core::fmt::Result {\n+///          unimplemented!();\n+///     }\n+/// }\n+/// ```\n+///\n /// Note: This macro can be used in `no_std` setups as well.\n /// In a `no_std` setup you are responsible for the implementation details of the components.\n ///\n@@ -526,25 +544,6 @@ macro_rules! write {\n ///     Ok(())\n /// }\n /// ```\n-///\n-/// A module can import both `std::fmt::Write` and `std::io::Write` and call `write!` on objects\n-/// implementing either, as objects do not typically implement both. However, the module must\n-/// import the traits qualified so their names do not conflict:\n-///\n-/// ```\n-/// use std::fmt::Write as FmtWrite;\n-/// use std::io::Write as IoWrite;\n-///\n-/// fn main() -> Result<(), Box<dyn std::error::Error>> {\n-///     let mut s = String::new();\n-///     let mut v = Vec::new();\n-///\n-///     writeln!(&mut s, \"{} {}\", \"abc\", 123)?; // uses fmt::Write::write_fmt\n-///     writeln!(&mut v, \"s = {:?}\", s)?; // uses io::Write::write_fmt\n-///     assert_eq!(v, b\"s = \\\"abc 123\\\\n\\\"\\n\");\n-///     Ok(())\n-/// }\n-/// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"writeln_macro\")]"}, {"sha": "08fbb79fa654c0a30d00eea46ca0614aa62ee3f9", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -641,7 +641,7 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[stable(feature = \"ptr_offset_from\", since = \"1.47.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"92980\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset_from\", since = \"1.65.0\")]\n     #[inline]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn offset_from(self, origin: *const T) -> isize"}, {"sha": "8467469053151fc05273b1d77f6543d53fe648e6", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -824,7 +824,7 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[stable(feature = \"ptr_offset_from\", since = \"1.47.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"92980\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset_from\", since = \"1.65.0\")]\n     #[inline(always)]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn offset_from(self, origin: *const T) -> isize"}, {"sha": "c759d9b88e2ff02372c9f1a4ad998e319932d364", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -1514,7 +1514,15 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         test_args.append(&mut builder.config.cmd.test_args());\n \n-        cmd.args(&test_args);\n+        // On Windows, replace forward slashes in test-args by backslashes\n+        // so the correct filters are passed to libtest\n+        if cfg!(windows) {\n+            let test_args_win: Vec<String> =\n+                test_args.iter().map(|s| s.replace(\"/\", \"\\\\\")).collect();\n+            cmd.args(&test_args_win);\n+        } else {\n+            cmd.args(&test_args);\n+        }\n \n         if builder.is_verbose() {\n             cmd.arg(\"--verbose\");"}, {"sha": "710064a37d0415e1cac3ff91d11b767c4defc195", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -371,16 +371,21 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                     }\n                     clean::ImportKind::Glob => String::new(),\n                 };\n+                let stab_tags = stab_tags.unwrap_or_default();\n+                let (stab_tags_before, stab_tags_after) = if stab_tags.is_empty() {\n+                    (\"\", \"\")\n+                } else {\n+                    (\"<div class=\\\"item-right docblock-short\\\">\", \"</div>\")\n+                };\n                 write!(\n                     w,\n                     \"<div class=\\\"item-left {stab}{add}import-item\\\"{id}>\\\n                          <code>{vis}{imp}</code>\\\n                      </div>\\\n-                     <div class=\\\"item-right docblock-short\\\">{stab_tags}</div>\",\n+                     {stab_tags_before}{stab_tags}{stab_tags_after}\",\n                     stab = stab.unwrap_or_default(),\n                     vis = myitem.visibility.print_with_space(myitem.item_id, cx),\n                     imp = import.print(cx),\n-                    stab_tags = stab_tags.unwrap_or_default(),\n                 );\n                 w.write_str(ITEM_TABLE_ROW_CLOSE);\n             }\n@@ -412,6 +417,12 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n \n                 let doc_value = myitem.doc_value().unwrap_or_default();\n                 w.write_str(ITEM_TABLE_ROW_OPEN);\n+                let docs = MarkdownSummaryLine(&doc_value, &myitem.links(cx)).into_string();\n+                let (docs_before, docs_after) = if docs.is_empty() {\n+                    (\"\", \"\")\n+                } else {\n+                    (\"<div class=\\\"item-right docblock-short\\\">\", \"</div>\")\n+                };\n                 write!(\n                     w,\n                     \"<div class=\\\"item-left {stab}{add}module-item\\\">\\\n@@ -420,11 +431,10 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                         {unsafety_flag}\\\n                         {stab_tags}\\\n                      </div>\\\n-                     <div class=\\\"item-right docblock-short\\\">{docs}</div>\",\n+                     {docs_before}{docs}{docs_after}\",\n                     name = myitem.name.unwrap(),\n                     visibility_emoji = visibility_emoji,\n                     stab_tags = extra_info_tags(myitem, item, cx.tcx()),\n-                    docs = MarkdownSummaryLine(&doc_value, &myitem.links(cx)).into_string(),\n                     class = myitem.type_(),\n                     add = add,\n                     stab = stab.unwrap_or_default(),\n@@ -987,7 +997,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n     // So C's HTML will have something like this:\n     //\n     // ```html\n-    // <script type=\"text/javascript\" src=\"/implementors/A/trait.Foo.js\"\n+    // <script src=\"/implementors/A/trait.Foo.js\"\n     //     data-ignore-extern-crates=\"A,B\" async></script>\n     // ```\n     //\n@@ -1013,9 +1023,11 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n         .map(|cnum| cx.shared.tcx.crate_name(cnum).to_string())\n         .collect::<Vec<_>>()\n         .join(\",\");\n+    let (extern_before, extern_after) =\n+        if extern_crates.is_empty() { (\"\", \"\") } else { (\" data-ignore-extern-crates=\\\"\", \"\\\"\") };\n     write!(\n         w,\n-        \"<script type=\\\"text/javascript\\\" src=\\\"{src}\\\" data-ignore-extern-crates=\\\"{extern_crates}\\\" async></script>\",\n+        \"<script src=\\\"{src}\\\"{extern_before}{extern_crates}{extern_after} async></script>\",\n         src = js_src_path.finish(),\n     );\n }"}, {"sha": "deed6eaf0cb6b73623d6ab957f7d9a0d5851ce3f", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 9, "deletions": 32, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -364,11 +364,6 @@ li {\n \tmargin-left: 0px;\n }\n \n-nav.sub {\n-\tposition: relative;\n-\tfont-size: 1rem;\n-}\n-\n .sub-container {\n \tdisplay: flex;\n \tflex-direction: row;\n@@ -638,9 +633,6 @@ h2.location a {\n }\n .docblock-short p {\n \tdisplay: inline;\n-}\n-\n-.docblock-short p {\n \toverflow: hidden;\n \ttext-overflow: ellipsis;\n \tmargin: 0;\n@@ -777,7 +769,7 @@ pre, .rustdoc.source .example-wrap {\n .content .docblock >.impl-items table td {\n \tpadding: 0;\n }\n-.content .docblock > .impl-items .table-display, .impl-items table td {\n+.content .docblock > .impl-items .table-display {\n \tborder: none;\n }\n \n@@ -820,6 +812,8 @@ pre, .rustdoc.source .example-wrap {\n }\n \n nav.sub {\n+\tposition: relative;\n+\tfont-size: 1rem;\n \tflex-grow: 1;\n \tmargin-bottom: 25px;\n }\n@@ -919,6 +913,7 @@ table,\n \tposition: relative;\n \tdisplay: flex;\n \theight: 34px;\n+\tmargin-top: 4px;\n }\n .search-container > * {\n \theight: 100%;\n@@ -990,9 +985,6 @@ so that we can apply CSS-filters to change the arrow color in themes */\n #crate-search > option {\n \tfont-size: 1rem;\n }\n-.search-container {\n-\tmargin-top: 4px;\n-}\n .search-input {\n \t/* Override Normalize.css: it has a rule that sets\n \t   -webkit-appearance: textfield for search inputs. That\n@@ -1188,6 +1180,7 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tpadding-left: 12px;\n \tpadding-right: 2px;\n \tposition: initial;\n+\tfloat: right;\n }\n \n .impl-items .srclink, .impl .srclink, .methods .srclink {\n@@ -1196,10 +1189,6 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tfont-size: 1rem;\n }\n \n-.rightside {\n-\tfloat: right;\n-}\n-\n td.summary-column {\n \twidth: 100%;\n }\n@@ -1226,7 +1215,7 @@ a.test-arrow {\n .example-wrap:hover .test-arrow {\n \tvisibility: visible;\n }\n-a.test-arrow:hover{\n+a.test-arrow:hover {\n \ttext-decoration: none;\n }\n \n@@ -1494,10 +1483,6 @@ pre.rust {\n \toutline: none;\n }\n \n-#copy-path {\n-\theight: 34px;\n-\tbackground-color: var(--main-background-color);\n-}\n #settings-menu > a, #help-button > button, #copy-path {\n \tpadding: 5px;\n \twidth: 33px;\n@@ -1555,7 +1540,8 @@ input:checked + .slider {\n }\n \n #copy-path {\n-\tbackground: initial;\n+\theight: 34px;\n+\tbackground-color: var(--main-background-color);\n \tmargin-left: 10px;\n \tpadding: 0;\n \tpadding-left: 2px;\n@@ -1573,12 +1559,6 @@ kbd {\n \tcursor: default;\n }\n \n-.hidden-by-impl-hider,\n-.hidden-by-usual-hider {\n-\t/* important because of conflicting rule for small screens */\n-\tdisplay: none !important;\n-}\n-\n #implementations-list > h3 > span.in-band {\n \twidth: 100%;\n }\n@@ -1841,10 +1821,6 @@ in storage.js plus the media query with (min-width: 701px)\n \t\tdisplay: none;\n \t}\n \n-\t.sidebar-elems {\n-\t\tmargin-top: 1em;\n-\t}\n-\n \t.sidebar {\n \t\tposition: fixed;\n \t\ttop: 45px;\n@@ -1938,6 +1914,7 @@ in storage.js plus the media query with (min-width: 701px)\n \t}\n \n \t.sidebar-elems {\n+\t\tmargin-top: 1em;\n \t\tbackground-color: var(--sidebar-background-color);\n \t}\n "}, {"sha": "1efa67a44b5a0b394d7eb673c4c7d8d6a43cadd1", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -153,9 +153,6 @@ a {\n .sidebar h3 a {\n \tcolor: white;\n }\n-.search-results a {\n-\tcolor: #0096cf;\n-}\n body.source .example-wrap pre.rust a {\n \tbackground: #333;\n }\n@@ -359,15 +356,13 @@ h3:not(.impl):not(.method):not(.type):not(.tymethod), h4:not(.method):not(.type)\n .content span.constant,.content a.constant,.block a.current.constant,.content span.static,\n .content a.static, .block a.current.static {}\n .content span.keyword,.content a.keyword,.block a.current.keyword {}\n-pre.rust .comment {}\n .content span.traitalias,.content a.traitalias,.block a.current.traitalias {}\n .content span.fn,.content a.fn,.block a.current.fn,.content span.method,.content a.method,\n .block a.current.method,.content span.tymethod,.content a.tymethod,.block a.current.tymethod,\n .content .fnname {}\n pre.rust .kw {}\n pre.rust .self,pre.rust .bool-val,pre.rust .prelude-val,pre.rust .attribute {}\n .content span.foreigntype,.content a.foreigntype,.block a.current.foreigntype {}\n-pre.rust .doccomment {}\n .stab.deprecated {}\n .content a.attr,.content a.derive,.content a.macro {}\n .stab.portability {}"}, {"sha": "7f61c95e794b0696fde560ee74a6d42dd8a3ac95", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -528,9 +528,9 @@ function loadCss(cssFileName) {\n         // We don't want to include impls from this JS file, when the HTML already has them.\n         // The current crate should always be ignored. Other crates that should also be\n         // ignored are included in the attribute `data-ignore-extern-crates`.\n-        const ignoreExternCrates = document\n-            .querySelector(\"script[data-ignore-extern-crates]\")\n-            .getAttribute(\"data-ignore-extern-crates\");\n+        const script = document\n+            .querySelector(\"script[data-ignore-extern-crates]\");\n+        const ignoreExternCrates = script ? script.getAttribute(\"data-ignore-extern-crates\") : \"\";\n         for (const lib of libs) {\n             if (lib === window.currentCrate || ignoreExternCrates.indexOf(lib) !== -1) {\n                 continue;"}, {"sha": "c6ecb7aa96abcaf2defd9c6724c04385fc768c1a", "filename": "src/test/codegen/external-no-mangle-statics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -1,12 +1,11 @@\n // revisions: lib staticlib\n // ignore-emscripten default visibility is hidden\n // compile-flags: -O\n+// [lib] compile-flags: --crate-type lib\n+// [staticlib] compile-flags: --crate-type staticlib\n // `#[no_mangle]`d static variables always have external linkage, i.e., no `internal` in their\n // definitions\n \n-#![cfg_attr(lib, crate_type = \"lib\")]\n-#![cfg_attr(staticlib, crate_type = \"staticlib\")]\n-\n // CHECK: @A = local_unnamed_addr constant\n #[no_mangle]\n static A: u8 = 0;"}, {"sha": "7263156ab2bb3499e4f9e4846b843532ba2ecfb6", "filename": "src/test/rustdoc-gui/docblock-table.goml", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Frustdoc-gui%2Fdocblock-table.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Frustdoc-gui%2Fdocblock-table.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-table.goml?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -0,0 +1,4 @@\n+goto: file://|DOC_PATH|/test_docs/doc_block_table/struct.DocBlockTable.html#method.func\n+\n+compare-elements-css: (\".impl-items .docblock table th\", \".top-doc .docblock table th\", [\"border\"])\n+compare-elements-css: (\".impl-items .docblock table td\", \".top-doc .docblock table td\", [\"border\"])"}, {"sha": "4bff32b3d5db137b2a86c9a4340275ac5418c334", "filename": "src/test/rustdoc-gui/item-summary-table.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Frustdoc-gui%2Fitem-summary-table.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Frustdoc-gui%2Fitem-summary-table.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-summary-table.goml?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -3,4 +3,4 @@ goto: file://|DOC_PATH|/lib2/summary_table/index.html\n // We check that we picked the right item first.\n assert-text: (\".item-table .item-left\", \"Foo\")\n // Then we check that its summary is empty.\n-assert-text: (\".item-table .item-right\", \"\")\n+assert-false: \".item-table .item-right\""}, {"sha": "a02d5934cc2457e2a8a6198ceac300c722b0f0e4", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -293,3 +293,29 @@ pub mod details {\n     /// </details>\n     pub struct Details;\n }\n+\n+pub mod doc_block_table {\n+\n+    pub trait DocBlockTableTrait {\n+        fn func();\n+    }\n+\n+    /// Struct doc.\n+    ///\n+    /// | header1                  | header2                  |\n+    /// |--------------------------|--------------------------|\n+    /// | Lorem Ipsum, Lorem Ipsum | Lorem Ipsum, Lorem Ipsum |\n+    pub struct DocBlockTable {}\n+\n+    impl DocBlockTableTrait for DocBlockTable {\n+        /// Trait impl func doc for struct.\n+        ///\n+        /// | header1                  | header2                  |\n+        /// |--------------------------|--------------------------|\n+        /// | Lorem Ipsum, Lorem Ipsum | Lorem Ipsum, Lorem Ipsum |\n+        fn func() {\n+            println!();\n+        }\n+    }\n+\n+}"}, {"sha": "3c5fa7b36adbf9465b8117d8e398250a3dd98b7b", "filename": "src/test/rustdoc/short-docblock-codeblock.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Frustdoc%2Fshort-docblock-codeblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Frustdoc%2Fshort-docblock-codeblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fshort-docblock-codeblock.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -1,8 +1,6 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/index.html '//*[@class=\"item-right docblock-short\"]' \"\"\n-// @!has foo/index.html '//*[@class=\"item-right docblock-short\"]' \"Some text.\"\n-// @!has foo/index.html '//*[@class=\"item-right docblock-short\"]' \"let x = 12;\"\n+// @count foo/index.html '//*[@class=\"item-right docblock-short\"]' 0\n \n /// ```\n /// let x = 12;"}, {"sha": "1f23dadc4322659906d35c7b80dbb61f3d1e7c95", "filename": "src/test/ui/cfg/future-compat-crate-attributes-using-cfg_attr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -1,7 +1,6 @@\n // check-fail\n // compile-flags:--cfg foo\n \n-#![deny(warnings)]\n #![cfg_attr(foo, crate_type=\"bin\")]\n //~^ERROR `crate_type` within\n //~| WARN this was previously accepted"}, {"sha": "b52535ffdbab2d0fb2cd2f62f36aeae196490e1b", "filename": "src/test/ui/cfg/future-compat-crate-attributes-using-cfg_attr.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.stderr?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -1,20 +1,15 @@\n error: `crate_type` within an `#![cfg_attr] attribute is deprecated`\n-  --> $DIR/future-compat-crate-attributes-using-cfg_attr.rs:5:18\n+  --> $DIR/future-compat-crate-attributes-using-cfg_attr.rs:4:18\n    |\n LL | #![cfg_attr(foo, crate_type=\"bin\")]\n    |                  ^^^^^^^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/future-compat-crate-attributes-using-cfg_attr.rs:4:9\n-   |\n-LL | #![deny(warnings)]\n-   |         ^^^^^^^^\n-   = note: `#[deny(deprecated_cfg_attr_crate_type_name)]` implied by `#[deny(warnings)]`\n+   = note: `#[deny(deprecated_cfg_attr_crate_type_name)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #91632 <https://github.com/rust-lang/rust/issues/91632>\n \n error: `crate_name` within an `#![cfg_attr] attribute is deprecated`\n-  --> $DIR/future-compat-crate-attributes-using-cfg_attr.rs:10:18\n+  --> $DIR/future-compat-crate-attributes-using-cfg_attr.rs:9:18\n    |\n LL | #![cfg_attr(foo, crate_name=\"bar\")]\n    |                  ^^^^^^^^^^^^^^^^\n@@ -23,7 +18,7 @@ LL | #![cfg_attr(foo, crate_name=\"bar\")]\n    = note: for more information, see issue #91632 <https://github.com/rust-lang/rust/issues/91632>\n \n error: `crate_type` within an `#![cfg_attr] attribute is deprecated`\n-  --> $DIR/future-compat-crate-attributes-using-cfg_attr.rs:5:18\n+  --> $DIR/future-compat-crate-attributes-using-cfg_attr.rs:4:18\n    |\n LL | #![cfg_attr(foo, crate_type=\"bin\")]\n    |                  ^^^^^^^^^^^^^^^^\n@@ -32,7 +27,7 @@ LL | #![cfg_attr(foo, crate_type=\"bin\")]\n    = note: for more information, see issue #91632 <https://github.com/rust-lang/rust/issues/91632>\n \n error: `crate_name` within an `#![cfg_attr] attribute is deprecated`\n-  --> $DIR/future-compat-crate-attributes-using-cfg_attr.rs:10:18\n+  --> $DIR/future-compat-crate-attributes-using-cfg_attr.rs:9:18\n    |\n LL | #![cfg_attr(foo, crate_name=\"bar\")]\n    |                  ^^^^^^^^^^^^^^^^"}, {"sha": "43c99799f770432f9cfba7e65b2e3fca5f6c02af", "filename": "src/test/ui/consts/const-eval/issue-91827-extern-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-91827-extern-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-91827-extern-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-91827-extern-types.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -3,7 +3,6 @@\n // Test that we can handle unsized types with an extern type tail part.\n // Regression test for issue #91827.\n \n-#![feature(const_ptr_offset_from)]\n #![feature(extern_types)]\n \n use std::ptr::addr_of;"}, {"sha": "b2c663fe617a47e6bb9f56fb23650aa5c3268291", "filename": "src/test/ui/consts/offset.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Fui%2Fconsts%2Foffset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Fui%2Fconsts%2Foffset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_ptr_offset_from)]\n use std::ptr;\n \n #[repr(C)]"}, {"sha": "465147041d966e1a624c3a979a03af7e2b93da71", "filename": "src/test/ui/consts/offset_from.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Fui%2Fconsts%2Foffset_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Fui%2Fconsts%2Foffset_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(const_ptr_offset_from)]\n #![feature(const_ptr_sub_ptr)]\n #![feature(ptr_sub_ptr)]\n "}, {"sha": "51163e650d6aa01f7f178377f03587993031dd68", "filename": "src/test/ui/consts/offset_from_ub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_ptr_offset_from)]\n+#![feature(const_ptr_sub_ptr)]\n #![feature(core_intrinsics)]\n \n use std::intrinsics::{ptr_offset_from, ptr_offset_from_unsigned};"}, {"sha": "0a226443e01ca088a5ea77152f94523e7cc6a2eb", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -217,7 +217,7 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n     println!(\"Checking which error codes lack tests...\");\n \n     for path in paths {\n-        super::walk(path, &mut |path| super::filter_dirs(path), &mut |entry, contents| {\n+        super::walk(path, &mut super::filter_dirs, &mut |entry, contents| {\n             let file_name = entry.file_name();\n             let entry_path = entry.path();\n "}, {"sha": "2fe578acd90e72f25e9a186a0591382dc8a5d7c3", "filename": "src/tools/unicode-table-generator/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -221,7 +221,7 @@ fn main() {\n     let write_location = std::env::args().nth(1).unwrap_or_else(|| {\n         eprintln!(\"Must provide path to write unicode tables to\");\n         eprintln!(\n-            \"e.g. {} library/core/unicode/unicode_data.rs\",\n+            \"e.g. {} library/core/src/unicode/unicode_data.rs\",\n             std::env::args().next().unwrap_or_default()\n         );\n         std::process::exit(1);"}, {"sha": "714bb53382e706c708ca294bd8b9e11e378474a9", "filename": "src/tools/unicode-table-generator/src/unicode_download.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftools%2Funicode-table-generator%2Fsrc%2Funicode_download.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997/src%2Ftools%2Funicode-table-generator%2Fsrc%2Funicode_download.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Funicode_download.rs?ref=d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "patch": "@@ -1,6 +1,6 @@\n use crate::UNICODE_DIRECTORY;\n use std::path::Path;\n-use std::process::Command;\n+use std::process::{Command, Output};\n \n static URL_PREFIX: &str = \"https://www.unicode.org/Public/UCD/latest/ucd/\";\n \n@@ -9,6 +9,18 @@ static README: &str = \"ReadMe.txt\";\n static RESOURCES: &[&str] =\n     &[\"DerivedCoreProperties.txt\", \"PropList.txt\", \"UnicodeData.txt\", \"SpecialCasing.txt\"];\n \n+#[track_caller]\n+fn fetch(url: &str) -> Output {\n+    let output = Command::new(\"curl\").arg(URL_PREFIX.to_owned() + url).output().unwrap();\n+    if !output.status.success() {\n+        panic!(\n+            \"Failed to run curl to fetch {url}: stderr: {}\",\n+            String::from_utf8_lossy(&output.stderr)\n+        );\n+    }\n+    output\n+}\n+\n pub fn fetch_latest() {\n     let directory = Path::new(UNICODE_DIRECTORY);\n     if directory.exists() {\n@@ -20,27 +32,14 @@ pub fn fetch_latest() {\n     if let Err(e) = std::fs::create_dir_all(directory) {\n         panic!(\"Failed to create {UNICODE_DIRECTORY:?}: {e}\");\n     }\n-    let output = Command::new(\"curl\").arg(URL_PREFIX.to_owned() + README).output().unwrap();\n-    if !output.status.success() {\n-        panic!(\n-            \"Failed to run curl to fetch readme: stderr: {}\",\n-            String::from_utf8_lossy(&output.stderr)\n-        );\n-    }\n+    let output = fetch(README);\n     let current = std::fs::read_to_string(directory.join(README)).unwrap_or_default();\n     if current.as_bytes() != &output.stdout[..] {\n         std::fs::write(directory.join(README), output.stdout).unwrap();\n     }\n \n     for resource in RESOURCES {\n-        let output = Command::new(\"curl\").arg(URL_PREFIX.to_owned() + resource).output().unwrap();\n-        if !output.status.success() {\n-            panic!(\n-                \"Failed to run curl to fetch {}: stderr: {}\",\n-                resource,\n-                String::from_utf8_lossy(&output.stderr)\n-            );\n-        }\n+        let output = fetch(resource);\n         std::fs::write(directory.join(resource), output.stdout).unwrap();\n     }\n }"}]}