{"sha": "57a5c3ac9f7091c8a2f52a7fd2cab86d8a103858", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YTVjM2FjOWY3MDkxYzhhMmY1MmE3ZmQyY2FiODZkOGExMDM4NTg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-06T17:38:38Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-06T19:37:59Z"}, "message": "rustc: Factor derived tydesc construction out of get_tydesc()", "tree": {"sha": "0b15a6b8afa4e509c9aed3b5e8008091446c8851", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b15a6b8afa4e509c9aed3b5e8008091446c8851"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57a5c3ac9f7091c8a2f52a7fd2cab86d8a103858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57a5c3ac9f7091c8a2f52a7fd2cab86d8a103858", "html_url": "https://github.com/rust-lang/rust/commit/57a5c3ac9f7091c8a2f52a7fd2cab86d8a103858", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57a5c3ac9f7091c8a2f52a7fd2cab86d8a103858/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e7aeed2d51327a7e1c806e66267465d0adcfa25", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7aeed2d51327a7e1c806e66267465d0adcfa25", "html_url": "https://github.com/rust-lang/rust/commit/8e7aeed2d51327a7e1c806e66267465d0adcfa25"}], "stats": {"total": 87, "additions": 44, "deletions": 43}, "files": [{"sha": "10ea6c7defdb7f4011599da26e262712907ef531", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 44, "deletions": 43, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/57a5c3ac9f7091c8a2f52a7fd2cab86d8a103858/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a5c3ac9f7091c8a2f52a7fd2cab86d8a103858/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=57a5c3ac9f7091c8a2f52a7fd2cab86d8a103858", "patch": "@@ -1612,6 +1612,49 @@ fn trans_stack_local_derived_tydesc(@block_ctxt cx, ValueRef llsz,\n     ret res(cx, lltydesc);\n }\n \n+fn mk_derived_tydesc(@block_ctxt cx, ty.t t, bool escapes) -> result {\n+    let uint n_params = ty.count_ty_params(cx.fcx.lcx.ccx.tcx, t);\n+    auto tys = linearize_ty_params(cx, t);\n+\n+    assert (n_params == _vec.len[uint](tys._0));\n+    assert (n_params == _vec.len[ValueRef](tys._1));\n+\n+    auto root = get_static_tydesc(cx, t, tys._0).tydesc;\n+\n+    auto tydescs = alloca(cx, T_array(T_ptr(T_tydesc(cx.fcx.lcx.ccx.tn)),\n+                                      1u /* for root*/ + n_params));\n+\n+    auto i = 0;\n+    auto tdp = cx.build.GEP(tydescs, vec(C_int(0), C_int(i)));\n+    cx.build.Store(root, tdp);\n+    i += 1;\n+    for (ValueRef td in tys._1) {\n+        auto tdp = cx.build.GEP(tydescs, vec(C_int(0), C_int(i)));\n+        cx.build.Store(td, tdp);\n+        i += 1;\n+    }\n+\n+    auto bcx = cx;\n+    auto sz = size_of(bcx, t);\n+    bcx = sz.bcx;\n+    auto align = align_of(bcx, t);\n+    bcx = align.bcx;\n+\n+    auto v;\n+    if (escapes) {\n+        v = trans_upcall(bcx, \"upcall_get_type_desc\",\n+                         vec(p2i(bcx.fcx.lcx.ccx.crate_ptr),\n+                             sz.val,\n+                             align.val,\n+                             C_int((1u + n_params) as int),\n+                             vp2i(bcx, tydescs)), true);\n+    } else {\n+        v = trans_stack_local_derived_tydesc(bcx, sz.val, align.val, tydescs);\n+    }\n+\n+    ret res(v.bcx, vi2p(v.bcx, v.val, T_ptr(T_tydesc(cx.fcx.lcx.ccx.tn))));\n+}\n+\n fn get_tydesc(&@block_ctxt cx, ty.t t, bool escapes) -> result {\n     // Is the supplied type a type param? If so, return the passed-in tydesc.\n     alt (ty.type_param(cx.fcx.lcx.ccx.tcx, t)) {\n@@ -1622,49 +1665,7 @@ fn get_tydesc(&@block_ctxt cx, ty.t t, bool escapes) -> result {\n     // Does it contain a type param? If so, generate a derived tydesc.\n \n     if (ty.type_contains_params(cx.fcx.lcx.ccx.tcx, t)) {\n-\n-        let uint n_params = ty.count_ty_params(cx.fcx.lcx.ccx.tcx, t);\n-        auto tys = linearize_ty_params(cx, t);\n-\n-        assert (n_params == _vec.len[uint](tys._0));\n-        assert (n_params == _vec.len[ValueRef](tys._1));\n-\n-        auto root = get_static_tydesc(cx, t, tys._0).tydesc;\n-\n-        auto tydescs = alloca(cx, T_array(T_ptr(T_tydesc(cx.fcx.lcx.ccx.tn)),\n-                                          1u /* for root*/ + n_params));\n-\n-        auto i = 0;\n-        auto tdp = cx.build.GEP(tydescs, vec(C_int(0), C_int(i)));\n-        cx.build.Store(root, tdp);\n-        i += 1;\n-        for (ValueRef td in tys._1) {\n-            auto tdp = cx.build.GEP(tydescs, vec(C_int(0), C_int(i)));\n-            cx.build.Store(td, tdp);\n-            i += 1;\n-        }\n-\n-        auto bcx = cx;\n-        auto sz = size_of(bcx, t);\n-        bcx = sz.bcx;\n-        auto align = align_of(bcx, t);\n-        bcx = align.bcx;\n-\n-        auto v;\n-        if (escapes) {\n-            v = trans_upcall(bcx, \"upcall_get_type_desc\",\n-                             vec(p2i(bcx.fcx.lcx.ccx.crate_ptr),\n-                                 sz.val,\n-                                 align.val,\n-                                 C_int((1u + n_params) as int),\n-                                 vp2i(bcx, tydescs)), true);\n-        } else {\n-            v = trans_stack_local_derived_tydesc(bcx, sz.val, align.val,\n-                                                 tydescs);\n-        }\n-\n-        ret res(v.bcx, vi2p(v.bcx, v.val,\n-                            T_ptr(T_tydesc(cx.fcx.lcx.ccx.tn))));\n+        ret mk_derived_tydesc(cx, t, escapes);\n     }\n \n     // Otherwise, generate a tydesc if necessary, and return it."}]}