{"sha": "e026b59cf4f4cb9dd86510438085efafbc630e5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMjZiNTljZjRmNGNiOWRkODY1MTA0MzgwODVlZmFmYmM2MzBlNWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-03T19:40:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-03T19:40:21Z"}, "message": "Auto merge of #48694 - kennytm:rollup, r=kennytm\n\nRollup of 8 pull requests\n\n- Successful merges: #48283, #48466, #48569, #48629, #48637, #48680, #48513, #48664\n- Failed merges:", "tree": {"sha": "43a39e9b97bf2cb152a365fbe4892c73794d2935", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43a39e9b97bf2cb152a365fbe4892c73794d2935"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e026b59cf4f4cb9dd86510438085efafbc630e5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e026b59cf4f4cb9dd86510438085efafbc630e5a", "html_url": "https://github.com/rust-lang/rust/commit/e026b59cf4f4cb9dd86510438085efafbc630e5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e026b59cf4f4cb9dd86510438085efafbc630e5a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b8bd530b0ec0dc7538c12799468867662f818cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b8bd530b0ec0dc7538c12799468867662f818cc", "html_url": "https://github.com/rust-lang/rust/commit/3b8bd530b0ec0dc7538c12799468867662f818cc"}, {"sha": "ea354b6a0141c40eef98a2281ddfe7aed59510fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea354b6a0141c40eef98a2281ddfe7aed59510fb", "html_url": "https://github.com/rust-lang/rust/commit/ea354b6a0141c40eef98a2281ddfe7aed59510fb"}], "stats": {"total": 331, "additions": 287, "deletions": 44}, "files": [{"sha": "5b7fd48129929d0fa3f33118b47fb10a78e7884e", "filename": ".gitmodules", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e026b59cf4f4cb9dd86510438085efafbc630e5a/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/e026b59cf4f4cb9dd86510438085efafbc630e5a/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=e026b59cf4f4cb9dd86510438085efafbc630e5a", "patch": "@@ -50,3 +50,6 @@\n [submodule \"src/llvm-emscripten\"]\n \tpath = src/llvm-emscripten\n \turl = https://github.com/rust-lang/llvm\n+[submodule \"src/stdsimd\"]\n+\tpath = src/stdsimd\n+\turl = https://github.com/rust-lang-nursery/stdsimd"}, {"sha": "3dfd25aade1e4146dd5747ab2298e1a1ff97dbee", "filename": "config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e026b59cf4f4cb9dd86510438085efafbc630e5a/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/e026b59cf4f4cb9dd86510438085efafbc630e5a/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=e026b59cf4f4cb9dd86510438085efafbc630e5a", "patch": "@@ -321,6 +321,9 @@\n # bootstrap)\n #codegen-backends = [\"llvm\"]\n \n+# This is the name of the directory in which codegen backends will get installed\n+#codegen-backends-dir = \"codegen-backends\"\n+\n # Flag indicating whether `libstd` calls an imported function to handle basic IO\n # when targeting WebAssembly. Enable this to debug tests for the `wasm32-unknown-unknown`\n # target, as without this option the test output will not be captured."}, {"sha": "77df372d4fa33ef6c7a4f874b430d617329a86e5", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=e026b59cf4f4cb9dd86510438085efafbc630e5a", "patch": "@@ -314,7 +314,6 @@ def __init__(self):\n         self.build_dir = os.path.join(os.getcwd(), \"build\")\n         self.clean = False\n         self.config_toml = ''\n-        self.printed = False\n         self.rust_root = os.path.abspath(os.path.join(__file__, '../../..'))\n         self.use_locked_deps = ''\n         self.use_vendored_sources = ''\n@@ -336,7 +335,6 @@ def download_stage0(self):\n         if self.rustc().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.rustc()) or\n                  self.program_out_of_date(self.rustc_stamp())):\n-            self.print_what_bootstrap_means()\n             if os.path.exists(self.bin_root()):\n                 shutil.rmtree(self.bin_root())\n             filename = \"rust-std-{}-{}.tar.gz\".format(\n@@ -351,10 +349,17 @@ def download_stage0(self):\n             with open(self.rustc_stamp(), 'w') as rust_stamp:\n                 rust_stamp.write(self.date)\n \n+            # This is required so that we don't mix incompatible MinGW\n+            # libraries/binaries that are included in rust-std with\n+            # the system MinGW ones.\n+            if \"pc-windows-gnu\" in self.build:\n+                filename = \"rust-mingw-{}-{}.tar.gz\".format(\n+                    rustc_channel, self.build)\n+                self._download_stage0_helper(filename, \"rust-mingw\")\n+\n         if self.cargo().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.cargo()) or\n                  self.program_out_of_date(self.cargo_stamp())):\n-            self.print_what_bootstrap_means()\n             filename = \"cargo-{}-{}.tar.gz\".format(cargo_channel, self.build)\n             self._download_stage0_helper(filename, \"cargo\")\n             self.fix_executable(\"{}/bin/cargo\".format(self.bin_root()))\n@@ -555,23 +560,6 @@ def exe_suffix():\n             return '.exe'\n         return ''\n \n-    def print_what_bootstrap_means(self):\n-        \"\"\"Prints more information about the build system\"\"\"\n-        if hasattr(self, 'printed'):\n-            return\n-        self.printed = True\n-        if os.path.exists(self.bootstrap_binary()):\n-            return\n-        if '--help' not in sys.argv or len(sys.argv) == 1:\n-            return\n-\n-        print('info: the build system for Rust is written in Rust, so this')\n-        print('      script is now going to download a stage0 rust compiler')\n-        print('      and then compile the build system itself')\n-        print('')\n-        print('info: in the meantime you can read more about rustbuild at')\n-        print('      src/bootstrap/README.md before the download finishes')\n-\n     def bootstrap_binary(self):\n         \"\"\"Return the path of the boostrap binary\n \n@@ -585,7 +573,6 @@ def bootstrap_binary(self):\n \n     def build_bootstrap(self):\n         \"\"\"Build bootstrap\"\"\"\n-        self.print_what_bootstrap_means()\n         build_dir = os.path.join(self.build_dir, \"bootstrap\")\n         if self.clean and os.path.exists(build_dir):\n             shutil.rmtree(build_dir)\n@@ -670,8 +657,16 @@ def set_dev_environment(self):\n         self._download_url = 'https://dev-static.rust-lang.org'\n \n \n-def bootstrap():\n+def bootstrap(help_triggered):\n     \"\"\"Configure, fetch, build and run the initial bootstrap\"\"\"\n+\n+    # If the user is asking for help, let them know that the whole download-and-build\n+    # process has to happen before anything is printed out.\n+    if help_triggered:\n+        print(\"info: Downloading and building bootstrap before processing --help\")\n+        print(\"      command. See src/bootstrap/README.md for help with common\")\n+        print(\"      commands.\")\n+\n     parser = argparse.ArgumentParser(description='Build rust')\n     parser.add_argument('--config')\n     parser.add_argument('--build')\n@@ -708,7 +703,7 @@ def bootstrap():\n             print('      and so in order to preserve your $HOME this will now')\n             print('      use vendored sources by default. Note that if this')\n             print('      does not work you should run a normal build first')\n-            print('      before running a command like `sudo make install`')\n+            print('      before running a command like `sudo ./x.py install`')\n \n     if build.use_vendored_sources:\n         if not os.path.exists('.cargo'):\n@@ -734,7 +729,10 @@ def bootstrap():\n     if 'dev' in data:\n         build.set_dev_environment()\n \n-    build.update_submodules()\n+    # No help text depends on submodules. This check saves ~1 minute of git commands, even if\n+    # all the submodules are present and downloaded!\n+    if not help_triggered:\n+        build.update_submodules()\n \n     # Fetch/build the bootstrap\n     build.build = args.build or build.build_triple()\n@@ -760,7 +758,7 @@ def main():\n     help_triggered = (\n         '-h' in sys.argv) or ('--help' in sys.argv) or (len(sys.argv) == 1)\n     try:\n-        bootstrap()\n+        bootstrap(help_triggered)\n         if not help_triggered:\n             print(\"Build completed successfully in {}\".format(\n                 format_build_time(time() - start_time)))"}, {"sha": "bc75d31e06e45793f6e99660536ab205210ffe7a", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e026b59cf4f4cb9dd86510438085efafbc630e5a", "patch": "@@ -464,7 +464,7 @@ impl<'a> Builder<'a> {\n \n     pub fn sysroot_codegen_backends(&self, compiler: Compiler) -> PathBuf {\n         self.sysroot_libdir(compiler, compiler.host)\n-            .with_file_name(\"codegen-backends\")\n+            .with_file_name(self.build.config.rust_codegen_backends_dir.clone())\n     }\n \n     /// Returns the compiler's libdir where it stores the dynamic libraries that"}, {"sha": "30ca9dffc198251f9446c23d0f77a19035f6e6d2", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=e026b59cf4f4cb9dd86510438085efafbc630e5a", "patch": "@@ -514,7 +514,8 @@ fn rustc_cargo_env(build: &Build, cargo: &mut Command) {\n     cargo.env(\"CFG_RELEASE\", build.rust_release())\n          .env(\"CFG_RELEASE_CHANNEL\", &build.config.channel)\n          .env(\"CFG_VERSION\", build.rust_version())\n-         .env(\"CFG_PREFIX\", build.config.prefix.clone().unwrap_or_default());\n+         .env(\"CFG_PREFIX\", build.config.prefix.clone().unwrap_or_default())\n+         .env(\"CFG_CODEGEN_BACKENDS_DIR\", &build.config.rust_codegen_backends_dir);\n \n     let libdir_relative = build.config.libdir_relative().unwrap_or(Path::new(\"lib\"));\n     cargo.env(\"CFG_LIBDIR_RELATIVE\", libdir_relative);"}, {"sha": "361fc704bc07b68f90b6396fa5bdc312f6cb1588", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=e026b59cf4f4cb9dd86510438085efafbc630e5a", "patch": "@@ -96,6 +96,7 @@ pub struct Config {\n     pub rust_debuginfo_tests: bool,\n     pub rust_dist_src: bool,\n     pub rust_codegen_backends: Vec<Interned<String>>,\n+    pub rust_codegen_backends_dir: String,\n \n     pub build: Interned<String>,\n     pub hosts: Vec<Interned<String>>,\n@@ -289,6 +290,7 @@ struct Rust {\n     test_miri: Option<bool>,\n     save_toolstates: Option<String>,\n     codegen_backends: Option<Vec<String>>,\n+    codegen_backends_dir: Option<String>,\n     wasm_syscall: Option<bool>,\n }\n \n@@ -330,6 +332,7 @@ impl Config {\n         config.rust_dist_src = true;\n         config.test_miri = false;\n         config.rust_codegen_backends = vec![INTERNER.intern_str(\"llvm\")];\n+        config.rust_codegen_backends_dir = \"codegen-backends\".to_owned();\n \n         config.rustc_error_format = flags.rustc_error_format;\n         config.on_fail = flags.on_fail;\n@@ -488,6 +491,8 @@ impl Config {\n                     .collect();\n             }\n \n+            set(&mut config.rust_codegen_backends_dir, rust.codegen_backends_dir.clone());\n+\n             match rust.codegen_units {\n                 Some(0) => config.rust_codegen_units = Some(num_cpus::get() as u32),\n                 Some(n) => config.rust_codegen_units = Some(n),"}, {"sha": "05630b8431fb518997230e78fda48be1a968f4e4", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=e026b59cf4f4cb9dd86510438085efafbc630e5a", "patch": "@@ -590,7 +590,8 @@ impl Step for Std {\n         let mut src = builder.sysroot_libdir(compiler, target).to_path_buf();\n         src.pop(); // Remove the trailing /lib folder from the sysroot_libdir\n         cp_filtered(&src, &dst, &|path| {\n-            path.file_name().and_then(|s| s.to_str()) != Some(\"codegen-backends\")\n+            path.file_name().and_then(|s| s.to_str()) !=\n+                Some(build.config.rust_codegen_backends_dir.as_str())\n         });\n \n         let mut cmd = rust_installer(builder);"}, {"sha": "a791dd13f0f4b1e8b21e2c059a13768e83149544", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=e026b59cf4f4cb9dd86510438085efafbc630e5a", "patch": "@@ -312,6 +312,7 @@ fn invoke_rustdoc(builder: &Builder, compiler: Compiler, target: Interned<String\n     cmd.arg(\"--html-after-content\").arg(&footer)\n         .arg(\"--html-before-content\").arg(&version_info)\n         .arg(\"--html-in-header\").arg(&favicon)\n+        .arg(\"--markdown-no-toc\")\n         .arg(\"--markdown-playground-url\")\n         .arg(\"https://play.rust-lang.org/\")\n         .arg(\"-o\").arg(&out)"}, {"sha": "1efd605112dc2fb46f2c3c599ebc159c595d9348", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=e026b59cf4f4cb9dd86510438085efafbc630e5a", "patch": "@@ -68,32 +68,39 @@\n #![feature(allow_internal_unstable)]\n #![feature(asm)]\n #![feature(associated_type_defaults)]\n+#![feature(attr_literals)]\n #![feature(cfg_target_feature)]\n #![feature(cfg_target_has_atomic)]\n #![feature(concat_idents)]\n #![feature(const_fn)]\n #![feature(custom_attribute)]\n+#![feature(doc_spotlight)]\n #![feature(fundamental)]\n #![feature(i128_type)]\n #![feature(inclusive_range_syntax)]\n #![feature(intrinsics)]\n+#![feature(iterator_flatten)]\n+#![feature(iterator_repeat_with)]\n #![feature(lang_items)]\n+#![feature(link_llvm_intrinsics)]\n #![feature(never_type)]\n #![feature(no_core)]\n #![feature(on_unimplemented)]\n #![feature(optin_builtin_traits)]\n #![feature(prelude_import)]\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]\n+#![feature(rustc_const_unstable)]\n+#![feature(simd_ffi)]\n #![feature(specialization)]\n #![feature(staged_api)]\n+#![feature(stmt_expr_attributes)]\n+#![feature(target_feature)]\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n-#![feature(doc_spotlight)]\n-#![feature(rustc_const_unstable)]\n-#![feature(iterator_repeat_with)]\n-#![feature(iterator_flatten)]\n+\n+#![cfg_attr(stage0, allow(unused_attributes))]\n \n #[prelude_import]\n #[allow(unused)]\n@@ -179,3 +186,21 @@ mod char_private;\n mod iter_private;\n mod tuple;\n mod unit;\n+\n+// Pull in the the `coresimd` crate directly into libcore. This is where all the\n+// architecture-specific (and vendor-specific) intrinsics are defined. AKA\n+// things like SIMD and such. Note that the actual source for all this lies in a\n+// different repository, rust-lang-nursery/stdsimd. That's why the setup here is\n+// a bit wonky.\n+#[path = \"../stdsimd/coresimd/mod.rs\"]\n+#[allow(missing_docs, missing_debug_implementations, dead_code)]\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(not(stage0))] // allow changes to how stdsimd works in stage0\n+mod coresimd;\n+\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(not(stage0))]\n+pub use coresimd::simd;\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(not(stage0))]\n+pub use coresimd::arch;"}, {"sha": "88f2b59675186da00dc2a016675df3effadf314a", "filename": "src/librustc_back/target/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs?ref=e026b59cf4f4cb9dd86510438085efafbc630e5a", "patch": "@@ -12,13 +12,7 @@ use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::linux_musl_base::opts();\n-\n-    // Most of these settings are copied from the armv7_unknown_linux_gnueabihf\n-    // target.\n-    base.features = \"+v7,+vfp3,+neon\".to_string();\n-    base.cpu = \"cortex-a8\".to_string();\n-    base.max_atomic_width = Some(64);\n+    let base = super::linux_musl_base::opts();\n     Ok(Target {\n         // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n         // uses it to determine the calling convention and float ABI, and LLVM\n@@ -33,9 +27,15 @@ pub fn target() -> TargetResult {\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n+\n+        // Most of these settings are copied from the armv7_unknown_linux_gnueabihf\n+        // target.\n         options: TargetOptions {\n+            features: \"+v7,+vfp3,+d16,+thumb2,-neon\".to_string(),\n+            cpu: \"generic\".to_string(),\n+            max_atomic_width: Some(64),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base\n-        },\n+        }\n     })\n }"}, {"sha": "d89a3e9d907ea5bff5bbf36ff6813506056eac9a", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e026b59cf4f4cb9dd86510438085efafbc630e5a", "patch": "@@ -303,7 +303,9 @@ fn get_trans_sysroot(backend_name: &str) -> fn() -> Box<TransCrate> {\n     let sysroot = sysroot_candidates.iter()\n         .map(|sysroot| {\n             let libdir = filesearch::relative_target_lib_path(&sysroot, &target);\n-            sysroot.join(libdir).with_file_name(\"codegen-backends\")\n+            sysroot.join(libdir)\n+                .with_file_name(option_env!(\"CFG_CODEGEN_BACKENDS_DIR\")\n+                                .unwrap_or(\"codegen-backends\"))\n         })\n         .filter(|f| {\n             info!(\"codegen backend candidate: {}\", f.display());"}, {"sha": "b0a5ae3718df3f87685f3ed3c65dcf8b8709f553", "filename": "src/librustdoc/README.md", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Flibrustdoc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Flibrustdoc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FREADME.md?ref=e026b59cf4f4cb9dd86510438085efafbc630e5a", "patch": "@@ -0,0 +1,172 @@\n+# The walking tour of rustdoc\n+\n+Rustdoc is implemented entirely within the crate `librustdoc`. After partially compiling a crate to\n+get its AST (technically the HIR map) from rustc, librustdoc performs two major steps past that to\n+render a set of documentation:\n+\n+* \"Clean\" the AST into a form that's more suited to creating documentation (and slightly more\n+  resistant to churn in the compiler).\n+* Use this cleaned AST to render a crate's documentation, one page at a time.\n+\n+Naturally, there's more than just this, and those descriptions simplify out lots of details, but\n+that's the high-level overview.\n+\n+(Side note: this is a library crate! The `rustdoc` binary is crated using the project in\n+`src/tools/rustdoc`. Note that literally all that does is call the `main()` that's in this crate's\n+`lib.rs`, though.)\n+\n+## Cheat sheet\n+\n+* Use `x.py build --stage 1 src/libstd src/tools/rustdoc` to make a useable rustdoc you can run on\n+  other projects.\n+  * Add `src/libtest` to be able to use `rustdoc --test`.\n+  * If you've used `rustup toolchain link local /path/to/build/$TARGET/stage1` previously, then\n+    after the previous build command, `cargo +local doc` will Just Work.\n+* Use `x.py doc --stage 1 src/libstd` to use this rustdoc to generate the standard library docs.\n+  * The completed docs will be available in `build/$TARGET/doc/std`, though the bundle is meant to\n+    be used as though you would copy out the `doc` folder to a web server, since that's where the\n+    CSS/JS and landing page are.\n+* Most of the HTML printing code is in `html/format.rs` and `html/render.rs`. It's in a bunch of\n+  `fmt::Display` implementations and supplementary functions.\n+* The types that got `Display` impls above are defined in `clean/mod.rs`, right next to the custom\n+  `Clean` trait used to process them out of the rustc HIR.\n+* The bits specific to using rustdoc as a test harness are in `test.rs`.\n+* The Markdown renderer is loaded up in `html/markdown.rs`, including functions for extracting\n+  doctests from a given block of Markdown.\n+* The tests on rustdoc *output* are located in `src/test/rustdoc`, where they're handled by the test\n+  runner of rustbuild and the supplementary script `src/etc/htmldocck.py`.\n+* Tests on search index generation are located in `src/test/rustdoc-js`, as a series of JavaScript\n+  files that encode queries on the standard library search index and expected results.\n+\n+## From crate to clean\n+\n+In `core.rs` are two central items: the `DocContext` struct, and the `run_core` function. The latter\n+is where rustdoc calls out to rustc to compile a crate to the point where rustdoc can take over. The\n+former is a state container used when crawling through a crate to gather its documentation.\n+\n+The main process of crate crawling is done in `clean/mod.rs` through several implementations of the\n+`Clean` trait defined within. This is a conversion trait, which defines one method:\n+\n+```rust\n+pub trait Clean<T> {\n+    fn clean(&self, cx: &DocContext) -> T;\n+}\n+```\n+\n+`clean/mod.rs` also defines the types for the \"cleaned\" AST used later on to render documentation\n+pages. Each usually accompanies an implementation of `Clean` that takes some AST or HIR type from\n+rustc and converts it into the appropriate \"cleaned\" type. \"Big\" items like modules or associated\n+items may have some extra processing in its `Clean` implementation, but for the most part these\n+impls are straightforward conversions. The \"entry point\" to this module is the `impl Clean<Crate>\n+for visit_ast::RustdocVisitor`, which is called by `run_core` above.\n+\n+You see, I actually lied a little earlier: There's another AST transformation that happens before\n+the events in `clean/mod.rs`.  In `visit_ast.rs` is the type `RustdocVisitor`, which *actually*\n+crawls a `hir::Crate` to get the first intermediate representation, defined in `doctree.rs`. This\n+pass is mainly to get a few intermediate wrappers around the HIR types and to process visibility\n+and inlining. This is where `#[doc(inline)]`, `#[doc(no_inline)]`, and `#[doc(hidden)]` are\n+processed, as well as the logic for whether a `pub use` should get the full page or a \"Reexport\"\n+line in the module page.\n+\n+The other major thing that happens in `clean/mod.rs` is the collection of doc comments and\n+`#[doc=\"\"]` attributes into a separate field of the Attributes struct, present on anything that gets\n+hand-written documentation. This makes it easier to collect this documentation later in the process.\n+\n+The primary output of this process is a clean::Crate with a tree of Items which describe the\n+publicly-documentable items in the target crate.\n+\n+### Hot potato\n+\n+Before moving on to the next major step, a few important \"passes\" occur over the documentation.\n+These do things like combine the separate \"attributes\" into a single string and strip leading\n+whitespace to make the document easier on the markdown parser, or drop items that are not public or\n+deliberately hidden with `#[doc(hidden)]`. These are all implemented in the `passes/` directory, one\n+file per pass. By default, all of these passes are run on a crate, but the ones regarding dropping\n+private/hidden items can be bypassed by passing `--document-private-items` to rustdoc.\n+\n+(Strictly speaking, you can fine-tune the passes run and even add your own, but [we're trying to\n+deprecate that][44136]. If you need finer-grain control over these passes, please let us know!)\n+\n+[44136]: https://github.com/rust-lang/rust/issues/44136\n+\n+## From clean to crate\n+\n+This is where the \"second phase\" in rustdoc begins. This phase primarily lives in the `html/`\n+folder, and it all starts with `run()` in `html/render.rs`. This code is responsible for setting up\n+the `Context`, `SharedContext`, and `Cache` which are used during rendering, copying out the static\n+files which live in every rendered set of documentation (things like the fonts, CSS, and JavaScript\n+that live in `html/static/`), creating the search index, and printing out the source code rendering,\n+before beginning the process of rendering all the documentation for the crate.\n+\n+Several functions implemented directly on `Context` take the `clean::Crate` and set up some state\n+between rendering items or recursing on a module's child items. From here the \"page rendering\"\n+begins, via an enormous `write!()` call in `html/layout.rs`. The parts that actually generate HTML\n+from the items and documentation occurs within a series of `std::fmt::Display` implementations and\n+functions that pass around a `&mut std::fmt::Formatter`. The top-level implementation that writes\n+out the page body is the `impl<'a> fmt::Display for Item<'a>` in `html/render.rs`, which switches\n+out to one of several `item_*` functions based on the kind of `Item` being rendered.\n+\n+Depending on what kind of rendering code you're looking for, you'll probably find it either in\n+`html/render.rs` for major items like \"what sections should I print for a struct page\" or\n+`html/format.rs` for smaller component pieces like \"how should I print a where clause as part of\n+some other item\".\n+\n+Whenever rustdoc comes across an item that should print hand-written documentation alongside, it\n+calls out to `html/markdown.rs` which interfaces with the Markdown parser. This is exposed as a\n+series of types that wrap a string of Markdown, and implement `fmt::Display` to emit HTML text. It\n+takes special care to enable certain features like footnotes and tables and add syntax highlighting\n+to Rust code blocks (via `html/highlight.rs`) before running the Markdown parser. There's also a\n+function in here (`find_testable_code`) that specifically scans for Rust code blocks so the\n+test-runner code can find all the doctests in the crate.\n+\n+### From soup to nuts\n+\n+(alternate title: [\"An unbroken thread that stretches from those first `Cell`s to us\"][video])\n+\n+[video]: https://www.youtube.com/watch?v=hOLAGYmUQV0\n+\n+It's important to note that the AST cleaning can ask the compiler for information (crucially,\n+`DocContext` contains a `TyCtxt`), but page rendering cannot. The `clean::Crate` created within\n+`run_core` is passed outside the compiler context before being handed to `html::render::run`. This\n+means that a lot of the \"supplementary data\" that isn't immediately available inside an item's\n+definition, like which trait is the `Deref` trait used by the language, needs to be collected during\n+cleaning, stored in the `DocContext`, and passed along to the `SharedContext` during HTML rendering.\n+This manifests as a bunch of shared state, context variables, and `RefCell`s.\n+\n+Also of note is that some items that come from \"asking the compiler\" don't go directly into the\n+`DocContext` - for example, when loading items from a foreign crate, rustdoc will ask about trait\n+implementations and generate new `Item`s for the impls based on that information. This goes directly\n+into the returned `Crate` rather than roundabout through the `DocContext`. This way, these\n+implementations can be collected alongside the others, right before rendering the HTML.\n+\n+## Other tricks up its sleeve\n+\n+All this describes the process for generating HTML documentation from a Rust crate, but there are\n+couple other major modes that rustdoc runs in. It can also be run on a standalone Markdown file, or\n+it can run doctests on Rust code or standalone Markdown files. For the former, it shortcuts straight\n+to `html/markdown.rs`, optionally including a mode which inserts a Table of Contents to the output\n+HTML.\n+\n+For the latter, rustdoc runs a similar partial-compilation to get relevant documentation in\n+`test.rs`, but instead of going through the full clean and render process, it runs a much simpler\n+crate walk to grab *just* the hand-written documentation. Combined with the aforementioned\n+\"`find_testable_code`\" in `html/markdown.rs`, it builds up a collection of tests to run before\n+handing them off to the libtest test runner. One notable location in `test.rs` is the function\n+`make_test`, which is where hand-written doctests get transformed into something that can be\n+executed.\n+\n+## Dotting i's and crossing t's\n+\n+So that's rustdoc's code in a nutshell, but there's more things in the repo that deal with it. Since\n+we have the full `compiletest` suite at hand, there's a set of tests in `src/test/rustdoc` that make\n+sure the final HTML is what we expect in various situations. These tests also use a supplementary\n+script, `src/etc/htmldocck.py`, that allows it to look through the final HTML using XPath notation\n+to get a precise look at the output. The full description of all the commands available to rustdoc\n+tests is in `htmldocck.py`.\n+\n+In addition, there are separate tests for the search index and rustdoc's ability to query it. The\n+files in `src/test/rustdoc-js` each contain a different search query and the expected results,\n+broken out by search tab. These files are processed by a script in `src/tools/rustdoc-js` and the\n+Node.js runtime. These tests don't have as thorough of a writeup, but a broad example that features\n+results in all tabs can be found in `basic.js`. The basic idea is that you match a given `QUERY`\n+with a set of `EXPECTED` results, complete with the full item path of each item."}, {"sha": "a7e1c0ce732e0adfdb14eb897216a0f13c2af200", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e026b59cf4f4cb9dd86510438085efafbc630e5a", "patch": "@@ -299,6 +299,7 @@\n #![feature(rand)]\n #![feature(raw)]\n #![feature(rustc_attrs)]\n+#![feature(stdsimd)]\n #![feature(sip_hash_13)]\n #![feature(slice_bytes)]\n #![feature(slice_concat_ext)]\n@@ -501,6 +502,35 @@ mod memchr;\n // compiler\n pub mod rt;\n \n+// Pull in the the `stdsimd` crate directly into libstd. This is the same as\n+// libcore's arch/simd modules where the source of truth here is in a different\n+// repository, but we pull things in here manually to get it into libstd.\n+//\n+// Note that the #[cfg] here is intended to do two things. First it allows us to\n+// change the rustc implementation of intrinsics in stage0 by not compiling simd\n+// intrinsics in stage0. Next it doesn't compile anything in test mode as\n+// stdsimd has tons of its own tests which we don't want to run.\n+#[path = \"../stdsimd/stdsimd/mod.rs\"]\n+#[allow(missing_debug_implementations, missing_docs, dead_code)]\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(all(not(stage0), not(test)))]\n+mod stdsimd;\n+\n+// A \"fake\" module needed by the `stdsimd` module to compile, not actually\n+// exported though.\n+#[cfg(not(stage0))]\n+mod coresimd {\n+    pub use core::arch;\n+    pub use core::simd;\n+}\n+\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(all(not(stage0), not(test)))]\n+pub use stdsimd::simd;\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(all(not(stage0), not(test)))]\n+pub use stdsimd::arch;\n+\n // Include a number of private modules that exist solely to provide\n // the rustdoc documentation for primitive types. Using `include!`\n // because rustdoc only looks for these modules at the crate level."}, {"sha": "5dd9c6277509787578573756187752471f0c201e", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=e026b59cf4f4cb9dd86510438085efafbc630e5a", "patch": "@@ -59,7 +59,7 @@ pub use version::UnicodeVersion;\n /// [`to_lowercase`]: ../../std/primitive.char.html#method.to_lowercase\n /// [`char`]: ../../std/primitive.char.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct ToLowercase(CaseMappingIter);\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -81,7 +81,7 @@ impl FusedIterator for ToLowercase {}\n /// [`to_uppercase`]: ../../std/primitive.char.html#method.to_uppercase\n /// [`char`]: ../../std/primitive.char.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct ToUppercase(CaseMappingIter);\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -95,7 +95,7 @@ impl Iterator for ToUppercase {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl FusedIterator for ToUppercase {}\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n enum CaseMappingIter {\n     Three(char, char, char),\n     Two(char, char),"}, {"sha": "678cbd325c84070c9dbe4303969fbd2734c0b4ee", "filename": "src/stdsimd", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdsimd?ref=e026b59cf4f4cb9dd86510438085efafbc630e5a", "patch": "@@ -0,0 +1 @@\n+Subproject commit 678cbd325c84070c9dbe4303969fbd2734c0b4ee"}, {"sha": "1def3048ce07150b2a4dc4023b46f76a131a0523", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e026b59cf4f4cb9dd86510438085efafbc630e5a/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=e026b59cf4f4cb9dd86510438085efafbc630e5a", "patch": "@@ -71,6 +71,7 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/librustc/mir/interpret\",\n         \"src/librustc_mir/interpret\",\n         \"src/target\",\n+        \"src/stdsimd\",\n     ];\n     skip.iter().any(|p| path.ends_with(p))\n }"}]}