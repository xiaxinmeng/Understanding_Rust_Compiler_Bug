{"sha": "e25bc303f1ba73b9ed1f83573bcb573f9c268c9f", "node_id": "C_kwDOAAsO6NoAKGUyNWJjMzAzZjFiYTczYjllZDFmODM1NzNiY2I1NzNmOWMyNjhjOWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-04-11T10:06:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-11T10:06:52Z"}, "message": "Rollup merge of #95743 - yaahc:binary-search-clarification, r=Mark-Simulacrum\n\nUpdate binary_search example to instead redirect to partition_point\n\nInspired by discussion in the tracking issue for `Result::into_ok_or_err`: https://github.com/rust-lang/rust/issues/82223#issuecomment-1067098167\n\nPeople are surprised by us not providing a `Result<T, T> -> T` conversion, and the main culprit for this confusion seems to be the `binary_search` API. We should instead redirect people to the equivalent API that implicitly does that `Result<T, T> -> T` conversion internally which should obviate the need for the `into_ok_or_err` function and give us time to work towards a more general solution that applies to all enums rather than just `Result` such as making or_patterns usable for situations like this via postfix `match`.\n\nI choose to duplicate the example rather than simply moving it from `binary_search` to partition point because most of the confusion seems to arise when people are looking at `binary_search`. It makes sense to me to have the example presented immediately rather than requiring people to click through to even realize there is an example. If I had to put it in only one place I'd leave it in `binary_search` and remove it from `partition_point` but it seems pretty obviously relevant to `partition_point` so I figured the best option would be to duplicate it.", "tree": {"sha": "5acdbc059fb5fda8c7e23519b48edcba5850895c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5acdbc059fb5fda8c7e23519b48edcba5850895c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e25bc303f1ba73b9ed1f83573bcb573f9c268c9f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiU/28CRBK7hj4Ov3rIwAAvOsIAAdqCtnnlLi2TJ4gJfcrLvCk\nARKzUKXKZHnj3pTSBysjLDEKRKEX/QngdOrZJkrTBFNxmxN8sEkYpqKNy12h0kp5\n5X571O287kLBjOgKGghuWPVoV+Kj/4RPfkby1aVW6cYYJfXCFJjDIMUdWi/C6uYa\nTgQo+3F1o95z1dcLEatX1HqW/cLlIvvcWyaTsvhADLgFsJciLIDdPRK54FafwclO\nVvyJoGHzt5ZeBidCsJEeUmIyP0kEW0pqtOyPCweQMJ7GRbGolAAEtApy6q2L6YyU\nghBHE//n2F6qwmeZjpIexgT5exddA54uh2nzoTMojP/cscH34i9VMJcw5E7fKn4=\n=pzSj\n-----END PGP SIGNATURE-----\n", "payload": "tree 5acdbc059fb5fda8c7e23519b48edcba5850895c\nparent 48a9e104dfafdec3a5d00d365229d6369939f433\nparent 0eb0d891ad2558f523527db8595c1daf03c5ca83\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1649671612 +0200\ncommitter GitHub <noreply@github.com> 1649671612 +0200\n\nRollup merge of #95743 - yaahc:binary-search-clarification, r=Mark-Simulacrum\n\nUpdate binary_search example to instead redirect to partition_point\n\nInspired by discussion in the tracking issue for `Result::into_ok_or_err`: https://github.com/rust-lang/rust/issues/82223#issuecomment-1067098167\n\nPeople are surprised by us not providing a `Result<T, T> -> T` conversion, and the main culprit for this confusion seems to be the `binary_search` API. We should instead redirect people to the equivalent API that implicitly does that `Result<T, T> -> T` conversion internally which should obviate the need for the `into_ok_or_err` function and give us time to work towards a more general solution that applies to all enums rather than just `Result` such as making or_patterns usable for situations like this via postfix `match`.\n\nI choose to duplicate the example rather than simply moving it from `binary_search` to partition point because most of the confusion seems to arise when people are looking at `binary_search`. It makes sense to me to have the example presented immediately rather than requiring people to click through to even realize there is an example. If I had to put it in only one place I'd leave it in `binary_search` and remove it from `partition_point` but it seems pretty obviously relevant to `partition_point` so I figured the best option would be to duplicate it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e25bc303f1ba73b9ed1f83573bcb573f9c268c9f", "html_url": "https://github.com/rust-lang/rust/commit/e25bc303f1ba73b9ed1f83573bcb573f9c268c9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e25bc303f1ba73b9ed1f83573bcb573f9c268c9f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48a9e104dfafdec3a5d00d365229d6369939f433", "url": "https://api.github.com/repos/rust-lang/rust/commits/48a9e104dfafdec3a5d00d365229d6369939f433", "html_url": "https://github.com/rust-lang/rust/commit/48a9e104dfafdec3a5d00d365229d6369939f433"}, {"sha": "0eb0d891ad2558f523527db8595c1daf03c5ca83", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eb0d891ad2558f523527db8595c1daf03c5ca83", "html_url": "https://github.com/rust-lang/rust/commit/0eb0d891ad2558f523527db8595c1daf03c5ca83"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "488671d8d8d19b7fbf1ab6129ec934969e37dc41", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e25bc303f1ba73b9ed1f83573bcb573f9c268c9f/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25bc303f1ba73b9ed1f83573bcb573f9c268c9f/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=e25bc303f1ba73b9ed1f83573bcb573f9c268c9f", "patch": "@@ -2593,14 +2593,15 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     ///\n     /// If you want to insert an item to a sorted deque, while maintaining\n-    /// sort order:\n+    /// sort order, consider using [`partition_point`]:\n     ///\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n     /// let num = 42;\n-    /// let idx = deque.binary_search(&num).unwrap_or_else(|x| x);\n+    /// let idx = deque.partition_point(|&x| x < num);\n+    /// // The above is equivalent to `let idx = deque.binary_search(&num).unwrap_or_else(|x| x);`\n     /// deque.insert(idx, num);\n     /// assert_eq!(deque, &[0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);\n     /// ```\n@@ -2744,6 +2745,19 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// assert!(deque.iter().take(i).all(|&x| x < 5));\n     /// assert!(deque.iter().skip(i).all(|&x| !(x < 5)));\n     /// ```\n+    ///\n+    /// If you want to insert an item to a sorted deque, while maintaining\n+    /// sort order:\n+    ///\n+    /// ```\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// let mut deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n+    /// let num = 42;\n+    /// let idx = deque.partition_point(|&x| x < num);\n+    /// deque.insert(idx, num);\n+    /// assert_eq!(deque, &[0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);\n+    /// ```\n     #[stable(feature = \"vecdeque_binary_search\", since = \"1.54.0\")]\n     pub fn partition_point<P>(&self, mut pred: P) -> usize\n     where"}, {"sha": "2a4030de00b4e0f70a4db3e878ab3f1708aa6ccc", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e25bc303f1ba73b9ed1f83573bcb573f9c268c9f/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25bc303f1ba73b9ed1f83573bcb573f9c268c9f/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=e25bc303f1ba73b9ed1f83573bcb573f9c268c9f", "patch": "@@ -2331,12 +2331,13 @@ impl<T> [T] {\n     /// ```\n     ///\n     /// If you want to insert an item to a sorted vector, while maintaining\n-    /// sort order:\n+    /// sort order, consider using [`partition_point`]:\n     ///\n     /// ```\n     /// let mut s = vec![0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     /// let num = 42;\n-    /// let idx = s.binary_search(&num).unwrap_or_else(|x| x);\n+    /// let idx = s.partition_point(|&x| x < num);\n+    /// // The above is equivalent to `let idx = s.binary_search(&num).unwrap_or_else(|x| x);`\n     /// s.insert(idx, num);\n     /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);\n     /// ```\n@@ -3743,6 +3744,17 @@ impl<T> [T] {\n     /// assert!(v[..i].iter().all(|&x| x < 5));\n     /// assert!(v[i..].iter().all(|&x| !(x < 5)));\n     /// ```\n+    ///\n+    /// If you want to insert an item to a sorted vector, while maintaining\n+    /// sort order:\n+    ///\n+    /// ```\n+    /// let mut s = vec![0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n+    /// let num = 42;\n+    /// let idx = s.partition_point(|&x| x < num);\n+    /// s.insert(idx, num);\n+    /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);\n+    /// ```\n     #[stable(feature = \"partition_point\", since = \"1.52.0\")]\n     #[must_use]\n     pub fn partition_point<P>(&self, mut pred: P) -> usize"}]}