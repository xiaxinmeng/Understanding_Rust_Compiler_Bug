{"sha": "0cc99f9cc9b59518f618a2c3f5011000e60f922e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYzk5ZjljYzliNTk1MThmNjE4YTJjM2Y1MDExMDAwZTYwZjkyMmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-17T23:53:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-17T23:53:41Z"}, "message": "Auto merge of #25527 - inrustwetrust:const-not-overflow, r=alexcrichton\n\nFixes #23968.\r\nSince the values are stored in a u64 internally, we need to be mask away the\r\nhigh bits after applying the ! operator. Otherwise, these bits will be set to\r\none, causing overflow.", "tree": {"sha": "898be95172a41f2d364bb8bcf5ee2a41c119b105", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/898be95172a41f2d364bb8bcf5ee2a41c119b105"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cc99f9cc9b59518f618a2c3f5011000e60f922e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc99f9cc9b59518f618a2c3f5011000e60f922e", "html_url": "https://github.com/rust-lang/rust/commit/0cc99f9cc9b59518f618a2c3f5011000e60f922e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cc99f9cc9b59518f618a2c3f5011000e60f922e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4d56b7b5b68cd5cfb4bb65f974af701ab556241", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4d56b7b5b68cd5cfb4bb65f974af701ab556241", "html_url": "https://github.com/rust-lang/rust/commit/e4d56b7b5b68cd5cfb4bb65f974af701ab556241"}, {"sha": "d1605deab864d83e5fd5b4e9749d5fd1320fb1fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1605deab864d83e5fd5b4e9749d5fd1320fb1fc", "html_url": "https://github.com/rust-lang/rust/commit/d1605deab864d83e5fd5b4e9749d5fd1320fb1fc"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "72415f543368e6f1294eb7d970b49482009c1a0e", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0cc99f9cc9b59518f618a2c3f5011000e60f922e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc99f9cc9b59518f618a2c3f5011000e60f922e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=0cc99f9cc9b59518f618a2c3f5011000e60f922e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -34,7 +34,7 @@ use std::borrow::{Cow, IntoCow};\n use std::num::wrapping::OverflowingOps;\n use std::cmp::Ordering;\n use std::collections::hash_map::Entry::Vacant;\n-use std::{i8, i16, i32, i64};\n+use std::{i8, i16, i32, i64, u8, u16, u32, u64};\n use std::rc::Rc;\n \n fn lookup_const<'a>(tcx: &'a ty::ctxt, e: &Expr) -> Option<&'a Expr> {\n@@ -461,6 +461,16 @@ pub fn const_uint_checked_neg<'a>(\n     Ok(const_uint((!a).wrapping_add(1)))\n }\n \n+fn const_uint_not(a: u64, opt_ety: Option<UintTy>) -> const_val {\n+    let mask = match opt_ety {\n+        Some(UintTy::U8) => u8::MAX as u64,\n+        Some(UintTy::U16) => u16::MAX as u64,\n+        Some(UintTy::U32) => u32::MAX as u64,\n+        None | Some(UintTy::U64) => u64::MAX,\n+    };\n+    const_uint(!a & mask)\n+}\n+\n macro_rules! overflow_checking_body {\n     ($a:ident, $b:ident, $ety:ident, $overflowing_op:ident,\n      lhs: $to_8_lhs:ident $to_16_lhs:ident $to_32_lhs:ident,\n@@ -677,7 +687,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n       ast::ExprUnary(ast::UnNot, ref inner) => {\n         match try!(eval_const_expr_partial(tcx, &**inner, ety)) {\n           const_int(i) => const_int(!i),\n-          const_uint(i) => const_uint(!i),\n+          const_uint(i) => const_uint_not(i, expr_uint_type),\n           const_bool(b) => const_bool(!b),\n           const_str(_) => signal!(e, NotOnString),\n           const_float(_) => signal!(e, NotOnFloat),"}, {"sha": "95f65917ceb7d64910209f97238724e1f4ca1a73", "filename": "src/test/run-pass/issue-23968-const-not-overflow.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0cc99f9cc9b59518f618a2c3f5011000e60f922e/src%2Ftest%2Frun-pass%2Fissue-23968-const-not-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc99f9cc9b59518f618a2c3f5011000e60f922e/src%2Ftest%2Frun-pass%2Fissue-23968-const-not-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23968-const-not-overflow.rs?ref=0cc99f9cc9b59518f618a2c3f5011000e60f922e", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const U8_MAX_HALF: u8 = !0u8 / 2;\n+const U16_MAX_HALF: u16 = !0u16 / 2;\n+const U32_MAX_HALF: u32 = !0u32 / 2;\n+const U64_MAX_HALF: u64 = !0u64 / 2;\n+\n+fn main() {\n+    assert_eq!(U8_MAX_HALF, 0x7f);\n+    assert_eq!(U16_MAX_HALF, 0x7fff);\n+    assert_eq!(U32_MAX_HALF, 0x7fff_ffff);\n+    assert_eq!(U64_MAX_HALF, 0x7fff_ffff_ffff_ffff);\n+}"}]}