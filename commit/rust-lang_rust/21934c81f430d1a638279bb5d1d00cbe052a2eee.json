{"sha": "21934c81f430d1a638279bb5d1d00cbe052a2eee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxOTM0YzgxZjQzMGQxYTYzODI3OWJiNWQxZDAwY2JlMDUyYTJlZWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-16T07:15:13Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-18T10:08:22Z"}, "message": "add support for storing extra data in an allocation", "tree": {"sha": "3f20b41c1995b22bdddcfc4a07a356de5d30d6c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f20b41c1995b22bdddcfc4a07a356de5d30d6c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21934c81f430d1a638279bb5d1d00cbe052a2eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21934c81f430d1a638279bb5d1d00cbe052a2eee", "html_url": "https://github.com/rust-lang/rust/commit/21934c81f430d1a638279bb5d1d00cbe052a2eee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21934c81f430d1a638279bb5d1d00cbe052a2eee/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "290db47ad67ee2ef0a43fb4b9b6561d00c4a078e", "url": "https://api.github.com/repos/rust-lang/rust/commits/290db47ad67ee2ef0a43fb4b9b6561d00c4a078e", "html_url": "https://github.com/rust-lang/rust/commit/290db47ad67ee2ef0a43fb4b9b6561d00c4a078e"}], "stats": {"total": 75, "additions": 37, "deletions": 38}, "files": [{"sha": "4482d0a69c25c1f6606165bac1d96e6ee3fb644e", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21934c81f430d1a638279bb5d1d00cbe052a2eee/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21934c81f430d1a638279bb5d1d00cbe052a2eee/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=21934c81f430d1a638279bb5d1d00cbe052a2eee", "patch": "@@ -524,7 +524,7 @@ impl<'tcx, M: fmt::Debug + Eq + Hash + Clone> AllocMap<'tcx, M> {\n }\n \n #[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n-pub struct Allocation<Tag=()> {\n+pub struct Allocation<Tag=(),Extra=()> {\n     /// The actual bytes of the allocation.\n     /// Note that the bytes of a pointer represent the offset of the pointer\n     pub bytes: Vec<u8>,\n@@ -541,9 +541,11 @@ pub struct Allocation<Tag=()> {\n     /// Also used by codegen to determine if a static should be put into mutable memory,\n     /// which happens for `static mut` and `static` with interior mutability.\n     pub mutability: Mutability,\n+    /// Extra state for the machine.\n+    pub extra: Extra,\n }\n \n-impl<Tag> Allocation<Tag> {\n+impl<Tag, Extra: Default> Allocation<Tag, Extra> {\n     /// Creates a read-only allocation initialized by the given bytes\n     pub fn from_bytes(slice: &[u8], align: Align) -> Self {\n         let mut undef_mask = UndefMask::new(Size::ZERO);\n@@ -554,6 +556,7 @@ impl<Tag> Allocation<Tag> {\n             undef_mask,\n             align,\n             mutability: Mutability::Immutable,\n+            extra: Extra::default(),\n         }\n     }\n \n@@ -569,6 +572,7 @@ impl<Tag> Allocation<Tag> {\n             undef_mask: UndefMask::new(size),\n             align,\n             mutability: Mutability::Mutable,\n+            extra: Extra::default(),\n         }\n     }\n }"}, {"sha": "497c6a2a80e763ca99cbc5ad2b305469ba5ae8af", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21934c81f430d1a638279bb5d1d00cbe052a2eee/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21934c81f430d1a638279bb5d1d00cbe052a2eee/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=21934c81f430d1a638279bb5d1d00cbe052a2eee", "patch": "@@ -53,7 +53,7 @@ pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n ) -> EvalResult<'tcx, CompileTimeEvalContext<'a, 'mir, 'tcx>> {\n     debug!(\"mk_borrowck_eval_cx: {:?}\", instance);\n     let param_env = tcx.param_env(instance.def_id());\n-    let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeInterpreter::new(), ());\n+    let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeInterpreter::new());\n     // insert a stack frame so any queries have the correct substs\n     // cannot use `push_stack_frame`; if we do `const_prop` explodes\n     ecx.stack.push(interpret::Frame {\n@@ -76,7 +76,7 @@ pub fn mk_eval_cx<'a, 'tcx>(\n ) -> EvalResult<'tcx, CompileTimeEvalContext<'a, 'tcx, 'tcx>> {\n     debug!(\"mk_eval_cx: {:?}, {:?}\", instance, param_env);\n     let span = tcx.def_span(instance.def_id());\n-    let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeInterpreter::new(), ());\n+    let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeInterpreter::new());\n     let mir = ecx.load_mir(instance.def)?;\n     // insert a stack frame so any queries have the correct substs\n     ecx.push_stack_frame(\n@@ -155,7 +155,7 @@ fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n     // and try improving it down the road when more information is available\n     let span = tcx.def_span(cid.instance.def_id());\n     let span = mir.map(|mir| mir.span).unwrap_or(span);\n-    let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeInterpreter::new(), ());\n+    let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeInterpreter::new());\n     let r = eval_body_using_ecx(&mut ecx, cid, mir, param_env);\n     (r, ecx)\n }\n@@ -336,11 +336,11 @@ type CompileTimeEvalContext<'a, 'mir, 'tcx> =\n impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n     for CompileTimeInterpreter<'a, 'mir, 'tcx>\n {\n-    type MemoryData = ();\n     type MemoryKinds = !;\n+    type AllocExtra = ();\n     type PointerTag = ();\n \n-    type MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation<()>)>;\n+    type MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>;\n \n     const STATIC_KIND: Option<!> = None; // no copying of statics allowed\n "}, {"sha": "9fb838c28a5a2d499cabbc344866910e659808c7", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21934c81f430d1a638279bb5d1d00cbe052a2eee/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21934c81f430d1a638279bb5d1d00cbe052a2eee/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=21934c81f430d1a638279bb5d1d00cbe052a2eee", "patch": "@@ -205,13 +205,12 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         tcx: TyCtxtAt<'a, 'tcx, 'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         machine: M,\n-        memory_data: M::MemoryData,\n     ) -> Self {\n         EvalContext {\n             machine,\n             tcx,\n             param_env,\n-            memory: Memory::new(tcx, memory_data),\n+            memory: Memory::new(tcx),\n             stack: Vec::new(),\n             vtables: FxHashMap::default(),\n         }"}, {"sha": "790a1f6b7457be37590c578422cefb76be16247c", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/21934c81f430d1a638279bb5d1d00cbe052a2eee/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21934c81f430d1a638279bb5d1d00cbe052a2eee/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=21934c81f430d1a638279bb5d1d00cbe052a2eee", "patch": "@@ -62,23 +62,25 @@ pub trait AllocMap<K: Hash + Eq, V> {\n /// Methods of this trait signifies a point where CTFE evaluation would fail\n /// and some use case dependent behaviour can instead be applied.\n pub trait Machine<'a, 'mir, 'tcx>: Sized {\n-    /// Additional data that can be accessed via the Memory\n-    type MemoryData;\n-\n     /// Additional memory kinds a machine wishes to distinguish from the builtin ones\n-    type MemoryKinds: ::std::fmt::Debug + Copy + Eq;\n+    type MemoryKinds: ::std::fmt::Debug + Copy + Eq + 'static;\n+\n+    /// Tag tracked alongside every pointer.  This is used to implement \"Stacked Borrows\"\n+    /// <https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html>.\n+    type PointerTag: ::std::fmt::Debug + Default + Copy + Eq + Hash + 'static;\n+\n+    /// Extra data stored in every allocation.\n+    type AllocExtra: ::std::fmt::Debug + Default + Clone;\n \n     /// Memory's allocation map\n     type MemoryMap:\n-        AllocMap<AllocId, (MemoryKind<Self::MemoryKinds>, Allocation<Self::PointerTag>)> +\n+        AllocMap<\n+            AllocId,\n+            (MemoryKind<Self::MemoryKinds>, Allocation<Self::PointerTag, Self::AllocExtra>)\n+        > +\n         Default +\n         Clone;\n \n-    /// Tag tracked alongside every pointer.  This is inert for now, in preparation for\n-    /// a future implementation of \"Stacked Borrows\"\n-    /// <https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html>.\n-    type PointerTag: ::std::fmt::Debug + Default + Copy + Eq + Hash + 'static;\n-\n     /// The memory kind to use for copied statics -- or None if those are not supported.\n     /// Statics are copied under two circumstances: When they are mutated, and when\n     /// `static_with_default_tag` or `find_foreign_static` (see below) returns an owned allocation\n@@ -127,7 +129,7 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n     fn find_foreign_static(\n         tcx: TyCtxtAt<'a, 'tcx, 'tcx>,\n         def_id: DefId,\n-    ) -> EvalResult<'tcx, Cow<'tcx, Allocation<Self::PointerTag>>>;\n+    ) -> EvalResult<'tcx, Cow<'tcx, Allocation<Self::PointerTag, Self::AllocExtra>>>;\n \n     /// Called to turn an allocation obtained from the `tcx` into one that has\n     /// the appropriate tags on each pointer.\n@@ -138,7 +140,7 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n     /// owned allocation to the map even when the map is shared.)\n     fn static_with_default_tag(\n         alloc: &'_ Allocation\n-    ) -> Cow<'_, Allocation<Self::PointerTag>>;\n+    ) -> Cow<'_, Allocation<Self::PointerTag, Self::AllocExtra>>;\n \n     /// Called for all binary operations on integer(-like) types when one operand is a pointer\n     /// value, and for the `Offset` operation that is inherently about pointers."}, {"sha": "d61f3e3856936fa8635ccd268f5f95806973e943", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/21934c81f430d1a638279bb5d1d00cbe052a2eee/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21934c81f430d1a638279bb5d1d00cbe052a2eee/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=21934c81f430d1a638279bb5d1d00cbe052a2eee", "patch": "@@ -47,9 +47,6 @@ pub enum MemoryKind<T> {\n // `Memory` has to depend on the `Machine` because some of its operations\n // (e.g. `get`) call a `Machine` hook.\n pub struct Memory<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'a, 'mir, 'tcx>> {\n-    /// Additional data required by the Machine\n-    pub data: M::MemoryData,\n-\n     /// Allocations local to this instance of the miri engine.  The kind\n     /// helps ensure that the same mechanism is used for allocation and\n     /// deallocation.  When an allocation is not found here, it is a\n@@ -91,11 +88,9 @@ impl<'a, 'b, 'c, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> HasDataLayout\n // carefully copy only the reachable parts.\n impl<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'a, 'mir, 'tcx>>\n     Clone for Memory<'a, 'mir, 'tcx, M>\n-    where M::MemoryData: Clone\n {\n     fn clone(&self) -> Self {\n         Memory {\n-            data: self.data.clone(),\n             alloc_map: self.alloc_map.clone(),\n             dead_alloc_map: self.dead_alloc_map.clone(),\n             tcx: self.tcx,\n@@ -104,9 +99,8 @@ impl<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'a, 'mir, 'tcx>>\n }\n \n impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n-    pub fn new(tcx: TyCtxtAt<'a, 'tcx, 'tcx>, data: M::MemoryData) -> Self {\n+    pub fn new(tcx: TyCtxtAt<'a, 'tcx, 'tcx>) -> Self {\n         Memory {\n-            data,\n             alloc_map: Default::default(),\n             dead_alloc_map: FxHashMap::default(),\n             tcx,\n@@ -123,7 +117,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n \n     pub fn allocate_with(\n         &mut self,\n-        alloc: Allocation<M::PointerTag>,\n+        alloc: Allocation<M::PointerTag, M::AllocExtra>,\n         kind: MemoryKind<M::MemoryKinds>,\n     ) -> EvalResult<'tcx, AllocId> {\n         let id = self.tcx.alloc_map.lock().reserve();\n@@ -334,7 +328,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     fn get_static_alloc(\n         tcx: TyCtxtAt<'a, 'tcx, 'tcx>,\n         id: AllocId,\n-    ) -> EvalResult<'tcx, Cow<'tcx, Allocation<M::PointerTag>>> {\n+    ) -> EvalResult<'tcx, Cow<'tcx, Allocation<M::PointerTag, M::AllocExtra>>> {\n         let alloc = tcx.alloc_map.lock().get(id);\n         let def_id = match alloc {\n             Some(AllocType::Memory(mem)) => {\n@@ -376,7 +370,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         })\n     }\n \n-    pub fn get(&self, id: AllocId) -> EvalResult<'tcx, &Allocation<M::PointerTag>> {\n+    pub fn get(&self, id: AllocId) -> EvalResult<'tcx, &Allocation<M::PointerTag, M::AllocExtra>> {\n         // The error type of the inner closure here is somewhat funny.  We have two\n         // ways of \"erroring\": An actual error, or because we got a reference from\n         // `get_static_alloc` that we can actually use directly without inserting anything anywhere.\n@@ -409,7 +403,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     pub fn get_mut(\n         &mut self,\n         id: AllocId,\n-    ) -> EvalResult<'tcx, &mut Allocation<M::PointerTag>> {\n+    ) -> EvalResult<'tcx, &mut Allocation<M::PointerTag, M::AllocExtra>> {\n         let tcx = self.tcx;\n         let a = self.alloc_map.get_mut_or(id, || {\n             // Need to make a copy, even if `get_static_alloc` is able\n@@ -482,12 +476,12 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         self.dump_allocs(vec![id]);\n     }\n \n-    fn dump_alloc_helper<Tag>(\n+    fn dump_alloc_helper<Tag, Extra>(\n         &self,\n         allocs_seen: &mut FxHashSet<AllocId>,\n         allocs_to_print: &mut VecDeque<AllocId>,\n         mut msg: String,\n-        alloc: &Allocation<Tag>,\n+        alloc: &Allocation<Tag, Extra>,\n         extra: String,\n     ) {\n         use std::fmt::Write;\n@@ -687,8 +681,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n /// Interning (for CTFE)\n impl<'a, 'mir, 'tcx, M> Memory<'a, 'mir, 'tcx, M>\n where\n-    M: Machine<'a, 'mir, 'tcx, PointerTag=()>,\n-    M::MemoryMap: AllocMap<AllocId, (MemoryKind<M::MemoryKinds>, Allocation<()>)>,\n+    M: Machine<'a, 'mir, 'tcx, PointerTag=(), AllocExtra=()>,\n+    M::MemoryMap: AllocMap<AllocId, (MemoryKind<M::MemoryKinds>, Allocation)>,\n {\n     /// mark an allocation as static and initialized, either mutable or not\n     pub fn intern_static("}, {"sha": "c4f01d8ce31a9a670714cbc8be25320c8fb1577c", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21934c81f430d1a638279bb5d1d00cbe052a2eee/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21934c81f430d1a638279bb5d1d00cbe052a2eee/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=21934c81f430d1a638279bb5d1d00cbe052a2eee", "patch": "@@ -267,7 +267,7 @@ impl<'a, 'mir, 'tcx, Tag, M> EvalContext<'a, 'mir, 'tcx, M>\n where\n     Tag: ::std::fmt::Debug+Default+Copy+Eq+Hash+'static,\n     M: Machine<'a, 'mir, 'tcx, PointerTag=Tag>,\n-    M::MemoryMap: AllocMap<AllocId, (MemoryKind<M::MemoryKinds>, Allocation<Tag>)>,\n+    M::MemoryMap: AllocMap<AllocId, (MemoryKind<M::MemoryKinds>, Allocation<Tag, M::AllocExtra>)>,\n {\n     /// Take a value, which represents a (thin or fat) reference, and make it a place.\n     /// Alignment is just based on the type.  This is the inverse of `MemPlace::to_ref`."}, {"sha": "047a0125f78af968bad83a63ec91696ed517d7f6", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21934c81f430d1a638279bb5d1d00cbe052a2eee/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21934c81f430d1a638279bb5d1d00cbe052a2eee/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=21934c81f430d1a638279bb5d1d00cbe052a2eee", "patch": "@@ -305,7 +305,7 @@ impl<'a, Ctx> Snapshot<'a, Ctx> for &'a Allocation\n     type Item = AllocationSnapshot<'a>;\n \n     fn snapshot(&self, ctx: &'a Ctx) -> Self::Item {\n-        let Allocation { bytes, relocations, undef_mask, align, mutability } = self;\n+        let Allocation { bytes, relocations, undef_mask, align, mutability, extra: () } = self;\n \n         AllocationSnapshot {\n             bytes,"}]}