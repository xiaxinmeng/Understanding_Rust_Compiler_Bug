{"sha": "6e1d22828505bd582b899d7ecdba21caf3327ea7", "node_id": "C_kwDOAAsO6NoAKDZlMWQyMjgyODUwNWJkNTgyYjg5OWQ3ZWNkYmEyMWNhZjMzMjdlYTc", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2023-01-31T16:45:30Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2023-02-12T22:18:15Z"}, "message": "only require sub type relation on field projection types", "tree": {"sha": "bc982acc2c99aee8ebb47dae2e771124e20524a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc982acc2c99aee8ebb47dae2e771124e20524a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e1d22828505bd582b899d7ecdba21caf3327ea7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e1d22828505bd582b899d7ecdba21caf3327ea7", "html_url": "https://github.com/rust-lang/rust/commit/6e1d22828505bd582b899d7ecdba21caf3327ea7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e1d22828505bd582b899d7ecdba21caf3327ea7/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00cf19a75a7055171a4ffc8cc557ff63953c9754", "url": "https://api.github.com/repos/rust-lang/rust/commits/00cf19a75a7055171a4ffc8cc557ff63953c9754", "html_url": "https://github.com/rust-lang/rust/commit/00cf19a75a7055171a4ffc8cc557ff63953c9754"}], "stats": {"total": 155, "additions": 151, "deletions": 4}, "files": [{"sha": "4244c76be138a11adf6da5a352e7bda1ce1c6271", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6e1d22828505bd582b899d7ecdba21caf3327ea7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1d22828505bd582b899d7ecdba21caf3327ea7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=6e1d22828505bd582b899d7ecdba21caf3327ea7", "patch": "@@ -534,7 +534,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                     return PlaceTy::from_ty(self.tcx().ty_error());\n                 }\n             }\n-            place_ty = self.sanitize_projection(place_ty, elem, place, location);\n+            place_ty = self.sanitize_projection(place_ty, elem, place, location, context);\n         }\n \n         if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {\n@@ -630,12 +630,14 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         }\n     }\n \n+    #[instrument(skip(self), level = \"debug\")]\n     fn sanitize_projection(\n         &mut self,\n         base: PlaceTy<'tcx>,\n         pi: PlaceElem<'tcx>,\n         place: &Place<'tcx>,\n         location: Location,\n+        context: PlaceContext,\n     ) -> PlaceTy<'tcx> {\n         debug!(\"sanitize_projection: {:?} {:?} {:?}\", base, pi, place);\n         let tcx = self.tcx();\n@@ -713,8 +715,11 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                 match self.field_ty(place, base, field, location) {\n                     Ok(ty) => {\n                         let ty = self.cx.normalize(ty, location);\n-                        if let Err(terr) = self.cx.eq_types(\n+                        debug!(?fty, ?ty);\n+\n+                        if let Err(terr) = self.cx.relate_types(\n                             ty,\n+                            self.get_ambient_variance(context),\n                             fty,\n                             location.to_locations(),\n                             ConstraintCategory::Boring,\n@@ -743,9 +748,10 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                 let ty = self.sanitize_type(place, ty);\n                 let ty = self.cx.normalize(ty, location);\n                 self.cx\n-                    .eq_types(\n-                        base.ty,\n+                    .relate_types(\n                         ty,\n+                        self.get_ambient_variance(context),\n+                        base.ty,\n                         location.to_locations(),\n                         ConstraintCategory::TypeAnnotation,\n                     )\n@@ -760,6 +766,13 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         self.tcx().ty_error()\n     }\n \n+    fn get_ambient_variance(&self, context: PlaceContext) -> ty::Variance {\n+        match context {\n+            PlaceContext::MutatingUse(_) => ty::Invariant,\n+            PlaceContext::NonMutatingUse(_) | PlaceContext::NonUse(_) => ty::Covariant,\n+        }\n+    }\n+\n     fn field_ty(\n         &mut self,\n         parent: &dyn fmt::Debug,"}, {"sha": "b5d6add043cb93520dbbe0887266cfa76735a693", "filename": "tests/ui/mir/field-projection-invariant.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6e1d22828505bd582b899d7ecdba21caf3327ea7/tests%2Fui%2Fmir%2Ffield-projection-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1d22828505bd582b899d7ecdba21caf3327ea7/tests%2Fui%2Fmir%2Ffield-projection-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Ffield-projection-invariant.rs?ref=6e1d22828505bd582b899d7ecdba21caf3327ea7", "patch": "@@ -0,0 +1,24 @@\n+// build-pass\n+struct Inv<'a>(&'a mut &'a ());\n+enum Foo<T> {\n+    Bar,\n+    Var(T),\n+}\n+type Supertype = Foo<for<'a> fn(Inv<'a>, Inv<'a>)>;\n+\n+fn foo(x: Foo<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>) {\n+    match x {\n+        Supertype::Bar => {}\n+        Supertype::Var(x) => {}\n+    }\n+}\n+\n+fn foo_nested(x: Foo<Foo<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>>) {\n+    match x {\n+        Foo::Bar => {}\n+        Foo::Var(Supertype::Bar) => {}\n+        Foo::Var(Supertype::Var(x)) => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a1002c088dc1cbe071495b1de7ddcaea53bbc1b3", "filename": "tests/ui/mir/field-projection-mutating-context.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6e1d22828505bd582b899d7ecdba21caf3327ea7/tests%2Fui%2Fmir%2Ffield-projection-mutating-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1d22828505bd582b899d7ecdba21caf3327ea7/tests%2Fui%2Fmir%2Ffield-projection-mutating-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Ffield-projection-mutating-context.rs?ref=6e1d22828505bd582b899d7ecdba21caf3327ea7", "patch": "@@ -0,0 +1,19 @@\n+use std::sync::Mutex;\n+\n+static GLOBAL: Mutex<&'static str> = Mutex::new(\"global str\");\n+\n+struct Foo<T>(T); // `T` is covariant.\n+\n+fn foo() {\n+    let mut x: Foo<for<'a> fn(&'a str)> = Foo(|_| ());\n+    let Foo(ref mut y): Foo<fn(&'static str)> = x;\n+    //~^ ERROR mismatched types\n+    *y = |s| *GLOBAL.lock().unwrap() = s;\n+    let string = String::from(\"i am shortlived\");\n+    (x.0)(&string);\n+}\n+\n+fn main() {\n+    foo();\n+    println!(\"{}\", GLOBAL.lock().unwrap());\n+}"}, {"sha": "9b18b3427adff2f45b842e990ced3e3043b40b3f", "filename": "tests/ui/mir/field-projection-mutating-context.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e1d22828505bd582b899d7ecdba21caf3327ea7/tests%2Fui%2Fmir%2Ffield-projection-mutating-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e1d22828505bd582b899d7ecdba21caf3327ea7/tests%2Fui%2Fmir%2Ffield-projection-mutating-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Ffield-projection-mutating-context.stderr?ref=6e1d22828505bd582b899d7ecdba21caf3327ea7", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/field-projection-mutating-context.rs:9:13\n+   |\n+LL |     let Foo(ref mut y): Foo<fn(&'static str)> = x;\n+   |             ^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected fn pointer `for<'a> fn(&'a str)`\n+              found fn pointer `fn(&str)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "dd9c44a16d3d5f91e9a27990f13c192375d2c25f", "filename": "tests/ui/mir/field-projection-mutating-context2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6e1d22828505bd582b899d7ecdba21caf3327ea7/tests%2Fui%2Fmir%2Ffield-projection-mutating-context2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1d22828505bd582b899d7ecdba21caf3327ea7/tests%2Fui%2Fmir%2Ffield-projection-mutating-context2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Ffield-projection-mutating-context2.rs?ref=6e1d22828505bd582b899d7ecdba21caf3327ea7", "patch": "@@ -0,0 +1,17 @@\n+use std::sync::Mutex;\n+\n+static GLOBAL: Mutex<&'static str> = Mutex::new(\"global str\");\n+\n+struct Foo<T>(T); // `T` is covariant.\n+\n+fn foo<'a>(mut x: Foo<fn(&'a str)>, string: &'a str) {\n+    let Foo(ref mut y): Foo<fn(&'static str)> = x;\n+    //~^ ERROR lifetime may not live long enough\n+    *y = |s| *GLOBAL.lock().unwrap() = s;\n+    (x.0)(&string);\n+}\n+\n+fn main() {\n+    foo(Foo(|_| ()), &String::from(\"i am shortlived\"));\n+    println!(\"{}\", GLOBAL.lock().unwrap());\n+}"}, {"sha": "a7b66fe10ce717a1c919dc136d01495938bdc134", "filename": "tests/ui/mir/field-projection-mutating-context2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e1d22828505bd582b899d7ecdba21caf3327ea7/tests%2Fui%2Fmir%2Ffield-projection-mutating-context2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e1d22828505bd582b899d7ecdba21caf3327ea7/tests%2Fui%2Fmir%2Ffield-projection-mutating-context2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Ffield-projection-mutating-context2.stderr?ref=6e1d22828505bd582b899d7ecdba21caf3327ea7", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/field-projection-mutating-context2.rs:8:25\n+   |\n+LL | fn foo<'a>(mut x: Foo<fn(&'a str)>, string: &'a str) {\n+   |        -- lifetime `'a` defined here\n+LL |     let Foo(ref mut y): Foo<fn(&'static str)> = x;\n+   |                         ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "179af617090635ade42d828a10a9082d732ee1e3", "filename": "tests/ui/mir/field-ty-ascription-enums.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6e1d22828505bd582b899d7ecdba21caf3327ea7/tests%2Fui%2Fmir%2Ffield-ty-ascription-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1d22828505bd582b899d7ecdba21caf3327ea7/tests%2Fui%2Fmir%2Ffield-ty-ascription-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Ffield-ty-ascription-enums.rs?ref=6e1d22828505bd582b899d7ecdba21caf3327ea7", "patch": "@@ -0,0 +1,15 @@\n+// build-pass\n+\n+enum Foo<T> {\n+    Var(T),\n+} // `T` is covariant.\n+\n+fn foo<'b>(x: Foo<for<'a> fn(&'a ())>) {\n+    let Foo::Var(x): Foo<fn(&'b ())> = x;\n+}\n+\n+fn foo_nested<'b>(x: Foo<Foo<for<'a> fn(&'a ())>>) {\n+    let Foo::Var(Foo::Var(x)): Foo<Foo<fn(&'b ())>> = x;\n+}\n+\n+fn main() {}"}, {"sha": "178c7916bc59fe9215672c29fa266918d40ff940", "filename": "tests/ui/mir/field-ty-ascription.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6e1d22828505bd582b899d7ecdba21caf3327ea7/tests%2Fui%2Fmir%2Ffield-ty-ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1d22828505bd582b899d7ecdba21caf3327ea7/tests%2Fui%2Fmir%2Ffield-ty-ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Ffield-ty-ascription.rs?ref=6e1d22828505bd582b899d7ecdba21caf3327ea7", "patch": "@@ -0,0 +1,37 @@\n+// build-pass\n+\n+struct Foo<T>(T); // `T` is covariant.\n+\n+struct Bar<T> {\n+    x: T,\n+} // `T` is covariant.\n+\n+fn bar<'b>(x: Bar<for<'a> fn(&'a ())>) {\n+    let Bar { x }: Bar<fn(&'b ())> = x;\n+}\n+\n+fn bar_nested<'b>(x: Bar<Bar<for<'a> fn(&'a ())>>) {\n+    let Bar { x: Bar { x } }: Bar<Bar<fn(&'b ())>> = x;\n+}\n+\n+fn bar_foo_nested<'b>(x: Bar<Foo<for<'a> fn(&'a ())>>) {\n+    let Bar { x: Foo ( x ) }: Bar<Foo<fn(&'b ())>> = x;\n+}\n+\n+fn foo<'b>(x: Foo<for<'a> fn(&'a ())>) {\n+    let Foo(y): Foo<fn(&'b ())> = x;\n+}\n+\n+fn foo_nested<'b>(x: Foo<Foo<for<'a> fn(&'a ())>>) {\n+    let Foo(Foo(y)): Foo<Foo<fn(&'b ())>> = x;\n+}\n+\n+fn tuple<'b>(x: (u32, for<'a> fn(&'a ()))) {\n+    let (_, y): (u32, fn(&'b ())) = x;\n+}\n+\n+fn tuple_nested<'b>(x: (u32, (u32, for<'a> fn(&'a ())))) {\n+    let (_, (_, y)): (u32, (u32, fn(&'b ()))) = x;\n+}\n+\n+fn main() {}"}]}