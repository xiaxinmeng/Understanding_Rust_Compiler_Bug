{"sha": "9f83d36edcfeabad63e95338c17942a36f072782", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmODNkMzZlZGNmZWFiYWQ2M2U5NTMzOGMxNzk0MmEzNmYwNzI3ODI=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-31T15:16:44Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-31T15:16:55Z"}, "message": "remove trivial calls to mk_const", "tree": {"sha": "67b1ee3e54a84fba7beb2e76306a84ecde19099a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67b1ee3e54a84fba7beb2e76306a84ecde19099a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f83d36edcfeabad63e95338c17942a36f072782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f83d36edcfeabad63e95338c17942a36f072782", "html_url": "https://github.com/rust-lang/rust/commit/9f83d36edcfeabad63e95338c17942a36f072782", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f83d36edcfeabad63e95338c17942a36f072782/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b1f86adbe41e8dd4864ca2315f43953dd503bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b1f86adbe41e8dd4864ca2315f43953dd503bb5", "html_url": "https://github.com/rust-lang/rust/commit/4b1f86adbe41e8dd4864ca2315f43953dd503bb5"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "aa47c6b70a21ae18d24c5bea4f71939aee6b9e56", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f83d36edcfeabad63e95338c17942a36f072782/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f83d36edcfeabad63e95338c17942a36f072782/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=9f83d36edcfeabad63e95338c17942a36f072782", "patch": "@@ -1019,7 +1019,11 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         let ty = self.ty.fold_with(folder);\n         let val = self.val.fold_with(folder);\n-        folder.tcx().mk_const(ty::Const { ty, val })\n+        if ty != self.ty || val != self.val {\n+            folder.tcx().mk_const(ty::Const { ty, val })\n+        } else {\n+            *self\n+        }\n     }\n \n     fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {"}]}