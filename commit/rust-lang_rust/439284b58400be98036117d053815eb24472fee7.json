{"sha": "439284b58400be98036117d053815eb24472fee7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzOTI4NGI1ODQwMGJlOTgwMzYxMTdkMDUzODE1ZWIyNDQ3MmZlZTc=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-08-17T18:46:44Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-08-17T18:47:45Z"}, "message": "Make code cleaner and more readable", "tree": {"sha": "3ed52cb6e9bbf93863a8355d72db92c834f571a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ed52cb6e9bbf93863a8355d72db92c834f571a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/439284b58400be98036117d053815eb24472fee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/439284b58400be98036117d053815eb24472fee7", "html_url": "https://github.com/rust-lang/rust/commit/439284b58400be98036117d053815eb24472fee7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/439284b58400be98036117d053815eb24472fee7/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49dff2c9f34995af9d2d665e712fcf17924b33e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/49dff2c9f34995af9d2d665e712fcf17924b33e3", "html_url": "https://github.com/rust-lang/rust/commit/49dff2c9f34995af9d2d665e712fcf17924b33e3"}], "stats": {"total": 64, "additions": 31, "deletions": 33}, "files": [{"sha": "22dbd3ecc9c13f4ac1a96bbb9dd2e216bb28fd57", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/439284b58400be98036117d053815eb24472fee7/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439284b58400be98036117d053815eb24472fee7/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=439284b58400be98036117d053815eb24472fee7", "patch": "@@ -34,39 +34,37 @@ declare_lint_pass!(AssertionsOnConstants => [ASSERTIONS_ON_CONSTANTS]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         let mut is_debug_assert = false;\n-        let debug_assert_not_in_macro_or_desugar = |span: Span| {\n-            is_debug_assert = true;\n-            // Check that `debug_assert!` itself is not inside a macro\n-            !in_macro_or_desugar(span)\n-        };\n-        if_chain! {\n-            if let Some(assert_span) = is_direct_expn_of(e.span, \"assert\");\n-            if !in_macro_or_desugar(assert_span)\n-                || is_direct_expn_of(assert_span, \"debug_assert\")\n-                    .map_or(false, debug_assert_not_in_macro_or_desugar);\n-            if let ExprKind::Unary(_, ref lit) = e.node;\n-            if let Some(bool_const) = constant(cx, cx.tables, lit);\n-            then {\n-                match bool_const.0 {\n-                    Constant::Bool(true) => {\n-                        span_help_and_lint(\n-                            cx,\n-                            ASSERTIONS_ON_CONSTANTS,\n-                            e.span,\n-                            \"`assert!(true)` will be optimized out by the compiler\",\n-                            \"remove it\"\n-                        );\n-                    },\n-                    Constant::Bool(false) if !is_debug_assert => {\n-                        span_help_and_lint(\n-                            cx,\n-                            ASSERTIONS_ON_CONSTANTS,\n-                            e.span,\n-                            \"`assert!(false)` should probably be replaced\",\n-                            \"use `panic!()` or `unreachable!()`\"\n-                        );\n-                    },\n-                    _ => (),\n+        if let Some(assert_span) = is_direct_expn_of(e.span, \"assert\") {\n+            if in_macro_or_desugar(assert_span) {\n+                return;\n+            }\n+            if let Some(debug_assert_span) = is_direct_expn_of(assert_span, \"debug_assert\") {\n+                if in_macro_or_desugar(debug_assert_span) {\n+                    return;\n+                }\n+                is_debug_assert = true;\n+            }\n+            if let ExprKind::Unary(_, ref lit) = e.node {\n+                if let Some((bool_const, _)) = constant(cx, cx.tables, lit) {\n+                    if let Constant::Bool(is_true) bool_const {\n+                        if is_true {\n+                            span_help_and_lint(\n+                                cx,\n+                                ASSERTIONS_ON_CONSTANTS,\n+                                e.span,\n+                                \"`assert!(true)` will be optimized out by the compiler\",\n+                                \"remove it\"\n+                            );\n+                        } else if !is_debug_assert {\n+                            span_help_and_lint(\n+                                cx,\n+                                ASSERTIONS_ON_CONSTANTS,\n+                                e.span,\n+                                \"`assert!(false)` should probably be replaced\",\n+                                \"use `panic!()` or `unreachable!()`\"\n+                            );\n+                        }\n+                    }\n                 }\n             }\n         }"}]}