{"sha": "406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNmQ0YTljYzNiOTYwMWNmOThhMDdjNmM4M2UwMjI3ZDY0ZjVkNDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-21T19:36:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-21T19:36:04Z"}, "message": "Auto merge of #86515 - JohnTitor:rollup-axzb4xh, r=JohnTitor\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #86192 (Make OR_PATTERNS_BACK_COMPAT be a 2021 future-incompatible lint)\n - #86248 (Add a regression test for issue-85113)\n - #86274 (Spaces)\n - #86349 (Add regression test for issue #78632)\n - #86424 (rustfmt: load nested out-of-line mods correctly)\n - #86472 (Fix CI to fetch master on beta channel)\n - #86473 (Rustdoc: Account for const-unstable functions)\n - #86495 (Improve `proc_macro::{Punct, Spacing}` documentation)\n - #86503 (Fix rust.css fonts.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d22105fb248ec692234490545928ae9f38ce04fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d22105fb248ec692234490545928ae9f38ce04fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "html_url": "https://github.com/rust-lang/rust/commit/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a5b97adb4da4b0f913d19765e91d4322ef6542e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5b97adb4da4b0f913d19765e91d4322ef6542e", "html_url": "https://github.com/rust-lang/rust/commit/6a5b97adb4da4b0f913d19765e91d4322ef6542e"}, {"sha": "599e8a74397c277e3bbc0c5fcff53c8ae14342e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/599e8a74397c277e3bbc0c5fcff53c8ae14342e1", "html_url": "https://github.com/rust-lang/rust/commit/599e8a74397c277e3bbc0c5fcff53c8ae14342e1"}], "stats": {"total": 566, "additions": 432, "deletions": 134}, "files": [{"sha": "a7b70cea927d0c3b41bbcb4b0cee906be469d192", "filename": ".github/ISSUE_TEMPLATE/diagnostics.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/.github%2FISSUE_TEMPLATE%2Fdiagnostics.md", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/.github%2FISSUE_TEMPLATE%2Fdiagnostics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Fdiagnostics.md?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -9,7 +9,7 @@ along with any information you feel relevant to replicating the bug.\n \n If you cannot produce a minimal reproduction case (something that would work in\n isolation), please provide the steps or even link to a repository that causes\n-the problematic output to occur. \n+the problematic output to occur.\n -->\n \n Given the following code: <!-- Please provide a link to play.rust-lang.org -->"}, {"sha": "cf75f4184a1c96a0eab4def408ee84a76594759d", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -21,7 +21,7 @@ Read [\"Installation\"] from [The Book].\n The Rust build system uses a Python script called `x.py` to build the compiler,\n which manages the bootstrapping process. It lives in the root of the project.\n \n-The `x.py` command can be run directly on most systems in the following format: \n+The `x.py` command can be run directly on most systems in the following format:\n \n ```sh\n ./x.py <subcommand> [flags]"}, {"sha": "35e5627e61ff86f95f9547751ea938b656ccd1a5", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -369,7 +369,7 @@ Language\n --------\n - [You can now parameterize items such as functions, traits, and `struct`s by constant\n   values in addition to by types and lifetimes.][79135] Also known as \"const generics\"\n-  E.g. you can now write the following. Note: Only values of primitive integers, \n+  E.g. you can now write the following. Note: Only values of primitive integers,\n   `bool`, or `char` types are currently permitted.\n   ```rust\n   struct GenericArray<T, const LENGTH: usize> {"}, {"sha": "f95d4a6ca54812b2efb33dce2d2ad6a46ae9dd72", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -3239,4 +3239,8 @@ declare_lint! {\n     pub OR_PATTERNS_BACK_COMPAT,\n     Allow,\n     \"detects usage of old versions of or-patterns\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #84869 <https://github.com/rust-lang/rust/issues/84869>\",\n+        edition: Some(Edition::Edition2021),\n+    };\n }"}, {"sha": "9a820f0803f0ade766ea8578cd536443c3cacf2b", "filename": "config.toml.example", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -567,8 +567,8 @@ changelog-seen = 2\n # On Linux target, if crt-static is not enabled, 'no' means dynamic link to\n # `libgcc_s.so`, 'in-tree' means static link to the in-tree build of llvm libunwind\n # and 'system' means dynamic link to `libunwind.so`. If crt-static is enabled,\n-# the behavior is depend on the libc. On musl target, 'no' and 'in-tree' both \n-# means static link to the in-tree build of llvm libunwind, and 'system' means \n+# the behavior is depend on the libc. On musl target, 'no' and 'in-tree' both\n+# means static link to the in-tree build of llvm libunwind, and 'system' means\n # static link to `libunwind.a` provided by system. Due to the limitation of glibc,\n # it must link to `libgcc_eh.a` to get a working output, and this option have no effect.\n #llvm-libunwind = 'no'"}, {"sha": "c9079b1cbadc2762ff994e0930211005104e2619", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -766,7 +766,7 @@ impl fmt::Debug for Group {\n     }\n }\n \n-/// An `Punct` is an single punctuation character like `+`, `-` or `#`.\n+/// A `Punct` is a single punctuation character such as `+`, `-` or `#`.\n ///\n /// Multi-character operators like `+=` are represented as two instances of `Punct` with different\n /// forms of `Spacing` returned.\n@@ -779,16 +779,19 @@ impl !Send for Punct {}\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl !Sync for Punct {}\n \n-/// Whether an `Punct` is followed immediately by another `Punct` or\n-/// followed by another token or whitespace.\n+/// Describes whether a `Punct` is followed immediately by another `Punct` ([`Spacing::Joint`]) or\n+/// by a different token or whitespace ([`Spacing::Alone`]).\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n pub enum Spacing {\n-    /// e.g., `+` is `Alone` in `+ =`, `+ident` or `+()`.\n+    /// A `Punct` is not immediately followed by another `Punct`.\n+    /// E.g. `+` is `Alone` in `+ =`, `+ident` and `+()`.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     Alone,\n-    /// e.g., `+` is `Joint` in `+=` or `'#`.\n-    /// Additionally, single quote `'` can join with identifiers to form lifetimes `'ident`.\n+    /// A `Punct` is immediately followed by another `Punct`.\n+    /// E.g. `+` is `Joint` in `+=` and `++`.\n+    ///\n+    /// Additionally, single quote `'` can join with identifiers to form lifetimes: `'ident`.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     Joint,\n }"}, {"sha": "3c61dcc9d9c7b46a70a56b180355d6af93721707", "filename": "src/ci/init_repo.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Fci%2Finit_repo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Fci%2Finit_repo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finit_repo.sh?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -31,7 +31,7 @@ mkdir \"$CACHE_DIR\"\n \n # On the beta channel we'll be automatically calculating the prerelease version\n # via the git history, so unshallow our shallow clone from CI.\n-if grep -q RUST_RELEASE_CHANNEL=beta src/ci/run.sh; then\n+if [ \"$(releaseChannel)\" = \"beta\" ]; then\n   git fetch origin --unshallow beta master\n fi\n "}, {"sha": "b5019d83af45b426e424dd312d068145761398aa", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -65,11 +65,7 @@ fi\n # Always set the release channel for bootstrap; this is normally not important (i.e., only dist\n # builds would seem to matter) but in practice bootstrap wants to know whether we're targeting\n # master, beta, or stable with a build to determine whether to run some checks (notably toolstate).\n-if [[ -z \"${RUST_CI_OVERRIDE_RELEASE_CHANNEL+x}\" ]]; then\n-    export RUST_RELEASE_CHANNEL=\"$(cat \"${ci_dir}/channel\")\"\n-else\n-    export RUST_RELEASE_CHANNEL=\"${RUST_CI_OVERRIDE_RELEASE_CHANNEL}\"\n-fi\n+export RUST_RELEASE_CHANNEL=$(releaseChannel)\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --release-channel=$RUST_RELEASE_CHANNEL\"\n \n if [ \"$DEPLOY$DEPLOY_ALT\" = \"1\" ]; then"}, {"sha": "b095afb542d83da4dfa114d371fcce8288a819d1", "filename": "src/ci/shared.sh", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -141,3 +141,11 @@ function ciCommandSetEnv {\n         exit 1\n     fi\n }\n+\n+function releaseChannel {\n+    if [[ -z \"${RUST_CI_OVERRIDE_RELEASE_CHANNEL+x}\" ]]; then\n+        cat \"${ci_dir}/channel\"\n+    else\n+        echo $RUST_CI_OVERRIDE_RELEASE_CHANNEL\n+    fi\n+}"}, {"sha": "dba97a067a32cf9db0224f9666dcdcfd1856895d", "filename": "src/doc/rust.css", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Fdoc%2Frust.css", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Fdoc%2Frust.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.css?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -1,45 +1,68 @@\n+/* See FiraSans-LICENSE.txt for the Fira Sans license. */\n @font-face {\n \tfont-family: 'Fira Sans';\n \tfont-style: normal;\n \tfont-weight: 400;\n-\tsrc: local('Fira Sans'), url(\"FiraSans-Regular.woff\") format('woff');\n+\tsrc: local('Fira Sans'),\n+\t\turl(\"FiraSans-Regular.woff2\") format(\"woff2\"),\n+\t\turl(\"FiraSans-Regular.woff\") format('woff');\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Fira Sans';\n \tfont-style: normal;\n \tfont-weight: 500;\n-\tsrc: local('Fira Sans Medium'), url(\"FiraSans-Medium.woff\") format('woff');\n+\tsrc: local('Fira Sans Medium'),\n+\t\turl(\"FiraSans-Medium.woff2\") format(\"woff2\"),\n+\t\turl(\"FiraSans-Medium.woff\") format('woff');\n \tfont-display: swap;\n }\n+\n+/* See SourceSerif4-LICENSE.md for the Source Serif 4 license. */\n @font-face {\n-\tfont-family: 'Source Serif Pro';\n+\tfont-family: 'Source Serif 4';\n \tfont-style: normal;\n \tfont-weight: 400;\n-\tsrc: local('Source Serif Pro'), url(\"SourceSerifPro-Regular.ttf.woff\") format('woff');\n+\tsrc: local('Source Serif 4'), url(\"SourceSerif4-Regular.ttf.woff\") format('woff');\n \tfont-display: swap;\n }\n @font-face {\n-\tfont-family: 'Source Serif Pro';\n+\tfont-family: 'Source Serif 4';\n \tfont-style: italic;\n \tfont-weight: 400;\n-\tsrc: url(\"SourceSerifPro-It.ttf.woff\") format('woff');\n+\tsrc: local('Source Serif 4 Italic'), url(\"SourceSerif4-It.ttf.woff\") format('woff');\n \tfont-display: swap;\n }\n @font-face {\n-\tfont-family: 'Source Serif Pro';\n+\tfont-family: 'Source Serif 4';\n \tfont-style: normal;\n \tfont-weight: 700;\n-\tsrc: local('Source Serif Pro Bold'), url(\"SourceSerifPro-Bold.ttf.woff\") format('woff');\n+\tsrc: local('Source Serif 4 Bold'), url(\"SourceSerif4-Bold.ttf.woff\") format('woff');\n \tfont-display: swap;\n }\n+\n+/* See SourceCodePro-LICENSE.txt for the Source Code Pro license. */\n @font-face {\n \tfont-family: 'Source Code Pro';\n \tfont-style: normal;\n \tfont-weight: 400;\n \t/* Avoid using locally installed font because bad versions are in circulation:\n \t * see https://github.com/rust-lang/rust/issues/24355 */\n-\tsrc: url(\"SourceCodePro-Regular.woff\") format('woff');\n+\tsrc: url(\"SourceCodePro-Regular.ttf.woff\") format('woff');\n+\tfont-display: swap;\n+}\n+@font-face {\n+\tfont-family: 'Source Code Pro';\n+\tfont-style: italic;\n+\tfont-weight: 400;\n+\tsrc: url(\"SourceCodePro-It.ttf.woff\") format('woff');\n+\tfont-display: swap;\n+}\n+@font-face {\n+\tfont-family: 'Source Code Pro';\n+\tfont-style: normal;\n+\tfont-weight: 600;\n+\tsrc: url(\"SourceCodePro-Semibold.ttf.woff\") format('woff');\n \tfont-display: swap;\n }\n \n@@ -55,7 +78,7 @@ body {\n \tbackground-color: white;\n \tmargin: 0 auto;\n \tpadding: 0 15px;\n-\tfont-family: \"Source Serif Pro\", Georgia, Times, \"Times New Roman\", serif;\n+\tfont-family: \"Source Serif 4\", Georgia, Times, \"Times New Roman\", serif;\n \tfont-size: 18px;\n \tcolor: #333;\n \tline-height: 1.428571429;"}, {"sha": "58c609cf252cf0c0c48953b85682c6ec1ea9feaf", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -9,6 +9,7 @@ use std::cell::Cell;\n use std::fmt;\n use std::iter;\n \n+use rustc_attr::{ConstStability, StabilityLevel};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n@@ -1253,15 +1254,6 @@ impl PrintWithSpace for hir::Unsafety {\n     }\n }\n \n-impl PrintWithSpace for hir::Constness {\n-    fn print_with_space(&self) -> &str {\n-        match self {\n-            hir::Constness::Const => \"const \",\n-            hir::Constness::NotConst => \"\",\n-        }\n-    }\n-}\n-\n impl PrintWithSpace for hir::IsAsync {\n     fn print_with_space(&self) -> &str {\n         match self {\n@@ -1280,6 +1272,22 @@ impl PrintWithSpace for hir::Mutability {\n     }\n }\n \n+crate fn print_constness_with_space(\n+    c: &hir::Constness,\n+    s: Option<&ConstStability>,\n+) -> &'static str {\n+    match (c, s) {\n+        // const stable or when feature(staged_api) is not set\n+        (\n+            hir::Constness::Const,\n+            Some(ConstStability { level: StabilityLevel::Stable { .. }, .. }),\n+        )\n+        | (hir::Constness::Const, None) => \"const \",\n+        // const unstable or not const\n+        _ => \"\",\n+    }\n+}\n+\n impl clean::Import {\n     crate fn print<'a, 'tcx: 'a>(\n         &'a self,"}, {"sha": "03b607c2d2cb7d0de904835384511ac366db84e7", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 44, "deletions": 18, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -42,7 +42,7 @@ use std::str;\n use std::string::ToString;\n \n use rustc_ast_pretty::pprust;\n-use rustc_attr::{Deprecation, StabilityLevel};\n+use rustc_attr::{ConstStability, Deprecation, StabilityLevel};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n@@ -61,8 +61,8 @@ use crate::formats::item_type::ItemType;\n use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n use crate::html::format::{\n-    href, print_abi_with_space, print_default_space, print_generic_bounds, print_where_clause,\n-    Buffer, PrintWithSpace,\n+    href, print_abi_with_space, print_constness_with_space, print_default_space,\n+    print_generic_bounds, print_where_clause, Buffer, PrintWithSpace,\n };\n use crate::html::markdown::{Markdown, MarkdownHtml, MarkdownSummaryLine};\n \n@@ -826,21 +826,45 @@ fn assoc_type(\n fn render_stability_since_raw(\n     w: &mut Buffer,\n     ver: Option<&str>,\n-    const_ver: Option<&str>,\n+    const_stability: Option<&ConstStability>,\n     containing_ver: Option<&str>,\n     containing_const_ver: Option<&str>,\n ) {\n     let ver = ver.filter(|inner| !inner.is_empty());\n-    let const_ver = const_ver.filter(|inner| !inner.is_empty());\n \n-    match (ver, const_ver) {\n-        (Some(v), Some(cv)) if const_ver != containing_const_ver => {\n+    match (ver, const_stability) {\n+        // stable and const stable\n+        (Some(v), Some(ConstStability { level: StabilityLevel::Stable { since }, .. }))\n+            if Some(since.as_str()).as_deref() != containing_const_ver =>\n+        {\n             write!(\n                 w,\n                 \"<span class=\\\"since\\\" title=\\\"Stable since Rust version {0}, const since {1}\\\">{0} (const: {1})</span>\",\n-                v, cv\n+                v, since\n             );\n         }\n+        // stable and const unstable\n+        (\n+            Some(v),\n+            Some(ConstStability { level: StabilityLevel::Unstable { issue, .. }, feature, .. }),\n+        ) => {\n+            write!(\n+                w,\n+                \"<span class=\\\"since\\\" title=\\\"Stable since Rust version {0}, const unstable\\\">{0} (const: \",\n+                v\n+            );\n+            if let Some(n) = issue {\n+                write!(\n+                    w,\n+                    \"<a href=\\\"https://github.com/rust-lang/rust/issues/{}\\\" title=\\\"Tracking issue for {}\\\">unstable</a>\",\n+                    n, feature\n+                );\n+            } else {\n+                write!(w, \"unstable\");\n+            }\n+            write!(w, \")</span>\");\n+        }\n+        // stable\n         (Some(v), _) if ver != containing_ver => {\n             write!(\n                 w,\n@@ -888,11 +912,13 @@ fn render_assoc_item(\n             }\n         };\n         let vis = meth.visibility.print_with_space(meth.def_id, cx).to_string();\n-        let constness = header.constness.print_with_space();\n+        let constness =\n+            print_constness_with_space(&header.constness, meth.const_stability(cx.tcx()));\n         let asyncness = header.asyncness.print_with_space();\n         let unsafety = header.unsafety.print_with_space();\n         let defaultness = print_default_space(meth.is_default());\n         let abi = print_abi_with_space(header.abi).to_string();\n+\n         // NOTE: `{:#}` does not print HTML formatting, `{}` does. So `g.print` can't be reused between the length calculation and `write!`.\n         let generics_len = format!(\"{:#}\", g.print(cx)).len();\n         let mut header_len = \"fn \".len()\n@@ -917,15 +943,15 @@ fn render_assoc_item(\n         w.reserve(header_len + \"<a href=\\\"\\\" class=\\\"fnname\\\">{\".len() + \"</a>\".len());\n         write!(\n             w,\n-            \"{}{}{}{}{}{}{}fn <a href=\\\"{href}\\\" class=\\\"fnname\\\">{name}</a>\\\n+            \"{indent}{vis}{constness}{asyncness}{unsafety}{defaultness}{abi}fn <a href=\\\"{href}\\\" class=\\\"fnname\\\">{name}</a>\\\n              {generics}{decl}{notable_traits}{where_clause}\",\n-            indent_str,\n-            vis,\n-            constness,\n-            asyncness,\n-            unsafety,\n-            defaultness,\n-            abi,\n+            indent = indent_str,\n+            vis = vis,\n+            constness = constness,\n+            asyncness = asyncness,\n+            unsafety = unsafety,\n+            defaultness = defaultness,\n+            abi = abi,\n             href = href,\n             name = name,\n             generics = g.print(cx),\n@@ -1583,7 +1609,7 @@ fn render_rightside(\n     render_stability_since_raw(\n         w,\n         item.stable_since(tcx).as_deref(),\n-        item.const_stable_since(tcx).as_deref(),\n+        item.const_stability(tcx),\n         containing_item.stable_since(tcx).as_deref(),\n         containing_item.const_stable_since(tcx).as_deref(),\n     );"}, {"sha": "0174bfec32d7ea01abf6bf97b7cd602e83580016", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -22,7 +22,9 @@ use crate::clean::{self, GetDefId};\n use crate::formats::item_type::ItemType;\n use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n-use crate::html::format::{print_abi_with_space, print_where_clause, Buffer, PrintWithSpace};\n+use crate::html::format::{\n+    print_abi_with_space, print_constness_with_space, print_where_clause, Buffer, PrintWithSpace,\n+};\n use crate::html::highlight;\n use crate::html::layout::Page;\n use crate::html::markdown::MarkdownSummaryLine;\n@@ -94,7 +96,7 @@ pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer,\n     render_stability_since_raw(\n         buf,\n         item.stable_since(cx.tcx()).as_deref(),\n-        item.const_stable_since(cx.tcx()).as_deref(),\n+        item.const_stability(cx.tcx()),\n         None,\n         None,\n     );\n@@ -430,29 +432,36 @@ fn extra_info_tags(item: &clean::Item, parent: &clean::Item, tcx: TyCtxt<'_>) ->\n }\n \n fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::Function) {\n-    let header_len = format!(\n-        \"{}{}{}{}{:#}fn {}{:#}\",\n-        it.visibility.print_with_space(it.def_id, cx),\n-        f.header.constness.print_with_space(),\n-        f.header.asyncness.print_with_space(),\n-        f.header.unsafety.print_with_space(),\n-        print_abi_with_space(f.header.abi),\n-        it.name.as_ref().unwrap(),\n-        f.generics.print(cx),\n-    )\n-    .len();\n+    let vis = it.visibility.print_with_space(it.def_id, cx).to_string();\n+    let constness = print_constness_with_space(&f.header.constness, it.const_stability(cx.tcx()));\n+    let asyncness = f.header.asyncness.print_with_space();\n+    let unsafety = f.header.unsafety.print_with_space();\n+    let abi = print_abi_with_space(f.header.abi).to_string();\n+    let name = it.name.as_ref().unwrap();\n+\n+    let generics_len = format!(\"{:#}\", f.generics.print(cx)).len();\n+    let header_len = \"fn \".len()\n+        + vis.len()\n+        + constness.len()\n+        + asyncness.len()\n+        + unsafety.len()\n+        + abi.len()\n+        + name.as_str().len()\n+        + generics_len;\n+\n     w.write_str(\"<pre class=\\\"rust fn\\\">\");\n     render_attributes_in_pre(w, it, \"\");\n+    w.reserve(header_len);\n     write!(\n         w,\n         \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n          {name}{generics}{decl}{notable_traits}{where_clause}</pre>\",\n-        vis = it.visibility.print_with_space(it.def_id, cx),\n-        constness = f.header.constness.print_with_space(),\n-        asyncness = f.header.asyncness.print_with_space(),\n-        unsafety = f.header.unsafety.print_with_space(),\n-        abi = print_abi_with_space(f.header.abi),\n-        name = it.name.as_ref().unwrap(),\n+        vis = vis,\n+        constness = constness,\n+        asyncness = asyncness,\n+        unsafety = unsafety,\n+        abi = abi,\n+        name = name,\n         generics = f.generics.print(cx),\n         where_clause = print_where_clause(&f.generics, cx, 0, true),\n         decl = f.decl.full_print(header_len, 0, f.header.asyncness, cx),\n@@ -1291,7 +1300,7 @@ fn render_stability_since(\n     render_stability_since_raw(\n         w,\n         item.stable_since(tcx).as_deref(),\n-        item.const_stable_since(tcx).as_deref(),\n+        item.const_stability(tcx),\n         containing_item.stable_since(tcx).as_deref(),\n         containing_item.const_stable_since(tcx).as_deref(),\n     )"}, {"sha": "ff9afab064a281140f6971a6529c245a9a6ef7e3", "filename": "src/librustdoc/html/static/FiraSans-LICENSE.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Flibrustdoc%2Fhtml%2Fstatic%2FFiraSans-LICENSE.txt", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Flibrustdoc%2Fhtml%2Fstatic%2FFiraSans-LICENSE.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FFiraSans-LICENSE.txt?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -1,5 +1,5 @@\n Digitized data copyright (c) 2012-2015, The Mozilla Foundation and Telefonica S.A.\n-with Reserved Font Name < Fira >, \n+with Reserved Font Name < Fira >,\n \n This Font Software is licensed under the SIL Open Font License, Version 1.1.\n This license is copied below, and is also available with a FAQ at:\n@@ -19,7 +19,7 @@ with others.\n \n The OFL allows the licensed fonts to be used, studied, modified and\n redistributed freely as long as they are not sold by themselves. The\n-fonts, including any derivative works, can be bundled, embedded, \n+fonts, including any derivative works, can be bundled, embedded,\n redistributed and/or sold with any software provided that any reserved\n names are not used by derivative works. The fonts and derivatives,\n however, cannot be released under any other type of license. The"}, {"sha": "8c995b9426bbbec12dbae23ef631fc420387d4e4", "filename": "src/test/rustdoc/const-display.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftest%2Frustdoc%2Fconst-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftest%2Frustdoc%2Fconst-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-display.rs?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -7,12 +7,20 @@\n #![feature(foo, foo2)]\n #![feature(staged_api)]\n \n-// @has 'foo/fn.foo.html' '//pre' 'pub unsafe fn foo() -> u32'\n+// @has 'foo/fn.foo.html' '//pre' 'pub fn foo() -> u32'\n+// @has - '//span[@class=\"since\"]' '1.0.0 (const: unstable)'\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n-pub const unsafe fn foo() -> u32 { 42 }\n+pub const fn foo() -> u32 { 42 }\n+\n+// @has 'foo/fn.foo_unsafe.html' '//pre' 'pub unsafe fn foo_unsafe() -> u32'\n+// @has - '//span[@class=\"since\"]' '1.0.0 (const: unstable)'\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n+pub const unsafe fn foo_unsafe() -> u32 { 42 }\n \n // @has 'foo/fn.foo2.html' '//pre' 'pub const fn foo2() -> u32'\n+// @!has - '//span[@class=\"since\"]'\n #[unstable(feature = \"humans\", issue = \"none\")]\n pub const fn foo2() -> u32 { 42 }\n \n@@ -22,7 +30,9 @@ pub const fn foo2() -> u32 { 42 }\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const fn bar2() -> u32 { 42 }\n \n+\n // @has 'foo/fn.foo2_gated.html' '//pre' 'pub const unsafe fn foo2_gated() -> u32'\n+// @!has - '//span[@class=\"since\"]'\n #[unstable(feature = \"foo2\", issue = \"none\")]\n pub const unsafe fn foo2_gated() -> u32 { 42 }\n \n@@ -33,15 +43,23 @@ pub const unsafe fn foo2_gated() -> u32 { 42 }\n pub const unsafe fn bar2_gated() -> u32 { 42 }\n \n // @has 'foo/fn.bar_not_gated.html' '//pre' 'pub const unsafe fn bar_not_gated() -> u32'\n+// @!has - '//span[@class=\"since\"]'\n pub const unsafe fn bar_not_gated() -> u32 { 42 }\n \n pub struct Foo;\n \n impl Foo {\n-    // @has 'foo/struct.Foo.html' '//div[@id=\"method.gated\"]/code' 'pub unsafe fn gated() -> u32'\n+    // @has 'foo/struct.Foo.html' '//div[@id=\"method.gated\"]/code' 'pub fn gated() -> u32'\n+    // @has - '//span[@class=\"since\"]' '1.0.0 (const: unstable)'\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n+    pub const fn gated() -> u32 { 42 }\n+\n+    // @has 'foo/struct.Foo.html' '//div[@id=\"method.gated_unsafe\"]/code' 'pub unsafe fn gated_unsafe() -> u32'\n+    // @has - '//span[@class=\"since\"]' '1.0.0 (const: unstable)'\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n-    pub const unsafe fn gated() -> u32 { 42 }\n+    pub const unsafe fn gated_unsafe() -> u32 { 42 }\n \n     // @has 'foo/struct.Foo.html' '//div[@id=\"method.stable_impl\"]/code' 'pub const fn stable_impl() -> u32'\n     // @has - '//span[@class=\"since\"]' '1.0.0 (const: 1.2.0)'"}, {"sha": "f4e81a6be2a8906b4607abb2bc817b4836cc6faf", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.fixed", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -2,13 +2,22 @@\n \n #![deny(or_patterns_back_compat)]\n #![allow(unused_macros)]\n-macro_rules! foo { ($x:pat_param | $y:pat) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-macro_rules! bar { ($($x:pat_param)+ | $($y:pat)+) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+\n+macro_rules! foo { ($x:pat_param | $y:pat) => {} }\n+//~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+//~| WARN this was previously accepted\n+macro_rules! bar { ($($x:pat_param)+ | $($y:pat)+) => {} }\n+//~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+//~| WARN this was previously accepted\n macro_rules! baz { ($x:pat_param | $y:pat_param) => {} } // should be ok\n macro_rules! qux { ($x:pat_param | $y:pat) => {} } // should be ok\n-macro_rules! ogg { ($x:pat_param | $y:pat_param) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+macro_rules! ogg { ($x:pat_param | $y:pat_param) => {} }\n+//~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+//~| WARN this was previously accepted\n macro_rules! match_any {\n-    ( $expr:expr , $( $( $pat:pat_param )|+ => $expr_arm:expr ),+ ) => { //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+    ( $expr:expr , $( $( $pat:pat_param )|+ => $expr_arm:expr ),+ ) => {\n+        //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+        //~| WARN this was previously accepted\n         match $expr {\n             $(\n                 $( $pat => $expr_arm, )+"}, {"sha": "49affdd38da9d79e4ac65db131ccbef38f255fd4", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -2,13 +2,22 @@\n \n #![deny(or_patterns_back_compat)]\n #![allow(unused_macros)]\n-macro_rules! foo { ($x:pat | $y:pat) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+\n+macro_rules! foo { ($x:pat | $y:pat) => {} }\n+//~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+//~| WARN this was previously accepted\n+macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} }\n+//~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+//~| WARN this was previously accepted\n macro_rules! baz { ($x:pat_param | $y:pat_param) => {} } // should be ok\n macro_rules! qux { ($x:pat_param | $y:pat) => {} } // should be ok\n-macro_rules! ogg { ($x:pat | $y:pat_param) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+macro_rules! ogg { ($x:pat | $y:pat_param) => {} }\n+//~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+//~| WARN this was previously accepted\n macro_rules! match_any {\n-    ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => { //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+    ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => {\n+        //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+        //~| WARN this was previously accepted\n         match $expr {\n             $(\n                 $( $pat => $expr_arm, )+"}, {"sha": "62687eb36b89e7984bc62cca630d88984f97dccf", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -1,5 +1,5 @@\n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-  --> $DIR/macro-or-patterns-back-compat.rs:5:21\n+  --> $DIR/macro-or-patterns-back-compat.rs:6:21\n    |\n LL | macro_rules! foo { ($x:pat | $y:pat) => {} }\n    |                     ^^^^^^ help: use pat_param to preserve semantics: `$x:pat_param`\n@@ -9,24 +9,35 @@ note: the lint level is defined here\n    |\n LL | #![deny(or_patterns_back_compat)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #84869 <https://github.com/rust-lang/rust/issues/84869>\n \n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-  --> $DIR/macro-or-patterns-back-compat.rs:6:23\n+  --> $DIR/macro-or-patterns-back-compat.rs:9:23\n    |\n LL | macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} }\n    |                       ^^^^^^ help: use pat_param to preserve semantics: `$x:pat_param`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #84869 <https://github.com/rust-lang/rust/issues/84869>\n \n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-  --> $DIR/macro-or-patterns-back-compat.rs:9:21\n+  --> $DIR/macro-or-patterns-back-compat.rs:14:21\n    |\n LL | macro_rules! ogg { ($x:pat | $y:pat_param) => {} }\n    |                     ^^^^^^ help: use pat_param to preserve semantics: `$x:pat_param`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #84869 <https://github.com/rust-lang/rust/issues/84869>\n \n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-  --> $DIR/macro-or-patterns-back-compat.rs:11:26\n+  --> $DIR/macro-or-patterns-back-compat.rs:18:26\n    |\n LL |     ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => {\n    |                          ^^^^^^^^ help: use pat_param to preserve semantics: `$pat:pat_param`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #84869 <https://github.com/rust-lang/rust/issues/84869>\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c72a2aef4900f6f08d224c581644ee8c3d9e56a9", "filename": "src/test/ui/traits/issue-78632.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftest%2Fui%2Ftraits%2Fissue-78632.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftest%2Fui%2Ftraits%2Fissue-78632.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-78632.rs?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -0,0 +1,59 @@\n+// check-pass\n+//\n+// Regression test for issue #78632\n+\n+#![crate_type = \"lib\"]\n+\n+pub trait Corge<T> {\n+    type Fred;\n+}\n+\n+impl Corge<u8> for () {\n+    type Fred = u32;\n+}\n+\n+pub trait Waldo {\n+    type Quax;\n+}\n+\n+impl Waldo for u32 {\n+    type Quax = u8;\n+}\n+\n+pub trait Grault\n+where\n+    (): Corge<Self::Thud>,\n+{\n+    type Thud;\n+    fn bar(_: <() as Corge<Self::Thud>>::Fred) {}\n+}\n+\n+impl<T> Grault for T\n+where\n+    T: Waldo,\n+    (): Corge<T::Quax>,\n+    <() as Corge<T::Quax>>::Fred: Waldo,\n+{\n+    type Thud = u8;\n+}\n+\n+pub trait Plugh<I> {\n+    fn baz();\n+}\n+\n+#[derive(Copy, Clone, Debug)]\n+pub struct Qiz<T> {\n+    foo: T,\n+}\n+\n+impl<T> Plugh<<() as Corge<T::Thud>>::Fred> for Qiz<T>\n+where\n+    T: Grault,\n+    (): Corge<T::Thud>,\n+{\n+    fn baz() {}\n+}\n+\n+pub fn test() {\n+    <Qiz<u32> as Plugh<u32>>::baz();\n+}"}, {"sha": "b09833f3ed01435b83f9d30b32c25379dd70d0a0", "filename": "src/test/ui/type-alias-impl-trait/issue-85113.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.rs?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -0,0 +1,22 @@\n+#![feature(min_type_alias_impl_trait)]\n+#![feature(impl_trait_in_bindings)]\n+#![allow(incomplete_features)]\n+\n+type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n+//~^ ERROR: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+//~| ERROR: the type `&'<empty> str` does not fulfill the required lifetime\n+//~| ERROR: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+\n+trait Output<'a> {}\n+\n+impl<'a> Output<'a> for &'a str {}\n+\n+fn cool_fn<'a>(arg: &'a str) -> OpaqueOutputImpl<'a> {\n+    let out: OpaqueOutputImpl<'a> = arg;\n+    arg\n+}\n+\n+fn main() {\n+    let s = String::from(\"wassup\");\n+    cool_fn(&s);\n+}"}, {"sha": "361d66866ef8b0bece6e1a3a5f7d25e51e552c50", "filename": "src/test/ui/type-alias-impl-trait/issue-85113.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.stderr?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -0,0 +1,48 @@\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/issue-85113.rs:5:29\n+   |\n+LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n+   |                             ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: hidden type `&'<empty> str` captures lifetime smaller than the function body\n+  --> $DIR/issue-85113.rs:5:29\n+   |\n+LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n+   |                             ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0477]: the type `&'<empty> str` does not fulfill the required lifetime\n+  --> $DIR/issue-85113.rs:5:29\n+   |\n+LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n+   |                             ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: type must outlive the lifetime `'a` as defined on the item at 5:23\n+  --> $DIR/issue-85113.rs:5:23\n+   |\n+LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n+   |                       ^^\n+\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/issue-85113.rs:5:29\n+   |\n+LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n+   |                             ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: first, the lifetime cannot outlive the empty lifetime...\n+note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the item at 5:23...\n+  --> $DIR/issue-85113.rs:5:23\n+   |\n+LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n+   |                       ^^\n+note: ...so that the types are compatible\n+  --> $DIR/issue-85113.rs:5:29\n+   |\n+LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n+   |                             ^^^^^^^^^^^^^^^^^^^^\n+   = note: expected `Output<'a>`\n+              found `Output<'_>`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0477, E0495, E0700.\n+For more information about an error, try `rustc --explain E0477`."}, {"sha": "7d7b7c811738e897ac7aa0a61d95908ca1b49368", "filename": "src/tools/clippy/CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Fclippy%2FCONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Fclippy%2FCONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCONTRIBUTING.md?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -342,7 +342,7 @@ We have prioritization labels and a sync-blocker label, which are described belo\n - [P-low][p-low]: Requires attention (fix/response/evaluation) by a team member but isn't urgent.\n - [P-medium][p-medium]: Should be addressed by a team member until the next sync.\n - [P-high][p-high]: Should be immediately addressed and will require an out-of-cycle sync or a backport.\n-- [L-sync-blocker][l-sync-blocker]: An issue that \"blocks\" a sync. \n+- [L-sync-blocker][l-sync-blocker]: An issue that \"blocks\" a sync.\n Or rather: before the sync this should be addressed,\n e.g. by removing a lint again, so it doesn't hit beta/stable.\n "}, {"sha": "bd322cc80702acc0ee8c2498fd71f903b81dfdf9", "filename": "src/tools/clippy/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Fclippy%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Fclippy%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FREADME.md?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -95,7 +95,7 @@ As with `cargo check`, this includes dependencies that are members of the worksp\n If you want to run Clippy **only** on the given crate, use the `--no-deps` option like this:\n \n ```terminal\n-cargo clippy -p example -- --no-deps \n+cargo clippy -p example -- --no-deps\n ```\n \n ### As a rustc replacement (`clippy-driver`)"}, {"sha": "90c034bd02a9e8493b93718f178de160cd60857e", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -178,7 +178,7 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (Path(lq, lp), Path(rq, rp)) => both(lq, rq, |l, r| eq_qself(l, r)) && eq_path(lp, rp),\n         (MacCall(l), MacCall(r)) => eq_mac_call(l, r),\n         (Struct(lse), Struct(rse)) => {\n-            eq_maybe_qself(&lse.qself, &rse.qself) \n+            eq_maybe_qself(&lse.qself, &rse.qself)\n                 && eq_path(&lse.path, &rse.path)\n                 && eq_struct_rest(&lse.rest, &rse.rest)\n                 && unordered_over(&lse.fields, &rse.fields, |l, r| eq_field(l, r))"}, {"sha": "ed3a2fff83f168e7825b1c4e2fce3dee7cf6b820", "filename": "src/tools/clippy/doc/basics.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Fclippy%2Fdoc%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Fclippy%2Fdoc%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fdoc%2Fbasics.md?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -96,9 +96,9 @@ cargo dev ide_setup\n \n ## lintcheck\n `cargo lintcheck` will build and run clippy on a fixed set of crates and generate a log of the results.  \n-You can `git diff` the updated log against its previous version and \n+You can `git diff` the updated log against its previous version and\n see what impact your lint made on a small set of crates.  \n-If you add a new lint, please audit the resulting warnings and make sure \n+If you add a new lint, please audit the resulting warnings and make sure\n there are no false positives and that the suggestions are valid.\n \n Refer to the tools [README] for more details."}, {"sha": "a61070d8a80efc11fb1c3aae004b5c14d1fc28b8", "filename": "src/tools/clippy/lintcheck/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Fclippy%2Flintcheck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Fclippy%2Flintcheck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Flintcheck%2FREADME.md?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -73,5 +73,5 @@ You can run `./lintcheck/target/debug/lintcheck --fix` which will run Clippy wit\n print a warning if Clippys suggestions fail to apply (if the resulting code does not build).  \n This lets us spot bad suggestions or false positives automatically in some cases.  \n \n-Please note that the target dir should be cleaned afterwards since clippy will modify \n+Please note that the target dir should be cleaned afterwards since clippy will modify\n the downloaded sources which can lead to unexpected results when running lintcheck again afterwards."}, {"sha": "0174d3ffcbc2af59caf2dae5668fadd27b737161", "filename": "src/tools/clippy/util/gh-pages/index.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Findex.html?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -363,7 +363,7 @@ <h4 class=\"list-group-item-heading\">\n \n             $scope.bySearch = function (lint, index, array) {\n                 let searchStr = $scope.search;\n-                // It can be `null` I haven't missed this value \n+                // It can be `null` I haven't missed this value\n                 if (searchStr == null || searchStr.length < 3) {\n                     return true;\n                 }\n@@ -375,7 +375,7 @@ <h4 class=\"list-group-item-heading\">\n                 }\n \n                 // Search the description\n-                // The use of `for`-loops instead of `foreach` enables us to return early \n+                // The use of `for`-loops instead of `foreach` enables us to return early\n                 let terms = searchStr.split(\" \");\n                 for (index = 0; index < terms.length; index++) {\n                     if (lint.id.indexOf(terms[index]) !== -1) {\n@@ -463,7 +463,7 @@ <h4 class=\"list-group-item-heading\">\n \n         let children = themeMenu.children;\n         for (let index = 0; index < children.length; index++) {\n-            let child = children[index]; \n+            let child = children[index];\n             child.addEventListener(\"click\", function(e) {\n                 setTheme(child.id, true);\n             });\n@@ -476,7 +476,7 @@ <h4 class=\"list-group-item-heading\">\n         let enableHighlight = false;\n         let enableNight = false;\n         let enableAyu = false;\n-        \n+\n         if (theme == \"ayu\") {\n             enableAyu = true;\n         } else if (theme == \"coal\" || theme == \"navy\") {"}, {"sha": "68354b6ceaf25aa1a973050c358bac6baaf823fe", "filename": "src/tools/rustfmt/CHANGELOG.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2FCHANGELOG.md?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -176,7 +176,7 @@ https://rust-lang.github.io/rustfmt/?version=v1.4.33&search=#imports_granularity\n \n ### Changed\n \n-- Original comment indentation for trailing comments within an `if` is now taken into account when determining the indentation level to use for the trailing comment in formatted code. This does not modify any existing code formatted with rustfmt; it simply gives the programmer discretion to specify whether the comment is associated to the `else` block, or if the trailing comment is just a member of the `if` block. ([#1575](https://github.com/rust-lang/rustfmt/issues/1575), [#4120](https://github.com/rust-lang/rustfmt/issues/4120), [#4506](https://github.com/rust-lang/rustfmt/issues/4506)) \n+- Original comment indentation for trailing comments within an `if` is now taken into account when determining the indentation level to use for the trailing comment in formatted code. This does not modify any existing code formatted with rustfmt; it simply gives the programmer discretion to specify whether the comment is associated to the `else` block, or if the trailing comment is just a member of the `if` block. ([#1575](https://github.com/rust-lang/rustfmt/issues/1575), [#4120](https://github.com/rust-lang/rustfmt/issues/4120), [#4506](https://github.com/rust-lang/rustfmt/issues/4506))\n \n In this example the `// else comment` refers to the `else`:\n ```rust\n@@ -213,7 +213,7 @@ if toks.eat_token(Token::Word(\"modify\"))? && toks.eat_token(Token::Word(\"labels\"\n \n ### Fixed\n - Formatting of empty blocks with attributes which only contained comments is no longer butchered.([#4475](https://github.com/rust-lang/rustfmt/issues/4475), [#4467](https://github.com/rust-lang/rustfmt/issues/4467), [#4452](https://github.com/rust-lang/rustfmt/issues/4452#issuecomment-705886282), [#4522](https://github.com/rust-lang/rustfmt/issues/4522))\n-- Indentation of trailing comments in non-empty extern blocks is now correct. ([#4120](https://github.com/rust-lang/rustfmt/issues/4120#issuecomment-696491872)) \n+- Indentation of trailing comments in non-empty extern blocks is now correct. ([#4120](https://github.com/rust-lang/rustfmt/issues/4120#issuecomment-696491872))\n \n ### Install/Download Options\n - **crates.io package** - *pending*\n@@ -297,7 +297,7 @@ if toks.eat_token(Token::Word(\"modify\"))? && toks.eat_token(Token::Word(\"labels\"\n - Fix aligning comments of different group\n - Fix flattening imports with a single `self`.\n - Fix removing attributes on function parameters.\n-- Fix removing `impl` keyword from opaque type. \n+- Fix removing `impl` keyword from opaque type.\n \n ## [1.4.8] 2019-09-08\n \n@@ -329,7 +329,7 @@ if toks.eat_token(Token::Word(\"modify\"))? && toks.eat_token(Token::Word(\"labels\"\n \n - Add `--message-format` command line option to `cargo-fmt`.\n - Add `-l,--files-with-diff` command line option to `rustfmt`.\n-- Add `json` emit mode. \n+- Add `json` emit mode.\n \n ### Fixed\n \n@@ -380,7 +380,7 @@ if toks.eat_token(Token::Word(\"modify\"))? && toks.eat_token(Token::Word(\"labels\"\n \n ### Added\n \n-- Add new attribute `rustfmt::skip::attributes` to prevent rustfmt \n+- Add new attribute `rustfmt::skip::attributes` to prevent rustfmt\n from formatting an attribute #3665\n \n ### Changed"}, {"sha": "9daa70653797657d6488a952e1f56f3c7f4d3411", "filename": "src/tools/rustfmt/Configurations.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2FConfigurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2FConfigurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2FConfigurations.md?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -17,27 +17,27 @@ To enable unstable options, set `unstable_features = true` in `rustfmt.toml` or\n \n Below you find a detailed visual guide on all the supported configuration options of rustfmt:\n \n-## `array_width` \n+## `array_width`\n \n Maximum width of an array literal before falling back to vertical formatting.\n \n - **Default value**: `60`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `array_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `array_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n-## `attr_fn_like_width` \n+## `attr_fn_like_width`\n \n Maximum width of the args of a function-like attributes before falling back to vertical formatting.\n \n - **Default value**: `70`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `attr_fn_like_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `attr_fn_like_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n@@ -295,15 +295,15 @@ where\n }\n ```\n \n-## `chain_width` \n+## `chain_width`\n \n Maximum width of a chain to fit on one line.\n \n - **Default value**: `60`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `chain_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `chain_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n@@ -751,15 +751,15 @@ trait Lorem {\n }\n ```\n \n-## `fn_call_width` \n+## `fn_call_width`\n \n Maximum width of the args of a function call before falling back to vertical formatting.\n \n - **Default value**: `60`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `fn_call_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `fn_call_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n@@ -2124,15 +2124,15 @@ Don't reformat out of line modules\n - **Possible values**: `true`, `false`\n - **Stable**: No (tracking issue: #3389)\n \n-## `single_line_if_else_max_width` \n+## `single_line_if_else_max_width`\n \n Maximum line length for single line if-else expressions. A value of `0` (zero) results in if-else expressions always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n \n - **Default value**: `50`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `single_line_if_else_max_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `single_line_if_else_max_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n@@ -2313,27 +2313,27 @@ fn main() {\n \n See also: [`indent_style`](#indent_style).\n \n-## `struct_lit_width` \n+## `struct_lit_width`\n \n Maximum width in the body of a struct literal before falling back to vertical formatting. A value of `0` (zero) results in struct literals always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n \n - **Default value**: `18`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `struct_lit_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `struct_lit_width` will take precedence.\n \n See also [`max_width`](#max_width), [`use_small_heuristics`](#use_small_heuristics), and [`struct_lit_single_line`](#struct_lit_single_line)\n \n-## `struct_variant_width` \n+## `struct_variant_width`\n \n Maximum width in the body of a struct variant before falling back to vertical formatting. A value of `0` (zero) results in struct literals always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n \n - **Default value**: `35`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `struct_variant_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `struct_variant_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n@@ -2530,7 +2530,7 @@ fn main() {\n \n This option can be used to simplify the management and bulk updates of the granular width configuration settings ([`fn_call_width`](#fn_call_width), [`attr_fn_like_width`](#attr_fn_like_width), [`struct_lit_width`](#struct_lit_width), [`struct_variant_width`](#struct_variant_width), [`array_width`](#array_width), [`chain_width`](#chain_width), [`single_line_if_else_max_width`](#single_line_if_else_max_width)), that respectively control when formatted constructs are multi-lined/vertical based on width.\n \n-Note that explicitly provided values for the width configuration settings take precedence and override the calculated values determined by `use_small_heuristics`. \n+Note that explicitly provided values for the width configuration settings take precedence and override the calculated values determined by `use_small_heuristics`.\n \n - **Default value**: `\"Default\"`\n - **Possible values**: `\"Default\"`, `\"Off\"`, `\"Max\"`\n@@ -2595,7 +2595,7 @@ fn main() {\n ```\n \n #### `Off`:\n-When `use_small_heuristics` is set to `Off`, the granular width settings are functionally disabled and ignored. See the documentation for the respective width config options for specifics. \n+When `use_small_heuristics` is set to `Off`, the granular width settings are functionally disabled and ignored. See the documentation for the respective width config options for specifics.\n \n ```rust\n enum Lorem {"}, {"sha": "1b77dad11f0fe9b397de1f4ddc28f1452d4dd7a2", "filename": "src/tools/rustfmt/Contributing.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2FContributing.md", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2FContributing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2FContributing.md?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -38,7 +38,7 @@ colourised diff will be printed so that the offending line(s) can quickly be\n identified.\n \n Without explicit settings, the tests will be run using rustfmt's default\n-configuration. It is possible to run a test using non-default settings in several \n+configuration. It is possible to run a test using non-default settings in several\n ways. Firstly, you can include configuration parameters in comments at the top\n of the file. For example: to use 3 spaces per tab, start your test with\n `// rustfmt-tab_spaces: 3`. Just remember that the comment is part of the input,"}, {"sha": "7a4dcf8773b61a85b7fc6fcc6dd08c9a91b55a00", "filename": "src/tools/rustfmt/Design.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2FDesign.md", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2FDesign.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2FDesign.md?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -150,8 +150,8 @@ for its configuration.\n \n Our visitor keeps track of the desired current indent due to blocks (\n `block_indent`). Each `visit_*` method reformats code according to this indent,\n-`config.comment_width()` and `config.max_width()`. Most reformatting that is done \n-in the `visit_*` methods is a bit hacky and is meant to be temporary until it can \n+`config.comment_width()` and `config.max_width()`. Most reformatting that is done\n+in the `visit_*` methods is a bit hacky and is meant to be temporary until it can\n be done properly.\n \n There are a bunch of methods called `rewrite_*`. They do the bulk of the"}, {"sha": "500a9f9a37c8cb58f4f718ae1a829a3a6a1b0f3e", "filename": "src/tools/rustfmt/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2FREADME.md?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -180,13 +180,13 @@ needs to be specified in `rustfmt.toml`, e.g., with `edition = \"2018\"`.\n \n * For things you do not want rustfmt to mangle, use `#[rustfmt::skip]`\n * To prevent rustfmt from formatting a macro or an attribute,\n-  use `#[rustfmt::skip::macros(target_macro_name)]` or \n+  use `#[rustfmt::skip::macros(target_macro_name)]` or\n   `#[rustfmt::skip::attributes(target_attribute_name)]`\n \n   Example:\n \n     ```rust\n-    #![rustfmt::skip::attributes(custom_attribute)]   \n+    #![rustfmt::skip::attributes(custom_attribute)]\n \n     #[custom_attribute(formatting , here , should , be , Skipped)]\n     #[rustfmt::skip::macros(html)]"}, {"sha": "0269e3ee4af931437a9e6c5d9c81bd172c1fb193", "filename": "src/tools/rustfmt/ci/integration.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Fci%2Fintegration.sh", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Fci%2Fintegration.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fci%2Fintegration.sh?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -15,7 +15,7 @@ set -ex\n # it again.\n #\n #which cargo-fmt || cargo install --force\n-CFG_RELEASE=nightly CFG_RELEASE_CHANNEL=nightly cargo install --path . --force \n+CFG_RELEASE=nightly CFG_RELEASE_CHANNEL=nightly cargo install --path . --force\n \n echo \"Integration tests for: ${INTEGRATION}\"\n cargo fmt -- --version"}, {"sha": "56d1917e2b61b211eb8ae3112f07e93ea1cdf0c9", "filename": "src/tools/rustfmt/docs/index.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Fdocs%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Fdocs%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fdocs%2Findex.html?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -85,7 +85,7 @@\n                 outputHtml() {\n                   const ast = this.configurationDescriptions\n                                   .filter(({ head, text, stable }) => {\n-                                    \n+\n                                     if (\n                                       text.includes(this.searchCondition) === false &&\n                                       head.includes(this.searchCondition) === false\n@@ -105,7 +105,7 @@\n               },\n               created: async function() {\n                 const res = await axios.get(ConfigurationMdUrl);\n-                const { \n+                const {\n                   about,\n                   configurationAbout,\n                   configurationDescriptions\n@@ -144,7 +144,7 @@\n                   const lastIndex = stack.length - 1;\n                   stack[lastIndex].push(next);\n                   return stack;\n-                }, \n+                },\n                 [[]]);\n               });\n             }\n@@ -179,7 +179,7 @@\n                 configurationAbout, ...configurationDescriptions\n               ] = configurations;\n               configurationAbout.value.links = {};\n-              \n+\n               return {\n                 about,\n                 configurationAbout: configurationAbout.value,"}, {"sha": "5de0575b5cd66a56a466466608cdf47b9b8600a9", "filename": "src/tools/rustfmt/src/modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -318,7 +318,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             self.directory = directory;\n         }\n         match (sub_mod.ast_mod_kind, sub_mod.items) {\n-            (Some(Cow::Borrowed(ast::ModKind::Loaded(items, ast::Inline::No, _))), _) => {\n+            (Some(Cow::Borrowed(ast::ModKind::Loaded(items, _, _))), _) => {\n                 self.visit_mod_from_ast(&items)\n             }\n             (Some(Cow::Owned(..)), Cow::Owned(items)) => self.visit_mod_outside_ast(items),"}, {"sha": "cb52346a13a41c0ad9c94991925d7f53bfc2974a", "filename": "src/tools/rustfmt/src/test/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod.rs?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -16,6 +16,7 @@ use crate::source_file;\n use crate::{is_nightly_channel, FormatReport, FormatReportFormatterBuilder, Input, Session};\n \n mod configuration_snippet;\n+mod mod_resolver;\n mod parser;\n \n const DIFF_CONTEXT_SIZE: usize = 3;"}, {"sha": "e0b55e3efb2c4f5714f09abad473ff7b498aaa96", "filename": "src/tools/rustfmt/src/test/mod_resolver.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod_resolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod_resolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod_resolver.rs?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -0,0 +1,25 @@\n+use std::io;\n+use std::path::PathBuf;\n+\n+use super::read_config;\n+\n+use crate::{FileName, Input, Session};\n+\n+#[test]\n+fn nested_out_of_line_mods_loaded() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/4874\n+    let filename = \"tests/mod-resolver/issue-4874/main.rs\";\n+    let input_file = PathBuf::from(filename);\n+    let config = read_config(&input_file);\n+    let mut session = Session::<io::Stdout>::new(config, None);\n+    let report = session\n+        .format(Input::File(filename.into()))\n+        .expect(\"Should not have had any execution errors\");\n+    let errors_by_file = &report.internal.borrow().0;\n+    assert!(errors_by_file.contains_key(&FileName::Real(PathBuf::from(\n+        \"tests/mod-resolver/issue-4874/bar/baz.rs\",\n+    ))));\n+    assert!(errors_by_file.contains_key(&FileName::Real(PathBuf::from(\n+        \"tests/mod-resolver/issue-4874/foo/qux.rs\",\n+    ))));\n+}"}, {"sha": "d31b675ea260dbe8ac393d7623b2fb4bd6cfa160", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-4874/bar/baz.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-4874%2Fbar%2Fbaz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-4874%2Fbar%2Fbaz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-4874%2Fbar%2Fbaz.rs?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -0,0 +1,5 @@\n+fn \n+     fail_fmt_check\n+   (\n+\n+   ) {}\n\\ No newline at end of file"}, {"sha": "246d847869a126e1fd790142cf0fb2d9d54e91a3", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-4874/foo.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-4874%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-4874%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-4874%2Ffoo.rs?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -0,0 +1 @@\n+mod qux;\n\\ No newline at end of file"}, {"sha": "d8bb610a64db1837b3104c650047281ea0c630a2", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-4874/foo/qux.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-4874%2Ffoo%2Fqux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-4874%2Ffoo%2Fqux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-4874%2Ffoo%2Fqux.rs?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -0,0 +1,5 @@\n+ fn \n+ badly_formatted\n+    (\n+\n+    ) {}\n\\ No newline at end of file"}, {"sha": "3609415b1468b3a7b8266bb711a894c22e5c0b92", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-4874/main.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-4874%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-4874%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-4874%2Fmain.rs?ref=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+\n+mod foo;\n+mod bar {\n+    mod baz;\n+}\n\\ No newline at end of file"}]}