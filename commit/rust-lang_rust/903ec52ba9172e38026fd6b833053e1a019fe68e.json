{"sha": "903ec52ba9172e38026fd6b833053e1a019fe68e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwM2VjNTJiYTkxNzJlMzgwMjZmZDZiODMzMDUzZTFhMDE5ZmU2OGU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-31T11:08:22Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-09-20T17:08:00Z"}, "message": "rustc: replace uses of NodeId in Def, other than closures and labels.", "tree": {"sha": "6213a5e0c74394f4c0ceea11234a5ba22493616d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6213a5e0c74394f4c0ceea11234a5ba22493616d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/903ec52ba9172e38026fd6b833053e1a019fe68e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/903ec52ba9172e38026fd6b833053e1a019fe68e", "html_url": "https://github.com/rust-lang/rust/commit/903ec52ba9172e38026fd6b833053e1a019fe68e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/903ec52ba9172e38026fd6b833053e1a019fe68e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc363cb482f92851b48b46402b5b5117627a840e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc363cb482f92851b48b46402b5b5117627a840e", "html_url": "https://github.com/rust-lang/rust/commit/fc363cb482f92851b48b46402b5b5117627a840e"}], "stats": {"total": 180, "additions": 83, "deletions": 97}, "files": [{"sha": "b4418ed424ea360ec8f4b5ab185c7f45a701728d", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -16,14 +16,13 @@ use hir;\n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Def {\n     Fn(DefId),\n-    SelfTy(Option<DefId> /* trait */, Option<ast::NodeId> /* impl */),\n+    SelfTy(Option<DefId> /* trait */, Option<DefId> /* impl */),\n     Mod(DefId),\n     ForeignMod(DefId),\n     Static(DefId, bool /* is_mutbl */),\n     Const(DefId),\n     AssociatedConst(DefId),\n-    Local(DefId, // def id of variable\n-             ast::NodeId), // node id of variable\n+    Local(DefId),\n     Variant(DefId /* enum */, DefId /* variant */),\n     Enum(DefId),\n     TyAlias(DefId),\n@@ -32,7 +31,6 @@ pub enum Def {\n     PrimTy(hir::PrimTy),\n     TyParam(DefId),\n     Upvar(DefId,        // def id of closed over local\n-             ast::NodeId,  // node id of closed over local\n              usize,        // index in the freevars list of the closure\n              ast::NodeId), // expr node that creates the closure\n \n@@ -101,30 +99,13 @@ pub struct Export {\n }\n \n impl Def {\n-    pub fn var_id(&self) -> ast::NodeId {\n-        match *self {\n-            Def::Local(_, id) |\n-            Def::Upvar(_, id, ..) => {\n-                id\n-            }\n-\n-            Def::Fn(..) | Def::Mod(..) | Def::ForeignMod(..) | Def::Static(..) |\n-            Def::Variant(..) | Def::Enum(..) | Def::TyAlias(..) | Def::AssociatedTy(..) |\n-            Def::TyParam(..) | Def::Struct(..) | Def::Union(..) | Def::Trait(..) |\n-            Def::Method(..) | Def::Const(..) | Def::AssociatedConst(..) |\n-            Def::PrimTy(..) | Def::Label(..) | Def::SelfTy(..) | Def::Err => {\n-                bug!(\"attempted .var_id() on invalid {:?}\", self)\n-            }\n-        }\n-    }\n-\n     pub fn def_id(&self) -> DefId {\n         match *self {\n             Def::Fn(id) | Def::Mod(id) | Def::ForeignMod(id) | Def::Static(id, _) |\n             Def::Variant(_, id) | Def::Enum(id) | Def::TyAlias(id) | Def::AssociatedTy(_, id) |\n             Def::TyParam(id) | Def::Struct(id) | Def::Union(id) | Def::Trait(id) |\n             Def::Method(id) | Def::Const(id) | Def::AssociatedConst(id) |\n-            Def::Local(id, _) | Def::Upvar(id, ..) => {\n+            Def::Local(id) | Def::Upvar(id, ..) => {\n                 id\n             }\n "}, {"sha": "37b5eac3cceebcec77d9191b99cb08a14b5d01f6", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -1697,7 +1697,7 @@ impl<'a> LoweringContext<'a> {\n \n         let def = {\n             let defs = self.resolver.definitions();\n-            Def::Local(defs.local_def_id(binding), binding)\n+            Def::Local(defs.local_def_id(binding))\n         };\n         self.resolver.record_resolution(expr.id, def);\n \n@@ -1850,7 +1850,7 @@ impl<'a> LoweringContext<'a> {\n             let defs = self.resolver.definitions();\n             let def_path_data = DefPathData::Binding(name.as_str());\n             let def_index = defs.create_def_with_parent(parent_def, pat.id, def_path_data);\n-            Def::Local(DefId::local(def_index), pat.id)\n+            Def::Local(DefId::local(def_index))\n         };\n         self.resolver.record_resolution(pat.id, def);\n "}, {"sha": "ec3fe3903179ac17f7a98b9d0e7b1c233c9c4385", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -1029,7 +1029,8 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n \n         self.tcx().with_freevars(closure_expr.id, |freevars| {\n             for freevar in freevars {\n-                let id_var = freevar.def.var_id();\n+                let def_id = freevar.def.def_id();\n+                let id_var = self.tcx().map.as_local_node_id(def_id).unwrap();\n                 let upvar_id = ty::UpvarId { var_id: id_var,\n                                              closure_expr_id: closure_expr.id };\n                 let upvar_capture = self.mc.infcx.upvar_capture(upvar_id).unwrap();\n@@ -1061,7 +1062,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                         -> mc::McResult<mc::cmt<'tcx>> {\n         // Create the cmt for the variable being borrowed, from the\n         // caller's perspective\n-        let var_id = upvar_def.var_id();\n+        let var_id = self.tcx().map.as_local_node_id(upvar_def.def_id()).unwrap();\n         let var_ty = self.mc.infcx.node_ty(var_id)?;\n         self.mc.cat_def(closure_id, closure_span, var_ty, upvar_def)\n     }"}, {"sha": "db9dd82d492d3193650fd464a0248bd63991511a", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -465,7 +465,8 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n         let mut call_caps = Vec::new();\n         ir.tcx.with_freevars(expr.id, |freevars| {\n             for fv in freevars {\n-                if let Def::Local(_, rv) = fv.def {\n+                if let Def::Local(def_id) = fv.def {\n+                    let rv = ir.tcx.map.as_local_node_id(def_id).unwrap();\n                     let fv_ln = ir.add_live_node(FreeVarNode(fv.span));\n                     call_caps.push(CaptureInfo {ln: fv_ln,\n                                                 var_nid: rv});\n@@ -1270,7 +1271,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn access_path(&mut self, expr: &Expr, succ: LiveNode, acc: u32)\n                    -> LiveNode {\n         match self.ir.tcx.expect_def(expr.id) {\n-          Def::Local(_, nid) => {\n+          Def::Local(def_id) => {\n+            let nid = self.ir.tcx.map.as_local_node_id(def_id).unwrap();\n             let ln = self.live_node(expr.id, expr.span);\n             if acc != 0 {\n                 self.init_from_succ(ln, succ);\n@@ -1529,11 +1531,12 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn check_lvalue(&mut self, expr: &Expr) {\n         match expr.node {\n             hir::ExprPath(..) => {\n-                if let Def::Local(_, nid) = self.ir.tcx.expect_def(expr.id) {\n+                if let Def::Local(def_id) = self.ir.tcx.expect_def(expr.id) {\n                     // Assignment to an immutable variable or argument: only legal\n                     // if there is no later assignment. If this local is actually\n                     // mutable, then check for a reassignment to flag the mutability\n                     // as being used.\n+                    let nid = self.ir.tcx.map.as_local_node_id(def_id).unwrap();\n                     let ln = self.live_node(expr.id, expr.span);\n                     let var = self.variable(nid, expr.span);\n                     self.warn_about_dead_assign(expr.span, expr.id, ln, var);"}, {"sha": "26cc6007ed07a44fdf9a75b287c5036ec9b914a2", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -549,7 +549,8 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n               }))\n           }\n \n-          Def::Upvar(_, var_id, _, fn_node_id) => {\n+          Def::Upvar(def_id, _, fn_node_id) => {\n+              let var_id = self.tcx().map.as_local_node_id(def_id).unwrap();\n               let ty = self.node_ty(fn_node_id)?;\n               match ty.sty {\n                   ty::TyClosure(closure_id, _) => {\n@@ -585,7 +586,8 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n               }\n           }\n \n-          Def::Local(_, vid) => {\n+          Def::Local(def_id) => {\n+            let vid = self.tcx().map.as_local_node_id(def_id).unwrap();\n             Ok(Rc::new(cmt_ {\n                 id: id,\n                 span: span,"}, {"sha": "1ffaf3c0ed5a2c7a25c93104c01309ed3f6c5bec", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -1098,7 +1098,9 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n \n                             tcx.with_freevars(node_id, |freevars| {\n                                 for (freevar, lv) in freevars.iter().zip(lvs) {\n-                                    let var_name = tcx.local_var_name_str(freevar.def.var_id());\n+                                    let def_id = freevar.def.def_id();\n+                                    let var_id = tcx.map.as_local_node_id(def_id).unwrap();\n+                                    let var_name = tcx.local_var_name_str(var_id);\n                                     struct_fmt.field(&var_name, lv);\n                                 }\n                             });"}, {"sha": "1df0cf2d5cdf6b299f5af6c6506644747d432aaa", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -920,7 +920,8 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                     let mut sep = \" \";\n                     tcx.with_freevars(node_id, |freevars| {\n                         for (freevar, upvar_ty) in freevars.iter().zip(substs.upvar_tys) {\n-                            let node_id = freevar.def.var_id();\n+                            let def_id = freevar.def.def_id();\n+                            let node_id = tcx.map.as_local_node_id(def_id).unwrap();\n                             write!(f,\n                                         \"{}{}:{}\",\n                                         sep,"}, {"sha": "ede13aa4dc8b261c3dc8cb8e5c3b9ebed4a2a31b", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -824,7 +824,8 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n               Def::Struct(..) => {\n                   ConstVal::Struct(e.id)\n               }\n-              Def::Local(_, id) => {\n+              Def::Local(def_id) => {\n+                  let id = tcx.map.as_local_node_id(def_id).unwrap();\n                   debug!(\"Def::Local({:?}): {:?}\", id, fn_args);\n                   if let Some(val) = fn_args.and_then(|args| args.get(&id)) {\n                       val.clone()"}, {"sha": "2f845936a6c4e5e5266b31d26c000a4de6b565ed", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -167,7 +167,8 @@ fn encode_side_tables_for_id(ecx: &mut EncodeContext, id: ast::NodeId) {\n             ecx.tag(c::tag_table_upvar_capture_map, |ecx| {\n                 ecx.id(id);\n \n-                let var_id = freevar.def.var_id();\n+                let def_id = freevar.def.def_id();\n+                let var_id = tcx.map.as_local_node_id(def_id).unwrap();\n                 let upvar_id = ty::UpvarId {\n                     var_id: var_id,\n                     closure_expr_id: id"}, {"sha": "23591f05b8774f27d6a61815335a8ca58559f332", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -197,8 +197,9 @@ pub fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     // Gather the upvars of a closure, if any.\n     let upvar_decls: Vec<_> = tcx.with_freevars(fn_id, |freevars| {\n         freevars.iter().map(|fv| {\n+            let var_id = tcx.map.as_local_node_id(fv.def.def_id()).unwrap();\n             let by_ref = tcx.upvar_capture(ty::UpvarId {\n-                var_id: fv.def.var_id(),\n+                var_id: var_id,\n                 closure_expr_id: fn_id\n             }).map_or(false, |capture| match capture {\n                 ty::UpvarCapture::ByValue => false,\n@@ -208,7 +209,7 @@ pub fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                 debug_name: keywords::Invalid.name(),\n                 by_ref: by_ref\n             };\n-            if let Some(hir::map::NodeLocal(pat)) = tcx.map.find(fv.def.var_id()) {\n+            if let Some(hir::map::NodeLocal(pat)) = tcx.map.find(var_id) {\n                 if let hir::PatKind::Binding(_, ref ident, _) = pat.node {\n                     decl.debug_name = ident.node;\n                 }"}, {"sha": "248690befac0e28c6ff56139f84c9791bc1a0c01", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -729,13 +729,15 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     let temp_lifetime = cx.tcx.region_maps.temporary_scope(expr.id);\n \n     match def {\n-        Def::Local(_, node_id) => {\n+        Def::Local(def_id) => {\n+            let node_id = cx.tcx.map.as_local_node_id(def_id).unwrap();\n             ExprKind::VarRef {\n                 id: node_id,\n             }\n         }\n \n-        Def::Upvar(_, id_var, index, closure_expr_id) => {\n+        Def::Upvar(def_id, index, closure_expr_id) => {\n+            let id_var = cx.tcx.map.as_local_node_id(def_id).unwrap();\n             debug!(\"convert_var(upvar({:?}, {:?}, {:?}))\", id_var, index, closure_expr_id);\n             let var_ty = cx.tcx.node_id_to_type(id_var);\n \n@@ -974,7 +976,7 @@ fn capture_freevar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                    freevar: &hir::Freevar,\n                                    freevar_ty: Ty<'tcx>)\n                                    -> ExprRef<'tcx> {\n-    let id_var = freevar.def.var_id();\n+    let id_var = cx.tcx.map.as_local_node_id(freevar.def.def_id()).unwrap();\n     let upvar_id = ty::UpvarId {\n         var_id: id_var,\n         closure_expr_id: closure_expr.id,"}, {"sha": "2c946b078a2f55b9f4156b3c28956a94cfa7e3aa", "filename": "src/librustc_mir/hair/cx/pattern.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -158,7 +158,8 @@ impl<'patcx, 'cx, 'gcx, 'tcx> PatCx<'patcx, 'cx, 'gcx, 'tcx> {\n             }\n \n             PatKind::Binding(bm, ref ident, ref sub) => {\n-                let id = self.cx.tcx.expect_def(pat.id).var_id();\n+                let def_id = self.cx.tcx.expect_def(pat.id).def_id();\n+                let id = self.cx.tcx.map.as_local_node_id(def_id).unwrap();\n                 let var_ty = self.cx.tcx.node_id_to_type(pat.id);\n                 let region = match var_ty.sty {\n                     ty::TyRef(r, _) => Some(r),"}, {"sha": "5e78ac7ca94c7a69d8639baa07656977183624b1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -1959,7 +1959,8 @@ impl<'a> Resolver<'a> {\n                 // Resolve the self type.\n                 this.visit_ty(self_type);\n \n-                this.with_self_rib(Def::SelfTy(trait_id, Some(item_id)), |this| {\n+                let item_def_id = this.definitions.local_def_id(item_id);\n+                this.with_self_rib(Def::SelfTy(trait_id, Some(item_def_id)), |this| {\n                     this.with_current_self_type(self_type, |this| {\n                         for impl_item in impl_items {\n                             this.resolve_visibility(&impl_item.vis);\n@@ -2243,7 +2244,7 @@ impl<'a> Resolver<'a> {\n         // must not add it if it's in the bindings map\n         // because that breaks the assumptions later\n         // passes make about or-patterns.)\n-        let mut def = Def::Local(self.definitions.local_def_id(pat_id), pat_id);\n+        let mut def = Def::Local(self.definitions.local_def_id(pat_id));\n         match bindings.get(&ident.node).cloned() {\n             Some(id) if id == outer_pat_id => {\n                 // `Variant(a, a)`, error\n@@ -2559,21 +2560,21 @@ impl<'a> Resolver<'a> {\n             Def::Upvar(..) => {\n                 span_bug!(span, \"unexpected {:?} in bindings\", def)\n             }\n-            Def::Local(_, node_id) => {\n+            Def::Local(def_id) => {\n                 for rib in ribs {\n                     match rib.kind {\n                         NormalRibKind | ModuleRibKind(..) | MacroDefinition(..) => {\n                             // Nothing to do. Continue.\n                         }\n                         ClosureRibKind(function_id) => {\n                             let prev_def = def;\n-                            let node_def_id = self.definitions.local_def_id(node_id);\n+                            let node_id = self.definitions.as_local_node_id(def_id).unwrap();\n \n                             let seen = self.freevars_seen\n                                            .entry(function_id)\n                                            .or_insert_with(|| NodeMap());\n                             if let Some(&index) = seen.get(&node_id) {\n-                                def = Def::Upvar(node_def_id, node_id, index, function_id);\n+                                def = Def::Upvar(def_id, index, function_id);\n                                 continue;\n                             }\n                             let vec = self.freevars\n@@ -2585,7 +2586,7 @@ impl<'a> Resolver<'a> {\n                                 span: span,\n                             });\n \n-                            def = Def::Upvar(node_def_id, node_id, depth, function_id);\n+                            def = Def::Upvar(def_id, depth, function_id);\n                             seen.insert(node_id, depth);\n                         }\n                         ItemRibKind | MethodRibKind(_) => {"}, {"sha": "2cbc110c56af93f7b3421a9f870a773315ba801f", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -1456,7 +1456,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n         // process collected paths\n         for &(id, ref p, immut, ref_kind) in &collector.collected_paths {\n             match self.tcx.expect_def(id) {\n-                Def::Local(_, id) => {\n+                Def::Local(def_id) => {\n+                    let id = self.tcx.map.as_local_node_id(def_id).unwrap();\n                     let mut value = if immut == ast::Mutability::Immutable {\n                         self.span.snippet(p.span).to_string()\n                     } else {"}, {"sha": "675c863a3bf0602324bcec63e515c19a7a7ac6d3", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -1284,23 +1284,17 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         // Find the type of the associated item, and the trait where the associated\n         // item is declared.\n         let bound = match (&ty.sty, ty_path_def) {\n-            (_, Def::SelfTy(Some(trait_did), Some(impl_id))) => {\n-                // For Def::SelfTy() values inlined from another crate, the\n-                // impl_id will be DUMMY_NODE_ID, which would cause problems\n-                // here. But we should never run into an impl from another crate\n-                // in this pass.\n-                assert!(impl_id != ast::DUMMY_NODE_ID);\n-\n+            (_, Def::SelfTy(Some(_), Some(impl_def_id))) => {\n                 // `Self` in an impl of a trait - we have a concrete self type and a\n                 // trait reference.\n-                let trait_ref = tcx.impl_trait_ref(tcx.map.local_def_id(impl_id)).unwrap();\n+                let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n                 let trait_ref = if let Some(free_substs) = self.get_free_substs() {\n                     trait_ref.subst(tcx, free_substs)\n                 } else {\n                     trait_ref\n                 };\n \n-                if self.ensure_super_predicates(span, trait_did).is_err() {\n+                if self.ensure_super_predicates(span, trait_ref.def_id).is_err() {\n                     return (tcx.types.err, Def::Err);\n                 }\n \n@@ -1504,16 +1498,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                     tcx.types.err\n                 }\n             }\n-            Def::SelfTy(_, Some(impl_id)) => {\n+            Def::SelfTy(_, Some(def_id)) => {\n                 // Self in impl (we know the concrete type).\n \n-                // For Def::SelfTy() values inlined from another crate, the\n-                // impl_id will be DUMMY_NODE_ID, which would cause problems\n-                // here. But we should never run into an impl from another crate\n-                // in this pass.\n-                assert!(impl_id != ast::DUMMY_NODE_ID);\n-\n                 tcx.prohibit_type_params(base_segments);\n+                let impl_id = tcx.map.as_local_node_id(def_id).unwrap();\n                 let ty = tcx.node_id_to_type(impl_id);\n                 if let Some(free_substs) = self.get_free_substs() {\n                     ty.subst(tcx, free_substs)"}, {"sha": "de7ca479b0b6632bb72981fc627a7dea4434f1b8", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -134,7 +134,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // what the type of the binding `x` ought to be\n                 match tcx.expect_def(pat.id) {\n                     Def::Err => {}\n-                    Def::Local(_, var_id) => {\n+                    Def::Local(def_id) => {\n+                        let var_id = tcx.map.as_local_node_id(def_id).unwrap();\n                         if var_id != pat.id {\n                             let vt = self.local_ty(pat.span, var_id);\n                             self.demand_eqtype(pat.span, vt, typ);"}, {"sha": "8d9fd523a8f5280d16408c509c5d48d6ff2618cd", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -4188,7 +4188,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.tcx.prohibit_type_params(&segments[..segments.len() - poly_segments]);\n \n         match def {\n-            Def::Local(_, nid) | Def::Upvar(_, nid, ..) => {\n+            Def::Local(def_id) | Def::Upvar(def_id, ..) => {\n+                let nid = self.tcx.map.as_local_node_id(def_id).unwrap();\n                 let ty = self.local_ty(span, nid);\n                 let ty = self.normalize_associated_types_in(span, &ty);\n                 self.write_ty(node_id, ty);"}, {"sha": "aa221c33b5ddb39e6f85b4ebdf8bf23b209cbeef", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -120,7 +120,8 @@ impl<'a, 'gcx, 'tcx> SeedBorrowKind<'a, 'gcx, 'tcx> {\n \n         self.fcx.tcx.with_freevars(expr.id, |freevars| {\n             for freevar in freevars {\n-                let var_node_id = freevar.def.var_id();\n+                let def_id = freevar.def.def_id();\n+                let var_node_id = self.fcx.tcx.map.as_local_node_id(def_id).unwrap();\n                 let upvar_id = ty::UpvarId { var_id: var_node_id,\n                                              closure_expr_id: expr.id };\n                 debug!(\"seed upvar_id {:?}\", upvar_id);\n@@ -236,31 +237,30 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n         // implemented.\n         let tcx = self.fcx.tcx;\n         tcx.with_freevars(closure_id, |freevars| {\n-            freevars.iter()\n-                    .map(|freevar| {\n-                        let freevar_node_id = freevar.def.var_id();\n-                        let freevar_ty = self.fcx.node_ty(freevar_node_id);\n-                        let upvar_id = ty::UpvarId {\n-                            var_id: freevar_node_id,\n-                            closure_expr_id: closure_id\n-                        };\n-                        let capture = self.fcx.upvar_capture(upvar_id).unwrap();\n-\n-                        debug!(\"freevar_node_id={:?} freevar_ty={:?} capture={:?}\",\n-                               freevar_node_id, freevar_ty, capture);\n-\n-                        match capture {\n-                            ty::UpvarCapture::ByValue => freevar_ty,\n-                            ty::UpvarCapture::ByRef(borrow) =>\n-                                tcx.mk_ref(borrow.region,\n-                                           ty::TypeAndMut {\n-                                               ty: freevar_ty,\n-                                               mutbl: borrow.kind.to_mutbl_lossy(),\n-                                           }),\n-                        }\n-                    })\n-                    .collect()\n-            })\n+            freevars.iter().map(|freevar| {\n+                let def_id = freevar.def.def_id();\n+                let var_id = tcx.map.as_local_node_id(def_id).unwrap();\n+                let freevar_ty = self.fcx.node_ty(var_id);\n+                let upvar_id = ty::UpvarId {\n+                    var_id: var_id,\n+                    closure_expr_id: closure_id\n+                };\n+                let capture = self.fcx.upvar_capture(upvar_id).unwrap();\n+\n+                debug!(\"var_id={:?} freevar_ty={:?} capture={:?}\",\n+                       var_id, freevar_ty, capture);\n+\n+                match capture {\n+                    ty::UpvarCapture::ByValue => freevar_ty,\n+                    ty::UpvarCapture::ByRef(borrow) =>\n+                        tcx.mk_ref(borrow.region,\n+                                    ty::TypeAndMut {\n+                                        ty: freevar_ty,\n+                                        mutbl: borrow.kind.to_mutbl_lossy(),\n+                                    }),\n+                }\n+            }).collect()\n+        })\n     }\n \n     fn adjust_upvar_borrow_kind_for_consume(&mut self,"}, {"sha": "3983c098f306f10eec9f06e1d5533a8297b2e1cb", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903ec52ba9172e38026fd6b833053e1a019fe68e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=903ec52ba9172e38026fd6b833053e1a019fe68e", "patch": "@@ -2790,11 +2790,8 @@ fn register_def(cx: &DocContext, def: Def) -> DefId {\n         Def::Static(i, _) => (i, TypeStatic),\n         Def::Variant(i, _) => (i, TypeEnum),\n         Def::SelfTy(Some(def_id), _) => (def_id, TypeTrait),\n-        Def::SelfTy(_, Some(impl_id)) => {\n-            // For Def::SelfTy() values inlined from another crate, the\n-            // impl_id will be DUMMY_NODE_ID, which would cause problems.\n-            // But we should never run into an impl from another crate here.\n-            return cx.map.local_def_id(impl_id)\n+        Def::SelfTy(_, Some(impl_def_id)) => {\n+            return impl_def_id\n         }\n         _ => return def.def_id()\n     };"}]}