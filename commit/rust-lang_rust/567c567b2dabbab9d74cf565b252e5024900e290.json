{"sha": "567c567b2dabbab9d74cf565b252e5024900e290", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2N2M1NjdiMmRhYmJhYjlkNzRjZjU2NWIyNTJlNTAyNDkwMGUyOTA=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2013-09-19T20:34:31Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2013-09-19T21:08:06Z"}, "message": "lexer: further slight improvements to lexer errors", "tree": {"sha": "a8bd3d7534572dd3500099c1e8501985d24a4b50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8bd3d7534572dd3500099c1e8501985d24a4b50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/567c567b2dabbab9d74cf565b252e5024900e290", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/567c567b2dabbab9d74cf565b252e5024900e290", "html_url": "https://github.com/rust-lang/rust/commit/567c567b2dabbab9d74cf565b252e5024900e290", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/567c567b2dabbab9d74cf565b252e5024900e290/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8009c97a556f9696487fe8fe525a85f20e2e416a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8009c97a556f9696487fe8fe525a85f20e2e416a", "html_url": "https://github.com/rust-lang/rust/commit/8009c97a556f9696487fe8fe525a85f20e2e416a"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "d3b0866d4a79c4635ab7325bc78a9f8625406935", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/567c567b2dabbab9d74cf565b252e5024900e290/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567c567b2dabbab9d74cf565b252e5024900e290/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=567c567b2dabbab9d74cf565b252e5024900e290", "patch": "@@ -173,6 +173,22 @@ fn fatal_span_char(rdr: @mut StringReader,\n     fatal_span(rdr, from_pos, to_pos, m);\n }\n \n+// report a lexical error spanning [`from_pos`, `to_pos`), appending the\n+// offending string to the error message\n+fn fatal_span_verbose(rdr: @mut StringReader,\n+                      from_pos: BytePos,\n+                      to_pos: BytePos,\n+                      m: ~str)\n+                   -> ! {\n+    let mut m = m;\n+    m.push_str(\": \");\n+    let s = rdr.src.slice(\n+                  byte_offset(rdr, from_pos).to_uint(),\n+                  byte_offset(rdr, to_pos).to_uint());\n+    m.push_str(s);\n+    fatal_span(rdr, from_pos, to_pos, m);\n+}\n+\n // EFFECT: advance peek_tok and peek_span to refer to the next token.\n // EFFECT: update the interner, maybe.\n fn string_advance_token(r: @mut StringReader) {\n@@ -390,8 +406,7 @@ fn consume_block_comment(rdr: @mut StringReader)\n    if res.is_some() { res } else { consume_whitespace_and_comments(rdr) }\n }\n \n-fn scan_exponent(rdr: @mut StringReader) -> Option<~str> {\n-    let start_bpos = rdr.last_pos;\n+fn scan_exponent(rdr: @mut StringReader, start_bpos: BytePos) -> Option<~str> {\n     let mut c = rdr.curr;\n     let mut rslt = ~\"\";\n     if c == 'e' || c == 'E' {\n@@ -507,7 +522,7 @@ fn scan_number(c: char, rdr: @mut StringReader) -> token::Token {\n           _ => ()\n         }\n     }\n-    match scan_exponent(rdr) {\n+    match scan_exponent(rdr, start_bpos) {\n       Some(ref s) => {\n         is_float = true;\n         num_str.push_str(*s);\n@@ -568,7 +583,8 @@ fn scan_numeric_escape(rdr: @mut StringReader, n_hex_digits: uint) -> char {\n         let n = rdr.curr;\n         if !is_hex_digit(n) {\n             fatal_span_char(rdr, rdr.last_pos, rdr.pos,\n-                            ~\"illegal numeric character escape\", n);\n+                            ~\"illegal character in numeric character escape\",\n+                            n);\n         }\n         bump(rdr);\n         accum_int *= 16;\n@@ -754,27 +770,25 @@ fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n             }\n         }\n         if rdr.curr != '\\'' {\n-            fatal_span(rdr,\n-                       // Byte offsetting here is okay because the character\n-                       // before position `start` is an ascii single quote.\n-                       start - BytePos(1u),\n-                       rdr.last_pos,\n-                       ~\"unterminated character constant\");\n+            fatal_span_verbose(rdr,\n+                               // Byte offsetting here is okay because the\n+                               // character before position `start` is an\n+                               // ascii single quote.\n+                               start - BytePos(1u),\n+                               rdr.last_pos,\n+                               ~\"unterminated character constant\");\n         }\n         bump(rdr); // advance curr past token\n         return token::LIT_CHAR(c2 as u32);\n       }\n       '\"' => {\n         let mut accum_str = ~\"\";\n-        let n = rdr.last_pos;\n+        let start_bpos = rdr.last_pos;\n         bump(rdr);\n         while rdr.curr != '\"' {\n             if is_eof(rdr) {\n-                do with_str_from(rdr, n) |s| {\n-                    fatal_span(rdr, n, rdr.last_pos,\n-                               fmt!(\"unterminated double quote string: %s\",\n-                                    s));\n-                }\n+                fatal_span(rdr, start_bpos, rdr.last_pos,\n+                           ~\"unterminated double quote string\");\n             }\n \n             let ch = rdr.curr;"}, {"sha": "858afffb443f38a48c68bccc7d0cc5ca7e634c18", "filename": "src/test/compile-fail/lex-illegal-num-char-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/567c567b2dabbab9d74cf565b252e5024900e290/src%2Ftest%2Fcompile-fail%2Flex-illegal-num-char-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567c567b2dabbab9d74cf565b252e5024900e290/src%2Ftest%2Fcompile-fail%2Flex-illegal-num-char-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flex-illegal-num-char-escape.rs?ref=567c567b2dabbab9d74cf565b252e5024900e290", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n static c: char =\n-    '\\u539_' //~ ERROR: illegal numeric character escape\n+    '\\u539_' //~ ERROR: illegal character in numeric character escape\n ;"}]}