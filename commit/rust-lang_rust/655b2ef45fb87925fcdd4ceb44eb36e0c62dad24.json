{"sha": "655b2ef45fb87925fcdd4ceb44eb36e0c62dad24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NWIyZWY0NWZiODc5MjVmY2RkNGNlYjQ0ZWIzNmUwYzYyZGFkMjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-19T12:35:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-19T12:35:23Z"}, "message": "Auto merge of #28495 - semarie:stdcpp-name, r=alexcrichton\n\nit makes rustc compatible with gcc installation that are using\r\n`--program-transform-name' configure flag (on OpenBSD for example).\r\n\r\n- detects at configure the name of stdc++ library on the system\r\n\r\n- use the detected name in llvm makefile (with enable-static-stdcpp),\r\n  and pass it to mklldeps.py\r\n\r\n- generate mklldeps.rs using this detected name\r\n\r\nnote that CFG_STDCPP_NAME is about stdc++ name, not about libc++. If\r\nusing libc++, the default name will be `stdc++', but it won't be used\r\nwhen linking.\r\n\r\nr? @alexcrichton \r\n\r\nI added this support globally instead of just for OpenBSD as it isn't specially related to OpenBSD (except OpenBSD use it for gcc-4.9). And as I would had to change `llvm.mk', having just a default value in `configure' for others platforms won't be very useful.", "tree": {"sha": "1e73798211f3a76bfc4a139eb92f30ddbab5a697", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e73798211f3a76bfc4a139eb92f30ddbab5a697"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/655b2ef45fb87925fcdd4ceb44eb36e0c62dad24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/655b2ef45fb87925fcdd4ceb44eb36e0c62dad24", "html_url": "https://github.com/rust-lang/rust/commit/655b2ef45fb87925fcdd4ceb44eb36e0c62dad24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/655b2ef45fb87925fcdd4ceb44eb36e0c62dad24/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3afb16d246c6aa080cf52a85003e19da79b828e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3afb16d246c6aa080cf52a85003e19da79b828e", "html_url": "https://github.com/rust-lang/rust/commit/b3afb16d246c6aa080cf52a85003e19da79b828e"}, {"sha": "913fe6dbe9425330027b7d75ba16be47d7280d66", "url": "https://api.github.com/repos/rust-lang/rust/commits/913fe6dbe9425330027b7d75ba16be47d7280d66", "html_url": "https://github.com/rust-lang/rust/commit/913fe6dbe9425330027b7d75ba16be47d7280d66"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "1d95965150caea54b84466bbb6d6bb601645f8c0", "filename": "configure", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/655b2ef45fb87925fcdd4ceb44eb36e0c62dad24/configure", "raw_url": "https://github.com/rust-lang/rust/raw/655b2ef45fb87925fcdd4ceb44eb36e0c62dad24/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=655b2ef45fb87925fcdd4ceb44eb36e0c62dad24", "patch": "@@ -1095,6 +1095,12 @@ envopt CPP\n envopt CFLAGS\n envopt CXXFLAGS\n \n+# stdc++ name in use\n+# used to manage non-standard name (on OpenBSD for example)\n+program_transform_name=$($CFG_CC -v 2>&1 | sed -n \"s/.*--program-transform-name='\\([^']*\\)'.*/\\1/p\")\n+CFG_STDCPP_NAME=$(echo \"stdc++\" | sed \"${program_transform_name}\")\n+putvar CFG_STDCPP_NAME\n+\n # a little post-processing of various config values\n CFG_PREFIX=${CFG_PREFIX%/}\n CFG_MANDIR=${CFG_MANDIR%/}"}, {"sha": "1cbf4a9fb841c26db01d99472f25fe9fd931f938", "filename": "mk/llvm.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/655b2ef45fb87925fcdd4ceb44eb36e0c62dad24/mk%2Fllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/655b2ef45fb87925fcdd4ceb44eb36e0c62dad24/mk%2Fllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fllvm.mk?ref=655b2ef45fb87925fcdd4ceb44eb36e0c62dad24", "patch": "@@ -73,7 +73,7 @@ $$(LLVM_STAMP_$(1)): $(S)src/rustllvm/llvm-auto-clean-trigger\n \n ifeq ($$(CFG_ENABLE_LLVM_STATIC_STDCPP),1)\n LLVM_STDCPP_RUSTFLAGS_$(1) = -L \"$$(dir $$(shell $$(CC_$(1)) $$(CFG_GCCISH_CFLAGS_$(1)) \\\n-\t\t\t\t\t-print-file-name=libstdc++.a))\"\n+\t\t\t\t\t-print-file-name=lib$(CFG_STDCPP_NAME).a))\"\n else\n LLVM_STDCPP_RUSTFLAGS_$(1) =\n endif\n@@ -83,7 +83,7 @@ endif\n LLVM_LINKAGE_PATH_$(1):=$$(abspath $$(RT_OUTPUT_DIR_$(1))/llvmdeps.rs)\n $$(LLVM_LINKAGE_PATH_$(1)): $(S)src/etc/mklldeps.py $$(LLVM_CONFIG_$(1))\n \t$(Q)$(CFG_PYTHON) \"$$<\" \"$$@\" \"$$(LLVM_COMPONENTS)\" \"$$(CFG_ENABLE_LLVM_STATIC_STDCPP)\" \\\n-\t\t$$(LLVM_CONFIG_$(1))\n+\t\t$$(LLVM_CONFIG_$(1)) \"$(CFG_STDCPP_NAME)\"\n endef\n \n $(foreach host,$(CFG_HOST), \\"}, {"sha": "215fa1cdd1bb757ac0bb06377a92ebf8a29ec182", "filename": "src/etc/mklldeps.py", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/655b2ef45fb87925fcdd4ceb44eb36e0c62dad24/src%2Fetc%2Fmklldeps.py", "raw_url": "https://github.com/rust-lang/rust/raw/655b2ef45fb87925fcdd4ceb44eb36e0c62dad24/src%2Fetc%2Fmklldeps.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmklldeps.py?ref=655b2ef45fb87925fcdd4ceb44eb36e0c62dad24", "patch": "@@ -17,6 +17,7 @@\n components = sys.argv[2].split() # splits on whitespace\n enable_static = sys.argv[3]\n llvm_config = sys.argv[4]\n+stdcpp_name = sys.argv[5]\n \n f.write(\"\"\"// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n@@ -77,15 +78,15 @@ def run(args):\n out = run([llvm_config, '--cxxflags'])\n if enable_static == '1':\n     assert('stdlib=libc++' not in out)\n-    f.write(\"#[link(name = \\\"stdc++\\\", kind = \\\"static\\\")]\\n\")\n+    f.write(\"#[link(name = \\\"\" + stdcpp_name + \"\\\", kind = \\\"static\\\")]\\n\")\n else:\n     # Note that we use `cfg_attr` here because on MSVC the C++ standard library\n     # is not c++ or stdc++, but rather the linker takes care of linking the\n     # right standard library.\n     if 'stdlib=libc++' in out:\n         f.write(\"#[cfg_attr(not(target_env = \\\"msvc\\\"), link(name = \\\"c++\\\"))]\\n\")\n     else:\n-        f.write(\"#[cfg_attr(not(target_env = \\\"msvc\\\"), link(name = \\\"stdc++\\\"))]\\n\")\n+        f.write(\"#[cfg_attr(not(target_env = \\\"msvc\\\"), link(name = \\\"\" + stdcpp_name + \"\\\"))]\\n\")\n \n # Attach everything to an extern block\n f.write(\"extern {}\\n\")"}]}