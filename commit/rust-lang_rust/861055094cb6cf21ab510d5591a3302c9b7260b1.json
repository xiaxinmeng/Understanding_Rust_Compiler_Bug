{"sha": "861055094cb6cf21ab510d5591a3302c9b7260b1", "node_id": "C_kwDOAAsO6NoAKDg2MTA1NTA5NGNiNmNmMjFhYjUxMGQ1NTkxYTMzMDJjOWI3MjYwYjE", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-09-14T20:39:52Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-09-14T20:39:52Z"}, "message": "Pass ImplTraitContext as &, there's no need for that to be &mut", "tree": {"sha": "650e0eac83518d1ff775d8017676f8958b9fa2d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/650e0eac83518d1ff775d8017676f8958b9fa2d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/861055094cb6cf21ab510d5591a3302c9b7260b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmMiPBgACgkQgTGiTgx5\n768vDg//SOYH/WonXSGHcAYDnCxNbXcsacoIVZaSM6edgQys3kSEhG+aGZ3if4Mq\ni3rQhtrJNbuI44WKsATHSgHA+lrTcshVVADM/EN35Lh8kSb/sf/IDxugMzEdIrl1\nhhkwVDit+6tS4jnpDoEIMTepC4xGgxBblhIkBHCkWkDn5D5d02CTy8PjuBAEiu0/\nQAN7MTZClr/Az3ckDTuX+0Q2jAvMW/ZWIZBxaHVQaScI1BIZoDhMghgmdcL9Ua8k\nvwPlgOQoxPuGhij8tvqRs/JPQp6cj7vlZNcQUrlOgHurcD7vgRg/iz9pTgpNU5Lm\ny1zG+esT6QX4DrPxA3AQxlWj2R30L3h7+FKtONIpQE6Nzo1tdVnBTSd1f1sGLfa4\n1/dTn8aIGCNHGu4g+o1GTMGQiYhHJcMmx3LZsdmjfbhIrDpe8trSVzakbQ95wmuo\n262kNY1x0TDeC2LFxI+gbsf2+A8K08heeN6D63CvJb6ttYv826wbffOBnDYCRinV\nlyTupsfoLIKfu9Yoa4w9VRbRnbf0y/F2HHYNz2AwoT34LObqWP2lWGd41XZEHRl5\nZuE0hvWKt5+EljeYx+vo32Wx1mmHAS4QOawm7sTZQy8PlgRlL+f7wx6GGnD9rmU1\n7s6sTPP+G5CkMiIZw9urg6Wa/Dt3X2ZNy0Kn7VOjwAhdRmcjK0Y=\n=b5jo\n-----END PGP SIGNATURE-----", "payload": "tree 650e0eac83518d1ff775d8017676f8958b9fa2d5\nparent 669f2d4550602bdb41d569fc867b18680b3a495f\nauthor Santiago Pastorino <spastorino@gmail.com> 1663187992 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1663187992 -0300\n\nPass ImplTraitContext as &, there's no need for that to be &mut\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/861055094cb6cf21ab510d5591a3302c9b7260b1", "html_url": "https://github.com/rust-lang/rust/commit/861055094cb6cf21ab510d5591a3302c9b7260b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/861055094cb6cf21ab510d5591a3302c9b7260b1/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "669f2d4550602bdb41d569fc867b18680b3a495f", "url": "https://api.github.com/repos/rust-lang/rust/commits/669f2d4550602bdb41d569fc867b18680b3a495f", "html_url": "https://github.com/rust-lang/rust/commit/669f2d4550602bdb41d569fc867b18680b3a495f"}], "stats": {"total": 191, "additions": 84, "deletions": 107}, "files": [{"sha": "24672efc63c55635b358be2f9e56a844928d9594", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861055094cb6cf21ab510d5591a3302c9b7260b1/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861055094cb6cf21ab510d5591a3302c9b7260b1/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=861055094cb6cf21ab510d5591a3302c9b7260b1", "patch": "@@ -220,7 +220,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 &sym.qself,\n                                 &sym.path,\n                                 ParamMode::Optional,\n-                                &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                                &ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                             );\n                             hir::InlineAsmOperand::SymStatic { path, def_id }\n                         } else {"}, {"sha": "e0869bb1063d91a5b51bd4192b5921550af4b9d4", "filename": "compiler/rustc_ast_lowering/src/block.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/861055094cb6cf21ab510d5591a3302c9b7260b1/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861055094cb6cf21ab510d5591a3302c9b7260b1/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs?ref=861055094cb6cf21ab510d5591a3302c9b7260b1", "patch": "@@ -84,9 +84,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     fn lower_local(&mut self, l: &Local) -> &'hir hir::Local<'hir> {\n-        let ty = l.ty.as_ref().map(|t| {\n-            self.lower_ty(t, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Variable))\n-        });\n+        let ty = l\n+            .ty\n+            .as_ref()\n+            .map(|t| self.lower_ty(t, &ImplTraitContext::Disallowed(ImplTraitPosition::Variable)));\n         let init = l.kind.init().map(|init| self.lower_expr(init));\n         let hir_id = self.lower_node_id(l.id);\n         let pat = self.lower_pat(&l.pat);"}, {"sha": "506b69f8789b92c8d723c3225ed2392cc3797b76", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/861055094cb6cf21ab510d5591a3302c9b7260b1/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861055094cb6cf21ab510d5591a3302c9b7260b1/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=861055094cb6cf21ab510d5591a3302c9b7260b1", "patch": "@@ -66,7 +66,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         seg,\n                         ParamMode::Optional,\n                         ParenthesizedGenericArgs::Err,\n-                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                        &ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     ));\n                     let receiver = self.lower_expr(receiver);\n                     let args =\n@@ -89,14 +89,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ExprKind::Cast(ref expr, ref ty) => {\n                     let expr = self.lower_expr(expr);\n-                    let ty = self\n-                        .lower_ty(ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                    let ty =\n+                        self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                     hir::ExprKind::Cast(expr, ty)\n                 }\n                 ExprKind::Type(ref expr, ref ty) => {\n                     let expr = self.lower_expr(expr);\n-                    let ty = self\n-                        .lower_ty(ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                    let ty =\n+                        self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                     hir::ExprKind::Type(expr, ty)\n                 }\n                 ExprKind::AddrOf(k, m, ref ohs) => {\n@@ -225,7 +225,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         qself,\n                         path,\n                         ParamMode::Optional,\n-                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                        &ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     );\n                     hir::ExprKind::Path(qpath)\n                 }\n@@ -259,7 +259,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             &se.qself,\n                             &se.path,\n                             ParamMode::Optional,\n-                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                            &ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         )),\n                         self.arena\n                             .alloc_from_iter(se.fields.iter().map(|x| self.lower_expr_field(x))),\n@@ -556,14 +556,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         async_gen_kind: hir::AsyncGeneratorKind,\n         body: impl FnOnce(&mut Self) -> hir::Expr<'hir>,\n     ) -> hir::ExprKind<'hir> {\n-        let output =\n-            match ret_ty {\n-                Some(ty) => hir::FnRetTy::Return(self.lower_ty(\n-                    &ty,\n-                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::AsyncBlock),\n-                )),\n-                None => hir::FnRetTy::DefaultReturn(self.lower_span(span)),\n-            };\n+        let output = match ret_ty {\n+            Some(ty) => hir::FnRetTy::Return(\n+                self.lower_ty(&ty, &ImplTraitContext::Disallowed(ImplTraitPosition::AsyncBlock)),\n+            ),\n+            None => hir::FnRetTy::DefaultReturn(self.lower_span(span)),\n+        };\n \n         // Resume argument type. We let the compiler infer this to simplify the lowering. It is\n         // fully constrained by `future::from_generator`.\n@@ -1131,7 +1129,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         qself,\n                         path,\n                         ParamMode::Optional,\n-                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                        &ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     );\n                     // Destructure like a tuple struct.\n                     let tuple_struct_pat = hir::PatKind::TupleStruct(\n@@ -1150,7 +1148,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         qself,\n                         path,\n                         ParamMode::Optional,\n-                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                        &ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     );\n                     // Destructure like a unit struct.\n                     let unit_struct_pat = hir::PatKind::Path(qpath);\n@@ -1174,7 +1172,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     &se.qself,\n                     &se.path,\n                     ParamMode::Optional,\n-                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                    &ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                 );\n                 let fields_omitted = match &se.rest {\n                     StructRest::Base(e) => {"}, {"sha": "550833275e4413e70836883ba61de3d690dd1295", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 35, "deletions": 48, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/861055094cb6cf21ab510d5591a3302c9b7260b1/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861055094cb6cf21ab510d5591a3302c9b7260b1/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=861055094cb6cf21ab510d5591a3302c9b7260b1", "patch": "@@ -313,8 +313,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, ty) = self.lower_generics(\n                     &generics,\n                     id,\n-                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n-                    |this| this.lower_ty(ty, &mut ImplTraitContext::TypeAliasesOpaqueTy),\n+                    &ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    |this| this.lower_ty(ty, &ImplTraitContext::TypeAliasesOpaqueTy),\n                 );\n                 hir::ItemKind::TyAlias(ty, generics)\n             }\n@@ -326,7 +326,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, ty) = self.lower_generics(\n                     &generics,\n                     id,\n-                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| this.arena.alloc(this.ty(span, hir::TyKind::Err)),\n                 );\n                 hir::ItemKind::TyAlias(ty, generics)\n@@ -335,7 +335,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, variants) = self.lower_generics(\n                     generics,\n                     id,\n-                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| {\n                         this.arena.alloc_from_iter(\n                             enum_definition.variants.iter().map(|x| this.lower_variant(x)),\n@@ -348,7 +348,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, struct_def) = self.lower_generics(\n                     generics,\n                     id,\n-                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| this.lower_variant_data(hir_id, struct_def),\n                 );\n                 hir::ItemKind::Struct(struct_def, generics)\n@@ -357,7 +357,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, vdata) = self.lower_generics(\n                     generics,\n                     id,\n-                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| this.lower_variant_data(hir_id, vdata),\n                 );\n                 hir::ItemKind::Union(vdata, generics)\n@@ -391,14 +391,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         let trait_ref = trait_ref.as_ref().map(|trait_ref| {\n                             this.lower_trait_ref(\n                                 trait_ref,\n-                                &mut ImplTraitContext::Disallowed(ImplTraitPosition::Trait),\n+                                &ImplTraitContext::Disallowed(ImplTraitPosition::Trait),\n                             )\n                         });\n \n-                        let lowered_ty = this.lower_ty(\n-                            ty,\n-                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n-                        );\n+                        let lowered_ty = this\n+                            .lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n \n                         (trait_ref, lowered_ty)\n                     });\n@@ -437,11 +435,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, (unsafety, items, bounds)) = self.lower_generics(\n                     generics,\n                     id,\n-                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| {\n                         let bounds = this.lower_param_bounds(\n                             bounds,\n-                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                            &ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n                         );\n                         let items = this.arena.alloc_from_iter(\n                             items.iter().map(|item| this.lower_trait_item_ref(item)),\n@@ -456,11 +454,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, bounds) = self.lower_generics(\n                     generics,\n                     id,\n-                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| {\n                         this.lower_param_bounds(\n                             bounds,\n-                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                            &ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n                         )\n                     },\n                 );\n@@ -483,7 +481,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         span: Span,\n         body: Option<&Expr>,\n     ) -> (&'hir hir::Ty<'hir>, hir::BodyId) {\n-        let ty = self.lower_ty(ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+        let ty = self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n         (ty, self.lower_const_body(span, body))\n     }\n \n@@ -675,8 +673,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::ForeignItemKind::Fn(fn_dec, fn_args, generics)\n                 }\n                 ForeignItemKind::Static(ref t, m, _) => {\n-                    let ty = self\n-                        .lower_ty(t, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                    let ty =\n+                        self.lower_ty(t, &ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                     hir::ForeignItemKind::Static(ty, m)\n                 }\n                 ForeignItemKind::TyAlias(..) => hir::ForeignItemKind::Type,\n@@ -744,11 +742,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 qself,\n                 path,\n                 ParamMode::ExplicitNamed, // no `'_` in declarations (Issue #61124)\n-                &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                &ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n             );\n             self.arena.alloc(t)\n         } else {\n-            self.lower_ty(&f.ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n+            self.lower_ty(&f.ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n         };\n         let hir_id = self.lower_node_id(f.id);\n         self.lower_attrs(hir_id, &f.attrs);\n@@ -771,8 +769,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind, has_default) = match i.kind {\n             AssocItemKind::Const(_, ref ty, ref default) => {\n-                let ty =\n-                    self.lower_ty(ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                let ty = self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                 let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body), body.is_some())\n             }\n@@ -813,18 +810,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, kind) = self.lower_generics(\n                     &generics,\n                     i.id,\n-                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| {\n                         let ty = ty.as_ref().map(|x| {\n-                            this.lower_ty(\n-                                x,\n-                                &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n-                            )\n+                            this.lower_ty(x, &ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n                         });\n                         hir::TraitItemKind::Type(\n                             this.lower_param_bounds(\n                                 bounds,\n-                                &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                                &ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                             ),\n                             ty,\n                         )\n@@ -877,8 +871,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind) = match &i.kind {\n             AssocItemKind::Const(_, ty, expr) => {\n-                let ty =\n-                    self.lower_ty(ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                let ty = self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                 (\n                     hir::Generics::empty(),\n                     hir::ImplItemKind::Const(ty, self.lower_const_body(i.span, expr.as_deref())),\n@@ -905,14 +898,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 self.lower_generics(\n                     &generics,\n                     i.id,\n-                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| match ty {\n                         None => {\n                             let ty = this.arena.alloc(this.ty(i.span, hir::TyKind::Err));\n                             hir::ImplItemKind::TyAlias(ty)\n                         }\n                         Some(ty) => {\n-                            let ty = this.lower_ty(ty, &mut ImplTraitContext::TypeAliasesOpaqueTy);\n+                            let ty = this.lower_ty(ty, &ImplTraitContext::TypeAliasesOpaqueTy);\n                             hir::ImplItemKind::TyAlias(ty)\n                         }\n                     },\n@@ -1322,7 +1315,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         &mut self,\n         generics: &Generics,\n         parent_node_id: NodeId,\n-        itctx: &mut ImplTraitContext,\n+        itctx: &ImplTraitContext,\n         f: impl FnOnce(&mut Self) -> T,\n     ) -> (&'hir hir::Generics<'hir>, T) {\n         debug_assert!(self.impl_trait_defs.is_empty());\n@@ -1427,7 +1420,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         id: NodeId,\n         kind: &GenericParamKind,\n         bounds: &[GenericBound],\n-        itctx: &mut ImplTraitContext,\n+        itctx: &ImplTraitContext,\n         origin: PredicateOrigin,\n     ) -> Option<hir::WherePredicate<'hir>> {\n         // Do not create a clause if we do not have anything inside it.\n@@ -1502,14 +1495,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 span,\n             }) => hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n                 bound_generic_params: self.lower_generic_params(bound_generic_params),\n-                bounded_ty: self.lower_ty(\n-                    bounded_ty,\n-                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n-                ),\n+                bounded_ty: self\n+                    .lower_ty(bounded_ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n                 bounds: self.arena.alloc_from_iter(bounds.iter().map(|bound| {\n                     self.lower_param_bound(\n                         bound,\n-                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                        &ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n                     )\n                 })),\n                 span: self.lower_span(span),\n@@ -1524,20 +1515,16 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 lifetime: self.lower_lifetime(lifetime),\n                 bounds: self.lower_param_bounds(\n                     bounds,\n-                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                    &ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n                 ),\n                 in_where_clause: true,\n             }),\n             WherePredicate::EqPredicate(WhereEqPredicate { ref lhs_ty, ref rhs_ty, span }) => {\n                 hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n-                    lhs_ty: self.lower_ty(\n-                        lhs_ty,\n-                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n-                    ),\n-                    rhs_ty: self.lower_ty(\n-                        rhs_ty,\n-                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n-                    ),\n+                    lhs_ty: self\n+                        .lower_ty(lhs_ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n+                    rhs_ty: self\n+                        .lower_ty(rhs_ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n                     span: self.lower_span(span),\n                 })\n             }"}, {"sha": "bda80c3eb192e00ca842e90b64f4da6bccf0f99c", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/861055094cb6cf21ab510d5591a3302c9b7260b1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861055094cb6cf21ab510d5591a3302c9b7260b1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=861055094cb6cf21ab510d5591a3302c9b7260b1", "patch": "@@ -984,7 +984,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_assoc_ty_constraint(\n         &mut self,\n         constraint: &AssocConstraint,\n-        itctx: &mut ImplTraitContext,\n+        itctx: &ImplTraitContext,\n     ) -> hir::TypeBinding<'hir> {\n         debug!(\"lower_assoc_ty_constraint(constraint={:?}, itctx={:?})\", constraint, itctx);\n         // lower generic arguments of identifier in constraint\n@@ -1003,7 +1003,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         } else {\n             self.arena.alloc(hir::GenericArgs::none())\n         };\n-        let mut itctx_tait = ImplTraitContext::TypeAliasesOpaqueTy;\n+        let itctx_tait = &ImplTraitContext::TypeAliasesOpaqueTy;\n \n         let kind = match constraint.kind {\n             AssocConstraintKind::Equality { ref term } => {\n@@ -1041,9 +1041,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // then to an opaque type).\n                     //\n                     // FIXME: this is only needed until `impl Trait` is allowed in type aliases.\n-                    ImplTraitContext::Disallowed(_) if self.is_in_dyn_type => {\n-                        (true, &mut itctx_tait)\n-                    }\n+                    ImplTraitContext::Disallowed(_) if self.is_in_dyn_type => (true, itctx_tait),\n \n                     // We are in the parameter position, but not within a dyn type:\n                     //\n@@ -1122,7 +1120,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_generic_arg(\n         &mut self,\n         arg: &ast::GenericArg,\n-        itctx: &mut ImplTraitContext,\n+        itctx: &ImplTraitContext,\n     ) -> hir::GenericArg<'hir> {\n         match arg {\n             ast::GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n@@ -1184,7 +1182,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     #[instrument(level = \"debug\", skip(self))]\n-    fn lower_ty(&mut self, t: &Ty, itctx: &mut ImplTraitContext) -> &'hir hir::Ty<'hir> {\n+    fn lower_ty(&mut self, t: &Ty, itctx: &ImplTraitContext) -> &'hir hir::Ty<'hir> {\n         self.arena.alloc(self.lower_ty_direct(t, itctx))\n     }\n \n@@ -1194,7 +1192,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         qself: &Option<QSelf>,\n         path: &Path,\n         param_mode: ParamMode,\n-        itctx: &mut ImplTraitContext,\n+        itctx: &ImplTraitContext,\n     ) -> hir::Ty<'hir> {\n         // Check whether we should interpret this as a bare trait object.\n         // This check mirrors the one in late resolution.  We only introduce this special case in\n@@ -1237,7 +1235,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.ty(span, hir::TyKind::Tup(tys))\n     }\n \n-    fn lower_ty_direct(&mut self, t: &Ty, itctx: &mut ImplTraitContext) -> hir::Ty<'hir> {\n+    fn lower_ty_direct(&mut self, t: &Ty, itctx: &ImplTraitContext) -> hir::Ty<'hir> {\n         let kind = match t.kind {\n             TyKind::Infer => hir::TyKind::Infer,\n             TyKind::Err => hir::TyKind::Err,\n@@ -1348,7 +1346,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         def_node_id,\n                         bounds,\n                         false,\n-                        &mut ImplTraitContext::TypeAliasesOpaqueTy,\n+                        &ImplTraitContext::TypeAliasesOpaqueTy,\n                     ),\n                     ImplTraitContext::Universal => {\n                         let span = t.span;\n@@ -1435,7 +1433,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         opaque_ty_node_id: NodeId,\n         bounds: &GenericBounds,\n         in_trait: bool,\n-        itctx: &mut ImplTraitContext,\n+        itctx: &ImplTraitContext,\n     ) -> hir::TyKind<'hir> {\n         // Make sure we know that some funky desugaring has been going on here.\n         // This is a first: there is code in other places like for loop\n@@ -1681,11 +1679,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n         let inputs = self.arena.alloc_from_iter(inputs.iter().map(|param| {\n             if fn_node_id.is_some() {\n-                self.lower_ty_direct(&param.ty, &mut ImplTraitContext::Universal)\n+                self.lower_ty_direct(&param.ty, &ImplTraitContext::Universal)\n             } else {\n                 self.lower_ty_direct(\n                     &param.ty,\n-                    &mut ImplTraitContext::Disallowed(match kind {\n+                    &ImplTraitContext::Disallowed(match kind {\n                         FnDeclKind::Fn | FnDeclKind::Inherent => {\n                             unreachable!(\"fn should allow in-band lifetimes\")\n                         }\n@@ -2084,7 +2082,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_param_bound(\n         &mut self,\n         tpb: &GenericBound,\n-        itctx: &mut ImplTraitContext,\n+        itctx: &ImplTraitContext,\n     ) -> hir::GenericBound<'hir> {\n         match tpb {\n             GenericBound::Trait(p, modifier) => hir::GenericBound::Trait(\n@@ -2200,16 +2198,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             GenericParamKind::Type { ref default, .. } => {\n                 let kind = hir::GenericParamKind::Type {\n                     default: default.as_ref().map(|x| {\n-                        self.lower_ty(x, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n+                        self.lower_ty(x, &ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n                     }),\n                     synthetic: false,\n                 };\n \n                 (hir::ParamName::Plain(self.lower_ident(param.ident)), kind)\n             }\n             GenericParamKind::Const { ref ty, kw_span: _, ref default } => {\n-                let ty =\n-                    self.lower_ty(&ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                let ty = self.lower_ty(&ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                 let default = default.as_ref().map(|def| self.lower_anon_const(def));\n                 (\n                     hir::ParamName::Plain(self.lower_ident(param.ident)),\n@@ -2219,11 +2216,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n-    fn lower_trait_ref(\n-        &mut self,\n-        p: &TraitRef,\n-        itctx: &mut ImplTraitContext,\n-    ) -> hir::TraitRef<'hir> {\n+    fn lower_trait_ref(&mut self, p: &TraitRef, itctx: &ImplTraitContext) -> hir::TraitRef<'hir> {\n         let path = match self.lower_qpath(p.ref_id, &None, &p.path, ParamMode::Explicit, itctx) {\n             hir::QPath::Resolved(None, path) => path,\n             qpath => panic!(\"lower_trait_ref: unexpected QPath `{:?}`\", qpath),\n@@ -2235,31 +2228,31 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_poly_trait_ref(\n         &mut self,\n         p: &PolyTraitRef,\n-        itctx: &mut ImplTraitContext,\n+        itctx: &ImplTraitContext,\n     ) -> hir::PolyTraitRef<'hir> {\n         let bound_generic_params =\n             self.lower_lifetime_binder(p.trait_ref.ref_id, &p.bound_generic_params);\n         let trait_ref = self.lower_trait_ref(&p.trait_ref, itctx);\n         hir::PolyTraitRef { bound_generic_params, trait_ref, span: self.lower_span(p.span) }\n     }\n \n-    fn lower_mt(&mut self, mt: &MutTy, itctx: &mut ImplTraitContext) -> hir::MutTy<'hir> {\n+    fn lower_mt(&mut self, mt: &MutTy, itctx: &ImplTraitContext) -> hir::MutTy<'hir> {\n         hir::MutTy { ty: self.lower_ty(&mt.ty, itctx), mutbl: mt.mutbl }\n     }\n \n     #[instrument(level = \"debug\", skip(self), ret)]\n     fn lower_param_bounds(\n         &mut self,\n         bounds: &[GenericBound],\n-        itctx: &mut ImplTraitContext,\n+        itctx: &ImplTraitContext,\n     ) -> hir::GenericBounds<'hir> {\n         self.arena.alloc_from_iter(self.lower_param_bounds_mut(bounds, itctx))\n     }\n \n     fn lower_param_bounds_mut<'s, 'b>(\n         &'s mut self,\n         bounds: &'s [GenericBound],\n-        itctx: &'b mut ImplTraitContext,\n+        itctx: &'b ImplTraitContext,\n     ) -> impl Iterator<Item = hir::GenericBound<'hir>> + Captures<'s> + Captures<'a> + Captures<'b>\n     {\n         bounds.iter().map(move |bound| self.lower_param_bound(bound, itctx))\n@@ -2291,7 +2284,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             node_id,\n             &GenericParamKind::Type { default: None },\n             bounds,\n-            &mut ImplTraitContext::Universal,\n+            &ImplTraitContext::Universal,\n             hir::PredicateOrigin::ImplTrait,\n         );\n "}, {"sha": "6bb1bb9eace8b9c1b5f056e2a76a06b8d6f6090e", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/861055094cb6cf21ab510d5591a3302c9b7260b1/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861055094cb6cf21ab510d5591a3302c9b7260b1/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=861055094cb6cf21ab510d5591a3302c9b7260b1", "patch": "@@ -22,7 +22,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         qself: &Option<QSelf>,\n         p: &Path,\n         param_mode: ParamMode,\n-        itctx: &mut ImplTraitContext,\n+        itctx: &ImplTraitContext,\n     ) -> hir::QPath<'hir> {\n         let qself_position = qself.as_ref().map(|q| q.position);\n         let qself = qself.as_ref().map(|q| self.lower_ty(&q.ty, itctx));\n@@ -156,7 +156,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     segment,\n                     param_mode,\n                     ParenthesizedGenericArgs::Err,\n-                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                    &ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                 )\n             })),\n             span: self.lower_span(p.span),\n@@ -180,7 +180,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         segment: &PathSegment,\n         param_mode: ParamMode,\n         parenthesized_generic_args: ParenthesizedGenericArgs,\n-        itctx: &mut ImplTraitContext,\n+        itctx: &ImplTraitContext,\n     ) -> hir::PathSegment<'hir> {\n         debug!(\"path_span: {:?}, lower_path_segment(segment: {:?})\", path_span, segment,);\n         let (mut generic_args, infer_args) = if let Some(ref generic_args) = segment.args {\n@@ -316,7 +316,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         data: &AngleBracketedArgs,\n         param_mode: ParamMode,\n-        itctx: &mut ImplTraitContext,\n+        itctx: &ImplTraitContext,\n     ) -> (GenericArgsCtor<'hir>, bool) {\n         let has_non_lt_args = data.args.iter().any(|arg| match arg {\n             AngleBracketedArg::Arg(ast::GenericArg::Lifetime(_))\n@@ -350,14 +350,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // we generally don't permit such things (see #51008).\n         let ParenthesizedArgs { span, inputs, inputs_span, output } = data;\n         let inputs = self.arena.alloc_from_iter(inputs.iter().map(|ty| {\n-            self.lower_ty_direct(\n-                ty,\n-                &mut ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitParam),\n-            )\n+            self.lower_ty_direct(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitParam))\n         }));\n         let output_ty = match output {\n-            FnRetTy::Ty(ty) => self\n-                .lower_ty(&ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitReturn)),\n+            FnRetTy::Ty(ty) => {\n+                self.lower_ty(&ty, &ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitReturn))\n+            }\n             FnRetTy::Default(_) => self.arena.alloc(self.ty_tup(*span, &[])),\n         };\n         let args = smallvec![GenericArg::Type(self.arena.alloc(self.ty_tup(*inputs_span, inputs)))];"}]}