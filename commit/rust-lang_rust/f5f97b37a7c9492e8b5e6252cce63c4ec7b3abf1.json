{"sha": "f5f97b37a7c9492e8b5e6252cce63c4ec7b3abf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1Zjk3YjM3YTdjOTQ5MmU4YjVlNjI1MmNjZTYzYzRlYzdiM2FiZjE=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-07T03:57:04Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-07T03:57:04Z"}, "message": "update tests", "tree": {"sha": "58fca5cb9d2133f1b916e40c3b5160ac01f2dff3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58fca5cb9d2133f1b916e40c3b5160ac01f2dff3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5f97b37a7c9492e8b5e6252cce63c4ec7b3abf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f97b37a7c9492e8b5e6252cce63c4ec7b3abf1", "html_url": "https://github.com/rust-lang/rust/commit/f5f97b37a7c9492e8b5e6252cce63c4ec7b3abf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5f97b37a7c9492e8b5e6252cce63c4ec7b3abf1/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9c6dba5c4934033fd8aa1a51f432fbdb42d3ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c6dba5c4934033fd8aa1a51f432fbdb42d3ea3", "html_url": "https://github.com/rust-lang/rust/commit/b9c6dba5c4934033fd8aa1a51f432fbdb42d3ea3"}], "stats": {"total": 9, "additions": 3, "deletions": 6}, "files": [{"sha": "d6673f6a8a6fb6b77b506d79f4438ac9f11378a4", "filename": "src/test/ui/chalkify/lower_env1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5f97b37a7c9492e8b5e6252cce63c4ec7b3abf1/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5f97b37a7c9492e8b5e6252cce63c4ec7b3abf1/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr?ref=f5f97b37a7c9492e8b5e6252cce63c4ec7b3abf1", "patch": "@@ -7,7 +7,7 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n    = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n-   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Bar), WellFormed(Self: Foo).\n+   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo), WellFormed(Self: Foo).\n \n error: program clause dump\n   --> $DIR/lower_env1.rs:19:1\n@@ -20,7 +20,7 @@ LL | #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n    = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Foo) :- FromEnv(Self: Foo).\n    = note: Implemented(Self: std::marker::Sized) :- FromEnv(Self: std::marker::Sized).\n-   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Bar), WellFormed(Self: Foo).\n+   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo), WellFormed(Self: Foo).\n    = note: WellFormed(Self: Foo) :- Implemented(Self: Foo).\n    = note: WellFormed(Self: std::marker::Sized) :- Implemented(Self: std::marker::Sized).\n "}, {"sha": "afb2cd4b563329aa8e07f57de163ac70aeb9aa34", "filename": "src/test/ui/chalkify/lower_trait_higher_rank.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5f97b37a7c9492e8b5e6252cce63c4ec7b3abf1/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5f97b37a7c9492e8b5e6252cce63c4ec7b3abf1/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr?ref=f5f97b37a7c9492e8b5e6252cce63c4ec7b3abf1", "patch": "@@ -8,10 +8,7 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    = note: FromEnv(F: std::ops::Fn<(&'a (u8, u16),)>) :- FromEnv(Self: Foo<F>).\n    = note: Implemented(Self: Foo<F>) :- FromEnv(Self: Foo<F>).\n    = note: ProjectionEq(<F as std::ops::FnOnce<(&'a (u8, u16),)>>::Output == &'a u8) :- FromEnv(Self: Foo<F>).\n-   = note: WellFormed(Self: Foo<F>) :- Implemented(Self: Foo<F>), WellFormed(F: std::marker::Sized).\n-   = note: WellFormed(Self: Foo<F>) :- Implemented(Self: Foo<F>), forall<> { WellFormed(<F as std::ops::FnOnce<(&'a (u8, u16),)>>::Output == &'a u8) }.\n-   = note: WellFormed(Self: Foo<F>) :- Implemented(Self: Foo<F>), forall<> { WellFormed(F: std::ops::Fn<(&'a (u8, u16),)>) }.\n-   = note: WellFormed(Self: Foo<F>) :- Implemented(Self: Foo<F>), WellFormed(F: std::marker::Sized), forall<> { WellFormed(F: std::ops::Fn<(&'a (u8, u16),)>) }, forall<> { WellFormed(<F as std::ops::FnOnce<(&'a (u8, u16),)>>::Output == &'a u8) }.\n+   = note: WellFormed(Self: Foo<F>) :- Implemented(Self: Foo<F>), WellFormed(F: std::marker::Sized), forall<> { WellFormed(F: std::ops::Fn<(&'a (u8, u16),)>) }, forall<> { ProjectionEq(<F as std::ops::FnOnce<(&'a (u8, u16),)>>::Output == &'a u8) }.\n \n error: aborting due to previous error\n "}]}