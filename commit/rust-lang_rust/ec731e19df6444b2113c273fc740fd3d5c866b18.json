{"sha": "ec731e19df6444b2113c273fc740fd3d5c866b18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNzMxZTE5ZGY2NDQ0YjIxMTNjMjczZmM3NDBmZDNkNWM4NjZiMTg=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-20T21:55:16Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-21T09:45:37Z"}, "message": "Use smart case in flyimport items lookup", "tree": {"sha": "66c49dfa03ec355483f0eeaf188409e83048e7ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66c49dfa03ec355483f0eeaf188409e83048e7ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec731e19df6444b2113c273fc740fd3d5c866b18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec731e19df6444b2113c273fc740fd3d5c866b18", "html_url": "https://github.com/rust-lang/rust/commit/ec731e19df6444b2113c273fc740fd3d5c866b18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec731e19df6444b2113c273fc740fd3d5c866b18/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09412d85fc3137d6ada3b27170e14c287f1a1191", "url": "https://api.github.com/repos/rust-lang/rust/commits/09412d85fc3137d6ada3b27170e14c287f1a1191", "html_url": "https://github.com/rust-lang/rust/commit/09412d85fc3137d6ada3b27170e14c287f1a1191"}], "stats": {"total": 86, "additions": 80, "deletions": 6}, "files": [{"sha": "1ad01719829a303a92d8f207a80502c22ea5dbea", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 58, "deletions": 3, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ec731e19df6444b2113c273fc740fd3d5c866b18/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec731e19df6444b2113c273fc740fd3d5c866b18/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=ec731e19df6444b2113c273fc740fd3d5c866b18", "patch": "@@ -1,8 +1,10 @@\n //! Feature: completion with imports-on-the-fly\n //!\n //! When completing names in the current scope, proposes additional imports from other modules or crates,\n-//! if they can be qualified in the scope and their name contains all symbols from the completion input\n-//! (case-insensitive, in any order or places).\n+//! if they can be qualified in the scope and their name contains all symbols from the completion input.\n+//!\n+//! To be considered applicable, the name must contain all input symbols in the given order, not necessarily adjacent.\n+//! If any input symbol is not lowercased, the name must contain all symbols in exact case; otherwise the contaning is checked case-insensitively.\n //!\n //! ```\n //! fn main() {\n@@ -942,7 +944,7 @@ mod foo {\n }\n \n fn main() {\n-    bar::Ass$0\n+    bar::ASS$0\n }\"#,\n             expect![[]],\n         )\n@@ -979,4 +981,57 @@ fn main() {\n             expect![[]],\n         )\n     }\n+\n+    #[test]\n+    fn case_matters() {\n+        check(\n+            r#\"\n+mod foo {\n+    pub const TEST_CONST: usize = 3;\n+    pub fn test_function() -> i32 {\n+        4\n+    }\n+}\n+\n+fn main() {\n+    TE$0\n+}\"#,\n+            expect![[r#\"\n+        ct foo::TEST_CONST\n+    \"#]],\n+        );\n+\n+        check(\n+            r#\"\n+mod foo {\n+    pub const TEST_CONST: usize = 3;\n+    pub fn test_function() -> i32 {\n+        4\n+    }\n+}\n+\n+fn main() {\n+    te$0\n+}\"#,\n+            expect![[r#\"\n+        ct foo::TEST_CONST\n+        fn test_function() (foo::test_function) fn() -> i32\n+    \"#]],\n+        );\n+\n+        check(\n+            r#\"\n+mod foo {\n+    pub const TEST_CONST: usize = 3;\n+    pub fn test_function() -> i32 {\n+        4\n+    }\n+}\n+\n+fn main() {\n+    Te$0\n+}\"#,\n+            expect![[]],\n+        );\n+    }\n }"}, {"sha": "b9d5852e2b57c1e80aa665824fcecbb7574f804c", "filename": "crates/ide_db/src/items_locator.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ec731e19df6444b2113c273fc740fd3d5c866b18/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec731e19df6444b2113c273fc740fd3d5c866b18/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fitems_locator.rs?ref=ec731e19df6444b2113c273fc740fd3d5c866b18", "patch": "@@ -62,6 +62,8 @@ pub fn items_with_name(\n             (local_query, external_query)\n         }\n         NameToImport::Fuzzy(fuzzy_search_string) => {\n+            let mut local_query = symbol_index::Query::new(fuzzy_search_string.clone());\n+\n             let mut external_query = import_map::Query::new(fuzzy_search_string.clone())\n                 .search_mode(import_map::SearchMode::Fuzzy)\n                 .name_only();\n@@ -75,7 +77,12 @@ pub fn items_with_name(\n                 }\n             }\n \n-            (symbol_index::Query::new(fuzzy_search_string), external_query)\n+            if fuzzy_search_string.to_lowercase() != fuzzy_search_string {\n+                local_query.case_sensitive();\n+                external_query = external_query.case_sensitive();\n+            }\n+\n+            (local_query, external_query)\n         }\n     };\n "}, {"sha": "35e382b5cdb03846cfca01226eb5af84db282929", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec731e19df6444b2113c273fc740fd3d5c866b18/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec731e19df6444b2113c273fc740fd3d5c866b18/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=ec731e19df6444b2113c273fc740fd3d5c866b18", "patch": "@@ -52,6 +52,7 @@ pub struct Query {\n     only_types: bool,\n     libs: bool,\n     exact: bool,\n+    case_sensitive: bool,\n     limit: usize,\n }\n \n@@ -64,6 +65,7 @@ impl Query {\n             only_types: false,\n             libs: false,\n             exact: false,\n+            case_sensitive: false,\n             limit: usize::max_value(),\n         }\n     }\n@@ -80,6 +82,10 @@ impl Query {\n         self.exact = true;\n     }\n \n+    pub fn case_sensitive(&mut self) {\n+        self.case_sensitive = true;\n+    }\n+\n     pub fn limit(&mut self, limit: usize) {\n         self.limit = limit\n     }\n@@ -326,8 +332,14 @@ impl Query {\n                     if self.only_types && !symbol.kind.is_type() {\n                         continue;\n                     }\n-                    if self.exact && symbol.name != self.query {\n-                        continue;\n+                    if self.exact {\n+                        if symbol.name != self.query {\n+                            continue;\n+                        }\n+                    } else if self.case_sensitive {\n+                        if self.query.chars().any(|c| !symbol.name.contains(c)) {\n+                            continue;\n+                        }\n                     }\n \n                     res.push(symbol.clone());"}]}