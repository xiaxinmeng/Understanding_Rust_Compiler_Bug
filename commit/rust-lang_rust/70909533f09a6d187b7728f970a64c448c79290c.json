{"sha": "70909533f09a6d187b7728f970a64c448c79290c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOTA5NTMzZjA5YTZkMTg3Yjc3MjhmOTcwYTY0YzQ0OGM3OTI5MGM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-12T02:07:38Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-12T02:07:38Z"}, "message": "manual: rewrite the section on type kinds.", "tree": {"sha": "7cb0e26ac9d69053501c3edfa2dea259047238af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cb0e26ac9d69053501c3edfa2dea259047238af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70909533f09a6d187b7728f970a64c448c79290c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70909533f09a6d187b7728f970a64c448c79290c", "html_url": "https://github.com/rust-lang/rust/commit/70909533f09a6d187b7728f970a64c448c79290c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70909533f09a6d187b7728f970a64c448c79290c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bbff50c14c34d7c0c02f8062747bfedf3d21cd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbff50c14c34d7c0c02f8062747bfedf3d21cd3", "html_url": "https://github.com/rust-lang/rust/commit/9bbff50c14c34d7c0c02f8062747bfedf3d21cd3"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "dc247afc3d36adff97f54eff869b4a3e783b2b16", "filename": "doc/rust.md", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/70909533f09a6d187b7728f970a64c448c79290c/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/70909533f09a6d187b7728f970a64c448c79290c/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=70909533f09a6d187b7728f970a64c448c79290c", "patch": "@@ -2748,40 +2748,45 @@ call to the method `to_str`.\n \n ## Type kinds\n \n-Types in Rust are categorized into three kinds, based on whether they\n-allow copying of their values, and sending to different tasks. The\n-kinds are:\n-\n-Sendable\n-  : Values with a sendable type can be safely sent to another task.\n+Types in Rust are categorized into kinds, based on various properties of the components of the type.\n+The kinds are:\n+\n+`Const`\n+  : Types of this kind are deeply immutable;\n+    they contain no mutable memory locations directly or indirectly via pointers.\n+`Send`\n+  : Types of this kind can be safely sent between tasks.\n     This kind includes scalars, owning pointers, owned closures, and\n     structural types containing only other sendable types.\n-Copyable\n+`Owned`\n+  : Types of this kind do not contain any borrowed pointers;\n+    this can be a useful guarantee for code that breaks borrowing assumptions using [`unsafe` operations](#unsafe-functions).    \n+`Copy`\n   : This kind includes all types that can be copied. All types with\n     sendable kind are copyable, as are managed boxes, managed closures,\n     trait types, and structural types built out of these.\n-Noncopyable\n-  : [Resource](#resources) types, and every type that includes a\n-    resource without storing it in a managed box, may not be copied.\n-    Types of sendable or copyable type can always be used in places\n-    where a noncopyable type is expected, so in effect this kind\n-    includes all types.\n-\n-These form a hierarchy. The noncopyable kind is the widest, including\n-all types in the language. The copyable kind is a subset of that, and\n-the sendable kind is a subset of the copyable kind.\n-\n-Any operation that causes a value to be copied requires the type of\n-that value to be of copyable kind. Type parameter types are assumed to\n-be noncopyable, unless one of the special bounds `send` or `copy` is\n-declared for it. For example, this is not a valid program:\n+_Default_\n+  : Types with destructors, closure environments,\n+    and various other _non-first-class_ types,\n+    are not copyable at all.\n+    Such types can usually only be accessed through pointers,\n+    or in some cases, moved between mutable locations.\n+\n+Kinds can be supplied as _bounds_ on type parameters, like traits,\n+in which case the parameter is constrained to types satisfying that kind.\n+\n+By default, type parameters do not carry any assumed kind-bounds at all.\n+\n+Any operation that causes a value to be copied requires the type of that value to be of copyable kind,\n+so the `Copy` bound is frequently required on function type parameters.\n+For example, this is not a valid program:\n \n ~~~~{.xfail-test}\n fn box<T>(x: T) -> @T { @x }\n ~~~~\n \n-Putting `x` into a managed box involves copying, and the `T` parameter\n-is assumed to be noncopyable. To change that, a bound is declared:\n+Putting `x` into a managed box involves copying, and the `T` parameter has the default (non-copyable) kind.\n+To change that, a bound is declared:\n \n ~~~~\n fn box<T: Copy>(x: T) -> @T { @x }"}]}