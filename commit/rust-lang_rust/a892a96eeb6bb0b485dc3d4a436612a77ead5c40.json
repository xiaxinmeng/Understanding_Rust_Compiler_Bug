{"sha": "a892a96eeb6bb0b485dc3d4a436612a77ead5c40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4OTJhOTZlZWI2YmIwYjQ4NWRjM2Q0YTQzNjYxMmE3N2VhZDVjNDA=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-05-27T12:24:28Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-05-28T14:35:38Z"}, "message": "Rustup to *1.10.0-nightly (7bddce693 2016-05-27)*", "tree": {"sha": "c30ef9230280241caced4d3b95145a68f1ebf8d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c30ef9230280241caced4d3b95145a68f1ebf8d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a892a96eeb6bb0b485dc3d4a436612a77ead5c40", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXSay7AAoJEF5CfHlMukXoLLkQALdDap59aDRUtTy+Lne96tLH\ncOvuqY09A5mABcNYMczP9/fDj6nd363x6W2xaQFxQnDftTYmV5w8fDrKgue1GqS3\nwhnyB/7Exl2vJyuF97QosWOh/p2d+lV8wAjT9omunefjh06TKQE9YApReoE5n3E2\n5U9H7EMwR7F3YF4G+M31IklwEHpah8A7tE9tARB5fxWE6TLCF/0JvUb13vcrJj0b\nmH6C436OCy6ZFM7LytDpik0QGAtkwBMR9qJzRtr0IpLnwR2owss5iKivQiNNG8Dn\nGfH444Lkxv/3ZkC706DzYCiqDKkri657XGaYYnonLQF/sgle30sP0nOaImfRqVyQ\nPw/YwohTG+omPahGNZImdYSyNaOsM6cUHWVJW0uS4dI7FHvHnufAdCgGPheVL6+s\n9y2QF3Iv5IoMIxfH6DYmg1Lny/JcGNfqW2ilgfWZjHf6iqUy+tjUy16KhJcxbnLY\nzT4WVbTOX/MePOkgzzZkvsRMkLKHxfpnmcA1Y8xEv0J9rxw9M6KTIy9jH7EYoe/q\nPGJrZJehkqijgcr2NQ4lox2AxzBRiQabzqlCCiOgCqBBvTSVXYvQEAh2j3TsjbVY\nL2ypELMDB0lX8zyb0+ETYRBXj+YZItgtJPSHpRm0at5YutZ2F1xHttveyOcycvGY\n7RV/EM5k4IqusMMNZMJR\n=WF1Z\n-----END PGP SIGNATURE-----", "payload": "tree c30ef9230280241caced4d3b95145a68f1ebf8d2\nparent 71b41b6e01af2a68490f219a59a183873f5e1c64\nauthor mcarton <cartonmartin+git@gmail.com> 1464351868 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1464446138 +0200\n\nRustup to *1.10.0-nightly (7bddce693 2016-05-27)*\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a892a96eeb6bb0b485dc3d4a436612a77ead5c40", "html_url": "https://github.com/rust-lang/rust/commit/a892a96eeb6bb0b485dc3d4a436612a77ead5c40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71b41b6e01af2a68490f219a59a183873f5e1c64", "url": "https://api.github.com/repos/rust-lang/rust/commits/71b41b6e01af2a68490f219a59a183873f5e1c64", "html_url": "https://github.com/rust-lang/rust/commit/71b41b6e01af2a68490f219a59a183873f5e1c64"}], "stats": {"total": 75, "additions": 57, "deletions": 18}, "files": [{"sha": "3873e82b69ae84d0b97b5bc7fa8c4a21ecf561a6", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=a892a96eeb6bb0b485dc3d4a436612a77ead5c40", "patch": "@@ -187,7 +187,7 @@ fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> HashMap<Interned\n         match pat.node {\n             PatKind::Box(ref pat) |\n             PatKind::Ref(ref pat, _) => bindings_impl(cx, pat, map),\n-            PatKind::TupleStruct(_, Some(ref pats)) => {\n+            PatKind::TupleStruct(_, ref pats, _) => {\n                 for pat in pats {\n                     bindings_impl(cx, pat, map);\n                 }\n@@ -205,7 +205,7 @@ fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> HashMap<Interned\n                     bindings_impl(cx, &pat.node.pat, map);\n                 }\n             }\n-            PatKind::Tup(ref fields) => {\n+            PatKind::Tuple(ref fields, _) => {\n                 for pat in fields {\n                     bindings_impl(cx, pat, map);\n                 }\n@@ -221,7 +221,6 @@ fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> HashMap<Interned\n                     bindings_impl(cx, pat, map);\n                 }\n             }\n-            PatKind::TupleStruct(..) |\n             PatKind::Lit(..) |\n             PatKind::QPath(..) |\n             PatKind::Range(..) |"}, {"sha": "0123dec070fc92ba0e37b0d3628c535667938628", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=a892a96eeb6bb0b485dc3d4a436612a77ead5c40", "patch": "@@ -101,7 +101,7 @@ fn check_arg_is_display(cx: &LateContext, expr: &Expr) -> bool {\n         let ExprMatch(_, ref arms, _) = expr.node,\n         arms.len() == 1,\n         arms[0].pats.len() == 1,\n-        let PatKind::Tup(ref pat) = arms[0].pats[0].node,\n+        let PatKind::Tuple(ref pat, None) = arms[0].pats[0].node,\n         pat.len() == 1,\n         let ExprVec(ref exprs) = arms[0].body.node,\n         exprs.len() == 1,"}, {"sha": "c7f34d338b1d2b34502a5305a65e6425496b76bd", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=a892a96eeb6bb0b485dc3d4a436612a77ead5c40", "patch": "@@ -280,7 +280,7 @@ impl LateLintPass for LoopsPass {\n         }\n         if let ExprMatch(ref match_expr, ref arms, MatchSource::WhileLetDesugar) = expr.node {\n             let pat = &arms[0].pats[0].node;\n-            if let (&PatKind::TupleStruct(ref path, Some(ref pat_args)),\n+            if let (&PatKind::TupleStruct(ref path, ref pat_args, _),\n                     &ExprMethodCall(method_name, _, ref method_args)) = (pat, &match_expr.node) {\n                 let iter_expr = &method_args[0];\n                 if let Some(lhs_constructor) = path.segments.last() {\n@@ -575,7 +575,7 @@ fn check_for_loop_explicit_counter(cx: &LateContext, arg: &Expr, body: &Expr, ex\n \n /// Check for the `FOR_KV_MAP` lint.\n fn check_for_loop_over_map_kv(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, expr: &Expr) {\n-    if let PatKind::Tup(ref pat) = pat.node {\n+    if let PatKind::Tuple(ref pat, _) = pat.node {\n         if pat.len() == 2 {\n             let (pat_span, kind) = match (&pat[0].node, &pat[1].node) {\n                 (key, _) if pat_is_wild(key, body) => (&pat[1].span, \"values\"),"}, {"sha": "ad3b958f5855b84e96d979f82001d171754477c6", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=a892a96eeb6bb0b485dc3d4a436612a77ead5c40", "patch": "@@ -193,14 +193,13 @@ fn check_single_match_opt_like(cx: &LateContext, ex: &Expr, arms: &[Arm], expr:\n                        (&paths::RESULT, \"Ok\")];\n \n     let path = match arms[1].pats[0].node {\n-        PatKind::TupleStruct(ref path, Some(ref inner)) => {\n+        PatKind::TupleStruct(ref path, ref inner, _) => {\n             // contains any non wildcard patterns? e.g. Err(err)\n             if inner.iter().any(|pat| pat.node != PatKind::Wild) {\n                 return;\n             }\n             path.to_string()\n         }\n-        PatKind::TupleStruct(ref path, None) => path.to_string(),\n         PatKind::Ident(BindByValue(MutImmutable), ident, None) => ident.node.to_string(),\n         _ => return,\n     };"}, {"sha": "bdaef590de5175f5ef1016e1ec5c333e01f9130a", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=a892a96eeb6bb0b485dc3d4a436612a77ead5c40", "patch": "@@ -161,7 +161,7 @@ fn check_pat(cx: &LateContext, pat: &Pat, init: &Option<&Expr>, span: Span, bind\n                 }\n             }\n         }\n-        PatKind::Tup(ref inner) => {\n+        PatKind::Tuple(ref inner, _) => {\n             if let Some(ref init_tup) = *init {\n                 if let ExprTup(ref tup) = init_tup.node {\n                     for (i, p) in inner.iter().enumerate() {"}, {"sha": "6539b835dc7874b551e9a0cfe615ef3145b6c386", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=a892a96eeb6bb0b485dc3d4a436612a77ead5c40", "patch": "@@ -68,7 +68,7 @@ impl<'v> Visitor<'v> for UnusedLabelVisitor {\n                 self.labels.remove(&label.node.as_str());\n             }\n             hir::ExprLoop(_, Some(label)) | hir::ExprWhile(_, _, Some(label)) => {\n-                self.labels.insert(label.as_str(), expr.span);\n+                self.labels.insert(label.node.as_str(), expr.span);\n             }\n             _ => (),\n         }"}, {"sha": "92b14b65168eb0a2ed56a36638fda54c92607c97", "filename": "clippy_lints/src/utils/hir.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir.rs?ref=a892a96eeb6bb0b485dc3d4a436612a77ead5c40", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             }\n             (&ExprLit(ref l), &ExprLit(ref r)) => l.node == r.node,\n             (&ExprLoop(ref lb, ref ll), &ExprLoop(ref rb, ref rl)) => {\n-                self.eq_block(lb, rb) && both(ll, rl, |l, r| l.as_str() == r.as_str())\n+                self.eq_block(lb, rb) && both(ll, rl, |l, r| l.node.as_str() == r.node.as_str())\n             }\n             (&ExprMatch(ref le, ref la, ref ls), &ExprMatch(ref re, ref ra, ref rs)) => {\n                 ls == rs && self.eq_expr(le, re) &&\n@@ -124,7 +124,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&ExprUnary(l_op, ref le), &ExprUnary(r_op, ref re)) => l_op == r_op && self.eq_expr(le, re),\n             (&ExprVec(ref l), &ExprVec(ref r)) => self.eq_exprs(l, r),\n             (&ExprWhile(ref lc, ref lb, ref ll), &ExprWhile(ref rc, ref rb, ref rl)) => {\n-                self.eq_expr(lc, rc) && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.as_str() == r.as_str())\n+                self.eq_expr(lc, rc) && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.node.as_str() == r.node.as_str())\n             }\n             _ => false,\n         }\n@@ -142,8 +142,8 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     pub fn eq_pat(&self, left: &Pat, right: &Pat) -> bool {\n         match (&left.node, &right.node) {\n             (&PatKind::Box(ref l), &PatKind::Box(ref r)) => self.eq_pat(l, r),\n-            (&PatKind::TupleStruct(ref lp, ref la), &PatKind::TupleStruct(ref rp, ref ra)) => {\n-                self.eq_path(lp, rp) && both(la, ra, |l, r| over(l, r, |l, r| self.eq_pat(l, r)))\n+            (&PatKind::TupleStruct(ref lp, ref la, ls), &PatKind::TupleStruct(ref rp, ref ra, rs)) => {\n+                self.eq_path(lp, rp) && over(la, ra, |l, r| self.eq_pat(l, r)) && ls == rs\n             }\n             (&PatKind::Ident(ref lb, ref li, ref lp), &PatKind::Ident(ref rb, ref ri, ref rp)) => {\n                 lb == rb && li.node.as_str() == ri.node.as_str() && both(lp, rp, |l, r| self.eq_pat(l, r))\n@@ -152,7 +152,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&PatKind::QPath(ref ls, ref lp), &PatKind::QPath(ref rs, ref rp)) => {\n                 self.eq_qself(ls, rs) && self.eq_path(lp, rp)\n             }\n-            (&PatKind::Tup(ref l), &PatKind::Tup(ref r)) => over(l, r, |l, r| self.eq_pat(l, r)),\n+            (&PatKind::Tuple(ref l, ls), &PatKind::Tuple(ref r, rs)) => ls == rs && over(l, r, |l, r| self.eq_pat(l, r)),\n             (&PatKind::Range(ref ls, ref le), &PatKind::Range(ref rs, ref re)) => {\n                 self.eq_expr(ls, rs) && self.eq_expr(le, re)\n             }\n@@ -374,7 +374,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 c.hash(&mut self.s);\n                 self.hash_block(b);\n                 if let Some(i) = *i {\n-                    self.hash_name(&i);\n+                    self.hash_name(&i.node);\n                 }\n             }\n             ExprMatch(ref e, ref arms, ref s) => {\n@@ -468,7 +468,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(cond);\n                 self.hash_block(b);\n                 if let Some(l) = l {\n-                    self.hash_name(&l);\n+                    self.hash_name(&l.node);\n                 }\n             }\n         }"}, {"sha": "c1cbd7ffe93a4a1537d70ed34096dc1e9f47cfde", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=a892a96eeb6bb0b485dc3d4a436612a77ead5c40", "patch": "@@ -828,7 +828,7 @@ pub fn recover_for_loop(expr: &Expr) -> Option<(&Pat, &Expr, &Expr)> {\n             let Some(ref loopexpr) = block.expr,\n             let ExprMatch(_, ref innerarms, MatchSource::ForLoopDesugar) = loopexpr.node,\n             innerarms.len() == 2 && innerarms[0].pats.len() == 1,\n-            let PatKind::TupleStruct(_, Some(ref somepats)) = innerarms[0].pats[0].node,\n+            let PatKind::TupleStruct(_, ref somepats, _) = innerarms[0].pats[0].node,\n             somepats.len() == 1\n         ], {\n             return Some((&somepats[0],"}, {"sha": "6f3076f7775b650b0772c644a06d2c426da249d6", "filename": "tests/compile-fail/copies.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/tests%2Fcompile-fail%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a892a96eeb6bb0b485dc3d4a436612a77ead5c40/tests%2Fcompile-fail%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopies.rs?ref=a892a96eeb6bb0b485dc3d4a436612a77ead5c40", "patch": "@@ -1,4 +1,5 @@\n #![feature(plugin, inclusive_range_syntax)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![plugin(clippy)]\n \n #![allow(dead_code, no_effect, unnecessary_operation)]\n@@ -129,6 +130,34 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         if let Some(a) = Some(42) {}\n     }\n \n+    if true {\n+        if let (1, .., 3) = (1, 2, 3) {}\n+    }\n+    else { //~ERROR this `if` has identical blocks\n+        if let (1, .., 3) = (1, 2, 3) {}\n+    }\n+\n+    if true {\n+        if let (1, .., 3) = (1, 2, 3) {}\n+    }\n+    else {\n+        if let (.., 3) = (1, 2, 3) {}\n+    }\n+\n+    if true {\n+        if let (1, .., 3) = (1, 2, 3) {}\n+    }\n+    else {\n+        if let (.., 4) = (1, 2, 3) {}\n+    }\n+\n+    if true {\n+        if let (1, .., 3) = (1, 2, 3) {}\n+    }\n+    else {\n+        if let (.., 1, 3) = (1, 2, 3) {}\n+    }\n+\n     if true {\n         if let Some(a) = Some(42) {}\n     }\n@@ -165,6 +194,18 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         _ => (),\n     }\n \n+    match (Some(42), Some(42)) {\n+        (Some(a), ..) => bar(a),\n+        (.., Some(a)) => bar(a), //~ERROR this `match` has identical arm bodies\n+        _ => (),\n+    }\n+\n+    match (1, 2, 3) {\n+        (1, .., 3) => 42,\n+        (.., 3) => 42, //~ERROR this `match` has identical arm bodies\n+        _ => 0,\n+    };\n+\n     match (Some(42), Some(\"\")) {\n         (Some(a), None) => bar(a),\n         (None, Some(a)) => bar(a), // bindings have different types"}]}