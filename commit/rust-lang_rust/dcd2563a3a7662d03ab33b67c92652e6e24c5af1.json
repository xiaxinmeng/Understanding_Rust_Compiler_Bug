{"sha": "dcd2563a3a7662d03ab33b67c92652e6e24c5af1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZDI1NjNhM2E3NjYyZDAzYWIzM2I2N2M5MjY1MmU2ZTI0YzVhZjE=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-06T23:42:02Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-08T01:22:27Z"}, "message": "Removing the synchronized memory region from tasks.", "tree": {"sha": "2aa007c80ad5a189a5cda31529edde2182fa5648", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2aa007c80ad5a189a5cda31529edde2182fa5648"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcd2563a3a7662d03ab33b67c92652e6e24c5af1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcd2563a3a7662d03ab33b67c92652e6e24c5af1", "html_url": "https://github.com/rust-lang/rust/commit/dcd2563a3a7662d03ab33b67c92652e6e24c5af1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcd2563a3a7662d03ab33b67c92652e6e24c5af1/comments", "author": null, "committer": null, "parents": [{"sha": "a0f45f4456de5e9811d80b20df243d7078c45918", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f45f4456de5e9811d80b20df243d7078c45918", "html_url": "https://github.com/rust-lang/rust/commit/a0f45f4456de5e9811d80b20df243d7078c45918"}], "stats": {"total": 119, "additions": 21, "deletions": 98}, "files": [{"sha": "edf8d27eb2d83555526242f1401dd01750f13533", "filename": "src/rt/memory.h", "status": "modified", "additions": 5, "deletions": 31, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/dcd2563a3a7662d03ab33b67c92652e6e24c5af1/src%2Frt%2Fmemory.h", "raw_url": "https://github.com/rust-lang/rust/raw/dcd2563a3a7662d03ab33b67c92652e6e24c5af1/src%2Frt%2Fmemory.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory.h?ref=dcd2563a3a7662d03ab33b67c92652e6e24c5af1", "patch": "@@ -11,49 +11,23 @@ inline void *operator new(size_t size, rust_kernel *kernel) {\n }\n \n inline void *operator new(size_t size, rust_task *task) {\n-    return task->malloc(size, memory_region::LOCAL);\n+    return task->malloc(size);\n }\n \n inline void *operator new[](size_t size, rust_task *task) {\n-    return task->malloc(size, memory_region::LOCAL);\n+    return task->malloc(size);\n }\n \n inline void *operator new(size_t size, rust_task &task) {\n-    return task.malloc(size, memory_region::LOCAL);\n+    return task.malloc(size);\n }\n \n inline void *operator new[](size_t size, rust_task &task) {\n-    return task.malloc(size, memory_region::LOCAL);\n-}\n-\n-inline void *operator new(size_t size, rust_task *task,\n-    memory_region::memory_region_type type) {\n-    return task->malloc(size, type);\n-}\n-\n-inline void *operator new[](size_t size, rust_task *task,\n-    memory_region::memory_region_type type) {\n-    return task->malloc(size, type);\n-}\n-\n-inline void *operator new(size_t size, rust_task &task,\n-    memory_region::memory_region_type type) {\n-    return task.malloc(size, type);\n-}\n-\n-inline void *operator new[](size_t size, rust_task &task,\n-    memory_region::memory_region_type type) {\n-    return task.malloc(size, type);\n+    return task.malloc(size);\n }\n \n inline void operator delete(void *mem, rust_task *task) {\n-    task->free(mem, memory_region::LOCAL);\n-    return;\n-}\n-\n-inline void operator delete(void *mem, rust_task *task,\n-    memory_region::memory_region_type type) {\n-    task->free(mem, type);\n+    task->free(mem);\n     return;\n }\n "}, {"sha": "a72faf76338ea805a4a7492e71d8e83342ef82a6", "filename": "src/rt/memory_region.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dcd2563a3a7662d03ab33b67c92652e6e24c5af1/src%2Frt%2Fmemory_region.h", "raw_url": "https://github.com/rust-lang/rust/raw/dcd2563a3a7662d03ab33b67c92652e6e24c5af1/src%2Frt%2Fmemory_region.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.h?ref=dcd2563a3a7662d03ab33b67c92652e6e24c5af1", "patch": "@@ -23,9 +23,6 @@ class memory_region {\n     const bool _synchronized;\n     lock_and_signal _lock;\n public:\n-    enum memory_region_type {\n-        LOCAL = 0x1, SYNCHRONIZED = 0x2\n-    };\n     memory_region(rust_srv *srv, bool synchronized);\n     memory_region(memory_region *parent);\n     void *malloc(size_t size);"}, {"sha": "f97040928a05a7d85a0c611c5df3594f08dbb850", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dcd2563a3a7662d03ab33b67c92652e6e24c5af1/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dcd2563a3a7662d03ab33b67c92652e6e24c5af1/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=dcd2563a3a7662d03ab33b67c92652e6e24c5af1", "patch": "@@ -42,7 +42,7 @@ last_os_error(rust_task *task) {\n #endif\n     size_t fill = strlen(buf) + 1;\n     size_t alloc = next_power_of_two(sizeof(rust_str) + fill);\n-    void *mem = task->malloc(alloc, memory_region::LOCAL);\n+    void *mem = task->malloc(alloc);\n     if (!mem) {\n         task->fail(1);\n         return NULL;\n@@ -74,7 +74,7 @@ rust_getcwd(rust_task *task) {\n \n     size_t fill = strlen(cbuf) + 1;\n     size_t alloc = next_power_of_two(sizeof(rust_str) + fill);\n-    void *mem = task->malloc(alloc, memory_region::LOCAL);\n+    void *mem = task->malloc(alloc);\n     if (!mem) {\n         task->fail(1);\n         return NULL;\n@@ -201,7 +201,7 @@ vec_alloc_with_data(rust_task *task,\n {\n     rust_scheduler *sched = task->sched;\n     size_t alloc = next_power_of_two(sizeof(rust_vec) + (n_elts * elt_size));\n-    void *mem = task->malloc(alloc, memory_region::LOCAL);\n+    void *mem = task->malloc(alloc);\n     if (!mem) return NULL;\n     return new (mem) rust_vec(sched, alloc, fill * elt_size, (uint8_t*)d);\n }\n@@ -635,8 +635,9 @@ ivec_reserve(rust_task *task, type_desc *ty, rust_ivec *v, size_t n_elems)\n         v->payload.ptr = heap_part;\n     } else {\n         // On heap; resize.\n-        heap_part = (rust_ivec_heap *)task->realloc(v->payload.ptr,\n-                                                new_alloc + sizeof(size_t));\n+        heap_part = (rust_ivec_heap *)\n+            task->realloc(v->payload.ptr,\n+                          new_alloc + sizeof(size_t));\n         v->payload.ptr = heap_part;\n     }\n "}, {"sha": "1587176fc8a91699911f4a245f632c5142291b09", "filename": "src/rt/rust_srv.cpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dcd2563a3a7662d03ab33b67c92652e6e24c5af1/src%2Frt%2Frust_srv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dcd2563a3a7662d03ab33b67c92652e6e24c5af1/src%2Frt%2Frust_srv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_srv.cpp?ref=dcd2563a3a7662d03ab33b67c92652e6e24c5af1", "patch": "@@ -6,8 +6,7 @@\n #include \"rust_srv.h\"\n \n rust_srv::rust_srv() :\n-    local_region(this, false),\n-    synchronized_region(this, true) {\n+    local_region(this, false) {\n     // Nop.\n }\n "}, {"sha": "beec5d703451e2e4a87f8e07a9454b18d08ce2ae", "filename": "src/rt/rust_srv.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcd2563a3a7662d03ab33b67c92652e6e24c5af1/src%2Frt%2Frust_srv.h", "raw_url": "https://github.com/rust-lang/rust/raw/dcd2563a3a7662d03ab33b67c92652e6e24c5af1/src%2Frt%2Frust_srv.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_srv.h?ref=dcd2563a3a7662d03ab33b67c92652e6e24c5af1", "patch": "@@ -1,3 +1,4 @@\n+// -*- c++ -*-\n #ifndef RUST_SRV_H\n #define RUST_SRV_H\n \n@@ -6,7 +7,6 @@\n class rust_srv {\n public:\n     memory_region local_region;\n-    memory_region synchronized_region;\n     virtual void log(char const *msg);\n     virtual void fatal(char const *expression,\n         char const *file,"}, {"sha": "721f5b0ed2039bf378a5ae37ca8e8842f6c113c8", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 8, "deletions": 50, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/dcd2563a3a7662d03ab33b67c92652e6e24c5af1/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dcd2563a3a7662d03ab33b67c92652e6e24c5af1/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=dcd2563a3a7662d03ab33b67c92652e6e24c5af1", "patch": "@@ -73,7 +73,6 @@ rust_task::rust_task(rust_scheduler *sched, rust_task_list *state,\n     running_on(-1),\n     pinned_on(-1),\n     local_region(&sched->srv->local_region),\n-    synchronized_region(&sched->srv->synchronized_region),\n     _on_wakeup(NULL)\n {\n     LOGPTR(sched, \"new task\", (uintptr_t)this);\n@@ -326,7 +325,7 @@ rust_task::malloc(size_t sz, type_desc *td)\n     if (td) {\n         sz += sizeof(gc_alloc);\n     }\n-    void *mem = malloc(sz, memory_region::LOCAL);\n+    void *mem = local_region.malloc(sz);\n     if (!mem)\n         return mem;\n     if (td) {\n@@ -353,7 +352,7 @@ rust_task::realloc(void *data, size_t sz, bool is_gc)\n         gc_alloc *gcm = (gc_alloc*)(((char *)data) - sizeof(gc_alloc));\n         unlink_gc(gcm);\n         sz += sizeof(gc_alloc);\n-        gcm = (gc_alloc*) realloc((void*)gcm, sz, memory_region::LOCAL);\n+        gcm = (gc_alloc*) local_region.realloc((void*)gcm, sz);\n         DLOG(sched, task, \"task %s @0x%\" PRIxPTR\n              \" reallocated %d GC bytes = 0x%\" PRIxPTR,\n              name, (uintptr_t)this, sz, gcm);\n@@ -362,7 +361,7 @@ rust_task::realloc(void *data, size_t sz, bool is_gc)\n         link_gc(gcm);\n         data = (void*) &(gcm->data);\n     } else {\n-        data = realloc(data, sz, memory_region::LOCAL);\n+        data = local_region.realloc(data, sz);\n     }\n     return data;\n }\n@@ -379,9 +378,11 @@ rust_task::free(void *p, bool is_gc)\n         DLOG(sched, mem,\n              \"task %s @0x%\" PRIxPTR \" freeing GC memory = 0x%\" PRIxPTR,\n              name, (uintptr_t)this, gcm);\n-        free(gcm, memory_region::LOCAL);\n+        DLOG(sched, mem, \"rust_task::free(0x%\" PRIxPTR \")\", gcm);\n+        local_region.free(gcm);\n     } else {\n-        free(p, memory_region::LOCAL);\n+        DLOG(sched, mem, \"rust_task::free(0x%\" PRIxPTR \")\", p);\n+        local_region.free(p);\n     }\n }\n \n@@ -473,52 +474,9 @@ bool rust_task::can_schedule(int id)\n         (pinned_on == -1 || pinned_on == id);\n }\n \n-void *\n-rust_task::malloc(size_t size, memory_region::memory_region_type type) {\n-    if (type == memory_region::LOCAL) {\n-        return local_region.malloc(size);\n-    } else if (type == memory_region::SYNCHRONIZED) {\n-        return synchronized_region.malloc(size);\n-    }\n-    I(sched, false);\n-    return NULL;\n-}\n-\n void *\n rust_task::calloc(size_t size) {\n-    return calloc(size, memory_region::LOCAL);\n-}\n-\n-void *\n-rust_task::calloc(size_t size, memory_region::memory_region_type type) {\n-    if (type == memory_region::LOCAL) {\n-        return local_region.calloc(size);\n-    } else if (type == memory_region::SYNCHRONIZED) {\n-        return synchronized_region.calloc(size);\n-    }\n-    return NULL;\n-}\n-\n-void *\n-rust_task::realloc(void *mem, size_t size,\n-    memory_region::memory_region_type type) {\n-    if (type == memory_region::LOCAL) {\n-        return local_region.realloc(mem, size);\n-    } else if (type == memory_region::SYNCHRONIZED) {\n-        return synchronized_region.realloc(mem, size);\n-    }\n-    return NULL;\n-}\n-\n-void\n-rust_task::free(void *mem, memory_region::memory_region_type type) {\n-    DLOG(sched, mem, \"rust_task::free(0x%\" PRIxPTR \")\", mem);\n-    if (type == memory_region::LOCAL) {\n-        local_region.free(mem);\n-    } else if (type == memory_region::SYNCHRONIZED) {\n-        synchronized_region.free(mem);\n-    }\n-    return;\n+    return local_region.calloc(size);\n }\n \n void rust_task::pin() {"}, {"sha": "e15f105222bf6be8129d145003a815a9d3d69051", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcd2563a3a7662d03ab33b67c92652e6e24c5af1/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/dcd2563a3a7662d03ab33b67c92652e6e24c5af1/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=dcd2563a3a7662d03ab33b67c92652e6e24c5af1", "patch": "@@ -81,7 +81,6 @@ rust_task : public maybe_proxy<rust_task>,\n     int pinned_on;\n \n     memory_region local_region;\n-    memory_region synchronized_region;\n \n     class wakeup_callback {\n     public:\n@@ -153,12 +152,7 @@ rust_task : public maybe_proxy<rust_task>,\n \n     bool can_schedule(int worker);\n \n-    void *malloc(size_t size, memory_region::memory_region_type type);\n     void *calloc(size_t size);\n-    void *calloc(size_t size, memory_region::memory_region_type type);\n-    void *realloc(void *mem, size_t size,\n-        memory_region::memory_region_type type);\n-    void free(void *mem, memory_region::memory_region_type type);\n \n     void pin();\n     void pin(int id);"}]}