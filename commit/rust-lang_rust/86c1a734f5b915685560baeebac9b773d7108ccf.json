{"sha": "86c1a734f5b915685560baeebac9b773d7108ccf", "node_id": "C_kwDOAAsO6NoAKDg2YzFhNzM0ZjViOTE1Njg1NTYwYmFlZWJhYzliNzczZDcxMDhjY2Y", "commit": {"author": {"name": "Vincenzo Palazzo", "email": "vincenzopalazzodev@gmail.com", "date": "2022-06-22T22:06:34Z"}, "committer": {"name": "Vincenzo Palazzo", "email": "vincenzopalazzodev@gmail.com", "date": "2022-06-30T00:13:24Z"}, "message": "ui test: add test of blanklet implementation\n\nSigned-off-by: Vincenzo Palazzo <vincenzopalazzodev@gmail.com>", "tree": {"sha": "f5d07e42ccd98b32b72eb985bfeb6b7e9bad2f9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5d07e42ccd98b32b72eb985bfeb6b7e9bad2f9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86c1a734f5b915685560baeebac9b773d7108ccf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE3eMWwQll8j3M3QQgi23CuHC4DV8FAmK86rQACgkQi23CuHC4\nDV/w2xAAocmTOGQTZi1vcafi3kSO1dhDjiTsVgx6gX36Ak1m1J6ZQDzSjfVd4WeG\n6ZfCIICczclmkVwG9pMWZzheRnRsDn8jbbB1Wr3SUwD+0mXJDTusVj/Xy2p8j707\nn71Iuj4e3FrthNbDrfG+DPGHSqKE27H3v1E0dGApH9+2KSrMo1PW3MQWh7Na5vWe\nsbT9erjVxDzA0DUcbwPjbq/0z1iwskst+6z1mTFIhsfeFugC2i/Vs0W3fmQp2LAc\n9sKHW4C0KJdX5Pk0QrnnK8xKvTZtFxVLOOQvfxQpCIyT0zC94JIobBvH1zfnGDx3\njrC7Tz9uoZgOYrLcwUKtjy7Iaqar00thy2rKfdx1WSNsVKBt0w3YsnyDOhBx2TSk\nFOfXRO5dDqutrrmn0qLK/gvU6hlM7IXrcbWMosLzDuaf3IxF72zf35XPjAsIANmA\nZe16XcHXMOCqb3Hect80MRksuOUFvGRkaB8MhjElMsXKidvBbXimNddCRlb3UVtF\ncPZeQP4WFgsTZqZN2+T3+pVc/Rjy7dxfvbJHeh+pX/NVpYeXdc3QLC7x7iqpUzSG\nXI2DrJzvwvlu/00V8qej7xFlc8cknlahjuRNCxQYYZGz9xCz+TUklh2aZ2O9ioe5\nKTsBfVSvEqEW9YWaGO2w1ixQK8uzL8ZaBclHzC5AVOZUR8o+ICM=\n=FRta\n-----END PGP SIGNATURE-----", "payload": "tree f5d07e42ccd98b32b72eb985bfeb6b7e9bad2f9f\nparent 81abfe3913fa3aac1d052b93d26f6a8f642d0ac0\nauthor Vincenzo Palazzo <vincenzopalazzodev@gmail.com> 1655935594 +0100\ncommitter Vincenzo Palazzo <vincenzopalazzodev@gmail.com> 1656548004 +0100\n\nui test: add test of blanklet implementation\n\nSigned-off-by: Vincenzo Palazzo <vincenzopalazzodev@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86c1a734f5b915685560baeebac9b773d7108ccf", "html_url": "https://github.com/rust-lang/rust/commit/86c1a734f5b915685560baeebac9b773d7108ccf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86c1a734f5b915685560baeebac9b773d7108ccf/comments", "author": {"login": "vincenzopalazzo", "id": 17150045, "node_id": "MDQ6VXNlcjE3MTUwMDQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17150045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vincenzopalazzo", "html_url": "https://github.com/vincenzopalazzo", "followers_url": "https://api.github.com/users/vincenzopalazzo/followers", "following_url": "https://api.github.com/users/vincenzopalazzo/following{/other_user}", "gists_url": "https://api.github.com/users/vincenzopalazzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vincenzopalazzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vincenzopalazzo/subscriptions", "organizations_url": "https://api.github.com/users/vincenzopalazzo/orgs", "repos_url": "https://api.github.com/users/vincenzopalazzo/repos", "events_url": "https://api.github.com/users/vincenzopalazzo/events{/privacy}", "received_events_url": "https://api.github.com/users/vincenzopalazzo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vincenzopalazzo", "id": 17150045, "node_id": "MDQ6VXNlcjE3MTUwMDQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17150045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vincenzopalazzo", "html_url": "https://github.com/vincenzopalazzo", "followers_url": "https://api.github.com/users/vincenzopalazzo/followers", "following_url": "https://api.github.com/users/vincenzopalazzo/following{/other_user}", "gists_url": "https://api.github.com/users/vincenzopalazzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vincenzopalazzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vincenzopalazzo/subscriptions", "organizations_url": "https://api.github.com/users/vincenzopalazzo/orgs", "repos_url": "https://api.github.com/users/vincenzopalazzo/repos", "events_url": "https://api.github.com/users/vincenzopalazzo/events{/privacy}", "received_events_url": "https://api.github.com/users/vincenzopalazzo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81abfe3913fa3aac1d052b93d26f6a8f642d0ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/81abfe3913fa3aac1d052b93d26f6a8f642d0ac0", "html_url": "https://github.com/rust-lang/rust/commit/81abfe3913fa3aac1d052b93d26f6a8f642d0ac0"}], "stats": {"total": 218, "additions": 187, "deletions": 31}, "files": [{"sha": "0347e7fc4168d2dac64ab62138f3d2e939484600", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 44, "deletions": 31, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/86c1a734f5b915685560baeebac9b773d7108ccf/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c1a734f5b915685560baeebac9b773d7108ccf/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=86c1a734f5b915685560baeebac9b773d7108ccf", "patch": "@@ -38,7 +38,9 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::astconv_object_safety_violations;\n-use rustc_trait_selection::traits::error_reporting::report_object_safety_error;\n+use rustc_trait_selection::traits::error_reporting::{\n+    report_object_safety_error, suggestions::NextTypeParamName,\n+};\n use rustc_trait_selection::traits::wf::object_region_bounds;\n \n use smallvec::SmallVec;\n@@ -2986,48 +2988,48 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         Some(r)\n     }\n \n-    /// make sure that we are in the condition to suggest the blanket implementation, if we are in the\n-    /// case of suggest it, use the function `err_reporter` to report the error or suggestion.\n+    /// Make sure that we are in the condition to suggest the blanket implementation.\n     fn maybe_lint_blanket_trait_impl<T: rustc_errors::EmissionGuarantee>(\n         &self,\n         self_ty: &hir::Ty<'_>,\n-        diagnostic: &mut DiagnosticBuilder<'_, T>,\n+        diag: &mut DiagnosticBuilder<'_, T>,\n     ) {\n         let tcx = self.tcx();\n         let parent_id = tcx.hir().get_parent_item(self_ty.hir_id);\n         if let hir::Node::Item(hir::Item {\n             kind:\n                 hir::ItemKind::Impl(hir::Impl {\n-                    self_ty: impl_self_typ, of_trait: Some(trait_ref), generics, ..\n+                    self_ty: impl_self_ty, of_trait: Some(of_trait_ref), generics, ..\n                 }),\n             ..\n-        }) = tcx.hir().get_by_def_id(parent_id) && self_ty.hir_id == impl_self_typ.hir_id\n+        }) = tcx.hir().get_by_def_id(parent_id) && self_ty.hir_id == impl_self_ty.hir_id\n         {\n-            let trait_span = trait_ref.path.span;\n-            let target_span = if let Some(span) = generics.span_for_param_suggestion() {\n-                span\n+            if !of_trait_ref.trait_def_id().map_or(false, |def_id| def_id.is_local()) {\n+                return;\n+            }\n+            let of_trait_span = of_trait_ref.path.span;\n+            // make sure that we are not calling unwrap to abort during the compilation\n+            let Ok(impl_trait_name) = tcx.sess.source_map().span_to_snippet(self_ty.span) else { return; };\n+            let Ok(of_trait_name) = tcx.sess.source_map().span_to_snippet(of_trait_span) else { return; };\n+            // check if the trait has generics, to make a correct suggestion\n+            let param_name = generics.params.next_type_param_name(None);\n+\n+            let add_generic_sugg = if let Some(span) = generics.span_for_param_suggestion() {\n+                let param_name = generics.params.next_type_param_name(Some(&impl_trait_name));\n+                (span, format!(\", {}: {}\", param_name, impl_trait_name))\n             } else {\n-                trait_span\n+                (generics.span, format!(\"<{}: {}>\", param_name, impl_trait_name))\n             };\n-            let is_local = trait_ref.trait_def_id().map_or(false, |def_id| def_id.is_local());\n-            if is_local {\n-                let trait_name = tcx.sess.source_map().span_to_snippet(trait_span).unwrap();\n-                let self_name = tcx.sess.source_map().span_to_snippet(self_ty.span).unwrap();\n-                let blanket_msg = format!(\n-                    \"use a blanket implementation to implement {} for all types that also implement {}\",\n-                    trait_name, self_name\n-                );\n-                let blanket_sugg = vec![\n-                    (target_span, \"<T: \".to_owned()),\n-                    (trait_span.shrink_to_hi(), format!(\"{}>\", self_name)),\n-                    (self_ty.span, \"T\".to_owned()),\n-                ];\n-                diagnostic.multipart_suggestion(\n-                    blanket_msg,\n-                    blanket_sugg,\n-                    Applicability::Unspecified,\n-                );\n-            }\n+            diag.multipart_suggestion(\n+            format!(\"alternatively use a blanket \\\n+                     implementation to implement `{of_trait_name}` for \\\n+                     all types that also implement `{impl_trait_name}`\"),\n+                vec![\n+                    (self_ty.span, param_name),\n+                    add_generic_sugg,\n+                ],\n+                Applicability::MaybeIncorrect,\n+            );\n         }\n     }\n \n@@ -3045,6 +3047,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     .map_or(false, |s| s.trim_end().ends_with('<'));\n \n             let is_global = poly_trait_ref.trait_ref.path.is_global();\n+            let is_local = if let Some(def_id) = poly_trait_ref.trait_ref.trait_def_id() {\n+                def_id.is_local()\n+            } else {\n+                false\n+            };\n             let sugg = Vec::from_iter([\n                 (\n                     self_ty.span.shrink_to_lo(),\n@@ -3069,7 +3076,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let mut diag =\n                     rustc_errors::struct_span_err!(tcx.sess, self_ty.span, E0782, \"{}\", msg);\n                 diag.multipart_suggestion_verbose(label, sugg, Applicability::MachineApplicable);\n-                self.maybe_lint_blanket_trait_impl(&self_ty, &mut diag);\n+                // check if the impl trait that we are considering is a impl of a local trait\n+                if is_local {\n+                    self.maybe_lint_blanket_trait_impl(&self_ty, &mut diag);\n+                }\n                 diag.emit();\n             } else {\n                 let msg = \"trait objects without an explicit `dyn` are deprecated\";\n@@ -3084,7 +3094,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             sugg,\n                             Applicability::MachineApplicable,\n                         );\n-                        self.maybe_lint_blanket_trait_impl::<()>(&self_ty, &mut diag);\n+                        // check if the impl trait that we are considering is a impl of a local trait\n+                        if is_local {\n+                            self.maybe_lint_blanket_trait_impl::<()>(&self_ty, &mut diag);\n+                        }\n                         diag.emit();\n                     },\n                 );"}, {"sha": "61798c61cd01649d0debd84da7fbf889ea4de3ce", "filename": "src/test/ui/suggestions/suggest-blanket-impl-local-trait.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/86c1a734f5b915685560baeebac9b773d7108ccf/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c1a734f5b915685560baeebac9b773d7108ccf/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.rs?ref=86c1a734f5b915685560baeebac9b773d7108ccf", "patch": "@@ -0,0 +1,44 @@\n+// Ensure that the compiler include the blanklet implementation suggestion\n+// when inside a `impl` statment are used two local traits.\n+//\n+// edition:2021\n+use std::fmt;\n+\n+trait LocalTraitOne { }\n+\n+trait LocalTraitTwo { }\n+\n+trait GenericTrait<T> {}\n+\n+impl LocalTraitTwo for LocalTraitOne {}\n+//~^ ERROR trait objects must include the `dyn` keyword\n+\n+impl fmt::Display for LocalTraitOne {\n+//~^ ERROR trait objects must include the `dyn` keyword\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        todo!();\n+    }\n+}\n+\n+impl fmt::Display for LocalTraitTwo + Send {\n+//~^ ERROR trait objects must include the `dyn` keyword\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        todo!();\n+    }\n+}\n+\n+impl LocalTraitOne for fmt::Display {}\n+//~^ ERROR trait objects must include the `dyn` keyword\n+\n+impl LocalTraitOne for fmt::Display + Send {}\n+//~^ ERROR trait objects must include the `dyn` keyword\n+\n+impl<E> GenericTrait<E> for LocalTraitOne {}\n+//~^ ERROR trait objects must include the `dyn` keyword\n+\n+trait GenericTraitTwo<T> {}\n+\n+impl<T, E> GenericTraitTwo<E> for GenericTrait<T> {}\n+//~^ ERROR trait objects must include the `dyn` keyword\n+\n+fn main() {}"}, {"sha": "014d9dd2232a38a83254de8aa13d3afa660d56ad", "filename": "src/test/ui/suggestions/suggest-blanket-impl-local-trait.stderr", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/86c1a734f5b915685560baeebac9b773d7108ccf/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86c1a734f5b915685560baeebac9b773d7108ccf/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.stderr?ref=86c1a734f5b915685560baeebac9b773d7108ccf", "patch": "@@ -0,0 +1,99 @@\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/suggest-blanket-impl-local-trait.rs:13:24\n+   |\n+LL | impl LocalTraitTwo for LocalTraitOne {}\n+   |                        ^^^^^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL - impl LocalTraitTwo for LocalTraitOne {}\n+LL + impl LocalTraitTwo for dyn LocalTraitOne {}\n+   | \n+help: alternatively use a blanket implementation to implement `LocalTraitTwo` for all types that also implement `LocalTraitOne`\n+   |\n+LL | impl<T: LocalTraitOne> LocalTraitTwo for T {}\n+   |     ++++++++++++++++++                   ~\n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/suggest-blanket-impl-local-trait.rs:16:23\n+   |\n+LL | impl fmt::Display for LocalTraitOne {\n+   |                       ^^^^^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL - impl fmt::Display for LocalTraitOne {\n+LL + impl fmt::Display for dyn LocalTraitOne {\n+   | \n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/suggest-blanket-impl-local-trait.rs:23:23\n+   |\n+LL | impl fmt::Display for LocalTraitTwo + Send {\n+   |                       ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL - impl fmt::Display for LocalTraitTwo + Send {\n+LL + impl fmt::Display for dyn LocalTraitTwo + Send {\n+   | \n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/suggest-blanket-impl-local-trait.rs:30:24\n+   |\n+LL | impl LocalTraitOne for fmt::Display {}\n+   |                        ^^^^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL - impl LocalTraitOne for fmt::Display {}\n+LL + impl LocalTraitOne for dyn fmt::Display {}\n+   | \n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/suggest-blanket-impl-local-trait.rs:33:24\n+   |\n+LL | impl LocalTraitOne for fmt::Display + Send {}\n+   |                        ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL - impl LocalTraitOne for fmt::Display + Send {}\n+LL + impl LocalTraitOne for dyn fmt::Display + Send {}\n+   | \n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/suggest-blanket-impl-local-trait.rs:36:29\n+   |\n+LL | impl<E> GenericTrait<E> for LocalTraitOne {}\n+   |                             ^^^^^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL - impl<E> GenericTrait<E> for LocalTraitOne {}\n+LL + impl<E> GenericTrait<E> for dyn LocalTraitOne {}\n+   | \n+help: alternatively use a blanket implementation to implement `GenericTrait<E>` for all types that also implement `LocalTraitOne`\n+   |\n+LL | impl<E, L: LocalTraitOne> GenericTrait<E> for T {}\n+   |       ++++++++++++++++++                      ~\n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/suggest-blanket-impl-local-trait.rs:41:35\n+   |\n+LL | impl<T, E> GenericTraitTwo<E> for GenericTrait<T> {}\n+   |                                   ^^^^^^^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL - impl<T, E> GenericTraitTwo<E> for GenericTrait<T> {}\n+LL + impl<T, E> GenericTraitTwo<E> for dyn GenericTrait<T> {}\n+   | \n+help: alternatively use a blanket implementation to implement `GenericTraitTwo<E>` for all types that also implement `GenericTrait<T>`\n+   |\n+LL | impl<T, E, G: GenericTrait<T>> GenericTraitTwo<E> for U {}\n+   |          ++++++++++++++++++++                         ~\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0782`."}]}