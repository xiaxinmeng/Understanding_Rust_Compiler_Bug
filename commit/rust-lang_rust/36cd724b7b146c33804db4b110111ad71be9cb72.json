{"sha": "36cd724b7b146c33804db4b110111ad71be9cb72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2Y2Q3MjRiN2IxNDZjMzM4MDRkYjRiMTEwMTExYWQ3MWJlOWNiNzI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-06T21:55:39Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-07T14:38:04Z"}, "message": "Autoclose blocks when typing `{`", "tree": {"sha": "c23b6b685a78c92a02d7102f7c5204dd5c16ba47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c23b6b685a78c92a02d7102f7c5204dd5c16ba47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36cd724b7b146c33804db4b110111ad71be9cb72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36cd724b7b146c33804db4b110111ad71be9cb72", "html_url": "https://github.com/rust-lang/rust/commit/36cd724b7b146c33804db4b110111ad71be9cb72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36cd724b7b146c33804db4b110111ad71be9cb72/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e900cb4a1c5a4faef801518272d56a5683dd488", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e900cb4a1c5a4faef801518272d56a5683dd488", "html_url": "https://github.com/rust-lang/rust/commit/8e900cb4a1c5a4faef801518272d56a5683dd488"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "de65632e3915a05fbc12683c8a5c41afdf4eb315", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/36cd724b7b146c33804db4b110111ad71be9cb72/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cd724b7b146c33804db4b110111ad71be9cb72/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=36cd724b7b146c33804db4b110111ad71be9cb72", "patch": "@@ -33,7 +33,8 @@ use crate::SourceChange;\n \n pub(crate) use on_enter::on_enter;\n \n-pub(crate) const TRIGGER_CHARS: &str = \".=>\";\n+// Don't forget to add new trigger characters to `server_capabilities` in `caps.rs`.\n+pub(crate) const TRIGGER_CHARS: &str = \".=>{\";\n \n // Feature: On Typing Assists\n //\n@@ -70,10 +71,47 @@ fn on_char_typed_inner(file: &SourceFile, offset: TextSize, char_typed: char) ->\n         '.' => on_dot_typed(file, offset),\n         '=' => on_eq_typed(file, offset),\n         '>' => on_arrow_typed(file, offset),\n+        '{' => on_opening_brace_typed(file, offset),\n         _ => unreachable!(),\n     }\n }\n \n+/// Inserts a closing `}` when the user types an opening `{`, wrapping an existing expression in a\n+/// block.\n+fn on_opening_brace_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n+    assert_eq!(file.syntax().text().char_at(offset), Some('{'));\n+    let brace_token = file.syntax().token_at_offset(offset).right_biased()?;\n+    let block = ast::BlockExpr::cast(brace_token.parent()?)?;\n+\n+    // We expect a block expression enclosing exactly 1 preexisting expression. It can be parsed as\n+    // either the trailing expr or an ExprStmt.\n+    let offset = {\n+        match block.tail_expr() {\n+            Some(expr) => {\n+                if block.statements().next().is_some() {\n+                    return None;\n+                }\n+                expr.syntax().text_range().end()\n+            }\n+            None => {\n+                if block.statements().count() != 1 {\n+                    return None;\n+                }\n+\n+                match block.statements().next()? {\n+                    ast::Stmt::ExprStmt(it) => {\n+                        // Use the expression span to place `}` before the `;`\n+                        it.expr()?.syntax().text_range().end()\n+                    }\n+                    _ => return None,\n+                }\n+            }\n+        }\n+    };\n+\n+    Some(TextEdit::insert(offset, \"}\".to_string()))\n+}\n+\n /// Returns an edit which should be applied after `=` was typed. Primarily,\n /// this works when adding `let =`.\n // FIXME: use a snippet completion instead of this hack here.\n@@ -373,4 +411,11 @@ fn main() {\n     fn adds_space_after_return_type() {\n         type_char('>', \"fn foo() -$0{ 92 }\", \"fn foo() -> { 92 }\")\n     }\n+\n+    #[test]\n+    fn adds_closing_brace() {\n+        type_char('{', r\"fn f() { match () { _ => $0() } }\", r\"fn f() { match () { _ => {()} } }\");\n+        type_char('{', r\"fn f() { $0(); }\", r\"fn f() { {()}; }\");\n+        type_char('{', r\"fn f() { let x = $0(); }\", r\"fn f() { let x = {()}; }\");\n+    }\n }"}, {"sha": "3c87782f28466fbec97927558894c92245793806", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36cd724b7b146c33804db4b110111ad71be9cb72/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cd724b7b146c33804db4b110111ad71be9cb72/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=36cd724b7b146c33804db4b110111ad71be9cb72", "patch": "@@ -57,7 +57,7 @@ pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabiliti\n         document_range_formatting_provider: None,\n         document_on_type_formatting_provider: Some(DocumentOnTypeFormattingOptions {\n             first_trigger_character: \"=\".to_string(),\n-            more_trigger_character: Some(vec![\".\".to_string(), \">\".to_string()]),\n+            more_trigger_character: Some(vec![\".\".to_string(), \">\".to_string(), \"{\".to_string()]),\n         }),\n         selection_range_provider: Some(SelectionRangeProviderCapability::Simple(true)),\n         folding_range_provider: Some(FoldingRangeProviderCapability::Simple(true)),"}, {"sha": "31d8c487be988fa593667d8685e3a7fd9354501b", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36cd724b7b146c33804db4b110111ad71be9cb72/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cd724b7b146c33804db4b110111ad71be9cb72/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=36cd724b7b146c33804db4b110111ad71be9cb72", "patch": "@@ -231,7 +231,6 @@ pub(crate) fn handle_on_enter(\n     Ok(Some(edit))\n }\n \n-// Don't forget to add new trigger characters to `ServerCapabilities` in `caps.rs`.\n pub(crate) fn handle_on_type_formatting(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::DocumentOnTypeFormattingParams,"}]}