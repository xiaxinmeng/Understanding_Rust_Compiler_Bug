{"sha": "d119a131374b973f0a1ae9d723c3a9ad518b8049", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMTlhMTMxMzc0Yjk3M2YwYTFhZTlkNzIzYzNhOWFkNTE4YjgwNDk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-02T17:22:24Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-02T17:23:11Z"}, "message": "Rename walk_crate.", "tree": {"sha": "81514904236b873904a67ef42dde376ad4b1a0bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81514904236b873904a67ef42dde376ad4b1a0bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d119a131374b973f0a1ae9d723c3a9ad518b8049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d119a131374b973f0a1ae9d723c3a9ad518b8049", "html_url": "https://github.com/rust-lang/rust/commit/d119a131374b973f0a1ae9d723c3a9ad518b8049", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d119a131374b973f0a1ae9d723c3a9ad518b8049/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df148e4efb3bfd973d94217e52a01cde76fec09b", "url": "https://api.github.com/repos/rust-lang/rust/commits/df148e4efb3bfd973d94217e52a01cde76fec09b", "html_url": "https://github.com/rust-lang/rust/commit/df148e4efb3bfd973d94217e52a01cde76fec09b"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "2070fd69d3f8eb7f59e75683e735b5ea2a774aba", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=d119a131374b973f0a1ae9d723c3a9ad518b8049", "patch": "@@ -451,7 +451,7 @@ fn late_lint_pass_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, pass: T)\n         // since the root module isn't visited as an item (because it isn't an\n         // item), warn for it here.\n         lint_callback!(cx, check_crate, krate);\n-        tcx.hir().walk_crate(cx);\n+        tcx.hir().walk_toplevel_module(cx);\n         tcx.hir().walk_attributes(cx);\n         lint_callback!(cx, check_crate_post, krate);\n     })"}, {"sha": "66966e589e48a5e234d7f80e0d00fea78671e2c5", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=d119a131374b973f0a1ae9d723c3a9ad518b8049", "patch": "@@ -37,7 +37,7 @@ fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n \n     let push = builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), &store, true);\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n-    tcx.hir().walk_crate(&mut builder);\n+    tcx.hir().walk_toplevel_module(&mut builder);\n     builder.levels.pop(push);\n \n     builder.levels.build_map()"}, {"sha": "e0b6039fe348f4bd0e24ed5581000ee9dec978b9", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=d119a131374b973f0a1ae9d723c3a9ad518b8049", "patch": "@@ -520,7 +520,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     /// Walks the contents of a crate. See also `Crate::visit_all_items`.\n-    pub fn walk_crate(self, visitor: &mut impl Visitor<'hir>) {\n+    pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {\n         let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);\n         visitor.visit_mod(top_mod, span, hir_id);\n     }"}, {"sha": "25ad00aaf1f753caa8f98f37224d898d5e1528ee", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=d119a131374b973f0a1ae9d723c3a9ad518b8049", "patch": "@@ -775,5 +775,5 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n     let krate = tcx.hir().krate();\n     let live_symbols = find_live(tcx, access_levels, krate);\n     let mut visitor = DeadVisitor { tcx, live_symbols };\n-    tcx.hir().walk_crate(&mut visitor);\n+    tcx.hir().walk_toplevel_module(&mut visitor);\n }"}, {"sha": "d665c12f762c5baa49a0fb6974c847191d196f34", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=d119a131374b973f0a1ae9d723c3a9ad518b8049", "patch": "@@ -37,7 +37,7 @@ pub fn print_hir_stats(tcx: TyCtxt<'_>) {\n         data: FxHashMap::default(),\n         seen: FxHashSet::default(),\n     };\n-    tcx.hir().walk_crate(&mut collector);\n+    tcx.hir().walk_toplevel_module(&mut collector);\n     tcx.hir().walk_attributes(&mut collector);\n     collector.print(\"HIR STATS\");\n }"}, {"sha": "b7e43b7785da602a170632beddb3ad53f0083155", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=d119a131374b973f0a1ae9d723c3a9ad518b8049", "patch": "@@ -717,7 +717,7 @@ fn stability_index(tcx: TyCtxt<'tcx>, (): ()) -> Index<'tcx> {\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n             InheritStability::No,\n-            |v| tcx.hir().walk_crate(v),\n+            |v| tcx.hir().walk_toplevel_module(v),\n         );\n     }\n     index\n@@ -909,7 +909,7 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n         let krate = tcx.hir().krate();\n         let mut missing = MissingStabilityAnnotations { tcx, access_levels };\n         missing.check_missing_stability(CRATE_DEF_ID, tcx.hir().span(CRATE_HIR_ID));\n-        tcx.hir().walk_crate(&mut missing);\n+        tcx.hir().walk_toplevel_module(&mut missing);\n         krate.visit_all_item_likes(&mut missing.as_deep_visitor());\n     }\n "}, {"sha": "35e25e52dc5f9f1e2fc12b492055eff4eeb9dbd3", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=d119a131374b973f0a1ae9d723c3a9ad518b8049", "patch": "@@ -2169,7 +2169,7 @@ fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {\n         changed: false,\n     };\n     loop {\n-        tcx.hir().walk_crate(&mut visitor);\n+        tcx.hir().walk_toplevel_module(&mut visitor);\n         if visitor.changed {\n             visitor.changed = false;\n         } else {\n@@ -2192,11 +2192,11 @@ fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {\n         in_variant: false,\n         old_error_set: Default::default(),\n     };\n-    tcx.hir().walk_crate(&mut visitor);\n+    tcx.hir().walk_toplevel_module(&mut visitor);\n \n     let has_pub_restricted = {\n         let mut pub_restricted_visitor = PubRestrictedVisitor { tcx, has_pub_restricted: false };\n-        tcx.hir().walk_crate(&mut pub_restricted_visitor);\n+        tcx.hir().walk_toplevel_module(&mut pub_restricted_visitor);\n         pub_restricted_visitor.has_pub_restricted\n     };\n "}, {"sha": "08ed9ec73c87570147544a84ea217de9e448f281", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=d119a131374b973f0a1ae9d723c3a9ad518b8049", "patch": "@@ -1122,7 +1122,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                 attributes: lower_attributes(attrs.to_owned(), &self.save_ctxt),\n             },\n         );\n-        self.tcx.hir().walk_crate(self);\n+        self.tcx.hir().walk_toplevel_module(self);\n     }\n \n     fn process_bounds(&mut self, bounds: hir::GenericBounds<'tcx>) {"}, {"sha": "7f9afaae0eaa2675f8273aaf32af2ee7e9c5a53b", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d119a131374b973f0a1ae9d723c3a9ad518b8049/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=d119a131374b973f0a1ae9d723c3a9ad518b8049", "patch": "@@ -691,7 +691,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     debug!(\"find_opaque_ty_constraints: scope={:?}\", scope);\n \n     if scope == hir::CRATE_HIR_ID {\n-        tcx.hir().walk_crate(&mut locator);\n+        tcx.hir().walk_toplevel_module(&mut locator);\n     } else {\n         debug!(\"find_opaque_ty_constraints: scope={:?}\", tcx.hir().get(scope));\n         match tcx.hir().get(scope) {"}, {"sha": "e6097f5cad7f30688168a3107bec371e08891826", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d119a131374b973f0a1ae9d723c3a9ad518b8049/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d119a131374b973f0a1ae9d723c3a9ad518b8049/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=d119a131374b973f0a1ae9d723c3a9ad518b8049", "patch": "@@ -144,7 +144,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n                     \"\".to_string(),\n                     CRATE_HIR_ID,\n                     tcx.hir().span(CRATE_HIR_ID),\n-                    |this| tcx.hir().walk_crate(this),\n+                    |this| tcx.hir().walk_toplevel_module(this),\n                 );\n \n                 collector"}, {"sha": "54476d9c9a459f19b34179f57caa25512baf5159", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d119a131374b973f0a1ae9d723c3a9ad518b8049/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d119a131374b973f0a1ae9d723c3a9ad518b8049/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=d119a131374b973f0a1ae9d723c3a9ad518b8049", "patch": "@@ -45,7 +45,7 @@ crate fn collect_spans_and_sources(\n \n     if include_sources {\n         if generate_link_to_definition {\n-            tcx.hir().walk_crate(&mut visitor);\n+            tcx.hir().walk_toplevel_module(&mut visitor);\n         }\n         let (krate, sources) = sources::collect_local_sources(tcx, src_root, krate);\n         (krate, sources, visitor.matches)"}]}