{"sha": "d4fa173ed31d97aedee04f04e134badb67495293", "node_id": "C_kwDOAAsO6NoAKGQ0ZmExNzNlZDMxZDk3YWVkZWUwNGYwNGUxMzRiYWRiNjc0OTUyOTM", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2022-02-09T09:50:08Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2022-02-11T21:38:17Z"}, "message": "Fix more chalk lowering issues\n\n- Implement lowering for subtype goals\n- Use correct lang item for Generator trait\n- Use `lower_into` for lowering `ty::Variance`", "tree": {"sha": "a294ea6e41fae6beee1937c1f8836647e94fc627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a294ea6e41fae6beee1937c1f8836647e94fc627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4fa173ed31d97aedee04f04e134badb67495293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fa173ed31d97aedee04f04e134badb67495293", "html_url": "https://github.com/rust-lang/rust/commit/d4fa173ed31d97aedee04f04e134badb67495293", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4fa173ed31d97aedee04f04e134badb67495293/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb3cff37617a313e0d1a78583355d2abe9f9364b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3cff37617a313e0d1a78583355d2abe9f9364b", "html_url": "https://github.com/rust-lang/rust/commit/cb3cff37617a313e0d1a78583355d2abe9f9364b"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "0170ab223b0312c33041965d82303646c41d0c91", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa173ed31d97aedee04f04e134badb67495293/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa173ed31d97aedee04f04e134badb67495293/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=d4fa173ed31d97aedee04f04e134badb67495293", "patch": "@@ -546,11 +546,11 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             Fn => lang_items.fn_trait(),\n             FnMut => lang_items.fn_mut_trait(),\n             FnOnce => lang_items.fn_once_trait(),\n+            Generator => lang_items.gen_trait(),\n             Unsize => lang_items.unsize_trait(),\n             Unpin => lang_items.unpin_trait(),\n             CoerceUnsized => lang_items.coerce_unsized_trait(),\n             DiscriminantKind => lang_items.discriminant_kind_trait(),\n-            Generator => lang_items.generator_return(),\n         };\n         def_id.map(chalk_ir::TraitId)\n     }\n@@ -674,28 +674,18 @@ impl<'tcx> chalk_ir::UnificationDatabase<RustInterner<'tcx>> for RustIrDatabase<\n         let variances = self.interner.tcx.variances_of(def_id.0);\n         chalk_ir::Variances::from_iter(\n             self.interner,\n-            variances.iter().map(|v| match v {\n-                ty::Variance::Invariant => chalk_ir::Variance::Invariant,\n-                ty::Variance::Covariant => chalk_ir::Variance::Covariant,\n-                ty::Variance::Contravariant => chalk_ir::Variance::Contravariant,\n-                ty::Variance::Bivariant => unimplemented!(),\n-            }),\n+            variances.iter().map(|v| v.lower_into(self.interner)),\n         )\n     }\n \n     fn adt_variance(\n         &self,\n-        def_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n+        adt_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n     ) -> chalk_ir::Variances<RustInterner<'tcx>> {\n-        let variances = self.interner.tcx.variances_of(def_id.0.did);\n+        let variances = self.interner.tcx.variances_of(adt_id.0.did);\n         chalk_ir::Variances::from_iter(\n             self.interner,\n-            variances.iter().map(|v| match v {\n-                ty::Variance::Invariant => chalk_ir::Variance::Invariant,\n-                ty::Variance::Covariant => chalk_ir::Variance::Covariant,\n-                ty::Variance::Contravariant => chalk_ir::Variance::Contravariant,\n-                ty::Variance::Bivariant => unimplemented!(),\n-            }),\n+            variances.iter().map(|v| v.lower_into(self.interner)),\n         )\n     }\n }"}, {"sha": "e4d94fd7beb3139e2b348d58a783fd835bb407c9", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa173ed31d97aedee04f04e134badb67495293/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa173ed31d97aedee04f04e134badb67495293/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=d4fa173ed31d97aedee04f04e134badb67495293", "patch": "@@ -188,12 +188,18 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n                 chalk_ir::DomainGoal::ObjectSafe(chalk_ir::TraitId(t)),\n             ),\n \n+            ty::PredicateKind::Subtype(ty::SubtypePredicate { a, b, a_is_expected: _ }) => {\n+                chalk_ir::GoalData::SubtypeGoal(chalk_ir::SubtypeGoal {\n+                    a: a.lower_into(interner),\n+                    b: b.lower_into(interner),\n+                })\n+            }\n+\n             // FIXME(chalk): other predicates\n             //\n             // We can defer this, but ultimately we'll want to express\n             // some of these in terms of chalk operations.\n             ty::PredicateKind::ClosureKind(..)\n-            | ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..) => {\n@@ -790,6 +796,16 @@ impl<'tcx> LowerInto<'tcx, chalk_solve::rust_ir::Polarity> for ty::ImplPolarity\n         }\n     }\n }\n+impl<'tcx> LowerInto<'tcx, chalk_ir::Variance> for ty::Variance {\n+    fn lower_into(self, _interner: RustInterner<'tcx>) -> chalk_ir::Variance {\n+        match self {\n+            ty::Variance::Covariant => chalk_ir::Variance::Covariant,\n+            ty::Variance::Invariant => chalk_ir::Variance::Invariant,\n+            ty::Variance::Contravariant => chalk_ir::Variance::Contravariant,\n+            ty::Variance::Bivariant => unimplemented!(),\n+        }\n+    }\n+}\n \n impl<'tcx> LowerInto<'tcx, chalk_solve::rust_ir::AliasEqBound<RustInterner<'tcx>>>\n     for ty::ProjectionPredicate<'tcx>"}]}