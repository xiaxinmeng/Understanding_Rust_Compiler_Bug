{"sha": "bf4e1e49ea80d52ec6662938ce859de17fd831f4", "node_id": "C_kwDOAAsO6NoAKGJmNGUxZTQ5ZWE4MGQ1MmVjNjY2MjkzOGNlODU5ZGUxN2ZkODMxZjQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-09T00:04:10Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-01T00:22:27Z"}, "message": "Use `&mut Bx` more.\n\nFor the next commit, `FunctionCx::codegen_*_terminator` need to take a\n`&mut Bx` instead of consuming a `Bx`. This triggers a cascade of\nsimilar changes across multiple functions. The resulting code is more\nconcise and replaces many `&mut bx` expressions with `bx`.", "tree": {"sha": "ce89bce4594c8cb6adfe9fd3ecb4c3c17f7c5d5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce89bce4594c8cb6adfe9fd3ecb4c3c17f7c5d5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf4e1e49ea80d52ec6662938ce859de17fd831f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf4e1e49ea80d52ec6662938ce859de17fd831f4", "html_url": "https://github.com/rust-lang/rust/commit/bf4e1e49ea80d52ec6662938ce859de17fd831f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf4e1e49ea80d52ec6662938ce859de17fd831f4/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b9b849a1918636f55433e858ee6ce4847dd6ced", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9b849a1918636f55433e858ee6ce4847dd6ced", "html_url": "https://github.com/rust-lang/rust/commit/5b9b849a1918636f55433e858ee6ce4847dd6ced"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "1603e9bf6282edc420dd83275d39b8479deb17b1", "filename": "src/builder.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bf4e1e49ea80d52ec6662938ce859de17fd831f4/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4e1e49ea80d52ec6662938ce859de17fd831f4/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=bf4e1e49ea80d52ec6662938ce859de17fd831f4", "patch": "@@ -814,11 +814,11 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         OperandRef { val, layout: place.layout }\n     }\n \n-    fn write_operand_repeatedly(mut self, cg_elem: OperandRef<'tcx, RValue<'gcc>>, count: u64, dest: PlaceRef<'tcx, RValue<'gcc>>) -> Self {\n+    fn write_operand_repeatedly(&mut self, cg_elem: OperandRef<'tcx, RValue<'gcc>>, count: u64, dest: PlaceRef<'tcx, RValue<'gcc>>) {\n         let zero = self.const_usize(0);\n         let count = self.const_usize(count);\n-        let start = dest.project_index(&mut self, zero).llval;\n-        let end = dest.project_index(&mut self, count).llval;\n+        let start = dest.project_index(self, zero).llval;\n+        let end = dest.project_index(self, count).llval;\n \n         let header_bb = self.append_sibling_block(\"repeat_loop_header\");\n         let body_bb = self.append_sibling_block(\"repeat_loop_body\");\n@@ -837,14 +837,13 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n \n         self.switch_to_block(body_bb);\n         let align = dest.align.restrict_for_offset(dest.layout.field(self.cx(), 0).size);\n-        cg_elem.val.store(&mut self, PlaceRef::new_sized_aligned(current_val, cg_elem.layout, align));\n+        cg_elem.val.store(self, PlaceRef::new_sized_aligned(current_val, cg_elem.layout, align));\n \n         let next = self.inbounds_gep(self.backend_type(cg_elem.layout), current.to_rvalue(), &[self.const_usize(1)]);\n         self.llbb().add_assignment(None, current, next);\n         self.br(header_bb);\n \n         self.switch_to_block(next_bb);\n-        self\n     }\n \n     fn range_metadata(&mut self, _load: RValue<'gcc>, _range: WrappingRange) {"}]}