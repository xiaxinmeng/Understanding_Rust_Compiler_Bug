{"sha": "31074fdf2eb99b36100a04a7712ebf62df55d03a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMDc0ZmRmMmViOTliMzYxMDBhMDRhNzcxMmViZjYyZGY1NWQwM2E=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-04-12T10:56:23Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-04-12T12:51:18Z"}, "message": "std: update & de-~[] path's tests.", "tree": {"sha": "01cf4017570b3ab39cb1e7849d175b78cb16df13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01cf4017570b3ab39cb1e7849d175b78cb16df13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31074fdf2eb99b36100a04a7712ebf62df55d03a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31074fdf2eb99b36100a04a7712ebf62df55d03a", "html_url": "https://github.com/rust-lang/rust/commit/31074fdf2eb99b36100a04a7712ebf62df55d03a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31074fdf2eb99b36100a04a7712ebf62df55d03a/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1283caa8cb937eed6829a71c93470224e55a1fca", "url": "https://api.github.com/repos/rust-lang/rust/commits/1283caa8cb937eed6829a71c93470224e55a1fca", "html_url": "https://github.com/rust-lang/rust/commit/1283caa8cb937eed6829a71c93470224e55a1fca"}], "stats": {"total": 99, "additions": 42, "deletions": 57}, "files": [{"sha": "6a1f9c1a4c78e9c60b65a009e4c2aadd3b5ba3bf", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31074fdf2eb99b36100a04a7712ebf62df55d03a/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31074fdf2eb99b36100a04a7712ebf62df55d03a/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=31074fdf2eb99b36100a04a7712ebf62df55d03a", "patch": "@@ -63,6 +63,8 @@ println!(\"path exists: {}\", path.exists());\n \n */\n \n+#![deny(deprecated_owned_vector)]\n+\n use container::Container;\n use c_str::CString;\n use clone::Clone;"}, {"sha": "1a80e52359d2453108875032a3d99b60dd674dd2", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/31074fdf2eb99b36100a04a7712ebf62df55d03a/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31074fdf2eb99b36100a04a7712ebf62df55d03a/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=31074fdf2eb99b36100a04a7712ebf62df55d03a", "patch": "@@ -518,9 +518,9 @@ mod tests {\n         t!(s: Path::new(\"foo/../../..\"), \"../..\");\n         t!(s: Path::new(\"foo/../../bar\"), \"../bar\");\n \n-        assert!(Path::new(b!(\"foo/bar\")).into_vec() == b!(\"foo/bar\").to_owned());\n-        assert!(Path::new(b!(\"/foo/../../bar\")).into_vec() ==\n-                   b!(\"/bar\").to_owned());\n+        assert_eq!(Path::new(b!(\"foo/bar\")).into_vec().as_slice(), b!(\"foo/bar\"));\n+        assert_eq!(Path::new(b!(\"/foo/../../bar\")).into_vec().as_slice(),\n+                   b!(\"/bar\"));\n \n         let p = Path::new(b!(\"foo/bar\", 0x80));\n         assert!(p.as_str() == None);\n@@ -769,7 +769,7 @@ mod tests {\n         t!(s: \"a/b/c\", [~\"d\", ~\"e\"], \"a/b/c/d/e\");\n         t!(v: b!(\"a/b/c\"), [b!(\"d\"), b!(\"e\")], b!(\"a/b/c/d/e\"));\n         t!(v: b!(\"a/b/c\"), [b!(\"d\"), b!(\"/e\"), b!(\"f\")], b!(\"/e/f\"));\n-        t!(v: b!(\"a/b/c\"), [b!(\"d\").to_owned(), b!(\"e\").to_owned()], b!(\"a/b/c/d/e\"));\n+        t!(v: b!(\"a/b/c\"), [Vec::from_slice(b!(\"d\")), Vec::from_slice(b!(\"e\"))], b!(\"a/b/c/d/e\"));\n     }\n \n     #[test]\n@@ -873,7 +873,7 @@ mod tests {\n         t!(s: \"a/b/c\", [\"d\", \"/e\", \"f\"], \"/e/f\");\n         t!(s: \"a/b/c\", [~\"d\", ~\"e\"], \"a/b/c/d/e\");\n         t!(v: b!(\"a/b/c\"), [b!(\"d\"), b!(\"e\")], b!(\"a/b/c/d/e\"));\n-        t!(v: b!(\"a/b/c\"), [b!(\"d\").to_owned(), b!(\"e\").to_owned()], b!(\"a/b/c/d/e\"));\n+        t!(v: b!(\"a/b/c\"), [Vec::from_slice(b!(\"d\")), Vec::from_slice(b!(\"e\"))], b!(\"a/b/c/d/e\"));\n     }\n \n     #[test]\n@@ -1186,29 +1186,26 @@ mod tests {\n             (s: $path:expr, $exp:expr) => (\n                 {\n                     let path = Path::new($path);\n-                    let comps = path.components().collect::<~[&[u8]]>();\n+                    let comps = path.components().collect::<Vec<&[u8]>>();\n                     let exp: &[&str] = $exp;\n-                    let exps = exp.iter().map(|x| x.as_bytes()).collect::<~[&[u8]]>();\n+                    let exps = exp.iter().map(|x| x.as_bytes()).collect::<Vec<&[u8]>>();\n                     assert!(comps == exps, \"components: Expected {:?}, found {:?}\",\n                             comps, exps);\n-                    let comps = path.rev_components().collect::<~[&[u8]]>();\n-                    let exps = exps.move_rev_iter().collect::<~[&[u8]]>();\n+                    let comps = path.rev_components().collect::<Vec<&[u8]>>();\n+                    let exps = exps.move_iter().rev().collect::<Vec<&[u8]>>();\n                     assert!(comps == exps, \"rev_components: Expected {:?}, found {:?}\",\n                             comps, exps);\n                 }\n             );\n             (v: [$($arg:expr),+], [$([$($exp:expr),*]),*]) => (\n                 {\n                     let path = Path::new(b!($($arg),+));\n-                    let comps = path.components().collect::<~[&[u8]]>();\n+                    let comps = path.components().collect::<Vec<&[u8]>>();\n                     let exp: &[&[u8]] = [$(b!($($exp),*)),*];\n-                    assert!(comps.as_slice() == exp, \"components: Expected {:?}, found {:?}\",\n-                            comps.as_slice(), exp);\n-                    let comps = path.rev_components().collect::<~[&[u8]]>();\n-                    let exp = exp.rev_iter().map(|&x|x).collect::<~[&[u8]]>();\n-                    assert!(comps.as_slice() == exp,\n-                            \"rev_components: Expected {:?}, found {:?}\",\n-                            comps.as_slice(), exp);\n+                    assert_eq!(comps.as_slice(), exp);\n+                    let comps = path.rev_components().collect::<Vec<&[u8]>>();\n+                    let exp = exp.rev_iter().map(|&x|x).collect::<Vec<&[u8]>>();\n+                    assert_eq!(comps, exp)\n                 }\n             )\n         )\n@@ -1235,16 +1232,12 @@ mod tests {\n             (v: [$($arg:expr),+], $exp:expr) => (\n                 {\n                     let path = Path::new(b!($($arg),+));\n-                    let comps = path.str_components().collect::<~[Option<&str>]>();\n+                    let comps = path.str_components().collect::<Vec<Option<&str>>>();\n                     let exp: &[Option<&str>] = $exp;\n-                    assert!(comps.as_slice() == exp,\n-                            \"str_components: Expected {:?}, found {:?}\",\n-                            comps.as_slice(), exp);\n-                    let comps = path.rev_str_components().collect::<~[Option<&str>]>();\n-                    let exp = exp.rev_iter().map(|&x|x).collect::<~[Option<&str>]>();\n-                    assert!(comps.as_slice() == exp,\n-                            \"rev_str_components: Expected {:?}, found {:?}\",\n-                            comps.as_slice(), exp);\n+                    assert_eq!(comps.as_slice(), exp);\n+                    let comps = path.rev_str_components().collect::<Vec<Option<&str>>>();\n+                    let exp = exp.rev_iter().map(|&x|x).collect::<Vec<Option<&str>>>();\n+                    assert_eq!(comps, exp);\n                 }\n             )\n         )"}, {"sha": "435b64e8d2afd82451395a47a268bc851947a371", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 21, "deletions": 31, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/31074fdf2eb99b36100a04a7712ebf62df55d03a/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31074fdf2eb99b36100a04a7712ebf62df55d03a/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=31074fdf2eb99b36100a04a7712ebf62df55d03a", "patch": "@@ -1225,9 +1225,8 @@ mod tests {\n         t!(s: Path::new(\"foo\\\\..\\\\..\\\\..\"), \"..\\\\..\");\n         t!(s: Path::new(\"foo\\\\..\\\\..\\\\bar\"), \"..\\\\bar\");\n \n-        assert_eq!(Path::new(b!(\"foo\\\\bar\")).into_vec(), b!(\"foo\\\\bar\").to_owned());\n-        assert_eq!(Path::new(b!(\"\\\\foo\\\\..\\\\..\\\\bar\")).into_vec(),\n-                   b!(\"\\\\bar\").to_owned());\n+        assert_eq!(Path::new(b!(\"foo\\\\bar\")).into_vec().as_slice(), b!(\"foo\\\\bar\"));\n+        assert_eq!(Path::new(b!(\"\\\\foo\\\\..\\\\..\\\\bar\")).into_vec().as_slice(), b!(\"\\\\bar\"));\n \n         t!(s: Path::new(\"\\\\\\\\a\"), \"\\\\a\");\n         t!(s: Path::new(\"\\\\\\\\a\\\\\"), \"\\\\a\");\n@@ -1581,7 +1580,8 @@ mod tests {\n         t!(s: \"a\\\\b\\\\c\", [~\"d\", ~\"e\"], \"a\\\\b\\\\c\\\\d\\\\e\");\n         t!(v: b!(\"a\\\\b\\\\c\"), [b!(\"d\"), b!(\"e\")], b!(\"a\\\\b\\\\c\\\\d\\\\e\"));\n         t!(v: b!(\"a\\\\b\\\\c\"), [b!(\"d\"), b!(\"\\\\e\"), b!(\"f\")], b!(\"\\\\e\\\\f\"));\n-        t!(v: b!(\"a\\\\b\\\\c\"), [b!(\"d\").to_owned(), b!(\"e\").to_owned()], b!(\"a\\\\b\\\\c\\\\d\\\\e\"));\n+        t!(v: b!(\"a\\\\b\\\\c\"), [Vec::from_slice(b!(\"d\")), Vec::from_slice(b!(\"e\"))],\n+           b!(\"a\\\\b\\\\c\\\\d\\\\e\"));\n     }\n \n     #[test]\n@@ -1720,7 +1720,8 @@ mod tests {\n         t!(s: \"a\\\\b\\\\c\", [\"d\", \"\\\\e\", \"f\"], \"\\\\e\\\\f\");\n         t!(s: \"a\\\\b\\\\c\", [~\"d\", ~\"e\"], \"a\\\\b\\\\c\\\\d\\\\e\");\n         t!(v: b!(\"a\\\\b\\\\c\"), [b!(\"d\"), b!(\"e\")], b!(\"a\\\\b\\\\c\\\\d\\\\e\"));\n-        t!(v: b!(\"a\\\\b\\\\c\"), [b!(\"d\").to_owned(), b!(\"e\").to_owned()], b!(\"a\\\\b\\\\c\\\\d\\\\e\"));\n+        t!(v: b!(\"a\\\\b\\\\c\"), [Vec::from_slice(b!(\"d\")), Vec::from_slice(b!(\"e\"))],\n+           b!(\"a\\\\b\\\\c\\\\d\\\\e\"));\n     }\n \n     #[test]\n@@ -2235,33 +2236,25 @@ mod tests {\n                 {\n                     let path = Path::new($path);\n                     let comps = path.str_components().map(|x|x.unwrap())\n-                                .collect::<~[&str]>();\n+                                .collect::<Vec<&str>>();\n                     let exp: &[&str] = $exp;\n-                    assert!(comps.as_slice() == exp,\n-                            \"str_components: Expected {:?}, found {:?}\",\n-                            comps.as_slice(), exp);\n+                    assert_eq!(comps.as_slice(), exp);\n                     let comps = path.rev_str_components().map(|x|x.unwrap())\n-                                .collect::<~[&str]>();\n-                    let exp = exp.rev_iter().map(|&x|x).collect::<~[&str]>();\n-                    assert!(comps.as_slice() == exp,\n-                            \"rev_str_components: Expected {:?}, found {:?}\",\n-                            comps.as_slice(), exp);\n+                                .collect::<Vec<&str>>();\n+                    let exp = exp.rev_iter().map(|&x|x).collect::<Vec<&str>>();\n+                    assert_eq!(comps, exp);\n                 }\n             );\n             (v: [$($arg:expr),+], $exp:expr) => (\n                 {\n                     let path = Path::new(b!($($arg),+));\n-                    let comps = path.str_components().map(|x|x.unwrap()).collect::<~[&str]>();\n+                    let comps = path.str_components().map(|x|x.unwrap()).collect::<Vec<&str>>();\n                     let exp: &[&str] = $exp;\n-                    assert!(comps.as_slice() == exp,\n-                            \"str_components: Expected {:?}, found {:?}\",\n-                            comps.as_slice(), exp);\n+                    assert_eq!(comps.as_slice(), exp);\n                     let comps = path.rev_str_components().map(|x|x.unwrap())\n-                                .collect::<~[&str]>();\n-                    let exp = exp.rev_iter().map(|&x|x).collect::<~[&str]>();\n-                    assert!(comps.as_slice() == exp,\n-                            \"rev_str_components: Expected {:?}, found {:?}\",\n-                            comps.as_slice(), exp);\n+                                .collect::<Vec<&str>>();\n+                    let exp = exp.rev_iter().map(|&x|x).collect::<Vec<&str>>();\n+                    assert_eq!(comps, exp);\n                 }\n             )\n         )\n@@ -2312,15 +2305,12 @@ mod tests {\n             (s: $path:expr, $exp:expr) => (\n                 {\n                     let path = Path::new($path);\n-                    let comps = path.components().collect::<~[&[u8]]>();\n+                    let comps = path.components().collect::<Vec<&[u8]>>();\n                     let exp: &[&[u8]] = $exp;\n-                    assert!(comps.as_slice() == exp, \"components: Expected {:?}, found {:?}\",\n-                            comps.as_slice(), exp);\n-                    let comps = path.rev_components().collect::<~[&[u8]]>();\n-                    let exp = exp.rev_iter().map(|&x|x).collect::<~[&[u8]]>();\n-                    assert!(comps.as_slice() == exp,\n-                            \"rev_components: Expected {:?}, found {:?}\",\n-                            comps.as_slice(), exp);\n+                    assert_eq!(comps.as_slice(), exp);\n+                    let comps = path.rev_components().collect::<Vec<&[u8]>>();\n+                    let exp = exp.rev_iter().map(|&x|x).collect::<Vec<&[u8]>>();\n+                    assert_eq!(comps, exp);\n                 }\n             )\n         )"}]}