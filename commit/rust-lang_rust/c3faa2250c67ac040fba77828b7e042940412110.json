{"sha": "c3faa2250c67ac040fba77828b7e042940412110", "node_id": "C_kwDOAAsO6NoAKGMzZmFhMjI1MGM2N2FjMDQwZmJhNzc4MjhiN2UwNDI5NDA0MTIxMTA", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-09-05T23:36:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-05T23:36:08Z"}, "message": "Rollup merge of #101425 - compiler-errors:point-at-ty-param, r=spastorino\n\nPoint at type parameter in plain path expr\n\nSlightly better error message for a kinda unique use case.", "tree": {"sha": "b79676cb6e9b3bbd7eb11d0f40ca203141bebe4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b79676cb6e9b3bbd7eb11d0f40ca203141bebe4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3faa2250c67ac040fba77828b7e042940412110", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjFofoCRBK7hj4Ov3rIwAARCMIABH824/qkXi0ipFX4oIU2l29\nhAd+fHdw0XX+NmGyDpwkjgzzorve3J/vLZnmkFwez6mzzgATe56qpzSCuCFS4UDN\npRrDGIfdqXf6puhszTpoHjYQjbKx28Sg2ERi0jvNlIDw5xaB9AFFl5EgXGaL9/bh\n5ftkO4NY5yYBW6TalpJvyCgrkLc7j2POux4P2PyHZ4v+1QWBQHzFxaaKuz+lSfVf\nJh6Awz6LRbtoY9eDSduEK0k0cJR1T3HOMs4XNtU/mZuI1vCZLME+L3dKwFYxKieU\n4beJGCk9xJ/6dTFmUo3/KvswoSdgr2amv5gxRLso5EdXBfENtYKWzYp/LsbnU0E=\n=6g8O\n-----END PGP SIGNATURE-----\n", "payload": "tree b79676cb6e9b3bbd7eb11d0f40ca203141bebe4b\nparent c633b0a72c6e1d58b7251e2011b5b8d7a1fff4b1\nparent 3b3c7063c23d43b30077fb5f997456e60e5806a6\nauthor Yuki Okushi <jtitor@2k36.org> 1662420968 +0900\ncommitter GitHub <noreply@github.com> 1662420968 +0900\n\nRollup merge of #101425 - compiler-errors:point-at-ty-param, r=spastorino\n\nPoint at type parameter in plain path expr\n\nSlightly better error message for a kinda unique use case.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3faa2250c67ac040fba77828b7e042940412110", "html_url": "https://github.com/rust-lang/rust/commit/c3faa2250c67ac040fba77828b7e042940412110", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3faa2250c67ac040fba77828b7e042940412110/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c633b0a72c6e1d58b7251e2011b5b8d7a1fff4b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c633b0a72c6e1d58b7251e2011b5b8d7a1fff4b1", "html_url": "https://github.com/rust-lang/rust/commit/c633b0a72c6e1d58b7251e2011b5b8d7a1fff4b1"}, {"sha": "3b3c7063c23d43b30077fb5f997456e60e5806a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b3c7063c23d43b30077fb5f997456e60e5806a6", "html_url": "https://github.com/rust-lang/rust/commit/3b3c7063c23d43b30077fb5f997456e60e5806a6"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "311fcaadaa98b3b7bc815f879660f627efc6aaea", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c3faa2250c67ac040fba77828b7e042940412110/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3faa2250c67ac040fba77828b7e042940412110/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=c3faa2250c67ac040fba77828b7e042940412110", "patch": "@@ -1812,16 +1812,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             return true;\n                         }\n                     }\n-                    // Notably, we only point to params that are local to the\n-                    // item we're checking, since those are the ones we are able\n-                    // to look in the final `hir::PathSegment` for. Everything else\n-                    // would require a deeper search into the `qpath` than I think\n-                    // is worthwhile.\n-                    if let Some(param_to_point_at) = param_to_point_at\n-                        && self.point_at_path_if_possible(error, def_id, param_to_point_at, qpath)\n-                    {\n-                        return true;\n-                    }\n+                }\n+                // Notably, we only point to params that are local to the\n+                // item we're checking, since those are the ones we are able\n+                // to look in the final `hir::PathSegment` for. Everything else\n+                // would require a deeper search into the `qpath` than I think\n+                // is worthwhile.\n+                if let Some(param_to_point_at) = param_to_point_at\n+                    && self.point_at_path_if_possible(error, def_id, param_to_point_at, qpath)\n+                {\n+                    return true;\n                 }\n             }\n             hir::ExprKind::MethodCall(segment, receiver, args, ..) => {"}, {"sha": "9a21536f9b12bf39f558bb6ab1a0899916b9a3cd", "filename": "src/test/ui/typeck/point-at-type-param-in-path-expr.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3faa2250c67ac040fba77828b7e042940412110/src%2Ftest%2Fui%2Ftypeck%2Fpoint-at-type-param-in-path-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3faa2250c67ac040fba77828b7e042940412110/src%2Ftest%2Fui%2Ftypeck%2Fpoint-at-type-param-in-path-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fpoint-at-type-param-in-path-expr.rs?ref=c3faa2250c67ac040fba77828b7e042940412110", "patch": "@@ -0,0 +1,6 @@\n+fn foo<T: std::fmt::Display>() {}\n+\n+fn main() {\n+    let x = foo::<()>;\n+    //~^ ERROR `()` doesn't implement `std::fmt::Display`\n+}"}, {"sha": "1feaa0508bfa74017351da64b6aa00b4fc015377", "filename": "src/test/ui/typeck/point-at-type-param-in-path-expr.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c3faa2250c67ac040fba77828b7e042940412110/src%2Ftest%2Fui%2Ftypeck%2Fpoint-at-type-param-in-path-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3faa2250c67ac040fba77828b7e042940412110/src%2Ftest%2Fui%2Ftypeck%2Fpoint-at-type-param-in-path-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fpoint-at-type-param-in-path-expr.stderr?ref=c3faa2250c67ac040fba77828b7e042940412110", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: `()` doesn't implement `std::fmt::Display`\n+  --> $DIR/point-at-type-param-in-path-expr.rs:4:19\n+   |\n+LL |     let x = foo::<()>;\n+   |                   ^^ `()` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `()`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+note: required by a bound in `foo`\n+  --> $DIR/point-at-type-param-in-path-expr.rs:1:11\n+   |\n+LL | fn foo<T: std::fmt::Display>() {}\n+   |           ^^^^^^^^^^^^^^^^^ required by this bound in `foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}