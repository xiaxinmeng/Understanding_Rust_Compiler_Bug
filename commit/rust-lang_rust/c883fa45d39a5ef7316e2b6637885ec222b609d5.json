{"sha": "c883fa45d39a5ef7316e2b6637885ec222b609d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ODNmYTQ1ZDM5YTVlZjczMTZlMmI2NjM3ODg1ZWMyMjJiNjA5ZDU=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-11T00:47:13Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-20T17:42:49Z"}, "message": "Allow multiple `asm!` options", "tree": {"sha": "35b4e7c5b22c515033fd1c19777c2ed7f1578fbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35b4e7c5b22c515033fd1c19777c2ed7f1578fbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c883fa45d39a5ef7316e2b6637885ec222b609d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c883fa45d39a5ef7316e2b6637885ec222b609d5", "html_url": "https://github.com/rust-lang/rust/commit/c883fa45d39a5ef7316e2b6637885ec222b609d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c883fa45d39a5ef7316e2b6637885ec222b609d5/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033013cab3a861224fd55f494c8be1cb0349eb49", "url": "https://api.github.com/repos/rust-lang/rust/commits/033013cab3a861224fd55f494c8be1cb0349eb49", "html_url": "https://github.com/rust-lang/rust/commit/033013cab3a861224fd55f494c8be1cb0349eb49"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "e98431a269591740331d113676621971d6177463", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c883fa45d39a5ef7316e2b6637885ec222b609d5/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c883fa45d39a5ef7316e2b6637885ec222b609d5/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=c883fa45d39a5ef7316e2b6637885ec222b609d5", "patch": "@@ -16,7 +16,7 @@ struct AsmArgs {\n     named_args: FxHashMap<Symbol, usize>,\n     reg_args: FxHashSet<usize>,\n     options: ast::InlineAsmOptions,\n-    options_span: Option<Span>,\n+    options_spans: Option<Vec<Span>>,\n }\n \n fn parse_args<'a>(\n@@ -59,7 +59,7 @@ fn parse_args<'a>(\n         named_args: FxHashMap::default(),\n         reg_args: FxHashSet::default(),\n         options: ast::InlineAsmOptions::empty(),\n-        options_span: None,\n+        options_spans: None,\n     };\n \n     let mut allow_templates = true;\n@@ -174,9 +174,9 @@ fn parse_args<'a>(\n \n         // Validate the order of named, positional & explicit register operands and options. We do\n         // this at the end once we have the full span of the argument available.\n-        if let Some(options_span) = args.options_span {\n+        if let Some(ref options_spans) = args.options_spans {\n             ecx.struct_span_err(span, \"arguments are not allowed after options\")\n-                .span_label(options_span, \"previous options\")\n+                .span_labels(options_spans.clone(), \"previous options\")\n                 .span_label(span, \"argument\")\n                 .emit();\n         }\n@@ -227,21 +227,21 @@ fn parse_args<'a>(\n     if args.options.contains(ast::InlineAsmOptions::NOMEM)\n         && args.options.contains(ast::InlineAsmOptions::READONLY)\n     {\n-        let span = args.options_span.unwrap();\n-        ecx.struct_span_err(span, \"the `nomem` and `readonly` options are mutually exclusive\")\n+        let spans = args.options_spans.clone().unwrap();\n+        ecx.struct_span_err(spans, \"the `nomem` and `readonly` options are mutually exclusive\")\n             .emit();\n     }\n     if args.options.contains(ast::InlineAsmOptions::PURE)\n         && args.options.contains(ast::InlineAsmOptions::NORETURN)\n     {\n-        let span = args.options_span.unwrap();\n-        ecx.struct_span_err(span, \"the `pure` and `noreturn` options are mutually exclusive\")\n+        let spans = args.options_spans.clone().unwrap();\n+        ecx.struct_span_err(spans, \"the `pure` and `noreturn` options are mutually exclusive\")\n             .emit();\n     }\n     if args.options.contains(ast::InlineAsmOptions::PURE)\n         && !args.options.intersects(ast::InlineAsmOptions::NOMEM | ast::InlineAsmOptions::READONLY)\n     {\n-        let span = args.options_span.unwrap();\n+        let span = args.options_spans.clone().unwrap();\n         ecx.struct_span_err(\n             span,\n             \"the `pure` option must be combined with either `nomem` or `readonly`\",\n@@ -267,7 +267,7 @@ fn parse_args<'a>(\n     }\n     if args.options.contains(ast::InlineAsmOptions::PURE) && !have_real_output {\n         ecx.struct_span_err(\n-            args.options_span.unwrap(),\n+            args.options_spans.clone().unwrap(),\n             \"asm with `pure` option must have at least one output\",\n         )\n         .emit();\n@@ -314,13 +314,10 @@ fn parse_options<'a>(p: &mut Parser<'a>, args: &mut AsmArgs) -> Result<(), Diagn\n     }\n \n     let new_span = span_start.to(p.prev_token.span);\n-    if let Some(options_span) = args.options_span {\n-        p.struct_span_err(new_span, \"asm options cannot be specified multiple times\")\n-            .span_label(options_span, \"previously here\")\n-            .span_label(new_span, \"duplicate options\")\n-            .emit();\n+    if let Some(options_spans) = &mut args.options_spans {\n+        options_spans.push(new_span);\n     } else {\n-        args.options_span = Some(new_span);\n+        args.options_spans = Some(vec![new_span]);\n     }\n \n     Ok(())"}]}