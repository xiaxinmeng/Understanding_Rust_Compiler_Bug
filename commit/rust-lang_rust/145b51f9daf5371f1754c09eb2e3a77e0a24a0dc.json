{"sha": "145b51f9daf5371f1754c09eb2e3a77e0a24a0dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NWI1MWY5ZGFmNTM3MWYxNzU0YzA5ZWIyZTNhNzdlMGEyNGEwZGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-11T09:54:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-11T09:54:09Z"}, "message": "Merge #9836\n\n9836: Refactor: quick clean-up of iteration idioms in the `vfs` crate r=matklad a=Some-Dood\n\nThis PR cleans up some of the iteration idioms used in the `vfs` crate. Most of the changes simply converted `for` loops into their `std::iter::Iterator`-method counterpart. Other changes required some inversion of logic to accommodate for better short-circuiting. Overall, there should be no behavioral changes. If there are any stylistic issues, I will gladly adhere to them and adjust the PR accordingly. Thanks!\n\nCo-authored-by: Basti Ortiz <39114273+Some-Dood@users.noreply.github.com>", "tree": {"sha": "3cfc2175525857263eb86ce7d5c6787d1cda6ea4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cfc2175525857263eb86ce7d5c6787d1cda6ea4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/145b51f9daf5371f1754c09eb2e3a77e0a24a0dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhE55BCRBK7hj4Ov3rIwAAWCAIAEHpc/S8jK86y89tID2LZPgr\ne8lL2KoT5qCMo8M5QXi0uuaFx7V4whSQ2O1+aTTAE5ygbvYtzPJb+6QMArlOyqHp\nw9nYfi258UdrfkGTI6/TcnAJip+3B/pdesVTb5MZZw6r9zNdoB5ZWz294zEcDi4n\nPfGUtZUoFd2nM6gs0rjJQ95pDgL+S6LRsLspL8WK0/ZmdEKPb3Cr4M7IxgGmrod3\n6vHCtGBCSbYYMZQU+ZhZLVOCu0D2hwJxT40XPD3gRzdE+eSWnd9siGYOIVVTjB9L\njkMl5cLRyfMfMWPuTCDF8nKv/ZQD6sgXn3sMObitQ1EIlRUeUQdgPKOSZuE27h4=\n=MjAS\n-----END PGP SIGNATURE-----\n", "payload": "tree 3cfc2175525857263eb86ce7d5c6787d1cda6ea4\nparent 6c80c42c57ac4150e7287074f54aa7b4caf6f6dc\nparent 0986632c040e562826ab0dfc13e183d34a3c3a34\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628675649 +0000\ncommitter GitHub <noreply@github.com> 1628675649 +0000\n\nMerge #9836\n\n9836: Refactor: quick clean-up of iteration idioms in the `vfs` crate r=matklad a=Some-Dood\n\nThis PR cleans up some of the iteration idioms used in the `vfs` crate. Most of the changes simply converted `for` loops into their `std::iter::Iterator`-method counterpart. Other changes required some inversion of logic to accommodate for better short-circuiting. Overall, there should be no behavioral changes. If there are any stylistic issues, I will gladly adhere to them and adjust the PR accordingly. Thanks!\n\nCo-authored-by: Basti Ortiz <39114273+Some-Dood@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/145b51f9daf5371f1754c09eb2e3a77e0a24a0dc", "html_url": "https://github.com/rust-lang/rust/commit/145b51f9daf5371f1754c09eb2e3a77e0a24a0dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/145b51f9daf5371f1754c09eb2e3a77e0a24a0dc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c80c42c57ac4150e7287074f54aa7b4caf6f6dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c80c42c57ac4150e7287074f54aa7b4caf6f6dc", "html_url": "https://github.com/rust-lang/rust/commit/6c80c42c57ac4150e7287074f54aa7b4caf6f6dc"}, {"sha": "0986632c040e562826ab0dfc13e183d34a3c3a34", "url": "https://api.github.com/repos/rust-lang/rust/commits/0986632c040e562826ab0dfc13e183d34a3c3a34", "html_url": "https://github.com/rust-lang/rust/commit/0986632c040e562826ab0dfc13e183d34a3c3a34"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "c341b974a04dd4e48dcce6231a5677ba582c298e", "filename": "crates/vfs/src/loader.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/145b51f9daf5371f1754c09eb2e3a77e0a24a0dc/crates%2Fvfs%2Fsrc%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145b51f9daf5371f1754c09eb2e3a77e0a24a0dc/crates%2Fvfs%2Fsrc%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Floader.rs?ref=145b51f9daf5371f1754c09eb2e3a77e0a24a0dc", "patch": "@@ -136,10 +136,13 @@ impl Entry {\n impl Directories {\n     /// Returns `true` if `path` is included in `self`.\n     pub fn contains_file(&self, path: &AbsPath) -> bool {\n+        // First, check the file extension...\n         let ext = path.extension().unwrap_or_default();\n         if self.extensions.iter().all(|it| it.as_str() != ext) {\n             return false;\n         }\n+\n+        // Then, check for path inclusion...\n         self.includes_path(path)\n     }\n \n@@ -158,25 +161,22 @@ impl Directories {\n     ///   - This path is longer than any element in `self.exclude` that is a prefix\n     ///     of `path`. In case of equality, exclusion wins.\n     fn includes_path(&self, path: &AbsPath) -> bool {\n-        let mut include: Option<&AbsPathBuf> = None;\n+        let mut include = None::<&AbsPathBuf>;\n         for incl in &self.include {\n             if path.starts_with(incl) {\n                 include = Some(match include {\n                     Some(prev) if prev.starts_with(incl) => prev,\n                     _ => incl,\n-                })\n+                });\n             }\n         }\n+\n         let include = match include {\n             Some(it) => it,\n             None => return false,\n         };\n-        for excl in &self.exclude {\n-            if path.starts_with(excl) && excl.starts_with(include) {\n-                return false;\n-            }\n-        }\n-        true\n+\n+        !self.exclude.iter().any(|excl| path.starts_with(excl) && excl.starts_with(include))\n     }\n }\n "}]}