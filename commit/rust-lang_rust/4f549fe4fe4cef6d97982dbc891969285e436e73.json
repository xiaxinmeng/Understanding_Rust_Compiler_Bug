{"sha": "4f549fe4fe4cef6d97982dbc891969285e436e73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNTQ5ZmU0ZmU0Y2VmNmQ5Nzk4MmRiYzg5MTk2OTI4NWU0MzZlNzM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-20T21:48:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-20T21:48:41Z"}, "message": "improve comment about instantiating anon types", "tree": {"sha": "420ef20f8bc28af7e7ccbfb4bd59a81cd93bffa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/420ef20f8bc28af7e7ccbfb4bd59a81cd93bffa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f549fe4fe4cef6d97982dbc891969285e436e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f549fe4fe4cef6d97982dbc891969285e436e73", "html_url": "https://github.com/rust-lang/rust/commit/4f549fe4fe4cef6d97982dbc891969285e436e73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f549fe4fe4cef6d97982dbc891969285e436e73/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f490ca4bdb151b7b72bf6647d0bc4de5951667c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f490ca4bdb151b7b72bf6647d0bc4de5951667c", "html_url": "https://github.com/rust-lang/rust/commit/3f490ca4bdb151b7b72bf6647d0bc4de5951667c"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "be5314a2c170a05b46d58f8146299eddbbc24895", "filename": "src/librustc/infer/anon_types/mod.rs", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4f549fe4fe4cef6d97982dbc891969285e436e73/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f549fe4fe4cef6d97982dbc891969285e436e73/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs?ref=4f549fe4fe4cef6d97982dbc891969285e436e73", "patch": "@@ -509,12 +509,40 @@ impl<'a, 'gcx, 'tcx> Instantiator<'a, 'gcx, 'tcx> {\n             tcx,\n             fldop: |ty| {\n                 if let ty::TyAnon(def_id, substs) = ty.sty {\n-                    // Check that this is `impl Trait` type is declared by\n-                    // `parent_def_id`. During the first phase of type-check, this\n-                    // is true, but during NLL type-check, we sometimes encounter\n-                    // `impl Trait` types in e.g. inferred closure signatures that\n-                    // are not 'local' to the current function and hence which\n-                    // ought not to be instantiated.\n+                    // Check that this is `impl Trait` type is\n+                    // declared by `parent_def_id` -- i.e., one whose\n+                    // value we are inferring.  At present, this is\n+                    // always true during the first phase of\n+                    // type-check, but not always true later on during\n+                    // NLL. Once we support named abstract types more fully,\n+                    // this same scenario will be able to arise during all phases.\n+                    //\n+                    // Here is an example using `abstract type` that indicates\n+                    // the distinction we are checking for:\n+                    //\n+                    // ```rust\n+                    // mod a {\n+                    //   pub abstract type Foo: Iterator;\n+                    //   pub fn make_foo() -> Foo { .. }\n+                    // }\n+                    //\n+                    // mod b {\n+                    //   fn foo() -> a::Foo { a::make_foo() }\n+                    // }\n+                    // ```\n+                    //\n+                    // Here, the return type of `foo` references a\n+                    // `TyAnon` indeed, but not one whose value is\n+                    // presently being inferred. You can get into a\n+                    // similar situation with closure return types\n+                    // today:\n+                    //\n+                    // ```rust\n+                    // fn foo() -> impl Iterator { .. }\n+                    // fn bar() {\n+                    //     let x = || foo(); // returns the Anon assoc with `foo`\n+                    // }\n+                    // ```\n                     if let Some(anon_node_id) = tcx.hir.as_local_node_id(def_id) {\n                         let anon_parent_node_id = tcx.hir.get_parent(anon_node_id);\n                         let anon_parent_def_id = tcx.hir.local_def_id(anon_parent_node_id);"}]}