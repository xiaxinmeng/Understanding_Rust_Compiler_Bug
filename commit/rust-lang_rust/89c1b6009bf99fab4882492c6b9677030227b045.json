{"sha": "89c1b6009bf99fab4882492c6b9677030227b045", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YzFiNjAwOWJmOTlmYWI0ODgyNDkyYzZiOTY3NzAzMDIyN2IwNDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-06T09:04:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-16T10:57:45Z"}, "message": "replace `usize` with `RegionIndex` in indices map", "tree": {"sha": "3caab72ca776b4c543126302a0a9b9af9205cfbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3caab72ca776b4c543126302a0a9b9af9205cfbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89c1b6009bf99fab4882492c6b9677030227b045", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89c1b6009bf99fab4882492c6b9677030227b045", "html_url": "https://github.com/rust-lang/rust/commit/89c1b6009bf99fab4882492c6b9677030227b045", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89c1b6009bf99fab4882492c6b9677030227b045/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad93b695d1fc8340d520aea1ad22e1d35930e1e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad93b695d1fc8340d520aea1ad22e1d35930e1e2", "html_url": "https://github.com/rust-lang/rust/commit/ad93b695d1fc8340d520aea1ad22e1d35930e1e2"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "af309342dc522af1edc9b58d0cf0de0940e3d48c", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89c1b6009bf99fab4882492c6b9677030227b045/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c1b6009bf99fab4882492c6b9677030227b045/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=89c1b6009bf99fab4882492c6b9677030227b045", "patch": "@@ -23,6 +23,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(core_intrinsics)]\n #![feature(decl_macro)]\n #![feature(i128_type)]\n+#![feature(match_default_bindings)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(placement_in_syntax)]\n #![feature(collection_placement)]"}, {"sha": "36c14b55568fd38173245b0a8b2860e0b12c1aa5", "filename": "src/librustc_mir/transform/nll/free_regions.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/89c1b6009bf99fab4882492c6b9677030227b045/src%2Flibrustc_mir%2Ftransform%2Fnll%2Ffree_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c1b6009bf99fab4882492c6b9677030227b045/src%2Flibrustc_mir%2Ftransform%2Fnll%2Ffree_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Ffree_regions.rs?ref=89c1b6009bf99fab4882492c6b9677030227b045", "patch": "@@ -28,14 +28,17 @@ use rustc::middle::free_region::FreeRegionMap;\n use rustc::ty;\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::FxHashMap;\n+use rustc_data_structures::indexed_vec::Idx;\n+\n+use super::RegionIndex;\n \n #[derive(Debug)]\n pub struct FreeRegions<'tcx> {\n     /// Given a free region defined on this function (either early- or\n-    /// late-bound), this maps it to its internal region index. The\n-    /// corresponding variable will be \"capped\" so that it cannot\n-    /// grow.\n-    pub indices: FxHashMap<ty::Region<'tcx>, usize>,\n+    /// late-bound), this maps it to its internal region index. When\n+    /// the region context is created, the first N variables will be\n+    /// created based on these indices.\n+    pub indices: FxHashMap<ty::Region<'tcx>, RegionIndex>,\n \n     /// The map from the typeck tables telling us how to relate free regions.\n     pub free_region_map: &'tcx FreeRegionMap<'tcx>,\n@@ -78,9 +81,9 @@ pub fn free_regions<'a, 'gcx, 'tcx>(\n }\n \n fn insert_free_region<'tcx>(\n-    free_regions: &mut FxHashMap<ty::Region<'tcx>, usize>,\n+    free_regions: &mut FxHashMap<ty::Region<'tcx>, RegionIndex>,\n     region: ty::Region<'tcx>,\n ) {\n-    let len = free_regions.len();\n-    free_regions.entry(region).or_insert(len);\n+    let next = RegionIndex::new(free_regions.len());\n+    free_regions.entry(region).or_insert(next);\n }"}, {"sha": "f5731255449eca6b1a05e890fc363c01e5f30c0b", "filename": "src/librustc_mir/transform/nll/region_infer.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89c1b6009bf99fab4882492c6b9677030227b045/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c1b6009bf99fab4882492c6b9677030227b045/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs?ref=89c1b6009bf99fab4882492c6b9677030227b045", "patch": "@@ -13,7 +13,7 @@ use super::free_regions::FreeRegions;\n use rustc::infer::InferCtxt;\n use rustc::mir::{Location, Mir};\n use rustc::ty;\n-use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n+use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::FxHashSet;\n use std::collections::BTreeSet;\n use std::fmt;\n@@ -151,15 +151,13 @@ impl<'a, 'gcx, 'tcx> RegionInferenceContext<'tcx> {\n     /// is just itself. R1 (`'b`) in contrast also outlives `'a` and\n     /// hence contains R0 and R1.\n     fn init_free_regions(&mut self, free_regions: &FreeRegions<'tcx>, mir: &Mir<'tcx>) {\n-        let &FreeRegions {\n-            ref indices,\n-            ref free_region_map,\n+        let FreeRegions {\n+            indices,\n+            free_region_map,\n         } = free_regions;\n \n         // For each free region X:\n-        for (free_region, index) in indices {\n-            let variable = RegionIndex::new(*index);\n-\n+        for (free_region, &variable) in indices {\n             self.free_regions.push(variable);\n \n             // Initialize the name and a few other details.\n@@ -184,7 +182,7 @@ impl<'a, 'gcx, 'tcx> RegionInferenceContext<'tcx> {\n             // Go through each region Y that outlives X (i.e., where\n             // Y: X is true). Add `end(X)` into the set for `Y`.\n             for superregion in free_region_map.regions_that_outlive(&free_region) {\n-                let superregion_index = RegionIndex::new(indices[superregion]);\n+                let superregion_index = indices[superregion];\n                 self.definitions[superregion_index]\n                     .value\n                     .add_free_region(variable);"}, {"sha": "c0d6e0cbe657b58dc7c1046ee046c9507ff02a13", "filename": "src/librustc_mir/transform/nll/renumber.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89c1b6009bf99fab4882492c6b9677030227b045/src%2Flibrustc_mir%2Ftransform%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c1b6009bf99fab4882492c6b9677030227b045/src%2Flibrustc_mir%2Ftransform%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Frenumber.rs?ref=89c1b6009bf99fab4882492c6b9677030227b045", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc_data_structures::indexed_vec::Idx;\n+use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc::ty::subst::{Kind, Substs};\n use rustc::ty::{self, ClosureSubsts, RegionKind, RegionVid, Ty, TypeFoldable};\n use rustc::mir::{BasicBlock, Local, Location, Mir, Rvalue, Statement, StatementKind};\n@@ -17,6 +17,7 @@ use rustc::infer::{self as rustc_infer, InferCtxt};\n use syntax_pos::DUMMY_SP;\n use std::collections::HashMap;\n \n+use super::RegionIndex;\n use super::free_regions::FreeRegions;\n \n /// Replaces all free regions appearing in the MIR with fresh\n@@ -51,7 +52,7 @@ struct NLLVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     num_region_variables: usize,\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n     free_regions: &'a FreeRegions<'tcx>,\n-    free_region_inference_vars: Vec<ty::Region<'tcx>>,\n+    free_region_inference_vars: IndexVec<RegionIndex, ty::Region<'tcx>>,\n     arg_count: usize,\n }\n "}]}