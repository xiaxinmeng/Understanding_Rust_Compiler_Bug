{"sha": "b5b403abcc2f3a3fed2ef154f2aeffc479cfcfc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YjQwM2FiY2MyZjNhM2ZlZDJlZjE1NGYyYWVmZmM0NzljZmNmYzI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T22:05:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:31Z"}, "message": "librustc: De-`@mut` `Module::external_module_children`", "tree": {"sha": "e98a83686e92f50c51c86bb072b2633a68dddc63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e98a83686e92f50c51c86bb072b2633a68dddc63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5b403abcc2f3a3fed2ef154f2aeffc479cfcfc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b403abcc2f3a3fed2ef154f2aeffc479cfcfc2", "html_url": "https://github.com/rust-lang/rust/commit/b5b403abcc2f3a3fed2ef154f2aeffc479cfcfc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5b403abcc2f3a3fed2ef154f2aeffc479cfcfc2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea63a18500dd4ad042c2340b3e6a5aaecdc8e1df", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea63a18500dd4ad042c2340b3e6a5aaecdc8e1df", "html_url": "https://github.com/rust-lang/rust/commit/ea63a18500dd4ad042c2340b3e6a5aaecdc8e1df"}], "stats": {"total": 62, "additions": 45, "deletions": 17}, "files": [{"sha": "d98431895859f6ad011e61d2d95af4c1d5c6da91", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 45, "deletions": 17, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b5b403abcc2f3a3fed2ef154f2aeffc479cfcfc2/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b403abcc2f3a3fed2ef154f2aeffc479cfcfc2/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=b5b403abcc2f3a3fed2ef154f2aeffc479cfcfc2", "patch": "@@ -425,7 +425,7 @@ struct Module {\n \n     // The external module children of this node that were declared with\n     // `extern mod`.\n-    external_module_children: @mut HashMap<Name, @Module>,\n+    external_module_children: RefCell<HashMap<Name, @Module>>,\n \n     // The anonymous children of this node. Anonymous children are pseudo-\n     // modules that are implicitly created around items contained within\n@@ -472,7 +472,7 @@ impl Module {\n             is_public: is_public,\n             children: @mut HashMap::new(),\n             imports: @mut ~[],\n-            external_module_children: @mut HashMap::new(),\n+            external_module_children: RefCell::new(HashMap::new()),\n             anonymous_children: @mut HashMap::new(),\n             import_resolutions: @mut HashMap::new(),\n             glob_count: Cell::new(0),\n@@ -1506,9 +1506,13 @@ impl Resolver {\n                                                           false,\n                                                           true);\n \n-                        parent.external_module_children.insert(\n-                            name.name,\n-                            external_module);\n+                        {\n+                            let mut external_module_children =\n+                                parent.external_module_children.borrow_mut();\n+                            external_module_children.get().insert(\n+                                name.name,\n+                                external_module);\n+                        }\n \n                         self.build_reduced_graph_for_external_crate(\n                             external_module);\n@@ -2352,13 +2356,18 @@ impl Resolver {\n         match type_result {\n             BoundResult(..) => {}\n             _ => {\n-                match containing_module.external_module_children\n-                                       .find(&source.name) {\n+                let module_opt = {\n+                    let mut external_module_children =\n+                        containing_module.external_module_children\n+                                         .borrow_mut();\n+                    external_module_children.get().find_copy(&source.name)\n+                };\n+                match module_opt {\n                     None => {} // Continue.\n                     Some(module) => {\n                         let name_bindings =\n                             @mut Resolver::create_name_bindings_from_module(\n-                                *module);\n+                                module);\n                         type_result = BoundResult(containing_module,\n                                                   name_bindings);\n                         used_public = true;\n@@ -2565,10 +2574,14 @@ impl Resolver {\n         }\n \n         // Add external module children from the containing module.\n-        for (&name, module) in containing_module.external_module_children.iter() {\n-            let name_bindings =\n-                @mut Resolver::create_name_bindings_from_module(*module);\n-            merge_import_resolution(name, name_bindings);\n+        {\n+            let external_module_children =\n+                containing_module.external_module_children.borrow();\n+            for (&name, module) in external_module_children.get().iter() {\n+                let name_bindings =\n+                    @mut Resolver::create_name_bindings_from_module(*module);\n+                merge_import_resolution(name, name_bindings);\n+            }\n         }\n \n         // Record the destination of this import\n@@ -2861,12 +2874,17 @@ impl Resolver {\n \n         // Search for external modules.\n         if namespace == TypeNS {\n-            match module_.external_module_children.find(&name.name) {\n+            let module_opt = {\n+                let external_module_children =\n+                    module_.external_module_children.borrow();\n+                external_module_children.get().find_copy(&name.name)\n+            };\n+            match module_opt {\n                 None => {}\n                 Some(module) => {\n                     let name_bindings =\n                         @mut Resolver::create_name_bindings_from_module(\n-                            *module);\n+                            module);\n                     debug!(\"lower name bindings succeeded\");\n                     return Success((Target::new(module_, name_bindings), false));\n                 }\n@@ -3133,12 +3151,17 @@ impl Resolver {\n \n         // Finally, search through external children.\n         if namespace == TypeNS {\n-            match module_.external_module_children.find(&name.name) {\n+            let module_opt = {\n+                let external_module_children =\n+                    module_.external_module_children.borrow();\n+                external_module_children.get().find_copy(&name.name)\n+            };\n+            match module_opt {\n                 None => {}\n                 Some(module) => {\n                     let name_bindings =\n                         @mut Resolver::create_name_bindings_from_module(\n-                            *module);\n+                            module);\n                     return Success((Target::new(module_, name_bindings), false));\n                 }\n             }\n@@ -4664,7 +4687,12 @@ impl Resolver {\n \n         // Finally, search through external children.\n         if namespace == TypeNS {\n-            match containing_module.external_module_children.find(&name.name) {\n+            let module_opt = {\n+                let external_module_children =\n+                    containing_module.external_module_children.borrow();\n+                external_module_children.get().find_copy(&name.name)\n+            };\n+            match module_opt {\n                 None => {}\n                 Some(module) => {\n                     match module.def_id.get() {"}]}