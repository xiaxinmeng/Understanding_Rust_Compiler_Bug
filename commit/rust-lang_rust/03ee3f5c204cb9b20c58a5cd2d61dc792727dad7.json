{"sha": "03ee3f5c204cb9b20c58a5cd2d61dc792727dad7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZWUzZjVjMjA0Y2I5YjIwYzU4YTVjZDJkNjFkYzc5MjcyN2RhZDc=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-07-20T12:48:24Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-08-06T11:16:52Z"}, "message": "add an Ivar for write-only variables", "tree": {"sha": "35456b07c4c96009ea260208613d8df70eb15a9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35456b07c4c96009ea260208613d8df70eb15a9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03ee3f5c204cb9b20c58a5cd2d61dc792727dad7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03ee3f5c204cb9b20c58a5cd2d61dc792727dad7", "html_url": "https://github.com/rust-lang/rust/commit/03ee3f5c204cb9b20c58a5cd2d61dc792727dad7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03ee3f5c204cb9b20c58a5cd2d61dc792727dad7/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "859d2954ed974e4d81ea4c20140f6f15f4c6077e", "url": "https://api.github.com/repos/rust-lang/rust/commits/859d2954ed974e4d81ea4c20140f6f15f4c6077e", "html_url": "https://github.com/rust-lang/rust/commit/859d2954ed974e4d81ea4c20140f6f15f4c6077e"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "c16a2ea077c40bf3f79c1ed1ae5640bb1958e6fd", "filename": "src/librustc_data_structures/ivar.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/03ee3f5c204cb9b20c58a5cd2d61dc792727dad7/src%2Flibrustc_data_structures%2Fivar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ee3f5c204cb9b20c58a5cd2d61dc792727dad7/src%2Flibrustc_data_structures%2Fivar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fivar.rs?ref=03ee3f5c204cb9b20c58a5cd2d61dc792727dad7", "patch": "@@ -0,0 +1,70 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+use std::cell::Cell;\n+\n+/// A write-once variable. When constructed, it is empty, and\n+/// can only be set once.\n+///\n+/// Ivars ensure that data that can only be initialised once. A full\n+/// implementation is used for concurrency and blocks on a read of an\n+/// unfulfilled value. This implementation is more minimal and panics\n+/// if you attempt to read the value before it has been set. It is also\n+/// not `Sync`, but may be extended in the future to be usable as a true\n+/// concurrency type.\n+#[derive(PartialEq)]\n+pub struct Ivar<T: Copy> {\n+    data: Cell<Option<T>>\n+}\n+\n+impl<T: Copy> Ivar<T> {\n+    pub fn new() -> Ivar<T> {\n+        Ivar {\n+            data: Cell::new(None)\n+        }\n+    }\n+\n+    pub fn get(&self) -> Option<T> {\n+        self.data.get()\n+    }\n+\n+    pub fn fulfill(&self, value: T) {\n+        assert!(self.data.get().is_none(),\n+                \"Value already set!\");\n+        self.data.set(Some(value));\n+    }\n+\n+    pub fn is_fulfilled(&self) -> bool {\n+        self.data.get().is_some()\n+    }\n+\n+    pub fn unwrap(&self) -> T {\n+        self.get().unwrap()\n+    }\n+}\n+\n+impl<T: Copy+fmt::Debug> fmt::Debug for Ivar<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.get() {\n+            Some(val) => write!(f, \"Ivar({:?})\", val),\n+            None => f.write_str(\"Ivar(<unfulfilled>)\")\n+        }\n+    }\n+}\n+\n+impl<T: Copy> Clone for Ivar<T> {\n+    fn clone(&self) -> Ivar<T> {\n+        match self.get() {\n+            Some(val) => Ivar { data: Cell::new(Some(val)) },\n+            None => Ivar::new()\n+        }\n+    }\n+}"}, {"sha": "558d15610dff25f60184bafd6612300b34a071db", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03ee3f5c204cb9b20c58a5cd2d61dc792727dad7/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ee3f5c204cb9b20c58a5cd2d61dc792727dad7/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=03ee3f5c204cb9b20c58a5cd2d61dc792727dad7", "patch": "@@ -36,4 +36,5 @@ extern crate serialize as rustc_serialize; // used by deriving\n pub mod snapshot_vec;\n pub mod graph;\n pub mod bitvec;\n+pub mod ivar;\n pub mod unify;"}]}