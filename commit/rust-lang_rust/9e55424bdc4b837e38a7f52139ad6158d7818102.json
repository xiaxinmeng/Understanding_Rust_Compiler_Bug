{"sha": "9e55424bdc4b837e38a7f52139ad6158d7818102", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNTU0MjRiZGM0YjgzN2UzOGE3ZjUyMTM5YWQ2MTU4ZDc4MTgxMDI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-10T18:05:10Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-19T01:06:08Z"}, "message": "Apply review comments", "tree": {"sha": "ae9beb1c5d1b8183999055eaf70d162059f907c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae9beb1c5d1b8183999055eaf70d162059f907c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e55424bdc4b837e38a7f52139ad6158d7818102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e55424bdc4b837e38a7f52139ad6158d7818102", "html_url": "https://github.com/rust-lang/rust/commit/9e55424bdc4b837e38a7f52139ad6158d7818102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e55424bdc4b837e38a7f52139ad6158d7818102/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9035264a8febac258d1def1d27978ab8cd1ff121", "url": "https://api.github.com/repos/rust-lang/rust/commits/9035264a8febac258d1def1d27978ab8cd1ff121", "html_url": "https://github.com/rust-lang/rust/commit/9035264a8febac258d1def1d27978ab8cd1ff121"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "dc129a28e3707bd5d2dd1277e2201a43e70c8543", "filename": "clippy_lints/src/ok_if_let.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9e55424bdc4b837e38a7f52139ad6158d7818102/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e55424bdc4b837e38a7f52139ad6158d7818102/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=9e55424bdc4b837e38a7f52139ad6158d7818102", "patch": "@@ -4,6 +4,7 @@ use rustc_errors::Applicability;\n use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::BytePos;\n \n declare_clippy_lint! {\n     /// **What it does:*** Checks for unnecessary `ok()` in if let.\n@@ -40,22 +41,22 @@ declare_lint_pass!(OkIfLet => [IF_LET_SOME_RESULT]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OkIfLet {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! { //begin checking variables\n-            if let ExprKind::Match(ref op, ref body, ref source) = expr.kind; //test if expr is a match\n-            if let MatchSource::IfLetDesugar { contains_else_clause } = *source; //test if it is an If Let\n+            if let ExprKind::Match(ref op, ref body, source) = expr.kind; //test if expr is a match\n+            if let MatchSource::IfLetDesugar { contains_else_clause } = source; //test if it is an If Let\n             if let ExprKind::MethodCall(_, ok_span, ref result_types) = op.kind; //check is expr.ok() has type Result<T,E>.ok()\n             if let PatKind::TupleStruct(QPath::Resolved(_, ref x), ref y, _)  = body[0].pat.kind; //get operation\n             if method_chain_args(op, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;\n \n             then {\n                 let is_result_type = match_type(cx, cx.tables.expr_ty(&result_types[0]), &paths::RESULT);\n                 let mut applicability = Applicability::MachineApplicable;\n+                let trimed_ok_span = op.span.until(op.span.with_lo(ok_span.lo() - BytePos(1)));\n                 let some_expr_string = snippet_with_applicability(cx, y[0].span, \"\", &mut applicability);\n-                let trimmed_ok = snippet_with_applicability(cx, op.span.until(ok_span), \"\", &mut applicability);\n+                let trimmed_ok = snippet_with_applicability(cx, trimed_ok_span, \"\", &mut applicability);\n                 let mut sugg = format!(\n                     \"if let Ok({}) = {} {}\",\n                     some_expr_string,\n-                    // FIXME(JohnTitor): this trimming is hacky, probably can improve it\n-                    trimmed_ok.trim_matches('.'),\n+                    trimmed_ok,\n                     snippet(cx, body[0].span, \"..\"),\n                 );\n                 if contains_else_clause {"}, {"sha": "439c749f99594c09b2ae920524ae9c2764887213", "filename": "tests/ui/ok_if_let.fixed", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e55424bdc4b837e38a7f52139ad6158d7818102/tests%2Fui%2Fok_if_let.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9e55424bdc4b837e38a7f52139ad6158d7818102/tests%2Fui%2Fok_if_let.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_if_let.fixed?ref=9e55424bdc4b837e38a7f52139ad6158d7818102", "patch": "@@ -28,8 +28,7 @@ fn nested_some_no_else(x: &str) -> i32 {\n }\n \n fn main() {\n-    let x = str_to_int(\"1\");\n-    let y = str_to_int_ok(\"2\");\n-    let z = nested_some_no_else(\"3\");\n-    println!(\"{}{}{}\", x, y, z);\n+    let _ = str_to_int(\"1\");\n+    let _ = str_to_int_ok(\"2\");\n+    let _ = nested_some_no_else(\"3\");\n }"}, {"sha": "83f6ce1d33048789118ac79922e35887f4671ba9", "filename": "tests/ui/ok_if_let.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e55424bdc4b837e38a7f52139ad6158d7818102/tests%2Fui%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e55424bdc4b837e38a7f52139ad6158d7818102/tests%2Fui%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_if_let.rs?ref=9e55424bdc4b837e38a7f52139ad6158d7818102", "patch": "@@ -28,8 +28,7 @@ fn nested_some_no_else(x: &str) -> i32 {\n }\n \n fn main() {\n-    let x = str_to_int(\"1\");\n-    let y = str_to_int_ok(\"2\");\n-    let z = nested_some_no_else(\"3\");\n-    println!(\"{}{}{}\", x, y, z);\n+    let _ = str_to_int(\"1\");\n+    let _ = str_to_int_ok(\"2\");\n+    let _ = nested_some_no_else(\"3\");\n }"}]}