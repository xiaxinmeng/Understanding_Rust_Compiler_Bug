{"sha": "9cf570995cded5e224d5dba8296a85fdbe1c6918", "node_id": "C_kwDOAAsO6NoAKDljZjU3MDk5NWNkZWQ1ZTIyNGQ1ZGJhODI5NmE4NWZkYmUxYzY5MTg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-03T06:28:45Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-03T06:28:45Z"}, "message": "Suggest expressions' fields even if they're not ADTs", "tree": {"sha": "bb1ef160b80d427c355a3b574602e93d4d5e60e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb1ef160b80d427c355a3b574602e93d4d5e60e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cf570995cded5e224d5dba8296a85fdbe1c6918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf570995cded5e224d5dba8296a85fdbe1c6918", "html_url": "https://github.com/rust-lang/rust/commit/9cf570995cded5e224d5dba8296a85fdbe1c6918", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cf570995cded5e224d5dba8296a85fdbe1c6918/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4417cf020fbcd6182c11637bc6b8694434bd81a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4417cf020fbcd6182c11637bc6b8694434bd81a", "html_url": "https://github.com/rust-lang/rust/commit/e4417cf020fbcd6182c11637bc6b8694434bd81a"}], "stats": {"total": 86, "additions": 80, "deletions": 6}, "files": [{"sha": "a93588351361e58e05ef73030718e79302ad5e8c", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9cf570995cded5e224d5dba8296a85fdbe1c6918/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf570995cded5e224d5dba8296a85fdbe1c6918/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=9cf570995cded5e224d5dba8296a85fdbe1c6918", "patch": "@@ -2611,15 +2611,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // up to a depth of three\n             None\n         } else {\n-            // recursively search fields of `candidate_field` if it's a ty::Adt\n             field_path.push(candidate_field.ident(self.tcx).normalize_to_macros_2_0());\n             let field_ty = candidate_field.ty(self.tcx, subst);\n-            if let Some((nested_fields, subst)) = self.get_field_candidates(span, field_ty) {\n-                for field in nested_fields.iter() {\n+            if matches(candidate_field, field_ty) {\n+                return Some(field_path);\n+            } else if let Some((nested_fields, subst)) = self.get_field_candidates(span, field_ty) {\n+                // recursively search fields of `candidate_field` if it's a ty::Adt\n+                for field in nested_fields {\n                     if field.vis.is_accessible_from(id, self.tcx) {\n-                        if matches(candidate_field, field_ty) {\n-                            return Some(field_path);\n-                        } else if let Some(field_path) = self.check_for_nested_field_satisfying(\n+                        if let Some(field_path) = self.check_for_nested_field_satisfying(\n                             span,\n                             matches,\n                             field,"}, {"sha": "b92449c6e0aff6776e77d51a8efcc9a96e22b265", "filename": "src/test/ui/copy-a-resource.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fcopy-a-resource.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fcopy-a-resource.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcopy-a-resource.stderr?ref=9cf570995cded5e224d5dba8296a85fdbe1c6918", "patch": "@@ -10,6 +10,10 @@ LL |     let _y = x.clone();\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `Clone`\n+help: one of the expressions' fields has a method of the same name\n+   |\n+LL |     let _y = x.i.clone();\n+   |                ++\n \n error: aborting due to previous error\n "}, {"sha": "208b340d0641067309f2545dff511e8851662e9d", "filename": "src/test/ui/issues/issue-2823.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr?ref=9cf570995cded5e224d5dba8296a85fdbe1c6918", "patch": "@@ -10,6 +10,10 @@ LL |     let _d = c.clone();\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `Clone`\n+help: one of the expressions' fields has a method of the same name\n+   |\n+LL |     let _d = c.x.clone();\n+   |                ++\n \n error: aborting due to previous error\n "}, {"sha": "e8797ea7b5b4ce3fadcbf048806cd8c3e8917ae5", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=9cf570995cded5e224d5dba8296a85fdbe1c6918", "patch": "@@ -33,6 +33,10 @@ LL | pub struct TakeWhile<I, P> {\n            which is required by `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>>: Iterator`\n            `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>>: Iterator`\n            which is required by `&mut Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>>: Iterator`\n+help: one of the expressions' fields has a method of the same name\n+   |\n+LL |         .it.collect();\n+   |          +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b19f58d2a381b6360e5ea3b57f9a9936c1a3f26f", "filename": "src/test/ui/issues/issue-39175.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr?ref=9cf570995cded5e224d5dba8296a85fdbe1c6918", "patch": "@@ -5,6 +5,10 @@ LL |     Command::new(\"echo\").arg(\"hello\").exec();\n    |                                       ^^^^ method not found in `&mut Command`\n    |\n    = help: items from traits can only be used if the trait is in scope\n+help: one of the expressions' fields has a method of the same name\n+   |\n+LL |     Command::new(\"echo\").arg(\"hello\").inner.exec();\n+   |                                       ++++++\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use std::os::unix::process::CommandExt;"}, {"sha": "c3c8e5f272e3f3ff9057d16203e8f7d365a9f19a", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=9cf570995cded5e224d5dba8296a85fdbe1c6918", "patch": "@@ -35,6 +35,10 @@ LL | pub struct Filter<I, P> {\n            which is required by `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:48]>: Iterator`\n            `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:48]>: Iterator`\n            which is required by `&mut Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:48]>: Iterator`\n+help: one of the expressions' fields has a method of the same name\n+   |\n+LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).iter.count();\n+   |                                                       +++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "15e22e946da8a1da79630526c7f82f0fff9b02cb", "filename": "src/test/ui/noncopyable-class.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fnoncopyable-class.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fnoncopyable-class.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnoncopyable-class.stderr?ref=9cf570995cded5e224d5dba8296a85fdbe1c6918", "patch": "@@ -10,6 +10,14 @@ LL |     let _y = x.clone();\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `Clone`\n+help: one of the expressions' fields has a method of the same name\n+   |\n+LL |     let _y = x.i.clone();\n+   |                ++\n+help: one of the expressions' fields has a method of the same name\n+   |\n+LL |     let _y = x.j.x.clone();\n+   |                ++++\n \n error: aborting due to previous error\n "}, {"sha": "f220458f321f0e0916818aa78c8b09d40ceb3797", "filename": "src/test/ui/suggestions/import-trait-for-method-call.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr?ref=9cf570995cded5e224d5dba8296a85fdbe1c6918", "patch": "@@ -10,6 +10,10 @@ LL |     fn finish(&self) -> u64;\n    |        ------ the method is available for `DefaultHasher` here\n    |\n    = help: items from traits can only be used if the trait is in scope\n+help: one of the expressions' fields has a method of the same name\n+   |\n+LL |     h.0.finish()\n+   |       ++\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use std::hash::Hasher;"}, {"sha": "e19bc5a1fd48d19f7d946398451f1290a4c799a7", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=9cf570995cded5e224d5dba8296a85fdbe1c6918", "patch": "@@ -41,6 +41,16 @@ LL | pub struct BufWriter<W: Write> {\n            `&dyn std::io::Write: std::io::Write`\n            which is required by `BufWriter<&dyn std::io::Write>: std::io::Write`\n    = note: this error originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: one of the expressions' fields has a method of the same name\n+  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+   |\n+LL |         $dst.inner.write_fmt($crate::format_args_nl!($($arg)*))\n+   |              ++++++\n+help: one of the expressions' fields has a method of the same name\n+  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+   |\n+LL |         $dst.buf.write_fmt($crate::format_args_nl!($($arg)*))\n+   |              ++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1690309719fa7075f8c9186e66f18f7a6a0235d6", "filename": "src/test/ui/suggestions/suggest-using-chars.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-using-chars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-using-chars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-using-chars.stderr?ref=9cf570995cded5e224d5dba8296a85fdbe1c6918", "patch": "@@ -25,6 +25,10 @@ help: because of the in-memory representation of `&str`, to obtain an `Iterator`\n    |\n LL |     let _ = String::from(\"bar\").chars();\n    |                                 ~~~~~\n+help: one of the expressions' fields has a method of the same name\n+   |\n+LL |     let _ = String::from(\"bar\").vec.iter();\n+   |                                 ++++\n \n error[E0599]: no method named `iter` found for reference `&String` in the current scope\n   --> $DIR/suggest-using-chars.rs:5:36\n@@ -36,6 +40,10 @@ help: because of the in-memory representation of `&str`, to obtain an `Iterator`\n    |\n LL |     let _ = (&String::from(\"bar\")).chars();\n    |                                    ~~~~~\n+help: one of the expressions' fields has a method of the same name\n+   |\n+LL |     let _ = (&String::from(\"bar\")).vec.iter();\n+   |                                    ++++\n \n error[E0599]: no method named `iter` found for type `{integer}` in the current scope\n   --> $DIR/suggest-using-chars.rs:6:15"}, {"sha": "44c9d4a84387e1685d3ed0fa7ea2378ef00b4033", "filename": "src/test/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=9cf570995cded5e224d5dba8296a85fdbe1c6918", "patch": "@@ -42,6 +42,10 @@ help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n    |\n LL | #[derive(Clone, Copy)]\n    |\n+help: one of the expressions' fields has a method of the same name\n+   |\n+LL |     let w = u.a.clone();\n+   |               ++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "44c9d4a84387e1685d3ed0fa7ea2378ef00b4033", "filename": "src/test/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=9cf570995cded5e224d5dba8296a85fdbe1c6918", "patch": "@@ -42,6 +42,10 @@ help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n    |\n LL | #[derive(Clone, Copy)]\n    |\n+help: one of the expressions' fields has a method of the same name\n+   |\n+LL |     let w = u.a.clone();\n+   |               ++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "12917d54114e96c9f08e742c5a094fab02379f22", "filename": "src/test/ui/unique-object-noncopyable.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr?ref=9cf570995cded5e224d5dba8296a85fdbe1c6918", "patch": "@@ -23,6 +23,14 @@ LL | | >(Unique<T>, A);\n            which is required by `Box<dyn Foo>: Clone`\n            `dyn Foo: Clone`\n            which is required by `Box<dyn Foo>: Clone`\n+help: one of the expressions' fields has a method of the same name\n+   |\n+LL |     let _z = y.0.clone();\n+   |                ++\n+help: one of the expressions' fields has a method of the same name\n+   |\n+LL |     let _z = y.1.clone();\n+   |                ++\n \n error: aborting due to previous error\n "}, {"sha": "cc9bdd26e11c524dfe8e1a62438157008845ba68", "filename": "src/test/ui/unique-pinned-nocopy.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cf570995cded5e224d5dba8296a85fdbe1c6918/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr?ref=9cf570995cded5e224d5dba8296a85fdbe1c6918", "patch": "@@ -25,6 +25,14 @@ help: consider annotating `R` with `#[derive(Clone)]`\n    |\n LL | #[derive(Clone)]\n    |\n+help: one of the expressions' fields has a method of the same name\n+   |\n+LL |     let _j = i.0.clone();\n+   |                ++\n+help: one of the expressions' fields has a method of the same name\n+   |\n+LL |     let _j = i.1.clone();\n+   |                ++\n \n error: aborting due to previous error\n "}]}