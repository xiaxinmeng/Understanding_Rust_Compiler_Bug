{"sha": "0e66dc690e16f29248f8d00ca0d68e58a34b52d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNjZkYzY5MGUxNmYyOTI0OGY4ZDAwY2EwZDY4ZTU4YTM0YjUyZDg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-18T14:12:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-18T14:12:00Z"}, "message": "Merge #5796\n\n5796: Align diagnostics config with the rest of rust-analyzer\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b9ee153d4e66a670607e06c2ffb4cc579af49a16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9ee153d4e66a670607e06c2ffb4cc579af49a16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e66dc690e16f29248f8d00ca0d68e58a34b52d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfO+GwCRBK7hj4Ov3rIwAAdHIIAFZkH4ByJfs4gUuB2zpOpRoj\nu1VQHRnNrbLBdlwJPSP3xWnmSZIibVmQ8EtEx81X5C3POSvXBmCZyNLJHZgu66Ya\nddA30LzaGUM2heBaSeYqgDOayLhHOs1hJAY+T7YK463+miF/YFxRvJ26jDqN0zCF\nClAgf/SdoCj0p5V/ElG7lqtC3SRQuM+dM2yZ1gs0ESBMET5I6yxyZeMnjtAxCfKX\nS2iFOwqVGhH0C9GhB2nA5EolP14wHBXYpTCyEkBzPJcuAFWDBQ7K8nFaLHapK1Cy\n0EYtdJC7Un2FLUKIxOP+m6Rh9/bLkh7bKByaEzqU9pntGMhYWsbMrE7uClrbY10=\n=iqAr\n-----END PGP SIGNATURE-----\n", "payload": "tree b9ee153d4e66a670607e06c2ffb4cc579af49a16\nparent a3947129c5dc60cf051260c364833946f92e3350\nparent 0866b1be894b9148cf69897a1e1aa70e3c416e29\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597759920 +0000\ncommitter GitHub <noreply@github.com> 1597759920 +0000\n\nMerge #5796\n\n5796: Align diagnostics config with the rest of rust-analyzer\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e66dc690e16f29248f8d00ca0d68e58a34b52d8", "html_url": "https://github.com/rust-lang/rust/commit/0e66dc690e16f29248f8d00ca0d68e58a34b52d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3947129c5dc60cf051260c364833946f92e3350", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3947129c5dc60cf051260c364833946f92e3350", "html_url": "https://github.com/rust-lang/rust/commit/a3947129c5dc60cf051260c364833946f92e3350"}, {"sha": "0866b1be894b9148cf69897a1e1aa70e3c416e29", "url": "https://api.github.com/repos/rust-lang/rust/commits/0866b1be894b9148cf69897a1e1aa70e3c416e29", "html_url": "https://github.com/rust-lang/rust/commit/0866b1be894b9148cf69897a1e1aa70e3c416e29"}], "stats": {"total": 185, "additions": 90, "deletions": 95}, "files": [{"sha": "89ff554908a12cfd2d939262d06b8511c788f9db", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 46, "deletions": 28, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=0e66dc690e16f29248f8d00ca0d68e58a34b52d8", "patch": "@@ -4,12 +4,15 @@\n //! macro-expanded files, but we need to present them to the users in terms of\n //! original files. So we need to map the ranges.\n \n-use std::{cell::RefCell, collections::HashSet};\n+mod diagnostics_with_fix;\n+\n+use std::cell::RefCell;\n \n use base_db::SourceDatabase;\n use hir::{diagnostics::DiagnosticSinkBuilder, Semantics};\n use ide_db::RootDatabase;\n use itertools::Itertools;\n+use rustc_hash::FxHashSet;\n use syntax::{\n     ast::{self, AstNode},\n     SyntaxNode, TextRange, T,\n@@ -18,20 +21,24 @@ use text_edit::TextEdit;\n \n use crate::{Diagnostic, FileId, Fix, SourceFileEdit};\n \n-mod diagnostics_with_fix;\n-use diagnostics_with_fix::DiagnosticWithFix;\n+use self::diagnostics_with_fix::DiagnosticWithFix;\n \n #[derive(Debug, Copy, Clone)]\n pub enum Severity {\n     Error,\n     WeakWarning,\n }\n \n+#[derive(Default, Debug, Clone)]\n+pub struct DiagnosticsConfig {\n+    pub disable_experimental: bool,\n+    pub disabled: FxHashSet<String>,\n+}\n+\n pub(crate) fn diagnostics(\n     db: &RootDatabase,\n+    config: &DiagnosticsConfig,\n     file_id: FileId,\n-    enable_experimental: bool,\n-    disabled_diagnostics: Option<HashSet<String>>,\n ) -> Vec<Diagnostic> {\n     let _p = profile::span(\"diagnostics\");\n     let sema = Semantics::new(db);\n@@ -52,7 +59,7 @@ pub(crate) fn diagnostics(\n         check_struct_shorthand_initialization(&mut res, file_id, &node);\n     }\n     let res = RefCell::new(res);\n-    let mut sink_builder = DiagnosticSinkBuilder::new()\n+    let sink_builder = DiagnosticSinkBuilder::new()\n         .on::<hir::diagnostics::UnresolvedModule, _>(|d| {\n             res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n         })\n@@ -66,12 +73,8 @@ pub(crate) fn diagnostics(\n             res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n         })\n         // Only collect experimental diagnostics when they're enabled.\n-        .filter(|diag| !diag.is_experimental() || enable_experimental);\n-\n-    if let Some(disabled_diagnostics) = disabled_diagnostics {\n-        // Do not collect disabled diagnostics.\n-        sink_builder = sink_builder.filter(move |diag| !disabled_diagnostics.contains(diag.name()));\n-    }\n+        .filter(|diag| !(diag.is_experimental() && config.disable_experimental))\n+        .filter(|diag| !config.disabled.contains(diag.name()));\n \n     // Finalize the `DiagnosticSink` building process.\n     let mut sink = sink_builder\n@@ -187,12 +190,14 @@ fn check_struct_shorthand_initialization(\n \n #[cfg(test)]\n mod tests {\n-    use std::collections::HashSet;\n+    use expect::{expect, Expect};\n     use stdx::trim_indent;\n     use test_utils::assert_eq_text;\n \n-    use crate::mock_analysis::{analysis_and_position, single_file, MockAnalysis};\n-    use expect::{expect, Expect};\n+    use crate::{\n+        mock_analysis::{analysis_and_position, single_file, MockAnalysis},\n+        DiagnosticsConfig,\n+    };\n \n     /// Takes a multi-file input fixture with annotated cursor positions,\n     /// and checks that:\n@@ -203,8 +208,11 @@ mod tests {\n         let after = trim_indent(ra_fixture_after);\n \n         let (analysis, file_position) = analysis_and_position(ra_fixture_before);\n-        let diagnostic =\n-            analysis.diagnostics(file_position.file_id, true, None).unwrap().pop().unwrap();\n+        let diagnostic = analysis\n+            .diagnostics(&DiagnosticsConfig::default(), file_position.file_id)\n+            .unwrap()\n+            .pop()\n+            .unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_change.source_file_edits.pop().unwrap().edit;\n         let target_file_contents = analysis.file_text(file_position.file_id).unwrap();\n@@ -230,7 +238,11 @@ mod tests {\n         let ra_fixture_after = &trim_indent(ra_fixture_after);\n         let (analysis, file_pos) = analysis_and_position(ra_fixture_before);\n         let current_file_id = file_pos.file_id;\n-        let diagnostic = analysis.diagnostics(current_file_id, true, None).unwrap().pop().unwrap();\n+        let diagnostic = analysis\n+            .diagnostics(&DiagnosticsConfig::default(), current_file_id)\n+            .unwrap()\n+            .pop()\n+            .unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_change.source_file_edits.pop().unwrap();\n         let changed_file_id = edit.file_id;\n@@ -251,16 +263,18 @@ mod tests {\n         let analysis = mock.analysis();\n         let diagnostics = files\n             .into_iter()\n-            .flat_map(|file_id| analysis.diagnostics(file_id, true, None).unwrap())\n+            .flat_map(|file_id| {\n+                analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap()\n+            })\n             .collect::<Vec<_>>();\n         assert_eq!(diagnostics.len(), 0, \"unexpected diagnostics:\\n{:#?}\", diagnostics);\n     }\n \n     /// Takes a multi-file input fixture with annotated cursor position and the list of disabled diagnostics,\n     /// and checks that provided diagnostics aren't spawned during analysis.\n     fn check_disabled_diagnostics(ra_fixture: &str, disabled_diagnostics: &[&'static str]) {\n-        let disabled_diagnostics: HashSet<_> =\n-            disabled_diagnostics.into_iter().map(|diag| diag.to_string()).collect();\n+        let mut config = DiagnosticsConfig::default();\n+        config.disabled = disabled_diagnostics.into_iter().map(|diag| diag.to_string()).collect();\n \n         let mock = MockAnalysis::with_files(ra_fixture);\n         let files = mock.files().map(|(it, _)| it).collect::<Vec<_>>();\n@@ -269,15 +283,17 @@ mod tests {\n         let diagnostics = files\n             .clone()\n             .into_iter()\n-            .flat_map(|file_id| {\n-                analysis.diagnostics(file_id, true, Some(disabled_diagnostics.clone())).unwrap()\n-            })\n+            .flat_map(|file_id| analysis.diagnostics(&config, file_id).unwrap())\n             .collect::<Vec<_>>();\n \n         // First, we have to check that diagnostic is not emitted when it's added to the disabled diagnostics list.\n         for diagnostic in diagnostics {\n             if let Some(name) = diagnostic.name {\n-                assert!(!disabled_diagnostics.contains(&name), \"Diagnostic {} is disabled\", name);\n+                assert!(\n+                    !disabled_diagnostics.contains(&name.as_str()),\n+                    \"Diagnostic {} is disabled\",\n+                    name\n+                );\n             }\n         }\n \n@@ -288,21 +304,23 @@ mod tests {\n         // will no longer exist.\n         let diagnostics = files\n             .into_iter()\n-            .flat_map(|file_id| analysis.diagnostics(file_id, true, None).unwrap())\n+            .flat_map(|file_id| {\n+                analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap()\n+            })\n             .collect::<Vec<_>>();\n \n         assert!(\n             diagnostics\n                 .into_iter()\n                 .filter_map(|diag| diag.name)\n-                .any(|name| disabled_diagnostics.contains(&name)),\n+                .any(|name| disabled_diagnostics.contains(&name.as_str())),\n             \"At least one of the diagnostics was not emitted even without config; are the diagnostics names correct?\"\n         );\n     }\n \n     fn check_expect(ra_fixture: &str, expect: Expect) {\n         let (analysis, file_id) = single_file(ra_fixture);\n-        let diagnostics = analysis.diagnostics(file_id, true, None).unwrap();\n+        let diagnostics = analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap();\n         expect.assert_debug_eq(&diagnostics)\n     }\n "}, {"sha": "2a73abba2788617ad160398ccc21c2dbae938ba5", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=0e66dc690e16f29248f8d00ca0d68e58a34b52d8", "patch": "@@ -44,7 +44,7 @@ mod syntax_highlighting;\n mod syntax_tree;\n mod typing;\n \n-use std::{collections::HashSet, sync::Arc};\n+use std::sync::Arc;\n \n use base_db::{\n     salsa::{self, ParallelDatabase},\n@@ -65,7 +65,7 @@ pub use crate::{\n     completion::{\n         CompletionConfig, CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat,\n     },\n-    diagnostics::Severity,\n+    diagnostics::{DiagnosticsConfig, Severity},\n     display::NavigationTarget,\n     expand_macro::ExpandedMacro,\n     file_structure::StructureNode,\n@@ -148,7 +148,7 @@ pub struct AnalysisHost {\n }\n \n impl AnalysisHost {\n-    pub fn new(lru_capacity: Option<usize>) -> Self {\n+    pub fn new(lru_capacity: Option<usize>) -> AnalysisHost {\n         AnalysisHost { db: RootDatabase::new(lru_capacity) }\n     }\n \n@@ -495,13 +495,10 @@ impl Analysis {\n     /// Computes the set of diagnostics for the given file.\n     pub fn diagnostics(\n         &self,\n+        config: &DiagnosticsConfig,\n         file_id: FileId,\n-        enable_experimental: bool,\n-        disabled_diagnostics: Option<HashSet<String>>,\n     ) -> Cancelable<Vec<Diagnostic>> {\n-        self.with_db(|db| {\n-            diagnostics::diagnostics(db, file_id, enable_experimental, disabled_diagnostics)\n-        })\n+        self.with_db(|db| diagnostics::diagnostics(db, config, file_id))\n     }\n \n     /// Returns the edit required to rename reference at the position to the new"}, {"sha": "c312e0a2e883ad94809c0ed1fd404b57cfffbf0d", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=0e66dc690e16f29248f8d00ca0d68e58a34b52d8", "patch": "@@ -7,7 +7,10 @@ use base_db::{\n     salsa::{Database, Durability},\n     FileId,\n };\n-use ide::{Analysis, AnalysisChange, AnalysisHost, CompletionConfig, FilePosition, LineCol};\n+use ide::{\n+    Analysis, AnalysisChange, AnalysisHost, CompletionConfig, DiagnosticsConfig, FilePosition,\n+    LineCol,\n+};\n use vfs::AbsPathBuf;\n \n use crate::{\n@@ -71,7 +74,7 @@ impl BenchCmd {\n         match &self.what {\n             BenchWhat::Highlight { .. } => {\n                 let res = do_work(&mut host, file_id, |analysis| {\n-                    analysis.diagnostics(file_id, true, None).unwrap();\n+                    analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap();\n                     analysis.highlight_as_html(file_id, false).unwrap()\n                 });\n                 if verbosity.is_verbose() {"}, {"sha": "c424aa6e282ba6fcfa15a3e39b4151a5bfd2a2ec", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=0e66dc690e16f29248f8d00ca0d68e58a34b52d8", "patch": "@@ -8,7 +8,7 @@ use rustc_hash::FxHashSet;\n \n use base_db::SourceDatabaseExt;\n use hir::Crate;\n-use ide::Severity;\n+use ide::{DiagnosticsConfig, Severity};\n \n use crate::cli::{load_cargo::load_cargo, Result};\n \n@@ -47,7 +47,8 @@ pub fn diagnostics(\n                 String::from(\"unknown\")\n             };\n             println!(\"processing crate: {}, module: {}\", crate_name, _vfs.file_path(file_id));\n-            for diagnostic in analysis.diagnostics(file_id, true, None).unwrap() {\n+            for diagnostic in analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap()\n+            {\n                 if matches!(diagnostic.severity, Severity::Error) {\n                     found_error = true;\n                 }"}, {"sha": "99f7751acd389d874533e3e5a47848d8ab370a6d", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 11, "deletions": 28, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=0e66dc690e16f29248f8d00ca0d68e58a34b52d8", "patch": "@@ -7,24 +7,25 @@\n //! configure the server itself, feature flags are passed into analysis, and\n //! tweak things like automatic insertion of `()` in completions.\n \n-use std::{collections::HashSet, ffi::OsString, path::PathBuf};\n+use std::{ffi::OsString, path::PathBuf};\n \n use flycheck::FlycheckConfig;\n-use ide::{AssistConfig, CompletionConfig, HoverConfig, InlayHintsConfig};\n+use ide::{AssistConfig, CompletionConfig, DiagnosticsConfig, HoverConfig, InlayHintsConfig};\n use lsp_types::ClientCapabilities;\n use project_model::{CargoConfig, ProjectJson, ProjectJsonData, ProjectManifest};\n+use rustc_hash::FxHashSet;\n use serde::Deserialize;\n use vfs::AbsPathBuf;\n \n-use crate::diagnostics::DiagnosticsConfig;\n+use crate::diagnostics::DiagnosticsMapConfig;\n \n #[derive(Debug, Clone)]\n pub struct Config {\n     pub client_caps: ClientCapsConfig,\n \n     pub publish_diagnostics: bool,\n-    pub experimental_diagnostics: bool,\n     pub diagnostics: DiagnosticsConfig,\n+    pub diagnostics_map: DiagnosticsMapConfig,\n     pub lru_capacity: Option<usize>,\n     pub proc_macro_srv: Option<(PathBuf, Vec<OsString>)>,\n     pub files: FilesConfig,\n@@ -45,14 +46,6 @@ pub struct Config {\n     pub with_sysroot: bool,\n     pub linked_projects: Vec<LinkedProject>,\n     pub root_path: AbsPathBuf,\n-\n-    pub analysis: AnalysisConfig,\n-}\n-\n-/// Configuration parameters for the analysis run.\n-#[derive(Debug, Default, Clone)]\n-pub struct AnalysisConfig {\n-    pub disabled_diagnostics: HashSet<String>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -146,8 +139,8 @@ impl Config {\n \n             with_sysroot: true,\n             publish_diagnostics: true,\n-            experimental_diagnostics: true,\n             diagnostics: DiagnosticsConfig::default(),\n+            diagnostics_map: DiagnosticsMapConfig::default(),\n             lru_capacity: None,\n             proc_macro_srv: None,\n             files: FilesConfig { watcher: FilesWatcher::Notify, exclude: Vec::new() },\n@@ -184,8 +177,6 @@ impl Config {\n             hover: HoverConfig::default(),\n             linked_projects: Vec::new(),\n             root_path,\n-\n-            analysis: AnalysisConfig::default(),\n         }\n     }\n \n@@ -200,8 +191,11 @@ impl Config {\n \n         self.with_sysroot = data.withSysroot;\n         self.publish_diagnostics = data.diagnostics_enable;\n-        self.experimental_diagnostics = data.diagnostics_enableExperimental;\n         self.diagnostics = DiagnosticsConfig {\n+            disable_experimental: !data.diagnostics_enableExperimental,\n+            disabled: data.diagnostics_disabled,\n+        };\n+        self.diagnostics_map = DiagnosticsMapConfig {\n             warnings_as_info: data.diagnostics_warningsAsInfo,\n             warnings_as_hint: data.diagnostics_warningsAsHint,\n         };\n@@ -303,8 +297,6 @@ impl Config {\n             goto_type_def: data.hoverActions_enable && data.hoverActions_gotoTypeDef,\n         };\n \n-        self.analysis = AnalysisConfig { disabled_diagnostics: data.analysis_disabledDiagnostics };\n-\n         log::info!(\"Config::update() = {:#?}\", self);\n     }\n \n@@ -369,14 +361,6 @@ impl Config {\n             self.client_caps.status_notification = get_bool(\"statusNotification\");\n         }\n     }\n-\n-    pub fn disabled_diagnostics(&self) -> Option<HashSet<String>> {\n-        if self.analysis.disabled_diagnostics.is_empty() {\n-            None\n-        } else {\n-            Some(self.analysis.disabled_diagnostics.clone())\n-        }\n-    }\n }\n \n #[derive(Deserialize)]\n@@ -434,6 +418,7 @@ config_data! {\n \n         diagnostics_enable: bool                = true,\n         diagnostics_enableExperimental: bool    = true,\n+        diagnostics_disabled: FxHashSet<String> = FxHashSet::default(),\n         diagnostics_warningsAsHint: Vec<String> = Vec::new(),\n         diagnostics_warningsAsInfo: Vec<String> = Vec::new(),\n \n@@ -464,7 +449,5 @@ config_data! {\n         rustfmt_overrideCommand: Option<Vec<String>> = None,\n \n         withSysroot: bool = true,\n-\n-        analysis_disabledDiagnostics: HashSet<String> = HashSet::new(),\n     }\n }"}, {"sha": "ee6f2a867bc3eeaa50303f10cf161ef6da462b02", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=0e66dc690e16f29248f8d00ca0d68e58a34b52d8", "patch": "@@ -11,7 +11,7 @@ use crate::lsp_ext;\n pub(crate) type CheckFixes = Arc<FxHashMap<FileId, Vec<Fix>>>;\n \n #[derive(Debug, Default, Clone)]\n-pub struct DiagnosticsConfig {\n+pub struct DiagnosticsMapConfig {\n     pub warnings_as_info: Vec<String>,\n     pub warnings_as_hint: Vec<String>,\n }"}, {"sha": "df55838973a4f657f0aa50e9a72f1a5fb3b244dc", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=0e66dc690e16f29248f8d00ca0d68e58a34b52d8", "patch": "@@ -7,11 +7,11 @@ use stdx::format_to;\n \n use crate::{lsp_ext, to_proto::url_from_abs_path};\n \n-use super::DiagnosticsConfig;\n+use super::DiagnosticsMapConfig;\n \n /// Determines the LSP severity from a diagnostic\n fn diagnostic_severity(\n-    config: &DiagnosticsConfig,\n+    config: &DiagnosticsMapConfig,\n     level: flycheck::DiagnosticLevel,\n     code: Option<flycheck::DiagnosticCode>,\n ) -> Option<lsp_types::DiagnosticSeverity> {\n@@ -141,7 +141,7 @@ pub(crate) struct MappedRustDiagnostic {\n ///\n /// If the diagnostic has no primary span this will return `None`\n pub(crate) fn map_rust_diagnostic_to_lsp(\n-    config: &DiagnosticsConfig,\n+    config: &DiagnosticsMapConfig,\n     rd: &flycheck::Diagnostic,\n     workspace_root: &Path,\n ) -> Vec<MappedRustDiagnostic> {\n@@ -259,10 +259,10 @@ mod tests {\n     use expect::{expect_file, ExpectFile};\n \n     fn check(diagnostics_json: &str, expect: ExpectFile) {\n-        check_with_config(DiagnosticsConfig::default(), diagnostics_json, expect)\n+        check_with_config(DiagnosticsMapConfig::default(), diagnostics_json, expect)\n     }\n \n-    fn check_with_config(config: DiagnosticsConfig, diagnostics_json: &str, expect: ExpectFile) {\n+    fn check_with_config(config: DiagnosticsMapConfig, diagnostics_json: &str, expect: ExpectFile) {\n         let diagnostic: flycheck::Diagnostic = serde_json::from_str(diagnostics_json).unwrap();\n         let workspace_root = Path::new(\"/test/\");\n         let actual = map_rust_diagnostic_to_lsp(&config, &diagnostic, workspace_root);\n@@ -402,9 +402,9 @@ mod tests {\n     #[cfg(not(windows))]\n     fn rustc_unused_variable_as_info() {\n         check_with_config(\n-            DiagnosticsConfig {\n+            DiagnosticsMapConfig {\n                 warnings_as_info: vec![\"unused_variables\".to_string()],\n-                ..DiagnosticsConfig::default()\n+                ..DiagnosticsMapConfig::default()\n             },\n             r##\"{\n     \"message\": \"unused variable: `foo`\",\n@@ -486,9 +486,9 @@ mod tests {\n     #[cfg(not(windows))]\n     fn rustc_unused_variable_as_hint() {\n         check_with_config(\n-            DiagnosticsConfig {\n+            DiagnosticsMapConfig {\n                 warnings_as_hint: vec![\"unused_variables\".to_string()],\n-                ..DiagnosticsConfig::default()\n+                ..DiagnosticsMapConfig::default()\n             },\n             r##\"{\n     \"message\": \"unused variable: `foo`\","}, {"sha": "67ca9f05526c98acb5f21c322f19ba10646d1524", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=0e66dc690e16f29248f8d00ca0d68e58a34b52d8", "patch": "@@ -775,11 +775,7 @@ fn handle_fixes(\n         None => {}\n     };\n \n-    let diagnostics = snap.analysis.diagnostics(\n-        file_id,\n-        snap.config.experimental_diagnostics,\n-        snap.config.disabled_diagnostics(),\n-    )?;\n+    let diagnostics = snap.analysis.diagnostics(&snap.config.diagnostics, file_id)?;\n \n     for fix in diagnostics\n         .into_iter()\n@@ -1051,13 +1047,10 @@ pub(crate) fn publish_diagnostics(\n ) -> Result<Vec<Diagnostic>> {\n     let _p = profile::span(\"publish_diagnostics\");\n     let line_index = snap.analysis.file_line_index(file_id)?;\n+\n     let diagnostics: Vec<Diagnostic> = snap\n         .analysis\n-        .diagnostics(\n-            file_id,\n-            snap.config.experimental_diagnostics,\n-            snap.config.disabled_diagnostics(),\n-        )?\n+        .diagnostics(&snap.config.diagnostics, file_id)?\n         .into_iter()\n         .map(|d| Diagnostic {\n             range: to_proto::range(&line_index, d.range),"}, {"sha": "f039cdc3102de26da16cd32ab330ab66e277e4bc", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=0e66dc690e16f29248f8d00ca0d68e58a34b52d8", "patch": "@@ -248,7 +248,7 @@ impl GlobalState {\n             Event::Flycheck(task) => match task {\n                 flycheck::Message::AddDiagnostic { workspace_root, diagnostic } => {\n                     let diagnostics = crate::diagnostics::to_proto::map_rust_diagnostic_to_lsp(\n-                        &self.config.diagnostics,\n+                        &self.config.diagnostics_map,\n                         &diagnostic,\n                         &workspace_root,\n                     );"}, {"sha": "f079f73b8009a5ce05e0e06d1479382032b20312", "filename": "editors/code/package.json", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/0e66dc690e16f29248f8d00ca0d68e58a34b52d8/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=0e66dc690e16f29248f8d00ca0d68e58a34b52d8", "patch": "@@ -592,31 +592,31 @@\n                     \"default\": true,\n                     \"markdownDescription\": \"Whether to show experimental rust-analyzer diagnostics that might have more false positives than usual.\"\n                 },\n-                \"rust-analyzer.diagnostics.warningsAsInfo\": {\n+                \"rust-analyzer.diagnostics.disabled\": {\n                     \"type\": \"array\",\n                     \"uniqueItems\": true,\n                     \"items\": {\n                         \"type\": \"string\"\n                     },\n-                    \"description\": \"List of warnings that should be displayed with info severity.\\nThe warnings will be indicated by a blue squiggly underline in code and a blue icon in the problems panel.\",\n+                    \"description\": \"List of rust-analyzer diagnostics to disable\",\n                     \"default\": []\n                 },\n-                \"rust-analyzer.diagnostics.warningsAsHint\": {\n+                \"rust-analyzer.diagnostics.warningsAsInfo\": {\n                     \"type\": \"array\",\n                     \"uniqueItems\": true,\n                     \"items\": {\n                         \"type\": \"string\"\n                     },\n-                    \"description\": \"List of warnings that should be displayed with hint severity.\\nThe warnings will be indicated by faded text or three dots in code and will not show up in the problems panel.\",\n+                    \"description\": \"List of warnings that should be displayed with info severity.\\nThe warnings will be indicated by a blue squiggly underline in code and a blue icon in the problems panel.\",\n                     \"default\": []\n                 },\n-                \"rust-analyzer.analysis.disabledDiagnostics\": {\n+                \"rust-analyzer.diagnostics.warningsAsHint\": {\n                     \"type\": \"array\",\n                     \"uniqueItems\": true,\n                     \"items\": {\n                         \"type\": \"string\"\n                     },\n-                    \"description\": \"List of rust-analyzer diagnostics to disable\",\n+                    \"description\": \"List of warnings that should be displayed with hint severity.\\nThe warnings will be indicated by faded text or three dots in code and will not show up in the problems panel.\",\n                     \"default\": []\n                 }\n             }"}]}