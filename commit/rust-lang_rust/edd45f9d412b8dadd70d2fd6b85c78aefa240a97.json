{"sha": "edd45f9d412b8dadd70d2fd6b85c78aefa240a97", "node_id": "C_kwDOAAsO6NoAKGVkZDQ1ZjlkNDEyYjhkYWRkNzBkMmZkNmI4NWM3OGFlZmEyNDBhOTc", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-27T15:38:01Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-04T12:35:20Z"}, "message": "RegionCtxt merged `body_id` with `body_owner`", "tree": {"sha": "aef5a89e92f1f6cf01d5415a1b2533edbcd7c133", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aef5a89e92f1f6cf01d5415a1b2533edbcd7c133"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edd45f9d412b8dadd70d2fd6b85c78aefa240a97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edd45f9d412b8dadd70d2fd6b85c78aefa240a97", "html_url": "https://github.com/rust-lang/rust/commit/edd45f9d412b8dadd70d2fd6b85c78aefa240a97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edd45f9d412b8dadd70d2fd6b85c78aefa240a97/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24799e37201b60c3012c48bbb789e607b6b6bf71", "url": "https://api.github.com/repos/rust-lang/rust/commits/24799e37201b60c3012c48bbb789e607b6b6bf71", "html_url": "https://github.com/rust-lang/rust/commit/24799e37201b60c3012c48bbb789e607b6b6bf71"}], "stats": {"total": 52, "additions": 22, "deletions": 30}, "files": [{"sha": "028df78e6bdad958d50f89ccebfb60e866df991c", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edd45f9d412b8dadd70d2fd6b85c78aefa240a97/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd45f9d412b8dadd70d2fd6b85c78aefa240a97/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=edd45f9d412b8dadd70d2fd6b85c78aefa240a97", "patch": "@@ -493,7 +493,7 @@ fn typeck_with_fallback<'tcx>(\n         if fn_sig.is_some() {\n             fcx.regionck_fn(id, body, span, wf_tys);\n         } else {\n-            fcx.regionck_expr(body);\n+            fcx.regionck_body(body);\n         }\n \n         fcx.resolve_type_vars_in_body(body)"}, {"sha": "06fe7dcd450d7268fc5a7ee47e2aec38b4de868e", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/edd45f9d412b8dadd70d2fd6b85c78aefa240a97/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd45f9d412b8dadd70d2fd6b85c78aefa240a97/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=edd45f9d412b8dadd70d2fd6b85c78aefa240a97", "patch": "@@ -76,9 +76,9 @@ use crate::check::dropck;\n use crate::check::FnCtxt;\n use crate::mem_categorization as mc;\n use crate::outlives::outlives_bounds::InferCtxtExt as _;\n+use hir::def_id::LocalDefId;\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_hir as hir;\n-use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::PatKind;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n@@ -149,19 +149,18 @@ impl<'tcx> OutlivesEnvironmentExt<'tcx> for OutlivesEnvironment<'tcx> {\n // PUBLIC ENTRY POINTS\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n-    pub fn regionck_expr(&self, body: &'tcx hir::Body<'tcx>) {\n-        let subject = self.tcx.hir().body_owner_def_id(body.id());\n-        let id = body.value.hir_id;\n-        let mut rcx = RegionCtxt::new(self, id, Subject(subject), self.param_env);\n+    pub fn regionck_body(&self, body: &'tcx hir::Body<'tcx>) {\n+        let body_owner = self.tcx.hir().body_owner_def_id(body.id());\n+        let mut rcx = RegionCtxt::new(self, body_owner, self.param_env);\n \n         // There are no add'l implied bounds when checking a\n-        // standalone expr (e.g., the `E` in a type like `[u32; E]`).\n-        rcx.outlives_environment.save_implied_bounds(id);\n+        // standalone body (e.g., the `E` in a type like `[u32; E]`).\n+        rcx.outlives_environment.save_implied_bounds(rcx.body_id());\n \n         if !self.errors_reported_since_creation() {\n             // regionck assumes typeck succeeded\n             rcx.visit_body(body);\n-            rcx.visit_region_obligations(id);\n+            rcx.visit_region_obligations(rcx.body_id());\n         }\n         // Checked by NLL\n         rcx.fcx.skip_region_resolution();\n@@ -171,10 +170,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// types from which we should derive implied bounds, if any.\n     #[instrument(level = \"debug\", skip(self))]\n     pub fn regionck_item(&self, item_id: hir::HirId, span: Span, wf_tys: FxHashSet<Ty<'tcx>>) {\n-        let subject = self.tcx.hir().local_def_id(item_id);\n-        let mut rcx = RegionCtxt::new(self, item_id, Subject(subject), self.param_env);\n+        let body_owner = self.tcx.hir().local_def_id(item_id);\n+        let mut rcx = RegionCtxt::new(self, body_owner, self.param_env);\n         rcx.outlives_environment.add_implied_bounds(self, wf_tys, item_id, span);\n-        rcx.outlives_environment.save_implied_bounds(item_id);\n+        rcx.outlives_environment.save_implied_bounds(rcx.body_id());\n         rcx.visit_region_obligations(item_id);\n         rcx.resolve_regions_and_report_errors();\n     }\n@@ -195,9 +194,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         wf_tys: FxHashSet<Ty<'tcx>>,\n     ) {\n         debug!(\"regionck_fn(id={})\", fn_id);\n-        let subject = self.tcx.hir().body_owner_def_id(body.id());\n-        let hir_id = body.value.hir_id;\n-        let mut rcx = RegionCtxt::new(self, hir_id, Subject(subject), self.param_env);\n+        let body_owner = self.tcx.hir().body_owner_def_id(body.id());\n+        let mut rcx = RegionCtxt::new(self, body_owner, self.param_env);\n         // We need to add the implied bounds from the function signature\n         rcx.outlives_environment.add_implied_bounds(self, wf_tys, fn_id, span);\n         rcx.outlives_environment.save_implied_bounds(fn_id);\n@@ -220,9 +218,6 @@ pub struct RegionCtxt<'a, 'tcx> {\n \n     outlives_environment: OutlivesEnvironment<'tcx>,\n \n-    // id of innermost fn body id\n-    body_id: hir::HirId,\n-    // TODO: is this always equal to `body_id`?\n     body_owner: LocalDefId,\n }\n \n@@ -233,17 +228,21 @@ impl<'a, 'tcx> Deref for RegionCtxt<'a, 'tcx> {\n     }\n }\n \n-pub struct Subject(LocalDefId);\n-\n impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n     pub fn new(\n         fcx: &'a FnCtxt<'a, 'tcx>,\n-        initial_body_id: hir::HirId,\n-        Subject(subject): Subject,\n+        body_owner: LocalDefId,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> RegionCtxt<'a, 'tcx> {\n         let outlives_environment = OutlivesEnvironment::new(param_env);\n-        RegionCtxt { fcx, body_id: initial_body_id, body_owner: subject, outlives_environment }\n+        RegionCtxt { fcx, body_owner, outlives_environment }\n+    }\n+\n+    /// FIXME: Ideally all the callers would deal with\n+    /// `LocalDefId`s as well. Ah well, this code is going\n+    /// to be removed soon anyways \ud83e\udd37\n+    pub fn body_id(&self) -> hir::HirId {\n+        self.tcx.hir().local_def_id_to_hir_id(self.body_owner)\n     }\n \n     /// Try to resolve the type for the given node, returning `t_err` if an error results. Note that\n@@ -299,9 +298,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n     ) {\n         // When we enter a function, we can derive\n         debug!(\"visit_fn_body(id={:?})\", id);\n-\n         let body_id = body.id();\n-        self.body_id = body_id.hir_id;\n         self.body_owner = self.tcx.hir().body_owner_def_id(body_id);\n \n         let Some(fn_sig) = self.typeck_results.borrow().liberated_fn_sigs().get(id) else {\n@@ -327,12 +324,10 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         debug!(\"visit_inline_const(id={:?})\", id);\n \n         // Save state of current function. We will restore afterwards.\n-        let old_body_id = self.body_id;\n         let old_body_owner = self.body_owner;\n         let env_snapshot = self.outlives_environment.push_snapshot_pre_typeck_child();\n \n         let body_id = body.id();\n-        self.body_id = body_id.hir_id;\n         self.body_owner = self.tcx.hir().body_owner_def_id(body_id);\n \n         self.outlives_environment.save_implied_bounds(body_id.hir_id);\n@@ -342,7 +337,6 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n \n         // Restore state from previous function.\n         self.outlives_environment.pop_snapshot_post_typeck_child(env_snapshot);\n-        self.body_id = old_body_id;\n         self.body_owner = old_body_owner;\n     }\n \n@@ -398,7 +392,6 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n \n         // Save state of current function before invoking\n         // `visit_fn_body`.  We will restore afterwards.\n-        let old_body_id = self.body_id;\n         let old_body_owner = self.body_owner;\n         let env_snapshot = self.outlives_environment.push_snapshot_pre_typeck_child();\n \n@@ -407,7 +400,6 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n \n         // Restore state from previous function.\n         self.outlives_environment.pop_snapshot_post_typeck_child(env_snapshot);\n-        self.body_id = old_body_id;\n         self.body_owner = old_body_owner;\n     }\n "}]}