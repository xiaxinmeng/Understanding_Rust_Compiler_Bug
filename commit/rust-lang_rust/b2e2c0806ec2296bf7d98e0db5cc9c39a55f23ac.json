{"sha": "b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZTJjMDgwNmVjMjI5NmJmN2Q5OGUwZGI1Y2M5YzM5YTU1ZjIzYWM=", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2020-11-25T10:50:13Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2020-11-25T11:22:58Z"}, "message": "Improve extract_msrv_attr! situation", "tree": {"sha": "f778f87a71568eccb39516bcb60a8d64e9c5e987", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f778f87a71568eccb39516bcb60a8d64e9c5e987"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAl++PpIACgkQHKDfKvWd\naKWLbw//WxZoPJ0nK2+TBHh5zJPmwN58FJV9cceIkkcKdo+NSgj1eGxSCAb54++w\n4US6BHNW2Iy4M99yl6IMJ7Cxz/tR+3T6X1wgiGiUYiYVMQ1agu3EoDCGW2l3T44l\nPQUsmfiSHkcyztO3cbryiwUK7IbEq8Ycf19v5dZstNwJASxRyeYo2cdNXJ3bc7e5\nEJdKVxmIVhvlM2Gro8owk8xbENZGlMQ7YOeViBFYgosxRalDyhqkadhznQOe9nY/\ntcOvpw+3/9A7dmgthP2SsKi4NvsIHGXDy9jYSkbfA6d/yqzeGW4jAI0NDRGU8JYB\nmzeOClqBC8ysjkA8sXEmgEXua08xcIdIMs0c3IABBC/28+HwSOiCoWSgIFfg9DDv\n1YlExcEtkOYeUfC7kpeArH2bPMMwCrDBkV7k48v0uLE63sq/mgTiWW9XuU+ILJWF\nrD/K7yY5fAxo8OWkyoblnkRnMBtqv3m1HGOaWS0JA5DdB6FqnerXmpd1CNSj58P6\nJkge102mvzNn+qxBLkbcmlEQGPpMbOTgGYSUzXEaKpdmnlknxDdHCAAk/0VZHUE0\nT3chusmMp1my3uWfw2eII9pW51LCAilf2Y3yyoyoQ7gxcHK3HNw3oF9qyhG8gcsd\nHT9M6wqgpMjDfx0+2k7JrJLxeht1/e7285jnJb4uIxm250NMfVc=\n=/zz1\n-----END PGP SIGNATURE-----", "payload": "tree f778f87a71568eccb39516bcb60a8d64e9c5e987\nparent aaa43250455c19ae54c821518c42219f6460038c\nauthor flip1995 <philipp.krones@embecosm.com> 1606301413 +0100\ncommitter flip1995 <philipp.krones@embecosm.com> 1606303378 +0100\n\nImprove extract_msrv_attr! situation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac", "html_url": "https://github.com/rust-lang/rust/commit/b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaa43250455c19ae54c821518c42219f6460038c", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa43250455c19ae54c821518c42219f6460038c", "html_url": "https://github.com/rust-lang/rust/commit/aaa43250455c19ae54c821518c42219f6460038c"}], "stats": {"total": 59, "additions": 26, "deletions": 33}, "files": [{"sha": "703e6feeca500a48b9aff173a49d2d047a89d2c0", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{get_inner_attr, meets_msrv, snippet_opt, span_lint_and_then};\n+use crate::utils::{meets_msrv, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_ast::ast::{Attribute, Item, ItemKind, StructField, Variant, VariantData, VisibilityKind};\n use rustc_attr as attr;"}, {"sha": "e17e3adb94f02f7fe43b9b8f78815344f4226566", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac", "patch": "@@ -1,12 +1,11 @@\n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    eq_expr_value, get_inner_attr, higher, match_def_path, meets_msrv, multispan_sugg, paths, qpath_res, snippet,\n-    span_lint_and_then,\n+    eq_expr_value, higher, match_def_path, meets_msrv, multispan_sugg, paths, qpath_res, snippet, span_lint_and_then,\n };\n \n use if_chain::if_chain;\n-use rustc_ast::ast::{Attribute, LitKind};\n+use rustc_ast::ast::LitKind;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::BinOpKind;"}, {"sha": "d695af4de21ba02069634ec668477ba01c66decf", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac", "patch": "@@ -2,14 +2,14 @@ use crate::consts::{constant, miri_to_const, Constant};\n use crate::utils::sugg::Sugg;\n use crate::utils::usage::is_unused;\n use crate::utils::{\n-    expr_block, get_arg_name, get_inner_attr, get_parent_expr, in_macro, indent_of, is_allowed, is_expn_of,\n-    is_refutable, is_type_diagnostic_item, is_wild, match_qpath, match_type, match_var, meets_msrv, multispan_sugg,\n-    remove_blocks, snippet, snippet_block, snippet_with_applicability, span_lint_and_help, span_lint_and_note,\n-    span_lint_and_sugg, span_lint_and_then,\n+    expr_block, get_arg_name, get_parent_expr, in_macro, indent_of, is_allowed, is_expn_of, is_refutable,\n+    is_type_diagnostic_item, is_wild, match_qpath, match_type, match_var, meets_msrv, multispan_sugg, remove_blocks,\n+    snippet, snippet_block, snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n+    span_lint_and_then,\n };\n use crate::utils::{paths, search_same, SpanlessEq, SpanlessHash};\n use if_chain::if_chain;\n-use rustc_ast::ast::{Attribute, LitKind};\n+use rustc_ast::ast::LitKind;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir::def::CtorKind;"}, {"sha": "50dd760432dbf4c29c64b9befcf24671b21dcee7", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac", "patch": "@@ -12,7 +12,6 @@ use std::iter;\n use bind_instead_of_map::BindInsteadOfMap;\n use if_chain::if_chain;\n use rustc_ast::ast;\n-use rustc_ast::ast::Attribute;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n@@ -29,12 +28,11 @@ use crate::consts::{constant, Constant};\n use crate::utils::eager_or_lazy::is_lazyness_candidate;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    contains_ty, get_arg_name, get_inner_attr, get_parent_expr, get_trait_def_id, has_iter_method, higher,\n-    implements_trait, in_macro, is_copy, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment,\n-    match_def_path, match_qpath, match_trait_method, match_type, match_var, meets_msrv, method_calls,\n-    method_chain_args, paths, remove_blocks, return_ty, single_segment_path, snippet, snippet_with_applicability,\n-    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg,\n-    walk_ptrs_ty_depth, SpanlessEq,\n+    contains_ty, get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait, in_macro,\n+    is_copy, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment, match_def_path, match_qpath,\n+    match_trait_method, match_type, match_var, meets_msrv, method_calls, method_chain_args, paths, remove_blocks,\n+    return_ty, single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint,\n+    span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg, walk_ptrs_ty_depth, SpanlessEq,\n };\n use semver::{Version, VersionReq};\n "}, {"sha": "6f89e51279adf69b4d4f8565e76f311194ccb88c", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=b2e2c0806ec2296bf7d98e0db5cc9c39a55f23ac", "patch": "@@ -79,30 +79,26 @@ pub fn meets_msrv(msrv: Option<&VersionReq>, lint_msrv: &Version) -> bool {\n     msrv.map_or(true, |msrv| !msrv.matches(lint_msrv))\n }\n \n-#[macro_export]\n macro_rules! extract_msrv_attr {\n     (LateContext) => {\n-        fn enter_lint_attrs(&mut self, cx: &rustc_lint::LateContext<'tcx>, attrs: &'tcx [Attribute]) {\n-            match get_inner_attr(cx.sess(), attrs, \"msrv\") {\n-                Some(msrv_attr) => {\n-                    if let Some(msrv) = msrv_attr.value_str() {\n-                        self.msrv = crate::utils::parse_msrv(&msrv.to_string(), Some(cx.sess()), Some(msrv_attr.span));\n-                    } else {\n-                        cx.sess().span_err(msrv_attr.span, \"bad clippy attribute\");\n-                    }\n-                },\n-                _ => (),\n-            }\n-        }\n+        extract_msrv_attr!(@LateContext, ());\n     };\n     (EarlyContext) => {\n-        fn enter_lint_attrs(&mut self, cx: &rustc_lint::EarlyContext<'tcx>, attrs: &'tcx [Attribute]) {\n-            match get_inner_attr(cx.sess, attrs, \"msrv\") {\n+        extract_msrv_attr!(@EarlyContext);\n+    };\n+    (@$context:ident$(, $call:tt)?) => {\n+        fn enter_lint_attrs(&mut self, cx: &rustc_lint::$context<'tcx>, attrs: &'tcx [rustc_ast::ast::Attribute]) {\n+            use $crate::utils::get_unique_inner_attr;\n+            match get_unique_inner_attr(cx.sess$($call)?, attrs, \"msrv\") {\n                 Some(msrv_attr) => {\n                     if let Some(msrv) = msrv_attr.value_str() {\n-                        self.msrv = crate::utils::parse_msrv(&msrv.to_string(), Some(cx.sess), Some(msrv_attr.span));\n+                        self.msrv = $crate::utils::parse_msrv(\n+                            &msrv.to_string(),\n+                            Some(cx.sess$($call)?),\n+                            Some(msrv_attr.span),\n+                        );\n                     } else {\n-                        cx.sess.span_err(msrv_attr.span, \"bad clippy attribute\");\n+                        cx.sess$($call)?.span_err(msrv_attr.span, \"bad clippy attribute\");\n                     }\n                 },\n                 _ => (),"}]}