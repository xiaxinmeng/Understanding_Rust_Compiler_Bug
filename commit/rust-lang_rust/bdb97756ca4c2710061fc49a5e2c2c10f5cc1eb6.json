{"sha": "bdb97756ca4c2710061fc49a5e2c2c10f5cc1eb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYjk3NzU2Y2E0YzI3MTAwNjFmYzQ5YTVlMmMyYzEwZjVjYzFlYjY=", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2020-08-03T10:04:20Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2020-08-03T10:04:20Z"}, "message": "Simplify `find_mod_path` with use of `node.ancestors`", "tree": {"sha": "8027f06894f54b51817f487ad6721e58567dbcf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8027f06894f54b51817f487ad6721e58567dbcf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdb97756ca4c2710061fc49a5e2c2c10f5cc1eb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb97756ca4c2710061fc49a5e2c2c10f5cc1eb6", "html_url": "https://github.com/rust-lang/rust/commit/bdb97756ca4c2710061fc49a5e2c2c10f5cc1eb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdb97756ca4c2710061fc49a5e2c2c10f5cc1eb6/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "544322e66aacb763f8c824b5a572f8d7b93c9a6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/544322e66aacb763f8c824b5a572f8d7b93c9a6f", "html_url": "https://github.com/rust-lang/rust/commit/544322e66aacb763f8c824b5a572f8d7b93c9a6f"}], "stats": {"total": 21, "additions": 1, "deletions": 20}, "files": [{"sha": "1eb8070adb4b9f99d52fe0ece822d3b3b2130354", "filename": "crates/ra_assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bdb97756ca4c2710061fc49a5e2c2c10f5cc1eb6/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb97756ca4c2710061fc49a5e2c2c10f5cc1eb6/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=bdb97756ca4c2710061fc49a5e2c2c10f5cc1eb6", "patch": "@@ -59,26 +59,7 @@ pub(crate) fn expand_glob_import(acc: &mut Assists, ctx: &AssistContext) -> Opti\n }\n \n fn find_mod_path(star: &SyntaxToken) -> Option<ast::Path> {\n-    let mut node = star.parent();\n-\n-    loop {\n-        match_ast! {\n-            match node {\n-                ast::UseTree(use_tree) => {\n-                    if let Some(path) = use_tree.path() {\n-                        return Some(path);\n-                    }\n-                },\n-                ast::UseTreeList(_use_tree_list) => {},\n-                _ => return None,\n-            }\n-        }\n-\n-        node = match node.parent() {\n-            Some(node) => node,\n-            None => return None,\n-        }\n-    }\n+    star.ancestors().find_map(|n| ast::UseTree::cast(n).and_then(|u| u.path()))\n }\n \n #[derive(PartialEq)]"}]}