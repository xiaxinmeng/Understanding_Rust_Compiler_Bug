{"sha": "44990e5b14fc7901071b26aa98b281675459176e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0OTkwZTViMTRmYzc5MDEwNzFiMjZhYTk4YjI4MTY3NTQ1OTE3NmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-05T22:06:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-05T22:06:15Z"}, "message": "Auto merge of #45770 - spastorino:newtype_index, r=nikomatsakis\n\nMake last structs indexes definitions use newtype_index macro\n\nThis PR makes the last two index structs not using newtype_index macro to use it and also fixes this https://github.com/rust-lang/rust/issues/45763 issue.", "tree": {"sha": "7064887a0b383b52d40e30cb634f458db5bdedeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7064887a0b383b52d40e30cb634f458db5bdedeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44990e5b14fc7901071b26aa98b281675459176e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44990e5b14fc7901071b26aa98b281675459176e", "html_url": "https://github.com/rust-lang/rust/commit/44990e5b14fc7901071b26aa98b281675459176e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44990e5b14fc7901071b26aa98b281675459176e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b82e4c74d43fc1273244532c3a90bf9912061cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b82e4c74d43fc1273244532c3a90bf9912061cf", "html_url": "https://github.com/rust-lang/rust/commit/3b82e4c74d43fc1273244532c3a90bf9912061cf"}, {"sha": "d19faead2d2f4b46e3adbab966314f000bdf5702", "url": "https://api.github.com/repos/rust-lang/rust/commits/d19faead2d2f4b46e3adbab966314f000bdf5702", "html_url": "https://github.com/rust-lang/rust/commit/d19faead2d2f4b46e3adbab966314f000bdf5702"}], "stats": {"total": 95, "additions": 35, "deletions": 60}, "files": [{"sha": "405274c805195dfd0364518a10c6788ae7063fe2", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44990e5b14fc7901071b26aa98b281675459176e/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/44990e5b14fc7901071b26aa98b281675459176e/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=44990e5b14fc7901071b26aa98b281675459176e", "patch": "@@ -1834,6 +1834,7 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n+ \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\","}, {"sha": "0fb4e354a52d44b93a5f62a5ac709a0ae5941d15", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=44990e5b14fc7901071b26aa98b281675459176e", "patch": "@@ -45,25 +45,10 @@ pub struct DepGraph {\n }\n \n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub struct DepNodeIndex {\n-    index: u32,\n-}\n-\n-impl Idx for DepNodeIndex {\n-    fn new(idx: usize) -> Self {\n-        debug_assert!((idx & 0xFFFF_FFFF) == idx);\n-        DepNodeIndex { index: idx as u32 }\n-    }\n-    fn index(self) -> usize {\n-        self.index as usize\n-    }\n-}\n+newtype_index!(DepNodeIndex);\n \n impl DepNodeIndex {\n-    const INVALID: DepNodeIndex = DepNodeIndex {\n-        index: ::std::u32::MAX,\n-    };\n+    const INVALID: DepNodeIndex = DepNodeIndex(::std::u32::MAX);\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]"}, {"sha": "428f154c1b66a98db8fd1ddb801679ebbcf3e945", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=44990e5b14fc7901071b26aa98b281675459176e", "patch": "@@ -86,20 +86,17 @@ impl serialize::UseSpecializedDecodable for CrateNum {\n ///\n /// Since the DefIndex is mostly treated as an opaque ID, you probably\n /// don't have to care about these ranges.\n-#[derive(Clone, Eq, Ord, PartialOrd, PartialEq, RustcEncodable,\n-           RustcDecodable, Hash, Copy)]\n-pub struct DefIndex(u32);\n+newtype_index!(DefIndex\n+    {\n+        DEBUG_FORMAT = custom,\n \n-impl Idx for DefIndex {\n-    fn new(value: usize) -> Self {\n-        assert!(value < (u32::MAX) as usize);\n-        DefIndex(value as u32)\n-    }\n+        /// The start of the \"high\" range of DefIndexes.\n+        const DEF_INDEX_HI_START = 1 << 31,\n \n-    fn index(self) -> usize {\n-        self.0 as usize\n-    }\n-}\n+        /// The crate root is always assigned index 0 by the AST Map code,\n+        /// thanks to `NodeCollector::new`.\n+        const CRATE_DEF_INDEX = 0,\n+    });\n \n impl fmt::Debug for DefIndex {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -111,12 +108,6 @@ impl fmt::Debug for DefIndex {\n }\n \n impl DefIndex {\n-    #[inline]\n-    pub fn new(x: usize) -> DefIndex {\n-        assert!(x < (u32::MAX as usize));\n-        DefIndex(x as u32)\n-    }\n-\n     #[inline]\n     pub fn from_u32(x: u32) -> DefIndex {\n         DefIndex(x)\n@@ -155,13 +146,6 @@ impl DefIndex {\n     }\n }\n \n-/// The start of the \"high\" range of DefIndexes.\n-const DEF_INDEX_HI_START: DefIndex = DefIndex(1 << 31);\n-\n-/// The crate root is always assigned index 0 by the AST Map code,\n-/// thanks to `NodeCollector::new`.\n-pub const CRATE_DEF_INDEX: DefIndex = DefIndex(0);\n-\n #[derive(Copy, Clone, Eq, PartialEq, Hash)]\n pub enum DefIndexAddressSpace {\n     Low = 0,"}, {"sha": "b30cc0b09c9ac6c316cdea2ba34e49ff46cf3c0d", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=44990e5b14fc7901071b26aa98b281675459176e", "patch": "@@ -19,7 +19,7 @@ use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, DefIndexAddressSpace,\n                   CRATE_DEF_INDEX};\n use ich::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::indexed_vec::IndexVec;\n+use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_data_structures::stable_hasher::StableHasher;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use session::CrateDisambiguator;"}, {"sha": "49f57d9aef50ec95a2b6a90f63f60d254550d35a", "filename": "src/librustc/infer/region_inference/graphviz.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=44990e5b14fc7901071b26aa98b281675459176e", "patch": "@@ -19,6 +19,7 @@\n use graphviz as dot;\n \n use hir::def_id::DefIndex;\n+use rustc_data_structures::indexed_vec::Idx;\n use ty;\n use middle::free_region::RegionRelations;\n use middle::region;"}, {"sha": "a733e9de5a1ab0df6fc58bbf055e4283ac4be063", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=44990e5b14fc7901071b26aa98b281675459176e", "patch": "@@ -68,7 +68,7 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]) => (\n+     @debug_format [$debug_format:tt]) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]\n         pub struct $type($($pub)* u32);\n \n@@ -100,7 +100,7 @@ macro_rules! newtype_index {\n     (@handle_debug\n      @derives      []\n      @type         [$type:ident]\n-     @debug_format [$debug_format:expr]) => (\n+     @debug_format [$debug_format:tt]) => (\n         impl ::std::fmt::Debug for $type {\n             fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n                 write!(fmt, $debug_format, self.0)\n@@ -112,13 +112,13 @@ macro_rules! newtype_index {\n     (@handle_debug\n      @derives      [Debug, $($derives:ident,)*]\n      @type         [$type:ident]\n-     @debug_format [$debug_format:expr]) => ();\n+     @debug_format [$debug_format:tt]) => ();\n \n     // It's not Debug, so just pop it off the front of the derives stack and check the rest.\n     (@handle_debug\n      @derives      [$_derive:ident, $($derives:ident,)*]\n      @type         [$type:ident]\n-     @debug_format [$debug_format:expr]) => (\n+     @debug_format [$debug_format:tt]) => (\n         newtype_index!(\n             @handle_debug\n             @derives      [$($derives,)*]\n@@ -129,7 +129,7 @@ macro_rules! newtype_index {\n     // Handle the case where someone wants to make the internal field public\n     (@type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    pub idx\n                    $($tokens:tt)*) => (\n         newtype_index!(\n@@ -143,7 +143,7 @@ macro_rules! newtype_index {\n     // The default case is that the internal field is private\n     (@type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @pub          []\n@@ -157,7 +157,7 @@ macro_rules! newtype_index {\n     (@pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    derive [$($derives:ident),*]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n@@ -174,7 +174,7 @@ macro_rules! newtype_index {\n     (@pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    derive [$($derives:ident,)+]\n                    ENCODABLE = custom\n                    $($tokens:tt)*) => (\n@@ -192,7 +192,7 @@ macro_rules! newtype_index {\n     (@pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    derive [$($derives:ident,)+]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n@@ -209,7 +209,7 @@ macro_rules! newtype_index {\n     (@pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    ENCODABLE = custom\n                    $($tokens:tt)*) => (\n         newtype_index!(\n@@ -225,7 +225,7 @@ macro_rules! newtype_index {\n     (@pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [RustcDecodable, RustcEncodable,]\n@@ -241,7 +241,7 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    $name:ident = $constant:expr) => (\n         newtype_index!(\n             @derives      [$($derives,)*]\n@@ -257,7 +257,7 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$_max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    $(#[doc = $doc:expr])*\n                    const $name:ident = $constant:expr) => (\n         newtype_index!(\n@@ -274,7 +274,7 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$_max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    MAX = $max:expr,\n                    $($tokens:tt)*) => (\n         newtype_index!(\n@@ -291,8 +291,8 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$_debug_format:expr]\n-                   DEBUG_FORMAT = $debug_format:expr,\n+     @debug_format [$_debug_format:tt]\n+                   DEBUG_FORMAT = $debug_format:tt,\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [$($derives,)*]\n@@ -308,7 +308,7 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    $(#[doc = $doc:expr])*\n                    const $name:ident = $constant:expr,\n                    $($tokens:tt)*) => ("}, {"sha": "603e79155fb726d859c4c0d9995cc83f73eaba02", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=44990e5b14fc7901071b26aa98b281675459176e", "patch": "@@ -41,6 +41,7 @@ use std::str;\n use std::u32;\n \n use rustc_serialize::{Decodable, Decoder, SpecializedDecoder, opaque};\n+use rustc_data_structures::indexed_vec::Idx;\n use syntax::attr;\n use syntax::ast::{self, Ident};\n use syntax::codemap;"}, {"sha": "ab2d152b724a7227be3528a9cf48a9bf4e054f25", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=44990e5b14fc7901071b26aa98b281675459176e", "patch": "@@ -16,3 +16,4 @@ rustc = { path = \"../librustc\" }\n arena = { path = \"../libarena\" }\n rustc_errors = { path = \"../librustc_errors\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "bed9f37c5157fab483b947fbf3b70a54e706f490", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=44990e5b14fc7901071b26aa98b281675459176e", "patch": "@@ -24,6 +24,7 @@ extern crate rustc_errors as errors;\n extern crate arena;\n #[macro_use]\n extern crate rustc;\n+extern crate rustc_data_structures;\n \n use self::Namespace::*;\n use self::TypeParameters::*;"}, {"sha": "a52e6fcad14812bf34841ffebe53c5bd1a01c27a", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44990e5b14fc7901071b26aa98b281675459176e/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=44990e5b14fc7901071b26aa98b281675459176e", "patch": "@@ -13,6 +13,7 @@ use {Module, ModuleKind, NameBinding, NameBindingKind, PathResult};\n use Namespace::{self, MacroNS};\n use build_reduced_graph::BuildReducedGraphVisitor;\n use resolve_imports::ImportResolver;\n+use rustc_data_structures::indexed_vec::Idx;\n use rustc::hir::def_id::{DefId, BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, DefIndex};\n use rustc::hir::def::{Def, Export};\n use rustc::hir::map::{self, DefCollector};"}]}