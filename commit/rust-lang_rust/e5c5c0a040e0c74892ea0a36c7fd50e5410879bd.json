{"sha": "e5c5c0a040e0c74892ea0a36c7fd50e5410879bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YzVjMGEwNDBlMGM3NDg5MmVhMGEzNmM3ZmQ1MGU1NDEwODc5YmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-21T16:04:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-21T16:30:52Z"}, "message": "Include `countme` crate to count important data structures.", "tree": {"sha": "4da6406b6d85f884b5ee2c927b2c1126192a9159", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4da6406b6d85f884b5ee2c927b2c1126192a9159"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd", "html_url": "https://github.com/rust-lang/rust/commit/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "235583f3fc886bb839f34c4ff5713d101939d95c", "url": "https://api.github.com/repos/rust-lang/rust/commits/235583f3fc886bb839f34c4ff5713d101939d95c", "html_url": "https://github.com/rust-lang/rust/commit/235583f3fc886bb839f34c4ff5713d101939d95c"}], "stats": {"total": 62, "additions": 58, "deletions": 4}, "files": [{"sha": "9f7a1d0192c016a49f8448fdfe9ad2358588415f", "filename": "Cargo.lock", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e5c5c0a040e0c74892ea0a36c7fd50e5410879bd", "patch": "@@ -273,6 +273,17 @@ version = \"0.4.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"28b9d6de7f49e22cf97ad17fc4036ece69300032f45f78f30b4a4482cdc3f4a6\"\n \n+[[package]]\n+name = \"countme\"\n+version = \"2.0.0-pre.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c5716604cba7c02a846ecad3f4a3fd2d2b641faccc2a24a51efb21aff0d01f35\"\n+dependencies = [\n+ \"dashmap\",\n+ \"once_cell\",\n+ \"rustc-hash\",\n+]\n+\n [[package]]\n name = \"crc32fast\"\n version = \"1.2.1\"\n@@ -349,6 +360,16 @@ dependencies = [\n  \"lazy_static\",\n ]\n \n+[[package]]\n+name = \"dashmap\"\n+version = \"4.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e77a43b28d0668df09411cb0bc9a8c2adc40f9a048afe863e05fd43251e8e39c\"\n+dependencies = [\n+ \"cfg-if 1.0.0\",\n+ \"num_cpus\",\n+]\n+\n [[package]]\n name = \"dissimilar\"\n version = \"1.0.2\"\n@@ -1260,6 +1281,7 @@ name = \"profile\"\n version = \"0.0.0\"\n dependencies = [\n  \"cfg-if 1.0.0\",\n+ \"countme\",\n  \"jemalloc-ctl\",\n  \"la-arena\",\n  \"libc\",\n@@ -1375,10 +1397,11 @@ checksum = \"b5eb417147ba9860a96cfe72a0b93bf88fee1744b5636ec99ab20c1aa9376581\"\n \n [[package]]\n name = \"rowan\"\n-version = \"0.12.0\"\n+version = \"0.12.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bea4527c692099becd37ec777cfd6949d0534348528d2fc84ee420d2d5fac83d\"\n+checksum = \"24c2d78254049413f9d73495f883e7fa0b7a7d4b88468cd72a3bbbd0ad585cd1\"\n dependencies = [\n+ \"countme\",\n  \"hashbrown\",\n  \"memoffset\",\n  \"rustc-hash\","}, {"sha": "b8d7608e7cc535bbd4257dcc9fbf8a9da00e9ce7", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=e5c5c0a040e0c74892ea0a36c7fd50e5410879bd", "patch": "@@ -21,6 +21,7 @@ use hir_expand::{\n     HirFileId, InFile,\n };\n use la_arena::{Arena, Idx, RawIdx};\n+use profile::Count;\n use rustc_hash::FxHashMap;\n use smallvec::SmallVec;\n use syntax::{ast, match_ast};\n@@ -67,6 +68,8 @@ impl GenericParamsId {\n /// The item tree of a source file.\n #[derive(Debug, Eq, PartialEq)]\n pub struct ItemTree {\n+    _c: Count<Self>,\n+\n     top_level: SmallVec<[ModItem; 1]>,\n     attrs: FxHashMap<AttrOwner, RawAttrs>,\n \n@@ -116,7 +119,12 @@ impl ItemTree {\n     }\n \n     fn empty() -> Self {\n-        Self { top_level: Default::default(), attrs: Default::default(), data: Default::default() }\n+        Self {\n+            _c: Count::new(),\n+            top_level: Default::default(),\n+            attrs: Default::default(),\n+            data: Default::default(),\n+        }\n     }\n \n     fn shrink_to_fit(&mut self) {"}, {"sha": "bd3ea9b8b1bf59e322198d04b53cda300d67ca4d", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=e5c5c0a040e0c74892ea0a36c7fd50e5410879bd", "patch": "@@ -59,6 +59,7 @@ use std::sync::Arc;\n use base_db::{CrateId, Edition, FileId};\n use hir_expand::{diagnostics::DiagnosticSink, name::Name, InFile};\n use la_arena::Arena;\n+use profile::Count;\n use rustc_hash::FxHashMap;\n use stdx::format_to;\n use syntax::{ast, AstNode};\n@@ -75,6 +76,7 @@ use crate::{\n /// Contains all top-level defs from a macro-expanded crate\n #[derive(Debug, PartialEq, Eq)]\n pub struct DefMap {\n+    _c: Count<Self>,\n     parent: Option<Arc<DefMap>>,\n     root: LocalModuleId,\n     modules: Arena<ModuleData>,\n@@ -215,6 +217,7 @@ impl DefMap {\n         let mut modules: Arena<ModuleData> = Arena::default();\n         let root = modules.alloc(ModuleData::default());\n         DefMap {\n+            _c: Count::new(),\n             parent: None,\n             krate,\n             edition,"}, {"sha": "137c38c0d9c1dcfcc0c7841d422ac6b5385ff2d5", "filename": "crates/ide/src/status.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=e5c5c0a040e0c74892ea0a36c7fd50e5410879bd", "patch": "@@ -38,6 +38,7 @@ pub(crate) fn status(db: &RootDatabase, file_id: Option<FileId>) -> String {\n     format_to!(buf, \"{}\\n\", syntax_tree_stats(db));\n     format_to!(buf, \"{} (macros)\\n\", macro_syntax_tree_stats(db));\n     format_to!(buf, \"{} total\\n\", memory_usage());\n+    format_to!(buf, \"\\ncounts:\\n{}\", profile::countme::get_all());\n \n     if let Some(file_id) = file_id {\n         format_to!(buf, \"\\nfile info:\\n\");\n@@ -60,6 +61,7 @@ pub(crate) fn status(db: &RootDatabase, file_id: Option<FileId>) -> String {\n             None => format_to!(buf, \"does not belong to any crate\"),\n         }\n     }\n+\n     buf\n }\n "}, {"sha": "cc7da27f7e51bb301da0cb27447251cf5a4937bf", "filename": "crates/profile/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/crates%2Fprofile%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/crates%2Fprofile%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2FCargo.toml?ref=e5c5c0a040e0c74892ea0a36c7fd50e5410879bd", "patch": "@@ -14,6 +14,7 @@ once_cell = \"1.3.1\"\n cfg-if = \"1\"\n libc = \"0.2.73\"\n la-arena = { version = \"0.2.0\", path = \"../../lib/arena\" }\n+countme = { version = \"2.0.0-pre.2\", features = [\"enable\"] }\n jemalloc-ctl = { version = \"0.3.3\", optional = true }\n \n [target.'cfg(target_os = \"linux\")'.dependencies]"}, {"sha": "29d2ed51870ccfe75ef5adf7dd211161556fa74c", "filename": "crates/profile/src/hprof.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/crates%2Fprofile%2Fsrc%2Fhprof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/crates%2Fprofile%2Fsrc%2Fhprof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fhprof.rs?ref=e5c5c0a040e0c74892ea0a36c7fd50e5410879bd", "patch": "@@ -3,6 +3,7 @@ use once_cell::sync::Lazy;\n use std::{\n     cell::RefCell,\n     collections::{BTreeMap, HashSet},\n+    env,\n     io::{stderr, Write},\n     sync::{\n         atomic::{AtomicBool, Ordering},\n@@ -18,7 +19,8 @@ use crate::tree::{Idx, Tree};\n /// env RA_PROFILE=foo|bar|baz   // enabled only selected entries\n /// env RA_PROFILE=*@3>10        // dump everything, up to depth 3, if it takes more than 10 ms\n pub fn init() {\n-    let spec = std::env::var(\"RA_PROFILE\").unwrap_or_default();\n+    countme::enable(env::var(\"RA_COUNT\").is_ok());\n+    let spec = env::var(\"RA_PROFILE\").unwrap_or_default();\n     init_from(&spec);\n }\n "}, {"sha": "79dba47d5e1cbda607477d1ed54915a0af4b38f1", "filename": "crates/profile/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/crates%2Fprofile%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/crates%2Fprofile%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Flib.rs?ref=e5c5c0a040e0c74892ea0a36c7fd50e5410879bd", "patch": "@@ -15,6 +15,13 @@ pub use crate::{\n     stop_watch::{StopWatch, StopWatchSpan},\n };\n \n+pub use countme;\n+/// Include `_c: Count<Self>` field in important structs to count them.\n+///\n+/// To view the counts, run with `RA_COUNT=1`. The overhead of disabled count is\n+/// almost zero.\n+pub use countme::Count;\n+\n thread_local!(static IN_SCOPE: RefCell<bool> = RefCell::new(false));\n \n /// Allows to check if the current code is withing some dynamic scope, can be"}, {"sha": "66416f709522c09bd346a611a775a34f4151792d", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=e5c5c0a040e0c74892ea0a36c7fd50e5410879bd", "patch": "@@ -2,6 +2,7 @@\n //! errors.\n \n use std::{\n+    env,\n     path::PathBuf,\n     time::{SystemTime, UNIX_EPOCH},\n };\n@@ -295,6 +296,10 @@ impl AnalysisStatsCmd {\n             report_metric(\"total memory\", memory.allocated.megabytes() as u64, \"MB\");\n         }\n \n+        if env::var(\"RA_COUNT\").is_ok() {\n+            eprintln!(\"{}\", profile::countme::get_all());\n+        }\n+\n         if self.memory_usage && verbosity.is_verbose() {\n             print_memory_usage(host, vfs);\n         }"}, {"sha": "24197b3322741289176e0733d02625c0bf6cf94b", "filename": "docs/dev/README.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/e5c5c0a040e0c74892ea0a36c7fd50e5410879bd/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=e5c5c0a040e0c74892ea0a36c7fd50e5410879bd", "patch": "@@ -251,6 +251,9 @@ RA_PROFILE=*@3>10        // dump everything, up to depth 3, if it takes more tha\n \n In particular, I have `export RA_PROFILE='*>10'` in my shell profile.\n \n+We also have a \"counting\" profiler which counts number of instances of popular structs.\n+It is enabled by `RA_COUNT=1`.\n+\n To measure time for from-scratch analysis, use something like this:\n \n ```"}]}