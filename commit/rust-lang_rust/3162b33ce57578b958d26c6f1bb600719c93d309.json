{"sha": "3162b33ce57578b958d26c6f1bb600719c93d309", "node_id": "C_kwDOAAsO6NoAKDMxNjJiMzNjZTU3NTc4Yjk1OGQyNmM2ZjFiYjYwMDcxOWM5M2QzMDk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-13T17:08:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-29T10:16:09Z"}, "message": "Handle anonymous lifetimes properly in diagnostics.", "tree": {"sha": "aa0fb7bfeb40cfc0b2f88bb3f6d23ede223f0b1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa0fb7bfeb40cfc0b2f88bb3f6d23ede223f0b1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3162b33ce57578b958d26c6f1bb600719c93d309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3162b33ce57578b958d26c6f1bb600719c93d309", "html_url": "https://github.com/rust-lang/rust/commit/3162b33ce57578b958d26c6f1bb600719c93d309", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3162b33ce57578b958d26c6f1bb600719c93d309/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b86c6f21e407e5da617a55aa172e85327b473db", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b86c6f21e407e5da617a55aa172e85327b473db", "html_url": "https://github.com/rust-lang/rust/commit/7b86c6f21e407e5da617a55aa172e85327b473db"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "cb4b154d271a54a0a9c0e7b2a5f436f64eb4747d", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3162b33ce57578b958d26c6f1bb600719c93d309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3162b33ce57578b958d26c6f1bb600719c93d309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=3162b33ce57578b958d26c6f1bb600719c93d309", "patch": "@@ -567,15 +567,17 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         let lifetime =\n             self.try_match_adt_and_generic_args(substs, needle_fr, args, search_stack)?;\n         match lifetime.name {\n-            hir::LifetimeName::Param(_)\n+            hir::LifetimeName::Param(hir::ParamName::Plain(_) | hir::ParamName::Error)\n             | hir::LifetimeName::Error\n-            | hir::LifetimeName::Static\n-            | hir::LifetimeName::Underscore => {\n+            | hir::LifetimeName::Static => {\n                 let lifetime_span = lifetime.span;\n                 Some(RegionNameHighlight::MatchedAdtAndSegment(lifetime_span))\n             }\n \n-            hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Implicit => {\n+            hir::LifetimeName::Param(hir::ParamName::Fresh(_))\n+            | hir::LifetimeName::ImplicitObjectLifetimeDefault\n+            | hir::LifetimeName::Implicit\n+            | hir::LifetimeName::Underscore => {\n                 // In this case, the user left off the lifetime; so\n                 // they wrote something like:\n                 //"}, {"sha": "3a4a7d018231dc886df6e1ab17f4de7b8956cd5c", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3162b33ce57578b958d26c6f1bb600719c93d309/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3162b33ce57578b958d26c6f1bb600719c93d309/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=3162b33ce57578b958d26c6f1bb600719c93d309", "patch": "@@ -161,45 +161,45 @@ fn msg_span_from_early_bound_and_free_regions<'tcx>(\n             {\n                 sp = param.span;\n             }\n-            let text = if br.name == kw::UnderscoreLifetime {\n-                format!(\"the anonymous lifetime as defined here\")\n-            } else {\n+            let text = if br.has_name() {\n                 format!(\"the lifetime `{}` as defined here\", br.name)\n+            } else {\n+                format!(\"the anonymous lifetime as defined here\")\n             };\n             (text, sp)\n         }\n-        ty::ReFree(ty::FreeRegion {\n-            bound_region: ty::BoundRegionKind::BrNamed(_, name), ..\n-        }) => {\n-            let mut sp = sm.guess_head_span(tcx.def_span(scope));\n-            if let Some(param) =\n-                tcx.hir().get_generics(scope).and_then(|generics| generics.get_named(name))\n+        ty::ReFree(ref fr) => {\n+            if !fr.bound_region.is_named()\n+                && let Some((ty, _)) = find_anon_type(tcx, region, &fr.bound_region)\n             {\n-                sp = param.span;\n-            }\n-            let text = if name == kw::UnderscoreLifetime {\n-                format!(\"the anonymous lifetime as defined here\")\n+                (\"the anonymous lifetime defined here\".to_string(), ty.span)\n             } else {\n-                format!(\"the lifetime `{}` as defined here\", name)\n-            };\n-            (text, sp)\n-        }\n-        ty::ReFree(ref fr) => match fr.bound_region {\n-            ty::BrAnon(idx) => {\n-                if let Some((ty, _)) = find_anon_type(tcx, region, &fr.bound_region) {\n-                    (\"the anonymous lifetime defined here\".to_string(), ty.span)\n-                } else {\n-                    (\n+                match fr.bound_region {\n+                    ty::BoundRegionKind::BrNamed(_, name) => {\n+                        let mut sp = sm.guess_head_span(tcx.def_span(scope));\n+                        if let Some(param) =\n+                            tcx.hir().get_generics(scope).and_then(|generics| generics.get_named(name))\n+                        {\n+                            sp = param.span;\n+                        }\n+                        let text = if name == kw::UnderscoreLifetime {\n+                            format!(\"the anonymous lifetime as defined here\")\n+                        } else {\n+                            format!(\"the lifetime `{}` as defined here\", name)\n+                        };\n+                        (text, sp)\n+                    }\n+                    ty::BrAnon(idx) => (\n                         format!(\"the anonymous lifetime #{} defined here\", idx + 1),\n-                        tcx.def_span(scope),\n-                    )\n+                        tcx.def_span(scope)\n+                    ),\n+                    _ => (\n+                        format!(\"the lifetime `{}` as defined here\", region),\n+                        sm.guess_head_span(tcx.def_span(scope)),\n+                    ),\n                 }\n             }\n-            _ => (\n-                format!(\"the lifetime `{}` as defined here\", region),\n-                sm.guess_head_span(tcx.def_span(scope)),\n-            ),\n-        },\n+        }\n         _ => bug!(),\n     }\n }\n@@ -2555,7 +2555,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 ty::ReEarlyBound(ty::EarlyBoundRegion { name, .. })\n                 | ty::ReFree(ty::FreeRegion { bound_region: ty::BrNamed(_, name), .. }),\n                 _,\n-            ) => {\n+            ) if name != kw::UnderscoreLifetime => {\n                 // Does the required lifetime have a nice name we can print?\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,"}, {"sha": "5b8b9bb68ad1e916c397e2413614d6ad3b6baebd", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3162b33ce57578b958d26c6f1bb600719c93d309/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3162b33ce57578b958d26c6f1bb600719c93d309/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=3162b33ce57578b958d26c6f1bb600719c93d309", "patch": "@@ -2,9 +2,9 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:48\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                          -                     ^^^^^^^^\n+   |                          -----                 ^^^^^^^^\n    |                          |\n-   |                          hidden type `Pin<&Foo>` captures the anonymous lifetime as defined here\n+   |                          hidden type `Pin<&Foo>` captures the anonymous lifetime defined here\n    |\n help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n    |"}]}