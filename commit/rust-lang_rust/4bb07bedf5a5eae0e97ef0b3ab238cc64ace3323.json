{"sha": "4bb07bedf5a5eae0e97ef0b3ab238cc64ace3323", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYjA3YmVkZjVhNWVhZTBlOTdlZjBiM2FiMjM4Y2M2NGFjZTMzMjM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-25T22:04:38Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:09:34Z"}, "message": "Visit attributes in one go.", "tree": {"sha": "9d145484995b8dfc825af06db8a74a55858e319e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d145484995b8dfc825af06db8a74a55858e319e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bb07bedf5a5eae0e97ef0b3ab238cc64ace3323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb07bedf5a5eae0e97ef0b3ab238cc64ace3323", "html_url": "https://github.com/rust-lang/rust/commit/4bb07bedf5a5eae0e97ef0b3ab238cc64ace3323", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bb07bedf5a5eae0e97ef0b3ab238cc64ace3323/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e816056a5a440ca789f543481c8478514c35de6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e816056a5a440ca789f543481c8478514c35de6", "html_url": "https://github.com/rust-lang/rust/commit/8e816056a5a440ca789f543481c8478514c35de6"}], "stats": {"total": 71, "additions": 31, "deletions": 40}, "files": [{"sha": "c30b8efdfb268a271ac0e77377a9cf09fe77c39e", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4bb07bedf5a5eae0e97ef0b3ab238cc64ace3323/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb07bedf5a5eae0e97ef0b3ab238cc64ace3323/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=4bb07bedf5a5eae0e97ef0b3ab238cc64ace3323", "patch": "@@ -476,14 +476,15 @@ pub trait Visitor<'v>: Sized {\n /// Walks the contents of a crate. See also `Crate::visit_all_items`.\n pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate<'v>) {\n     visitor.visit_mod(&krate.item.module, krate.item.span, CRATE_HIR_ID);\n-    walk_list!(visitor, visit_attribute, krate.item.attrs);\n     walk_list!(visitor, visit_macro_def, krate.exported_macros);\n+    for attr in krate.attrs.iter().flat_map(|l| *l) {\n+        visitor.visit_attribute(attr)\n+    }\n }\n \n pub fn walk_macro_def<'v, V: Visitor<'v>>(visitor: &mut V, macro_def: &'v MacroDef<'v>) {\n     visitor.visit_id(macro_def.hir_id());\n     visitor.visit_ident(macro_def.ident);\n-    walk_list!(visitor, visit_attribute, macro_def.attrs);\n }\n \n pub fn walk_mod<'v, V: Visitor<'v>>(visitor: &mut V, module: &'v Mod<'v>, mod_hir_id: HirId) {\n@@ -502,7 +503,6 @@ pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local<'v>) {\n     // Intentionally visiting the expr first - the initialization expr\n     // dominates the local's definition.\n     walk_list!(visitor, visit_expr, &local.init);\n-    walk_list!(visitor, visit_attribute, local.attrs.iter());\n     visitor.visit_id(local.hir_id);\n     visitor.visit_pat(&local.pat);\n     walk_list!(visitor, visit_ty, &local.ty);\n@@ -549,7 +549,6 @@ pub fn walk_trait_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_ref: &'v TraitR\n pub fn walk_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Param<'v>) {\n     visitor.visit_id(param.hir_id);\n     visitor.visit_pat(&param.pat);\n-    walk_list!(visitor, visit_attribute, param.attrs);\n }\n \n pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n@@ -644,7 +643,6 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n             walk_list!(visitor, visit_param_bound, bounds);\n         }\n     }\n-    walk_list!(visitor, visit_attribute, item.attrs);\n }\n \n pub fn walk_use<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path<'v>, hir_id: HirId) {\n@@ -678,7 +676,6 @@ pub fn walk_variant<'v, V: Visitor<'v>>(\n         variant.span,\n     );\n     walk_list!(visitor, visit_anon_const, &variant.disr_expr);\n-    walk_list!(visitor, visit_attribute, variant.attrs);\n }\n \n pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n@@ -843,8 +840,6 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v\n         ForeignItemKind::Static(ref typ, _) => visitor.visit_ty(typ),\n         ForeignItemKind::Type => (),\n     }\n-\n-    walk_list!(visitor, visit_attribute, foreign_item.attrs);\n }\n \n pub fn walk_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v GenericBound<'v>) {\n@@ -862,7 +857,6 @@ pub fn walk_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v GenericB\n \n pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v GenericParam<'v>) {\n     visitor.visit_id(param.hir_id);\n-    walk_list!(visitor, visit_attribute, param.attrs);\n     match param.name {\n         ParamName::Plain(ident) => visitor.visit_ident(ident),\n         ParamName::Error | ParamName::Fresh(_) => {}\n@@ -952,7 +946,6 @@ pub fn walk_fn<'v, V: Visitor<'v>>(\n \n pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v TraitItem<'v>) {\n     visitor.visit_ident(trait_item.ident);\n-    walk_list!(visitor, visit_attribute, trait_item.attrs);\n     visitor.visit_generics(&trait_item.generics);\n     match trait_item.kind {\n         TraitItemKind::Const(ref ty, default) => {\n@@ -1000,7 +993,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n         ident,\n         ref vis,\n         ref defaultness,\n-        attrs,\n+        attrs: _,\n         ref generics,\n         ref kind,\n         span: _,\n@@ -1009,7 +1002,6 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n     visitor.visit_ident(ident);\n     visitor.visit_vis(vis);\n     visitor.visit_defaultness(defaultness);\n-    walk_list!(visitor, visit_attribute, attrs);\n     visitor.visit_generics(generics);\n     match *kind {\n         ImplItemKind::Const(ref ty, body) => {\n@@ -1067,7 +1059,6 @@ pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V, struct_field: &'v\n     visitor.visit_vis(&struct_field.vis);\n     visitor.visit_ident(struct_field.ident);\n     visitor.visit_ty(&struct_field.ty);\n-    walk_list!(visitor, visit_attribute, struct_field.attrs);\n }\n \n pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block<'v>) {\n@@ -1094,7 +1085,6 @@ pub fn walk_anon_const<'v, V: Visitor<'v>>(visitor: &mut V, constant: &'v AnonCo\n \n pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>) {\n     visitor.visit_id(expression.hir_id);\n-    walk_list!(visitor, visit_attribute, expression.attrs.iter());\n     match expression.kind {\n         ExprKind::Box(ref subexpression) => visitor.visit_expr(subexpression),\n         ExprKind::Array(subexpressions) => {\n@@ -1238,7 +1228,6 @@ pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm<'v>) {\n         }\n     }\n     visitor.visit_expr(&arm.body);\n-    walk_list!(visitor, visit_attribute, arm.attrs);\n }\n \n pub fn walk_vis<'v, V: Visitor<'v>>(visitor: &mut V, vis: &'v Visibility<'v>) {"}, {"sha": "67946dfb292a6d6b2c5714077bebb6416dad8e6f", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bb07bedf5a5eae0e97ef0b3ab238cc64ace3323/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb07bedf5a5eae0e97ef0b3ab238cc64ace3323/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=4bb07bedf5a5eae0e97ef0b3ab238cc64ace3323", "patch": "@@ -406,6 +406,8 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAttributes {\n         if !cx.sess().is_attr_used(attr) {\n             debug!(\"emitting warning for: {:?}\", attr);\n             cx.struct_span_lint(UNUSED_ATTRIBUTES, attr.span, |lint| {\n+                // Mark as used to avoid duplicate warnings.\n+                cx.sess().mark_attr_used(attr);\n                 lint.build(\"unused attribute\").emit()\n             });\n             // Is it a builtin attribute that must be used at the crate level?"}, {"sha": "707521b7802f0af9bb2af97f083d091d96bfdb70", "filename": "src/test/ui/unused/unused-attr.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4bb07bedf5a5eae0e97ef0b3ab238cc64ace3323/src%2Ftest%2Fui%2Funused%2Funused-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bb07bedf5a5eae0e97ef0b3ab238cc64ace3323/src%2Ftest%2Fui%2Funused%2Funused-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-attr.stderr?ref=4bb07bedf5a5eae0e97ef0b3ab238cc64ace3323", "patch": "@@ -1,8 +1,8 @@\n error: unused attribute\n-  --> $DIR/unused-attr.rs:6:1\n+  --> $DIR/unused-attr.rs:4:1\n    |\n-LL | #[rustc_dummy]\n-   | ^^^^^^^^^^^^^^\n+LL | #![rustc_dummy]\n+   | ^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/unused-attr.rs:1:9\n@@ -11,16 +11,16 @@ LL | #![deny(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:9:1\n+  --> $DIR/unused-attr.rs:6:1\n    |\n LL | #[rustc_dummy]\n    | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:14:5\n+  --> $DIR/unused-attr.rs:9:1\n    |\n-LL |     #[rustc_dummy]\n-   |     ^^^^^^^^^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n   --> $DIR/unused-attr.rs:12:1\n@@ -29,10 +29,16 @@ LL | #[rustc_dummy]\n    | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:22:9\n+  --> $DIR/unused-attr.rs:14:5\n    |\n-LL |         #[rustc_dummy]\n-   |         ^^^^^^^^^^^^^^\n+LL |     #[rustc_dummy]\n+   |     ^^^^^^^^^^^^^^\n+\n+error: unused attribute\n+  --> $DIR/unused-attr.rs:18:1\n+   |\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n   --> $DIR/unused-attr.rs:20:5\n@@ -41,7 +47,13 @@ LL |     #[rustc_dummy]\n    |     ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:18:1\n+  --> $DIR/unused-attr.rs:22:9\n+   |\n+LL |         #[rustc_dummy]\n+   |         ^^^^^^^^^^^^^^\n+\n+error: unused attribute\n+  --> $DIR/unused-attr.rs:27:1\n    |\n LL | #[rustc_dummy]\n    | ^^^^^^^^^^^^^^\n@@ -53,7 +65,7 @@ LL |         #[rustc_dummy]\n    |         ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:27:1\n+  --> $DIR/unused-attr.rs:35:1\n    |\n LL | #[rustc_dummy]\n    | ^^^^^^^^^^^^^^\n@@ -65,7 +77,7 @@ LL |     #[rustc_dummy]\n    |     ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:35:1\n+  --> $DIR/unused-attr.rs:41:1\n    |\n LL | #[rustc_dummy]\n    | ^^^^^^^^^^^^^^\n@@ -82,17 +94,5 @@ error: unused attribute\n LL |     #[rustc_dummy]\n    |     ^^^^^^^^^^^^^^\n \n-error: unused attribute\n-  --> $DIR/unused-attr.rs:41:1\n-   |\n-LL | #[rustc_dummy]\n-   | ^^^^^^^^^^^^^^\n-\n-error: unused attribute\n-  --> $DIR/unused-attr.rs:4:1\n-   |\n-LL | #![rustc_dummy]\n-   | ^^^^^^^^^^^^^^^\n-\n error: aborting due to 15 previous errors\n "}]}