{"sha": "219e93d91e417f76e0071e42c78edc00f7f2cd4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxOWU5M2Q5MWU0MTdmNzZlMDA3MWU0MmM3OGVkYzAwZjdmMmNkNGI=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-17T22:54:29Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-19T12:26:28Z"}, "message": "Use `impls` for intra doc links as well", "tree": {"sha": "e4cb692b814a326e928a638318b270b5b518a01d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4cb692b814a326e928a638318b270b5b518a01d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/219e93d91e417f76e0071e42c78edc00f7f2cd4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/219e93d91e417f76e0071e42c78edc00f7f2cd4b", "html_url": "https://github.com/rust-lang/rust/commit/219e93d91e417f76e0071e42c78edc00f7f2cd4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/219e93d91e417f76e0071e42c78edc00f7f2cd4b/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0", "html_url": "https://github.com/rust-lang/rust/commit/9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0"}], "stats": {"total": 56, "additions": 20, "deletions": 36}, "files": [{"sha": "f8fa2971b49d8fced1cebb6e8c0042c6fdba29fa", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/219e93d91e417f76e0071e42c78edc00f7f2cd4b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/219e93d91e417f76e0071e42c78edc00f7f2cd4b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=219e93d91e417f76e0071e42c78edc00f7f2cd4b", "patch": "@@ -4106,7 +4106,7 @@ dependencies = [\n  \"rustc-rayon\",\n  \"serde\",\n  \"serde_json\",\n- \"smallvec 1.4.0\",\n+ \"smallvec 1.4.2\",\n  \"tempfile\",\n ]\n "}, {"sha": "344d5603d763764aa28499e2ce98d94db6b39e3a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/219e93d91e417f76e0071e42c78edc00f7f2cd4b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/219e93d91e417f76e0071e42c78edc00f7f2cd4b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=219e93d91e417f76e0071e42c78edc00f7f2cd4b", "patch": "@@ -1267,7 +1267,7 @@ impl PrimitiveType {\n         }\n     }\n \n-    pub fn impls(&self, tcx: TyCtxt<'_>) -> &SmallVec<[DefId; 4]> {\n+    pub fn impls(&self, tcx: TyCtxt<'_>) -> &'static SmallVec<[DefId; 4]> {\n         Self::all_impls(tcx).get(self).expect(\"missing impl for primitive type\")\n     }\n "}, {"sha": "60b212c0243ec8b21eb322e3b33655eeff77d8d9", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 18, "deletions": 34, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/219e93d91e417f76e0071e42c78edc00f7f2cd4b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/219e93d91e417f76e0071e42c78edc00f7f2cd4b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=219e93d91e417f76e0071e42c78edc00f7f2cd4b", "patch": "@@ -16,6 +16,7 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::Ident;\n use rustc_span::symbol::Symbol;\n use rustc_span::DUMMY_SP;\n+use smallvec::SmallVec;\n \n use std::cell::Cell;\n use std::ops::Range;\n@@ -270,18 +271,21 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 .ok_or(ErrorKind::ResolutionFailure)?;\n \n             if let Some((path, prim)) = is_primitive(&path, TypeNS) {\n-                let did = primitive_impl(cx, &path).ok_or(ErrorKind::ResolutionFailure)?;\n-                return cx\n-                    .tcx\n-                    .associated_items(did)\n-                    .filter_by_name_unhygienic(item_name)\n-                    .next()\n-                    .and_then(|item| match item.kind {\n-                        ty::AssocKind::Fn => Some(\"method\"),\n-                        _ => None,\n-                    })\n-                    .map(|out| (prim, Some(format!(\"{}#{}.{}\", path, out, item_name))))\n-                    .ok_or(ErrorKind::ResolutionFailure);\n+                for &impl_ in primitive_impl(cx, &path).ok_or(ErrorKind::ResolutionFailure)? {\n+                    let link = cx\n+                        .tcx\n+                        .associated_items(impl_)\n+                        .find_by_name_and_namespace(cx.tcx, Ident::with_dummy_span(item_name), ns, impl_)\n+                        .and_then(|item| match item.kind {\n+                            ty::AssocKind::Fn => Some(\"method\"),\n+                            _ => None,\n+                        })\n+                        .map(|out| (prim, Some(format!(\"{}#{}.{}\", path, out, item_name))));\n+                    if let Some(link) = link {\n+                        return Ok(link);\n+                    }\n+                }\n+                return Err(ErrorKind::ResolutionFailure);\n             }\n \n             let (_, ty_res) = cx\n@@ -1238,26 +1242,6 @@ fn is_primitive(path_str: &str, ns: Namespace) -> Option<(&'static str, Res)> {\n     }\n }\n \n-fn primitive_impl(cx: &DocContext<'_>, path_str: &str) -> Option<DefId> {\n-    let tcx = cx.tcx;\n-    match path_str {\n-        \"u8\" => tcx.lang_items().u8_impl(),\n-        \"u16\" => tcx.lang_items().u16_impl(),\n-        \"u32\" => tcx.lang_items().u32_impl(),\n-        \"u64\" => tcx.lang_items().u64_impl(),\n-        \"u128\" => tcx.lang_items().u128_impl(),\n-        \"usize\" => tcx.lang_items().usize_impl(),\n-        \"i8\" => tcx.lang_items().i8_impl(),\n-        \"i16\" => tcx.lang_items().i16_impl(),\n-        \"i32\" => tcx.lang_items().i32_impl(),\n-        \"i64\" => tcx.lang_items().i64_impl(),\n-        \"i128\" => tcx.lang_items().i128_impl(),\n-        \"isize\" => tcx.lang_items().isize_impl(),\n-        \"f32\" => tcx.lang_items().f32_impl(),\n-        \"f64\" => tcx.lang_items().f64_impl(),\n-        \"str\" => tcx.lang_items().str_impl(),\n-        \"bool\" => tcx.lang_items().bool_impl(),\n-        \"char\" => tcx.lang_items().char_impl(),\n-        _ => None,\n-    }\n+fn primitive_impl(cx: &DocContext<'_>, path_str: &str) -> Option<&'static SmallVec<[DefId; 4]>> {\n+    Some(PrimitiveType::from_symbol(Symbol::intern(path_str))?.impls(cx.tcx))\n }"}]}