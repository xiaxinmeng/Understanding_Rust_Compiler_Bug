{"sha": "fde67b6ae3baa7063224d5efd7fccbfbdfca383b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZTY3YjZhZTNiYWE3MDYzMjI0ZDVlZmQ3ZmNjYmZiZGZjYTM4M2I=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-31T08:36:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-31T08:36:15Z"}, "message": "Rollup merge of #47889 - alexcrichton:wasm-hidden-by-default, r=cramertj\n\nrustc: Add an option to default hidden visibility\n\nThis commit adds a new option to target specifictions to specify that symbols\nshould be \"hidden\" visibility by default in LLVM. While there are no existing\ntargets that take advantage of this the `wasm32-unknown-unknown` target will\nsoon start to use this visibility. The LLD linker currently interprets `hidden`\nas \"don't export this from the wasm module\" which is what we want for 90% of our\nfunctions. While the LLD linker does have a \"export this symbol\" argument which\nis what we use for other linkers, it was also somewhat easier to do this change\ninstead which'll involve less arguments flying around. Additionally there's no\nneed for non-`hidden` visibility for most of our symbols!\n\nThis change should not immediately impact the wasm targets as-is, but rather\nthis is laying the foundations for soon integrating LLD as a linker for wasm\ncode.", "tree": {"sha": "d97e0debd215b51c01fd1d75b5518c491e0d1ce7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d97e0debd215b51c01fd1d75b5518c491e0d1ce7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fde67b6ae3baa7063224d5efd7fccbfbdfca383b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fde67b6ae3baa7063224d5efd7fccbfbdfca383b", "html_url": "https://github.com/rust-lang/rust/commit/fde67b6ae3baa7063224d5efd7fccbfbdfca383b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c3e6ac887dd907f0a084021aa0472f9149c9132", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c3e6ac887dd907f0a084021aa0472f9149c9132", "html_url": "https://github.com/rust-lang/rust/commit/2c3e6ac887dd907f0a084021aa0472f9149c9132"}, {"sha": "a2cc5d68a7d4a739b3da62540cb09f313de2f452", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2cc5d68a7d4a739b3da62540cb09f313de2f452", "html_url": "https://github.com/rust-lang/rust/commit/a2cc5d68a7d4a739b3da62540cb09f313de2f452"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "5f768ef4399e88fc12771aab5a6f892c263a66be", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=fde67b6ae3baa7063224d5efd7fccbfbdfca383b", "patch": "@@ -27,10 +27,12 @@\n #![feature(libc)]\n #![feature(panic_runtime)]\n #![feature(staged_api)]\n+#![feature(rustc_attrs)]\n \n // Rust's \"try\" function, but if we're aborting on panics we just call the\n // function as there's nothing else we need to do here.\n #[no_mangle]\n+#[rustc_std_internal_symbol]\n pub unsafe extern fn __rust_maybe_catch_panic(f: fn(*mut u8),\n                                               data: *mut u8,\n                                               _data_ptr: *mut usize,\n@@ -50,6 +52,7 @@ pub unsafe extern fn __rust_maybe_catch_panic(f: fn(*mut u8),\n // will kill us with an illegal instruction, which will do a good enough job for\n // now hopefully.\n #[no_mangle]\n+#[rustc_std_internal_symbol]\n pub unsafe extern fn __rust_start_panic(_data: usize, _vtable: usize) -> u32 {\n     abort();\n "}, {"sha": "4034055d041558f2360e5227c9fdbe3a32451aa1", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=fde67b6ae3baa7063224d5efd7fccbfbdfca383b", "patch": "@@ -639,6 +639,9 @@ define_dep_nodes!( <'tcx>\n     [] TargetFeaturesEnabled(DefId),\n \n     [] InstanceDefSizeEstimate { instance_def: InstanceDef<'tcx> },\n+\n+    [] GetSymbolExportLevel(DefId),\n+\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "85fca68187fe661fc82f9084cd94aea5719144cd", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=fde67b6ae3baa7063224d5efd7fccbfbdfca383b", "patch": "@@ -343,6 +343,7 @@ define_maps! { <'tcx>\n         -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'tcx>>>>),\n     [] fn export_name: ExportName(DefId) -> Option<Symbol>,\n     [] fn contains_extern_indicator: ContainsExternIndicator(DefId) -> bool,\n+    [] fn symbol_export_level: GetSymbolExportLevel(DefId) -> SymbolExportLevel,\n     [] fn is_translated_function: IsTranslatedFunction(DefId) -> bool,\n     [] fn codegen_unit: CodegenUnit(InternedString) -> Arc<CodegenUnit<'tcx>>,\n     [] fn compile_codegen_unit: CompileCodegenUnit(InternedString) -> Stats,"}, {"sha": "0ab6ee1a54a9b1a02ac866b6e6f3839c97c2296a", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=fde67b6ae3baa7063224d5efd7fccbfbdfca383b", "patch": "@@ -921,6 +921,8 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n \n         DepKind::TargetFeaturesWhitelist => { force!(target_features_whitelist, LOCAL_CRATE); }\n         DepKind::TargetFeaturesEnabled => { force!(target_features_enabled, def_id!()); }\n+\n+        DepKind::GetSymbolExportLevel => { force!(symbol_export_level, def_id!()); }\n     }\n \n     true"}, {"sha": "2872c59157d6be1cf1b5d73aec7f39d8e0aa584b", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=fde67b6ae3baa7063224d5efd7fccbfbdfca383b", "patch": "@@ -468,6 +468,10 @@ pub struct TargetOptions {\n \n     /// The codegen backend to use for this target, typically \"llvm\"\n     pub codegen_backend: String,\n+\n+    /// The default visibility for symbols in this target should be \"hidden\"\n+    /// rather than \"default\"\n+    pub default_hidden_visibility: bool,\n }\n \n impl Default for TargetOptions {\n@@ -538,6 +542,7 @@ impl Default for TargetOptions {\n             no_builtins: false,\n             i128_lowering: false,\n             codegen_backend: \"llvm\".to_string(),\n+            default_hidden_visibility: false,\n         }\n     }\n }\n@@ -785,6 +790,7 @@ impl Target {\n         key!(singlethread, bool);\n         key!(no_builtins, bool);\n         key!(codegen_backend);\n+        key!(default_hidden_visibility, bool);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -982,6 +988,7 @@ impl ToJson for Target {\n         target_option_val!(singlethread);\n         target_option_val!(no_builtins);\n         target_option_val!(codegen_backend);\n+        target_option_val!(default_hidden_visibility);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "242860e5c6e9285034cc5946e8a626a40275ec99", "filename": "src/librustc_back/target/wasm32_unknown_unknown.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_unknown.rs?ref=fde67b6ae3baa7063224d5efd7fccbfbdfca383b", "patch": "@@ -83,6 +83,9 @@ pub fn target() -> Result<Target, String> {\n         // performing LTO with compiler-builtins.\n         no_builtins: true,\n \n+        // no dynamic linking, no need for default visibility!\n+        default_hidden_visibility: true,\n+\n         .. Default::default()\n     };\n     Ok(Target {"}, {"sha": "e9471cdb4f9497658b91a27108906d88f72e98dc", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=fde67b6ae3baa7063224d5efd7fccbfbdfca383b", "patch": "@@ -107,6 +107,7 @@ use rustc::dep_graph::WorkProductId;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::DefPathData;\n use rustc::mir::mono::{Linkage, Visibility};\n+use rustc::middle::exported_symbols::SymbolExportLevel;\n use rustc::ty::{self, TyCtxt, InstanceDef};\n use rustc::ty::item_path::characteristic_def_id_of_type;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n@@ -322,7 +323,16 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                             .or_insert_with(make_codegen_unit);\n \n         let mut can_be_internalized = true;\n-        let (linkage, visibility) = match trans_item.explicit_linkage(tcx) {\n+        let default_visibility = |id: DefId| {\n+            if tcx.sess.target.target.options.default_hidden_visibility &&\n+                tcx.symbol_export_level(id) != SymbolExportLevel::C\n+            {\n+                Visibility::Hidden\n+            } else {\n+                Visibility::Default\n+            }\n+        };\n+        let (linkage, mut visibility) = match trans_item.explicit_linkage(tcx) {\n             Some(explicit_linkage) => (explicit_linkage, Visibility::Default),\n             None => {\n                 match trans_item {\n@@ -352,7 +362,8 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     Visibility::Hidden\n                                 } else if def_id.is_local() {\n                                     if tcx.is_exported_symbol(def_id) {\n-                                        Visibility::Default\n+                                        can_be_internalized = false;\n+                                        default_visibility(def_id)\n                                     } else {\n                                         Visibility::Hidden\n                                     }\n@@ -375,7 +386,8 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     MonoItem::GlobalAsm(node_id) => {\n                         let def_id = tcx.hir.local_def_id(node_id);\n                         let visibility = if tcx.is_exported_symbol(def_id) {\n-                            Visibility::Default\n+                            can_be_internalized = false;\n+                            default_visibility(def_id)\n                         } else {\n                             Visibility::Hidden\n                         };"}, {"sha": "e1c145b122d761044a6057c2f670591150701576", "filename": "src/librustc_trans/allocator.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibrustc_trans%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibrustc_trans%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fallocator.rs?ref=fde67b6ae3baa7063224d5efd7fccbfbdfca383b", "patch": "@@ -86,6 +86,10 @@ pub(crate) unsafe fn trans(tcx: TyCtxt, mods: &ModuleLlvm, kind: AllocatorKind)\n                                                      name.as_ptr(),\n                                                      ty);\n \n+        if tcx.sess.target.target.options.default_hidden_visibility {\n+            llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n+        }\n+\n         let callee = CString::new(kind.fn_name(method.name)).unwrap();\n         let callee = llvm::LLVMRustGetOrInsertFunction(llmod,\n                                                        callee.as_ptr(),"}, {"sha": "989ef8a953746161a09b433fae785aa639b393a4", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde67b6ae3baa7063224d5efd7fccbfbdfca383b/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=fde67b6ae3baa7063224d5efd7fccbfbdfca383b", "patch": "@@ -133,6 +133,8 @@ pub fn provide(providers: &mut Providers) {\n \n         Arc::new(local_crate)\n     };\n+\n+    providers.symbol_export_level = export_level;\n }\n \n pub fn provide_extern(providers: &mut Providers) {\n@@ -203,6 +205,7 @@ pub fn provide_extern(providers: &mut Providers) {\n \n         Arc::new(crate_exports)\n     };\n+    providers.symbol_export_level = export_level;\n }\n \n fn export_level(tcx: TyCtxt, sym_def_id: DefId) -> SymbolExportLevel {"}]}