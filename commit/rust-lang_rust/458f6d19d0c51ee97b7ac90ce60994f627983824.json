{"sha": "458f6d19d0c51ee97b7ac90ce60994f627983824", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OGY2ZDE5ZDBjNTFlZTk3YjdhYzkwY2U2MDk5NGY2Mjc5ODM4MjQ=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T08:03:07Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T08:16:10Z"}, "message": "Move fn_to_numeric_cast to its own module", "tree": {"sha": "c4c46aac09fddb59fc19e090e11e233bf546cca0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4c46aac09fddb59fc19e090e11e233bf546cca0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/458f6d19d0c51ee97b7ac90ce60994f627983824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/458f6d19d0c51ee97b7ac90ce60994f627983824", "html_url": "https://github.com/rust-lang/rust/commit/458f6d19d0c51ee97b7ac90ce60994f627983824", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/458f6d19d0c51ee97b7ac90ce60994f627983824/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dce9921fd6a1e55430c56e5ccf0faf0f1e23491", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dce9921fd6a1e55430c56e5ccf0faf0f1e23491", "html_url": "https://github.com/rust-lang/rust/commit/0dce9921fd6a1e55430c56e5ccf0faf0f1e23491"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "a8d508585b5d416c3427d517bda9500ce9b41c89", "filename": "clippy_lints/src/casts/fn_to_numeric_cast.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/458f6d19d0c51ee97b7ac90ce60994f627983824/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458f6d19d0c51ee97b7ac90ce60994f627983824/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast.rs?ref=458f6d19d0c51ee97b7ac90ce60994f627983824", "patch": "@@ -0,0 +1,37 @@\n+use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, Ty, UintTy};\n+\n+use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+\n+use super::{utils, FN_TO_NUMERIC_CAST};\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n+    // We only want to check casts to `ty::Uint` or `ty::Int`\n+    match cast_to.kind() {\n+        ty::Uint(_) | ty::Int(..) => { /* continue on */ },\n+        _ => return,\n+    }\n+\n+    match cast_from.kind() {\n+        ty::FnDef(..) | ty::FnPtr(_) => {\n+            let mut applicability = Applicability::MaybeIncorrect;\n+            let from_snippet = snippet_with_applicability(cx, cast_expr.span, \"x\", &mut applicability);\n+            let to_nbits = utils::int_ty_to_nbits(cast_to, cx.tcx);\n+\n+            if (to_nbits >= cx.tcx.data_layout.pointer_size.bits()) && (*cast_to.kind() != ty::Uint(UintTy::Usize)) {\n+                span_lint_and_sugg(\n+                    cx,\n+                    FN_TO_NUMERIC_CAST,\n+                    expr.span,\n+                    &format!(\"casting function pointer `{}` to `{}`\", from_snippet, cast_to),\n+                    \"try\",\n+                    format!(\"{} as usize\", from_snippet),\n+                    applicability,\n+                );\n+            }\n+        },\n+        _ => {},\n+    }\n+}"}, {"sha": "bbe492be72ec725f85a78f8f77305a817bb4b2c8", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/458f6d19d0c51ee97b7ac90ce60994f627983824/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458f6d19d0c51ee97b7ac90ce60994f627983824/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=458f6d19d0c51ee97b7ac90ce60994f627983824", "patch": "@@ -3,6 +3,7 @@ mod cast_possible_truncation;\n mod cast_possible_wrap;\n mod cast_precision_loss;\n mod cast_sign_loss;\n+mod fn_to_numeric_cast;\n mod unnecessary_cast;\n mod utils;\n \n@@ -301,6 +302,8 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             if unnecessary_cast::check(cx, expr, cast_expr, cast_from, cast_to) {\n                 return;\n             }\n+\n+            fn_to_numeric_cast::check(cx, expr, cast_expr, cast_from, cast_to);\n             lint_fn_to_numeric_cast(cx, expr, cast_expr, cast_from, cast_to);\n             lint_cast_ptr_alignment(cx, expr, cast_from, cast_to);\n             if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx.sess(), expr.span) {\n@@ -386,16 +389,6 @@ fn lint_fn_to_numeric_cast(\n                     format!(\"{} as usize\", from_snippet),\n                     applicability,\n                 );\n-            } else if *cast_to.kind() != ty::Uint(UintTy::Usize) {\n-                span_lint_and_sugg(\n-                    cx,\n-                    FN_TO_NUMERIC_CAST,\n-                    expr.span,\n-                    &format!(\"casting function pointer `{}` to `{}`\", from_snippet, cast_to),\n-                    \"try\",\n-                    format!(\"{} as usize\", from_snippet),\n-                    applicability,\n-                );\n             }\n         },\n         _ => {},"}]}