{"sha": "7b4f48927dce585f747a58083b45ab62b9d73a53", "node_id": "C_kwDOAAsO6NoAKDdiNGY0ODkyN2RjZTU4NWY3NDdhNTgwODNiNDVhYjYyYjlkNzNhNTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-12T20:21:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-12T20:21:26Z"}, "message": "Auto merge of #109056 - matthiaskrgr:rollup-9trny1z, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #108651 (Forbid the use of `#[target_feature]` on `main`)\n - #109009 (rustdoc: use restricted Damerau-Levenshtein distance for search)\n - #109026 (Introduce `Rc::into_inner`, as a parallel to `Arc::into_inner`)\n - #109029 (Gate usages of `dyn*` and const closures in macros)\n - #109031 (Rename `config.toml.example` to `config.example.toml`)\n - #109032 (Use `TyCtxt::trait_solver_next` in some places)\n - #109047 (typo)\n - #109052 (Add eslint check for rustdoc-gui tester)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2ebb9a10afc630bbf3348c46c80b0fd6a0c5f5ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ebb9a10afc630bbf3348c46c80b0fd6a0c5f5ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b4f48927dce585f747a58083b45ab62b9d73a53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b4f48927dce585f747a58083b45ab62b9d73a53", "html_url": "https://github.com/rust-lang/rust/commit/7b4f48927dce585f747a58083b45ab62b9d73a53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b4f48927dce585f747a58083b45ab62b9d73a53/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "938afba8996fe058b91c61b23ef5d000cb9ac169", "url": "https://api.github.com/repos/rust-lang/rust/commits/938afba8996fe058b91c61b23ef5d000cb9ac169", "html_url": "https://github.com/rust-lang/rust/commit/938afba8996fe058b91c61b23ef5d000cb9ac169"}, {"sha": "5dc01137251f77b2dfbcffb1d9eeae0859b1c935", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc01137251f77b2dfbcffb1d9eeae0859b1c935", "html_url": "https://github.com/rust-lang/rust/commit/5dc01137251f77b2dfbcffb1d9eeae0859b1c935"}], "stats": {"total": 768, "additions": 549, "deletions": 219}, "files": [{"sha": "d29c15fe712f301a375385e3ad9d624937721371", "filename": ".gitattributes", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitattributes?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -9,7 +9,6 @@\n src/etc/installer/gfx/* binary\n src/vendor/** -text\n Cargo.lock linguist-generated=false\n-config.toml.example linguist-language=TOML\n \n # Older git versions try to fix line endings on images and fonts, this prevents it.\n *.png binary"}, {"sha": "9a59f455fe9afdf4156bb99f3f54bf07d2df6b59", "filename": ".reuse/dep5", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/.reuse%2Fdep5", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/.reuse%2Fdep5", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.reuse%2Fdep5?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -16,7 +16,7 @@ Files: compiler/*\n        Cargo.lock\n        Cargo.toml\n        CODE_OF_CONDUCT.md\n-       config.toml.example\n+       config.example.toml\n        configure\n        CONTRIBUTING.md\n        COPYRIGHT"}, {"sha": "c19e129a9207aaefa4226af6d1f4fc1a11e1fb1f", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -99,7 +99,7 @@ See [the rustc-dev-guide for more info][sysllvm].\n    The Rust build system uses a file named `config.toml` in the root of the\n    source tree to determine various configuration settings for the build.\n    Set up the defaults intended for distros to get started. You can see a full\n-   list of options in `config.toml.example`.\n+   list of options in `config.example.toml`.\n \n    ```sh\n    printf 'profile = \"user\" \\nchangelog-seen = 2 \\n' > config.toml"}, {"sha": "9af25e5cae2866f4f3d163cfa63da95f3f72a3db", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -337,9 +337,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::TyKind::Never => {\n                 gate_feature_post!(&self, never_type, ty.span, \"the `!` type is experimental\");\n             }\n-            ast::TyKind::TraitObject(_, ast::TraitObjectSyntax::DynStar, ..) => {\n-                gate_feature_post!(&self, dyn_star, ty.span, \"dyn* trait objects are unstable\");\n-            }\n             _ => {}\n         }\n         visit::walk_ty(self, ty)\n@@ -425,14 +422,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ExprKind::TryBlock(_) => {\n                 gate_feature_post!(&self, try_blocks, e.span, \"`try` expression is experimental\");\n             }\n-            ast::ExprKind::Closure(box ast::Closure { constness: ast::Const::Yes(_), .. }) => {\n-                gate_feature_post!(\n-                    &self,\n-                    const_closures,\n-                    e.span,\n-                    \"const closures are experimental\"\n-                );\n-            }\n             _ => {}\n         }\n         visit::walk_expr(self, e)\n@@ -594,6 +583,8 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(inline_const_pat, \"inline-const in pattern position is experimental\");\n     gate_all!(associated_const_equality, \"associated const equality is incomplete\");\n     gate_all!(yeet_expr, \"`do yeet` expression is experimental\");\n+    gate_all!(dyn_star, \"`dyn*` trait objects are experimental\");\n+    gate_all!(const_closures, \"const closures are experimental\");\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded)."}, {"sha": "8b6bf886b0d0ba93b763a3cf9e740c4e668e6c31", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -242,6 +242,9 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n                     // Note that this is also allowed if `actually_rustdoc` so\n                     // if a target is documenting some wasm-specific code then\n                     // it's not spuriously denied.\n+                    //\n+                    // This exception needs to be kept in sync with allowing\n+                    // `#[target_feature]` on `main` and `start`.\n                 } else if !tcx.features().target_feature_11 {\n                     let mut err = feature_err(\n                         &tcx.sess.parse_sess,"}, {"sha": "0105cbf36dee2459d8b761e0ae0f871e4424249e", "filename": "compiler/rustc_hir_analysis/messages.ftl", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fmessages.ftl?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -128,9 +128,14 @@ hir_analysis_where_clause_on_main = `main` function is not allowed to have a `wh\n hir_analysis_track_caller_on_main = `main` function is not allowed to be `#[track_caller]`\n     .suggestion = remove this annotation\n \n+hir_analysis_target_feature_on_main = `main` function is not allowed to have `#[target_feature]`\n+\n hir_analysis_start_not_track_caller = `start` is not allowed to be `#[track_caller]`\n     .label = `start` is not allowed to be `#[track_caller]`\n \n+hir_analysis_start_not_target_feature = `start` is not allowed to have `#[target_feature]`\n+    .label = `start` is not allowed to have `#[target_feature]`\n+\n hir_analysis_start_not_async = `start` is not allowed to be `async`\n     .label = `start` is not allowed to be `async`\n "}, {"sha": "f57197edeb74dd377bfff053220be6484a593977", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -327,6 +327,14 @@ pub(crate) struct TrackCallerOnMain {\n     pub annotated: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_target_feature_on_main)]\n+pub(crate) struct TargetFeatureOnMain {\n+    #[primary_span]\n+    #[label(hir_analysis_target_feature_on_main)]\n+    pub main: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(hir_analysis_start_not_track_caller)]\n pub(crate) struct StartTrackCaller {\n@@ -336,6 +344,15 @@ pub(crate) struct StartTrackCaller {\n     pub start: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_start_not_target_feature)]\n+pub(crate) struct StartTargetFeature {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    pub start: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(hir_analysis_start_not_async, code = \"E0752\")]\n pub(crate) struct StartAsync {"}, {"sha": "62abcbbdc9f6ead17c722c393c587dee83234b38", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -283,6 +283,15 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n         error = true;\n     }\n \n+    if !tcx.codegen_fn_attrs(main_def_id).target_features.is_empty()\n+        // Calling functions with `#[target_feature]` is not unsafe on WASM, see #84988\n+        && !tcx.sess.target.is_like_wasm\n+        && !tcx.sess.opts.actually_rustdoc\n+    {\n+        tcx.sess.emit_err(errors::TargetFeatureOnMain { main: main_span });\n+        error = true;\n+    }\n+\n     if error {\n         return;\n     }\n@@ -373,6 +382,18 @@ fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: DefId) {\n                             });\n                             error = true;\n                         }\n+                        if attr.has_name(sym::target_feature)\n+                            // Calling functions with `#[target_feature]` is\n+                            // not unsafe on WASM, see #84988\n+                            && !tcx.sess.target.is_like_wasm\n+                            && !tcx.sess.opts.actually_rustdoc\n+                        {\n+                            tcx.sess.emit_err(errors::StartTargetFeature {\n+                                span: attr.span,\n+                                start: start_span,\n+                            });\n+                            error = true;\n+                        }\n                     }\n \n                     if error {"}, {"sha": "1d12dd4709475283dba73e11bc348f72704002ac", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -2105,7 +2105,7 @@ impl<'a> Parser<'a> {\n             ClosureBinder::NotPresent\n         };\n \n-        let constness = self.parse_closure_constness(Case::Sensitive);\n+        let constness = self.parse_closure_constness();\n \n         let movability =\n             if self.eat_keyword(kw::Static) { Movability::Static } else { Movability::Movable };"}, {"sha": "3251dd6d0c6fbff002a555cc41b25afd11d0b8a3", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -1196,9 +1196,13 @@ impl<'a> Parser<'a> {\n         self.parse_constness_(case, false)\n     }\n \n-    /// Parses constness for closures\n-    fn parse_closure_constness(&mut self, case: Case) -> Const {\n-        self.parse_constness_(case, true)\n+    /// Parses constness for closures (case sensitive, feature-gated)\n+    fn parse_closure_constness(&mut self) -> Const {\n+        let constness = self.parse_constness_(Case::Sensitive, true);\n+        if let Const::Yes(span) = constness {\n+            self.sess.gated_spans.gate(sym::const_closures, span);\n+        }\n+        constness\n     }\n \n     fn parse_constness_(&mut self, case: Case, is_closure: bool) -> Const {"}, {"sha": "3d9d2cc62e3851c810de5b0bba579f8db7f47c20", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -624,10 +624,12 @@ impl<'a> Parser<'a> {\n     ///\n     /// Note that this does *not* parse bare trait objects.\n     fn parse_dyn_ty(&mut self, impl_dyn_multi: &mut bool) -> PResult<'a, TyKind> {\n+        let lo = self.token.span;\n         self.bump(); // `dyn`\n \n         // parse dyn* types\n         let syntax = if self.eat(&TokenKind::BinOp(token::Star)) {\n+            self.sess.gated_spans.gate(sym::dyn_star, lo.to(self.prev_token.span));\n             TraitObjectSyntax::DynStar\n         } else {\n             TraitObjectSyntax::Dyn"}, {"sha": "f84b2f4428d1a26c8ae71a503151fac849ef392c", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -1,6 +1,5 @@\n use rustc_middle::traits::solve::{Certainty, Goal, MaybeCause};\n use rustc_middle::ty;\n-use rustc_session::config::TraitSolver;\n \n use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::InferCtxt;\n@@ -80,13 +79,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n             _ => obligation.param_env.without_const(),\n         };\n \n-        if self.tcx.sess.opts.unstable_opts.trait_solver != TraitSolver::Next {\n-            let c_pred = self.canonicalize_query_keep_static(\n-                param_env.and(obligation.predicate),\n-                &mut _orig_values,\n-            );\n-            self.tcx.at(obligation.cause.span()).evaluate_obligation(c_pred)\n-        } else {\n+        if self.tcx.trait_solver_next() {\n             self.probe(|snapshot| {\n                 if let Ok((_, certainty)) =\n                     self.evaluate_root_goal(Goal::new(self.tcx, param_env, obligation.predicate))\n@@ -111,6 +104,12 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                     Ok(EvaluationResult::EvaluatedToErr)\n                 }\n             })\n+        } else {\n+            let c_pred = self.canonicalize_query_keep_static(\n+                param_env.and(obligation.predicate),\n+                &mut _orig_values,\n+            );\n+            self.tcx.at(obligation.cause.span()).evaluate_obligation(c_pred)\n         }\n     }\n "}, {"sha": "d7ce0078124500c75c0a4b7301ed46aa7dbd13ec", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -50,7 +50,6 @@ use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable, TypeVisitableExt};\n-use rustc_session::config::TraitSolver;\n use rustc_span::symbol::sym;\n \n use std::cell::{Cell, RefCell};\n@@ -545,13 +544,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n     ) -> Result<EvaluationResult, OverflowError> {\n         self.evaluation_probe(|this| {\n-            if this.tcx().sess.opts.unstable_opts.trait_solver != TraitSolver::Next {\n+            if this.tcx().trait_solver_next() {\n+                this.evaluate_predicates_recursively_in_new_solver([obligation.clone()])\n+            } else {\n                 this.evaluate_predicate_recursively(\n                     TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),\n                     obligation.clone(),\n                 )\n-            } else {\n-                this.evaluate_predicates_recursively_in_new_solver([obligation.clone()])\n             }\n         })\n     }\n@@ -591,7 +590,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     where\n         I: IntoIterator<Item = PredicateObligation<'tcx>> + std::fmt::Debug,\n     {\n-        if self.tcx().sess.opts.unstable_opts.trait_solver != TraitSolver::Next {\n+        if self.tcx().trait_solver_next() {\n+            self.evaluate_predicates_recursively_in_new_solver(predicates)\n+        } else {\n             let mut result = EvaluatedToOk;\n             for obligation in predicates {\n                 let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;\n@@ -604,8 +605,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n             Ok(result)\n-        } else {\n-            self.evaluate_predicates_recursively_in_new_solver(predicates)\n         }\n     }\n "}, {"sha": "62e699eefd706cf9e13d323e050f48d6b6bfb9d5", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -167,7 +167,7 @@ pub enum TyKind<I: Interner> {\n     /// lifetimes bound by the witness itself.\n     ///\n     /// This variant is only using when `drop_tracking_mir` is set.\n-    /// This contains the `DefId` and the `SubstRef` of the generator.\n+    /// This contains the `DefId` and the `SubstsRef` of the generator.\n     /// The actual witness types are computed on MIR by the `mir_generator_witnesses` query.\n     ///\n     /// Looking at the following example, the witness for this generator"}, {"sha": "dee0d8f254b63596dfded6caf64c7c197dbcb9ab", "filename": "config.example.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/config.example.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/config.example.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.example.toml?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "previous_filename": "config.toml.example"}, {"sha": "77b0447b345ec9a91a22e3695a00997e0429ec58", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -681,6 +681,24 @@ impl<T> Rc<T> {\n             Err(this)\n         }\n     }\n+\n+    /// Returns the inner value, if the `Rc` has exactly one strong reference.\n+    ///\n+    /// Otherwise, [`None`] is returned and the `Rc` is dropped.\n+    ///\n+    /// This will succeed even if there are outstanding weak references.\n+    ///\n+    /// If `Rc::into_inner` is called on every clone of this `Rc`,\n+    /// it is guaranteed that exactly one of the calls returns the inner value.\n+    /// This means in particular that the inner value is not dropped.\n+    ///\n+    /// This is equivalent to `Rc::try_unwrap(...).ok()`. (Note that these are not equivalent for\n+    /// `Arc`, due to race conditions that do not apply to `Rc`.)\n+    #[inline]\n+    #[unstable(feature = \"rc_into_inner\", issue = \"106894\")]\n+    pub fn into_inner(this: Self) -> Option<T> {\n+        Rc::try_unwrap(this).ok()\n+    }\n }\n \n impl<T> Rc<[T]> {"}, {"sha": "2784108e0e63509101a225f716a2a1625d743350", "filename": "library/alloc/src/rc/tests.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc%2Ftests.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -151,6 +151,21 @@ fn try_unwrap() {\n     assert_eq!(Rc::try_unwrap(x), Ok(5));\n }\n \n+#[test]\n+fn into_inner() {\n+    let x = Rc::new(3);\n+    assert_eq!(Rc::into_inner(x), Some(3));\n+\n+    let x = Rc::new(4);\n+    let y = Rc::clone(&x);\n+    assert_eq!(Rc::into_inner(x), None);\n+    assert_eq!(Rc::into_inner(y), Some(4));\n+\n+    let x = Rc::new(5);\n+    let _w = Rc::downgrade(&x);\n+    assert_eq!(Rc::into_inner(x), Some(5));\n+}\n+\n #[test]\n fn into_from_raw() {\n     let x = Rc::new(Box::new(\"hello\"));"}, {"sha": "253d504d7bdb57fbb496eb3d524c056d244b9646", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -185,7 +185,7 @@ Some general areas that you may be interested in modifying are:\n If you make a major change, please remember to:\n \n + Update `VERSION` in `src/bootstrap/main.rs`.\n-* Update `changelog-seen = N` in `config.toml.example`.\n+* Update `changelog-seen = N` in `config.example.toml`.\n * Add an entry in `src/bootstrap/CHANGELOG.md`.\n \n A 'major change' includes"}, {"sha": "b345bf9fb83606db8ee96908cfcec44c17f58f63", "filename": "src/bootstrap/bin/main.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Fbootstrap%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Fbootstrap%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fmain.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -44,8 +44,8 @@ fn main() {\n     if suggest_setup {\n         println!(\"warning: you have not made a `config.toml`\");\n         println!(\n-            \"help: consider running `./x.py setup` or copying `config.toml.example` by running \\\n-            `cp config.toml.example config.toml`\"\n+            \"help: consider running `./x.py setup` or copying `config.example.toml` by running \\\n+            `cp config.example.toml config.toml`\"\n         );\n     } else if let Some(suggestion) = &changelog_suggestion {\n         println!(\"{}\", suggestion);\n@@ -57,8 +57,8 @@ fn main() {\n     if suggest_setup {\n         println!(\"warning: you have not made a `config.toml`\");\n         println!(\n-            \"help: consider running `./x.py setup` or copying `config.toml.example` by running \\\n-            `cp config.toml.example config.toml`\"\n+            \"help: consider running `./x.py setup` or copying `config.example.toml` by running \\\n+            `cp config.example.toml config.toml`\"\n         );\n     } else if let Some(suggestion) = &changelog_suggestion {\n         println!(\"{}\", suggestion);"}, {"sha": "fc5aa8a245d2dd1eb125165ca5bd4961a18274a9", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -55,7 +55,7 @@ pub enum DryRun {\n /// Note that this structure is not decoded directly into, but rather it is\n /// filled out from the decoded forms of the structs below. For documentation\n /// each field, see the corresponding fields in\n-/// `config.toml.example`.\n+/// `config.example.toml`.\n #[derive(Default)]\n #[cfg_attr(test, derive(Clone))]\n pub struct Config {\n@@ -325,7 +325,7 @@ impl std::str::FromStr for SplitDebuginfo {\n \n impl SplitDebuginfo {\n     /// Returns the default `-Csplit-debuginfo` value for the current target. See the comment for\n-    /// `rust.split-debuginfo` in `config.toml.example`.\n+    /// `rust.split-debuginfo` in `config.example.toml`.\n     fn default_for_platform(target: &str) -> Self {\n         if target.contains(\"apple\") {\n             SplitDebuginfo::Unpacked"}, {"sha": "b326ae402aa6bf91046476d9f98bdc05b7f7db04", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -194,7 +194,7 @@ def err(msg):\n     print('')\n     print('This configure script is a thin configuration shim over the true')\n     print('configuration system, `config.toml`. You can explore the comments')\n-    print('in `config.toml.example` next to this configure script to see')\n+    print('in `config.example.toml` next to this configure script to see')\n     print('more information about what each option is. Additionally you can')\n     print('pass `--set` as an argument to set arbitrary key/value pairs')\n     print('in the TOML configuration if desired')\n@@ -367,7 +367,7 @@ def set(key, value):\n \n set('build.configure-args', sys.argv[1:])\n \n-# \"Parse\" the `config.toml.example` file into the various sections, and we'll\n+# \"Parse\" the `config.example.toml` file into the various sections, and we'll\n # use this as a template of a `config.toml` to write out which preserves\n # all the various comments and whatnot.\n #\n@@ -380,7 +380,7 @@ def set(key, value):\n targets = {}\n top_level_keys = []\n \n-for line in open(rust_dir + '/config.toml.example').read().split(\"\\n\"):\n+for line in open(rust_dir + '/config.example.toml').read().split(\"\\n\"):\n     if cur_section == None:\n         if line.count('=') == 1:\n             top_level_key = line.split('=')[0]"}, {"sha": "a3d9cb3e10c217090524e16b8c7b2426e959baf7", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -967,7 +967,7 @@ impl Step for PlainSourceTarball {\n             \"RELEASES.md\",\n             \"configure\",\n             \"x.py\",\n-            \"config.toml.example\",\n+            \"config.example.toml\",\n             \"Cargo.toml\",\n             \"Cargo.lock\",\n         ];"}, {"sha": "040e36ea5f8d8d22547ca7f2575b83a6ee2c424e", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -286,7 +286,7 @@ impl Step for Llvm {\n             (true, true) => \"RelWithDebInfo\",\n         };\n \n-        // NOTE: remember to also update `config.toml.example` when changing the\n+        // NOTE: remember to also update `config.example.toml` when changing the\n         // defaults!\n         let llvm_targets = match &builder.config.llvm_targets {\n             Some(s) => s,"}, {"sha": "515890aef8df8677a3135d31fe002794e01ca7e7", "filename": "src/ci/docker/host-x86_64/mingw-check/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -53,4 +53,5 @@ ENV SCRIPT python3 ../x.py --stage 2 test src/tools/expand-yaml-anchors && \\\n            # Runs checks to ensure that there are no ES5 issues in our JS code.\n            es-check es6 ../src/librustdoc/html/static/js/*.js && \\\n            eslint -c ../src/librustdoc/html/static/.eslintrc.js ../src/librustdoc/html/static/js/*.js && \\\n-           eslint -c ../src/tools/rustdoc-js/.eslintrc.js ../src/tools/rustdoc-js/tester.js\n+           eslint -c ../src/tools/rustdoc-js/.eslintrc.js ../src/tools/rustdoc-js/tester.js && \\\n+           eslint -c ../src/tools/rustdoc-gui/.eslintrc.js ../src/tools/rustdoc-gui/tester.js"}, {"sha": "b0b2f4196422bd5e836d71901374015d7df6ed01", "filename": "src/doc/rustc/src/instrument-coverage.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -31,7 +31,7 @@ Rust's source-based code coverage requires the Rust \"profiler runtime\". Without\n \n The Rust `nightly` distribution channel includes the profiler runtime, by default.\n \n-> **Important**: If you are building the Rust compiler from the source distribution, the profiler runtime is _not_ enabled in the default `config.toml.example`. Edit your `config.toml` file and ensure the `profiler` feature is set it to `true` (either under the `[build]` section, or under the settings for an individual `[target.<triple>]`):\n+> **Important**: If you are building the Rust compiler from the source distribution, the profiler runtime is _not_ enabled in the default `config.example.toml`. Edit your `config.toml` file and ensure the `profiler` feature is set it to `true` (either under the `[build]` section, or under the settings for an individual `[target.<triple>]`):\n >\n > ```toml\n > # Build the profiler runtime (required when compiling with options that depend"}, {"sha": "c71ce2c3001384a97dc2d25457b722e89557e643", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 223, "deletions": 149, "changes": 372, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -76,39 +76,111 @@ function printTab(nb) {\n }\n \n /**\n- * A function to compute the Levenshtein distance between two strings\n- * Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported\n- * Full License can be found at http://creativecommons.org/licenses/by-sa/3.0/legalcode\n- * This code is an unmodified version of the code written by Marco de Wit\n- * and was found at https://stackoverflow.com/a/18514751/745719\n+ * The [edit distance] is a metric for measuring the difference between two strings.\n+ *\n+ * [edit distance]: https://en.wikipedia.org/wiki/Edit_distance\n  */\n-const levenshtein_row2 = [];\n-function levenshtein(s1, s2) {\n-    if (s1 === s2) {\n-        return 0;\n-    }\n-    const s1_len = s1.length, s2_len = s2.length;\n-    if (s1_len && s2_len) {\n-        let i1 = 0, i2 = 0, a, b, c, c2;\n-        const row = levenshtein_row2;\n-        while (i1 < s1_len) {\n-            row[i1] = ++i1;\n-        }\n-        while (i2 < s2_len) {\n-            c2 = s2.charCodeAt(i2);\n-            a = i2;\n-            ++i2;\n-            b = i2;\n-            for (i1 = 0; i1 < s1_len; ++i1) {\n-                c = a + (s1.charCodeAt(i1) !== c2 ? 1 : 0);\n-                a = row[i1];\n-                b = b < a ? (b < c ? b + 1 : c) : (a < c ? a + 1 : c);\n-                row[i1] = b;\n-            }\n-        }\n-        return b;\n-    }\n-    return s1_len + s2_len;\n+\n+/*\n+ * This function was translated, mostly line-for-line, from\n+ * https://github.com/rust-lang/rust/blob/ff4b772f805ec1e/compiler/rustc_span/src/edit_distance.rs\n+ *\n+ * The current implementation is the restricted Damerau-Levenshtein algorithm. It is restricted\n+ * because it does not permit modifying characters that have already been transposed. The specific\n+ * algorithm should not matter to the caller of the methods, which is why it is not noted in the\n+ * documentation.\n+ */\n+const editDistanceState = {\n+    current: [],\n+    prev: [],\n+    prevPrev: [],\n+    calculate: function calculate(a, b, limit) {\n+        // Ensure that `b` is the shorter string, minimizing memory use.\n+        if (a.length < b.length) {\n+            const aTmp = a;\n+            a = b;\n+            b = aTmp;\n+        }\n+\n+        const minDist = a.length - b.length;\n+        // If we know the limit will be exceeded, we can return early.\n+        if (minDist > limit) {\n+            return limit + 1;\n+        }\n+\n+        // Strip common prefix.\n+        // We know that `b` is the shorter string, so we don't need to check\n+        // `a.length`.\n+        while (b.length > 0 && b[0] === a[0]) {\n+            a = a.substring(1);\n+            b = b.substring(1);\n+        }\n+        // Strip common suffix.\n+        while (b.length > 0 && b[b.length - 1] === a[a.length - 1]) {\n+            a = a.substring(0, a.length - 1);\n+            b = b.substring(0, b.length - 1);\n+        }\n+\n+        // If either string is empty, the distance is the length of the other.\n+        // We know that `b` is the shorter string, so we don't need to check `a`.\n+        if (b.length === 0) {\n+            return minDist;\n+        }\n+\n+        const aLength = a.length;\n+        const bLength = b.length;\n+\n+        for (let i = 0; i <= bLength; ++i) {\n+            this.current[i] = 0;\n+            this.prev[i] = i;\n+            this.prevPrev[i] = Number.MAX_VALUE;\n+        }\n+\n+        // row by row\n+        for (let i = 1; i <= aLength; ++i) {\n+            this.current[0] = i;\n+            const aIdx = i - 1;\n+\n+            // column by column\n+            for (let j = 1; j <= bLength; ++j) {\n+                const bIdx = j - 1;\n+\n+                // There is no cost to substitute a character with itself.\n+                const substitutionCost = a[aIdx] === b[bIdx] ? 0 : 1;\n+\n+                this.current[j] = Math.min(\n+                    // deletion\n+                    this.prev[j] + 1,\n+                    // insertion\n+                    this.current[j - 1] + 1,\n+                    // substitution\n+                    this.prev[j - 1] + substitutionCost\n+                );\n+\n+                if ((i > 1) && (j > 1) && (a[aIdx] === b[bIdx - 1]) && (a[aIdx - 1] === b[bIdx])) {\n+                    // transposition\n+                    this.current[j] = Math.min(\n+                        this.current[j],\n+                        this.prevPrev[j - 2] + 1\n+                    );\n+                }\n+            }\n+\n+            // Rotate the buffers, reusing the memory\n+            const prevPrevTmp = this.prevPrev;\n+            this.prevPrev = this.prev;\n+            this.prev = this.current;\n+            this.current = prevPrevTmp;\n+        }\n+\n+        // `prev` because we already rotated the buffers.\n+        const distance = this.prev[bLength];\n+        return distance <= limit ? distance : (limit + 1);\n+    },\n+};\n+\n+function editDistance(a, b, limit) {\n+    return editDistanceState.calculate(a, b, limit);\n }\n \n function initSearch(rawSearchIndex) {\n@@ -802,7 +874,7 @@ function initSearch(rawSearchIndex) {\n             for (const result of results) {\n                 if (result.id > -1) {\n                     const obj = searchIndex[result.id];\n-                    obj.lev = result.lev;\n+                    obj.dist = result.dist;\n                     const res = buildHrefAndPath(obj);\n                     obj.displayPath = pathSplitter(res[0]);\n                     obj.fullPath = obj.displayPath + obj.name;\n@@ -860,8 +932,8 @@ function initSearch(rawSearchIndex) {\n \n                 // Sort by distance in the path part, if specified\n                 // (less changes required to match means higher rankings)\n-                a = aaa.path_lev;\n-                b = bbb.path_lev;\n+                a = aaa.path_dist;\n+                b = bbb.path_dist;\n                 if (a !== b) {\n                     return a - b;\n                 }\n@@ -875,8 +947,8 @@ function initSearch(rawSearchIndex) {\n \n                 // Sort by distance in the name part, the last part of the path\n                 // (less changes required to match means higher rankings)\n-                a = (aaa.lev);\n-                b = (bbb.lev);\n+                a = (aaa.dist);\n+                b = (bbb.dist);\n                 if (a !== b) {\n                     return a - b;\n                 }\n@@ -968,19 +1040,20 @@ function initSearch(rawSearchIndex) {\n \n         /**\n          * This function checks if the object (`row`) generics match the given type (`elem`)\n-         * generics. If there are no generics on `row`, `defaultLev` is returned.\n+         * generics. If there are no generics on `row`, `defaultDistance` is returned.\n          *\n-         * @param {Row} row            - The object to check.\n-         * @param {QueryElement} elem  - The element from the parsed query.\n-         * @param {integer} defaultLev - This is the value to return in case there are no generics.\n+         * @param {Row} row                 - The object to check.\n+         * @param {QueryElement} elem       - The element from the parsed query.\n+         * @param {integer} defaultDistance - This is the value to return in case there are no\n+         *                                    generics.\n          *\n-         * @return {integer}           - Returns the best match (if any) or `maxLevDistance + 1`.\n+         * @return {integer}           - Returns the best match (if any) or `maxEditDistance + 1`.\n          */\n-        function checkGenerics(row, elem, defaultLev, maxLevDistance) {\n+        function checkGenerics(row, elem, defaultDistance, maxEditDistance) {\n             if (row.generics.length === 0) {\n-                return elem.generics.length === 0 ? defaultLev : maxLevDistance + 1;\n+                return elem.generics.length === 0 ? defaultDistance : maxEditDistance + 1;\n             } else if (row.generics.length > 0 && row.generics[0].name === null) {\n-                return checkGenerics(row.generics[0], elem, defaultLev, maxLevDistance);\n+                return checkGenerics(row.generics[0], elem, defaultDistance, maxEditDistance);\n             }\n             // The names match, but we need to be sure that all generics kinda\n             // match as well.\n@@ -991,8 +1064,9 @@ function initSearch(rawSearchIndex) {\n                     elem_name = entry.name;\n                     if (elem_name === \"\") {\n                         // Pure generic, needs to check into it.\n-                        if (checkGenerics(entry, elem, maxLevDistance + 1, maxLevDistance) !== 0) {\n-                            return maxLevDistance + 1;\n+                        if (checkGenerics(entry, elem, maxEditDistance + 1, maxEditDistance)\n+                            !== 0) {\n+                            return maxEditDistance + 1;\n                         }\n                         continue;\n                     }\n@@ -1019,7 +1093,7 @@ function initSearch(rawSearchIndex) {\n                         }\n                     }\n                     if (match === null) {\n-                        return maxLevDistance + 1;\n+                        return maxEditDistance + 1;\n                     }\n                     elems[match] -= 1;\n                     if (elems[match] === 0) {\n@@ -1028,7 +1102,7 @@ function initSearch(rawSearchIndex) {\n                 }\n                 return 0;\n             }\n-            return maxLevDistance + 1;\n+            return maxEditDistance + 1;\n         }\n \n         /**\n@@ -1038,17 +1112,17 @@ function initSearch(rawSearchIndex) {\n           * @param {Row} row\n           * @param {QueryElement} elem    - The element from the parsed query.\n           *\n-          * @return {integer} - Returns a Levenshtein distance to the best match.\n+          * @return {integer} - Returns an edit distance to the best match.\n           */\n-        function checkIfInGenerics(row, elem, maxLevDistance) {\n-            let lev = maxLevDistance + 1;\n+        function checkIfInGenerics(row, elem, maxEditDistance) {\n+            let dist = maxEditDistance + 1;\n             for (const entry of row.generics) {\n-                lev = Math.min(checkType(entry, elem, true, maxLevDistance), lev);\n-                if (lev === 0) {\n+                dist = Math.min(checkType(entry, elem, true, maxEditDistance), dist);\n+                if (dist === 0) {\n                     break;\n                 }\n             }\n-            return lev;\n+            return dist;\n         }\n \n         /**\n@@ -1059,21 +1133,21 @@ function initSearch(rawSearchIndex) {\n           * @param {QueryElement} elem      - The element from the parsed query.\n           * @param {boolean} literalSearch\n           *\n-          * @return {integer} - Returns a Levenshtein distance to the best match. If there is\n-          *                     no match, returns `maxLevDistance + 1`.\n+          * @return {integer} - Returns an edit distance to the best match. If there is\n+          *                     no match, returns `maxEditDistance + 1`.\n           */\n-        function checkType(row, elem, literalSearch, maxLevDistance) {\n+        function checkType(row, elem, literalSearch, maxEditDistance) {\n             if (row.name === null) {\n                 // This is a pure \"generic\" search, no need to run other checks.\n                 if (row.generics.length > 0) {\n-                    return checkIfInGenerics(row, elem, maxLevDistance);\n+                    return checkIfInGenerics(row, elem, maxEditDistance);\n                 }\n-                return maxLevDistance + 1;\n+                return maxEditDistance + 1;\n             }\n \n-            let lev = levenshtein(row.name, elem.name);\n+            let dist = editDistance(row.name, elem.name, maxEditDistance);\n             if (literalSearch) {\n-                if (lev !== 0) {\n+                if (dist !== 0) {\n                     // The name didn't match, let's try to check if the generics do.\n                     if (elem.generics.length === 0) {\n                         const checkGeneric = row.generics.length > 0;\n@@ -1082,44 +1156,44 @@ function initSearch(rawSearchIndex) {\n                             return 0;\n                         }\n                     }\n-                    return maxLevDistance + 1;\n+                    return maxEditDistance + 1;\n                 } else if (elem.generics.length > 0) {\n-                    return checkGenerics(row, elem, maxLevDistance + 1, maxLevDistance);\n+                    return checkGenerics(row, elem, maxEditDistance + 1, maxEditDistance);\n                 }\n                 return 0;\n             } else if (row.generics.length > 0) {\n                 if (elem.generics.length === 0) {\n-                    if (lev === 0) {\n+                    if (dist === 0) {\n                         return 0;\n                     }\n                     // The name didn't match so we now check if the type we're looking for is inside\n                     // the generics!\n-                    lev = Math.min(lev, checkIfInGenerics(row, elem, maxLevDistance));\n-                    return lev;\n-                } else if (lev > maxLevDistance) {\n+                    dist = Math.min(dist, checkIfInGenerics(row, elem, maxEditDistance));\n+                    return dist;\n+                } else if (dist > maxEditDistance) {\n                     // So our item's name doesn't match at all and has generics.\n                     //\n                     // Maybe it's present in a sub generic? For example \"f<A<B<C>>>()\", if we're\n                     // looking for \"B<C>\", we'll need to go down.\n-                    return checkIfInGenerics(row, elem, maxLevDistance);\n+                    return checkIfInGenerics(row, elem, maxEditDistance);\n                 } else {\n                     // At this point, the name kinda match and we have generics to check, so\n                     // let's go!\n-                    const tmp_lev = checkGenerics(row, elem, lev, maxLevDistance);\n-                    if (tmp_lev > maxLevDistance) {\n-                        return maxLevDistance + 1;\n+                    const tmp_dist = checkGenerics(row, elem, dist, maxEditDistance);\n+                    if (tmp_dist > maxEditDistance) {\n+                        return maxEditDistance + 1;\n                     }\n                     // We compute the median value of both checks and return it.\n-                    return (tmp_lev + lev) / 2;\n+                    return (tmp_dist + dist) / 2;\n                 }\n             } else if (elem.generics.length > 0) {\n                 // In this case, we were expecting generics but there isn't so we simply reject this\n                 // one.\n-                return maxLevDistance + 1;\n+                return maxEditDistance + 1;\n             }\n             // No generics on our query or on the target type so we can return without doing\n             // anything else.\n-            return lev;\n+            return dist;\n         }\n \n         /**\n@@ -1129,27 +1203,27 @@ function initSearch(rawSearchIndex) {\n          * @param {QueryElement} elem    - The element from the parsed query.\n          * @param {integer} typeFilter\n          *\n-         * @return {integer} - Returns a Levenshtein distance to the best match. If there is no\n-         *                      match, returns `maxLevDistance + 1`.\n+         * @return {integer} - Returns an edit distance to the best match. If there is no\n+         *                      match, returns `maxEditDistance + 1`.\n          */\n-        function findArg(row, elem, typeFilter, maxLevDistance) {\n-            let lev = maxLevDistance + 1;\n+        function findArg(row, elem, typeFilter, maxEditDistance) {\n+            let dist = maxEditDistance + 1;\n \n             if (row && row.type && row.type.inputs && row.type.inputs.length > 0) {\n                 for (const input of row.type.inputs) {\n                     if (!typePassesFilter(typeFilter, input.ty)) {\n                         continue;\n                     }\n-                    lev = Math.min(\n-                        lev,\n-                        checkType(input, elem, parsedQuery.literalSearch, maxLevDistance)\n+                    dist = Math.min(\n+                        dist,\n+                        checkType(input, elem, parsedQuery.literalSearch, maxEditDistance)\n                     );\n-                    if (lev === 0) {\n+                    if (dist === 0) {\n                         return 0;\n                     }\n                 }\n             }\n-            return parsedQuery.literalSearch ? maxLevDistance + 1 : lev;\n+            return parsedQuery.literalSearch ? maxEditDistance + 1 : dist;\n         }\n \n         /**\n@@ -1159,35 +1233,35 @@ function initSearch(rawSearchIndex) {\n          * @param {QueryElement} elem   - The element from the parsed query.\n          * @param {integer} typeFilter\n          *\n-         * @return {integer} - Returns a Levenshtein distance to the best match. If there is no\n-         *                      match, returns `maxLevDistance + 1`.\n+         * @return {integer} - Returns an edit distance to the best match. If there is no\n+         *                      match, returns `maxEditDistance + 1`.\n          */\n-        function checkReturned(row, elem, typeFilter, maxLevDistance) {\n-            let lev = maxLevDistance + 1;\n+        function checkReturned(row, elem, typeFilter, maxEditDistance) {\n+            let dist = maxEditDistance + 1;\n \n             if (row && row.type && row.type.output.length > 0) {\n                 const ret = row.type.output;\n                 for (const ret_ty of ret) {\n                     if (!typePassesFilter(typeFilter, ret_ty.ty)) {\n                         continue;\n                     }\n-                    lev = Math.min(\n-                        lev,\n-                        checkType(ret_ty, elem, parsedQuery.literalSearch, maxLevDistance)\n+                    dist = Math.min(\n+                        dist,\n+                        checkType(ret_ty, elem, parsedQuery.literalSearch, maxEditDistance)\n                     );\n-                    if (lev === 0) {\n+                    if (dist === 0) {\n                         return 0;\n                     }\n                 }\n             }\n-            return parsedQuery.literalSearch ? maxLevDistance + 1 : lev;\n+            return parsedQuery.literalSearch ? maxEditDistance + 1 : dist;\n         }\n \n-        function checkPath(contains, ty, maxLevDistance) {\n+        function checkPath(contains, ty, maxEditDistance) {\n             if (contains.length === 0) {\n                 return 0;\n             }\n-            let ret_lev = maxLevDistance + 1;\n+            let ret_dist = maxEditDistance + 1;\n             const path = ty.path.split(\"::\");\n \n             if (ty.parent && ty.parent.name) {\n@@ -1197,27 +1271,27 @@ function initSearch(rawSearchIndex) {\n             const length = path.length;\n             const clength = contains.length;\n             if (clength > length) {\n-                return maxLevDistance + 1;\n+                return maxEditDistance + 1;\n             }\n             for (let i = 0; i < length; ++i) {\n                 if (i + clength > length) {\n                     break;\n                 }\n-                let lev_total = 0;\n+                let dist_total = 0;\n                 let aborted = false;\n                 for (let x = 0; x < clength; ++x) {\n-                    const lev = levenshtein(path[i + x], contains[x]);\n-                    if (lev > maxLevDistance) {\n+                    const dist = editDistance(path[i + x], contains[x], maxEditDistance);\n+                    if (dist > maxEditDistance) {\n                         aborted = true;\n                         break;\n                     }\n-                    lev_total += lev;\n+                    dist_total += dist;\n                 }\n                 if (!aborted) {\n-                    ret_lev = Math.min(ret_lev, Math.round(lev_total / clength));\n+                    ret_dist = Math.min(ret_dist, Math.round(dist_total / clength));\n                 }\n             }\n-            return ret_lev;\n+            return ret_dist;\n         }\n \n         function typePassesFilter(filter, type) {\n@@ -1312,40 +1386,40 @@ function initSearch(rawSearchIndex) {\n          * This function adds the given result into the provided `results` map if it matches the\n          * following condition:\n          *\n-         * * If it is a \"literal search\" (`parsedQuery.literalSearch`), then `lev` must be 0.\n-         * * If it is not a \"literal search\", `lev` must be <= `maxLevDistance`.\n+         * * If it is a \"literal search\" (`parsedQuery.literalSearch`), then `dist` must be 0.\n+         * * If it is not a \"literal search\", `dist` must be <= `maxEditDistance`.\n          *\n          * The `results` map contains information which will be used to sort the search results:\n          *\n          * * `fullId` is a `string`` used as the key of the object we use for the `results` map.\n          * * `id` is the index in both `searchWords` and `searchIndex` arrays for this element.\n          * * `index` is an `integer`` used to sort by the position of the word in the item's name.\n-         * * `lev` is the main metric used to sort the search results.\n-         * * `path_lev` is zero if a single-component search query is used, otherwise it's the\n+         * * `dist` is the main metric used to sort the search results.\n+         * * `path_dist` is zero if a single-component search query is used, otherwise it's the\n          *   distance computed for everything other than the last path component.\n          *\n          * @param {Results} results\n          * @param {string} fullId\n          * @param {integer} id\n          * @param {integer} index\n-         * @param {integer} lev\n-         * @param {integer} path_lev\n+         * @param {integer} dist\n+         * @param {integer} path_dist\n          */\n-        function addIntoResults(results, fullId, id, index, lev, path_lev, maxLevDistance) {\n-            const inBounds = lev <= maxLevDistance || index !== -1;\n-            if (lev === 0 || (!parsedQuery.literalSearch && inBounds)) {\n+        function addIntoResults(results, fullId, id, index, dist, path_dist, maxEditDistance) {\n+            const inBounds = dist <= maxEditDistance || index !== -1;\n+            if (dist === 0 || (!parsedQuery.literalSearch && inBounds)) {\n                 if (results[fullId] !== undefined) {\n                     const result = results[fullId];\n-                    if (result.dontValidate || result.lev <= lev) {\n+                    if (result.dontValidate || result.dist <= dist) {\n                         return;\n                     }\n                 }\n                 results[fullId] = {\n                     id: id,\n                     index: index,\n                     dontValidate: parsedQuery.literalSearch,\n-                    lev: lev,\n-                    path_lev: path_lev,\n+                    dist: dist,\n+                    path_dist: path_dist,\n                 };\n             }\n         }\n@@ -1354,7 +1428,7 @@ function initSearch(rawSearchIndex) {\n          * This function is called in case the query is only one element (with or without generics).\n          * This element will be compared to arguments' and returned values' items and also to items.\n          *\n-         * Other important thing to note: since there is only one element, we use levenshtein\n+         * Other important thing to note: since there is only one element, we use edit\n          * distance for name comparisons.\n          *\n          * @param {Row} row\n@@ -1372,22 +1446,22 @@ function initSearch(rawSearchIndex) {\n             results_others,\n             results_in_args,\n             results_returned,\n-            maxLevDistance\n+            maxEditDistance\n         ) {\n             if (!row || (filterCrates !== null && row.crate !== filterCrates)) {\n                 return;\n             }\n-            let lev, index = -1, path_lev = 0;\n+            let dist, index = -1, path_dist = 0;\n             const fullId = row.id;\n             const searchWord = searchWords[pos];\n \n-            const in_args = findArg(row, elem, parsedQuery.typeFilter, maxLevDistance);\n-            const returned = checkReturned(row, elem, parsedQuery.typeFilter, maxLevDistance);\n+            const in_args = findArg(row, elem, parsedQuery.typeFilter, maxEditDistance);\n+            const returned = checkReturned(row, elem, parsedQuery.typeFilter, maxEditDistance);\n \n-            // path_lev is 0 because no parent path information is currently stored\n+            // path_dist is 0 because no parent path information is currently stored\n             // in the search index\n-            addIntoResults(results_in_args, fullId, pos, -1, in_args, 0, maxLevDistance);\n-            addIntoResults(results_returned, fullId, pos, -1, returned, 0, maxLevDistance);\n+            addIntoResults(results_in_args, fullId, pos, -1, in_args, 0, maxEditDistance);\n+            addIntoResults(results_returned, fullId, pos, -1, returned, 0, maxEditDistance);\n \n             if (!typePassesFilter(parsedQuery.typeFilter, row.ty)) {\n                 return;\n@@ -1411,34 +1485,34 @@ function initSearch(rawSearchIndex) {\n             // No need to check anything else if it's a \"pure\" generics search.\n             if (elem.name.length === 0) {\n                 if (row.type !== null) {\n-                    lev = checkGenerics(row.type, elem, maxLevDistance + 1, maxLevDistance);\n-                    // path_lev is 0 because we know it's empty\n-                    addIntoResults(results_others, fullId, pos, index, lev, 0, maxLevDistance);\n+                    dist = checkGenerics(row.type, elem, maxEditDistance + 1, maxEditDistance);\n+                    // path_dist is 0 because we know it's empty\n+                    addIntoResults(results_others, fullId, pos, index, dist, 0, maxEditDistance);\n                 }\n                 return;\n             }\n \n             if (elem.fullPath.length > 1) {\n-                path_lev = checkPath(elem.pathWithoutLast, row, maxLevDistance);\n-                if (path_lev > maxLevDistance) {\n+                path_dist = checkPath(elem.pathWithoutLast, row, maxEditDistance);\n+                if (path_dist > maxEditDistance) {\n                     return;\n                 }\n             }\n \n             if (parsedQuery.literalSearch) {\n                 if (searchWord === elem.name) {\n-                    addIntoResults(results_others, fullId, pos, index, 0, path_lev);\n+                    addIntoResults(results_others, fullId, pos, index, 0, path_dist);\n                 }\n                 return;\n             }\n \n-            lev = levenshtein(searchWord, elem.pathLast);\n+            dist = editDistance(searchWord, elem.pathLast, maxEditDistance);\n \n-            if (index === -1 && lev + path_lev > maxLevDistance) {\n+            if (index === -1 && dist + path_dist > maxEditDistance) {\n                 return;\n             }\n \n-            addIntoResults(results_others, fullId, pos, index, lev, path_lev, maxLevDistance);\n+            addIntoResults(results_others, fullId, pos, index, dist, path_dist, maxEditDistance);\n         }\n \n         /**\n@@ -1450,22 +1524,22 @@ function initSearch(rawSearchIndex) {\n          * @param {integer} pos      - Position in the `searchIndex`.\n          * @param {Object} results\n          */\n-        function handleArgs(row, pos, results, maxLevDistance) {\n+        function handleArgs(row, pos, results, maxEditDistance) {\n             if (!row || (filterCrates !== null && row.crate !== filterCrates)) {\n                 return;\n             }\n \n-            let totalLev = 0;\n-            let nbLev = 0;\n+            let totalDist = 0;\n+            let nbDist = 0;\n \n             // If the result is too \"bad\", we return false and it ends this search.\n             function checkArgs(elems, callback) {\n                 for (const elem of elems) {\n                     // There is more than one parameter to the query so all checks should be \"exact\"\n-                    const lev = callback(row, elem, NO_TYPE_FILTER, maxLevDistance);\n-                    if (lev <= 1) {\n-                        nbLev += 1;\n-                        totalLev += lev;\n+                    const dist = callback(row, elem, NO_TYPE_FILTER, maxEditDistance);\n+                    if (dist <= 1) {\n+                        nbDist += 1;\n+                        totalDist += dist;\n                     } else {\n                         return false;\n                     }\n@@ -1479,11 +1553,11 @@ function initSearch(rawSearchIndex) {\n                 return;\n             }\n \n-            if (nbLev === 0) {\n+            if (nbDist === 0) {\n                 return;\n             }\n-            const lev = Math.round(totalLev / nbLev);\n-            addIntoResults(results, row.id, pos, 0, lev, 0, maxLevDistance);\n+            const dist = Math.round(totalDist / nbDist);\n+            addIntoResults(results, row.id, pos, 0, dist, 0, maxEditDistance);\n         }\n \n         function innerRunQuery() {\n@@ -1496,7 +1570,7 @@ function initSearch(rawSearchIndex) {\n             for (const elem of parsedQuery.returned) {\n                 queryLen += elem.name.length;\n             }\n-            const maxLevDistance = Math.floor(queryLen / 3);\n+            const maxEditDistance = Math.floor(queryLen / 3);\n \n             if (parsedQuery.foundElems === 1) {\n                 if (parsedQuery.elems.length === 1) {\n@@ -1511,7 +1585,7 @@ function initSearch(rawSearchIndex) {\n                             results_others,\n                             results_in_args,\n                             results_returned,\n-                            maxLevDistance\n+                            maxEditDistance\n                         );\n                     }\n                 } else if (parsedQuery.returned.length === 1) {\n@@ -1523,14 +1597,14 @@ function initSearch(rawSearchIndex) {\n                             row,\n                             elem,\n                             parsedQuery.typeFilter,\n-                            maxLevDistance\n+                            maxEditDistance\n                         );\n-                        addIntoResults(results_others, row.id, i, -1, in_returned, maxLevDistance);\n+                        addIntoResults(results_others, row.id, i, -1, in_returned, maxEditDistance);\n                     }\n                 }\n             } else if (parsedQuery.foundElems > 0) {\n                 for (i = 0, nSearchWords = searchWords.length; i < nSearchWords; ++i) {\n-                    handleArgs(searchIndex[i], i, results_others, maxLevDistance);\n+                    handleArgs(searchIndex[i], i, results_others, maxEditDistance);\n                 }\n             }\n         }\n@@ -1568,7 +1642,7 @@ function initSearch(rawSearchIndex) {\n      *\n      * @return {boolean}       - Whether the result is valid or not\n      */\n-    function validateResult(name, path, keys, parent, maxLevDistance) {\n+    function validateResult(name, path, keys, parent, maxEditDistance) {\n         if (!keys || !keys.length) {\n             return true;\n         }\n@@ -1582,8 +1656,8 @@ function initSearch(rawSearchIndex) {\n                 // next if there is a parent, check for exact parent match\n                 (parent !== undefined && parent.name !== undefined &&\n                     parent.name.toLowerCase().indexOf(key) > -1) ||\n-                // lastly check to see if the name was a levenshtein match\n-                levenshtein(name, key) <= maxLevDistance)) {\n+                // lastly check to see if the name was an editDistance match\n+                editDistance(name, key, maxEditDistance) <= maxEditDistance)) {\n                 return false;\n             }\n         }"}, {"sha": "f4aadc071998b21d7a8f20b612a85797935db7ff", "filename": "src/tools/rustdoc-gui/.eslintrc.js", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Ftools%2Frustdoc-gui%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Ftools%2Frustdoc-gui%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2F.eslintrc.js?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -0,0 +1,96 @@\n+module.exports = {\n+    \"env\": {\n+        \"browser\": true,\n+        \"node\": true,\n+        \"es6\": true\n+    },\n+    \"extends\": \"eslint:recommended\",\n+    \"parserOptions\": {\n+        \"ecmaVersion\": 2018,\n+        \"sourceType\": \"module\"\n+    },\n+    \"rules\": {\n+        \"linebreak-style\": [\n+            \"error\",\n+            \"unix\"\n+        ],\n+        \"semi\": [\n+            \"error\",\n+            \"always\"\n+        ],\n+        \"quotes\": [\n+            \"error\",\n+            \"double\"\n+        ],\n+        \"linebreak-style\": [\n+            \"error\",\n+            \"unix\"\n+        ],\n+        \"no-trailing-spaces\": \"error\",\n+        \"no-var\": [\"error\"],\n+        \"prefer-const\": [\"error\"],\n+        \"prefer-arrow-callback\": [\"error\"],\n+        \"brace-style\": [\n+            \"error\",\n+            \"1tbs\",\n+            { \"allowSingleLine\": false }\n+        ],\n+        \"keyword-spacing\": [\n+            \"error\",\n+            { \"before\": true, \"after\": true }\n+        ],\n+        \"arrow-spacing\": [\n+            \"error\",\n+            { \"before\": true, \"after\": true }\n+        ],\n+        \"key-spacing\": [\n+            \"error\",\n+            { \"beforeColon\": false, \"afterColon\": true, \"mode\": \"strict\" }\n+        ],\n+        \"func-call-spacing\": [\"error\", \"never\"],\n+        \"space-infix-ops\": \"error\",\n+        \"space-before-function-paren\": [\"error\", \"never\"],\n+        \"space-before-blocks\": \"error\",\n+        \"comma-dangle\": [\"error\", \"always-multiline\"],\n+        \"comma-style\": [\"error\", \"last\"],\n+        \"max-len\": [\"error\", { \"code\": 100, \"tabWidth\": 4 }],\n+        \"eol-last\": [\"error\", \"always\"],\n+        \"arrow-parens\": [\"error\", \"as-needed\"],\n+        \"no-unused-vars\": [\n+            \"error\",\n+            {\n+                \"argsIgnorePattern\": \"^_\",\n+                \"varsIgnorePattern\": \"^_\"\n+            }\n+        ],\n+        \"eqeqeq\": \"error\",\n+        \"no-const-assign\": \"error\",\n+        \"no-debugger\": \"error\",\n+        \"no-dupe-args\": \"error\",\n+        \"no-dupe-else-if\": \"error\",\n+        \"no-dupe-keys\": \"error\",\n+        \"no-duplicate-case\": \"error\",\n+        \"no-ex-assign\": \"error\",\n+        \"no-fallthrough\": \"error\",\n+        \"no-invalid-regexp\": \"error\",\n+        \"no-import-assign\": \"error\",\n+        \"no-self-compare\": \"error\",\n+        \"no-template-curly-in-string\": \"error\",\n+        \"block-scoped-var\": \"error\",\n+        \"guard-for-in\": \"error\",\n+        \"no-alert\": \"error\",\n+        \"no-confusing-arrow\": \"error\",\n+        \"no-div-regex\": \"error\",\n+        \"no-floating-decimal\": \"error\",\n+        \"no-implicit-globals\": \"error\",\n+        \"no-implied-eval\": \"error\",\n+        \"no-label-var\": \"error\",\n+        \"no-lonely-if\": \"error\",\n+        \"no-mixed-operators\": \"error\",\n+        \"no-multi-assign\": \"error\",\n+        \"no-return-assign\": \"error\",\n+        \"no-script-url\": \"error\",\n+        \"no-sequences\": \"error\",\n+        \"no-div-regex\": \"error\",\n+    }\n+};"}, {"sha": "72baad606f01e99aff983a4f932cb6522b143b5b", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -6,8 +6,8 @@\n \n const fs = require(\"fs\");\n const path = require(\"path\");\n-const os = require('os');\n-const {Options, runTest} = require('browser-ui-test');\n+const os = require(\"os\");\n+const {Options, runTest} = require(\"browser-ui-test\");\n \n // If a test fails or errors, we will retry it two more times in case it was a flaky failure.\n const NB_RETRY = 3;\n@@ -200,7 +200,7 @@ async function main(argv) {\n     const framework_options = new Options();\n     try {\n         // This is more convenient that setting fields one by one.\n-        let args = [\n+        const args = [\n             \"--variable\", \"DOC_PATH\", opts[\"doc_folder\"], \"--enable-fail-on-js-error\",\n             \"--allow-file-access-from-files\",\n         ];\n@@ -234,7 +234,7 @@ async function main(argv) {\n     } else {\n         files = opts[\"files\"];\n     }\n-    files = files.filter(file => path.extname(file) == \".goml\");\n+    files = files.filter(file => path.extname(file) === \".goml\");\n     if (files.length === 0) {\n         console.error(\"rustdoc-gui: No test selected\");\n         process.exit(2);\n@@ -259,7 +259,7 @@ async function main(argv) {\n \n     // We catch this \"event\" to display a nicer message in case of unexpected exit (because of a\n     // missing `--no-sandbox`).\n-    const exitHandling = (code) => {\n+    const exitHandling = () => {\n         if (!opts[\"no_sandbox\"]) {\n             console.log(\"\");\n             console.log(\n@@ -268,10 +268,10 @@ async function main(argv) {\n             console.log(\"\");\n         }\n     };\n-    process.on('exit', exitHandling);\n+    process.on(\"exit\", exitHandling);\n \n     const originalFilesLen = files.length;\n-    let results = createEmptyResults();\n+    const results = createEmptyResults();\n     const status_bar = char_printer(files.length);\n \n     let new_results;\n@@ -281,7 +281,7 @@ async function main(argv) {\n         Array.prototype.push.apply(results.successful, new_results.successful);\n         // We generate the new list of files with the previously failing tests.\n         files = Array.prototype.concat(new_results.failed, new_results.errored).map(\n-            f => f['file_name']);\n+            f => f[\"file_name\"]);\n         if (files.length > originalFilesLen / 2) {\n             // If we have too many failing tests, it's very likely not flaky failures anymore so\n             // no need to retry."}, {"sha": "7ca3ab8e563330c020be4f442072c11b041ed77b", "filename": "tests/rustdoc-js-std/println-typo.js", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Frustdoc-js-std%2Fprintln-typo.js", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Frustdoc-js-std%2Fprintln-typo.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fprintln-typo.js?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -0,0 +1,12 @@\n+// exact-check\n+\n+const QUERY = 'prinltn';\n+const FILTER_CRATE = 'std';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std', 'name': 'println' },\n+        { 'path': 'std', 'name': 'print' },\n+        { 'path': 'std', 'name': 'eprintln' },\n+    ],\n+};"}, {"sha": "39c645640222379d09ab374c6815eb224c0c4da6", "filename": "tests/ui/asm/x86_64/issue-89875.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Fasm%2Fx86_64%2Fissue-89875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Fasm%2Fx86_64%2Fissue-89875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Fx86_64%2Fissue-89875.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -7,11 +7,13 @@\n use std::arch::asm;\n \n #[target_feature(enable = \"avx\")]\n-fn main() {\n+fn foo() {\n     unsafe {\n         asm!(\n             \"/* {} */\",\n             out(ymm_reg) _,\n         );\n     }\n }\n+\n+fn main() {}"}, {"sha": "41eed71cdc30a9696868235d7cca4157a165704a", "filename": "tests/ui/dyn-star/feature-gate-dyn_star.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -3,7 +3,7 @@\n /// dyn* is not necessarily the final surface syntax (if we have one at all),\n /// but for now we will support it to aid in writing tests independently.\n pub fn dyn_star_parameter(_: &dyn* Send) {\n-    //~^ dyn* trait objects are unstable\n+    //~^ `dyn*` trait objects are experimental\n }\n \n fn main() {}"}, {"sha": "342e71c3a3a92c4f1ac08791beae092fd236280f", "filename": "tests/ui/dyn-star/feature-gate-dyn_star.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.stderr?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -1,8 +1,8 @@\n-error[E0658]: dyn* trait objects are unstable\n+error[E0658]: `dyn*` trait objects are experimental\n   --> $DIR/feature-gate-dyn_star.rs:5:31\n    |\n LL | pub fn dyn_star_parameter(_: &dyn* Send) {\n-   |                               ^^^^^^^^^\n+   |                               ^^^^\n    |\n    = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n    = help: add `#![feature(dyn_star)]` to the crate attributes to enable"}, {"sha": "a747987bd2483d4d6ee95c716f1a263b3b153e27", "filename": "tests/ui/dyn-star/gated-span.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Fdyn-star%2Fgated-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Fdyn-star%2Fgated-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fgated-span.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -0,0 +1,8 @@\n+macro_rules! t {\n+    ($t:ty) => {}\n+}\n+\n+t!(dyn* Send);\n+//~^ ERROR `dyn*` trait objects are experimental\n+\n+fn main() {}"}, {"sha": "626b6cd1b7f0ede6cd325aaebcd2bb036cc57024", "filename": "tests/ui/dyn-star/gated-span.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Fdyn-star%2Fgated-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Fdyn-star%2Fgated-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fgated-span.stderr?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: `dyn*` trait objects are experimental\n+  --> $DIR/gated-span.rs:5:4\n+   |\n+LL | t!(dyn* Send);\n+   |    ^^^^\n+   |\n+   = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n+   = help: add `#![feature(dyn_star)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "2d28f516ab5a76236a9d431e231a1c4b7654c3d0", "filename": "tests/ui/dyn-star/no-explicit-dyn-star-cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Fdyn-star%2Fno-explicit-dyn-star-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Fdyn-star%2Fno-explicit-dyn-star-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fno-explicit-dyn-star-cast.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -4,8 +4,8 @@ fn make_dyn_star() {\n     let i = 42usize;\n     let dyn_i: dyn* Debug = i as dyn* Debug;\n     //~^ ERROR casting `usize` as `dyn* Debug` is invalid\n-    //~| ERROR dyn* trait objects are unstable\n-    //~| ERROR dyn* trait objects are unstable\n+    //~| ERROR `dyn*` trait objects are experimental\n+    //~| ERROR `dyn*` trait objects are experimental\n }\n \n fn main() {"}, {"sha": "78af9c7a3895f425c83877ce2a5469611b219b13", "filename": "tests/ui/dyn-star/no-explicit-dyn-star-cast.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Fdyn-star%2Fno-explicit-dyn-star-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Fdyn-star%2Fno-explicit-dyn-star-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fno-explicit-dyn-star-cast.stderr?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -1,17 +1,17 @@\n-error[E0658]: dyn* trait objects are unstable\n+error[E0658]: `dyn*` trait objects are experimental\n   --> $DIR/no-explicit-dyn-star-cast.rs:5:16\n    |\n LL |     let dyn_i: dyn* Debug = i as dyn* Debug;\n-   |                ^^^^^^^^^^\n+   |                ^^^^\n    |\n    = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n    = help: add `#![feature(dyn_star)]` to the crate attributes to enable\n \n-error[E0658]: dyn* trait objects are unstable\n+error[E0658]: `dyn*` trait objects are experimental\n   --> $DIR/no-explicit-dyn-star-cast.rs:5:34\n    |\n LL |     let dyn_i: dyn* Debug = i as dyn* Debug;\n-   |                                  ^^^^^^^^^^\n+   |                                  ^^^^\n    |\n    = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n    = help: add `#![feature(dyn_star)]` to the crate attributes to enable"}, {"sha": "d1c93ab9f95af42c09cc1fc2da0160d713e0f7a7", "filename": "tests/ui/rfc-2632-const-trait-impl/gate.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -1,5 +1,13 @@\n // gate-test-const_closures\n+\n fn main() {\n     (const || {})();\n     //~^ ERROR: const closures are experimental\n }\n+\n+macro_rules! e {\n+    ($e:expr) => {}\n+}\n+\n+e!((const || {}));\n+//~^ ERROR const closures are experimental"}, {"sha": "11cc2cd569a4358c1b4d0941ea0eb3ecbe0d8057", "filename": "tests/ui/rfc-2632-const-trait-impl/gate.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.stderr?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -1,12 +1,21 @@\n error[E0658]: const closures are experimental\n-  --> $DIR/gate.rs:3:6\n+  --> $DIR/gate.rs:4:6\n    |\n LL |     (const || {})();\n-   |      ^^^^^^^^^^^\n+   |      ^^^^^\n    |\n    = note: see issue #106003 <https://github.com/rust-lang/rust/issues/106003> for more information\n    = help: add `#![feature(const_closures)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: const closures are experimental\n+  --> $DIR/gate.rs:12:5\n+   |\n+LL | e!((const || {}));\n+   |     ^^^^^\n+   |\n+   = note: see issue #106003 <https://github.com/rust-lang/rust/issues/106003> for more information\n+   = help: add `#![feature(const_closures)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "0d59e50264e1be2c9810a3f9e9e39194dc22c8a0", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-main.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-108645-target-feature-on-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-108645-target-feature-on-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-108645-target-feature-on-main.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -0,0 +1,7 @@\n+// only-x86_64\n+\n+#![feature(target_feature_11)]\n+\n+#[target_feature(enable = \"avx2\")]\n+fn main() {}\n+//~^ ERROR `main` function is not allowed to have `#[target_feature]`"}, {"sha": "cfafbd52286a788d3057bb7475ffbdb1928ad418", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-main.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-108645-target-feature-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-108645-target-feature-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-108645-target-feature-on-main.stderr?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -0,0 +1,8 @@\n+error: `main` function is not allowed to have `#[target_feature]`\n+  --> $DIR/issue-108645-target-feature-on-main.rs:6:1\n+   |\n+LL | fn main() {}\n+   | ^^^^^^^^^ `main` function is not allowed to have `#[target_feature]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "50e8ce2fdd5ed6a12aad0ed940fdbea06c625521", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-start.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-108645-target-feature-on-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-108645-target-feature-on-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-108645-target-feature-on-start.rs?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -0,0 +1,9 @@\n+// only-x86_64\n+\n+#![feature(start)]\n+#![feature(target_feature_11)]\n+\n+#[start]\n+#[target_feature(enable = \"avx2\")]\n+//~^ ERROR `start` is not allowed to have `#[target_feature]`\n+fn start(_argc: isize, _argv: *const *const u8) -> isize { 0 }"}, {"sha": "07687f3c7f4a2f03adc543fd3495342a79ee5555", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/issue-108645-target-feature-on-start.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-108645-target-feature-on-start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-108645-target-feature-on-start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-108645-target-feature-on-start.stderr?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -0,0 +1,11 @@\n+error: `start` is not allowed to have `#[target_feature]`\n+  --> $DIR/issue-108645-target-feature-on-start.rs:7:1\n+   |\n+LL | #[target_feature(enable = \"avx2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | fn start(_argc: isize, _argv: *const *const u8) -> isize { 0 }\n+   | -------------------------------------------------------- `start` is not allowed to have `#[target_feature]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a81f66fe16856316d87b4b8cf85cb2ad60f63f76", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f48927dce585f747a58083b45ab62b9d73a53/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f48927dce585f747a58083b45ab62b9d73a53/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=7b4f48927dce585f747a58083b45ab62b9d73a53", "patch": "@@ -185,7 +185,7 @@ trigger_files = [\n     \"src/tools/x\",\n     \"configure\",\n     \"Cargo.toml\",\n-    \"config.toml.example\",\n+    \"config.example.toml\",\n     \"src/stage0.json\"\n ]\n "}]}