{"sha": "52955dd661bdbb37778ff32da5746e1012119ba3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyOTU1ZGQ2NjFiZGJiMzc3NzhmZjMyZGE1NzQ2ZTEwMTIxMTliYTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-03T00:16:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-03T09:09:30Z"}, "message": "rustdoc: Allow forcing inlining of `pub use`\n\nRustdoc currently doesn't inline documentation of a `pub use` if the target is\npublicly reachable. This changes rustdoc to allow a #[doc(inline)] attribute to\nforce inlining the documentation, regardless of whether the targe is public or\nnot.\n\nCloses #13045", "tree": {"sha": "aa2362aadbce7c2bb38f3f3e4e984d8aee040b58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa2362aadbce7c2bb38f3f3e4e984d8aee040b58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52955dd661bdbb37778ff32da5746e1012119ba3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52955dd661bdbb37778ff32da5746e1012119ba3", "html_url": "https://github.com/rust-lang/rust/commit/52955dd661bdbb37778ff32da5746e1012119ba3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52955dd661bdbb37778ff32da5746e1012119ba3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb084b1818bb220928d1c99e241192f2cd98b069", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb084b1818bb220928d1c99e241192f2cd98b069", "html_url": "https://github.com/rust-lang/rust/commit/eb084b1818bb220928d1c99e241192f2cd98b069"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "9f1ad02decd128ed0522a25fe0e787bf454efce2", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/52955dd661bdbb37778ff32da5746e1012119ba3/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52955dd661bdbb37778ff32da5746e1012119ba3/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=52955dd661bdbb37778ff32da5746e1012119ba3", "patch": "@@ -15,6 +15,7 @@ use syntax::abi;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::ast_map;\n+use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n \n use core;\n@@ -133,9 +134,17 @@ impl<'a> RustdocVisitor<'a> {\n         if item.vis != ast::Public {\n             return om.view_items.push(item.clone());\n         }\n+        let please_inline = item.attrs.iter().any(|item| {\n+            match item.meta_item_list() {\n+                Some(list) => {\n+                    list.iter().any(|i| i.name().get() == \"inline\")\n+                }\n+                None => false,\n+            }\n+        });\n         let item = match item.node {\n             ast::ViewItemUse(ref vpath) => {\n-                match self.visit_view_path(*vpath, om) {\n+                match self.visit_view_path(*vpath, om, please_inline) {\n                     None => return,\n                     Some(path) => {\n                         ast::ViewItem {\n@@ -151,15 +160,16 @@ impl<'a> RustdocVisitor<'a> {\n     }\n \n     fn visit_view_path(&mut self, path: @ast::ViewPath,\n-                       om: &mut Module) -> Option<@ast::ViewPath> {\n+                       om: &mut Module,\n+                       please_inline: bool) -> Option<@ast::ViewPath> {\n         match path.node {\n             ast::ViewPathSimple(_, _, id) => {\n-                if self.resolve_id(id, false, om) { return None }\n+                if self.resolve_id(id, false, om, please_inline) { return None }\n             }\n             ast::ViewPathList(ref p, ref paths, ref b) => {\n                 let mut mine = Vec::new();\n                 for path in paths.iter() {\n-                    if !self.resolve_id(path.node.id, false, om) {\n+                    if !self.resolve_id(path.node.id, false, om, please_inline) {\n                         mine.push(path.clone());\n                     }\n                 }\n@@ -173,14 +183,14 @@ impl<'a> RustdocVisitor<'a> {\n \n             // these are feature gated anyway\n             ast::ViewPathGlob(_, id) => {\n-                if self.resolve_id(id, true, om) { return None }\n+                if self.resolve_id(id, true, om, please_inline) { return None }\n             }\n         }\n         return Some(path);\n     }\n \n     fn resolve_id(&mut self, id: ast::NodeId, glob: bool,\n-                  om: &mut Module) -> bool {\n+                  om: &mut Module, please_inline: bool) -> bool {\n         let tcx = match self.cx.maybe_typed {\n             core::Typed(ref tcx) => tcx,\n             core::NotTyped(_) => return false\n@@ -190,7 +200,9 @@ impl<'a> RustdocVisitor<'a> {\n         let analysis = match self.analysis {\n             Some(analysis) => analysis, None => return false\n         };\n-        if analysis.public_items.contains(&def.node) { return false }\n+        if !please_inline && analysis.public_items.contains(&def.node) {\n+            return false\n+        }\n \n         match tcx.map.get(def.node) {\n             ast_map::NodeItem(it) => {"}]}