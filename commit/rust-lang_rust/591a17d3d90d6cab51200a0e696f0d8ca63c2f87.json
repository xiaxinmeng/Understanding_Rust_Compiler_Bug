{"sha": "591a17d3d90d6cab51200a0e696f0d8ca63c2f87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MWExN2QzZDkwZDZjYWI1MTIwMGEwZTY5NmYwZDhjYTYzYzJmODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-03T11:31:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-03T11:31:15Z"}, "message": "Auto merge of #53831 - TheDarkula:pointer-check, r=oli-obk\n\nAdded pointer checking to sanity checks\n\nr? @oli-obk", "tree": {"sha": "2a8a282671b9a488ece7bcbbc43b1a35cdf34b46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a8a282671b9a488ece7bcbbc43b1a35cdf34b46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/591a17d3d90d6cab51200a0e696f0d8ca63c2f87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/591a17d3d90d6cab51200a0e696f0d8ca63c2f87", "html_url": "https://github.com/rust-lang/rust/commit/591a17d3d90d6cab51200a0e696f0d8ca63c2f87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/591a17d3d90d6cab51200a0e696f0d8ca63c2f87/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3bb23191c7735eb8526db69d620a8c4ad705399", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3bb23191c7735eb8526db69d620a8c4ad705399", "html_url": "https://github.com/rust-lang/rust/commit/f3bb23191c7735eb8526db69d620a8c4ad705399"}, {"sha": "de0cd23e48f2110398d3a3809dcc1c533256522b", "url": "https://api.github.com/repos/rust-lang/rust/commits/de0cd23e48f2110398d3a3809dcc1c533256522b", "html_url": "https://github.com/rust-lang/rust/commit/de0cd23e48f2110398d3a3809dcc1c533256522b"}], "stats": {"total": 413, "additions": 361, "deletions": 52}, "files": [{"sha": "329651f038f8bd8d5d5a85b0ad652f92819ce22a", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/591a17d3d90d6cab51200a0e696f0d8ca63c2f87/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/591a17d3d90d6cab51200a0e696f0d8ca63c2f87/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=591a17d3d90d6cab51200a0e696f0d8ca63c2f87", "patch": "@@ -118,6 +118,24 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 bits\n             },\n             Scalar::Ptr(_) => {\n+                match ty.sty {\n+                    ty::Bool |\n+                    ty::Char |\n+                    ty::Float(_) |\n+                    ty::Int(_) |\n+                    ty::Uint(_) => {\n+                        return validation_failure!(\n+                                \"a pointer\",\n+                                path,\n+                                format!(\"the type {}\", ty.sty)\n+                            );\n+                    }\n+                    ty::RawPtr(_) |\n+                    ty::Ref(_, _, _) |\n+                    ty::FnPtr(_) => {}\n+                    _ => { unreachable!(); }\n+                }\n+\n                 let ptr_size = self.pointer_size();\n                 let ptr_max = u128::max_value() >> (128 - ptr_size.bits());\n                 return if lo > hi {"}, {"sha": "dc84e2a88d64aa85f084337ec138dc75e1d76458", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/591a17d3d90d6cab51200a0e696f0d8ca63c2f87/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/591a17d3d90d6cab51200a0e696f0d8ca63c2f87/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs?ref=591a17d3d90d6cab51200a0e696f0d8ca63c2f87", "patch": "@@ -0,0 +1,110 @@\n+// only-x86_64\n+\n+union Nonsense {\n+    u: usize,\n+    int_32_ref: &'static i32,\n+    uint_8: u8,\n+    uint_16: u16,\n+    uint_32: u32,\n+    uint_64: u64,\n+    uint_128: u128,\n+    int_8: i8,\n+    int_16: i16,\n+    int_32: i32,\n+    int_64: i64,\n+    int_128: i128,\n+    float_32: f32,\n+    float_64: f64,\n+    truthy_falsey: bool,\n+    character: char,\n+    stringy: &'static str,\n+}\n+\n+fn main() {\n+    const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n+    //~^ ERROR this constant likely exhibits undefined behavior\n+\n+    const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n+    //~^ ERROR this constant likely exhibits undefined behavior\n+\n+    const I32_REF_U128_UNION: u128 = unsafe { Nonsense { int_32_ref: &3 }.uint_128 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n+    //~^ ERROR this constant likely exhibits undefined behavior\n+\n+    const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.int_128 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n+    //~^ ERROR this constant likely exhibits undefined behavior\n+\n+    const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n+    //~^ ERROR this constant cannot be used\n+\n+    const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n+    //~^ ERROR this constant cannot be used\n+\n+    const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n+    //~^ ERROR this constant likely exhibits undefined behavior\n+\n+    const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n+    //~^ ERROR this constant likely exhibits undefined behavior\n+\n+    const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n+    //~^ ERROR this constant cannot be used\n+\n+    const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n+    //~^ ERROR this constant likely exhibits undefined behavior\n+\n+    const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n+    //~^ ERROR this constant cannot be used\n+\n+    const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n+    //~^ ERROR this constant cannot be used\n+}"}, {"sha": "751f4113fbf60a9f1fe49f00bc381aeb5deb70e9", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.stderr", "status": "added", "additions": 233, "deletions": 0, "changes": 233, "blob_url": "https://github.com/rust-lang/rust/blob/591a17d3d90d6cab51200a0e696f0d8ca63c2f87/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/591a17d3d90d6cab51200a0e696f0d8ca63c2f87/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr?ref=591a17d3d90d6cab51200a0e696f0d8ca63c2f87", "patch": "@@ -0,0 +1,233 @@\n+error[E0080]: this constant likely exhibits undefined behavior\n+  --> $DIR/const-pointer-values-in-various-types.rs:24:5\n+   |\n+LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type usize\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:27:5\n+   |\n+LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |                                           |\n+   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:30:5\n+   |\n+LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   |                                             |\n+   |                                             a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:33:5\n+   |\n+LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   |                                             |\n+   |                                             a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error[E0080]: this constant likely exhibits undefined behavior\n+  --> $DIR/const-pointer-values-in-various-types.rs:36:5\n+   |\n+LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type u64\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:39:5\n+   |\n+LL |     const I32_REF_U128_UNION: u128 = unsafe { Nonsense { int_32_ref: &3 }.uint_128 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempted to read undefined bytes\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:42:5\n+   |\n+LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^^^\n+   |                                           |\n+   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:45:5\n+   |\n+LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |                                             |\n+   |                                             a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:48:5\n+   |\n+LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |                                             |\n+   |                                             a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error[E0080]: this constant likely exhibits undefined behavior\n+  --> $DIR/const-pointer-values-in-various-types.rs:51:5\n+   |\n+LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type i64\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:54:5\n+   |\n+LL |     const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.int_128 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempted to read undefined bytes\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:57:5\n+   |\n+LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                                             |\n+   |                                             a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error[E0080]: this constant likely exhibits undefined behavior\n+  --> $DIR/const-pointer-values-in-various-types.rs:60:5\n+   |\n+LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type f64\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:63:5\n+   |\n+LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------------^^^\n+   |                                               |\n+   |                                               a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:66:5\n+   |\n+LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   |                                               |\n+   |                                               a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:69:5\n+   |\n+LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------^^^\n+   |                                       |\n+   |                                       a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:72:5\n+   |\n+LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^^^\n+   |                                         |\n+   |                                         a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:75:5\n+   |\n+LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^^^\n+   |                                         |\n+   |                                         a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error[E0080]: this constant likely exhibits undefined behavior\n+  --> $DIR/const-pointer-values-in-various-types.rs:78:5\n+   |\n+LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type u64\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:81:5\n+   |\n+LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |                                           |\n+   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:84:5\n+   |\n+LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------^^^\n+   |                                       |\n+   |                                       a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:87:5\n+   |\n+LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------^^^\n+   |                                         |\n+   |                                         a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:90:5\n+   |\n+LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------^^^\n+   |                                         |\n+   |                                         a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error[E0080]: this constant likely exhibits undefined behavior\n+  --> $DIR/const-pointer-values-in-various-types.rs:93:5\n+   |\n+LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type i64\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:96:5\n+   |\n+LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^^^\n+   |                                           |\n+   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:99:5\n+   |\n+LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |                                         |\n+   |                                         a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error[E0080]: this constant likely exhibits undefined behavior\n+  --> $DIR/const-pointer-values-in-various-types.rs:102:5\n+   |\n+LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type f64\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:105:5\n+   |\n+LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------------^^^\n+   |                                           |\n+   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error: this constant cannot be used\n+  --> $DIR/const-pointer-values-in-various-types.rs:108:5\n+   |\n+LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   |                                           |\n+   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+\n+error: aborting due to 29 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "1758ac72b633b73c720b3c10f0fbfa7f7f8614c0", "filename": "src/test/ui/consts/const-eval/ref_to_float_transmute.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb23191c7735eb8526db69d620a8c4ad705399/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_float_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb23191c7735eb8526db69d620a8c4ad705399/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_float_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_float_transmute.rs?ref=f3bb23191c7735eb8526db69d620a8c4ad705399", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//compile-pass\n-\n-#![feature(const_fn_union)]\n-\n-fn main() {}\n-\n-static FOO: u32 = 42;\n-\n-union Foo {\n-    f: Float,\n-    r: &'static u32,\n-}\n-\n-#[cfg(target_pointer_width=\"64\")]\n-type Float = f64;\n-\n-#[cfg(target_pointer_width=\"32\")]\n-type Float = f32;\n-\n-static BAR: Float = unsafe { Foo { r: &FOO }.f };"}, {"sha": "b405f766f913219875e6ccba5fc6ca8c467aefda", "filename": "src/test/ui/consts/const-eval/ub-ptr-in-usize.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb23191c7735eb8526db69d620a8c4ad705399/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ptr-in-usize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb23191c7735eb8526db69d620a8c4ad705399/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ptr-in-usize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ptr-in-usize.rs?ref=f3bb23191c7735eb8526db69d620a8c4ad705399", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-pass\n-\n-union Foo {\n-    a: &'static u8,\n-    b: usize,\n-}\n-\n-// a usize's value may be a pointer, that's fine\n-const PTR_AS_USIZE: usize = unsafe { Foo { a: &1 }.b};\n-\n-fn main() {\n-}"}]}