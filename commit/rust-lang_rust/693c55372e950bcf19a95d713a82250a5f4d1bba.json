{"sha": "693c55372e950bcf19a95d713a82250a5f4d1bba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5M2M1NTM3MmU5NTBiY2YxOWE5NWQ3MTNhODIyNTBhNWY0ZDFiYmE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-03T14:21:44Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:17:36Z"}, "message": "Move ref to packed struct field check into projection arm", "tree": {"sha": "fe56b65b161759efa944f180b10a7788b243099a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe56b65b161759efa944f180b10a7788b243099a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/693c55372e950bcf19a95d713a82250a5f4d1bba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/693c55372e950bcf19a95d713a82250a5f4d1bba", "html_url": "https://github.com/rust-lang/rust/commit/693c55372e950bcf19a95d713a82250a5f4d1bba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/693c55372e950bcf19a95d713a82250a5f4d1bba/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec6573f33b15275551af321df1a19cfd3d835982", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec6573f33b15275551af321df1a19cfd3d835982", "html_url": "https://github.com/rust-lang/rust/commit/ec6573f33b15275551af321df1a19cfd3d835982"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "1e90f5a9584b22c9c2f51289d299a5daab96921d", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/693c55372e950bcf19a95d713a82250a5f4d1bba/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693c55372e950bcf19a95d713a82250a5f4d1bba/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=693c55372e950bcf19a95d713a82250a5f4d1bba", "patch": "@@ -166,28 +166,28 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     place: &Place<'tcx>,\n                     context: PlaceContext<'tcx>,\n                     location: Location) {\n-        if context.is_borrow() {\n-            if util::is_disaligned(self.tcx, self.mir, self.param_env, place) {\n-                let source_info = self.source_info;\n-                let lint_root =\n-                    self.source_scope_local_data[source_info.scope].lint_root;\n-                self.register_violations(&[UnsafetyViolation {\n-                    source_info,\n-                    description: Symbol::intern(\"borrow of packed field\").as_interned_str(),\n-                    details:\n-                        Symbol::intern(\"fields of packed structs might be misaligned: \\\n-                                        dereferencing a misaligned pointer or even just creating a \\\n-                                        misaligned reference is undefined behavior\")\n-                            .as_interned_str(),\n-                    kind: UnsafetyViolationKind::BorrowPacked(lint_root)\n-                }], &[]);\n-            }\n-        }\n-\n         match place {\n             &Place::Projection(box Projection {\n                 ref base, ref elem\n             }) => {\n+                if context.is_borrow() {\n+                    if util::is_disaligned(self.tcx, self.mir, self.param_env, place) {\n+                        let source_info = self.source_info;\n+                        let lint_root =\n+                            self.source_scope_local_data[source_info.scope].lint_root;\n+                        self.register_violations(&[UnsafetyViolation {\n+                            source_info,\n+                            description: Symbol::intern(\"borrow of packed field\").as_interned_str(),\n+                            details:\n+                                Symbol::intern(\"fields of packed structs might be misaligned: \\\n+                                                dereferencing a misaligned pointer or even just \\\n+                                                creating a misaligned reference is undefined \\\n+                                                behavior\")\n+                                    .as_interned_str(),\n+                            kind: UnsafetyViolationKind::BorrowPacked(lint_root)\n+                        }], &[]);\n+                    }\n+                }\n                 let old_source_info = self.source_info;\n                 if let &Place::Local(local) = base {\n                     if self.mir.local_decls[local].internal {"}]}