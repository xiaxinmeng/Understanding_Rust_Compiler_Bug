{"sha": "5e3891c2559de5a6540d69bc14ded281484479f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMzg5MWMyNTU5ZGU1YTY1NDBkNjliYzE0ZGVkMjgxNDg0NDc5Zjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-09T15:41:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-09T15:42:07Z"}, "message": ".", "tree": {"sha": "d0f1fb876c99dea1bbd709a9dda006a7941f1eee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0f1fb876c99dea1bbd709a9dda006a7941f1eee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e3891c2559de5a6540d69bc14ded281484479f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e3891c2559de5a6540d69bc14ded281484479f9", "html_url": "https://github.com/rust-lang/rust/commit/5e3891c2559de5a6540d69bc14ded281484479f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e3891c2559de5a6540d69bc14ded281484479f9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42be522c80cf0cc2d49b60f3c1d66afdc51fcbbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/42be522c80cf0cc2d49b60f3c1d66afdc51fcbbb", "html_url": "https://github.com/rust-lang/rust/commit/42be522c80cf0cc2d49b60f3c1d66afdc51fcbbb"}], "stats": {"total": 60, "additions": 52, "deletions": 8}, "files": [{"sha": "a2cc1e09978e1c82da483b9aef75a34322c34f93", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e3891c2559de5a6540d69bc14ded281484479f9/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3891c2559de5a6540d69bc14ded281484479f9/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=5e3891c2559de5a6540d69bc14ded281484479f9", "patch": "@@ -18,7 +18,7 @@ pub use crate::{\n     },\n };\n pub use salsa;\n-pub use vfs::{file_set::FileSet, FileId, VfsPath};\n+pub use vfs::{file_set::FileSet, AnchoredPath, AnchoredPathBuf, FileId, VfsPath};\n \n #[macro_export]\n macro_rules! impl_intern_key {\n@@ -156,10 +156,11 @@ impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n         SourceDatabaseExt::file_text(self.0, file_id)\n     }\n     fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n+        let path = AnchoredPath { anchor, path };\n         // FIXME: this *somehow* should be platform agnostic...\n-        let source_root = self.0.file_source_root(anchor);\n+        let source_root = self.0.file_source_root(path.anchor);\n         let source_root = self.0.source_root(source_root);\n-        source_root.file_set.resolve_path(anchor, path)\n+        source_root.file_set.resolve_path(path)\n     }\n \n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {"}, {"sha": "02720a32e353102d6fd3b961c36bc1693c2fb313", "filename": "crates/vfs/src/anchored_path.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5e3891c2559de5a6540d69bc14ded281484479f9/crates%2Fvfs%2Fsrc%2Fanchored_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3891c2559de5a6540d69bc14ded281484479f9/crates%2Fvfs%2Fsrc%2Fanchored_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fanchored_path.rs?ref=5e3891c2559de5a6540d69bc14ded281484479f9", "patch": "@@ -0,0 +1,39 @@\n+//! Analysis-level representation of file-system paths.\n+//!\n+//! The primary goal of this is to losslessly represent paths like\n+//!\n+//! ```\n+//! #[path = \"./bar.rs\"]\n+//! mod foo;\n+//! ```\n+//!\n+//! The first approach one might reach for is to use `PathBuf`. The problem here\n+//! is that `PathBuf` depends on host target (windows or linux), but\n+//! rust-analyzer should be capable to process `#[path = r\"C:\\bar.rs\"]` on Unix.\n+//!\n+//! The second try is to use a `String`. This also fails, however. Consider a\n+//! hypothetical scenario, where rust-analyzer operates in a\n+//! networked/distributed mode. There's one global instance of rust-analyzer,\n+//! which processes requests from different machines. Now, the semantics of\n+//! `#[path = \"/abs/path.rs\"]` actually depends on which file-system we are at!\n+//! That is, even absolute paths exist relative to a file system!\n+//!\n+//! A more realistic scenario here is virtual VFS paths we use for testing. More\n+//! generally, there can be separate \"universes\" of VFS paths.\n+//!\n+//! That's why we use anchored representation -- each path carries an info about\n+//! a file this path originates from. We can fetch fs/\"universe\" information\n+//! from the anchor than.\n+use crate::FileId;\n+\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub struct AnchoredPathBuf {\n+    pub anchor: FileId,\n+    pub path: String,\n+}\n+\n+#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n+pub struct AnchoredPath<'a> {\n+    pub anchor: FileId,\n+    pub path: &'a str,\n+}"}, {"sha": "49ca593ac88bda06e8e871ef7f7accf0a57deedb", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e3891c2559de5a6540d69bc14ded281484479f9/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3891c2559de5a6540d69bc14ded281484479f9/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=5e3891c2559de5a6540d69bc14ded281484479f9", "patch": "@@ -7,7 +7,7 @@ use std::fmt;\n use fst::{IntoStreamer, Streamer};\n use rustc_hash::FxHashMap;\n \n-use crate::{FileId, Vfs, VfsPath};\n+use crate::{AnchoredPath, FileId, Vfs, VfsPath};\n \n #[derive(Default, Clone, Eq, PartialEq)]\n pub struct FileSet {\n@@ -19,10 +19,10 @@ impl FileSet {\n     pub fn len(&self) -> usize {\n         self.files.len()\n     }\n-    pub fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n-        let mut base = self.paths[&anchor].clone();\n+    pub fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {\n+        let mut base = self.paths[&path.anchor].clone();\n         base.pop();\n-        let path = base.join(path)?;\n+        let path = base.join(path.path)?;\n         self.files.get(&path).copied()\n     }\n "}, {"sha": "a3be579a71a681274d43ef5676ac5adc278c1734", "filename": "crates/vfs/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e3891c2559de5a6540d69bc14ded281484479f9/crates%2Fvfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3891c2559de5a6540d69bc14ded281484479f9/crates%2Fvfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Flib.rs?ref=5e3891c2559de5a6540d69bc14ded281484479f9", "patch": "@@ -36,14 +36,18 @@\n //! have a single `FileSet` which unions the two sources.\n mod vfs_path;\n mod path_interner;\n+mod anchored_path;\n pub mod file_set;\n pub mod loader;\n \n use std::{fmt, mem};\n \n use crate::path_interner::PathInterner;\n \n-pub use crate::vfs_path::VfsPath;\n+pub use crate::{\n+    anchored_path::{AnchoredPath, AnchoredPathBuf},\n+    vfs_path::VfsPath,\n+};\n pub use paths::{AbsPath, AbsPathBuf};\n \n #[derive(Copy, Clone, Debug, Ord, PartialOrd, Eq, PartialEq, Hash)]"}]}