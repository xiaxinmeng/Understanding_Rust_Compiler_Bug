{"sha": "b1963154a10fd22d16a5eddd751046cc897e909c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOTYzMTU0YTEwZmQyMmQxNmE1ZWRkZDc1MTA0NmNjODk3ZTkwOWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-07T13:30:19Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-12T21:57:57Z"}, "message": "Add two new kinds of predicates, WellFormed and ObjectSafe.", "tree": {"sha": "04b10a6fbc7ca80c3202bb49d1cc178a7e8d4021", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04b10a6fbc7ca80c3202bb49d1cc178a7e8d4021"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1963154a10fd22d16a5eddd751046cc897e909c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1963154a10fd22d16a5eddd751046cc897e909c", "html_url": "https://github.com/rust-lang/rust/commit/b1963154a10fd22d16a5eddd751046cc897e909c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1963154a10fd22d16a5eddd751046cc897e909c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "928955296e28cea5045fb726d6e3fb47780f8c48", "url": "https://api.github.com/repos/rust-lang/rust/commits/928955296e28cea5045fb726d6e3fb47780f8c48", "html_url": "https://github.com/rust-lang/rust/commit/928955296e28cea5045fb726d6e3fb47780f8c48"}], "stats": {"total": 161, "additions": 149, "deletions": 12}, "files": [{"sha": "a8b22846b786dc3730dfab07613e34aa019d820f", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=b1963154a10fd22d16a5eddd751046cc897e909c", "patch": "@@ -790,6 +790,12 @@ fn parse_predicate_<'a,'tcx, F>(st: &mut PState<'a, 'tcx>,\n         'o' => ty::Binder(ty::OutlivesPredicate(parse_ty_(st, conv),\n                                                 parse_region_(st, conv))).to_predicate(),\n         'p' => ty::Binder(parse_projection_predicate_(st, conv)).to_predicate(),\n+        'w' => ty::Predicate::WellFormed(parse_ty_(st, conv)),\n+        'O' => {\n+            let def_id = parse_def_(st, NominalType, conv);\n+            assert_eq!(next(st), '|');\n+            ty::Predicate::ObjectSafe(def_id)\n+        }\n         c => panic!(\"Encountered invalid character in metadata: {}\", c)\n     }\n }"}, {"sha": "7170a3681713a28d22d7e18a1798ef56f7602be8", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=b1963154a10fd22d16a5eddd751046cc897e909c", "patch": "@@ -457,6 +457,13 @@ pub fn enc_predicate<'a, 'tcx>(w: &mut Encoder,\n             mywrite!(w, \"p\");\n             enc_projection_predicate(w, cx, data)\n         }\n+        ty::Predicate::WellFormed(data) => {\n+            mywrite!(w, \"w\");\n+            enc_ty(w, cx, data);\n+        }\n+        ty::Predicate::ObjectSafe(trait_def_id) => {\n+            mywrite!(w, \"O{}|\", (cx.ds)(trait_def_id));\n+        }\n     }\n }\n "}, {"sha": "5af37e9530ccea22ba6475fcdc81da8a5f6155bd", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=b1963154a10fd22d16a5eddd751046cc897e909c", "patch": "@@ -57,6 +57,8 @@ impl FreeRegionMap {\n                 ty::Predicate::Projection(..) |\n                 ty::Predicate::Trait(..) |\n                 ty::Predicate::Equate(..) |\n+                ty::Predicate::WellFormed(..) |\n+                ty::Predicate::ObjectSafe(..) |\n                 ty::Predicate::TypeOutlives(..) => {\n                     // No region bounds here\n                 }"}, {"sha": "1961c15d6e607b6d4339815c649184761d31c0a5", "filename": "src/librustc/middle/implicator.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fimplicator.rs?ref=b1963154a10fd22d16a5eddd751046cc897e909c", "patch": "@@ -13,7 +13,7 @@\n use middle::infer::{InferCtxt, GenericKind};\n use middle::subst::Substs;\n use middle::traits;\n-use middle::ty::{self, RegionEscape, ToPolyTraitRef, ToPredicate, Ty};\n+use middle::ty::{self, RegionEscape, ToPredicate, Ty};\n use middle::ty_fold::{TypeFoldable, TypeFolder};\n \n use syntax::ast;\n@@ -299,6 +299,9 @@ impl<'a, 'tcx> Implicator<'a, 'tcx> {\n                         }\n                     }\n                 }\n+                ty::Predicate::ObjectSafe(_) |\n+                ty::Predicate::WellFormed(_) => {\n+                }\n             }\n         }\n "}, {"sha": "96637b92cef414d65cf5be4d9612bdbccf0f7cf8", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=b1963154a10fd22d16a5eddd751046cc897e909c", "patch": "@@ -10,6 +10,7 @@\n \n use middle::infer::InferCtxt;\n use middle::ty::{self, RegionEscape, Ty, HasTypeFlags};\n+use middle::wf;\n \n use std::collections::HashSet;\n use std::fmt;\n@@ -20,8 +21,10 @@ use util::nodemap::NodeMap;\n use super::CodeAmbiguity;\n use super::CodeProjectionError;\n use super::CodeSelectionError;\n+use super::is_object_safe;\n use super::FulfillmentError;\n use super::ObligationCause;\n+use super::ObligationCauseCode;\n use super::PredicateObligation;\n use super::project;\n use super::select::SelectionContext;\n@@ -472,6 +475,32 @@ fn process_predicate<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n                 }\n             }\n         }\n+\n+        ty::Predicate::ObjectSafe(trait_def_id) => {\n+            if !is_object_safe(selcx.tcx(), trait_def_id) {\n+                errors.push(FulfillmentError::new(\n+                    obligation.clone(),\n+                    CodeSelectionError(Unimplemented)));\n+            }\n+            true\n+        }\n+\n+        ty::Predicate::WellFormed(ty) => {\n+            let rfc1214 = match obligation.cause.code {\n+                ObligationCauseCode::RFC1214(_) => true,\n+                _ => false,\n+            };\n+            match wf::obligations(selcx.infcx(), obligation.cause.body_id,\n+                                  ty, obligation.cause.span, rfc1214) {\n+                Some(obligations) => {\n+                    new_obligations.extend(obligations);\n+                    true\n+                }\n+                None => {\n+                    false\n+                }\n+            }\n+        }\n     }\n }\n \n@@ -492,11 +521,12 @@ fn register_region_obligation<'tcx>(t_a: Ty<'tcx>,\n                                                sub_region: r_b,\n                                                cause: cause };\n \n-    debug!(\"register_region_obligation({:?})\",\n-           region_obligation);\n+    debug!(\"register_region_obligation({:?}, cause={:?})\",\n+           region_obligation, region_obligation.cause);\n \n-    region_obligations.entry(region_obligation.cause.body_id).or_insert(vec![])\n-        .push(region_obligation);\n+    region_obligations.entry(region_obligation.cause.body_id)\n+                      .or_insert(vec![])\n+                      .push(region_obligation);\n \n }\n "}, {"sha": "9d300c0973167dc3c2a2c5237c2635424de49ed6", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=b1963154a10fd22d16a5eddd751046cc897e909c", "patch": "@@ -40,7 +40,7 @@ pub enum ObjectSafetyViolation<'tcx> {\n }\n \n /// Reasons a method might not be object-safe.\n-#[derive(Copy,Clone,Debug)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum MethodViolationCode {\n     /// e.g., `fn foo()`\n     StaticMethod,\n@@ -140,6 +140,8 @@ fn supertraits_reference_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                                  .any(is_self)\n                 }\n                 ty::Predicate::Projection(..) |\n+                ty::Predicate::WellFormed(..) |\n+                ty::Predicate::ObjectSafe(..) |\n                 ty::Predicate::TypeOutlives(..) |\n                 ty::Predicate::RegionOutlives(..) |\n                 ty::Predicate::Equate(..) => {\n@@ -181,6 +183,8 @@ fn generics_require_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n                 ty::Predicate::Trait(..) |\n                 ty::Predicate::Equate(..) |\n                 ty::Predicate::RegionOutlives(..) |\n+                ty::Predicate::WellFormed(..) |\n+                ty::Predicate::ObjectSafe(..) |\n                 ty::Predicate::TypeOutlives(..) => {\n                     false\n                 }"}, {"sha": "6c568b656c047b7b9409f555b2c2e55d63cb7aae", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=b1963154a10fd22d16a5eddd751046cc897e909c", "patch": "@@ -44,6 +44,7 @@ use middle::infer::{InferCtxt, TypeFreshener};\n use middle::ty_fold::TypeFoldable;\n use middle::ty_match;\n use middle::ty_relate::TypeRelation;\n+use middle::wf;\n \n use std::cell::RefCell;\n use std::fmt;\n@@ -465,12 +466,31 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n+            ty::Predicate::WellFormed(ty) => {\n+                match wf::obligations(self.infcx, obligation.cause.body_id,\n+                                      ty, obligation.cause.span,\n+                                      obligation.cause.code.is_rfc1214()) {\n+                    Some(obligations) =>\n+                        self.evaluate_predicates_recursively(previous_stack, obligations.iter()),\n+                    None =>\n+                        EvaluatedToAmbig,\n+                }\n+            }\n+\n             ty::Predicate::TypeOutlives(..) | ty::Predicate::RegionOutlives(..) => {\n                 // we do not consider region relationships when\n                 // evaluating trait matches\n                 EvaluatedToOk\n             }\n \n+            ty::Predicate::ObjectSafe(trait_def_id) => {\n+                if object_safety::is_object_safe(self.tcx(), trait_def_id) {\n+                    EvaluatedToOk\n+                } else {\n+                    EvaluatedToErr(Unimplemented)\n+                }\n+            }\n+\n             ty::Predicate::Projection(ref data) => {\n                 self.infcx.probe(|_| {\n                     let project_obligation = obligation.with(data.clone());"}, {"sha": "6df13a3bdaf554c8bd106cdd689d8f4204068970", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=b1963154a10fd22d16a5eddd751046cc897e909c", "patch": "@@ -10,7 +10,7 @@\n \n use middle::subst::Substs;\n use middle::infer::InferCtxt;\n-use middle::ty::{self, Ty, ToPredicate, ToPolyTraitRef};\n+use middle::ty::{self, HasTypeFlags, Ty, ToPredicate, ToPolyTraitRef};\n use std::fmt;\n use syntax::ast;\n use syntax::codemap::Span;\n@@ -56,6 +56,12 @@ impl<'a,'tcx> PredicateSet<'a,'tcx> {\n \n             ty::Predicate::Projection(ref data) =>\n                 ty::Predicate::Projection(self.tcx.anonymize_late_bound_regions(data)),\n+\n+            ty::Predicate::WellFormed(data) =>\n+                ty::Predicate::WellFormed(data),\n+\n+            ty::Predicate::ObjectSafe(data) =>\n+                ty::Predicate::ObjectSafe(data),\n         };\n         self.set.insert(normalized_pred)\n     }\n@@ -136,6 +142,14 @@ impl<'cx, 'tcx> Elaborator<'cx, 'tcx> {\n \n                 self.stack.extend(predicates);\n             }\n+            ty::Predicate::WellFormed(..) => {\n+                // Currently, we do not elaborate WF predicates,\n+                // although we easily could.\n+            }\n+            ty::Predicate::ObjectSafe(..) => {\n+                // Currently, we do not elaborate object-safe\n+                // predicates.\n+            }\n             ty::Predicate::Equate(..) => {\n                 // Currently, we do not \"elaborate\" predicates like\n                 // `X == Y`, though conceivably we might. For example,\n@@ -562,3 +576,9 @@ impl<'tcx> fmt::Debug for super::MismatchedProjectionTypes<'tcx> {\n         write!(f, \"MismatchedProjectionTypes({:?})\", self.err)\n     }\n }\n+\n+impl<'tcx, T: HasTypeFlags> HasTypeFlags for Obligation<'tcx, T> {\n+    fn has_type_flags(&self, flags: ty::TypeFlags) -> bool {\n+        self.predicate.has_type_flags(flags)\n+    }\n+}"}, {"sha": "393bb83067cc806cb65183e39a1f45c6e625f010", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b1963154a10fd22d16a5eddd751046cc897e909c", "patch": "@@ -2417,6 +2417,12 @@ pub enum Predicate<'tcx> {\n     /// where <T as TraitRef>::Name == X, approximately.\n     /// See `ProjectionPredicate` struct for details.\n     Projection(PolyProjectionPredicate<'tcx>),\n+\n+    /// no syntax: T WF\n+    WellFormed(Ty<'tcx>),\n+\n+    /// trait must be object-safe\n+    ObjectSafe(ast::DefId),\n }\n \n impl<'tcx> Predicate<'tcx> {\n@@ -2502,6 +2508,10 @@ impl<'tcx> Predicate<'tcx> {\n                 Predicate::TypeOutlives(ty::Binder(data.subst(tcx, substs))),\n             Predicate::Projection(ty::Binder(ref data)) =>\n                 Predicate::Projection(ty::Binder(data.subst(tcx, substs))),\n+            Predicate::WellFormed(data) =>\n+                Predicate::WellFormed(data.subst(tcx, substs)),\n+            Predicate::ObjectSafe(trait_def_id) =>\n+                Predicate::ObjectSafe(trait_def_id),\n         }\n     }\n }\n@@ -2689,6 +2699,12 @@ impl<'tcx> Predicate<'tcx> {\n                             .chain(Some(data.0.ty))\n                             .collect()\n             }\n+            ty::Predicate::WellFormed(data) => {\n+                vec![data]\n+            }\n+            ty::Predicate::ObjectSafe(_trait_def_id) => {\n+                vec![]\n+            }\n         };\n \n         // The only reason to collect into a vector here is that I was\n@@ -2706,6 +2722,8 @@ impl<'tcx> Predicate<'tcx> {\n             Predicate::RegionOutlives(ref p) => p.has_escaping_regions(),\n             Predicate::TypeOutlives(ref p) => p.has_escaping_regions(),\n             Predicate::Projection(ref p) => p.has_escaping_regions(),\n+            Predicate::WellFormed(p) => p.has_escaping_regions(),\n+            Predicate::ObjectSafe(_trait_def_id) => false,\n         }\n     }\n \n@@ -2717,6 +2735,8 @@ impl<'tcx> Predicate<'tcx> {\n             Predicate::Projection(..) |\n             Predicate::Equate(..) |\n             Predicate::RegionOutlives(..) |\n+            Predicate::WellFormed(..) |\n+            Predicate::ObjectSafe(..) |\n             Predicate::TypeOutlives(..) => {\n                 None\n             }\n@@ -6211,6 +6231,8 @@ impl<'tcx> ctxt<'tcx> {\n                     ty::Predicate::Projection(..) |\n                     ty::Predicate::Trait(..) |\n                     ty::Predicate::Equate(..) |\n+                    ty::Predicate::WellFormed(..) |\n+                    ty::Predicate::ObjectSafe(..) |\n                     ty::Predicate::RegionOutlives(..) => {\n                         None\n                     }\n@@ -6712,6 +6734,8 @@ impl<'tcx> ctxt<'tcx> {\n                     ty::Predicate::Equate(..) |\n                     ty::Predicate::RegionOutlives(..) |\n                     ty::Predicate::TypeOutlives(..) |\n+                    ty::Predicate::WellFormed(..) |\n+                    ty::Predicate::ObjectSafe(..) |\n                     ty::Predicate::Projection(..) => {\n                         // For now, assume all these where-clauses\n                         // may give drop implementation capabilty\n@@ -6956,6 +6980,8 @@ impl<'tcx> fmt::Debug for ty::Predicate<'tcx> {\n             Predicate::RegionOutlives(ref pair) => write!(f, \"{:?}\", pair),\n             Predicate::TypeOutlives(ref pair) => write!(f, \"{:?}\", pair),\n             Predicate::Projection(ref pair) => write!(f, \"{:?}\", pair),\n+            Predicate::WellFormed(ty) => write!(f, \"WF({:?})\", ty),\n+            Predicate::ObjectSafe(trait_def_id) => write!(f, \"ObjectSafe({:?})\", trait_def_id),\n         }\n     }\n }\n@@ -7080,6 +7106,8 @@ impl<'tcx> RegionEscape for Predicate<'tcx> {\n             Predicate::RegionOutlives(ref data) => data.has_regions_escaping_depth(depth),\n             Predicate::TypeOutlives(ref data) => data.has_regions_escaping_depth(depth),\n             Predicate::Projection(ref data) => data.has_regions_escaping_depth(depth),\n+            Predicate::WellFormed(ty) => ty.has_regions_escaping_depth(depth),\n+            Predicate::ObjectSafe(_trait_def_id) => false,\n         }\n     }\n }\n@@ -7238,6 +7266,8 @@ impl<'tcx> HasTypeFlags for Predicate<'tcx> {\n             Predicate::RegionOutlives(ref data) => data.has_type_flags(flags),\n             Predicate::TypeOutlives(ref data) => data.has_type_flags(flags),\n             Predicate::Projection(ref data) => data.has_type_flags(flags),\n+            Predicate::WellFormed(data) => data.has_type_flags(flags),\n+            Predicate::ObjectSafe(_trait_def_id) => false,\n         }\n     }\n }"}, {"sha": "809ee8928afd76d0edb69ebc42239871137f6ab8", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=b1963154a10fd22d16a5eddd751046cc897e909c", "patch": "@@ -394,6 +394,10 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n                 ty::Predicate::TypeOutlives(binder.fold_with(folder)),\n             ty::Predicate::Projection(ref binder) =>\n                 ty::Predicate::Projection(binder.fold_with(folder)),\n+            ty::Predicate::WellFormed(data) =>\n+                ty::Predicate::WellFormed(data.fold_with(folder)),\n+            ty::Predicate::ObjectSafe(trait_def_id) =>\n+                ty::Predicate::ObjectSafe(trait_def_id),\n         }\n     }\n }"}, {"sha": "3e9a64a8eb61e05163ac2d79e4743a99ca05910d", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=b1963154a10fd22d16a5eddd751046cc897e909c", "patch": "@@ -831,6 +831,11 @@ impl<'tcx> fmt::Display for ty::Predicate<'tcx> {\n             ty::Predicate::RegionOutlives(ref predicate) => write!(f, \"{}\", predicate),\n             ty::Predicate::TypeOutlives(ref predicate) => write!(f, \"{}\", predicate),\n             ty::Predicate::Projection(ref predicate) => write!(f, \"{}\", predicate),\n+            ty::Predicate::WellFormed(ty) => write!(f, \"{} well-formed\", ty),\n+            ty::Predicate::ObjectSafe(trait_def_id) =>\n+                ty::tls::with(|tcx| {\n+                    write!(f, \"the trait `{}` is object-safe\", tcx.item_path_str(trait_def_id))\n+                }),\n         }\n     }\n }"}, {"sha": "9098b241e5b1d34e08e9cd0fee07637aab5945f5", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=b1963154a10fd22d16a5eddd751046cc897e909c", "patch": "@@ -177,6 +177,8 @@ fn deduce_expectations_from_obligations<'a,'tcx>(\n                 ty::Predicate::Equate(..) => None,\n                 ty::Predicate::RegionOutlives(..) => None,\n                 ty::Predicate::TypeOutlives(..) => None,\n+                ty::Predicate::WellFormed(..) => None,\n+                ty::Predicate::ObjectSafe(..) => None,\n             };\n             opt_trait_ref\n                 .and_then(|trait_ref| self_type_matches_expected_vid(fcx, trait_ref, expected_vid))"}, {"sha": "30a9d65661a36abd2547e94225a4e25b87c827a3", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=b1963154a10fd22d16a5eddd751046cc897e909c", "patch": "@@ -254,9 +254,9 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n /// This function is meant to by applied to the type for every\n /// expression in the program.\n pub fn check_safety_of_destructor_if_necessary<'a, 'tcx>(rcx: &mut Rcx<'a, 'tcx>,\n-                                                     typ: ty::Ty<'tcx>,\n-                                                     span: Span,\n-                                                     scope: region::CodeExtent) {\n+                                                         typ: ty::Ty<'tcx>,\n+                                                         span: Span,\n+                                                         scope: region::CodeExtent) {\n     debug!(\"check_safety_of_destructor_if_necessary typ: {:?} scope: {:?}\",\n            typ, scope);\n "}, {"sha": "3c315e335c6376b2686860f1ea5b116e18695521", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b1963154a10fd22d16a5eddd751046cc897e909c", "patch": "@@ -490,6 +490,8 @@ impl<'tcx> GetTypeParameterBounds<'tcx> for ty::GenericPredicates<'tcx> {\n                     }\n                     ty::Predicate::Equate(..) |\n                     ty::Predicate::RegionOutlives(..) |\n+                    ty::Predicate::WellFormed(..) |\n+                    ty::Predicate::ObjectSafe(..) |\n                     ty::Predicate::Projection(..) => {\n                         false\n                     }"}, {"sha": "04b1f8ee1b1d39f94c0031e425236db6450ce336", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b1963154a10fd22d16a5eddd751046cc897e909c", "patch": "@@ -818,7 +818,9 @@ impl<'a> Clean<WherePredicate> for ty::Predicate<'a> {\n             Predicate::Equate(ref pred) => pred.clean(cx),\n             Predicate::RegionOutlives(ref pred) => pred.clean(cx),\n             Predicate::TypeOutlives(ref pred) => pred.clean(cx),\n-            Predicate::Projection(ref pred) => pred.clean(cx)\n+            Predicate::Projection(ref pred) => pred.clean(cx),\n+            Predicate::WellFormed(_) => panic!(\"not user writable\"),\n+            Predicate::ObjectSafe(_) => panic!(\"not user writable\"),\n         }\n     }\n }"}, {"sha": "08c6dcc7f872a7c626da92b0d1ff1e642153d991", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1963154a10fd22d16a5eddd751046cc897e909c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b1963154a10fd22d16a5eddd751046cc897e909c", "patch": "@@ -475,7 +475,7 @@ pub enum WherePredicate {\n     /// A lifetime predicate, e.g. `'a: 'b+'c`\n     RegionPredicate(WhereRegionPredicate),\n     /// An equality predicate (unsupported)\n-    EqPredicate(WhereEqPredicate)\n+    EqPredicate(WhereEqPredicate),\n }\n \n /// A type bound, eg `for<'c> Foo: Send+Clone+'c`"}]}