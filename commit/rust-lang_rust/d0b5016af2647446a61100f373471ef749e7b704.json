{"sha": "d0b5016af2647446a61100f373471ef749e7b704", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYjUwMTZhZjI2NDc0NDZhNjExMDBmMzczNDcxZWY3NDllN2I3MDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-19T00:40:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-19T00:40:33Z"}, "message": "auto merge of #5001 : jld/rust/test-pub-fn-main, r=catamorphism", "tree": {"sha": "2b5d8946cbef88e2b57ac699fc98a91be41c41ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b5d8946cbef88e2b57ac699fc98a91be41c41ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0b5016af2647446a61100f373471ef749e7b704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0b5016af2647446a61100f373471ef749e7b704", "html_url": "https://github.com/rust-lang/rust/commit/d0b5016af2647446a61100f373471ef749e7b704", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0b5016af2647446a61100f373471ef749e7b704/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec161edc16b0b3b3bdbd425e0bb085fc7fae15d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec161edc16b0b3b3bdbd425e0bb085fc7fae15d4", "html_url": "https://github.com/rust-lang/rust/commit/ec161edc16b0b3b3bdbd425e0bb085fc7fae15d4"}, {"sha": "9939d88e8d76b16a3ca9f6cb567bf363af04ef66", "url": "https://api.github.com/repos/rust-lang/rust/commits/9939d88e8d76b16a3ca9f6cb567bf363af04ef66", "html_url": "https://github.com/rust-lang/rust/commit/9939d88e8d76b16a3ca9f6cb567bf363af04ef66"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "09cf008fd099a6f443e818896bb92bd1ae93ec14", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -127,7 +127,7 @@ priv impl<T> cat<T> {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let mut nyan: cat<~str> = cat::new(0, 2, ~\"nyan\");\n     for uint::range(1, 5) |_| { nyan.speak(); }\n     assert(*nyan.find(&1).unwrap() == ~\"nyan\");"}, {"sha": "6004f9b9001c2289b232a12f52e5fb7f633573d9", "filename": "src/test/run-pass/const-enum-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -11,7 +11,7 @@\n enum E { V0, V1(int) }\n const C: &static/E = &V0;\n \n-fn main() {\n+pub fn main() {\n     match *C {\n         V0 => (),\n         _ => fail!()"}, {"sha": "f8fb407244bce8528f357da2fac9660a6a440d3e", "filename": "src/test/run-pass/const-enum-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-struct.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -12,7 +12,7 @@ enum E { V16(u16), V32(u32) }\n struct S { a: E, b: u16, c: u16 }\n const C: S = S { a: V16(0xDEAD), b: 0x600D, c: 0xBAD };\n \n-fn main() {\n+pub fn main() {\n     let n = C.b;\n     assert n != 0xBAD;\n     assert n == 0x600D;"}, {"sha": "12bc06d5f06caa75071f77f29f2ea26c5a9904cf", "filename": "src/test/run-pass/const-enum-struct2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-struct2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-struct2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-struct2.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -12,7 +12,7 @@ enum E { V0, V16(u16) }\n struct S { a: E, b: u16, c: u16 }\n const C: S = S { a: V0, b: 0x600D, c: 0xBAD };\n \n-fn main() {\n+pub fn main() {\n     let n = C.b;\n     assert n != 0xBAD;\n     assert n == 0x600D;"}, {"sha": "df41f5129caea7c988107abbab45fe5cf41c33f7", "filename": "src/test/run-pass/const-enum-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuple.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -11,7 +11,7 @@\n enum E { V16(u16), V32(u32) }\n const C: (E, u16, u16) = (V16(0xDEAD), 0x600D, 0xBAD);\n \n-fn main() {\n+pub fn main() {\n     let (_, n, _) = C;\n     assert n != 0xBAD;\n     assert n == 0x600D;"}, {"sha": "ec585f1e0d823eff5de8f663e9f6d5f98a7859ae", "filename": "src/test/run-pass/const-enum-tuple2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-tuple2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-tuple2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuple2.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -11,7 +11,7 @@\n enum E { V0, V16(u16) }\n const C: (E, u16, u16) = (V0, 0x600D, 0xBAD);\n \n-fn main() {\n+pub fn main() {\n     let (_, n, _) = C;\n     assert n != 0xBAD;\n     assert n == 0x600D;"}, {"sha": "db2c637f10eee9b4a7e5e243015b662414d62372", "filename": "src/test/run-pass/const-enum-tuplestruct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -12,7 +12,7 @@ enum E { V16(u16), V32(u32) }\n struct S(E, u16, u16);\n const C: S = S(V16(0xDEAD), 0x600D, 0xBAD);\n \n-fn main() {\n+pub fn main() {\n     let S(_, n, _) = C;\n     assert n != 0xBAD;\n     assert n == 0x600D;"}, {"sha": "b07ac6cb28f4202a5b6e4d4a93ddb956ab7f885c", "filename": "src/test/run-pass/const-enum-tuplestruct2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct2.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -12,7 +12,7 @@ enum E { V0, V16(u16) }\n struct S(E, u16, u16);\n const C: S = S(V0, 0x600D, 0xBAD);\n \n-fn main() {\n+pub fn main() {\n     let S(_, n, _) = C;\n     assert n != 0xBAD;\n     assert n == 0x600D;"}, {"sha": "a9400ef1b6b049cbfac5a387635ad9c9db9c7c18", "filename": "src/test/run-pass/const-enum-vec-index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -13,7 +13,7 @@ const C: &[E] = &[V0, V1(0xDEADBEE)];\n const C0: E = C[0];\n const C1: E = C[1];\n \n-fn main() {\n+pub fn main() {\n     match C0 { \n         V0 => (),\n         _ => fail!()"}, {"sha": "b143e20f624abbc0ae3c7bc280f1d05e9233b94a", "filename": "src/test/run-pass/const-enum-vec-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -11,7 +11,7 @@\n enum E { V1(int), V0 }\n const C: &static/[E] = &[V0, V1(0xDEADBEE), V0];\n \n-fn main() {\n+pub fn main() {\n     match C[1] {\n         V1(n) => assert(n == 0xDEADBEE),\n         _ => fail!()"}, {"sha": "0556bd0ea48d334b75ecb1438894e80f181dbc54", "filename": "src/test/run-pass/const-enum-vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -11,7 +11,7 @@\n enum E { V1(int), V0 }\n const C: [E * 3] = [V0, V1(0xDEADBEE), V0];\n \n-fn main() {\n+pub fn main() {\n     match C[1] {\n         V1(n) => assert(n == 0xDEADBEE),\n         _ => fail!()"}, {"sha": "df001c7ab212e1338cb49943f556c83d5f1c2566", "filename": "src/test/run-pass/impl-privacy-xc-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fimpl-privacy-xc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fimpl-privacy-xc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-privacy-xc-1.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -3,7 +3,7 @@\n \n extern mod impl_privacy_xc_1;\n \n-fn main() {\n+pub fn main() {\n     let fish = impl_privacy_xc_1::Fish { x: 1 };\n     fish.swim();\n }"}, {"sha": "69bd31ab766da078cd91600232efaf1c300d0da8", "filename": "src/test/run-pass/impl-privacy-xc-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fimpl-privacy-xc-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fimpl-privacy-xc-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-privacy-xc-2.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -3,7 +3,7 @@\n \n extern mod impl_privacy_xc_2;\n \n-fn main() {\n+pub fn main() {\n     let fish1 = impl_privacy_xc_2::Fish { x: 1 };\n     let fish2 = impl_privacy_xc_2::Fish { x: 2 };\n     io::println(if fish1.eq(&fish2) { \"yes\" } else { \"no \" });"}, {"sha": "9acdd9297d24e8946ec25607fb71ee5259a8e131", "filename": "src/test/run-pass/issue-1257.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fissue-1257.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fissue-1257.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1257.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main () {\n+pub fn main () {\n   let mut line = ~\"\";\n   let mut i = 0;\n   while line != ~\"exit\" {"}, {"sha": "1fca01f737327ba4613f6f89009dd7dc58a33187", "filename": "src/test/run-pass/newtype-struct-xc-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fnewtype-struct-xc-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fnewtype-struct-xc-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-xc-2.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -8,7 +8,7 @@ fn f() -> Au {\n     Au(2)\n }\n \n-fn main() {\n+pub fn main() {\n     let _ = f();\n }\n "}, {"sha": "49ce618e37b4c62966d7d48e9a0d4bb2c4fd62f1", "filename": "src/test/run-pass/newtype-struct-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fnewtype-struct-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Fnewtype-struct-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-xc.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -3,7 +3,7 @@\n \n extern mod newtype_struct_xc;\n \n-fn main() {\n+pub fn main() {\n     let _ = newtype_struct_xc::Au(2);\n }\n "}, {"sha": "19b62598604539b77a658b0d324b84af3cd4a461", "filename": "src/test/run-pass/trait-default-method-bound-subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -20,6 +20,6 @@ fn f<T, U, V: A<T>>(i: V, j: T, k: U) -> (T, U) {\n     i.g(j, k)\n }\n \n-fn main () {\n+pub fn main () {\n     assert f(0, 1, 2) == (1, 2);\n }"}, {"sha": "424ba02b6fb0a684dbd6e1e9f5afbdb207c0be86", "filename": "src/test/run-pass/trait-default-method-bound-subst2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -20,6 +20,6 @@ fn f<T, V: A<T>>(i: V, j: T) -> T {\n     i.g(j)\n }\n \n-fn main () {\n+pub fn main () {\n     assert f(0, 2) == 2;\n }"}, {"sha": "f8f51312b188ca98216dbc18538bd05e0320c6c9", "filename": "src/test/run-pass/trait-default-method-bound-subst3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst3.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -20,7 +20,7 @@ fn f<T, V: A>(i: V, j: T, k: T) -> (T, T) {\n     i.g(j, k)\n }\n \n-fn main () {\n+pub fn main () {\n     assert f(0, 1, 2) == (1, 2);\n     assert f(0, 1u8, 2u8) == (1u8, 2u8);\n }"}, {"sha": "0f994ca9402b0fba3876266d30fc2ec3a514cacc", "filename": "src/test/run-pass/trait-default-method-bound-subst4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -20,7 +20,7 @@ fn f<T, V: A<T>>(i: V, j: uint) -> uint {\n     i.g(j)\n }\n \n-fn main () {\n+pub fn main () {\n     assert f::<float, int>(0, 2u) == 2u;\n     assert f::<uint, int>(0, 2u) == 2u;\n }"}, {"sha": "ab2f1928d1f30587a1b8f192bf124ae72dade373", "filename": "src/test/run-pass/trait-default-method-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5016af2647446a61100f373471ef749e7b704/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound.rs?ref=d0b5016af2647446a61100f373471ef749e7b704", "patch": "@@ -20,6 +20,6 @@ fn f<T: A>(i: T) {\n     assert i.g() == 10;\n }\n \n-fn main () {\n+pub fn main () {\n     f(0);\n }"}]}