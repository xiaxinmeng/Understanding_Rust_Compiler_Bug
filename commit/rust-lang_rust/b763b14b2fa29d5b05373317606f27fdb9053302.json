{"sha": "b763b14b2fa29d5b05373317606f27fdb9053302", "node_id": "C_kwDOAAsO6NoAKGI3NjNiMTRiMmZhMjlkNWIwNTM3MzMxNzYwNmYyN2ZkYjkwNTMzMDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-05T04:54:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-05T04:54:31Z"}, "message": "Auto merge of #9342 - relrelb:or_default, r=dswij\n\nSuggest `Entry::or_default` for `Entry::or_insert(Default::default())`\n\nUnlike past similar work done in #6228, expand the existing `or_fun_call`\nlint to detect `or_insert` calls with a `T::new()` or `T::default()`\nargument, much like currently done for `unwrap_or` calls. In that case,\nsuggest the use of `or_default`, which is more idiomatic.\n\nNote that even with this change, `or_insert_with(T::default)` calls\naren't detected as candidates for `or_default()`, in the same manner\nthat currently `unwrap_or_else(T::default)` calls aren't detected as\ncandidates for `unwrap_or_default()`.\n\nAlso, as a nearby cleanup, change `KNOW_TYPES` from `static` to `const`,\nsince as far as I understand it's preferred (should Clippy have a lint\nfor that?).\n\nAddresses #3812.\n\n*Please write a short comment explaining your change (or \"none\" for internal only changes)*\n\nchangelog: [`or_fun_call`]: Suggest `Entry::or_default` for `Entry::or_insert(Default::default())`", "tree": {"sha": "485366dcfe9af1ae54b5afcadcea8324d07eb6da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/485366dcfe9af1ae54b5afcadcea8324d07eb6da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b763b14b2fa29d5b05373317606f27fdb9053302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b763b14b2fa29d5b05373317606f27fdb9053302", "html_url": "https://github.com/rust-lang/rust/commit/b763b14b2fa29d5b05373317606f27fdb9053302", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b763b14b2fa29d5b05373317606f27fdb9053302/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90804d35fef4d90bfa6e2f03696085f872513fa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/90804d35fef4d90bfa6e2f03696085f872513fa0", "html_url": "https://github.com/rust-lang/rust/commit/90804d35fef4d90bfa6e2f03696085f872513fa0"}, {"sha": "f0e586c2511019a58ad3e56be16bba76dfc7eba8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e586c2511019a58ad3e56be16bba76dfc7eba8", "html_url": "https://github.com/rust-lang/rust/commit/f0e586c2511019a58ad3e56be16bba76dfc7eba8"}], "stats": {"total": 57, "additions": 44, "deletions": 13}, "files": [{"sha": "b7d2d980db80195b32820349d3af9414996b02da", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b763b14b2fa29d5b05373317606f27fdb9053302/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b763b14b2fa29d5b05373317606f27fdb9053302/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=b763b14b2fa29d5b05373317606f27fdb9053302", "patch": "@@ -825,8 +825,9 @@ declare_clippy_lint! {\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for calls to `.or(foo(..))`, `.unwrap_or(foo(..))`,\n-    /// etc., and suggests to use `or_else`, `unwrap_or_else`, etc., or\n-    /// `unwrap_or_default` instead.\n+    /// `.or_insert(foo(..))` etc., and suggests to use `.or_else(|| foo(..))`,\n+    /// `.unwrap_or_else(|| foo(..))`, `.unwrap_or_default()` or `.or_default()`\n+    /// etc. instead.\n     ///\n     /// ### Why is this bad?\n     /// The function will always be called and potentially"}, {"sha": "c97f714680ef16471a9339a16d16a9e1b29a6ca3", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b763b14b2fa29d5b05373317606f27fdb9053302/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b763b14b2fa29d5b05373317606f27fdb9053302/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=b763b14b2fa29d5b05373317606f27fdb9053302", "patch": "@@ -22,7 +22,8 @@ pub(super) fn check<'tcx>(\n     name: &str,\n     args: &'tcx [hir::Expr<'_>],\n ) {\n-    /// Checks for `unwrap_or(T::new())` or `unwrap_or(T::default())`.\n+    /// Checks for `unwrap_or(T::new())`, `unwrap_or(T::default())`,\n+    /// `or_insert(T::new())` or `or_insert(T::default())`.\n     #[allow(clippy::too_many_arguments)]\n     fn check_unwrap_or_default(\n         cx: &LateContext<'_>,\n@@ -42,7 +43,11 @@ pub(super) fn check<'tcx>(\n \n         if_chain! {\n             if !or_has_args;\n-            if name == \"unwrap_or\";\n+            if let Some(sugg) = match name {\n+                \"unwrap_or\" => Some(\"unwrap_or_default\"),\n+                \"or_insert\" => Some(\"or_default\"),\n+                _ => None,\n+            };\n             if let hir::ExprKind::Path(ref qpath) = fun.kind;\n             if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);\n             let path = last_path_segment(qpath).ident.name;\n@@ -58,7 +63,7 @@ pub(super) fn check<'tcx>(\n                     method_span.with_hi(span.hi()),\n                     &format!(\"use of `{}` followed by a call to `{}`\", name, path),\n                     \"try this\",\n-                    \"unwrap_or_default()\".to_string(),\n+                    format!(\"{}()\", sugg),\n                     Applicability::MachineApplicable,\n                 );\n \n@@ -82,7 +87,7 @@ pub(super) fn check<'tcx>(\n         fun_span: Option<Span>,\n     ) {\n         // (path, fn_has_argument, methods, suffix)\n-        static KNOW_TYPES: [(&[&str], bool, &[&str], &str); 4] = [\n+        const KNOW_TYPES: [(&[&str], bool, &[&str], &str); 4] = [\n             (&paths::BTREEMAP_ENTRY, false, &[\"or_insert\"], \"with\"),\n             (&paths::HASHMAP_ENTRY, false, &[\"or_insert\"], \"with\"),\n             (&paths::OPTION, false, &[\"map_or\", \"ok_or\", \"or\", \"unwrap_or\"], \"else\"),"}, {"sha": "6ce77cc268c51fcf20a56449031f51f80282a7bc", "filename": "src/docs/or_fun_call.txt", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b763b14b2fa29d5b05373317606f27fdb9053302/src%2Fdocs%2For_fun_call.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b763b14b2fa29d5b05373317606f27fdb9053302/src%2Fdocs%2For_fun_call.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2For_fun_call.txt?ref=b763b14b2fa29d5b05373317606f27fdb9053302", "patch": "@@ -1,7 +1,8 @@\n ### What it does\n Checks for calls to `.or(foo(..))`, `.unwrap_or(foo(..))`,\n-etc., and suggests to use `or_else`, `unwrap_or_else`, etc., or\n-`unwrap_or_default` instead.\n+`.or_insert(foo(..))` etc., and suggests to use `.or_else(|| foo(..))`,\n+`.unwrap_or_else(|| foo(..))`, `.unwrap_or_default()` or `.or_default()`\n+etc. instead.\n \n ### Why is this bad?\n The function will always be called and potentially"}, {"sha": "5991188ab6372389d50ed92e46c479aa0a6a3274", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b763b14b2fa29d5b05373317606f27fdb9053302/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b763b14b2fa29d5b05373317606f27fdb9053302/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=b763b14b2fa29d5b05373317606f27fdb9053302", "patch": "@@ -79,16 +79,16 @@ fn or_fun_call() {\n     without_default.unwrap_or_else(Foo::new);\n \n     let mut map = HashMap::<u64, String>::new();\n-    map.entry(42).or_insert(String::new());\n+    map.entry(42).or_default();\n \n     let mut map_vec = HashMap::<u64, Vec<i32>>::new();\n-    map_vec.entry(42).or_insert(vec![]);\n+    map_vec.entry(42).or_default();\n \n     let mut btree = BTreeMap::<u64, String>::new();\n-    btree.entry(42).or_insert(String::new());\n+    btree.entry(42).or_default();\n \n     let mut btree_vec = BTreeMap::<u64, Vec<i32>>::new();\n-    btree_vec.entry(42).or_insert(vec![]);\n+    btree_vec.entry(42).or_default();\n \n     let stringy = Some(String::new());\n     let _ = stringy.unwrap_or_default();"}, {"sha": "e3dab4cb14778c06579fe88223a0ee5d8c7d2c12", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b763b14b2fa29d5b05373317606f27fdb9053302/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b763b14b2fa29d5b05373317606f27fdb9053302/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=b763b14b2fa29d5b05373317606f27fdb9053302", "patch": "@@ -66,6 +66,30 @@ error: use of `unwrap_or` followed by a function call\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n+error: use of `or_insert` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:82:19\n+   |\n+LL |     map.entry(42).or_insert(String::new());\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_default()`\n+\n+error: use of `or_insert` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:85:23\n+   |\n+LL |     map_vec.entry(42).or_insert(vec![]);\n+   |                       ^^^^^^^^^^^^^^^^^ help: try this: `or_default()`\n+\n+error: use of `or_insert` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:88:21\n+   |\n+LL |     btree.entry(42).or_insert(String::new());\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_default()`\n+\n+error: use of `or_insert` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:91:25\n+   |\n+LL |     btree_vec.entry(42).or_insert(vec![]);\n+   |                         ^^^^^^^^^^^^^^^^^ help: try this: `or_default()`\n+\n error: use of `unwrap_or` followed by a call to `new`\n   --> $DIR/or_fun_call.rs:94:21\n    |\n@@ -132,5 +156,5 @@ error: use of `unwrap_or` followed by a call to `new`\n LL |         .unwrap_or(String::new());\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 26 previous errors\n "}]}