{"sha": "0907c198c46e7c3ceefe42855f933a29bc5e085a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MDdjMTk4YzQ2ZTdjM2NlZWZlNDI4NTVmOTMzYTI5YmM1ZTA4NWE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-11T00:31:38Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-11T01:14:58Z"}, "message": "infer: Use methods for creating an InferCtxt.", "tree": {"sha": "acb8e9d3529bfb7c43513c57d6358eedaa24ba6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acb8e9d3529bfb7c43513c57d6358eedaa24ba6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0907c198c46e7c3ceefe42855f933a29bc5e085a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0907c198c46e7c3ceefe42855f933a29bc5e085a", "html_url": "https://github.com/rust-lang/rust/commit/0907c198c46e7c3ceefe42855f933a29bc5e085a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0907c198c46e7c3ceefe42855f933a29bc5e085a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5122d5c4ca8eeed25008ff908df4dfb75b23ea5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5122d5c4ca8eeed25008ff908df4dfb75b23ea5", "html_url": "https://github.com/rust-lang/rust/commit/b5122d5c4ca8eeed25008ff908df4dfb75b23ea5"}], "stats": {"total": 280, "additions": 126, "deletions": 154}, "files": [{"sha": "2ea7952f5987893a51166daf95477c3c1f4c21e9", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -382,34 +382,36 @@ pub fn fixup_err_to_string(f: FixupError) -> String {\n     }\n }\n \n-pub fn new_infer_ctxt<'a, 'tcx>(tcx: &'a TyCtxt<'tcx>,\n-                                tables: &'a RefCell<ty::Tables<'tcx>>,\n-                                param_env: Option<ty::ParameterEnvironment<'a, 'tcx>>,\n-                                projection_mode: ProjectionMode)\n-                                -> InferCtxt<'a, 'tcx> {\n-    InferCtxt {\n-        tcx: tcx,\n-        tables: tables,\n-        type_variables: RefCell::new(type_variable::TypeVariableTable::new()),\n-        int_unification_table: RefCell::new(UnificationTable::new()),\n-        float_unification_table: RefCell::new(UnificationTable::new()),\n-        region_vars: RegionVarBindings::new(tcx),\n-        parameter_environment: param_env.unwrap_or(tcx.empty_parameter_environment()),\n-        reported_trait_errors: RefCell::new(FnvHashSet()),\n-        normalize: false,\n-        projection_mode: projection_mode,\n+impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n+    pub fn new(tcx: &'a TyCtxt<'tcx>,\n+               tables: &'a RefCell<ty::Tables<'tcx>>,\n+               param_env: Option<ty::ParameterEnvironment<'a, 'tcx>>,\n+               projection_mode: ProjectionMode)\n+               -> Self {\n+        InferCtxt {\n+            tcx: tcx,\n+            tables: tables,\n+            type_variables: RefCell::new(type_variable::TypeVariableTable::new()),\n+            int_unification_table: RefCell::new(UnificationTable::new()),\n+            float_unification_table: RefCell::new(UnificationTable::new()),\n+            region_vars: RegionVarBindings::new(tcx),\n+            parameter_environment: param_env.unwrap_or(tcx.empty_parameter_environment()),\n+            reported_trait_errors: RefCell::new(FnvHashSet()),\n+            normalize: false,\n+            projection_mode: projection_mode,\n         tainted_by_errors_flag: Cell::new(false),\n-        err_count_on_creation: tcx.sess.err_count()\n+            err_count_on_creation: tcx.sess.err_count()\n+        }\n     }\n-}\n \n-pub fn normalizing_infer_ctxt<'a, 'tcx>(tcx: &'a TyCtxt<'tcx>,\n-                                        tables: &'a RefCell<ty::Tables<'tcx>>,\n-                                        projection_mode: ProjectionMode)\n-                                        -> InferCtxt<'a, 'tcx> {\n-    let mut infcx = new_infer_ctxt(tcx, tables, None, projection_mode);\n-    infcx.normalize = true;\n-    infcx\n+    pub fn normalizing(tcx: &'a TyCtxt<'tcx>,\n+                       tables: &'a RefCell<ty::Tables<'tcx>>,\n+                       projection_mode: ProjectionMode)\n+                       -> Self {\n+        let mut infcx = InferCtxt::new(tcx, tables, None, projection_mode);\n+        infcx.normalize = true;\n+        infcx\n+    }\n }\n \n pub fn mk_subty<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,\n@@ -532,7 +534,7 @@ pub fn normalize_associated_type<'tcx,T>(tcx: &TyCtxt<'tcx>, value: &T) -> T\n         return value;\n     }\n \n-    let infcx = new_infer_ctxt(tcx, &tcx.tables, None, ProjectionMode::Any);\n+    let infcx = InferCtxt::new(tcx, &tcx.tables, None, ProjectionMode::Any);\n     let mut selcx = traits::SelectionContext::new(&infcx);\n     let cause = traits::ObligationCause::dummy();\n     let traits::Normalized { value: result, obligations } ="}, {"sha": "2c205f4824805e18fe59fc9145b4d06c12f0d403", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -11,7 +11,7 @@\n use dep_graph::DepNode;\n use hir::def::Def;\n use hir::def_id::DefId;\n-use infer::{InferCtxt, new_infer_ctxt};\n+use infer::InferCtxt;\n use traits::ProjectionMode;\n use ty::{self, Ty, TyCtxt};\n use ty::layout::{LayoutError, Pointer, SizeSkeleton};\n@@ -36,7 +36,7 @@ struct ItemVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> ItemVisitor<'a, 'tcx> {\n     fn visit_const(&mut self, item_id: ast::NodeId, expr: &hir::Expr) {\n         let param_env = ty::ParameterEnvironment::for_item(self.tcx, item_id);\n-        let infcx = new_infer_ctxt(self.tcx, &self.tcx.tables,\n+        let infcx = InferCtxt::new(self.tcx, &self.tcx.tables,\n                                    Some(param_env),\n                                    ProjectionMode::Any);\n         let mut visitor = ExprVisitor {\n@@ -115,7 +115,7 @@ impl<'a, 'tcx> ExprVisitor<'a, 'tcx> {\n impl<'a, 'tcx, 'v> Visitor<'v> for ItemVisitor<'a, 'tcx> {\n     // const, static and N in [T; N].\n     fn visit_expr(&mut self, expr: &hir::Expr) {\n-        let infcx = new_infer_ctxt(self.tcx, &self.tcx.tables,\n+        let infcx = InferCtxt::new(self.tcx, &self.tcx.tables,\n                                    None, ProjectionMode::Any);\n         let mut visitor = ExprVisitor {\n             infcx: &infcx\n@@ -144,7 +144,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ItemVisitor<'a, 'tcx> {\n         match fk {\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n                 let param_env = ty::ParameterEnvironment::for_item(self.tcx, id);\n-                let infcx = new_infer_ctxt(self.tcx, &self.tcx.tables,\n+                let infcx = InferCtxt::new(self.tcx, &self.tcx.tables,\n                                            Some(param_env),\n                                            ProjectionMode::Any);\n                 let mut visitor = ExprVisitor {"}, {"sha": "cd84e5ee7bf8fa3dafea4a11ae108da1fa051f8f", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -114,7 +114,7 @@ use hir::def::*;\n use hir::pat_util;\n use ty::{self, TyCtxt, ParameterEnvironment};\n use traits::{self, ProjectionMode};\n-use infer;\n+use infer::InferCtxt;\n use ty::subst::Subst;\n use lint;\n use util::nodemap::NodeMap;\n@@ -1488,10 +1488,10 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n                 let param_env = ParameterEnvironment::for_item(&self.ir.tcx, id);\n                 let t_ret_subst = t_ret.subst(&self.ir.tcx, &param_env.free_substs);\n-                let infcx = infer::new_infer_ctxt(&self.ir.tcx,\n-                                                  &self.ir.tcx.tables,\n-                                                  Some(param_env),\n-                                                  ProjectionMode::Any);\n+                let infcx = InferCtxt::new(&self.ir.tcx,\n+                                           &self.ir.tcx.tables,\n+                                           Some(param_env),\n+                                           ProjectionMode::Any);\n                 let cause = traits::ObligationCause::dummy();\n                 let norm = traits::fully_normalize(&infcx,\n                                                    cause,"}, {"sha": "a4ea926e111c8c839a7e7e9f8c22041056decbc9", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -19,7 +19,7 @@ use hir::def_id::DefId;\n use middle::free_region::FreeRegionMap;\n use ty::subst;\n use ty::{self, Ty, TypeFoldable};\n-use infer::{self, fixup_err_to_string, InferCtxt};\n+use infer::{fixup_err_to_string, InferCtxt};\n \n use std::rc::Rc;\n use syntax::ast;\n@@ -437,10 +437,8 @@ pub fn normalize_param_env_or_error<'a,'tcx>(unnormalized_env: ty::ParameterEnvi\n \n     let elaborated_env = unnormalized_env.with_caller_bounds(predicates);\n \n-    let infcx = infer::new_infer_ctxt(tcx,\n-                                      &tcx.tables,\n-                                      Some(elaborated_env),\n-                                      ProjectionMode::AnyFinal);\n+    let infcx = InferCtxt::new(tcx, &tcx.tables, Some(elaborated_env),\n+                               ProjectionMode::AnyFinal);\n     let predicates = match fully_normalize(&infcx,\n                                            cause,\n                                            &infcx.parameter_environment.caller_bounds) {"}, {"sha": "0b075789f19734020cb0ef3b57c10ea9e7bdcb70", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -133,7 +133,7 @@ pub fn specializes(tcx: &TyCtxt, impl1_def_id: DefId, impl2_def_id: DefId) -> bo\n         return false;\n     }\n \n-    let mut infcx = infer::normalizing_infer_ctxt(tcx, &tcx.tables, ProjectionMode::Topmost);\n+    let mut infcx = InferCtxt::normalizing(tcx, &tcx.tables, ProjectionMode::Topmost);\n \n     // create a parameter environment corresponding to a (skolemized) instantiation of impl1\n     let scheme = tcx.lookup_item_type(impl1_def_id);"}, {"sha": "f79054fcf02c7aaced0d5c232a8317f586194f5b", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -14,7 +14,7 @@ use std::rc::Rc;\n use super::{Overlap, specializes};\n \n use hir::def_id::DefId;\n-use infer;\n+use infer::InferCtxt;\n use traits::{self, ProjectionMode};\n use ty::{self, TyCtxt, ImplOrTraitItem, TraitDef, TypeFoldable};\n use ty::fast_reject::{self, SimplifiedType};\n@@ -113,7 +113,7 @@ impl Children {\n         } {\n             let possible_sibling = *slot;\n \n-            let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None, ProjectionMode::Topmost);\n+            let infcx = InferCtxt::new(tcx, &tcx.tables, None, ProjectionMode::Topmost);\n             let overlap = traits::overlapping_impls(&infcx, possible_sibling, impl_def_id);\n \n             if let Some(impl_header) = overlap {"}, {"sha": "75a31d156514a03bb55fa47aff27713365482c96", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -13,7 +13,7 @@\n use hir::svh::Svh;\n use hir::def_id::DefId;\n use ty::subst;\n-use infer;\n+use infer::InferCtxt;\n use hir::pat_util;\n use traits::{self, ProjectionMode};\n use ty::{self, Ty, TyCtxt, TypeAndMut, TypeFlags, TypeFoldable};\n@@ -129,10 +129,8 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n         let tcx = self.tcx;\n \n         // FIXME: (@jroesch) float this code up\n-        let infcx = infer::new_infer_ctxt(tcx,\n-                                          &tcx.tables,\n-                                          Some(self.clone()),\n-                                          ProjectionMode::Topmost);\n+        let infcx = InferCtxt::new(tcx, &tcx.tables, Some(self.clone()),\n+                                   ProjectionMode::Topmost);\n \n         let adt = match self_type.sty {\n             ty::TyStruct(struct_def, substs) => {\n@@ -511,10 +509,8 @@ impl<'tcx> ty::TyS<'tcx> {\n                        -> bool\n     {\n         let tcx = param_env.tcx;\n-        let infcx = infer::new_infer_ctxt(tcx,\n-                                          &tcx.tables,\n-                                          Some(param_env.clone()),\n-                                          ProjectionMode::Topmost);\n+        let infcx = InferCtxt::new(tcx, &tcx.tables, Some(param_env.clone()),\n+                                   ProjectionMode::Topmost);\n \n         let is_impld = traits::type_known_to_meet_builtin_bound(&infcx,\n                                                                 self, bound, span);\n@@ -600,7 +596,7 @@ impl<'tcx> ty::TyS<'tcx> {\n     }\n \n     #[inline]\n-    pub fn layout<'a>(&'tcx self, infcx: &infer::InferCtxt<'a, 'tcx>)\n+    pub fn layout<'a>(&'tcx self, infcx: &InferCtxt<'a, 'tcx>)\n                       -> Result<&'tcx Layout, LayoutError<'tcx>> {\n         let can_cache = !self.has_param_types() && !self.has_self_ty();\n         if can_cache {"}, {"sha": "66fac4ed22849b6e6e2567953d278cb6f627ca3a", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -22,7 +22,7 @@ use borrowck::*;\n use borrowck::InteriorKind::{InteriorElement, InteriorField};\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::expr_use_visitor::MutateMode;\n-use rustc::infer;\n+use rustc::infer::InferCtxt;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::region;\n@@ -203,10 +203,8 @@ pub fn check_loans<'a, 'b, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     debug!(\"check_loans(body id={})\", body.id);\n \n     let param_env = ty::ParameterEnvironment::for_item(bccx.tcx, fn_id);\n-    let infcx = infer::new_infer_ctxt(bccx.tcx,\n-                                      &bccx.tcx.tables,\n-                                      Some(param_env),\n-                                      ProjectionMode::AnyFinal);\n+    let infcx = InferCtxt::new(bccx.tcx, &bccx.tcx.tables, Some(param_env),\n+                               ProjectionMode::AnyFinal);\n \n     let mut clcx = CheckLoanCtxt {\n         bccx: bccx,"}, {"sha": "152524e26e4ed4620ea6492eb216133eae4e4ab1", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -19,7 +19,7 @@\n use borrowck::*;\n use borrowck::move_data::MoveData;\n use rustc::middle::expr_use_visitor as euv;\n-use rustc::infer;\n+use rustc::infer::InferCtxt;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::region;\n@@ -56,10 +56,8 @@ pub fn gather_loans_in_fn<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     };\n \n     let param_env = ty::ParameterEnvironment::for_item(bccx.tcx, fn_id);\n-    let infcx = infer::new_infer_ctxt(bccx.tcx,\n-                                      &bccx.tcx.tables,\n-                                      Some(param_env),\n-                                      ProjectionMode::AnyFinal);\n+    let infcx = InferCtxt::new(bccx.tcx, &bccx.tcx.tables, Some(param_env),\n+                               ProjectionMode::AnyFinal);\n     {\n         let mut euv = euv::ExprUseVisitor::new(&mut glcx, &infcx);\n         euv.walk_fn(decl, body);\n@@ -529,10 +527,8 @@ struct StaticInitializerCtxt<'a, 'tcx: 'a> {\n impl<'a, 'tcx, 'v> Visitor<'v> for StaticInitializerCtxt<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &Expr) {\n         if let hir::ExprAddrOf(mutbl, ref base) = ex.node {\n-            let infcx = infer::new_infer_ctxt(self.bccx.tcx,\n-                                              &self.bccx.tcx.tables,\n-                                              None,\n-                                              ProjectionMode::AnyFinal);\n+            let infcx = InferCtxt::new(self.bccx.tcx, &self.bccx.tcx.tables, None,\n+                                       ProjectionMode::AnyFinal);\n             let mc = mc::MemCategorizationContext::new(&infcx);\n             let base_cmt = mc.cat_expr(&base).unwrap();\n             let borrow_kind = ty::BorrowKind::from_mutbl(mutbl);"}, {"sha": "01cda88056fd4d9d634c8840b89856cb670fb704", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -22,7 +22,7 @@ use rustc::hir::def_id::{DefId};\n use rustc::middle::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor};\n use rustc::middle::expr_use_visitor::{LoanCause, MutateMode};\n use rustc::middle::expr_use_visitor as euv;\n-use rustc::infer;\n+use rustc::infer::InferCtxt;\n use rustc::middle::mem_categorization::{cmt};\n use rustc::hir::pat_util::*;\n use rustc::traits::ProjectionMode;\n@@ -1123,10 +1123,9 @@ fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n                     PatKind::Ident(hir::BindByValue(_), _, ref sub) => {\n                         let pat_ty = tcx.node_id_to_type(p.id);\n                         //FIXME: (@jroesch) this code should be floated up as well\n-                        let infcx = infer::new_infer_ctxt(cx.tcx,\n-                                                          &cx.tcx.tables,\n-                                                          Some(cx.param_env.clone()),\n-                                                          ProjectionMode::AnyFinal);\n+                        let infcx = InferCtxt::new(cx.tcx, &cx.tcx.tables,\n+                                                   Some(cx.param_env.clone()),\n+                                                   ProjectionMode::AnyFinal);\n                         if infcx.type_moves_by_default(pat_ty, pat.span) {\n                             check_move(p, sub.as_ref().map(|p| &**p));\n                         }\n@@ -1155,10 +1154,9 @@ fn check_for_mutation_in_guard<'a, 'tcx>(cx: &'a MatchCheckCtxt<'a, 'tcx>,\n         cx: cx,\n     };\n \n-    let infcx = infer::new_infer_ctxt(cx.tcx,\n-                                      &cx.tcx.tables,\n-                                      Some(checker.cx.param_env.clone()),\n-                                      ProjectionMode::AnyFinal);\n+    let infcx = InferCtxt::new(cx.tcx, &cx.tcx.tables,\n+                               Some(checker.cx.param_env.clone()),\n+                               ProjectionMode::AnyFinal);\n \n     let mut visitor = ExprUseVisitor::new(&mut checker, &infcx);\n     visitor.walk_expr(guard);"}, {"sha": "92dd1c5fa172df05d260d1c6e494ddd52ffdd896", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -18,7 +18,8 @@ use self::EvalHint::*;\n use rustc::hir::map as ast_map;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::middle::cstore::{self, InlinedItem};\n-use rustc::{infer, traits};\n+use rustc::traits;\n+use rustc::infer::InferCtxt;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::hir::pat_util::def_to_path;\n@@ -1010,7 +1011,7 @@ fn resolve_trait_associated_const<'a, 'tcx: 'a>(tcx: &'a TyCtxt<'tcx>,\n            trait_ref);\n \n     tcx.populate_implementations_for_trait_if_necessary(trait_ref.def_id());\n-    let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None, ProjectionMode::AnyFinal);\n+    let infcx = InferCtxt::new(tcx, &tcx.tables, None, ProjectionMode::AnyFinal);\n \n     let mut selcx = traits::SelectionContext::new(&infcx);\n     let obligation = traits::Obligation::new(traits::ObligationCause::dummy(),"}, {"sha": "98dc787111d002d7eaa351c8fa01bcf5dd5bfe4d", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -149,10 +149,8 @@ fn test_env<F>(source_string: &str,\n                                index,\n                                \"test_crate\",\n                                |tcx| {\n-                                   let infcx = infer::new_infer_ctxt(tcx,\n-                                                                     &tcx.tables,\n-                                                                     None,\n-                                                                     ProjectionMode::AnyFinal);\n+                                   let infcx = InferCtxt::new(tcx, &tcx.tables, None,\n+                                                              ProjectionMode::AnyFinal);\n                                    body(Env { infcx: &infcx });\n                                    let free_regions = FreeRegionMap::new();\n                                    infcx.resolve_regions_and_report_errors(&free_regions,"}, {"sha": "55c84ed389d83a9dedd5d24117202f069cc84e33", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -31,7 +31,8 @@\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use middle::stability;\n-use rustc::{cfg, infer};\n+use rustc::cfg;\n+use rustc::infer::InferCtxt;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::adjustment;\n@@ -869,10 +870,8 @@ impl LateLintPass for UnconditionalRecursion {\n                     let node_id = tcx.map.as_local_node_id(method.def_id).unwrap();\n \n                     let param_env = ty::ParameterEnvironment::for_item(tcx, node_id);\n-                    let infcx = infer::new_infer_ctxt(tcx,\n-                                                      &tcx.tables,\n-                                                      Some(param_env),\n-                                                      ProjectionMode::AnyFinal);\n+                    let infcx = InferCtxt::new(tcx, &tcx.tables, Some(param_env),\n+                                               ProjectionMode::AnyFinal);\n                     let mut selcx = traits::SelectionContext::new(&infcx);\n                     match selcx.select(&obligation) {\n                         // The method comes from a `T: Trait` bound."}, {"sha": "ceff9c4875c8d5cc6b80ad7a7c09dc00eb856944", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -24,7 +24,7 @@ use pretty;\n use hair::cx::Cx;\n \n use rustc::mir::mir_map::MirMap;\n-use rustc::infer;\n+use rustc::infer::InferCtxt;\n use rustc::traits::ProjectionMode;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::util::nodemap::NodeMap;\n@@ -75,10 +75,9 @@ impl<'a, 'tcx> BuildMir<'a, 'tcx> {\n         };\n \n         let param_env = ty::ParameterEnvironment::for_item(self.tcx, src.item_id());\n-        let infcx = infer::new_infer_ctxt(self.tcx,\n-                                          &self.tcx.tables,\n-                                          Some(param_env),\n-                                          ProjectionMode::AnyFinal);\n+\n+        let infcx = InferCtxt::new(self.tcx, &self.tcx.tables, Some(param_env),\n+                                   ProjectionMode::AnyFinal);\n \n         let (mir, scope_auxiliary) = f(Cx::new(&infcx, constness));\n "}, {"sha": "d8b570923bf4a3fd14fefc085445028dd0f0e8d9", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -19,7 +19,7 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::FnKind;\n use rustc::hir::map::blocks::FnLikeNode;\n-use rustc::infer;\n+use rustc::infer::InferCtxt;\n use rustc::traits::{self, ProjectionMode};\n use rustc::ty::{self, TyCtxt, Ty};\n use rustc::ty::cast::CastTy;\n@@ -1017,10 +1017,8 @@ impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n             // Statics must be Sync.\n             if mode == Mode::Static {\n                 let ty = mir.return_ty.unwrap();\n-                let infcx = infer::new_infer_ctxt(tcx,\n-                                                  &tcx.tables,\n-                                                  None,\n-                                                  ProjectionMode::AnyFinal);\n+                let infcx = InferCtxt::new(tcx, &tcx.tables, None,\n+                                           ProjectionMode::AnyFinal);\n                 let cause = traits::ObligationCause::new(mir.span, id, traits::SharedStatic);\n                 let mut fulfillment_cx = traits::FulfillmentContext::new();\n                 fulfillment_cx.register_builtin_bound(&infcx, ty, ty::BoundSync, cause);"}, {"sha": "03f4dd48834bf19f01433662d801ee2b7b6341ed", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -585,10 +585,8 @@ impl<'tcx> MirPass<'tcx> for TypeckMir {\n             return;\n         }\n         let param_env = ty::ParameterEnvironment::for_item(tcx, src.item_id());\n-        let infcx = infer::new_infer_ctxt(tcx,\n-                                          &tcx.tables,\n-                                          Some(param_env),\n-                                          ProjectionMode::AnyFinal);\n+        let infcx = InferCtxt::new(tcx, &tcx.tables, Some(param_env),\n+                                   ProjectionMode::AnyFinal);\n         let mut checker = TypeChecker::new(&infcx);\n         {\n             let mut verifier = TypeVerifier::new(&mut checker, mir);"}, {"sha": "111eaf7e4fcc6fac2f99dac889137a605d3bde7e", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -36,7 +36,7 @@ use rustc_const_math::{ConstMathErr, Op};\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::middle::expr_use_visitor as euv;\n-use rustc::infer;\n+use rustc::infer::InferCtxt;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -95,10 +95,8 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n             None => self.tcx.empty_parameter_environment()\n         };\n \n-        let infcx = infer::new_infer_ctxt(self.tcx,\n-                                          &self.tcx.tables,\n-                                          Some(param_env),\n-                                          ProjectionMode::AnyFinal);\n+        let infcx = InferCtxt::new(self.tcx, &self.tcx.tables, Some(param_env),\n+                                   ProjectionMode::AnyFinal);\n \n         f(&mut euv::ExprUseVisitor::new(self, &infcx))\n     }"}, {"sha": "c2c74a885760e9faddb824e641535d8a25c7c096", "filename": "src/librustc_passes/rvalues.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_passes%2Frvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_passes%2Frvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalues.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -13,7 +13,7 @@\n \n use rustc::dep_graph::DepNode;\n use rustc::middle::expr_use_visitor as euv;\n-use rustc::infer;\n+use rustc::infer::InferCtxt;\n use rustc::middle::mem_categorization as mc;\n use rustc::ty::{self, TyCtxt, ParameterEnvironment};\n use rustc::traits::ProjectionMode;\n@@ -42,10 +42,9 @@ impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for RvalueContext<'a, 'tcx> {\n         {\n             // FIXME (@jroesch) change this to be an inference context\n             let param_env = ParameterEnvironment::for_item(self.tcx, fn_id);\n-            let infcx = infer::new_infer_ctxt(self.tcx,\n-                                              &self.tcx.tables,\n-                                              Some(param_env.clone()),\n-                                              ProjectionMode::AnyFinal);\n+            let infcx = InferCtxt::new(self.tcx, &self.tcx.tables,\n+                                       Some(param_env.clone()),\n+                                       ProjectionMode::AnyFinal);\n             let mut delegate = RvalueContextDelegate { tcx: self.tcx, param_env: &param_env };\n             let mut euv = euv::ExprUseVisitor::new(&mut delegate, &infcx);\n             euv.walk_fn(fd, b);"}, {"sha": "a8c01aa664995d20bff1f66b3a4df3719f177af4", "filename": "src/librustc_trans/_match.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_trans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_trans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2F_match.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -194,7 +194,7 @@ use rustc_const_eval::{compare_lit_exprs, eval_const_expr};\n use rustc::hir::def::{Def, DefMap};\n use rustc::hir::def_id::DefId;\n use middle::expr_use_visitor as euv;\n-use rustc::infer;\n+use rustc::infer::InferCtxt;\n use middle::lang_items::StrEqFnLangItem;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Categorization;\n@@ -1467,9 +1467,8 @@ fn is_discr_reassigned(bcx: Block, discr: &hir::Expr, body: &hir::Expr) -> bool\n         reassigned: false\n     };\n     {\n-        let infcx = infer::normalizing_infer_ctxt(bcx.tcx(),\n-                                                  &bcx.tcx().tables,\n-                                                  ProjectionMode::Any);\n+        let infcx = InferCtxt::normalizing(bcx.tcx(), &bcx.tcx().tables,\n+                                           ProjectionMode::Any);\n         let mut visitor = euv::ExprUseVisitor::new(&mut rc, &infcx);\n         visitor.walk_expr(body);\n     }"}, {"sha": "0633dd95d59b355c4c9ca50c6a0be86cc8ec8a99", "filename": "src/librustc_trans/closure.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_trans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_trans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fclosure.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -12,7 +12,7 @@ use arena::TypedArena;\n use back::symbol_names;\n use llvm::{ValueRef, get_param, get_params};\n use rustc::hir::def_id::DefId;\n-use rustc::infer;\n+use rustc::infer::{self, InferCtxt};\n use rustc::traits::ProjectionMode;\n use abi::{Abi, FnType};\n use adt;\n@@ -155,7 +155,7 @@ fn get_or_create_closure_declaration<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let symbol = symbol_names::exported_name(ccx, &instance);\n \n     // Compute the rust-call form of the closure call method.\n-    let infcx = infer::normalizing_infer_ctxt(tcx, &tcx.tables, ProjectionMode::Any);\n+    let infcx = InferCtxt::normalizing(tcx, &tcx.tables, ProjectionMode::Any);\n     let sig = &infcx.closure_type(closure_id, &substs).sig;\n     let sig = tcx.erase_late_bound_regions(sig);\n     let sig = infer::normalize_associated_type(tcx, &sig);\n@@ -220,7 +220,7 @@ pub fn trans_closure_expr<'a, 'tcx>(dest: Dest<'a, 'tcx>,\n     // this function (`trans_closure`) is invoked at the point\n     // of the closure expression.\n \n-    let infcx = infer::normalizing_infer_ctxt(ccx.tcx(), &ccx.tcx().tables, ProjectionMode::Any);\n+    let infcx = InferCtxt::normalizing(ccx.tcx(), &ccx.tcx().tables, ProjectionMode::Any);\n     let function_type = infcx.closure_type(closure_def_id, closure_substs);\n \n     let sig = tcx.erase_late_bound_regions(&function_type.sig);\n@@ -344,7 +344,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n            closure_def_id, substs, Value(llreffn));\n \n     let tcx = ccx.tcx();\n-    let infcx = infer::normalizing_infer_ctxt(ccx.tcx(), &ccx.tcx().tables, ProjectionMode::Any);\n+    let infcx = InferCtxt::normalizing(ccx.tcx(), &ccx.tcx().tables, ProjectionMode::Any);\n \n     // Find a version of the closure type. Substitute static for the\n     // region since it doesn't really matter."}, {"sha": "8d44658c835f3804b7f577391ddc30f5d02c56df", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -19,7 +19,7 @@ use llvm::{True, False, Bool, OperandBundleDef};\n use rustc::cfg;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n-use rustc::infer;\n+use rustc::infer::{self, InferCtxt};\n use rustc::util::common::MemoizationMap;\n use middle::lang_items::LangItem;\n use rustc::ty::subst::Substs;\n@@ -1066,9 +1066,7 @@ pub fn fulfill_obligation<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n \n         // Do the initial selection for the obligation. This yields the\n         // shallow result we are looking for -- that is, what specific impl.\n-        let infcx = infer::normalizing_infer_ctxt(tcx,\n-                                                  &tcx.tables,\n-                                                  ProjectionMode::Any);\n+        let infcx = InferCtxt::normalizing(tcx, &tcx.tables, ProjectionMode::Any);\n         let mut selcx = SelectionContext::new(&infcx);\n \n         let obligation_cause = traits::ObligationCause::misc(span,\n@@ -1130,7 +1128,7 @@ pub fn normalize_and_test_predicates<'tcx>(tcx: &TyCtxt<'tcx>,\n     debug!(\"normalize_and_test_predicates(predicates={:?})\",\n            predicates);\n \n-    let infcx = infer::normalizing_infer_ctxt(tcx, &tcx.tables, ProjectionMode::Any);\n+    let infcx = InferCtxt::normalizing(tcx, &tcx.tables, ProjectionMode::Any);\n     let mut selcx = SelectionContext::new(&infcx);\n     let mut fulfill_cx = traits::FulfillmentContext::new();\n     let cause = traits::ObligationCause::dummy();"}, {"sha": "e82821f478f1a9d826556b04f2a30482a2ca6a81", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -18,8 +18,9 @@ use back::symbol_names;\n use llvm;\n use llvm::{ValueRef, get_param};\n use middle::lang_items::ExchangeFreeFnLangItem;\n+use rustc::infer::InferCtxt;\n use rustc::ty::subst::{Substs};\n-use rustc::{infer, traits};\n+use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt};\n use abi::{Abi, FnType};\n use adt;\n@@ -115,9 +116,9 @@ pub fn get_drop_glue_type<'tcx>(tcx: &TyCtxt<'tcx>,\n     match t.sty {\n         ty::TyBox(typ) if !type_needs_drop(&tcx, typ)\n                          && type_is_sized(tcx, typ) => {\n-            let infcx = infer::normalizing_infer_ctxt(tcx,\n-                                                      &tcx.tables,\n-                                                      traits::ProjectionMode::Any);\n+            let infcx = InferCtxt::normalizing(tcx,\n+                                               &tcx.tables,\n+                                               traits::ProjectionMode::Any);\n             let layout = t.layout(&infcx).unwrap();\n             if layout.size(&tcx.data_layout).bytes() == 0 {\n                 // `Box<ZeroSizeType>` does not allocate."}, {"sha": "c7606584cffb570d8adf25100e636f1e8234b453", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -14,7 +14,7 @@ use arena::TypedArena;\n use back::symbol_names;\n use llvm::{ValueRef, get_params};\n use rustc::hir::def_id::DefId;\n-use rustc::infer;\n+use rustc::infer::{self, InferCtxt};\n use rustc::ty::subst::{FnSpace, Subst, Substs};\n use rustc::ty::subst;\n use rustc::traits::{self, ProjectionMode};\n@@ -314,7 +314,7 @@ pub fn get_impl_method<'tcx>(tcx: &TyCtxt<'tcx>,\n \n     let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();\n     let trait_def = tcx.lookup_trait_def(trait_def_id);\n-    let infcx = infer::normalizing_infer_ctxt(tcx, &tcx.tables, ProjectionMode::Any);\n+    let infcx = InferCtxt::normalizing(tcx, &tcx.tables, ProjectionMode::Any);\n \n     match trait_def.ancestors(impl_def_id).fn_defs(tcx, name).next() {\n         Some(node_item) => {"}, {"sha": "13780148e978610adccc2c6bf6d43f85eabd342c", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -11,7 +11,7 @@\n #![allow(non_camel_case_types)]\n \n use rustc::hir::def_id::DefId;\n-use rustc::infer;\n+use rustc::infer::{self, InferCtxt};\n use rustc::ty::subst;\n use abi::FnType;\n use adt;\n@@ -124,7 +124,7 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n     cx.llsizingtypes().borrow_mut().insert(t, llsizingty);\n \n     // FIXME(eddyb) Temporary sanity check for ty::layout.\n-    let infcx = infer::normalizing_infer_ctxt(cx.tcx(), &cx.tcx().tables, ProjectionMode::Any);\n+    let infcx = InferCtxt::normalizing(cx.tcx(), &cx.tcx().tables, ProjectionMode::Any);\n     match t.layout(&infcx) {\n         Ok(layout) => {\n             if !type_is_sized(cx.tcx(), t) {"}, {"sha": "36944733dc8d86b6dd854f8097de9e9a7136411f", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use middle::free_region::FreeRegionMap;\n-use rustc::infer::{self, InferOk, TypeOrigin};\n+use rustc::infer::{self, InferCtxt, InferOk, TypeOrigin};\n use rustc::ty::{self, TyCtxt};\n use rustc::traits::{self, ProjectionMode};\n use rustc::ty::subst::{self, Subst, Substs, VecPerParamSpace};\n@@ -42,7 +42,7 @@ pub fn compare_impl_method<'tcx>(tcx: &TyCtxt<'tcx>,\n     debug!(\"compare_impl_method: impl_trait_ref (liberated) = {:?}\",\n            impl_trait_ref);\n \n-    let mut infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None, ProjectionMode::AnyFinal);\n+    let mut infcx = InferCtxt::new(tcx, &tcx.tables, None, ProjectionMode::AnyFinal);\n     let mut fulfillment_cx = traits::FulfillmentContext::new();\n \n     let trait_to_impl_substs = &impl_trait_ref.substs;\n@@ -416,7 +416,7 @@ pub fn compare_const_impl<'tcx>(tcx: &TyCtxt<'tcx>,\n     debug!(\"compare_const_impl(impl_trait_ref={:?})\",\n            impl_trait_ref);\n \n-    let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None, ProjectionMode::AnyFinal);\n+    let infcx = InferCtxt::new(tcx, &tcx.tables, None, ProjectionMode::AnyFinal);\n     let mut fulfillment_cx = traits::FulfillmentContext::new();\n \n     // The below is for the most part highly similar to the procedure"}, {"sha": "2e2b3686f8513bfd755900fcf8860fd90c47a161", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -12,7 +12,7 @@ use check::regionck::{self, Rcx};\n \n use hir::def_id::DefId;\n use middle::free_region::FreeRegionMap;\n-use rustc::infer;\n+use rustc::infer::{self, InferCtxt};\n use middle::region;\n use rustc::ty::subst::{self, Subst};\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -82,10 +82,8 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n     // check that the impl type can be made to match the trait type.\n \n     let impl_param_env = ty::ParameterEnvironment::for_item(tcx, self_type_node_id);\n-    let infcx = infer::new_infer_ctxt(tcx,\n-                                      &tcx.tables,\n-                                      Some(impl_param_env),\n-                                      ProjectionMode::AnyFinal);\n+    let infcx = InferCtxt::new(tcx, &tcx.tables, Some(impl_param_env),\n+                               ProjectionMode::AnyFinal);\n     let mut fulfillment_cx = traits::FulfillmentContext::new();\n \n     let named_type = tcx.lookup_item_type(self_type_did).ty;"}, {"sha": "2ad64e448704d5412da886901aad0974315b2539", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -88,7 +88,7 @@ use middle::astconv_util::prohibit_type_params;\n use middle::cstore::LOCAL_CRATE;\n use hir::def::{self, Def};\n use hir::def_id::DefId;\n-use rustc::infer::{self, InferOk, TypeOrigin, TypeTrace, type_variable};\n+use rustc::infer::{self, InferCtxt, InferOk, TypeOrigin, TypeTrace, type_variable};\n use hir::pat_util::{self, pat_id_map};\n use rustc::ty::subst::{self, Subst, Substs, VecPerParamSpace, ParamSpace};\n use rustc::traits::{self, report_fulfillment_errors, ProjectionMode};\n@@ -156,7 +156,7 @@ mod op;\n /// `bar()` will each have their own `FnCtxt`, but they will\n /// share the inherited fields.\n pub struct Inherited<'a, 'tcx: 'a> {\n-    infcx: infer::InferCtxt<'a, 'tcx>,\n+    infcx: InferCtxt<'a, 'tcx>,\n     locals: RefCell<NodeMap<Ty<'tcx>>>,\n \n     fulfillment_cx: RefCell<traits::FulfillmentContext<'tcx>>,\n@@ -305,7 +305,7 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n            -> Inherited<'a, 'tcx> {\n \n         Inherited {\n-            infcx: infer::new_infer_ctxt(tcx, tables, Some(param_env), ProjectionMode::AnyFinal),\n+            infcx: InferCtxt::new(tcx, tables, Some(param_env), ProjectionMode::AnyFinal),\n             fulfillment_cx: RefCell::new(traits::FulfillmentContext::new()),\n             locals: RefCell::new(NodeMap()),\n             tables: tables,\n@@ -1190,7 +1190,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn tcx(&self) -> &TyCtxt<'tcx> { self.ccx.tcx }\n \n-    pub fn infcx(&self) -> &infer::InferCtxt<'a,'tcx> {\n+    pub fn infcx(&self) -> &InferCtxt<'a,'tcx> {\n         &self.inh.infcx\n     }\n "}, {"sha": "c37504f29549d4e5f31a739e99238e8dff4b1a37", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -31,7 +31,7 @@ use rustc::ty::TyProjection;\n use rustc::ty::util::CopyImplementationError;\n use middle::free_region::FreeRegionMap;\n use CrateCtxt;\n-use rustc::infer::{self, InferCtxt, TypeOrigin, new_infer_ctxt};\n+use rustc::infer::{self, InferCtxt, TypeOrigin};\n use std::cell::RefCell;\n use std::rc::Rc;\n use syntax::codemap::Span;\n@@ -379,7 +379,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n             debug!(\"check_implementations_of_coerce_unsized: {:?} -> {:?} (free)\",\n                    source, target);\n \n-            let infcx = new_infer_ctxt(tcx, &tcx.tables, Some(param_env), ProjectionMode::Topmost);\n+            let infcx = InferCtxt::new(tcx, &tcx.tables, Some(param_env), ProjectionMode::Topmost);\n \n             let origin = TypeOrigin::Misc(span);\n             let check_mutbl = |mt_a: ty::TypeAndMut<'tcx>, mt_b: ty::TypeAndMut<'tcx>,\n@@ -516,7 +516,7 @@ fn enforce_trait_manually_implementable(tcx: &TyCtxt, sp: Span, trait_def_id: De\n \n pub fn check_coherence(crate_context: &CrateCtxt) {\n     let _task = crate_context.tcx.dep_graph.in_task(DepNode::Coherence);\n-    let infcx = new_infer_ctxt(crate_context.tcx,\n+    let infcx = InferCtxt::new(crate_context.tcx,\n                                &crate_context.tcx.tables,\n                                None,\n                                ProjectionMode::Topmost);"}, {"sha": "8284e8717b9f56c16143b9ed4bc753d4f90e5b26", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -14,7 +14,7 @@\n \n use hir::def_id::DefId;\n use rustc::traits::{self, ProjectionMode};\n-use rustc::infer;\n+use rustc::infer::InferCtxt;\n use rustc::ty::{self, TyCtxt};\n use syntax::ast;\n use rustc::dep_graph::DepNode;\n@@ -84,10 +84,8 @@ impl<'cx, 'tcx> OverlapChecker<'cx, 'tcx> {\n \n         for (i, &impl1_def_id) in impls.iter().enumerate() {\n             for &impl2_def_id in &impls[(i+1)..] {\n-                let infcx = infer::new_infer_ctxt(self.tcx,\n-                                                  &self.tcx.tables,\n-                                                  None,\n-                                                  ProjectionMode::Topmost);\n+                let infcx = InferCtxt::new(self.tcx, &self.tcx.tables, None,\n+                                           ProjectionMode::Topmost);\n                 if traits::overlapping_impls(&infcx, impl1_def_id, impl2_def_id).is_some() {\n                     self.check_for_common_items_in_impls(impl1_def_id, impl2_def_id)\n                 }"}, {"sha": "7e298c63ccce5190b42c201a9842ca1573b99e16", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0907c198c46e7c3ceefe42855f933a29bc5e085a/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=0907c198c46e7c3ceefe42855f933a29bc5e085a", "patch": "@@ -104,7 +104,7 @@ pub use rustc::util;\n use dep_graph::DepNode;\n use hir::map as hir_map;\n use hir::def::Def;\n-use rustc::infer::{self, TypeOrigin};\n+use rustc::infer::{self, InferCtxt, TypeOrigin};\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::traits::ProjectionMode;\n@@ -197,7 +197,7 @@ fn require_same_types<'a, 'tcx>(tcx: &TyCtxt<'tcx>,\n {\n     let result = match maybe_infcx {\n         None => {\n-            let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None, ProjectionMode::AnyFinal);\n+            let infcx = InferCtxt::new(tcx, &tcx.tables, None, ProjectionMode::AnyFinal);\n             infer::mk_eqty(&infcx, t1_is_expected, TypeOrigin::Misc(span), t1, t2)\n         }\n         Some(infcx) => {"}]}