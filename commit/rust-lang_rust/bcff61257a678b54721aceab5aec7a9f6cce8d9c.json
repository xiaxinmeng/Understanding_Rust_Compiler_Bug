{"sha": "bcff61257a678b54721aceab5aec7a9f6cce8d9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZmY2MTI1N2E2NzhiNTQ3MjFhY2VhYjVhZWM3YTlmNmNjZThkOWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-19T20:46:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-19T20:46:50Z"}, "message": "Add firewall query to lang items\n\nWith an intermediate query, changing one module won't cause reparsing\nof all modules", "tree": {"sha": "14f44671957899321b7187540a62bda40ee6bb29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14f44671957899321b7187540a62bda40ee6bb29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcff61257a678b54721aceab5aec7a9f6cce8d9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcff61257a678b54721aceab5aec7a9f6cce8d9c", "html_url": "https://github.com/rust-lang/rust/commit/bcff61257a678b54721aceab5aec7a9f6cce8d9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcff61257a678b54721aceab5aec7a9f6cce8d9c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09864b3b217e2ad6ca8630af6faaaefd8d14e860", "url": "https://api.github.com/repos/rust-lang/rust/commits/09864b3b217e2ad6ca8630af6faaaefd8d14e860", "html_url": "https://github.com/rust-lang/rust/commit/09864b3b217e2ad6ca8630af6faaaefd8d14e860"}], "stats": {"total": 55, "additions": 38, "deletions": 17}, "files": [{"sha": "ebbc37c0e537f60c139c046b3765b37693c3e914", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcff61257a678b54721aceab5aec7a9f6cce8d9c/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcff61257a678b54721aceab5aec7a9f6cce8d9c/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=bcff61257a678b54721aceab5aec7a9f6cce8d9c", "patch": "@@ -282,7 +282,7 @@ impl Module {\n             .collect()\n     }\n \n-    pub fn impl_blocks(self, db: &impl HirDatabase) -> Vec<ImplBlock> {\n+    pub fn impl_blocks(self, db: &impl DefDatabase) -> Vec<ImplBlock> {\n         let module_impl_blocks = db.impls_in_module(self);\n         module_impl_blocks\n             .impls"}, {"sha": "d8832a9dea3450171646920c8147f724caaef679", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcff61257a678b54721aceab5aec7a9f6cce8d9c/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcff61257a678b54721aceab5aec7a9f6cce8d9c/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=bcff61257a678b54721aceab5aec7a9f6cce8d9c", "patch": "@@ -121,6 +121,9 @@ pub trait DefDatabase: SourceDatabase {\n     #[salsa::invoke(crate::ConstData::static_data_query)]\n     fn static_data(&self, konst: Static) -> Arc<ConstData>;\n \n+    #[salsa::invoke(crate::lang_item::LangItems::module_lang_items_query)]\n+    fn module_lang_items(&self, module: Module) -> Option<Arc<LangItems>>;\n+\n     #[salsa::invoke(crate::lang_item::LangItems::lang_items_query)]\n     fn lang_items(&self, krate: Crate) -> Arc<LangItems>;\n "}, {"sha": "48b60f2dde03ab6a7f21e50e7043257a88cdbf85", "filename": "crates/ra_hir/src/lang_item.rs", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/bcff61257a678b54721aceab5aec7a9f6cce8d9c/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcff61257a678b54721aceab5aec7a9f6cce8d9c/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flang_item.rs?ref=bcff61257a678b54721aceab5aec7a9f6cce8d9c", "patch": "@@ -31,7 +31,7 @@ impl LangItemTarget {\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n+#[derive(Default, Debug, Clone, PartialEq, Eq)]\n pub struct LangItems {\n     items: FxHashMap<SmolStr, LangItemTarget>,\n }\n@@ -46,15 +46,28 @@ impl LangItems {\n         db: &(impl DefDatabase + AstDatabase),\n         krate: Crate,\n     ) -> Arc<LangItems> {\n-        let mut lang_items = LangItems { items: FxHashMap::default() };\n+        let mut lang_items = LangItems::default();\n \n         if let Some(module) = krate.root_module(db) {\n-            lang_items.collect_lang_items_recursive(db, &module);\n+            lang_items.collect_lang_items_recursive(db, module);\n         }\n \n         Arc::new(lang_items)\n     }\n \n+    pub(crate) fn module_lang_items_query(\n+        db: &(impl DefDatabase + AstDatabase),\n+        module: Module,\n+    ) -> Option<Arc<LangItems>> {\n+        let mut lang_items = LangItems::default();\n+        lang_items.collect_lang_items(db, module);\n+        if lang_items.items.is_empty() {\n+            None\n+        } else {\n+            Some(Arc::new(lang_items))\n+        }\n+    }\n+\n     /// Salsa query. Look for a lang item, starting from the specified crate and recursively\n     /// traversing its dependencies.\n     pub(crate) fn lang_item_query(\n@@ -78,19 +91,14 @@ impl LangItems {\n         }\n     }\n \n-    fn collect_lang_items_recursive(\n-        &mut self,\n-        db: &(impl DefDatabase + AstDatabase),\n-        module: &Module,\n-    ) {\n+    fn collect_lang_items(&mut self, db: &(impl DefDatabase + AstDatabase), module: Module) {\n         // Look for impl targets\n-        let (impl_blocks, source_map) = db.impls_in_module_with_source_map(module.clone());\n-        let source = module.definition_source(db).ast;\n-        for (impl_id, _) in impl_blocks.impls.iter() {\n-            let impl_block = source_map.get(&source, impl_id);\n-            if let Some(lang_item_name) = lang_item_name(&*impl_block) {\n-                let imp = ImplBlock::from_id(*module, impl_id);\n-                self.items.entry(lang_item_name).or_insert_with(|| LangItemTarget::ImplBlock(imp));\n+        for impl_block in module.impl_blocks(db) {\n+            let src = impl_block.source(db);\n+            if let Some(lang_item_name) = lang_item_name(&*src.ast) {\n+                self.items\n+                    .entry(lang_item_name)\n+                    .or_insert_with(|| LangItemTarget::ImplBlock(impl_block));\n             }\n         }\n \n@@ -106,10 +114,20 @@ impl LangItems {\n                 _ => {}\n             }\n         }\n+    }\n+\n+    fn collect_lang_items_recursive(\n+        &mut self,\n+        db: &(impl DefDatabase + AstDatabase),\n+        module: Module,\n+    ) {\n+        if let Some(module_lang_items) = db.module_lang_items(module) {\n+            self.items.extend(module_lang_items.items.iter().map(|(k, v)| (k.clone(), v.clone())))\n+        }\n \n         // Look for lang items in the children\n         for child in module.children(db) {\n-            self.collect_lang_items_recursive(db, &child);\n+            self.collect_lang_items_recursive(db, child);\n         }\n     }\n "}]}