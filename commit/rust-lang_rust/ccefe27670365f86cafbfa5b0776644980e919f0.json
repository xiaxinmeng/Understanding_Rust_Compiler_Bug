{"sha": "ccefe27670365f86cafbfa5b0776644980e919f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZWZlMjc2NzAzNjVmODZjYWZiZmE1YjA3NzY2NDQ5ODBlOTE5ZjA=", "commit": {"author": {"name": "L\u00e9o Lanteri Thauvin", "email": "leseulartichaut@gmail.com", "date": "2021-08-25T13:48:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-25T13:48:47Z"}, "message": "Rollup merge of #87944 - oconnor663:as_array_of_cells, r=scottmcm\n\nadd Cell::as_array_of_cells, similar to Cell::as_slice_of_cells\n\nI'd like to propose adding `Cell::as_array_of_cells`, as a natural analog to `Cell::as_slice_of_cells`. I don't have a specific use case in mind, other than that supporting slices but not arrays feels like a gap. Do other folks agree with that intuition? Would this addition be substantial enough to need an RFC?\n\n---\n\nPreviously, converting `&mut [T; N]` to `&[Cell<T>; N]` looks like this:\n\n```rust\nlet array = &mut [1, 2, 3];\nlet cells: &[Cell<i32>; 3] = Cell::from_mut(&mut array[..])\n    .as_slice_of_cells()\n    .try_into()\n    .unwrap();\n```\n\nWith this new helper method, it looks like this:\n\n```rust\nlet array = &mut [1, 2, 3];\nlet cells = Cell::from_mut(array).as_array_of_cells();\n```", "tree": {"sha": "47411110f6a2ed3abbdf52d0437d0d2832a86384", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47411110f6a2ed3abbdf52d0437d0d2832a86384"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccefe27670365f86cafbfa5b0776644980e919f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhJko/CRBK7hj4Ov3rIwAAYqwIAE/QY30OHyUAxeB4NyvEgGG5\nBlLyEqvKibc1p4Nv4+GrGM9M94+LqOrckxg0/98ucYjygevrqRlL/h58yp0Mfg6a\nF+QjWVDv99WntbqMuASzHT5abirqdeOMrlfvQ8FNr3UdEmvvT83tbEn0T27e1gT+\nvvscUK7ZK3HgKD8Kjc3/Q7CgSzYiZxz3MO8VjCFOCnW1hrysq7riB8lSS+VlDk6A\nKr61M1CgkRD/u9oRZtvinGUKmmTNztKjiWJaAVLsa6czhVmItd4GL/czLajCpJDk\nbllpv+z/zxIvpOQ0KwH7fxb858LQZsP2pYEC7w7xeG5h58BBxxygi/F0uTVf3Y4=\n=dJGi\n-----END PGP SIGNATURE-----\n", "payload": "tree 47411110f6a2ed3abbdf52d0437d0d2832a86384\nparent 958d788a0b0cac81a0150c277b84746798f97b7d\nparent 9c44d80c83eb250594ecad05ea5340e0b51af525\nauthor L\u00e9o Lanteri Thauvin <leseulartichaut@gmail.com> 1629899327 +0200\ncommitter GitHub <noreply@github.com> 1629899327 +0200\n\nRollup merge of #87944 - oconnor663:as_array_of_cells, r=scottmcm\n\nadd Cell::as_array_of_cells, similar to Cell::as_slice_of_cells\n\nI'd like to propose adding `Cell::as_array_of_cells`, as a natural analog to `Cell::as_slice_of_cells`. I don't have a specific use case in mind, other than that supporting slices but not arrays feels like a gap. Do other folks agree with that intuition? Would this addition be substantial enough to need an RFC?\n\n---\n\nPreviously, converting `&mut [T; N]` to `&[Cell<T>; N]` looks like this:\n\n```rust\nlet array = &mut [1, 2, 3];\nlet cells: &[Cell<i32>; 3] = Cell::from_mut(&mut array[..])\n    .as_slice_of_cells()\n    .try_into()\n    .unwrap();\n```\n\nWith this new helper method, it looks like this:\n\n```rust\nlet array = &mut [1, 2, 3];\nlet cells = Cell::from_mut(array).as_array_of_cells();\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccefe27670365f86cafbfa5b0776644980e919f0", "html_url": "https://github.com/rust-lang/rust/commit/ccefe27670365f86cafbfa5b0776644980e919f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccefe27670365f86cafbfa5b0776644980e919f0/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "958d788a0b0cac81a0150c277b84746798f97b7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/958d788a0b0cac81a0150c277b84746798f97b7d", "html_url": "https://github.com/rust-lang/rust/commit/958d788a0b0cac81a0150c277b84746798f97b7d"}, {"sha": "9c44d80c83eb250594ecad05ea5340e0b51af525", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c44d80c83eb250594ecad05ea5340e0b51af525", "html_url": "https://github.com/rust-lang/rust/commit/9c44d80c83eb250594ecad05ea5340e0b51af525"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "85b43f48847608a4708b2464ce71ba5d4c3d66ac", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ccefe27670365f86cafbfa5b0776644980e919f0/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccefe27670365f86cafbfa5b0776644980e919f0/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=ccefe27670365f86cafbfa5b0776644980e919f0", "patch": "@@ -576,6 +576,26 @@ impl<T> Cell<[T]> {\n     }\n }\n \n+impl<T, const N: usize> Cell<[T; N]> {\n+    /// Returns a `&[Cell<T>; N]` from a `&Cell<[T; N]>`\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(as_array_of_cells)]\n+    /// use std::cell::Cell;\n+    ///\n+    /// let mut array: [i32; 3] = [1, 2, 3];\n+    /// let cell_array: &Cell<[i32; 3]> = Cell::from_mut(&mut array);\n+    /// let array_cell: &[Cell<i32>; 3] = cell_array.as_array_of_cells();\n+    /// ```\n+    #[unstable(feature = \"as_array_of_cells\", issue = \"88248\")]\n+    pub fn as_array_of_cells(&self) -> &[Cell<T>; N] {\n+        // SAFETY: `Cell<T>` has the same memory layout as `T`.\n+        unsafe { &*(self as *const Cell<[T; N]> as *const [Cell<T>; N]) }\n+    }\n+}\n+\n /// A mutable memory location with dynamically checked borrow rules\n ///\n /// See the [module-level documentation](self) for more."}, {"sha": "329fadb150fcd9586e5f39e60e5f34e881ced254", "filename": "src/test/ui/rfcs/rfc-1789-as-cell/from-mut.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ccefe27670365f86cafbfa5b0776644980e919f0/src%2Ftest%2Fui%2Frfcs%2Frfc-1789-as-cell%2Ffrom-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccefe27670365f86cafbfa5b0776644980e919f0/src%2Ftest%2Fui%2Frfcs%2Frfc-1789-as-cell%2Ffrom-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-1789-as-cell%2Ffrom-mut.rs?ref=ccefe27670365f86cafbfa5b0776644980e919f0", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n \n+#![feature(as_array_of_cells)]\n+\n use std::cell::Cell;\n \n fn main() {\n@@ -8,4 +10,11 @@ fn main() {\n     let slice_cell: &[Cell<i32>] = cell_slice.as_slice_of_cells();\n \n     assert_eq!(slice_cell.len(), 3);\n+\n+    let mut array: [i32; 3] = [1, 2, 3];\n+    let cell_array: &Cell<[i32; 3]> = Cell::from_mut(&mut array);\n+    let array_cell: &[Cell<i32>; 3] = cell_array.as_array_of_cells();\n+\n+    array_cell[0].set(99);\n+    assert_eq!(array, [99, 2, 3]);\n }"}]}