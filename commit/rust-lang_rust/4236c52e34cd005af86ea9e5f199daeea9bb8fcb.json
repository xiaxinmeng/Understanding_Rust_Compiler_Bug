{"sha": "4236c52e34cd005af86ea9e5f199daeea9bb8fcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMzZjNTJlMzRjZDAwNWFmODZlYTllNWYxOTlkYWVlYTliYjhmY2I=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-05T19:39:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-05T19:39:52Z"}, "message": "std: Move Atomic{Int,Uint} back to unstable\n\nThe int/uint story is under heavy development, and these types are likely to be\nrenamed.", "tree": {"sha": "7abcc4cc13abae30ba5a5a99cdda48f3b25ebb43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7abcc4cc13abae30ba5a5a99cdda48f3b25ebb43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4236c52e34cd005af86ea9e5f199daeea9bb8fcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4236c52e34cd005af86ea9e5f199daeea9bb8fcb", "html_url": "https://github.com/rust-lang/rust/commit/4236c52e34cd005af86ea9e5f199daeea9bb8fcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4236c52e34cd005af86ea9e5f199daeea9bb8fcb/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc246ae0188500c2e3c62704aa9f8b2f02fd586c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc246ae0188500c2e3c62704aa9f8b2f02fd586c", "html_url": "https://github.com/rust-lang/rust/commit/dc246ae0188500c2e3c62704aa9f8b2f02fd586c"}], "stats": {"total": 30, "additions": 6, "deletions": 24}, "files": [{"sha": "15c20253c8bc78b1c739b28c14215e9484886455", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4236c52e34cd005af86ea9e5f199daeea9bb8fcb/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4236c52e34cd005af86ea9e5f199daeea9bb8fcb/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=4236c52e34cd005af86ea9e5f199daeea9bb8fcb", "patch": "@@ -86,15 +86,15 @@ pub struct AtomicBool {\n unsafe impl Sync for AtomicBool {}\n \n /// A signed integer type which can be safely shared between threads.\n-#[stable]\n+#[unstable = \"awaiting int/uint conventions, may be renamed\"]\n pub struct AtomicInt {\n     v: UnsafeCell<int>,\n }\n \n unsafe impl Sync for AtomicInt {}\n \n /// An unsigned integer type which can be safely shared between threads.\n-#[stable]\n+#[unstable = \"awaiting int/uint conventions, may be renamed\"]\n pub struct AtomicUint {\n     v: UnsafeCell<uint>,\n }\n@@ -150,11 +150,11 @@ pub enum Ordering {\n pub const ATOMIC_BOOL_INIT: AtomicBool =\n         AtomicBool { v: UnsafeCell { value: 0 } };\n /// An `AtomicInt` initialized to `0`.\n-#[stable]\n+#[unstable = \"awaiting int/uint conventions, may be renamed\"]\n pub const ATOMIC_INT_INIT: AtomicInt =\n         AtomicInt { v: UnsafeCell { value: 0 } };\n /// An `AtomicUint` initialized to `0`.\n-#[stable]\n+#[unstable = \"awaiting int/uint conventions, may be renamed\"]\n pub const ATOMIC_UINT_INIT: AtomicUint =\n         AtomicUint { v: UnsafeCell { value: 0, } };\n \n@@ -403,6 +403,7 @@ impl AtomicBool {\n     }\n }\n \n+#[unstable = \"awaiting int/uint conventions, types may change\"]\n impl AtomicInt {\n     /// Creates a new `AtomicInt`.\n     ///\n@@ -414,7 +415,6 @@ impl AtomicInt {\n     /// let atomic_forty_two  = AtomicInt::new(42);\n     /// ```\n     #[inline]\n-    #[stable]\n     pub fn new(v: int) -> AtomicInt {\n         AtomicInt {v: UnsafeCell::new(v)}\n     }\n@@ -437,7 +437,6 @@ impl AtomicInt {\n     /// let value = some_int.load(Ordering::Relaxed);\n     /// ```\n     #[inline]\n-    #[stable]\n     pub fn load(&self, order: Ordering) -> int {\n         unsafe { atomic_load(self.v.get() as *const int, order) }\n     }\n@@ -460,7 +459,6 @@ impl AtomicInt {\n     ///\n     /// Panics if `order` is `Acquire` or `AcqRel`.\n     #[inline]\n-    #[stable]\n     pub fn store(&self, val: int, order: Ordering) {\n         unsafe { atomic_store(self.v.get(), val, order); }\n     }\n@@ -479,7 +477,6 @@ impl AtomicInt {\n     /// let value = some_int.swap(10, Ordering::Relaxed);\n     /// ```\n     #[inline]\n-    #[stable]\n     pub fn swap(&self, val: int, order: Ordering) -> int {\n         unsafe { atomic_swap(self.v.get(), val, order) }\n     }\n@@ -501,7 +498,6 @@ impl AtomicInt {\n     /// let value = some_int.compare_and_swap(5, 10, Ordering::Relaxed);\n     /// ```\n     #[inline]\n-    #[stable]\n     pub fn compare_and_swap(&self, old: int, new: int, order: Ordering) -> int {\n         unsafe { atomic_compare_and_swap(self.v.get(), old, new, order) }\n     }\n@@ -518,7 +514,6 @@ impl AtomicInt {\n     /// assert_eq!(10, foo.load(Ordering::SeqCst));\n     /// ```\n     #[inline]\n-    #[stable]\n     pub fn fetch_add(&self, val: int, order: Ordering) -> int {\n         unsafe { atomic_add(self.v.get(), val, order) }\n     }\n@@ -535,7 +530,6 @@ impl AtomicInt {\n     /// assert_eq!(-10, foo.load(Ordering::SeqCst));\n     /// ```\n     #[inline]\n-    #[stable]\n     pub fn fetch_sub(&self, val: int, order: Ordering) -> int {\n         unsafe { atomic_sub(self.v.get(), val, order) }\n     }\n@@ -551,7 +545,6 @@ impl AtomicInt {\n     /// assert_eq!(0b101101, foo.fetch_and(0b110011, Ordering::SeqCst));\n     /// assert_eq!(0b100001, foo.load(Ordering::SeqCst));\n     #[inline]\n-    #[stable]\n     pub fn fetch_and(&self, val: int, order: Ordering) -> int {\n         unsafe { atomic_and(self.v.get(), val, order) }\n     }\n@@ -567,7 +560,6 @@ impl AtomicInt {\n     /// assert_eq!(0b101101, foo.fetch_or(0b110011, Ordering::SeqCst));\n     /// assert_eq!(0b111111, foo.load(Ordering::SeqCst));\n     #[inline]\n-    #[stable]\n     pub fn fetch_or(&self, val: int, order: Ordering) -> int {\n         unsafe { atomic_or(self.v.get(), val, order) }\n     }\n@@ -583,12 +575,12 @@ impl AtomicInt {\n     /// assert_eq!(0b101101, foo.fetch_xor(0b110011, Ordering::SeqCst));\n     /// assert_eq!(0b011110, foo.load(Ordering::SeqCst));\n     #[inline]\n-    #[stable]\n     pub fn fetch_xor(&self, val: int, order: Ordering) -> int {\n         unsafe { atomic_xor(self.v.get(), val, order) }\n     }\n }\n \n+#[unstable = \"awaiting int/uint conventions, types may change\"]\n impl AtomicUint {\n     /// Creates a new `AtomicUint`.\n     ///\n@@ -600,7 +592,6 @@ impl AtomicUint {\n     /// let atomic_forty_two = AtomicUint::new(42u);\n     /// ```\n     #[inline]\n-    #[stable]\n     pub fn new(v: uint) -> AtomicUint {\n         AtomicUint { v: UnsafeCell::new(v) }\n     }\n@@ -623,7 +614,6 @@ impl AtomicUint {\n     /// let value = some_uint.load(Ordering::Relaxed);\n     /// ```\n     #[inline]\n-    #[stable]\n     pub fn load(&self, order: Ordering) -> uint {\n         unsafe { atomic_load(self.v.get() as *const uint, order) }\n     }\n@@ -646,7 +636,6 @@ impl AtomicUint {\n     ///\n     /// Panics if `order` is `Acquire` or `AcqRel`.\n     #[inline]\n-    #[stable]\n     pub fn store(&self, val: uint, order: Ordering) {\n         unsafe { atomic_store(self.v.get(), val, order); }\n     }\n@@ -665,7 +654,6 @@ impl AtomicUint {\n     /// let value = some_uint.swap(10, Ordering::Relaxed);\n     /// ```\n     #[inline]\n-    #[stable]\n     pub fn swap(&self, val: uint, order: Ordering) -> uint {\n         unsafe { atomic_swap(self.v.get(), val, order) }\n     }\n@@ -687,7 +675,6 @@ impl AtomicUint {\n     /// let value = some_uint.compare_and_swap(5, 10, Ordering::Relaxed);\n     /// ```\n     #[inline]\n-    #[stable]\n     pub fn compare_and_swap(&self, old: uint, new: uint, order: Ordering) -> uint {\n         unsafe { atomic_compare_and_swap(self.v.get(), old, new, order) }\n     }\n@@ -704,7 +691,6 @@ impl AtomicUint {\n     /// assert_eq!(10, foo.load(Ordering::SeqCst));\n     /// ```\n     #[inline]\n-    #[stable]\n     pub fn fetch_add(&self, val: uint, order: Ordering) -> uint {\n         unsafe { atomic_add(self.v.get(), val, order) }\n     }\n@@ -721,7 +707,6 @@ impl AtomicUint {\n     /// assert_eq!(0, foo.load(Ordering::SeqCst));\n     /// ```\n     #[inline]\n-    #[stable]\n     pub fn fetch_sub(&self, val: uint, order: Ordering) -> uint {\n         unsafe { atomic_sub(self.v.get(), val, order) }\n     }\n@@ -737,7 +722,6 @@ impl AtomicUint {\n     /// assert_eq!(0b101101, foo.fetch_and(0b110011, Ordering::SeqCst));\n     /// assert_eq!(0b100001, foo.load(Ordering::SeqCst));\n     #[inline]\n-    #[stable]\n     pub fn fetch_and(&self, val: uint, order: Ordering) -> uint {\n         unsafe { atomic_and(self.v.get(), val, order) }\n     }\n@@ -753,7 +737,6 @@ impl AtomicUint {\n     /// assert_eq!(0b101101, foo.fetch_or(0b110011, Ordering::SeqCst));\n     /// assert_eq!(0b111111, foo.load(Ordering::SeqCst));\n     #[inline]\n-    #[stable]\n     pub fn fetch_or(&self, val: uint, order: Ordering) -> uint {\n         unsafe { atomic_or(self.v.get(), val, order) }\n     }\n@@ -769,7 +752,6 @@ impl AtomicUint {\n     /// assert_eq!(0b101101, foo.fetch_xor(0b110011, Ordering::SeqCst));\n     /// assert_eq!(0b011110, foo.load(Ordering::SeqCst));\n     #[inline]\n-    #[stable]\n     pub fn fetch_xor(&self, val: uint, order: Ordering) -> uint {\n         unsafe { atomic_xor(self.v.get(), val, order) }\n     }"}]}