{"sha": "8b776834a447f6c346130172e9d6d492b3b4e77d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNzc2ODM0YTQ0N2Y2YzM0NjEzMDE3MmU5ZDZkNDkyYjNiNGU3N2Q=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2016-02-01T10:04:49Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2016-02-08T10:12:31Z"}, "message": "Implement OwnedBuilder and BlockAndBuilder", "tree": {"sha": "9a200917eabee3718c3ebdb7a81866bd0c72c6f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a200917eabee3718c3ebdb7a81866bd0c72c6f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b776834a447f6c346130172e9d6d492b3b4e77d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b776834a447f6c346130172e9d6d492b3b4e77d", "html_url": "https://github.com/rust-lang/rust/commit/8b776834a447f6c346130172e9d6d492b3b4e77d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b776834a447f6c346130172e9d6d492b3b4e77d/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fce5037a9040a3443f796c577b88d50ca5846a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fce5037a9040a3443f796c577b88d50ca5846a0", "html_url": "https://github.com/rust-lang/rust/commit/7fce5037a9040a3443f796c577b88d50ca5846a0"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "a23d879bba92493f74522e4c81f3a0e3f60bd1e8", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/8b776834a447f6c346130172e9d6d492b3b4e77d/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b776834a447f6c346130172e9d6d492b3b4e77d/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=8b776834a447f6c346130172e9d6d492b3b4e77d", "patch": "@@ -26,6 +26,7 @@ use middle::lang_items::LangItem;\n use middle::subst::{self, Substs};\n use trans::base;\n use trans::build;\n+use trans::builder::Builder;\n use trans::callee;\n use trans::cleanup;\n use trans::consts;\n@@ -45,6 +46,7 @@ use util::nodemap::{FnvHashMap, NodeMap};\n \n use arena::TypedArena;\n use libc::{c_uint, c_char};\n+use std::ops::Deref;\n use std::ffi::CString;\n use std::cell::{Cell, RefCell};\n use std::vec::Vec;\n@@ -613,6 +615,9 @@ impl<'blk, 'tcx> BlockS<'blk, 'tcx> {\n     pub fn ccx(&self) -> &'blk CrateContext<'blk, 'tcx> {\n         self.fcx.ccx\n     }\n+    pub fn fcx(&self) -> &'blk FunctionContext<'blk, 'tcx> {\n+        self.fcx\n+    }\n     pub fn tcx(&self) -> &'blk ty::ctxt<'tcx> {\n         self.fcx.ccx.tcx()\n     }\n@@ -659,6 +664,109 @@ impl<'blk, 'tcx> BlockS<'blk, 'tcx> {\n                                          self.fcx.param_substs,\n                                          value)\n     }\n+\n+    pub fn build(&'blk self) -> BlockAndBuilder<'blk, 'tcx> {\n+        BlockAndBuilder::new(self, OwnedBuilder::new_with_ccx(self.ccx()))\n+    }\n+}\n+\n+pub struct OwnedBuilder<'blk, 'tcx: 'blk> {\n+    builder: Builder<'blk, 'tcx>\n+}\n+\n+impl<'blk, 'tcx> OwnedBuilder<'blk, 'tcx> {\n+    pub fn new_with_ccx(ccx: &'blk CrateContext<'blk, 'tcx>) -> Self {\n+        // Create a fresh builder from the crate context.\n+        let llbuilder = unsafe {\n+            llvm::LLVMCreateBuilderInContext(ccx.llcx())\n+        };\n+        OwnedBuilder {\n+            builder: Builder {\n+                llbuilder: llbuilder,\n+                ccx: ccx,\n+            }\n+        }\n+    }\n+}\n+\n+impl<'blk, 'tcx> Drop for OwnedBuilder<'blk, 'tcx> {\n+    fn drop(&mut self) {\n+        unsafe {\n+            llvm::LLVMDisposeBuilder(self.builder.llbuilder);\n+        }\n+    }\n+}\n+\n+pub struct BlockAndBuilder<'blk, 'tcx: 'blk> {\n+    bcx: Block<'blk, 'tcx>,\n+    owned_builder: OwnedBuilder<'blk, 'tcx>,\n+}\n+\n+impl<'blk, 'tcx> BlockAndBuilder<'blk, 'tcx> {\n+    pub fn new(bcx: Block<'blk, 'tcx>, owned_builder: OwnedBuilder<'blk, 'tcx>) -> Self {\n+        // Set the builder's position to this block's end.\n+        owned_builder.builder.position_at_end(bcx.llbb);\n+        BlockAndBuilder {\n+            bcx: bcx,\n+            owned_builder: owned_builder,\n+        }\n+    }\n+\n+    pub fn with_block<F, R>(&self, f: F) -> R\n+        where F: FnOnce(Block<'blk, 'tcx>) -> R\n+    {\n+        let result = f(self.bcx);\n+        self.position_at_end(self.bcx.llbb);\n+        result\n+    }\n+\n+    pub fn map_block<F>(self, f: F) -> Self\n+        where F: FnOnce(Block<'blk, 'tcx>) -> Block<'blk, 'tcx>\n+    {\n+        let BlockAndBuilder { bcx, owned_builder } = self;\n+        let bcx = f(bcx);\n+        BlockAndBuilder::new(bcx, owned_builder)\n+    }\n+\n+    // Methods delegated to bcx\n+\n+    pub fn ccx(&self) -> &'blk CrateContext<'blk, 'tcx> {\n+        self.bcx.ccx()\n+    }\n+    pub fn fcx(&self) -> &'blk FunctionContext<'blk, 'tcx> {\n+        self.bcx.fcx()\n+    }\n+    pub fn tcx(&self) -> &'blk ty::ctxt<'tcx> {\n+        self.bcx.tcx()\n+    }\n+    pub fn sess(&self) -> &'blk Session {\n+        self.bcx.sess()\n+    }\n+\n+    pub fn llbb(&self) -> BasicBlockRef {\n+        self.bcx.llbb\n+    }\n+\n+    pub fn mir(&self) -> &'blk Mir<'tcx> {\n+        self.bcx.mir()\n+    }\n+\n+    pub fn val_to_string(&self, val: ValueRef) -> String {\n+        self.bcx.val_to_string(val)\n+    }\n+\n+    pub fn monomorphize<T>(&self, value: &T) -> T\n+        where T: TypeFoldable<'tcx>\n+    {\n+        self.bcx.monomorphize(value)\n+    }\n+}\n+\n+impl<'blk, 'tcx> Deref for BlockAndBuilder<'blk, 'tcx> {\n+    type Target = Builder<'blk, 'tcx>;\n+    fn deref(&self) -> &Self::Target {\n+        &self.owned_builder.builder\n+    }\n }\n \n /// A structure representing an active landing pad for the duration of a basic"}]}