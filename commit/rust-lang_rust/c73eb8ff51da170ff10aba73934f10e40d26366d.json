{"sha": "c73eb8ff51da170ff10aba73934f10e40d26366d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3M2ViOGZmNTFkYTE3MGZmMTBhYmE3MzkzNGYxMGU0MGQyNjM2NmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-19T00:17:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-19T00:17:55Z"}, "message": "rt: Create different stack-switching paths for upcalls and shims\n\nShims need to play with the stack limit, upcalls don't. Only one upcall,\nupcall_fail is allowed to catch, and we need a find a way to get rid of that\ncatch as well because it results in _Unwind_Resume running off the end of the\nRust stack.", "tree": {"sha": "bc92df0c5a276bf016ced6230ea1227ef271331e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc92df0c5a276bf016ced6230ea1227ef271331e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c73eb8ff51da170ff10aba73934f10e40d26366d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c73eb8ff51da170ff10aba73934f10e40d26366d", "html_url": "https://github.com/rust-lang/rust/commit/c73eb8ff51da170ff10aba73934f10e40d26366d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c73eb8ff51da170ff10aba73934f10e40d26366d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f57fd8de1f771b48055e665950dc678fbaf38de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f57fd8de1f771b48055e665950dc678fbaf38de1", "html_url": "https://github.com/rust-lang/rust/commit/f57fd8de1f771b48055e665950dc678fbaf38de1"}], "stats": {"total": 56, "additions": 34, "deletions": 22}, "files": [{"sha": "506441979cacfef545e77a78e8af50d8868ddd12", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c73eb8ff51da170ff10aba73934f10e40d26366d/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c73eb8ff51da170ff10aba73934f10e40d26366d/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=c73eb8ff51da170ff10aba73934f10e40d26366d", "patch": "@@ -27,15 +27,24 @@ check_stack_alignment() __attribute__ ((aligned (16)));\n static void check_stack_alignment() { }\n #endif\n \n-#define SWITCH_STACK(A, F) upcall_call_shim_on_c_stack((void*)A, (void*)F)\n+#define UPCALL_SWITCH_STACK(A, F) call_upcall_on_c_stack((void*)A, (void*)F)\n+\n+inline void\n+call_upcall_on_c_stack(void *args, void *fn_ptr) {\n+    check_stack_alignment();\n+    rust_task *task = rust_scheduler::get_task();\n+    rust_scheduler *sched = task->sched;\n+    sched->c_context.call_shim_on_c_stack(args, fn_ptr);\n+}\n \n extern \"C\" void record_sp(void *limit);\n \n /**********************************************************************\n  * Switches to the C-stack and invokes |fn_ptr|, passing |args| as argument.\n  * This is used by the C compiler to call native functions and by other\n  * upcalls to switch to the C stack.  The return value is passed through a\n- * field in the args parameter.\n+ * field in the args parameter. This upcall is specifically for switching\n+ * to the shim functions generated by rustc.\n  */\n extern \"C\" CDECL void\n upcall_call_shim_on_c_stack(void *args, void *fn_ptr) {\n@@ -51,10 +60,9 @@ upcall_call_shim_on_c_stack(void *args, void *fn_ptr) {\n     try {\n         sched->c_context.call_shim_on_c_stack(args, fn_ptr);\n     } catch (...) {\n-        task = rust_scheduler::get_task();\n-        task->record_stack_limit();\n-        throw;\n+        A(sched, false, \"Native code threw an exception\");\n     }\n+\n     task = rust_scheduler::get_task();\n     task->record_stack_limit();\n }\n@@ -80,8 +88,12 @@ extern \"C\" CDECL void\n upcall_fail(char const *expr,\n             char const *file,\n             size_t line) {\n-    s_fail_args args = {expr,file,line};\n-    SWITCH_STACK(&args, upcall_s_fail);\n+    try {\n+        s_fail_args args = {expr,file,line};\n+        UPCALL_SWITCH_STACK(&args, upcall_s_fail);\n+    } catch (rust_task*) {\n+        throw;\n+    }\n }\n \n /**********************************************************************\n@@ -124,7 +136,7 @@ upcall_s_malloc(s_malloc_args *args) {\n extern \"C\" CDECL uintptr_t\n upcall_malloc(size_t nbytes, type_desc *td) {\n     s_malloc_args args = {0, nbytes, td};\n-    SWITCH_STACK(&args, upcall_s_malloc);\n+    UPCALL_SWITCH_STACK(&args, upcall_s_malloc);\n     return args.retval;\n }\n \n@@ -156,7 +168,7 @@ upcall_s_free(s_free_args *args) {\n extern \"C\" CDECL void\n upcall_free(void* ptr, uintptr_t is_gc) {\n     s_free_args args = {ptr, is_gc};\n-    SWITCH_STACK(&args, upcall_s_free);\n+    UPCALL_SWITCH_STACK(&args, upcall_s_free);\n }\n \n /**********************************************************************\n@@ -189,7 +201,7 @@ upcall_s_shared_malloc(s_shared_malloc_args *args) {\n extern \"C\" CDECL uintptr_t\n upcall_shared_malloc(size_t nbytes, type_desc *td) {\n     s_shared_malloc_args args = {0, nbytes, td};\n-    SWITCH_STACK(&args, upcall_s_shared_malloc);\n+    UPCALL_SWITCH_STACK(&args, upcall_s_shared_malloc);\n     return args.retval;\n }\n \n@@ -216,7 +228,7 @@ upcall_s_shared_free(s_shared_free_args *args) {\n extern \"C\" CDECL void\n upcall_shared_free(void* ptr) {\n     s_shared_free_args args = {ptr};\n-    SWITCH_STACK(&args, upcall_s_shared_free);\n+    UPCALL_SWITCH_STACK(&args, upcall_s_shared_free);\n }\n \n /**********************************************************************\n@@ -262,7 +274,7 @@ void upcall_s_create_shared_type_desc(s_create_shared_type_desc_args *args)\n extern \"C\" CDECL type_desc *\n upcall_create_shared_type_desc(type_desc *td) {\n     s_create_shared_type_desc_args args = { td, 0 };\n-    SWITCH_STACK(&args, upcall_s_create_shared_type_desc);\n+    UPCALL_SWITCH_STACK(&args, upcall_s_create_shared_type_desc);\n     return args.res;\n }\n \n@@ -285,7 +297,7 @@ void upcall_s_free_shared_type_desc(type_desc *td)\n \n extern \"C\" CDECL void\n upcall_free_shared_type_desc(type_desc *td) {\n-    SWITCH_STACK(td, upcall_s_free_shared_type_desc);\n+    UPCALL_SWITCH_STACK(td, upcall_s_free_shared_type_desc);\n }\n \n /**********************************************************************\n@@ -325,7 +337,7 @@ upcall_get_type_desc(void *curr_crate, // ignored, legacy compat.\n                      type_desc const **descs,\n                      uintptr_t n_obj_params) {\n     s_get_type_desc_args args = {0,size,align,n_descs,descs,n_obj_params};\n-    SWITCH_STACK(&args, upcall_s_get_type_desc);\n+    UPCALL_SWITCH_STACK(&args, upcall_s_get_type_desc);\n     return args.retval;\n }\n \n@@ -347,7 +359,7 @@ upcall_s_vec_grow(s_vec_grow_args *args) {\n extern \"C\" CDECL void\n upcall_vec_grow(rust_vec** vp, size_t new_sz) {\n     s_vec_grow_args args = {vp, new_sz};\n-    SWITCH_STACK(&args, upcall_s_vec_grow);\n+    UPCALL_SWITCH_STACK(&args, upcall_s_vec_grow);\n }\n \n // Copy elements from one vector to another,\n@@ -414,7 +426,7 @@ upcall_s_dynastack_mark(s_dynastack_mark_args *args) {\n extern \"C\" CDECL void *\n upcall_dynastack_mark() {\n     s_dynastack_mark_args args = {0};\n-    SWITCH_STACK(&args, upcall_s_dynastack_mark);\n+    UPCALL_SWITCH_STACK(&args, upcall_s_dynastack_mark);\n     return args.retval;\n }\n \n@@ -439,7 +451,7 @@ upcall_s_dynastack_alloc(s_dynastack_alloc_args *args) {\n extern \"C\" CDECL void *\n upcall_dynastack_alloc(size_t sz) {\n     s_dynastack_alloc_args args = {0, sz};\n-    SWITCH_STACK(&args, upcall_s_dynastack_alloc);\n+    UPCALL_SWITCH_STACK(&args, upcall_s_dynastack_alloc);\n     return args.retval;\n }\n \n@@ -465,7 +477,7 @@ upcall_s_dynastack_alloc_2(s_dynastack_alloc_2_args *args) {\n extern \"C\" CDECL void *\n upcall_dynastack_alloc_2(size_t sz, type_desc *ty) {\n     s_dynastack_alloc_2_args args = {0, sz, ty};\n-    SWITCH_STACK(&args, upcall_s_dynastack_alloc_2);\n+    UPCALL_SWITCH_STACK(&args, upcall_s_dynastack_alloc_2);\n     return args.retval;\n }\n \n@@ -482,7 +494,7 @@ upcall_s_dynastack_free(s_dynastack_free_args *args) {\n extern \"C\" CDECL void\n upcall_dynastack_free(void *ptr) {\n     s_dynastack_free_args args = {ptr};\n-    SWITCH_STACK(&args, upcall_s_dynastack_free);\n+    UPCALL_SWITCH_STACK(&args, upcall_s_dynastack_free);\n }\n \n extern \"C\" _Unwind_Reason_Code\n@@ -524,7 +536,7 @@ upcall_rust_personality(int version,\n     s_rust_personality_args args = {(_Unwind_Reason_Code)0,\n                                     version, actions, exception_class,\n                                     ue_header, context};\n-    SWITCH_STACK(&args, upcall_s_rust_personality);\n+    UPCALL_SWITCH_STACK(&args, upcall_s_rust_personality);\n     return args.retval;\n }\n \n@@ -553,7 +565,7 @@ upcall_cmp_type(int8_t *result, const type_desc *tydesc,\n                 const type_desc **subtydescs, uint8_t *data_0,\n                 uint8_t *data_1, uint8_t cmp_type) {\n     s_cmp_type_args args = {result, tydesc, subtydescs, data_0, data_1, cmp_type};\n-    SWITCH_STACK(&args, upcall_s_cmp_type);\n+    UPCALL_SWITCH_STACK(&args, upcall_s_cmp_type);\n }\n \n extern \"C\" void\n@@ -573,7 +585,7 @@ upcall_s_log_type(s_log_type_args *args) {\n extern \"C\" void\n upcall_log_type(const type_desc *tydesc, uint8_t *data, uint32_t level) {\n     s_log_type_args args = {tydesc, data, level};\n-    SWITCH_STACK(&args, upcall_s_log_type);\n+    UPCALL_SWITCH_STACK(&args, upcall_s_log_type);\n }\n \n struct rust_new_stack2_args {"}]}