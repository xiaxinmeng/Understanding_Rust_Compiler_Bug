{"sha": "0695f219945e22d092aa1351a5862abcb4e1f3c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OTVmMjE5OTQ1ZTIyZDA5MmFhMTM1MWE1ODYyYWJjYjRlMWYzYzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-15T17:17:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-15T17:17:31Z"}, "message": "Auto merge of #6043 - HaramanJohal:margin_of_error, r=matthiaskrgr\n\nclarify margin of error in wording of float comparison operator lint messages\n\nfixes #6040\n\nchangelog: change wording of float comparison operator to make margin of error less ambiguous", "tree": {"sha": "b4f233988b879ae89fdefef7afafa2c254becf84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4f233988b879ae89fdefef7afafa2c254becf84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0695f219945e22d092aa1351a5862abcb4e1f3c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0695f219945e22d092aa1351a5862abcb4e1f3c3", "html_url": "https://github.com/rust-lang/rust/commit/0695f219945e22d092aa1351a5862abcb4e1f3c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0695f219945e22d092aa1351a5862abcb4e1f3c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "190c6ea3690a20024ebc80eefbf91dba0e7fda5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/190c6ea3690a20024ebc80eefbf91dba0e7fda5f", "html_url": "https://github.com/rust-lang/rust/commit/190c6ea3690a20024ebc80eefbf91dba0e7fda5f"}, {"sha": "16b6cebaa67655a793d90d296c03e2c5496ec4ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/16b6cebaa67655a793d90d296c03e2c5496ec4ce", "html_url": "https://github.com/rust-lang/rust/commit/16b6cebaa67655a793d90d296c03e2c5496ec4ce"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "67a3685fd0dc3b07b96e3a45039e7305366afddd", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0695f219945e22d092aa1351a5862abcb4e1f3c3/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0695f219945e22d092aa1351a5862abcb4e1f3c3/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=0695f219945e22d092aa1351a5862abcb4e1f3c3", "patch": "@@ -99,11 +99,11 @@ declare_clippy_lint! {\n     /// if y != x {} // where both are floats\n     ///\n     /// // Good\n-    /// let error = f64::EPSILON; // Use an epsilon for comparison\n+    /// let error_margin = f64::EPSILON; // Use an epsilon for comparison\n     /// // Or, if Rust <= 1.42, use `std::f64::EPSILON` constant instead.\n-    /// // let error = std::f64::EPSILON;\n-    /// if (y - 1.23f64).abs() < error { }\n-    /// if (y - x).abs() > error { }\n+    /// // let error_margin = std::f64::EPSILON;\n+    /// if (y - 1.23f64).abs() < error_margin { }\n+    /// if (y - x).abs() > error_margin { }\n     /// ```\n     pub FLOAT_CMP,\n     correctness,\n@@ -242,10 +242,10 @@ declare_clippy_lint! {\n     /// if x == ONE { } // where both are floats\n     ///\n     /// // Good\n-    /// let error = f64::EPSILON; // Use an epsilon for comparison\n+    /// let error_margin = f64::EPSILON; // Use an epsilon for comparison\n     /// // Or, if Rust <= 1.42, use `std::f64::EPSILON` constant instead.\n-    /// // let error = std::f64::EPSILON;\n-    /// if (x - ONE).abs() < error { }\n+    /// // let error_margin = std::f64::EPSILON;\n+    /// if (x - ONE).abs() < error_margin { }\n     /// ```\n     pub FLOAT_CMP_CONST,\n     restriction,\n@@ -411,16 +411,16 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                         if !is_comparing_arrays {\n                             diag.span_suggestion(\n                                 expr.span,\n-                                \"consider comparing them within some error\",\n+                                \"consider comparing them within some margin of error\",\n                                 format!(\n-                                    \"({}).abs() {} error\",\n+                                    \"({}).abs() {} error_margin\",\n                                     lhs - rhs,\n                                     if op == BinOpKind::Eq { '<' } else { '>' }\n                                 ),\n                                 Applicability::HasPlaceholders, // snippet\n                             );\n                         }\n-                        diag.note(\"`f32::EPSILON` and `f64::EPSILON` are available for the `error`\");\n+                        diag.note(\"`f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\");\n                     });\n                 } else if op == BinOpKind::Rem && is_integer_const(cx, right, 1) {\n                     span_lint(cx, MODULO_ONE, expr.span, \"any number modulo 1 will be 0\");"}, {"sha": "f7c380fc915c06a14f595c6b3a9ce66c16382ce5", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0695f219945e22d092aa1351a5862abcb4e1f3c3/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0695f219945e22d092aa1351a5862abcb4e1f3c3/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=0695f219945e22d092aa1351a5862abcb4e1f3c3", "patch": "@@ -2,50 +2,50 @@ error: strict comparison of `f32` or `f64`\n   --> $DIR/float_cmp.rs:65:5\n    |\n LL |     ONE as f64 != 2.0;\n-   |     ^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE as f64 - 2.0).abs() > error`\n+   |     ^^^^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(ONE as f64 - 2.0).abs() > error_margin`\n    |\n    = note: `-D clippy::float-cmp` implied by `-D warnings`\n-   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64`\n   --> $DIR/float_cmp.rs:70:5\n    |\n LL |     x == 1.0;\n-   |     ^^^^^^^^ help: consider comparing them within some error: `(x - 1.0).abs() < error`\n+   |     ^^^^^^^^ help: consider comparing them within some margin of error: `(x - 1.0).abs() < error_margin`\n    |\n-   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64`\n   --> $DIR/float_cmp.rs:73:5\n    |\n LL |     twice(x) != twice(ONE as f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(twice(x) - twice(ONE as f64)).abs() > error`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(twice(x) - twice(ONE as f64)).abs() > error_margin`\n    |\n-   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64`\n   --> $DIR/float_cmp.rs:93:5\n    |\n LL |     NON_ZERO_ARRAY[i] == NON_ZERO_ARRAY[j];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(NON_ZERO_ARRAY[i] - NON_ZERO_ARRAY[j]).abs() < error`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(NON_ZERO_ARRAY[i] - NON_ZERO_ARRAY[j]).abs() < error_margin`\n    |\n-   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` arrays\n   --> $DIR/float_cmp.rs:98:5\n    |\n LL |     a1 == a2;\n    |     ^^^^^^^^\n    |\n-   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64`\n   --> $DIR/float_cmp.rs:99:5\n    |\n LL |     a1[0] == a2[0];\n-   |     ^^^^^^^^^^^^^^ help: consider comparing them within some error: `(a1[0] - a2[0]).abs() < error`\n+   |     ^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(a1[0] - a2[0]).abs() < error_margin`\n    |\n-   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "5d0455363e8e02dc2167dfe6833902751267876f", "filename": "tests/ui/float_cmp_const.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0695f219945e22d092aa1351a5862abcb4e1f3c3/tests%2Fui%2Ffloat_cmp_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0695f219945e22d092aa1351a5862abcb4e1f3c3/tests%2Fui%2Ffloat_cmp_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.stderr?ref=0695f219945e22d092aa1351a5862abcb4e1f3c3", "patch": "@@ -2,66 +2,66 @@ error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:20:5\n    |\n LL |     1f32 == ONE;\n-   |     ^^^^^^^^^^^ help: consider comparing them within some error: `(1f32 - ONE).abs() < error`\n+   |     ^^^^^^^^^^^ help: consider comparing them within some margin of error: `(1f32 - ONE).abs() < error_margin`\n    |\n    = note: `-D clippy::float-cmp-const` implied by `-D warnings`\n-   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:21:5\n    |\n LL |     TWO == ONE;\n-   |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() < error`\n+   |     ^^^^^^^^^^ help: consider comparing them within some margin of error: `(TWO - ONE).abs() < error_margin`\n    |\n-   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:22:5\n    |\n LL |     TWO != ONE;\n-   |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() > error`\n+   |     ^^^^^^^^^^ help: consider comparing them within some margin of error: `(TWO - ONE).abs() > error_margin`\n    |\n-   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:23:5\n    |\n LL |     ONE + ONE == TWO;\n-   |     ^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE + ONE - TWO).abs() < error`\n+   |     ^^^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(ONE + ONE - TWO).abs() < error_margin`\n    |\n-   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:25:5\n    |\n LL |     x as f32 == ONE;\n-   |     ^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(x as f32 - ONE).abs() < error`\n+   |     ^^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(x as f32 - ONE).abs() < error_margin`\n    |\n-   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:28:5\n    |\n LL |     v == ONE;\n-   |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() < error`\n+   |     ^^^^^^^^ help: consider comparing them within some margin of error: `(v - ONE).abs() < error_margin`\n    |\n-   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:29:5\n    |\n LL |     v != ONE;\n-   |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() > error`\n+   |     ^^^^^^^^ help: consider comparing them within some margin of error: `(v - ONE).abs() > error_margin`\n    |\n-   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` constant arrays\n   --> $DIR/float_cmp_const.rs:61:5\n    |\n LL |     NON_ZERO_ARRAY == NON_ZERO_ARRAY2;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: aborting due to 8 previous errors\n "}]}