{"sha": "ccffcafd55e58f769d4b0efc0064bf65e76998e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZmZjYWZkNTVlNThmNzY5ZDRiMGVmYzAwNjRiZjY1ZTc2OTk4ZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-11T19:26:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-11T19:26:01Z"}, "message": "Auto merge of #86532 - estebank:delete-suggestion-underline, r=petrochenkov\n\nMake deleted code in a suggestion clearer\n\nShow suggestions that include deletions in a way similar to `diff`'s output.\n\n<img width=\"628\" alt=\"\" src=\"https://user-images.githubusercontent.com/1606434/123350316-9078e580-d50f-11eb-89b9-78431b85e23f.png\">\n\nFor changes that do not have deletions, use `+` as an underline for additions and `~` as an underline for replacements.\n\n<img width=\"631\" alt=\"\" src=\"https://user-images.githubusercontent.com/1606434/123701745-1ac68f80-d817-11eb-950b-09e5afd7532f.png\">\n\nFor multiline suggestions, we now use `~` in the gutter to signal replacements and `+` to signal whole line replacements/additions.\n\n<img width=\"834\" alt=\"\" src=\"https://user-images.githubusercontent.com/1606434/123701331-8eb46800-d816-11eb-9dcd-ef9098071afb.png\">\n\nIn all cases we now use color to highlight the specific spans and snippets.", "tree": {"sha": "725b619b120ee18a4bada33b6f7fb4385e06d6df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/725b619b120ee18a4bada33b6f7fb4385e06d6df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccffcafd55e58f769d4b0efc0064bf65e76998e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccffcafd55e58f769d4b0efc0064bf65e76998e4", "html_url": "https://github.com/rust-lang/rust/commit/ccffcafd55e58f769d4b0efc0064bf65e76998e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccffcafd55e58f769d4b0efc0064bf65e76998e4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "362e0f55eb1f36d279e5c4a58fb0fe5f9a2c579d", "url": "https://api.github.com/repos/rust-lang/rust/commits/362e0f55eb1f36d279e5c4a58fb0fe5f9a2c579d", "html_url": "https://github.com/rust-lang/rust/commit/362e0f55eb1f36d279e5c4a58fb0fe5f9a2c579d"}, {"sha": "657caa5bf293e9d910a54dac10dc536e7c26e50b", "url": "https://api.github.com/repos/rust-lang/rust/commits/657caa5bf293e9d910a54dac10dc536e7c26e50b", "html_url": "https://github.com/rust-lang/rust/commit/657caa5bf293e9d910a54dac10dc536e7c26e50b"}], "stats": {"total": 9889, "additions": 5657, "deletions": 4232}, "files": [{"sha": "07c864c93a1b56a3962a7f77c0f0ecd9c4635629", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 102, "deletions": 18, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,10 @@ use rustc_span::{MultiSpan, SourceFile, Span};\n \n use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, Style, StyledString};\n use crate::styled_buffer::StyledBuffer;\n-use crate::{CodeSuggestion, Diagnostic, DiagnosticId, Level, SubDiagnostic, SuggestionStyle};\n+use crate::{\n+    CodeSuggestion, Diagnostic, DiagnosticId, Level, SubDiagnostic, SubstitutionHighlight,\n+    SuggestionStyle,\n+};\n \n use rustc_lint_defs::pluralize;\n \n@@ -1590,25 +1593,38 @@ impl EmitterWriter {\n         );\n \n         let mut row_num = 2;\n+        draw_col_separator_no_space(&mut buffer, 1, max_line_num_len + 1);\n         let mut notice_capitalization = false;\n-        for (complete, parts, only_capitalization) in suggestions.iter().take(MAX_SUGGESTIONS) {\n+        for (complete, parts, highlights, only_capitalization) in\n+            suggestions.iter().take(MAX_SUGGESTIONS)\n+        {\n             notice_capitalization |= only_capitalization;\n             // Only show underline if the suggestion spans a single line and doesn't cover the\n             // entirety of the code output. If you have multiple replacements in the same line\n             // of code, show the underline.\n             let show_underline = !(parts.len() == 1 && parts[0].snippet.trim() == complete.trim())\n                 && complete.lines().count() == 1;\n \n-            let lines = sm\n+            let has_deletion = parts.iter().any(|p| p.is_deletion());\n+            let is_multiline = complete.lines().count() > 1;\n+\n+            let show_diff = has_deletion && !is_multiline;\n+\n+            if show_diff {\n+                row_num += 1;\n+            }\n+\n+            let file_lines = sm\n                 .span_to_lines(parts[0].span)\n                 .expect(\"span_to_lines failed when emitting suggestion\");\n \n-            assert!(!lines.lines.is_empty() || parts[0].span.is_dummy());\n+            assert!(!file_lines.lines.is_empty() || parts[0].span.is_dummy());\n \n             let line_start = sm.lookup_char_pos(parts[0].span.lo()).line;\n             draw_col_separator_no_space(&mut buffer, 1, max_line_num_len + 1);\n             let mut lines = complete.lines();\n-            for (line_pos, line) in lines.by_ref().take(MAX_SUGGESTION_HIGHLIGHT_LINES).enumerate()\n+            for (line_pos, (line, parts)) in\n+                lines.by_ref().zip(highlights).take(MAX_SUGGESTION_HIGHLIGHT_LINES).enumerate()\n             {\n                 // Print the span column to avoid confusion\n                 buffer.puts(\n@@ -1617,9 +1633,60 @@ impl EmitterWriter {\n                     &self.maybe_anonymized(line_start + line_pos),\n                     Style::LineNumber,\n                 );\n+                if show_diff {\n+                    // Add the line number for both addition and removal to drive the point home.\n+                    //\n+                    // N - fn foo<A: T>(bar: A) {\n+                    // N + fn foo(bar: impl T) {\n+                    buffer.puts(\n+                        row_num - 1,\n+                        0,\n+                        &self.maybe_anonymized(line_start + line_pos),\n+                        Style::LineNumber,\n+                    );\n+                    buffer.puts(row_num - 1, max_line_num_len + 1, \"- \", Style::Removal);\n+                    buffer.puts(\n+                        row_num - 1,\n+                        max_line_num_len + 3,\n+                        &replace_tabs(\n+                            &*file_lines\n+                                .file\n+                                .get_line(file_lines.lines[line_pos].line_index)\n+                                .unwrap(),\n+                        ),\n+                        Style::NoStyle,\n+                    );\n+                    buffer.puts(row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n+                } else if is_multiline {\n+                    match &parts[..] {\n+                        [SubstitutionHighlight { start: 0, end }] if *end == line.len() => {\n+                            buffer.puts(row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n+                        }\n+                        [] => {\n+                            draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n+                        }\n+                        _ => {\n+                            buffer.puts(row_num, max_line_num_len + 1, \"~ \", Style::Addition);\n+                        }\n+                    }\n+                } else {\n+                    draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n+                }\n+\n                 // print the suggestion\n-                draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n                 buffer.append(row_num, &replace_tabs(line), Style::NoStyle);\n+\n+                if is_multiline {\n+                    for SubstitutionHighlight { start, end } in parts {\n+                        buffer.set_style_range(\n+                            row_num,\n+                            max_line_num_len + 3 + start,\n+                            max_line_num_len + 3 + end,\n+                            Style::Addition,\n+                            true,\n+                        );\n+                    }\n+                }\n                 row_num += 1;\n             }\n \n@@ -1654,25 +1721,36 @@ impl EmitterWriter {\n                     let underline_start = (span_start_pos + start) as isize + offset;\n                     let underline_end = (span_start_pos + start + sub_len) as isize + offset;\n                     assert!(underline_start >= 0 && underline_end >= 0);\n+                    let padding: usize = max_line_num_len + 3;\n                     for p in underline_start..underline_end {\n-                        buffer.putc(\n-                            row_num,\n-                            ((max_line_num_len + 3) as isize + p) as usize,\n-                            '^',\n-                            Style::UnderlinePrimary,\n+                        // Colorize addition/replacements with green.\n+                        buffer.set_style(\n+                            row_num - 1,\n+                            (padding as isize + p) as usize,\n+                            Style::Addition,\n+                            true,\n                         );\n-                    }\n-                    // underline removals too\n-                    if underline_start == underline_end {\n-                        for p in underline_start - 1..underline_start + 1 {\n+                        if !show_diff {\n+                            // If this is a replacement, underline with `^`, if this is an addition\n+                            // underline with `+`.\n                             buffer.putc(\n                                 row_num,\n-                                ((max_line_num_len + 3) as isize + p) as usize,\n-                                '-',\n-                                Style::UnderlineSecondary,\n+                                (padding as isize + p) as usize,\n+                                if part.is_addition(&sm) { '+' } else { '~' },\n+                                Style::Addition,\n                             );\n                         }\n                     }\n+                    if show_diff {\n+                        // Colorize removal with red in diff format.\n+                        buffer.set_style_range(\n+                            row_num - 2,\n+                            (padding as isize + span_start_pos as isize) as usize,\n+                            (padding as isize + span_end_pos as isize) as usize,\n+                            Style::Removal,\n+                            true,\n+                        );\n+                    }\n \n                     // length of the code after substitution\n                     let full_sub_len = part\n@@ -2129,6 +2207,12 @@ impl<'a> WritableDst<'a> {\n     fn apply_style(&mut self, lvl: Level, style: Style) -> io::Result<()> {\n         let mut spec = ColorSpec::new();\n         match style {\n+            Style::Addition => {\n+                spec.set_fg(Some(Color::Green)).set_intense(true);\n+            }\n+            Style::Removal => {\n+                spec.set_fg(Some(Color::Red)).set_intense(true);\n+            }\n             Style::LineAndColumn => {}\n             Style::LineNumber => {\n                 spec.set_bold(true);"}, {"sha": "ec29d8016ddf4461478fc748f0065598d4ced5ec", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 76, "deletions": 7, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -160,32 +160,77 @@ pub struct SubstitutionPart {\n     pub snippet: String,\n }\n \n+/// Used to translate between `Span`s and byte positions within a single output line in highlighted\n+/// code of structured suggestions.\n+#[derive(Debug, Clone, Copy)]\n+pub struct SubstitutionHighlight {\n+    start: usize,\n+    end: usize,\n+}\n+\n+impl SubstitutionPart {\n+    pub fn is_addition(&self, sm: &SourceMap) -> bool {\n+        !self.snippet.is_empty()\n+            && sm\n+                .span_to_snippet(self.span)\n+                .map_or(self.span.is_empty(), |snippet| snippet.trim().is_empty())\n+    }\n+\n+    pub fn is_deletion(&self) -> bool {\n+        self.snippet.trim().is_empty()\n+    }\n+\n+    pub fn is_replacement(&self, sm: &SourceMap) -> bool {\n+        !self.snippet.is_empty()\n+            && sm\n+                .span_to_snippet(self.span)\n+                .map_or(!self.span.is_empty(), |snippet| !snippet.trim().is_empty())\n+    }\n+}\n+\n impl CodeSuggestion {\n     /// Returns the assembled code suggestions, whether they should be shown with an underline\n     /// and whether the substitution only differs in capitalization.\n-    pub fn splice_lines(&self, sm: &SourceMap) -> Vec<(String, Vec<SubstitutionPart>, bool)> {\n+    pub fn splice_lines(\n+        &self,\n+        sm: &SourceMap,\n+    ) -> Vec<(String, Vec<SubstitutionPart>, Vec<Vec<SubstitutionHighlight>>, bool)> {\n+        // For the `Vec<Vec<SubstitutionHighlight>>` value, the first level of the vector\n+        // corresponds to the output snippet's lines, while the second level corresponds to the\n+        // substrings within that line that should be highlighted.\n+\n         use rustc_span::{CharPos, Pos};\n \n+        /// Append to a buffer the remainder of the line of existing source code, and return the\n+        /// count of lines that have been added for accurate highlighting.\n         fn push_trailing(\n             buf: &mut String,\n             line_opt: Option<&Cow<'_, str>>,\n             lo: &Loc,\n             hi_opt: Option<&Loc>,\n-        ) {\n+        ) -> usize {\n+            let mut line_count = 0;\n             let (lo, hi_opt) = (lo.col.to_usize(), hi_opt.map(|hi| hi.col.to_usize()));\n             if let Some(line) = line_opt {\n                 if let Some(lo) = line.char_indices().map(|(i, _)| i).nth(lo) {\n                     let hi_opt = hi_opt.and_then(|hi| line.char_indices().map(|(i, _)| i).nth(hi));\n                     match hi_opt {\n-                        Some(hi) if hi > lo => buf.push_str(&line[lo..hi]),\n+                        Some(hi) if hi > lo => {\n+                            line_count = line[lo..hi].matches('\\n').count();\n+                            buf.push_str(&line[lo..hi])\n+                        }\n                         Some(_) => (),\n-                        None => buf.push_str(&line[lo..]),\n+                        None => {\n+                            line_count = line[lo..].matches('\\n').count();\n+                            buf.push_str(&line[lo..])\n+                        }\n                     }\n                 }\n                 if hi_opt.is_none() {\n                     buf.push('\\n');\n                 }\n             }\n+            line_count\n         }\n \n         assert!(!self.substitutions.is_empty());\n@@ -220,6 +265,7 @@ impl CodeSuggestion {\n                     return None;\n                 }\n \n+                let mut highlights = vec![];\n                 // To build up the result, we do this for each span:\n                 // - push the line segment trailing the previous span\n                 //   (at the beginning a \"phantom\" span pointing at the start of the line)\n@@ -236,17 +282,29 @@ impl CodeSuggestion {\n                     lines.lines.get(0).and_then(|line0| sf.get_line(line0.line_index));\n                 let mut buf = String::new();\n \n+                let mut line_highlight = vec![];\n                 for part in &substitution.parts {\n                     let cur_lo = sm.lookup_char_pos(part.span.lo());\n                     if prev_hi.line == cur_lo.line {\n-                        push_trailing(&mut buf, prev_line.as_ref(), &prev_hi, Some(&cur_lo));\n+                        let mut count =\n+                            push_trailing(&mut buf, prev_line.as_ref(), &prev_hi, Some(&cur_lo));\n+                        while count > 0 {\n+                            highlights.push(std::mem::take(&mut line_highlight));\n+                            count -= 1;\n+                        }\n                     } else {\n-                        push_trailing(&mut buf, prev_line.as_ref(), &prev_hi, None);\n+                        highlights.push(std::mem::take(&mut line_highlight));\n+                        let mut count = push_trailing(&mut buf, prev_line.as_ref(), &prev_hi, None);\n+                        while count > 0 {\n+                            highlights.push(std::mem::take(&mut line_highlight));\n+                            count -= 1;\n+                        }\n                         // push lines between the previous and current span (if any)\n                         for idx in prev_hi.line..(cur_lo.line - 1) {\n                             if let Some(line) = sf.get_line(idx) {\n                                 buf.push_str(line.as_ref());\n                                 buf.push('\\n');\n+                                highlights.push(std::mem::take(&mut line_highlight));\n                             }\n                         }\n                         if let Some(cur_line) = sf.get_line(cur_lo.line - 1) {\n@@ -257,10 +315,21 @@ impl CodeSuggestion {\n                             buf.push_str(&cur_line[..end]);\n                         }\n                     }\n+                    // Add a whole line highlight per line in the snippet.\n+                    line_highlight.push(SubstitutionHighlight {\n+                        start: cur_lo.col.0,\n+                        end: cur_lo.col.0\n+                            + part.snippet.split('\\n').next().unwrap_or(&part.snippet).len(),\n+                    });\n+                    for line in part.snippet.split('\\n').skip(1) {\n+                        highlights.push(std::mem::take(&mut line_highlight));\n+                        line_highlight.push(SubstitutionHighlight { start: 0, end: line.len() });\n+                    }\n                     buf.push_str(&part.snippet);\n                     prev_hi = sm.lookup_char_pos(part.span.hi());\n                     prev_line = sf.get_line(prev_hi.line - 1);\n                 }\n+                highlights.push(std::mem::take(&mut line_highlight));\n                 let only_capitalization = is_case_difference(sm, &buf, bounding_span);\n                 // if the replacement already ends with a newline, don't print the next line\n                 if !buf.ends_with('\\n') {\n@@ -270,7 +339,7 @@ impl CodeSuggestion {\n                 while buf.ends_with('\\n') {\n                     buf.pop();\n                 }\n-                Some((buf, substitution.parts, only_capitalization))\n+                Some((buf, substitution.parts, highlights, only_capitalization))\n             })\n             .collect()\n     }"}, {"sha": "64353461e90e0cbe80e7dea4a98b39ebae3636f1", "filename": "compiler/rustc_errors/src/snippet.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -177,4 +177,6 @@ pub enum Style {\n     NoStyle,\n     Level(Level),\n     Highlight,\n+    Addition,\n+    Removal,\n }"}, {"sha": "aa39d26feed1e3072d7cff06374264ce2c8660f1", "filename": "src/test/rustdoc-ui/infinite-recursive-type-impl-trait-return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |         This(E),\n help: insert some indirection (e.g., a `DEF_ID` representable\n    |\n LL |         This(Box<E>),\n-   |              ^^^^ ^\n+   |              ++++ +\n \n error: aborting due to previous error\n "}, {"sha": "009bedec5ed6a99825b996ed0f019daeaa688c18", "filename": "src/test/rustdoc-ui/infinite-recursive-type-impl-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |         V(E),\n help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `f::E` representable\n    |\n LL |         V(Box<E>),\n-   |           ^^^^ ^\n+   |           ++++ +\n \n error: aborting due to previous error\n "}, {"sha": "b33aba446223c06daa9ec5ebd9749c4d9e7423ab", "filename": "src/test/rustdoc-ui/infinite-recursive-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     V(E),\n help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `E` representable\n    |\n LL |     V(Box<E>),\n-   |       ^^^^ ^\n+   |       ++++ +\n \n error: aborting due to previous error\n "}, {"sha": "7974796e47b172c56f46cf6db4efbdd10d6f7b0a", "filename": "src/test/rustdoc-ui/intra-doc/ambiguity.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,11 +12,11 @@ LL | #![deny(rustdoc::broken_intra_doc_links)]\n help: to link to the module, prefix with `mod@`\n    |\n LL | /// [mod@true]\n-   |      ^^^^\n+   |      ++++\n help: to link to the builtin type, prefix with `prim@`\n    |\n LL | /// [prim@true]\n-   |      ^^^^^\n+   |      +++++\n \n error: `ambiguous` is both a struct and a function\n   --> $DIR/ambiguity.rs:27:7\n@@ -27,11 +27,11 @@ LL | /// [`ambiguous`] is ambiguous.\n help: to link to the struct, prefix with `struct@`\n    |\n LL | /// [`struct@ambiguous`] is ambiguous.\n-   |       ^^^^^^^\n+   |       +++++++\n help: to link to the function, add parentheses\n    |\n LL | /// [`ambiguous()`] is ambiguous.\n-   |                ^^\n+   |                ++\n \n error: `ambiguous` is both a struct and a function\n   --> $DIR/ambiguity.rs:29:6\n@@ -42,11 +42,11 @@ LL | /// [ambiguous] is ambiguous.\n help: to link to the struct, prefix with `struct@`\n    |\n LL | /// [struct@ambiguous] is ambiguous.\n-   |      ^^^^^^^\n+   |      +++++++\n help: to link to the function, add parentheses\n    |\n LL | /// [ambiguous()] is ambiguous.\n-   |               ^^\n+   |               ++\n \n error: `multi_conflict` is a struct, a function, and a macro\n   --> $DIR/ambiguity.rs:31:7\n@@ -57,15 +57,15 @@ LL | /// [`multi_conflict`] is a three-way conflict.\n help: to link to the struct, prefix with `struct@`\n    |\n LL | /// [`struct@multi_conflict`] is a three-way conflict.\n-   |       ^^^^^^^\n+   |       +++++++\n help: to link to the function, add parentheses\n    |\n LL | /// [`multi_conflict()`] is a three-way conflict.\n-   |                     ^^\n+   |                     ++\n help: to link to the macro, add an exclamation mark\n    |\n LL | /// [`multi_conflict!`] is a three-way conflict.\n-   |                     ^\n+   |                     +\n \n error: `type_and_value` is both a module and a constant\n   --> $DIR/ambiguity.rs:33:16\n@@ -76,11 +76,11 @@ LL | /// Ambiguous [type_and_value].\n help: to link to the module, prefix with `mod@`\n    |\n LL | /// Ambiguous [mod@type_and_value].\n-   |                ^^^^\n+   |                ++++\n help: to link to the constant, prefix with `const@`\n    |\n LL | /// Ambiguous [const@type_and_value].\n-   |                ^^^^^^\n+   |                ++++++\n \n error: `foo::bar` is both an enum and a function\n   --> $DIR/ambiguity.rs:35:43\n@@ -91,11 +91,11 @@ LL | /// Ambiguous non-implied shortcut link [`foo::bar`].\n help: to link to the enum, prefix with `enum@`\n    |\n LL | /// Ambiguous non-implied shortcut link [`enum@foo::bar`].\n-   |                                           ^^^^^\n+   |                                           +++++\n help: to link to the function, add parentheses\n    |\n LL | /// Ambiguous non-implied shortcut link [`foo::bar()`].\n-   |                                                   ^^\n+   |                                                   ++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "12122f5fa867431a9bb51a863eedd37ee689bd3b", "filename": "src/test/rustdoc-ui/intra-doc/disambiguator-mismatch.stderr", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL | #![deny(rustdoc::broken_intra_doc_links)]\n help: to link to the enum, prefix with `enum@`\n    |\n LL | /// Link to [enum@S]\n-   |              ^^^^^\n+   |              ~~~~~\n \n error: incompatible link kind for `S`\n   --> $DIR/disambiguator-mismatch.rs:21:14\n@@ -23,7 +23,7 @@ LL | /// Link to [mod@S]\n help: to link to the enum, prefix with `enum@`\n    |\n LL | /// Link to [enum@S]\n-   |              ^^^^^\n+   |              ~~~~~\n \n error: incompatible link kind for `S`\n   --> $DIR/disambiguator-mismatch.rs:26:14\n@@ -34,7 +34,7 @@ LL | /// Link to [union@S]\n help: to link to the enum, prefix with `enum@`\n    |\n LL | /// Link to [enum@S]\n-   |              ^^^^^\n+   |              ~~~~~\n \n error: incompatible link kind for `S`\n   --> $DIR/disambiguator-mismatch.rs:31:14\n@@ -45,7 +45,7 @@ LL | /// Link to [trait@S]\n help: to link to the enum, prefix with `enum@`\n    |\n LL | /// Link to [enum@S]\n-   |              ^^^^^\n+   |              ~~~~~\n \n error: incompatible link kind for `T`\n   --> $DIR/disambiguator-mismatch.rs:36:14\n@@ -56,7 +56,7 @@ LL | /// Link to [struct@T]\n help: to link to the trait, prefix with `trait@`\n    |\n LL | /// Link to [trait@T]\n-   |              ^^^^^^\n+   |              ~~~~~~\n \n error: incompatible link kind for `m`\n   --> $DIR/disambiguator-mismatch.rs:41:14\n@@ -66,8 +66,9 @@ LL | /// Link to [derive@m]\n    |\n help: to link to the macro, add an exclamation mark\n    |\n-LL | /// Link to [m!]\n-   |             --^\n+LL - /// Link to [derive@m]\n+LL + /// Link to [m!]\n+   | \n \n error: unresolved link to `m`\n   --> $DIR/disambiguator-mismatch.rs:46:14\n@@ -78,7 +79,7 @@ LL | /// Link to [m()]\n help: to link to the macro, add an exclamation mark\n    |\n LL | /// Link to [m!()]\n-   |               ^\n+   |               +\n \n error: incompatible link kind for `s`\n   --> $DIR/disambiguator-mismatch.rs:52:14\n@@ -89,7 +90,7 @@ LL | /// Link to [const@s]\n help: to link to the static, prefix with `static@`\n    |\n LL | /// Link to [static@s]\n-   |              ^^^^^^^\n+   |              ~~~~~~~\n \n error: incompatible link kind for `c`\n   --> $DIR/disambiguator-mismatch.rs:57:14\n@@ -100,7 +101,7 @@ LL | /// Link to [static@c]\n help: to link to the constant, prefix with `const@`\n    |\n LL | /// Link to [const@c]\n-   |              ^^^^^^\n+   |              ~~~~~~\n \n error: incompatible link kind for `c`\n   --> $DIR/disambiguator-mismatch.rs:62:14\n@@ -111,7 +112,7 @@ LL | /// Link to [fn@c]\n help: to link to the constant, prefix with `const@`\n    |\n LL | /// Link to [const@c]\n-   |              ^^^^^^\n+   |              ~~~~~~\n \n error: incompatible link kind for `c`\n   --> $DIR/disambiguator-mismatch.rs:67:14\n@@ -121,8 +122,9 @@ LL | /// Link to [c()]\n    |\n help: to link to the constant, prefix with `const@`\n    |\n-LL | /// Link to [const@c]\n-   |              ^^^^^^--\n+LL - /// Link to [c()]\n+LL + /// Link to [const@c]\n+   | \n \n error: incompatible link kind for `f`\n   --> $DIR/disambiguator-mismatch.rs:72:14\n@@ -132,8 +134,9 @@ LL | /// Link to [const@f]\n    |\n help: to link to the function, add parentheses\n    |\n-LL | /// Link to [f()]\n-   |             --^^\n+LL - /// Link to [const@f]\n+LL + /// Link to [f()]\n+   | \n \n error: aborting due to 12 previous errors\n "}, {"sha": "e1ff3740bf6859b61f57708e1c4d833632c9beff", "filename": "src/test/rustdoc-ui/intra-doc/errors.stderr", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -96,8 +96,9 @@ LL | /// [type@Vec::into_iter]\n    |\n help: to link to the associated function, add parentheses\n    |\n-LL | /// [Vec::into_iter()]\n-   |     --             ^^\n+LL - /// [type@Vec::into_iter]\n+LL + /// [Vec::into_iter()]\n+   | \n \n error: unresolved link to `S`\n   --> $DIR/errors.rs:68:6\n@@ -107,8 +108,9 @@ LL | /// [S!]\n    |\n help: to link to the struct, prefix with `struct@`\n    |\n-LL | /// [struct@S]\n-   |      ^^^^^^^--\n+LL - /// [S!]\n+LL + /// [struct@S]\n+   | \n \n error: unresolved link to `S::h`\n   --> $DIR/errors.rs:78:6\n@@ -118,8 +120,9 @@ LL | /// [type@S::h]\n    |\n help: to link to the associated function, add parentheses\n    |\n-LL | /// [S::h()]\n-   |     --   ^^\n+LL - /// [type@S::h]\n+LL + /// [S::h()]\n+   | \n \n error: unresolved link to `T::g`\n   --> $DIR/errors.rs:86:6\n@@ -129,8 +132,9 @@ LL | /// [type@T::g]\n    |\n help: to link to the associated function, add parentheses\n    |\n-LL | /// [T::g()]\n-   |     --   ^^\n+LL - /// [type@T::g]\n+LL + /// [T::g()]\n+   | \n \n error: unresolved link to `T::h`\n   --> $DIR/errors.rs:91:6\n@@ -147,7 +151,7 @@ LL | /// [m()]\n help: to link to the macro, add an exclamation mark\n    |\n LL | /// [m!()]\n-   |       ^\n+   |       +\n \n error: aborting due to 20 previous errors\n "}, {"sha": "f45a3ca615bbe24f6aeba2d98add2da95ecc9b3f", "filename": "src/test/rustdoc-ui/intra-doc/field-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ffield-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ffield-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ffield-ice.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL | #![deny(rustdoc::broken_intra_doc_links)]\n help: to link to the field, remove the disambiguator\n    |\n LL | /// [`Foo::bar`]\n-   |       ^^^^^^^^\n+   |       ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "c43cda3eb7e9448aa47454f5f02c8637f813b825", "filename": "src/test/rustdoc-ui/intra-doc/incompatible-primitive-disambiguator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL | #![deny(rustdoc::broken_intra_doc_links)]\n help: to link to the associated constant, prefix with `const@`\n    |\n LL | //! [const@u8::MIN]\n-   |      ^^^^^^\n+   |      ~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "6ef3b7eab3bafe53cb326ac796c613fefbd2b521", "filename": "src/test/rustdoc-ui/intra-doc/prim-conflict.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,11 +12,11 @@ LL | #![deny(rustdoc::broken_intra_doc_links)]\n help: to link to the module, prefix with `mod@`\n    |\n LL | /// [mod@char]\n-   |      ^^^^\n+   |      ++++\n help: to link to the builtin type, prefix with `prim@`\n    |\n LL | /// [prim@char]\n-   |      ^^^^^\n+   |      +++++\n \n error: `char` is both a module and a builtin type\n   --> $DIR/prim-conflict.rs:10:6\n@@ -27,11 +27,11 @@ LL | /// [type@char]\n help: to link to the module, prefix with `mod@`\n    |\n LL | /// [mod@char]\n-   |      ^^^^\n+   |      ~~~~\n help: to link to the builtin type, prefix with `prim@`\n    |\n LL | /// [prim@char]\n-   |      ^^^^^\n+   |      ~~~~~\n \n error: incompatible link kind for `char`\n   --> $DIR/prim-conflict.rs:19:6\n@@ -42,7 +42,7 @@ LL | /// [struct@char]\n help: to link to the module, prefix with `mod@`\n    |\n LL | /// [mod@char]\n-   |      ^^^^\n+   |      ~~~~\n \n error: incompatible link kind for `char`\n   --> $DIR/prim-conflict.rs:26:10\n@@ -53,7 +53,7 @@ LL |     //! [struct@char]\n help: to link to the builtin type, prefix with `prim@`\n    |\n LL |     //! [prim@char]\n-   |          ^^^^^\n+   |          ~~~~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "5b1846a49d19fe0e7ef634f68e61a4cba58df46a", "filename": "src/test/rustdoc-ui/invalid-syntax.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL | | /// ```\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n-   |     ^^^^^^^\n+   |     ~~~~~~~\n \n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:9:5\n@@ -32,7 +32,7 @@ LL | | /// ```\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n-   |     ^^^^^^^\n+   |     ~~~~~~~\n \n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:21:5\n@@ -47,7 +47,7 @@ LL | | /// ```\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n-   |     ^^^^^^^\n+   |     ~~~~~~~\n \n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:35:5\n@@ -123,7 +123,7 @@ LL | | /// ```\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n-   |     ^^^^^^^\n+   |     ~~~~~~~\n \n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:92:9\n@@ -148,7 +148,7 @@ LL | | /// ```\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n-   |     ^^^^^^^\n+   |     ~~~~~~~\n \n warning: 12 warnings emitted\n "}, {"sha": "b65b622c1ed4b5965539325ed02f8b51e936c5ac", "filename": "src/test/rustdoc-ui/nocapture-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -9,9 +9,9 @@ LL | | }\n    |\n help: you might have forgotten to add the struct literal inside the block\n    |\n-LL | fn foo() { SomeStruct {\n+LL ~ fn foo() { SomeStruct {\n LL |     Input: 123\n-LL | } }\n+LL ~ } }\n    |\n \n error: aborting due to previous error"}, {"sha": "55905e5ca6a5acdeb03027ff80c5661a5584dcb7", "filename": "src/test/ui/anon-params/anon-params-denied-2018.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -8,15 +8,15 @@ LL |     fn foo(i32);\n help: if this is a `self` type, give it a parameter name\n    |\n LL |     fn foo(self: i32);\n-   |            ^^^^^^^^^\n+   |            ~~~~~~~~~\n help: if this is a parameter name, give it a type\n    |\n LL |     fn foo(i32: TypeName);\n-   |            ^^^^^^^^^^^^^\n+   |            ~~~~~~~~~~~~~\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL |     fn foo(_: i32);\n-   |            ^^^^^^\n+   |            ~~~~~~\n \n error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:9:29\n@@ -28,15 +28,15 @@ LL |     fn foo_with_ref(&mut i32);\n help: if this is a `self` type, give it a parameter name\n    |\n LL |     fn foo_with_ref(self: &mut i32);\n-   |                     ^^^^^^^^^^^^^^\n+   |                     ~~~~~~~~~~~~~~\n help: if this is a parameter name, give it a type\n    |\n LL |     fn foo_with_ref(i32: &mut TypeName);\n-   |                     ^^^^^^^^^^^^^^^^^^\n+   |                     ~~~~~~~~~~~~~~~~~~\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL |     fn foo_with_ref(_: &mut i32);\n-   |                     ^^^^^^^^^^^\n+   |                     ~~~~~~~~~~~\n \n error: expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:12:47\n@@ -48,7 +48,7 @@ LL |     fn foo_with_qualified_path(<Bar as T>::Baz);\n help: explicitly ignore the parameter name\n    |\n LL |     fn foo_with_qualified_path(_: <Bar as T>::Baz);\n-   |                                ^^^^^^^^^^^^^^^^^^\n+   |                                ~~~~~~~~~~~~~~~~~~\n \n error: expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:15:56\n@@ -60,7 +60,7 @@ LL |     fn foo_with_qualified_path_and_ref(&<Bar as T>::Baz);\n help: explicitly ignore the parameter name\n    |\n LL |     fn foo_with_qualified_path_and_ref(_: &<Bar as T>::Baz);\n-   |                                        ^^^^^^^^^^^^^^^^^^^\n+   |                                        ~~~~~~~~~~~~~~~~~~~\n \n error: expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `,`\n   --> $DIR/anon-params-denied-2018.rs:18:57\n@@ -72,7 +72,7 @@ LL |     fn foo_with_multiple_qualified_paths(<Bar as T>::Baz, <Bar as T>::Baz);\n help: explicitly ignore the parameter name\n    |\n LL |     fn foo_with_multiple_qualified_paths(_: <Bar as T>::Baz, <Bar as T>::Baz);\n-   |                                          ^^^^^^^^^^^^^^^^^^\n+   |                                          ~~~~~~~~~~~~~~~~~~\n \n error: expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:18:74\n@@ -84,7 +84,7 @@ LL |     fn foo_with_multiple_qualified_paths(<Bar as T>::Baz, <Bar as T>::Baz);\n help: explicitly ignore the parameter name\n    |\n LL |     fn foo_with_multiple_qualified_paths(<Bar as T>::Baz, _: <Bar as T>::Baz);\n-   |                                                           ^^^^^^^^^^^^^^^^^^\n+   |                                                           ~~~~~~~~~~~~~~~~~~\n \n error: expected one of `:`, `@`, or `|`, found `,`\n   --> $DIR/anon-params-denied-2018.rs:22:36\n@@ -96,15 +96,15 @@ LL |     fn bar_with_default_impl(String, String) {}\n help: if this is a `self` type, give it a parameter name\n    |\n LL |     fn bar_with_default_impl(self: String, String) {}\n-   |                              ^^^^^^^^^^^^\n+   |                              ~~~~~~~~~~~~\n help: if this is a parameter name, give it a type\n    |\n LL |     fn bar_with_default_impl(String: TypeName, String) {}\n-   |                              ^^^^^^^^^^^^^^^^\n+   |                              ~~~~~~~~~~~~~~~~\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL |     fn bar_with_default_impl(_: String, String) {}\n-   |                              ^^^^^^^^^\n+   |                              ~~~~~~~~~\n \n error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:22:44\n@@ -116,11 +116,11 @@ LL |     fn bar_with_default_impl(String, String) {}\n help: if this is a parameter name, give it a type\n    |\n LL |     fn bar_with_default_impl(String, String: TypeName) {}\n-   |                                      ^^^^^^^^^^^^^^^^\n+   |                                      ~~~~~~~~~~~~~~~~\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL |     fn bar_with_default_impl(String, _: String) {}\n-   |                                      ^^^^^^^^^\n+   |                                      ~~~~~~~~~\n \n error: expected one of `:`, `@`, or `|`, found `,`\n   --> $DIR/anon-params-denied-2018.rs:27:22\n@@ -132,11 +132,11 @@ LL |     fn baz(a:usize, b, c: usize) -> usize {\n help: if this is a parameter name, give it a type\n    |\n LL |     fn baz(a:usize, b: TypeName, c: usize) -> usize {\n-   |                     ^^^^^^^^^^^\n+   |                     ~~~~~~~~~~~\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL |     fn baz(a:usize, _: b, c: usize) -> usize {\n-   |                     ^^^^\n+   |                     ~~~~\n \n error: aborting due to 9 previous errors\n "}, {"sha": "d4c12b8e061cc4da070345426477856cce97d503", "filename": "src/test/ui/associated-consts/associated-const-ambiguity-report.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-ambiguity-report.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-ambiguity-report.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-ambiguity-report.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -17,11 +17,11 @@ LL |     const ID: i32 = 3;\n help: disambiguate the associated constant for candidate #1\n    |\n LL | const X: i32 = Foo::ID;\n-   |                ^^^^^\n+   |                ~~~~~\n help: disambiguate the associated constant for candidate #2\n    |\n LL | const X: i32 = Bar::ID;\n-   |                ^^^^^\n+   |                ~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "703d790e92ce9c89e28d8103176c7d4fd9ec9596", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -13,7 +13,7 @@ LL | pub unsafe auto trait Send {\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Send {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error[E0277]: `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:43\n@@ -30,7 +30,7 @@ LL | pub trait Iterator {\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Iterator {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error[E0277]: `<<Self as Case1>::C as Iterator>::Item` cannot be shared between threads safely\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:93\n@@ -47,7 +47,7 @@ LL | pub unsafe auto trait Sync {\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Sync {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f3bd48f8c372490ecbec00c05dc2c38ddf1c81fc", "filename": "src/test/ui/associated-type-bounds/bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -13,7 +13,7 @@ LL | pub trait Debug {\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::A as Iterator>::Item: Debug {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             +++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error[E0277]: the trait bound `<<Self as Foo>::Out as Baz>::Assoc: Default` is not satisfied\n   --> $DIR/bounds-on-assoc-in-trait.rs:35:38\n@@ -29,7 +29,7 @@ LL | pub trait Default: Sized {\n help: consider further restricting the associated type\n    |\n LL | pub trait Foo where <<Self as Foo>::Out as Baz>::Assoc: Default { type Out: Baz<Assoc: Default>; }\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               +++++++++++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0cacd78724732ee19b83d57aeb6cd8ce566f0e5a", "filename": "src/test/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -64,11 +64,11 @@ LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n help: borrowed types always have a statically known size\n    |\n LL | enum E1 { V(&dyn Iterator<Item: Copy>) }\n-   |             ^\n+   |             +\n help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL | enum E1 { V(Box<dyn Iterator<Item: Copy>>) }\n-   |             ^^^^                        ^\n+   |             ++++                        +\n \n error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)` cannot be known at compilation time\n   --> $DIR/inside-adt.rs:16:13\n@@ -82,11 +82,11 @@ LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n help: borrowed types always have a statically known size\n    |\n LL | enum E3 { V(&dyn Iterator<Item: 'static>) }\n-   |             ^\n+   |             +\n help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL | enum E3 { V(Box<dyn Iterator<Item: 'static>>) }\n-   |             ^^^^                           ^\n+   |             ++++                           +\n \n error[E0277]: the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)` cannot be known at compilation time\n   --> $DIR/inside-adt.rs:20:15\n@@ -100,11 +100,11 @@ LL | union U1 { f: dyn Iterator<Item: Copy> }\n help: borrowed types always have a statically known size\n    |\n LL | union U1 { f: &dyn Iterator<Item: Copy> }\n-   |               ^\n+   |               +\n help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL | union U1 { f: Box<dyn Iterator<Item: Copy>> }\n-   |               ^^^^                        ^\n+   |               ++++                        +\n \n error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)` cannot be known at compilation time\n   --> $DIR/inside-adt.rs:25:15\n@@ -118,11 +118,11 @@ LL | union U3 { f: dyn Iterator<Item: 'static> }\n help: borrowed types always have a statically known size\n    |\n LL | union U3 { f: &dyn Iterator<Item: 'static> }\n-   |               ^\n+   |               +\n help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL | union U3 { f: Box<dyn Iterator<Item: 'static>> }\n-   |               ^^^^                           ^\n+   |               ++++                           +\n \n error: aborting due to 13 previous errors\n "}, {"sha": "6bde9d1a50df42ae67d04bb09dce560d41a9a5de", "filename": "src/test/ui/associated-type-bounds/type-alias.stderr", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,8 +7,9 @@ LL | type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n    = note: `#[warn(type_alias_bounds)]` on by default\n help: the clause will not be checked when the type alias is used, and should be removed\n    |\n-LL | type _TaWhere1<T>  = T;\n-   |                  --\n+LL - type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n+LL + type _TaWhere1<T>  = T;\n+   | \n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias.rs:6:25\n@@ -18,8 +19,9 @@ LL | type _TaWhere2<T> where T: Iterator<Item: 'static> = T;\n    |\n help: the clause will not be checked when the type alias is used, and should be removed\n    |\n-LL | type _TaWhere2<T>  = T;\n-   |                  --\n+LL - type _TaWhere2<T> where T: Iterator<Item: 'static> = T;\n+LL + type _TaWhere2<T>  = T;\n+   | \n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias.rs:7:25\n@@ -29,8 +31,9 @@ LL | type _TaWhere3<T> where T: Iterator<Item: 'static> = T;\n    |\n help: the clause will not be checked when the type alias is used, and should be removed\n    |\n-LL | type _TaWhere3<T>  = T;\n-   |                  --\n+LL - type _TaWhere3<T> where T: Iterator<Item: 'static> = T;\n+LL + type _TaWhere3<T>  = T;\n+   | \n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias.rs:8:25\n@@ -40,8 +43,9 @@ LL | type _TaWhere4<T> where T: Iterator<Item: 'static + Copy + Send> = T;\n    |\n help: the clause will not be checked when the type alias is used, and should be removed\n    |\n-LL | type _TaWhere4<T>  = T;\n-   |                  --\n+LL - type _TaWhere4<T> where T: Iterator<Item: 'static + Copy + Send> = T;\n+LL + type _TaWhere4<T>  = T;\n+   | \n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias.rs:9:25\n@@ -51,8 +55,9 @@ LL | type _TaWhere5<T> where T: Iterator<Item: for<'a> Into<&'a u8>> = T;\n    |\n help: the clause will not be checked when the type alias is used, and should be removed\n    |\n-LL | type _TaWhere5<T>  = T;\n-   |                  --\n+LL - type _TaWhere5<T> where T: Iterator<Item: for<'a> Into<&'a u8>> = T;\n+LL + type _TaWhere5<T>  = T;\n+   | \n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias.rs:10:25\n@@ -62,8 +67,9 @@ LL | type _TaWhere6<T> where T: Iterator<Item: Iterator<Item: Copy>> = T;\n    |\n help: the clause will not be checked when the type alias is used, and should be removed\n    |\n-LL | type _TaWhere6<T>  = T;\n-   |                  --\n+LL - type _TaWhere6<T> where T: Iterator<Item: Iterator<Item: Copy>> = T;\n+LL + type _TaWhere6<T>  = T;\n+   | \n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:12:20\n@@ -73,8 +79,9 @@ LL | type _TaInline1<T: Iterator<Item: Copy>> = T;\n    |\n help: the bound will not be checked when the type alias is used, and should be removed\n    |\n-LL | type _TaInline1<T> = T;\n-   |                 --\n+LL - type _TaInline1<T: Iterator<Item: Copy>> = T;\n+LL + type _TaInline1<T> = T;\n+   | \n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:13:20\n@@ -84,8 +91,9 @@ LL | type _TaInline2<T: Iterator<Item: 'static>> = T;\n    |\n help: the bound will not be checked when the type alias is used, and should be removed\n    |\n-LL | type _TaInline2<T> = T;\n-   |                 --\n+LL - type _TaInline2<T: Iterator<Item: 'static>> = T;\n+LL + type _TaInline2<T> = T;\n+   | \n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:14:20\n@@ -95,8 +103,9 @@ LL | type _TaInline3<T: Iterator<Item: 'static>> = T;\n    |\n help: the bound will not be checked when the type alias is used, and should be removed\n    |\n-LL | type _TaInline3<T> = T;\n-   |                 --\n+LL - type _TaInline3<T: Iterator<Item: 'static>> = T;\n+LL + type _TaInline3<T> = T;\n+   | \n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:15:20\n@@ -106,8 +115,9 @@ LL | type _TaInline4<T: Iterator<Item: 'static + Copy + Send>> = T;\n    |\n help: the bound will not be checked when the type alias is used, and should be removed\n    |\n-LL | type _TaInline4<T> = T;\n-   |                 --\n+LL - type _TaInline4<T: Iterator<Item: 'static + Copy + Send>> = T;\n+LL + type _TaInline4<T> = T;\n+   | \n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:16:20\n@@ -117,8 +127,9 @@ LL | type _TaInline5<T: Iterator<Item: for<'a> Into<&'a u8>>> = T;\n    |\n help: the bound will not be checked when the type alias is used, and should be removed\n    |\n-LL | type _TaInline5<T> = T;\n-   |                 --\n+LL - type _TaInline5<T: Iterator<Item: for<'a> Into<&'a u8>>> = T;\n+LL + type _TaInline5<T> = T;\n+   | \n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:17:20\n@@ -128,8 +139,9 @@ LL | type _TaInline6<T: Iterator<Item: Iterator<Item: Copy>>> = T;\n    |\n help: the bound will not be checked when the type alias is used, and should be removed\n    |\n-LL | type _TaInline6<T> = T;\n-   |                 --\n+LL - type _TaInline6<T: Iterator<Item: Iterator<Item: Copy>>> = T;\n+LL + type _TaInline6<T> = T;\n+   | \n \n warning: 12 warnings emitted\n "}, {"sha": "474b3c5c717c44fb55a2d1abc8de5134007692fe", "filename": "src/test/ui/associated-types/associated-type-projection-ambig-between-bound-and-where-clause.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -13,11 +13,11 @@ LL | fn a<C:Vehicle+Box>(_: C::Color) {\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn a<C:Vehicle+Box>(_: <C as Box>::Color) {\n-   |                        ^^^^^^^^^^^^^^^^^\n+   |                        ~~~~~~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn a<C:Vehicle+Box>(_: <C as Vehicle>::Color) {\n-   |                        ^^^^^^^^^^^^^^^^^^^^^\n+   |                        ~~~~~~~~~~~~~~~~~~~~~\n \n error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:20:12\n@@ -34,11 +34,11 @@ LL | fn b<C>(_: C::Color) where C : Vehicle+Box {\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn b<C>(_: <C as Box>::Color) where C : Vehicle+Box {\n-   |            ^^^^^^^^^^^^^^^^^\n+   |            ~~~~~~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn b<C>(_: <C as Vehicle>::Color) where C : Vehicle+Box {\n-   |            ^^^^^^^^^^^^^^^^^^^^^\n+   |            ~~~~~~~~~~~~~~~~~~~~~\n \n error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:24:12\n@@ -55,11 +55,11 @@ LL | fn c<C>(_: C::Color) where C : Vehicle, C : Box {\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn c<C>(_: <C as Box>::Color) where C : Vehicle, C : Box {\n-   |            ^^^^^^^^^^^^^^^^^\n+   |            ~~~~~~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn c<C>(_: <C as Vehicle>::Color) where C : Vehicle, C : Box {\n-   |            ^^^^^^^^^^^^^^^^^^^^^\n+   |            ~~~~~~~~~~~~~~~~~~~~~\n \n error[E0221]: ambiguous associated type `Color` in bounds of `X`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:35:20\n@@ -76,11 +76,11 @@ LL |     fn e(&self, _: X::Color) where X : Box;\n help: use fully qualified syntax to disambiguate\n    |\n LL |     fn e(&self, _: <X as Box>::Color) where X : Box;\n-   |                    ^^^^^^^^^^^^^^^^^\n+   |                    ~~~~~~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL |     fn e(&self, _: <X as Vehicle>::Color) where X : Box;\n-   |                    ^^^^^^^^^^^^^^^^^^^^^\n+   |                    ~~~~~~~~~~~~~~~~~~~~~\n \n error[E0221]: ambiguous associated type `Color` in bounds of `X`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:38:20\n@@ -97,11 +97,11 @@ LL |     fn f(&self, _: X::Color) where X : Box { }\n help: use fully qualified syntax to disambiguate\n    |\n LL |     fn f(&self, _: <X as Box>::Color) where X : Box { }\n-   |                    ^^^^^^^^^^^^^^^^^\n+   |                    ~~~~~~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL |     fn f(&self, _: <X as Vehicle>::Color) where X : Box { }\n-   |                    ^^^^^^^^^^^^^^^^^^^^^\n+   |                    ~~~~~~~~~~~~~~~~~~~~~\n \n error[E0221]: ambiguous associated type `Color` in bounds of `X`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:30:20\n@@ -118,11 +118,11 @@ LL |     fn d(&self, _: X::Color) where X : Box { }\n help: use fully qualified syntax to disambiguate\n    |\n LL |     fn d(&self, _: <X as Box>::Color) where X : Box { }\n-   |                    ^^^^^^^^^^^^^^^^^\n+   |                    ~~~~~~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL |     fn d(&self, _: <X as Vehicle>::Color) where X : Box { }\n-   |                    ^^^^^^^^^^^^^^^^^^^^^\n+   |                    ~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 6 previous errors\n "}, {"sha": "e6e95336bb53d56e523bbaae93739ee8ef7862cd", "filename": "src/test/ui/associated-types/associated-type-projection-from-multiple-supertraits.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -21,11 +21,11 @@ LL | fn dent<C:BoxCar>(c: C, color: C::Color) {\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn dent<C:BoxCar>(c: C, color: <C as Vehicle>::Color) {\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |                                ~~~~~~~~~~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn dent<C:BoxCar>(c: C, color: <C as Box>::Color) {\n-   |                                ^^^^^^^^^^^^^^^^^\n+   |                                ~~~~~~~~~~~~~~~~~\n \n error[E0222]: ambiguous associated type `Color` in bounds of `BoxCar`\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:37\n@@ -74,11 +74,11 @@ LL | fn paint<C:BoxCar>(c: C, d: C::Color) {\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn paint<C:BoxCar>(c: C, d: <C as Vehicle>::Color) {\n-   |                             ^^^^^^^^^^^^^^^^^^^^^\n+   |                             ~~~~~~~~~~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn paint<C:BoxCar>(c: C, d: <C as Box>::Color) {\n-   |                             ^^^^^^^^^^^^^^^^^\n+   |                             ~~~~~~~~~~~~~~~~~\n \n error[E0191]: the value of the associated types `Color` (from trait `Box`), `Color` (from trait `Vehicle`) must be specified\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:32:32"}, {"sha": "edcd2bf85adb64cc932e0914afc746faa7ce2ecb", "filename": "src/test/ui/associated-types/associated-types-bound-failure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     fn to_int(&self) -> isize;\n help: consider further restricting the associated type\n    |\n LL |     where G : GetToInt, <G as GetToInt>::R: ToInt\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       +++++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "e9ace7d2574b95e8ccb1e2ee2ccae3a854d3adf7", "filename": "src/test/ui/associated-types/associated-types-eq-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -9,11 +9,11 @@ LL |     let _: A = x.boo();\n help: a type parameter with a similar name exists\n    |\n LL |     let _: I = x.boo();\n-   |            ^\n+   |            ~\n help: you might be missing a type parameter\n    |\n LL | fn foo2<I: Foo, A>(x: I) {\n-   |               ^^^\n+   |               +++\n \n error: aborting due to previous error\n "}, {"sha": "5992b0d6bf1432b5fdd3e79fe7123425f195fe39", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL |     let _: Bar = x.boo();\n help: consider constraining the associated type `<I as Foo>::A` to `Bar`\n    |\n LL | fn foo2<I: Foo<A = Bar>>(x: I) {\n-   |               ^^^^^^^^^\n+   |               +++++++++\n \n error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:38:5"}, {"sha": "f2195ca694bd71c1c99080a9632eb904babf93e5", "filename": "src/test/ui/associated-types/associated-types-for-unimpl-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n help: consider further restricting `Self`\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get {}\n-   |                                                              ^^^^^^^^^^^^^^^\n+   |                                                              +++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "8fecfdf7b932b405341ad835e27aab454475e93b", "filename": "src/test/ui/associated-types/associated-types-invalid-trait-ref-issue-18865.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     let u: <T as Foo<usize>>::Bar = t.get_bar();\n help: consider further restricting this bound\n    |\n LL | fn f<T:Foo<isize> + Foo<usize>>(t: &T) {\n-   |                   ^^^^^^^^^^^^\n+   |                   ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "cfc75652a61b4153281f2d731e0e8ea46b1f9c77", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n help: consider constraining the associated type `<T as Foo>::Y` to `i32`\n    |\n LL | fn have_x_want_y<T:Foo<X=u32, Y = i32>>(t: &T)\n-   |                             ^^^^^^^^^\n+   |                             +++++++++\n \n error[E0271]: type mismatch resolving `<T as Foo>::X == u32`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:18:5\n@@ -28,7 +28,7 @@ LL | fn want_x<T:Foo<X=u32>>(t: &T) { }\n help: consider constraining the associated type `<T as Foo>::X` to `u32`\n    |\n LL | fn have_y_want_x<T:Foo<Y=i32, X = u32>>(t: &T)\n-   |                             ^^^^^^^^^\n+   |                             +++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "75f0354b81a6328739940f58714c74b65df3f4b8", "filename": "src/test/ui/associated-types/associated-types-no-suitable-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     fn uhoh<T>(foo: <T as Get>::Value) {}\n help: consider restricting type parameter `T`\n    |\n LL |     fn uhoh<T: Get>(foo: <T as Get>::Value) {}\n-   |              ^^^^^\n+   |              +++++\n \n error: aborting due to previous error\n "}, {"sha": "a432805ced8aece7617e3ca6216cb48eadfaac7c", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n help: consider further restricting `Self`\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get {}\n-   |                                                              ^^^^^^^^^^^^^^^\n+   |                                                              +++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "10b2ab5e9741c465b68aefd083e7f865f0be68ae", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n help: consider further restricting `Self`\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get {}\n-   |                                                              ^^^^^^^^^^^^^^^\n+   |                                                              +++++++++++++++\n \n error[E0277]: the trait bound `(T, U): Get` is not satisfied\n   --> $DIR/associated-types-no-suitable-supertrait.rs:22:40"}, {"sha": "8f94b24e7b6b616cf74d5ff948e211f6b18bafd9", "filename": "src/test/ui/associated-types/associated-types-path-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -19,11 +19,11 @@ LL | pub fn f2<T: Foo + Bar>(a: T, x: T::A) {}\n help: use fully qualified syntax to disambiguate\n    |\n LL | pub fn f2<T: Foo + Bar>(a: T, x: <T as Bar>::A) {}\n-   |                                  ^^^^^^^^^^^^^\n+   |                                  ~~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL | pub fn f2<T: Foo + Bar>(a: T, x: <T as Foo>::A) {}\n-   |                                  ^^^^^^^^^^^^^\n+   |                                  ~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "77b638b703b4c6c851b5dd814be4195235012dec", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     f1(2i32, 4i32);\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     f1(2i32, 4u32);\n-   |              ^^^^\n+   |              ~~~~\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:29:5\n@@ -50,7 +50,7 @@ LL |     let _: i32 = f2(2i32);\n help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     let _: i32 = f2(2i32).try_into().unwrap();\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 6 previous errors\n "}, {"sha": "62a619723511e6a9948b08e15911222e3587a8ce", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -6,8 +6,8 @@ LL |     field: I::A\n    |\n help: use a fully qualified path with explicit lifetimes\n    |\n-LL | struct SomeStruct<'a, I: for<'x> Foo<&'x isize>> {\n-LL |     field: <I as Foo<&'a isize>>::A\n+LL ~ struct SomeStruct<'a, I: for<'x> Foo<&'x isize>> {\n+LL ~     field: <I as Foo<&'a isize>>::A\n    |\n \n error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n@@ -18,8 +18,8 @@ LL |     TupleVariant(I::A),\n    |\n help: use a fully qualified path with explicit lifetimes\n    |\n-LL | enum SomeEnum<'c, 'b, I: for<'a> Foo<&'a isize>> {\n-LL |     TupleVariant(<I as Foo<&'c isize>>::A),\n+LL ~ enum SomeEnum<'c, 'b, I: for<'a> Foo<&'a isize>> {\n+LL ~     TupleVariant(<I as Foo<&'c isize>>::A),\n    |\n \n error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n@@ -30,10 +30,10 @@ LL |     StructVariant { field: I::A },\n    |\n help: use a fully qualified path with explicit lifetimes\n    |\n-LL | enum SomeEnum<'c, 'b, I: for<'a> Foo<&'a isize>> {\n+LL ~ enum SomeEnum<'c, 'b, I: for<'a> Foo<&'a isize>> {\n LL |     TupleVariant(I::A),\n LL |\n-LL |     StructVariant { field: <I as Foo<&'c isize>>::A },\n+LL ~     StructVariant { field: <I as Foo<&'c isize>>::A },\n    |\n \n error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n@@ -44,9 +44,9 @@ LL |     field: I::A,\n    |\n help: use a fully qualified path with explicit lifetimes\n    |\n-LL | struct Why<'bb, 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'n, 'o, 'p, 'q, 'r, 's, 't, 'u, 'v, 'w, 'x,\n+LL ~ struct Why<'bb, 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'n, 'o, 'p, 'q, 'r, 's, 't, 'u, 'v, 'w, 'x,\n LL |     'y, 'z, 'aa, I: for<'l, 'm> Foo<&'l &'m isize>> {\n-LL |     field: <I as Foo<&'bb &'bb isize>>::A,\n+LL ~     field: <I as Foo<&'bb &'bb isize>>::A,\n    |\n \n error: aborting due to 4 previous errors"}, {"sha": "7bbf060fdb68622adf6686908a6fd2b20b100445", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value);\n help: consider further restricting `Self`\n    |\n LL |     fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get;\n-   |                                                              ^^^^^^^^^^^^^^^\n+   |                                                              +++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "bec9b1500c9d7c7256d47dd0eabbadf31acd3c74", "filename": "src/test/ui/associated-types/associated-types-unsized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     let x = t.get();\n help: consider further restricting the associated type\n    |\n LL | fn foo<T:Get>(t: T) where <T as Get>::Value: Sized {\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ++++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "e8e07997c721df94b12bd3199e885217767f7795", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.elision.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -9,11 +9,11 @@ LL | fn elision<T: Fn() -> &i32>() {\n help: consider making the bound lifetime-generic with a new `'a` lifetime\n    |\n LL | fn elision<T: for<'a> Fn() -> &'a i32>() {\n-   |               ^^^^^^^         ^^^\n+   |               +++++++         ~~~\n help: consider using the `'static` lifetime\n    |\n LL | fn elision<T: Fn() -> &'static i32>() {\n-   |                       ^^^^^^^^\n+   |                       ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "c75e732b7ca4c82c56a301d71e0a2c408e14cea7", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.elision.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -9,11 +9,11 @@ LL | fn elision(_: fn() -> &i32) {\n help: consider making the type lifetime-generic with a new `'a` lifetime\n    |\n LL | fn elision(_: for<'a> fn() -> &'a i32) {\n-   |               ^^^^^^^         ^^^\n+   |               +++++++         ~~~\n help: consider using the `'static` lifetime\n    |\n LL | fn elision(_: fn() -> &'static i32) {\n-   |                       ^^^^^^^^\n+   |                       ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "7023516e37f377db9b34c5422d14b9a78b46e535", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -32,7 +32,7 @@ LL |     type Bar: Clone = Vec<T>;\n help: consider restricting type parameter `T`\n    |\n LL | trait Foo<T: std::clone::Clone> {\n-   |            ^^^^^^^^^^^^^^^^^^^\n+   |            +++++++++++++++++++\n \n error[E0277]: the trait bound `(): Foo<Self>` is not satisfied\n   --> $DIR/defaults-suitability.rs:34:5\n@@ -68,7 +68,7 @@ LL |     type Bar: Clone = Vec<Self::Baz>;\n help: consider further restricting the associated type\n    |\n LL | trait Foo2<T> where <Self as Foo2<T>>::Baz: Clone {\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               +++++++++++++++++++++++++++++++++++\n \n error[E0277]: the trait bound `<Self as Foo25<T>>::Baz: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:74:5\n@@ -83,7 +83,7 @@ LL |     type Bar: Clone = Vec<Self::Baz>;\n help: consider further restricting the associated type\n    |\n LL | trait Foo25<T: Clone> where <Self as Foo25<T>>::Baz: Clone {\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ++++++++++++++++++++++++++++++++++++\n \n error[E0277]: the trait bound `T: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:87:5\n@@ -100,7 +100,7 @@ LL |     type Baz = T;\n help: consider further restricting type parameter `T`\n    |\n LL |     Self::Baz: Clone, T: std::clone::Clone\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 8 previous errors\n "}, {"sha": "3449272238caed9e3395f6819ebce758801c857c", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + Fro\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + std::fmt::Display {\n-   |                            ^^^^^^^^^^^^^^^^^^^\n+   |                            +++++++++++++++++++\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n   --> $DIR/defaults-unsound-62211-1.rs:20:5\n@@ -25,7 +25,7 @@ LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + Fro\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + AddAssign<&'static str> {\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                            +++++++++++++++++++++++++\n \n error[E0277]: the trait bound `Self: Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:20:5\n@@ -39,7 +39,7 @@ LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + Fro\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + Deref {\n-   |                            ^^^^^^^\n+   |                            +++++++\n \n error[E0277]: the trait bound `Self: Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:20:5\n@@ -53,7 +53,7 @@ LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + Fro\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + Copy {\n-   |                            ^^^^^^\n+   |                            ++++++\n \n error: aborting due to 4 previous errors\n "}, {"sha": "3b86c534d58e07897647cd130781cdb4659166e7", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + Fro\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + std::fmt::Display {\n-   |                            ^^^^^^^^^^^^^^^^^^^\n+   |                            +++++++++++++++++++\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n   --> $DIR/defaults-unsound-62211-2.rs:20:5\n@@ -25,7 +25,7 @@ LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + Fro\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + AddAssign<&'static str> {\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                            +++++++++++++++++++++++++\n \n error[E0277]: the trait bound `Self: Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:20:5\n@@ -39,7 +39,7 @@ LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + Fro\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + Deref {\n-   |                            ^^^^^^^\n+   |                            +++++++\n \n error[E0277]: the trait bound `Self: Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:20:5\n@@ -53,7 +53,7 @@ LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + Fro\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + Copy {\n-   |                            ^^^^^^\n+   |                            ++++++\n \n error: aborting due to 4 previous errors\n "}, {"sha": "22bc0281d343a6b7a9863352ac2381dc0f0d20e8", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -28,7 +28,7 @@ LL | impl<S, T> X<'_, T> for (S,) {\n help: consider restricting type parameter `T`\n    |\n LL | impl<S, T: for<'b> X<'b, T>> X<'_, T> for (S,) {\n-   |          ^^^^^^^^^^^^^^^^^^\n+   |          ++++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "149279e417c1b6fe4ee2eefe8604241fe63bfb25", "filename": "src/test/ui/associated-types/hr-associated-type-projection-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -23,7 +23,7 @@ LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T {\n help: consider further restricting the associated type\n    |\n LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T where for<'b> <T as UnsafeCopy<'b, T>>::Item: Deref {\n-   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                         +++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "283ecea735d4156209b9f2b22614e9262fc451db", "filename": "src/test/ui/associated-types/impl-trait-return-missing-constraint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL | fn baz() -> impl Bar<Item = i32> {\n help: consider constraining the associated type `<impl Bar as Foo>::Item` to `i32`\n    |\n LL | fn bar() -> impl Bar<Item = i32> {\n-   |                     ^^^^^^^^^^^^\n+   |                     ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "1f14b5bb787a40022f28d42e1388684aa323cb7b", "filename": "src/test/ui/associated-types/issue-20005.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-20005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-20005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-20005.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,11 +10,11 @@ LL |     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n help: consider further restricting `Self`\n    |\n LL |     ) -> <Dst as From<Self>>::Result where Dst: From<Self>, Self: Sized {\n-   |                                                           ^^^^^^^^^^^^^\n+   |                                                           +++++++++++++\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait From<Src: ?Sized> {\n-   |               ^^^^^^^^\n+   |               ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "d2193cc4a489534ed2ba766d2e459581c642a13d", "filename": "src/test/ui/associated-types/issue-22560.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -52,7 +52,7 @@ LL | type Test = dyn Add + Sub;\n help: specify the associated types\n    |\n LL | type Test = dyn Add<Output = Type> + Sub<Output = Type>;\n-   |                 ^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^\n+   |                 ~~~~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "2bb8398c93ea4a8cd3fb522f5615b2a6a5d55de3", "filename": "src/test/ui/associated-types/issue-27675-unchecked-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     copy::<dyn Setup<From=T>>(t)\n help: consider restricting type parameter `T`\n    |\n LL | pub fn copy_any<T: std::marker::Copy>(t: &T) -> T {\n-   |                  ^^^^^^^^^^^^^^^^^^^\n+   |                  +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "c5e0cbc8a4a8ad44bf43f5839d4648b4d9914625", "filename": "src/test/ui/associated-types/issue-43784-associated-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     type Assoc = T;\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> Complete for T {\n-   |       ^^^^^^^^^^^^^^^^^^^\n+   |       +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "84012e651df59bac77268d37cefb16d1052420f4", "filename": "src/test/ui/associated-types/issue-54108.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54108.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54108.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54108.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL |     type Size = <Self as SubEncoder>::ActualSize;\n help: consider further restricting the associated type\n    |\n LL |     T: SubEncoder, <T as SubEncoder>::ActualSize: Add\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "59637367604de6c84598016446b8392d808b5a71", "filename": "src/test/ui/associated-types/issue-63593.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     type This = Self;\n help: consider further restricting `Self`\n    |\n LL | trait MyTrait: Sized {\n-   |              ^^^^^^^\n+   |              +++++++\n \n error: aborting due to previous error\n "}, {"sha": "780ef118d1cb255b1bef1bbab972a2824c06422c", "filename": "src/test/ui/associated-types/issue-87261.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     accepts_trait(a);\n help: consider constraining the associated type `<A as Trait>::Associated` to `()`\n    |\n LL |     A: Trait<Associated = ()> + 'static,\n-   |             ^^^^^^^^^^^^^^^^^\n+   |             +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<B as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:59:5\n@@ -42,7 +42,7 @@ LL |     accepts_trait(c);\n help: consider constraining the associated type `<C as Trait>::Associated` to `()`\n    |\n LL |     C: Trait<Associated = ()> + Foo,\n-   |             ^^^^^^^^^^^^^^^^^\n+   |             +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<D as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:65:5\n@@ -72,7 +72,7 @@ LL |     accepts_generic_trait(e);\n help: consider constraining the associated type `<E as GenericTrait<()>>::Associated` to `()`\n    |\n LL |     E: GenericTrait<(), Associated = ()> + 'static,\n-   |                       ^^^^^^^^^^^^^^^^^\n+   |                       +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<F as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:71:5\n@@ -88,7 +88,7 @@ LL |     accepts_generic_trait(f);\n help: consider constraining the associated type `<F as GenericTrait<()>>::Associated` to `()`\n    |\n LL |     F: GenericTrait<(), Associated = ()> + Foo,\n-   |                       ^^^^^^^^^^^^^^^^^\n+   |                       +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<G as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:74:5\n@@ -121,7 +121,7 @@ LL |     accepts_trait(returns_opaque());\n help: consider constraining the associated type `<impl Trait as Trait>::Associated` to `()`\n    |\n LL | fn returns_opaque() -> impl Trait<Associated = ()> + 'static {\n-   |                                  ^^^^^^^^^^^^^^^^^\n+   |                                  +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:82:5\n@@ -140,7 +140,7 @@ LL |     accepts_trait(returns_opaque_derived());\n help: consider constraining the associated type `<impl DerivedTrait as Trait>::Associated` to `()`\n    |\n LL | fn returns_opaque_derived() -> impl DerivedTrait<Associated = ()> + 'static {\n-   |                                                 ^^^^^^^^^^^^^^^^^\n+   |                                                 +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<impl Trait+Foo as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:85:5\n@@ -159,7 +159,7 @@ LL |     accepts_trait(returns_opaque_foo());\n help: consider constraining the associated type `<impl Trait+Foo as Trait>::Associated` to `()`\n    |\n LL | fn returns_opaque_foo() -> impl Trait<Associated = ()> + Foo {\n-   |                                      ^^^^^^^^^^^^^^^^^\n+   |                                      +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<impl DerivedTrait+Foo as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:88:5\n@@ -195,7 +195,7 @@ LL |     accepts_generic_trait(returns_opaque_generic());\n help: consider constraining the associated type `<impl GenericTrait<()> as GenericTrait<()>>::Associated` to `()`\n    |\n LL | fn returns_opaque_generic() -> impl GenericTrait<(), Associated = ()> + 'static {\n-   |                                                    ^^^^^^^^^^^^^^^^^\n+   |                                                    +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<impl GenericTrait<()>+Foo as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:94:5\n@@ -214,7 +214,7 @@ LL |     accepts_generic_trait(returns_opaque_generic_foo());\n help: consider constraining the associated type `<impl GenericTrait<()>+Foo as GenericTrait<()>>::Associated` to `()`\n    |\n LL | fn returns_opaque_generic_foo() -> impl GenericTrait<(), Associated = ()> + Foo {\n-   |                                                        ^^^^^^^^^^^^^^^^^\n+   |                                                        +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<impl GenericTrait<()>+GenericTrait<u8> as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:97:5"}, {"sha": "340d4e2418e0f4a55d761a0c5a133f57bffa6ba0", "filename": "src/test/ui/associated-types/missing-associated-types.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -25,7 +25,7 @@ LL | type Foo<Rhs> = dyn Add<Rhs> + Sub<Rhs> + X<Rhs> + Y<Rhs>;\n help: specify the associated types\n    |\n LL | type Foo<Rhs> = dyn Add<Rhs, Output = Type> + Sub<Rhs, Output = Type> + X<Rhs, Output = Type> + Y<Rhs, A = Type>;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^\n+   |                     ~~~~~~~~~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/missing-associated-types.rs:15:32\n@@ -61,7 +61,7 @@ LL | type Bar<Rhs> = dyn Add<Rhs> + Sub<Rhs> + X<Rhs> + Z<Rhs>;\n help: specify the associated types\n    |\n LL | type Bar<Rhs> = dyn Add<Rhs, Output = Type> + Sub<Rhs, Output = Type> + X<Rhs> + Z<Rhs, A = Type, B = Type, Output = Type>;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ~~~~~~~~~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/missing-associated-types.rs:18:32\n@@ -89,7 +89,7 @@ LL | type Baz<Rhs> = dyn Add<Rhs> + Sub<Rhs> + Y<Rhs>;\n help: specify the associated types\n    |\n LL | type Baz<Rhs> = dyn Add<Rhs, Output = Type> + Sub<Rhs, Output = Type> + Y<Rhs, A = Type>;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^\n+   |                     ~~~~~~~~~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/missing-associated-types.rs:21:32\n@@ -113,7 +113,7 @@ LL | type Bat<Rhs> = dyn Add<Rhs> + Sub<Rhs> + Fine<Rhs>;\n help: specify the associated types\n    |\n LL | type Bat<Rhs> = dyn Add<Rhs, Output = Type> + Sub<Rhs, Output = Type> + Fine<Rhs>;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ~~~~~~~~~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0191]: the value of the associated types `Output` (from trait `Div`), `Output` (from trait `Mul`) must be specified\n   --> $DIR/missing-associated-types.rs:24:21"}, {"sha": "529b0f76c50d26d426917fd176c95071d7acb488", "filename": "src/test/ui/associated-types/trait-with-supertraits-needing-sized-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL | pub trait Add<Rhs = Self> {\n help: consider further restricting `Self`\n    |\n LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + Div<Output=Self> + Sized {}\n-   |                                                                                                ^^^^^^^\n+   |                                                                                                +++++++\n \n error: aborting due to previous error\n "}, {"sha": "44d60c1d80d881310f01d900ba00a075910bd06b", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -15,7 +15,7 @@ LL | fn test_boxed() -> Box<impl std::future::Future<Output = u32>> {\n help: to force the async block to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |     Box::new(async move { x } )\n-   |                    ^^^^\n+   |                    ++++\n \n error[E0373]: async block may outlive the current function, but it borrows `x`, which is owned by the current function\n   --> $DIR/async-borrowck-escaping-block-error.rs:11:11\n@@ -34,7 +34,7 @@ LL |     async { *x }\n help: to force the async block to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |     async move { *x }\n-   |           ^^^^\n+   |           ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "10691aad04e811c1c63c79de81a6d0b98785e338", "filename": "src/test/ui/async-await/async-borrowck-escaping-closure-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL |     Box::new((async || x)())\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |     Box::new((async move || x)())\n-   |                     ^^^^\n+   |                     ++++\n \n error: aborting due to previous error\n "}, {"sha": "56020d1b2f599b5b90dff37936c05ad234094deb", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error-in-non-macro-position.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     pub mod await {\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     pub mod r#await {\n-   |             ^^^^^^^\n+   |             ~~~~~~~\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:7:20\n@@ -18,7 +18,7 @@ LL |         pub struct await;\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |         pub struct r#await;\n-   |                    ^^^^^^^\n+   |                    ~~~~~~~\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:10:22\n@@ -29,7 +29,7 @@ LL | use self::outer_mod::await::await;\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | use self::outer_mod::r#await::await;\n-   |                      ^^^^^^^\n+   |                      ~~~~~~~\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:10:29\n@@ -40,7 +40,7 @@ LL | use self::outer_mod::await::await;\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | use self::outer_mod::await::r#await;\n-   |                             ^^^^^^^\n+   |                             ~~~~~~~\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:13:14\n@@ -51,7 +51,7 @@ LL | struct Foo { await: () }\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | struct Foo { r#await: () }\n-   |              ^^^^^^^\n+   |              ~~~~~~~\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:16:15\n@@ -62,7 +62,7 @@ LL | impl Foo { fn await() {} }\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | impl Foo { fn r#await() {} }\n-   |               ^^^^^^^\n+   |               ~~~~~~~\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:19:14\n@@ -73,7 +73,7 @@ LL | macro_rules! await {\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | macro_rules! r#await {\n-   |              ^^^^^^^\n+   |              ~~~~~~~\n \n error: aborting due to 7 previous errors\n "}, {"sha": "e90cd644457a18843bcbf100009a918c55a19969", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     pub mod await {\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     pub mod r#await {\n-   |             ^^^^^^^\n+   |             ~~~~~~~\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error.rs:6:20\n@@ -18,7 +18,7 @@ LL |         pub struct await;\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |         pub struct r#await;\n-   |                    ^^^^^^^\n+   |                    ~~~~~~~\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error.rs:9:22\n@@ -29,7 +29,7 @@ LL | use self::outer_mod::await::await;\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | use self::outer_mod::r#await::await;\n-   |                      ^^^^^^^\n+   |                      ~~~~~~~\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error.rs:9:29\n@@ -40,7 +40,7 @@ LL | use self::outer_mod::await::await;\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | use self::outer_mod::await::r#await;\n-   |                             ^^^^^^^\n+   |                             ~~~~~~~\n \n error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error.rs:12:14\n@@ -51,7 +51,7 @@ LL | macro_rules! await { () => {}; }\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | macro_rules! r#await { () => {}; }\n-   |              ^^^^^^^\n+   |              ~~~~~~~\n \n error: expected expression, found `)`\n   --> $DIR/2018-edition-error.rs:15:12"}, {"sha": "76bbad26c8026443e6d869ea5fa8994c0d8a7831", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL | async fn make_u32() -> u32 {\n help: consider `await`ing on the `Future`\n    |\n LL |         take_u32(x.await)\n-   |                   ^^^^^^\n+   |                   ++++++\n \n error: aborting due to previous error\n "}, {"sha": "60b5bfa53d77fb07cc425ff4e1e59cb8379a869d", "filename": "src/test/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -13,7 +13,7 @@ LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n help: consider `await`ing on the `Future`\n    |\n LL |     foo().await?;\n-   |          ^^^^^^\n+   |          ++++++\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n   --> $DIR/issue-61076.rs:67:5\n@@ -30,7 +30,7 @@ LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n help: consider `await`ing on the `Future`\n    |\n LL |     t.await?;\n-   |      ^^^^^^\n+   |      ++++++\n \n error[E0609]: no field `0` on type `impl Future`\n   --> $DIR/issue-61076.rs:78:26\n@@ -41,7 +41,7 @@ LL |     let _: i32 = tuple().0;\n help: consider `await`ing on the `Future` and access the field of its `Output`\n    |\n LL |     let _: i32 = tuple().await.0;\n-   |                         ^^^^^^\n+   |                         ++++++\n \n error[E0609]: no field `a` on type `impl Future`\n   --> $DIR/issue-61076.rs:82:28\n@@ -52,7 +52,7 @@ LL |     let _: i32 = struct_().a;\n help: consider `await`ing on the `Future` and access the field of its `Output`\n    |\n LL |     let _: i32 = struct_().await.a;\n-   |                           ^^^^^^\n+   |                           ++++++\n \n error[E0599]: no method named `method` found for opaque type `impl Future` in the current scope\n   --> $DIR/issue-61076.rs:86:15\n@@ -63,7 +63,7 @@ LL |     struct_().method();\n help: consider `await`ing on the `Future` and calling the method on its `Output`\n    |\n LL |     struct_().await.method();\n-   |               ^^^^^^\n+   |               ++++++\n \n error[E0308]: mismatched types\n   --> $DIR/issue-61076.rs:94:9\n@@ -81,7 +81,7 @@ LL | async fn tuple() -> Tuple {\n help: consider `await`ing on the `Future`\n    |\n LL |     match tuple().await {\n-   |                  ^^^^^^\n+   |                  ++++++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "20109d4d1166a0e3331d4289ef60d2628ae1b1d9", "filename": "src/test/ui/async-await/issue-70818.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     async { (ty, ty1) }\n help: consider restricting type parameter `U`\n    |\n LL | fn foo<T: Send, U: std::marker::Send>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n-   |                  ^^^^^^^^^^^^^^^^^^^\n+   |                  +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "778423578e169aab1ab9ccfa0a81c9fb3b9aface", "filename": "src/test/ui/async-await/issue-72590-type-error-sized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -26,7 +26,7 @@ LL | struct Foo {\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL |     async fn frob(&self) {}\n-   |                   ^\n+   |                   +\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ad0a359224147b949a660602a24b807d6c3b6e17", "filename": "src/test/ui/async-await/issue-86507.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -17,7 +17,7 @@ LL |                     let x = x;\n help: consider further restricting type parameter `T`\n    |\n LL |         where 'me:'async_trait, T: std::marker::Sync {\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^\n+   |                               ++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "e71bcf5822808cd0c2b84bd9f98868bc72251b9b", "filename": "src/test/ui/async-await/issues/issue-62097.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL |         foo(|| self.bar()).await;\n help: to force the closure to take ownership of `self` (and any other referenced variables), use the `move` keyword\n    |\n LL |         foo(move || self.bar()).await;\n-   |             ^^^^\n+   |             ++++\n \n error[E0521]: borrowed data escapes outside of associated function\n   --> $DIR/issue-62097.rs:13:9"}, {"sha": "24fd3845b4e04500ca6a4206c617f1d3c44fa9b2", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     ) -> &dyn Foo\n help: consider using the `'a` lifetime\n    |\n LL |     ) -> &'a dyn Foo\n-   |          ^^^\n+   |          ~~~\n \n error: aborting due to previous error\n "}, {"sha": "ff46bcb8983b34399dfe17292ca7b4325f3a3bd3", "filename": "src/test/ui/async-await/issues/issue-65159.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL | pub enum Result<T, E> {\n help: add missing generic argument\n    |\n LL | async fn copy() -> Result<(), E>\n-   |                             ^^^\n+   |                             +++\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-65159.rs:8:5"}, {"sha": "29aa8372f87d087e039cfd225ba88c964cb48051", "filename": "src/test/ui/async-await/issues/issue-78938-async-block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL | |     });\n help: to force the async block to take ownership of `room_ref` (and any other referenced variables), use the `move` keyword\n    |\n LL |     let gameloop_handle = spawn(async move {\n-   |                                       ^^^^\n+   |                                       ++++\n \n error: aborting due to previous error\n "}, {"sha": "c47ec5dddb6e2b6bb0327409b8245ca3b6a303c7", "filename": "src/test/ui/async-await/pin-needed-to-poll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -15,7 +15,7 @@ LL |     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Outpu\n help: consider wrapping the receiver expression with the appropriate type\n    |\n LL |         Pin::new(&mut self.sleep).poll(cx)\n-   |         ^^^^^^^^^^^^^           ^\n+   |         +++++++++++++           +\n \n error: aborting due to previous error\n "}, {"sha": "630ae4b539f99c73e1bb2b1bd96fe6b41cf95dde", "filename": "src/test/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL | async fn make_u32() -> u32 {\n help: consider `await`ing on the `Future`\n    |\n LL |         take_u32(x.await)\n-   |                   ^^^^^^\n+   |                   ++++++\n \n error: aborting due to previous error\n "}, {"sha": "08868a04657c436d8d619488534302b49a506f4c", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL | async fn make_u32() -> u32 {\n help: consider `await`ing on the `Future`\n    |\n LL |     take_u32(x.await)\n-   |               ^^^^^^\n+   |               ++++++\n \n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:22:5\n@@ -32,11 +32,11 @@ LL | async fn dummy() {}\n help: consider `await`ing on the `Future`\n    |\n LL |     dummy().await\n-   |            ^^^^^^\n+   |            ++++++\n help: consider using a semicolon here\n    |\n LL |     dummy();\n-   |            ^\n+   |            +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "422107867f7f995e0f47c80f0c954568405219aa", "filename": "src/test/ui/attributes/key-value-non-ascii.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL | #[rustc_dummy = b\"\ufb03.rs\"]\n help: if you meant to use the UTF-8 encoding of '\ufb03', use \\xHH escapes\n    |\n LL | #[rustc_dummy = b\"/xEF/xAC/x83.rs\"]\n-   |                   ^^^^^^^^^^^^\n+   |                   ~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "1651f70d5cde739dcb4b4d64463fe1625485b1a4", "filename": "src/test/ui/binop/binary-op-on-double-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fbinop%2Fbinary-op-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fbinop%2Fbinary-op-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinary-op-on-double-ref.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -9,7 +9,7 @@ LL |         x % 2 == 0\n help: `%` can be used on `{integer}`, you can dereference `x`\n    |\n LL |         *x % 2 == 0\n-   |         ^\n+   |         +\n \n error: aborting due to previous error\n "}, {"sha": "c734f8c1e17e3471dd2e82daf9bc2d5bc0cf2dce", "filename": "src/test/ui/binop/binop-consume-args.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -16,7 +16,7 @@ LL |     fn add(self, rhs: Rhs) -> Self::Output;\n help: consider further restricting this bound\n    |\n LL | fn add<A: Add<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n-   |                             ^^^^^^\n+   |                             ++++++\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:8:10\n@@ -32,7 +32,7 @@ LL |     drop(rhs);\n help: consider restricting type parameter `B`\n    |\n LL | fn add<A: Add<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n-   |                               ^^^^^^\n+   |                               ++++++\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:13:10\n@@ -52,7 +52,7 @@ LL |     fn sub(self, rhs: Rhs) -> Self::Output;\n help: consider further restricting this bound\n    |\n LL | fn sub<A: Sub<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n-   |                             ^^^^^^\n+   |                             ++++++\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:14:10\n@@ -68,7 +68,7 @@ LL |     drop(rhs);\n help: consider restricting type parameter `B`\n    |\n LL | fn sub<A: Sub<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n-   |                               ^^^^^^\n+   |                               ++++++\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:19:10\n@@ -88,7 +88,7 @@ LL |     fn mul(self, rhs: Rhs) -> Self::Output;\n help: consider further restricting this bound\n    |\n LL | fn mul<A: Mul<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n-   |                             ^^^^^^\n+   |                             ++++++\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:20:10\n@@ -104,7 +104,7 @@ LL |     drop(rhs);\n help: consider restricting type parameter `B`\n    |\n LL | fn mul<A: Mul<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n-   |                               ^^^^^^\n+   |                               ++++++\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:25:10\n@@ -124,7 +124,7 @@ LL |     fn div(self, rhs: Rhs) -> Self::Output;\n help: consider further restricting this bound\n    |\n LL | fn div<A: Div<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n-   |                             ^^^^^^\n+   |                             ++++++\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:26:10\n@@ -140,7 +140,7 @@ LL |     drop(rhs);\n help: consider restricting type parameter `B`\n    |\n LL | fn div<A: Div<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n-   |                               ^^^^^^\n+   |                               ++++++\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:31:10\n@@ -160,7 +160,7 @@ LL |     fn rem(self, rhs: Rhs) -> Self::Output;\n help: consider further restricting this bound\n    |\n LL | fn rem<A: Rem<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n-   |                             ^^^^^^\n+   |                             ++++++\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:32:10\n@@ -176,7 +176,7 @@ LL |     drop(rhs);\n help: consider restricting type parameter `B`\n    |\n LL | fn rem<A: Rem<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n-   |                               ^^^^^^\n+   |                               ++++++\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:37:10\n@@ -196,7 +196,7 @@ LL |     fn bitand(self, rhs: Rhs) -> Self::Output;\n help: consider further restricting this bound\n    |\n LL | fn bitand<A: BitAnd<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n-   |                                   ^^^^^^\n+   |                                   ++++++\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:38:10\n@@ -212,7 +212,7 @@ LL |     drop(rhs);\n help: consider restricting type parameter `B`\n    |\n LL | fn bitand<A: BitAnd<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n-   |                                     ^^^^^^\n+   |                                     ++++++\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:43:10\n@@ -232,7 +232,7 @@ LL |     fn bitor(self, rhs: Rhs) -> Self::Output;\n help: consider further restricting this bound\n    |\n LL | fn bitor<A: BitOr<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n-   |                                 ^^^^^^\n+   |                                 ++++++\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:44:10\n@@ -248,7 +248,7 @@ LL |     drop(rhs);\n help: consider restricting type parameter `B`\n    |\n LL | fn bitor<A: BitOr<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n-   |                                   ^^^^^^\n+   |                                   ++++++\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:49:10\n@@ -268,7 +268,7 @@ LL |     fn bitxor(self, rhs: Rhs) -> Self::Output;\n help: consider further restricting this bound\n    |\n LL | fn bitxor<A: BitXor<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n-   |                                   ^^^^^^\n+   |                                   ++++++\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:50:10\n@@ -284,7 +284,7 @@ LL |     drop(rhs);\n help: consider restricting type parameter `B`\n    |\n LL | fn bitxor<A: BitXor<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n-   |                                     ^^^^^^\n+   |                                     ++++++\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:55:10\n@@ -304,7 +304,7 @@ LL |     fn shl(self, rhs: Rhs) -> Self::Output;\n help: consider further restricting this bound\n    |\n LL | fn shl<A: Shl<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n-   |                             ^^^^^^\n+   |                             ++++++\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:56:10\n@@ -320,7 +320,7 @@ LL |     drop(rhs);\n help: consider restricting type parameter `B`\n    |\n LL | fn shl<A: Shl<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n-   |                               ^^^^^^\n+   |                               ++++++\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:61:10\n@@ -340,7 +340,7 @@ LL |     fn shr(self, rhs: Rhs) -> Self::Output;\n help: consider further restricting this bound\n    |\n LL | fn shr<A: Shr<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n-   |                             ^^^^^^\n+   |                             ++++++\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:62:10\n@@ -356,7 +356,7 @@ LL |     drop(rhs);\n help: consider restricting type parameter `B`\n    |\n LL | fn shr<A: Shr<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n-   |                               ^^^^^^\n+   |                               ++++++\n \n error: aborting due to 20 previous errors\n "}, {"sha": "7721f8827db8772b417f370794c94a619839f71f", "filename": "src/test/ui/binop/binop-move-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -19,7 +19,7 @@ LL |     fn add(self, rhs: Rhs) -> Self::Output;\n help: consider further restricting this bound\n    |\n LL | fn double_move<T: Add<Output=()> + Copy>(x: T) {\n-   |                                  ^^^^^^\n+   |                                  ++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/binop-move-semantics.rs:14:5\n@@ -35,7 +35,7 @@ LL |     x.clone();\n help: consider further restricting this bound\n    |\n LL | fn move_then_borrow<T: Add<Output=()> + Clone + Copy>(x: T) {\n-   |                                               ^^^^^^\n+   |                                               ++++++\n \n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/binop-move-semantics.rs:21:5"}, {"sha": "68b3f4c1ae2fc4de2852d8c5ea48d6c9edafe743", "filename": "src/test/ui/blind/blind-item-block-item-shadow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-item-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-item-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-item-shadow.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |         use foo::Bar;\n help: you can use `as` to change the binding name of the import\n    |\n LL |         use foo::Bar as OtherBar;\n-   |             ^^^^^^^^^^^^^^^^^^^^\n+   |             ~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "12b583ea3e9c0ba96703fbcce111b549d98d7ae8", "filename": "src/test/ui/blind/blind-item-item-shadow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fblind%2Fblind-item-item-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fblind%2Fblind-item-item-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind%2Fblind-item-item-shadow.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL | use foo::foo;\n help: you can use `as` to change the binding name of the import\n    |\n LL | use foo::foo as other_foo;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "7081b5106ff9621598247acfc2b2698b2ded73fb", "filename": "src/test/ui/block-result/issue-5500.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,8 +10,9 @@ LL |     &panic!()\n               found reference `&_`\n help: consider removing the borrow\n    |\n-LL |     panic!()\n-   |    --\n+LL -     &panic!()\n+LL +     panic!()\n+   | \n \n error: aborting due to previous error\n "}, {"sha": "4acb955a8e7a407617f1f95a212569c130710e86", "filename": "src/test/ui/block-result/unexpected-return-on-unit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,11 +7,11 @@ LL |     foo()\n help: consider using a semicolon here\n    |\n LL |     foo();\n-   |          ^\n+   |          +\n help: try adding a return type\n    |\n LL | fn bar() -> usize {\n-   |          ^^^^^^^^\n+   |          ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "acf6b37b773964db95f2901f4094befe71a5b081", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL |     spawn(|| books.push(4));\n help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n    |\n LL |     spawn(move || books.push(4));\n-   |           ^^^^\n+   |           ++++\n \n error: aborting due to previous error\n "}, {"sha": "814042539a22fa078ea6626e1fb81a152b4b15cd", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL |     Box::new(|| books.push(4))\n help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n    |\n LL |     Box::new(move || books.push(4))\n-   |              ^^^^\n+   |              ++++\n \n error: aborting due to previous error\n "}, {"sha": "a865812cb4a7c4708fc90d1354659f21fea9ffd6", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,8 +12,8 @@ LL |                   Foo { string: b }] => {\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n help: consider removing the `&`\n    |\n-LL |                 [Foo { string: a },\n-LL |                   Foo { string: b }] => {\n+LL ~                 [Foo { string: a },\n+LL ~                   Foo { string: b }] => {\n    |\n \n error: aborting due to previous error"}, {"sha": "d46ef126da481a9c0ecc8606efd727d2349db5f8", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -34,7 +34,7 @@ LL |     f(1, 2);\n help: consider further restricting this bound\n    |\n LL | fn c<F:FnOnce(isize, isize) -> isize + Copy>(f: F) {\n-   |                                      ^^^^^^\n+   |                                      ++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "36f8f5c9ad73970c810d74edd4079dfb1c6f084b", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -36,12 +36,12 @@ LL |         &mut [_a,\n    |\n help: consider removing the `&mut`\n    |\n-LL |         [_a,\n-LL |\n-LL |\n-LL |\n-LL |             ..\n-LL |         ] => {\n+LL ~         [_a,\n+LL +\n+LL +\n+LL +\n+LL +             ..\n+LL ~         ] => {\n    |\n \n error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n@@ -68,9 +68,9 @@ LL |          _b] => {}\n    |\n help: consider removing the `&mut`\n    |\n-LL |         [\n-LL |\n-LL |          _b] => {}\n+LL ~         [\n+LL +\n+LL ~          _b] => {}\n    |\n \n error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice"}, {"sha": "b20cc6d8cf59f23e2fa5f5ff43cae913eb2ec2ea", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -8,7 +8,7 @@ LL |         if let Some(thing) = maybe {\n help: borrow this field in the pattern to avoid moving `maybe.0`\n    |\n LL |         if let Some(ref thing) = maybe {\n-   |                     ^^^\n+   |                     +++\n \n error: aborting due to previous error\n "}, {"sha": "4bd0667304397e0a7b8eb91280cc183c52bcf03b", "filename": "src/test/ui/borrowck/issue-82126-mismatched-subst-and-hir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -26,7 +26,7 @@ LL | struct LockedMarket<T>(T);\n help: add missing generic argument\n    |\n LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_, T> {\n-   |                                                                          ^^^\n+   |                                                                          +++\n \n error[E0515]: cannot return value referencing temporary value\n   --> $DIR/issue-82126-mismatched-subst-and-hir.rs:19:5"}, {"sha": "c6931ba72579bf74db5e2ffecb6be411512b750b", "filename": "src/test/ui/borrowck/move-in-pattern-mut-in-loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut-in-loop.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -8,7 +8,7 @@ LL |         if let Some(mut _x) = opt {}\n help: borrow this field in the pattern to avoid moving `opt.0`\n    |\n LL |         if let Some(ref mut _x) = opt {}\n-   |                     ^^^\n+   |                     +++\n \n error: aborting due to previous error\n "}, {"sha": "2bf34b32176c0c481d1fe2aa5d27a168ce3d3084", "filename": "src/test/ui/borrowck/move-in-pattern-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL |     foo(s);\n help: borrow this field in the pattern to avoid moving `s.0`\n    |\n LL |     if let Some(ref mut x) = s {\n-   |                 ^^^\n+   |                 +++\n \n error[E0382]: use of partially moved value: `e`\n   --> $DIR/move-in-pattern-mut.rs:22:9\n@@ -26,7 +26,7 @@ LL |     bar(e);\n help: borrow this field in the pattern to avoid moving `e.s`\n    |\n LL |     let E::V { s: ref mut x } = e;\n-   |                   ^^^\n+   |                   +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6b84c0032cdde0f8e4d158ff7bffef3e45878155", "filename": "src/test/ui/borrowck/move-in-pattern.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL |     foo(s);\n help: borrow this field in the pattern to avoid moving `s.0`\n    |\n LL |     if let Some(ref x) = s {\n-   |                 ^^^\n+   |                 +++\n \n error[E0382]: use of partially moved value: `e`\n   --> $DIR/move-in-pattern.rs:23:9\n@@ -26,7 +26,7 @@ LL |     bar(e);\n help: borrow this field in the pattern to avoid moving `e.s`\n    |\n LL |     let E::V { s: ref x } = e;\n-   |                   ^^^\n+   |                   +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8b05b2388227389d4c77108a00351e0724c0771a", "filename": "src/test/ui/borrowck/mut-borrow-in-loop-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |         Other::handle(value);\n help: consider creating a fresh reborrow of `value` here\n    |\n LL |         Other::handle(&mut *value);\n-   |                       ^^^^^^\n+   |                       ++++++\n \n error: aborting due to previous error\n "}, {"sha": "ebad4b023563e4a9dd153fb6e34a6fa54886bede", "filename": "src/test/ui/bound-suggestions.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -8,7 +8,7 @@ LL |     println!(\"{:?}\", t);\n help: consider further restricting this bound\n    |\n LL | fn test_impl(t: impl Sized + std::fmt::Debug) {\n-   |                            ^^^^^^^^^^^^^^^^^\n+   |                            +++++++++++++++++\n \n error[E0277]: `T` doesn't implement `Debug`\n   --> $DIR/bound-suggestions.rs:15:22\n@@ -20,7 +20,7 @@ LL |     println!(\"{:?}\", t);\n help: consider restricting type parameter `T`\n    |\n LL | fn test_no_bounds<T: std::fmt::Debug>(t: T) {\n-   |                    ^^^^^^^^^^^^^^^^^\n+   |                    +++++++++++++++++\n \n error[E0277]: `T` doesn't implement `Debug`\n   --> $DIR/bound-suggestions.rs:21:22\n@@ -32,7 +32,7 @@ LL |     println!(\"{:?}\", t);\n help: consider further restricting this bound\n    |\n LL | fn test_one_bound<T: Sized + std::fmt::Debug>(t: T) {\n-   |                            ^^^^^^^^^^^^^^^^^\n+   |                            +++++++++++++++++\n \n error[E0277]: `Y` doesn't implement `Debug`\n   --> $DIR/bound-suggestions.rs:27:30\n@@ -44,7 +44,7 @@ LL |     println!(\"{:?} {:?}\", x, y);\n help: consider further restricting type parameter `Y`\n    |\n LL | fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, Y: std::fmt::Debug {\n-   |                                                                   ^^^^^^^^^^^^^^^^^^^^\n+   |                                                                   ~~~~~~~~~~~~~~~~~~~~\n \n error[E0277]: `X` doesn't implement `Debug`\n   --> $DIR/bound-suggestions.rs:33:22\n@@ -56,7 +56,7 @@ LL |     println!(\"{:?}\", x);\n help: consider further restricting this bound\n    |\n LL | fn test_one_bound_where<X>(x: X) where X: Sized + std::fmt::Debug {\n-   |                                                 ^^^^^^^^^^^^^^^^^\n+   |                                                 +++++++++++++++++\n \n error[E0277]: `X` doesn't implement `Debug`\n   --> $DIR/bound-suggestions.rs:39:22\n@@ -68,7 +68,7 @@ LL |     println!(\"{:?}\", x);\n help: consider further restricting type parameter `X`\n    |\n LL | fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: std::fmt::Debug {\n-   |                                                            ^^^^^^^^^^^^^^^^^^^^\n+   |                                                            ++++++++++++++++++++\n \n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/bound-suggestions.rs:44:46\n@@ -84,7 +84,7 @@ LL | pub const fn size_of<T>() -> usize {\n help: consider further restricting `Self`\n    |\n LL | trait Foo<T>: Sized {\n-   |             ^^^^^^^\n+   |             +++++++\n \n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/bound-suggestions.rs:49:46\n@@ -100,7 +100,7 @@ LL | pub const fn size_of<T>() -> usize {\n help: consider further restricting `Self`\n    |\n LL | trait Bar: std::fmt::Display + Sized {\n-   |                              ^^^^^^^\n+   |                              +++++++\n \n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/bound-suggestions.rs:54:46\n@@ -116,7 +116,7 @@ LL | pub const fn size_of<T>() -> usize {\n help: consider further restricting `Self`\n    |\n LL | trait Baz: Sized where Self: std::fmt::Display {\n-   |          ^^^^^^^\n+   |          +++++++\n \n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/bound-suggestions.rs:59:46\n@@ -132,7 +132,7 @@ LL | pub const fn size_of<T>() -> usize {\n help: consider further restricting `Self`\n    |\n LL | trait Qux<T>: Sized where Self: std::fmt::Display {\n-   |             ^^^^^^^\n+   |             +++++++\n \n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/bound-suggestions.rs:64:46\n@@ -148,7 +148,7 @@ LL | pub const fn size_of<T>() -> usize {\n help: consider further restricting `Self`\n    |\n LL | trait Bat<T>: std::fmt::Display + Sized {\n-   |                                 ^^^^^^^\n+   |                                 +++++++\n \n error: aborting due to 11 previous errors\n "}, {"sha": "d0df241f747ac5ae3b7cd610c77d2498d53d7a73", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-double-superkind.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL | impl <T: Sync+'static> Foo for (T,) { }\n help: consider further restricting this bound\n    |\n LL | impl <T: Sync+'static + std::marker::Send> Foo for (T,) { }\n-   |                       ^^^^^^^^^^^^^^^^^^^\n+   |                       +++++++++++++++++++\n \n error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/builtin-superkinds-double-superkind.rs:9:16\n@@ -26,7 +26,7 @@ LL | impl <T: Send> Foo for (T,T) { }\n help: consider further restricting this bound\n    |\n LL | impl <T: Send + std::marker::Sync> Foo for (T,T) { }\n-   |               ^^^^^^^^^^^^^^^^^^^\n+   |               +++++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8233e781d697286bcc973807867ce2e9ab87ea59", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -17,7 +17,7 @@ LL | struct X<T>(T);\n help: consider further restricting this bound\n    |\n LL | impl <T:Sync+'static + std::marker::Send> RequiresRequiresShareAndSend for X<T> { }\n-   |                      ^^^^^^^^^^^^^^^^^^^\n+   |                      +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "78121ad18ed74e8a108d420a468de7f3814d4268", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-typaram-not-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL | impl <T: Sync+'static> Foo for T { }\n help: consider further restricting this bound\n    |\n LL | impl <T: Sync+'static + std::marker::Send> Foo for T { }\n-   |                       ^^^^^^^^^^^^^^^^^^^\n+   |                       +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "793068138a9ac296661b4798ac1b2ad823e29015", "filename": "src/test/ui/c-variadic/issue-86053-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -72,11 +72,11 @@ LL | pub trait Fn<Args>: FnMut<Args> {\n help: a trait with a similar name exists\n    |\n LL |     self , ... ,   self ,   self , ... ) where Fn : FnOnce ( & 'a & 'b usize ) {\n-   |                                                ^^\n+   |                                                ~~\n help: you might be missing a type parameter\n    |\n LL | fn ordering4 < 'a , 'b, F     > ( a :            ,   self , self ,   self ,\n-   |                       ^^^\n+   |                       +++\n \n error[E0491]: in type `&'a &'b usize`, reference has a longer lifetime than the data it references\n   --> $DIR/issue-86053-1.rs:11:52"}, {"sha": "bb15cc000a46bf73d7c29030dbb037604d3cbcf8", "filename": "src/test/ui/c-variadic/variadic-ffi-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-6.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -8,7 +8,7 @@ LL | ) -> &usize {\n help: consider using the `'static` lifetime\n    |\n LL | ) -> &'static usize {\n-   |      ^^^^^^^^\n+   |      ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "025970e54c84ad58abe70e07edf22c4ab3decd3a", "filename": "src/test/ui/cast/issue-84213.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     let _pointer_to_something = something as *const Something;\n help: consider borrowing the value\n    |\n LL |     let _pointer_to_something = &something as *const Something;\n-   |                                 ^\n+   |                                 +\n \n error[E0605]: non-primitive cast: `Something` as `*mut Something`\n   --> $DIR/issue-84213.rs:14:37\n@@ -18,7 +18,7 @@ LL |     let _mut_pointer_to_something = something as *mut Something;\n help: consider borrowing the value\n    |\n LL |     let _mut_pointer_to_something = &mut something as *mut Something;\n-   |                                     ^^^^\n+   |                                     ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bb00465758a4599de8d716969bf2a334989e8e5c", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -15,7 +15,7 @@ LL | fn foo () -> impl FnMut()->() {\n help: to force the closure to take ownership of `p` (and any other referenced variables), use the `move` keyword\n    |\n LL |     let mut c = move || {\n-   |                 ^^^^\n+   |                 ++++\n \n error: aborting due to previous error\n "}, {"sha": "e60d01f0c2caab9b4ec3de6370e4c65e223ce05d", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -15,12 +15,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `fptr` to be fully captured\n    |\n-LL |     thread::spawn(move || { let _ = &fptr; unsafe {\n-LL |\n-LL |\n-LL |\n-LL |\n-LL |         *fptr.0 = 20;\n+LL ~     thread::spawn(move || { let _ = &fptr; unsafe {\n+LL +\n+LL +\n+LL +\n+LL +\n+LL +         *fptr.0 = 20;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` trait implementation for closure\n@@ -35,12 +35,12 @@ LL |         *fptr.0.0 = 20;\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `fptr` to be fully captured\n    |\n-LL |     thread::spawn(move || { let _ = &fptr; unsafe {\n-LL |\n-LL |\n-LL |\n-LL |\n-LL |         *fptr.0.0 = 20;\n+LL ~     thread::spawn(move || { let _ = &fptr; unsafe {\n+LL +\n+LL +\n+LL +\n+LL +\n+LL +         *fptr.0.0 = 20;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure and drop order\n@@ -58,12 +58,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f` to be fully captured\n    |\n-LL |     let c = || { let _ = &f; \n-LL |\n-LL |\n-LL |\n-LL |\n-LL |         let f_1 = f.1;\n+LL ~     let c = || { let _ = &f; \n+LL +\n+LL +\n+LL +\n+LL +\n+LL +         let f_1 = f.1;\n  ...\n \n error: aborting due to 3 previous errors"}, {"sha": "f4677297611578cda27dfad437a8c3cdc99b5c8f", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.stderr", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -28,12 +28,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n-LL |     let c = || { let _ = (&t, &t1, &t2); \n-LL |\n-LL |\n-LL |\n-LL | \n-LL |         let _t = t.0;\n+LL ~     let c = || { let _ = (&t, &t1, &t2); \n+LL +\n+LL +\n+LL +\n+LL + \n+LL +         let _t = t.0;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -57,12 +57,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1` to be fully captured\n    |\n-LL |     let c = || { let _ = (&t, &t1); \n-LL |\n-LL |\n-LL |\n-LL |         let _t = t.0;\n-LL |\n+LL ~     let c = || { let _ = (&t, &t1); \n+LL +\n+LL +\n+LL +\n+LL +         let _t = t.0;\n+LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -80,12 +80,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; \n-LL |\n-LL |\n-LL |\n-LL |         let _t = t.0;\n-LL |\n+LL ~     let c = || { let _ = &t; \n+LL +\n+LL +\n+LL +\n+LL +         let _t = t.0;\n+LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -103,12 +103,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; \n-LL |\n-LL |\n-LL |\n-LL |         let _t = t.0;\n-LL |\n+LL ~     let c = || { let _ = &t; \n+LL +\n+LL +\n+LL +\n+LL +         let _t = t.0;\n+LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -126,12 +126,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; \n-LL |\n-LL |\n-LL |\n-LL |         let _t = t.0;\n-LL |\n+LL ~     let c = || { let _ = &t; \n+LL +\n+LL +\n+LL +\n+LL +         let _t = t.0;\n+LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -154,12 +154,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t1`, `t` to be fully captured\n    |\n-LL |     let c = move || { let _ = (&t1, &t); \n-LL |\n-LL |\n-LL |\n-LL |         println!(\"{} {}\", t1.1, t.1);\n-LL |\n+LL ~     let c = move || { let _ = (&t1, &t); \n+LL +\n+LL +\n+LL +\n+LL +         println!(\"{} {}\", t1.1, t.1);\n+LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -177,12 +177,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; \n-LL |\n-LL |\n-LL |\n-LL |         let _t = t.0;\n-LL |\n+LL ~     let c = || { let _ = &t; \n+LL +\n+LL +\n+LL +\n+LL +         let _t = t.0;\n+LL +\n  ...\n \n error: aborting due to 7 previous errors"}, {"sha": "2de6ffb0673233befc51e5481aa1bf3197db097c", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -18,12 +18,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; \n-LL |\n-LL |\n-LL |\n-LL |         let _t = t.0;\n-LL |\n+LL ~     let c = || { let _ = &t; \n+LL +\n+LL +\n+LL +\n+LL +         let _t = t.0;\n+LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -41,12 +41,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL |     let c = move || { let _ = &t; \n-LL |\n-LL |\n-LL |\n-LL |         let _t = t.1;\n-LL |\n+LL ~     let c = move || { let _ = &t; \n+LL +\n+LL +\n+LL +\n+LL +         let _t = t.1;\n+LL +\n  ...\n \n error: aborting due to 2 previous errors"}, {"sha": "e8e1eb03e93a4c30af7044e16d24ea21a65524bf", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -18,12 +18,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; \n-LL |\n-LL |\n-LL |\n-LL |         let _t = t.0;\n-LL |\n+LL ~     let c = || { let _ = &t; \n+LL +\n+LL +\n+LL +\n+LL +         let _t = t.0;\n+LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -41,7 +41,7 @@ LL | }\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; t.0 };\n-   |                ^^^^^^^^^^^^^^^^^^^\n+   |                ~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "acd9fb654e5e0b18ce829578ddfed0e3bea0afeb", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -15,12 +15,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f` to be fully captured\n    |\n-LL |     let result = panic::catch_unwind(move || { let _ = &f; \n-LL |\n-LL |\n-LL |\n-LL |\n-LL |         f.0()\n+LL ~     let result = panic::catch_unwind(move || { let _ = &f; \n+LL +\n+LL +\n+LL +\n+LL +\n+LL +         f.0()\n  ...\n \n error: aborting due to previous error"}, {"sha": "b347516c95ce468738f3a5ffc2aa164dc70b1245", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -21,12 +21,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f1`, `f2` to be fully captured\n    |\n-LL |     let c = || { let _ = (&f1, &f2); \n-LL |\n-LL |\n-LL |\n-LL |\n-LL |         let _f_1 = f1.0;\n+LL ~     let c = || { let _ = (&f1, &f2); \n+LL +\n+LL +\n+LL +\n+LL +\n+LL +         let _f_1 = f1.0;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure\n@@ -41,12 +41,12 @@ LL |         let _f_1 = f1.0;\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f1` to be fully captured\n    |\n-LL |     let c = || { let _ = &f1; \n-LL |\n-LL |\n-LL |\n-LL |\n-LL |         let _f_1 = f1.0;\n+LL ~     let c = || { let _ = &f1; \n+LL +\n+LL +\n+LL +\n+LL +\n+LL +         let _f_1 = f1.0;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure\n@@ -67,12 +67,12 @@ LL |         let _f_2 = f1.2;\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f1` to be fully captured\n    |\n-LL |     let c = || { let _ = &f1; \n-LL |\n-LL |\n-LL |\n-LL |\n-LL |\n+LL ~     let c = || { let _ = &f1; \n+LL +\n+LL +\n+LL +\n+LL +\n+LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure and drop order\n@@ -96,12 +96,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f1` to be fully captured\n    |\n-LL |     let c = || { let _ = &f1; \n-LL |\n-LL |\n-LL |\n-LL |\n-LL |         let _f_0 = f1.0;\n+LL ~     let c = || { let _ = &f1; \n+LL +\n+LL +\n+LL +\n+LL +\n+LL +         let _f_0 = f1.0;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` trait implementation for closure\n@@ -122,12 +122,12 @@ LL |         *fptr2.0 = 20;\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `fptr1`, `fptr2` to be fully captured\n    |\n-LL |     thread::spawn(move || { let _ = (&fptr1, &fptr2); unsafe {\n-LL |\n-LL |\n-LL |\n-LL |\n-LL |\n+LL ~     thread::spawn(move || { let _ = (&fptr1, &fptr2); unsafe {\n+LL +\n+LL +\n+LL +\n+LL +\n+LL +\n  ...\n \n error: aborting due to 5 previous errors"}, {"sha": "494d7e8e84236a07ae00608734522f014e1b0ff5", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -18,12 +18,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; \n-LL |\n-LL |\n-LL |\n-LL |         let _t = t.0;\n-LL |\n+LL ~     let c = || { let _ = &t; \n+LL +\n+LL +\n+LL +\n+LL +         let _t = t.0;\n+LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -51,12 +51,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `u` to be fully captured\n    |\n-LL |     let c = || { let _ = &u; \n-LL |\n-LL |\n-LL |\n-LL |         let _x = u.0.0;\n-LL |\n+LL ~     let c = || { let _ = &u; \n+LL +\n+LL +\n+LL +\n+LL +         let _x = u.0.0;\n+LL +\n  ...\n \n error: aborting due to 2 previous errors"}, {"sha": "32afc07af7968a5bdb375fada8bf160f3bada8de", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -28,12 +28,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n-LL |     let c = || { let _ = (&t, &t1, &t2); \n-LL |\n-LL |\n-LL |\n-LL |         let _t = t.0;\n-LL |\n+LL ~     let c = || { let _ = (&t, &t1, &t2); \n+LL +\n+LL +\n+LL +\n+LL +         let _t = t.0;\n+LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -57,12 +57,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1` to be fully captured\n    |\n-LL |     let c = || { let _ = (&t, &t1); \n-LL |\n-LL |\n-LL |\n-LL |         let _t = t.0;\n-LL |\n+LL ~     let c = || { let _ = (&t, &t1); \n+LL +\n+LL +\n+LL +\n+LL +         let _t = t.0;\n+LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -80,12 +80,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; \n-LL |\n-LL |\n-LL |\n-LL |         let _t = t.0;\n-LL |\n+LL ~     let c = || { let _ = &t; \n+LL +\n+LL +\n+LL +\n+LL +         let _t = t.0;\n+LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -103,12 +103,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; \n-LL |\n-LL |\n-LL |\n-LL |         let _t = t.0;\n-LL |\n+LL ~     let c = || { let _ = &t; \n+LL +\n+LL +\n+LL +\n+LL +         let _t = t.0;\n+LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -126,12 +126,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; \n-LL |\n-LL |\n-LL |\n-LL |         let _t = t.0;\n-LL |\n+LL ~     let c = || { let _ = &t; \n+LL +\n+LL +\n+LL +\n+LL +         let _t = t.0;\n+LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -149,12 +149,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; \n-LL |\n-LL |\n-LL |\n-LL |         let _t = t.1;\n-LL |\n+LL ~     let c = || { let _ = &t; \n+LL +\n+LL +\n+LL +\n+LL +         let _t = t.1;\n+LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -177,12 +177,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t1`, `t` to be fully captured\n    |\n-LL |     let c = move || { let _ = (&t1, &t); \n-LL |\n-LL |\n-LL |\n-LL |         println!(\"{:?} {:?}\", t1.1, t.1);\n-LL |\n+LL ~     let c = move || { let _ = (&t1, &t); \n+LL +\n+LL +\n+LL +\n+LL +         println!(\"{:?} {:?}\", t1.1, t.1);\n+LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -200,12 +200,12 @@ LL |         }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `tuple` to be fully captured\n    |\n-LL |             let c = || { let _ = &tuple; \n-LL |\n-LL |\n-LL |\n-LL |                 tuple.0;\n-LL |\n+LL ~             let c = || { let _ = &tuple; \n+LL +\n+LL +\n+LL +\n+LL +                 tuple.0;\n+LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -223,12 +223,12 @@ LL |     };\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `tuple` to be fully captured\n    |\n-LL |         let c = || { let _ = &tuple; \n-LL |\n-LL |\n-LL |\n-LL |             tuple.0;\n-LL |\n+LL ~         let c = || { let _ = &tuple; \n+LL +\n+LL +\n+LL +\n+LL +             tuple.0;\n+LL +\n  ...\n \n error: aborting due to 9 previous errors"}, {"sha": "b7f0571316f05c98f62c213898488720862f6411", "filename": "src/test/ui/closures/closure-bounds-cant-promote-superkind-in-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n help: consider further restricting this bound\n    |\n LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static + std::marker::Send {\n-   |                                                       ^^^^^^^^^^^^^^^^^^^\n+   |                                                       +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "e7d9664ec505ee39db917ec154a42a28e0efed56", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -27,7 +27,7 @@ LL | |     })\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |     bar(move || {\n-   |         ^^^^\n+   |         ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "16b168db6810df94765f18bbc13568bff3a05c7f", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     take_const_owned(f);\n help: consider further restricting this bound\n    |\n LL | fn give_owned<F>(f: F) where F: FnOnce() + Send + std::marker::Sync {\n-   |                                                 ^^^^^^^^^^^^^^^^^^^\n+   |                                                 +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "06477efac264ef78ed494419d986fdaecacdd18a", "filename": "src/test/ui/closures/issue-41366.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -20,11 +20,11 @@ LL |     (&|_| ()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n help: consider further restricting the associated type\n    |\n LL | fn main() where <u32 as T<'_>>::V: Sized {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |           ++++++++++++++++++++++++++++++\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL |     (&|&_| ()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n-   |        ^\n+   |        +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7877c7334d79b9ed2407f5bd43445ec735427c65", "filename": "src/test/ui/closures/issue-67123.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2Fissue-67123.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2Fissue-67123.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-67123.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     || { t; t; };\n help: consider restricting type parameter `T`\n    |\n LL | fn foo<T: Copy>(t: T) {\n-   |         ^^^^^^\n+   |         ++++++\n \n error: aborting due to previous error\n "}, {"sha": "9c75d5a9023edfea217c65d6fcb92912c28f7a83", "filename": "src/test/ui/closures/print/closure-print-generic-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -13,7 +13,7 @@ LL |         let c1: () = c;\n help: use parentheses to call this closure\n    |\n LL |         let c1: () = c();\n-   |                       ^^\n+   |                       ++\n \n error: aborting due to previous error\n "}, {"sha": "d9479002b6cde31df63b1e10c5c04bb77b4504e2", "filename": "src/test/ui/closures/print/closure-print-generic-trim-off-verbose-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -13,7 +13,7 @@ LL |         let c1 : () = c;\n help: use parentheses to call this closure\n    |\n LL |         let c1 : () = c();\n-   |                        ^^\n+   |                        ++\n \n error: aborting due to previous error\n "}, {"sha": "880e38df2d70a87586c18a20cdd111dadcbd8711", "filename": "src/test/ui/closures/print/closure-print-generic-verbose-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -13,7 +13,7 @@ LL |         let c1 : () = c;\n help: use parentheses to call this closure\n    |\n LL |         let c1 : () = c();\n-   |                        ^^\n+   |                        ++\n \n error: aborting due to previous error\n "}, {"sha": "737a5ae2656e6658bcf65197b430603b9fb8f1d7", "filename": "src/test/ui/compare-method/bad-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -39,7 +39,7 @@ LL |     fn bar(self) {}\n help: change the output type to match the trait\n    |\n LL |     fn bar(self) -> Option<()> {}\n-   |                  ^^^^^^^^^^^^^\n+   |                  +++++++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8084a6220456029bbb84d271f08a1846f67f3dcc", "filename": "src/test/ui/conditional-compilation/cfg-attr-parse.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -51,7 +51,7 @@ LL | #[cfg_attr[all(),,]]\n help: the delimiters should be `(` and `)`\n    |\n LL | #[cfg_attr(all(),,)]\n-   |           ^       ^\n+   |           ~       ~\n \n error: expected identifier, found `,`\n   --> $DIR/cfg-attr-parse.rs:44:18\n@@ -71,7 +71,7 @@ LL | #[cfg_attr{all(),,}]\n help: the delimiters should be `(` and `)`\n    |\n LL | #[cfg_attr(all(),,)]\n-   |           ^       ^\n+   |           ~       ~\n \n error: expected identifier, found `,`\n   --> $DIR/cfg-attr-parse.rs:50:18"}, {"sha": "2f67c11ad1f5dff4f0cd567476401b067caca4ee", "filename": "src/test/ui/confuse-field-and-method/issue-18343.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     o.closure();\n help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n LL |     (o.closure)();\n-   |     ^         ^\n+   |     +         +\n \n error: aborting due to previous error\n "}, {"sha": "a37e132d3642932b2f45f863530474c590b37ca6", "filename": "src/test/ui/confuse-field-and-method/issue-2392.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     o_closure.closure();\n help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n LL |     (o_closure.closure)();\n-   |     ^                 ^\n+   |     +                 +\n \n error[E0599]: no method named `not_closure` found for struct `Obj` in the current scope\n   --> $DIR/issue-2392.rs:38:15\n@@ -35,7 +35,7 @@ LL |     o_func.closure();\n help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n LL |     (o_func.closure)();\n-   |     ^              ^\n+   |     +              +\n \n error[E0599]: no method named `boxed_closure` found for struct `BoxedObj` in the current scope\n   --> $DIR/issue-2392.rs:45:14\n@@ -49,7 +49,7 @@ LL |     boxed_fn.boxed_closure();\n help: to call the function stored in `boxed_closure`, surround the field access with parentheses\n    |\n LL |     (boxed_fn.boxed_closure)();\n-   |     ^                      ^\n+   |     +                      +\n \n error[E0599]: no method named `boxed_closure` found for struct `BoxedObj` in the current scope\n   --> $DIR/issue-2392.rs:48:19\n@@ -63,7 +63,7 @@ LL |     boxed_closure.boxed_closure();\n help: to call the function stored in `boxed_closure`, surround the field access with parentheses\n    |\n LL |     (boxed_closure.boxed_closure)();\n-   |     ^                           ^\n+   |     +                           +\n \n error[E0599]: no method named `closure` found for struct `Obj` in the current scope\n   --> $DIR/issue-2392.rs:53:12\n@@ -77,7 +77,7 @@ LL |     w.wrap.closure();\n help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n LL |     (w.wrap.closure)();\n-   |     ^              ^\n+   |     +              +\n \n error[E0599]: no method named `not_closure` found for struct `Obj` in the current scope\n   --> $DIR/issue-2392.rs:55:12\n@@ -102,7 +102,7 @@ LL |     check_expression().closure();\n help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n LL |     (check_expression().closure)();\n-   |     ^                          ^\n+   |     +                          +\n \n error[E0599]: no method named `f1` found for struct `FuncContainer` in the current scope\n   --> $DIR/issue-2392.rs:64:31\n@@ -116,7 +116,7 @@ LL |             (*self.container).f1(1);\n help: to call the function stored in `f1`, surround the field access with parentheses\n    |\n LL |             ((*self.container).f1)(1);\n-   |             ^                    ^\n+   |             +                    +\n \n error[E0599]: no method named `f2` found for struct `FuncContainer` in the current scope\n   --> $DIR/issue-2392.rs:65:31\n@@ -130,7 +130,7 @@ LL |             (*self.container).f2(1);\n help: to call the function stored in `f2`, surround the field access with parentheses\n    |\n LL |             ((*self.container).f2)(1);\n-   |             ^                    ^\n+   |             +                    +\n \n error[E0599]: no method named `f3` found for struct `FuncContainer` in the current scope\n   --> $DIR/issue-2392.rs:66:31\n@@ -144,7 +144,7 @@ LL |             (*self.container).f3(1);\n help: to call the function stored in `f3`, surround the field access with parentheses\n    |\n LL |             ((*self.container).f3)(1);\n-   |             ^                    ^\n+   |             +                    +\n \n error: aborting due to 11 previous errors\n "}, {"sha": "50c6fe1e83308487fe9290cff38c7b119af4ff8e", "filename": "src/test/ui/confuse-field-and-method/issue-32128.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     demo.example(1);\n help: to call the function stored in `example`, surround the field access with parentheses\n    |\n LL |     (demo.example)(1);\n-   |     ^            ^\n+   |     +            +\n \n error: aborting due to previous error\n "}, {"sha": "7c2e6b015330f74315037981166a3d5e34650338", "filename": "src/test/ui/confuse-field-and-method/issue-33784.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     p.closure();\n help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n LL |     (p.closure)();\n-   |     ^         ^\n+   |     +         +\n \n error[E0599]: no method named `fn_ptr` found for reference `&&Obj<[closure@$DIR/issue-33784.rs:25:43: 25:48]>` in the current scope\n   --> $DIR/issue-33784.rs:29:7\n@@ -18,7 +18,7 @@ LL |     q.fn_ptr();\n help: to call the function stored in `fn_ptr`, surround the field access with parentheses\n    |\n LL |     (q.fn_ptr)();\n-   |     ^        ^\n+   |     +        +\n \n error[E0599]: no method named `c_fn_ptr` found for reference `&D` in the current scope\n   --> $DIR/issue-33784.rs:32:7\n@@ -29,7 +29,7 @@ LL |     s.c_fn_ptr();\n help: to call the function stored in `c_fn_ptr`, surround the field access with parentheses\n    |\n LL |     (s.c_fn_ptr)();\n-   |     ^          ^\n+   |     +          +\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f4bb1e422076915575e0e8e3c45b2e21247d476f", "filename": "src/test/ui/const-generics/closing-args-token.full.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.full.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     S::<5 + 2 >> 7>;\n help: enclose the `const` expression in braces\n    |\n LL |     S::<{ 5 + 2 } >> 7>;\n-   |         ^       ^\n+   |         +       +\n \n error: comparison operators cannot be chained\n   --> $DIR/closing-args-token.rs:10:16\n@@ -18,7 +18,7 @@ LL |     S::<5 + 2 >> 7>;\n help: split the comparison into two\n    |\n LL |     S::<5 + 2 >> 7 && 7>;\n-   |                    ^^^^\n+   |                    ++++\n \n error: comparison operators cannot be chained\n   --> $DIR/closing-args-token.rs:16:20\n@@ -29,7 +29,7 @@ LL |     S::<{ 5 + 2 } >> 7>;\n help: split the comparison into two\n    |\n LL |     S::<{ 5 + 2 } >> 7 && 7>;\n-   |                        ^^^^\n+   |                        ++++\n \n error: expected expression, found `;`\n   --> $DIR/closing-args-token.rs:21:16\n@@ -46,7 +46,7 @@ LL |     T::<x >>= 2 > 0>;\n help: split the comparison into two\n    |\n LL |     T::<x >>= 2 && 2 > 0>;\n-   |                 ^^^^\n+   |                 ++++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "f4bb1e422076915575e0e8e3c45b2e21247d476f", "filename": "src/test/ui/const-generics/closing-args-token.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.min.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     S::<5 + 2 >> 7>;\n help: enclose the `const` expression in braces\n    |\n LL |     S::<{ 5 + 2 } >> 7>;\n-   |         ^       ^\n+   |         +       +\n \n error: comparison operators cannot be chained\n   --> $DIR/closing-args-token.rs:10:16\n@@ -18,7 +18,7 @@ LL |     S::<5 + 2 >> 7>;\n help: split the comparison into two\n    |\n LL |     S::<5 + 2 >> 7 && 7>;\n-   |                    ^^^^\n+   |                    ++++\n \n error: comparison operators cannot be chained\n   --> $DIR/closing-args-token.rs:16:20\n@@ -29,7 +29,7 @@ LL |     S::<{ 5 + 2 } >> 7>;\n help: split the comparison into two\n    |\n LL |     S::<{ 5 + 2 } >> 7 && 7>;\n-   |                        ^^^^\n+   |                        ++++\n \n error: expected expression, found `;`\n   --> $DIR/closing-args-token.rs:21:16\n@@ -46,7 +46,7 @@ LL |     T::<x >>= 2 > 0>;\n help: split the comparison into two\n    |\n LL |     T::<x >>= 2 && 2 > 0>;\n-   |                 ^^^^\n+   |                 ++++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "4eec2b21be606ca578ffd7aa38bdaff842b19417", "filename": "src/test/ui/const-generics/const-argument-if-length.full.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -13,8 +13,9 @@ LL | pub const fn size_of<T>() -> usize {\n    |\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n-LL | pub const fn is_zst<T>() -> usize {\n-   |                     --\n+LL - pub const fn is_zst<T: ?Sized>() -> usize {\n+LL + pub const fn is_zst<T>() -> usize {\n+   | \n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/const-argument-if-length.rs:16:12\n@@ -28,16 +29,17 @@ LL |     value: T,\n    = help: change the field's type to have a statically known size\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n-LL | pub struct AtLeastByte<T> {\n-   |                        --\n+LL - pub struct AtLeastByte<T: ?Sized> {\n+LL + pub struct AtLeastByte<T> {\n+   | \n help: borrowed types always have a statically known size\n    |\n LL |     value: &T,\n-   |            ^\n+   |            +\n help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     value: Box<T>,\n-   |            ^^^^ ^\n+   |            ++++ +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cdbbbf2a99b3bf2c3ea104be5a13bb0fc932c29d", "filename": "src/test/ui/const-generics/const-argument-if-length.min.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -19,16 +19,17 @@ LL |     value: T,\n    = help: change the field's type to have a statically known size\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n-LL | pub struct AtLeastByte<T> {\n-   |                        --\n+LL - pub struct AtLeastByte<T: ?Sized> {\n+LL + pub struct AtLeastByte<T> {\n+   | \n help: borrowed types always have a statically known size\n    |\n LL |     value: &T,\n-   |            ^\n+   |            +\n help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n LL |     value: Box<T>,\n-   |            ^^^^ ^\n+   |            ++++ +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4ce0ecdf3aab9f190ad9c8f3ca256a8b21443622", "filename": "src/test/ui/const-generics/const-expression-parameter.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.full.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     i32_identity::<1 + 2>();\n help: enclose the `const` expression in braces\n    |\n LL |     i32_identity::<{ 1 + 2 }>();\n-   |                    ^       ^\n+   |                    +       +\n \n error: aborting due to previous error\n "}, {"sha": "4ce0ecdf3aab9f190ad9c8f3ca256a8b21443622", "filename": "src/test/ui/const-generics/const-expression-parameter.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.min.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     i32_identity::<1 + 2>();\n help: enclose the `const` expression in braces\n    |\n LL |     i32_identity::<{ 1 + 2 }>();\n-   |                    ^       ^\n+   |                    +       +\n \n error: aborting due to previous error\n "}, {"sha": "625338bd9b4a68ed3fdefcc7caa57a363d17ae7b", "filename": "src/test/ui/const-generics/const-param-shadowing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL | fn test<const N: usize>() -> Foo<N> {\n help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL | fn test<const N: usize>() -> Foo<{ N }> {\n-   |                                  ^   ^\n+   |                                  +   +\n \n error: aborting due to previous error\n "}, {"sha": "dd37d4e7a85afd23b9d66f4f0fdc66265193713a", "filename": "src/test/ui/const-generics/diagnostics.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,11 +10,11 @@ LL | impl Foo for A<N> {}\n help: a struct with a similar name exists\n    |\n LL | impl Foo for A<A> {}\n-   |                ^\n+   |                ~\n help: you might be missing a type parameter\n    |\n LL | impl<N> Foo for A<N> {}\n-   |     ^^^\n+   |     +++\n \n error[E0412]: cannot find type `T` in this scope\n   --> $DIR/diagnostics.rs:16:32\n@@ -28,11 +28,11 @@ LL | impl<const N: u8> Foo for C<N, T> {}\n help: a struct with a similar name exists\n    |\n LL | impl<const N: u8> Foo for C<N, A> {}\n-   |                                ^\n+   |                                ~\n help: you might be missing a type parameter\n    |\n LL | impl<const N: u8, T> Foo for C<N, T> {}\n-   |                 ^^^\n+   |                 +++\n \n error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/diagnostics.rs:7:16\n@@ -43,7 +43,7 @@ LL | impl Foo for A<N> {}\n help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL | impl Foo for A<{ N }> {}\n-   |                ^   ^\n+   |                +   +\n \n error[E0747]: type provided when a constant was expected\n   --> $DIR/diagnostics.rs:12:19\n@@ -54,7 +54,7 @@ LL | impl<N> Foo for B<N> {}\n help: consider changing this type parameter to be a `const` generic\n    |\n LL | impl<const N: u8> Foo for B<N> {}\n-   |      ^^^^^^^^^^^\n+   |      ~~~~~~~~~~~\n \n error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/diagnostics.rs:16:32\n@@ -65,7 +65,7 @@ LL | impl<const N: u8> Foo for C<N, T> {}\n help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL | impl<const N: u8> Foo for C<N, { T }> {}\n-   |                                ^   ^\n+   |                                +   +\n \n error: aborting due to 5 previous errors\n "}, {"sha": "7a12f3bdec27820ba16f7e52a7b854c70559f6bb", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.full.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL | fn foo<const X: usize, const Y: usize>() -> usize {\n help: add missing generic argument\n    |\n LL |     foo::<0, Y>();\n-   |            ^^^\n+   |            +++\n \n error[E0107]: this function takes 2 generic arguments but 3 generic arguments were supplied\n   --> $DIR/incorrect-number-of-const-args.rs:14:5"}, {"sha": "7a12f3bdec27820ba16f7e52a7b854c70559f6bb", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL | fn foo<const X: usize, const Y: usize>() -> usize {\n help: add missing generic argument\n    |\n LL |     foo::<0, Y>();\n-   |            ^^^\n+   |            +++\n \n error[E0107]: this function takes 2 generic arguments but 3 generic arguments were supplied\n   --> $DIR/incorrect-number-of-const-args.rs:14:5"}, {"sha": "01fb137dd6aff8ebe0f424059538f7c88f3e00e8", "filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     foo();\n help: consider specifying the const argument\n    |\n LL |     foo::<X>();\n-   |     ^^^^^^^^\n+   |     ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "01fb137dd6aff8ebe0f424059538f7c88f3e00e8", "filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     foo();\n help: consider specifying the const argument\n    |\n LL |     foo::<X>();\n-   |     ^^^^^^^^\n+   |     ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "a625ed2bdc3b20a11e8cafa9f7bb9ef4fd860fdf", "filename": "src/test/ui/const-generics/infer/issue-77092.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |         println!(\"{:?}\", take_array_from_mut(&mut arr, i));\n help: consider specifying the const argument\n    |\n LL |         println!(\"{:?}\", take_array_from_mut::<N>(&mut arr, i));\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                          ~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "979d50b85f1467836aef6e7a6ebe9a3bd42f60a9", "filename": "src/test/ui/const-generics/infer/method-chain.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     Foo.bar().bar().bar().bar().baz();\n help: consider specifying the const argument\n    |\n LL |     Foo.bar().bar().bar().bar().baz::<N>();\n-   |                                 ^^^^^^^^\n+   |                                 ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "979d50b85f1467836aef6e7a6ebe9a3bd42f60a9", "filename": "src/test/ui/const-generics/infer/method-chain.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     Foo.bar().bar().bar().bar().baz();\n help: consider specifying the const argument\n    |\n LL |     Foo.bar().bar().bar().bar().baz::<N>();\n-   |                                 ^^^^^^^^\n+   |                                 ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "31b7fc7ccf5a0276b27a68ed6362573476d9f5ab", "filename": "src/test/ui/const-generics/infer/one-param-uninferred.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.full.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     let _: [u8; 17] = foo();\n help: consider specifying the const argument\n    |\n LL |     let _: [u8; 17] = foo::<M>();\n-   |                       ^^^^^^^^\n+   |                       ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "31b7fc7ccf5a0276b27a68ed6362573476d9f5ab", "filename": "src/test/ui/const-generics/infer/one-param-uninferred.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.min.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     let _: [u8; 17] = foo();\n help: consider specifying the const argument\n    |\n LL |     let _: [u8; 17] = foo::<M>();\n-   |                       ^^^^^^^^\n+   |                       ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "bee4b693825f3ff8e53497f19b0073e156be6c1c", "filename": "src/test/ui/const-generics/infer/uninferred-consts.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     Foo.foo();\n help: consider specifying the const argument\n    |\n LL |     Foo.foo::<A>();\n-   |         ^^^^^^^^\n+   |         ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "bee4b693825f3ff8e53497f19b0073e156be6c1c", "filename": "src/test/ui/const-generics/infer/uninferred-consts.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     Foo.foo();\n help: consider specifying the const argument\n    |\n LL |     Foo.foo::<A>();\n-   |         ^^^^^^^^\n+   |         ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "0d3643f6f899ab8b4a344481c8b96ebbd9324c95", "filename": "src/test/ui/const-generics/invalid-enum.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -34,7 +34,7 @@ LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL |   let _: Example<{ CompileFlag::A }, _> = Example { x: 0 };\n-   |                  ^                ^\n+   |                  +                +\n \n error[E0747]: type provided when a constant was expected\n   --> $DIR/invalid-enum.rs:33:18\n@@ -45,7 +45,7 @@ LL |   let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL |   let _: Example<{ Example::ASSOC_FLAG }, _> = Example { x: 0 };\n-   |                  ^                     ^\n+   |                  +                     +\n \n error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/invalid-enum.rs:21:12\n@@ -56,7 +56,7 @@ LL |   test_1::<CompileFlag::A>();\n help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL |   test_1::<{ CompileFlag::A }>();\n-   |            ^                ^\n+   |            +                +\n \n error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/invalid-enum.rs:25:15\n@@ -67,7 +67,7 @@ LL |   test_2::<_, CompileFlag::A>(0);\n help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL |   test_2::<_, { CompileFlag::A }>(0);\n-   |               ^                ^\n+   |               +                +\n \n error: aborting due to 7 previous errors\n "}, {"sha": "8f07d208091a04b8799726540b2f5e4cfb15704d", "filename": "src/test/ui/const-generics/issues/issue-61336-2.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -17,7 +17,7 @@ LL |     [x; { N }]\n help: consider restricting type parameter `T`\n    |\n LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n-   |       ^^^^^^^^^^^^^^^^^^^\n+   |       +++++++++++++++++++\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "9b62ffc93494b83b7da2bca5259d0cfa549fe35b", "filename": "src/test/ui/const-generics/issues/issue-61336-2.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.min.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -8,7 +8,7 @@ LL |     [x; { N }]\n help: consider restricting type parameter `T`\n    |\n LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n-   |       ^^^^^^^^^^^^^^^^^^^\n+   |       +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "4883463c2e67353b65c301c2cc5b663a15d0e202", "filename": "src/test/ui/const-generics/issues/issue-61336.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -17,7 +17,7 @@ LL |     [x; N]\n help: consider restricting type parameter `T`\n    |\n LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n-   |       ^^^^^^^^^^^^^^^^^^^\n+   |       +++++++++++++++++++\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "dc891842e1382262852c84fc035a42efc69c5269", "filename": "src/test/ui/const-generics/issues/issue-61336.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.min.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -8,7 +8,7 @@ LL |     [x; N]\n help: consider restricting type parameter `T`\n    |\n LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n-   |       ^^^^^^^^^^^^^^^^^^^\n+   |       +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "1be907b98acad32b5d56a1a2d0bb7d8a3b729abb", "filename": "src/test/ui/const-generics/issues/issue-61336.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/362e0f55eb1f36d279e5c4a58fb0fe5f9a2c579d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/362e0f55eb1f36d279e5c4a58fb0fe5f9a2c579d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr?ref=362e0f55eb1f36d279e5c4a58fb0fe5f9a2c579d", "patch": "@@ -1,24 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-61336.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-61336.rs:9:5\n-   |\n-LL |     [x; N]\n-   |     ^^^^^^ the trait `Copy` is not implemented for `T`\n-   |\n-   = note: the `Copy` trait is required because the repeated element will be copied\n-help: consider restricting type parameter `T`\n-   |\n-LL | fn g<T: Copy, const N: usize>(x: T) -> [T; N] {\n-   |       ^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "3b69a4066a9ed91c1a8b54ada9d0c456611ee8ad", "filename": "src/test/ui/const-generics/issues/issue-76595.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL | fn test<T, const P: usize>() where Bool<{core::mem::size_of::<T>() > 4}>: T\n help: add missing generic argument\n    |\n LL |     test::<2, P>();\n-   |             ^^^\n+   |             +++\n \n error: aborting due to previous error\n "}, {"sha": "b29e853510b1a065762f465f7cc399f0687c5f37", "filename": "src/test/ui/const-generics/macro_rules-braces.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     let _: baz!(m::P);\n help: enclose the `const` expression in braces\n    |\n LL |     let _: baz!({ m::P });\n-   |                 ^      ^\n+   |                 +      +\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n   --> $DIR/macro_rules-braces.rs:68:17\n@@ -18,7 +18,7 @@ LL |     let _: baz!(10 + 7);\n help: enclose the `const` expression in braces\n    |\n LL |     let _: baz!({ 10 + 7 });\n-   |                 ^        ^\n+   |                 +        +\n \n error: constant expression depends on a generic parameter\n   --> $DIR/macro_rules-braces.rs:15:13"}, {"sha": "c2e8c2c9c05aed9316f4ab9a3a83cbae9b9fd492", "filename": "src/test/ui/const-generics/macro_rules-braces.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     let _: baz!(m::P);\n help: enclose the `const` expression in braces\n    |\n LL |     let _: baz!({ m::P });\n-   |                 ^      ^\n+   |                 +      +\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n   --> $DIR/macro_rules-braces.rs:68:17\n@@ -18,7 +18,7 @@ LL |     let _: baz!(10 + 7);\n help: enclose the `const` expression in braces\n    |\n LL |     let _: baz!({ 10 + 7 });\n-   |                 ^        ^\n+   |                 +        +\n \n error: generic parameters may not be used in const operations\n   --> $DIR/macro_rules-braces.rs:36:20"}, {"sha": "11c3481f15afa18e15234864f83315d800b34478", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces-without-turbofish.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces-without-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces-without-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces-without-turbofish.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     foo<BAR + 3>();\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR + 3>();\n-   |        ^^\n+   |        ++\n \n error: comparison operators cannot be chained\n   --> $DIR/const-expression-suggest-missing-braces-without-turbofish.rs:9:8\n@@ -18,7 +18,7 @@ LL |     foo<BAR + BAR>();\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR + BAR>();\n-   |        ^^\n+   |        ++\n \n error: comparison operators cannot be chained\n   --> $DIR/const-expression-suggest-missing-braces-without-turbofish.rs:12:8\n@@ -29,7 +29,7 @@ LL |     foo<3 + 3>();\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<3 + 3>();\n-   |        ^^\n+   |        ++\n \n error: comparison operators cannot be chained\n   --> $DIR/const-expression-suggest-missing-braces-without-turbofish.rs:15:8\n@@ -40,7 +40,7 @@ LL |     foo<BAR - 3>();\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR - 3>();\n-   |        ^^\n+   |        ++\n \n error: comparison operators cannot be chained\n   --> $DIR/const-expression-suggest-missing-braces-without-turbofish.rs:18:8\n@@ -51,7 +51,7 @@ LL |     foo<BAR - BAR>();\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR - BAR>();\n-   |        ^^\n+   |        ++\n \n error: comparison operators cannot be chained\n   --> $DIR/const-expression-suggest-missing-braces-without-turbofish.rs:21:8\n@@ -62,7 +62,7 @@ LL |     foo<100 - BAR>();\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<100 - BAR>();\n-   |        ^^\n+   |        ++\n \n error: comparison operators cannot be chained\n   --> $DIR/const-expression-suggest-missing-braces-without-turbofish.rs:24:8\n@@ -73,7 +73,7 @@ LL |     foo<bar<i32>()>();\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<bar<i32>()>();\n-   |        ^^\n+   |        ++\n \n error: expected one of `;` or `}`, found `>`\n   --> $DIR/const-expression-suggest-missing-braces-without-turbofish.rs:24:19\n@@ -90,7 +90,7 @@ LL |     foo<bar::<i32>()>();\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<bar::<i32>()>();\n-   |        ^^\n+   |        ++\n \n error: comparison operators cannot be chained\n   --> $DIR/const-expression-suggest-missing-braces-without-turbofish.rs:31:8\n@@ -101,7 +101,7 @@ LL |     foo<bar::<i32>() + BAR>();\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<bar::<i32>() + BAR>();\n-   |        ^^\n+   |        ++\n \n error: comparison operators cannot be chained\n   --> $DIR/const-expression-suggest-missing-braces-without-turbofish.rs:34:8\n@@ -112,7 +112,7 @@ LL |     foo<bar::<i32>() - BAR>();\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<bar::<i32>() - BAR>();\n-   |        ^^\n+   |        ++\n \n error: comparison operators cannot be chained\n   --> $DIR/const-expression-suggest-missing-braces-without-turbofish.rs:37:8\n@@ -123,7 +123,7 @@ LL |     foo<BAR - bar::<i32>()>();\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n-   |        ^^\n+   |        ++\n \n error: comparison operators cannot be chained\n   --> $DIR/const-expression-suggest-missing-braces-without-turbofish.rs:40:8\n@@ -134,7 +134,7 @@ LL |     foo<BAR - bar::<i32>()>();\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n-   |        ^^\n+   |        ++\n \n error: aborting due to 13 previous errors\n "}, {"sha": "1707640f6edec273c2e9e9d6fde365a61b1952e1", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     foo::<BAR + 3>();\n help: expressions must be enclosed in braces to be used as const generic arguments\n    |\n LL |     foo::<{ BAR + 3 }>();\n-   |           ^         ^\n+   |           +         +\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n   --> $DIR/const-expression-suggest-missing-braces.rs:19:11\n@@ -18,7 +18,7 @@ LL |     foo::<3 + 3>();\n help: enclose the `const` expression in braces\n    |\n LL |     foo::<{ 3 + 3 }>();\n-   |           ^       ^\n+   |           +       +\n \n error: expected one of `,` or `>`, found `-`\n   --> $DIR/const-expression-suggest-missing-braces.rs:22:15\n@@ -29,7 +29,7 @@ LL |     foo::<BAR - 3>();\n help: expressions must be enclosed in braces to be used as const generic arguments\n    |\n LL |     foo::<{ BAR - 3 }>();\n-   |           ^         ^\n+   |           +         +\n \n error: expected one of `,` or `>`, found `-`\n   --> $DIR/const-expression-suggest-missing-braces.rs:25:15\n@@ -40,7 +40,7 @@ LL |     foo::<BAR - BAR>();\n help: expressions must be enclosed in braces to be used as const generic arguments\n    |\n LL |     foo::<{ BAR - BAR }>();\n-   |           ^           ^\n+   |           +           +\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n   --> $DIR/const-expression-suggest-missing-braces.rs:28:11\n@@ -51,7 +51,7 @@ LL |     foo::<100 - BAR>();\n help: enclose the `const` expression in braces\n    |\n LL |     foo::<{ 100 - BAR }>();\n-   |           ^           ^\n+   |           +           +\n \n error: expected one of `,` or `>`, found `(`\n   --> $DIR/const-expression-suggest-missing-braces.rs:31:19\n@@ -62,7 +62,7 @@ LL |     foo::<bar<i32>()>();\n help: expressions must be enclosed in braces to be used as const generic arguments\n    |\n LL |     foo::<{ bar<i32>() }>();\n-   |           ^            ^\n+   |           +            +\n \n error: expected one of `,` or `>`, found `(`\n   --> $DIR/const-expression-suggest-missing-braces.rs:34:21\n@@ -73,7 +73,7 @@ LL |     foo::<bar::<i32>()>();\n help: expressions must be enclosed in braces to be used as const generic arguments\n    |\n LL |     foo::<{ bar::<i32>() }>();\n-   |           ^              ^\n+   |           +              +\n \n error: expected one of `,` or `>`, found `(`\n   --> $DIR/const-expression-suggest-missing-braces.rs:37:21\n@@ -84,7 +84,7 @@ LL |     foo::<bar::<i32>() + BAR>();\n help: expressions must be enclosed in braces to be used as const generic arguments\n    |\n LL |     foo::<{ bar::<i32>() + BAR }>();\n-   |           ^                    ^\n+   |           +                    +\n \n error: expected one of `,` or `>`, found `(`\n   --> $DIR/const-expression-suggest-missing-braces.rs:40:21\n@@ -95,7 +95,7 @@ LL |     foo::<bar::<i32>() - BAR>();\n help: expressions must be enclosed in braces to be used as const generic arguments\n    |\n LL |     foo::<{ bar::<i32>() - BAR }>();\n-   |           ^                    ^\n+   |           +                    +\n \n error: expected one of `,` or `>`, found `-`\n   --> $DIR/const-expression-suggest-missing-braces.rs:43:15\n@@ -106,7 +106,7 @@ LL |     foo::<BAR - bar::<i32>()>();\n help: expressions must be enclosed in braces to be used as const generic arguments\n    |\n LL |     foo::<{ BAR - bar::<i32>() }>();\n-   |           ^                    ^\n+   |           +                    +\n \n error: expected one of `,` or `>`, found `-`\n   --> $DIR/const-expression-suggest-missing-braces.rs:46:15\n@@ -117,7 +117,7 @@ LL |     foo::<BAR - bar::<i32>()>();\n help: expressions must be enclosed in braces to be used as const generic arguments\n    |\n LL |     foo::<{ BAR - bar::<i32>() }>();\n-   |           ^                    ^\n+   |           +                    +\n \n error[E0404]: expected trait, found constant `BAR`\n   --> $DIR/const-expression-suggest-missing-braces.rs:11:11"}, {"sha": "a0a14558490dafc58ae12d2b606a0c9b0c735209", "filename": "src/test/ui/const-generics/type-dependent/type-mismatch.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.full.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     assert_eq!(R.method::<1u16>(), 1);\n help: change the type of the numeric literal from `u16` to `u8`\n    |\n LL |     assert_eq!(R.method::<1u8>(), 1);\n-   |                           ^^^\n+   |                           ~~~\n \n error: aborting due to previous error\n "}, {"sha": "a0a14558490dafc58ae12d2b606a0c9b0c735209", "filename": "src/test/ui/const-generics/type-dependent/type-mismatch.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.min.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     assert_eq!(R.method::<1u16>(), 1);\n help: change the type of the numeric literal from `u16` to `u8`\n    |\n LL |     assert_eq!(R.method::<1u8>(), 1);\n-   |                           ^^^\n+   |                           ~~~\n \n error: aborting due to previous error\n "}, {"sha": "b97b6faa3be71c2a3c14405db2282c40a55e9438", "filename": "src/test/ui/constructor-lifetime-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL | struct S<'a, 'b>(&'a u8, &'b u8);\n help: add missing lifetime argument\n    |\n LL |     S::<'static, 'b>(&0, &0);\n-   |                ^^^^\n+   |                ++++\n \n error[E0107]: this struct takes 2 lifetime arguments but 3 lifetime arguments were supplied\n   --> $DIR/constructor-lifetime-args.rs:19:5\n@@ -46,7 +46,7 @@ LL | enum E<'a, 'b> {\n help: add missing lifetime argument\n    |\n LL |     E::V::<'static, 'b>(&0);\n-   |                   ^^^^\n+   |                   ++++\n \n error[E0107]: this enum takes 2 lifetime arguments but 3 lifetime arguments were supplied\n   --> $DIR/constructor-lifetime-args.rs:24:8"}, {"sha": "4141cc4ab1a48d90a0ebae26159c61ec0f7ad1ee", "filename": "src/test/ui/consts/const-match-check.eval1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     A = { let 0 = 0; 0 },\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     A = { if let 0 = 0 { /* */ } 0 },\n-   |           ^^^^^^^^^^^^^^^^^^^^^^\n+   |           ~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "af86ba0cc82f8684a440e85df82d0f1a20ca296e", "filename": "src/test/ui/consts/const-match-check.eval2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     let x: [i32; { let 0 = 0; 0 }] = [];\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     let x: [i32; { if let 0 = 0 { /* */ } 0 }] = [];\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "f71490eba613541be69dc6956a977315fc1dac49", "filename": "src/test/ui/consts/const-match-check.matchck.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL | const X: i32 = { let 0 = 0; 0 };\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL | const X: i32 = { if let 0 = 0 { /* */ } 0 };\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0005]: refutable pattern in local binding: `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n   --> $DIR/const-match-check.rs:8:23\n@@ -24,7 +24,7 @@ LL | static Y: i32 = { let 0 = 0; 0 };\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL | static Y: i32 = { if let 0 = 0 { /* */ } 0 };\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0005]: refutable pattern in local binding: `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n   --> $DIR/const-match-check.rs:13:26\n@@ -38,7 +38,7 @@ LL |     const X: i32 = { let 0 = 0; 0 };\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     const X: i32 = { if let 0 = 0 { /* */ } 0 };\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^\n+   |                      ~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0005]: refutable pattern in local binding: `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n   --> $DIR/const-match-check.rs:19:26\n@@ -52,7 +52,7 @@ LL |     const X: i32 = { let 0 = 0; 0 };\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     const X: i32 = { if let 0 = 0 { /* */ } 0 };\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^\n+   |                      ~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f15be95db1024fa032db4bfcf05fb2db2f16fd50", "filename": "src/test/ui/deprecation/invalid-literal.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,11 +7,11 @@ LL | #[deprecated = b\"test\"]\n help: the following are the possible correct uses\n    |\n LL | #[deprecated]\n-   | ^^^^^^^^^^^^^\n+   | ~~~~~~~~~~~~~\n LL | #[deprecated(/*opt*/ since = \"version\", /*opt*/ note = \"reason\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n LL | #[deprecated = \"reason\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "c5c8b8842979bf1176b2c2593449a0676721884e", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -15,7 +15,7 @@ LL |     foo3(u);\n help: consider dereferencing the borrow\n    |\n LL |     foo3(*u);\n-   |          ^\n+   |          +\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:30:9\n@@ -25,8 +25,9 @@ LL |     foo(&\"aaa\".to_owned());\n    |\n help: consider removing the borrow\n    |\n-LL |     foo(\"aaa\".to_owned());\n-   |        --\n+LL -     foo(&\"aaa\".to_owned());\n+LL +     foo(\"aaa\".to_owned());\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:32:9\n@@ -36,8 +37,9 @@ LL |     foo(&mut \"aaa\".to_owned());\n    |\n help: consider removing the borrow\n    |\n-LL |     foo(\"aaa\".to_owned());\n-   |        --\n+LL -     foo(&mut \"aaa\".to_owned());\n+LL +     foo(\"aaa\".to_owned());\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:2:20\n@@ -85,7 +87,7 @@ LL |     let r = R { i };\n help: consider dereferencing the borrow\n    |\n LL |     let r = R { i: *i };\n-   |                 ^^^^^\n+   |                 ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:46:20\n@@ -96,7 +98,7 @@ LL |     let r = R { i: i };\n help: consider dereferencing the borrow\n    |\n LL |     let r = R { i: *i };\n-   |                    ^\n+   |                    +\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:55:9\n@@ -107,7 +109,7 @@ LL |         b\n help: consider dereferencing the borrow\n    |\n LL |         *b\n-   |         ^\n+   |         +\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:63:9\n@@ -118,7 +120,7 @@ LL |         b\n help: consider dereferencing the borrow\n    |\n LL |         *b\n-   |         ^\n+   |         +\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/deref-suggestion.rs:68:12"}, {"sha": "635bd5e7edf4992a5123c91a4ad46bbc68e4b7e4", "filename": "src/test/ui/destructuring-assignment/struct_destructure_fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fstruct_destructure_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fstruct_destructure_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fstruct_destructure_fail.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -33,11 +33,11 @@ LL |     Struct { a, _ } = Struct { a: 1, b: 2 };\n help: include the missing field in the pattern\n    |\n LL |     Struct { a, b } = Struct { a: 1, b: 2 };\n-   |               ^^^^^\n+   |               ~~~~~\n help: if you don't care about this missing field, you can explicitly ignore it\n    |\n LL |     Struct { a, .. } = Struct { a: 1, b: 2 };\n-   |               ^^^^^^\n+   |               ~~~~~~\n \n error: aborting due to 5 previous errors\n "}, {"sha": "0e92cc5c9f282a70153f0c9495ba5b48cf8a3522", "filename": "src/test/ui/destructuring-assignment/tuple_struct_destructure_fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -35,11 +35,11 @@ LL |     TupleStruct(_) = TupleStruct(1, 2);\n help: use `_` to explicitly ignore each field\n    |\n LL |     TupleStruct(_, _) = TupleStruct(1, 2);\n-   |                  ^^^\n+   |                  +++\n help: use `..` to ignore all fields\n    |\n LL |     TupleStruct(..) = TupleStruct(1, 2);\n-   |                 ^^\n+   |                 ~~\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n   --> $DIR/tuple_struct_destructure_fail.rs:34:5\n@@ -62,11 +62,11 @@ LL |     Enum::SingleVariant(_) = Enum::SingleVariant(1, 2);\n help: use `_` to explicitly ignore each field\n    |\n LL |     Enum::SingleVariant(_, _) = Enum::SingleVariant(1, 2);\n-   |                          ^^^\n+   |                          +++\n help: use `..` to ignore all fields\n    |\n LL |     Enum::SingleVariant(..) = Enum::SingleVariant(1, 2);\n-   |                         ^^\n+   |                         ~~\n \n error[E0070]: invalid left-hand side of assignment\n   --> $DIR/tuple_struct_destructure_fail.rs:40:12"}, {"sha": "0e2fdf9f6c2bf2d74c2ece17b8095d0db8d41f5d", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -133,7 +133,7 @@ LL | fn foo<X: K<_, _>>(x: X) {}\n help: use type parameters instead\n    |\n LL | fn foo<X: K<T, T>, T>(x: X) {}\n-   |             ^  ^ ^^^\n+   |             ~  ~ +++\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/bad-assoc-ty.rs:52:34\n@@ -144,7 +144,7 @@ LL | fn bar<F>(_: F) where F: Fn() -> _ {}\n help: use type parameters instead\n    |\n LL | fn bar<F, T>(_: F) where F: Fn() -> T {}\n-   |         ^^^                         ^\n+   |         +++                         ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/bad-assoc-ty.rs:55:19\n@@ -155,7 +155,7 @@ LL | fn baz<F: Fn() -> _>(_: F) {}\n help: use type parameters instead\n    |\n LL | fn baz<F: Fn() -> T, T>(_: F) {}\n-   |                   ^^^^\n+   |                   ~+++\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n   --> $DIR/bad-assoc-ty.rs:58:33\n@@ -166,7 +166,7 @@ LL | struct L<F>(F) where F: Fn() -> _;\n help: use type parameters instead\n    |\n LL | struct L<F, T>(F) where F: Fn() -> T;\n-   |           ^^^                      ^\n+   |           +++                      ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n   --> $DIR/bad-assoc-ty.rs:60:30\n@@ -177,7 +177,7 @@ LL | struct M<F> where F: Fn() -> _ {\n help: use type parameters instead\n    |\n LL | struct M<F, T> where F: Fn() -> T {\n-   |           ^^^                   ^\n+   |           +++                   ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for enums\n   --> $DIR/bad-assoc-ty.rs:64:28\n@@ -188,7 +188,7 @@ LL | enum N<F> where F: Fn() -> _ {\n help: use type parameters instead\n    |\n LL | enum N<F, T> where F: Fn() -> T {\n-   |         ^^^                   ^\n+   |         +++                   ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for unions\n   --> $DIR/bad-assoc-ty.rs:69:29\n@@ -199,7 +199,7 @@ LL | union O<F> where F: Fn() -> _ {\n help: use type parameters instead\n    |\n LL | union O<F, T> where F: Fn() -> T {\n-   |          ^^^                   ^\n+   |          +++                   ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for traits\n   --> $DIR/bad-assoc-ty.rs:74:29\n@@ -210,7 +210,7 @@ LL | trait P<F> where F: Fn() -> _ {\n help: use type parameters instead\n    |\n LL | trait P<F, T> where F: Fn() -> T {\n-   |          ^^^                   ^\n+   |          +++                   ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/bad-assoc-ty.rs:79:38\n@@ -221,7 +221,7 @@ LL |     fn foo<F>(_: F) where F: Fn() -> _ {}\n help: use type parameters instead\n    |\n LL |     fn foo<F, T>(_: F) where F: Fn() -> T {}\n-   |             ^^^                         ^\n+   |             +++                         ~\n \n error: aborting due to 28 previous errors\n "}, {"sha": "d5e16e1ff273d693867fb148bee0c69fecac9448", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -82,7 +82,7 @@ LL | }\n help: add `fn` here to parse `hello_method` as a public method\n    |\n LL |     pub fn hello_method(&self) {\n-   |         ^^\n+   |         ++\n \n error[E0599]: no method named `hello_method` found for struct `S` in the current scope\n   --> $DIR/issue-40006.rs:38:7"}, {"sha": "f4bc5aef82dc3c5c91e0f1f37c4891728a260ecf", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     (0..13).collect<Vec<i32>>();\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     (0..13).collect::<Vec<i32>>();\n-   |                    ^^\n+   |                    ++\n \n error: comparison operators cannot be chained\n   --> $DIR/issue-40396.rs:5:8\n@@ -18,7 +18,7 @@ LL |     Vec<i32>::new();\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     Vec::<i32>::new();\n-   |        ^^\n+   |        ++\n \n error: comparison operators cannot be chained\n   --> $DIR/issue-40396.rs:8:20\n@@ -29,7 +29,7 @@ LL |     (0..13).collect<Vec<i32>();\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     (0..13).collect::<Vec<i32>();\n-   |                    ^^\n+   |                    ++\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `,`\n   --> $DIR/issue-40396.rs:11:43\n@@ -40,7 +40,7 @@ LL |     let x = std::collections::HashMap<i128, i128>::new();\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     let x = std::collections::HashMap::<i128, i128>::new();\n-   |                                      ^^\n+   |                                      ++\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `,`\n   --> $DIR/issue-40396.rs:15:39\n@@ -51,7 +51,7 @@ LL |         std::collections::HashMap<i128, i128>::new()\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |         std::collections::HashMap::<i128, i128>::new()\n-   |                                  ^^\n+   |                                  ++\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `,`\n   --> $DIR/issue-40396.rs:20:39\n@@ -62,7 +62,7 @@ LL |         std::collections::HashMap<i128, i128>::new();\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |         std::collections::HashMap::<i128, i128>::new();\n-   |                                  ^^\n+   |                                  ++\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `,`\n   --> $DIR/issue-40396.rs:25:39\n@@ -73,7 +73,7 @@ LL |         std::collections::HashMap<i128, i128>::new(1, 2);\n help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |         std::collections::HashMap::<i128, i128>::new(1, 2);\n-   |                                  ^^\n+   |                                  ++\n \n error[E0308]: mismatched types\n   --> $DIR/issue-40396.rs:13:17"}, {"sha": "b339ce5ce8c923b96bba91f9581261d0dbddb53a", "filename": "src/test/ui/did_you_mean/issue-42764.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -9,9 +9,9 @@ LL |     this_function_expects_a_double_option(n);\n help: try using a variant of the expected enum\n    |\n LL |     this_function_expects_a_double_option(DoubleOption::FirstSome(n));\n-   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~\n LL |     this_function_expects_a_double_option(DoubleOption::AlternativeSome(n));\n-   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/issue-42764.rs:27:33"}, {"sha": "c2e3ead7ec7c68a1b64bfcc62aa93b7842d8387a", "filename": "src/test/ui/did_you_mean/issue-48492-tuple-destructure-missing-parens.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,11 +7,11 @@ LL |     while let b1, b2, b3 = reading_frame.next().expect(\"there should be a s\n help: try adding parentheses to match on a tuple...\n    |\n LL |     while let (b1, b2, b3) = reading_frame.next().expect(\"there should be a start codon\") {\n-   |               ^^^^^^^^^^^^\n+   |               ~~~~~~~~~~~~\n help: ...or a vertical bar to match on multiple alternatives\n    |\n LL |     while let b1 | b2 | b3 = reading_frame.next().expect(\"there should be a start codon\") {\n-   |               ^^^^^^^^^^^^\n+   |               ~~~~~~~~~~~~\n \n error: unexpected `,` in pattern\n   --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:49:14\n@@ -22,11 +22,11 @@ LL |     if let b1, b2, b3 = reading_frame.next().unwrap() {\n help: try adding parentheses to match on a tuple...\n    |\n LL |     if let (b1, b2, b3) = reading_frame.next().unwrap() {\n-   |            ^^^^^^^^^^^^\n+   |            ~~~~~~~~~~~~\n help: ...or a vertical bar to match on multiple alternatives\n    |\n LL |     if let b1 | b2 | b3 = reading_frame.next().unwrap() {\n-   |            ^^^^^^^^^^^^\n+   |            ~~~~~~~~~~~~\n \n error: unexpected `,` in pattern\n   --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:59:28\n@@ -37,11 +37,11 @@ LL |         Nucleotide::Adenine, Nucleotide::Cytosine, _ => true\n help: try adding parentheses to match on a tuple...\n    |\n LL |         (Nucleotide::Adenine, Nucleotide::Cytosine, _) => true\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n help: ...or a vertical bar to match on multiple alternatives\n    |\n LL |         Nucleotide::Adenine | Nucleotide::Cytosine | _ => true\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: unexpected `,` in pattern\n   --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:67:10\n@@ -52,11 +52,11 @@ LL |     for x, _barr_body in women.iter().map(|woman| woman.allosomes.clone())\n help: try adding parentheses to match on a tuple...\n    |\n LL |     for (x, _barr_body) in women.iter().map(|woman| woman.allosomes.clone()) {\n-   |         ^^^^^^^^^^^^^^^\n+   |         ~~~~~~~~~~~~~~~\n help: ...or a vertical bar to match on multiple alternatives\n    |\n LL |     for x | _barr_body in women.iter().map(|woman| woman.allosomes.clone()) {\n-   |         ^^^^^^^^^^^^^^\n+   |         ~~~~~~~~~~~~~~\n \n error: unexpected `,` in pattern\n   --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:75:10\n@@ -67,11 +67,11 @@ LL |     for x, y @ Allosome::Y(_) in men.iter().map(|man| man.allosomes.clone()\n help: try adding parentheses to match on a tuple...\n    |\n LL |     for (x, y @ Allosome::Y(_)) in men.iter().map(|man| man.allosomes.clone()) {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~\n help: ...or a vertical bar to match on multiple alternatives\n    |\n LL |     for x | y @ Allosome::Y(_) in men.iter().map(|man| man.allosomes.clone()) {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |         ~~~~~~~~~~~~~~~~~~~~~~\n \n error: unexpected `,` in pattern\n   --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:84:14\n@@ -82,11 +82,11 @@ LL |     let women, men: (Vec<Genome>, Vec<Genome>) = genomes.iter().cloned()\n help: try adding parentheses to match on a tuple...\n    |\n LL |     let (women, men): (Vec<Genome>, Vec<Genome>) = genomes.iter().cloned()\n-   |         ^^^^^^^^^^^^\n+   |         ~~~~~~~~~~~~\n help: ...or a vertical bar to match on multiple alternatives\n    |\n LL |     let women | men: (Vec<Genome>, Vec<Genome>) = genomes.iter().cloned()\n-   |         ^^^^^^^^^^^\n+   |         ~~~~~~~~~~~\n \n error: aborting due to 6 previous errors\n "}, {"sha": "83fc37e7e537fe9277ca052c1db5b69a7773b8f8", "filename": "src/test/ui/did_you_mean/issue-49746-unicode-confusable-in-float-literal-expt.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -13,7 +13,7 @@ LL | const UNIVERSAL_GRAVITATIONAL_CONSTANT: f64 = 6.674e\u221211; // m\u00b3\u22c5kg\u207b\u00b9\n help: Unicode character '\u2212' (Minus Sign) looks like '-' (Minus/Hyphen), but it is not\n    |\n LL | const UNIVERSAL_GRAVITATIONAL_CONSTANT: f64 = 6.674e-11; // m\u00b3\u22c5kg\u207b\u00b9\u22c5s\u207b\u00b2\n-   |                                                     ^\n+   |                                                     ~\n \n error[E0277]: cannot subtract `{integer}` from `{float}`\n   --> $DIR/issue-49746-unicode-confusable-in-float-literal-expt.rs:1:53"}, {"sha": "abc040c0546b428551f9965753711bb65c354f9f", "filename": "src/test/ui/did_you_mean/issue-56028-there-is-an-enum-variant.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,13 +7,13 @@ LL | fn setup() -> Set { Set }\n help: there is an enum variant `AffixHeart::Set` and 7 others; try using the variant's enum\n    |\n LL | fn setup() -> AffixHeart { Set }\n-   |               ^^^^^^^^^^\n+   |               ~~~~~~~~~~\n LL | fn setup() -> CauseToBe { Set }\n-   |               ^^^^^^^^^\n+   |               ~~~~~~~~~\n LL | fn setup() -> Determine { Set }\n-   |               ^^^^^^^^^\n+   |               ~~~~~~~~~\n LL | fn setup() -> PutDown { Set }\n-   |               ^^^^^^^\n+   |               ~~~~~~~\n      and 3 other candidates\n \n error[E0425]: cannot find value `Set` in this scope"}, {"sha": "3d8049cba9c8f822adde19927c649193d72a7bd7", "filename": "src/test/ui/discrim/discrim-ill-typed.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |         OhNo = 0_u8,\n help: change the type of the numeric literal from `u8` to `i8`\n    |\n LL |         OhNo = 0_i8,\n-   |                ^^^^\n+   |                ~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:28:16\n@@ -18,7 +18,7 @@ LL |         OhNo = 0_i8,\n help: change the type of the numeric literal from `i8` to `u8`\n    |\n LL |         OhNo = 0_u8,\n-   |                ^^^^\n+   |                ~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:41:16\n@@ -29,7 +29,7 @@ LL |         OhNo = 0_u16,\n help: change the type of the numeric literal from `u16` to `i16`\n    |\n LL |         OhNo = 0_i16,\n-   |                ^^^^^\n+   |                ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:54:16\n@@ -40,7 +40,7 @@ LL |         OhNo = 0_i16,\n help: change the type of the numeric literal from `i16` to `u16`\n    |\n LL |         OhNo = 0_u16,\n-   |                ^^^^^\n+   |                ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:67:16\n@@ -51,7 +51,7 @@ LL |         OhNo = 0_u32,\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |         OhNo = 0_i32,\n-   |                ^^^^^\n+   |                ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:80:16\n@@ -62,7 +62,7 @@ LL |         OhNo = 0_i32,\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |         OhNo = 0_u32,\n-   |                ^^^^^\n+   |                ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:93:16\n@@ -73,7 +73,7 @@ LL |         OhNo = 0_u64,\n help: change the type of the numeric literal from `u64` to `i64`\n    |\n LL |         OhNo = 0_i64,\n-   |                ^^^^^\n+   |                ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:106:16\n@@ -84,7 +84,7 @@ LL |         OhNo = 0_i64,\n help: change the type of the numeric literal from `i64` to `u64`\n    |\n LL |         OhNo = 0_u64,\n-   |                ^^^^^\n+   |                ~~~~~\n \n error: aborting due to 8 previous errors\n "}, {"sha": "32967b376ca9c2b12dae6e9aee6bbbba0d10c90c", "filename": "src/test/ui/diverging-tuple-parts-39485.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -9,11 +9,12 @@ LL |     &panic!()\n help: try adding a return type\n    |\n LL | fn g() -> &_ {\n-   |        ^^^^^\n+   |        +++++\n help: consider removing the borrow\n    |\n-LL |     panic!()\n-   |    --\n+LL -     &panic!()\n+LL +     panic!()\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/diverging-tuple-parts-39485.rs:12:5"}, {"sha": "b7824c027ec119deafc063958e669b2c8e5541bc", "filename": "src/test/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -9,8 +9,9 @@ LL |     let u: &dyn Foo = t;\n    = note: required for the cast to the object type `dyn Foo`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n-LL | fn test1<T: Foo>(t: &T) {\n-   |            --\n+LL - fn test1<T: ?Sized + Foo>(t: &T) {\n+LL + fn test1<T: Foo>(t: &T) {\n+   | \n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/dst-object-from-unsized-type.rs:13:23\n@@ -23,8 +24,9 @@ LL |     let v: &dyn Foo = t as &dyn Foo;\n    = note: required for the cast to the object type `dyn Foo`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n-LL | fn test2<T: Foo>(t: &T) {\n-   |            --\n+LL - fn test2<T: ?Sized + Foo>(t: &T) {\n+LL + fn test2<T: Foo>(t: &T) {\n+   | \n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/dst-object-from-unsized-type.rs:18:28"}, {"sha": "8b781a7b1f92d571524c41a58b5f954bf625c06a", "filename": "src/test/ui/dst/dst-sized-trait-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL | impl Foo<[isize]> for usize { }\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait Foo<T: ?Sized> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n-   |            ^^^^^^^^\n+   |            ++++++++\n \n error[E0277]: the size for values of type `[usize]` cannot be known at compilation time\n   --> $DIR/dst-sized-trait-param.rs:10:6"}, {"sha": "ba723b38bfada417b4f6168a0dfc4be993d8e2ea", "filename": "src/test/ui/duplicate/duplicate-check-macro-exports.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-check-macro-exports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-check-macro-exports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-check-macro-exports.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL | macro_rules! panic { () => {} }\n help: you can use `as` to change the binding name of the import\n    |\n LL | pub use std::panic as other_panic;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "730bc691bf88610e5f9893d00071485574ccc9e5", "filename": "src/test/ui/dyn-keyword/dyn-2021-edition-error.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     let _x: &SomeTrait = todo!();\n help: add `dyn` keyword before this trait\n    |\n LL |     let _x: &dyn SomeTrait = todo!();\n-   |              ^^^\n+   |              +++\n \n error[E0782]: trait objects must include the `dyn` keyword\n   --> $DIR/dyn-2021-edition-error.rs:3:17\n@@ -18,7 +18,7 @@ LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n help: add `dyn` keyword before this trait\n    |\n LL | fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n-   |                 ^^^\n+   |                 +++\n \n error[E0782]: trait objects must include the `dyn` keyword\n   --> $DIR/dyn-2021-edition-error.rs:3:35\n@@ -29,7 +29,7 @@ LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n help: add `dyn` keyword before this trait\n    |\n LL | fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n-   |                                   ^^^\n+   |                                   +++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "65d9199fa3326d5a528684fc7f6e45b07ae63c64", "filename": "src/test/ui/editions/edition-keywords-2015-2018-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -8,7 +8,7 @@ LL |     produces_async! {}\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     () => (pub fn r#async() {})\n-   |                   ^^^^^^^\n+   |                   ~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "837d35bfccb0e5d291254f62da2e2d3a4f790737", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     let mut async = 1;\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let mut r#async = 1;\n-   |             ^^^^^^^\n+   |             ~~~~~~~\n \n error: expected identifier, found keyword `async`\n   --> $DIR/edition-keywords-2018-2015-parsing.rs:26:13\n@@ -18,7 +18,7 @@ LL |     module::async();\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     module::r#async();\n-   |             ^^^^^^^\n+   |             ~~~~~~~\n \n error: no rules expected the token `r#async`\n   --> $DIR/edition-keywords-2018-2015-parsing.rs:20:31"}, {"sha": "77b95ec87a0334f5b424eba42a674abb04dec66e", "filename": "src/test/ui/editions/edition-keywords-2018-2018-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -8,7 +8,7 @@ LL |     produces_async! {}\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     () => (pub fn r#async() {})\n-   |                   ^^^^^^^\n+   |                   ~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "7c183699ac255f05c8f381531b8f29887004e905", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     let mut async = 1;\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let mut r#async = 1;\n-   |             ^^^^^^^\n+   |             ~~~~~~~\n \n error: expected identifier, found keyword `async`\n   --> $DIR/edition-keywords-2018-2018-parsing.rs:26:13\n@@ -18,7 +18,7 @@ LL |     module::async();\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     module::r#async();\n-   |             ^^^^^^^\n+   |             ~~~~~~~\n \n error: no rules expected the token `r#async`\n   --> $DIR/edition-keywords-2018-2018-parsing.rs:20:31"}, {"sha": "48e5ea8ec866cd866e50db26dd788382f3fe9273", "filename": "src/test/ui/empty/empty-struct-braces-expr.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -15,11 +15,11 @@ LL | pub struct XEmpty2;\n help: use struct literal syntax instead\n    |\n LL |     let e1 = Empty1 {};\n-   |              ^^^^^^^^^\n+   |              ~~~~~~~~~\n help: a unit struct with a similar name exists\n    |\n LL |     let e1 = XEmpty2;\n-   |              ^^^^^^^\n+   |              ~~~~~~~\n \n error[E0423]: expected function, tuple struct or tuple variant, found struct `Empty1`\n   --> $DIR/empty-struct-braces-expr.rs:16:14\n@@ -38,11 +38,11 @@ LL | pub struct XEmpty2;\n help: use struct literal syntax instead\n    |\n LL |     let e1 = Empty1 {};\n-   |              ^^^^^^^^^\n+   |              ~~~~~~~~~\n help: a unit struct with a similar name exists\n    |\n LL |     let e1 = XEmpty2();\n-   |              ^^^^^^^\n+   |              ~~~~~~~\n \n error[E0423]: expected value, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-expr.rs:18:14\n@@ -78,11 +78,11 @@ LL | pub struct XEmpty2;\n help: use struct literal syntax instead\n    |\n LL |     let xe1 = XEmpty1 {};\n-   |               ^^^^^^^^^^\n+   |               ~~~~~~~~~~\n help: a unit struct with a similar name exists\n    |\n LL |     let xe1 = XEmpty2;\n-   |               ^^^^^^^\n+   |               ~~~~~~~\n \n error[E0423]: expected function, tuple struct or tuple variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-expr.rs:23:15\n@@ -100,11 +100,11 @@ LL | pub struct XEmpty2;\n help: use struct literal syntax instead\n    |\n LL |     let xe1 = XEmpty1 {};\n-   |               ^^^^^^^^^^\n+   |               ~~~~~~~~~~\n help: a unit struct with a similar name exists\n    |\n LL |     let xe1 = XEmpty2();\n-   |               ^^^^^^^\n+   |               ~~~~~~~\n \n error[E0599]: no variant or associated item named `Empty3` found for enum `empty_struct::XE` in the current scope\n   --> $DIR/empty-struct-braces-expr.rs:25:19"}, {"sha": "0215a9e5935322507e2609a5ef1b8c81fa354481", "filename": "src/test/ui/empty/empty-struct-braces-pat-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -23,11 +23,11 @@ LL |     XEmpty4,\n help: use struct pattern syntax instead\n    |\n LL |         XE::XEmpty3 { /* fields */ } => ()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n help: a unit variant with a similar name exists\n    |\n LL |         XE::XEmpty4 => ()\n-   |             ^^^^^^^\n+   |             ~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "28191615afda4849b7553debfddad2652ccd222c", "filename": "src/test/ui/empty/empty-struct-braces-pat-2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -15,11 +15,11 @@ LL | pub struct XEmpty6();\n help: use struct pattern syntax instead\n    |\n LL |         Empty1 {} => ()\n-   |         ^^^^^^^^^\n+   |         ~~~~~~~~~\n help: a tuple struct with a similar name exists\n    |\n LL |         XEmpty6() => ()\n-   |         ^^^^^^^\n+   |         ~~~~~~~\n \n error[E0532]: expected tuple struct or tuple variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:18:9\n@@ -38,11 +38,11 @@ LL | pub struct XEmpty6();\n help: use struct pattern syntax instead\n    |\n LL |         XEmpty1 {} => ()\n-   |         ^^^^^^^^^^\n+   |         ~~~~~~~~~~\n help: a tuple struct with a similar name exists\n    |\n LL |         XEmpty6() => ()\n-   |         ^^^^^^^\n+   |         ~~~~~~~\n \n error[E0532]: expected tuple struct or tuple variant, found struct `Empty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:21:9\n@@ -61,11 +61,11 @@ LL | pub struct XEmpty6();\n help: use struct pattern syntax instead\n    |\n LL |         Empty1 {} => ()\n-   |         ^^^^^^^^^\n+   |         ~~~~~~~~~\n help: a tuple struct with a similar name exists\n    |\n LL |         XEmpty6(..) => ()\n-   |         ^^^^^^^\n+   |         ~~~~~~~\n \n error[E0532]: expected tuple struct or tuple variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:24:9\n@@ -84,11 +84,11 @@ LL | pub struct XEmpty6();\n help: use struct pattern syntax instead\n    |\n LL |         XEmpty1 {} => ()\n-   |         ^^^^^^^^^^\n+   |         ~~~~~~~~~~\n help: a tuple struct with a similar name exists\n    |\n LL |         XEmpty6(..) => ()\n-   |         ^^^^^^^\n+   |         ~~~~~~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "60266bb35807df7314c527bbdabba1766b89a5e7", "filename": "src/test/ui/empty/empty-struct-braces-pat-3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -24,11 +24,11 @@ LL |     XEmpty5(),\n help: use struct pattern syntax instead\n    |\n LL |         XE::XEmpty3 { /* fields */ } => ()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n help: a tuple variant with a similar name exists\n    |\n LL |         XE::XEmpty5() => ()\n-   |             ^^^^^^^\n+   |             ~~~~~~~\n \n error[E0532]: expected tuple struct or tuple variant, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:25:9\n@@ -56,11 +56,11 @@ LL |     XEmpty5(),\n help: use struct pattern syntax instead\n    |\n LL |         XE::XEmpty3 { /* fields */ } => ()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n help: a tuple variant with a similar name exists\n    |\n LL |         XE::XEmpty5(..) => ()\n-   |             ^^^^^^^\n+   |             ~~~~~~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e696b85c6cc8164273480aa7f3a917119d03b676", "filename": "src/test/ui/empty/empty-struct-tuple-pat.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -41,11 +41,11 @@ LL |     XEmpty5(),\n help: use the tuple variant pattern syntax instead\n    |\n LL |         XE::XEmpty5(/* fields */) => (),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n help: a unit variant with a similar name exists\n    |\n LL |         XE::XEmpty4 => (),\n-   |             ^^^^^^^\n+   |             ~~~~~~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "1023950639a662c8daf2cae6b6d3ac8ff63890e4", "filename": "src/test/ui/empty/empty-struct-unit-expr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -23,7 +23,7 @@ LL |     let e4 = E::Empty4();\n help: `E::Empty4` is a unit variant, you need to write it without the parenthesis\n    |\n LL |     let e4 = E::Empty4;\n-   |              ^^^^^^^^^\n+   |              ~~~~~~~~~\n \n error[E0618]: expected function, found `empty_struct::XEmpty2`\n   --> $DIR/empty-struct-unit-expr.rs:18:15\n@@ -44,7 +44,7 @@ LL |     let xe4 = XE::XEmpty4();\n help: `XE::XEmpty4` is a unit variant, you need to write it without the parenthesis\n    |\n LL |     let xe4 = XE::XEmpty4;\n-   |               ^^^^^^^^^^^\n+   |               ~~~~~~~~~~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b1b253385fd34e8bbe0a465e8d8609ed10afde8a", "filename": "src/test/ui/empty/empty-struct-unit-pat.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -15,11 +15,11 @@ LL | pub struct XEmpty6();\n help: use this syntax instead\n    |\n LL |         Empty2 => ()\n-   |         ^^^^^^\n+   |         ~~~~~~\n help: a tuple struct with a similar name exists\n    |\n LL |         XEmpty6() => ()\n-   |         ^^^^^^^\n+   |         ~~~~~~~\n \n error[E0532]: expected tuple struct or tuple variant, found unit struct `XEmpty2`\n   --> $DIR/empty-struct-unit-pat.rs:24:9\n@@ -37,11 +37,11 @@ LL | pub struct XEmpty6();\n help: use this syntax instead\n    |\n LL |         XEmpty2 => ()\n-   |         ^^^^^^^\n+   |         ~~~~~~~\n help: a tuple struct with a similar name exists\n    |\n LL |         XEmpty6() => ()\n-   |         ^^^^^^^\n+   |         ~~~~~~~\n \n error[E0532]: expected tuple struct or tuple variant, found unit struct `Empty2`\n   --> $DIR/empty-struct-unit-pat.rs:28:9\n@@ -60,11 +60,11 @@ LL | pub struct XEmpty6();\n help: use this syntax instead\n    |\n LL |         Empty2 => ()\n-   |         ^^^^^^\n+   |         ~~~~~~\n help: a tuple struct with a similar name exists\n    |\n LL |         XEmpty6(..) => ()\n-   |         ^^^^^^^\n+   |         ~~~~~~~\n \n error[E0532]: expected tuple struct or tuple variant, found unit struct `XEmpty2`\n   --> $DIR/empty-struct-unit-pat.rs:32:9\n@@ -82,11 +82,11 @@ LL | pub struct XEmpty6();\n help: use this syntax instead\n    |\n LL |         XEmpty2 => ()\n-   |         ^^^^^^^\n+   |         ~~~~~~~\n help: a tuple struct with a similar name exists\n    |\n LL |         XEmpty6(..) => ()\n-   |         ^^^^^^^\n+   |         ~~~~~~~\n \n error[E0532]: expected tuple struct or tuple variant, found unit variant `E::Empty4`\n   --> $DIR/empty-struct-unit-pat.rs:37:9\n@@ -113,11 +113,11 @@ LL |     XEmpty5(),\n help: use this syntax instead\n    |\n LL |         XE::XEmpty4 => (),\n-   |         ^^^^^^^^^^^\n+   |         ~~~~~~~~~~~\n help: a tuple variant with a similar name exists\n    |\n LL |         XE::XEmpty5() => (),\n-   |             ^^^^^^^\n+   |             ~~~~~~~\n \n error[E0532]: expected tuple struct or tuple variant, found unit variant `E::Empty4`\n   --> $DIR/empty-struct-unit-pat.rs:46:9\n@@ -144,11 +144,11 @@ LL |     XEmpty5(),\n help: use this syntax instead\n    |\n LL |         XE::XEmpty4 => (),\n-   |         ^^^^^^^^^^^\n+   |         ~~~~~~~~~~~\n help: a tuple variant with a similar name exists\n    |\n LL |         XE::XEmpty5(..) => (),\n-   |             ^^^^^^^\n+   |             ~~~~~~~\n \n error: aborting due to 8 previous errors\n "}, {"sha": "b95dcbd8935b33e45367922cbea953418e4dfcf2", "filename": "src/test/ui/error-codes/E0005.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -15,7 +15,7 @@ LL |     None,\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let Some(y) = x { /* */ }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "ec3aae29714103601cc778f2f0d0c608dec1f535", "filename": "src/test/ui/error-codes/E0023.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |         Fruit::Apple(a) => {},\n help: use `_` to explicitly ignore each field\n    |\n LL |         Fruit::Apple(a, _) => {},\n-   |                       ^^^\n+   |                       +++\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n   --> $DIR/E0023.rs:12:9\n@@ -42,7 +42,7 @@ LL |         Fruit::Orange(a, b) => {},\n help: missing parentheses\n    |\n LL |         Fruit::Orange((a, b)) => {},\n-   |                       ^    ^\n+   |                       +    +\n \n error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has 1 field\n   --> $DIR/E0023.rs:15:9\n@@ -56,7 +56,7 @@ LL |         Fruit::Banana() => {},\n help: missing parentheses\n    |\n LL |         Fruit::Banana(()) => {},\n-   |                      ^  ^\n+   |                      +  +\n \n error: aborting due to 5 previous errors\n "}, {"sha": "9ae97e4a994da75443cab3a7d4027078724bb4fd", "filename": "src/test/ui/error-codes/E0027.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0027.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,11 +7,11 @@ LL |         Dog { age: x } => {}\n help: include the missing field in the pattern\n    |\n LL |         Dog { age: x, name } => {}\n-   |                     ^^^^^^^^\n+   |                     ~~~~~~~~\n help: if you don't care about this missing field, you can explicitly ignore it\n    |\n LL |         Dog { age: x, .. } => {}\n-   |                     ^^^^^^\n+   |                     ~~~~~~\n \n error[E0027]: pattern does not mention field `age`\n   --> $DIR/E0027.rs:15:9\n@@ -22,11 +22,11 @@ LL |         Dog { name: x, } => {}\n help: include the missing field in the pattern\n    |\n LL |         Dog { name: x, age } => {}\n-   |                      ^^^^^^^\n+   |                      ~~~~~~~\n help: if you don't care about this missing field, you can explicitly ignore it\n    |\n LL |         Dog { name: x, .. } => {}\n-   |                      ^^^^^^\n+   |                      ~~~~~~\n \n error[E0027]: pattern does not mention field `age`\n   --> $DIR/E0027.rs:19:9\n@@ -37,11 +37,11 @@ LL |         Dog { name: x  , } => {}\n help: include the missing field in the pattern\n    |\n LL |         Dog { name: x, age } => {}\n-   |                      ^^^^^^^\n+   |                      ~~~~~~~\n help: if you don't care about this missing field, you can explicitly ignore it\n    |\n LL |         Dog { name: x, .. } => {}\n-   |                      ^^^^^^\n+   |                      ~~~~~~\n \n error[E0027]: pattern does not mention fields `name`, `age`\n   --> $DIR/E0027.rs:22:9\n@@ -52,11 +52,11 @@ LL |         Dog {} => {}\n help: include the missing fields in the pattern\n    |\n LL |         Dog { name, age } => {}\n-   |             ^^^^^^^^^^^^^\n+   |             ~~~~~~~~~~~~~\n help: if you don't care about these missing fields, you can explicitly ignore them\n    |\n LL |         Dog { .. } => {}\n-   |             ^^^^^^\n+   |             ~~~~~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "3b68abbb4a0ba1c22a0d7e486c2e6164245190cb", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -20,11 +20,11 @@ LL |     fn foo();\n help: consider turning `foo` into a method by giving it a `&self` argument\n    |\n LL |     fn foo(&self);\n-   |            ^^^^^\n+   |            +++++\n help: alternatively, consider constraining `foo` so it does not apply to trait objects\n    |\n LL |     fn foo() where Self: Sized;\n-   |              ^^^^^^^^^^^^^^^^^\n+   |              +++++++++++++++++\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n   --> $DIR/E0033-teach.rs:12:9"}, {"sha": "f0645107831e0c9402807503d47dc7356daad3e5", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -20,11 +20,11 @@ LL |     fn foo();\n help: consider turning `foo` into a method by giving it a `&self` argument\n    |\n LL |     fn foo(&self);\n-   |            ^^^^^\n+   |            +++++\n help: alternatively, consider constraining `foo` so it does not apply to trait objects\n    |\n LL |     fn foo() where Self: Sized;\n-   |              ^^^^^^^^^^^^^^^^^\n+   |              +++++++++++++++++\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n   --> $DIR/E0033.rs:10:9"}, {"sha": "83718a1e27371f0140c0792addd2ed6273da9e8f", "filename": "src/test/ui/error-codes/E0034.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -17,11 +17,11 @@ LL |     fn foo() {}\n help: disambiguate the associated function for candidate #1\n    |\n LL |     Trait1::foo()\n-   |     ^^^^^^^^\n+   |     ~~~~~~~~\n help: disambiguate the associated function for candidate #2\n    |\n LL |     Trait2::foo()\n-   |     ^^^^^^^^\n+   |     ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "ee9a4733fd95fa0598785245cfb752bf23eb26a3", "filename": "src/test/ui/error-codes/E0106.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -6,8 +6,8 @@ LL |     x: &bool,\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Foo<'a> {\n-LL |     x: &'a bool,\n+LL ~ struct Foo<'a> {\n+LL ~     x: &'a bool,\n    |\n \n error[E0106]: missing lifetime specifier\n@@ -18,9 +18,9 @@ LL |     B(&bool),\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | enum Bar<'a> {\n+LL ~ enum Bar<'a> {\n LL |     A(u8),\n-LL |     B(&'a bool),\n+LL ~     B(&'a bool),\n    |\n \n error[E0106]: missing lifetime specifier\n@@ -31,8 +31,8 @@ LL |     baz: Baz,\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Quux<'a> {\n-LL |     baz: Baz<'a>,\n+LL ~ struct Quux<'a> {\n+LL ~     baz: Baz<'a>,\n    |\n \n error[E0106]: missing lifetime specifiers\n@@ -43,11 +43,11 @@ LL |     buzz: Buzz,\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Quux<'a> {\n+LL ~ struct Quux<'a> {\n LL |     baz: Baz,\n LL |\n LL |\n-LL |     buzz: Buzz<'a, 'a>,\n+LL ~     buzz: Buzz<'a, 'a>,\n    |\n \n error[E0106]: missing lifetime specifier\n@@ -59,7 +59,7 @@ LL | type MyStr = &str;\n help: consider introducing a named lifetime parameter\n    |\n LL | type MyStr<'a> = &'a str;\n-   |           ^^^^   ^^^\n+   |           ++++   ~~~\n \n error: aborting due to 5 previous errors\n "}, {"sha": "c90f85df967413b9ffbeae9e271d320ade216124", "filename": "src/test/ui/error-codes/E0107.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL | struct Buzz<'a, 'b>(&'a str, &'b str);\n help: add missing lifetime argument\n    |\n LL |     buzz: Buzz<'a, 'a>,\n-   |                  ^^^^\n+   |                  ++++\n \n error[E0107]: this enum takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/E0107.rs:17:10"}, {"sha": "86966d520e7e2653c3ada4bc53132161b90edf5c", "filename": "src/test/ui/error-codes/E0221.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -13,11 +13,11 @@ LL |         let _: Self::A;\n help: use fully qualified syntax to disambiguate\n    |\n LL |         let _: <Self as Foo>::A;\n-   |                ^^^^^^^^^^^^^^^^\n+   |                ~~~~~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL |         let _: <Self as Bar>::A;\n-   |                ^^^^^^^^^^^^^^^^\n+   |                ~~~~~~~~~~~~~~~~\n \n error[E0221]: ambiguous associated type `Err` in bounds of `Self`\n   --> $DIR/E0221.rs:21:16"}, {"sha": "2722dfe5e0543fac0b694d9936b1a041cf543e64", "filename": "src/test/ui/error-codes/E0252.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0252.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL | use bar::baz;\n help: you can use `as` to change the binding name of the import\n    |\n LL | use bar::baz as other_baz;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "b098f8e1a7f49bb46f2749affb1d1ebe8a154243", "filename": "src/test/ui/error-codes/E0254.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0254.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL | use foo::alloc;\n help: you can use `as` to change the binding name of the import\n    |\n LL | use foo::alloc as other_alloc;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "b5c09499276b19518b5bd349c93f53b3e591d2bc", "filename": "src/test/ui/error-codes/E0255.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL | fn foo() {}\n help: you can use `as` to change the binding name of the import\n    |\n LL | use bar::foo as other_foo;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "2c2dcbdd0dc4a28b05a6f1cfc6f10e1c76468258", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL | fn f(p: Path) { }\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | fn f(p: &Path) { }\n-   |         ^\n+   |         +\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/E0277.rs:15:15"}, {"sha": "5f251527e7716a06ff763e1c4b83a079b161a8db", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n help: surround the struct literal with parentheses\n    |\n LL |     if let S { x: _x, y: 2 } = (S { x: 1, y: 2 }) { println!(\"Ok\"); }\n-   |                                ^                ^\n+   |                                +                +\n \n error: expected expression, found `==`\n   --> $DIR/E0423.rs:14:13\n@@ -24,7 +24,7 @@ LL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n help: surround the struct literal with parentheses\n    |\n LL |     for _ in (std::ops::Range { start: 0, end: 10 }) {}\n-   |              ^                                     ^\n+   |              +                                     +\n \n error[E0423]: expected function, tuple struct or tuple variant, found struct `Foo`\n   --> $DIR/E0423.rs:4:13\n@@ -41,11 +41,11 @@ LL | fn foo() {\n help: use struct literal syntax instead\n    |\n LL |     let f = Foo { a: val };\n-   |             ^^^^^^^^^^^^^^\n+   |             ~~~~~~~~~~~~~~\n help: a function with a similar name exists\n    |\n LL |     let f = foo();\n-   |             ^^^\n+   |             ~~~\n \n error[E0423]: expected value, found struct `T`\n   --> $DIR/E0423.rs:14:8\n@@ -56,7 +56,7 @@ LL |     if T {} == T {} { println!(\"Ok\"); }\n help: surround the struct literal with parentheses\n    |\n LL |     if (T {}) == T {} { println!(\"Ok\"); }\n-   |        ^    ^\n+   |        +    +\n \n error: aborting due to 5 previous errors\n "}, {"sha": "d02da3e4ecb8a78cd1305bd3f716c9827926b8aa", "filename": "src/test/ui/error-codes/E0424.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -9,7 +9,7 @@ LL |         self.bar();\n help: add a `self` receiver parameter to make the associated `fn` a method\n    |\n LL |     fn foo(&self) {\n-   |            ^^^^^\n+   |            +++++\n \n error[E0424]: expected value, found module `self`\n   --> $DIR/E0424.rs:11:9\n@@ -22,7 +22,7 @@ LL |         self.bar();\n help: add a `self` receiver parameter to make the associated `fn` a method\n    |\n LL |     fn baz(&self, _: i32) {\n-   |            ^^^^^^\n+   |            ++++++\n \n error[E0424]: expected value, found module `self`\n   --> $DIR/E0424.rs:15:20\n@@ -35,7 +35,7 @@ LL |         let _ = || self.bar();\n help: add a `self` receiver parameter to make the associated `fn` a method\n    |\n LL |     fn qux(&self) {\n-   |            ^^^^^\n+   |            +++++\n \n error[E0424]: expected unit struct, unit variant or constant, found module `self`\n   --> $DIR/E0424.rs:20:9"}, {"sha": "0b786ab1e2fe05cc8717ee888d792f0642c4596c", "filename": "src/test/ui/error-codes/E0429.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0429.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0429.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0429.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -6,12 +6,13 @@ LL | use std::fmt::self;\n    |\n help: consider importing the module directly\n    |\n-LL | use std::fmt;\n-   |            --\n+LL - use std::fmt::self;\n+LL + use std::fmt;\n+   | \n help: alternatively, use the multi-path `use` syntax to import `self`\n    |\n LL | use std::fmt::{self};\n-   |               ^    ^\n+   |               +    +\n \n error: aborting due to previous error\n "}, {"sha": "e5647ee6d09684027667ec20adfb8c803a2cfe13", "filename": "src/test/ui/error-codes/E0605.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -13,7 +13,7 @@ LL |     v as &u8;\n help: consider borrowing the value\n    |\n LL |     &*v as &u8;\n-   |     ^^\n+   |     ++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c12e1a3a643612af11fbbb9e19377928497e3a80", "filename": "src/test/ui/error-codes/E0615.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0615.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0615.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0615.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     f.method;\n help: use parentheses to call the method\n    |\n LL |     f.method();\n-   |             ^^\n+   |             ++\n \n error: aborting due to previous error\n "}, {"sha": "ea91ad08292301c9e16f469982523873785fbeb6", "filename": "src/test/ui/error-codes/E0617.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0617.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0617.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0617.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -37,7 +37,7 @@ LL |         printf(::std::ptr::null(), printf);\n help: cast the value to `unsafe extern \"C\" fn(*const i8, ...)`\n    |\n LL |         printf(::std::ptr::null(), printf as unsafe extern \"C\" fn(*const i8, ...));\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 6 previous errors\n "}, {"sha": "19a1a8e20ccfa8c925b79042f4b46b80403db36a", "filename": "src/test/ui/error-codes/E0618.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     X::Entry();\n help: `X::Entry` is a unit variant, you need to write it without the parenthesis\n    |\n LL |     X::Entry;\n-   |     ^^^^^^^^\n+   |     ~~~~~~~~\n \n error[E0618]: expected function, found `i32`\n   --> $DIR/E0618.rs:9:5"}, {"sha": "dd9e28ad49277336d4f6be276b602f6f6832ce5d", "filename": "src/test/ui/error-codes/E0642.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0642.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     fn foo((x, y): (i32, i32));\n help: give this argument a name or use an underscore to ignore it\n    |\n LL |     fn foo(_: (i32, i32));\n-   |            ^\n+   |            ~\n \n error[E0642]: patterns aren't allowed in methods without bodies\n   --> $DIR/E0642.rs:11:12\n@@ -18,7 +18,7 @@ LL |     fn bar((x, y): (i32, i32)) {}\n help: give this argument a name or use an underscore to ignore it\n    |\n LL |     fn bar(_: (i32, i32)) {}\n-   |            ^\n+   |            ~\n \n error[E0642]: patterns aren't allowed in methods without bodies\n   --> $DIR/E0642.rs:13:15\n@@ -29,7 +29,7 @@ LL |     fn method(S { .. }: S) {}\n help: give this argument a name or use an underscore to ignore it\n    |\n LL |     fn method(_: S) {}\n-   |               ^\n+   |               ~\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2153b59ad18ddd5c0e5f402d0069c8cc5a0e0077", "filename": "src/test/ui/error-codes/E0746.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -8,7 +8,7 @@ LL | fn foo() -> dyn Trait { Struct }\n help: use `impl Trait` as the return type, as all return paths are of type `Struct`, which implements `Trait`\n    |\n LL | fn foo() -> impl Trait { Struct }\n-   |             ^^^^^^^^^^\n+   |             ~~~~~~~~~~\n \n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/E0746.rs:11:13\n@@ -20,7 +20,7 @@ LL | fn bar() -> dyn Trait {\n help: use `impl Trait` as the return type, as all return paths are of type `{integer}`, which implements `Trait`\n    |\n LL | fn bar() -> impl Trait {\n-   |             ^^^^^^^^^^\n+   |             ~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "319371720710c9aa97b75f433845308c145c2785", "filename": "src/test/ui/expr/if/if-no-match-bindings.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-no-match-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-no-match-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-no-match-bindings.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     if b_ref() {}\n help: consider dereferencing the borrow\n    |\n LL |     if *b_ref() {}\n-   |        ^\n+   |        +\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:19:8\n@@ -18,7 +18,7 @@ LL |     if b_mut_ref() {}\n help: consider dereferencing the borrow\n    |\n LL |     if *b_mut_ref() {}\n-   |        ^\n+   |        +\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:20:8\n@@ -28,8 +28,9 @@ LL |     if &true {}\n    |\n help: consider removing the borrow\n    |\n-LL |     if true {}\n-   |       --\n+LL -     if &true {}\n+LL +     if true {}\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:21:8\n@@ -39,8 +40,9 @@ LL |     if &mut true {}\n    |\n help: consider removing the borrow\n    |\n-LL |     if true {}\n-   |       --\n+LL -     if &mut true {}\n+LL +     if true {}\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:24:11\n@@ -51,7 +53,7 @@ LL |     while b_ref() {}\n help: consider dereferencing the borrow\n    |\n LL |     while *b_ref() {}\n-   |           ^\n+   |           +\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:25:11\n@@ -62,7 +64,7 @@ LL |     while b_mut_ref() {}\n help: consider dereferencing the borrow\n    |\n LL |     while *b_mut_ref() {}\n-   |           ^\n+   |           +\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:26:11\n@@ -72,8 +74,9 @@ LL |     while &true {}\n    |\n help: consider removing the borrow\n    |\n-LL |     while true {}\n-   |          --\n+LL -     while &true {}\n+LL +     while true {}\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:27:11\n@@ -83,8 +86,9 @@ LL |     while &mut true {}\n    |\n help: consider removing the borrow\n    |\n-LL |     while true {}\n-   |          --\n+LL -     while &mut true {}\n+LL +     while true {}\n+   | \n \n error: aborting due to 8 previous errors\n "}, {"sha": "5f14779552110a3595fbd84b92617c0d6909856d", "filename": "src/test/ui/extern/extern-crate-rename.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fextern%2Fextern-crate-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fextern%2Fextern-crate-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-crate-rename.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL | extern crate m2 as m1;\n help: you can use `as` to change the binding name of the import\n    |\n LL | extern crate m2 as other_m1;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "44c0ae49ea6d68624cca9d7b85c097020e8aab98", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL |     assert_sized::<A>();\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn assert_sized<T: ?Sized>() {}\n-   |                  ^^^^^^^^\n+   |                  ++++++++\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:25:5\n@@ -31,7 +31,7 @@ LL | struct Foo {\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn assert_sized<T: ?Sized>() {}\n-   |                  ^^^^^^^^\n+   |                  ++++++++\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:28:5\n@@ -51,7 +51,7 @@ LL | struct Bar<T: ?Sized> {\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn assert_sized<T: ?Sized>() {}\n-   |                  ^^^^^^^^\n+   |                  ++++++++\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:31:5\n@@ -76,7 +76,7 @@ LL | struct Bar<T: ?Sized> {\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn assert_sized<T: ?Sized>() {}\n-   |                  ^^^^^^^^\n+   |                  ++++++++\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8f5ba07bdaa9c12f03b41649b541868737b6be87", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -147,7 +147,7 @@ LL | pub trait Copy: Clone {\n help: consider further restricting the associated type\n    |\n LL | trait _Tr3 where <<Self as _Tr3>::A as Iterator>::Item: Copy {\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            +++++++++++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to 17 previous errors\n "}, {"sha": "c5ffa55ebec6f64985bca63f2e7ac730f6ced3c5", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -15,7 +15,7 @@ LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let Ok(_x) = foo() { /* */ }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "318fb63d3827a10c9817908877f75cf5b2c8b18d", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -70,7 +70,7 @@ LL |     type Pointer2<U32> = Box<U32>;\n help: consider restricting type parameter `U32`\n    |\n LL |     type Pointer2<U32: std::clone::Clone> = Box<U32>;\n-   |                      ^^^^^^^^^^^^^^^^^^^\n+   |                      +++++++++++++++++++\n \n error: aborting due to 8 previous errors\n "}, {"sha": "20e61303e36aafe41b64d7772c5f3a3c8cc89b01", "filename": "src/test/ui/feature-gates/feature-gate-in_band_lifetimes.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -28,11 +28,11 @@ LL |     fn my_lifetime(&self) -> &'a u8 { self.0 }\n help: consider introducing lifetime `'a` here\n    |\n LL | impl<'a> MyTrait<'a> for Y<&'a u8> {\n-   |     ^^^^\n+   |     ++++\n help: consider introducing lifetime `'a` here\n    |\n LL |     fn my_lifetime<'a>(&self) -> &'a u8 { self.0 }\n-   |                   ^^^^\n+   |                   ++++\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:55:27\n@@ -44,11 +44,11 @@ LL |     fn any_lifetime() -> &'b u8 { &0 }\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n-   |     ^^^^\n+   |     ++++\n help: consider introducing lifetime `'b` here\n    |\n LL |     fn any_lifetime<'b>() -> &'b u8 { &0 }\n-   |                    ^^^^\n+   |                    ++++\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:57:27\n@@ -60,11 +60,11 @@ LL |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n-   |     ^^^^\n+   |     ++++\n help: consider introducing lifetime `'b` here\n    |\n LL |     fn borrowed_lifetime<'b>(&'b self) -> &'b u8 { &*self.0 }\n-   |                         ^^^^\n+   |                         ++++\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:57:40\n@@ -76,11 +76,11 @@ LL |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n-   |     ^^^^\n+   |     ++++\n help: consider introducing lifetime `'b` here\n    |\n LL |     fn borrowed_lifetime<'b>(&'b self) -> &'b u8 { &*self.0 }\n-   |                         ^^^^\n+   |                         ++++\n \n error[E0261]: use of undeclared lifetime name `'x`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:3:12\n@@ -120,11 +120,11 @@ LL |     fn inner_2(&self) -> &'b u8 {\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b, 'a> X<'b> {\n-   |      ^^^\n+   |      +++\n help: consider introducing lifetime `'b` here\n    |\n LL |     fn inner_2<'b>(&self) -> &'b u8 {\n-   |               ^^^^\n+   |               ++++\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:23:8\n@@ -146,11 +146,11 @@ LL |     fn inner_3(&self) -> &'b u8 {\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b> X<'b> {\n-   |     ^^^^\n+   |     ++++\n help: consider introducing lifetime `'b` here\n    |\n LL |     fn inner_3<'b>(&self) -> &'b u8 {\n-   |               ^^^^\n+   |               ++++\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:33:9\n@@ -172,11 +172,11 @@ LL |     fn inner(&self) -> &'a u8 {\n help: consider introducing lifetime `'a` here\n    |\n LL | impl<'a> Y<&'a u8> {\n-   |     ^^^^\n+   |     ++++\n help: consider introducing lifetime `'a` here\n    |\n LL |     fn inner<'a>(&self) -> &'a u8 {\n-   |             ^^^^\n+   |             ++++\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:43:27\n@@ -188,11 +188,11 @@ LL |     fn any_lifetime() -> &'b u8;\n help: consider introducing lifetime `'b` here\n    |\n LL | trait MyTrait<'b, 'a> {\n-   |               ^^^\n+   |               +++\n help: consider introducing lifetime `'b` here\n    |\n LL |     fn any_lifetime<'b>() -> &'b u8;\n-   |                    ^^^^\n+   |                    ++++\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:45:27\n@@ -204,11 +204,11 @@ LL |     fn borrowed_lifetime(&'b self) -> &'b u8;\n help: consider introducing lifetime `'b` here\n    |\n LL | trait MyTrait<'b, 'a> {\n-   |               ^^^\n+   |               +++\n help: consider introducing lifetime `'b` here\n    |\n LL |     fn borrowed_lifetime<'b>(&'b self) -> &'b u8;\n-   |                         ^^^^\n+   |                         ++++\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:45:40\n@@ -220,11 +220,11 @@ LL |     fn borrowed_lifetime(&'b self) -> &'b u8;\n help: consider introducing lifetime `'b` here\n    |\n LL | trait MyTrait<'b, 'a> {\n-   |               ^^^\n+   |               +++\n help: consider introducing lifetime `'b` here\n    |\n LL |     fn borrowed_lifetime<'b>(&'b self) -> &'b u8;\n-   |                         ^^^^\n+   |                         ++++\n \n error: aborting due to 17 previous errors\n "}, {"sha": "a3bd65e518e4ced281311b20597432e9f9daadbe", "filename": "src/test/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -28,11 +28,11 @@ LL |     fn static_fn() {}\n help: consider turning `static_fn` into a method by giving it a `&self` argument\n    |\n LL |     fn static_fn(&self) {}\n-   |                  ^^^^^\n+   |                  +++++\n help: alternatively, consider constraining `static_fn` so it does not apply to trait objects\n    |\n LL |     fn static_fn() where Self: Sized {}\n-   |                    ^^^^^^^^^^^^^^^^^\n+   |                    +++++++++++++++++\n \n error[E0038]: the trait `NonObjectSafe3` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:27:39"}, {"sha": "fbb18c8c4909705c058429ac44f851f9bcfd99e5", "filename": "src/test/ui/feature-gates/feature-gate-unsized_fn_params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -9,7 +9,7 @@ LL | fn foo(x: dyn Foo) {\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | fn foo(x: &dyn Foo) {\n-   |           ^\n+   |           +\n \n error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n   --> $DIR/feature-gate-unsized_fn_params.rs:24:5"}, {"sha": "c4507843e366e06896824d284114ac97951075ed", "filename": "src/test/ui/feature-gates/feature-gate-unsized_locals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -9,7 +9,7 @@ LL | fn f(f: dyn FnOnce()) {}\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | fn f(f: &dyn FnOnce()) {}\n-   |         ^\n+   |         +\n \n error: aborting due to previous error\n "}, {"sha": "c0d2df3753d2ca7756724dedf6b32425eeb20c47", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-macro_use.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-macro_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-macro_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-macro_use.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -25,9 +25,9 @@ LL |     #[macro_use = \"2700\"] struct S;\n help: the following are the possible correct uses\n    |\n LL |     #[macro_use] struct S;\n-   |     ^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~\n LL |     #[macro_use(name1, name2, ...)] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "263b5e594e10cc0130dc7a3d30a5d4e90317ae87", "filename": "src/test/ui/float-literal-inference-restrictions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -19,7 +19,7 @@ LL |     let y: f32 = 1f64;\n help: change the type of the numeric literal from `f64` to `f32`\n    |\n LL |     let y: f32 = 1f32;\n-   |                  ^^^^\n+   |                  ~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "854abb90638c87338b5436dee22849988922c85a", "filename": "src/test/ui/fmt/ifmt-bad-format-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-format-args.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -15,7 +15,7 @@ LL |     format_args!(|| {});\n help: you might be missing a string literal to format with\n    |\n LL |     format_args!(\"{}\", || {});\n-   |                  ^^^^^\n+   |                  +++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "585f556abc8b538d31e0b011427527082fd15500", "filename": "src/test/ui/fn/fn-compare-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -9,11 +9,11 @@ LL |     let x = f == g;\n help: you might have forgotten to call this function\n    |\n LL |     let x = f() == g;\n-   |             ^^^\n+   |             ~~~\n help: you might have forgotten to call this function\n    |\n LL |     let x = f == g();\n-   |                  ^^^\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/fn-compare-mismatch.rs:4:18"}, {"sha": "b174766cd3d0c166ef49989a87bea1b502a74217", "filename": "src/test/ui/foreign-fn-return-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -8,7 +8,7 @@ LL |     pub fn f() -> &u8;\n help: consider using the `'static` lifetime\n    |\n LL |     pub fn f() -> &'static u8;\n-   |                   ^^^^^^^^\n+   |                   ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "957ae5d2932402f65f85cb7505955d5ee96e7c73", "filename": "src/test/ui/generic-associated-types/constraint-assoc-type-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL |     let b: Vec<i32> = a;\n help: consider constraining the associated type `<T as X>::Y<i32>` to `Vec<i32>`\n    |\n LL | fn f<T: X<Y<i32> = Vec<i32>>>(a: T::Y<i32>) {\n-   |          ^^^^^^^^^^^^^^^^^^^\n+   |          +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "1594747e54ce9bcae9f49a0539e91e7a4263bd4e", "filename": "src/test/ui/generic-associated-types/gat-trait-path-generic-type-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -15,7 +15,7 @@ LL |     type F<T1> = &[u8];\n help: consider introducing a named lifetime parameter\n    |\n LL |     type F<'a, T1> = &'a [u8];\n-   |            ^^^       ^^^\n+   |            +++       ~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "aeb9238de81f4ebacc47f819f7eb06e8615e4d4e", "filename": "src/test/ui/generic-associated-types/gat-trait-path-missing-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |   type Y<'a>;\n help: add missing lifetime argument\n    |\n LL |   fn foo<'a, T1: X<Y<'a> = T1>>(t : T1) -> T1::Y<'a> {\n-   |                    ^^^^^\n+   |                    ~~~~~\n \n error[E0107]: missing generics for associated type `X::Y`\n   --> $DIR/gat-trait-path-missing-lifetime.rs:10:20\n@@ -28,7 +28,7 @@ LL |   type Y<'a>;\n help: add missing lifetime argument\n    |\n LL |   fn foo<'a, T1: X<Y<'a> = T1>>(t : T1) -> T1::Y<'a> {\n-   |                    ^^^^^\n+   |                    ~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d557802bbd941d930f2d468d4e622d4d2de629ec", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -34,7 +34,7 @@ LL |   type Y<'a>;\n help: add missing lifetime argument\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a, 'a) = &'a ()>>) {}\n-   |                             ^^^\n+   |                             +++\n \n error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/gat-trait-path-parenthesised-args.rs:7:27"}, {"sha": "99a601003c13f29f35f72d9e7a5b2f670c1139bc", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -8,7 +8,7 @@ LL |     type Assoc2<T> = Vec<T>;\n help: consider restricting type parameter `T`\n    |\n LL |     type Assoc2<T: std::fmt::Display> = Vec<T>;\n-   |                  ^^^^^^^^^^^^^^^^^^^\n+   |                  +++++++++++++++++++\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/generic-associated-types-where.rs:22:5"}, {"sha": "adbd47ac16f45862e992dee98e491b1f31546a94", "filename": "src/test/ui/generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -8,11 +8,11 @@ LL |         + Deref<Target = Self::Item<'b>>;\n help: consider introducing lifetime `'b` here\n    |\n LL | trait Iterable<'b> {\n-   |               ^^^^\n+   |               ++++\n help: consider introducing lifetime `'b` here\n    |\n LL |     type Iter<'b, 'a>: Iterator<Item = Self::Item<'a>>\n-   |               ^^^\n+   |               +++\n \n error[E0261]: use of undeclared lifetime name `'undeclared`\n   --> $DIR/generic_associated_type_undeclared_lifetimes.rs:11:41\n@@ -24,11 +24,11 @@ LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n help: consider introducing lifetime `'undeclared` here\n    |\n LL | trait Iterable<'undeclared> {\n-   |               ^^^^^^^^^^^^^\n+   |               +++++++++++++\n help: consider introducing lifetime `'undeclared` here\n    |\n LL |     fn iter<'undeclared, 'a>(&'a self) -> Self::Iter<'undeclared>;\n-   |             ^^^^^^^^^^^^\n+   |             ++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8cf923ca3ac0c4f0763029fc2da03b6f43ccd9ce", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -64,7 +64,7 @@ LL |     type C where Self: Clone;\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n-   |       ^^^^^^^^^^^^^^^^^^^\n+   |       +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/impl_bounds.rs:22:5\n@@ -89,7 +89,7 @@ LL |     fn d() where Self: Clone;\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n-   |       ^^^^^^^^^^^^^^^^^^^\n+   |       +++++++++++++++++++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "c341338390c3dd5fad7a5e093bbb2ccfdee3e3ea", "filename": "src/test/ui/generic-associated-types/issue-68641-check-gat-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     type Item<'a> = T;\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> UnsafeCopy for T {\n-   |       ^^^^^^^^^^^^^^^^^^^\n+   |       +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "2861aee3aafac05d3743c8e2ac187a01791e5f4e", "filename": "src/test/ui/generic-associated-types/issue-68642-broken-llvm-ir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL |     type F<'a> = Self;\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::Fn<()>> Fun for T {\n-   |       ^^^^^^^^^^^^^^^^^^\n+   |       ++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "2eaeffba0893ff4b8095e56eed312b7ffded6a0d", "filename": "src/test/ui/generic-associated-types/issue-68643-broken-mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL |     type F<'a> = Self;\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::Fn<()>> Fun for T {\n-   |       ^^^^^^^^^^^^^^^^^^\n+   |       ++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "7c56ded01bf98f770a48336fb422e40ef40162d0", "filename": "src/test/ui/generic-associated-types/issue-68644-codegen-selection.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL |     type F<'a> = Self;\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::Fn<()>> Fun for T {\n-   |       ^^^^^^^^^^^^^^^^^^\n+   |       ++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "6662a2b35da75545f60faf77198eba4a35186ded", "filename": "src/test/ui/generic-associated-types/issue-68645-codegen-fulfillment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL |     type F<'a> = Self;\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::Fn<()>> Fun for T {\n-   |       ^^^^^^^^^^^^^^^^^^\n+   |       ++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "422805a0d0b8c6f6cf37b7c046cf04ba8e5285a5", "filename": "src/test/ui/generic-associated-types/issue-68656-unsized-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL |     type Item<'a> = T;\n help: consider further restricting this bound\n    |\n LL | impl<T: Copy + std::ops::Deref + Deref<Target = T>> UnsafeCopy<T> for T {\n-   |                                ^^^^^^^^^^^^^^^^^^^\n+   |                                +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "c53dbf63a3c5b98c2891a316cfa2462159fe79ef", "filename": "src/test/ui/generic-associated-types/issue-70304.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -8,7 +8,7 @@ LL | fn create_doc() -> impl Document<Cursor<'_> = DocCursorImpl<'_>> {\n help: consider using the `'static` lifetime\n    |\n LL | fn create_doc() -> impl Document<Cursor<'static> = DocCursorImpl<'_>> {\n-   |                                         ^^^^^^^\n+   |                                         ~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "08c8d41624e2797e6e0f2164be69cb920d402809", "filename": "src/test/ui/generic-associated-types/issue-71176.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     type A<'a>;\n help: add missing lifetime argument\n    |\n LL |   inner: Box<dyn Provider<A<'a> = B>>,\n-   |                           ^^^^^\n+   |                           ~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "c910261ca52a0ff410352c3ca451a1bdf6ab26ba", "filename": "src/test/ui/generic-associated-types/issue-74816.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     type Associated: Trait1 = Self;\n help: consider further restricting `Self`\n    |\n LL | trait Trait2: Trait1 {\n-   |             ^^^^^^^^\n+   |             ++++++++\n \n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/issue-74816.rs:9:5\n@@ -24,7 +24,7 @@ LL |     type Associated: Trait1 = Self;\n help: consider further restricting `Self`\n    |\n LL | trait Trait2: Sized {\n-   |             ^^^^^^^\n+   |             +++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "aef44a164a98cd35232b1e8c39b71c848dcbb8d2", "filename": "src/test/ui/generic-associated-types/issue-74824.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -20,7 +20,7 @@ LL |     type Copy<T>: Copy = Box<T>;\n help: consider restricting type parameter `T`\n    |\n LL |     type Copy<T: std::clone::Clone>: Copy = Box<T>;\n-   |                ^^^^^^^^^^^^^^^^^^^\n+   |                +++++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "246454f0612dbb76e22ae60bcde1171b89f31037", "filename": "src/test/ui/generic-associated-types/issue-76535.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     type SubType<'a>: SubTrait;\n help: add missing lifetime argument\n    |\n LL |     let sub: Box<dyn SuperTrait<SubType<'a> = SubStruct>> = Box::new(SuperStruct::new(0));\n-   |                                 ^^^^^^^^^^^\n+   |                                 ~~~~~~~~~~~\n \n error[E0038]: the trait `SuperTrait` cannot be made into an object\n   --> $DIR/issue-76535.rs:36:14"}, {"sha": "8ff6cb569b06093da77a905aa01fc9102601aa90", "filename": "src/test/ui/generic-associated-types/issue-78113-lifetime-mismatch-dyn-trait-box.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -23,7 +23,7 @@ LL | impl A for Box<dyn A> {}\n help: consider relaxing the implicit `'static` requirement\n    |\n LL | impl A for Box<dyn A + '_> {}\n-   |                      ^^^^\n+   |                      ++++\n \n error: incompatible lifetime on type\n   --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:27:5\n@@ -77,11 +77,11 @@ LL | impl E for (Box<dyn A>, Box<dyn A>) {}\n help: consider relaxing the implicit `'static` requirement\n    |\n LL | impl E for (Box<dyn A + '_>, Box<dyn A>) {}\n-   |                       ^^^^\n+   |                       ++++\n help: consider relaxing the implicit `'static` requirement\n    |\n LL | impl E for (Box<dyn A>, Box<dyn A + '_>) {}\n-   |                                   ^^^^\n+   |                                   ++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b92730839568d47ea5543cf33aefb71a16e59bd0", "filename": "src/test/ui/generic-associated-types/issue-78671.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     type Member<T>;\n help: add missing generic argument\n    |\n LL |     Box::new(Family) as &dyn CollectionFamily<Member<T>=usize>\n-   |                                               ^^^^^^^^^\n+   |                                               ~~~~~~~~~\n \n error[E0038]: the trait `CollectionFamily` cannot be made into an object\n   --> $DIR/issue-78671.rs:7:25"}, {"sha": "8d8ef6bf836854602bd1ca900d411280b70c4c85", "filename": "src/test/ui/generic-associated-types/issue-79422.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     type VRefCont<'a>: RefCont<'a, V>;\n help: add missing lifetime argument\n    |\n LL |         as Box<dyn MapLike<u8, u8, VRefCont<'a> = dyn RefCont<'_, u8>>>;\n-   |                                    ^^^^^^^^^^^^\n+   |                                    ~~~~~~~~~~~~\n \n error[E0038]: the trait `MapLike` cannot be made into an object\n   --> $DIR/issue-79422.rs:42:12"}, {"sha": "1ecb862827fd74898fc7540bb9b62974cec1f038", "filename": "src/test/ui/generic-associated-types/issue-79636-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     type Wrapped<B>;\n help: add missing generic argument\n    |\n LL |     MInner: Monad<Unwrapped = A, Wrapped<B> = MOuter::Wrapped<A>>,\n-   |                                  ^^^^^^^^^^\n+   |                                  ~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "ae61b7b104e87352daec1b570ae5680d3ddbf98b", "filename": "src/test/ui/generic-associated-types/issue-79636-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     type Wrapped<A>: SomeTrait;\n help: add missing generic argument\n    |\n LL |     W: SomeTrait<Wrapped<A> = W>,\n-   |                  ^^^^^^^^^^\n+   |                  ~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "d8c210dcf7e98d3e05beb87263c7689139bc036b", "filename": "src/test/ui/generic-associated-types/issue-80433.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     type Output<'a>;\n help: add missing lifetime argument\n    |\n LL | fn test_simpler<'a>(dst: &'a mut impl TestMut<Output<'a> = &'a mut f32>)\n-   |                                               ^^^^^^^^^^\n+   |                                               ~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "86c99c32fc1ab5914f18ee08dc26b833c362bf32", "filename": "src/test/ui/generic-associated-types/issue-81712-cyclic-traits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     type DType<T>: D<T, CType = Self>;\n help: add missing generic argument\n    |\n LL |     type CType: C<DType<T> = Self>;\n-   |                   ^^^^^^^^\n+   |                   ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "024f8ad89f757a2aae385540a36d5dad17d99134", "filename": "src/test/ui/generic-associated-types/issue-81862.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     type Item<'a>;\n help: add missing lifetime argument\n    |\n LL |     fn next(&mut self) -> Option<Self::Item<'_>>;\n-   |                                        ^^^^^^^^\n+   |                                        ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "4d33fe84829e0c6f42c25796741b61cc7f4bc570", "filename": "src/test/ui/generic-associated-types/missing-bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |         A(self.0 + rhs.0)\n help: consider further restricting this bound\n    |\n LL | impl<B> Add for A<B> where B: Add + Add<Output = B> {\n-   |                                   ^^^^^^^^^^^^^^^^^\n+   |                                   +++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/missing-bounds.rs:21:14\n@@ -28,7 +28,7 @@ LL |         Self(self.0 + rhs.0)\n help: consider further restricting this bound\n    |\n LL | impl<B: Add + Add<Output = B>> Add for C<B> {\n-   |             ^^^^^^^^^^^^^^^^^\n+   |             +++++++++++++++++\n \n error[E0369]: cannot add `B` to `B`\n   --> $DIR/missing-bounds.rs:31:21\n@@ -41,7 +41,7 @@ LL |         Self(self.0 + rhs.0)\n help: consider restricting type parameter `B`\n    |\n LL | impl<B: std::ops::Add<Output = B>> Add for D<B> {\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |       +++++++++++++++++++++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7cf3f4b737e0e848b4c68f9f2915e4726417c1bd", "filename": "src/test/ui/generic-associated-types/missing_lifetime_args.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     type Y<'a, 'b>;\n help: add missing lifetime arguments\n    |\n LL | fn foo<'c, 'd>(_arg: Box<dyn X<Y<'c, 'd> = (&'c u32, &'d u32)>>) {}\n-   |                                ^^^^^^^^^\n+   |                                ~~~~~~~~~\n \n error[E0107]: this struct takes 3 lifetime arguments but 2 lifetime arguments were supplied\n   --> $DIR/missing_lifetime_args.rs:16:26\n@@ -30,7 +30,7 @@ LL | struct Foo<'a, 'b, 'c> {\n help: add missing lifetime argument\n    |\n LL | fn bar<'a, 'b, 'c>(_arg: Foo<'a, 'b, 'a>) {}\n-   |                                    ^^^^\n+   |                                    ++++\n \n error[E0107]: this struct takes 3 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing_lifetime_args.rs:19:16\n@@ -48,7 +48,7 @@ LL | struct Foo<'a, 'b, 'c> {\n help: add missing lifetime arguments\n    |\n LL | fn f<'a>(_arg: Foo<'a, 'b, 'c>) {}\n-   |                      ^^^^^^^^\n+   |                      ++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5d50637bd0131a9ef0a9ee4a0507f96c255e73f0", "filename": "src/test/ui/generic-associated-types/missing_lifetime_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     type Assoc<'a, const N: usize>;\n help: add missing lifetime argument\n    |\n LL |     let _: <T as Foo>::Assoc<'a, 3>;\n-   |                              ^^^\n+   |                              +++\n \n error: aborting due to previous error\n "}, {"sha": "53d76fd2201222df1ec2f6251cd8c4c1b821dd6b", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -26,7 +26,7 @@ LL |     type E<'a, T>;\n help: add missing generic argument\n    |\n LL |     type FErr1 = Self::E<'static, 'static, T>;\n-   |                                          ^^^\n+   |                                          +++\n \n error[E0107]: this associated type takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/parameter_number_and_kind.rs:15:27"}, {"sha": "3ace774a041c7904931948e248ab45fe0aeb80c2", "filename": "src/test/ui/generic-associated-types/parse/trait-path-missing-gen_arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |   fn f1<'a>(arg : Box<dyn X< : 32 >>) {}\n help: expressions must be enclosed in braces to be used as const generic arguments\n    |\n LL |   fn f1<'a>(arg : Box<{ dyn X< : 32 } >>) {}\n-   |                       ^             ^\n+   |                       +             +\n \n error: expected parameter name, found `>`\n   --> $DIR/trait-path-missing-gen_arg.rs:8:36"}, {"sha": "46ddcb635187779fad2f301c5d9df3e1d172fa33", "filename": "src/test/ui/generic-associated-types/parse/trait-path-type-error-once-implemented.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     type Y<'a>;\n help: add missing lifetime argument\n    |\n LL |   fn f2<'a>(arg : Box<dyn X<Y<'a, 1> = &'a ()>>) {}\n-   |                               ^^^\n+   |                               +++\n \n error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/trait-path-type-error-once-implemented.rs:8:29"}, {"sha": "909848604ec8a5048fad45f055cf8c20ac393d6c", "filename": "src/test/ui/generics/generic-extern-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL |     pub fn life4<'b>(x: for<'c> fn(&'a i32));\n help: consider making the type lifetime-generic with a new `'a` lifetime\n    |\n LL |     pub fn life4<'b>(x: for<'c, 'a> fn(&'a i32));\n-   |                               ^^^^\n+   |                               ++++\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/generic-extern-lifetime.rs:11:39\n@@ -26,7 +26,7 @@ LL |     pub fn life7<'b>() -> for<'c> fn(&'a i32);\n help: consider making the type lifetime-generic with a new `'a` lifetime\n    |\n LL |     pub fn life7<'b>() -> for<'c, 'a> fn(&'a i32);\n-   |                                 ^^^^\n+   |                                 ++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "cdbb57902e4a7d94084593aba3e6386038a6609e", "filename": "src/test/ui/generics/generic-impl-less-params-with-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL | struct Foo<A, B, C = (A, B)>(\n help: add missing generic argument\n    |\n LL |     Foo::<isize, B>::new();\n-   |                ^^^\n+   |                +++\n \n error: aborting due to previous error\n "}, {"sha": "e45a0d9ca77377008377824823a370d8c7d909fe", "filename": "src/test/ui/generics/generic-type-less-params-with-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL | struct Vec<T, A = Heap>(\n help: add missing generic argument\n    |\n LL |     let _: Vec<T>;\n-   |            ^^^^^^\n+   |            ~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "270d6b8e18e2269dfbb7dda942af5d6f7e81244b", "filename": "src/test/ui/generics/issue-65285-incorrect-explicit-lifetime-name-needed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -13,7 +13,7 @@ LL | fn bar<'b, L: X<&'b Nested<i32>>>(){}\n help: consider using the `'b` lifetime\n    |\n LL | fn bar<'b, L: X<'b, &'b Nested<i32>>>(){}\n-   |                 ^^^\n+   |                 +++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-65285-incorrect-explicit-lifetime-name-needed.rs:9:21\n@@ -31,7 +31,7 @@ LL |     fn foo<'b, L: X<&'b Nested<K>>>();\n help: consider using one of the available lifetimes here\n    |\n LL |     fn foo<'b, L: X<'lifetime, &'b Nested<K>>>();\n-   |                     ^^^^^^^^^^\n+   |                     ++++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "98e5cd6bab89351861edeb9f1184ce01ae36325a", "filename": "src/test/ui/generics/wrong-number-of-args.stderr", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -82,7 +82,7 @@ LL |     struct Ty<A, B>;\n help: add missing generic arguments\n    |\n LL |     type A = Ty<A, B>;\n-   |              ^^^^^^^^\n+   |              ~~~~~~~~\n \n error[E0107]: this struct takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:30:14\n@@ -100,7 +100,7 @@ LL |     struct Ty<A, B>;\n help: add missing generic argument\n    |\n LL |     type B = Ty<usize, B>;\n-   |                      ^^^\n+   |                      +++\n \n error[E0107]: this struct takes 2 generic arguments but 3 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:36:14\n@@ -130,7 +130,7 @@ LL |     struct Ty<A, B>;\n help: add missing generic arguments\n    |\n LL |     type E = Ty<A, B>;\n-   |                 ^^^^\n+   |                 ++++\n \n error[E0107]: missing generics for struct `lifetime_and_type::Ty`\n   --> $DIR/wrong-number-of-args.rs:48:14\n@@ -146,7 +146,7 @@ LL |     struct Ty<'a, T>;\n help: add missing generic argument\n    |\n LL |     type A = Ty<T>;\n-   |              ^^^^^\n+   |              ~~~~~\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/wrong-number-of-args.rs:48:14\n@@ -157,7 +157,7 @@ LL |     type A = Ty;\n help: consider introducing a named lifetime parameter\n    |\n LL |     type A<'a> = Ty<'a>;\n-   |           ^^^^   ^^^^^^\n+   |           ++++   ~~~~~~\n \n error[E0107]: this struct takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:54:14\n@@ -173,7 +173,7 @@ LL |     struct Ty<'a, T>;\n help: add missing generic argument\n    |\n LL |     type B = Ty<'static, T>;\n-   |                        ^^^\n+   |                        +++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/wrong-number-of-args.rs:58:17\n@@ -184,7 +184,7 @@ LL |     type C = Ty<usize>;\n help: consider introducing a named lifetime parameter\n    |\n LL |     type C<'a> = Ty<'a, usize>;\n-   |           ^^^^      ^^^\n+   |           ++++      +++\n \n error[E0107]: this struct takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:64:14\n@@ -200,7 +200,7 @@ LL |     struct Ty<'a, T>;\n help: add missing generic argument\n    |\n LL |     type E = Ty<T>;\n-   |                 ^\n+   |                 +\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/wrong-number-of-args.rs:64:16\n@@ -211,7 +211,7 @@ LL |     type E = Ty<>;\n help: consider introducing a named lifetime parameter\n    |\n LL |     type E<'a> = Ty<'a>;\n-   |           ^^^^      ^^\n+   |           ++++      ++\n \n error[E0107]: this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:70:14\n@@ -255,7 +255,7 @@ LL |     struct Ty<A, B, C = &'static str>;\n help: add missing generic arguments\n    |\n LL |     type A = Ty<A, B>;\n-   |              ^^^^^^^^\n+   |              ~~~~~~~~\n \n error[E0107]: this struct takes at least 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:84:14\n@@ -273,7 +273,7 @@ LL |     struct Ty<A, B, C = &'static str>;\n help: add missing generic argument\n    |\n LL |     type B = Ty<usize, B>;\n-   |                      ^^^\n+   |                      +++\n \n error[E0107]: this struct takes at most 3 generic arguments but 4 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:92:14\n@@ -303,7 +303,7 @@ LL |     struct Ty<A, B, C = &'static str>;\n help: add missing generic arguments\n    |\n LL |     type F = Ty<A, B>;\n-   |                 ^^^^\n+   |                 ++++\n \n error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:116:22\n@@ -328,7 +328,7 @@ LL |     type B = Box<dyn GenericLifetime>;\n help: consider introducing a named lifetime parameter\n    |\n LL |     type B<'a> = Box<dyn GenericLifetime<'a>>;\n-   |           ^^^^           ^^^^^^^^^^^^^^^^^^^\n+   |           ++++           ~~~~~~~~~~~~~~~~~~~\n \n error[E0107]: this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:124:22\n@@ -358,7 +358,7 @@ LL |     trait GenericType<A> {\n help: add missing generic argument\n    |\n LL |     type D = Box<dyn GenericType<A>>;\n-   |                      ^^^^^^^^^^^^^^\n+   |                      ~~~~~~~~~~~~~~\n \n error[E0107]: this trait takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:132:22\n@@ -383,7 +383,7 @@ LL |     type F = Box<dyn GenericLifetime<>>;\n help: consider introducing a named lifetime parameter\n    |\n LL |     type F<'a> = Box<dyn GenericLifetime<'a>>;\n-   |           ^^^^                           ^^\n+   |           ++++                           ++\n \n error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:140:22\n@@ -399,7 +399,7 @@ LL |     trait GenericType<A> {\n help: add missing generic argument\n    |\n LL |     type G = Box<dyn GenericType<A>>;\n-   |                                  ^\n+   |                                  +\n \n error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:151:26\n@@ -424,7 +424,7 @@ LL |         type A = Box<dyn GenericLifetimeAT<AssocTy=()>>;\n help: consider introducing a named lifetime parameter\n    |\n LL |         type A<'a> = Box<dyn GenericLifetimeAT<'a, AssocTy=()>>;\n-   |               ^^^^                             ^^^\n+   |               ++++                             +++\n \n error[E0107]: this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:165:26\n@@ -449,7 +449,7 @@ LL |         type C = Box<dyn GenericLifetimeAT<(), AssocTy=()>>;\n help: consider introducing a named lifetime parameter\n    |\n LL |         type C<'a> = Box<dyn GenericLifetimeAT<'a, (), AssocTy=()>>;\n-   |               ^^^^                             ^^^\n+   |               ++++                             +++\n \n error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:169:26\n@@ -479,7 +479,7 @@ LL |         trait GenericTypeAT<A> {\n help: add missing generic argument\n    |\n LL |         type A = Box<dyn GenericTypeAT<A, AssocTy=()>>;\n-   |                                        ^^\n+   |                                        ++\n \n error[E0107]: this trait takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:185:26\n@@ -523,7 +523,7 @@ LL |         trait GenericTypeAT<A> {\n help: add missing generic argument\n    |\n LL |         type C = Box<dyn GenericTypeAT<'static, A, AssocTy=()>>;\n-   |                                               ^^^\n+   |                                               +++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/wrong-number-of-args.rs:201:48\n@@ -534,7 +534,7 @@ LL |         type A = Box<dyn GenericLifetimeTypeAT<AssocTy=()>>;\n help: consider introducing a named lifetime parameter\n    |\n LL |         type A<'a> = Box<dyn GenericLifetimeTypeAT<'a, AssocTy=()>>;\n-   |               ^^^^                                 ^^^\n+   |               ++++                                 +++\n \n error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:201:26\n@@ -550,7 +550,7 @@ LL |         trait GenericLifetimeTypeAT<'a, A> {\n help: add missing generic argument\n    |\n LL |         type A = Box<dyn GenericLifetimeTypeAT<A, AssocTy=()>>;\n-   |                                                ^^\n+   |                                                ++\n \n error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:207:26\n@@ -566,7 +566,7 @@ LL |         trait GenericLifetimeTypeAT<'a, A> {\n help: add missing generic argument\n    |\n LL |         type B = Box<dyn GenericLifetimeTypeAT<'static, A, AssocTy=()>>;\n-   |                                                       ^^^\n+   |                                                       +++\n \n error[E0107]: this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:211:26\n@@ -596,7 +596,7 @@ LL |         trait GenericLifetimeTypeAT<'a, A> {\n help: add missing generic argument\n    |\n LL |         type C = Box<dyn GenericLifetimeTypeAT<'static, 'static, A, AssocTy=()>>;\n-   |                                                                ^^^\n+   |                                                                +++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/wrong-number-of-args.rs:217:48\n@@ -607,7 +607,7 @@ LL |         type D = Box<dyn GenericLifetimeTypeAT<(), AssocTy=()>>;\n help: consider introducing a named lifetime parameter\n    |\n LL |         type D<'a> = Box<dyn GenericLifetimeTypeAT<'a, (), AssocTy=()>>;\n-   |               ^^^^                                 ^^^\n+   |               ++++                                 +++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/wrong-number-of-args.rs:221:48\n@@ -618,7 +618,7 @@ LL |         type E = Box<dyn GenericLifetimeTypeAT<(), (), AssocTy=()>>;\n help: consider introducing a named lifetime parameter\n    |\n LL |         type E<'a> = Box<dyn GenericLifetimeTypeAT<'a, (), (), AssocTy=()>>;\n-   |               ^^^^                                 ^^^\n+   |               ++++                                 +++\n \n error[E0107]: this trait takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:221:26\n@@ -704,7 +704,7 @@ LL |         trait GenericTypeTypeAT<A, B> {\n help: add missing generic arguments\n    |\n LL |         type A = Box<dyn GenericTypeTypeAT<A, B, AssocTy=()>>;\n-   |                                            ^^^^^\n+   |                                            +++++\n \n error[E0107]: this trait takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:251:26\n@@ -722,7 +722,7 @@ LL |         trait GenericTypeTypeAT<A, B> {\n help: add missing generic argument\n    |\n LL |         type B = Box<dyn GenericTypeTypeAT<(), B, AssocTy=()>>;\n-   |                                              ^^^\n+   |                                              +++\n \n error[E0107]: this trait takes 2 generic arguments but 3 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:255:26\n@@ -747,7 +747,7 @@ LL |         type A = Box<dyn GenericLifetimeLifetimeAT<AssocTy=()>>;\n help: consider introducing a named lifetime parameter\n    |\n LL |         type A<'a> = Box<dyn GenericLifetimeLifetimeAT<'a, 'a, AssocTy=()>>;\n-   |               ^^^^                                     ^^^^^^^\n+   |               ++++                                     +++++++\n \n error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/wrong-number-of-args.rs:269:26\n@@ -765,7 +765,7 @@ LL |         trait GenericLifetimeLifetimeAT<'a, 'b> {\n help: add missing lifetime argument\n    |\n LL |         type B = Box<dyn GenericLifetimeLifetimeAT<'static, 'b, AssocTy=()>>;\n-   |                                                           ^^^^\n+   |                                                           ++++\n \n error[E0106]: missing lifetime specifiers\n   --> $DIR/wrong-number-of-args.rs:279:56\n@@ -776,7 +776,7 @@ LL |         type A = Box<dyn GenericLifetimeLifetimeTypeAT<AssocTy=()>>;\n help: consider introducing a named lifetime parameter\n    |\n LL |         type A<'a> = Box<dyn GenericLifetimeLifetimeTypeAT<'a, 'a, AssocTy=()>>;\n-   |               ^^^^                                         ^^^^^^^\n+   |               ++++                                         +++++++\n \n error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:279:26\n@@ -792,7 +792,7 @@ LL |         trait GenericLifetimeLifetimeTypeAT<'a, 'b, A> {\n help: add missing generic argument\n    |\n LL |         type A = Box<dyn GenericLifetimeLifetimeTypeAT<A, AssocTy=()>>;\n-   |                                                        ^^\n+   |                                                        ++\n \n error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/wrong-number-of-args.rs:285:26\n@@ -810,7 +810,7 @@ LL |         trait GenericLifetimeLifetimeTypeAT<'a, 'b, A> {\n help: add missing lifetime argument\n    |\n LL |         type B = Box<dyn GenericLifetimeLifetimeTypeAT<'static, 'b, AssocTy=()>>;\n-   |                                                               ^^^^\n+   |                                                               ++++\n \n error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:285:26\n@@ -826,7 +826,7 @@ LL |         trait GenericLifetimeLifetimeTypeAT<'a, 'b, A> {\n help: add missing generic argument\n    |\n LL |         type B = Box<dyn GenericLifetimeLifetimeTypeAT<'static, A, AssocTy=()>>;\n-   |                                                               ^^^\n+   |                                                               +++\n \n error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/wrong-number-of-args.rs:291:26\n@@ -844,7 +844,7 @@ LL |         trait GenericLifetimeLifetimeTypeAT<'a, 'b, A> {\n help: add missing lifetime argument\n    |\n LL |         type C = Box<dyn GenericLifetimeLifetimeTypeAT<'static, 'b, (), AssocTy=()>>;\n-   |                                                               ^^^^\n+   |                                                               ++++\n \n error[E0107]: missing generics for struct `HashMap`\n   --> $DIR/wrong-number-of-args.rs:301:18\n@@ -860,7 +860,7 @@ LL | pub struct HashMap<K, V, S = RandomState> {\n help: add missing generic arguments\n    |\n LL |         type A = HashMap<K, V>;\n-   |                  ^^^^^^^^^^^^^\n+   |                  ~~~~~~~~~~~~~\n \n error[E0107]: this struct takes at least 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:305:18\n@@ -878,7 +878,7 @@ LL | pub struct HashMap<K, V, S = RandomState> {\n help: add missing generic argument\n    |\n LL |         type B = HashMap<String, V>;\n-   |                                ^^^\n+   |                                +++\n \n error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/wrong-number-of-args.rs:309:18\n@@ -908,7 +908,7 @@ LL | pub struct HashMap<K, V, S = RandomState> {\n help: add missing generic arguments\n    |\n LL |         type C = HashMap<'static, K, V>;\n-   |                                 ^^^^^^\n+   |                                 ++++++\n \n error[E0107]: this struct takes at most 3 generic arguments but 4 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:315:18\n@@ -938,7 +938,7 @@ LL | pub struct HashMap<K, V, S = RandomState> {\n help: add missing generic arguments\n    |\n LL |         type E = HashMap<K, V>;\n-   |                          ^^^^\n+   |                          ++++\n \n error[E0107]: missing generics for enum `Result`\n   --> $DIR/wrong-number-of-args.rs:325:18\n@@ -954,7 +954,7 @@ LL | pub enum Result<T, E> {\n help: add missing generic arguments\n    |\n LL |         type A = Result<T, E>;\n-   |                  ^^^^^^^^^^^^\n+   |                  ~~~~~~~~~~~~\n \n error[E0107]: this enum takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:329:18\n@@ -972,7 +972,7 @@ LL | pub enum Result<T, E> {\n help: add missing generic argument\n    |\n LL |         type B = Result<String, E>;\n-   |                               ^^^\n+   |                               +++\n \n error[E0107]: this enum takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/wrong-number-of-args.rs:333:18\n@@ -1002,7 +1002,7 @@ LL | pub enum Result<T, E> {\n help: add missing generic arguments\n    |\n LL |         type C = Result<'static, T, E>;\n-   |                                ^^^^^^\n+   |                                ++++++\n \n error[E0107]: this enum takes 2 generic arguments but 3 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:339:18\n@@ -1032,7 +1032,7 @@ LL | pub enum Result<T, E> {\n help: add missing generic arguments\n    |\n LL |         type E = Result<T, E>;\n-   |                         ^^^^\n+   |                         ++++\n \n error: aborting due to 71 previous errors\n "}, {"sha": "55eca0345139ee7cc8d1c5ee68effbc8f8ddbc34", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     want_bar_for_any_ccx(b);\n help: consider further restricting this bound\n    |\n LL |     where B : Qux + for<'ccx> Bar<'ccx>\n-   |                   ^^^^^^^^^^^^^^^^^^^^^\n+   |                   +++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "d7758ad96098577517b7e7b5cf3eef94fed18939", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,7 +12,7 @@ LL |     where F : for<'tcx> Foo<'tcx>\n help: consider further restricting this bound\n    |\n LL |     where F : Foo<'x> + for<'tcx> Foo<'tcx>\n-   |                       ^^^^^^^^^^^^^^^^^^^^^\n+   |                       +++++++++++++++++++++\n \n error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:35:26\n@@ -28,7 +28,7 @@ LL |     where B : for<'ccx> Bar<'ccx>\n help: consider further restricting this bound\n    |\n LL |     where B : Bar<'x> + for<'ccx> Bar<'ccx>\n-   |                       ^^^^^^^^^^^^^^^^^^^^^\n+   |                       +++++++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "64d27e0648700ddb80f2cd19f68c63d2dc855d3d", "filename": "src/test/ui/hygiene/expansion-info-reset.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fhygiene%2Fexpansion-info-reset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fhygiene%2Fexpansion-info-reset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fexpansion-info-reset.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     format_args!({ #[derive(Clone)] struct S; });\n help: you might be missing a string literal to format with\n    |\n LL |     format_args!(\"{}\", { #[derive(Clone)] struct S; });\n-   |                  ^^^^^\n+   |                  +++++\n \n error: aborting due to previous error\n "}, {"sha": "ef650b75b5634f4d97c4b4af3dbfac6f5b6084bd", "filename": "src/test/ui/hygiene/rustc-macro-transparency.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -13,7 +13,7 @@ LL |     semitransparent;\n help: use `!` to invoke the macro\n    |\n LL |     semitransparent!;\n-   |                    ^\n+   |                    +\n \n error[E0423]: expected value, found macro `opaque`\n   --> $DIR/rustc-macro-transparency.rs:30:5\n@@ -24,7 +24,7 @@ LL |     opaque;\n help: use `!` to invoke the macro\n    |\n LL |     opaque!;\n-   |           ^\n+   |           +\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b752cde228d52d12b56ec97155287082fb15bfa4", "filename": "src/test/ui/impl-header-lifetime-elision/assoc-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     type Output = &i32;\n help: consider introducing a named lifetime parameter\n    |\n LL |     type Output<'a> = &'a i32;\n-   |                ^^^^   ^^^\n+   |                ++++   ~~~\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/assoc-type.rs:16:20\n@@ -18,7 +18,7 @@ LL |     type Output = &'_ i32;\n help: consider introducing a named lifetime parameter\n    |\n LL |     type Output<'a> = &'a i32;\n-   |                ^^^^    ^^\n+   |                ++++    ~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bf04a8c987393017a5755560c87a895cf3e51bf1", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -9,7 +9,7 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n help: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n    |\n LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n-   |                         ^^^^^^^^^^^^\n+   |                         ++++++++++++\n \n error[E0760]: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n   --> $DIR/bound-normalization-fail.rs:41:41\n@@ -28,7 +28,7 @@ LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n help: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n-   |                                 ^^^^^^^^^^^^\n+   |                                 ++++++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f4bd0fde3b6cbfe73efcf94692ea4e95b6002a67", "filename": "src/test/ui/impl-trait/does-not-live-long-enough.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL |     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'\n help: to force the closure to take ownership of `prefix` (and any other referenced variables), use the `move` keyword\n    |\n LL |         self.data.iter().filter(move |s| s.starts_with(prefix)).map(|s| s.as_ref())\n-   |                                 ^^^^\n+   |                                 ++++\n \n error: aborting due to previous error\n "}, {"sha": "0d4f82bfc153f8170424e57b0af322ed45e45460", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -50,7 +50,7 @@ LL | fn bap() -> Trait { Struct }\n help: use `impl Trait` as the return type, as all return paths are of type `Struct`, which implements `Trait`\n    |\n LL | fn bap() -> impl Trait { Struct }\n-   |             ^^^^^^^^^^\n+   |             ~~~~~~~~~~\n \n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:15:13\n@@ -62,7 +62,7 @@ LL | fn ban() -> dyn Trait { Struct }\n help: use `impl Trait` as the return type, as all return paths are of type `Struct`, which implements `Trait`\n    |\n LL | fn ban() -> impl Trait { Struct }\n-   |             ^^^^^^^^^^\n+   |             ~~~~~~~~~~\n \n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:17:13\n@@ -73,15 +73,15 @@ LL | fn bak() -> dyn Trait { unimplemented!() }\n help: use some type `T` that is `T: Sized` as the return type if all return paths have the same type\n    |\n LL | fn bak() -> T { unimplemented!() }\n-   |             ^\n+   |             ~\n help: use `impl Trait` as the return type if all return paths have the same type but you want to expose only the trait in the signature\n    |\n LL | fn bak() -> impl Trait { unimplemented!() }\n-   |             ^^^^^^^^^^\n+   |             ~~~~~~~~~~\n help: use a boxed trait object if all return paths implement trait `Trait`\n    |\n LL | fn bak() -> Box<dyn Trait> { unimplemented!() }\n-   |             ^^^^^^^^^^^^^^\n+   |             ~~~~~~~~~~~~~~\n \n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:19:13\n@@ -95,11 +95,11 @@ LL | fn bal() -> dyn Trait {\n    = note: you can create a new `enum` with a variant for each returned type\n help: return a boxed trait object instead\n    |\n-LL | fn bal() -> Box<dyn Trait> {\n+LL ~ fn bal() -> Box<dyn Trait> {\n LL |     if true {\n-LL |         return Box::new(Struct);\n+LL ~         return Box::new(Struct);\n LL |     }\n-LL |     Box::new(42)\n+LL ~     Box::new(42)\n    |\n \n error[E0308]: `if` and `else` have incompatible types\n@@ -126,11 +126,11 @@ LL | fn bax() -> dyn Trait {\n    = note: you can create a new `enum` with a variant for each returned type\n help: return a boxed trait object instead\n    |\n-LL | fn bax() -> Box<dyn Trait> {\n+LL ~ fn bax() -> Box<dyn Trait> {\n LL |     if true {\n-LL |         Box::new(Struct)\n+LL ~         Box::new(Struct)\n LL |     } else {\n-LL |         Box::new(42)\n+LL ~         Box::new(42)\n    |\n \n error[E0308]: mismatched types\n@@ -148,7 +148,7 @@ LL |         return Struct;\n help: store this in the heap by calling `Box::new`\n    |\n LL |         return Box::new(Struct);\n-   |                ^^^^^^^^^      ^\n+   |                +++++++++      +\n \n error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:36:5\n@@ -165,7 +165,7 @@ LL |     42\n help: store this in the heap by calling `Box::new`\n    |\n LL |     Box::new(42)\n-   |     ^^^^^^^^^  ^\n+   |     +++++++++  +\n \n error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:40:16\n@@ -182,7 +182,7 @@ LL |         return 0;\n help: store this in the heap by calling `Box::new`\n    |\n LL |         return Box::new(0);\n-   |                ^^^^^^^^^ ^\n+   |                +++++++++ +\n \n error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:42:5\n@@ -199,7 +199,7 @@ LL |     42\n help: store this in the heap by calling `Box::new`\n    |\n LL |     Box::new(42)\n-   |     ^^^^^^^^^  ^\n+   |     +++++++++  +\n \n error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:46:9\n@@ -216,7 +216,7 @@ LL |         Struct\n help: store this in the heap by calling `Box::new`\n    |\n LL |         Box::new(Struct)\n-   |         ^^^^^^^^^      ^\n+   |         +++++++++      +\n \n error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:48:9\n@@ -233,7 +233,7 @@ LL |         42\n help: store this in the heap by calling `Box::new`\n    |\n LL |         Box::new(42)\n-   |         ^^^^^^^^^  ^\n+   |         +++++++++  +\n \n error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:53:9\n@@ -250,7 +250,7 @@ LL |         0\n help: store this in the heap by calling `Box::new`\n    |\n LL |         Box::new(0)\n-   |         ^^^^^^^^^ ^\n+   |         +++++++++ +\n \n error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:55:9\n@@ -267,7 +267,7 @@ LL |         42\n help: store this in the heap by calling `Box::new`\n    |\n LL |         Box::new(42)\n-   |         ^^^^^^^^^  ^\n+   |         +++++++++  +\n \n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:60:13\n@@ -279,7 +279,7 @@ LL | fn bat() -> dyn Trait {\n help: use `impl Trait` as the return type, as all return paths are of type `{integer}`, which implements `Trait`\n    |\n LL | fn bat() -> impl Trait {\n-   |             ^^^^^^^^^^\n+   |             ~~~~~~~~~~\n \n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:66:13\n@@ -291,7 +291,7 @@ LL | fn bay() -> dyn Trait {\n help: use `impl Trait` as the return type, as all return paths are of type `{integer}`, which implements `Trait`\n    |\n LL | fn bay() -> impl Trait {\n-   |             ^^^^^^^^^^\n+   |             ~~~~~~~~~~\n \n error: aborting due to 20 previous errors\n "}, {"sha": "46053c6e7c1196f4cb10eb13c4814751856b6f33", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -38,7 +38,7 @@ LL |     let _: i32 = Leak::leak(hide(0_i32));\n help: consider constraining the associated type `<impl Foo as Leak>::T` to `i32`\n    |\n LL | fn hide<T: Foo>(x: T) -> impl Foo<T = i32> {\n-   |                                  ^^^^^^^^^\n+   |                                  +++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:38:10"}, {"sha": "b6701b68fd6c1d6f30b2248c48a538860db4a55a", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/not-enough-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL | fn f<T: ?Sized, U: ?Sized>(_: impl AsRef<T>, _: impl AsRef<U>) {}\n help: add missing generic argument\n    |\n LL |     f::<[u8], U>(\"a\", b\"a\");\n-   |             ^^^\n+   |             +++\n \n error: aborting due to previous error\n "}, {"sha": "d1a04af070637035561fec638419226133a4c551", "filename": "src/test/ui/impl-trait/impl-generic-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -9,8 +9,9 @@ LL |     fn foo<U: Debug>(&self, _: &U) { }\n    |\n help: try removing the generic parameter and using `impl Trait` instead\n    |\n-LL |     fn foo(&self, _: &impl Debug) { }\n-   |          --           ^^^^^^^^^^\n+LL -     fn foo<U: Debug>(&self, _: &U) { }\n+LL +     fn foo(&self, _: &impl Debug) { }\n+   | \n \n error[E0643]: method `bar` has incompatible signature for trait\n   --> $DIR/impl-generic-mismatch.rs:17:23\n@@ -24,7 +25,7 @@ LL |     fn bar(&self, _: &impl Debug) { }\n help: try changing the `impl Trait` argument to a generic parameter\n    |\n LL |     fn bar<U: Debug>(&self, _: &U) { }\n-   |           ^^^^^^^^^^            ^\n+   |           ++++++++++            ~\n \n error[E0643]: method `hash` has incompatible signature for trait\n   --> $DIR/impl-generic-mismatch.rs:28:33"}, {"sha": "50eab7dcc97892b9f63de7c9c35eb5ba6c83475f", "filename": "src/test/ui/impl-trait/issue-55872-1.full_tait.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -0,0 +1,57 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-55872-1.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/issue-55872-1.rs:17:5\n+   |\n+LL |     fn foo<T>() -> Self::E;\n+   |     ----------------------- definition of `foo` from trait\n+...\n+LL |     fn foo<T: Default>() -> Self::E {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Default`\n+\n+error[E0277]: the trait bound `S: Copy` is not satisfied in `(S, T)`\n+  --> $DIR/issue-55872-1.rs:13:14\n+   |\n+LL |     type E = impl Copy;\n+   |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `S`\n+   |\n+   = note: required because it appears within the type `(S, T)`\n+help: consider further restricting this bound\n+   |\n+LL | impl<S: Default + std::marker::Copy> Bar for S {\n+   |                 +++++++++++++++++++\n+\n+error[E0277]: the trait bound `T: Copy` is not satisfied in `(S, T)`\n+  --> $DIR/issue-55872-1.rs:13:14\n+   |\n+LL |     type E = impl Copy;\n+   |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `T`\n+   |\n+   = note: required because it appears within the type `(S, T)`\n+help: consider further restricting this bound\n+   |\n+LL |     fn foo<T: Default + std::marker::Copy>() -> Self::E {\n+   |                       +++++++++++++++++++\n+\n+error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-55872-1.rs:17:37\n+   |\n+LL |       fn foo<T: Default>() -> Self::E {\n+   |  _____________________________________^\n+LL | |\n+LL | |\n+LL | |         (S::default(), T::default())\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 4 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0276, E0277.\n+For more information about an error, try `rustc --explain E0276`."}, {"sha": "e772445a56c9a7af48eccd643b4bfd99f7be4c65", "filename": "src/test/ui/impl-trait/issue-55872-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -17,7 +17,7 @@ LL |     fn foo<T: Default>() -> Self::E {\n help: consider further restricting this bound\n    |\n LL | impl<S: Default + std::marker::Copy> Bar for S {\n-   |                 ^^^^^^^^^^^^^^^^^^^\n+   |                 +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied in `(S, T)`\n   --> $DIR/issue-55872-1.rs:12:29\n@@ -29,7 +29,7 @@ LL |     fn foo<T: Default>() -> Self::E {\n help: consider further restricting this bound\n    |\n LL |     fn foo<T: Default + std::marker::Copy>() -> Self::E {\n-   |                       ^^^^^^^^^^^^^^^^^^^\n+   |                       +++++++++++++++++++\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n   --> $DIR/issue-55872-1.rs:12:37"}, {"sha": "3b75939ff02c5ccbca4d5b6c3dcb705f74aa2eb4", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -9,7 +9,7 @@ LL | fn elided(x: &i32) -> impl Copy { x }\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n-   |                                 ^^^^\n+   |                                 ++++\n \n error: lifetime may not live long enough\n   --> $DIR/must_outlive_least_region_or_bound.rs:5:32\n@@ -23,7 +23,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n-   |                                          ^^^^\n+   |                                          ++++\n \n error: lifetime may not live long enough\n   --> $DIR/must_outlive_least_region_or_bound.rs:7:46"}, {"sha": "81ba89b0e05f7d5a1c2ecac4ee82729049170696", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,7 +14,7 @@ LL | fn elided(x: &i32) -> impl Copy { x }\n help: to declare that the `impl Trait` captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n-   |                                 ^^^^\n+   |                                 ++++\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/must_outlive_least_region_or_bound.rs:5:44\n@@ -32,7 +32,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n help: to declare that the `impl Trait` captures data from argument `x`, you can add an explicit `'a` lifetime bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n-   |                                          ^^^^\n+   |                                          ++++\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/must_outlive_least_region_or_bound.rs:7:46\n@@ -50,11 +50,11 @@ LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn elided2(x: &i32) -> impl Copy + '_ { x }\n-   |                                    ^^\n+   |                                    ~~\n help: alternatively, add an explicit `'static` bound to this reference\n    |\n LL | fn elided2(x: &'static i32) -> impl Copy + 'static { x }\n-   |               ^^^^^^^^^^^^\n+   |               ~~~~~~~~~~~~\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/must_outlive_least_region_or_bound.rs:9:55\n@@ -72,11 +72,11 @@ LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'a { x }\n-   |                                             ^^\n+   |                                             ~~\n help: alternatively, add an explicit `'static` bound to this reference\n    |\n LL | fn explicit2<'a>(x: &'static i32) -> impl Copy + 'static { x }\n-   |                     ^^^^^^^^^^^^\n+   |                     ~~~~~~~~~~~~\n \n error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/must_outlive_least_region_or_bound.rs:11:24\n@@ -95,11 +95,11 @@ LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n help: to declare that the trait object captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug + '_>, impl Debug) { (Box::new(x), x) }\n-   |                                       ^^^^\n+   |                                       ++++\n help: to declare that the `impl Trait` captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug + '_) { (Box::new(x), x) }\n-   |                                                    ^^^^\n+   |                                                    ++++\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/must_outlive_least_region_or_bound.rs:22:69\n@@ -115,11 +115,11 @@ LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n help: to declare that the trait object captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug + '_>, impl Debug) { (Box::new(x), x) }\n-   |                                       ^^^^\n+   |                                       ++++\n help: to declare that the `impl Trait` captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug + '_) { (Box::new(x), x) }\n-   |                                                    ^^^^\n+   |                                                    ++++\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/must_outlive_least_region_or_bound.rs:28:69\n@@ -135,11 +135,11 @@ LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'a { x }\n-   |                                                           ^^\n+   |                                                           ~~\n help: alternatively, add an explicit `'static` bound to this reference\n    |\n LL | fn with_bound<'a>(x: &'static i32) -> impl LifetimeTrait<'a> + 'static { x }\n-   |                      ^^^^^^^^^^^^\n+   |                      ~~~~~~~~~~~~\n \n error[E0623]: lifetime mismatch\n   --> $DIR/must_outlive_least_region_or_bound.rs:32:61\n@@ -169,7 +169,7 @@ LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n help: to declare that the trait object captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n-   |                                      ^^^^\n+   |                                      ++++\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/must_outlive_least_region_or_bound.rs:16:59\n@@ -182,7 +182,7 @@ LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n help: to declare that the trait object captures data from argument `x`, you can add an explicit `'a` lifetime bound\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n-   |                                               ^^^^\n+   |                                               ++++\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/must_outlive_least_region_or_bound.rs:18:60\n@@ -195,11 +195,11 @@ LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n-   |                                        ^^\n+   |                                        ~~\n help: alternatively, add an explicit `'static` bound to this reference\n    |\n LL | fn elided4(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |               ^^^^^^^^^^^^\n+   |               ~~~~~~~~~~~~\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/must_outlive_least_region_or_bound.rs:20:69\n@@ -210,11 +210,11 @@ LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n-   |                                                 ^^\n+   |                                                 ~~\n help: alternatively, add an explicit `'static` bound to this reference\n    |\n LL | fn explicit4<'a>(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |                     ^^^^^^^^^^^^\n+   |                     ~~~~~~~~~~~~\n \n error: aborting due to 14 previous errors\n "}, {"sha": "365ecd9fcfa1d7e859145588bb7ffd68a55a834f", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-dyn-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -14,11 +14,11 @@ LL |     fn foo() -> Self;\n help: consider turning `foo` into a method by giving it a `&self` argument\n    |\n LL |     fn foo(&self) -> Self;\n-   |            ^^^^^\n+   |            +++++\n help: alternatively, consider constraining `foo` so it does not apply to trait objects\n    |\n LL |     fn foo() -> Self where Self: Sized;\n-   |                      ^^^^^^^^^^^^^^^^^\n+   |                      +++++++++++++++++\n \n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:28:13\n@@ -36,11 +36,11 @@ LL |     fn foo() -> Self;\n help: consider turning `foo` into a method by giving it a `&self` argument\n    |\n LL |     fn foo(&self) -> Self;\n-   |            ^^^^^\n+   |            +++++\n help: alternatively, consider constraining `foo` so it does not apply to trait objects\n    |\n LL |     fn foo() -> Self where Self: Sized;\n-   |                      ^^^^^^^^^^^^^^^^^\n+   |                      +++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "357166d112377aa56b82cfe7a1da18fa4465dbcd", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-impl-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -35,12 +35,12 @@ LL |     B\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn cat() -> Box<dyn ObjectSafe> {\n-   |             ^^^^^^^           ^\n+   |             ~~~~~~~           +\n help: if you change the return type to expect trait objects, box the returned expressions\n    |\n-LL |         return Box::new(A);\n+LL ~         return Box::new(A);\n LL |     }\n-LL |     Box::new(B)\n+LL ~     Box::new(B)\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "970abad5c72e9166c35412786b5fe18803192641", "filename": "src/test/ui/impl-trait/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -17,12 +17,12 @@ LL |     1u32\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn foo() -> Box<dyn std::fmt::Display> {\n-   |             ^^^^^^^                  ^\n+   |             ~~~~~~~                  +\n help: if you change the return type to expect trait objects, box the returned expressions\n    |\n-LL |         return Box::new(0i32);\n+LL ~         return Box::new(0i32);\n LL |     }\n-LL |     Box::new(1u32)\n+LL ~     Box::new(1u32)\n    |\n \n error[E0308]: mismatched types\n@@ -44,12 +44,12 @@ LL |         return 1u32;\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn bar() -> Box<dyn std::fmt::Display> {\n-   |             ^^^^^^^                  ^\n+   |             ~~~~~~~                  +\n help: if you change the return type to expect trait objects, box the returned expressions\n    |\n-LL |         return Box::new(0i32);\n+LL ~         return Box::new(0i32);\n LL |     } else {\n-LL |         return Box::new(1u32);\n+LL ~         return Box::new(1u32);\n    |\n \n error[E0308]: mismatched types\n@@ -71,12 +71,12 @@ LL |         1u32\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn baz() -> Box<dyn std::fmt::Display> {\n-   |             ^^^^^^^                  ^\n+   |             ~~~~~~~                  +\n help: if you change the return type to expect trait objects, box the returned expressions\n    |\n-LL |         return Box::new(0i32);\n+LL ~         return Box::new(0i32);\n LL |     } else {\n-LL |         Box::new(1u32)\n+LL ~         Box::new(1u32)\n    |\n \n error[E0308]: `if` and `else` have incompatible types\n@@ -94,12 +94,12 @@ LL | |     }\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn qux() -> Box<dyn std::fmt::Display> {\n-   |             ^^^^^^^                  ^\n+   |             ~~~~~~~                  +\n help: if you change the return type to expect trait objects, box the returned expressions\n    |\n-LL |         Box::new(0i32)\n+LL ~         Box::new(0i32)\n LL |     } else {\n-LL |         Box::new(1u32)\n+LL ~         Box::new(1u32)\n    |\n \n error[E0308]: mismatched types\n@@ -120,11 +120,11 @@ LL |         _ => 1u32,\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn bat() -> Box<dyn std::fmt::Display> {\n-   |             ^^^^^^^                  ^\n+   |             ~~~~~~~                  +\n help: if you change the return type to expect trait objects, box the returned expressions\n    |\n-LL |         0 => return Box::new(0i32),\n-LL |         _ => Box::new(1u32),\n+LL ~         0 => return Box::new(0i32),\n+LL ~         _ => Box::new(1u32),\n    |\n \n error[E0308]: mismatched types\n@@ -147,14 +147,14 @@ LL | |     }\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn can() -> Box<dyn std::fmt::Display> {\n-   |             ^^^^^^^                  ^\n+   |             ~~~~~~~                  +\n help: if you change the return type to expect trait objects, box the returned expressions\n    |\n-LL |     Box::new(match 13 {\n-LL |         0 => return Box::new(0i32),\n+LL ~     Box::new(match 13 {\n+LL ~         0 => return Box::new(0i32),\n LL |         1 => 1u32,\n LL |         _ => 2u32,\n-LL |     })\n+LL ~     })\n    |\n \n error[E0308]: mismatched types\n@@ -176,13 +176,13 @@ LL |             1u32\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn cat() -> Box<dyn std::fmt::Display> {\n-   |             ^^^^^^^                  ^\n+   |             ~~~~~~~                  +\n help: if you change the return type to expect trait objects, box the returned expressions\n    |\n-LL |             return Box::new(0i32);\n+LL ~             return Box::new(0i32);\n LL |         }\n LL |         _ => {\n-LL |             Box::new(1u32)\n+LL ~             Box::new(1u32)\n    |\n \n error[E0308]: `match` arms have incompatible types\n@@ -200,11 +200,11 @@ LL | |     }\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn dog() -> Box<dyn std::fmt::Display> {\n-   |             ^^^^^^^                  ^\n+   |             ~~~~~~~                  +\n help: if you change the return type to expect trait objects, box the returned expressions\n    |\n-LL |         0 => Box::new(0i32),\n-LL |         1 => Box::new(1u32),\n+LL ~         0 => Box::new(0i32),\n+LL ~         1 => Box::new(1u32),\n    |\n \n error[E0308]: `if` and `else` have incompatible types\n@@ -222,12 +222,12 @@ LL | |     }\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn apt() -> Box<dyn std::fmt::Display> {\n-   |             ^^^^^^^                  ^\n+   |             ~~~~~~~                  +\n help: if you change the return type to expect trait objects, box the returned expressions\n    |\n-LL |         Box::new(0i32)\n+LL ~         Box::new(0i32)\n LL |     } else {\n-LL |         Box::new(1u32)\n+LL ~         Box::new(1u32)\n    |\n \n error[E0746]: return type cannot have an unboxed trait object\n@@ -242,10 +242,10 @@ LL | fn hat() -> dyn std::fmt::Display {\n    = note: you can create a new `enum` with a variant for each returned type\n help: return a boxed trait object instead\n    |\n-LL | fn hat() -> Box<dyn std::fmt::Display> {\n+LL ~ fn hat() -> Box<dyn std::fmt::Display> {\n LL |     match 13 {\n LL |         0 => {\n-LL |             return Box::new(0i32);\n+LL ~             return Box::new(0i32);\n LL |         }\n LL |         _ => {\n  ...\n@@ -274,11 +274,11 @@ LL | fn pug() -> dyn std::fmt::Display {\n    = note: you can create a new `enum` with a variant for each returned type\n help: return a boxed trait object instead\n    |\n-LL | fn pug() -> Box<dyn std::fmt::Display> {\n+LL ~ fn pug() -> Box<dyn std::fmt::Display> {\n LL |     match 13 {\n-LL |         0 => Box::new(0i32),\n-LL |         1 => Box::new(1u32),\n-LL |         _ => Box::new(2u32),\n+LL ~         0 => Box::new(0i32),\n+LL ~         1 => Box::new(1u32),\n+LL ~         _ => Box::new(2u32),\n    |\n \n error[E0308]: `if` and `else` have incompatible types\n@@ -305,11 +305,11 @@ LL | fn man() -> dyn std::fmt::Display {\n    = note: you can create a new `enum` with a variant for each returned type\n help: return a boxed trait object instead\n    |\n-LL | fn man() -> Box<dyn std::fmt::Display> {\n+LL ~ fn man() -> Box<dyn std::fmt::Display> {\n LL |     if false {\n-LL |         Box::new(0i32)\n+LL ~         Box::new(0i32)\n LL |     } else {\n-LL |         Box::new(1u32)\n+LL ~         Box::new(1u32)\n    |\n \n error: aborting due to 14 previous errors"}, {"sha": "05a9ed1d4e15d3b477b380c041585de609e68045", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -9,7 +9,7 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n-   |                                                           ^^^^\n+   |                                                           ++++\n \n error: lifetime may not live long enough\n   --> $DIR/static-return-lifetime-infered.rs:9:37\n@@ -23,7 +23,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n-   |                                                             ^^^^\n+   |                                                             ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ebd0b6a12818029b73ba225a23f63316b1589b07", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -16,7 +16,7 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n-   |                                                           ^^^^\n+   |                                                           ++++\n \n error[E0759]: `self` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/static-return-lifetime-infered.rs:10:16\n@@ -36,7 +36,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'a` lifetime bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n-   |                                                             ^^^^\n+   |                                                             ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e0a968527205fc788d77d507a11bf34b7904e29f", "filename": "src/test/ui/implicit-method-bind.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimplicit-method-bind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimplicit-method-bind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplicit-method-bind.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |     let _f = 10i32.abs;\n help: use parentheses to call the method\n    |\n LL |     let _f = 10i32.abs();\n-   |                       ^^\n+   |                       ++\n \n error: aborting due to previous error\n "}, {"sha": "82f5eb83e6f2d4affdc377b6a6f7e5677b36aba7", "filename": "src/test/ui/imports/double-import.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fdouble-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fdouble-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fdouble-import.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL | use sub2::foo;\n help: you can use `as` to change the binding name of the import\n    |\n LL | use sub2::foo as other_foo;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "2c7a8ad5c1adb12a77b5e7337d2dd790046c7939", "filename": "src/test/ui/imports/glob-resolve1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -36,7 +36,7 @@ LL | |     }\n help: you might have meant to use the following enum variant\n    |\n LL |     B::B1;\n-   |     ^^^^^\n+   |     ~~~~~\n \n error[E0425]: cannot find value `C` in this scope\n   --> $DIR/glob-resolve1.rs:29:5\n@@ -72,7 +72,7 @@ LL |     foo::<A>();\n help: an enum with a similar name exists\n    |\n LL |     foo::<B>();\n-   |           ^\n+   |           ~\n help: consider importing this enum\n    |\n LL | use bar::A;\n@@ -90,7 +90,7 @@ LL |     foo::<C>();\n help: an enum with a similar name exists\n    |\n LL |     foo::<B>();\n-   |           ^\n+   |           ~\n help: consider importing this struct\n    |\n LL | use bar::C;\n@@ -108,7 +108,7 @@ LL |     foo::<D>();\n help: an enum with a similar name exists\n    |\n LL |     foo::<B>();\n-   |           ^\n+   |           ~\n help: consider importing this type alias\n    |\n LL | use bar::D;"}, {"sha": "9d26022098fddf09d10a33e56bfe61439d10dae8", "filename": "src/test/ui/imports/issue-19498.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-19498.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-19498.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-19498.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL | mod A {}\n help: you can use `as` to change the binding name of the import\n    |\n LL | use self::A as OtherA;\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~\n \n error[E0255]: the name `B` is defined multiple times\n   --> $DIR/issue-19498.rs:5:1\n@@ -26,7 +26,7 @@ LL | pub mod B {}\n help: you can use `as` to change the binding name of the import\n    |\n LL | use self::B as OtherB;\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~\n \n error[E0255]: the name `D` is defined multiple times\n   --> $DIR/issue-19498.rs:9:5\n@@ -40,7 +40,7 @@ LL |     mod D {}\n help: you can use `as` to change the binding name of the import\n    |\n LL |     use C::D as OtherD;\n-   |         ^^^^^^^^^^^^^^\n+   |         ~~~~~~~~~~~~~~\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e5ed6b10a5479757e38d1255ffc1e42b1aa09787", "filename": "src/test/ui/imports/issue-24081.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-24081.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-24081.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-24081.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -11,7 +11,7 @@ LL | type Add = bool;\n help: you can use `as` to change the binding name of the import\n    |\n LL | use std::ops::Add as OtherAdd;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0255]: the name `Sub` is defined multiple times\n   --> $DIR/issue-24081.rs:9:1\n@@ -26,7 +26,7 @@ LL | struct Sub { x: f32 }\n help: you can use `as` to change the binding name of the import\n    |\n LL | use std::ops::Sub as OtherSub;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0255]: the name `Mul` is defined multiple times\n   --> $DIR/issue-24081.rs:11:1\n@@ -41,7 +41,7 @@ LL | enum Mul { A, B }\n help: you can use `as` to change the binding name of the import\n    |\n LL | use std::ops::Mul as OtherMul;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0255]: the name `Div` is defined multiple times\n   --> $DIR/issue-24081.rs:13:1\n@@ -56,7 +56,7 @@ LL | mod Div { }\n help: you can use `as` to change the binding name of the import\n    |\n LL | use std::ops::Div as OtherDiv;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0255]: the name `Rem` is defined multiple times\n   --> $DIR/issue-24081.rs:15:1\n@@ -71,7 +71,7 @@ LL | trait Rem {  }\n help: you can use `as` to change the binding name of the import\n    |\n LL | use std::ops::Rem as OtherRem;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 5 previous errors\n "}, {"sha": "518d2be784111fa46a5bfe666db99408f96256a6", "filename": "src/test/ui/imports/issue-25396.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-25396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-25396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-25396.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL | use bar::baz;\n help: you can use `as` to change the binding name of the import\n    |\n LL | use bar::baz as other_baz;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error[E0252]: the name `Quux` is defined multiple times\n   --> $DIR/issue-25396.rs:7:5\n@@ -24,7 +24,7 @@ LL | use bar::Quux;\n help: you can use `as` to change the binding name of the import\n    |\n LL | use bar::Quux as OtherQuux;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0252]: the name `blah` is defined multiple times\n   --> $DIR/issue-25396.rs:10:5\n@@ -38,7 +38,7 @@ LL | use bar::blah;\n help: you can use `as` to change the binding name of the import\n    |\n LL | use bar::blah as other_blah;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0252]: the name `WOMP` is defined multiple times\n   --> $DIR/issue-25396.rs:13:5\n@@ -52,7 +52,7 @@ LL | use bar::WOMP;\n help: you can use `as` to change the binding name of the import\n    |\n LL | use bar::WOMP as OtherWOMP;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "4c5875ba77664014c6f68a56383da49ab7c6514d", "filename": "src/test/ui/imports/issue-32354-suggest-import-rename.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-32354-suggest-import-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-32354-suggest-import-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-32354-suggest-import-rename.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL | use extension2::ConstructorExtension;\n help: you can use `as` to change the binding name of the import\n    |\n LL | use extension2::ConstructorExtension as OtherConstructorExtension;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "3301b7d4ef80e9376e84b9b72ba584d9c93dee5f", "filename": "src/test/ui/imports/issue-45829/import-self.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Fimport-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Fimport-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Fimport-self.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -12,12 +12,13 @@ LL | use foo::self;\n    |\n help: consider importing the module directly\n    |\n-LL | use foo;\n-   |       --\n+LL - use foo::self;\n+LL + use foo;\n+   | \n help: alternatively, use the multi-path `use` syntax to import `self`\n    |\n LL | use foo::{self};\n-   |          ^    ^\n+   |          +    +\n \n error[E0255]: the name `foo` is defined multiple times\n   --> $DIR/import-self.rs:6:11\n@@ -32,7 +33,7 @@ LL | use foo::{self};\n help: you can use `as` to change the binding name of the import\n    |\n LL | use foo::{self as other_foo};\n-   |           ^^^^^^^^^^^^^^^^^\n+   |           ~~~~~~~~~~~~~~~~~\n \n error[E0255]: the name `foo` is defined multiple times\n   --> $DIR/import-self.rs:12:5\n@@ -47,7 +48,7 @@ LL | use foo::self;\n help: you can use `as` to change the binding name of the import\n    |\n LL | use foo as other_foo;\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~\n \n error[E0252]: the name `A` is defined multiple times\n   --> $DIR/import-self.rs:16:11\n@@ -61,7 +62,7 @@ LL | use foo::{self as A};\n help: you can use `as` to change the binding name of the import\n    |\n LL | use foo::{self as OtherA};\n-   |           ^^^^^^^^^^^^^^\n+   |           ~~~~~~~~~~~~~~\n \n error: aborting due to 5 previous errors\n "}, {"sha": "e9a9d47ce7cd6e944f316f8f7181f6d2b85363fa", "filename": "src/test/ui/imports/issue-45829/issue-45829.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Fissue-45829.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Fissue-45829.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Fissue-45829.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL | use foo::{A, B as A};\n help: you can use `as` to change the binding name of the import\n    |\n LL | use foo::{A, B as OtherA};\n-   |              ^^^^^^^^^^^\n+   |              ~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "dfb5810c494c693d734b64fd4ee98e5bac651a5e", "filename": "src/test/ui/imports/issue-45829/rename-use-vs-extern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Frename-use-vs-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Frename-use-vs-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Frename-use-vs-extern.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL | use std as issue_45829_b;\n help: you can use `as` to change the binding name of the import\n    |\n LL | use std as other_issue_45829_b;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "5a63af58855419442d2c1c5e37ef95da5935a1d1", "filename": "src/test/ui/imports/issue-45829/rename-use-with-tabs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Frename-use-with-tabs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Frename-use-with-tabs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Frename-use-with-tabs.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL | use foo::{A, bar::B    as    A};\n help: you can use `as` to change the binding name of the import\n    |\n LL | use foo::{A, bar::B as OtherA};\n-   |              ^^^^^^^^^^^^^^^^\n+   |              ~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "2d26b08384e10cbc9bdbf7fb906d75301285bcd9", "filename": "src/test/ui/imports/issue-45829/rename-with-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Frename-with-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Frename-with-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Frename-with-path.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL | use std::{collections::HashMap as A, sync::Arc as A};\n help: you can use `as` to change the binding name of the import\n    |\n LL | use std::{collections::HashMap as A, sync::Arc as OtherA};\n-   |                                      ^^^^^^^^^^^^^^^^^^^\n+   |                                      ~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "ed185ae2a44636fe2d2ce6ec3be5ce883f655aaa", "filename": "src/test/ui/imports/issue-45829/rename.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Frename.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL | use std as core;\n help: you can use `as` to change the binding name of the import\n    |\n LL | use std as other_core;\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "7bb1301edf264806ba2eb47a244ff237c6f5b12d", "filename": "src/test/ui/imports/issue-52891.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-52891.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-52891.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-52891.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -98,7 +98,7 @@ LL | use issue_52891::b::inner;\n help: you can use `as` to change the binding name of the import\n    |\n LL | use issue_52891::b::inner as other_inner;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0254]: the name `issue_52891` is defined multiple times\n   --> $DIR/issue-52891.rs:31:19"}, {"sha": "c2cfc0939d6b3a11d370f67e79fe26f45a2f6e78", "filename": "src/test/ui/imports/issue-59764.stderr", "status": "modified", "additions": 40, "deletions": 34, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-59764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-59764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-59764.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,8 +7,9 @@ LL |     use issue_59764::foo::{baz, makro};\n    = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n help: a macro with this name exists at the root of the crate\n    |\n-LL |     use issue_59764::{makro, foo::{baz}};\n-   |                      ^^^^^^^^^       --^^\n+LL -     use issue_59764::foo::{baz, makro};\n+LL +     use issue_59764::{makro, foo::{baz}};\n+   | \n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n   --> $DIR/issue-59764.rs:21:9\n@@ -19,10 +20,10 @@ LL |         makro,\n    = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n help: a macro with this name exists at the root of the crate\n    |\n-LL |     use issue_59764::{makro, foo::{\n+LL ~     use issue_59764::{makro, foo::{\n LL |         baz,\n-LL |\n-LL |     }};\n+LL ~\n+LL ~     }};\n    |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n@@ -34,10 +35,10 @@ LL |         makro\n    = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n help: a macro with this name exists at the root of the crate\n    |\n-LL |     use issue_59764::{makro, foo::{\n+LL ~     use issue_59764::{makro, foo::{\n LL |         baz,\n-LL |\n-LL |     }};\n+LL ~\n+LL ~     }};\n    |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n@@ -49,8 +50,9 @@ LL |     use issue_59764::foo::{baz, makro, foobar};\n    = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n help: a macro with this name exists at the root of the crate\n    |\n-LL |     use issue_59764::{makro, foo::{baz, foobar}};\n-   |                      ^^^^^^^^^         --      ^^\n+LL -     use issue_59764::foo::{baz, makro, foobar};\n+LL +     use issue_59764::{makro, foo::{baz, foobar}};\n+   | \n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n   --> $DIR/issue-59764.rs:40:9\n@@ -61,11 +63,11 @@ LL |         makro,\n    = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n help: a macro with this name exists at the root of the crate\n    |\n-LL |     use issue_59764::{makro, foo::{\n+LL ~     use issue_59764::{makro, foo::{\n LL |         baz,\n-LL |\n+LL ~\n LL |         foobar,\n-LL |     }};\n+LL ~     }};\n    |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n@@ -77,11 +79,11 @@ LL |         makro,\n    = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n help: a macro with this name exists at the root of the crate\n    |\n-LL |     use issue_59764::{makro, foo::{\n+LL ~     use issue_59764::{makro, foo::{\n LL |         baz,\n-LL |\n+LL ~\n LL |         foobar\n-LL |     }};\n+LL ~     }};\n    |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n@@ -93,8 +95,9 @@ LL |     use issue_59764::{foobaz, foo::makro};\n    = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n help: a macro with this name exists at the root of the crate\n    |\n-LL |     use issue_59764::{makro, foobaz};\n-   |                      ^^^^^^^      --\n+LL -     use issue_59764::{foobaz, foo::makro};\n+LL +     use issue_59764::{makro, foobaz};\n+   | \n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n   --> $DIR/issue-59764.rs:59:42\n@@ -105,8 +108,9 @@ LL |     use issue_59764::{foobaz, foo::{baz, makro}};\n    = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n help: a macro with this name exists at the root of the crate\n    |\n-LL |     use issue_59764::{makro, foobaz, foo::{baz}};\n-   |                      ^^^^^^^                 --\n+LL -     use issue_59764::{foobaz, foo::{baz, makro}};\n+LL +     use issue_59764::{makro, foobaz, foo::{baz}};\n+   | \n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n   --> $DIR/issue-59764.rs:68:13\n@@ -117,11 +121,11 @@ LL |             makro,\n    = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n help: a macro with this name exists at the root of the crate\n    |\n-LL |     use issue_59764::{makro, \n+LL ~     use issue_59764::{makro, \n LL |         foobaz,\n LL |         foo::{\n LL |             baz,\n-LL |\n+LL ~\n    |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n@@ -133,11 +137,11 @@ LL |             makro\n    = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n help: a macro with this name exists at the root of the crate\n    |\n-LL |     use issue_59764::{makro, \n+LL ~     use issue_59764::{makro, \n LL |         foobaz,\n LL |         foo::{\n LL |             baz,\n-LL |\n+LL ~\n    |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n@@ -149,8 +153,9 @@ LL |     use issue_59764::{foobaz, foo::{baz, makro, barbaz::{barfoo}}};\n    = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n help: a macro with this name exists at the root of the crate\n    |\n-LL |     use issue_59764::{makro, foobaz, foo::{baz, barbaz::{barfoo}}};\n-   |                      ^^^^^^^                   --\n+LL -     use issue_59764::{foobaz, foo::{baz, makro, barbaz::{barfoo}}};\n+LL +     use issue_59764::{makro, foobaz, foo::{baz, barbaz::{barfoo}}};\n+   | \n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n   --> $DIR/issue-59764.rs:93:13\n@@ -161,11 +166,11 @@ LL |             makro,\n    = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n help: a macro with this name exists at the root of the crate\n    |\n-LL |     use issue_59764::{makro, \n+LL ~     use issue_59764::{makro, \n LL |         foobaz,\n LL |         foo::{\n LL |             baz,\n-LL |\n+LL ~\n    |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n@@ -178,7 +183,7 @@ LL |     use issue_59764::foo::makro as baz;\n help: a macro with this name exists at the root of the crate\n    |\n LL |     use issue_59764::makro as baz;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n   --> $DIR/issue-59764.rs:107:33\n@@ -189,8 +194,9 @@ LL |     use issue_59764::foo::{baz, makro as foobar};\n    = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n help: a macro with this name exists at the root of the crate\n    |\n-LL |     use issue_59764::{makro as foobar, foo::{baz}};\n-   |                      ^^^^^^^^^^^^^^^^^^^       --^^\n+LL -     use issue_59764::foo::{baz, makro as foobar};\n+LL +     use issue_59764::{makro as foobar, foo::{baz}};\n+   | \n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n   --> $DIR/issue-59764.rs:120:17\n@@ -201,12 +207,12 @@ LL |                 makro as foobar}\n    = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n help: a macro with this name exists at the root of the crate\n    |\n-LL |         issue_59764::{makro as foobar, \n+LL ~         issue_59764::{makro as foobar, \n LL | \n LL |             foobaz,\n LL | \n LL | \n-LL |             foo::{baz}\n+LL ~             foo::{baz}\n    |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n@@ -219,7 +225,7 @@ LL | use issue_59764::foo::makro;\n help: a macro with this name exists at the root of the crate\n    |\n LL | use issue_59764::makro;\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |     ~~~~~~~~~~~~~~~~~~\n \n error: cannot determine resolution for the macro `makro`\n   --> $DIR/issue-59764.rs:130:1"}, {"sha": "ab44f067fe7448186eb9c51530e53e6c022bc0cc", "filename": "src/test/ui/imports/issue-8640.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-8640.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fimports%2Fissue-8640.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-8640.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL |     mod bar {}\n help: you can use `as` to change the binding name of the import\n    |\n LL |     use baz::bar as other_bar;\n-   |         ^^^^^^^^^^^^^^^^^^^^^\n+   |         ~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "20369a543b3ae02256e5c3bffa1ad5d131b294ef", "filename": "src/test/ui/in-band-lifetimes/issue-61124-anon-lifetime-in-struct-declaration.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL | struct Heartbreak(Betrayal);\n help: consider introducing a named lifetime parameter\n    |\n LL | struct Heartbreak<'a>(Betrayal<'a>);\n-   |                  ^^^^ ^^^^^^^^^^^^\n+   |                  ++++ ~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "5f0de61e69d29177e49267eebddf3a6094182b6b", "filename": "src/test/ui/in-band-lifetimes/no_introducing_in_band_in_locals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -16,11 +16,11 @@ LL |     let y: fn(&'test u32) = foo2;\n help: consider introducing lifetime `'test` here\n    |\n LL | fn bar<'test>() {\n-   |       ^^^^^^^\n+   |       +++++++\n help: consider making the type lifetime-generic with a new `'test` lifetime\n    |\n LL |     let y: for<'test> fn(&'test u32) = foo2;\n-   |            ^^^^^^^^^^\n+   |            ++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1bcb89de2bad4ad1f21e583334f9729d7f9a4895", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -16,7 +16,7 @@ LL |     bar::<isize>(i);  // i should not be re-coerced back to an isize\n help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     bar::<isize>(i.try_into().unwrap());  // i should not be re-coerced back to an isize\n-   |                  ^^^^^^^^^^^^^^^^^^^^^\n+   |                  ~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f8026fafeb2c4db7ed39c95508d8bcf88f833d8a", "filename": "src/test/ui/inference/cannot-infer-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |         Ok(b)\n help: give this closure an explicit return type without `_` placeholders\n    |\n LL |     let x = |a: (), b: ()| -> Result<(), _> {\n-   |                            ^^^^^^^^^^^^^^^^\n+   |                            ++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "3542eb6848caf23863446267634a03dbd9f10791", "filename": "src/test/ui/inference/cannot-infer-partial-try-return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |         infallible()?;\n help: give this closure an explicit return type without `_` placeholders\n    |\n LL |     let x = || -> Result<(), QualifiedError<_>> {\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "4ddede29c85550457a1a5c9bc4909dd0c9c12c4a", "filename": "src/test/ui/inference/inference_unstable_featured.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Finference%2Finference_unstable_featured.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Finference%2Finference_unstable_featured.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference_unstable_featured.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -9,11 +9,11 @@ LL |     assert_eq!('x'.ipu_flatten(), 0);\n help: disambiguate the associated function for candidate #1\n    |\n LL |     assert_eq!(IpuIterator::ipu_flatten(&'x'), 0);\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n help: disambiguate the associated function for candidate #2\n    |\n LL |     assert_eq!(IpuItertools::ipu_flatten(&'x'), 0);\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "cbefbf83be0a24da6a88ef87fc33a20e637c1d38", "filename": "src/test/ui/infinite/infinite-autoderef.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -7,7 +7,7 @@ LL |         x = box x;\n help: try using a conversion method\n    |\n LL |         x = (box x).to_string();\n-   |             ^     ^^^^^^^^^^^^^\n+   |             +     +++++++++++++\n \n error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n   --> $DIR/infinite-autoderef.rs:25:5"}, {"sha": "7ffb51061b7ddef30788e74da7c96cae47c0ede2", "filename": "src/test/ui/infinite/infinite-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccffcafd55e58f769d4b0efc0064bf65e76998e4/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr?ref=ccffcafd55e58f769d4b0efc0064bf65e76998e4", "patch": "@@ -10,7 +10,7 @@ LL | struct Take(Take);\n help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Take` representable\n    |\n LL | struct Take(Box<Take>);\n-   |             ^^^^    ^\n+   |             ++++    +\n \n error[E0391]: cycle detected when computing drop-check constraints for `Take`\n   --> $DIR/infinite-struct.rs:1:1"}]}