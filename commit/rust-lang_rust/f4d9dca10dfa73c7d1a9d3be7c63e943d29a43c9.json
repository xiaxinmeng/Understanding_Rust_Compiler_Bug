{"sha": "f4d9dca10dfa73c7d1a9d3be7c63e943d29a43c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZDlkY2ExMGRmYTczYzdkMWE5ZDNiZTdjNjNlOTQzZDI5YTQzYzk=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-20T12:21:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-21T16:54:31Z"}, "message": "Group union, intersect and difference in Bitv.", "tree": {"sha": "8c095cd084948f21f38718db32c7f9382b855157", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c095cd084948f21f38718db32c7f9382b855157"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4d9dca10dfa73c7d1a9d3be7c63e943d29a43c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4d9dca10dfa73c7d1a9d3be7c63e943d29a43c9", "html_url": "https://github.com/rust-lang/rust/commit/f4d9dca10dfa73c7d1a9d3be7c63e943d29a43c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4d9dca10dfa73c7d1a9d3be7c63e943d29a43c9/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e40078fc3325f336b1e0d27313d67ad6ae19419", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e40078fc3325f336b1e0d27313d67ad6ae19419", "html_url": "https://github.com/rust-lang/rust/commit/2e40078fc3325f336b1e0d27313d67ad6ae19419"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "3c95d500f16827833e15bf51a44f5c946c356317", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f4d9dca10dfa73c7d1a9d3be7c63e943d29a43c9/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d9dca10dfa73c7d1a9d3be7c63e943d29a43c9/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=f4d9dca10dfa73c7d1a9d3be7c63e943d29a43c9", "patch": "@@ -170,28 +170,6 @@ impl Bitv {\n         }\n     }\n \n-    /**\n-     * Calculates the union of two bitvectors\n-     *\n-     * Sets `self` to the union of `self` and `v1`. Both bitvectors must be\n-     * the same length. Returns `true` if `self` changed.\n-    */\n-    #[inline]\n-    pub fn union(&mut self, other: &Bitv) -> bool {\n-        self.process(other, |w1, w2| w1 | w2)\n-    }\n-\n-    /**\n-     * Calculates the intersection of two bitvectors\n-     *\n-     * Sets `self` to the intersection of `self` and `v1`. Both bitvectors\n-     * must be the same length. Returns `true` if `self` changed.\n-    */\n-    #[inline]\n-    pub fn intersect(&mut self, other: &Bitv) -> bool {\n-        self.process(other, |w1, w2| w1 & w2)\n-    }\n-\n     /// Retrieve the value at index `i`\n     #[inline]\n     pub fn get(&self, i: uint) -> bool {\n@@ -229,6 +207,28 @@ impl Bitv {\n         for w in self.storage.mut_iter() { *w = !*w; }\n     }\n \n+    /**\n+     * Calculates the union of two bitvectors\n+     *\n+     * Sets `self` to the union of `self` and `v1`. Both bitvectors must be\n+     * the same length. Returns `true` if `self` changed.\n+    */\n+    #[inline]\n+    pub fn union(&mut self, other: &Bitv) -> bool {\n+        self.process(other, |w1, w2| w1 | w2)\n+    }\n+\n+    /**\n+     * Calculates the intersection of two bitvectors\n+     *\n+     * Sets `self` to the intersection of `self` and `v1`. Both bitvectors\n+     * must be the same length. Returns `true` if `self` changed.\n+    */\n+    #[inline]\n+    pub fn intersect(&mut self, other: &Bitv) -> bool {\n+        self.process(other, |w1, w2| w1 & w2)\n+    }\n+\n     /**\n      * Calculate the difference between two bitvectors\n      *"}]}