{"sha": "268408f495f5fe225269842837ec1e49b498c881", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ODQwOGY0OTVmNWZlMjI1MjY5ODQyODM3ZWMxZTQ5YjQ5OGM4ODE=", "commit": {"author": {"name": "dylan_DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-27T02:21:15Z"}, "committer": {"name": "dylan_DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-27T02:21:15Z"}, "message": "remove unused import", "tree": {"sha": "8b7ef5bda33cf18b863019bf1a6b6566bde3e93d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b7ef5bda33cf18b863019bf1a6b6566bde3e93d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/268408f495f5fe225269842837ec1e49b498c881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/268408f495f5fe225269842837ec1e49b498c881", "html_url": "https://github.com/rust-lang/rust/commit/268408f495f5fe225269842837ec1e49b498c881", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/268408f495f5fe225269842837ec1e49b498c881/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e7c2f19a3ab215fd4ef4ba983d52aeacf35d3c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e7c2f19a3ab215fd4ef4ba983d52aeacf35d3c4", "html_url": "https://github.com/rust-lang/rust/commit/7e7c2f19a3ab215fd4ef4ba983d52aeacf35d3c4"}], "stats": {"total": 1, "additions": 0, "deletions": 1}, "files": [{"sha": "daa880e7cd53b4b35fa5115717dbda8149824c22", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/268408f495f5fe225269842837ec1e49b498c881/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/268408f495f5fe225269842837ec1e49b498c881/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=268408f495f5fe225269842837ec1e49b498c881", "patch": "@@ -2016,7 +2016,6 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// #![feature(iterator_fold_self)]\n-    /// use std::cmp::Ordering;\n     ///\n     /// fn find_max<I>(iter: I) -> Option<I::Item>\n     ///     where I: Iterator,"}]}