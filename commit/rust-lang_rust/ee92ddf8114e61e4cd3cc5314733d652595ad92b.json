{"sha": "ee92ddf8114e61e4cd3cc5314733d652595ad92b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOTJkZGY4MTE0ZTYxZTRjZDNjYzUzMTQ3MzNkNjUyNTk1YWQ5MmI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-23T22:00:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-23T22:00:51Z"}, "message": "Rollup merge of #72489 - nbdd0121:issue-72487, r=Amanieu\n\nFix ice-72487\n\nFixes #72487\n\nr? @Amanieu", "tree": {"sha": "83c3dc0572da6017c5b53fd8ace696e9a6ab6876", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83c3dc0572da6017c5b53fd8ace696e9a6ab6876"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee92ddf8114e61e4cd3cc5314733d652595ad92b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeyZ0TCRBK7hj4Ov3rIwAAdHIIAJl/779MV94OeKLHhBWF0WTa\nrWCUfpdv0RdwXoY+S5Nmxx2WyKp3x+FuLQqBp5LULGIBMc4PXyPEns9EdcHBl/n3\nLHNUkwBxpNpxr2zU7Hzxj7sZvN6nNqeaafBQm+mwhzqYdeBI7Gs7XAkl89sbPyoW\ncMTsyCclUrLvWslRm20zUpdtBOJ8kGpiLWkuxcOG/F4bqExxDqdlD2bqIMo/3H3n\n84gVNlQ8D8g6f10N0Mqtq8e4ZDWNuj87D2D+URbnqvioAKiHq7o/YBL+1tBHU6E1\nmne11thaEefkCBf5I7pkedEo+pweUofoA4WpvMYLYsiNFnQa/x1m+0tMVjr4Lxo=\n=d8jf\n-----END PGP SIGNATURE-----\n", "payload": "tree 83c3dc0572da6017c5b53fd8ace696e9a6ab6876\nparent 3948e6070036f3ff2577da6041860dc77c4443b5\nparent e04baed0db5aa880f0b9fcdfcf9295159dd3ee01\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590271251 +0200\ncommitter GitHub <noreply@github.com> 1590271251 +0200\n\nRollup merge of #72489 - nbdd0121:issue-72487, r=Amanieu\n\nFix ice-72487\n\nFixes #72487\n\nr? @Amanieu\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee92ddf8114e61e4cd3cc5314733d652595ad92b", "html_url": "https://github.com/rust-lang/rust/commit/ee92ddf8114e61e4cd3cc5314733d652595ad92b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee92ddf8114e61e4cd3cc5314733d652595ad92b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3948e6070036f3ff2577da6041860dc77c4443b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3948e6070036f3ff2577da6041860dc77c4443b5", "html_url": "https://github.com/rust-lang/rust/commit/3948e6070036f3ff2577da6041860dc77c4443b5"}, {"sha": "e04baed0db5aa880f0b9fcdfcf9295159dd3ee01", "url": "https://api.github.com/repos/rust-lang/rust/commits/e04baed0db5aa880f0b9fcdfcf9295159dd3ee01", "html_url": "https://github.com/rust-lang/rust/commit/e04baed0db5aa880f0b9fcdfcf9295159dd3ee01"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "774146a679ab8aecb1e1dd58821e01b25aeaf65a", "filename": "src/librustc_target/asm/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ee92ddf8114e61e4cd3cc5314733d652595ad92b/src%2Flibrustc_target%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee92ddf8114e61e4cd3cc5314733d652595ad92b/src%2Flibrustc_target%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Fmod.rs?ref=ee92ddf8114e61e4cd3cc5314733d652595ad92b", "patch": "@@ -223,19 +223,19 @@ impl InlineAsmReg {\n         name: Symbol,\n     ) -> Result<Self, &'static str> {\n         // FIXME: use direct symbol comparison for register names\n-        name.with(|name| {\n-            Ok(match arch {\n-                InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n-                    Self::X86(X86InlineAsmReg::parse(arch, has_feature, name)?)\n-                }\n-                InlineAsmArch::Arm => Self::Arm(ArmInlineAsmReg::parse(arch, has_feature, name)?),\n-                InlineAsmArch::AArch64 => {\n-                    Self::AArch64(AArch64InlineAsmReg::parse(arch, has_feature, name)?)\n-                }\n-                InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n-                    Self::RiscV(RiscVInlineAsmReg::parse(arch, has_feature, name)?)\n-                }\n-            })\n+        // Use `Symbol::as_str` instead of `Symbol::with` here because `has_feature` may access `Symbol`.\n+        let name = name.as_str();\n+        Ok(match arch {\n+            InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n+                Self::X86(X86InlineAsmReg::parse(arch, has_feature, &name)?)\n+            }\n+            InlineAsmArch::Arm => Self::Arm(ArmInlineAsmReg::parse(arch, has_feature, &name)?),\n+            InlineAsmArch::AArch64 => {\n+                Self::AArch64(AArch64InlineAsmReg::parse(arch, has_feature, &name)?)\n+            }\n+            InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n+                Self::RiscV(RiscVInlineAsmReg::parse(arch, has_feature, &name)?)\n+            }\n         })\n     }\n "}]}