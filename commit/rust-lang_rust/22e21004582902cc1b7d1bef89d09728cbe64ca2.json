{"sha": "22e21004582902cc1b7d1bef89d09728cbe64ca2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZTIxMDA0NTgyOTAyY2MxYjdkMWJlZjg5ZDA5NzI4Y2JlNjRjYTI=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-21T00:09:44Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-30T00:05:40Z"}, "message": "make Arc mem::forget safe", "tree": {"sha": "f083fd26a7dae250a46b4ff984471a7eb6c2b510", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f083fd26a7dae250a46b4ff984471a7eb6c2b510"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22e21004582902cc1b7d1bef89d09728cbe64ca2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22e21004582902cc1b7d1bef89d09728cbe64ca2", "html_url": "https://github.com/rust-lang/rust/commit/22e21004582902cc1b7d1bef89d09728cbe64ca2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22e21004582902cc1b7d1bef89d09728cbe64ca2/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ffe3453cb2bd4cc031b4f8a4bdb88279e01e094", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ffe3453cb2bd4cc031b4f8a4bdb88279e01e094", "html_url": "https://github.com/rust-lang/rust/commit/1ffe3453cb2bd4cc031b4f8a4bdb88279e01e094"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "46f5df02d55e2ecc455e39b46d16b7a1eff2c7bd", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/22e21004582902cc1b7d1bef89d09728cbe64ca2/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e21004582902cc1b7d1bef89d09728cbe64ca2/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=22e21004582902cc1b7d1bef89d09728cbe64ca2", "patch": "@@ -78,16 +78,18 @@ use core::atomic::Ordering::{Relaxed, Release, Acquire, SeqCst};\n use core::fmt;\n use core::cmp::Ordering;\n use core::mem::{align_of_val, size_of_val};\n-use core::intrinsics::drop_in_place;\n+use core::intrinsics::{drop_in_place, abort};\n use core::mem;\n use core::nonzero::NonZero;\n use core::ops::{Deref, CoerceUnsized};\n use core::ptr;\n use core::marker::Unsize;\n use core::hash::{Hash, Hasher};\n-use core::usize;\n+use core::{usize, isize};\n use heap::deallocate;\n \n+const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n+\n /// An atomically reference counted wrapper for shared state.\n ///\n /// # Examples\n@@ -311,7 +313,21 @@ impl<T: ?Sized> Clone for Arc<T> {\n         // another must already provide any required synchronization.\n         //\n         // [1]: (www.boost.org/doc/libs/1_55_0/doc/html/atomic/usage_examples.html)\n-        self.inner().strong.fetch_add(1, Relaxed);\n+        let old_size = self.inner().strong.fetch_add(1, Relaxed);\n+\n+        // However we need to guard against massive refcounts in case someone\n+        // is `mem::forget`ing Arcs. If we don't do this the count can overflow\n+        // and users will use-after free. We racily saturate to `isize::MAX` on\n+        // the assumption that there aren't ~2 billion threads incrementing\n+        // the reference count at once. This branch will never be taken in\n+        // any realistic program.\n+        //\n+        // We abort because such a program is incredibly degenerate, and we\n+        // don't care to support it.\n+        if old_size > MAX_REFCOUNT {\n+            unsafe { abort(); }\n+        }\n+\n         Arc { _ptr: self._ptr }\n     }\n }\n@@ -612,7 +628,13 @@ impl<T: ?Sized> Clone for Weak<T> {\n         // fetch_add (ignoring the lock) because the weak count is only locked\n         // where are *no other* weak pointers in existence. (So we can't be\n         // running this code in that case).\n-        self.inner().weak.fetch_add(1, Relaxed);\n+        let old_size = self.inner().weak.fetch_add(1, Relaxed);\n+\n+        // See comments in Arc::clone() for why we do this (for mem::forget).\n+        if old_size > MAX_REFCOUNT {\n+            unsafe { abort(); }\n+        }\n+\n         return Weak { _ptr: self._ptr }\n     }\n }"}]}