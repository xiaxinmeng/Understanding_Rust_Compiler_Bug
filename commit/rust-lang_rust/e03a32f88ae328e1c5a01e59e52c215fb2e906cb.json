{"sha": "e03a32f88ae328e1c5a01e59e52c215fb2e906cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwM2EzMmY4OGFlMzI4ZTFjNWEwMWU1OWU1MmMyMTVmYjJlOTA2Y2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-08T08:14:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-08T08:14:31Z"}, "message": "Auto merge of #5019 - JohnTitor:follow-up-normalize, r=phansch\n\nNormalize lint messages in cast_precision_loss\n\nFollow-up of #5000\n\nchangelog: none", "tree": {"sha": "20e34f45f38ca3e280b4294de6a83cb742d808b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20e34f45f38ca3e280b4294de6a83cb742d808b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e03a32f88ae328e1c5a01e59e52c215fb2e906cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e03a32f88ae328e1c5a01e59e52c215fb2e906cb", "html_url": "https://github.com/rust-lang/rust/commit/e03a32f88ae328e1c5a01e59e52c215fb2e906cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e03a32f88ae328e1c5a01e59e52c215fb2e906cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baa5cc17dab62161990ea9cea649e4301dff5c32", "url": "https://api.github.com/repos/rust-lang/rust/commits/baa5cc17dab62161990ea9cea649e4301dff5c32", "html_url": "https://github.com/rust-lang/rust/commit/baa5cc17dab62161990ea9cea649e4301dff5c32"}, {"sha": "787106c3802110499a6eb80874c00f7694fb748a", "url": "https://api.github.com/repos/rust-lang/rust/commits/787106c3802110499a6eb80874c00f7694fb748a", "html_url": "https://github.com/rust-lang/rust/commit/787106c3802110499a6eb80874c00f7694fb748a"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "f53c7843c4fcc3fecb1b54505dc4351573061257", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e03a32f88ae328e1c5a01e59e52c215fb2e906cb/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03a32f88ae328e1c5a01e59e52c215fb2e906cb/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=e03a32f88ae328e1c5a01e59e52c215fb2e906cb", "patch": "@@ -953,8 +953,8 @@ fn span_precision_loss_lint(cx: &LateContext<'_, '_>, expr: &Expr<'_>, cast_from\n         CAST_PRECISION_LOSS,\n         expr.span,\n         &format!(\n-            \"casting {0} to {1} causes a loss of precision {2}({0} is {3} bits wide, but {1}'s mantissa \\\n-             is only {4} bits wide)\",\n+            \"casting `{0}` to `{1}` causes a loss of precision {2}(`{0}` is {3} bits wide, \\\n+             but `{1}`'s mantissa is only {4} bits wide)\",\n             cast_from,\n             if cast_to_f64 { \"f64\" } else { \"f32\" },\n             if arch_dependent { arch_dependent_str } else { \"\" },"}, {"sha": "4c66d736494843955903b39f917ac5ee187f61d5", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e03a32f88ae328e1c5a01e59e52c215fb2e906cb/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e03a32f88ae328e1c5a01e59e52c215fb2e906cb/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=e03a32f88ae328e1c5a01e59e52c215fb2e906cb", "patch": "@@ -1,36 +1,36 @@\n-error: casting i32 to f32 causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+error: casting `i32` to `f32` causes a loss of precision (`i32` is 32 bits wide, but `f32`'s mantissa is only 23 bits wide)\n   --> $DIR/cast.rs:11:5\n    |\n LL |     x0 as f32;\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::cast-precision-loss` implied by `-D warnings`\n \n-error: casting i64 to f32 causes a loss of precision (i64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n+error: casting `i64` to `f32` causes a loss of precision (`i64` is 64 bits wide, but `f32`'s mantissa is only 23 bits wide)\n   --> $DIR/cast.rs:13:5\n    |\n LL |     x1 as f32;\n    |     ^^^^^^^^^\n \n-error: casting i64 to f64 causes a loss of precision (i64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+error: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\n   --> $DIR/cast.rs:14:5\n    |\n LL |     x1 as f64;\n    |     ^^^^^^^^^\n \n-error: casting u32 to f32 causes a loss of precision (u32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+error: casting `u32` to `f32` causes a loss of precision (`u32` is 32 bits wide, but `f32`'s mantissa is only 23 bits wide)\n   --> $DIR/cast.rs:16:5\n    |\n LL |     x2 as f32;\n    |     ^^^^^^^^^\n \n-error: casting u64 to f32 causes a loss of precision (u64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n+error: casting `u64` to `f32` causes a loss of precision (`u64` is 64 bits wide, but `f32`'s mantissa is only 23 bits wide)\n   --> $DIR/cast.rs:18:5\n    |\n LL |     x3 as f32;\n    |     ^^^^^^^^^\n \n-error: casting u64 to f64 causes a loss of precision (u64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+error: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\n   --> $DIR/cast.rs:19:5\n    |\n LL |     x3 as f64;"}, {"sha": "95552f2e285396dd05db7fb3b6993d9113ee408c", "filename": "tests/ui/cast_size.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e03a32f88ae328e1c5a01e59e52c215fb2e906cb/tests%2Fui%2Fcast_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e03a32f88ae328e1c5a01e59e52c215fb2e906cb/tests%2Fui%2Fcast_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.stderr?ref=e03a32f88ae328e1c5a01e59e52c215fb2e906cb", "patch": "@@ -6,27 +6,27 @@ LL |     1isize as i8;\n    |\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n \n-error: casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+error: casting `isize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`isize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\n   --> $DIR/cast_size.rs:15:5\n    |\n LL |     x0 as f64;\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::cast-precision-loss` implied by `-D warnings`\n \n-error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+error: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\n   --> $DIR/cast_size.rs:16:5\n    |\n LL |     x1 as f64;\n    |     ^^^^^^^^^\n \n-error: casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+error: casting `isize` to `f32` causes a loss of precision (`isize` is 32 or 64 bits wide, but `f32`'s mantissa is only 23 bits wide)\n   --> $DIR/cast_size.rs:17:5\n    |\n LL |     x0 as f32;\n    |     ^^^^^^^^^\n \n-error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+error: casting `usize` to `f32` causes a loss of precision (`usize` is 32 or 64 bits wide, but `f32`'s mantissa is only 23 bits wide)\n   --> $DIR/cast_size.rs:18:5\n    |\n LL |     x1 as f32;\n@@ -100,13 +100,13 @@ error: casting `u32` to `isize` may wrap around the value on targets with 32-bit\n LL |     1u32 as isize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting i32 to f32 causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+error: casting `i32` to `f32` causes a loss of precision (`i32` is 32 bits wide, but `f32`'s mantissa is only 23 bits wide)\n   --> $DIR/cast_size.rs:33:5\n    |\n LL |     999_999_999 as f32;\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+error: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\n   --> $DIR/cast_size.rs:34:5\n    |\n LL |     9_999_999_999_999_999usize as f64;"}, {"sha": "2eec51895f59fc3e4f2eae1f2d346c9adde55d6b", "filename": "tests/ui/cast_size_32bit.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e03a32f88ae328e1c5a01e59e52c215fb2e906cb/tests%2Fui%2Fcast_size_32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e03a32f88ae328e1c5a01e59e52c215fb2e906cb/tests%2Fui%2Fcast_size_32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size_32bit.stderr?ref=e03a32f88ae328e1c5a01e59e52c215fb2e906cb", "patch": "@@ -6,7 +6,7 @@ LL |     1isize as i8;\n    |\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n \n-error: casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+error: casting `isize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`isize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\n   --> $DIR/cast_size_32bit.rs:15:5\n    |\n LL |     x0 as f64;\n@@ -22,7 +22,7 @@ LL |     x0 as f64;\n    |\n    = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n-error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+error: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\n   --> $DIR/cast_size_32bit.rs:16:5\n    |\n LL |     x1 as f64;\n@@ -34,13 +34,13 @@ error: casting `usize` to `f64` may become silently lossy if you later change th\n LL |     x1 as f64;\n    |     ^^^^^^^^^ help: try: `f64::from(x1)`\n \n-error: casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+error: casting `isize` to `f32` causes a loss of precision (`isize` is 32 or 64 bits wide, but `f32`'s mantissa is only 23 bits wide)\n   --> $DIR/cast_size_32bit.rs:17:5\n    |\n LL |     x0 as f32;\n    |     ^^^^^^^^^\n \n-error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+error: casting `usize` to `f32` causes a loss of precision (`usize` is 32 or 64 bits wide, but `f32`'s mantissa is only 23 bits wide)\n   --> $DIR/cast_size_32bit.rs:18:5\n    |\n LL |     x1 as f32;\n@@ -114,7 +114,7 @@ error: casting `u32` to `isize` may wrap around the value on targets with 32-bit\n LL |     1u32 as isize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting i32 to f32 causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+error: casting `i32` to `f32` causes a loss of precision (`i32` is 32 bits wide, but `f32`'s mantissa is only 23 bits wide)\n   --> $DIR/cast_size_32bit.rs:33:5\n    |\n LL |     999_999_999 as f32;"}]}