{"sha": "70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZjhlMWE1NmY0Yzg4Yjg1OTliMTdmNmFiNTU4N2NjYWU3YTg3M2U=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-13T21:02:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-13T21:02:36Z"}, "message": "Rollup merge of #77892 - est31:remove_redundant_absolute_paths, r=lcnr\n\nReplace absolute paths with relative ones\n\nModern compilers allow reaching external crates\nlike std or core via relative paths in modules\noutside of lib.rs and main.rs.", "tree": {"sha": "e8021c6604a99208df7a862f46350caa8ebb9c75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8021c6604a99208df7a862f46350caa8ebb9c75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfhhXtCRBK7hj4Ov3rIwAAdHIIAB9Pf/UuAFf3O1rfCH/OkyGY\nYPL7eGQZ73UZ8OEUps8KLp3yvxmoZw2nHv2/ZrW82AFPCWrD/uiJUsIp3Pj7Q6Jc\nZ85rj4Zn2pUMsY9HOfs1xf0S8gDkxeG+JCRti5r1aEErtNrOuV8hoST384jbRLt4\nyhdyyamMrg8R4EDWOYwkIuZfbMoCTYKZLyBhu41raCWzNpxjYmerGtY6ZI15Uqms\n8PoQQpvmqZ8bUEd59wm9HEUsLpGLxjsJ7qR6c+rjCfXX4Tnst/D6amp/IaWYdAIx\nzn7PcjAjmY8xvWD4waAGEDPONKJUxFl98SBs1Y1ZEd5OM/TxrTt4KMu5zsOyuCo=\n=4fJR\n-----END PGP SIGNATURE-----\n", "payload": "tree e8021c6604a99208df7a862f46350caa8ebb9c75\nparent 083638cfcf891911458efb4a9d50f66ca7bd1fc5\nparent a0fc455d301ba715a10e81bedb1358abbc1d133b\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1602622956 +0900\ncommitter GitHub <noreply@github.com> 1602622956 +0900\n\nRollup merge of #77892 - est31:remove_redundant_absolute_paths, r=lcnr\n\nReplace absolute paths with relative ones\n\nModern compilers allow reaching external crates\nlike std or core via relative paths in modules\noutside of lib.rs and main.rs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "html_url": "https://github.com/rust-lang/rust/commit/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "083638cfcf891911458efb4a9d50f66ca7bd1fc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/083638cfcf891911458efb4a9d50f66ca7bd1fc5", "html_url": "https://github.com/rust-lang/rust/commit/083638cfcf891911458efb4a9d50f66ca7bd1fc5"}, {"sha": "a0fc455d301ba715a10e81bedb1358abbc1d133b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0fc455d301ba715a10e81bedb1358abbc1d133b", "html_url": "https://github.com/rust-lang/rust/commit/a0fc455d301ba715a10e81bedb1358abbc1d133b"}], "stats": {"total": 149, "additions": 73, "deletions": 76}, "files": [{"sha": "88d73f2a8647373fe64fd7059071d03204fae9c7", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -122,7 +122,7 @@ unsafe fn configure_llvm(sess: &Session) {\n \n     llvm::LLVMInitializePasses();\n \n-    ::rustc_llvm::initialize_available_targets();\n+    rustc_llvm::initialize_available_targets();\n \n     llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int, llvm_args.as_ptr());\n }"}, {"sha": "69a94d8f795607063f2dcf6ff462b1f8d2033f27", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -1175,7 +1175,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     // necessary. There's already optimizations in place to avoid sending work\n     // back to the coordinator if LTO isn't requested.\n     return thread::spawn(move || {\n-        let max_workers = ::num_cpus::get();\n+        let max_workers = num_cpus::get();\n         let mut worker_id_counter = 0;\n         let mut free_worker_ids = Vec::new();\n         let mut get_worker_id = |free_worker_ids: &mut Vec<usize>| {"}, {"sha": "7f918bd168e0e228b4e6cf9ec630b8a7e516a266", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -695,7 +695,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         total_codegen_time.into_inner(),\n     );\n \n-    ::rustc_incremental::assert_module_sources::assert_module_sources(tcx);\n+    rustc_incremental::assert_module_sources::assert_module_sources(tcx);\n \n     symbol_names_test::report_symbol_names(tcx);\n \n@@ -754,8 +754,8 @@ impl<B: ExtraBackendMethods> Drop for AbortCodegenOnDrop<B> {\n }\n \n fn finalize_tcx(tcx: TyCtxt<'_>) {\n-    tcx.sess.time(\"assert_dep_graph\", || ::rustc_incremental::assert_dep_graph(tcx));\n-    tcx.sess.time(\"serialize_dep_graph\", || ::rustc_incremental::save_dep_graph(tcx));\n+    tcx.sess.time(\"assert_dep_graph\", || rustc_incremental::assert_dep_graph(tcx));\n+    tcx.sess.time(\"serialize_dep_graph\", || rustc_incremental::save_dep_graph(tcx));\n \n     // We assume that no queries are run past here. If there are new queries\n     // after this point, they'll show up as \"<unknown>\" in self-profiling data."}, {"sha": "82518b7f0c388a948b1c6d38518c41a6d8c815f7", "filename": "compiler/rustc_codegen_ssa/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmod.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -85,7 +85,7 @@ impl<'tcx, T> CodegenMethods<'tcx> for T where\n }\n \n pub trait HasCodegen<'tcx>:\n-    Backend<'tcx> + ::std::ops::Deref<Target = <Self as HasCodegen<'tcx>>::CodegenCx>\n+    Backend<'tcx> + std::ops::Deref<Target = <Self as HasCodegen<'tcx>>::CodegenCx>\n {\n     type CodegenCx: CodegenMethods<'tcx>\n         + BackendTypes<"}, {"sha": "ec2f9597b1827cc7108e2008a01c6bdc5c936e40", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -71,8 +71,8 @@ impl Fingerprint {\n     }\n }\n \n-impl ::std::fmt::Display for Fingerprint {\n-    fn fmt(&self, formatter: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n+impl std::fmt::Display for Fingerprint {\n+    fn fmt(&self, formatter: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         write!(formatter, \"{:x}-{:x}\", self.0, self.1)\n     }\n }"}, {"sha": "c0193e9fa0c4e6794af88c0d20e0125d5ab52c61", "filename": "compiler/rustc_data_structures/src/obligation_forest/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -129,7 +129,7 @@ pub enum ProcessResult<O, E> {\n struct ObligationTreeId(usize);\n \n type ObligationTreeIdGenerator =\n-    ::std::iter::Map<::std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;\n+    std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;\n \n pub struct ObligationForest<O: ForestObligation> {\n     /// The list of obligations. In between calls to `process_obligations`,"}, {"sha": "9a28f8f4e21062d5040d9acec2c8da20150b950f", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -93,7 +93,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n \n     /// Iterate over elements, sorted by key\n     #[inline]\n-    pub fn iter(&self) -> ::std::slice::Iter<'_, (K, V)> {\n+    pub fn iter(&self) -> std::slice::Iter<'_, (K, V)> {\n         self.data.iter()\n     }\n \n@@ -134,7 +134,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n         R: RangeBounds<K>,\n     {\n         let (start, end) = self.range_slice_indices(range);\n-        self.data.splice(start..end, ::std::iter::empty());\n+        self.data.splice(start..end, std::iter::empty());\n     }\n \n     /// Mutate all keys with the given function `f`. This mutation must not\n@@ -241,7 +241,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n \n impl<K: Ord, V> IntoIterator for SortedMap<K, V> {\n     type Item = (K, V);\n-    type IntoIter = ::std::vec::IntoIter<(K, V)>;\n+    type IntoIter = std::vec::IntoIter<(K, V)>;\n \n     fn into_iter(self) -> Self::IntoIter {\n         self.data.into_iter()"}, {"sha": "579eb1cb7da661e741b99f1e43984367fcc56255", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -20,7 +20,7 @@ pub struct StableHasher {\n }\n \n impl ::std::fmt::Debug for StableHasher {\n-    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         write!(f, \"{:?}\", self.state)\n     }\n }"}, {"sha": "8f76551677c1dbd5b4c4c5ac49dc9949f497a993", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -118,7 +118,7 @@ impl DefKey {\n \n         let DisambiguatedDefPathData { ref data, disambiguator } = self.disambiguated_data;\n \n-        ::std::mem::discriminant(data).hash(&mut hasher);\n+        std::mem::discriminant(data).hash(&mut hasher);\n         if let Some(name) = data.get_opt_name() {\n             // Get a stable hash by considering the symbol chars rather than\n             // the symbol index."}, {"sha": "5295ebfafa87016b193ec25ae1a16353fde4c4d2", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -341,7 +341,7 @@ where\n         // been fully instantiated and hence the set of scopes we have\n         // doesn't matter -- just to be sure, put an empty vector\n         // in there.\n-        let old_a_scopes = ::std::mem::take(pair.vid_scopes(self));\n+        let old_a_scopes = std::mem::take(pair.vid_scopes(self));\n \n         // Relate the generalized kind to the original one.\n         let result = pair.relate_generalized_ty(self, generalized_ty);\n@@ -680,7 +680,7 @@ where\n             //   itself occurs. Note that `'b` and `'c` must both\n             //   include P. At the point, the call works because of\n             //   subtyping (i.e., `&'b u32 <: &{P} u32`).\n-            let variance = ::std::mem::replace(&mut self.ambient_variance, ty::Variance::Covariant);\n+            let variance = std::mem::replace(&mut self.ambient_variance, ty::Variance::Covariant);\n \n             self.relate(a.skip_binder(), b.skip_binder())?;\n \n@@ -709,7 +709,7 @@ where\n             // Reset ambient variance to contravariance. See the\n             // covariant case above for an explanation.\n             let variance =\n-                ::std::mem::replace(&mut self.ambient_variance, ty::Variance::Contravariant);\n+                std::mem::replace(&mut self.ambient_variance, ty::Variance::Contravariant);\n \n             self.relate(a.skip_binder(), b.skip_binder())?;\n "}, {"sha": "eb1a7806256c3e219b5a4324da4ddc5ccb0c0610", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -110,7 +110,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n     /// Trait queries just want to pass back type obligations \"as is\"\n     pub fn take_registered_region_obligations(&self) -> Vec<(hir::HirId, RegionObligation<'tcx>)> {\n-        ::std::mem::take(&mut self.inner.borrow_mut().region_obligations)\n+        std::mem::take(&mut self.inner.borrow_mut().region_obligations)\n     }\n \n     /// Process the region obligations that must be proven (during"}, {"sha": "7aba4fc64a929983f5ec782df1087d873582396a", "filename": "compiler/rustc_middle/src/ich/impls_syntax.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -5,7 +5,7 @@ use crate::ich::StableHashingContext;\n \n use rustc_ast as ast;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_span::SourceFile;\n+use rustc_span::{BytePos, NormalizedPos, SourceFile};\n \n use smallvec::SmallVec;\n \n@@ -102,34 +102,28 @@ impl<'a> HashStable<StableHashingContext<'a>> for SourceFile {\n     }\n }\n \n-fn stable_byte_pos(pos: ::rustc_span::BytePos, source_file_start: ::rustc_span::BytePos) -> u32 {\n+fn stable_byte_pos(pos: BytePos, source_file_start: BytePos) -> u32 {\n     pos.0 - source_file_start.0\n }\n \n-fn stable_multibyte_char(\n-    mbc: ::rustc_span::MultiByteChar,\n-    source_file_start: ::rustc_span::BytePos,\n-) -> (u32, u32) {\n-    let ::rustc_span::MultiByteChar { pos, bytes } = mbc;\n+fn stable_multibyte_char(mbc: rustc_span::MultiByteChar, source_file_start: BytePos) -> (u32, u32) {\n+    let rustc_span::MultiByteChar { pos, bytes } = mbc;\n \n     (pos.0 - source_file_start.0, bytes as u32)\n }\n \n fn stable_non_narrow_char(\n-    swc: ::rustc_span::NonNarrowChar,\n-    source_file_start: ::rustc_span::BytePos,\n+    swc: rustc_span::NonNarrowChar,\n+    source_file_start: BytePos,\n ) -> (u32, u32) {\n     let pos = swc.pos();\n     let width = swc.width();\n \n     (pos.0 - source_file_start.0, width as u32)\n }\n \n-fn stable_normalized_pos(\n-    np: ::rustc_span::NormalizedPos,\n-    source_file_start: ::rustc_span::BytePos,\n-) -> (u32, u32) {\n-    let ::rustc_span::NormalizedPos { pos, diff } = np;\n+fn stable_normalized_pos(np: NormalizedPos, source_file_start: BytePos) -> (u32, u32) {\n+    let NormalizedPos { pos, diff } = np;\n \n     (pos.0 - source_file_start.0, diff)\n }"}, {"sha": "5ebe38b2d7e09fe9b659a6aee5ef5c24d9dbbde9", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -40,7 +40,7 @@ pub struct Allocation<Tag = (), Extra = ()> {\n     pub extra: Extra,\n }\n \n-pub trait AllocationExtra<Tag>: ::std::fmt::Debug + Clone {\n+pub trait AllocationExtra<Tag>: std::fmt::Debug + Clone {\n     // There is no constructor in here because the constructor's type depends\n     // on `MemoryKind`, and making things sufficiently generic leads to painful\n     // inference failure."}, {"sha": "893ab79f4f5cf14ebb295c92398045bf96d1018d", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -58,7 +58,7 @@ impl<'tcx> ConstValue<'tcx> {\n \n     pub fn try_to_str_slice(&self) -> Option<&'tcx str> {\n         if let ConstValue::Slice { data, start, end } = *self {\n-            ::std::str::from_utf8(data.inspect_with_uninit_and_ptr_outside_interpreter(start..end))\n+            std::str::from_utf8(data.inspect_with_uninit_and_ptr_outside_interpreter(start..end))\n                 .ok()\n         } else {\n             None\n@@ -465,7 +465,7 @@ impl<'tcx, Tag> Scalar<Tag> {\n \n     pub fn to_char(self) -> InterpResult<'tcx, char> {\n         let val = self.to_u32()?;\n-        match ::std::char::from_u32(val) {\n+        match std::char::from_u32(val) {\n             Some(c) => Ok(c),\n             None => throw_ub!(InvalidChar(val)),\n         }"}, {"sha": "ef0639bcd79187436c06ef35d042430f83247c41", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -775,7 +775,7 @@ mod binding_form_impl {\n     impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for super::BindingForm<'tcx> {\n         fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n             use super::BindingForm::*;\n-            ::std::mem::discriminant(self).hash_stable(hcx, hasher);\n+            std::mem::discriminant(self).hash_stable(hcx, hasher);\n \n             match self {\n                 Var(binding) => binding.hash_stable(hcx, hasher),"}, {"sha": "fd24de1529d3723274c7c48db8d918e62ec2a565", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -1894,7 +1894,7 @@ impl<'tcx, T: HasTyCtxt<'tcx>> HasTyCtxt<'tcx> for LayoutCx<'tcx, T> {\n     }\n }\n \n-pub type TyAndLayout<'tcx> = ::rustc_target::abi::TyAndLayout<'tcx, Ty<'tcx>>;\n+pub type TyAndLayout<'tcx> = rustc_target::abi::TyAndLayout<'tcx, Ty<'tcx>>;\n \n impl<'tcx> LayoutOf for LayoutCx<'tcx, TyCtxt<'tcx>> {\n     type Ty = Ty<'tcx>;"}, {"sha": "a594a8ad51240f8c7d524f5868c08bd47bfb62c4", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -23,7 +23,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     {\n         debug!(\n             \"normalize_erasing_regions::<{}>(value={:?}, param_env={:?})\",\n-            ::std::any::type_name::<T>(),\n+            std::any::type_name::<T>(),\n             value,\n             param_env,\n         );"}, {"sha": "68c36642c88bcac27edb5c1ed450b4f62f043fa6", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -1142,7 +1142,7 @@ pub trait PrettyPrinter<'tcx>:\n                 // relocations (we have an active `str` reference here). We don't use this\n                 // result to affect interpreter execution.\n                 let slice = data.inspect_with_uninit_and_ptr_outside_interpreter(start..end);\n-                let s = ::std::str::from_utf8(slice).expect(\"non utf8 str from miri\");\n+                let s = std::str::from_utf8(slice).expect(\"non utf8 str from miri\");\n                 p!(write(\"{:?}\", s));\n                 Ok(self)\n             }"}, {"sha": "6cfa6dbeccd9668e621261e3cc4524f6850220b7", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -543,7 +543,7 @@ impl<'a, 'tcx> DecoderWithPosition for CacheDecoder<'a, 'tcx> {\n // tag matches and the correct amount of bytes was read.\n fn decode_tagged<D, T, V>(decoder: &mut D, expected_tag: T) -> Result<V, D::Error>\n where\n-    T: Decodable<D> + Eq + ::std::fmt::Debug,\n+    T: Decodable<D> + Eq + std::fmt::Debug,\n     V: Decodable<D>,\n     D: DecoderWithPosition,\n {\n@@ -1023,7 +1023,7 @@ where\n     let _timer = tcx\n         .sess\n         .prof\n-        .extra_verbose_generic_activity(\"encode_query_results_for\", ::std::any::type_name::<Q>());\n+        .extra_verbose_generic_activity(\"encode_query_results_for\", std::any::type_name::<Q>());\n \n     let state = Q::query_state(tcx);\n     assert!(state.all_inactive());"}, {"sha": "8734acad9b228318e3b36e4f1d278ef384afaec0", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -646,8 +646,8 @@ impl<'tcx> ty::TyS<'tcx> {\n             }\n             ty::Char => Some(std::char::MAX as u128),\n             ty::Float(fty) => Some(match fty {\n-                ast::FloatTy::F32 => ::rustc_apfloat::ieee::Single::INFINITY.to_bits(),\n-                ast::FloatTy::F64 => ::rustc_apfloat::ieee::Double::INFINITY.to_bits(),\n+                ast::FloatTy::F32 => rustc_apfloat::ieee::Single::INFINITY.to_bits(),\n+                ast::FloatTy::F64 => rustc_apfloat::ieee::Double::INFINITY.to_bits(),\n             }),\n             _ => None,\n         };"}, {"sha": "66dbacb2f9d4d39af4c2b0421d5f3baf03c1dd27", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -3,6 +3,7 @@\n //! interpreting common C functions leak into CTFE.\n \n use std::borrow::{Borrow, Cow};\n+use std::fmt::Debug;\n use std::hash::Hash;\n \n use rustc_middle::mir;\n@@ -79,19 +80,19 @@ pub trait AllocMap<K: Hash + Eq, V> {\n /// and some use case dependent behaviour can instead be applied.\n pub trait Machine<'mir, 'tcx>: Sized {\n     /// Additional memory kinds a machine wishes to distinguish from the builtin ones\n-    type MemoryKind: ::std::fmt::Debug + ::std::fmt::Display + MayLeak + Eq + 'static;\n+    type MemoryKind: Debug + std::fmt::Display + MayLeak + Eq + 'static;\n \n     /// Tag tracked alongside every pointer. This is used to implement \"Stacked Borrows\"\n     /// <https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html>.\n     /// The `default()` is used for pointers to consts, statics, vtables and functions.\n     /// The `Debug` formatting is used for displaying pointers; we cannot use `Display`\n     /// as `()` does not implement that, but it should be \"nice\" output.\n-    type PointerTag: ::std::fmt::Debug + Copy + Eq + Hash + 'static;\n+    type PointerTag: Debug + Copy + Eq + Hash + 'static;\n \n     /// Machines can define extra (non-instance) things that represent values of function pointers.\n     /// For example, Miri uses this to return a function pointer from `dlsym`\n     /// that can later be called to execute the right thing.\n-    type ExtraFnVal: ::std::fmt::Debug + Copy;\n+    type ExtraFnVal: Debug + Copy;\n \n     /// Extra data stored in every call frame.\n     type FrameExtra;"}, {"sha": "d8f27ec95458b2bc852707e18d8088046f0d4efc", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -133,7 +133,7 @@ impl<Tag: Copy> std::fmt::Display for ImmTy<'tcx, Tag> {\n     }\n }\n \n-impl<'tcx, Tag> ::std::ops::Deref for ImmTy<'tcx, Tag> {\n+impl<'tcx, Tag> std::ops::Deref for ImmTy<'tcx, Tag> {\n     type Target = Immediate<Tag>;\n     #[inline(always)]\n     fn deref(&self) -> &Immediate<Tag> {\n@@ -156,7 +156,7 @@ pub struct OpTy<'tcx, Tag = ()> {\n     pub layout: TyAndLayout<'tcx>,\n }\n \n-impl<'tcx, Tag> ::std::ops::Deref for OpTy<'tcx, Tag> {\n+impl<'tcx, Tag> std::ops::Deref for OpTy<'tcx, Tag> {\n     type Target = Operand<Tag>;\n     #[inline(always)]\n     fn deref(&self) -> &Operand<Tag> {\n@@ -340,7 +340,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn read_str(&self, mplace: MPlaceTy<'tcx, M::PointerTag>) -> InterpResult<'tcx, &str> {\n         let len = mplace.len(self)?;\n         let bytes = self.memory.read_bytes(mplace.ptr, Size::from_bytes(len))?;\n-        let str = ::std::str::from_utf8(bytes).map_err(|err| err_ub!(InvalidStr(err)))?;\n+        let str = std::str::from_utf8(bytes).map_err(|err| err_ub!(InvalidStr(err)))?;\n         Ok(str)\n     }\n "}, {"sha": "fe25f8ce962f0eab27c4e1e5436e1fed9c662f0f", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -3,6 +3,7 @@\n //! All high-level functions to write to memory work on places as destinations.\n \n use std::convert::TryFrom;\n+use std::fmt::Debug;\n use std::hash::Hash;\n \n use rustc_macros::HashStable;\n@@ -86,7 +87,7 @@ pub struct PlaceTy<'tcx, Tag = ()> {\n     pub layout: TyAndLayout<'tcx>,\n }\n \n-impl<'tcx, Tag> ::std::ops::Deref for PlaceTy<'tcx, Tag> {\n+impl<'tcx, Tag> std::ops::Deref for PlaceTy<'tcx, Tag> {\n     type Target = Place<Tag>;\n     #[inline(always)]\n     fn deref(&self) -> &Place<Tag> {\n@@ -101,7 +102,7 @@ pub struct MPlaceTy<'tcx, Tag = ()> {\n     pub layout: TyAndLayout<'tcx>,\n }\n \n-impl<'tcx, Tag> ::std::ops::Deref for MPlaceTy<'tcx, Tag> {\n+impl<'tcx, Tag> std::ops::Deref for MPlaceTy<'tcx, Tag> {\n     type Target = MemPlace<Tag>;\n     #[inline(always)]\n     fn deref(&self) -> &MemPlace<Tag> {\n@@ -226,7 +227,7 @@ impl<'tcx, Tag> MPlaceTy<'tcx, Tag> {\n }\n \n // These are defined here because they produce a place.\n-impl<'tcx, Tag: ::std::fmt::Debug + Copy> OpTy<'tcx, Tag> {\n+impl<'tcx, Tag: Debug + Copy> OpTy<'tcx, Tag> {\n     #[inline(always)]\n     /// Note: do not call `as_ref` on the resulting place. This function should only be used to\n     /// read from the resulting mplace, not to get its address back.\n@@ -251,7 +252,7 @@ impl<'tcx, Tag: ::std::fmt::Debug + Copy> OpTy<'tcx, Tag> {\n     }\n }\n \n-impl<Tag: ::std::fmt::Debug> Place<Tag> {\n+impl<Tag: Debug> Place<Tag> {\n     #[inline]\n     pub fn assert_mem_place(self) -> MemPlace<Tag> {\n         match self {\n@@ -261,7 +262,7 @@ impl<Tag: ::std::fmt::Debug> Place<Tag> {\n     }\n }\n \n-impl<'tcx, Tag: ::std::fmt::Debug> PlaceTy<'tcx, Tag> {\n+impl<'tcx, Tag: Debug> PlaceTy<'tcx, Tag> {\n     #[inline]\n     pub fn assert_mem_place(self) -> MPlaceTy<'tcx, Tag> {\n         MPlaceTy { mplace: self.place.assert_mem_place(), layout: self.layout }\n@@ -272,7 +273,7 @@ impl<'tcx, Tag: ::std::fmt::Debug> PlaceTy<'tcx, Tag> {\n impl<'mir, 'tcx: 'mir, Tag, M> InterpCx<'mir, 'tcx, M>\n where\n     // FIXME: Working around https://github.com/rust-lang/rust/issues/54385\n-    Tag: ::std::fmt::Debug + Copy + Eq + Hash + 'static,\n+    Tag: Debug + Copy + Eq + Hash + 'static,\n     M: Machine<'mir, 'tcx, PointerTag = Tag>,\n     // FIXME: Working around https://github.com/rust-lang/rust/issues/24159\n     M::MemoryMap: AllocMap<AllocId, (MemoryKind<M::MemoryKind>, Allocation<Tag, M::AllocExtra>)>,"}, {"sha": "ffb84950fc92c9319af82e29f9f4054907a83d94", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -137,7 +137,7 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> FxHashSet<LocalDefId> {\n /// Generates a default name for the pass based on the name of the\n /// type `T`.\n pub fn default_name<T: ?Sized>() -> Cow<'static, str> {\n-    let name = ::std::any::type_name::<T>();\n+    let name = std::any::type_name::<T>();\n     if let Some(tail) = name.rfind(':') { Cow::from(&name[tail + 1..]) } else { Cow::from(name) }\n }\n "}, {"sha": "25a8565fb43b3ed46912f6304407f8ac895d94b1", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -96,14 +96,14 @@ impl PatCtxt<'_, '_> {\n                 }\n                 PatternError::FloatBug => {\n                     // FIXME(#31407) this is only necessary because float parsing is buggy\n-                    ::rustc_middle::mir::interpret::struct_error(\n+                    rustc_middle::mir::interpret::struct_error(\n                         self.tcx.at(pat_span),\n                         \"could not evaluate float literal (see issue #31407)\",\n                     )\n                     .emit();\n                 }\n                 PatternError::NonConstPath(span) => {\n-                    ::rustc_middle::mir::interpret::struct_error(\n+                    rustc_middle::mir::interpret::struct_error(\n                         self.tcx.at(span),\n                         \"runtime values cannot be referenced in patterns\",\n                     )"}, {"sha": "d46e9a98825a7de3ca281333cdb0b7b8a59d07d7", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -1060,13 +1060,13 @@ crate fn compare_const_vals<'tcx>(\n         use rustc_apfloat::Float;\n         return match *ty.kind() {\n             ty::Float(ast::FloatTy::F32) => {\n-                let l = ::rustc_apfloat::ieee::Single::from_bits(a);\n-                let r = ::rustc_apfloat::ieee::Single::from_bits(b);\n+                let l = rustc_apfloat::ieee::Single::from_bits(a);\n+                let r = rustc_apfloat::ieee::Single::from_bits(b);\n                 l.partial_cmp(&r)\n             }\n             ty::Float(ast::FloatTy::F64) => {\n-                let l = ::rustc_apfloat::ieee::Double::from_bits(a);\n-                let r = ::rustc_apfloat::ieee::Double::from_bits(b);\n+                let l = rustc_apfloat::ieee::Double::from_bits(a);\n+                let r = rustc_apfloat::ieee::Double::from_bits(b);\n                 l.partial_cmp(&r)\n             }\n             ty::Int(ity) => {"}, {"sha": "8b79c93e7605bf98b706175f06616b37d4eb0aff", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -107,7 +107,7 @@ impl serialize::Encoder for Encoder {\n \n     #[inline]\n     fn emit_i8(&mut self, v: i8) -> EncodeResult {\n-        let as_u8: u8 = unsafe { ::std::mem::transmute(v) };\n+        let as_u8: u8 = unsafe { std::mem::transmute(v) };\n         self.emit_u8(as_u8)\n     }\n \n@@ -300,13 +300,13 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n     #[inline]\n     fn read_char(&mut self) -> Result<char, Self::Error> {\n         let bits = self.read_u32()?;\n-        Ok(::std::char::from_u32(bits).unwrap())\n+        Ok(std::char::from_u32(bits).unwrap())\n     }\n \n     #[inline]\n     fn read_str(&mut self) -> Result<Cow<'_, str>, Self::Error> {\n         let len = self.read_usize()?;\n-        let s = ::std::str::from_utf8(&self.data[self.position..self.position + len]).unwrap();\n+        let s = std::str::from_utf8(&self.data[self.position..self.position + len]).unwrap();\n         self.position += len;\n         Ok(Cow::Borrowed(s))\n     }"}, {"sha": "183a11a5277230ffc92cd0439f63174eccf4d6b1", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -132,7 +132,7 @@ impl SymbolMangler<'tcx> {\n             self.push(\"u\");\n \n             // FIXME(eddyb) we should probably roll our own punycode implementation.\n-            let mut punycode_bytes = match ::punycode::encode(ident) {\n+            let mut punycode_bytes = match punycode::encode(ident) {\n                 Ok(s) => s.into_bytes(),\n                 Err(()) => bug!(\"symbol_names: punycode encoding failed for ident {:?}\", ident),\n             };"}, {"sha": "0584c56c9cb66d9e00efb9ab1ff88c4acaa6791c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -22,6 +22,7 @@ use rustc_middle::ty::{\n use rustc_middle::ty::{TypeAndMut, TypeckResults};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n+use rustc_target::spec::abi;\n use std::fmt;\n \n use super::InferCtxtPrivExt;\n@@ -1157,15 +1158,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     tcx.mk_ty_infer(ty::TyVar(ty::TyVid { index: 0 })),\n                     false,\n                     hir::Unsafety::Normal,\n-                    ::rustc_target::spec::abi::Abi::Rust,\n+                    abi::Abi::Rust,\n                 )\n             } else {\n                 tcx.mk_fn_sig(\n-                    ::std::iter::once(inputs),\n+                    std::iter::once(inputs),\n                     tcx.mk_ty_infer(ty::TyVar(ty::TyVid { index: 0 })),\n                     false,\n                     hir::Unsafety::Normal,\n-                    ::rustc_target::spec::abi::Abi::Rust,\n+                    abi::Abi::Rust,\n                 )\n             };\n             ty::Binder::bind(sig).to_string()"}, {"sha": "d748fc8235e7fc2a09c21dfe412b6e9f93a949bf", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -44,7 +44,7 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n     {\n         debug!(\n             \"normalize::<{}>(value={:?}, param_env={:?})\",\n-            ::std::any::type_name::<T>(),\n+            std::any::type_name::<T>(),\n             value,\n             self.param_env,\n         );\n@@ -65,13 +65,13 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n         let result = value.fold_with(&mut normalizer);\n         debug!(\n             \"normalize::<{}>: result={:?} with {} obligations\",\n-            ::std::any::type_name::<T>(),\n+            std::any::type_name::<T>(),\n             result,\n             normalizer.obligations.len(),\n         );\n         debug!(\n             \"normalize::<{}>: obligations={:?}\",\n-            ::std::any::type_name::<T>(),\n+            std::any::type_name::<T>(),\n             normalizer.obligations,\n         );\n         if normalizer.error {"}, {"sha": "fcb0d6031be62f2b9816107307d95e8ed8c94bd1", "filename": "library/core/tests/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -204,8 +204,8 @@ macro_rules! int_module {\n \n             #[test]\n             fn test_from_str() {\n-                fn from_str<T: ::std::str::FromStr>(t: &str) -> Option<T> {\n-                    ::std::str::FromStr::from_str(t).ok()\n+                fn from_str<T: std::str::FromStr>(t: &str) -> Option<T> {\n+                    std::str::FromStr::from_str(t).ok()\n                 }\n                 assert_eq!(from_str::<$T>(\"0\"), Some(0 as $T));\n                 assert_eq!(from_str::<$T>(\"3\"), Some(3 as $T));"}, {"sha": "41e7e6adcf16d884bcb307483486aafff01f33ca", "filename": "library/test/src/formatters/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f8e1a56f4c88b8599b17f6ab5587ccae7a873e/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs?ref=70f8e1a56f4c88b8599b17f6ab5587ccae7a873e", "patch": "@@ -182,8 +182,8 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n /// Base code taken form `libserialize::json::escape_str`\n struct EscapedString<S: AsRef<str>>(S);\n \n-impl<S: AsRef<str>> ::std::fmt::Display for EscapedString<S> {\n-    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n+impl<S: AsRef<str>> std::fmt::Display for EscapedString<S> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n         let mut start = 0;\n \n         for (i, byte) in self.0.as_ref().bytes().enumerate() {"}]}