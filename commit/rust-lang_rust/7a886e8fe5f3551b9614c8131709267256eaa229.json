{"sha": "7a886e8fe5f3551b9614c8131709267256eaa229", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhODg2ZThmZTVmMzU1MWI5NjE0YzgxMzE3MDkyNjcyNTZlYWEyMjk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-04-20T01:42:27Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-04-20T01:42:27Z"}, "message": "Refactoring around write mode in main", "tree": {"sha": "12beeed57d1c07ff8811fac4efd2eebb8f968ee7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12beeed57d1c07ff8811fac4efd2eebb8f968ee7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a886e8fe5f3551b9614c8131709267256eaa229", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a886e8fe5f3551b9614c8131709267256eaa229", "html_url": "https://github.com/rust-lang/rust/commit/7a886e8fe5f3551b9614c8131709267256eaa229", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a886e8fe5f3551b9614c8131709267256eaa229/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a73f14aa9563738b9de12c612e6add412a36dd40", "url": "https://api.github.com/repos/rust-lang/rust/commits/a73f14aa9563738b9de12c612e6add412a36dd40", "html_url": "https://github.com/rust-lang/rust/commit/a73f14aa9563738b9de12c612e6add412a36dd40"}], "stats": {"total": 37, "additions": 15, "deletions": 22}, "files": [{"sha": "abc313ab8ed109fd64c31f6e9e4927c163cf0766", "filename": "src/bin/main.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7a886e8fe5f3551b9614c8131709267256eaa229/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a886e8fe5f3551b9614c8131709267256eaa229/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=7a886e8fe5f3551b9614c8131709267256eaa229", "patch": "@@ -35,11 +35,9 @@ const WRITE_MODE_LIST: &str = \"[replace|overwrite|display|plain|diff|coverage|ch\n fn main() {\n     env_logger::init();\n     let opts = make_opts();\n-    // Only handles arguments passed in through the CLI.\n-    let write_mode = determine_write_mode(&opts);\n \n     let exit_code = match execute(&opts) {\n-        Ok(summary) => {\n+        Ok((write_mode, summary)) => {\n             if summary.has_operational_errors()\n                 || summary.has_diff && write_mode == WriteMode::Check\n                 || summary.has_parsing_errors() || summary.has_formatting_errors()\n@@ -248,22 +246,22 @@ fn make_opts() -> Options {\n     opts\n }\n \n-fn execute(opts: &Options) -> FmtResult<Summary> {\n+fn execute(opts: &Options) -> FmtResult<(WriteMode, Summary)> {\n     let matches = opts.parse(env::args().skip(1))?;\n \n     match determine_operation(&matches)? {\n         Operation::Help => {\n             print_usage_to_stdout(opts, \"\");\n             Summary::print_exit_codes();\n-            Ok(Summary::default())\n+            Ok((WriteMode::None, Summary::default()))\n         }\n         Operation::Version => {\n             print_version();\n-            Ok(Summary::default())\n+            Ok((WriteMode::None, Summary::default()))\n         }\n         Operation::ConfigHelp => {\n             Config::print_docs(&mut stdout(), matches.opt_present(\"unstable-features\"));\n-            Ok(Summary::default())\n+            Ok((WriteMode::None, Summary::default()))\n         }\n         Operation::ConfigOutputDefault { path } => {\n             let toml = Config::default().all_options().to_toml()?;\n@@ -273,7 +271,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n             } else {\n                 io::stdout().write_all(toml.as_bytes())?;\n             }\n-            Ok(Summary::default())\n+            Ok((WriteMode::None, Summary::default()))\n         }\n         Operation::Stdin { input, config_path } => {\n             // try to read config from local directory\n@@ -302,7 +300,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n                 checkstyle::output_footer(&mut out, config.write_mode())?;\n             }\n \n-            Ok(error_summary)\n+            Ok((WriteMode::Plain, error_summary))\n         }\n         Operation::Format {\n             files,\n@@ -320,7 +318,7 @@ fn format(\n     config_path: Option<PathBuf>,\n     minimal_config_path: Option<String>,\n     options: CliOptions,\n-) -> FmtResult<Summary> {\n+) -> FmtResult<(WriteMode, Summary)> {\n     for f in options.file_lines.files() {\n         match *f {\n             FileName::Real(ref f) if files.contains(f) => {}\n@@ -343,8 +341,9 @@ fn format(\n         }\n     }\n \n+    let write_mode = config.write_mode();\n     let mut out = &mut stdout();\n-    checkstyle::output_header(&mut out, config.write_mode())?;\n+    checkstyle::output_header(&mut out, write_mode)?;\n     let mut error_summary = Summary::default();\n \n     for file in files {\n@@ -379,7 +378,7 @@ fn format(\n             error_summary.add(run(Input::File(file), &config));\n         }\n     }\n-    checkstyle::output_footer(&mut out, config.write_mode())?;\n+    checkstyle::output_footer(&mut out, write_mode)?;\n \n     // If we were given a path via dump-minimal-config, output any options\n     // that were used during formatting as TOML.\n@@ -389,16 +388,7 @@ fn format(\n         file.write_all(toml.as_bytes())?;\n     }\n \n-    Ok(error_summary)\n-}\n-\n-fn determine_write_mode(opts: &Options) -> WriteMode {\n-    let matches = opts.parse(env::args().skip(1)).unwrap();\n-    let options = CliOptions::from_matches(&matches).unwrap();\n-    match options.write_mode {\n-        Some(m) => m,\n-        None => WriteMode::default(),\n-    }\n+    Ok((write_mode, error_summary))\n }\n \n fn print_usage_to_stdout(opts: &Options, reason: &str) {"}, {"sha": "2992bf48a80844cbcb673761f4f4515763d1d429", "filename": "src/config/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a886e8fe5f3551b9614c8131709267256eaa229/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a886e8fe5f3551b9614c8131709267256eaa229/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=7a886e8fe5f3551b9614c8131709267256eaa229", "patch": "@@ -186,6 +186,8 @@ configuration_option_enum! { WriteMode:\n     // Checks if a diff can be generated. If so, rustfmt outputs a diff and quits with exit code 1.\n     // This option is designed to be run in CI where a non-zero exit signifies non-standard code formatting.\n     Check,\n+    // Rustfmt shouldn't output anything formatting-like (e.g., emit a help message).\n+    None,\n }\n \n configuration_option_enum! { Color:"}, {"sha": "6d2f5da44de3588fe677cb6138f238729ee041b8", "filename": "src/filemap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a886e8fe5f3551b9614c8131709267256eaa229/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a886e8fe5f3551b9614c8131709267256eaa229/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=7a886e8fe5f3551b9614c8131709267256eaa229", "patch": "@@ -191,6 +191,7 @@ where\n                 return Ok(has_diff);\n             }\n         }\n+        WriteMode::None => {}\n     }\n \n     // when we are not in diff mode, don't indicate differing files"}]}