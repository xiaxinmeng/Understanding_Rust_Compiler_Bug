{"sha": "dddd7d8f447215a88aa87f438d4f495cf54be84d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZGQ3ZDhmNDQ3MjE1YTg4YWE4N2Y0MzhkNGY0OTVjZjU0YmU4NGQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-03-09T09:53:45Z"}, "committer": {"name": "unknown", "email": "graydon@.(none)", "date": "2011-03-10T00:15:52Z"}, "message": "Add stdout_writer and string_writer to std.io\n\nFor use by pretty-printer. string_writer API is a bit silly\nright now, feel free to suggest a cleaner way to do this.", "tree": {"sha": "89456769e93c81a4d503f64719425df207e5c135", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89456769e93c81a4d503f64719425df207e5c135"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dddd7d8f447215a88aa87f438d4f495cf54be84d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dddd7d8f447215a88aa87f438d4f495cf54be84d", "html_url": "https://github.com/rust-lang/rust/commit/dddd7d8f447215a88aa87f438d4f495cf54be84d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dddd7d8f447215a88aa87f438d4f495cf54be84d/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea2c86874448439a31012ccb141450c67e3d94d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea2c86874448439a31012ccb141450c67e3d94d8", "html_url": "https://github.com/rust-lang/rust/commit/ea2c86874448439a31012ccb141450c67e3d94d8"}], "stats": {"total": 71, "additions": 48, "deletions": 23}, "files": [{"sha": "71ebc1c738055d3c5d4a169e51040d940b09b20d", "filename": "src/lib/io.rs", "status": "modified", "additions": 48, "deletions": 23, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/dddd7d8f447215a88aa87f438d4f495cf54be84d/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddd7d8f447215a88aa87f438d4f495cf54be84d/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=dddd7d8f447215a88aa87f438d4f495cf54be84d", "patch": "@@ -91,6 +91,7 @@ tag fileflag {\n     truncate;\n }\n \n+// FIXME move into fd_buf_writer\n fn writefd(int fd, vec[u8] v) {\n     auto len = _vec.len[u8](v);\n     auto count = 0u;\n@@ -107,19 +108,17 @@ fn writefd(int fd, vec[u8] v) {\n     }\n }\n \n-fn new_buf_writer(str path, vec[fileflag] flags) -> buf_writer {\n-\n-    state obj fd_buf_writer(int fd) {\n-\n-        fn write(vec[u8] v) {\n-            writefd(fd, v);\n-        }\n+state obj fd_buf_writer(int fd, bool must_close) {\n+    fn write(vec[u8] v) {\n+        writefd(fd, v);\n+    }\n \n-        drop {\n-            os.libc.close(fd);\n-        }\n+    drop {\n+        if (must_close) {os.libc.close(fd);}\n     }\n+}\n \n+fn file_buf_writer(str path, vec[fileflag] flags) -> buf_writer {\n     let int fflags =\n         os.libc_constants.O_WRONLY() |\n         os.libc_constants.O_BINARY();\n@@ -142,26 +141,52 @@ fn new_buf_writer(str path, vec[fileflag] flags) -> buf_writer {\n         log sys.rustrt.last_os_error();\n         fail;\n     }\n-    ret fd_buf_writer(fd);\n+    ret fd_buf_writer(fd, true);\n }\n \n type writer =\n     state obj {\n-          fn write_str(str s);\n-          fn write_int(int n);\n-          fn write_uint(uint n);\n+          impure fn write_str(str s);\n+          impure fn write_int(int n);\n+          impure fn write_uint(uint n);\n     };\n \n-fn file_writer(str path,\n-               vec[fileflag] flags)\n-    -> writer\n-{\n-    state obj fw(buf_writer out) {\n-        fn write_str(str s)   { out.write(_str.bytes(s)); }\n-        fn write_int(int n)   { out.write(_str.bytes(_int.to_str(n, 10u))); }\n-        fn write_uint(uint n) { out.write(_str.bytes(_uint.to_str(n, 10u))); }\n+state obj new_writer(buf_writer out) {\n+    impure fn write_str(str s)   { out.write(_str.bytes(s)); }\n+    impure fn write_int(int n)   { out.write(_str.bytes(_int.to_str(n, 10u))); }\n+    impure fn write_uint(uint n) { out.write(_str.bytes(_uint.to_str(n, 10u))); }\n+}\n+\n+fn file_writer(str path, vec[fileflag] flags) -> writer {\n+    ret new_writer(file_buf_writer(path, flags));\n+}\n+\n+// FIXME it would be great if this could be a const named stdout\n+fn stdout_writer() -> writer {\n+    ret new_writer(fd_buf_writer(1, false));\n+}\n+\n+type str_writer =\n+    state obj {\n+          fn get_writer() -> writer;\n+          fn get_str() -> str;\n+    };\n+\n+type str_buf = @rec(mutable str buf);\n+\n+// TODO awkward! it's not possible to implement a writer with an extra method\n+fn string_writer() -> str_writer {\n+    auto buf = @rec(mutable buf = \"\");\n+    state obj str_writer_writer(str_buf buf) {\n+        impure fn write_str(str s)   { buf.buf += s; }\n+        impure fn write_int(int n)   { buf.buf += _int.to_str(n, 10u); }\n+        impure fn write_uint(uint n) { buf.buf += _uint.to_str(n, 10u); }\n+    }\n+    state obj str_writer_wrap(writer wr, str_buf buf) {\n+        fn get_writer() -> writer {ret wr;}\n+        fn get_str() -> str {ret buf.buf;}\n     }\n-    ret fw(new_buf_writer(path, flags));\n+    ret str_writer_wrap(str_writer_writer(buf), buf);\n }\n \n //"}]}