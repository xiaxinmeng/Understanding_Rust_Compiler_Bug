{"sha": "4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZjFlYzU4MGFhZjlmOTVkNjZjMTY1NGNlOTQyZjVlNDU0YTBiNGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-27T21:34:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-28T19:23:01Z"}, "message": "Do all runtime calls to getenv at initialization\n\ngetenv is not threadsafe and (maybe as a result) it's randomly crashing with\nCFLAGS=-g and RUST_THREADS=32. Calls from rust code are still on their\nown.", "tree": {"sha": "39b600f84688f7e49c734285593fbe9911214cd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39b600f84688f7e49c734285593fbe9911214cd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "html_url": "https://github.com/rust-lang/rust/commit/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75985ab75ed216cd8c873c9ef08cd88708f8354f", "url": "https://api.github.com/repos/rust-lang/rust/commits/75985ab75ed216cd8c873c9ef08cd88708f8354f", "html_url": "https://github.com/rust-lang/rust/commit/75985ab75ed216cd8c873c9ef08cd88708f8354f"}], "stats": {"total": 268, "additions": 182, "deletions": 86}, "files": [{"sha": "6d5fb862cf584ba3eb86292b523657a60a1c4260", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "patch": "@@ -10,6 +10,7 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n               rt/rust_run_program.cpp \\\n               rt/rust_crate_cache.cpp \\\n               rt/rust_comm.cpp \\\n+              rt/rust_env.cpp \\\n               rt/rust_scheduler.cpp \\\n               rt/rust_task.cpp \\\n               rt/rust_task_list.cpp \\\n@@ -38,6 +39,7 @@ RUNTIME_HDR := rt/globals.h \\\n                rt/rust_internal.h \\\n                rt/rust_util.h \\\n                rt/rust_chan.h \\\n+               rt/rust_env.h \\\n                rt/rust_port.h \\\n                rt/rust_scheduler.h \\\n                rt/rust_task.h \\"}, {"sha": "7114aa5b324bfb87f05bbb2575405882d653c181", "filename": "src/rt/memory_region.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Fmemory_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Fmemory_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.cpp?ref=4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "patch": "@@ -14,7 +14,7 @@ memory_region::alloc_header *memory_region::get_header(void *mem) {\n \n memory_region::memory_region(rust_srv *srv, bool synchronized) :\n     _srv(srv), _parent(NULL), _live_allocations(0),\n-    _detailed_leaks(getenv(\"RUST_DETAILED_LEAKS\") != NULL),\n+    _detailed_leaks(srv->env->detailed_leaks),\n     _synchronized(synchronized), _hack_allow_leaks(false) {\n }\n "}, {"sha": "0d25d2c3248f9541e2cb77533d253a0cb2dbcbb5", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 8, "deletions": 59, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "patch": "@@ -76,74 +76,23 @@ command_line_args : public kernel_owned<command_line_args>\n };\n \n \n-#if defined(__WIN32__)\n-int get_num_cpus() {\n-    SYSTEM_INFO sysinfo;\n-    GetSystemInfo(&sysinfo);\n-\n-    return (int) sysinfo.dwNumberOfProcessors;\n-}\n-#elif defined(__BSD__)\n-int get_num_cpus() {\n-    /* swiped from http://stackoverflow.com/questions/150355/\n-       programmatically-find-the-number-of-cores-on-a-machine */\n-\n-    unsigned int numCPU;\n-    int mib[4];\n-    size_t len = sizeof(numCPU);\n-\n-    /* set the mib for hw.ncpu */\n-    mib[0] = CTL_HW;\n-    mib[1] = HW_AVAILCPU;  // alternatively, try HW_NCPU;\n-\n-    /* get the number of CPUs from the system */\n-    sysctl(mib, 2, &numCPU, &len, NULL, 0);\n-\n-    if( numCPU < 1 ) {\n-        mib[1] = HW_NCPU;\n-        sysctl( mib, 2, &numCPU, &len, NULL, 0 );\n-\n-        if( numCPU < 1 ) {\n-            numCPU = 1;\n-        }\n-    }\n-    return numCPU;\n-}\n-#elif defined(__GNUC__)\n-int get_num_cpus() {\n-    return sysconf(_SC_NPROCESSORS_ONLN);\n-}\n-#endif\n-\n-int get_num_threads()\n-{\n-    char *env = getenv(\"RUST_THREADS\");\n-    if(env) {\n-        int num = atoi(env);\n-        if(num > 0)\n-            return num;\n-    }\n-    return get_num_cpus();\n-}\n-\n /**\n  * Main entry point into the Rust runtime. Here we create a Rust service,\n  * initialize the kernel, create the root domain and run it.\n  */\n \n int check_claims = 0;\n \n-void enable_claims(void* ck) { check_claims = (ck != 0); }\n-\n extern \"C\" CDECL int\n rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n \n-    update_log_settings(crate_map, getenv(\"RUST_LOG\"));\n-    enable_claims(getenv(\"CHECK_CLAIMS\"));\n-    int num_threads = get_num_threads();\n+    rust_env *env = load_env();\n+\n+    update_log_settings(crate_map, env->logspec);\n+    check_claims = env->check_claims;\n \n-    rust_srv *srv = new rust_srv();\n-    rust_kernel *kernel = new rust_kernel(srv, num_threads);\n+    rust_srv *srv = new rust_srv(env);\n+    rust_kernel *kernel = new rust_kernel(srv, env->num_sched_threads);\n     kernel->start();\n     rust_task *root_task = kernel->create_task(NULL, \"main\");\n     rust_scheduler *sched = root_task->sched;\n@@ -159,13 +108,13 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n \n     root_task->start(main_fn, (uintptr_t)args->args);\n \n-    DLOG(sched, dom, \"Using %d worker threads.\", num_threads);\n-\n     int ret = kernel->start_task_threads();\n     delete args;\n     delete kernel;\n     delete srv;\n \n+    free_env(env);\n+\n #if !defined(__WIN32__)\n     // Don't take down the process if the main thread exits without an\n     // error."}, {"sha": "6f45227bb8be06882f120aaf8fd85000f22f3e82", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "patch": "@@ -857,10 +857,10 @@ clone_chan(rust_task *task, rust_chan *chan) {\n }\n \n // defined in rust_task.cpp\n-extern size_t g_min_stack_size;\n+extern size_t g_custom_min_stack_size;\n extern \"C\" CDECL void\n set_min_stack(rust_task *task, uintptr_t stack_size) {\n-    g_min_stack_size = stack_size;\n+    g_custom_min_stack_size = stack_size;\n }\n \n //"}, {"sha": "26fc4dab180267d14fed80daf8174e0a7992bdb3", "filename": "src/rt/rust_env.cpp", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_env.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_env.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_env.cpp?ref=4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "patch": "@@ -0,0 +1,119 @@\n+// The runtime wants to pull a number of variables out of the\n+// environment but calling getenv is not threadsafe, so every value\n+// that might come from the environment is loaded here, once, during\n+// init.\n+\n+#include \"rust_internal.h\"\n+\n+// The environment variables that the runtime knows about\n+#define RUST_THREADS \"RUST_THREADS\"\n+#define RUST_MIN_STACK \"RUST_MIN_STACK\"\n+#define RUST_LOG \"RUST_LOG\"\n+#define CHECK_CLAIMS \"CHECK_CLAIMS\"\n+#define DETAILED_LEAKS \"DETAILED_LEAKS\"\n+#define RUST_SEED \"RUST_SEED\"\n+\n+#if defined(__WIN32__)\n+static int\n+get_num_cpus() {\n+    SYSTEM_INFO sysinfo;\n+    GetSystemInfo(&sysinfo);\n+\n+    return (int) sysinfo.dwNumberOfProcessors;\n+}\n+#elif defined(__BSD__)\n+static int\n+get_num_cpus() {\n+    /* swiped from http://stackoverflow.com/questions/150355/\n+       programmatically-find-the-number-of-cores-on-a-machine */\n+\n+    unsigned int numCPU;\n+    int mib[4];\n+    size_t len = sizeof(numCPU);\n+\n+    /* set the mib for hw.ncpu */\n+    mib[0] = CTL_HW;\n+    mib[1] = HW_AVAILCPU;  // alternatively, try HW_NCPU;\n+\n+    /* get the number of CPUs from the system */\n+    sysctl(mib, 2, &numCPU, &len, NULL, 0);\n+\n+    if( numCPU < 1 ) {\n+        mib[1] = HW_NCPU;\n+        sysctl( mib, 2, &numCPU, &len, NULL, 0 );\n+\n+        if( numCPU < 1 ) {\n+            numCPU = 1;\n+        }\n+    }\n+    return numCPU;\n+}\n+#elif defined(__GNUC__)\n+static int\n+get_num_cpus() {\n+    return sysconf(_SC_NPROCESSORS_ONLN);\n+}\n+#endif\n+\n+static int\n+get_num_threads()\n+{\n+    char *env = getenv(RUST_THREADS);\n+    if(env) {\n+        int num = atoi(env);\n+        if(num > 0)\n+            return num;\n+    }\n+    return get_num_cpus();\n+}\n+\n+// FIXME (issue #151): This should be 0x300; the change here is for\n+// practicality's sake until stack growth is working.\n+\n+static size_t\n+get_min_stk_size() {\n+    char *stack_size = getenv(RUST_MIN_STACK);\n+    if(stack_size) {\n+        return strtol(stack_size, NULL, 0);\n+    }\n+    else {\n+        return 0x300000;\n+    }\n+}\n+\n+static char*\n+copyenv(const char* name) {\n+    char *envvar = getenv(name);\n+    if (!envvar) {\n+        return NULL;\n+    } else {\n+        const size_t maxlen = 4096;\n+        size_t strlen = strnlen(envvar, maxlen);\n+        size_t buflen = strlen + 1;\n+        char *var = (char*)malloc(buflen);\n+        memset(var, 0, buflen);\n+        strncpy(var, envvar, strlen);\n+        return var;\n+    }\n+}\n+\n+rust_env*\n+load_env() {\n+    rust_env *env = (rust_env*)malloc(sizeof(rust_env));\n+\n+    env->num_sched_threads = (size_t)get_num_threads();\n+    env->min_stack_size = get_min_stk_size();\n+    env->logspec = copyenv(RUST_LOG);\n+    env->check_claims = getenv(CHECK_CLAIMS) != NULL;\n+    env->detailed_leaks = getenv(DETAILED_LEAKS) != NULL;\n+    env->rust_seed = copyenv(RUST_SEED);\n+\n+    return env;\n+}\n+\n+void\n+free_env(rust_env *env) {\n+    free(env->logspec);\n+    free(env->rust_seed);\n+    free(env);\n+}"}, {"sha": "6dc9cc120cdb6ee1826acd1cc54e52ef8ed84237", "filename": "src/rt/rust_env.h", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_env.h", "raw_url": "https://github.com/rust-lang/rust/raw/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_env.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_env.h?ref=4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "patch": "@@ -0,0 +1,11 @@\n+struct rust_env {\n+    size_t num_sched_threads;\n+    size_t min_stack_size;\n+    char* logspec;\n+    bool check_claims;\n+    bool detailed_leaks;\n+    char* rust_seed;\n+};\n+\n+rust_env* load_env();\n+void free_env(rust_env *rust_env);"}, {"sha": "10822f02395b5a6930dd094fab112b0d81ac7c39", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "patch": "@@ -24,6 +24,7 @@\n #include \"rust.h\"\n #include \"rand.h\"\n #include \"uthash.h\"\n+#include \"rust_env.h\"\n \n #if defined(__WIN32__)\n extern \"C\" {"}, {"sha": "a4f56c10be20e8c02e57b46f8ba43d89ff0549e9", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "patch": "@@ -12,7 +12,8 @@ rust_kernel::rust_kernel(rust_srv *srv, size_t num_threads) :\n     _interrupt_kernel_loop(FALSE),\n     num_threads(num_threads),\n     rval(0),\n-    live_tasks(0)\n+    live_tasks(0),\n+    env(srv->env)\n {\n     isaac_init(this, &rctx);\n     create_schedulers();\n@@ -51,6 +52,8 @@ rust_kernel::destroy_scheduler(rust_scheduler *sched) {\n }\n \n void rust_kernel::create_schedulers() {\n+    KLOG_(\"Using %d scheduler threads.\", num_threads);\n+\n     for(size_t i = 0; i < num_threads; ++i) {\n         threads.push(create_scheduler(i));\n     }"}, {"sha": "d54c6a6543035b4b5bf97f36ea57252e035b804b", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "patch": "@@ -98,6 +98,8 @@ class rust_kernel : public rust_thread {\n      */\n     indexed_list<rust_message_queue> message_queues;\n \n+    struct rust_env *env;\n+\n     rust_handle<rust_task> *get_task_handle(rust_task *task);\n     rust_handle<rust_port> *get_port_handle(rust_port *port);\n "}, {"sha": "c4987bbd3f1dd8225f2d1cfd39030b2a3b9be77a", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "patch": "@@ -20,7 +20,9 @@ rust_scheduler::rust_scheduler(rust_kernel *kernel,\n     cache(this),\n     kernel(kernel),\n     message_queue(message_queue),\n-    id(id)\n+    id(id),\n+    min_stack_size(kernel->env->min_stack_size),\n+    env(kernel->env)\n {\n     LOGPTR(this, \"new dom\", (uintptr_t)this);\n     isaac_init(this, &rctx);"}, {"sha": "561807d44e0e09b17f279a06983e0d2a4cae985d", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "patch": "@@ -60,11 +60,14 @@ struct rust_scheduler : public kernel_owned<rust_scheduler>,\n     const int id;\n \n     lock_and_signal lock;\n+    size_t min_stack_size;\n \n #ifndef __WIN32__\n     pthread_attr_t attr;\n #endif\n \n+    rust_env *env;\n+\n     // Only a pointer to 'name' is kept, so it must live as long as this\n     // domain.\n     rust_scheduler(rust_kernel *kernel,"}, {"sha": "835b283a73f3408d489d42077dc3349101325b39", "filename": "src/rt/rust_srv.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_srv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_srv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_srv.cpp?ref=4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "patch": "@@ -1,7 +1,8 @@\n #include \"rust_internal.h\"\n #include \"rust_srv.h\"\n \n-rust_srv::rust_srv() :\n+rust_srv::rust_srv(rust_env *env) :\n+    env(env),\n     local_region(this, false) {\n }\n \n@@ -72,7 +73,7 @@ rust_srv::warning(char const *expression,\n \n rust_srv *\n rust_srv::clone() {\n-    return new rust_srv();\n+    return new rust_srv(env);\n }\n \n //"}, {"sha": "7037007e78c39a02def4eae1cf0dee9b3db84071", "filename": "src/rt/rust_srv.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_srv.h", "raw_url": "https://github.com/rust-lang/rust/raw/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_srv.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_srv.h?ref=4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "patch": "@@ -6,6 +6,7 @@\n \n class rust_srv {\n public:\n+    rust_env *env;\n     memory_region local_region;\n     virtual void log(char const *msg);\n     virtual void fatal(char const *expression,\n@@ -21,7 +22,7 @@ class rust_srv {\n     virtual void free(void *);\n     virtual void *malloc(size_t);\n     virtual void *realloc(void *, size_t);\n-    rust_srv();\n+    rust_srv(rust_env *);\n     virtual ~rust_srv();\n     virtual rust_srv *clone();\n };"}, {"sha": "6f3e0202472873658b82b0b01728e7537f3c0d49", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "patch": "@@ -10,28 +10,25 @@\n \n #include \"globals.h\"\n \n-// Stacks\n+// Stack size\n+size_t g_custom_min_stack_size = 0;\n \n-// FIXME (issue #151): This should be 0x300; the change here is for\n-// practicality's sake until stack growth is working.\n-size_t g_min_stack_size = 0x300000;\n-\n-static size_t get_min_stk_size() {\n-    char *stack_size = getenv(\"RUST_MIN_STACK\");\n-    if(stack_size) {\n-        return strtol(stack_size, NULL, 0);\n-    }\n-    else {\n-        return g_min_stack_size;\n+static size_t\n+get_min_stk_size(size_t default_size) {\n+    if (g_custom_min_stack_size != 0) {\n+        return g_custom_min_stack_size;\n+    } else {\n+        return default_size;\n     }\n }\n \n+\n // Task stack segments. Heap allocated and chained together.\n \n static stk_seg*\n-new_stk(rust_task *task, size_t minsz)\n+new_stk(rust_scheduler *sched, rust_task *task, size_t minsz)\n {\n-    size_t min_stk_bytes = get_min_stk_size();\n+    size_t min_stk_bytes = get_min_stk_size(sched->min_stack_size);\n     if (minsz < min_stk_bytes)\n         minsz = min_stk_bytes;\n     size_t sz = sizeof(stk_seg) + minsz;\n@@ -90,7 +87,7 @@ rust_task::rust_task(rust_scheduler *sched, rust_task_list *state,\n     LOGPTR(sched, \"new task\", (uintptr_t)this);\n     DLOG(sched, task, \"sizeof(task) = %d (0x%x)\", sizeof *this, sizeof *this);\n \n-    stk = new_stk(this, 0);\n+    stk = new_stk(sched, this, 0);\n     rust_sp = stk->limit;\n }\n "}, {"sha": "938b4c96cb5b7352244e5c50468052b68b4f45bc", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "patch": "@@ -148,7 +148,7 @@ isaac_init(sched_or_kernel *sched, randctx *rctx)\n                  CryptReleaseContext(hProv, 0));\n         }\n #else\n-        char *rust_seed = getenv(\"RUST_SEED\");\n+        char *rust_seed = sched->env->rust_seed;\n         if (rust_seed != NULL) {\n             ub4 seed = (ub4) atoi(rust_seed);\n             for (size_t i = 0; i < RANDSIZ; i ++) {"}, {"sha": "ad5a018eec890e88a10f8de16081708b74f69306", "filename": "src/rt/test/rust_test_runtime.cpp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_runtime.cpp?ref=4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "patch": "@@ -19,7 +19,8 @@ rust_domain_test::worker::run() {\n \n bool\n rust_domain_test::run() {\n-    rust_srv srv;\n+    rust_env env;\n+    rust_srv srv(&env);\n     rust_kernel kernel(&srv, 1);\n \n     array_list<worker *> workers;\n@@ -51,7 +52,8 @@ rust_task_test::worker::run() {\n \n bool\n rust_task_test::run() {\n-    rust_srv srv;\n+    rust_env env;\n+    rust_srv srv(&env);\n     rust_kernel kernel(&srv, 1);\n \n     array_list<worker *> workers;"}, {"sha": "59eff04927064b384a7403393e04aecec8abc8bd", "filename": "src/rt/test/rust_test_util.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Ftest%2Frust_test_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d/src%2Frt%2Ftest%2Frust_test_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_util.h?ref=4ef1ec580aaf9f95d66c1654ce942f5e454a0b4d", "patch": "@@ -17,10 +17,13 @@ class rust_array_list_test : public rust_test {\n \n class rust_synchronized_indexed_list_test : public rust_test {\n public:\n+    rust_env env;\n     rust_srv srv;\n     synchronized_indexed_list<indexed_list_element<int> > list;\n \n-    rust_synchronized_indexed_list_test() {\n+    rust_synchronized_indexed_list_test() :\n+        srv(&env)\n+    {\n     }\n \n     class worker : public rust_thread {"}]}