{"sha": "28ca35fd132156b1c02110547975385a06ba52f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4Y2EzNWZkMTMyMTU2YjFjMDIxMTA1NDc5NzUzODVhMDZiYTUyZjc=", "commit": {"author": {"name": "Dan Robertson", "email": "dan@dlrobertson.com", "date": "2018-11-30T17:37:23Z"}, "committer": {"name": "Dan Robertson", "email": "dan@dlrobertson.com", "date": "2018-11-30T20:39:32Z"}, "message": "tests: Simplify VaList run-make test\n\nThe va_list tests were too complex and were causing some spurious\ntest failures on Windows", "tree": {"sha": "63d089cc77ec34aa8f7996c020225252284be741", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63d089cc77ec34aa8f7996c020225252284be741"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28ca35fd132156b1c02110547975385a06ba52f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF5dO2RaKc5C+SCJ9RcSmUsR+QqUFAlwBoC8ACgkQRcSmUsR+\nQqX/WxAArRiL0GeIvQMPCSIhQAx0PLgcK/uUVFtDlXOj05Qro8twcVuvSt5OrGSG\namgs9Xx/Nov4Bd64fJgbT5QvoVwc13EVZtwgDicZReMTKzSTF9+bu57j0ajv+Hw9\n8ybg3eQVlHAkl3lPRK1FhfzQOviMRO7Oo2yoMVWaT/JeKLY+D38j2VNVqctoyBU4\nFZ1Xmxn0bl9r4GKR8vGXFHEIbDTWwf/eLfHl5ru1NXbd3+f8ugA3b5qihcf9Z9bD\nNMNx2ZRCAvPvirkz5XlNl5CyGl7Se4y3YEbNKVfsO+KeRQUaHvx6wvseeJKRyd/E\nXT/hNxud96mWlFu8xt/rzC7KlkPp66CU7nGOXhUIoxORcHM+F35q+OX0Bsqg9ZJ4\n7OE7pG9TCKe67RM/byainI/ZmZLBZsfXgjyG+qYcY3I1tMA098gbx0V90d06Sxoj\nwGEaNkBBLyVa8eGBYzTL/0ybTJwrKBebcVeFFX7/R1sX4Nw9tEfp5ckCK4OZZU0S\ncJ9gwsW/Cs0bNXf3TBc1ieyJ4+kdIMEC+w2eRahtDiT6Rdq4gEIg8NFSWELKPuUV\nThSgJNdxhUQEB8dMErd9fsZLL8/ymRNwG4AQ52OV1oT/HIL8H4/9KSJSJPaozjUp\nkkYl+ZStILpdz8MH0b8ugghPivV/3ZWDs1vcKCujRyBVkiemI44=\n=3vj8\n-----END PGP SIGNATURE-----", "payload": "tree 63d089cc77ec34aa8f7996c020225252284be741\nparent d48ab693d1ce99f30c0cf9abdf45c209824fe825\nauthor Dan Robertson <dan@dlrobertson.com> 1543599443 +0000\ncommitter Dan Robertson <dan@dlrobertson.com> 1543610372 +0000\n\ntests: Simplify VaList run-make test\n\nThe va_list tests were too complex and were causing some spurious\ntest failures on Windows\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28ca35fd132156b1c02110547975385a06ba52f7", "html_url": "https://github.com/rust-lang/rust/commit/28ca35fd132156b1c02110547975385a06ba52f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28ca35fd132156b1c02110547975385a06ba52f7/comments", "author": {"login": "dlrobertson", "id": 7504153, "node_id": "MDQ6VXNlcjc1MDQxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7504153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlrobertson", "html_url": "https://github.com/dlrobertson", "followers_url": "https://api.github.com/users/dlrobertson/followers", "following_url": "https://api.github.com/users/dlrobertson/following{/other_user}", "gists_url": "https://api.github.com/users/dlrobertson/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlrobertson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlrobertson/subscriptions", "organizations_url": "https://api.github.com/users/dlrobertson/orgs", "repos_url": "https://api.github.com/users/dlrobertson/repos", "events_url": "https://api.github.com/users/dlrobertson/events{/privacy}", "received_events_url": "https://api.github.com/users/dlrobertson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dlrobertson", "id": 7504153, "node_id": "MDQ6VXNlcjc1MDQxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7504153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlrobertson", "html_url": "https://github.com/dlrobertson", "followers_url": "https://api.github.com/users/dlrobertson/followers", "following_url": "https://api.github.com/users/dlrobertson/following{/other_user}", "gists_url": "https://api.github.com/users/dlrobertson/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlrobertson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlrobertson/subscriptions", "organizations_url": "https://api.github.com/users/dlrobertson/orgs", "repos_url": "https://api.github.com/users/dlrobertson/repos", "events_url": "https://api.github.com/users/dlrobertson/events{/privacy}", "received_events_url": "https://api.github.com/users/dlrobertson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d48ab693d1ce99f30c0cf9abdf45c209824fe825", "url": "https://api.github.com/repos/rust-lang/rust/commits/d48ab693d1ce99f30c0cf9abdf45c209824fe825", "html_url": "https://github.com/rust-lang/rust/commit/d48ab693d1ce99f30c0cf9abdf45c209824fe825"}], "stats": {"total": 231, "additions": 57, "deletions": 174}, "files": [{"sha": "90ad6011526c1d41fdb99c0a8ec7683cb9a87563", "filename": "src/test/run-make-fulldeps/c-link-to-rust-va-list-fn/checkrust.rs", "status": "modified", "additions": 45, "deletions": 107, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/28ca35fd132156b1c02110547975385a06ba52f7/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ca35fd132156b1c02110547975385a06ba52f7/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs?ref=28ca35fd132156b1c02110547975385a06ba52f7", "patch": "@@ -16,127 +16,65 @@ extern crate libc;\n \n use libc::{c_char, c_double, c_int, c_long, c_longlong};\n use std::ffi::VaList;\n-use std::slice;\n-use std::ffi::CStr;\n+use std::ffi::{CString, CStr};\n \n-#[repr(C)]\n-#[derive(Clone, Copy, Debug)]\n-pub enum AnswerType {\n-    Double,\n-    Long,\n-    LongLong,\n-    Int,\n-    Byte,\n-    CStr,\n-    Skip,\n+macro_rules! continue_if {\n+    ($cond:expr) => {\n+        if !($cond) {\n+            return 0xff;\n+        }\n+    }\n }\n \n-#[repr(C)]\n-pub union AnswerData {\n-    pub double: c_double,\n-    pub long: c_long,\n-    pub longlong: c_longlong,\n-    pub int: c_int,\n-    pub byte: c_char,\n-    pub cstr: *const c_char,\n-    pub skip_ty: AnswerType,\n+unsafe fn compare_c_str(ptr: *const c_char, val: &str) -> bool {\n+    let cstr0 = CStr::from_ptr(ptr);\n+    let cstr1 = CString::new(val).unwrap();\n+    &*cstr1 == cstr0\n }\n \n-#[repr(C)]\n-pub struct Answer {\n-    tag: AnswerType,\n-    data: AnswerData,\n+#[no_mangle]\n+pub unsafe extern \"C\" fn check_list_0(mut ap: VaList) -> usize {\n+    continue_if!(ap.arg::<c_longlong>() == 1);\n+    continue_if!(ap.arg::<c_int>() == 2);\n+    continue_if!(ap.arg::<c_longlong>() == 3);\n+    0\n }\n \n #[no_mangle]\n-pub unsafe fn compare_answers(answers: &[Answer], mut ap: VaList) -> usize {\n-    for (i, answer) in answers.iter().enumerate() {\n-        match answer {\n-            Answer { tag: AnswerType::Double, data: AnswerData { double: d } } => {\n-                let tmp = ap.arg::<c_double>();\n-                if d.floor() != tmp.floor() {\n-                    println!(\"Double: {} != {}\", d, tmp);\n-                    return i + 1;\n-                }\n-            }\n-            Answer { tag: AnswerType::Long, data: AnswerData { long: l } } => {\n-                let tmp =  ap.arg::<c_long>();\n-                if *l != tmp {\n-                    println!(\"Long: {} != {}\", l, tmp);\n-                    return i + 1;\n-                }\n-            }\n-            Answer { tag: AnswerType::LongLong, data: AnswerData { longlong: l } } => {\n-                let tmp =  ap.arg::<c_longlong>();\n-                if *l != tmp {\n-                    println!(\"Long Long: {} != {}\", l, tmp);\n-                    return i + 1;\n-                }\n-            }\n-            Answer { tag: AnswerType::Int, data: AnswerData { int: n } } => {\n-                let tmp = ap.arg::<c_int>();\n-                if *n != tmp {\n-                    println!(\"Int: {} != {}\", n, tmp);\n-                    return i + 1;\n-                }\n-            }\n-            Answer { tag: AnswerType::Byte, data: AnswerData { byte: b } } => {\n-                let tmp = ap.arg::<c_char>();\n-                if *b != tmp {\n-                    println!(\"Byte: {} != {}\", b, tmp);\n-                    return i + 1;\n-                }\n-            }\n-            Answer { tag: AnswerType::CStr, data: AnswerData { cstr: c0 } } => {\n-                let c1 = ap.arg::<*const c_char>();\n-                let cstr0 = CStr::from_ptr(*c0);\n-                let cstr1 = CStr::from_ptr(c1);\n-                if cstr0 != cstr1 {\n-                    println!(\"C String: {:?} != {:?}\", cstr0, cstr1);\n-                    return i + 1;\n-                }\n-            }\n-            _ => {\n-                println!(\"Unknown type!\");\n-                return i + 1;\n-            }\n-        }\n-    }\n-    return 0;\n+pub unsafe extern \"C\" fn check_list_1(mut ap: VaList) -> usize {\n+    continue_if!(ap.arg::<c_int>() == -1);\n+    continue_if!(ap.arg::<c_char>() == 'A' as c_char);\n+    continue_if!(ap.arg::<c_char>() == '4' as c_char);\n+    continue_if!(ap.arg::<c_char>() == ';' as c_char);\n+    continue_if!(ap.arg::<c_int>() == 0x32);\n+    continue_if!(ap.arg::<c_int>() == 0x10000001);\n+    continue_if!(compare_c_str(ap.arg::<*const c_char>(), \"Valid!\"));\n+    0\n }\n \n #[no_mangle]\n-pub unsafe extern \"C\" fn check_rust(argc: usize, answers: *const Answer, ap: VaList) -> usize {\n-    let slice = slice::from_raw_parts(answers, argc);\n-    compare_answers(slice, ap)\n+pub unsafe extern \"C\" fn check_list_2(mut ap: VaList) -> usize {\n+    continue_if!(ap.arg::<c_double>().floor() == 3.14f64.floor());\n+    continue_if!(ap.arg::<c_long>() == 12);\n+    continue_if!(ap.arg::<c_char>() == 'a' as c_char);\n+    continue_if!(ap.arg::<c_double>().floor() == 6.18f64.floor());\n+    continue_if!(compare_c_str(ap.arg::<*const c_char>(), \"Hello\"));\n+    continue_if!(ap.arg::<c_int>() == 42);\n+    continue_if!(compare_c_str(ap.arg::<*const c_char>(), \"World\"));\n+    0\n }\n \n #[no_mangle]\n-pub unsafe extern \"C\" fn check_rust_copy(argc: usize, answers: *const Answer,\n-                                         mut ap: VaList) -> usize {\n-    let slice = slice::from_raw_parts(answers, argc);\n-    let mut skip_n = 0;\n-    for (i, answer) in slice.iter().enumerate() {\n-        match answer {\n-            Answer { tag: AnswerType::Skip, data: AnswerData { skip_ty } } => {\n-                match skip_ty {\n-                    AnswerType::Double => { ap.arg::<c_double>(); }\n-                    AnswerType::Long => { ap.arg::<c_long>(); }\n-                    AnswerType::LongLong => { ap.arg::<c_longlong>(); }\n-                    AnswerType::Int => { ap.arg::<c_int>(); }\n-                    AnswerType::Byte => { ap.arg::<c_char>(); }\n-                    AnswerType::CStr => { ap.arg::<*const c_char>(); }\n-                    _ => { return i; }\n-                };\n-            }\n-            _ => {\n-                skip_n = i;\n-                break;\n-            }\n+pub unsafe extern \"C\" fn check_list_copy_0(mut ap: VaList) -> usize {\n+    continue_if!(ap.arg::<c_double>().floor() == 6.28f64.floor());\n+    continue_if!(ap.arg::<c_int>() == 16);\n+    continue_if!(ap.arg::<c_char>() == 'A' as c_char);\n+    continue_if!(compare_c_str(ap.arg::<*const c_char>(), \"Skip Me!\"));\n+    ap.copy(|mut ap| {\n+        if compare_c_str(ap.arg::<*const c_char>(), \"Correct\") {\n+            0\n+        } else {\n+            0xff\n         }\n-    }\n-\n-    ap.copy(|ap| {\n-        compare_answers(&slice[skip_n..], ap)\n     })\n }"}, {"sha": "e9edf59d2c9c5cd86fd57f14e41d6763c9f7997d", "filename": "src/test/run-make-fulldeps/c-link-to-rust-va-list-fn/test.c", "status": "modified", "additions": 12, "deletions": 67, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/28ca35fd132156b1c02110547975385a06ba52f7/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/28ca35fd132156b1c02110547975385a06ba52f7/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Ftest.c?ref=28ca35fd132156b1c02110547975385a06ba52f7", "patch": "@@ -12,84 +12,29 @@\n #include <assert.h>\n #include <stdint.h>\n #include <stdlib.h>\n+#include <stdio.h>\n \n-typedef enum {\n-    TAG_DOUBLE,\n-    TAG_LONG,\n-    TAG_LONGLONG,\n-    TAG_INT,\n-    TAG_BYTE,\n-    TAG_CSTR,\n-    TAG_SKIP,\n-} tag;\n+extern size_t check_list_0(va_list ap);\n+extern size_t check_list_1(va_list ap);\n+extern size_t check_list_2(va_list ap);\n+extern size_t check_list_copy_0(va_list ap);\n \n-typedef struct {\n-    tag answer_type;\n-    union {\n-        double double_precision;\n-        long num_long;\n-        long long num_longlong;\n-        int num_int;\n-        int8_t byte;\n-        char* cstr;\n-        tag skip_ty;\n-    } answer_data;\n-} answer;\n-\n-#define MK_DOUBLE(n) \\\n-    { TAG_DOUBLE, { .double_precision = n } }\n-#define MK_LONG(n) \\\n-    { TAG_LONG, { .num_long = n } }\n-#define MK_LONGLONG(n) \\\n-    { TAG_LONGLONG, { .num_longlong = n } }\n-#define MK_INT(n) \\\n-    { TAG_INT, { .num_int = n } }\n-#define MK_BYTE(b) \\\n-    { TAG_BYTE, { .byte = b } }\n-#define MK_CSTR(s) \\\n-    { TAG_CSTR, { .cstr = s } }\n-#define MK_SKIP(ty) \\\n-    { TAG_SKIP, { .skip_ty = TAG_ ## ty } }\n-\n-extern size_t check_rust(size_t argc, const answer* answers, va_list ap);\n-extern size_t check_rust_copy(size_t argc, const answer* answers, va_list ap);\n-\n-size_t test_check_rust(size_t argc, const answer* answers, ...) {\n-    size_t ret = 0;\n-    va_list ap;\n-    va_start(ap, answers);\n-    ret = check_rust(argc, answers, ap);\n-    va_end(ap);\n-    return ret;\n-}\n-\n-size_t test_check_rust_copy(size_t argc, const answer* answers, ...) {\n+int test_rust(size_t (*fn)(va_list), ...) {\n     size_t ret = 0;\n     va_list ap;\n-    va_start(ap, answers);\n-    ret = check_rust_copy(argc, answers, ap);\n+    va_start(ap, fn);\n+    ret = fn(ap);\n     va_end(ap);\n     return ret;\n }\n \n int main(int argc, char* argv[]) {\n-    answer test_alignment0[] = {MK_LONGLONG(0x01LL), MK_INT(0x02), MK_LONGLONG(0x03LL)};\n-    assert(test_check_rust(3, test_alignment0, 0x01LL, 0x02, 0x03LL) == 0);\n+    assert(test_rust(check_list_0, 0x01LL, 0x02, 0x03LL) == 0);\n \n-    answer test_alignment1[] = {MK_INT(-1), MK_BYTE('A'), MK_BYTE('4'), MK_BYTE(';'),\n-                                MK_INT(0x32), MK_INT(0x10000001), MK_CSTR(\"Valid!\")};\n-    assert(test_check_rust(7, test_alignment1, -1, 'A', '4', ';', 0x32, 0x10000001,\n-                           \"Valid!\") == 0);\n+    assert(test_rust(check_list_1, -1, 'A', '4', ';', 0x32, 0x10000001, \"Valid!\") == 0);\n \n-    answer basic_answers[] = {MK_DOUBLE(3.14), MK_LONG(12l), MK_BYTE('a'),\n-                              MK_DOUBLE(6.28), MK_CSTR(\"Hello\"), MK_INT(42),\n-                              MK_CSTR(\"World\")};\n-    assert(test_check_rust(7, basic_answers, 3.14, 12l, 'a', 6.28, \"Hello\",\n-                           42, \"World\") == 0);\n+    assert(test_rust(check_list_2, 3.14, 12l, 'a', 6.28, \"Hello\", 42, \"World\") == 0);\n \n-    answer copy_answers[] = { MK_SKIP(DOUBLE), MK_SKIP(INT), MK_SKIP(BYTE), MK_SKIP(CSTR),\n-                              MK_CSTR(\"Correctly skipped and copied list\") };\n-    assert(test_check_rust_copy(5, copy_answers, 6.28, 16, 'A', \"Skip Me!\",\n-                                \"Correctly skipped and copied list\") == 0);\n+    assert(test_rust(check_list_copy_0, 6.28, 16, 'A', \"Skip Me!\", \"Correct\") == 0);\n     return 0;\n }"}]}