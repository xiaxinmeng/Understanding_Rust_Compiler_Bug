{"sha": "dd3772e4f01a9cab1d967c1b80c9c7cbe6014592", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMzc3MmU0ZjAxYTljYWIxZDk2N2MxYjgwYzljN2NiZTYwMTQ1OTI=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-02-19T18:08:12Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-02-19T18:19:50Z"}, "message": "A few more code cleanups", "tree": {"sha": "6f6e5fe7e28e879d238f2df41271195a9afcd366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f6e5fe7e28e879d238f2df41271195a9afcd366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd3772e4f01a9cab1d967c1b80c9c7cbe6014592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3772e4f01a9cab1d967c1b80c9c7cbe6014592", "html_url": "https://github.com/rust-lang/rust/commit/dd3772e4f01a9cab1d967c1b80c9c7cbe6014592", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd3772e4f01a9cab1d967c1b80c9c7cbe6014592/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ed189e8af09c60aa9410193dacc7c9f11144344", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed189e8af09c60aa9410193dacc7c9f11144344", "html_url": "https://github.com/rust-lang/rust/commit/3ed189e8af09c60aa9410193dacc7c9f11144344"}], "stats": {"total": 52, "additions": 18, "deletions": 34}, "files": [{"sha": "1dcc4d147acf23a45de96335b4c4b9fba070d67e", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 18, "deletions": 34, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/dd3772e4f01a9cab1d967c1b80c9c7cbe6014592/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3772e4f01a9cab1d967c1b80c9c7cbe6014592/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=dd3772e4f01a9cab1d967c1b80c9c7cbe6014592", "patch": "@@ -391,16 +391,13 @@ pub fn print_after_parsing(\n ) {\n     let (src, src_name) = get_source(input, sess);\n \n-    let mut out = String::new();\n-\n-    if let Source(s) = ppm {\n+    let out = if let Source(s) = ppm {\n         // Silently ignores an identified node.\n-        let out = &mut out;\n         call_with_pp_support(&s, sess, None, move |annotation| {\n             debug!(\"pretty printing source code {:?}\", s);\n             let sess = annotation.sess();\n             let parse = &sess.parse_sess;\n-            *out = pprust::print_crate(\n+            pprust::print_crate(\n                 sess.source_map(),\n                 krate,\n                 src_name,\n@@ -411,7 +408,7 @@ pub fn print_after_parsing(\n             )\n         })\n     } else {\n-        unreachable!();\n+        unreachable!()\n     };\n \n     write_or_print(&out, ofile);\n@@ -431,17 +428,14 @@ pub fn print_after_hir_lowering<'tcx>(\n \n     let (src, src_name) = get_source(input, tcx.sess);\n \n-    let mut out = String::new();\n-\n-    match ppm {\n+    let out = match ppm {\n         Source(s) => {\n             // Silently ignores an identified node.\n-            let out = &mut out;\n             call_with_pp_support(&s, tcx.sess, Some(tcx), move |annotation| {\n                 debug!(\"pretty printing source code {:?}\", s);\n                 let sess = annotation.sess();\n                 let parse = &sess.parse_sess;\n-                *out = pprust::print_crate(\n+                pprust::print_crate(\n                     sess.source_map(),\n                     krate,\n                     src_name,\n@@ -453,26 +447,20 @@ pub fn print_after_hir_lowering<'tcx>(\n             })\n         }\n \n-        Hir(s) => {\n-            let out = &mut out;\n-            call_with_pp_support_hir(&s, tcx, move |annotation, krate| {\n-                debug!(\"pretty printing HIR {:?}\", s);\n-                let sess = annotation.sess();\n-                let sm = sess.source_map();\n-                *out = pprust_hir::print_crate(sm, krate, src_name, src, annotation.pp_ann())\n-            })\n-        }\n+        Hir(s) => call_with_pp_support_hir(&s, tcx, move |annotation, krate| {\n+            debug!(\"pretty printing HIR {:?}\", s);\n+            let sess = annotation.sess();\n+            let sm = sess.source_map();\n+            pprust_hir::print_crate(sm, krate, src_name, src, annotation.pp_ann())\n+        }),\n \n-        HirTree => {\n-            let out = &mut out;\n-            call_with_pp_support_hir(&PpHirMode::Normal, tcx, move |_annotation, krate| {\n-                debug!(\"pretty printing HIR tree\");\n-                *out = format!(\"{:#?}\", krate);\n-            });\n-        }\n+        HirTree => call_with_pp_support_hir(&PpHirMode::Normal, tcx, move |_annotation, krate| {\n+            debug!(\"pretty printing HIR tree\");\n+            format!(\"{:#?}\", krate)\n+        }),\n \n         _ => unreachable!(),\n-    }\n+    };\n \n     write_or_print(&out, ofile);\n }\n@@ -491,14 +479,10 @@ fn print_with_analysis(\n     tcx.analysis(LOCAL_CRATE)?;\n \n     match ppm {\n-        Mir | MirCFG => match ppm {\n-            Mir => write_mir_pretty(tcx, None, &mut out),\n-            MirCFG => write_mir_graphviz(tcx, None, &mut out),\n-            _ => unreachable!(),\n-        },\n+        Mir => write_mir_pretty(tcx, None, &mut out).unwrap(),\n+        MirCFG => write_mir_graphviz(tcx, None, &mut out).unwrap(),\n         _ => unreachable!(),\n     }\n-    .unwrap();\n \n     let out = std::str::from_utf8(&out).unwrap();\n     write_or_print(out, ofile);"}]}