{"sha": "b3488c618638c6e9288cbe9b2b34ca1109a06a1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNDg4YzYxODYzOGM2ZTkyODhjYmU5YjJiMzRjYTExMDlhMDZhMWQ=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2016-06-03T21:18:19Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2016-06-03T21:18:19Z"}, "message": "Fix constraints on pattern formatting of else arms", "tree": {"sha": "7f55aa3632fc1dff95d46a0f8485060a5fbaf07d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f55aa3632fc1dff95d46a0f8485060a5fbaf07d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3488c618638c6e9288cbe9b2b34ca1109a06a1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3488c618638c6e9288cbe9b2b34ca1109a06a1d", "html_url": "https://github.com/rust-lang/rust/commit/b3488c618638c6e9288cbe9b2b34ca1109a06a1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3488c618638c6e9288cbe9b2b34ca1109a06a1d/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "728eb0005f5bd7e2c97af5149d5f45ddf53ac01e", "url": "https://api.github.com/repos/rust-lang/rust/commits/728eb0005f5bd7e2c97af5149d5f45ddf53ac01e", "html_url": "https://github.com/rust-lang/rust/commit/728eb0005f5bd7e2c97af5149d5f45ddf53ac01e"}], "stats": {"total": 86, "additions": 63, "deletions": 23}, "files": [{"sha": "66cc5e2fb6f4e7fec4a9be25f969a22ba3a95158", "filename": "src/comment.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b3488c618638c6e9288cbe9b2b34ca1109a06a1d/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3488c618638c6e9288cbe9b2b34ca1109a06a1d/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=b3488c618638c6e9288cbe9b2b34ca1109a06a1d", "patch": "@@ -29,29 +29,30 @@ pub fn rewrite_comment(orig: &str,\n     let s = orig.trim();\n \n     // Edge case: block comments. Let's not trim their lines (for now).\n-    let (opener, closer, line_start) = if block_style {\n-        (\"/* \", \" */\", \" * \")\n-    } else if !config.normalize_comments {\n-        if orig.starts_with(\"/**\") {\n-            (\"/** \", \" **/\", \" ** \")\n-        } else if orig.starts_with(\"/*!\") {\n-            (\"/*! \", \" */\", \" * \")\n-        } else if orig.starts_with(\"/*\") {\n+    let (opener, closer, line_start) =\n+        if block_style {\n             (\"/* \", \" */\", \" * \")\n-        } else if orig.starts_with(\"///\") {\n+        } else if !config.normalize_comments {\n+            if orig.starts_with(\"/**\") {\n+                (\"/** \", \" **/\", \" ** \")\n+            } else if orig.starts_with(\"/*!\") {\n+                (\"/*! \", \" */\", \" * \")\n+            } else if orig.starts_with(\"/*\") {\n+                (\"/* \", \" */\", \" * \")\n+            } else if orig.starts_with(\"///\") {\n+                (\"/// \", \"\", \"/// \")\n+            } else if orig.starts_with(\"//!\") {\n+                (\"//! \", \"\", \"//! \")\n+            } else {\n+                (\"// \", \"\", \"// \")\n+            }\n+        } else if orig.starts_with(\"///\") || orig.starts_with(\"/**\") {\n             (\"/// \", \"\", \"/// \")\n-        } else if orig.starts_with(\"//!\") {\n+        } else if orig.starts_with(\"//!\") || orig.starts_with(\"/*!\") {\n             (\"//! \", \"\", \"//! \")\n         } else {\n             (\"// \", \"\", \"// \")\n-        }\n-    } else if orig.starts_with(\"///\") || orig.starts_with(\"/**\") {\n-        (\"/// \", \"\", \"/// \")\n-    } else if orig.starts_with(\"//!\") || orig.starts_with(\"/*!\") {\n-        (\"//! \", \"\", \"//! \")\n-    } else {\n-        (\"// \", \"\", \"// \")\n-    };\n+        };\n \n     let max_chars = width.checked_sub(closer.len() + opener.len()).unwrap_or(1);\n \n@@ -127,11 +128,12 @@ fn left_trim_comment_line(line: &str) -> &str {\n        line.starts_with(\"/** \") {\n         &line[4..]\n     } else if line.starts_with(\"/* \") || line.starts_with(\"// \") || line.starts_with(\"//!\") ||\n-       line.starts_with(\"///\") || line.starts_with(\"** \") || line.starts_with(\"/*!\") ||\n-       line.starts_with(\"/**\") {\n+              line.starts_with(\"///\") ||\n+              line.starts_with(\"** \") || line.starts_with(\"/*!\") ||\n+              line.starts_with(\"/**\") {\n         &line[3..]\n     } else if line.starts_with(\"/*\") || line.starts_with(\"* \") || line.starts_with(\"//\") ||\n-       line.starts_with(\"**\") {\n+              line.starts_with(\"**\") {\n         &line[2..]\n     } else if line.starts_with(\"*\") {\n         &line[1..]"}, {"sha": "509f790842f1817914560e6af3437445234c1084", "filename": "src/expr.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b3488c618638c6e9288cbe9b2b34ca1109a06a1d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3488c618638c6e9288cbe9b2b34ca1109a06a1d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=b3488c618638c6e9288cbe9b2b34ca1109a06a1d", "patch": "@@ -725,6 +725,14 @@ fn rewrite_if_else(context: &RewriteContext,\n                    offset: Indent,\n                    allow_single_line: bool)\n                    -> Option<String> {\n+    let (budget, indent) = if !allow_single_line {\n+        // We are part of an if-elseif-else chain. Our constraints are tightened.\n+        // 7 = \"} else\" .len()\n+        (try_opt!(width.checked_sub(7)), offset + 7)\n+    } else {\n+        (width, offset)\n+    };\n+\n     // 3 = \"if \", 2 = \" {\"\n     let pat_penalty = match context.config.else_if_brace_style {\n         ElseIfBraceStyle::AlwaysNextLine => 3,\n@@ -735,8 +743,8 @@ fn rewrite_if_else(context: &RewriteContext,\n                                                     cond,\n                                                     \"let \",\n                                                     \" =\",\n-                                                    try_opt!(width.checked_sub(pat_penalty)),\n-                                                    offset + 3));\n+                                                    try_opt!(budget.checked_sub(pat_penalty)),\n+                                                    indent + 3));\n \n     // Try to format if-else on single line.\n     if expr_type == ExprType::SubExpression && allow_single_line &&\n@@ -778,6 +786,8 @@ fn rewrite_if_else(context: &RewriteContext,\n         let rewrite = match else_block.node {\n             // If the else expression is another if-else expression, prevent it\n             // from being formatted on a single line.\n+            // Note how we're passing the original width and offset, as the\n+            // cost of \"else\" should not cascade.\n             ast::ExprKind::IfLet(ref pat, ref cond, ref if_block, ref next_else_block) => {\n                 rewrite_if_else(context,\n                                 cond,"}, {"sha": "cb3c59b10ce22448d05f143865d88169fd05b263", "filename": "tests/source/expr.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b3488c618638c6e9288cbe9b2b34ca1109a06a1d/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3488c618638c6e9288cbe9b2b34ca1109a06a1d/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=b3488c618638c6e9288cbe9b2b34ca1109a06a1d", "patch": "@@ -272,3 +272,16 @@ fn if_else() {\n            -1.0\n        };\n }\n+\n+fn complex_if_else() {\n+    if let Some(x) = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {\n+    } else if let Some(x) = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {\n+        ha();\n+    } else if xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + xxxxxxxx {\n+        yo();\n+    } else if let Some(x) = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {\n+        ha();\n+    } else if xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + xxxxxxxxx {\n+        yo();\n+    }\n+}"}, {"sha": "12ac778be69b4ad6e468daa707afc723a14b307c", "filename": "tests/target/expr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b3488c618638c6e9288cbe9b2b34ca1109a06a1d/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3488c618638c6e9288cbe9b2b34ca1109a06a1d/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=b3488c618638c6e9288cbe9b2b34ca1109a06a1d", "patch": "@@ -275,3 +275,18 @@ fn if_else() {\n \n     let cx = tp1.x + any * radius * if anticlockwise { 1.0 } else { -1.0 };\n }\n+\n+fn complex_if_else() {\n+    if let Some(x) = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {\n+    } else if let Some(x) = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {\n+        ha();\n+    } else if xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + xxxxxxxx {\n+        yo();\n+    } else if let Some(x) =\n+                  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {\n+        ha();\n+    } else if xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx +\n+              xxxxxxxxx {\n+        yo();\n+    }\n+}"}]}