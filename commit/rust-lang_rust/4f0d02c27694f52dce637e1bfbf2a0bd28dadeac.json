{"sha": "4f0d02c27694f52dce637e1bfbf2a0bd28dadeac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMGQwMmMyNzY5NGY1MmRjZTYzN2UxYmZiZjJhMGJkMjhkYWRlYWM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-06T20:49:03Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-06T20:49:03Z"}, "message": "Enable infer_function_return_type in return-type position", "tree": {"sha": "0076ebb53dac4de8dcb887da51526afe9ccf3b62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0076ebb53dac4de8dcb887da51526afe9ccf3b62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f0d02c27694f52dce637e1bfbf2a0bd28dadeac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f0d02c27694f52dce637e1bfbf2a0bd28dadeac", "html_url": "https://github.com/rust-lang/rust/commit/4f0d02c27694f52dce637e1bfbf2a0bd28dadeac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f0d02c27694f52dce637e1bfbf2a0bd28dadeac/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c66588447440b4c1d32c75dd307dc752c83550e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c66588447440b4c1d32c75dd307dc752c83550e4", "html_url": "https://github.com/rust-lang/rust/commit/c66588447440b4c1d32c75dd307dc752c83550e4"}], "stats": {"total": 158, "additions": 129, "deletions": 29}, "files": [{"sha": "80864c530726024bd06726c72cea3cb58ae8acb8", "filename": "crates/assists/src/handlers/infer_function_return_type.rs", "status": "modified", "additions": 129, "deletions": 29, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/4f0d02c27694f52dce637e1bfbf2a0bd28dadeac/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f0d02c27694f52dce637e1bfbf2a0bd28dadeac/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs?ref=4f0d02c27694f52dce637e1bfbf2a0bd28dadeac", "patch": "@@ -1,13 +1,13 @@\n use hir::HirDisplay;\n-use syntax::{ast, AstNode, SyntaxToken, TextSize};\n+use syntax::{ast, AstNode, TextRange, TextSize};\n use test_utils::mark;\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: infer_function_return_type\n //\n // Adds the return type to a function or closure inferred from its tail expression if it doesn't have a return\n-// type specified.\n+// type specified. This assists is useable in a functions or closures tail expression or return type position.\n //\n // ```\n // fn foo() { 4<|>2i32 }\n@@ -17,19 +17,27 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // fn foo() -> i32 { 42i32 }\n // ```\n pub(crate) fn infer_function_return_type(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let expr = ctx.find_node_at_offset::<ast::Expr>()?;\n-    let (tail_expr, insert_pos, wrap_expr) = extract_tail(expr)?;\n+    let (tail_expr, builder_edit_pos, wrap_expr) = extract_tail(ctx)?;\n     let module = ctx.sema.scope(tail_expr.syntax()).module()?;\n-    let ty = ctx.sema.type_of_expr(&tail_expr).filter(|ty| !ty.is_unit())?;\n+    let ty = ctx.sema.type_of_expr(&tail_expr)?;\n+    if ty.is_unit() {\n+        return None;\n+    }\n     let ty = ty.display_source_code(ctx.db(), module.into()).ok()?;\n \n     acc.add(\n         AssistId(\"infer_function_return_type\", AssistKind::RefactorRewrite),\n         \"Add this function's return type\",\n         tail_expr.syntax().text_range(),\n         |builder| {\n-            let insert_pos = insert_pos.text_range().end() + TextSize::from(1);\n-            builder.insert(insert_pos, &format!(\"-> {} \", ty));\n+            match builder_edit_pos {\n+                InsertOrReplace::Insert(insert_pos) => {\n+                    builder.insert(insert_pos, &format!(\"-> {} \", ty))\n+                }\n+                InsertOrReplace::Replace(text_range) => {\n+                    builder.replace(text_range, &format!(\"-> {}\", ty))\n+                }\n+            }\n             if wrap_expr {\n                 mark::hit!(wrap_closure_non_block_expr);\n                 // `|x| x` becomes `|x| -> T x` which is invalid, so wrap it in a block\n@@ -39,34 +47,69 @@ pub(crate) fn infer_function_return_type(acc: &mut Assists, ctx: &AssistContext)\n     )\n }\n \n-fn extract_tail(expr: ast::Expr) -> Option<(ast::Expr, SyntaxToken, bool)> {\n-    let (ret_ty, tail_expr, insert_pos, wrap_expr) =\n-        if let Some(closure) = expr.syntax().ancestors().find_map(ast::ClosureExpr::cast) {\n-            let (tail_expr, wrap_expr) = match closure.body()? {\n+enum InsertOrReplace {\n+    Insert(TextSize),\n+    Replace(TextRange),\n+}\n+\n+/// Check the potentially already specified return type and reject it or turn it into a builder command\n+/// if allowed.\n+fn ret_ty_to_action(ret_ty: Option<ast::RetType>, insert_pos: TextSize) -> Option<InsertOrReplace> {\n+    match ret_ty {\n+        Some(ret_ty) => match ret_ty.ty() {\n+            Some(ast::Type::InferType(_)) | None => {\n+                mark::hit!(existing_infer_ret_type);\n+                mark::hit!(existing_infer_ret_type_closure);\n+                Some(InsertOrReplace::Replace(ret_ty.syntax().text_range()))\n+            }\n+            _ => {\n+                mark::hit!(existing_ret_type);\n+                mark::hit!(existing_ret_type_closure);\n+                None\n+            }\n+        },\n+        None => Some(InsertOrReplace::Insert(insert_pos + TextSize::from(1))),\n+    }\n+}\n+\n+fn extract_tail(ctx: &AssistContext) -> Option<(ast::Expr, InsertOrReplace, bool)> {\n+    let (tail_expr, return_type_range, action, wrap_expr) =\n+        if let Some(closure) = ctx.find_node_at_offset::<ast::ClosureExpr>() {\n+            let rpipe_pos = closure.param_list()?.syntax().last_token()?.text_range().end();\n+            let action = ret_ty_to_action(closure.ret_type(), rpipe_pos)?;\n+\n+            let body = closure.body()?;\n+            let body_start = body.syntax().first_token()?.text_range().start();\n+            let (tail_expr, wrap_expr) = match body {\n                 ast::Expr::BlockExpr(block) => (block.expr()?, false),\n                 body => (body, true),\n             };\n-            let ret_ty = closure.ret_type();\n-            let rpipe = closure.param_list()?.syntax().last_token()?;\n-            (ret_ty, tail_expr, rpipe, wrap_expr)\n+\n+            let ret_range = TextRange::new(rpipe_pos, body_start);\n+            (tail_expr, ret_range, action, wrap_expr)\n         } else {\n-            let func = expr.syntax().ancestors().find_map(ast::Fn::cast)?;\n-            let tail_expr = func.body()?.expr()?;\n-            let ret_ty = func.ret_type();\n-            let rparen = func.param_list()?.r_paren_token()?;\n-            (ret_ty, tail_expr, rparen, false)\n+            let func = ctx.find_node_at_offset::<ast::Fn>()?;\n+            let rparen_pos = func.param_list()?.r_paren_token()?.text_range().end();\n+            let action = ret_ty_to_action(func.ret_type(), rparen_pos)?;\n+\n+            let body = func.body()?;\n+            let tail_expr = body.expr()?;\n+\n+            let ret_range_end = body.l_curly_token()?.text_range().start();\n+            let ret_range = TextRange::new(rparen_pos, ret_range_end);\n+            (tail_expr, ret_range, action, false)\n         };\n-    if ret_ty.is_some() {\n-        mark::hit!(existing_ret_type);\n-        mark::hit!(existing_ret_type_closure);\n-        return None;\n-    }\n-    // check whether the expr we were at is indeed the tail expression\n-    if !tail_expr.syntax().text_range().contains_range(expr.syntax().text_range()) {\n-        mark::hit!(not_tail_expr);\n+    let frange = ctx.frange.range;\n+    if return_type_range.contains_range(frange) {\n+        mark::hit!(cursor_in_ret_position);\n+        mark::hit!(cursor_in_ret_position_closure);\n+    } else if tail_expr.syntax().text_range().contains_range(frange) {\n+        mark::hit!(cursor_on_tail);\n+        mark::hit!(cursor_on_tail_closure);\n+    } else {\n         return None;\n     }\n-    Some((tail_expr, insert_pos, wrap_expr))\n+    Some((tail_expr, action, wrap_expr))\n }\n \n #[cfg(test)]\n@@ -75,8 +118,65 @@ mod tests {\n \n     use super::*;\n \n+    #[test]\n+    fn infer_return_type_specified_inferred() {\n+        mark::check!(existing_infer_ret_type);\n+        check_assist(\n+            infer_function_return_type,\n+            r#\"fn foo() -> <|>_ {\n+                45\n+            }\"#,\n+            r#\"fn foo() -> i32 {\n+                45\n+            }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn infer_return_type_specified_inferred_closure() {\n+        mark::check!(existing_infer_ret_type_closure);\n+        check_assist(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+                || -> _ {<|>45};\n+            }\"#,\n+            r#\"fn foo() {\n+                || -> i32 {45};\n+            }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn infer_return_type_cursor_at_return_type_pos() {\n+        mark::check!(cursor_in_ret_position);\n+        check_assist(\n+            infer_function_return_type,\n+            r#\"fn foo() <|>{\n+                45\n+            }\"#,\n+            r#\"fn foo() -> i32 {\n+                45\n+            }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn infer_return_type_cursor_at_return_type_pos_closure() {\n+        mark::check!(cursor_in_ret_position_closure);\n+        check_assist(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+                || <|>45\n+            }\"#,\n+            r#\"fn foo() {\n+                || -> i32 {45}\n+            }\"#,\n+        );\n+    }\n+\n     #[test]\n     fn infer_return_type() {\n+        mark::check!(cursor_on_tail);\n         check_assist(\n             infer_function_return_type,\n             r#\"fn foo() {\n@@ -122,7 +222,6 @@ mod tests {\n \n     #[test]\n     fn not_applicable_non_tail_expr() {\n-        mark::check!(not_tail_expr);\n         check_assist_not_applicable(\n             infer_function_return_type,\n             r#\"fn foo() {\n@@ -144,6 +243,7 @@ mod tests {\n \n     #[test]\n     fn infer_return_type_closure_block() {\n+        mark::check!(cursor_on_tail_closure);\n         check_assist(\n             infer_function_return_type,\n             r#\"fn foo() {"}]}