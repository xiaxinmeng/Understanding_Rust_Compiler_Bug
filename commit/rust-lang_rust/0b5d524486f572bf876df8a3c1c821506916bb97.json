{"sha": "0b5d524486f572bf876df8a3c1c821506916bb97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNWQ1MjQ0ODZmNTcyYmY4NzZkZjhhM2MxYzgyMTUwNjkxNmJiOTc=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-15T08:09:30Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-15T08:09:30Z"}, "message": "Remove unnecessary references", "tree": {"sha": "0d1c1c3b9ef401f25c07295871e7de40c7dee6a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d1c1c3b9ef401f25c07295871e7de40c7dee6a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b5d524486f572bf876df8a3c1c821506916bb97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b5d524486f572bf876df8a3c1c821506916bb97", "html_url": "https://github.com/rust-lang/rust/commit/0b5d524486f572bf876df8a3c1c821506916bb97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b5d524486f572bf876df8a3c1c821506916bb97/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed2687f33b52b12dab675b5a36beba4346929ff8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed2687f33b52b12dab675b5a36beba4346929ff8", "html_url": "https://github.com/rust-lang/rust/commit/ed2687f33b52b12dab675b5a36beba4346929ff8"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "a18d2581735da455b986fcf634838d38c2f3e79c", "filename": "src/expr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b5d524486f572bf876df8a3c1c821506916bb97/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5d524486f572bf876df8a3c1c821506916bb97/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=0b5d524486f572bf876df8a3c1c821506916bb97", "patch": "@@ -294,7 +294,7 @@ pub fn format_expr(\n                 Some(format!(\n                     \"{}{}\",\n                     \"do catch \",\n-                    try_opt!(block.rewrite(&context, Shape::legacy(budget, shape.indent)))\n+                    try_opt!(block.rewrite(context, Shape::legacy(budget, shape.indent)))\n                 ))\n             }\n         }\n@@ -3004,17 +3004,17 @@ impl<'a> ToExpr for ast::StructField {\n \n impl<'a> ToExpr for MacroArg {\n     fn to_expr(&self) -> Option<&ast::Expr> {\n-        match self {\n-            &MacroArg::Expr(ref expr) => Some(expr),\n+        match *self {\n+            MacroArg::Expr(ref expr) => Some(expr),\n             _ => None,\n         }\n     }\n \n     fn can_be_overflowed(&self, context: &RewriteContext, len: usize) -> bool {\n-        match self {\n-            &MacroArg::Expr(ref expr) => can_be_overflowed_expr(context, expr, len),\n-            &MacroArg::Ty(ref ty) => can_be_overflowed_type(context, ty, len),\n-            &MacroArg::Pat(..) => false,\n+        match *self {\n+            MacroArg::Expr(ref expr) => can_be_overflowed_expr(context, expr, len),\n+            MacroArg::Ty(ref ty) => can_be_overflowed_type(context, ty, len),\n+            MacroArg::Pat(..) => false,\n         }\n     }\n }"}, {"sha": "f469ca8a11be65a6e9585a3172df864b7b600785", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b5d524486f572bf876df8a3c1c821506916bb97/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5d524486f572bf876df8a3c1c821506916bb97/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=0b5d524486f572bf876df8a3c1c821506916bb97", "patch": "@@ -330,7 +330,7 @@ impl<'a> FmtVisitor<'a> {\n                                 \"\"\n                             };\n \n-                            format_expr(&e, ExprType::Statement, &self.get_context(), self.shape())\n+                            format_expr(e, ExprType::Statement, &self.get_context(), self.shape())\n                                 .map(|s| s + suffix)\n                                 .or_else(|| Some(self.snippet(e.span)))\n                         }"}, {"sha": "42edc3d3d3c66cc62106739927827771e635647b", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b5d524486f572bf876df8a3c1c821506916bb97/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5d524486f572bf876df8a3c1c821506916bb97/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=0b5d524486f572bf876df8a3c1c821506916bb97", "patch": "@@ -114,7 +114,7 @@ pub struct ListItem {\n \n impl ListItem {\n     pub fn inner_as_ref(&self) -> &str {\n-        self.item.as_ref().map_or(\"\", |s| &*s)\n+        self.item.as_ref().map_or(\"\", |s| s)\n     }\n \n     pub fn is_different_group(&self) -> bool {"}, {"sha": "d2e9454024016c99a7ae088640d8a4a633ad57c4", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b5d524486f572bf876df8a3c1c821506916bb97/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5d524486f572bf876df8a3c1c821506916bb97/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=0b5d524486f572bf876df8a3c1c821506916bb97", "patch": "@@ -340,7 +340,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         match item.node {\n-            ast::ItemKind::Use(ref vp) => self.format_import(&item, vp),\n+            ast::ItemKind::Use(ref vp) => self.format_import(item, vp),\n             ast::ItemKind::Impl(..) => {\n                 let snippet = self.snippet(item.span);\n                 let where_span_end = snippet\n@@ -381,7 +381,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n             ast::ItemKind::Mod(ref module) => {\n                 self.format_missing_with_indent(source!(self, item.span).lo());\n-                self.format_mod(module, &item.vis, item.span, item.ident, &attrs);\n+                self.format_mod(module, &item.vis, item.span, item.ident, attrs);\n             }\n             ast::ItemKind::Mac(ref mac) => {\n                 self.visit_mac(mac, Some(item.ident), MacroPosition::Item);"}]}