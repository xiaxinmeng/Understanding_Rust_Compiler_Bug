{"sha": "4a1f556999b25e0d62402a8edda8839c2940fb74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMWY1NTY5OTliMjVlMGQ2MjQwMmE4ZWRkYTg4MzljMjk0MGZiNzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-15T13:13:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-17T14:05:32Z"}, "message": "Create a struct to represent early-bound regions", "tree": {"sha": "8768ced89bab446d7b91a28cf34f77f7f0d95998", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8768ced89bab446d7b91a28cf34f77f7f0d95998"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a1f556999b25e0d62402a8edda8839c2940fb74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1f556999b25e0d62402a8edda8839c2940fb74", "html_url": "https://github.com/rust-lang/rust/commit/4a1f556999b25e0d62402a8edda8839c2940fb74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a1f556999b25e0d62402a8edda8839c2940fb74/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "html_url": "https://github.com/rust-lang/rust/commit/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4"}], "stats": {"total": 128, "additions": 79, "deletions": 49}, "files": [{"sha": "955905ee2634d46de25c0d0ac4f5dad8819dd50d", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=4a1f556999b25e0d62402a8edda8839c2940fb74", "patch": "@@ -341,7 +341,12 @@ fn parse_region_<F>(st: &mut PState, conv: &mut F) -> ty::Region where\n         let index = parse_u32(st);\n         assert_eq!(next(st), '|');\n         let nm = token::str_to_ident(&parse_str(st, ']'));\n-        ty::ReEarlyBound(node_id, space, index, nm.name)\n+        ty::ReEarlyBound(ty::EarlyBoundRegion {\n+            param_id: node_id,\n+            space: space,\n+            index: index,\n+            name: nm.name\n+        })\n       }\n       'f' => {\n         assert_eq!(next(st), '[');"}, {"sha": "8a27881128255e55bd3bf2a5ed09edcaba559914", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=4a1f556999b25e0d62402a8edda8839c2940fb74", "patch": "@@ -241,12 +241,12 @@ pub fn enc_region(w: &mut Encoder, cx: &ctxt, r: ty::Region) {\n             enc_bound_region(w, cx, br);\n             mywrite!(w, \"]\");\n         }\n-        ty::ReEarlyBound(node_id, space, index, name) => {\n+        ty::ReEarlyBound(ref data) => {\n             mywrite!(w, \"B[{}|{}|{}|{}]\",\n-                     node_id,\n-                     space.to_uint(),\n-                     index,\n-                     token::get_name(name));\n+                     data.param_id,\n+                     data.space.to_uint(),\n+                     data.index,\n+                     token::get_name(data.name));\n         }\n         ty::ReFree(ref fr) => {\n             mywrite!(w, \"f[\");"}, {"sha": "7ee0ea4fd664bac53a1bc146149ce3f8f082311e", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=4a1f556999b25e0d62402a8edda8839c2940fb74", "patch": "@@ -496,8 +496,13 @@ impl tr for ty::Region {\n             ty::ReLateBound(debruijn, br) => {\n                 ty::ReLateBound(debruijn, br.tr(dcx))\n             }\n-            ty::ReEarlyBound(id, space, index, ident) => {\n-                ty::ReEarlyBound(dcx.tr_id(id), space, index, ident)\n+            ty::ReEarlyBound(data) => {\n+                ty::ReEarlyBound(ty::EarlyBoundRegion {\n+                    param_id: dcx.tr_id(data.param_id),\n+                    space: data.space,\n+                    index: data.index,\n+                    name: data.name,\n+                })\n             }\n             ty::ReScope(scope) => {\n                 ty::ReScope(scope.tr(dcx))"}, {"sha": "2f7296051c566cb14ab0d40612e9113c5b3425c3", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=4a1f556999b25e0d62402a8edda8839c2940fb74", "patch": "@@ -603,14 +603,11 @@ impl RegionMaps {\n                     self.sub_free_region(sub_fr, super_fr)\n                 }\n \n-                (ty::ReEarlyBound(param_id_a, param_space_a, index_a, _),\n-                 ty::ReEarlyBound(param_id_b, param_space_b, index_b, _)) => {\n+                (ty::ReEarlyBound(data_a), ty::ReEarlyBound(data_b)) => {\n                     // This case is used only to make sure that explicitly-\n                     // specified `Self` types match the real self type in\n-                    // implementations.\n-                    param_id_a == param_id_b &&\n-                        param_space_a == param_space_b &&\n-                        index_a == index_b\n+                    // implementations. Yuck.\n+                    data_a == data_b\n                 }\n \n                 _ => {"}, {"sha": "29f718fd0976942062053bb582cac9c1b6bd61fd", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=4a1f556999b25e0d62402a8edda8839c2940fb74", "patch": "@@ -622,11 +622,11 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n         // regions that appear in a function signature is done using\n         // the specialized routine `ty::replace_late_regions()`.\n         match r {\n-            ty::ReEarlyBound(_, space, i, region_name) => {\n+            ty::ReEarlyBound(data) => {\n                 match self.substs.regions {\n                     ErasedRegions => ty::ReStatic,\n                     NonerasedRegions(ref regions) =>\n-                        match regions.opt_get(space, i as usize) {\n+                        match regions.opt_get(data.space, data.index as usize) {\n                             Some(&r) => {\n                                 self.shift_region_through_binders(r)\n                             }\n@@ -635,11 +635,12 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n                                 self.tcx().sess.span_bug(\n                                     span,\n                                     &format!(\"Type parameter out of range \\\n-                                     when substituting in region {} (root type={}) \\\n-                                     (space={:?}, index={})\",\n-                                    region_name.as_str(),\n-                                    self.root_ty.repr(self.tcx()),\n-                                    space, i));\n+                                              when substituting in region {} (root type={}) \\\n+                                              (space={:?}, index={})\",\n+                                             data.name.as_str(),\n+                                             self.root_ty.repr(self.tcx()),\n+                                             data.space,\n+                                             data.index));\n                             }\n                         }\n                 }"}, {"sha": "53c3cdd02af8923f22c232fd10ab74d876ad5e1b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4a1f556999b25e0d62402a8edda8839c2940fb74", "patch": "@@ -1134,10 +1134,7 @@ pub enum Region {\n     // Region bound in a type or fn declaration which will be\n     // substituted 'early' -- that is, at the same time when type\n     // parameters are substituted.\n-    ReEarlyBound(/* param id */ ast::NodeId,\n-                 subst::ParamSpace,\n-                 /*index*/ u32,\n-                 ast::Name),\n+    ReEarlyBound(EarlyBoundRegion),\n \n     // Region bound in a function scope, which will be substituted when the\n     // function is called.\n@@ -1169,6 +1166,14 @@ pub enum Region {\n     ReEmpty,\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n+pub struct EarlyBoundRegion {\n+    pub param_id: ast::NodeId,\n+    pub space: subst::ParamSpace,\n+    pub index: u32,\n+    pub name: ast::Name,\n+}\n+\n /// Upvars do not get their own node-id. Instead, we use the pair of\n /// the original var id (that is, the root variable that is referenced\n /// by the upvar) and the id of the closure expression.\n@@ -1761,7 +1766,12 @@ pub struct RegionParameterDef {\n \n impl RegionParameterDef {\n     pub fn to_early_bound_region(&self) -> ty::Region {\n-        ty::ReEarlyBound(self.def_id.node, self.space, self.index, self.name)\n+        ty::ReEarlyBound(ty::EarlyBoundRegion {\n+            param_id: self.def_id.node,\n+            space: self.space,\n+            index: self.index,\n+            name: self.name,\n+        })\n     }\n     pub fn to_bound_region(&self) -> ty::BoundRegion {\n         ty::BoundRegion::BrNamed(self.def_id, self.name)\n@@ -7071,8 +7081,7 @@ pub fn make_substs_for_receiver_types<'tcx>(tcx: &ty::ctxt<'tcx>,\n     let meth_regions: Vec<ty::Region> =\n         method.generics.regions.get_slice(subst::FnSpace)\n               .iter()\n-              .map(|def| ty::ReEarlyBound(def.def_id.node, def.space,\n-                                          def.index, def.name))\n+              .map(|def| def.to_early_bound_region())\n               .collect();\n     trait_ref.substs.clone().with_method(meth_tps, meth_regions)\n }"}, {"sha": "6e0fe3e5a71c44f74a56965d599e5a2056097255", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=4a1f556999b25e0d62402a8edda8839c2940fb74", "patch": "@@ -163,8 +163,8 @@ pub fn explain_region_and_span(cx: &ctxt, region: ty::Region)\n \n       ReEmpty => { (\"the empty lifetime\".to_string(), None) }\n \n-      ReEarlyBound(_, _, _, name) => {\n-        (format!(\"{}\", token::get_name(name)), None)\n+      ReEarlyBound(ref data) => {\n+        (format!(\"{}\", token::get_name(data.name)), None)\n       }\n \n       // I believe these cases should not occur (except when debugging,\n@@ -223,8 +223,8 @@ pub fn region_to_string(cx: &ctxt, prefix: &str, space: bool, region: Region) ->\n     // `explain_region()` or `note_and_explain_region()`.\n     match region {\n         ty::ReScope(_) => prefix.to_string(),\n-        ty::ReEarlyBound(_, _, _, name) => {\n-            token::get_name(name).to_string()\n+        ty::ReEarlyBound(ref data) => {\n+            token::get_name(data.name).to_string()\n         }\n         ty::ReLateBound(_, br) => bound_region_to_string(cx, prefix, space, br),\n         ty::ReFree(ref fr) => bound_region_to_string(cx, prefix, space, fr.bound_region),\n@@ -899,12 +899,12 @@ impl<'tcx> Repr<'tcx> for ty::BoundRegion {\n impl<'tcx> Repr<'tcx> for ty::Region {\n     fn repr(&self, tcx: &ctxt) -> String {\n         match *self {\n-            ty::ReEarlyBound(id, space, index, name) => {\n+            ty::ReEarlyBound(ref data) => {\n                 format!(\"ReEarlyBound({}, {:?}, {}, {})\",\n-                               id,\n-                               space,\n-                               index,\n-                               token::get_name(name))\n+                        data.param_id,\n+                        data.space,\n+                        data.index,\n+                        token::get_name(data.name))\n             }\n \n             ty::ReLateBound(binder_id, ref bound_region) => {"}, {"sha": "171c83d00e465240ae906f1a8fa8f5f0e7e7a9a9", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4a1f556999b25e0d62402a8edda8839c2940fb74", "patch": "@@ -161,7 +161,12 @@ pub fn ast_region_to_region(tcx: &ty::ctxt, lifetime: &ast::Lifetime)\n         }\n \n         Some(&rl::DefEarlyBoundRegion(space, index, id)) => {\n-            ty::ReEarlyBound(id, space, index, lifetime.name)\n+            ty::ReEarlyBound(ty::EarlyBoundRegion {\n+                param_id: id,\n+                space: space,\n+                index: index,\n+                name: lifetime.name\n+            })\n         }\n \n         Some(&rl::DefFreeRegion(scope, id)) => {"}, {"sha": "72adad75865ee86d8a7c882b7a5e657ea1fbc864", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4a1f556999b25e0d62402a8edda8839c2940fb74", "patch": "@@ -1217,10 +1217,12 @@ fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             generics.lifetimes\n                     .iter()\n                     .enumerate()\n-                    .map(|(i, def)| ty::ReEarlyBound(def.lifetime.id,\n-                                                     TypeSpace,\n-                                                     i as u32,\n-                                                     def.lifetime.name))\n+                    .map(|(i, def)| ty::ReEarlyBound(ty::EarlyBoundRegion {\n+                        param_id: def.lifetime.id,\n+                        space: TypeSpace,\n+                        index: i as u32,\n+                        name: def.lifetime.name\n+                    }))\n                     .collect();\n \n         // Start with the generics in the type parameters...\n@@ -1691,7 +1693,13 @@ fn ty_generic_predicates<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n     let early_lifetimes = early_bound_lifetimes_from_generics(space, ast_generics);\n     for (index, param) in early_lifetimes.iter().enumerate() {\n         let index = index as u32;\n-        let region = ty::ReEarlyBound(param.lifetime.id, space, index, param.lifetime.name);\n+        let region =\n+            ty::ReEarlyBound(ty::EarlyBoundRegion {\n+                param_id: param.lifetime.id,\n+                space: space,\n+                index: index,\n+                name: param.lifetime.name\n+            });\n         for bound in &param.bounds {\n             let bound_region = ast_region_to_region(ccx.tcx, bound);\n             let outlives = ty::Binder(ty::OutlivesPredicate(region, bound_region));\n@@ -2168,10 +2176,10 @@ fn check_method_self_type<'a, 'tcx, RS:RegionScope>(\n \n         ty_fold::fold_regions(tcx, value, |region, _| {\n             match region {\n-                ty::ReEarlyBound(id, _, _, name) => {\n-                    let def_id = local_def(id);\n+                ty::ReEarlyBound(data) => {\n+                    let def_id = local_def(data.param_id);\n                     ty::ReFree(ty::FreeRegion { scope: scope,\n-                                                bound_region: ty::BrNamed(def_id, name) })\n+                                                bound_region: ty::BrNamed(def_id, data.name) })\n                 }\n                 _ => region\n             }"}, {"sha": "7575f12878a56c400709d9c837a484143449bbfd", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1f556999b25e0d62402a8edda8839c2940fb74/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=4a1f556999b25e0d62402a8edda8839c2940fb74", "patch": "@@ -1046,9 +1046,9 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                                    region: ty::Region,\n                                    variance: VarianceTermPtr<'a>) {\n         match region {\n-            ty::ReEarlyBound(param_id, _, _, _) => {\n-                if self.is_to_be_inferred(param_id) {\n-                    let index = self.inferred_index(param_id);\n+            ty::ReEarlyBound(ref data) => {\n+                if self.is_to_be_inferred(data.param_id) {\n+                    let index = self.inferred_index(data.param_id);\n                     self.add_constraint(index, variance);\n                 }\n             }"}]}