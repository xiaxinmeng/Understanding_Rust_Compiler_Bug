{"sha": "7dfd8ceb4fe5fceb426ab6868312cc0890e28837", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZmQ4Y2ViNGZlNWZjZWI0MjZhYjY4NjgzMTJjYzA4OTBlMjg4Mzc=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-05-12T15:55:48Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-05-13T08:07:55Z"}, "message": "ci: remove fanout from the azure pipelines config", "tree": {"sha": "a5bf6a57ba179ef04fda000d4f281f2f1d883695", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5bf6a57ba179ef04fda000d4f281f2f1d883695"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dfd8ceb4fe5fceb426ab6868312cc0890e28837", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAlzZJdsACgkQPgar6Auq\n8ZxDQA//f2wOD+6ijjKMasFYQvBnSzzpi4nicqoJ/Of3fpGwiWvusZh0+DHjHYUW\nmSjyg2H2I/MbrDsLTcwNM6NvaLrNSIEwFp9kkLXDAJR0kyqzxFicMcGLgRanJRPn\nBLs1yiAmFbwIJSsSk/u2P8/6HT9OOB73l0HpKu3wb9Fj4DVYFd9ZbdT0LIF71Om4\nhWd3ey79RlZ4EXJa5n60Kttj3ZOyKfC3VoiwDjQ3U/DjVX3s400JoglHPuxn+7OF\n+vjHkeo/LaWNqihonRwaEDyuiqnzJgxlzaxxzAivZlbvE0n8A78/H7Ke8JyPAh1O\niS32NFeqzdxNaIN1nYHWO1/x8nqAeMEJ6p/ksojfXmbo0vI0pzt8WwaEPOmWZ9kF\n0GDsoHLftdyDjdXyHzAtGCy8fmfBac0Zgj9OF7TalxAmNlkQJEUmkOcOxuP/LUzk\niYxpNsCRhwVgvOgNukVIE+L2KVbcn0mRUNOxKyixfmEOEDd9jYA19iKUxvy98Jwz\niq+XX+lBn0062UuYgefC+QxO8ssxli8pUsdy6n/qixaCIII31XzahkJVkWpA1/Ve\nShYQFgkMDl4bSsdx0nGvpnQzvvXtIymbPC5/C5jw0gNujRnju1Dmer8KQujhc0UX\nzHh0gyiFf2kiYpRxuFW+25uh3mAi9j2HOVkPefSmVl+WXOu1Wzk=\n=AszR\n-----END PGP SIGNATURE-----", "payload": "tree a5bf6a57ba179ef04fda000d4f281f2f1d883695\nparent 869ddd8d0019683c007956bae17fc07cd30f39f7\nauthor Pietro Albini <pietro@pietroalbini.org> 1557676548 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1557734875 +0200\n\nci: remove fanout from the azure pipelines config\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dfd8ceb4fe5fceb426ab6868312cc0890e28837", "html_url": "https://github.com/rust-lang/rust/commit/7dfd8ceb4fe5fceb426ab6868312cc0890e28837", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dfd8ceb4fe5fceb426ab6868312cc0890e28837/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "869ddd8d0019683c007956bae17fc07cd30f39f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/869ddd8d0019683c007956bae17fc07cd30f39f7", "html_url": "https://github.com/rust-lang/rust/commit/869ddd8d0019683c007956bae17fc07cd30f39f7"}], "stats": {"total": 643, "additions": 25, "deletions": 618}, "files": [{"sha": "def19a87076d8c79c3817a4c4736c0060bab603d", "filename": ".azure-pipelines/auto.fanout.yml", "status": "removed", "additions": 0, "deletions": 521, "changes": 521, "blob_url": "https://github.com/rust-lang/rust/blob/869ddd8d0019683c007956bae17fc07cd30f39f7/.azure-pipelines%2Fauto.fanout.yml", "raw_url": "https://github.com/rust-lang/rust/raw/869ddd8d0019683c007956bae17fc07cd30f39f7/.azure-pipelines%2Fauto.fanout.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fauto.fanout.yml?ref=869ddd8d0019683c007956bae17fc07cd30f39f7", "patch": "@@ -1,521 +0,0 @@\n-#\n-# Azure Pipelines \"auto\" branch build for Rust on Linux, macOS, and Windows.\n-# \n-# Notes:\n-# To get sccache working, I (John Erickson) had to build it with the Azure feature enabled\n-# and with openssl statically-linked for Linux.\n-# Here's the build (with a backpointer to source) of where the bits came from:\n-# https://dev.azure.com/johnterickson/rust-lang/_build/results?buildId=275\n-\n-name: fanout \n-pr: none\n-trigger:\n-- auto\n-\n-variables:\n-- group: caching\n-\n-jobs:\n-# WINDOWS JOBS\n-- job: Windows\n-  timeoutInMinutes: 180\n-  variables:\n-    TAR_COMMAND: tar\n-  pool:\n-    vmImage: 'vs2017-win2016'\n-  steps:\n-  - template: steps/windows.yml\n-  strategy:\n-    matrix:\n-      # 32/64 bit MSVC tests\n-      x86_64-msvc-1:\n-        MSYS_BITS: 64\n-        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n-        SCRIPT: make ci-subset-1\n-      x86_64-msvc-2:\n-        MSYS_BITS: 64\n-        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n-        SCRIPT: make ci-subset-2\n-\n-- job: Windows_build  \n-  timeoutInMinutes: 180\n-  variables:\n-    TAR_COMMAND: tar\n-  pool:\n-    vmImage: 'vs2017-win2016'\n-  steps:\n-  - template: steps/windows.yml\n-  - script: |\n-      echo on\n-      echo \"##vso[task.setvariable variable=TAR_PATH]%TEMP%\\drop.tar\"\n-  - bash: |\n-      set -x\n-      $TAR_COMMAND --dereference --exclude=.git --exclude=citools $SUBMODULES_EXCLUDES -cf $TEMP/drop.tar .\n-      $TAR_COMMAND --append --file=$TEMP/drop.tar citools\n-  - task: PublishPipelineArtifact@0\n-    inputs:\n-      artifactName: $(System.JobDisplayName)\n-      targetPath: $(TAR_PATH)\n-  strategy:\n-    matrix:\n-      # 32/64 bit MSVC tests\n-      x86_64-msvc-build:\n-        MSYS_BITS: 64\n-        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n-        SCRIPT: make ci-test-prepare\n-\n-- job: Windows_test\n-  dependsOn: Windows_build\n-  timeoutInMinutes: 180\n-  variables:\n-    TAR_COMMAND: tar\n-    SKIP_PREP: 1\n-    KEEP_STAGE: '--keep-stage 0 --keep-stage 1'\n-    SKIP_LLVM_BUILD: 1\n-  pool:\n-    vmImage: 'vs2017-win2016'\n-  steps:\n-  - checkout: self\n-    fetchDepth: 2\n-  - script: |\n-      set MSYS_PATH=%CD%\\citools\\msys64\n-      set PATH=%MSYS_PATH%\\usr\\bin;%PATH%\n-      where rev\n-      rev --help\n-      where make\n-      echo ##vso[task.prependpath]%MSYS_PATH%\\usr\\bin\n-    displayName: Install msys2\n-\n-  # # If we need to download a custom MinGW, do so here and set the path\n-  # # appropriately.\n-  # #\n-  # # Note that this *also* means that we're not using what is typically\n-  # # /mingw32/bin/python2.7.exe, which is a \"correct\" python interpreter where\n-  # # /usr/bin/python2.7.exe is not. To ensure we use the right interpreter we\n-  # # move `C:\\Python27` ahead in PATH and then also make sure the `python2.7.exe`\n-  # # file exists in there (which it doesn't by default).\n-  # - script: |\n-  #     powershell -Command \"iwr -outf %MINGW_ARCHIVE% %MINGW_URL%/%MINGW_ARCHIVE%\"\n-  #     7z x -y %MINGW_ARCHIVE% > nul\n-  #     echo ##vso[task.prependpath]%CD%\\%MINGW_DIR%\\bin\n-  #   condition: and(succeeded(), ne(variables['MINGW_URL'],''))\n-  #   displayName: Download custom MinGW\n-\n-  # If we're compiling for MSVC then we, like most other distribution builders,\n-  # switch to clang as the compiler. This'll allow us eventually to enable LTO\n-  # amongst LLVM and rustc. Note that we only do this on MSVC as I don't think\n-  # clang has an output mode compatible with MinGW that we need. If it does we\n-  # should switch to clang for MinGW as well!\n-  #\n-  # Note that the LLVM installer is an NSIS installer\n-  #\n-  # Original downloaded here came from\n-  # http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe\n-  - script: |\n-      # powershell -Command \"iwr -outf LLVM-7.0.0-win64.exe https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/LLVM-7.0.0-win64.exe\"\n-      # .\\LLVM-7.0.0-win64.exe /S /NCRC /D=C:\\clang-rust\n-      set CLANG_DIR=%CD%\\citools\\clang-rust\n-      set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --set llvm.clang-cl=%CLANG_DIR%\\bin\\clang-cl.exe\n-      echo ##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]%RUST_CONFIGURE_ARGS%\n-    condition: and(succeeded(), eq(variables['MINGW_URL'],''))\n-    displayName: Download clang\n-\n-  # # Here we do a pretty heinous thing which is to mangle the MinGW installation\n-  # # we just had above. Currently, as of this writing, we're using MinGW-w64\n-  # # builds of gcc, and that's currently at 6.3.0. We use 6.3.0 as it appears to\n-  # # be the first version which contains a fix for #40546, builds randomly\n-  # # failing during LLVM due to ar.exe/ranlib.exe failures.\n-  # #\n-  # # Unfortunately, though, 6.3.0 *also* is the first version of MinGW-w64 builds\n-  # # to contain a regression in gdb (#40184). As a result if we were to use the\n-  # # gdb provided (7.11.1) then we would fail all debuginfo tests.\n-  # #\n-  # # In order to fix spurious failures (pretty high priority) we use 6.3.0. To\n-  # # avoid disabling gdb tests we download an *old* version of gdb, specifically\n-  # # that found inside the 6.2.0 distribution. We then overwrite the 6.3.0 gdb\n-  # # with the 6.2.0 gdb to get tests passing.\n-  # #\n-  # # Note that we don't literally overwrite the gdb.exe binary because it appears\n-  # # to just use gdborig.exe, so that's the binary we deal with instead.\n-  # - script: |\n-  #     echo ON\n-  #     powershell -Command \"iwr -outf 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_URL%/2017-04-20-%MSYS_BITS%bit-gdborig.exe\"\n-  #     mv 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_DIR%\\bin\\gdborig.exe\n-  #   condition: and(succeeded(), ne(variables['MINGW_URL'],''))\n-  #   displayName: Override with 6.3.0 gdb with 6.2.0 gdb\n-\n-  # Otherwise pull in the MinGW installed on appveyor\n-  - script: |\n-      echo Find mingw\n-      set PATH | findstr /i msys\n-      set PATH | findstr /i mingw\n-      echo ##vso[task.prependpath]C:\\msys64\\mingw%MSYS_BITS%\\bin\n-    condition: and(succeeded(), eq(variables['MINGW_URL'],''))\n-    displayName: Add MinGW to path\n-\n-  - script: |\n-      copy C:\\Python27amd64\\python.exe C:\\Python27amd64\\python2.7.exe\n-      echo ##vso[task.prependpath]C:\\Python27amd64\n-    displayName: Prefer the \"native\" Python as LLVM has trouble building with MSYS sometimes\n-\n-  - script: |\n-      REM md sccache\n-      REM powershell -Command \"iwr -outf sccache\\sccache.exe https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-26-sccache-x86_64-pc-windows-msvc\"\n-      echo ##vso[task.prependpath]%CD%\\sccache\n-    displayName: Download and install sccache\n-\n-  # Note that this is originally from the github releases patch of Ninja\n-  - script: |\n-      REM md ninja\n-      REM powershell -Command \"iwr -outf 2017-03-15-ninja-win.zip https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-15-ninja-win.zip\"\n-      REM 7z x -oninja 2017-03-15-ninja-win.zip\n-      REM del 2017-03-15-ninja-win.zip\n-      set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --enable-ninja\n-      echo ##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]%RUST_CONFIGURE_ARGS%\n-      echo ##vso[task.prependpath]%CD%\\ninja\n-    displayName: Download and install ninja\n-  \n-  - script: |\n-      IF NOT \"%DISABLE_DISK_SPACE_HACK%\"==\"1\" (\n-        IF NOT EXIST build (\n-          mkdir c:\\MORE_SPACE\n-          mklink /J build c:\\MORE_SPACE\n-        )\n-      )\n-  - script: |\n-      echo on\n-      echo ##vso[task.setvariable variable=TAR_FOLDER_PATH]%TEMP%\n-  - template: steps/show-environment-variables.yml\n-  - task: DownloadPipelineArtifact@1\n-    inputs:\n-      artifactName: $(ARTIFACT_NAME)\n-      downloadPath: $(TAR_FOLDER_PATH)\n-  # - task: DownloadPipelineArtifact@1\n-  #   inputs:\n-  #     artifactName: $(ARTIFACT_NAME)\n-  #     downloadPath: $(TAR_FOLDER_PATH)\n-  #     buildType: specific\n-  #     project: rust\n-  #     pipeline: 8\n-  #     buildVersionToDownload: specific\n-  #     buildId: 200\n-  #     # https://dev.azure.com/rust-lang-azure/rust/_build/results?buildId=145\n-\n-  # - template: steps/macos.yml \n-  - bash: $TAR_COMMAND -tvf $TEMP/drop.tar\n-  - bash: $TAR_COMMAND --touch -xf $TEMP/drop.tar\n-  - bash: rm $TEMP/drop.tar\n-  - script: |\n-      REM mkdir handle\n-      REM powershell -Command \"iwr -outf 2017-05-15-Handle.zip https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-05-15-Handle.zip\"\n-      REM 7z x -ohandle 2017-05-15-Handle.zip\n-      REM del 2017-05-15-Handle.zip\n-      set PATH=%PATH%;%CD%\\handle\n-      handle.exe -accepteula -help\n-      echo ##vso[task.setvariable variable=PATH]%PATH%\n-    displayName: Help debug handle issues\n-  - script: |\n-      REM echo force the specific VS version https://github.com/johnterickson/rust/issues/8\n-      IF \"%VCVARS_BAT%\" NEQ \"\" ( \n-        CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\%VCVARS_BAT%\"\n-      )\n-\n-      where sccache\n-      where rev\n-      set | findstr /v SCCACHE_AZURE_CONNECTION_STRING\n-\n-      if not exist D:\\cache\\rustsrc\\NUL mkdir D:\\cache\\rustsrc\n-      \n-      sh src/ci/run.sh\n-    env:      \n-      CI: true\n-      CI_JOB_NAME: $(System.JobDisplayName)\n-      SRC: .\n-      NO_CCACHE: 1\n-\n-      # explicitly decrypt secret variables\n-      # see https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch\n-      SCCACHE_AZURE_CONNECTION_STRING: $(SCCACHE_AZURE_CONNECTION_STRING_SECRET)\n-      DOCKER_LAYER_CACHE_AZURE_STORAGE_ACCOUNT_KEY: $(DOCKER_LAYER_CACHE_AZURE_STORAGE_ACCOUNT_KEY_SECRET)\n-    displayName: Run script\n-  \n-  strategy:\n-    matrix:\n-      # 32/64 bit MSVC tests\n-      x86_64-msvc-A:\n-        MSYS_BITS: 64\n-        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n-        ARTIFACT_NAME: x86_64-msvc-build\n-        SCRIPT: make ci-resume-subset-A\n-      x86_64-msvc-B:\n-        MSYS_BITS: 64\n-        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n-        ARTIFACT_NAME: x86_64-msvc-build\n-        SCRIPT: make ci-resume-subset-B\n-      x86_64-msvc-C:\n-        MSYS_BITS: 64\n-        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n-        ARTIFACT_NAME: x86_64-msvc-build\n-        SCRIPT: make ci-resume-subset-C\n-      x86_64-msvc-D:\n-        MSYS_BITS: 64\n-        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n-        ARTIFACT_NAME: x86_64-msvc-build\n-        SCRIPT: make ci-resume-subset-D\n-      x86_64-msvc-E:\n-        MSYS_BITS: 64\n-        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n-        ARTIFACT_NAME: x86_64-msvc-build\n-        SCRIPT: make ci-resume-subset-E\n-      x86_64-msvc-F:\n-        MSYS_BITS: 64\n-        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n-        ARTIFACT_NAME: x86_64-msvc-build\n-        SCRIPT: make ci-resume-subset-F\n-      x86_64-msvc-G:\n-        MSYS_BITS: 64\n-        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n-        ARTIFACT_NAME: x86_64-msvc-build\n-        SCRIPT: make ci-resume-subset-G\n-      x86_64-msvc-H:\n-        MSYS_BITS: 64\n-        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n-        ARTIFACT_NAME: x86_64-msvc-build\n-        SCRIPT: make ci-resume-subset-H\n-\n-# macOS JOBS\n-- job: macOS\n-  timeoutInMinutes: 180\n-  variables:\n-    TAR_COMMAND: gtar\n-  pool:\n-    vmImage: macos-10.13\n-  steps:\n-  - checkout: self\n-    fetchDepth: 2\n-  - template: steps/macos.yml  \n-  strategy:\n-    matrix:\n-      x86_64-apple:\n-        RUST_CHECK_TARGET: check\n-        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n-        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-        MACOSX_DEPLOYMENT_TARGET: 10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n-        NO_LLVM_ASSERTIONS: 1\n-        NO_DEBUG_ASSERTIONS: 1\n-\n-- job: macOS_build\n-  timeoutInMinutes: 180\n-  variables:\n-    TAR_COMMAND: gtar\n-  pool:\n-    vmImage: macos-10.13\n-  steps:\n-  - checkout: self\n-    fetchDepth: 2\n-  - template: steps/macos.yml\n-  - script: |\n-      set -x\n-\n-      git submodule\n-      export SUBMODULES_EXCLUDES=$(git submodule | grep -Eow 'src/[^ ]+' | sed 's/\\(.*\\)/--exclude=\\1\\/\\.git/')\n-      echo $SUBMODULES_EXCLUDES\n-\n-      $TAR_COMMAND --exclude=.git $SUBMODULES_EXCLUDES -cf /tmp/drop.tar .\n-  - task: PublishPipelineArtifact@0\n-    inputs:\n-      artifactName: $(System.JobDisplayName)\n-      targetPath: '/tmp/drop.tar'\n-\n-  strategy:\n-    matrix:\n-      # macOS builders. These are placed near the beginning because they are very\n-      # slow to run.\n-\n-      # OSX builders running tests, these run the full test suite.\n-      # NO_DEBUG_ASSERTIONS=1 to make them go faster, but also do have some\n-      # runners that run `//ignore-debug` tests.\n-      #\n-      # Note that the compiler is compiled to target 10.8 here because the Xcode\n-      # version that we're using, 8.2, cannot compile LLVM for OSX 10.7.\n-      x86_64-apple-build:\n-        RUST_CHECK_TARGET: check\n-        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n-        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-        MACOSX_DEPLOYMENT_TARGET: 10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n-        NO_LLVM_ASSERTIONS: 1\n-        NO_DEBUG_ASSERTIONS: 1\n-        SCRIPT: make ci-test-prepare\n-\n-- job: macOS_test\n-  dependsOn: macOS_build\n-  timeoutInMinutes: 180\n-  variables:\n-    TAR_COMMAND: gtar\n-    SKIP_PREP: 1\n-    KEEP_STAGE: '--keep-stage 0 --keep-stage 1'\n-    SKIP_LLVM_BUILD: 1\n-  pool:\n-    vmImage: macos-10.13\n-  steps:\n-  - checkout: self\n-    fetchDepth: 2\n-  - bash: brew install gnu-tar\n-    displayName: install a tar that works well\n-\n-  - template: steps/show-disk-usage.yml\n-\n-  - task: DownloadPipelineArtifact@1\n-    inputs:\n-      artifactName: $(ARTIFACT_NAME)\n-      downloadPath: $(System.DefaultWorkingDirectory)\n-  # - task: DownloadPipelineArtifact@1\n-  #   inputs:\n-  #     artifactName: $(ARTIFACT_NAME)\n-  #     downloadPath: $(System.DefaultWorkingDirectory)\n-  #     buildType: specific\n-  #     project: rust\n-  #     pipeline: 8\n-  #     buildVersionToDownload: specific\n-  #     buildId: 200\n-\n-  # - template: steps/macos.yml \n-  - template: steps/show-disk-usage.yml\n-  - bash: $TAR_COMMAND -tvf ./drop.tar\n-  - bash: $TAR_COMMAND -xf ./drop.tar\n-  - bash: rm ./drop.tar\n-  - template: steps/show-disk-usage.yml\n-  - bash: |\n-      export PATH=$PATH:$HOME/.local/bin:$HOME/Library/Python/2.7/bin/\n-      mkdir -p $HOME/rustsrc    \n-      echo \"##vso[task.setvariable variable=PATH;]$PATH\"\n-\n-      curl -fo /usr/local/bin/sccache https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-02-sccache-x86_64-apple-darwin\n-      chmod +x /usr/local/bin/sccache\n-\n-      curl -fo /usr/local/bin/stamp https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-17-stamp-x86_64-apple-darwin\n-      chmod +x /usr/local/bin/stamp\n-      \n-      export CC=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang\n-      echo \"##vso[task.setvariable variable=CC]$CC\"\n-      \n-      export CXX=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang++\n-      echo \"##vso[task.setvariable variable=CXX]$CXX\"\n-      \n-      echo \"##vso[task.setvariable variable=AR]ar\"\n-    displayName: Prep\n-\n-  - bash: brew install gnu-tar\n-    displayName: install a tar that works well\n-\n-  - bash: |\n-      brew update\n-      brew install xz\n-      brew install swig\n-    condition: and(succeeded(), eq(variables['RUST_CHECK_TARGET'],'dist'))\n-    displayName: Install xz and swigw\n-\n-  - bash: |\n-      export RUN_SCRIPT=\"src/ci/run.sh\"\n-      echo \"##vso[task.setvariable variable=RUN_SCRIPT]$RUN_SCRIPT\"\n-    displayName: Prepare run script (init and run)\n-\n-  - template: steps/show-environment-variables.yml\n-\n-  - template: steps/verify-publish-toolstate.yml\n-\n-  - template: steps/run-script.yml\n-\n-  strategy:\n-    matrix:\n-      # macOS builders. These are placed near the beginning because they are very\n-      # slow to run.\n-\n-      # OSX builders running tests, these run the full test suite.\n-      # NO_DEBUG_ASSERTIONS=1 to make them go faster, but also do have some\n-      # runners that run `//ignore-debug` tests.\n-      #\n-      # Note that the compiler is compiled to target 10.8 here because the Xcode\n-      # version that we're using, 8.2, cannot compile LLVM for OSX 10.7.\n-      x86_64-apple-A:\n-        RUST_CHECK_TARGET: check\n-        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n-        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-        MACOSX_DEPLOYMENT_TARGET: 10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n-        NO_LLVM_ASSERTIONS: 1\n-        NO_DEBUG_ASSERTIONS: 1\n-        ARTIFACT_NAME: x86_64-apple-build\n-        SCRIPT: make ci-resume-subset-A\n-      x86_64-apple-B:\n-        RUST_CHECK_TARGET: check\n-        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n-        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-        MACOSX_DEPLOYMENT_TARGET: 10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n-        NO_LLVM_ASSERTIONS: 1\n-        NO_DEBUG_ASSERTIONS: 1\n-        ARTIFACT_NAME: x86_64-apple-build\n-        SCRIPT: make ci-resume-subset-B\n-      x86_64-apple-C:\n-        RUST_CHECK_TARGET: check\n-        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n-        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-        MACOSX_DEPLOYMENT_TARGET: 10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n-        NO_LLVM_ASSERTIONS: 1\n-        NO_DEBUG_ASSERTIONS: 1\n-        ARTIFACT_NAME: x86_64-apple-build\n-        SCRIPT: make ci-resume-subset-C\n-      x86_64-apple-D:\n-        RUST_CHECK_TARGET: check\n-        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n-        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-        MACOSX_DEPLOYMENT_TARGET: 10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n-        NO_LLVM_ASSERTIONS: 1\n-        NO_DEBUG_ASSERTIONS: 1\n-        ARTIFACT_NAME: x86_64-apple-build\n-        SCRIPT: make ci-resume-subset-D\n-      x86_64-apple-E:\n-        RUST_CHECK_TARGET: check\n-        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n-        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-        MACOSX_DEPLOYMENT_TARGET: 10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n-        NO_LLVM_ASSERTIONS: 1\n-        NO_DEBUG_ASSERTIONS: 1\n-        ARTIFACT_NAME: x86_64-apple-build\n-        SCRIPT: make ci-resume-subset-E\n-      x86_64-apple-F:\n-        RUST_CHECK_TARGET: check\n-        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n-        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-        MACOSX_DEPLOYMENT_TARGET: 10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n-        NO_LLVM_ASSERTIONS: 1\n-        NO_DEBUG_ASSERTIONS: 1\n-        ARTIFACT_NAME: x86_64-apple-build\n-        SCRIPT: make ci-resume-subset-F\n-      x86_64-apple-G:\n-        RUST_CHECK_TARGET: check\n-        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n-        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-        MACOSX_DEPLOYMENT_TARGET: 10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n-        NO_LLVM_ASSERTIONS: 1\n-        NO_DEBUG_ASSERTIONS: 1\n-        ARTIFACT_NAME: x86_64-apple-build\n-        SCRIPT: make ci-resume-subset-G\n-      x86_64-apple-H:\n-        RUST_CHECK_TARGET: check\n-        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n-        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-        MACOSX_DEPLOYMENT_TARGET: 10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n-        NO_LLVM_ASSERTIONS: 1\n-        NO_DEBUG_ASSERTIONS: 1\n-        ARTIFACT_NAME: x86_64-apple-build\n-        SCRIPT: make ci-resume-subset-H"}, {"sha": "facc592422b8e86ebeec7d582959bba7337e2ce1", "filename": ".azure-pipelines/auto.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dfd8ceb4fe5fceb426ab6868312cc0890e28837/.azure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7dfd8ceb4fe5fceb426ab6868312cc0890e28837/.azure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fauto.yml?ref=7dfd8ceb4fe5fceb426ab6868312cc0890e28837", "patch": "@@ -3,8 +3,8 @@\n # \n \n pr: none\n-# trigger:\n-# - auto\n+ trigger:\n+ - auto\n \n variables:\n - group: caching"}, {"sha": "1e01d68fb3a614c5c3f6ce415269490f52c62d47", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dfd8ceb4fe5fceb426ab6868312cc0890e28837/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/7dfd8ceb4fe5fceb426ab6868312cc0890e28837/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=7dfd8ceb4fe5fceb426ab6868312cc0890e28837", "patch": "@@ -39,7 +39,8 @@ The script accepts commands, flags, and arguments to determine what to do:\n   ```\n \n   If files are dirty that would normally be rebuilt from stage 0, that can be\n-  overridden using `--keep-stage 0`.\n+  overridden using `--keep-stage 0`. Using `--keep-stage n` will skip all steps\n+  that belong to stage n or earlier:\n \n   ```\n   # keep old build products for stage 0 and build stage 1"}, {"sha": "ea05b30eceff9f1c0e3525a45367028fa5e1c3ad", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 2, "deletions": 68, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/7dfd8ceb4fe5fceb426ab6868312cc0890e28837/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/7dfd8ceb4fe5fceb426ab6868312cc0890e28837/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=7dfd8ceb4fe5fceb426ab6868312cc0890e28837", "patch": "@@ -14,10 +14,9 @@ endif\n \n BOOTSTRAP := $(CFG_PYTHON) $(CFG_SRC_DIR)src/bootstrap/bootstrap.py\n \n-build:\n+all:\n \t$(Q)$(BOOTSTRAP) build $(BOOTSTRAP_ARGS)\n-\n-all: build doc\n+\t$(Q)$(BOOTSTRAP) doc $(BOOTSTRAP_ARGS)\n \n help:\n \t$(Q)echo 'Welcome to the rustbuild build system!'\n@@ -81,75 +80,10 @@ TESTS_IN_2 := \\\n \tsrc/test/run-pass-fulldeps \\\n \tsrc/tools/linkchecker\n \n-MIN_TEST := \\\n-\tsrc/test/debuginfo\n-\n ci-subset-1:\n \t$(Q)$(BOOTSTRAP) test $(TESTS_IN_2:%=--exclude %)\n ci-subset-2:\n \t$(Q)$(BOOTSTRAP) test $(TESTS_IN_2)\n \n-ci-test-prepare: \n-\t$(Q)$(BOOTSTRAP) test $(MIN_TEST)\n-\n-ci-resume-subset-1:\n-\t$(Q)$(BOOTSTRAP) test $(TESTS_IN_2:%=--exclude %)\n-ci-resume-subset-2:\n-\t$(Q)$(BOOTSTRAP) test $(TESTS_IN_2)\n-\n-TESTS_IN_B := \\\n-\tsrc/tools/linkchecker\n-\n-TESTS_IN_C := \\\n-\tsrc/test/run-pass \\\n-\tsrc/test/run-pass-fulldeps\n-\n-TESTS_IN_D := \\\n-\tsrc/test/compile-fail \\\n-\tsrc/test/rustdoc \\\n-\tsrc/test/pretty\n-\n-TESTS_IN_E := \\\n-\tsrc/test/ui \n-\n-TESTS_IN_F := \\\n-\tsrc/test/run-fail \\\n-\tsrc/liballoc \\\n-\tsrc/libcore\n-\n-TESTS_IN_G := \\\n-\tsrc/tools/rustdoc \\\n-\tsrc/test/rustdoc-js-std \\\n-\tsrc/test/run-make-fulldeps \\\n-\tsrc/libstd\n-\n-TESTS_IN_H := \\\n-\tsrc/librustc_driver\n-\n-ci-resume-subset-A:\n-\t$(Q)$(BOOTSTRAP) test \\\n-\t\t$(KEEP_STAGE) \\\n-\t\t$(TESTS_IN_B:%=--exclude %) \\\n-\t\t$(TESTS_IN_C:%=--exclude %) \\\n-\t\t$(TESTS_IN_D:%=--exclude %) \\\n-\t\t$(TESTS_IN_E:%=--exclude %) \\\n-\t\t$(TESTS_IN_F:%=--exclude %) \\\n-\t\t$(TESTS_IN_G:%=--exclude %) \\\n-\t\t$(TESTS_IN_H:%=--exclude %) \\\n-\t\t$(MIN_TEST:%=--exclude %) \n-ci-resume-subset-B:\n-\t$(Q)$(BOOTSTRAP) test $(KEEP_STAGE) $(TESTS_IN_B)\n-ci-resume-subset-C:\n-\t$(Q)$(BOOTSTRAP) test $(KEEP_STAGE) $(TESTS_IN_C)\n-ci-resume-subset-D:\n-\t$(Q)$(BOOTSTRAP) test $(KEEP_STAGE) $(TESTS_IN_D)\n-ci-resume-subset-E:\n-\t$(Q)$(BOOTSTRAP) test $(KEEP_STAGE) $(TESTS_IN_E)\n-ci-resume-subset-F:\n-\t$(Q)$(BOOTSTRAP) test $(KEEP_STAGE) $(TESTS_IN_F)\n-ci-resume-subset-G:\n-\t$(Q)$(BOOTSTRAP) test $(KEEP_STAGE) $(TESTS_IN_G)\n-ci-resume-subset-H:\n-\t$(Q)$(BOOTSTRAP) test $(KEEP_STAGE) $(TESTS_IN_H)\n \n .PHONY: dist"}, {"sha": "5777331b9bfd5b9ae67b0544ee4cba6136168fe0", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7dfd8ceb4fe5fceb426ab6868312cc0890e28837/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dfd8ceb4fe5fceb426ab6868312cc0890e28837/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=7dfd8ceb4fe5fceb426ab6868312cc0890e28837", "patch": "@@ -81,20 +81,15 @@ impl Step for Llvm {\n             (info, \"src/llvm-project/llvm\", builder.llvm_out(target), dir.join(\"bin\"))\n         };\n \n-        let build_llvm_config = llvm_config_ret_dir\n-            .join(exe(\"llvm-config\", &*builder.config.build));\n-\n-        if env::var_os(\"SKIP_LLVM_BUILD\").is_some() {\n-            return build_llvm_config\n-        }\n-\n         if !llvm_info.is_git() {\n             println!(\n                 \"git could not determine the LLVM submodule commit hash. \\\n                 Assuming that an LLVM build is necessary.\",\n             );\n         }\n \n+        let build_llvm_config = llvm_config_ret_dir\n+            .join(exe(\"llvm-config\", &*builder.config.build));\n         let done_stamp = out_dir.join(\"llvm-finished-building\");\n \n         if let Some(llvm_commit) = llvm_info.sha() {"}, {"sha": "a51c2da3cbdcaef8563f302785a0da3513445b3d", "filename": "src/ci/run.sh", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7dfd8ceb4fe5fceb426ab6868312cc0890e28837/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7dfd8ceb4fe5fceb426ab6868312cc0890e28837/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=7dfd8ceb4fe5fceb426ab6868312cc0890e28837", "patch": "@@ -90,25 +90,23 @@ if [ \"$RUN_CHECK_WITH_PARALLEL_QUERIES\" != \"\" ]; then\n   rm -rf build\n fi\n \n-if [ \"$SKIP_PREP\" != \"1\" ]; then\n-  travis_fold start configure\n-  travis_time_start\n-  $SRC/configure $RUST_CONFIGURE_ARGS\n-  travis_fold end configure\n-  travis_time_finish\n-\n-  travis_fold start make-prepare\n-  travis_time_start\n-  retry make prepare\n-  travis_fold end make-prepare\n-  travis_time_finish\n-\n-  travis_fold start check-bootstrap\n-  travis_time_start\n-  make check-bootstrap\n-  travis_fold end check-bootstrap\n-  travis_time_finish\n-fi\n+travis_fold start configure\n+travis_time_start\n+$SRC/configure $RUST_CONFIGURE_ARGS\n+travis_fold end configure\n+travis_time_finish\n+\n+travis_fold start make-prepare\n+travis_time_start\n+retry make prepare\n+travis_fold end make-prepare\n+travis_time_finish\n+\n+travis_fold start check-bootstrap\n+travis_time_start\n+make check-bootstrap\n+travis_fold end check-bootstrap\n+travis_time_finish\n \n # Display the CPU and memory information. This helps us know why the CI timing\n # is fluctuating."}]}