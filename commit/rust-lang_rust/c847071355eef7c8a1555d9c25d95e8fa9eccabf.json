{"sha": "c847071355eef7c8a1555d9c25d95e8fa9eccabf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NDcwNzEzNTVlZWY3YzhhMTU1NWQ5YzI1ZDk1ZThmYTllY2NhYmY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-17T11:33:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-17T11:33:44Z"}, "message": "add comment about not using builtin_deref", "tree": {"sha": "440462e003a45bc091930d3de4baa46235e1a987", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/440462e003a45bc091930d3de4baa46235e1a987"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c847071355eef7c8a1555d9c25d95e8fa9eccabf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c847071355eef7c8a1555d9c25d95e8fa9eccabf", "html_url": "https://github.com/rust-lang/rust/commit/c847071355eef7c8a1555d9c25d95e8fa9eccabf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c847071355eef7c8a1555d9c25d95e8fa9eccabf/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56f1ef325a193c366f327d7ec1d6633b36331242", "url": "https://api.github.com/repos/rust-lang/rust/commits/56f1ef325a193c366f327d7ec1d6633b36331242", "html_url": "https://github.com/rust-lang/rust/commit/56f1ef325a193c366f327d7ec1d6633b36331242"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "c437eaf3fc70b4e5138d0e5ea14e0b099d1320e0", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c847071355eef7c8a1555d9c25d95e8fa9eccabf/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c847071355eef7c8a1555d9c25d95e8fa9eccabf/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=c847071355eef7c8a1555d9c25d95e8fa9eccabf", "patch": "@@ -624,6 +624,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n         // a `MemPlace`, so we have a fast path for reference types that\n         // avoids allocating.\n         match place.layout.ty.sty {\n+            // Cannot use `builtin_deref` because that reports *immutable* for `Box`,\n+            // making it useless.\n             ty::Ref(_, _, mutbl) => {\n                 // fast path\n                 let val = self.read_immediate(self.place_to_op(place)?)?;\n@@ -657,6 +659,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n             // Primitives of reference type, that is the one thing we are interested in.\n             fn visit_primitive(&mut self, place: MPlaceTy<'tcx, Borrow>) -> EvalResult<'tcx>\n             {\n+                // Cannot use `builtin_deref` because that reports *immutable* for `Box`,\n+                // making it useless.\n                 let mutbl = match place.layout.ty.sty {\n                     ty::Ref(_, _, mutbl) => mutbl,\n                     ty::Adt(..) if place.layout.ty.is_box() => MutMutable,"}]}