{"sha": "dc713ea21b2d5a4f02735a7f6aca21c1054e4ca6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNzEzZWEyMWIyZDVhNGYwMjczNWE3ZjZhY2EyMWMxMDU0ZTRjYTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-31T12:35:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-31T12:35:15Z"}, "message": "Merge #2960\n\n2960: Small cleanup r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "30b6673dd36269294611b295721a603c82fbd3ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30b6673dd36269294611b295721a603c82fbd3ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc713ea21b2d5a4f02735a7f6aca21c1054e4ca6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeNB8DCRBK7hj4Ov3rIwAAdHIIAHmaEN5fXkS6oIOwDZOKSxDf\nESdgqbCJQa9JlcOqa7X56D5U6iKZNKLAIJJKeZncDkM6CpEujxnEzaBGjXHTPZsG\nlKRMGSvDlXxkL9jqGRzyUVvsjJ7mbdfkGbeZBlA2js30YlLFFSUYiKfUxsZPqST1\nzDuCk2sfdAmP64kKtPPF5WvZ43bOsPwOqP1MBGHQKMG6JacP13bcp3WvIp5iZxHt\n79S8ed622r2/5BGfbNN02t1Xfxr9qRAQoor233EdwgGS8+Jv8lLgwqIf/Fp0Kkcg\n4X0yodpUUo3nHloUHp/z1hkHzOcF/0HDee6yYUdKcDpd/h8wWgWA0f3LbpqSEuY=\n=5UPL\n-----END PGP SIGNATURE-----\n", "payload": "tree 30b6673dd36269294611b295721a603c82fbd3ce\nparent e48033d066b26cb9e85c94cf47e6b8e388176e0a\nparent 9d5a5211a4ab83fb891c6eb32f6ed6d63b6b027f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580474115 +0000\ncommitter GitHub <noreply@github.com> 1580474115 +0000\n\nMerge #2960\n\n2960: Small cleanup r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc713ea21b2d5a4f02735a7f6aca21c1054e4ca6", "html_url": "https://github.com/rust-lang/rust/commit/dc713ea21b2d5a4f02735a7f6aca21c1054e4ca6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc713ea21b2d5a4f02735a7f6aca21c1054e4ca6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e48033d066b26cb9e85c94cf47e6b8e388176e0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e48033d066b26cb9e85c94cf47e6b8e388176e0a", "html_url": "https://github.com/rust-lang/rust/commit/e48033d066b26cb9e85c94cf47e6b8e388176e0a"}, {"sha": "9d5a5211a4ab83fb891c6eb32f6ed6d63b6b027f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5a5211a4ab83fb891c6eb32f6ed6d63b6b027f", "html_url": "https://github.com/rust-lang/rust/commit/9d5a5211a4ab83fb891c6eb32f6ed6d63b6b027f"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "9aa1e7eea2748954a8987f65c6087f2da6fd437a", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc713ea21b2d5a4f02735a7f6aca21c1054e4ca6/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc713ea21b2d5a4f02735a7f6aca21c1054e4ca6/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=dc713ea21b2d5a4f02735a7f6aca21c1054e4ca6", "patch": "@@ -1,7 +1,11 @@\n //! This module is responsible for implementing handlers for Lanuage Server Protocol.\n //! The majority of requests are fulfilled by calling into the `ra_ide` crate.\n \n-use std::{fmt::Write as _, io::Write as _};\n+use std::{\n+    fmt::Write as _,\n+    io::Write as _,\n+    process::{self, Stdio},\n+};\n \n use either::Either;\n use lsp_server::ErrorCode;\n@@ -582,21 +586,19 @@ pub fn handle_formatting(\n     let file_line_index = world.analysis().file_line_index(file_id)?;\n     let end_position = TextUnit::of_str(&file).conv_with(&file_line_index);\n \n-    use std::process;\n     let mut rustfmt = process::Command::new(\"rustfmt\");\n     if let Some(&crate_id) = crate_ids.first() {\n         // Assume all crates are in the same edition\n         let edition = world.analysis().crate_edition(crate_id)?;\n         rustfmt.args(&[\"--edition\", &edition.to_string()]);\n     }\n-    rustfmt.stdin(process::Stdio::piped()).stdout(process::Stdio::piped());\n \n     if let Ok(path) = params.text_document.uri.to_file_path() {\n         if let Some(parent) = path.parent() {\n             rustfmt.current_dir(parent);\n         }\n     }\n-    let mut rustfmt = rustfmt.spawn()?;\n+    let mut rustfmt = rustfmt.stdin(Stdio::piped()).stdout(Stdio::piped()).spawn()?;\n \n     rustfmt.stdin.as_mut().unwrap().write_all(file.as_bytes())?;\n "}]}