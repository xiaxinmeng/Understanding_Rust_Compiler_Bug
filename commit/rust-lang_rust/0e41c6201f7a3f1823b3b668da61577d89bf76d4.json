{"sha": "0e41c6201f7a3f1823b3b668da61577d89bf76d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNDFjNjIwMWY3YTNmMTgyM2IzYjY2OGRhNjE1NzdkODliZjc2ZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-16T22:33:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-16T22:33:36Z"}, "message": "Auto merge of #88094 - m-ou-se:rollup-2fxss0q, r=m-ou-se\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #87178 ([rustdoc] Copy only item path to clipboard rather than full `use` statement.)\n - #87677 (Adding explicit notice of lack of documentation for Tier 2 Platforms)\n - #87958 (Closure migration multispan suggestions)\n - #87967 (Detect fake spans in non_fmt_panic lint.)\n - #88011 (Enable `--all-targets` for `x.py check` unconditionally)\n - #88030 (Assign FIXMEs to me and remove obsolete ones)\n - #88052 (Update redox_syscall)\n - #88055 (Update RELEASES.md for 1.55.0)\n - #88080 (Skip assert ICE with default_method_body_is_const)\n - #88089 (Rustdoc font test)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ee3c36d4a57deb92debf5dba98f9f36d849c4c05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee3c36d4a57deb92debf5dba98f9f36d849c4c05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e41c6201f7a3f1823b3b668da61577d89bf76d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e41c6201f7a3f1823b3b668da61577d89bf76d4", "html_url": "https://github.com/rust-lang/rust/commit/0e41c6201f7a3f1823b3b668da61577d89bf76d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e41c6201f7a3f1823b3b668da61577d89bf76d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0035d9dcecee49d1f7349932bfa52c05a6f83641", "url": "https://api.github.com/repos/rust-lang/rust/commits/0035d9dcecee49d1f7349932bfa52c05a6f83641", "html_url": "https://github.com/rust-lang/rust/commit/0035d9dcecee49d1f7349932bfa52c05a6f83641"}, {"sha": "d5ec5aa78322f8075d8b62906d32a6f89ef1d500", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ec5aa78322f8075d8b62906d32a6f89ef1d500", "html_url": "https://github.com/rust-lang/rust/commit/d5ec5aa78322f8075d8b62906d32a6f89ef1d500"}], "stats": {"total": 613, "additions": 352, "deletions": 261}, "files": [{"sha": "f9c52200aa6de35c32713a87f54ab2abe2cb9882", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -2955,9 +2955,9 @@ dependencies = [\n \n [[package]]\n name = \"redox_syscall\"\n-version = \"0.2.5\"\n+version = \"0.2.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"94341e4e44e24f6b591b59e47a8a027df12e008d73fd5672dbea9cc22f4507d9\"\n+checksum = \"8383f39639269cde97d255a32bdb68c047337295414940c68bdd30c2e13203ff\"\n dependencies = [\n  \"bitflags\",\n ]"}, {"sha": "1d9ad3160f77e771d861d1df1aab90c24400cbe8", "filename": "RELEASES.md", "status": "modified", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -1,3 +1,145 @@\n+Version 1.55.0 (2021-09-09)\n+============================\n+\n+Language\n+--------\n+- [You can now write open \"from\" range patterns (`X..`), which will start at `X` and\n+  will end at the maximum value of the integer.][83918]\n+- [You can now explicitly import the prelude of different editions\n+  through `std::prelude` (e.g. `use std::prelude::rust_2021::*;`).][86294]\n+\n+Compiler\n+--------\n+- [Added tier 3\\* support for `powerpc-unknown-freebsd`.][87370]\n+- [Added tier 3 support for `powerpc64le-unknown-freebsd`.][83572]\n+\n+\\* Refer to Rust's [platform support page][platform-support-doc] for more\n+   information on Rust's tiered platform support.\n+\n+Libraries\n+---------\n+\n+- [Updated std's float parsing to use the Eisel-Lemire algorithm.][86761]\n+  These improvements should in general provide faster string parsing of floats,\n+  no longer reject certain valid floating point values, and reduce\n+  the produced code size for non-stripped artifacts.\n+- [`string::Drain` now implements `AsRef<str>` and `AsRef<[u8]>`.][86858]\n+- [`collections::{BinaryHeap, BTreeSet, HashSet, LinkedList, VecDeque}` now\n+  implement `From<[T; N]>`.][84111]\n+- [`collections::{BTreeMap, HashMap}` now implement `From<[(K, V); N]>`.][84111]\n+  This allows you to write the following;\n+  ```rust\n+  let highscores = std::collections::HashMap::from([\n+      (\"Alice\", 9000u32),\n+      (\"Bob\", 7250),\n+      (\"Charlie\", 5500),\n+  ]);\n+  ```\n+\n+Stabilised APIs\n+---------------\n+\n+- [`Bound::cloned`]\n+- [`Drain::as_str`]\n+- [`IntoInnerError::into_error`]\n+- [`IntoInnerError::into_parts`]\n+- [`MaybeUninit::assume_init_mut`]\n+- [`MaybeUninit::assume_init_ref`]\n+- [`MaybeUninit::write`]\n+- [`array::map`]\n+- [`ops::ControlFlow`]\n+- [`x86::_bittest`]\n+- [`x86::_bittestandcomplement`]\n+- [`x86::_bittestandreset`]\n+- [`x86::_bittestandset`]\n+- [`x86_64::_bittest64`]\n+- [`x86_64::_bittestandcomplement64`]\n+- [`x86_64::_bittestandreset64`]\n+- [`x86_64::_bittestandset64`]\n+\n+The following previously stable functions are now `const`.\n+\n+- [`str::from_utf8_unchecked`]\n+- [`mem::transmute`]\n+\n+\n+Cargo\n+-----\n+- [Cargo will now deduplicate compiler diagnostics to the terminal when invoking\n+  rustc in parallel such as when using `cargo test`.][cargo/9675]\n+- [The package definition in `cargo metadata` now includes the `\"default_run\"`\n+  field from the manifest.][cargo/9550]\n+- [Added `cargo d` as an alias for `cargo doc`.][cargo/9680]\n+\n+Rustdoc\n+-------\n+- [Added \"Go to item on exact match\" search option.][85876]\n+- [The \"Implementors\" section on traits no longer shows redundant\n+  method definitions.][85970]\n+- [Trait implementations are toggled open by default.][86260] This should make the\n+  implementations more searchable by tools like `CTRL+F` in your browser.\n+- [Intra-doc links should now correctly resolve associated items (e.g. methods)\n+  through type aliases.][86334]\n+- [Traits which are marked with `#[doc(hidden)]` will no longer appear in the\n+  \"Trait Implementations\" section.][86513]\n+\n+\n+Compatibility Notes\n+-------------------\n+- [std functions that return an `io::Error` will no longer use the\n+  `ErrorKind::Other` variant.][85746] This is to better reflect that these\n+  kinds of errors could be categorised [into newer more specific `ErrorKind`\n+  variants][79965], and that they do not represent a user error.\n+- [Using environment variable names with `process::Command` on Windows now\n+  behaves as expected.][85270] Previously using envionment variables with\n+  `Command` would cause them to be ASCII-uppercased.\n+- [Rustdoc will now warn on using rustdoc lints that aren't prefixed\n+  with `rustdoc::`][86849]\n+\n+[86849]: https://github.com/rust-lang/rust/pull/86849\n+[86513]: https://github.com/rust-lang/rust/pull/86513\n+[86334]: https://github.com/rust-lang/rust/pull/86334\n+[86260]: https://github.com/rust-lang/rust/pull/86260\n+[85970]: https://github.com/rust-lang/rust/pull/85970\n+[85876]: https://github.com/rust-lang/rust/pull/85876\n+[83572]: https://github.com/rust-lang/rust/pull/83572\n+[86294]: https://github.com/rust-lang/rust/pull/86294\n+[86858]: https://github.com/rust-lang/rust/pull/86858\n+[86761]: https://github.com/rust-lang/rust/pull/86761\n+[85769]: https://github.com/rust-lang/rust/pull/85769\n+[85746]: https://github.com/rust-lang/rust/pull/85746\n+[85305]: https://github.com/rust-lang/rust/pull/85305\n+[85270]: https://github.com/rust-lang/rust/pull/85270\n+[84111]: https://github.com/rust-lang/rust/pull/84111\n+[83918]: https://github.com/rust-lang/rust/pull/83918\n+[79965]: https://github.com/rust-lang/rust/pull/79965\n+[87370]: https://github.com/rust-lang/rust/pull/87370\n+[87298]: https://github.com/rust-lang/rust/pull/87298\n+[cargo/9675]: https://github.com/rust-lang/cargo/pull/9675\n+[cargo/9550]: https://github.com/rust-lang/cargo/pull/9550\n+[cargo/9680]: https://github.com/rust-lang/cargo/pull/9680\n+[`array::map`]: https://doc.rust-lang.org/stable/std/primitive.array.html#method.map\n+[`Bound::cloned`]: https://doc.rust-lang.org/stable/std/ops/enum.Bound.html#method.cloned\n+[`Drain::as_str`]: https://doc.rust-lang.org/stable/std/string/struct.Drain.html#method.as_str\n+[`IntoInnerError::into_error`]: https://doc.rust-lang.org/stable/std/io/struct.IntoInnerError.html#method.into_error\n+[`IntoInnerError::into_parts`]: https://doc.rust-lang.org/stable/std/io/struct.IntoInnerError.html#method.into_parts\n+[`MaybeUninit::assume_init_mut`]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.assume_init_mut\n+[`MaybeUninit::assume_init_ref`]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.assume_init_ref\n+[`MaybeUninit::write`]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.write\n+[`Seek::rewind`]: https://doc.rust-lang.org/stable/std/io/trait.Seek.html#method.rewind\n+[`mem::transmute`]: https://doc.rust-lang.org/stable/std/mem/fn.transmute.html\n+[`ops::ControlFlow`]: https://doc.rust-lang.org/stable/std/ops/enum.ControlFlow.html\n+[`str::from_utf8_unchecked`]: https://doc.rust-lang.org/stable/std/str/fn.from_utf8_unchecked.html\n+[`x86::_bittest`]: https://doc.rust-lang.org/stable/core/arch/x86/fn._bittest.html\n+[`x86::_bittestandcomplement`]: https://doc.rust-lang.org/stable/core/arch/x86/fn._bittestandcomplement.html\n+[`x86::_bittestandreset`]: https://doc.rust-lang.org/stable/core/arch/x86/fn._bittestandreset.html\n+[`x86::_bittestandset`]: https://doc.rust-lang.org/stable/core/arch/x86/fn._bittestandset.html\n+[`x86_64::_bittest64`]: https://doc.rust-lang.org/stable/core/arch/x86_64/fn._bittest64.html\n+[`x86_64::_bittestandcomplement64`]: https://doc.rust-lang.org/stable/core/arch/x86_64/fn._bittestandcomplement64.html\n+[`x86_64::_bittestandreset64`]: https://doc.rust-lang.org/stable/core/arch/x86_64/fn._bittestandreset64.html\n+[`x86_64::_bittestandset64`]: https://doc.rust-lang.org/stable/core/arch/x86_64/fn._bittestandset64.html\n+\n+\n Version 1.54.0 (2021-07-29)\n ============================\n "}, {"sha": "42333dc29bc7c37ae50cebb27616d19f280fc02b", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -63,7 +63,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n         infcx: &InferCtxt<'_, 'tcx>,\n     ) -> Result<(), Vec<FulfillmentError<'tcx>>>;\n \n-    // FIXME this should not provide a default body for chalk as chalk should be updated\n+    // FIXME(fee1-dead) this should not provide a default body for chalk as chalk should be updated\n     fn select_with_constness_where_possible(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,"}, {"sha": "ee66a948dd93c0b06e779119ce320cdeaad015a1", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -101,7 +101,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n         let mut l = lint.build(\"panic message is not a string literal\");\n         l.note(\"this usage of panic!() is deprecated; it will be a hard error in Rust 2021\");\n         l.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\");\n-        if !span.contains(arg_span) {\n+        if !is_arg_inside_call(arg_span, span) {\n             // No clue where this argument is coming from.\n             l.emit();\n             return;\n@@ -204,7 +204,7 @@ fn check_panic_str<'tcx>(\n                 _ => \"panic message contains unused formatting placeholders\",\n             });\n             l.note(\"this message is not used as a format string when given without arguments, but will be in Rust 2021\");\n-            if span.contains(arg.span) {\n+            if is_arg_inside_call(arg.span, span) {\n                 l.span_suggestion(\n                     arg.span.shrink_to_hi(),\n                     &format!(\"add the missing argument{}\", pluralize!(n_arguments)),\n@@ -235,7 +235,7 @@ fn check_panic_str<'tcx>(\n         cx.struct_span_lint(NON_FMT_PANICS, brace_spans.unwrap_or_else(|| vec![span]), |lint| {\n             let mut l = lint.build(msg);\n             l.note(\"this message is not used as a format string, but will be in Rust 2021\");\n-            if span.contains(arg.span) {\n+            if is_arg_inside_call(arg.span, span) {\n                 l.span_suggestion(\n                     arg.span.shrink_to_lo(),\n                     \"add a \\\"{}\\\" format string to use the message literally\",\n@@ -283,3 +283,11 @@ fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span,\n         if let hygiene::ExpnKind::Macro(_, symbol) = expn.kind { symbol } else { sym::panic };\n     (expn.call_site, panic_macro, macro_symbol.as_str())\n }\n+\n+fn is_arg_inside_call(arg: Span, call: Span) -> bool {\n+    // We only add suggestions if the argument we're looking at appears inside the\n+    // panic call in the source file, to avoid invalid suggestions when macros are involved.\n+    // We specifically check for the spans to not be identical, as that happens sometimes when\n+    // proc_macros lie about spans and apply the same span to all the tokens they produce.\n+    call.contains(arg) && !call.source_equal(&arg)\n+}"}, {"sha": "a5cb0f4e14b178547dc1c1f6ae305f748b3d8183", "filename": "compiler/rustc_mir/src/transform/check_consts/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -9,7 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::mir;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_span::Symbol;\n+use rustc_span::{sym, Symbol};\n \n pub use self::qualifs::Qualif;\n \n@@ -104,6 +104,13 @@ pub fn rustc_allow_const_fn_unstable(\n pub fn is_const_stable_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n     use attr::{ConstStability, Stability, StabilityLevel};\n \n+    // A default body marked const is not const-stable because const\n+    // trait fns currently cannot be const-stable. We shouldn't\n+    // restrict default bodies to only call const-stable functions.\n+    if tcx.has_attr(def_id, sym::default_method_body_is_const) {\n+        return false;\n+    }\n+\n     // Const-stability is only relevant for `const fn`.\n     assert!(tcx.is_const_fn_raw(def_id));\n "}, {"sha": "38dbacbf2ae6ca274fd77613a032d5f9d7d926a8", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -316,7 +316,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    /// returns `true` if the predicate is considered `const` to\n+    /// Returns `true` if the predicate is considered `const` to\n     /// this selection context.\n     pub fn is_predicate_const(&self, pred: ty::Predicate<'_>) -> bool {\n         match pred.kind().skip_binder() {"}, {"sha": "bd0acb0e53b6c300b4c3af56071d11cc02497d96", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -6,9 +6,7 @@ use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{GenericArg, Subst, UserSelfTy, UserSubsts};\n-use rustc_middle::ty::{\n-    self, FnSig, Lift, PolyFnSig, PredicateKind, Ty, TyCtxt, TypeFoldable, Variance,\n-};\n+use rustc_middle::ty::{self, FnSig, Lift, PolyFnSig, Ty, TyCtxt, TypeFoldable, Variance};\n use rustc_middle::ty::{ParamEnv, ParamEnvAnd, Predicate, ToPredicate};\n use rustc_span::DUMMY_SP;\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n@@ -87,16 +85,7 @@ impl AscribeUserTypeCx<'me, 'tcx> {\n         Ok(())\n     }\n \n-    fn prove_predicate(&mut self, mut predicate: Predicate<'tcx>) {\n-        if let PredicateKind::Trait(mut tr) = predicate.kind().skip_binder() {\n-            if let hir::Constness::Const = tr.constness {\n-                // FIXME check if we actually want to prove const predicates inside AscribeUserType\n-                tr.constness = hir::Constness::NotConst;\n-                predicate =\n-                    predicate.kind().rebind(PredicateKind::Trait(tr)).to_predicate(self.tcx());\n-            }\n-        }\n-\n+    fn prove_predicate(&mut self, predicate: Predicate<'tcx>) {\n         self.fulfill_cx.register_predicate_obligation(\n             self.infcx,\n             Obligation::new(ObligationCause::dummy(), self.param_env, predicate),"}, {"sha": "f4da3d3c8704ea2f863992ee600e341f8d3c01dd", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 53, "deletions": 37, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -47,7 +47,7 @@ use rustc_middle::ty::{\n };\n use rustc_session::lint;\n use rustc_span::sym;\n-use rustc_span::{MultiSpan, Span, Symbol, DUMMY_SP};\n+use rustc_span::{BytePos, MultiSpan, Pos, Span, Symbol, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n use rustc_data_structures::stable_map::FxHashMap;\n@@ -645,6 +645,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     diagnostics_builder.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\");\n \n+                    let diagnostic_msg = format!(\n+                        \"add a dummy let to cause {} to be fully captured\",\n+                        migrated_variables_concat\n+                    );\n+\n                     let mut closure_body_span = self.tcx.hir().span(body_id.hir_id);\n \n                     // If the body was entirely expanded from a macro\n@@ -655,43 +660,54 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         closure_body_span = closure_body_span.parent().unwrap_or(DUMMY_SP);\n                     }\n \n-                    let (span, sugg, app) =\n-                        match self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n-                            Ok(s) => {\n-                                let trimmed = s.trim_start();\n-                                let mut lines = trimmed.lines();\n-                                let line1 = lines.next().unwrap_or_default();\n-\n-                                // If the closure contains a block then replace the opening brace\n-                                // with \"{ let _ = (..); \"\n-                                let sugg = if line1.trim_end() == \"{\" {\n-                                    // This is a multi-line closure with just a `{` on the first line,\n-                                    // so we put the `let` on its own line.\n-                                    // We take the indentation from the next non-empty line.\n-                                    let line2 = lines.filter(|line| !line.is_empty()).next().unwrap_or_default();\n-                                    let indent = line2.split_once(|c: char| !c.is_whitespace()).unwrap_or_default().0;\n-                                    format!(\"{{\\n{}{};{}\", indent, migration_string, &trimmed[line1.len()..])\n-                                } else if line1.starts_with('{') {\n-                                    format!(\"{{ {}; {}\", migration_string, &trimmed[1..].trim_start())\n-                                } else {\n-                                    format!(\"{{ {}; {} }}\", migration_string, s)\n-                                };\n-                                (closure_body_span, sugg, Applicability::MachineApplicable)\n-                            }\n-                            Err(_) => (closure_span, migration_string.clone(), Applicability::HasPlaceholders),\n-                        };\n-\n-                    let diagnostic_msg = format!(\n-                        \"add a dummy let to cause {} to be fully captured\",\n-                        migrated_variables_concat\n-                    );\n+                    if let Ok(s) = self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n+                        let mut lines = s.lines();\n+                        let line1 = lines.next().unwrap_or_default();\n+\n+                        if line1.trim_end() == \"{\" {\n+                            // This is a multi-line closure with just a `{` on the first line,\n+                            // so we put the `let` on its own line.\n+                            // We take the indentation from the next non-empty line.\n+                            let line2 = lines.filter(|line| !line.is_empty()).next().unwrap_or_default();\n+                            let indent = line2.split_once(|c: char| !c.is_whitespace()).unwrap_or_default().0;\n+                            diagnostics_builder.span_suggestion(\n+                                closure_body_span.with_lo(closure_body_span.lo() + BytePos::from_usize(line1.len())).shrink_to_lo(),\n+                                &diagnostic_msg,\n+                                format!(\"\\n{}{};\", indent, migration_string),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else if line1.starts_with('{') {\n+                            // This is a closure with its body wrapped in\n+                            // braces, but with more than just the opening\n+                            // brace on the first line. We put the `let`\n+                            // directly after the `{`.\n+                            diagnostics_builder.span_suggestion(\n+                                closure_body_span.with_lo(closure_body_span.lo() + BytePos(1)).shrink_to_lo(),\n+                                &diagnostic_msg,\n+                                format!(\" {};\", migration_string),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else {\n+                            // This is a closure without braces around the body.\n+                            // We add braces to add the `let` before the body.\n+                            diagnostics_builder.multipart_suggestion(\n+                                &diagnostic_msg,\n+                                vec![\n+                                    (closure_body_span.shrink_to_lo(), format!(\"{{ {}; \", migration_string)),\n+                                    (closure_body_span.shrink_to_hi(), \" }\".to_string()),\n+                                ],\n+                                Applicability::MachineApplicable\n+                            );\n+                        }\n+                    } else {\n+                        diagnostics_builder.span_suggestion(\n+                            closure_span,\n+                            &diagnostic_msg,\n+                            migration_string,\n+                            Applicability::HasPlaceholders\n+                        );\n+                    }\n \n-                    diagnostics_builder.span_suggestion(\n-                        span,\n-                        &diagnostic_msg,\n-                        sugg,\n-                        app,\n-                    );\n                     diagnostics_builder.emit();\n                 },\n             );"}, {"sha": "b6ef3eee291fb733b4aa99d7173b238d530a4ba1", "filename": "library/alloc/tests/const_fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/library%2Falloc%2Ftests%2Fconst_fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/library%2Falloc%2Ftests%2Fconst_fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fconst_fns.rs?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -10,7 +10,7 @@ pub const MY_VEC: Vec<usize> = Vec::new();\n #[allow(dead_code)]\n pub const MY_STRING: String = String::new();\n \n-// FIXME remove this struct once we put `K: ?const Ord` on BTreeMap::new.\n+// FIXME(fee1-dead) remove this struct once we put `K: ?const Ord` on BTreeMap::new.\n #[derive(PartialEq, Eq, PartialOrd)]\n pub struct MyType;\n "}, {"sha": "7284c05d5ff166ae00acfbfe0161bb2c2882dd7e", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -25,8 +25,6 @@\n #![feature(string_remove_matches)]\n #![feature(const_btree_new)]\n #![feature(const_trait_impl)]\n-// FIXME remove this when const_trait_impl is not incomplete anymore\n-#![allow(incomplete_features)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}, {"sha": "e2f348261112e077f1fa4691b47e8fd629a28b58", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -578,7 +578,7 @@ impl<'a> Builder<'a> {\n     pub fn new(build: &Build) -> Builder<'_> {\n         let (kind, paths) = match build.config.cmd {\n             Subcommand::Build { ref paths } => (Kind::Build, &paths[..]),\n-            Subcommand::Check { ref paths, all_targets: _ } => (Kind::Check, &paths[..]),\n+            Subcommand::Check { ref paths } => (Kind::Check, &paths[..]),\n             Subcommand::Clippy { ref paths, .. } => (Kind::Clippy, &paths[..]),\n             Subcommand::Fix { ref paths } => (Kind::Fix, &paths[..]),\n             Subcommand::Doc { ref paths, .. } => (Kind::Doc, &paths[..]),"}, {"sha": "4eb335979b983b004efb2a1358a094947f917a64", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 29, "deletions": 37, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -113,38 +113,35 @@ impl Step for Std {\n         // since we initialize with an empty sysroot.\n         //\n         // Currently only the \"libtest\" tree of crates does this.\n+        let mut cargo = builder.cargo(\n+            compiler,\n+            Mode::Std,\n+            SourceType::InTree,\n+            target,\n+            cargo_subcommand(builder.kind),\n+        );\n+        cargo.arg(\"--all-targets\");\n+        std_cargo(builder, target, compiler.stage, &mut cargo);\n \n-        if let Subcommand::Check { all_targets: true, .. } = builder.config.cmd {\n-            let mut cargo = builder.cargo(\n-                compiler,\n-                Mode::Std,\n-                SourceType::InTree,\n-                target,\n-                cargo_subcommand(builder.kind),\n-            );\n-            std_cargo(builder, target, compiler.stage, &mut cargo);\n-            cargo.arg(\"--all-targets\");\n-\n-            // Explicitly pass -p for all dependencies krates -- this will force cargo\n-            // to also check the tests/benches/examples for these crates, rather\n-            // than just the leaf crate.\n-            for krate in builder.in_tree_crates(\"test\", Some(target)) {\n-                cargo.arg(\"-p\").arg(krate.name);\n-            }\n-\n-            builder.info(&format!(\n-                \"Checking stage{} std test/bench/example targets ({} -> {})\",\n-                builder.top_stage, &compiler.host, target\n-            ));\n-            run_cargo(\n-                builder,\n-                cargo,\n-                args(builder),\n-                &libstd_test_stamp(builder, compiler, target),\n-                vec![],\n-                true,\n-            );\n+        // Explicitly pass -p for all dependencies krates -- this will force cargo\n+        // to also check the tests/benches/examples for these crates, rather\n+        // than just the leaf crate.\n+        for krate in builder.in_tree_crates(\"test\", Some(target)) {\n+            cargo.arg(\"-p\").arg(krate.name);\n         }\n+\n+        builder.info(&format!(\n+            \"Checking stage{} std test/bench/example targets ({} -> {})\",\n+            builder.top_stage, &compiler.host, target\n+        ));\n+        run_cargo(\n+            builder,\n+            cargo,\n+            args(builder),\n+            &libstd_test_stamp(builder, compiler, target),\n+            vec![],\n+            true,\n+        );\n     }\n }\n \n@@ -195,9 +192,7 @@ impl Step for Rustc {\n             cargo_subcommand(builder.kind),\n         );\n         rustc_cargo(builder, &mut cargo, target);\n-        if let Subcommand::Check { all_targets: true, .. } = builder.config.cmd {\n-            cargo.arg(\"--all-targets\");\n-        }\n+        cargo.arg(\"--all-targets\");\n \n         // Explicitly pass -p for all compiler krates -- this will force cargo\n         // to also check the tests/benches/examples for these crates, rather\n@@ -318,10 +313,7 @@ macro_rules! tool_check_step {\n                     $source_type,\n                     &[],\n                 );\n-\n-                if let Subcommand::Check { all_targets: true, .. } = builder.config.cmd {\n-                    cargo.arg(\"--all-targets\");\n-                }\n+                cargo.arg(\"--all-targets\");\n \n                 // Enable internal lints for clippy and rustdoc\n                 // NOTE: this doesn't enable lints for any other tools unless they explicitly add `#![warn(rustc::internal)]`"}, {"sha": "80c33fa4d7c9700de0323e21598589e4179bfd84", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -78,9 +78,6 @@ pub enum Subcommand {\n         paths: Vec<PathBuf>,\n     },\n     Check {\n-        // Whether to run checking over all targets (e.g., unit / integration\n-        // tests).\n-        all_targets: bool,\n         paths: Vec<PathBuf>,\n     },\n     Clippy {\n@@ -553,7 +550,12 @@ Arguments:\n         let cmd = match subcommand.as_str() {\n             \"build\" | \"b\" => Subcommand::Build { paths },\n             \"check\" | \"c\" => {\n-                Subcommand::Check { paths, all_targets: matches.opt_present(\"all-targets\") }\n+                if matches.opt_present(\"all-targets\") {\n+                    eprintln!(\n+                        \"Warning: --all-targets is now on by default and does not need to be passed explicitly.\"\n+                    );\n+                }\n+                Subcommand::Check { paths }\n             }\n             \"clippy\" => Subcommand::Clippy { paths, fix: matches.opt_present(\"fix\") },\n             \"fix\" => Subcommand::Fix { paths },"}, {"sha": "6da0703beacc98d394f5af29b98abad5f5ecb6b1", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -73,6 +73,8 @@ Tier Policy.\n \n All tier 2 targets with host tools support the full standard library.\n \n+**NOTE:** Tier 2 targets currently do not build the `rust-docs` component.\n+\n target | notes\n -------|-------\n `aarch64-apple-darwin` | ARM64 macOS (11.0+, Big Sur+)\n@@ -112,6 +114,8 @@ The `std` column in the table below has the following meanings:\n \n [`no_std`]: https://rust-embedded.github.io/book/intro/no-std.html\n \n+**NOTE:** Tier 2 targets currently do not build the `rust-docs` component.\n+\n target | std | notes\n -------|:---:|-------\n `aarch64-apple-ios` | \u2713 | ARM64 iOS"}, {"sha": "a3b01a59f27ee1813f6ee7d257a334745add25f8", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -85,11 +85,10 @@ pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer,\n     write!(buf, \"<a class=\\\"{}\\\" href=\\\"#\\\">{}</a>\", item.type_(), item.name.as_ref().unwrap());\n     write!(\n         buf,\n-        \"<button id=\\\"copy-path\\\" onclick=\\\"copy_path(this)\\\" title=\\\"copy path\\\">\\\n+        \"<button id=\\\"copy-path\\\" onclick=\\\"copy_path(this)\\\" title=\\\"Copy item path to clipboard\\\">\\\n             <img src=\\\"{static_root_path}clipboard{suffix}.svg\\\" \\\n                 width=\\\"19\\\" height=\\\"18\\\" \\\n-                alt=\\\"Copy item import\\\" \\\n-                title=\\\"Copy item import to clipboard\\\">\\\n+                alt=\\\"Copy item path\\\">\\\n          </button>\",\n         static_root_path = page.get_static_root_path(),\n         suffix = page.resource_suffix,"}, {"sha": "1eebd39256459e1e834f31022f6a32f2afb27cc0", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -986,7 +986,7 @@ function hideThemeButtonState() {\n         });\n \n         var el = document.createElement('textarea');\n-        el.value = 'use ' + path.join('::') + ';';\n+        el.value = path.join('::');\n         el.setAttribute('readonly', '');\n         // To not make it appear on the screen.\n         el.style.position = 'absolute';"}, {"sha": "ab595d28019210bfec57a956853fb640dd11ab75", "filename": "src/test/rustdoc-gui/module-items-font.goml", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Frustdoc-gui%2Fmodule-items-font.goml", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Frustdoc-gui%2Fmodule-items-font.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fmodule-items-font.goml?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -2,3 +2,22 @@\n goto: file://|DOC_PATH|/test_docs/index.html\n assert-css: (\".item-table .module-item a\", {\"font-family\": '\"Fira Sans\", Arial, sans-serif'}, ALL)\n assert-css: (\".item-table .docblock-short\", {\"font-family\": '\"Source Serif 4\", \"Noto Sans KR\", serif'}, ALL)\n+\n+// modules\n+assert-css: (\"#modules + .item-table .item-left a\", {\"font-family\": '\"Fira Sans\", Arial, sans-serif'})\n+assert-css: (\"#modules + .item-table .item-right.docblock-short\", {\"font-family\": '\"Source Serif 4\", \"Noto Sans KR\", serif'})\n+// structs\n+assert-css: (\"#structs + .item-table .item-left a\", {\"font-family\": '\"Fira Sans\", Arial, sans-serif'})\n+assert-css: (\"#structs + .item-table .item-right.docblock-short\", {\"font-family\": '\"Source Serif 4\", \"Noto Sans KR\", serif'})\n+// enums\n+assert-css: (\"#enums + .item-table .item-left a\", {\"font-family\": '\"Fira Sans\", Arial, sans-serif'})\n+assert-css: (\"#enums + .item-table .item-right.docblock-short\", {\"font-family\": '\"Source Serif 4\", \"Noto Sans KR\", serif'})\n+// traits\n+assert-css: (\"#traits + .item-table .item-left a\", {\"font-family\": '\"Fira Sans\", Arial, sans-serif'})\n+assert-css: (\"#traits + .item-table .item-right.docblock-short\", {\"font-family\": '\"Source Serif 4\", \"Noto Sans KR\", serif'})\n+// functions\n+assert-css: (\"#functions + .item-table .item-left a\", {\"font-family\": '\"Fira Sans\", Arial, sans-serif'})\n+assert-css: (\"#functions + .item-table .item-right.docblock-short\", {\"font-family\": '\"Source Serif 4\", \"Noto Sans KR\", serif'})\n+// keywords\n+assert-css: (\"#keywords + .item-table .item-left a\", {\"font-family\": '\"Fira Sans\", Arial, sans-serif'})\n+assert-css: (\"#keywords + .item-table .item-right.docblock-short\", {\"font-family\": '\"Source Serif 4\", \"Noto Sans KR\", serif'})"}, {"sha": "98396abb6ff66d6f11cd3c5a3d3a331e01709899", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -16,11 +16,11 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n help: add a dummy let to cause `fptr` to be fully captured\n    |\n LL ~     thread::spawn(move || { let _ = &fptr; unsafe {\n-LL +\n-LL +\n-LL +\n-LL +\n-LL +         *fptr.0 = 20;\n+LL |\n+LL |\n+LL |\n+LL |\n+LL |         *fptr.0 = 20;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` trait implementation for closure\n@@ -36,11 +36,11 @@ LL |         *fptr.0.0 = 20;\n help: add a dummy let to cause `fptr` to be fully captured\n    |\n LL ~     thread::spawn(move || { let _ = &fptr; unsafe {\n-LL +\n-LL +\n-LL +\n-LL +\n-LL +         *fptr.0.0 = 20;\n+LL |\n+LL |\n+LL |\n+LL |\n+LL |         *fptr.0.0 = 20;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure and drop order\n@@ -60,11 +60,7 @@ help: add a dummy let to cause `f` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &f;\n-LL +\n-LL +\n-LL +\n-LL +\n- ...\n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7989a8fa5ccae1957c7972867e45ac6c54183a6b", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.stderr", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -30,11 +30,7 @@ help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = (&t, &t1, &t2);\n-LL +\n-LL +\n-LL +\n-LL + \n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:41:13\n@@ -59,11 +55,7 @@ help: add a dummy let to cause `t`, `t1` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = (&t, &t1);\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:62:13\n@@ -82,11 +74,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:83:13\n@@ -105,11 +93,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:104:13\n@@ -128,11 +112,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:122:13\n@@ -156,11 +136,7 @@ help: add a dummy let to cause `t1`, `t` to be fully captured\n    |\n LL ~     let c = move || {\n LL +         let _ = (&t1, &t);\n-LL +\n-LL +\n-LL +\n-LL +         println!(\"{} {}\", t1.1, t.1);\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:142:13\n@@ -179,11 +155,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: aborting due to 7 previous errors\n "}, {"sha": "961834aca194d4b2daef9f515bae695f76a66fc7", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -20,11 +20,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop_attr_migrations.rs:57:13\n@@ -43,11 +39,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = move || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.1;\n- ...\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d1f959dfc520e2fe8f5f5e2965c2ff4670f26c1a", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -18,7 +18,7 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n help: add a dummy let to cause `a` to be fully captured\n    |\n LL |     let _ = || { let _ = &a; dbg!(a.0) };\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                +++++++++++++           +\n \n error: aborting due to previous error\n "}, {"sha": "3589a6150d064b8e74731e0be1b8161eb45a7415", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -20,11 +20,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/migrations_rustfix.rs:33:13\n@@ -41,7 +37,7 @@ LL | }\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; t.0 };\n-   |                ~~~~~~~~~~~~~~~~~~~\n+   |                +++++++++++++     +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "10816b7bc3adf9346df3414fd7ed2105e6b6a621", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -17,11 +17,7 @@ help: add a dummy let to cause `f` to be fully captured\n    |\n LL ~     let result = panic::catch_unwind(move || {\n LL +         let _ = &f;\n-LL +\n-LL +\n-LL +\n-LL +\n- ...\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "8bee950c13eca0273b93632434119816ad03661c", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.stderr", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -23,11 +23,7 @@ help: add a dummy let to cause `f1`, `f2` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = (&f1, &f2);\n-LL +\n-LL +\n-LL +\n-LL +\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure\n   --> $DIR/multi_diagnostics.rs:42:13\n@@ -43,11 +39,7 @@ help: add a dummy let to cause `f1` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &f1;\n-LL +\n-LL +\n-LL +\n-LL +\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure\n   --> $DIR/multi_diagnostics.rs:67:13\n@@ -69,11 +61,7 @@ help: add a dummy let to cause `f1` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &f1;\n-LL +\n-LL +\n-LL +\n-LL +\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure and drop order\n   --> $DIR/multi_diagnostics.rs:86:13\n@@ -98,11 +86,7 @@ help: add a dummy let to cause `f1` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &f1;\n-LL +\n-LL +\n-LL +\n-LL +\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` trait implementation for closure\n   --> $DIR/multi_diagnostics.rs:119:19\n@@ -123,11 +107,11 @@ LL |         *fptr2.0 = 20;\n help: add a dummy let to cause `fptr1`, `fptr2` to be fully captured\n    |\n LL ~     thread::spawn(move || { let _ = (&fptr1, &fptr2); unsafe {\n-LL +\n-LL +\n-LL +\n-LL +\n-LL +\n+LL |\n+LL |\n+LL |\n+LL |\n+LL |\n  ...\n \n error: aborting due to 5 previous errors"}, {"sha": "aa9b8672a0ffbdc6c6d36a89500323b7f19feb61", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -20,11 +20,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/precise.rs:45:13\n@@ -53,11 +49,7 @@ help: add a dummy let to cause `u` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &u;\n-LL +\n-LL +\n-LL +\n-LL +         let _x = u.0.0;\n- ...\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e9170eba3f17665f3855d65e8c389f1c5516996e", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 9, "deletions": 45, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -30,11 +30,7 @@ help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = (&t, &t1, &t2);\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:50:13\n@@ -59,11 +55,7 @@ help: add a dummy let to cause `t`, `t1` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = (&t, &t1);\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:71:13\n@@ -82,11 +74,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:91:13\n@@ -105,11 +93,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:109:13\n@@ -128,11 +112,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:125:13\n@@ -151,11 +131,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.1;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:143:13\n@@ -179,11 +155,7 @@ help: add a dummy let to cause `t1`, `t` to be fully captured\n    |\n LL ~     let c = move || {\n LL +         let _ = (&t1, &t);\n-LL +\n-LL +\n-LL +\n-LL +         println!(\"{:?} {:?}\", t1.1, t.1);\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:163:21\n@@ -202,11 +174,7 @@ help: add a dummy let to cause `tuple` to be fully captured\n    |\n LL ~             let c = || {\n LL +                 let _ = &tuple;\n-LL +\n-LL +\n-LL +\n-LL +                 tuple.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:181:17\n@@ -225,11 +193,7 @@ help: add a dummy let to cause `tuple` to be fully captured\n    |\n LL ~         let c = || {\n LL +             let _ = &tuple;\n-LL +\n-LL +\n-LL +\n-LL +             tuple.0;\n- ...\n+   |\n \n error: aborting due to 9 previous errors\n "}, {"sha": "d5b1a9073acea92b177c663d134bb5e154401f1b", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-with-staged-api.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-with-staged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-with-staged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-with-staged-api.rs?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+\n+// This was an ICE, because the compiler ensures the\n+// function to be const when performing const checking,\n+// but functions marked with the attribute are not const\n+// *and* subject to const checking.\n+\n+#![feature(staged_api)]\n+#![feature(const_trait_impl)]\n+#![feature(const_fn_trait_bound)]\n+#![stable(since = \"1\", feature = \"foo\")]\n+\n+trait Tr {\n+    #[default_method_body_is_const]\n+    fn a() {}\n+}\n+\n+fn main() {}"}, {"sha": "d1cf5fb803d630c11825e8e083dc330e80b2db48", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/0e41c6201f7a3f1823b3b668da61577d89bf76d4/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=0e41c6201f7a3f1823b3b668da61577d89bf76d4", "patch": "@@ -93,8 +93,13 @@ function char_printer(n_tests) {\n             }\n         },\n         finish: function() {\n-            const spaces = \" \".repeat(max_per_line - (current % max_per_line));\n-            process.stdout.write(`${spaces} (${current}/${n_tests})${os.EOL}${os.EOL}`);\n+            if (current % max_per_line === 0) {\n+                // Don't output if we are already at a matching line end\n+                console.log(\"\");\n+            } else {\n+                const spaces = \" \".repeat(max_per_line - (current % max_per_line));\n+                process.stdout.write(`${spaces} (${current}/${n_tests})${os.EOL}${os.EOL}`);\n+            }\n         },\n     };\n }"}]}