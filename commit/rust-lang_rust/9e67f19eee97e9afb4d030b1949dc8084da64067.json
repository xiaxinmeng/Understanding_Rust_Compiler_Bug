{"sha": "9e67f19eee97e9afb4d030b1949dc8084da64067", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNjdmMTllZWU5N2U5YWZiNGQwMzBiMTk0OWRjODA4NGRhNjQwNjc=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-25T02:03:31Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-29T19:23:07Z"}, "message": "Convert some `match` expressions to `if`s.\n\nThese make the code more concise.", "tree": {"sha": "c391edba26d0f497747b62c7f1e42cd5e9401779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c391edba26d0f497747b62c7f1e42cd5e9401779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e67f19eee97e9afb4d030b1949dc8084da64067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e67f19eee97e9afb4d030b1949dc8084da64067", "html_url": "https://github.com/rust-lang/rust/commit/9e67f19eee97e9afb4d030b1949dc8084da64067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e67f19eee97e9afb4d030b1949dc8084da64067/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fb1f37888f2e306344adaab0adc5f0f4a454de0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb1f37888f2e306344adaab0adc5f0f4a454de0", "html_url": "https://github.com/rust-lang/rust/commit/6fb1f37888f2e306344adaab0adc5f0f4a454de0"}], "stats": {"total": 57, "additions": 21, "deletions": 36}, "files": [{"sha": "1ff07bd67f17f652beb395dcd378b4e704b4d916", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 21, "deletions": 36, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9e67f19eee97e9afb4d030b1949dc8084da64067/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e67f19eee97e9afb4d030b1949dc8084da64067/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=9e67f19eee97e9afb4d030b1949dc8084da64067", "patch": "@@ -481,12 +481,8 @@ impl<O: ForestObligation> ObligationForest<O> {\n             // For some benchmarks this state test is extremely\n             // hot. It's a win to handle the no-op cases immediately to avoid\n             // the cost of the function call.\n-            match node.state.get() {\n-                // Match arms are in order of frequency. Pending, Success and\n-                // Waiting dominate; the others are rare.\n-                NodeState::Pending => {},\n-                NodeState::Success => self.find_cycles_from_node(&mut stack, processor, index),\n-                NodeState::Waiting | NodeState::Done | NodeState::Error => {},\n+            if node.state.get() == NodeState::Success {\n+                self.find_cycles_from_node(&mut stack, processor, index);\n             }\n         }\n \n@@ -499,34 +495,25 @@ impl<O: ForestObligation> ObligationForest<O> {\n         where P: ObligationProcessor<Obligation=O>\n     {\n         let node = &self.nodes[index];\n-        match node.state.get() {\n-            NodeState::Success => {\n-                match stack.iter().rposition(|&n| n == index) {\n-                    None => {\n-                        stack.push(index);\n-                        for &index in node.dependents.iter() {\n-                            self.find_cycles_from_node(stack, processor, index);\n-                        }\n-                        stack.pop();\n-                        node.state.set(NodeState::Done);\n-                    }\n-                    Some(rpos) => {\n-                        // Cycle detected.\n-                        processor.process_backedge(\n-                            stack[rpos..].iter().map(GetObligation(&self.nodes)),\n-                            PhantomData\n-                        );\n+        if node.state.get() == NodeState::Success {\n+            match stack.iter().rposition(|&n| n == index) {\n+                None => {\n+                    stack.push(index);\n+                    for &index in node.dependents.iter() {\n+                        self.find_cycles_from_node(stack, processor, index);\n                     }\n+                    stack.pop();\n+                    node.state.set(NodeState::Done);\n+                }\n+                Some(rpos) => {\n+                    // Cycle detected.\n+                    processor.process_backedge(\n+                        stack[rpos..].iter().map(GetObligation(&self.nodes)),\n+                        PhantomData\n+                    );\n                 }\n             }\n-            NodeState::Waiting | NodeState::Pending => {\n-                // This node is still reachable from some pending node. We\n-                // will get to it when they are all processed.\n-            }\n-            NodeState::Done | NodeState::Error => {\n-                // Already processed that node.\n-            }\n-        };\n+        }\n     }\n \n     /// Returns a vector of obligations for `p` and all of its\n@@ -553,12 +540,10 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n         while let Some(index) = error_stack.pop() {\n             let node = &self.nodes[index];\n-            match node.state.get() {\n-                NodeState::Error => continue,\n-                _ => node.state.set(NodeState::Error),\n+            if node.state.get() != NodeState::Error {\n+                node.state.set(NodeState::Error);\n+                error_stack.extend(node.dependents.iter());\n             }\n-\n-            error_stack.extend(node.dependents.iter());\n         }\n \n         trace"}]}