{"sha": "7de0b1de19beac340691d260e7d5ed3dfeb92081", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZTBiMWRlMTliZWFjMzQwNjkxZDI2MGU3ZDVlZDNkZmViOTIwODE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-04T19:20:45Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-29T16:17:13Z"}, "message": "Move get_param and set_value_name", "tree": {"sha": "0fa34e459e70955e3ee3821b30b4a6093dcea33f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fa34e459e70955e3ee3821b30b4a6093dcea33f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7de0b1de19beac340691d260e7d5ed3dfeb92081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7de0b1de19beac340691d260e7d5ed3dfeb92081", "html_url": "https://github.com/rust-lang/rust/commit/7de0b1de19beac340691d260e7d5ed3dfeb92081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7de0b1de19beac340691d260e7d5ed3dfeb92081/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcab49720e5226bc96a78e896877213d1773eaa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcab49720e5226bc96a78e896877213d1773eaa5", "html_url": "https://github.com/rust-lang/rust/commit/bcab49720e5226bc96a78e896877213d1773eaa5"}], "stats": {"total": 84, "additions": 46, "deletions": 38}, "files": [{"sha": "3a0d9e1334cf6b6783af1f44501809bacecbbb02", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=7de0b1de19beac340691d260e7d5ed3dfeb92081", "patch": "@@ -859,4 +859,8 @@ impl AbiBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n     ) {\n         ty.apply_attrs_callsite(self, callsite)\n     }\n+\n+    fn get_param(&self, index: usize) -> Self::Value {\n+        llvm::get_param(self.llfn(), index as c_uint)\n+    }\n }"}, {"sha": "8e6299a45ae03ba8def3e10498a1e3243bf344d8", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=7de0b1de19beac340691d260e7d5ed3dfeb92081", "patch": "@@ -121,25 +121,12 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         Builder::new_block(self.cx, self.llfn(), name)\n     }\n \n-    fn llfn(&self) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMGetBasicBlockParent(self.llbb())\n-        }\n-    }\n-\n     fn llbb(&self) -> &'ll BasicBlock {\n         unsafe {\n             llvm::LLVMGetInsertBlock(self.llbuilder)\n         }\n     }\n \n-    fn set_value_name(&mut self, value: &'ll Value, name: &str) {\n-        let cname = SmallCStr::new(name);\n-        unsafe {\n-            llvm::LLVMSetValueName(value, cname.as_ptr());\n-        }\n-    }\n-\n     fn position_at_end(&mut self, llbb: &'ll BasicBlock) {\n         unsafe {\n             llvm::LLVMPositionBuilderAtEnd(self.llbuilder, llbb);\n@@ -768,6 +755,14 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n+    fn struct_gep(&mut self, ptr: &'ll Value, idx: u64) -> &'ll Value {\n+        self.count_insn(\"structgep\");\n+        assert_eq!(idx as c_uint as u64, idx);\n+        unsafe {\n+            llvm::LLVMBuildStructGEP(self.llbuilder, ptr, idx as c_uint, noname())\n+        }\n+    }\n+\n     /* Casts */\n     fn trunc(&mut self, val: &'ll Value, dest_ty: &'ll Type) -> &'ll Value {\n         self.count_insn(\"trunc\");\n@@ -999,6 +994,14 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n+    #[allow(dead_code)]\n+    fn va_arg(&mut self, list: &'ll Value, ty: &'ll Type) -> &'ll Value {\n+        self.count_insn(\"vaarg\");\n+        unsafe {\n+            llvm::LLVMBuildVAArg(self.llbuilder, list, ty, noname())\n+        }\n+    }\n+\n     fn extract_element(&mut self, vec: &'ll Value, idx: &'ll Value) -> &'ll Value {\n         self.count_insn(\"extractelement\");\n         unsafe {\n@@ -1241,13 +1244,6 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn struct_gep(&mut self, ptr: &'ll Value, idx: u64) -> &'ll Value {\n-        self.count_insn(\"structgep\");\n-        assert_eq!(idx as c_uint as u64, idx);\n-        unsafe {\n-            llvm::LLVMBuildStructGEP(self.llbuilder, ptr, idx as c_uint, noname())\n-        }\n-    }\n \n     fn cx(&self) -> &CodegenCx<'ll, 'tcx> {\n         self.cx\n@@ -1263,7 +1259,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n }\n \n impl StaticBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n-    fn get_static(&mut self, def_id: DefId) -> &'ll Value {\n+fn get_static(&mut self, def_id: DefId) -> &'ll Value {\n         // Forward to the `get_static` method of `CodegenCx`\n         self.cx().get_static(def_id)\n     }\n@@ -1300,6 +1296,12 @@ impl StaticBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n }\n \n impl Builder<'a, 'll, 'tcx> {\n+    pub fn llfn(&self) -> &'ll Value {\n+        unsafe {\n+            llvm::LLVMGetBasicBlockParent(self.llbb())\n+        }\n+    }\n+\n     fn count_insn(&self, category: &str) {\n         if self.sess().codegen_stats() {\n             self.stats.borrow_mut().n_llvm_insns += 1;"}, {"sha": "fc79e868fb4bf635f1bec3a11328e2774d1a238b", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=7de0b1de19beac340691d260e7d5ed3dfeb92081", "patch": "@@ -10,7 +10,6 @@ use crate::monomorphize::partitioning::CodegenUnit;\n use crate::type_::Type;\n use crate::type_of::PointeeInfo;\n use rustc_codegen_ssa::traits::*;\n-use libc::c_uint;\n \n use rustc_data_structures::base_n;\n use rustc_data_structures::small_c_str::SmallCStr;\n@@ -326,10 +325,6 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         get_fn(self, instance)\n     }\n \n-    fn get_param(&self, llfn: &'ll Value, index: usize) -> &'ll Value {\n-        llvm::get_param(llfn, index as c_uint)\n-    }\n-\n     fn eh_personality(&self) -> &'ll Value {\n         // The exception handling personality function.\n         //"}, {"sha": "6abbcd9feba7ac2cd28095d34d495d64e7b28ca6", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=7de0b1de19beac340691d260e7d5ed3dfeb92081", "patch": "@@ -225,6 +225,13 @@ impl DebugInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n     fn insert_reference_to_gdb_debug_scripts_section_global(&mut self) {\n         gdb::insert_reference_to_gdb_debug_scripts_section_global(self)\n     }\n+\n+    fn set_value_name(&mut self, value: &'ll Value, name: &str) {\n+        let cname = SmallCStr::new(name);\n+        unsafe {\n+            llvm::LLVMSetValueName(value, cname.as_ptr());\n+        }\n+    }\n }\n \n impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {"}, {"sha": "27e3e306699053ee4bc74818cc72a50576ee105e", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=7de0b1de19beac340691d260e7d5ed3dfeb92081", "patch": "@@ -501,8 +501,8 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n         bx.insert_reference_to_gdb_debug_scripts_section_global();\n \n         // Params from native main() used as args for rust start function\n-        let param_argc = cx.get_param(llfn, 0);\n-        let param_argv = cx.get_param(llfn, 1);\n+        let param_argc = bx.get_param(0);\n+        let param_argv = bx.get_param(1);\n         let arg_argc = bx.intcast(param_argc, cx.type_isize(), true);\n         let arg_argv = param_argv;\n "}, {"sha": "91aa9bcc7808bfae7c4e03dfee8ec40a46db654f", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=7de0b1de19beac340691d260e7d5ed3dfeb92081", "patch": "@@ -295,7 +295,7 @@ pub fn codegen_mir<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n                 // Temporary or return place\n                 if local == mir::RETURN_PLACE && fx.fn_ty.ret.is_indirect() {\n                     debug!(\"alloc: {:?} (return place) -> place\", local);\n-                    let llretptr = fx.cx.get_param(llfn, 0);\n+                    let llretptr = bx.get_param(0);\n                     LocalRef::Place(PlaceRef::new_sized(llretptr, layout, layout.align.abi))\n                 } else if memory_locals.contains(local) {\n                     debug!(\"alloc: {:?} -> place\", local);\n@@ -523,18 +523,18 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n                 }\n                 PassMode::Ignore(IgnoreMode::CVarArgs) => {}\n                 PassMode::Direct(_) => {\n-                    let llarg = bx.get_param(bx.llfn(), llarg_idx);\n+                    let llarg = bx.get_param(llarg_idx);\n                     bx.set_value_name(llarg, &name);\n                     llarg_idx += 1;\n                     return local(\n                         OperandRef::from_immediate_or_packed_pair(bx, llarg, arg.layout));\n                 }\n                 PassMode::Pair(..) => {\n-                    let a = bx.get_param(bx.llfn(), llarg_idx);\n+                    let a = bx.get_param(llarg_idx);\n                     bx.set_value_name(a, &(name.clone() + \".0\"));\n                     llarg_idx += 1;\n \n-                    let b = bx.get_param(bx.llfn(), llarg_idx);\n+                    let b = bx.get_param(llarg_idx);\n                     bx.set_value_name(b, &(name + \".1\"));\n                     llarg_idx += 1;\n \n@@ -551,16 +551,16 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n             // Don't copy an indirect argument to an alloca, the caller\n             // already put it in a temporary alloca and gave it up.\n             // FIXME: lifetimes\n-            let llarg = bx.get_param(bx.llfn(), llarg_idx);\n+            let llarg = bx.get_param(llarg_idx);\n             bx.set_value_name(llarg, &name);\n             llarg_idx += 1;\n             PlaceRef::new_sized(llarg, arg.layout, arg.layout.align.abi)\n         } else if arg.is_unsized_indirect() {\n             // As the storage for the indirect argument lives during\n             // the whole function call, we just copy the fat pointer.\n-            let llarg = bx.get_param(bx.llfn(), llarg_idx);\n+            let llarg = bx.get_param(llarg_idx);\n             llarg_idx += 1;\n-            let llextra = bx.get_param(bx.llfn(), llarg_idx);\n+            let llextra = bx.get_param(llarg_idx);\n             llarg_idx += 1;\n             let indirect_operand = OperandValue::Pair(llarg, llextra);\n "}, {"sha": "a8fd4e1d2c7c756853466f47edb41708ece38c67", "filename": "src/librustc_codegen_ssa/traits/abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_ssa%2Ftraits%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_ssa%2Ftraits%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fabi.rs?ref=7de0b1de19beac340691d260e7d5ed3dfeb92081", "patch": "@@ -10,4 +10,5 @@ pub trait AbiMethods<'tcx> {\n \n pub trait AbiBuilderMethods<'tcx>: BackendTypes {\n     fn apply_attrs_callsite(&mut self, ty: &FnType<'tcx, Ty<'tcx>>, callsite: Self::Value);\n+    fn get_param(&self, index: usize) -> Self::Value;\n }"}, {"sha": "da5da58d1674dbb151813f9796cbabc6aa7fb5d7", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=7de0b1de19beac340691d260e7d5ed3dfeb92081", "patch": "@@ -36,10 +36,8 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n     fn with_cx(cx: &'a Self::CodegenCx) -> Self;\n     fn build_sibling_block<'b>(&self, name: &'b str) -> Self;\n     fn cx(&self) -> &Self::CodegenCx;\n-    fn llfn(&self) -> Self::Value;\n     fn llbb(&self) -> Self::BasicBlock;\n \n-    fn set_value_name(&mut self, value: Self::Value, name: &str);\n     fn position_at_end(&mut self, llbb: Self::BasicBlock);\n     fn ret_void(&mut self);\n     fn ret(&mut self, v: Self::Value);\n@@ -209,6 +207,7 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n         else_val: Self::Value,\n     ) -> Self::Value;\n \n+    fn va_arg(&mut self, list: Self::Value, ty: Self::Type) -> Self::Value;\n     fn extract_element(&mut self, vec: Self::Value, idx: Self::Value) -> Self::Value;\n     fn vector_splat(&mut self, num_elts: usize, elt: Self::Value) -> Self::Value;\n     fn extract_value(&mut self, agg_val: Self::Value, idx: u64) -> Self::Value;"}, {"sha": "a0b53fde09c4d975826cb6d9def717a6001a307c", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=7de0b1de19beac340691d260e7d5ed3dfeb92081", "patch": "@@ -58,4 +58,5 @@ pub trait DebugInfoBuilderMethods<'tcx>: BackendTypes {\n         span: Span,\n     );\n     fn insert_reference_to_gdb_debug_scripts_section_global(&mut self);\n+    fn set_value_name(&mut self, value: Self::Value, name: &str);\n }"}, {"sha": "2797dd89f5b1599c3958122f7e8899ab07d18e12", "filename": "src/librustc_codegen_ssa/traits/misc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de0b1de19beac340691d260e7d5ed3dfeb92081/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs?ref=7de0b1de19beac340691d260e7d5ed3dfeb92081", "patch": "@@ -14,7 +14,6 @@ pub trait MiscMethods<'tcx>: BackendTypes {\n     fn check_overflow(&self) -> bool;\n     fn instances(&self) -> &RefCell<FxHashMap<Instance<'tcx>, Self::Value>>;\n     fn get_fn(&self, instance: Instance<'tcx>) -> Self::Value;\n-    fn get_param(&self, llfn: Self::Value, index: usize) -> Self::Value;\n     fn eh_personality(&self) -> Self::Value;\n     fn eh_unwind_resume(&self) -> Self::Value;\n     fn sess(&self) -> &Session;"}]}