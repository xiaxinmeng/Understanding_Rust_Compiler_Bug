{"sha": "f005e9fe96a938947e8f8e3c85268a2b2ed686c1", "node_id": "C_kwDOAAsO6NoAKGYwMDVlOWZlOTZhOTM4OTQ3ZThmOGUzYzg1MjY4YTJiMmVkNjg2YzE", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-14T18:28:25Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-15T07:24:48Z"}, "message": "Guess semicolon span for macro statements", "tree": {"sha": "4880d4a05126429b1e5799638ca10a9ddc5e5f1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4880d4a05126429b1e5799638ca10a9ddc5e5f1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f005e9fe96a938947e8f8e3c85268a2b2ed686c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f005e9fe96a938947e8f8e3c85268a2b2ed686c1", "html_url": "https://github.com/rust-lang/rust/commit/f005e9fe96a938947e8f8e3c85268a2b2ed686c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f005e9fe96a938947e8f8e3c85268a2b2ed686c1/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1333ae67f4d3c9b04f84e9c893e781282423292a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1333ae67f4d3c9b04f84e9c893e781282423292a", "html_url": "https://github.com/rust-lang/rust/commit/1333ae67f4d3c9b04f84e9c893e781282423292a"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "74958c4984962573984f2ab580136548643d845b", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f005e9fe96a938947e8f8e3c85268a2b2ed686c1/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f005e9fe96a938947e8f8e3c85268a2b2ed686c1/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=f005e9fe96a938947e8f8e3c85268a2b2ed686c1", "patch": "@@ -653,6 +653,18 @@ impl SourceMap {\n         })\n     }\n \n+    /// Extends the given `Span` while the next character matches the predicate\n+    pub fn span_extend_while(\n+        &self,\n+        span: Span,\n+        f: impl Fn(char) -> bool,\n+    ) -> Result<Span, SpanSnippetError> {\n+        self.span_to_source(span, |s, _start, end| {\n+            let n = s[end..].char_indices().find(|&(_, c)| !f(c)).map_or(s.len() - end, |(i, _)| i);\n+            Ok(span.with_hi(span.hi() + BytePos(n as u32)))\n+        })\n+    }\n+\n     /// Extends the given `Span` to just after the next occurrence of `c`.\n     pub fn span_extend_to_next_char(&self, sp: Span, c: char, accept_newlines: bool) -> Span {\n         if let Ok(next_source) = self.span_to_next_source(sp) {\n@@ -1013,6 +1025,32 @@ impl SourceMap {\n         let source_file = &self.files()[source_file_index];\n         source_file.is_imported()\n     }\n+\n+    /// Gets the span of a statement. If the statement is a macro expansion, the\n+    /// span in the context of the block span is found. The trailing semicolon is included\n+    /// on a best-effort basis.\n+    pub fn stmt_span(&self, stmt_span: Span, block_span: Span) -> Span {\n+        if !stmt_span.from_expansion() {\n+            return stmt_span;\n+        }\n+        let mac_call = original_sp(stmt_span, block_span);\n+        self.mac_call_stmt_semi_span(mac_call).map_or(mac_call, |s| mac_call.with_hi(s.hi()))\n+    }\n+\n+    /// Tries to find the span of the semicolon of a macro call statement.\n+    /// The input must be the *call site* span of a statement from macro expansion.\n+    ///\n+    ///           v output\n+    ///     mac!();\n+    ///     ^^^^^^ input\n+    pub fn mac_call_stmt_semi_span(&self, mac_call: Span) -> Option<Span> {\n+        let span = self.span_extend_while(mac_call, char::is_whitespace).ok()?;\n+        let span = span.shrink_to_hi().with_hi(BytePos(span.hi().0.checked_add(1)?));\n+        if self.span_to_snippet(span).as_deref() != Ok(\";\") {\n+            return None;\n+        }\n+        Some(span)\n+    }\n }\n \n #[derive(Clone)]"}, {"sha": "ac4bb652244864e3e1b873f289afdf08766f54fa", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f005e9fe96a938947e8f8e3c85268a2b2ed686c1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f005e9fe96a938947e8f8e3c85268a2b2ed686c1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=f005e9fe96a938947e8f8e3c85268a2b2ed686c1", "patch": "@@ -1171,8 +1171,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             return None;\n         }\n-        let original_span = original_sp(last_stmt.span, blk.span);\n-        Some((original_span.with_lo(original_span.hi() - BytePos(1)), needs_box))\n+        let span = if last_stmt.span.from_expansion() {\n+            let mac_call = original_sp(last_stmt.span, blk.span);\n+            self.tcx.sess.source_map().mac_call_stmt_semi_span(mac_call)?\n+        } else {\n+            last_stmt.span.with_lo(last_stmt.span.hi() - BytePos(1))\n+        };\n+        Some((span, needs_box))\n     }\n \n     // Instantiates the given path, which must refer to an item with the given"}]}