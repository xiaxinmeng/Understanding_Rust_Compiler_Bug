{"sha": "b9341bfdb1dec09b49b1e7d01d7c4db0e2436737", "node_id": "C_kwDOAAsO6NoAKGI5MzQxYmZkYjFkZWMwOWI0OWIxZTdkMDFkN2M0ZGIwZTI0MzY3Mzc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-05T02:51:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-05T02:51:06Z"}, "message": "Auto merge of #104920 - compiler-errors:avoid-infcx-build, r=jackh726\n\nAvoid some `InferCtxt::build` calls\n\nEither because we're inside of an `InferCtxt` already, or because we're not in a place where we'd ever see inference vars.\n\nr? types", "tree": {"sha": "6800154302bc90cde81fbc10593a70f59bf6b48a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6800154302bc90cde81fbc10593a70f59bf6b48a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9341bfdb1dec09b49b1e7d01d7c4db0e2436737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9341bfdb1dec09b49b1e7d01d7c4db0e2436737", "html_url": "https://github.com/rust-lang/rust/commit/b9341bfdb1dec09b49b1e7d01d7c4db0e2436737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9341bfdb1dec09b49b1e7d01d7c4db0e2436737/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1449560e31f7f801d81268a3dad783181656dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1449560e31f7f801d81268a3dad783181656dff", "html_url": "https://github.com/rust-lang/rust/commit/d1449560e31f7f801d81268a3dad783181656dff"}, {"sha": "a68eae2f70ce58fbf3bc614f19b4570d2c28d54c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a68eae2f70ce58fbf3bc614f19b4570d2c28d54c", "html_url": "https://github.com/rust-lang/rust/commit/a68eae2f70ce58fbf3bc614f19b4570d2c28d54c"}], "stats": {"total": 75, "additions": 46, "deletions": 29}, "files": [{"sha": "f64d65cc6ad7a303ac18eeca030d70b0f93c6a70", "filename": "compiler/rustc_hir_analysis/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b9341bfdb1dec09b49b1e7d01d7c4db0e2436737/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9341bfdb1dec09b49b1e7d01d7c4db0e2436737/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs?ref=b9341bfdb1dec09b49b1e7d01d7c4db0e2436737", "patch": "@@ -11,7 +11,6 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::GenericArg;\n-use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::{\n     self, subst, subst::SubstsRef, GenericParamDef, GenericParamDefKind, IsSuggestable, Ty, TyCtxt,\n };\n@@ -83,9 +82,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 Res::Def(DefKind::TyParam, src_def_id) => {\n                     if let Some(param_local_id) = param.def_id.as_local() {\n                         let param_name = tcx.hir().ty_param_name(param_local_id);\n-                        let infcx = tcx.infer_ctxt().build();\n-                        let param_type =\n-                            infcx.resolve_numeric_literals_with_default(tcx.type_of(param.def_id));\n+                        let param_type = tcx.type_of(param.def_id);\n                         if param_type.is_suggestable(tcx, false) {\n                             err.span_suggestion(\n                                 tcx.def_span(src_def_id),"}, {"sha": "1daca464b4772c2b07d4789a3c2286dd597ca18b", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b9341bfdb1dec09b49b1e7d01d7c4db0e2436737/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9341bfdb1dec09b49b1e7d01d7c4db0e2436737/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=b9341bfdb1dec09b49b1e7d01d7c4db0e2436737", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::{\n     Expr, ExprKind, GenericBound, Node, Path, QPath, Stmt, StmtKind, TyKind, WherePredicate,\n };\n use rustc_hir_analysis::astconv::AstConv;\n-use rustc_infer::infer::{self, TyCtxtInferExt};\n+use rustc_infer::infer;\n use rustc_infer::traits::{self, StatementAsExpression};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Binder, DefIdTree, IsSuggestable, ToPredicate, Ty};\n@@ -921,19 +921,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, ty);\n             let bound_vars = self.tcx.late_bound_vars(fn_id);\n             let ty = self.tcx.erase_late_bound_regions(Binder::bind_with_vars(ty, bound_vars));\n-            let ty = self.normalize(expr.span, ty);\n             let ty = match self.tcx.asyncness(fn_id.owner) {\n-                hir::IsAsync::Async => {\n-                    let infcx = self.tcx.infer_ctxt().build();\n-                    infcx.get_impl_future_output_ty(ty).unwrap_or_else(|| {\n-                        span_bug!(\n-                            fn_decl.output.span(),\n-                            \"failed to get output type of async function\"\n-                        )\n-                    })\n-                }\n+                hir::IsAsync::Async => self.get_impl_future_output_ty(ty).unwrap_or_else(|| {\n+                    span_bug!(fn_decl.output.span(), \"failed to get output type of async function\")\n+                }),\n                 hir::IsAsync::NotAsync => ty,\n             };\n+            let ty = self.normalize(expr.span, ty);\n             if self.can_coerce(found, ty) {\n                 err.multipart_suggestion(\n                     \"you might have meant to return this value\","}, {"sha": "3379279dd15441bbe4bf61ac4b0959c7ba2d7683", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b9341bfdb1dec09b49b1e7d01d7c4db0e2436737/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9341bfdb1dec09b49b1e7d01d7c4db0e2436737/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=b9341bfdb1dec09b49b1e7d01d7c4db0e2436737", "patch": "@@ -9,7 +9,7 @@ use super::{\n };\n use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCode};\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n+use crate::infer::{self, InferCtxt};\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n use crate::traits::query::normalize::QueryNormalizeExt as _;\n use crate::traits::specialize::to_pretty_impl_header;\n@@ -1934,14 +1934,6 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             return report(normalized_impl_candidates, err);\n         }\n \n-        let normalize = |candidate| {\n-            let infcx = self.tcx.infer_ctxt().build();\n-            infcx\n-                .at(&ObligationCause::dummy(), ty::ParamEnv::empty())\n-                .query_normalize(candidate)\n-                .map_or(candidate, |normalized| normalized.value)\n-        };\n-\n         // Sort impl candidates so that ordering is consistent for UI tests.\n         // because the ordering of `impl_candidates` may not be deterministic:\n         // https://github.com/rust-lang/rust/pull/57475#issuecomment-455519507\n@@ -1951,7 +1943,11 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let mut normalized_impl_candidates_and_similarities = impl_candidates\n             .into_iter()\n             .map(|ImplCandidate { trait_ref, similarity }| {\n-                let normalized = normalize(trait_ref);\n+                // FIXME(compiler-errors): This should be using `NormalizeExt::normalize`\n+                let normalized = self\n+                    .at(&ObligationCause::dummy(), ty::ParamEnv::empty())\n+                    .query_normalize(trait_ref)\n+                    .map_or(trait_ref, |normalized| normalized.value);\n                 (similarity, normalized)\n             })\n             .collect::<Vec<_>>();"}, {"sha": "f46e088b85f7201a46911fa4b19092bf6d48469d", "filename": "src/test/ui/return/tail-expr-as-potential-return.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b9341bfdb1dec09b49b1e7d01d7c4db0e2436737/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9341bfdb1dec09b49b1e7d01d7c4db0e2436737/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs?ref=b9341bfdb1dec09b49b1e7d01d7c4db0e2436737", "patch": "@@ -12,7 +12,6 @@\n // edition:2018\n \n fn main() {\n-    let _ = foo(true);\n }\n \n fn foo(x: bool) -> Result<f64, i32> {\n@@ -30,3 +29,19 @@ async fn bar(x: bool) -> Result<f64, i32> {\n     }\n     Ok(42.0)\n }\n+\n+trait Identity {\n+    type Out;\n+}\n+\n+impl<T> Identity for T {\n+    type Out = T;\n+}\n+\n+async fn foo2() -> i32 {\n+    if true {\n+        1i32 //~ ERROR mismatched types\n+            //| HELP you might have meant to return this value\n+    }\n+    0\n+}"}, {"sha": "9183b4599ba6dafb238f94d2aba435476ba30887", "filename": "src/test/ui/return/tail-expr-as-potential-return.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b9341bfdb1dec09b49b1e7d01d7c4db0e2436737/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9341bfdb1dec09b49b1e7d01d7c4db0e2436737/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr?ref=b9341bfdb1dec09b49b1e7d01d7c4db0e2436737", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/tail-expr-as-potential-return.rs:28:9\n+  --> $DIR/tail-expr-as-potential-return.rs:27:9\n    |\n LL | /     if x {\n LL | |         Err(42)\n@@ -16,7 +16,22 @@ LL |         return Err(42);\n    |         ++++++        +\n \n error[E0308]: mismatched types\n-  --> $DIR/tail-expr-as-potential-return.rs:20:9\n+  --> $DIR/tail-expr-as-potential-return.rs:43:9\n+   |\n+LL | /     if true {\n+LL | |         1i32\n+   | |         ^^^^ expected `()`, found `i32`\n+LL | |             //| HELP you might have meant to return this value\n+LL | |     }\n+   | |_____- expected this to be `()`\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |         return 1i32;\n+   |         ++++++     +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/tail-expr-as-potential-return.rs:19:9\n    |\n LL | /     if x {\n LL | |         Err(42)\n@@ -32,6 +47,6 @@ help: you might have meant to return this value\n LL |         return Err(42);\n    |         ++++++        +\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}