{"sha": "1f1a1ce4f57076be38d18f0a6defddb9c690bb1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMWExY2U0ZjU3MDc2YmUzOGQxOGYwYTZkZWZkZGI5YzY5MGJiMWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-21T23:54:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-21T23:54:47Z"}, "message": "Merge #8595\n\n8595: Diagnostic paths support specifying `remapPrefix` r=rickvanprim a=rickvanprim\n\nCurrently VSCode Problem Matchers will resolve a path like `//foo_crate/src/main.rs` if `${workspaceFolder}/foo_crate/src/main.rs` exists.  Presumably their behavior is functionally a string concatenation that would produce `${workspaceFolder///foo_crate/src/main.rs` and repeated path separators get ignored.\r\n\r\nThis PR attempts to mimic this behavior by stripping any `Component::RootDir` from `file_name` before joining it to `workspace_root`, and then checking if the file exists.  If it does, this path is used, and if not, the behavior falls through to the existing Rust path join behavior.\n\nCo-authored-by: James Leitch <rickvanprim@gmail.com>", "tree": {"sha": "c5859e4eb7334478b5e9ba58329b67df43e39305", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5859e4eb7334478b5e9ba58329b67df43e39305"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f1a1ce4f57076be38d18f0a6defddb9c690bb1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJggLtHCRBK7hj4Ov3rIwAAG7QIAG0RLbRvBr9dgUung8Si87wE\nzNCm+LI47zvoRN4VOQD5B7iC1ODscX3Frxs7IPY3syY5km4kMmY69qXEzXk5KvXJ\nTVLLNMLNr9DSiYi3SVuqO5LBkWyThV9NhoAfZxK2GqM7+fQTL2MwD14QFN7E6Yum\nhoPjAo8xR0QpdiIz0kxGpdDvFeW+vcLDjBcmaxhVNrD/yy2nxWEYOQZW0wjEASK8\n9oPxuneIvmnXm7Zf+i269Iij1cdTkvVSEYt10tTAxsES3Ue+u4jZrmqO9uETfkbH\nmXImqiSZ8fBVdbAFOPwGj2S4BsytmigfpKT6X0sK0BzKMfuxyPFlrwYjkNyfuUc=\n=5yAp\n-----END PGP SIGNATURE-----\n", "payload": "tree c5859e4eb7334478b5e9ba58329b67df43e39305\nparent 32491c09787fa3b386d067f0ce95d744c1480e0b\nparent 72718bc2d7113874536b8bcd486aa5bd7dacafe6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1619049287 +0000\ncommitter GitHub <noreply@github.com> 1619049287 +0000\n\nMerge #8595\n\n8595: Diagnostic paths support specifying `remapPrefix` r=rickvanprim a=rickvanprim\n\nCurrently VSCode Problem Matchers will resolve a path like `//foo_crate/src/main.rs` if `${workspaceFolder}/foo_crate/src/main.rs` exists.  Presumably their behavior is functionally a string concatenation that would produce `${workspaceFolder///foo_crate/src/main.rs` and repeated path separators get ignored.\r\n\r\nThis PR attempts to mimic this behavior by stripping any `Component::RootDir` from `file_name` before joining it to `workspace_root`, and then checking if the file exists.  If it does, this path is used, and if not, the behavior falls through to the existing Rust path join behavior.\n\nCo-authored-by: James Leitch <rickvanprim@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f1a1ce4f57076be38d18f0a6defddb9c690bb1c", "html_url": "https://github.com/rust-lang/rust/commit/1f1a1ce4f57076be38d18f0a6defddb9c690bb1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f1a1ce4f57076be38d18f0a6defddb9c690bb1c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32491c09787fa3b386d067f0ce95d744c1480e0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/32491c09787fa3b386d067f0ce95d744c1480e0b", "html_url": "https://github.com/rust-lang/rust/commit/32491c09787fa3b386d067f0ce95d744c1480e0b"}, {"sha": "72718bc2d7113874536b8bcd486aa5bd7dacafe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/72718bc2d7113874536b8bcd486aa5bd7dacafe6", "html_url": "https://github.com/rust-lang/rust/commit/72718bc2d7113874536b8bcd486aa5bd7dacafe6"}], "stats": {"total": 79, "additions": 62, "deletions": 17}, "files": [{"sha": "1109d2dafd9ea55eb3da3983e553aacee6195c5b", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f1a1ce4f57076be38d18f0a6defddb9c690bb1c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1a1ce4f57076be38d18f0a6defddb9c690bb1c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=1f1a1ce4f57076be38d18f0a6defddb9c690bb1c", "patch": "@@ -17,7 +17,7 @@ use ide_db::helpers::{\n };\n use lsp_types::{ClientCapabilities, MarkupKind};\n use project_model::{CargoConfig, ProjectJson, ProjectJsonData, ProjectManifest, RustcSource};\n-use rustc_hash::FxHashSet;\n+use rustc_hash::{FxHashMap, FxHashSet};\n use serde::{de::DeserializeOwned, Deserialize};\n use vfs::AbsPathBuf;\n \n@@ -99,6 +99,9 @@ config_data! {\n         diagnostics_enableExperimental: bool    = \"true\",\n         /// List of rust-analyzer diagnostics to disable.\n         diagnostics_disabled: FxHashSet<String> = \"[]\",\n+        /// Map of prefixes to be substituted when parsing diagnostic file paths.\n+        /// This should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.\n+        diagnostics_remapPrefix: FxHashMap<String, String> = \"{}\",\n         /// List of warnings that should be displayed with info severity.\n         ///\n         /// The warnings will be indicated by a blue squiggly underline in code\n@@ -474,6 +477,7 @@ impl Config {\n     }\n     pub fn diagnostics_map(&self) -> DiagnosticsMapConfig {\n         DiagnosticsMapConfig {\n+            remap_prefix: self.data.diagnostics_remapPrefix.clone(),\n             warnings_as_info: self.data.diagnostics_warningsAsInfo.clone(),\n             warnings_as_hint: self.data.diagnostics_warningsAsHint.clone(),\n         }\n@@ -835,6 +839,9 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"items\": { \"type\": \"string\" },\n             \"uniqueItems\": true,\n         },\n+        \"FxHashMap<String, String>\" => set! {\n+            \"type\": \"object\",\n+        },\n         \"Option<usize>\" => set! {\n             \"type\": [\"null\", \"integer\"],\n             \"minimum\": 0,"}, {"sha": "d4b9db362b0e8d3d087edee6054c4681089b8c4a", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f1a1ce4f57076be38d18f0a6defddb9c690bb1c/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1a1ce4f57076be38d18f0a6defddb9c690bb1c/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=1f1a1ce4f57076be38d18f0a6defddb9c690bb1c", "patch": "@@ -12,6 +12,7 @@ pub(crate) type CheckFixes = Arc<FxHashMap<FileId, Vec<Fix>>>;\n \n #[derive(Debug, Default, Clone)]\n pub struct DiagnosticsMapConfig {\n+    pub remap_prefix: FxHashMap<String, String>,\n     pub warnings_as_info: Vec<String>,\n     pub warnings_as_hint: Vec<String>,\n }"}, {"sha": "82dd0da9a444b8f567a937b00aa09621dbb2266f", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1f1a1ce4f57076be38d18f0a6defddb9c690bb1c/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1a1ce4f57076be38d18f0a6defddb9c690bb1c/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=1f1a1ce4f57076be38d18f0a6defddb9c690bb1c", "patch": "@@ -1,6 +1,9 @@\n //! This module provides the functionality needed to convert diagnostics from\n //! `cargo check` json format to the LSP diagnostic format.\n-use std::{collections::HashMap, path::Path};\n+use std::{\n+    collections::HashMap,\n+    path::{Path, PathBuf},\n+};\n \n use flycheck::{DiagnosticLevel, DiagnosticSpan};\n use stdx::format_to;\n@@ -41,8 +44,12 @@ fn is_dummy_macro_file(file_name: &str) -> bool {\n }\n \n /// Converts a Rust span to a LSP location\n-fn location(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location {\n-    let file_name = workspace_root.join(&span.file_name);\n+fn location(\n+    config: &DiagnosticsMapConfig,\n+    workspace_root: &Path,\n+    span: &DiagnosticSpan,\n+) -> lsp_types::Location {\n+    let file_name = resolve_path(config, workspace_root, &span.file_name);\n     let uri = url_from_abs_path(&file_name);\n \n     // FIXME: this doesn't handle UTF16 offsets correctly\n@@ -58,32 +65,50 @@ fn location(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location\n ///\n /// This takes locations pointing into the standard library, or generally outside the current\n /// workspace into account and tries to avoid those, in case macros are involved.\n-fn primary_location(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location {\n+fn primary_location(\n+    config: &DiagnosticsMapConfig,\n+    workspace_root: &Path,\n+    span: &DiagnosticSpan,\n+) -> lsp_types::Location {\n     let span_stack = std::iter::successors(Some(span), |span| Some(&span.expansion.as_ref()?.span));\n     for span in span_stack.clone() {\n-        let abs_path = workspace_root.join(&span.file_name);\n+        let abs_path = resolve_path(config, workspace_root, &span.file_name);\n         if !is_dummy_macro_file(&span.file_name) && abs_path.starts_with(workspace_root) {\n-            return location(workspace_root, span);\n+            return location(config, workspace_root, span);\n         }\n     }\n \n     // Fall back to the outermost macro invocation if no suitable span comes up.\n     let last_span = span_stack.last().unwrap();\n-    location(workspace_root, last_span)\n+    location(config, workspace_root, last_span)\n }\n \n /// Converts a secondary Rust span to a LSP related information\n ///\n /// If the span is unlabelled this will return `None`.\n fn diagnostic_related_information(\n+    config: &DiagnosticsMapConfig,\n     workspace_root: &Path,\n     span: &DiagnosticSpan,\n ) -> Option<lsp_types::DiagnosticRelatedInformation> {\n     let message = span.label.clone()?;\n-    let location = location(workspace_root, span);\n+    let location = location(config, workspace_root, span);\n     Some(lsp_types::DiagnosticRelatedInformation { location, message })\n }\n \n+/// Resolves paths applying any matching path prefix remappings, and then\n+/// joining the path to the workspace root.\n+fn resolve_path(config: &DiagnosticsMapConfig, workspace_root: &Path, file_name: &str) -> PathBuf {\n+    match config\n+        .remap_prefix\n+        .iter()\n+        .find_map(|(from, to)| file_name.strip_prefix(from).map(|file_name| (to, file_name)))\n+    {\n+        Some((to, file_name)) => workspace_root.join(format!(\"{}{}\", to, file_name)),\n+        None => workspace_root.join(file_name),\n+    }\n+}\n+\n struct SubDiagnostic {\n     related: lsp_types::DiagnosticRelatedInformation,\n     suggested_fix: Option<lsp_ext::CodeAction>,\n@@ -95,6 +120,7 @@ enum MappedRustChildDiagnostic {\n }\n \n fn map_rust_child_diagnostic(\n+    config: &DiagnosticsMapConfig,\n     workspace_root: &Path,\n     rd: &flycheck::Diagnostic,\n ) -> MappedRustChildDiagnostic {\n@@ -108,7 +134,7 @@ fn map_rust_child_diagnostic(\n     let mut edit_map: HashMap<lsp_types::Url, Vec<lsp_types::TextEdit>> = HashMap::new();\n     for &span in &spans {\n         if let Some(suggested_replacement) = &span.suggested_replacement {\n-            let location = location(workspace_root, span);\n+            let location = location(config, workspace_root, span);\n             let edit = lsp_types::TextEdit::new(location.range, suggested_replacement.clone());\n             edit_map.entry(location.uri).or_default().push(edit);\n         }\n@@ -117,15 +143,15 @@ fn map_rust_child_diagnostic(\n     if edit_map.is_empty() {\n         MappedRustChildDiagnostic::SubDiagnostic(SubDiagnostic {\n             related: lsp_types::DiagnosticRelatedInformation {\n-                location: location(workspace_root, spans[0]),\n+                location: location(config, workspace_root, spans[0]),\n                 message: rd.message.clone(),\n             },\n             suggested_fix: None,\n         })\n     } else {\n         MappedRustChildDiagnostic::SubDiagnostic(SubDiagnostic {\n             related: lsp_types::DiagnosticRelatedInformation {\n-                location: location(workspace_root, spans[0]),\n+                location: location(config, workspace_root, spans[0]),\n                 message: rd.message.clone(),\n             },\n             suggested_fix: Some(lsp_ext::CodeAction {\n@@ -190,15 +216,15 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n     let mut tags = Vec::new();\n \n     for secondary_span in rd.spans.iter().filter(|s| !s.is_primary) {\n-        let related = diagnostic_related_information(workspace_root, secondary_span);\n+        let related = diagnostic_related_information(config, workspace_root, secondary_span);\n         if let Some(related) = related {\n             subdiagnostics.push(SubDiagnostic { related, suggested_fix: None });\n         }\n     }\n \n     let mut message = rd.message.clone();\n     for child in &rd.children {\n-        let child = map_rust_child_diagnostic(workspace_root, &child);\n+        let child = map_rust_child_diagnostic(config, workspace_root, &child);\n         match child {\n             MappedRustChildDiagnostic::SubDiagnostic(sub) => {\n                 subdiagnostics.push(sub);\n@@ -242,7 +268,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n     primary_spans\n         .iter()\n         .flat_map(|primary_span| {\n-            let primary_location = primary_location(workspace_root, &primary_span);\n+            let primary_location = primary_location(config, workspace_root, &primary_span);\n \n             let mut message = message.clone();\n             if needs_primary_span_label {\n@@ -272,7 +298,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                 // generated that code.\n                 let is_in_macro_call = i != 0;\n \n-                let secondary_location = location(workspace_root, &span);\n+                let secondary_location = location(config, workspace_root, &span);\n                 if secondary_location == primary_location {\n                     continue;\n                 }"}, {"sha": "e28423e993273f15b95c9a5e6346bf734cb4f85c", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f1a1ce4f57076be38d18f0a6defddb9c690bb1c/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/1f1a1ce4f57076be38d18f0a6defddb9c690bb1c/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=1f1a1ce4f57076be38d18f0a6defddb9c690bb1c", "patch": "@@ -147,6 +147,12 @@ have more false positives than usual.\n --\n List of rust-analyzer diagnostics to disable.\n --\n+[[rust-analyzer.diagnostics.remapPrefix]]rust-analyzer.diagnostics.remapPrefix (default: `{}`)::\n++\n+--\n+Map of prefixes to be substituted when parsing diagnostic file paths.\n+This should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.\n+--\n [[rust-analyzer.diagnostics.warningsAsHint]]rust-analyzer.diagnostics.warningsAsHint (default: `[]`)::\n +\n --"}, {"sha": "fa5632f900750790d35c408cb9fb9b04c006185a", "filename": "editors/code/package.json", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f1a1ce4f57076be38d18f0a6defddb9c690bb1c/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/1f1a1ce4f57076be38d18f0a6defddb9c690bb1c/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=1f1a1ce4f57076be38d18f0a6defddb9c690bb1c", "patch": "@@ -565,6 +565,11 @@\n                     },\n                     \"uniqueItems\": true\n                 },\n+                \"rust-analyzer.diagnostics.remapPrefix\": {\n+                    \"markdownDescription\": \"Map of prefixes to be substituted when parsing diagnostic file paths.\\nThis should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.\",\n+                    \"default\": {},\n+                    \"type\": \"object\"\n+                },\n                 \"rust-analyzer.diagnostics.warningsAsHint\": {\n                     \"markdownDescription\": \"List of warnings that should be displayed with info severity.\\n\\nThe warnings will be indicated by a blue squiggly underline in code\\nand a blue icon in the `Problems Panel`.\",\n                     \"default\": [],\n@@ -1195,4 +1200,4 @@\n             ]\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}]}