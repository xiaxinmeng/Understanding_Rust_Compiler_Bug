{"sha": "c9978b69bdd169777ec0befeeb75d2c7bd560526", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5OTc4YjY5YmRkMTY5Nzc3ZWMwYmVmZWViNzVkMmM3YmQ1NjA1MjY=", "commit": {"author": {"name": "pmk21", "email": "prithvikrishna49@gmail.com", "date": "2020-04-01T19:18:16Z"}, "committer": {"name": "pmk21", "email": "prithvikrishna49@gmail.com", "date": "2020-04-01T19:18:16Z"}, "message": "Allow let_underscore", "tree": {"sha": "5ca5fffac54487fde9915884369c0ddae63f9829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ca5fffac54487fde9915884369c0ddae63f9829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9978b69bdd169777ec0befeeb75d2c7bd560526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9978b69bdd169777ec0befeeb75d2c7bd560526", "html_url": "https://github.com/rust-lang/rust/commit/c9978b69bdd169777ec0befeeb75d2c7bd560526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9978b69bdd169777ec0befeeb75d2c7bd560526/comments", "author": {"login": "pmk21", "id": 32909711, "node_id": "MDQ6VXNlcjMyOTA5NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/32909711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmk21", "html_url": "https://github.com/pmk21", "followers_url": "https://api.github.com/users/pmk21/followers", "following_url": "https://api.github.com/users/pmk21/following{/other_user}", "gists_url": "https://api.github.com/users/pmk21/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmk21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmk21/subscriptions", "organizations_url": "https://api.github.com/users/pmk21/orgs", "repos_url": "https://api.github.com/users/pmk21/repos", "events_url": "https://api.github.com/users/pmk21/events{/privacy}", "received_events_url": "https://api.github.com/users/pmk21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmk21", "id": 32909711, "node_id": "MDQ6VXNlcjMyOTA5NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/32909711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmk21", "html_url": "https://github.com/pmk21", "followers_url": "https://api.github.com/users/pmk21/followers", "following_url": "https://api.github.com/users/pmk21/following{/other_user}", "gists_url": "https://api.github.com/users/pmk21/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmk21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmk21/subscriptions", "organizations_url": "https://api.github.com/users/pmk21/orgs", "repos_url": "https://api.github.com/users/pmk21/repos", "events_url": "https://api.github.com/users/pmk21/events{/privacy}", "received_events_url": "https://api.github.com/users/pmk21/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97acabe56aa89d24627f5a6ae29b57a3ff89a937", "url": "https://api.github.com/repos/rust-lang/rust/commits/97acabe56aa89d24627f5a6ae29b57a3ff89a937", "html_url": "https://github.com/rust-lang/rust/commit/97acabe56aa89d24627f5a6ae29b57a3ff89a937"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "a68f7edd8370f57adf4aae8e619d5d63adc4ecd6", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c9978b69bdd169777ec0befeeb75d2c7bd560526/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9978b69bdd169777ec0befeeb75d2c7bd560526/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=c9978b69bdd169777ec0befeeb75d2c7bd560526", "patch": "@@ -1,5 +1,5 @@\n use if_chain::if_chain;\n-use rustc_hir::{PatKind, Stmt, StmtKind};\n+use rustc_hir::{Local, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -66,13 +66,12 @@ const SYNC_GUARD_PATHS: [&[&str]; 3] = [\n ];\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n-    fn check_stmt(&mut self, cx: &LateContext<'_, '_>, stmt: &Stmt<'_>) {\n-        if in_external_macro(cx.tcx.sess, stmt.span) {\n+    fn check_local(&mut self, cx: &LateContext<'_, '_>, local: &Local<'_>) {\n+        if in_external_macro(cx.tcx.sess, local.span) {\n             return;\n         }\n \n         if_chain! {\n-            if let StmtKind::Local(ref local) = stmt.kind;\n             if let PatKind::Wild = local.pat.kind;\n             if let Some(ref init) = local.init;\n             then {\n@@ -81,7 +80,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n                     span_lint_and_help(\n                         cx,\n                         LET_UNDERSCORE_LOCK,\n-                        stmt.span,\n+                        local.span,\n                         \"non-binding let on a synchronization lock\",\n                         \"consider using an underscore-prefixed named \\\n                             binding or dropping explicitly with `std::mem::drop`\"\n@@ -90,15 +89,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n                     span_lint_and_help(\n                         cx,\n                         LET_UNDERSCORE_MUST_USE,\n-                        stmt.span,\n+                        local.span,\n                         \"non-binding let on an expression with `#[must_use]` type\",\n                         \"consider explicitly using expression value\"\n                     )\n                 } else if is_must_use_func_call(cx, init) {\n                     span_lint_and_help(\n                         cx,\n                         LET_UNDERSCORE_MUST_USE,\n-                        stmt.span,\n+                        local.span,\n                         \"non-binding let on a result of a `#[must_use]` function\",\n                         \"consider explicitly using function result\"\n                     )"}]}