{"sha": "403701f97628b85bfa3e5ec0e5ca82b81d53ba1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMzcwMWY5NzYyOGI4NWJmYTNlNWVjMGU1Y2E4MmI4MWQ1M2JhMWU=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-08-30T18:51:04Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-08-30T18:55:34Z"}, "message": "Don't try to use /dev/null on Fuchsia", "tree": {"sha": "439941056f20757daa142314ce37178f80ba4afa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/439941056f20757daa142314ce37178f80ba4afa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/403701f97628b85bfa3e5ec0e5ca82b81d53ba1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/403701f97628b85bfa3e5ec0e5ca82b81d53ba1e", "html_url": "https://github.com/rust-lang/rust/commit/403701f97628b85bfa3e5ec0e5ca82b81d53ba1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/403701f97628b85bfa3e5ec0e5ca82b81d53ba1e/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5da1123c5efbd91813fb5ba7cec5298d960ae3af", "url": "https://api.github.com/repos/rust-lang/rust/commits/5da1123c5efbd91813fb5ba7cec5298d960ae3af", "html_url": "https://github.com/rust-lang/rust/commit/5da1123c5efbd91813fb5ba7cec5298d960ae3af"}], "stats": {"total": 45, "additions": 36, "deletions": 9}, "files": [{"sha": "511e67840803e75e61ddf52043737deb38197987", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/403701f97628b85bfa3e5ec0e5ca82b81d53ba1e/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/403701f97628b85bfa3e5ec0e5ca82b81d53ba1e/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=403701f97628b85bfa3e5ec0e5ca82b81d53ba1e", "patch": "@@ -1,19 +1,27 @@\n use crate::os::unix::prelude::*;\n \n-use crate::ffi::{OsString, OsStr, CString, CStr};\n+use crate::ffi::{OsString, OsStr, CString};\n use crate::fmt;\n use crate::io;\n use crate::ptr;\n use crate::sys::fd::FileDesc;\n-use crate::sys::fs::{File, OpenOptions};\n+use crate::sys::fs::File;\n use crate::sys::pipe::{self, AnonPipe};\n use crate::sys_common::process::{CommandEnv, DefaultEnvKey};\n use crate::collections::BTreeMap;\n \n+#[cfg(not(target_os = \"fuchsia\"))]\n+use {\n+    crate::ffi::CStr,\n+    crate::sys::fs::OpenOptions,\n+};\n+\n use libc::{c_int, gid_t, uid_t, c_char, EXIT_SUCCESS, EXIT_FAILURE};\n \n cfg_if::cfg_if! {\n-    if #[cfg(target_os = \"redox\")] {\n+    if #[cfg(target_os = \"fuchsia\")] {\n+        // fuchsia doesn't have /dev/null\n+    } else if #[cfg(target_os = \"redox\")] {\n         const DEV_NULL: &'static str = \"null:\\0\";\n     } else {\n         const DEV_NULL: &'static str = \"/dev/null\\0\";\n@@ -83,6 +91,11 @@ pub enum ChildStdio {\n     Inherit,\n     Explicit(c_int),\n     Owned(FileDesc),\n+\n+    // On Fuchsia, null stdio is the default, so we simply don't specify\n+    // any actions at the time of spawning.\n+    #[cfg(target_os = \"fuchsia\")]\n+    Null,\n }\n \n pub enum Stdio {\n@@ -301,6 +314,7 @@ impl Stdio {\n                 Ok((ChildStdio::Owned(theirs.into_fd()), Some(ours)))\n             }\n \n+            #[cfg(not(target_os = \"fuchsia\"))]\n             Stdio::Null => {\n                 let mut opts = OpenOptions::new();\n                 opts.read(readable);\n@@ -311,6 +325,11 @@ impl Stdio {\n                 let fd = File::open_c(&path, &opts)?;\n                 Ok((ChildStdio::Owned(fd.into_fd()), None))\n             }\n+\n+            #[cfg(target_os = \"fuchsia\")]\n+            Stdio::Null => {\n+                Ok((ChildStdio::Null, None))\n+            }\n         }\n     }\n }\n@@ -333,6 +352,9 @@ impl ChildStdio {\n             ChildStdio::Inherit => None,\n             ChildStdio::Explicit(fd) => Some(fd),\n             ChildStdio::Owned(ref fd) => Some(fd.raw()),\n+\n+            #[cfg(target_os = \"fuchsia\")]\n+            ChildStdio::Null => None,\n         }\n     }\n }"}, {"sha": "295ec59eb32cf5137cff1a77eda3a6e24c506bbc", "filename": "src/libstd/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/403701f97628b85bfa3e5ec0e5ca82b81d53ba1e/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/403701f97628b85bfa3e5ec0e5ca82b81d53ba1e/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=403701f97628b85bfa3e5ec0e5ca82b81d53ba1e", "patch": "@@ -52,14 +52,18 @@ impl Command {\n             None => ptr::null(),\n         };\n \n-        let transfer_or_clone = |opt_fd, target_fd| if let Some(local_fd) = opt_fd {\n+        let make_action = |local_io: &ChildStdio, target_fd| if let Some(local_fd) = local_io.fd() {\n             fdio_spawn_action_t {\n                 action: FDIO_SPAWN_ACTION_TRANSFER_FD,\n                 local_fd,\n                 target_fd,\n                 ..Default::default()\n             }\n         } else {\n+            if let ChildStdio::Null = local_io {\n+                // acts as no-op\n+                return Default::default();\n+            }\n             fdio_spawn_action_t {\n                 action: FDIO_SPAWN_ACTION_CLONE_FD,\n                 local_fd: target_fd,\n@@ -69,9 +73,9 @@ impl Command {\n         };\n \n         // Clone stdin, stdout, and stderr\n-        let action1 = transfer_or_clone(stdio.stdin.fd(), 0);\n-        let action2 = transfer_or_clone(stdio.stdout.fd(), 1);\n-        let action3 = transfer_or_clone(stdio.stderr.fd(), 2);\n+        let action1 = make_action(&stdio.stdin, 0);\n+        let action2 = make_action(&stdio.stdout, 1);\n+        let action3 = make_action(&stdio.stderr, 2);\n         let actions = [action1, action2, action3];\n \n         // We don't want FileDesc::drop to be called on any stdio. fdio_spawn_etc\n@@ -86,7 +90,8 @@ impl Command {\n         zx_cvt(fdio_spawn_etc(\n             0,\n             FDIO_SPAWN_CLONE_JOB | FDIO_SPAWN_CLONE_LDSVC | FDIO_SPAWN_CLONE_NAMESPACE,\n-            self.get_argv()[0], self.get_argv().as_ptr(), envp, 3, actions.as_ptr(),\n+            self.get_argv()[0], self.get_argv().as_ptr(), envp,\n+            actions.len() as size_t, actions.as_ptr(),\n             &mut process_handle,\n             ptr::null_mut(),\n         ))?;"}, {"sha": "29032f5e0d20028bbbba8ae31304259c39541816", "filename": "src/libstd/sys/unix/process/zircon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/403701f97628b85bfa3e5ec0e5ca82b81d53ba1e/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/403701f97628b85bfa3e5ec0e5ca82b81d53ba1e/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs?ref=403701f97628b85bfa3e5ec0e5ca82b81d53ba1e", "patch": "@@ -120,7 +120,7 @@ pub struct fdio_spawn_action_t {\n extern {\n     pub fn fdio_spawn_etc(job: zx_handle_t, flags: u32, path: *const c_char,\n                           argv: *const *const c_char, envp: *const *const c_char,\n-                          action_count: u64, actions: *const fdio_spawn_action_t,\n+                          action_count: size_t, actions: *const fdio_spawn_action_t,\n                           process: *mut zx_handle_t, err_msg: *mut c_char) -> zx_status_t;\n }\n "}]}