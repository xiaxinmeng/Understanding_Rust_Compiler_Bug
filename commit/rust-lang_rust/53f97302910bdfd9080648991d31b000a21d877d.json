{"sha": "53f97302910bdfd9080648991d31b000a21d877d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZjk3MzAyOTEwYmRmZDkwODA2NDg5OTFkMzFiMDAwYTIxZDg3N2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-21T15:12:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-21T15:12:37Z"}, "message": "Auto merge of #35074 - ashleygwilliams:assert_ne, r=steveklabnik\n\nadd debug_assert_ne + assert_ne\n\n~~\u2728 work in progress, please do not merge \u2728~~\n\nfixes #35073", "tree": {"sha": "3420465929dcbf23974f994e50ece05ad55cef1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3420465929dcbf23974f994e50ece05ad55cef1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53f97302910bdfd9080648991d31b000a21d877d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53f97302910bdfd9080648991d31b000a21d877d", "html_url": "https://github.com/rust-lang/rust/commit/53f97302910bdfd9080648991d31b000a21d877d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53f97302910bdfd9080648991d31b000a21d877d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cc6c6b1b76960441c39ef29e951f22de45da15b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc6c6b1b76960441c39ef29e951f22de45da15b", "html_url": "https://github.com/rust-lang/rust/commit/5cc6c6b1b76960441c39ef29e951f22de45da15b"}, {"sha": "3d8d55787b2c0f5b1aba01b08da13bf0d612818c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d8d55787b2c0f5b1aba01b08da13bf0d612818c", "html_url": "https://github.com/rust-lang/rust/commit/3d8d55787b2c0f5b1aba01b08da13bf0d612818c"}], "stats": {"total": 102, "additions": 100, "deletions": 2}, "files": [{"sha": "99c24e4c48d44a51a7a0ce0aa7f76add4845ff5d", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/53f97302910bdfd9080648991d31b000a21d877d/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f97302910bdfd9080648991d31b000a21d877d/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=53f97302910bdfd9080648991d31b000a21d877d", "patch": "@@ -119,6 +119,44 @@ macro_rules! assert_eq {\n     });\n }\n \n+/// Asserts that two expressions are not equal to each other.\n+///\n+/// On panic, this macro will print the values of the expressions with their\n+/// debug representations.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// let a = 3;\n+/// let b = 2;\n+/// assert_ne!(a, b);\n+/// ```\n+#[macro_export]\n+#[stable(feature = \"assert_ne\", since = \"1.12.0\")]\n+macro_rules! assert_ne {\n+    ($left:expr , $right:expr) => ({\n+        match (&$left, &$right) {\n+            (left_val, right_val) => {\n+                if *left_val == *right_val {\n+                    panic!(\"assertion failed: `(left != right)` \\\n+                           (left: `{:?}`, right: `{:?}`)\", left_val, right_val)\n+                }\n+            }\n+        }\n+    });\n+    ($left:expr , $right:expr, $($arg:tt)*) => ({\n+        match (&($left), &($right)) {\n+            (left_val, right_val) => {\n+                if *left_val == *right_val {\n+                    panic!(\"assertion failed: `(left != right)` \\\n+                           (left: `{:?}`, right: `{:?}`): {}\", left_val, right_val,\n+                           format_args!($($arg)*))\n+                }\n+            }\n+        }\n+    });\n+}\n+\n /// Ensure that a boolean expression is `true` at runtime.\n ///\n /// This will invoke the `panic!` macro if the provided expression cannot be\n@@ -189,6 +227,31 @@ macro_rules! debug_assert_eq {\n     ($($arg:tt)*) => (if cfg!(debug_assertions) { assert_eq!($($arg)*); })\n }\n \n+/// Asserts that two expressions are not equal to each other.\n+///\n+/// On panic, this macro will print the values of the expressions with their\n+/// debug representations.\n+///\n+/// Unlike `assert_ne!`, `debug_assert_ne!` statements are only enabled in non\n+/// optimized builds by default. An optimized build will omit all\n+/// `debug_assert_ne!` statements unless `-C debug-assertions` is passed to the\n+/// compiler. This makes `debug_assert_ne!` useful for checks that are too\n+/// expensive to be present in a release build but may be helpful during\n+/// development.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// let a = 3;\n+/// let b = 2;\n+/// debug_assert_ne!(a, b);\n+/// ```\n+#[macro_export]\n+#[stable(feature = \"assert_ne\", since = \"1.12.0\")]\n+macro_rules! debug_assert_ne {\n+    ($($arg:tt)*) => (if cfg!(debug_assertions) { assert_ne!($($arg)*); })\n+}\n+\n /// Helper macro for reducing boilerplate code for matching `Result` together\n /// with converting downstream errors.\n ///"}, {"sha": "912045453e086dabff0d23766606abafd7bed660", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53f97302910bdfd9080648991d31b000a21d877d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f97302910bdfd9080648991d31b000a21d877d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=53f97302910bdfd9080648991d31b000a21d877d", "patch": "@@ -304,8 +304,8 @@ use prelude::v1::*;\n // We want to reexport a few macros from core but libcore has already been\n // imported by the compiler (via our #[no_std] attribute) In this case we just\n // add a new crate name so we can attach the reexports to it.\n-#[macro_reexport(assert, assert_eq, debug_assert, debug_assert_eq,\n-                 unreachable, unimplemented, write, writeln, try)]\n+#[macro_reexport(assert, assert_eq, assert_ne, debug_assert, debug_assert_eq,\n+                 debug_assert_ne, unreachable, unimplemented, write, writeln, try)]\n extern crate core as __core;\n \n #[macro_use]"}, {"sha": "ce671d2f1b5a2c47a61b3cb8c71297b1ea208a59", "filename": "src/test/run-pass/assert-ne-macro-success.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/53f97302910bdfd9080648991d31b000a21d877d/src%2Ftest%2Frun-pass%2Fassert-ne-macro-success.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f97302910bdfd9080648991d31b000a21d877d/src%2Ftest%2Frun-pass%2Fassert-ne-macro-success.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-ne-macro-success.rs?ref=53f97302910bdfd9080648991d31b000a21d877d", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(PartialEq, Debug)]\n+struct Point { x : isize }\n+\n+pub fn main() {\n+    assert_ne!(666,14);\n+    assert_ne!(\"666\".to_string(),\"abc\".to_string());\n+    assert_ne!(Box::new(Point{x:666}),Box::new(Point{x:34}));\n+    assert_ne!(&Point{x:666},&Point{x:34});\n+    assert_ne!(666, 42, \"no gods no masters\");\n+    assert_ne!(666, 42, \"6 {} 6\", \"6\");\n+    assert_ne!(666, 42, \"{x}, {y}, {z}\", x = 6, y = 6, z = 6);\n+}"}, {"sha": "eeac0b6f9f687a117cb25c2431b04b1df19567b8", "filename": "src/test/run-pass/assert-ne-macro-unsized.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/53f97302910bdfd9080648991d31b000a21d877d/src%2Ftest%2Frun-pass%2Fassert-ne-macro-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f97302910bdfd9080648991d31b000a21d877d/src%2Ftest%2Frun-pass%2Fassert-ne-macro-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-ne-macro-unsized.rs?ref=53f97302910bdfd9080648991d31b000a21d877d", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n+    assert_ne!([6, 6, 6][..], vec![1, 2, 3][..]);\n+}"}]}