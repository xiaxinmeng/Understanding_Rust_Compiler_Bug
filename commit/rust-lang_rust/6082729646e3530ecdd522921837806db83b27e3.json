{"sha": "6082729646e3530ecdd522921837806db83b27e3", "node_id": "C_kwDOAAsO6NoAKDYwODI3Mjk2NDZlMzUzMGVjZGQ1MjI5MjE4Mzc4MDZkYjgzYjI3ZTM", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-01-06T23:16:48Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-01-07T01:20:05Z"}, "message": "use type_implements_trait to check Param clone", "tree": {"sha": "8ac74bb13cc5ba934743e0defff49c4c30df8963", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ac74bb13cc5ba934743e0defff49c4c30df8963"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6082729646e3530ecdd522921837806db83b27e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6082729646e3530ecdd522921837806db83b27e3", "html_url": "https://github.com/rust-lang/rust/commit/6082729646e3530ecdd522921837806db83b27e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6082729646e3530ecdd522921837806db83b27e3/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce4afed2efdaaceb2624021df3a8d8fff892415a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce4afed2efdaaceb2624021df3a8d8fff892415a", "html_url": "https://github.com/rust-lang/rust/commit/ce4afed2efdaaceb2624021df3a8d8fff892415a"}], "stats": {"total": 31, "additions": 9, "deletions": 22}, "files": [{"sha": "c52365ae3b7c7309cc90bd44db5de64e07573482", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6082729646e3530ecdd522921837806db83b27e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6082729646e3530ecdd522921837806db83b27e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6082729646e3530ecdd522921837806db83b27e3", "patch": "@@ -1121,36 +1121,23 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let Some(generics) = self.tcx.hir().get_generics(owner.def_id) else { return false };\n         let ty::Ref(_, inner_ty, hir::Mutability::Not) = ty.kind() else { return false };\n         let ty::Param(param) = inner_ty.kind() else { return false };\n-        let Some(generic_param) = generics.get_named(param.name) else { return false };\n         let ObligationCauseCode::FunctionArgumentObligation { arg_hir_id, .. } = obligation.cause.code() else { return false };\n         let arg_node = self.tcx.hir().get(*arg_hir_id);\n         let Node::Expr(Expr { kind: hir::ExprKind::Path(_), ..}) = arg_node else { return false };\n \n         let clone_trait = self.tcx.require_lang_item(LangItem::Clone, None);\n-        let has_clone = self\n-            .type_implements_trait(clone_trait, [ty], obligation.param_env)\n-            .must_apply_modulo_regions();\n+        let has_clone = |ty| {\n+            self.type_implements_trait(clone_trait, [ty], obligation.param_env)\n+                .must_apply_modulo_regions()\n+        };\n \n-        let trait_pred_and_suggested_ty =\n-            trait_pred.map_bound(|trait_pred| (trait_pred, *inner_ty));\n         let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n             obligation.param_env,\n-            trait_pred_and_suggested_ty,\n+            trait_pred.map_bound(|trait_pred| (trait_pred, *inner_ty)),\n         );\n \n-        if has_clone && self.predicate_may_hold(&new_obligation) {\n-            let clone_bound = generics\n-                .bounds_for_param(generic_param.def_id)\n-                .flat_map(|bp| bp.bounds)\n-                .any(|bound| {\n-                    if let hir::GenericBound::Trait(hir::PolyTraitRef { trait_ref, .. }, ..) = bound\n-                    {\n-                        Some(clone_trait) == trait_ref.trait_def_id()\n-                    } else {\n-                        false\n-                    }\n-                });\n-            if !clone_bound {\n+        if self.predicate_may_hold(&new_obligation) && has_clone(ty) {\n+            if !has_clone(param.to_ty(self.tcx)) {\n                 suggest_constraining_type_param(\n                     self.tcx,\n                     generics,"}, {"sha": "3b2e316b2961e7d3e2e437ebb8eb0a550c1d9286", "filename": "src/test/ui/suggestions/issue-106443-sugg-clone-for-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6082729646e3530ecdd522921837806db83b27e3/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6082729646e3530ecdd522921837806db83b27e3/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.rs?ref=6082729646e3530ecdd522921837806db83b27e3", "patch": "@@ -6,11 +6,11 @@ trait X {}\n impl X for S {}\n \n fn foo<T: X>(_: T) {}\n-fn bar<T: X>(s: &T)  {\n+fn bar<T: X>(s: &T) {\n     foo(s); //~ ERROR the trait bound `&T: X` is not satisfied\n }\n \n-fn bar_with_clone<T: X + Clone>(s: &T)  {\n+fn bar_with_clone<T: X + Clone>(s: &T) {\n     foo(s); //~ ERROR the trait bound `&T: X` is not satisfied\n }\n "}]}