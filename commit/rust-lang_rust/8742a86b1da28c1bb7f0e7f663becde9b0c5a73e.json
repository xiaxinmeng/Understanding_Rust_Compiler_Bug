{"sha": "8742a86b1da28c1bb7f0e7f663becde9b0c5a73e", "node_id": "C_kwDOAAsO6NoAKDg3NDJhODZiMWRhMjhjMWJiN2YwZTdmNjYzYmVjZGU5YjBjNWE3M2U", "commit": {"author": {"name": "Jacob Lifshay", "email": "programmerjake@gmail.com", "date": "2022-07-29T23:12:24Z"}, "committer": {"name": "Jacob Lifshay", "email": "programmerjake@gmail.com", "date": "2022-07-29T23:12:24Z"}, "message": "add all_lane_counts feature to enable non-power-of-2 lane counts <= 64", "tree": {"sha": "a2c89e0806a495ed1ff498ad354b5c5377ff27c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2c89e0806a495ed1ff498ad354b5c5377ff27c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8742a86b1da28c1bb7f0e7f663becde9b0c5a73e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8742a86b1da28c1bb7f0e7f663becde9b0c5a73e", "html_url": "https://github.com/rust-lang/rust/commit/8742a86b1da28c1bb7f0e7f663becde9b0c5a73e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8742a86b1da28c1bb7f0e7f663becde9b0c5a73e/comments", "author": {"login": "programmerjake", "id": 4584340, "node_id": "MDQ6VXNlcjQ1ODQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4584340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/programmerjake", "html_url": "https://github.com/programmerjake", "followers_url": "https://api.github.com/users/programmerjake/followers", "following_url": "https://api.github.com/users/programmerjake/following{/other_user}", "gists_url": "https://api.github.com/users/programmerjake/gists{/gist_id}", "starred_url": "https://api.github.com/users/programmerjake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/programmerjake/subscriptions", "organizations_url": "https://api.github.com/users/programmerjake/orgs", "repos_url": "https://api.github.com/users/programmerjake/repos", "events_url": "https://api.github.com/users/programmerjake/events{/privacy}", "received_events_url": "https://api.github.com/users/programmerjake/received_events", "type": "User", "site_admin": false}, "committer": {"login": "programmerjake", "id": 4584340, "node_id": "MDQ6VXNlcjQ1ODQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4584340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/programmerjake", "html_url": "https://github.com/programmerjake", "followers_url": "https://api.github.com/users/programmerjake/followers", "following_url": "https://api.github.com/users/programmerjake/following{/other_user}", "gists_url": "https://api.github.com/users/programmerjake/gists{/gist_id}", "starred_url": "https://api.github.com/users/programmerjake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/programmerjake/subscriptions", "organizations_url": "https://api.github.com/users/programmerjake/orgs", "repos_url": "https://api.github.com/users/programmerjake/repos", "events_url": "https://api.github.com/users/programmerjake/events{/privacy}", "received_events_url": "https://api.github.com/users/programmerjake/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "691c8b29e619d0e7f19b519bb6a9768345615200", "url": "https://api.github.com/repos/rust-lang/rust/commits/691c8b29e619d0e7f19b519bb6a9768345615200", "html_url": "https://github.com/rust-lang/rust/commit/691c8b29e619d0e7f19b519bb6a9768345615200"}], "stats": {"total": 323, "additions": 221, "deletions": 102}, "files": [{"sha": "acd47a3da72b2cc0f910755b2b0573dbbb09e662", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8742a86b1da28c1bb7f0e7f663becde9b0c5a73e/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8742a86b1da28c1bb7f0e7f663becde9b0c5a73e/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=8742a86b1da28c1bb7f0e7f663becde9b0c5a73e", "patch": "@@ -241,6 +241,10 @@ jobs:\n           - \"--features std\"\n           - \"--features generic_const_exprs\"\n           - \"--features std --features generic_const_exprs\"\n+          - \"--features all_lane_counts\"\n+          - \"--features all_lane_counts --features std\"\n+          - \"--features all_lane_counts --features generic_const_exprs\"\n+          - \"--features all_lane_counts --features std --features generic_const_exprs\"\n \n     steps:\n       - uses: actions/checkout@v2"}, {"sha": "7435e24edd30fabd7937ae689ad67c6f41b1a9ff", "filename": "crates/core_simd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8742a86b1da28c1bb7f0e7f663becde9b0c5a73e/crates%2Fcore_simd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8742a86b1da28c1bb7f0e7f663becde9b0c5a73e/crates%2Fcore_simd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2FCargo.toml?ref=8742a86b1da28c1bb7f0e7f663becde9b0c5a73e", "patch": "@@ -13,6 +13,7 @@ default = [\"as_crate\"]\n as_crate = []\n std = []\n generic_const_exprs = []\n+all_lane_counts = []\n \n [target.'cfg(target_arch = \"wasm32\")'.dev-dependencies.wasm-bindgen]\n version = \"0.2\""}, {"sha": "2b91eb9e80047d313421dd79c7b8908ddebc6e37", "filename": "crates/core_simd/src/lane_count.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8742a86b1da28c1bb7f0e7f663becde9b0c5a73e/crates%2Fcore_simd%2Fsrc%2Flane_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8742a86b1da28c1bb7f0e7f663becde9b0c5a73e/crates%2Fcore_simd%2Fsrc%2Flane_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flane_count.rs?ref=8742a86b1da28c1bb7f0e7f663becde9b0c5a73e", "patch": "@@ -23,24 +23,20 @@ pub trait SupportedLaneCount: Sealed {\n \n impl<const LANES: usize> Sealed for LaneCount<LANES> {}\n \n-impl SupportedLaneCount for LaneCount<1> {\n-    type BitMask = [u8; 1];\n-}\n-impl SupportedLaneCount for LaneCount<2> {\n-    type BitMask = [u8; 1];\n-}\n-impl SupportedLaneCount for LaneCount<4> {\n-    type BitMask = [u8; 1];\n-}\n-impl SupportedLaneCount for LaneCount<8> {\n-    type BitMask = [u8; 1];\n-}\n-impl SupportedLaneCount for LaneCount<16> {\n-    type BitMask = [u8; 2];\n-}\n-impl SupportedLaneCount for LaneCount<32> {\n-    type BitMask = [u8; 4];\n-}\n-impl SupportedLaneCount for LaneCount<64> {\n-    type BitMask = [u8; 8];\n+macro_rules! supported_lane_count {\n+    ($($lanes:literal),+) => {\n+        $(\n+            impl SupportedLaneCount for LaneCount<$lanes> {\n+                type BitMask = [u8; ($lanes + 7) / 8];\n+            }\n+        )+\n+    };\n }\n+\n+supported_lane_count!(1, 2, 4, 8, 16, 32, 64);\n+#[cfg(feature = \"all_lane_counts\")]\n+supported_lane_count!(\n+    3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n+    31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,\n+    56, 57, 58, 59, 60, 61, 62, 63\n+);"}, {"sha": "1d2bc8b519aa6355e2916b27af8dcecdaf8a598d", "filename": "crates/test_helpers/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8742a86b1da28c1bb7f0e7f663becde9b0c5a73e/crates%2Ftest_helpers%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8742a86b1da28c1bb7f0e7f663becde9b0c5a73e/crates%2Ftest_helpers%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_helpers%2FCargo.toml?ref=8742a86b1da28c1bb7f0e7f663becde9b0c5a73e", "patch": "@@ -8,3 +8,6 @@ publish = false\n version = \"0.10\"\n default-features = false\n features = [\"alloc\"]\n+\n+[features]\n+all_lane_counts = []"}, {"sha": "650eadd12bfdf11e4a2415231fcf381f156c95ab", "filename": "crates/test_helpers/src/lib.rs", "status": "modified", "additions": 197, "deletions": 82, "changes": 279, "blob_url": "https://github.com/rust-lang/rust/blob/8742a86b1da28c1bb7f0e7f663becde9b0c5a73e/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8742a86b1da28c1bb7f0e7f663becde9b0c5a73e/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_helpers%2Fsrc%2Flib.rs?ref=8742a86b1da28c1bb7f0e7f663becde9b0c5a73e", "patch": "@@ -333,6 +333,39 @@ pub fn test_ternary_elementwise<\n     );\n }\n \n+#[doc(hidden)]\n+#[macro_export]\n+macro_rules! test_lanes_helper {\n+    ($($(#[$meta:meta])* $fn_name:ident $lanes:literal;)+) => {\n+        $(\n+            #[test]\n+            $(#[$meta])*\n+            fn $fn_name() {\n+                implementation::<$lanes>();\n+            }\n+        )+\n+    };\n+    (\n+        $(#[$meta:meta])+;\n+        $($(#[$meta_before:meta])+ $fn_name_before:ident $lanes_before:literal;)*\n+        $fn_name:ident $lanes:literal;\n+        $($fn_name_rest:ident $lanes_rest:literal;)*\n+    ) => {\n+        $crate::test_lanes_helper!(\n+            $(#[$meta])+;\n+            $($(#[$meta_before])+ $fn_name_before $lanes_before;)*\n+            $(#[$meta])+ $fn_name $lanes;\n+            $($fn_name_rest $lanes_rest;)*\n+        );\n+    };\n+    (\n+        $(#[$meta_ignored:meta])+;\n+        $($(#[$meta:meta])+ $fn_name:ident $lanes:literal;)+\n+    ) => {\n+        $crate::test_lanes_helper!($($(#[$meta])+ $fn_name $lanes;)+);\n+    };\n+}\n+\n /// Expand a const-generic test into separate tests for each possible lane count.\n #[macro_export]\n macro_rules! test_lanes {\n@@ -351,51 +384,90 @@ macro_rules! test_lanes {\n                 #[cfg(target_arch = \"wasm32\")]\n                 wasm_bindgen_test::wasm_bindgen_test_configure!(run_in_browser);\n \n-                #[test]\n-                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n-                fn lanes_1() {\n-                    implementation::<1>();\n-                }\n-\n-                #[test]\n-                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n-                fn lanes_2() {\n-                    implementation::<2>();\n-                }\n+                $crate::test_lanes_helper!(\n+                    #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)];\n+                    lanes_1 1;\n+                    lanes_2 2;\n+                    lanes_4 4;\n+                );\n \n-                #[test]\n-                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n-                fn lanes_4() {\n-                    implementation::<4>();\n-                }\n-\n-                #[test]\n-                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n-                #[cfg(not(miri))] // Miri intrinsic implementations are uniform and larger tests are sloooow\n-                fn lanes_8() {\n-                    implementation::<8>();\n-                }\n-\n-                #[test]\n-                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n                 #[cfg(not(miri))] // Miri intrinsic implementations are uniform and larger tests are sloooow\n-                fn lanes_16() {\n-                    implementation::<16>();\n-                }\n-\n-                #[test]\n-                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n+                $crate::test_lanes_helper!(\n+                    #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)];\n+                    lanes_8 8;\n+                    lanes_16 16;\n+                    lanes_32 32;\n+                    lanes_64 64;\n+                );\n+\n+                #[cfg(feature = \"all_lane_counts\")]\n+                $crate::test_lanes_helper!(\n+                    // test some odd and even non-power-of-2 lengths on miri\n+                    #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)];\n+                    lanes_3 3;\n+                    lanes_5 5;\n+                    lanes_6 6;\n+                );\n+\n+                #[cfg(feature = \"all_lane_counts\")]\n                 #[cfg(not(miri))] // Miri intrinsic implementations are uniform and larger tests are sloooow\n-                fn lanes_32() {\n-                    implementation::<32>();\n-                }\n-\n-                #[test]\n-                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n-                #[cfg(not(miri))] // Miri intrinsic implementations are uniform and larger tests are sloooow\n-                fn lanes_64() {\n-                    implementation::<64>();\n-                }\n+                $crate::test_lanes_helper!(\n+                    #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)];\n+                    lanes_7 7;\n+                    lanes_9 9;\n+                    lanes_10 10;\n+                    lanes_11 11;\n+                    lanes_12 12;\n+                    lanes_13 13;\n+                    lanes_14 14;\n+                    lanes_15 15;\n+                    lanes_17 17;\n+                    lanes_18 18;\n+                    lanes_19 19;\n+                    lanes_20 20;\n+                    lanes_21 21;\n+                    lanes_22 22;\n+                    lanes_23 23;\n+                    lanes_24 24;\n+                    lanes_25 25;\n+                    lanes_26 26;\n+                    lanes_27 27;\n+                    lanes_28 28;\n+                    lanes_29 29;\n+                    lanes_30 30;\n+                    lanes_31 31;\n+                    lanes_33 33;\n+                    lanes_34 34;\n+                    lanes_35 35;\n+                    lanes_36 36;\n+                    lanes_37 37;\n+                    lanes_38 38;\n+                    lanes_39 39;\n+                    lanes_40 40;\n+                    lanes_41 41;\n+                    lanes_42 42;\n+                    lanes_43 43;\n+                    lanes_44 44;\n+                    lanes_45 45;\n+                    lanes_46 46;\n+                    lanes_47 47;\n+                    lanes_48 48;\n+                    lanes_49 49;\n+                    lanes_50 50;\n+                    lanes_51 51;\n+                    lanes_52 52;\n+                    lanes_53 53;\n+                    lanes_54 54;\n+                    lanes_55 55;\n+                    lanes_56 56;\n+                    lanes_57 57;\n+                    lanes_58 58;\n+                    lanes_59 59;\n+                    lanes_60 60;\n+                    lanes_61 61;\n+                    lanes_62 62;\n+                    lanes_63 63;\n+                );\n             }\n         )*\n     }\n@@ -416,47 +488,90 @@ macro_rules! test_lanes_panic {\n                     core_simd::LaneCount<$lanes>: core_simd::SupportedLaneCount,\n                 $body\n \n-                #[test]\n-                #[should_panic]\n-                fn lanes_1() {\n-                    implementation::<1>();\n-                }\n-\n-                #[test]\n-                #[should_panic]\n-                fn lanes_2() {\n-                    implementation::<2>();\n-                }\n-\n-                #[test]\n-                #[should_panic]\n-                fn lanes_4() {\n-                    implementation::<4>();\n-                }\n-\n-                #[test]\n-                #[should_panic]\n-                fn lanes_8() {\n-                    implementation::<8>();\n-                }\n-\n-                #[test]\n-                #[should_panic]\n-                fn lanes_16() {\n-                    implementation::<16>();\n-                }\n-\n-                #[test]\n-                #[should_panic]\n-                fn lanes_32() {\n-                    implementation::<32>();\n-                }\n+                $crate::test_lanes_helper!(\n+                    #[should_panic];\n+                    lanes_1 1;\n+                    lanes_2 2;\n+                    lanes_4 4;\n+                );\n \n-                #[test]\n-                #[should_panic]\n-                fn lanes_64() {\n-                    implementation::<64>();\n-                }\n+                #[cfg(not(miri))] // Miri intrinsic implementations are uniform and larger tests are sloooow\n+                $crate::test_lanes_helper!(\n+                    #[should_panic];\n+                    lanes_8 8;\n+                    lanes_16 16;\n+                    lanes_32 32;\n+                    lanes_64 64;\n+                );\n+\n+                #[cfg(feature = \"all_lane_counts\")]\n+                $crate::test_lanes_helper!(\n+                    // test some odd and even non-power-of-2 lengths on miri\n+                    #[should_panic];\n+                    lanes_3 3;\n+                    lanes_5 5;\n+                    lanes_6 6;\n+                );\n+\n+                #[cfg(feature = \"all_lane_counts\")]\n+                #[cfg(not(miri))] // Miri intrinsic implementations are uniform and larger tests are sloooow\n+                $crate::test_lanes_helper!(\n+                    #[should_panic];\n+                    lanes_7 7;\n+                    lanes_9 9;\n+                    lanes_10 10;\n+                    lanes_11 11;\n+                    lanes_12 12;\n+                    lanes_13 13;\n+                    lanes_14 14;\n+                    lanes_15 15;\n+                    lanes_17 17;\n+                    lanes_18 18;\n+                    lanes_19 19;\n+                    lanes_20 20;\n+                    lanes_21 21;\n+                    lanes_22 22;\n+                    lanes_23 23;\n+                    lanes_24 24;\n+                    lanes_25 25;\n+                    lanes_26 26;\n+                    lanes_27 27;\n+                    lanes_28 28;\n+                    lanes_29 29;\n+                    lanes_30 30;\n+                    lanes_31 31;\n+                    lanes_33 33;\n+                    lanes_34 34;\n+                    lanes_35 35;\n+                    lanes_36 36;\n+                    lanes_37 37;\n+                    lanes_38 38;\n+                    lanes_39 39;\n+                    lanes_40 40;\n+                    lanes_41 41;\n+                    lanes_42 42;\n+                    lanes_43 43;\n+                    lanes_44 44;\n+                    lanes_45 45;\n+                    lanes_46 46;\n+                    lanes_47 47;\n+                    lanes_48 48;\n+                    lanes_49 49;\n+                    lanes_50 50;\n+                    lanes_51 51;\n+                    lanes_52 52;\n+                    lanes_53 53;\n+                    lanes_54 54;\n+                    lanes_55 55;\n+                    lanes_56 56;\n+                    lanes_57 57;\n+                    lanes_58 58;\n+                    lanes_59 59;\n+                    lanes_60 60;\n+                    lanes_61 61;\n+                    lanes_62 62;\n+                    lanes_63 63;\n+                );\n             }\n         )*\n     }"}]}