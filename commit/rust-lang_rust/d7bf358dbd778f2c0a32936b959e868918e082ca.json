{"sha": "d7bf358dbd778f2c0a32936b959e868918e082ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YmYzNThkYmQ3NzhmMmMwYTMyOTM2Yjk1OWU4Njg5MThlMDgyY2E=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-05-07T09:30:41Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-05-22T08:54:05Z"}, "message": "Be more explicit about what's skipped", "tree": {"sha": "326a1698e540e4011849145bcd026a9da6e45208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/326a1698e540e4011849145bcd026a9da6e45208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7bf358dbd778f2c0a32936b959e868918e082ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlsD2q0sHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MASQ\nwBAAvMw5XzW2c4YcxnLVCo4XCRR8maOKQilkZU/NbxGN3ujSeaEupIVUlBu68aLv\nBuqNksRPLTU3QZtM1EJ9Kyda7SuPt8k3VzJ8S3td6N9c00iZmVwQ4b5hNKlUUtka\n0cljmrEnP+Zp/A6sKCHUaAq22vZS5FCcCxJviNO1WySUvAFjlthZlXtYakXx01S9\n5MoxGr25lrVvENm1csHPdbvpFfL9K78OqoXVFZ16nf+6CXsoXXAe8pxL6Teh6Ttt\nybm2867jAAkHyYE7Z0AYV9arZMOYhNyL6RBPmHL0WQYAcLJLuYdgzU5uUIuD/APL\nXsv1577UOut4DjWTn9bPMnJR2dROrDdsC52L89CLCZ0HOqR3BHFCFmzDuYV1kvKP\ne1aoxQ5BewlPwRsQhTV6CmMMXNzu8/PP3wiQMyNx6zO8jpuPejfveqmGWiZhVEv7\niGPa/YBiSkTenwy5tfUgxrWkvHT0ORRrhv2Hg2xGDvMGRrLKgCIz3/SnQLqioLkn\n/gkKSmLGNni4EmZ5ynilylYVx3PQgDvfuq6zEI1wCe+NlMOqXN67ZDFC5A+YUpNE\nyux6DFQ6g8kLTTxBlRlx5WdVB8ky8UJOOsKmw3KCVD6O5Ibir7ncH+172ABJmF1D\n1jPHqvxj+lTnMIdi2vWP/WhU0Z3sfzhXPXW9Lk85iYwLODk=\n=SYvE\n-----END PGP SIGNATURE-----", "payload": "tree 326a1698e540e4011849145bcd026a9da6e45208\nparent 9872160836291d880852986841afe83a57f08045\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1525685441 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1526979245 +0200\n\nBe more explicit about what's skipped\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7bf358dbd778f2c0a32936b959e868918e082ca", "html_url": "https://github.com/rust-lang/rust/commit/d7bf358dbd778f2c0a32936b959e868918e082ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7bf358dbd778f2c0a32936b959e868918e082ca/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9872160836291d880852986841afe83a57f08045", "url": "https://api.github.com/repos/rust-lang/rust/commits/9872160836291d880852986841afe83a57f08045", "html_url": "https://github.com/rust-lang/rust/commit/9872160836291d880852986841afe83a57f08045"}], "stats": {"total": 65, "additions": 32, "deletions": 33}, "files": [{"sha": "97acfbbe8fd7d3357abbf0d1e71b6447b581ec22", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 32, "deletions": 33, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/d7bf358dbd778f2c0a32936b959e868918e082ca/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7bf358dbd778f2c0a32936b959e868918e082ca/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=d7bf358dbd778f2c0a32936b959e868918e082ca", "patch": "@@ -366,42 +366,41 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n \n                 TerminatorKind::Return => {\n                     if self.tcx.sess.features_untracked().const_let {\n-                        break;\n-                    }\n-                    // Check for unused values. This usually means\n-                    // there are extra statements in the AST.\n-                    for temp in mir.temps_iter() {\n-                        if self.local_qualif[temp].is_none() {\n-                            continue;\n-                        }\n-\n-                        let state = self.temp_promotion_state[temp];\n-                        if let TempState::Defined { location, uses: 0 } = state {\n-                            let data = &mir[location.block];\n-                            let stmt_idx = location.statement_index;\n-\n-                            // Get the span for the initialization.\n-                            let source_info = if stmt_idx < data.statements.len() {\n-                                data.statements[stmt_idx].source_info\n-                            } else {\n-                                data.terminator().source_info\n-                            };\n-                            self.span = source_info.span;\n+                        // Check for unused values. This usually means\n+                        // there are extra statements in the AST.\n+                        for temp in mir.temps_iter() {\n+                            if self.local_qualif[temp].is_none() {\n+                                continue;\n+                            }\n \n-                            // Treat this as a statement in the AST.\n-                            self.statement_like();\n+                            let state = self.temp_promotion_state[temp];\n+                            if let TempState::Defined { location, uses: 0 } = state {\n+                                let data = &mir[location.block];\n+                                let stmt_idx = location.statement_index;\n+\n+                                // Get the span for the initialization.\n+                                let source_info = if stmt_idx < data.statements.len() {\n+                                    data.statements[stmt_idx].source_info\n+                                } else {\n+                                    data.terminator().source_info\n+                                };\n+                                self.span = source_info.span;\n+\n+                                // Treat this as a statement in the AST.\n+                                self.statement_like();\n+                            }\n                         }\n-                    }\n \n-                    // Make sure there are no extra unassigned variables.\n-                    self.qualif = Qualif::NOT_CONST;\n-                    for index in mir.vars_iter() {\n-                        if !self.const_fn_arg_vars.contains(index.index()) {\n-                            debug!(\"unassigned variable {:?}\", index);\n-                            self.assign(&Place::Local(index), Location {\n-                                block: bb,\n-                                statement_index: usize::MAX,\n-                            });\n+                        // Make sure there are no extra unassigned variables.\n+                        self.qualif = Qualif::NOT_CONST;\n+                        for index in mir.vars_iter() {\n+                            if !self.const_fn_arg_vars.contains(index.index()) {\n+                                debug!(\"unassigned variable {:?}\", index);\n+                                self.assign(&Place::Local(index), Location {\n+                                    block: bb,\n+                                    statement_index: usize::MAX,\n+                                });\n+                            }\n                         }\n                     }\n "}]}