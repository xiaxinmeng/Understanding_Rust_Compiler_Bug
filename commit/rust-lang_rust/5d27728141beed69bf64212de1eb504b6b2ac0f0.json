{"sha": "5d27728141beed69bf64212de1eb504b6b2ac0f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMjc3MjgxNDFiZWVkNjliZjY0MjEyZGUxZWI1MDRiNmIyYWMwZjA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-06T22:11:21Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-06T22:12:18Z"}, "message": "rustc_builtin_macros: Share some more logic between `derive` and `cfg_eval`", "tree": {"sha": "e0eb6810a558aff35fb128ad9653c33336e74996", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0eb6810a558aff35fb128ad9653c33336e74996"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d27728141beed69bf64212de1eb504b6b2ac0f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d27728141beed69bf64212de1eb504b6b2ac0f0", "html_url": "https://github.com/rust-lang/rust/commit/5d27728141beed69bf64212de1eb504b6b2ac0f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d27728141beed69bf64212de1eb504b6b2ac0f0/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10ed08f5b644e1bd521eaf7d64474a837b17a7ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/10ed08f5b644e1bd521eaf7d64474a837b17a7ae", "html_url": "https://github.com/rust-lang/rust/commit/10ed08f5b644e1bd521eaf7d64474a837b17a7ae"}], "stats": {"total": 40, "additions": 14, "deletions": 26}, "files": [{"sha": "eea4d785dee069943941709d79c5b34f468b073d", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5d27728141beed69bf64212de1eb504b6b2ac0f0/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d27728141beed69bf64212de1eb504b6b2ac0f0/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=5d27728141beed69bf64212de1eb504b6b2ac0f0", "patch": "@@ -14,38 +14,41 @@ crate fn expand(\n     ecx: &mut ExtCtxt<'_>,\n     _span: Span,\n     meta_item: &ast::MetaItem,\n-    item: Annotatable,\n+    annotatable: Annotatable,\n ) -> Vec<Annotatable> {\n     check_builtin_macro_attribute(ecx, meta_item, sym::cfg_eval);\n+    cfg_eval(ecx, annotatable)\n+}\n \n+crate fn cfg_eval(ecx: &ExtCtxt<'_>, annotatable: Annotatable) -> Vec<Annotatable> {\n     let mut visitor = CfgEval {\n         cfg: StripUnconfigured { sess: ecx.sess, features: ecx.ecfg.features, modified: false },\n     };\n-    let mut item = visitor.fully_configure(item);\n+    let mut annotatable = visitor.configure_annotatable(annotatable);\n     if visitor.cfg.modified {\n         // Erase the tokens if cfg-stripping modified the item\n         // This will cause us to synthesize fake tokens\n         // when `nt_to_tokenstream` is called on this item.\n-        if let Some(tokens) = item.tokens_mut() {\n+        if let Some(tokens) = annotatable.tokens_mut() {\n             *tokens = None;\n         }\n     }\n-    vec![item]\n+    vec![annotatable]\n }\n \n-crate struct CfgEval<'a> {\n-    pub cfg: StripUnconfigured<'a>,\n+struct CfgEval<'a> {\n+    cfg: StripUnconfigured<'a>,\n }\n \n impl CfgEval<'_> {\n     fn configure<T: AstLike>(&mut self, node: T) -> Option<T> {\n         self.cfg.configure(node)\n     }\n \n-    crate fn fully_configure(&mut self, item: Annotatable) -> Annotatable {\n+    fn configure_annotatable(&mut self, annotatable: Annotatable) -> Annotatable {\n         // Since the item itself has already been configured by the InvocationCollector,\n         // we know that fold result vector will contain exactly one element\n-        match item {\n+        match annotatable {\n             Annotatable::Item(item) => Annotatable::Item(self.flat_map_item(item).pop().unwrap()),\n             Annotatable::TraitItem(item) => {\n                 Annotatable::TraitItem(self.flat_map_trait_item(item).pop().unwrap())"}, {"sha": "0da2c1c1021f33224b1f79a2987a7e849830d531", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5d27728141beed69bf64212de1eb504b6b2ac0f0/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d27728141beed69bf64212de1eb504b6b2ac0f0/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=5d27728141beed69bf64212de1eb504b6b2ac0f0", "patch": "@@ -1,9 +1,8 @@\n-use crate::cfg_eval::CfgEval;\n+use crate::cfg_eval::cfg_eval;\n \n-use rustc_ast::{self as ast, token, AstLike, ItemKind, MetaItemKind, NestedMetaItem, StmtKind};\n+use rustc_ast::{self as ast, token, ItemKind, MetaItemKind, NestedMetaItem, StmtKind};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_expand::base::{Annotatable, ExpandResult, ExtCtxt, Indeterminate, MultiItemModifier};\n-use rustc_expand::config::StripUnconfigured;\n use rustc_feature::AttributeTemplate;\n use rustc_parse::validate_attr;\n use rustc_session::Session;\n@@ -53,21 +52,7 @@ impl MultiItemModifier for Expander {\n \n         // FIXME: Try to cache intermediate results to avoid collecting same paths multiple times.\n         match ecx.resolver.resolve_derives(ecx.current_expansion.id, derives, ecx.force_mode) {\n-            Ok(()) => {\n-                let mut visitor = CfgEval {\n-                    cfg: StripUnconfigured { sess, features: ecx.ecfg.features, modified: false },\n-                };\n-                let mut item = visitor.fully_configure(item);\n-                if visitor.cfg.modified {\n-                    // Erase the tokens if cfg-stripping modified the item\n-                    // This will cause us to synthesize fake tokens\n-                    // when `nt_to_tokenstream` is called on this item.\n-                    if let Some(tokens) = item.tokens_mut() {\n-                        *tokens = None;\n-                    }\n-                }\n-                ExpandResult::Ready(vec![item])\n-            }\n+            Ok(()) => ExpandResult::Ready(cfg_eval(ecx, item)),\n             Err(Indeterminate) => ExpandResult::Retry(item),\n         }\n     }"}]}