{"sha": "b722dc36a5b3db7e3b8445103644d1a23c85796d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MjJkYzM2YTViM2RiN2UzYjg0NDUxMDM2NDRkMWEyM2M4NTc5NmQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-30T22:56:42Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-30T22:56:42Z"}, "message": "rt: Fix logging of type-parametric resources", "tree": {"sha": "df54a16bf95533c5fccd5bc6b93ee5c195649474", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df54a16bf95533c5fccd5bc6b93ee5c195649474"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b722dc36a5b3db7e3b8445103644d1a23c85796d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b722dc36a5b3db7e3b8445103644d1a23c85796d", "html_url": "https://github.com/rust-lang/rust/commit/b722dc36a5b3db7e3b8445103644d1a23c85796d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b722dc36a5b3db7e3b8445103644d1a23c85796d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05d96f155f8bc6eec0e9f3485b47698fb858aa72", "url": "https://api.github.com/repos/rust-lang/rust/commits/05d96f155f8bc6eec0e9f3485b47698fb858aa72", "html_url": "https://github.com/rust-lang/rust/commit/05d96f155f8bc6eec0e9f3485b47698fb858aa72"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "5fe852005640d07925c81255c1275c813f33be4b", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b722dc36a5b3db7e3b8445103644d1a23c85796d/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b722dc36a5b3db7e3b8445103644d1a23c85796d/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=b722dc36a5b3db7e3b8445103644d1a23c85796d", "patch": "@@ -395,11 +395,7 @@ fn shape_of(ccx: &@crate_ctxt, t: ty::t) -> [u8] {\n         s += [shape_res];\n         add_u16(s, id as u16);\n         add_u16(s, vec::len(tps) as u16);\n-\n-        let sub = [];\n-        for tp: ty::t in tps { add_substr(s, sub); }\n-        add_substr(s, sub);\n-\n+        for tp: ty::t in tps { add_substr(s, shape_of(ccx, tp)); }\n         add_substr(s, shape_of(ccx, subt));\n \n       }"}, {"sha": "091dd8e2d361618b045e5bd28d34e4117c59c083", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b722dc36a5b3db7e3b8445103644d1a23c85796d/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b722dc36a5b3db7e3b8445103644d1a23c85796d/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=b722dc36a5b3db7e3b8445103644d1a23c85796d", "patch": "@@ -110,21 +110,22 @@ print::walk_struct(bool align, const uint8_t *end_sp) {\n }\n \n void\n-print::walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n-                const uint8_t *ty_params_sp, const uint8_t *end_sp) {\n+print::walk_res(bool align, const rust_fn *dtor, unsigned n_params,\n+                const type_param *params, const uint8_t *end_sp) {\n     DPRINT(\"res@%p\", dtor);\n \n     // Print type parameters.\n-    if (n_ty_params) {\n+    if (n_params) {\n         DPRINT(\"<\");\n \n         bool first = true;\n-        for (uint16_t i = 0; i < n_ty_params; i++) {\n+        for (uint16_t i = 0; i < n_params; i++) {\n             if (!first)\n                 DPRINT(\",\");\n             first = false;\n-            get_u16_bump(sp);   // Skip over the size.\n-            walk(align);\n+\n+            ctxt<print> sub(*this, params[i].shape);\n+            sub.walk(align);\n         }\n \n         DPRINT(\">\");\n@@ -347,7 +348,7 @@ class cmp : public data<cmp,ptr_pair> {\n                   const data_pair<uint32_t> &tag_variants);\n     void walk_struct(bool align, const uint8_t *end_sp);\n     void walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n-                  const uint8_t *ty_params_sp, const uint8_t *end_sp,\n+                  const type_param *ty_params_sp, const uint8_t *end_sp,\n                   const data_pair<uintptr_t> &live);\n     void walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n                       const std::pair<const uint8_t *,const uint8_t *>\n@@ -400,7 +401,7 @@ cmp::walk_struct(bool align, const uint8_t *end_sp) {\n \n void\n cmp::walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n-              const uint8_t *ty_params_sp, const uint8_t *end_sp,\n+              const type_param *ty_params_sp, const uint8_t *end_sp,\n               const data_pair<uintptr_t> &live) {\n     abort();    // TODO\n }\n@@ -502,9 +503,8 @@ log::walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n }\n \n void\n-log::walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n-              const uint8_t *ty_params_sp, const uint8_t *end_sp,\n-              bool live) {\n+log::walk_res(bool align, const rust_fn *dtor, unsigned n_params,\n+              const type_param *params, const uint8_t *end_sp, bool live) {\n     out << \"res\";\n \n     if (this->sp == end_sp)"}, {"sha": "e871900d65f9b970d796bbe0e23cabcf15b70245", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b722dc36a5b3db7e3b8445103644d1a23c85796d/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/b722dc36a5b3db7e3b8445103644d1a23c85796d/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=b722dc36a5b3db7e3b8445103644d1a23c85796d", "patch": "@@ -446,14 +446,19 @@ ctxt<T>::walk_res(bool align) {\n \n     uint16_t n_ty_params = get_u16_bump(sp);\n \n-    uint16_t ty_params_size = get_u16_bump(sp);\n-    const uint8_t *ty_params_sp = sp;\n-    sp += ty_params_size;\n+    // Read in the tag type parameters.\n+    type_param params[n_ty_params];\n+    for (uint16_t i = 0; i < n_ty_params; i++) {\n+        uint16_t ty_param_len = get_u16_bump(sp);\n+        const uint8_t *next_sp = sp + ty_param_len;\n+        params[i].set(this);\n+        sp = next_sp;\n+    }\n \n     uint16_t sp_size = get_u16_bump(sp);\n     const uint8_t *end_sp = sp + sp_size;\n \n-    static_cast<T *>(this)->walk_res(align, dtor, n_ty_params, ty_params_sp,\n+    static_cast<T *>(this)->walk_res(align, dtor, n_ty_params, params,\n                                      end_sp);\n \n     sp = end_sp;\n@@ -479,8 +484,8 @@ class print : public ctxt<print> {\n \n     void walk_tag(bool align, tag_info &tinfo);\n     void walk_struct(bool align, const uint8_t *end_sp);\n-    void walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n-                  const uint8_t *ty_params_sp, const uint8_t *end_sp);\n+    void walk_res(bool align, const rust_fn *dtor, unsigned n_params,\n+                  const type_param *params, const uint8_t *end_sp);\n     void walk_var(bool align, uint8_t param);\n \n     void walk_evec(bool align, bool is_pod, uint16_t sp_size) {\n@@ -559,8 +564,8 @@ class size_of : public ctxt<size_of> {\n         sa = sub.sa;\n     }\n \n-    void walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n-                  const uint8_t *ty_params_sp, const uint8_t *end_sp) {\n+    void walk_res(bool align, const rust_fn *dtor, unsigned n_params,\n+                  const type_param *params, const uint8_t *end_sp) {\n         abort();    // TODO\n     }\n \n@@ -788,12 +793,12 @@ class data : public ctxt< data<T,U> > {\n         dp = next_dp;\n     }\n \n-    void walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n-                  const uint8_t *ty_params_sp, const uint8_t *end_sp) {\n+    void walk_res(bool align, const rust_fn *dtor, unsigned n_params,\n+                  const type_param *params, const uint8_t *end_sp) {\n         typename U::template data<uintptr_t>::t live = bump_dp<uintptr_t>(dp);\n         // Delegate to the implementation.\n-        static_cast<T *>(this)->walk_res(align, dtor, n_ty_params,\n-                                         ty_params_sp, end_sp, live);\n+        static_cast<T *>(this)->walk_res(align, dtor, n_params, params,\n+                                         end_sp, live);\n     }\n \n     void walk_var(bool align, uint8_t param_index) {\n@@ -1006,9 +1011,8 @@ class log : public data<log,ptr> {\n                       const std::pair<const uint8_t *,const uint8_t *>\n                       variant_ptr_and_end);\n     void walk_string(const std::pair<ptr,ptr> &data);\n-    void walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n-                  const uint8_t *ty_params_sp, const uint8_t *end_sp,\n-                  bool live);\n+    void walk_res(bool align, const rust_fn *dtor, unsigned n_params,\n+                  const type_param *params, const uint8_t *end_sp, bool live);\n \n     template<typename T>\n     void walk_number() { out << get_dp<T>(dp); }"}]}