{"sha": "202724cddc826f898693177c2b1d990d366d8bcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMjcyNGNkZGM4MjZmODk4NjkzMTc3YzJiMWQ5OTBkMzY2ZDhiY2Y=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-15T10:04:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-15T10:04:38Z"}, "message": "Rollup merge of #55785 - stjepang:unsized-drop-forget, r=alexcrichton\n\nAdd mem::forget_unsized() for forgetting unsized values\n\n~~Allows passing values of `T: ?Sized` types to `mem::drop` and `mem::forget`.~~\n\nAdds `mem::forget_unsized()` that accepts `T: ?Sized`.\n\nI had to revert the PR that removed the `forget` intrinsic and replaced it with `ManuallyDrop`: https://github.com/rust-lang/rust/pull/40559\nWe can't use `ManuallyDrop::new()` here because it needs `T: Sized` and we don't have support for unsized return values yet (will we ever?).\n\nr? @eddyb", "tree": {"sha": "69d7d01633be913de9cb574d1ac536376ddee95d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69d7d01633be913de9cb574d1ac536376ddee95d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/202724cddc826f898693177c2b1d990d366d8bcf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb7US3CRBK7hj4Ov3rIwAAdHIIAEHxMsNa7cMMv6Q+8u0wnP/K\n8tSYngQf+ErXy2yfEJnOrVEYHVDLBu9CpwqqhB8fde3XiFgiNZZ60C0/NN9oOOV3\nwMBB8wi1lWw1ncIHcDwsrlaGoHsYVBmNmMKqurfIL+Yce4LuQgFliao+XuoWFoSD\nGkbW2rMd+nMxvOCj/WP0bDIONqbNknlPUti23QhdzzS6NxLsnQeQFRQOgPkHswiF\nv4foOxdAbzjnRL5/2xLg+pm3m3DzIKoNgF+cFyF4Awa9F+ipC4/MprUz6k3ZvCWy\n625NtESycLkgCZvlOmA4tUXxDnDDeSUpOoQdK14TzOi4rsLsRpgXQwKkaXoSwXw=\n=83zz\n-----END PGP SIGNATURE-----\n", "payload": "tree 69d7d01633be913de9cb574d1ac536376ddee95d\nparent 6ca7bc0eb8648abc8673a971c85b777a6bc62e16\nparent 56d3a824e46ce9976a017ef41c318a66444da99c\nauthor Pietro Albini <pietro@pietroalbini.org> 1542276278 +0100\ncommitter GitHub <noreply@github.com> 1542276278 +0100\n\nRollup merge of #55785 - stjepang:unsized-drop-forget, r=alexcrichton\n\nAdd mem::forget_unsized() for forgetting unsized values\n\n~~Allows passing values of `T: ?Sized` types to `mem::drop` and `mem::forget`.~~\n\nAdds `mem::forget_unsized()` that accepts `T: ?Sized`.\n\nI had to revert the PR that removed the `forget` intrinsic and replaced it with `ManuallyDrop`: https://github.com/rust-lang/rust/pull/40559\nWe can't use `ManuallyDrop::new()` here because it needs `T: Sized` and we don't have support for unsized return values yet (will we ever?).\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/202724cddc826f898693177c2b1d990d366d8bcf", "html_url": "https://github.com/rust-lang/rust/commit/202724cddc826f898693177c2b1d990d366d8bcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/202724cddc826f898693177c2b1d990d366d8bcf/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ca7bc0eb8648abc8673a971c85b777a6bc62e16", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ca7bc0eb8648abc8673a971c85b777a6bc62e16", "html_url": "https://github.com/rust-lang/rust/commit/6ca7bc0eb8648abc8673a971c85b777a6bc62e16"}, {"sha": "56d3a824e46ce9976a017ef41c318a66444da99c", "url": "https://api.github.com/repos/rust-lang/rust/commits/56d3a824e46ce9976a017ef41c318a66444da99c", "html_url": "https://github.com/rust-lang/rust/commit/56d3a824e46ce9976a017ef41c318a66444da99c"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "16f0299c18b9a21f37c0ffec6410503f1c84d2f8", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/202724cddc826f898693177c2b1d990d366d8bcf/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202724cddc826f898693177c2b1d990d366d8bcf/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=202724cddc826f898693177c2b1d990d366d8bcf", "patch": "@@ -717,6 +717,10 @@ extern \"rust-intrinsic\" {\n     /// initialize memory previous set to the result of `uninit`.\n     pub fn uninit<T>() -> T;\n \n+    /// Moves a value out of scope without running drop glue.\n+    #[cfg(not(stage0))]\n+    pub fn forget<T: ?Sized>(_: T);\n+\n     /// Reinterprets the bits of a value of one type as another type.\n     ///\n     /// Both types must have the same size. Neither the original, nor the result,"}, {"sha": "a02b5bc87c5e95b7f3364ba4efed7a17a30692c0", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/202724cddc826f898693177c2b1d990d366d8bcf/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202724cddc826f898693177c2b1d990d366d8bcf/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=202724cddc826f898693177c2b1d990d366d8bcf", "patch": "@@ -106,6 +106,7 @@\n #![feature(staged_api)]\n #![feature(stmt_expr_attributes)]\n #![feature(unboxed_closures)]\n+#![feature(unsized_locals)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n #![feature(doc_alias)]"}, {"sha": "d8eec2bd9a6a2558e9f6c7fc65fd2400fe561913", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/202724cddc826f898693177c2b1d990d366d8bcf/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202724cddc826f898693177c2b1d990d366d8bcf/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=202724cddc826f898693177c2b1d990d366d8bcf", "patch": "@@ -143,6 +143,19 @@ pub fn forget<T>(t: T) {\n     ManuallyDrop::new(t);\n }\n \n+/// Like [`forget`], but also accepts unsized values.\n+///\n+/// This function is just a shim intended to be removed when the `unsized_locals` feature gets\n+/// stabilized.\n+///\n+/// [`forget`]: fn.forget.html\n+#[inline]\n+#[cfg(not(stage0))]\n+#[unstable(feature = \"forget_unsized\", issue = \"0\")]\n+pub fn forget_unsized<T: ?Sized>(t: T) {\n+    unsafe { intrinsics::forget(t) }\n+}\n+\n /// Returns the size of a type in bytes.\n ///\n /// More specifically, this is the offset in bytes between successive elements"}, {"sha": "8f79d49b3e2b4c989625e7c58615c4cefec5a286", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/202724cddc826f898693177c2b1d990d366d8bcf/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202724cddc826f898693177c2b1d990d366d8bcf/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=202724cddc826f898693177c2b1d990d366d8bcf", "patch": "@@ -194,7 +194,7 @@ pub fn codegen_intrinsic_call(\n             return;\n         }\n         // Effectively no-ops\n-        \"uninit\" => {\n+        \"uninit\" | \"forget\" => {\n             return;\n         }\n         \"needs_drop\" => {"}, {"sha": "9aad17626f9a12b89b7e120afc5e6a1047da07a0", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/202724cddc826f898693177c2b1d990d366d8bcf/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202724cddc826f898693177c2b1d990d366d8bcf/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=202724cddc826f898693177c2b1d990d366d8bcf", "patch": "@@ -134,6 +134,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"rustc_peek\" => (1, vec![param(0)], param(0)),\n             \"init\" => (1, Vec::new(), param(0)),\n             \"uninit\" => (1, Vec::new(), param(0)),\n+            \"forget\" => (1, vec![param(0)], tcx.mk_unit()),\n             \"transmute\" => (2, vec![ param(0) ], param(1)),\n             \"move_val_init\" => {\n                 (1,"}]}