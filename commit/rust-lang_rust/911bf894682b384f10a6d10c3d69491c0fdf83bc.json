{"sha": "911bf894682b384f10a6d10c3d69491c0fdf83bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMWJmODk0NjgyYjM4NGYxMGE2ZDEwYzNkNjk0OTFjMGZkZjgzYmM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-04T01:14:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-04T01:14:57Z"}, "message": "Rollup merge of #71801 - matthewjasper:operator-subtyping, r=varkor\n\nCorrectly check comparison operator in MIR typeck\n\nThe subtyping for comparisons between pointers was reversed in MIR typeck.\nThere also wasn't a check that comparisons between numeric types had matching types.", "tree": {"sha": "cd6bd87cf1321f1d1c736b308fa29ae8d1c89c67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd6bd87cf1321f1d1c736b308fa29ae8d1c89c67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/911bf894682b384f10a6d10c3d69491c0fdf83bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJer2yTCRBK7hj4Ov3rIwAAdHIIAG/WMqYlYfV5kASUFlG320Y3\nWTdPfkkmDZAbRKmr35rrSZbutHchvt3zDuRHn94Xzp1H3E1uYo8JVSf27s9oLXEw\nSIh6o4g6Tq3Fdx+Oh6nwSqMLZW/ivRXa+GYIXNIwJIEbg1Qut8vgRBW/xW4/ik7l\nruiC9ROX/PzfPZQEMcFy/Z+l8Nr2QGdUb6oAJhfMooDHwe3meVw+ufrNPtftUoan\nanLRPlwoeYDjYQ+6mcx3F6Pcm1dJ+jHHADENPnnVXV6YAC7sCoXpNWXr0JReCaSO\nQFlrwdD5Bim/wUDLMsD8uhwOl7ii1WlTT0Gclxp8swGbNdOb2pODhCNtGf+yMMo=\n=0SIB\n-----END PGP SIGNATURE-----\n", "payload": "tree cd6bd87cf1321f1d1c736b308fa29ae8d1c89c67\nparent ccc123a1e2a525c81173d432a9b53e90498a6ab3\nparent 9e19f3a27f61596a45103c815ab4fe3f38e71272\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588554897 +0200\ncommitter GitHub <noreply@github.com> 1588554897 +0200\n\nRollup merge of #71801 - matthewjasper:operator-subtyping, r=varkor\n\nCorrectly check comparison operator in MIR typeck\n\nThe subtyping for comparisons between pointers was reversed in MIR typeck.\nThere also wasn't a check that comparisons between numeric types had matching types.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/911bf894682b384f10a6d10c3d69491c0fdf83bc", "html_url": "https://github.com/rust-lang/rust/commit/911bf894682b384f10a6d10c3d69491c0fdf83bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/911bf894682b384f10a6d10c3d69491c0fdf83bc/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccc123a1e2a525c81173d432a9b53e90498a6ab3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc123a1e2a525c81173d432a9b53e90498a6ab3", "html_url": "https://github.com/rust-lang/rust/commit/ccc123a1e2a525c81173d432a9b53e90498a6ab3"}, {"sha": "9e19f3a27f61596a45103c815ab4fe3f38e71272", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e19f3a27f61596a45103c815ab4fe3f38e71272", "html_url": "https://github.com/rust-lang/rust/commit/9e19f3a27f61596a45103c815ab4fe3f38e71272"}], "stats": {"total": 94, "additions": 50, "deletions": 44}, "files": [{"sha": "36ccc0aaa8bb490544e6e3f2cf22f5a006f5f659", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 45, "deletions": 27, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/911bf894682b384f10a6d10c3d69491c0fdf83bc/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911bf894682b384f10a6d10c3d69491c0fdf83bc/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=911bf894682b384f10a6d10c3d69491c0fdf83bc", "patch": "@@ -2290,36 +2290,54 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 right,\n             ) => {\n                 let ty_left = left.ty(body, tcx);\n-                if let ty::RawPtr(_) | ty::FnPtr(_) = ty_left.kind {\n-                    let ty_right = right.ty(body, tcx);\n-                    let common_ty = self.infcx.next_ty_var(TypeVariableOrigin {\n-                        kind: TypeVariableOriginKind::MiscVariable,\n-                        span: body.source_info(location).span,\n-                    });\n-                    self.sub_types(\n-                        common_ty,\n-                        ty_left,\n-                        location.to_locations(),\n-                        ConstraintCategory::Boring,\n-                    )\n-                    .unwrap_or_else(|err| {\n-                        bug!(\"Could not equate type variable with {:?}: {:?}\", ty_left, err)\n-                    });\n-                    if let Err(terr) = self.sub_types(\n-                        common_ty,\n-                        ty_right,\n-                        location.to_locations(),\n-                        ConstraintCategory::Boring,\n-                    ) {\n-                        span_mirbug!(\n-                            self,\n-                            rvalue,\n-                            \"unexpected comparison types {:?} and {:?} yields {:?}\",\n+                match ty_left.kind {\n+                    // Types with regions are comparable if they have a common super-type.\n+                    ty::RawPtr(_) | ty::FnPtr(_) => {\n+                        let ty_right = right.ty(body, tcx);\n+                        let common_ty = self.infcx.next_ty_var(TypeVariableOrigin {\n+                            kind: TypeVariableOriginKind::MiscVariable,\n+                            span: body.source_info(location).span,\n+                        });\n+                        self.relate_types(\n+                            common_ty,\n+                            ty::Variance::Contravariant,\n                             ty_left,\n-                            ty_right,\n-                            terr\n+                            location.to_locations(),\n+                            ConstraintCategory::Boring,\n                         )\n+                        .unwrap_or_else(|err| {\n+                            bug!(\"Could not equate type variable with {:?}: {:?}\", ty_left, err)\n+                        });\n+                        if let Err(terr) = self.relate_types(\n+                            common_ty,\n+                            ty::Variance::Contravariant,\n+                            ty_right,\n+                            location.to_locations(),\n+                            ConstraintCategory::Boring,\n+                        ) {\n+                            span_mirbug!(\n+                                self,\n+                                rvalue,\n+                                \"unexpected comparison types {:?} and {:?} yields {:?}\",\n+                                ty_left,\n+                                ty_right,\n+                                terr\n+                            )\n+                        }\n                     }\n+                    // For types with no regions we can just check that the\n+                    // both operands have the same type.\n+                    ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char | ty::Float(_)\n+                        if ty_left == right.ty(body, tcx) => {}\n+                    // Other types are compared by trait methods, not by\n+                    // `Rvalue::BinaryOp`.\n+                    _ => span_mirbug!(\n+                        self,\n+                        rvalue,\n+                        \"unexpected comparison types {:?} and {:?}\",\n+                        ty_left,\n+                        right.ty(body, tcx)\n+                    ),\n                 }\n             }\n "}, {"sha": "3c900356fab3b0bba2ab44f20d367bb0a83e28d9", "filename": "src/test/ui/nll/type-check-pointer-comparisons.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/911bf894682b384f10a6d10c3d69491c0fdf83bc/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911bf894682b384f10a6d10c3d69491c0fdf83bc/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.rs?ref=911bf894682b384f10a6d10c3d69491c0fdf83bc", "patch": "@@ -21,13 +21,13 @@ fn compare_fn_ptr<'a, 'b, 'c>(f: fn(&'c mut &'a i32), g: fn(&'c mut &'b i32)) {\n }\n \n fn compare_hr_fn_ptr<'a>(f: fn(&'a i32), g: fn(&i32)) {\n-    f == g;\n-    //~^ ERROR higher-ranked subtype error\n+    // Ideally this should compile with the operands swapped as well, but HIR\n+    // type checking prevents it (and stops compilation) for now.\n+    f == g; // OK\n }\n \n fn compare_const_fn_ptr<'a>(f: *const fn(&'a i32), g: *const fn(&i32)) {\n-    f == g;\n-    //~^ ERROR higher-ranked subtype error\n+    f == g; // OK\n }\n \n fn main() {}"}, {"sha": "f350b861eb6d2447c690d0852f9d4df910fc75ba", "filename": "src/test/ui/nll/type-check-pointer-comparisons.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/911bf894682b384f10a6d10c3d69491c0fdf83bc/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911bf894682b384f10a6d10c3d69491c0fdf83bc/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr?ref=911bf894682b384f10a6d10c3d69491c0fdf83bc", "patch": "@@ -76,17 +76,5 @@ LL |     f == g;\n \n help: `'a` and `'b` must be the same: replace one with the other\n \n-error: higher-ranked subtype error\n-  --> $DIR/type-check-pointer-comparisons.rs:24:5\n-   |\n-LL |     f == g;\n-   |     ^^^^^^\n-\n-error: higher-ranked subtype error\n-  --> $DIR/type-check-pointer-comparisons.rs:29:5\n-   |\n-LL |     f == g;\n-   |     ^^^^^^\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n "}]}