{"sha": "25de53f76842544b695f826303034fd0419a5d6a", "node_id": "C_kwDOAAsO6NoAKDI1ZGU1M2Y3Njg0MjU0NGI2OTVmODI2MzAzMDM0ZmQwNDE5YTVkNmE", "commit": {"author": {"name": "Raoul Strackx", "email": "raoul.strackx@fortanix.com", "date": "2022-08-10T08:46:27Z"}, "committer": {"name": "Raoul Strackx", "email": "raoul.strackx@fortanix.com", "date": "2022-08-16T13:01:18Z"}, "message": "Refactor copying data to userspace", "tree": {"sha": "17f08f5328cd7f99510fbf93b18c9302f7467e2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17f08f5328cd7f99510fbf93b18c9302f7467e2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25de53f76842544b695f826303034fd0419a5d6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25de53f76842544b695f826303034fd0419a5d6a", "html_url": "https://github.com/rust-lang/rust/commit/25de53f76842544b695f826303034fd0419a5d6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25de53f76842544b695f826303034fd0419a5d6a/comments", "author": {"login": "raoulstrackx", "id": 56830709, "node_id": "MDQ6VXNlcjU2ODMwNzA5", "avatar_url": "https://avatars.githubusercontent.com/u/56830709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raoulstrackx", "html_url": "https://github.com/raoulstrackx", "followers_url": "https://api.github.com/users/raoulstrackx/followers", "following_url": "https://api.github.com/users/raoulstrackx/following{/other_user}", "gists_url": "https://api.github.com/users/raoulstrackx/gists{/gist_id}", "starred_url": "https://api.github.com/users/raoulstrackx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raoulstrackx/subscriptions", "organizations_url": "https://api.github.com/users/raoulstrackx/orgs", "repos_url": "https://api.github.com/users/raoulstrackx/repos", "events_url": "https://api.github.com/users/raoulstrackx/events{/privacy}", "received_events_url": "https://api.github.com/users/raoulstrackx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "raoulstrackx", "id": 56830709, "node_id": "MDQ6VXNlcjU2ODMwNzA5", "avatar_url": "https://avatars.githubusercontent.com/u/56830709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raoulstrackx", "html_url": "https://github.com/raoulstrackx", "followers_url": "https://api.github.com/users/raoulstrackx/followers", "following_url": "https://api.github.com/users/raoulstrackx/following{/other_user}", "gists_url": "https://api.github.com/users/raoulstrackx/gists{/gist_id}", "starred_url": "https://api.github.com/users/raoulstrackx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raoulstrackx/subscriptions", "organizations_url": "https://api.github.com/users/raoulstrackx/orgs", "repos_url": "https://api.github.com/users/raoulstrackx/repos", "events_url": "https://api.github.com/users/raoulstrackx/events{/privacy}", "received_events_url": "https://api.github.com/users/raoulstrackx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14a459bf37bc19476d43e0045d078121c12d3fef", "url": "https://api.github.com/repos/rust-lang/rust/commits/14a459bf37bc19476d43e0045d078121c12d3fef", "html_url": "https://github.com/rust-lang/rust/commit/14a459bf37bc19476d43e0045d078121c12d3fef"}], "stats": {"total": 51, "additions": 32, "deletions": 19}, "files": [{"sha": "a3b90fc7d80c370cf054a098402de15ea984bcb1", "filename": "library/std/src/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/25de53f76842544b695f826303034fd0419a5d6a/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25de53f76842544b695f826303034fd0419a5d6a/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=25de53f76842544b695f826303034fd0419a5d6a", "patch": "@@ -305,6 +305,34 @@ where\n     }\n }\n \n+// Split a memory region ptr..ptr + len into three parts:\n+//   +--------+\n+//   | small0 | Chunk smaller than 8 bytes\n+//   +--------+\n+//   |   big  | Chunk 8-byte aligned, and size a multiple of 8 bytes\n+//   +--------+\n+//   | small1 | Chunk smaller than 8 bytes\n+//   +--------+\n+fn region_as_aligned_chunks(ptr: *const u8, len: usize) -> (u8, usize, u8) {\n+    let small0_size = (8 - ptr as usize % 8) as u8;\n+    let small1_size = ((len - small0_size as usize) % 8) as u8;\n+    let big_size = len - small0_size as usize - small1_size as usize;\n+\n+    (small0_size, big_size, small1_size)\n+}\n+\n+unsafe fn copy_quadwords(src: *const u8, dst: *mut u8, len: usize) {\n+    unsafe {\n+        asm!(\n+            \"rep movsq (%rsi), (%rdi)\",\n+            inout(\"rcx\") len / 8 => _,\n+            inout(\"rdi\") dst => _,\n+            inout(\"rsi\") src => _,\n+            options(att_syntax, nostack, preserves_flags)\n+        );\n+    }\n+}\n+\n /// Copies `len` bytes of data from enclave pointer `src` to userspace `dst`\n ///\n /// This function mitigates stale data vulnerabilities by ensuring all writes to untrusted memory are either:\n@@ -343,17 +371,6 @@ pub(crate) unsafe fn copy_to_userspace(src: *const u8, dst: *mut u8, len: usize)\n         }\n     }\n \n-    unsafe fn copy_aligned_quadwords_to_userspace(src: *const u8, dst: *mut u8, len: usize) {\n-        unsafe {\n-            asm!(\n-                \"rep movsq (%rsi), (%rdi)\",\n-                inout(\"rcx\") len / 8 => _,\n-                inout(\"rdi\") dst => _,\n-                inout(\"rsi\") src => _,\n-                options(att_syntax, nostack, preserves_flags)\n-            );\n-        }\n-    }\n     assert!(!src.is_null());\n     assert!(!dst.is_null());\n     assert!(is_enclave_range(src, len));\n@@ -370,7 +387,7 @@ pub(crate) unsafe fn copy_to_userspace(src: *const u8, dst: *mut u8, len: usize)\n     } else if len % 8 == 0 && dst as usize % 8 == 0 {\n         // Copying 8-byte aligned quadwords: copy quad word per quad word\n         unsafe {\n-            copy_aligned_quadwords_to_userspace(src, dst, len);\n+            copy_quadwords(src, dst, len);\n         }\n     } else {\n         // Split copies into three parts:\n@@ -381,20 +398,16 @@ pub(crate) unsafe fn copy_to_userspace(src: *const u8, dst: *mut u8, len: usize)\n         //   +--------+\n         //   | small1 | Chunk smaller than 8 bytes\n         //   +--------+\n+        let (small0_size, big_size, small1_size) = region_as_aligned_chunks(dst, len);\n \n         unsafe {\n             // Copy small0\n-            let small0_size = (8 - dst as usize % 8) as u8;\n-            let small0_src = src;\n-            let small0_dst = dst;\n-            copy_bytewise_to_userspace(small0_src as _, small0_dst, small0_size as _);\n+            copy_bytewise_to_userspace(src, dst, small0_size as _);\n \n             // Copy big\n-            let small1_size = ((len - small0_size as usize) % 8) as u8;\n-            let big_size = len - small0_size as usize - small1_size as usize;\n             let big_src = src.offset(small0_size as _);\n             let big_dst = dst.offset(small0_size as _);\n-            copy_aligned_quadwords_to_userspace(big_src as _, big_dst, big_size);\n+            copy_quadwords(big_src as _, big_dst, big_size);\n \n             // Copy small1\n             let small1_src = src.offset(big_size as isize + small0_size as isize);"}]}