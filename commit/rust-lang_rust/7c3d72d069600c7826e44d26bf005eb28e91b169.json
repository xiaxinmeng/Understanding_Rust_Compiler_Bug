{"sha": "7c3d72d069600c7826e44d26bf005eb28e91b169", "node_id": "C_kwDOAAsO6NoAKDdjM2Q3MmQwNjk2MDBjNzgyNmU0NGQyNmJmMDA1ZWIyOGU5MWIxNjk", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-10-22T07:47:12Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-11-13T00:58:47Z"}, "message": "Test core::simd works\n\nThese tests just verify some basic APIs of core::simd function, and\nguarantees that attempting to access the wrong things doesn't work.\nThe majority of tests are stochastic, and so remain upstream, but\na few deterministic tests arrive in the subtree as doc tests.", "tree": {"sha": "52110b39f2cdc7da94db6500aa8302924a107f9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52110b39f2cdc7da94db6500aa8302924a107f9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c3d72d069600c7826e44d26bf005eb28e91b169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c3d72d069600c7826e44d26bf005eb28e91b169", "html_url": "https://github.com/rust-lang/rust/commit/7c3d72d069600c7826e44d26bf005eb28e91b169", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c3d72d069600c7826e44d26bf005eb28e91b169/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39cb863253a1d7cd8371d49871a20a3244ba6211", "url": "https://api.github.com/repos/rust-lang/rust/commits/39cb863253a1d7cd8371d49871a20a3244ba6211", "html_url": "https://github.com/rust-lang/rust/commit/39cb863253a1d7cd8371d49871a20a3244ba6211"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "c68766cb9e9a8db9a0de6eb7d68ad5029c6e061d", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c3d72d069600c7826e44d26bf005eb28e91b169/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c3d72d069600c7826e44d26bf005eb28e91b169/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=7c3d72d069600c7826e44d26bf005eb28e91b169", "patch": "@@ -62,6 +62,7 @@\n #![feature(unwrap_infallible)]\n #![feature(option_result_unwrap_unchecked)]\n #![feature(result_into_ok_or_err)]\n+#![cfg_attr(not(bootstrap), feature(portable_simd))]\n #![feature(ptr_metadata)]\n #![feature(once_cell)]\n #![feature(unsized_tuple_coercion)]\n@@ -104,6 +105,8 @@ mod pattern;\n mod pin;\n mod ptr;\n mod result;\n+#[cfg(not(bootstrap))]\n+mod simd;\n mod slice;\n mod str;\n mod str_lossy;"}, {"sha": "8c11d788c67ae0d94a6cb0030cdf392ea7d334d4", "filename": "library/core/tests/simd.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7c3d72d069600c7826e44d26bf005eb28e91b169/library%2Fcore%2Ftests%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c3d72d069600c7826e44d26bf005eb28e91b169/library%2Fcore%2Ftests%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fsimd.rs?ref=7c3d72d069600c7826e44d26bf005eb28e91b169", "patch": "@@ -0,0 +1,13 @@\n+use core::simd::f32x4;\n+\n+#[test]\n+fn testing() {\n+    let x = f32x4::from_array([1.0, 1.0, 1.0, 1.0]);\n+    let y = -x;\n+\n+    let h = x * 0.5;\n+\n+    let r = y.abs();\n+    assert_eq!(x, r);\n+    assert_eq!(h, f32x4::splat(0.5));\n+}"}, {"sha": "abe460a326bb36c08f5be5c4c6b1805f063a7455", "filename": "src/test/ui/simd/libm_no_std_cant_float.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7c3d72d069600c7826e44d26bf005eb28e91b169/src%2Ftest%2Fui%2Fsimd%2Flibm_no_std_cant_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c3d72d069600c7826e44d26bf005eb28e91b169/src%2Ftest%2Fui%2Fsimd%2Flibm_no_std_cant_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Flibm_no_std_cant_float.rs?ref=7c3d72d069600c7826e44d26bf005eb28e91b169", "patch": "@@ -0,0 +1,21 @@\n+#![crate_type = \"rlib\"]\n+#![no_std]\n+#![feature(portable_simd)]\n+use core::simd::f32x4;\n+\n+// For SIMD float ops, the LLIR version which is used to implement the portable\n+// forms of them may become calls to math.h AKA libm. So, we can't guarantee\n+// we can compile them for #![no_std] crates.\n+// Someday we may solve this.\n+// Until then, this test at least guarantees these functions require std.\n+fn guarantee_no_std_nolibm_calls() -> f32x4 {\n+    let x = f32x4::from_array([0.1, 0.5, 0.6, -1.5]);\n+    let x2 = x + x;\n+    let _xc = x.ceil(); //~ ERROR E0599\n+    let _xf = x.floor(); //~ ERROR E0599\n+    let _xr = x.round(); //~ ERROR E0599\n+    let _xt = x.trunc(); //~ ERROR E0599\n+    let _xfma = x.mul_add(x, x); //~ ERROR E0599\n+    let _xsqrt = x.sqrt(); //~ ERROR E0599\n+    x2.abs() * x2\n+}"}, {"sha": "dc8638f6ab72d2d4831d10b6614d259bf2d4dfef", "filename": "src/test/ui/simd/libm_no_std_cant_float.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7c3d72d069600c7826e44d26bf005eb28e91b169/src%2Ftest%2Fui%2Fsimd%2Flibm_no_std_cant_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c3d72d069600c7826e44d26bf005eb28e91b169/src%2Ftest%2Fui%2Fsimd%2Flibm_no_std_cant_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Flibm_no_std_cant_float.stderr?ref=7c3d72d069600c7826e44d26bf005eb28e91b169", "patch": "@@ -0,0 +1,39 @@\n+error[E0599]: no method named `ceil` found for struct `Simd` in the current scope\n+  --> $DIR/libm_no_std_cant_float.rs:14:17\n+   |\n+LL |     let _xc = x.ceil();\n+   |                 ^^^^ method not found in `Simd<f32, 4_usize>`\n+\n+error[E0599]: no method named `floor` found for struct `Simd` in the current scope\n+  --> $DIR/libm_no_std_cant_float.rs:15:17\n+   |\n+LL |     let _xf = x.floor();\n+   |                 ^^^^^ method not found in `Simd<f32, 4_usize>`\n+\n+error[E0599]: no method named `round` found for struct `Simd` in the current scope\n+  --> $DIR/libm_no_std_cant_float.rs:16:17\n+   |\n+LL |     let _xr = x.round();\n+   |                 ^^^^^ method not found in `Simd<f32, 4_usize>`\n+\n+error[E0599]: no method named `trunc` found for struct `Simd` in the current scope\n+  --> $DIR/libm_no_std_cant_float.rs:17:17\n+   |\n+LL |     let _xt = x.trunc();\n+   |                 ^^^^^ method not found in `Simd<f32, 4_usize>`\n+\n+error[E0599]: no method named `mul_add` found for struct `Simd` in the current scope\n+  --> $DIR/libm_no_std_cant_float.rs:18:19\n+   |\n+LL |     let _xfma = x.mul_add(x, x);\n+   |                   ^^^^^^^ method not found in `Simd<f32, 4_usize>`\n+\n+error[E0599]: no method named `sqrt` found for struct `Simd` in the current scope\n+  --> $DIR/libm_no_std_cant_float.rs:19:20\n+   |\n+LL |     let _xsqrt = x.sqrt();\n+   |                    ^^^^ method not found in `Simd<f32, 4_usize>`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "4d7590323550c8599c0a0f94a12d20905e12f699", "filename": "src/test/ui/simd/portable-intrinsics-arent-exposed.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c3d72d069600c7826e44d26bf005eb28e91b169/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c3d72d069600c7826e44d26bf005eb28e91b169/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.rs?ref=7c3d72d069600c7826e44d26bf005eb28e91b169", "patch": "@@ -0,0 +1,8 @@\n+// May not matter, since people can use them with a nightly feature.\n+// However this tests to guarantee they don't leak out via portable_simd,\n+// and thus don't accidentally get stabilized.\n+use std::simd::intrinsics; //~ERROR E0603\n+\n+fn main() {\n+    ()\n+}"}, {"sha": "9ac73eca193454791a9d51cb84edb68b2a5c52fd", "filename": "src/test/ui/simd/portable-intrinsics-arent-exposed.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7c3d72d069600c7826e44d26bf005eb28e91b169/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c3d72d069600c7826e44d26bf005eb28e91b169/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr?ref=7c3d72d069600c7826e44d26bf005eb28e91b169", "patch": "@@ -0,0 +1,15 @@\n+error[E0603]: module `intrinsics` is private\n+  --> $DIR/portable-intrinsics-arent-exposed.rs:4:16\n+   |\n+LL | use std::simd::intrinsics;\n+   |                ^^^^^^^^^^ private module\n+   |\n+note: the module `intrinsics` is defined here\n+  --> $SRC_DIR/core/src/lib.rs:LL:COL\n+   |\n+LL |     pub use crate::core_simd::simd::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0603`."}]}