{"sha": "022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMmMxNDhmY2Q5ZTQzMzliNGI1OWRmYWVlNThjYTU5MDVkNzFiMmQ=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-09-07T09:01:45Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-06T10:19:33Z"}, "message": "Fix tests from rebase", "tree": {"sha": "78e9598de2e80351e8f50abf57ca9f6c0b74e8c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78e9598de2e80351e8f50abf57ca9f6c0b74e8c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "html_url": "https://github.com/rust-lang/rust/commit/022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1db284ecb0039798a09e53a519219c5c556c9b38", "url": "https://api.github.com/repos/rust-lang/rust/commits/1db284ecb0039798a09e53a519219c5c556c9b38", "html_url": "https://github.com/rust-lang/rust/commit/1db284ecb0039798a09e53a519219c5c556c9b38"}], "stats": {"total": 1066, "additions": 585, "deletions": 481}, "files": [{"sha": "1af56972ad083b0e67531f916ef4d39b822a7c07", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1513,7 +1513,9 @@ impl<'tcx> ExistentialProjection<'tcx> {\n     /// then this function would return a `exists T. T: Iterator` existential trait\n     /// reference.\n     pub fn trait_ref(&self, tcx: TyCtxt<'_>) -> ty::ExistentialTraitRef<'tcx> {\n-        // FIXME(generic_associated_types): truncate substs to have the right length.\n+        // FIXME(generic_associated_types): substs is the substs of the\n+        // associated type, which should be truncated to get the correct substs\n+        // for the trait.\n         let def_id = tcx.associated_item(self.item_def_id).container.id();\n         ty::ExistentialTraitRef { def_id, substs: self.substs }\n     }"}, {"sha": "96f0bedf6f1a733a8d4a41b7b9be5108751c7005", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -125,29 +125,34 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         self.infcx.commit_unconditionally(|_| {\n             let tcx = self.tcx();\n \n-            let bound_self_ty = self.infcx.shallow_resolve(obligation.self_ty());\n-            let (def_id, substs) = match *bound_self_ty.skip_binder().kind() {\n+            let trait_predicate = self.infcx.shallow_resolve(obligation.predicate);\n+            let placeholder_trait_predicate =\n+                self.infcx().replace_bound_vars_with_placeholders(&trait_predicate);\n+            let placeholder_self_ty = placeholder_trait_predicate.self_ty();\n+            let (def_id, substs) = match *placeholder_self_ty.kind() {\n                 ty::Projection(proj) => (proj.item_def_id, proj.substs),\n                 ty::Opaque(def_id, substs) => (def_id, substs),\n-                _ => bug!(\"projection candidate for unexpected type: {:?}\", bound_self_ty),\n+                _ => bug!(\"projection candidate for unexpected type: {:?}\", placeholder_self_ty),\n             };\n \n             let candidate_predicate = tcx.item_bounds(def_id)[idx].subst(tcx, substs);\n             let candidate = candidate_predicate\n                 .to_opt_poly_trait_ref()\n                 .expect(\"projection candidate is not a trait predicate\");\n-            let Normalized { value: candidate, mut obligations } = normalize_with_depth(\n+            let mut obligations = Vec::new();\n+            let candidate = normalize_with_depth_to(\n                 self,\n                 obligation.param_env,\n                 obligation.cause.clone(),\n                 obligation.recursion_depth + 1,\n                 &candidate,\n+                &mut obligations,\n             );\n \n             obligations.extend(\n                 self.infcx\n                     .at(&obligation.cause, obligation.param_env)\n-                    .sup(obligation.predicate.to_poly_trait_ref(), candidate)\n+                    .sup(placeholder_trait_predicate.trait_ref.to_poly_trait_ref(), candidate)\n                     .map(|InferOk { obligations, .. }| obligations)\n                     .unwrap_or_else(|_| {\n                         bug!(\n@@ -158,7 +163,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     }),\n             );\n \n-            if let ty::Projection(..) = bound_self_ty.skip_binder().kind() {\n+            if let ty::Projection(..) = placeholder_self_ty.kind() {\n                 for predicate in tcx.predicates_of(def_id).instantiate_own(tcx, substs).predicates {\n                     let normalized = normalize_with_depth_to(\n                         self,"}, {"sha": "a142ba58a6904a8d32e5b631a1cd15283e645d5d", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1204,22 +1204,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 if let ty::PredicateAtom::Trait(pred, _) = bound.skip_binders() {\n                     let bound = ty::Binder::bind(pred.trait_ref);\n                     if self.infcx.probe(|_| {\n-                        if let Ok(normalized_trait) = self.match_projection(\n+                        match self.match_projection(\n                             obligation,\n                             bound,\n                             placeholder_trait_predicate.trait_ref,\n                         ) {\n-                            match normalized_trait {\n-                                None => true,\n-                                Some(normalized_trait)\n-                                    if distinct_normalized_bounds.insert(normalized_trait) =>\n-                                {\n-                                    true\n-                                }\n-                                _ => false,\n+                            Ok(None) => true,\n+                            Ok(Some(normalized_trait))\n+                                if distinct_normalized_bounds.insert(normalized_trait) =>\n+                            {\n+                                true\n                             }\n-                        } else {\n-                            false\n+                            _ => false,\n                         }\n                     }) {\n                         return Some(idx);"}, {"sha": "bdb2513cc46026ad81b0123446c45cc5f6dcd8ff", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -767,7 +767,10 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<Ru\n             | ty::PredicateAtom::ClosureKind(..)\n             | ty::PredicateAtom::Subtype(..)\n             | ty::PredicateAtom::ConstEvaluatable(..)\n-            | ty::PredicateAtom::ConstEquate(..) => bug!(\"unexpected predicate {}\", &self),\n+            | ty::PredicateAtom::ConstEquate(..)\n+            | ty::PredicateAtom::TypeWellFormedFromEnv(..) => {\n+                bug!(\"unexpected predicate {}\", &self)\n+            }\n         }\n     }\n }"}, {"sha": "d319ac2cba65479823f0263ff7a87f99142abd90", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -4,13 +4,13 @@ use super::compare_method::{compare_const_impl, compare_impl_method, compare_ty_\n use super::*;\n \n use rustc_attr as attr;\n-use rustc_errors::Applicability;\n+use rustc_errors::{Applicability, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ItemKind, Node};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_infer::infer::RegionVariableOrigin;\n+use rustc_infer::infer::{RegionVariableOrigin, TyCtxtInferExt};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt, Representability};\n@@ -19,6 +19,8 @@ use rustc_session::config::EntryFnType;\n use rustc_span::symbol::sym;\n use rustc_span::{self, MultiSpan, Span};\n use rustc_target::spec::abi::Abi;\n+use rustc_trait_selection::opaque_types::InferCtxtExt as _;\n+use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n use rustc_trait_selection::traits::{self, ObligationCauseCode};\n \n pub fn check_wf_new(tcx: TyCtxt<'_>) {\n@@ -386,7 +388,9 @@ pub(super) fn check_opaque<'tcx>(\n     origin: &hir::OpaqueTyOrigin,\n ) {\n     check_opaque_for_inheriting_lifetimes(tcx, def_id, span);\n-    tcx.ensure().type_of(def_id);\n+    if tcx.type_of(def_id).references_error() {\n+        return;\n+    }\n     if check_opaque_for_cycles(tcx, def_id, substs, span, origin).is_err() {\n         return;\n     }"}, {"sha": "092dae18192e51e03100ab4b632af06fa7a3ee5a", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -704,6 +704,7 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n         hir::ItemKind::OpaqueTy(..) => {\n             tcx.ensure().generics_of(def_id);\n             tcx.ensure().predicates_of(def_id);\n+            tcx.ensure().explicit_item_bounds(def_id);\n         }\n         hir::ItemKind::TyAlias(..)\n         | hir::ItemKind::Static(..)"}, {"sha": "c1421f20a0ba23da67f9e3203b958aa58bc4cd3c", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -69,7 +69,7 @@ fn test() -> Option<Box<u32>> {\n \n     bb5: {\n         StorageDead(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _0 = <Option<Box<u32>> as Try>::from_error(move _8) -> [return: bb6, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _0 = <Option<Box<u32>> as Try>::from_error(move _8) -> [return: bb6, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n                                          // + literal: Const { ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }"}, {"sha": "a811a2c178f170877fb65f05aa07c213605258ae", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,6 +1,6 @@\n - // MIR for `id_try` before SimplifyArmIdentity\n + // MIR for `id_try` after SimplifyArmIdentity\n-\n+  \n   fn id_try(_1: std::result::Result<u8, i32>) -> std::result::Result<u8, i32> {\n       debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:23:11: 23:12\n       let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:23:34: 23:49\n@@ -29,7 +29,7 @@\n               scope 8 {\n -                 debug v => _8;           // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n +                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify-arm.rs:24:14: 24:15\n+                  let mut _12: i32;        // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n               }\n           }\n       }\n@@ -42,7 +42,7 @@\n       scope 6 {\n           debug self => _4;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n-\n+  \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n           StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n@@ -53,7 +53,7 @@\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n           switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n       }\n-\n+  \n       bb1: {\n -         StorageLive(_10);                // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n -         _10 = ((_3 as Ok).0: u8);        // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n@@ -69,11 +69,11 @@\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n-\n+  \n       bb2: {\n           unreachable;                     // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n       }\n-\n+  \n       bb3: {\n -         StorageLive(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n -         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n@@ -94,9 +94,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n-\n+  \n       bb4: {\n           return;                          // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n   }\n-\n+  "}, {"sha": "b0cc3e88f35ac2bbe82087207dfc8b53b8e62d90", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,6 +1,6 @@\n - // MIR for `id_try` before SimplifyBranchSame\n + // MIR for `id_try` after SimplifyBranchSame\n-\n+  \n   fn id_try(_1: std::result::Result<u8, i32>) -> std::result::Result<u8, i32> {\n       debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:23:11: 23:12\n       let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:23:34: 23:49\n@@ -25,7 +25,7 @@\n               }\n               scope 8 {\n                   debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify-arm.rs:24:14: 24:15\n+                  let mut _12: i32;        // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n               }\n           }\n       }\n@@ -37,7 +37,7 @@\n       scope 6 {\n           debug self => _4;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n-\n+  \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n           StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n@@ -49,28 +49,28 @@\n -         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n +         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n       }\n-\n+  \n       bb1: {\n           _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n -         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n +         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n-\n+  \n       bb2: {\n -         unreachable;                     // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n -     }\n--\n+- \n -     bb3: {\n -         _0 = move _3;                    // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n -         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n -     }\n--\n+- \n -     bb4: {\n           return;                          // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n   }\n-\n+  "}, {"sha": "73b23da5bcb66528d55385ef3179ca718852de42", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -12,19 +12,24 @@\n \n fn main() {}\n \n-trait Bar { type Assoc; }\n+trait Bar {\n+    type Assoc;\n+}\n \n trait Thing {\n     type Out;\n     fn func() -> Self::Out;\n }\n \n struct AssocNoCopy;\n-impl Bar for AssocNoCopy { type Assoc = String; }\n+impl Bar for AssocNoCopy {\n+    type Assoc = String;\n+}\n \n impl Thing for AssocNoCopy {\n     type Out = Box<dyn Bar<Assoc: Copy>>;\n     //~^ ERROR the trait bound `String: Copy` is not satisfied\n+    //~| ERROR the trait bound `String: Copy` is not satisfied\n \n     fn func() -> Self::Out {\n         Box::new(AssocNoCopy)"}, {"sha": "414d74d4786d97ce6d2da284b35b21a023ca975d", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,11 +1,15 @@\n error[E0277]: the trait bound `String: Copy` is not satisfied\n-  --> $DIR/assoc-type-eq-with-dyn-atb-fail.rs:26:28\n+  --> $DIR/assoc-type-eq-with-dyn-atb-fail.rs:30:28\n    |\n LL |     type Out = Box<dyn Bar<Assoc: Copy>>;\n    |                            ^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n+\n+error[E0277]: the trait bound `String: Copy` is not satisfied\n+  --> $DIR/assoc-type-eq-with-dyn-atb-fail.rs:30:28\n    |\n-   = note: the return type of a function must have a statically known size\n+LL |     type Out = Box<dyn Bar<Assoc: Copy>>;\n+   |                            ^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "d180de9be3bf310896f4f65b601240a691ebb9da", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -24,9 +24,9 @@ impl<'a, 'b> Lam<&'a &'b u8> for L2 {\n \n trait Case1 {\n     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n-    //~^ ERROR `<<Self as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n-    //~| ERROR `<<Self as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n-    //~| ERROR `<<Self as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n+    //~^ ERROR `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n+    //~| ERROR `<<Self as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n+    //~| ERROR `<<Self as Case1>::C as Iterator>::Item` cannot be shared between threads safely\n }\n \n pub struct S1;"}, {"sha": "e68b5b342a40c825bb146f2a96abd2bf0403eb7e", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 29, "deletions": 34, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,53 +1,48 @@\n-error[E0277]: `<<Self as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:28:5\n-   |\n-LL | /     type C: Clone + Iterator<Item:\n-LL | |         Send + Iterator<Item:\n-LL | |             for<'a> Lam<&'a u8, App:\n-LL | |                 Debug\n-LL | |             >\n-LL | |         > + Sync>;\n-   | |__________________^ `<<Self as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n-   |\n-   = help: the trait `std::iter::Iterator` is not implemented for `<<Self as Case1>::C as std::iter::Iterator>::Item`\n+error[E0277]: `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:26:5\n+   |\n+LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `<<Self as Case1>::C as Iterator>::Item`\n help: consider further restricting the associated type\n    |\n-LL | trait Case1 where <<Self as Case1>::C as std::iter::Iterator>::Item: std::iter::Iterator {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Iterator {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: `<<Self as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:23:9\n+error[E0277]: `<<Self as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:26:36\n    |\n-LL |         Send + Iterator<Item:\n-   |         ^^^^ `<<Self as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n-   |\n-  ::: $SRC_DIR/libcore/marker.rs:LL:COL\n+LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n+   |                                    ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n+   | \n+  ::: $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub unsafe auto trait Send {\n-   | -------------------------- required by this bound in `std::marker::Send`\n+   | -------------------------- required by this bound in `Send`\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `<<Self as Case1>::C as std::iter::Iterator>::Item`\n+   = help: the trait `Send` is not implemented for `<<Self as Case1>::C as Iterator>::Item`\n help: consider further restricting the associated type\n    |\n-LL | trait Case1 where <<Self as Case1>::C as std::iter::Iterator>::Item: std::marker::Send {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Send {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: `<<Self as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:13\n-   |\n-LL |         > + Sync>;\n-   |             ^^^^ `<<Self as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n+error[E0277]: `<<Self as Case1>::C as Iterator>::Item` cannot be shared between threads safely\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:26:93\n    |\n-  ::: $SRC_DIR/libcore/marker.rs:LL:COL\n+LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n+   |                                                                                             ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be shared between threads safely\n+   | \n+  ::: $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub unsafe auto trait Sync {\n-   | -------------------------- required by this bound in `std::marker::Sync`\n+   | -------------------------- required by this bound in `Sync`\n    |\n-   = help: the trait `std::marker::Sync` is not implemented for `<<Self as Case1>::C as std::iter::Iterator>::Item`\n+   = help: the trait `Sync` is not implemented for `<<Self as Case1>::C as Iterator>::Item`\n help: consider further restricting the associated type\n    |\n-LL | trait Case1 where <<Self as Case1>::C as std::iter::Iterator>::Item: std::marker::Sync {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Sync {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "23be735010bf3374d169fcd18944533ee1272b7a", "filename": "src/test/ui/associated-type-bounds/bounds-on-assoc-in-trait.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![feature(associated_type_bounds)]\n \n use std::fmt::Debug;\n@@ -18,7 +16,7 @@ impl<'a, 'b> Lam<&'a &'b u8> for L2 { type App = u8; }\n \n trait Case1 {\n     type A: Iterator<Item: Debug>;\n-    //~^ ERROR `<<Self as Case1>::A as std::iter::Iterator>::Item` doesn't implement `std::fmt::Debug`\n+    //~^ ERROR `<<Self as Case1>::A as Iterator>::Item` doesn't implement `Debug`\n \n     type B: Iterator<Item: 'static>;\n }\n@@ -35,7 +33,7 @@ impl Case1 for S1 {\n // bounds of `Out`, but trait selection can't find the bound since it applies\n // to a type other than `Self::Out`.\n pub trait Foo { type Out: Baz<Assoc: Default>; }\n-//~^ ERROR trait bound `<<Self as Foo>::Out as Baz>::Assoc: std::default::Default` is not satisfied\n+//~^ ERROR trait bound `<<Self as Foo>::Out as Baz>::Assoc: Default` is not satisfied\n pub trait Baz { type Assoc; }\n \n #[derive(Default)]"}, {"sha": "919b18632e61c1283b517432d034f092de2bca3b", "filename": "src/test/ui/associated-type-bounds/bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,35 +1,35 @@\n-error[E0277]: `<<Self as Case1>::A as std::iter::Iterator>::Item` doesn't implement `std::fmt::Debug`\n-  --> $DIR/bounds-on-assoc-in-trait.rs:20:28\n+error[E0277]: `<<Self as Case1>::A as Iterator>::Item` doesn't implement `Debug`\n+  --> $DIR/bounds-on-assoc-in-trait.rs:18:28\n    |\n LL |     type A: Iterator<Item: Debug>;\n-   |                            ^^^^^ `<<Self as Case1>::A as std::iter::Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |                            ^^^^^ `<<Self as Case1>::A as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    | \n   ::: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n    |\n LL | pub trait Debug {\n-   | --------------- required by this bound in `std::fmt::Debug`\n+   | --------------- required by this bound in `Debug`\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `<<Self as Case1>::A as std::iter::Iterator>::Item`\n+   = help: the trait `Debug` is not implemented for `<<Self as Case1>::A as Iterator>::Item`\n help: consider further restricting the associated type\n    |\n-LL | trait Case1 where <<Self as Case1>::A as std::iter::Iterator>::Item: std::fmt::Debug {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait Case1 where <<Self as Case1>::A as Iterator>::Item: Debug {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `<<Self as Foo>::Out as Baz>::Assoc: std::default::Default` is not satisfied\n-  --> $DIR/bounds-on-assoc-in-trait.rs:37:38\n+error[E0277]: the trait bound `<<Self as Foo>::Out as Baz>::Assoc: Default` is not satisfied\n+  --> $DIR/bounds-on-assoc-in-trait.rs:35:38\n    |\n LL | pub trait Foo { type Out: Baz<Assoc: Default>; }\n-   |                                      ^^^^^^^ the trait `std::default::Default` is not implemented for `<<Self as Foo>::Out as Baz>::Assoc`\n+   |                                      ^^^^^^^ the trait `Default` is not implemented for `<<Self as Foo>::Out as Baz>::Assoc`\n    | \n   ::: $SRC_DIR/core/src/default.rs:LL:COL\n    |\n LL | pub trait Default: Sized {\n-   | ------------------------ required by this bound in `std::default::Default`\n+   | ------------------------ required by this bound in `Default`\n    |\n help: consider further restricting the associated type\n    |\n-LL | pub trait Foo where <<Self as Foo>::Out as Baz>::Assoc: std::default::Default { type Out: Baz<Assoc: Default>; }\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | pub trait Foo where <<Self as Foo>::Out as Baz>::Assoc: Default { type Out: Baz<Assoc: Default>; }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "de2876d6b60b8bcdb1ce410d2473b63f9d8825ae", "filename": "src/test/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -512,7 +512,7 @@ LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:167:40\n+  --> $DIR/duplicate.rs:152:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n@@ -535,6 +535,30 @@ LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            |\n    |                            `Item` bound here first\n \n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:145:43\n+   |\n+LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n+   |                               ----------  ^^^^^^^^^^ re-bound here\n+   |                               |\n+   |                               `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:147:43\n+   |\n+LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n+   |                               ----------  ^^^^^^^^^^ re-bound here\n+   |                               |\n+   |                               `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:149:46\n+   |\n+LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n+   |                               -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                               |\n+   |                               `Item` bound here first\n+\n error: aborting due to 69 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "504c957d98753f377e5764171ce3bf3e0dceb382", "filename": "src/test/ui/associated-types/defaults-suitability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -20,7 +20,7 @@ where\n     Self::Ty: Clone,\n {\n     type Ty = NotClone;\n-    //~^ ERROR the trait bound `NotClone: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `NotClone: Clone` is not satisfied\n }\n \n // Involved type parameters must fulfill all bounds required by defaults that mention them\n@@ -85,7 +85,7 @@ where\n {\n     type Bar = Vec<Self::Baz>;\n     type Baz = T;\n-    //~^ ERROR the trait bound `T: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `T: Clone` is not satisfied\n }\n \n // This one finally works, with `Clone` bounds on all assoc. types and the type"}, {"sha": "274d09fd09c867baa47ec605af44adc05d68edc1", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,31 +1,32 @@\n-error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `NotClone: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:13:5\n    |\n LL |     type Ty: Clone = NotClone;\n    |     ^^^^^^^^^-----^^^^^^^^^^^^\n    |     |        |\n    |     |        required by this bound in `Tr::Ty`\n-   |     the trait `std::clone::Clone` is not implemented for `NotClone`\n+   |     the trait `Clone` is not implemented for `NotClone`\n \n-error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:19:5\n+error[E0277]: the trait bound `NotClone: Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:22:5\n    |\n-LL | trait Tr2 where Self::Ty: Clone {\n-   |                           ----- required by this bound in `Tr2::Ty`\n+LL |     Self::Ty: Clone,\n+   |               ----- required by this bound in `Tr2::Ty`\n+LL | {\n LL |     type Ty = NotClone;\n    |     ^^^^^--^^^^^^^^^^^^\n    |     |    |\n    |     |    required by a bound in this\n-   |     the trait `std::clone::Clone` is not implemented for `NotClone`\n+   |     the trait `Clone` is not implemented for `NotClone`\n \n-error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:25:5\n+error[E0277]: the trait bound `T: Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:28:5\n    |\n LL |     type Bar: Clone = Vec<T>;\n    |     ^^^^^^^^^^-----^^^^^^^^^^\n    |     |         |\n    |     |         required by this bound in `Foo::Bar`\n-   |     the trait `std::clone::Clone` is not implemented for `T`\n+   |     the trait `Clone` is not implemented for `T`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<T>`\n help: consider restricting type parameter `T`\n@@ -34,7 +35,7 @@ LL | trait Foo<T: Clone> {\n    |            ^^^^^^^\n \n error[E0277]: the trait bound `(): Foo<Self>` is not satisfied\n-  --> $DIR/defaults-suitability.rs:31:5\n+  --> $DIR/defaults-suitability.rs:34:5\n    |\n LL |     type Assoc: Foo<Self> = ();\n    |     ^^^^^^^^^^^^---------^^^^^^\n@@ -43,7 +44,7 @@ LL |     type Assoc: Foo<Self> = ();\n    |     the trait `Foo<Self>` is not implemented for `()`\n \n error[E0277]: the trait bound `NotClone: IsU8<NotClone>` is not satisfied\n-  --> $DIR/defaults-suitability.rs:53:5\n+  --> $DIR/defaults-suitability.rs:56:5\n    |\n LL |     Self::Assoc: IsU8<Self::Assoc>,\n    |                  ----------------- required by this bound in `D::Assoc`\n@@ -54,38 +55,38 @@ LL |     type Assoc = NotClone;\n    |     |    required by a bound in this\n    |     the trait `IsU8<NotClone>` is not implemented for `NotClone`\n \n-error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:62:5\n+error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:65:5\n    |\n LL |     type Bar: Clone = Vec<Self::Baz>;\n    |     ^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^\n    |     |         |\n    |     |         required by this bound in `Foo2::Bar`\n-   |     the trait `std::clone::Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n+   |     the trait `Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<<Self as Foo2<T>>::Baz>`\n help: consider further restricting the associated type\n    |\n LL | trait Foo2<T> where <Self as Foo2<T>>::Baz: Clone {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `<Self as Foo25<T>>::Baz: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:71:5\n+error[E0277]: the trait bound `<Self as Foo25<T>>::Baz: Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:74:5\n    |\n LL |     type Bar: Clone = Vec<Self::Baz>;\n    |     ^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^\n    |     |         |\n    |     |         required by this bound in `Foo25::Bar`\n-   |     the trait `std::clone::Clone` is not implemented for `<Self as Foo25<T>>::Baz`\n+   |     the trait `Clone` is not implemented for `<Self as Foo25<T>>::Baz`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<<Self as Foo25<T>>::Baz>`\n help: consider further restricting the associated type\n    |\n LL | trait Foo25<T: Clone> where <Self as Foo25<T>>::Baz: Clone {\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:83:5\n+error[E0277]: the trait bound `T: Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:87:5\n    |\n LL |     Self::Baz: Clone,\n    |                ----- required by this bound in `Foo3::Baz`\n@@ -94,7 +95,7 @@ LL |     type Baz = T;\n    |     ^^^^^---^^^^^\n    |     |    |\n    |     |    required by a bound in this\n-   |     the trait `std::clone::Clone` is not implemented for `T`\n+   |     the trait `Clone` is not implemented for `T`\n    |\n help: consider further restricting type parameter `T`\n    |"}, {"sha": "fa6a208b4f1baf287ab7e58c27d49b698e70d7a5", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -18,6 +18,10 @@ trait UncheckedCopy: Sized {\n     // This Output is said to be Copy. Yet we default to Self\n     // and it's accepted, not knowing if Self ineed is Copy\n     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+    //~^ ERROR the trait bound `Self: Copy` is not satisfied\n+    //~| ERROR the trait bound `Self: Deref` is not satisfied\n+    //~| ERROR cannot add-assign `&'static str` to `Self`\n+    //~| ERROR `Self` doesn't implement `std::fmt::Display`\n \n     // We said the Output type was Copy, so we can Copy it freely!\n     fn unchecked_copy(other: &Self::Output) -> Self::Output {"}, {"sha": "8e446cf051f477b8092bcf36806805869addb3bd", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 30, "deletions": 61, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,90 +1,59 @@\n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-1.rs:21:5\n+  --> $DIR/defaults-unsound-62211-1.rs:20:5\n    |\n-LL |       type Output: Copy\n-   |       ^    ------ required by a bound in this\n-   |  _____|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |         + From<Self>\n-LL | |         + Display = Self;\n-   | |___________-------_______^ `Self` cannot be formatted with the default formatter\n-   |             |\n-   |             required by this bound in `UncheckedCopy::Output`\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------^^^^^^^^\n+   |     |                                                                                |\n+   |     |                                                                                required by this bound in `UncheckedCopy::Output`\n+   |     `Self` cannot be formatted with the default formatter\n    |\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + std::fmt::Display {\n    |                            ^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-1.rs:21:5\n+error[E0277]: the trait bound `Self: Deref` is not satisfied\n+  --> $DIR/defaults-unsound-62211-1.rs:20:5\n    |\n-LL |       type Output: Copy\n-   |       ^    ------ required by a bound in this\n-   |  _____|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-LL | |\n-LL | |         + Deref<Target = str>\n-   | |           ------------------- required by this bound in `UncheckedCopy::Output`\n-LL | |         + AddAssign<&'static str>\n-LL | |         + From<Self>\n-LL | |         + Display = Self;\n-   | |_________________________^ the trait `std::ops::Deref` is not implemented for `Self`\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |                   |\n+   |     |                   required by this bound in `UncheckedCopy::Output`\n+   |     the trait `Deref` is not implemented for `Self`\n    |\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + Deref {\n    |                            ^^^^^^^\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n-  --> $DIR/defaults-unsound-62211-1.rs:21:5\n+  --> $DIR/defaults-unsound-62211-1.rs:20:5\n    |\n-LL |       type Output: Copy\n-   |       ^    ------ required by a bound in this\n-   |  _____|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |         + AddAssign<&'static str>\n-   | |           ----------------------- required by this bound in `UncheckedCopy::Output`\n-LL | |         + From<Self>\n-LL | |         + Display = Self;\n-   | |_________________________^ no implementation for `Self += &'static str`\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |                                         |\n+   |     |                                         required by this bound in `UncheckedCopy::Output`\n+   |     no implementation for `Self += &'static str`\n    |\n help: consider further restricting `Self`\n    |\n-LL | trait UncheckedCopy: Sized + std::ops::AddAssign<&'static str> {\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait UncheckedCopy: Sized + AddAssign<&'static str> {\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n-  --> $DIR/defaults-unsound-62211-1.rs:21:5\n+error[E0277]: the trait bound `Self: Copy` is not satisfied\n+  --> $DIR/defaults-unsound-62211-1.rs:20:5\n    |\n-LL |       type Output: Copy\n-   |       ^            ---- required by this bound in `UncheckedCopy::Output`\n-   |  _____|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |         + From<Self>\n-LL | |         + Display = Self;\n-   | |_________________________^ the trait `std::marker::Copy` is not implemented for `Self`\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |     ^^^^^^^^^^^^^----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |            |\n+   |     |            required by this bound in `UncheckedCopy::Output`\n+   |     the trait `Copy` is not implemented for `Self`\n    |\n help: consider further restricting `Self`\n    |\n-LL | trait UncheckedCopy: Sized + std::marker::Copy {\n-   |                            ^^^^^^^^^^^^^^^^^^^\n+LL | trait UncheckedCopy: Sized + Copy {\n+   |                            ^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c13ec776afe2bd15b79f6267900770e1f8556d29", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -18,6 +18,10 @@ trait UncheckedCopy: Sized {\n     // This Output is said to be Copy. Yet we default to Self\n     // and it's accepted, not knowing if Self ineed is Copy\n     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+    //~^ ERROR the trait bound `Self: Copy` is not satisfied\n+    //~| ERROR the trait bound `Self: Deref` is not satisfied\n+    //~| ERROR cannot add-assign `&'static str` to `Self`\n+    //~| ERROR `Self` doesn't implement `std::fmt::Display`\n \n     // We said the Output type was Copy, so we can Copy it freely!\n     fn unchecked_copy(other: &Self::Output) -> Self::Output {"}, {"sha": "93f4f497b38a2cf4ebbf3c9bbebb716d29ea71c8", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 30, "deletions": 61, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,90 +1,59 @@\n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-2.rs:21:5\n+  --> $DIR/defaults-unsound-62211-2.rs:20:5\n    |\n-LL |       type Output: Copy\n-   |       ^    ------ required by a bound in this\n-   |  _____|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |         + From<Self>\n-LL | |         + Display = Self;\n-   | |___________-------_______^ `Self` cannot be formatted with the default formatter\n-   |             |\n-   |             required by this bound in `UncheckedCopy::Output`\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------^^^^^^^^\n+   |     |                                                                                |\n+   |     |                                                                                required by this bound in `UncheckedCopy::Output`\n+   |     `Self` cannot be formatted with the default formatter\n    |\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + std::fmt::Display {\n    |                            ^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-2.rs:21:5\n+error[E0277]: the trait bound `Self: Deref` is not satisfied\n+  --> $DIR/defaults-unsound-62211-2.rs:20:5\n    |\n-LL |       type Output: Copy\n-   |       ^    ------ required by a bound in this\n-   |  _____|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-LL | |\n-LL | |         + Deref<Target = str>\n-   | |           ------------------- required by this bound in `UncheckedCopy::Output`\n-LL | |         + AddAssign<&'static str>\n-LL | |         + From<Self>\n-LL | |         + Display = Self;\n-   | |_________________________^ the trait `std::ops::Deref` is not implemented for `Self`\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |                   |\n+   |     |                   required by this bound in `UncheckedCopy::Output`\n+   |     the trait `Deref` is not implemented for `Self`\n    |\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + Deref {\n    |                            ^^^^^^^\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n-  --> $DIR/defaults-unsound-62211-2.rs:21:5\n+  --> $DIR/defaults-unsound-62211-2.rs:20:5\n    |\n-LL |       type Output: Copy\n-   |       ^    ------ required by a bound in this\n-   |  _____|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |         + AddAssign<&'static str>\n-   | |           ----------------------- required by this bound in `UncheckedCopy::Output`\n-LL | |         + From<Self>\n-LL | |         + Display = Self;\n-   | |_________________________^ no implementation for `Self += &'static str`\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |                                         |\n+   |     |                                         required by this bound in `UncheckedCopy::Output`\n+   |     no implementation for `Self += &'static str`\n    |\n help: consider further restricting `Self`\n    |\n-LL | trait UncheckedCopy: Sized + std::ops::AddAssign<&'static str> {\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait UncheckedCopy: Sized + AddAssign<&'static str> {\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n-  --> $DIR/defaults-unsound-62211-2.rs:21:5\n+error[E0277]: the trait bound `Self: Copy` is not satisfied\n+  --> $DIR/defaults-unsound-62211-2.rs:20:5\n    |\n-LL |       type Output: Copy\n-   |       ^            ---- required by this bound in `UncheckedCopy::Output`\n-   |  _____|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |         + From<Self>\n-LL | |         + Display = Self;\n-   | |_________________________^ the trait `std::marker::Copy` is not implemented for `Self`\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |     ^^^^^^^^^^^^^----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |            |\n+   |     |            required by this bound in `UncheckedCopy::Output`\n+   |     the trait `Copy` is not implemented for `Self`\n    |\n help: consider further restricting `Self`\n    |\n-LL | trait UncheckedCopy: Sized + std::marker::Copy {\n-   |                            ^^^^^^^^^^^^^^^^^^^\n+LL | trait UncheckedCopy: Sized + Copy {\n+   |                            ^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f9044c2ea1b6658a26f3c3b1a20c0d269f1218ae", "filename": "src/test/ui/associated-types/defaults-wf.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -7,9 +7,9 @@ LL |     type Ty = Vec<[u8]>;\n   ::: $SRC_DIR/alloc/src/vec.rs:LL:COL\n    |\n LL | pub struct Vec<T> {\n-   |                - required by this bound in `std::vec::Vec`\n+   |                - required by this bound in `Vec`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = help: the trait `Sized` is not implemented for `[u8]`\n \n error: aborting due to previous error\n "}, {"sha": "8d4ecac750268f82f31b1e8f1403037d0ea0d549", "filename": "src/test/ui/associated-types/issue-43924.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,17 +1,17 @@\n-error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n+error[E0277]: the trait bound `(dyn ToString + 'static): Default` is not satisfied\n   --> $DIR/issue-43924.rs:7:5\n    |\n LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n    |     ^^^^^^^^^^-------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |         |\n    |     |         required by this bound in `Foo::Out`\n-   |     the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n+   |     the trait `Default` is not implemented for `(dyn ToString + 'static)`\n \n-error[E0599]: no function or associated item named `default` found for trait object `(dyn std::string::ToString + 'static)` in the current scope\n+error[E0599]: no function or associated item named `default` found for trait object `(dyn ToString + 'static)` in the current scope\n   --> $DIR/issue-43924.rs:14:39\n    |\n LL |     assert_eq!(<() as Foo<u32>>::Out::default().to_string(), \"false\");\n-   |                                       ^^^^^^^ function or associated item not found in `(dyn std::string::ToString + 'static)`\n+   |                                       ^^^^^^^ function or associated item not found in `(dyn ToString + 'static)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "994bfd33ba42e37d2137b6035a29dee7cff67100", "filename": "src/test/ui/async-await/async-error-span.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -5,7 +5,6 @@ LL | fn get_future() -> impl Future<Output = ()> {\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not a future\n    |\n    = help: the trait `Future` is not implemented for `()`\n-   = note: the return type of a function must have a statically known size\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/async-error-span.rs:13:9"}, {"sha": "88ea7251eaf1f8f5edc55de827ad3ab49e015a57", "filename": "src/test/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -27,33 +27,18 @@ error[E0609]: no field `0` on type `impl Future`\n    |\n LL |     let _: i32 = tuple().0;\n    |                          ^\n-   |\n-help: consider awaiting before field access\n-   |\n-LL |     let _: i32 = tuple().await.0;\n-   |                         ^^^^^^\n \n error[E0609]: no field `a` on type `impl Future`\n   --> $DIR/issue-61076.rs:60:28\n    |\n LL |     let _: i32 = struct_().a;\n    |                            ^\n-   |\n-help: consider awaiting before field access\n-   |\n-LL |     let _: i32 = struct_().await.a;\n-   |                           ^^^^^^\n \n error[E0599]: no method named `method` found for opaque type `impl Future` in the current scope\n   --> $DIR/issue-61076.rs:62:15\n    |\n LL |     struct_().method();\n    |               ^^^^^^ method not found in `impl Future`\n-   |\n-help: consider awaiting before this method call\n-   |\n-LL |     struct_().await.method();\n-   |               ^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-61076.rs:69:9\n@@ -66,10 +51,6 @@ LL |         Tuple(_) => {}\n    |\n    = note: expected opaque type `impl Future`\n                    found struct `Tuple`\n-help: consider awaiting on the future\n-   |\n-LL |     match tuple().await {\n-   |                  ^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "2d46dfb7269d1f93d3582e49e5ceeb556a5327a8", "filename": "src/test/ui/async-await/issue-64130-4-async-move.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,17 +1,8 @@\n error: future cannot be sent between threads safely\n   --> $DIR/issue-64130-4-async-move.rs:15:17\n    |\n-LL |   pub fn foo() -> impl Future + Send {\n-   |                   ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n-...\n-LL | /     async move {\n-LL | |         match client.status() {\n-LL | |             200 => {\n-LL | |                 let _x = get().await;\n-...  |\n-LL | |         }\n-LL | |     }\n-   | |_____- this returned value is of type `impl Future`\n+LL | pub fn foo() -> impl Future + Send {\n+   |                 ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Any + Send + 'static)`\n note: future is not `Send` as this value is used across an await"}, {"sha": "11fca2dd8ef4c53d464bcaa40a0259540c751b15", "filename": "src/test/ui/async-await/issue-70818.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -3,9 +3,6 @@ error: future cannot be sent between threads safely\n    |\n LL | fn foo<T: Send, U>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n-LL |\n-LL |     async { (ty, ty1) }\n-   |     ------------------- this returned value is of type `impl Future`\n    |\n note: captured value is not `Send`\n   --> $DIR/issue-70818.rs:6:18"}, {"sha": "200d411b51194d0f6796f5b6edac73954f4958f4", "filename": "src/test/ui/closures/issue-41366.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -15,12 +15,12 @@ error[E0277]: the size for values of type `<u32 as T<'_>>::V` cannot be known at\n LL |     (&|_| ()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n    |        ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `<u32 as T<'_>>::V`\n+   = help: the trait `Sized` is not implemented for `<u32 as T<'_>>::V`\n    = help: unsized locals are gated as an unstable feature\n help: consider further restricting the associated type\n    |\n-LL | fn main() where <u32 as T<'_>>::V: std::marker::Sized {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn main() where <u32 as T<'_>>::V: Sized {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL |     (&|&_| ()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);"}, {"sha": "63a4df242f85f9897247a8b24d4101dd16eaeb35", "filename": "src/test/ui/conservative_impl_trait.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -5,7 +5,6 @@ LL | fn will_ice(something: &u32) -> impl Iterator<Item = &u32> {\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n-   = note: the return type of a function must have a statically known size\n \n error: aborting due to previous error\n "}, {"sha": "38be85ff8201ed77a5840269e0acacd6ef558284", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags: -Zsave-analysis\n // This is also a regression test for #69415 and the above flag is needed.\n \n@@ -15,7 +14,7 @@ impl Tr1 for S1 { type As1 = S2; }\n trait _Tr3 {\n     type A: Iterator<Item: Copy>;\n     //~^ ERROR associated type bounds are unstable\n-    //~| ERROR the trait bound `<<Self as _Tr3>::A as std::iter::Iterator>::Item: std::marker::Copy` is not satisfied\n+    //~| ERROR the trait bound `<<Self as _Tr3>::A as Iterator>::Item: Copy` is not satisfied\n \n     type B: Iterator<Item: 'static>;\n     //~^ ERROR associated type bounds are unstable"}, {"sha": "be5d35139b65c7db978aa46e1301d24f32071d65", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:16:22\n+  --> $DIR/feature-gate-associated_type_bounds.rs:15:22\n    |\n LL |     type A: Iterator<Item: Copy>;\n    |                      ^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     type A: Iterator<Item: Copy>;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:20:22\n+  --> $DIR/feature-gate-associated_type_bounds.rs:19:22\n    |\n LL |     type B: Iterator<Item: 'static>;\n    |                      ^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     type B: Iterator<Item: 'static>;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:24:20\n+  --> $DIR/feature-gate-associated_type_bounds.rs:23:20\n    |\n LL | struct _St1<T: Tr1<As1: Tr2>> {\n    |                    ^^^^^^^^\n@@ -26,7 +26,7 @@ LL | struct _St1<T: Tr1<As1: Tr2>> {\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:31:18\n+  --> $DIR/feature-gate-associated_type_bounds.rs:30:18\n    |\n LL | enum _En1<T: Tr1<As1: Tr2>> {\n    |                  ^^^^^^^^\n@@ -35,7 +35,7 @@ LL | enum _En1<T: Tr1<As1: Tr2>> {\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:38:19\n+  --> $DIR/feature-gate-associated_type_bounds.rs:37:19\n    |\n LL | union _Un1<T: Tr1<As1: Tr2>> {\n    |                   ^^^^^^^^\n@@ -44,7 +44,7 @@ LL | union _Un1<T: Tr1<As1: Tr2>> {\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:45:37\n+  --> $DIR/feature-gate-associated_type_bounds.rs:44:37\n    |\n LL | type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n    |                                     ^^^^^^^^^^\n@@ -53,7 +53,7 @@ LL | type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:48:22\n+  --> $DIR/feature-gate-associated_type_bounds.rs:47:22\n    |\n LL | fn _apit(_: impl Tr1<As1: Copy>) {}\n    |                      ^^^^^^^^^\n@@ -62,7 +62,7 @@ LL | fn _apit(_: impl Tr1<As1: Copy>) {}\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:50:26\n+  --> $DIR/feature-gate-associated_type_bounds.rs:49:26\n    |\n LL | fn _apit_dyn(_: &dyn Tr1<As1: Copy>) {}\n    |                          ^^^^^^^^^\n@@ -71,7 +71,7 @@ LL | fn _apit_dyn(_: &dyn Tr1<As1: Copy>) {}\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:53:24\n+  --> $DIR/feature-gate-associated_type_bounds.rs:52:24\n    |\n LL | fn _rpit() -> impl Tr1<As1: Copy> { S1 }\n    |                        ^^^^^^^^^\n@@ -80,7 +80,7 @@ LL | fn _rpit() -> impl Tr1<As1: Copy> { S1 }\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:56:31\n+  --> $DIR/feature-gate-associated_type_bounds.rs:55:31\n    |\n LL | fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\n    |                               ^^^^^^^^^\n@@ -89,7 +89,7 @@ LL | fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:59:23\n+  --> $DIR/feature-gate-associated_type_bounds.rs:58:23\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |                       ^^^^^^^^^\n@@ -98,7 +98,7 @@ LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:65:24\n+  --> $DIR/feature-gate-associated_type_bounds.rs:64:24\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |                        ^^^^^^^^^\n@@ -107,7 +107,7 @@ LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:72:21\n+  --> $DIR/feature-gate-associated_type_bounds.rs:71:21\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |                     ^^^^^^^^^\n@@ -116,44 +116,44 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:59:14\n+  --> $DIR/feature-gate-associated_type_bounds.rs:58:14\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |              ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:65:15\n+  --> $DIR/feature-gate-associated_type_bounds.rs:64:15\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |               ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:72:12\n+  --> $DIR/feature-gate-associated_type_bounds.rs:71:12\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |            ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n-error[E0277]: the trait bound `<<Self as _Tr3>::A as std::iter::Iterator>::Item: std::marker::Copy` is not satisfied\n-  --> $DIR/feature-gate-associated_type_bounds.rs:16:28\n+error[E0277]: the trait bound `<<Self as _Tr3>::A as Iterator>::Item: Copy` is not satisfied\n+  --> $DIR/feature-gate-associated_type_bounds.rs:15:28\n    |\n LL |     type A: Iterator<Item: Copy>;\n-   |                            ^^^^ the trait `std::marker::Copy` is not implemented for `<<Self as _Tr3>::A as std::iter::Iterator>::Item`\n+   |                            ^^^^ the trait `Copy` is not implemented for `<<Self as _Tr3>::A as Iterator>::Item`\n    | \n   ::: $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub trait Copy: Clone {\n-   | --------------------- required by this bound in `std::marker::Copy`\n+   | --------------------- required by this bound in `Copy`\n    |\n help: consider further restricting the associated type\n    |\n-LL | trait _Tr3 where <<Self as _Tr3>::A as std::iter::Iterator>::Item: std::marker::Copy {\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait _Tr3 where <<Self as _Tr3>::A as Iterator>::Item: Copy {\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 17 previous errors\n "}, {"sha": "1d2be3657ffb2b16379768d9d3a1dfa0c593ddaa", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -15,7 +15,7 @@ impl PointerFamily<u32> for Foo {\n     //~^ ERROR generic associated types are unstable\n     type Pointer2<U32> = Box<U32>;\n     //~^ ERROR generic associated types are unstable\n-    //~| ERROR the trait bound `U32: std::clone::Clone` is not satisfied\n+    //~| ERROR the trait bound `U32: Clone` is not satisfied\n }\n \n trait Bar {"}, {"sha": "266008cc0def4c268b9d129945ef4bb2c8930422", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -61,16 +61,16 @@ LL |     type Assoc where Self: Sized = Foo;\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n-error[E0277]: the trait bound `U32: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `U32: Clone` is not satisfied\n   --> $DIR/feature-gate-generic_associated_types.rs:16:5\n    |\n LL |     type Pointer2<U32> = Box<U32>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `U32`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `U32`\n    |\n help: consider restricting type parameter `U32`\n    |\n-LL |     type Pointer2<U32: std::clone::Clone> = Box<U32>;\n-   |                      ^^^^^^^^^^^^^^^^^^^\n+LL |     type Pointer2<U32: Clone> = Box<U32>;\n+   |                      ^^^^^^^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "97a4ea53af583ce28e4b428721e5232495279c7a", "filename": "src/test/ui/for/for-c-in-str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,16 +1,16 @@\n // E0277 should point exclusively at line 6, not the entire for loop span\n \n-// ignore-tidy-linelength\n-\n fn main() {\n     for c in \"asdf\" {\n         //~^ ERROR `&str` is not an iterator\n         //~| NOTE `&str` is not an iterator\n         //~| HELP the trait `Iterator` is not implemented for `&str`\n+        //~| NOTE required because of the requirements on the impl of `IntoIterator` for `&str`\n         //~| NOTE required by `into_iter`\n         //~| NOTE in this expansion of desugaring of `for` loop\n         //~| NOTE in this expansion of desugaring of `for` loop\n         //~| NOTE in this expansion of desugaring of `for` loop\n+        //~| NOTE in this expansion of desugaring of `for` loop\n         println!();\n     }\n }"}, {"sha": "18e46e1d7ded73b0320982a3b6ef3e36def7e344", "filename": "src/test/ui/for/for-c-in-str.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,10 +1,11 @@\n error[E0277]: `&str` is not an iterator\n-  --> $DIR/for-c-in-str.rs:6:14\n+  --> $DIR/for-c-in-str.rs:4:14\n    |\n LL |     for c in \"asdf\" {\n    |              ^^^^^^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = help: the trait `Iterator` is not implemented for `&str`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n    = note: required by `into_iter`\n \n error: aborting due to previous error"}, {"sha": "0d9409626897fb35ba12899221f743195f9e6529", "filename": "src/test/ui/for/for-loop-bogosity.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -5,6 +5,7 @@ LL |     for x in bogus {\n    |              ^^^^^ `MyStruct` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `MyStruct`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `MyStruct`\n    = note: required by `into_iter`\n \n error: aborting due to previous error"}, {"sha": "8e3c2f67ed165aa126f24765f021fde607cbd862", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -20,7 +20,7 @@ LL |    Pin::new(&mut gen).resume(());\n   ::: $SRC_DIR/core/src/ops/generator.rs:LL:COL\n    |\n LL | pub enum GeneratorState<Y, R> {\n-   |                         - required by this bound in `std::ops::GeneratorState`\n+   |                         - required by this bound in `GeneratorState`\n    |\n    = help: the trait `Sized` is not implemented for `str`\n "}, {"sha": "8934a07fd4e3912284abb714b57b6cecf6a76345", "filename": "src/test/ui/generic-associated-types/cross-crate-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -13,7 +13,7 @@ pub struct FooImpl;\n \n impl Foo for FooImpl {\n     type Bar = ();\n-    //~^ ERROR the trait bound `(): std::convert::AsRef<()>` is not satisfied\n+    //~^ ERROR the trait bound `(): AsRef<()>` is not satisfied\n     fn foo(&self) -> Pin<Box<dyn Future<Output = Self::Bar> + '_>> {\n         panic!()\n     }"}, {"sha": "d96c5f4540ef5f3ac0043104bf830a6bd637d501", "filename": "src/test/ui/generic-associated-types/cross-crate-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `(): std::convert::AsRef<()>` is not satisfied\n+error[E0277]: the trait bound `(): AsRef<()>` is not satisfied\n   --> $DIR/cross-crate-bounds.rs:15:5\n    |\n LL |     type Bar = ();\n-   |     ^^^^^^^^^^^^^^ the trait `std::convert::AsRef<()>` is not implemented for `()`\n+   |     ^^^^^^^^^^^^^^ the trait `AsRef<()>` is not implemented for `()`\n    | \n   ::: $DIR/auxiliary/foo_defn.rs:6:15\n    |"}, {"sha": "645d292714562213ebc4ea08c005f025656d3ef8", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -24,8 +24,25 @@ note: but lifetime parameter must outlive the lifetime `'a` as defined on the as\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n    |            ^^\n \n+error[E0478]: lifetime bound not satisfied\n+  --> $DIR/impl_bounds.rs:17:5\n+   |\n+LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lifetime parameter instantiated with the lifetime `'a` as defined on the associated item at 17:12\n+  --> $DIR/impl_bounds.rs:17:12\n+   |\n+LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n+   |            ^^\n+note: but lifetime parameter must outlive the lifetime `'b` as defined on the associated item at 17:16\n+  --> $DIR/impl_bounds.rs:17:16\n+   |\n+LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n+   |                ^^\n+\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/impl_bounds.rs:19:5\n+  --> $DIR/impl_bounds.rs:20:5\n    |\n LL |     type C where Self: Copy = String;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`"}, {"sha": "0cd676a9b37f3f9e3c69747846c047538929abd6", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -43,7 +43,7 @@ impl<T> Bar for T where T: Foo {\n     // can use the bound on `Foo::Item` for this, but that requires\n     // `wf(<T as Foo>::Item)`, which is an invalid cycle.\n     type Assoc = OnlySized<<T as Foo>::Item>;\n-    //~^ ERROR overflow evaluating the requirement `<T as Foo>::Item: std::marker::Sized`\n+    //~^ ERROR overflow evaluating the requirement `<T as Foo>::Item: Sized`\n }\n \n fn foo<T: Print>() {"}, {"sha": "d27e46f6836df9cf5483e53a07d5599732770704", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle-generic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -7,7 +7,7 @@ LL | #![feature(generic_associated_types)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n-error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: std::marker::Sized`\n+error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n   --> $DIR/projection-bound-cycle-generic.rs:45:5\n    |\n LL | struct OnlySized<T> where T: Sized { f: T }"}, {"sha": "5043fe5c08f515d238611c6e838d7a85fbde6162", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -45,7 +45,7 @@ impl<T> Bar for T where T: Foo {\n     // can use the bound on `Foo::Item` for this, but that requires\n     // `wf(<T as Foo>::Item)`, which is an invalid cycle.\n     type Assoc = OnlySized<<T as Foo>::Item>;\n-    //~^ ERROR overflow evaluating the requirement `<T as Foo>::Item: std::marker::Sized`\n+    //~^ ERROR overflow evaluating the requirement `<T as Foo>::Item: Sized`\n }\n \n fn foo<T: Print>() {"}, {"sha": "400b664f97ca9401b097ec69830108a8590a8db2", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -7,7 +7,7 @@ LL | #![feature(generic_associated_types)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n-error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: std::marker::Sized`\n+error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n   --> $DIR/projection-bound-cycle.rs:47:5\n    |\n LL | struct OnlySized<T> where T: Sized { f: T }"}, {"sha": "58c5ee45051af2159fcfd9994ccc2ec5d69544cc", "filename": "src/test/ui/impl-trait/issue-55872-2.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -3,8 +3,6 @@ error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n    |\n LL |     type E = impl std::marker::Copy;\n    |              ^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n-   |\n-   = note: the return type of a function must have a statically known size\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n   --> $DIR/issue-55872-2.rs:15:28"}, {"sha": "2f630c2c9ad71a2fafc2b61376d5493bdd011585", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -7,7 +7,7 @@ LL | #![feature(impl_trait_in_bindings)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n-error[E0282]: type annotations needed for `impl std::future::Future`\n+error[E0282]: type annotations needed for `impl Future`\n   --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:13:20\n    |\n LL |     let fut = async {"}, {"sha": "bbcdd3e37a96ef141c6b7dc1800362396c1b0a53", "filename": "src/test/ui/issues-71798.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues-71798.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues-71798.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues-71798.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -11,7 +11,6 @@ LL | fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `u32` is not a future\n    |\n    = help: the trait `Future` is not implemented for `u32`\n-   = note: the return type of a function must have a statically known size\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9940f43cc44404ce631f3d092015f4038da9edb5", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -4,9 +4,9 @@ error[E0277]: the size for values of type `dyn Iterator<Item = &'a mut u8>` cann\n LL |     for item in *things { *item = 0 }\n    |                 ^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `dyn std::iter::Iterator<Item = &'a mut u8>`\n-   = note: required because of the requirements on the impl of `std::iter::IntoIterator` for `dyn std::iter::Iterator<Item = &'a mut u8>`\n-   = note: required by `std::iter::IntoIterator::into_iter`\n+   = help: the trait `Sized` is not implemented for `dyn Iterator<Item = &'a mut u8>`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `dyn Iterator<Item = &'a mut u8>`\n+   = note: required by `into_iter`\n \n error: aborting due to previous error\n "}, {"sha": "bcfb6b70b2e5f3c21d9e5645581876a4e2aee853", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -7,14 +7,8 @@ LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher\n note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 28:5...\n   --> $DIR/issue-20831-debruijn.rs:28:5\n    |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |         //\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^\n+LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the impl at 26:6...\n   --> $DIR/issue-20831-debruijn.rs:26:6\n    |"}, {"sha": "7ed04519b69caa15b341c285d5d3b867174e68a8", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,4 +1,4 @@\n-error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: std::marker::Sized`\n+error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Sized`\n   --> $DIR/issue-23122-2.rs:8:5\n    |\n LL |     type Next = <GetNext<T::Next> as Next>::Next;"}, {"sha": "4c927a0cb458f8c471b52398a0a024de39b5350c", "filename": "src/test/ui/issues/issue-28098.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -13,9 +13,9 @@ error[E0277]: `bool` is not an iterator\n LL |     for _ in false {}\n    |              ^^^^^ `bool` is not an iterator\n    |\n-   = help: the trait `std::iter::Iterator` is not implemented for `bool`\n-   = note: required because of the requirements on the impl of `std::iter::IntoIterator` for `bool`\n-   = note: required by `std::iter::IntoIterator::into_iter`\n+   = help: the trait `Iterator` is not implemented for `bool`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n+   = note: required by `into_iter`\n \n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:9:28\n@@ -59,6 +59,7 @@ LL |     for _ in false {}\n    |              ^^^^^ `bool` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `bool`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n    = note: required by `into_iter`\n \n error[E0277]: `()` is not an iterator"}, {"sha": "e91dae08b3a331b36eeee730681efd1c3f6fc6a0", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -15,9 +15,9 @@ LL |     for _ in HashMap::new().iter().cloned() {}\n    |\n    = note:  expected tuple `(&_, &_)`\n            found reference `&_`\n-   = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::iter::Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n-   = note: required because of the requirements on the impl of `std::iter::IntoIterator` for `std::iter::Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n-   = note: required by `std::iter::IntoIterator::into_iter`\n+   = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n+   = note: required by `into_iter`\n \n error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as Iterator>::Item == &_`\n   --> $DIR/issue-33941.rs:4:14\n@@ -28,6 +28,7 @@ LL |     for _ in HashMap::new().iter().cloned() {}\n    = note:  expected tuple `(&_, &_)`\n            found reference `&_`\n    = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n+   = note: required by `std::iter::Iterator::next`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "94c53216f50ac0f77560a4877b5c6223c824101d", "filename": "src/test/ui/issues/issue-41139.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-41139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-41139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41139.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,10 +1,12 @@\n trait Trait {}\n \n-fn get_function<'a>() -> &'a dyn Fn() -> dyn Trait { panic!(\"\") }\n+fn get_function<'a>() -> &'a dyn Fn() -> dyn Trait {\n+    panic!(\"\")\n+}\n \n fn main() {\n     // This isn't great. The issue here is that `dyn Trait` is not sized, so\n     // `dyn Fn() -> dyn Trait` is not well-formed.\n-    let t : &dyn Trait = &get_function()();\n-    //~^ ERROR expected function, found `&dyn std::ops::Fn() -> (dyn Trait + 'static)`\n+    let t: &dyn Trait = &get_function()();\n+    //~^ ERROR expected function, found `&dyn Fn() -> (dyn Trait + 'static)`\n }"}, {"sha": "48b22bca20f067444040cd73b4c487343e31e8ee", "filename": "src/test/ui/issues/issue-41139.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-41139.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-41139.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41139.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,13 +1,13 @@\n-error[E0618]: expected function, found `&dyn std::ops::Fn() -> (dyn Trait + 'static)`\n-  --> $DIR/issue-41139.rs:8:27\n+error[E0618]: expected function, found `&dyn Fn() -> (dyn Trait + 'static)`\n+  --> $DIR/issue-41139.rs:10:26\n    |\n-LL | fn get_function<'a>() -> &'a dyn Fn() -> dyn Trait { panic!(\"\") }\n-   | ----------------------------------------------------------------- `get_function` defined here returns `&dyn std::ops::Fn() -> (dyn Trait + 'static)`\n+LL | fn get_function<'a>() -> &'a dyn Fn() -> dyn Trait {\n+   | -------------------------------------------------- `get_function` defined here returns `&dyn Fn() -> (dyn Trait + 'static)`\n ...\n-LL |     let t : &dyn Trait = &get_function()();\n-   |                           ^^^^^^^^^^^^^^--\n-   |                           |\n-   |                           call expression requires function\n+LL |     let t: &dyn Trait = &get_function()();\n+   |                          ^^^^^^^^^^^^^^--\n+   |                          |\n+   |                          call expression requires function\n \n error: aborting due to previous error\n "}, {"sha": "d5105ae3b58157bf3731a6edb0879715198376a8", "filename": "src/test/ui/issues/issue-43784-associated-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,11 +1,11 @@\n-error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/issue-43784-associated-type.rs:14:5\n    |\n LL |     type Assoc: Partial<Self>;\n    |                 ------------- required by this bound in `Complete::Assoc`\n ...\n LL |     type Assoc = T;\n-   |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |     ^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "650570b6471eb13266ce99e8273e68350eaaf272", "filename": "src/test/ui/issues/issue-60283.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -24,11 +24,11 @@ LL |     foo((), drop)\n LL | pub fn drop<T>(_x: T) {}\n    |             - required by this bound in `std::mem::drop`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `<() as Trait<'_>>::Item`\n+   = help: the trait `Sized` is not implemented for `<() as Trait<'_>>::Item`\n help: consider further restricting the associated type\n    |\n-LL | fn main() where <() as Trait<'_>>::Item: std::marker::Sized {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn main() where <() as Trait<'_>>::Item: Sized {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "601983a6153fd736e2ca2dd7a7103bf91dcdc78f", "filename": "src/test/ui/iterators/array-of-ranges.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -6,6 +6,7 @@ LL |     for _ in [0..1] {}\n    |\n    = help: the trait `Iterator` is not implemented for `[std::ops::Range<{integer}>; 1]`\n    = note: `[start..end]` is an array of one `Range`; you might have meant to have a `Range` without the brackets: `start..end`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[std::ops::Range<{integer}>; 1]`\n    = note: required by `into_iter`\n \n error[E0277]: `[RangeInclusive<{integer}>; 1]` is not an iterator\n@@ -16,6 +17,7 @@ LL |     for _ in [0..=1] {}\n    |\n    = help: the trait `Iterator` is not implemented for `[RangeInclusive<{integer}>; 1]`\n    = note: arrays are not iterators, but slices like the following are: `&[1, 2, 3]`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[RangeInclusive<{integer}>; 1]`\n    = note: required by `into_iter`\n \n error[E0277]: `[RangeFrom<{integer}>; 1]` is not an iterator\n@@ -26,6 +28,7 @@ LL |     for _ in [0..] {}\n    |\n    = help: the trait `Iterator` is not implemented for `[RangeFrom<{integer}>; 1]`\n    = note: arrays are not iterators, but slices like the following are: `&[1, 2, 3]`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[RangeFrom<{integer}>; 1]`\n    = note: required by `into_iter`\n \n error[E0277]: `[RangeTo<{integer}>; 1]` is not an iterator\n@@ -36,6 +39,7 @@ LL |     for _ in [..1] {}\n    |\n    = help: the trait `Iterator` is not implemented for `[RangeTo<{integer}>; 1]`\n    = note: arrays are not iterators, but slices like the following are: `&[1, 2, 3]`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[RangeTo<{integer}>; 1]`\n    = note: required by `into_iter`\n \n error[E0277]: `[RangeToInclusive<{integer}>; 1]` is not an iterator\n@@ -46,6 +50,7 @@ LL |     for _ in [..=1] {}\n    |\n    = help: the trait `Iterator` is not implemented for `[RangeToInclusive<{integer}>; 1]`\n    = note: arrays are not iterators, but slices like the following are: `&[1, 2, 3]`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[RangeToInclusive<{integer}>; 1]`\n    = note: required by `into_iter`\n \n error[E0277]: `[std::ops::Range<{integer}>; 1]` is not an iterator\n@@ -56,6 +61,7 @@ LL |     for _ in [start..end] {}\n    |\n    = help: the trait `Iterator` is not implemented for `[std::ops::Range<{integer}>; 1]`\n    = note: `[start..end]` is an array of one `Range`; you might have meant to have a `Range` without the brackets: `start..end`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[std::ops::Range<{integer}>; 1]`\n    = note: required by `into_iter`\n \n error[E0277]: `[std::ops::Range<{integer}>; 1]` is not an iterator\n@@ -66,6 +72,7 @@ LL |     for _ in array_of_range {}\n    |\n    = help: the trait `Iterator` is not implemented for `[std::ops::Range<{integer}>; 1]`\n    = note: `[start..end]` is an array of one `Range`; you might have meant to have a `Range` without the brackets: `start..end`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[std::ops::Range<{integer}>; 1]`\n    = note: required by `into_iter`\n \n error[E0277]: `[std::ops::Range<{integer}>; 2]` is not an iterator\n@@ -76,6 +83,7 @@ LL |     for _ in [0..1, 2..3] {}\n    |\n    = help: the trait `Iterator` is not implemented for `[std::ops::Range<{integer}>; 2]`\n    = note: arrays are not iterators, but slices like the following are: `&[1, 2, 3]`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[std::ops::Range<{integer}>; 2]`\n    = note: required by `into_iter`\n \n error[E0277]: `[RangeInclusive<{integer}>; 1]` is not an iterator\n@@ -86,6 +94,7 @@ LL |     for _ in [0..=1] {}\n    |\n    = help: the trait `Iterator` is not implemented for `[RangeInclusive<{integer}>; 1]`\n    = note: arrays are not iterators, but slices like the following are: `&[1, 2, 3]`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[RangeInclusive<{integer}>; 1]`\n    = note: required by `into_iter`\n \n error: aborting due to 9 previous errors"}, {"sha": "68c6de5493f1343bfbf8b14f93b566b601780a60", "filename": "src/test/ui/iterators/array.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fiterators%2Farray.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fiterators%2Farray.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -6,6 +6,7 @@ LL |     for _ in [1, 2] {}\n    |\n    = help: the trait `Iterator` is not implemented for `[{integer}; 2]`\n    = note: arrays are not iterators, but slices like the following are: `&[1, 2, 3]`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[{integer}; 2]`\n    = note: required by `into_iter`\n \n error[E0277]: `[{integer}; 2]` is not an iterator\n@@ -16,6 +17,7 @@ LL |     for _ in x {}\n    |\n    = help: the trait `Iterator` is not implemented for `[{integer}; 2]`\n    = note: arrays are not iterators, but slices like the following are: `&[1, 2, 3]`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[{integer}; 2]`\n    = note: required by `into_iter`\n \n error[E0277]: `[{float}; 2]` is not an iterator\n@@ -26,6 +28,7 @@ LL |     for _ in [1.0, 2.0] {}\n    |\n    = help: the trait `Iterator` is not implemented for `[{float}; 2]`\n    = note: arrays are not iterators, but slices like the following are: `&[1, 2, 3]`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[{float}; 2]`\n    = note: required by `into_iter`\n \n error: aborting due to 3 previous errors"}, {"sha": "e31ee59785c8b7ff48691be11a61a3fe184b661a", "filename": "src/test/ui/iterators/integral.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -6,6 +6,7 @@ LL |     for _ in 42 {}\n    |\n    = help: the trait `Iterator` is not implemented for `{integer}`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `{integer}`\n    = note: required by `into_iter`\n \n error[E0277]: `u8` is not an iterator\n@@ -16,6 +17,7 @@ LL |     for _ in 42 as u8 {}\n    |\n    = help: the trait `Iterator` is not implemented for `u8`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `u8`\n    = note: required by `into_iter`\n \n error[E0277]: `i8` is not an iterator\n@@ -26,6 +28,7 @@ LL |     for _ in 42 as i8 {}\n    |\n    = help: the trait `Iterator` is not implemented for `i8`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `i8`\n    = note: required by `into_iter`\n \n error[E0277]: `u16` is not an iterator\n@@ -36,6 +39,7 @@ LL |     for _ in 42 as u16 {}\n    |\n    = help: the trait `Iterator` is not implemented for `u16`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `u16`\n    = note: required by `into_iter`\n \n error[E0277]: `i16` is not an iterator\n@@ -46,6 +50,7 @@ LL |     for _ in 42 as i16 {}\n    |\n    = help: the trait `Iterator` is not implemented for `i16`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `i16`\n    = note: required by `into_iter`\n \n error[E0277]: `u32` is not an iterator\n@@ -56,6 +61,7 @@ LL |     for _ in 42 as u32 {}\n    |\n    = help: the trait `Iterator` is not implemented for `u32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `u32`\n    = note: required by `into_iter`\n \n error[E0277]: `i32` is not an iterator\n@@ -66,6 +72,7 @@ LL |     for _ in 42 as i32 {}\n    |\n    = help: the trait `Iterator` is not implemented for `i32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `i32`\n    = note: required by `into_iter`\n \n error[E0277]: `u64` is not an iterator\n@@ -76,6 +83,7 @@ LL |     for _ in 42 as u64 {}\n    |\n    = help: the trait `Iterator` is not implemented for `u64`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `u64`\n    = note: required by `into_iter`\n \n error[E0277]: `i64` is not an iterator\n@@ -86,6 +94,7 @@ LL |     for _ in 42 as i64 {}\n    |\n    = help: the trait `Iterator` is not implemented for `i64`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `i64`\n    = note: required by `into_iter`\n \n error[E0277]: `usize` is not an iterator\n@@ -96,6 +105,7 @@ LL |     for _ in 42 as usize {}\n    |\n    = help: the trait `Iterator` is not implemented for `usize`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `usize`\n    = note: required by `into_iter`\n \n error[E0277]: `isize` is not an iterator\n@@ -106,6 +116,7 @@ LL |     for _ in 42 as isize {}\n    |\n    = help: the trait `Iterator` is not implemented for `isize`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `isize`\n    = note: required by `into_iter`\n \n error[E0277]: `{float}` is not an iterator\n@@ -115,6 +126,7 @@ LL |     for _ in 42.0 {}\n    |              ^^^^ `{float}` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `{float}`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `{float}`\n    = note: required by `into_iter`\n \n error: aborting due to 12 previous errors"}, {"sha": "4678bafd196b57c8b0124dd52adb975b371984da", "filename": "src/test/ui/iterators/ranges.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fiterators%2Franges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fiterators%2Franges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Franges.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -5,6 +5,7 @@ LL |     for _ in ..10 {}\n    |              ^^^^ `RangeTo<{integer}>` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `RangeTo<{integer}>`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `RangeTo<{integer}>`\n    = note: required by `into_iter`\n \n error[E0277]: `RangeToInclusive<{integer}>` is not an iterator\n@@ -14,6 +15,7 @@ LL |     for _ in ..=10 {}\n    |              ^^^^^ `RangeToInclusive<{integer}>` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `RangeToInclusive<{integer}>`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `RangeToInclusive<{integer}>`\n    = note: required by `into_iter`\n \n error: aborting due to 2 previous errors"}, {"sha": "1653006682427736a5e0a889248ebd0d8f06acfe", "filename": "src/test/ui/iterators/string.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -5,6 +5,7 @@ LL |     for _ in \"\".to_owned() {}\n    |              ^^^^^^^^^^^^^ `String` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `String`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n    = note: required by `into_iter`\n \n error[E0277]: `&str` is not an iterator\n@@ -14,6 +15,7 @@ LL |     for _ in \"\" {}\n    |              ^^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = help: the trait `Iterator` is not implemented for `&str`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n    = note: required by `into_iter`\n \n error: aborting due to 2 previous errors"}, {"sha": "fe9c113710c3c09f71508f7d0a14ff50977dbcdf", "filename": "src/test/ui/parser/struct-literal-in-for.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -24,6 +24,7 @@ LL | |     }.hi() {\n    | |__________^ `bool` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `bool`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n    = note: required by `into_iter`\n \n error: aborting due to 2 previous errors"}, {"sha": "fba72c13170feafd8a227547155f3134fb4c1b3f", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -21,18 +21,14 @@ mod m {\n     // \"Private-in-public in associated types is hard error\" in RFC 2145\n     // applies only to the aliased types, not bounds.\n     pub trait PubTr {\n+        type Alias1: PrivTr;\n         //~^ WARN private trait `PrivTr` in public interface\n         //~| WARN this was previously accepted\n-        //~| WARN private type `Priv` in public interface\n-        //~| WARN private type `Priv` in public interface\n-        //~| WARN this was previously accepted\n-        //~| WARN this was previously accepted\n-        type Alias1: PrivTr;\n         type Alias2: PubTrAux1<Priv> = u8;\n-        //~^ WARN private type `m::Priv` in public interface\n+        //~^ WARN private type `Priv` in public interface\n         //~| WARN this was previously accepted\n         type Alias3: PubTrAux2<A = Priv> = u8;\n-        //~^ WARN private type `m::Priv` in public interface\n+        //~^ WARN private type `Priv` in public interface\n         //~| WARN this was previously accepted\n \n         type Alias4 = Priv;"}, {"sha": "430be143f918778a5839f8dfbada510cdaab2ec7", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -8,7 +8,7 @@ LL |         type A = Priv;\n    |         ^^^^^^^^^^^^^^ can't leak private type\n \n warning: private trait `PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-assoc-ty.rs:23:5\n+  --> $DIR/private-in-public-assoc-ty.rs:24:9\n    |\n LL |         type Alias1: PrivTr;\n    |         ^^^^^^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL |         type Alias1: PrivTr;\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:23:5\n+  --> $DIR/private-in-public-assoc-ty.rs:27:9\n    |\n LL |         type Alias2: PubTrAux1<Priv> = u8;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -27,7 +27,7 @@ LL |         type Alias2: PubTrAux1<Priv> = u8;\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:23:5\n+  --> $DIR/private-in-public-assoc-ty.rs:30:9\n    |\n LL |         type Alias3: PubTrAux2<A = Priv> = u8;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f926eee9d92b282deddff6f52ff1437bc6edb05e", "filename": "src/test/ui/privacy/pub-priv-dep/pub-priv1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -32,9 +32,8 @@ impl PublicType {\n \n pub trait MyPubTrait {\n     type Foo: OtherTrait;\n-    //~^ ERROR trait `priv_dep::OtherTrait` from private dependency 'priv_dep' in public interface\n }\n-//~^^^ ERROR trait `OtherTrait` from private dependency 'priv_dep' in public interface\n+//~^^ ERROR trait `OtherTrait` from private dependency 'priv_dep' in public interface\n \n pub struct AllowedPrivType {\n     #[allow(exported_private_dependencies)]"}, {"sha": "e6b4d33f10316e4ee36e8644e0de76f4f9a2a819", "filename": "src/test/ui/privacy/pub-priv-dep/pub-priv1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -17,7 +17,7 @@ LL |     pub fn pub_fn(param: OtherType) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: trait `OtherTrait` from private dependency 'priv_dep' in public interface\n-  --> $DIR/pub-priv1.rs:33:1\n+  --> $DIR/pub-priv1.rs:34:5\n    |\n LL |     type Foo: OtherTrait;\n    |     ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "381959b7ae4cda8b497da308bf3c35ae7b7042eb", "filename": "src/test/ui/question-mark-type-infer.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -4,7 +4,8 @@ error[E0283]: type annotations needed\n LL |     l.iter().map(f).collect()?\n    |                     ^^^^^^^ cannot infer type\n    |\n-   = note: cannot satisfy `<_ as Try>::Ok == _`\n+   = note: cannot satisfy `_: Try`\n+   = note: required by `into_result`\n help: consider specifying the type argument in the method call\n    |\n LL |     l.iter().map(f).collect::<B>()?"}, {"sha": "2cebffec990f69177bf04e22d444b57824682c25", "filename": "src/test/ui/range/range-1.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-1.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -11,13 +11,15 @@ LL |     for i in false..true {}\n    |              ^^^^^^^^^^^ the trait `Step` is not implemented for `bool`\n    |\n    = note: required because of the requirements on the impl of `Iterator` for `std::ops::Range<bool>`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `std::ops::Range<bool>`\n+   = note: required by `into_iter`\n \n error[E0277]: the size for values of type `[{integer}]` cannot be known at compilation time\n   --> $DIR/range-1.rs:14:17\n    |\n LL |     let range = *arr..;\n    |                 ^^^^^^ doesn't have a size known at compile-time\n-   |\n+   | \n   ::: $SRC_DIR/core/src/ops/range.rs:LL:COL\n    |\n LL | pub struct RangeFrom<Idx> {"}, {"sha": "ddb2b31ce10959540a652fac8f6caa3f5db9cb97", "filename": "src/test/ui/regions/regions-normalize-in-where-clause-list.stderr", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -4,8 +4,9 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL | / fn bar<'a, 'b>()\n LL | |\n LL | |\n-LL | |     where <() as Project<'a, 'b>>::Item : Eq\n-   | |____________________________________________^\n+LL | | where\n+LL | |     <() as Project<'a, 'b>>::Item: Eq,\n+   | |______________________________________^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 24:8...\n   --> $DIR/regions-normalize-in-where-clause-list.rs:24:8\n@@ -23,43 +24,14 @@ note: ...so that the types are compatible\n LL | / fn bar<'a, 'b>()\n LL | |\n LL | |\n-LL | |     where <() as Project<'a, 'b>>::Item : Eq\n-   | |____________________________________________^\n+LL | | where\n+LL | |     <() as Project<'a, 'b>>::Item: Eq,\n+   | |______________________________________^\n    = note: expected `Project<'a, 'b>`\n               found `Project<'_, '_>`\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/regions-normalize-in-where-clause-list.rs:22:1\n-   |\n-LL | / fn bar<'a, 'b>()\n-LL | |\n-LL | |\n-LL | |     where <() as Project<'a, 'b>>::Item : Eq\n-   | |____________________________________________^\n-   |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 22:8...\n-  --> $DIR/regions-normalize-in-where-clause-list.rs:22:8\n-   |\n-LL | fn bar<'a, 'b>()\n-   |        ^^\n-note: ...but the lifetime must also be valid for the lifetime `'b` as defined on the function body at 22:12...\n-  --> $DIR/regions-normalize-in-where-clause-list.rs:22:12\n-   |\n-LL | fn bar<'a, 'b>()\n-   |            ^^\n-note: ...so that the types are compatible\n-  --> $DIR/regions-normalize-in-where-clause-list.rs:22:1\n-   |\n-LL | / fn bar<'a, 'b>()\n-LL | |\n-LL | |\n-LL | |     where <() as Project<'a, 'b>>::Item : Eq\n-   | |____________________________________________^\n-   = note: expected `Project<'a, 'b>`\n-              found `Project<'_, '_>`\n-\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/regions-normalize-in-where-clause-list.rs:22:4\n+  --> $DIR/regions-normalize-in-where-clause-list.rs:24:4\n    |\n LL | fn bar<'a, 'b>()\n    |    ^^^"}, {"sha": "4aa0ad219cf25fc1c26e03255af628b6f9fdb4c3", "filename": "src/test/ui/suggestions/suggest-remove-refs-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -8,6 +8,7 @@ LL |     for (i, _) in &v.iter().enumerate() {\n    |                   help: consider removing the leading `&`-reference\n    |\n    = help: the trait `Iterator` is not implemented for `&Enumerate<std::slice::Iter<'_, {integer}>>`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required by `into_iter`\n \n error: aborting due to previous error"}, {"sha": "15c4b7fcb8b3b089ba3950c18a06c84aec08b08d", "filename": "src/test/ui/suggestions/suggest-remove-refs-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -8,6 +8,7 @@ LL |     for (i, _) in & & & & &v.iter().enumerate() {\n    |                   help: consider removing 5 leading `&`-references\n    |\n    = help: the trait `Iterator` is not implemented for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required by `into_iter`\n \n error: aborting due to previous error"}, {"sha": "0bd6d956aff97196e00bb9d17151f98feeba0814", "filename": "src/test/ui/suggestions/suggest-remove-refs-3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -12,6 +12,7 @@ LL | |          .enumerate() {\n    | |_____________________^ `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n+   = note: required because of the requirements on the impl of `IntoIterator` for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required by `into_iter`\n \n error: aborting due to previous error"}, {"sha": "b1f124c7ea26aedbb3774e02d6d8f99ba2f4d6e1", "filename": "src/test/ui/traits/check-trait-object-bounds-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-1.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -10,5 +10,5 @@ fn f<T: X + ?Sized>() {\n \n fn main() {\n     f::<dyn X<Y = str>>();\n-    //~^ ERROR the trait bound `str: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `str: Clone` is not satisfied\n }"}, {"sha": "170ed6eacfd4174c43b4bbd86a909afe88662c1c", "filename": "src/test/ui/traits/check-trait-object-bounds-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-1.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,11 +1,11 @@\n-error[E0277]: the trait bound `str: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `str: Clone` is not satisfied\n   --> $DIR/check-trait-object-bounds-1.rs:12:5\n    |\n LL | fn f<T: X + ?Sized>() {\n    |         - required by this bound in `f`\n ...\n LL |     f::<dyn X<Y = str>>();\n-   |     ^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `str`\n+   |     ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n \n error: aborting due to previous error\n "}, {"sha": "eb2fb6e841bce2e2b1454df1ad0cbd2489919f15", "filename": "src/test/ui/traits/check-trait-object-bounds-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-2.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -11,5 +11,5 @@ fn f<T: for<'r> X<'r> + ?Sized>() {\n \n fn main() {\n     f::<dyn for<'x> X<'x, F = i32>>();\n-    //~^ expected a `std::ops::FnOnce<(&i32,)>` closure, found `i32`\n+    //~^ expected a `FnOnce<(&i32,)>` closure, found `i32`\n }"}, {"sha": "04e2348634ed805b54c55f6147d2df86a53159d4", "filename": "src/test/ui/traits/check-trait-object-bounds-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-2.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: expected a `std::ops::FnOnce<(&i32,)>` closure, found `i32`\n+error[E0277]: expected a `FnOnce<(&i32,)>` closure, found `i32`\n   --> $DIR/check-trait-object-bounds-2.rs:13:5\n    |\n LL | fn f<T: for<'r> X<'r> + ?Sized>() {\n@@ -7,7 +7,7 @@ LL | fn f<T: for<'r> X<'r> + ?Sized>() {\n LL |     f::<dyn for<'x> X<'x, F = i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<(&i32,)>` closure, found `i32`\n    |\n-   = help: the trait `for<'r> std::ops::FnOnce<(&'r i32,)>` is not implemented for `i32`\n+   = help: the trait `for<'r> FnOnce<(&'r i32,)>` is not implemented for `i32`\n \n error: aborting due to previous error\n "}, {"sha": "e9ca1563f3b67cfa182ddac0e708d01adde405b9", "filename": "src/test/ui/traits/check-trait-object-bounds-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-4.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -13,5 +13,5 @@ fn f<T: X + ?Sized>() {\n \n fn main() {\n     f::<dyn X<Y = str>>();\n-    //~^ ERROR the trait bound `str: std::clone::Clone` is not satisfied\n+    //~^ ERROR the trait bound `str: Clone` is not satisfied\n }"}, {"sha": "fc9f31c5ebc7e91a7fe600d27af57ef99dc3ffe1", "filename": "src/test/ui/traits/check-trait-object-bounds-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-4.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,11 +1,11 @@\n-error[E0277]: the trait bound `str: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `str: Clone` is not satisfied\n   --> $DIR/check-trait-object-bounds-4.rs:15:5\n    |\n LL | fn f<T: X + ?Sized>() {\n    |         - required by this bound in `f`\n ...\n LL |     f::<dyn X<Y = str>>();\n-   |     ^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `str`\n+   |     ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n \n error: aborting due to previous error\n "}, {"sha": "b2702d977f8b6c3152041abe0057f912e7d274e5", "filename": "src/test/ui/traits/cycle-cache-err-60010.stderr", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,4 +1,4 @@\n-error[E0275]: overflow evaluating the requirement `SalsaStorage: std::panic::RefUnwindSafe`\n+error[E0275]: overflow evaluating the requirement `SalsaStorage: RefUnwindSafe`\n   --> $DIR/cycle-cache-err-60010.rs:69:5\n    |\n LL |     fn parse(&self) {\n@@ -8,28 +8,12 @@ LL |     SourceDatabase::parse(db);\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: required because it appears within the type `*const SalsaStorage`\n-   = note: required because it appears within the type `std::ptr::Unique<SalsaStorage>`\n-   = note: required because it appears within the type `std::boxed::Box<SalsaStorage>`\n+   = note: required because it appears within the type `Unique<SalsaStorage>`\n+   = note: required because it appears within the type `Box<SalsaStorage>`\n    = note: required because it appears within the type `Runtime<RootDatabase>`\n    = note: required because it appears within the type `RootDatabase`\n    = note: required because of the requirements on the impl of `SourceDatabase` for `RootDatabase`\n \n-error[E0275]: overflow evaluating the requirement `Runtime<RootDatabase>: RefUnwindSafe`\n-  --> $DIR/cycle-cache-err-60010.rs:31:20\n-   |\n-LL | trait Database {\n-   |       -------- required by a bound in this\n-LL |     type Storage;\n-   |     ------------- required by this bound in `Database`\n-...\n-LL |     type Storage = SalsaStorage;\n-   |                    ^^^^^^^^^^^^\n-   |\n-   = note: required because it appears within the type `RootDatabase`\n-   = note: required because of the requirements on the impl of `SourceDatabase` for `RootDatabase`\n-   = note: required because of the requirements on the impl of `Query<RootDatabase>` for `ParseQuery`\n-   = note: required because it appears within the type `SalsaStorage`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0275`."}, {"sha": "996544ae5162da06080dfb7523766174a43e23d2", "filename": "src/test/ui/traits/traits-inductive-overflow-two-traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -9,8 +9,8 @@ LL |     type X = Self;\n    |\n help: consider further restricting this bound\n    |\n-LL | impl<T: Magic + std::marker::Sync> Magic for T {\n-   |               ^^^^^^^^^^^^^^^^^^^\n+LL | impl<T: Magic + Sync> Magic for T {\n+   |               ^^^^^^\n \n error[E0275]: overflow evaluating the requirement `*mut (): Magic`\n   --> $DIR/traits-inductive-overflow-two-traits.rs:20:5"}, {"sha": "496ba145810fbc526e989d9a195abeedf05e3412", "filename": "src/test/ui/try-block/try-block-bad-type.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -14,7 +14,9 @@ pub fn main() {\n \n     let res: Result<i32, i32> = try { }; //~ ERROR type mismatch\n \n-    let res: () = try { }; //~ the trait bound `(): Try` is not satisfied\n+    let res: () = try { };\n+    //~^ ERROR the trait bound `(): Try` is not satisfied\n+    //~| ERROR the trait bound `(): Try` is not satisfied\n \n     let res: i32 = try { 5 }; //~ ERROR the trait bound `i32: Try` is not satisfied\n }"}, {"sha": "cadf3a841c961e5ea94c58da5d0bdbf98dcf25b7", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -26,18 +26,24 @@ LL |     let res: Result<i32, i32> = try { };\n    |                                       ^ expected `i32`, found `()`\n \n error[E0277]: the trait bound `(): Try` is not satisfied\n-  --> $DIR/try-block-bad-type.rs:17:23\n+  --> $DIR/try-block-bad-type.rs:17:25\n    |\n LL |     let res: () = try { };\n-   |                       ^^^ the trait `Try` is not implemented for `()`\n+   |                         ^ the trait `Try` is not implemented for `()`\n    |\n    = note: required by `from_ok`\n \n+error[E0277]: the trait bound `(): Try` is not satisfied\n+  --> $DIR/try-block-bad-type.rs:17:25\n+   |\n+LL |     let res: () = try { };\n+   |                         ^ the trait `Try` is not implemented for `()`\n+\n error[E0277]: the trait bound `i32: Try` is not satisfied\n-  --> $DIR/try-block-bad-type.rs:19:24\n+  --> $DIR/try-block-bad-type.rs:21:26\n    |\n LL |     let res: i32 = try { 5 };\n-   |                        ^^^^^ the trait `Try` is not implemented for `i32`\n+   |                          ^ the trait `Try` is not implemented for `i32`\n    |\n    = note: required by `from_ok`\n "}, {"sha": "75a4e8d065cab65dcd42b632014f1ff47ac30610", "filename": "src/test/ui/try-block/try-block-in-while.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `bool: Try` is not satisfied\n-  --> $DIR/try-block-in-while.rs:6:15\n+  --> $DIR/try-block-in-while.rs:6:17\n    |\n LL |     while try { false } {}\n-   |               ^^^^^^^^^ the trait `Try` is not implemented for `bool`\n+   |                 ^^^^^ the trait `Try` is not implemented for `bool`\n    |\n    = note: required by `from_ok`\n "}, {"sha": "c0359159aebeac4e0eaee315bf260c6351b100c1", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -4,13 +4,13 @@\n #![feature(type_alias_impl_trait)]\n \n type X<T> = impl Clone;\n-//~^ ERROR the trait bound `T: std::clone::Clone` is not satisfied\n+//~^ ERROR the trait bound `T: Clone` is not satisfied\n \n fn f<T: Clone>(t: T) -> X<T> {\n     t\n }\n \n-fn g<T>(o : Option<X<T>>) -> Option<X<T>> {\n+fn g<T>(o: Option<X<T>>) -> Option<X<T>> {\n     o.clone()\n }\n "}, {"sha": "26a2f4135cb0a8108a0fd9afbe2dcd1691b9dbfc", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,13 +1,13 @@\n-error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n+error[E0277]: the trait bound `T: Clone` is not satisfied\n   --> $DIR/bounds-are-checked-2.rs:6:13\n    |\n LL | type X<T> = impl Clone;\n-   |             ^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n+   |             ^^^^^^^^^^ the trait `Clone` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | type X<T: std::clone::Clone> = impl Clone;\n-   |         ^^^^^^^^^^^^^^^^^^^\n+LL | type X<T: Clone> = impl Clone;\n+   |         ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d5fafe05887b9e1175e473810bd85f587d3a9b8d", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -12,8 +12,8 @@ error[E0308]: mismatched types\n LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected trait `std::convert::From<&'a str>`\n-              found trait `std::convert::From<&'static str>`\n+   = note: expected trait `From<&'a str>`\n+              found trait `From<&'static str>`\n note: the lifetime `'a` as defined on the item at 6:8...\n   --> $DIR/bounds-are-checked.rs:6:8\n    |"}, {"sha": "dd2f202cf5dc0305b8d5283f31412de0093f5066", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -6,12 +6,14 @@ fn main() {}\n \n // test that unused generic parameters are ok\n type Two<T, U> = impl Debug;\n+//~^ ERROR `T` doesn't implement `Debug`\n+//~| ERROR `U` doesn't implement `Debug`\n \n fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n     (t, u)\n }\n \n fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-//~^ concrete type differs from previous\n+    //~^ concrete type differs from previous\n     (u, t)\n }"}, {"sha": "b4aed4a6323bff2728d37f629dd22e8df4b0815e", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.stderr", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,14 +1,39 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use5.rs:14:1\n+  --> $DIR/generic_duplicate_param_use5.rs:16:1\n    |\n LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, U)`, got `(U, T)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use5.rs:10:1\n+  --> $DIR/generic_duplicate_param_use5.rs:12:1\n    |\n LL | fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0277]: `T` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use5.rs:8:18\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n+help: consider restricting type parameter `T`\n+   |\n+LL | type Two<T: Debug, U> = impl Debug;\n+   |           ^^^^^^^\n+\n+error[E0277]: `U` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use5.rs:8:18\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |                  ^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n+help: consider restricting type parameter `U`\n+   |\n+LL | type Two<T, U: Debug> = impl Debug;\n+   |              ^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d54d3cd62e0209c91734996228a2c51b1c33b103", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -6,12 +6,13 @@ fn main() {}\n \n // test that unused generic parameters are ok\n type Two<T, U> = impl Debug;\n+//~^ ERROR `T` doesn't implement `Debug`\n \n fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n     (t, t)\n }\n \n fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-    //~^ concrete type differs from previous\n+    //~^ ERROR concrete type differs from previous\n     (u, t)\n }"}, {"sha": "22e4d006674929a6a3f750583b0442a7f530e24a", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.stderr", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,14 +1,27 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use6.rs:14:1\n+  --> $DIR/generic_duplicate_param_use6.rs:15:1\n    |\n LL | fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, T)`, got `(U, T)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use6.rs:10:1\n+  --> $DIR/generic_duplicate_param_use6.rs:11:1\n    |\n LL | fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0277]: `T` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use6.rs:8:18\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(T, T)`\n+help: consider restricting type parameter `T`\n+   |\n+LL | type Two<T: Debug, U> = impl Debug;\n+   |           ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4a723b64cdc4f372c517d0b808f9562c24683c8b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -5,12 +5,13 @@ use std::fmt::Debug;\n fn main() {}\n \n type Two<T, U> = impl Debug;\n+//~^ ERROR `T` doesn't implement `Debug`\n \n fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n     (t, 4u32)\n }\n \n fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n-//~^ concrete type differs from previous\n+    //~^ concrete type differs from previous\n     (u, 4u32)\n }"}, {"sha": "82da704c9ee22d8615ee2292de4b0fe184495619", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.stderr", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,14 +1,27 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use8.rs:13:1\n+  --> $DIR/generic_duplicate_param_use8.rs:14:1\n    |\n LL | fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, u32)`, got `(U, u32)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use8.rs:9:1\n+  --> $DIR/generic_duplicate_param_use8.rs:10:1\n    |\n LL | fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0277]: `T` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use8.rs:7:18\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(T, u32)`\n+help: consider restricting type parameter `T`\n+   |\n+LL | type Two<T: Debug, U> = impl Debug;\n+   |           ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "747081933172b50aca38ca1e5efeaca93a347e5b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -5,6 +5,9 @@ use std::fmt::Debug;\n fn main() {}\n \n type Two<A, B> = impl Debug;\n+//~^ ERROR the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n+//~| ERROR `A` doesn't implement `Debug`\n+//~| ERROR `B` doesn't implement `Debug`\n \n trait Foo {\n     type Bar: Debug;"}, {"sha": "63aa0f8a81c9a7218972ce4fecb362d582297b81", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.stderr", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -1,14 +1,51 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use9.rs:18:1\n+  --> $DIR/generic_duplicate_param_use9.rs:21:1\n    |\n LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(A, B, <A as Foo>::Bar)`, got `(A, B, i32)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use9.rs:14:1\n+  --> $DIR/generic_duplicate_param_use9.rs:17:1\n    |\n LL | fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n+  --> $DIR/generic_duplicate_param_use9.rs:7:18\n+   |\n+LL | type Two<A, B> = impl Debug;\n+   |                  ^^^^^^^^^^ within `(A, B, <A as Foo>::Bar)`, the trait `Foo` is not implemented for `A`\n+   |\n+   = note: required because it appears within the type `(A, B, <A as Foo>::Bar)`\n+help: consider restricting type parameter `A`\n+   |\n+LL | type Two<A: Foo, B> = impl Debug;\n+   |           ^^^^^\n+\n+error[E0277]: `A` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use9.rs:7:18\n+   |\n+LL | type Two<A, B> = impl Debug;\n+   |                  ^^^^^^^^^^ `A` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n+help: consider restricting type parameter `A`\n+   |\n+LL | type Two<A: Debug, B> = impl Debug;\n+   |           ^^^^^^^\n+\n+error[E0277]: `B` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use9.rs:7:18\n+   |\n+LL | type Two<A, B> = impl Debug;\n+   |                  ^^^^^^^^^^ `B` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n+help: consider restricting type parameter `B`\n+   |\n+LL | type Two<A, B: Debug> = impl Debug;\n+   |              ^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f6d490960365adf64391a9c25ea909f45d7774ab", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -8,7 +8,8 @@ fn main() {\n \n type WrongGeneric<T> = impl 'static;\n //~^ ERROR the parameter type `T` may not live long enough\n-//~^^ ERROR: at least one trait must be specified\n+//~| ERROR the parameter type `T` may not live long enough\n+//~| ERROR: at least one trait must be specified\n \n fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n     t"}, {"sha": "4924c447d7e40485888cc313e9dc731ba6072012", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -27,7 +27,16 @@ LL | type WrongGeneric<T> = impl 'static;\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n \n-error: aborting due to 3 previous errors\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:24\n+   |\n+LL | type WrongGeneric<T> = impl 'static;\n+   |                        ^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   = note: ...so that the type `T` will meet its required lifetime bounds\n+\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0308, E0310.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "3372b81404ecb4da25879f625de145602ad95201", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -16,6 +16,10 @@ struct X;\n impl Foo for X {\n     type Bar = impl Baz<Self, Self>;\n     //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n \n     fn bar(&self) -> Self::Bar {\n         |x| x"}, {"sha": "5e2a8db02867f3b70b8d006914b995985ec26c7c", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -7,6 +7,42 @@ LL |     type Bar = impl Baz<Self, Self>;\n    = note: expected type `FnOnce<(&X,)>`\n               found type `FnOnce<(&X,)>`\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57611-trait-alias.rs:17:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r> Fn<(&'r X,)>`\n+              found type `Fn<(&'<empty> X,)>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57611-trait-alias.rs:17:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `FnOnce<(&X,)>`\n+              found type `FnOnce<(&'<empty> X,)>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57611-trait-alias.rs:17:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r> Fn<(&'r X,)>`\n+              found type `Fn<(&'<empty> X,)>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57611-trait-alias.rs:17:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `FnOnce<(&X,)>`\n+              found type `FnOnce<(&'<empty> X,)>`\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "a2bf963044582278e921e1872847b920b8de665f", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022c148fcd9e4339b4b59dfaee58ca5905d71b2d/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=022c148fcd9e4339b4b59dfaee58ca5905d71b2d", "patch": "@@ -5,6 +5,7 @@ LL |     <i32 as Add<u32>>::add(1, 2);\n    |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u32`\n    |\n    = help: the trait `Add<u32>` is not implemented for `i32`\n+   = note: required by `add`\n \n error[E0308]: mismatched types\n   --> $DIR/ufcs-qpath-self-mismatch.rs:6:28"}]}