{"sha": "a5ef644a16f6d187fb6b612d30f19bf4f20fc6c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZWY2NDRhMTZmNmQxODdmYjZiNjEyZDMwZjE5YmY0ZjIwZmM2YzQ=", "commit": {"author": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-06-23T12:03:39Z"}, "committer": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-03T22:56:51Z"}, "message": "SSR: Extract error code out to a separate module\n\nThis is to make reusing it outside of parsing easier in a subsequent\nchange.", "tree": {"sha": "d107edd6fa6a70e53c08300b25b9605a90eb80c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d107edd6fa6a70e53c08300b25b9605a90eb80c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5ef644a16f6d187fb6b612d30f19bf4f20fc6c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5ef644a16f6d187fb6b612d30f19bf4f20fc6c4", "html_url": "https://github.com/rust-lang/rust/commit/a5ef644a16f6d187fb6b612d30f19bf4f20fc6c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5ef644a16f6d187fb6b612d30f19bf4f20fc6c4/comments", "author": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57ed622ec4f0f71a618f99a46aa0026e81eb2583", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ed622ec4f0f71a618f99a46aa0026e81eb2583", "html_url": "https://github.com/rust-lang/rust/commit/57ed622ec4f0f71a618f99a46aa0026e81eb2583"}], "stats": {"total": 58, "additions": 35, "deletions": 23}, "files": [{"sha": "c02bacae6bfe68f2ed94a114011ecb805006844e", "filename": "crates/ra_ssr/src/errors.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a5ef644a16f6d187fb6b612d30f19bf4f20fc6c4/crates%2Fra_ssr%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5ef644a16f6d187fb6b612d30f19bf4f20fc6c4/crates%2Fra_ssr%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Ferrors.rs?ref=a5ef644a16f6d187fb6b612d30f19bf4f20fc6c4", "patch": "@@ -0,0 +1,29 @@\n+//! Code relating to errors produced by SSR.\n+\n+/// Constructs an SsrError taking arguments like the format macro.\n+macro_rules! _error {\n+    ($fmt:expr) => {$crate::SsrError::new(format!($fmt))};\n+    ($fmt:expr, $($arg:tt)+) => {$crate::SsrError::new(format!($fmt, $($arg)+))}\n+}\n+pub(crate) use _error as error;\n+\n+/// Returns from the current function with an error, supplied by arguments as for format!\n+macro_rules! _bail {\n+    ($($tokens:tt)*) => {return Err(crate::errors::error!($($tokens)*))}\n+}\n+pub(crate) use _bail as bail;\n+\n+#[derive(Debug, PartialEq)]\n+pub struct SsrError(pub(crate) String);\n+\n+impl std::fmt::Display for SsrError {\n+    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n+        write!(f, \"Parse error: {}\", self.0)\n+    }\n+}\n+\n+impl SsrError {\n+    pub(crate) fn new(message: impl Into<String>) -> SsrError {\n+        SsrError(message.into())\n+    }\n+}"}, {"sha": "d6862356d54aa963b2745a2c0532ab7dd642b127", "filename": "crates/ra_ssr/src/lib.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a5ef644a16f6d187fb6b612d30f19bf4f20fc6c4/crates%2Fra_ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5ef644a16f6d187fb6b612d30f19bf4f20fc6c4/crates%2Fra_ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Flib.rs?ref=a5ef644a16f6d187fb6b612d30f19bf4f20fc6c4", "patch": "@@ -6,9 +6,12 @@\n mod matching;\n mod parsing;\n mod replacing;\n+#[macro_use]\n+mod errors;\n #[cfg(test)]\n mod tests;\n \n+pub use crate::errors::SsrError;\n pub use crate::matching::Match;\n use crate::matching::{record_match_fails_reasons_scope, MatchFailureReason};\n use hir::Semantics;\n@@ -41,9 +44,6 @@ pub struct SsrPattern {\n     pattern: Option<SyntaxNode>,\n }\n \n-#[derive(Debug, PartialEq)]\n-pub struct SsrError(String);\n-\n #[derive(Debug, Default)]\n pub struct SsrMatches {\n     pub matches: Vec<Match>,\n@@ -216,12 +216,6 @@ pub struct MatchDebugInfo {\n     matched: Result<Match, MatchFailureReason>,\n }\n \n-impl std::fmt::Display for SsrError {\n-    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n-        write!(f, \"Parse error: {}\", self.0)\n-    }\n-}\n-\n impl std::fmt::Debug for MatchDebugInfo {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         write!(f, \"========= PATTERN ==========\\n\")?;"}, {"sha": "4aee97bb2b8b0a1f728158014585297123ca9557", "filename": "crates/ra_ssr/src/parsing.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a5ef644a16f6d187fb6b612d30f19bf4f20fc6c4/crates%2Fra_ssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5ef644a16f6d187fb6b612d30f19bf4f20fc6c4/crates%2Fra_ssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fparsing.rs?ref=a5ef644a16f6d187fb6b612d30f19bf4f20fc6c4", "patch": "@@ -5,17 +5,12 @@\n //! search patterns, we go further and parse the pattern as each kind of thing that we can match.\n //! e.g. expressions, type references etc.\n \n+use crate::errors::bail;\n use crate::{SsrError, SsrPattern, SsrRule};\n use ra_syntax::{ast, AstNode, SmolStr, SyntaxKind, T};\n use rustc_hash::{FxHashMap, FxHashSet};\n use std::str::FromStr;\n \n-/// Returns from the current function with an error, supplied by arguments as for format!\n-macro_rules! bail {\n-    ($e:expr) => {return Err($crate::SsrError::new($e))};\n-    ($fmt:expr, $($arg:tt)+) => {return Err($crate::SsrError::new(format!($fmt, $($arg)+)))}\n-}\n-\n #[derive(Clone, Debug)]\n pub(crate) struct SsrTemplate {\n     pub(crate) tokens: Vec<PatternElement>,\n@@ -246,7 +241,7 @@ fn parse_placeholder(tokens: &mut std::vec::IntoIter<Token>) -> Result<Placehold\n                 }\n             }\n             _ => {\n-                bail!(\"Placeholders should either be $name or ${name:constraints}\");\n+                bail!(\"Placeholders should either be $name or ${{name:constraints}}\");\n             }\n         }\n     }\n@@ -289,7 +284,7 @@ fn expect_token(tokens: &mut std::vec::IntoIter<Token>, expected: &str) -> Resul\n         }\n         bail!(\"Expected {} found {}\", expected, t.text);\n     }\n-    bail!(\"Expected {} found end of stream\");\n+    bail!(\"Expected {} found end of stream\", expected);\n }\n \n impl NodeKind {\n@@ -307,12 +302,6 @@ impl Placeholder {\n     }\n }\n \n-impl SsrError {\n-    fn new(message: impl Into<String>) -> SsrError {\n-        SsrError(message.into())\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}]}