{"sha": "6d0e5bf3487a627021f2346ea2e35d7e5b0007ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMGU1YmYzNDg3YTYyNzAyMWYyMzQ2ZWEyZTM1ZDdlNWIwMDA3ZWY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-06-27T20:51:28Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-06-27T20:51:28Z"}, "message": "Rename two `Resolver` traits", "tree": {"sha": "15ed8a29f4871f9a281717c52fb8091183cd78c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15ed8a29f4871f9a281717c52fb8091183cd78c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef", "html_url": "https://github.com/rust-lang/rust/commit/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "394e1b40d264aa6928811919c1124fa248e7d802", "url": "https://api.github.com/repos/rust-lang/rust/commits/394e1b40d264aa6928811919c1124fa248e7d802", "html_url": "https://github.com/rust-lang/rust/commit/394e1b40d264aa6928811919c1124fa248e7d802"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "bc0980f041b942df466067e7901429feaada3053", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=6d0e5bf3487a627021f2346ea2e35d7e5b0007ef", "patch": "@@ -91,7 +91,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n     /// Used to assign IDs to HIR nodes that do not directly correspond to AST nodes.\n     sess: &'a Session,\n \n-    resolver: &'a mut dyn Resolver,\n+    resolver: &'a mut dyn ResolverAstLowering,\n \n     /// HACK(Centril): there is a cyclic dependency between the parser and lowering\n     /// if we don't have this function pointer. To avoid that dependency so that\n@@ -172,7 +172,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n     allow_gen_future: Option<Lrc<[Symbol]>>,\n }\n \n-pub trait Resolver {\n+pub trait ResolverAstLowering {\n     fn def_key(&mut self, id: DefId) -> DefKey;\n \n     fn item_generics_num_lifetimes(&self, def: DefId, sess: &Session) -> usize;\n@@ -299,7 +299,7 @@ impl<'a> ImplTraitContext<'_, 'a> {\n pub fn lower_crate<'a, 'hir>(\n     sess: &'a Session,\n     krate: &'a Crate,\n-    resolver: &'a mut dyn Resolver,\n+    resolver: &'a mut dyn ResolverAstLowering,\n     nt_to_tokenstream: NtToTokenstream,\n     arena: &'hir Arena<'hir>,\n ) -> hir::Crate<'hir> {"}, {"sha": "173a823dc7d524c75b2a6b5ffa04397dd35f2913", "filename": "src/librustc_builtin_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_builtin_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_builtin_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Flib.rs?ref=6d0e5bf3487a627021f2346ea2e35d7e5b0007ef", "patch": "@@ -15,7 +15,7 @@ extern crate proc_macro;\n \n use crate::deriving::*;\n \n-use rustc_expand::base::{MacroExpanderFn, Resolver, SyntaxExtension, SyntaxExtensionKind};\n+use rustc_expand::base::{MacroExpanderFn, ResolverExpand, SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::proc_macro::BangProcMacro;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::{sym, Ident};\n@@ -45,7 +45,7 @@ pub mod proc_macro_harness;\n pub mod standard_library_imports;\n pub mod test_harness;\n \n-pub fn register_builtin_macros(resolver: &mut dyn Resolver, edition: Edition) {\n+pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand, edition: Edition) {\n     let mut register = |name, kind| {\n         resolver.register_builtin_macro(\n             Ident::with_dummy_span(name),"}, {"sha": "7cc9c1f76631e1b80290bd9659489af32dc5c433", "filename": "src/librustc_builtin_macros/proc_macro_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs?ref=6d0e5bf3487a627021f2346ea2e35d7e5b0007ef", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::expand::is_proc_macro_attr;\n use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, Visitor};\n use rustc_ast_pretty::pprust;\n-use rustc_expand::base::{ExtCtxt, Resolver};\n+use rustc_expand::base::{ExtCtxt, ResolverExpand};\n use rustc_expand::expand::{AstFragment, ExpansionConfig};\n use rustc_session::parse::ParseSess;\n use rustc_span::hygiene::AstPass;\n@@ -52,7 +52,7 @@ struct CollectProcMacros<'a> {\n \n pub fn inject(\n     sess: &ParseSess,\n-    resolver: &mut dyn Resolver,\n+    resolver: &mut dyn ResolverExpand,\n     mut krate: ast::Crate,\n     is_proc_macro_crate: bool,\n     has_proc_macro_decls: bool,"}, {"sha": "671ff8ce54f0e9fda51711ea693f4b27cefbadc3", "filename": "src/librustc_builtin_macros/standard_library_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs?ref=6d0e5bf3487a627021f2346ea2e35d7e5b0007ef", "patch": "@@ -1,6 +1,6 @@\n use rustc_ast::ptr::P;\n use rustc_ast::{ast, attr};\n-use rustc_expand::base::{ExtCtxt, Resolver};\n+use rustc_expand::base::{ExtCtxt, ResolverExpand};\n use rustc_expand::expand::ExpansionConfig;\n use rustc_session::parse::ParseSess;\n use rustc_span::edition::Edition;\n@@ -10,7 +10,7 @@ use rustc_span::DUMMY_SP;\n \n pub fn inject(\n     mut krate: ast::Crate,\n-    resolver: &mut dyn Resolver,\n+    resolver: &mut dyn ResolverExpand,\n     sess: &ParseSess,\n     alt_std_name: Option<Symbol>,\n ) -> (ast::Crate, Option<Symbol>) {"}, {"sha": "da8bf2b8b5169990a2c989684ea5090b936793fc", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=6d0e5bf3487a627021f2346ea2e35d7e5b0007ef", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::attr;\n use rustc_ast::entry::{self, EntryPointType};\n use rustc_ast::mut_visit::{ExpectOne, *};\n use rustc_ast::ptr::P;\n-use rustc_expand::base::{ExtCtxt, Resolver};\n+use rustc_expand::base::{ExtCtxt, ResolverExpand};\n use rustc_expand::expand::{AstFragment, ExpansionConfig};\n use rustc_feature::Features;\n use rustc_session::parse::ParseSess;\n@@ -37,7 +37,7 @@ struct TestCtxt<'a> {\n // existing main functions, and synthesizing a main test harness\n pub fn inject(\n     sess: &ParseSess,\n-    resolver: &mut dyn Resolver,\n+    resolver: &mut dyn ResolverExpand,\n     should_test: bool,\n     krate: &mut ast::Crate,\n     span_diagnostic: &rustc_errors::Handler,\n@@ -192,7 +192,7 @@ impl MutVisitor for EntryPointCleaner {\n /// Crawl over the crate, inserting test reexports and the test main function\n fn generate_test_harness(\n     sess: &ParseSess,\n-    resolver: &mut dyn Resolver,\n+    resolver: &mut dyn ResolverExpand,\n     reexport_test_harness_main: Option<Symbol>,\n     krate: &mut ast::Crate,\n     features: &Features,"}, {"sha": "757eee8bb46e1a2593793da6d37c08753a15dde5", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=6d0e5bf3487a627021f2346ea2e35d7e5b0007ef", "patch": "@@ -889,7 +889,7 @@ pub enum InvocationRes {\n /// Error type that denotes indeterminacy.\n pub struct Indeterminate;\n \n-pub trait Resolver {\n+pub trait ResolverExpand {\n     fn next_node_id(&mut self) -> NodeId;\n \n     fn resolve_dollar_crates(&mut self);\n@@ -946,7 +946,7 @@ pub struct ExtCtxt<'a> {\n     pub ecfg: expand::ExpansionConfig<'a>,\n     pub reduced_recursion_limit: Option<Limit>,\n     pub root_path: PathBuf,\n-    pub resolver: &'a mut dyn Resolver,\n+    pub resolver: &'a mut dyn ResolverExpand,\n     pub current_expansion: ExpansionData,\n     pub expansions: FxHashMap<Span, Vec<String>>,\n     /// Called directly after having parsed an external `mod foo;` in expansion.\n@@ -957,7 +957,7 @@ impl<'a> ExtCtxt<'a> {\n     pub fn new(\n         parse_sess: &'a ParseSess,\n         ecfg: expand::ExpansionConfig<'a>,\n-        resolver: &'a mut dyn Resolver,\n+        resolver: &'a mut dyn ResolverExpand,\n         extern_mod_loaded: Option<&'a dyn Fn(&ast::Crate)>,\n     ) -> ExtCtxt<'a> {\n         ExtCtxt {"}, {"sha": "a92d451dfd006e2298c2a5e69a04f990ac44d6cc", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=6d0e5bf3487a627021f2346ea2e35d7e5b0007ef", "patch": "@@ -19,7 +19,7 @@ use rustc_ast::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind,\n use rustc_ast::ast::{AssocItem, AssocItemKind, MetaItemKind, StmtKind};\n use rustc_ast::token::{self, Token};\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n-use rustc_ast_lowering::Resolver as ResolverAstLowering;\n+use rustc_ast_lowering::ResolverAstLowering;\n use rustc_attr as attr;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};"}, {"sha": "1f36e1ed83de70b0abd11fbe70a399e4ad159a13", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=6d0e5bf3487a627021f2346ea2e35d7e5b0007ef", "patch": "@@ -29,7 +29,7 @@ use crate::Resolver;\n use rustc_ast::ast;\n use rustc_ast::node_id::NodeMap;\n use rustc_ast::visit::{self, Visitor};\n-use rustc_ast_lowering::Resolver as ResolverAstLowering;\n+use rustc_ast_lowering::ResolverAstLowering;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::pluralize;\n use rustc_middle::ty;"}, {"sha": "c25a20210e0263a87d74fd5c75ffcb74969b4d37", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=6d0e5bf3487a627021f2346ea2e35d7e5b0007ef", "patch": "@@ -4,7 +4,7 @@ use rustc_ast::ast::*;\n use rustc_ast::token::{self, Token};\n use rustc_ast::visit::{self, FnKind};\n use rustc_ast::walk_list;\n-use rustc_ast_lowering::Resolver as ResolverAstLowering;\n+use rustc_ast_lowering::ResolverAstLowering;\n use rustc_expand::expand::AstFragment;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::definitions::*;"}, {"sha": "ded0ee8a9669963cef357414c8913b15855fc24d", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=6d0e5bf3487a627021f2346ea2e35d7e5b0007ef", "patch": "@@ -12,7 +12,7 @@ use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBindin\n use rustc_ast::ast::NodeId;\n use rustc_ast::unwrap_or;\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n-use rustc_ast_lowering::Resolver as ResolverAstLowering;\n+use rustc_ast_lowering::ResolverAstLowering;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_errors::{pluralize, struct_span_err, Applicability};"}, {"sha": "84ba9094ea16fedee6add5c9d39d4445fcc535ff", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=6d0e5bf3487a627021f2346ea2e35d7e5b0007ef", "patch": "@@ -16,7 +16,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::{unwrap_or, walk_list};\n-use rustc_ast_lowering::Resolver as ResolverAstLowering;\n+use rustc_ast_lowering::ResolverAstLowering;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::DiagnosticId;\n use rustc_hir::def::Namespace::{self, *};"}, {"sha": "dccaf76723a58188bb68ae8c3da0087b4466b331", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6d0e5bf3487a627021f2346ea2e35d7e5b0007ef", "patch": "@@ -27,7 +27,7 @@ use rustc_ast::attr;\n use rustc_ast::node_id::NodeMap;\n use rustc_ast::unwrap_or;\n use rustc_ast::visit::{self, Visitor};\n-use rustc_ast_lowering::Resolver as ResolverAstLowering;\n+use rustc_ast_lowering::ResolverAstLowering;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::ptr_key::PtrKey;"}, {"sha": "3976e501c169feb0f46574bf1b19c53f70d5f1df", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0e5bf3487a627021f2346ea2e35d7e5b0007ef/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=6d0e5bf3487a627021f2346ea2e35d7e5b0007ef", "patch": "@@ -7,12 +7,11 @@ use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy};\n use crate::{CrateLint, ParentScope, ResolutionError, Resolver, Scope, ScopeSet, Weak};\n use crate::{ModuleKind, ModuleOrUniformRoot, NameBinding, PathResult, Segment, ToNameBinding};\n use rustc_ast::ast::{self, NodeId};\n-use rustc_ast_lowering::Resolver as ResolverAstLowering;\n+use rustc_ast_lowering::ResolverAstLowering;\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, StabilityLevel};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_expand::base::SyntaxExtension;\n-use rustc_expand::base::{self, Indeterminate, InvocationRes};\n+use rustc_expand::base::{Indeterminate, InvocationRes, ResolverExpand, SyntaxExtension};\n use rustc_expand::compile_declarative_macro;\n use rustc_expand::expand::{AstFragment, AstFragmentKind, Invocation, InvocationKind};\n use rustc_feature::is_builtin_attr_name;\n@@ -141,7 +140,7 @@ crate fn registered_attrs_and_tools(\n     (registered_attrs, registered_tools)\n }\n \n-impl<'a> base::Resolver for Resolver<'a> {\n+impl<'a> ResolverExpand for Resolver<'a> {\n     fn next_node_id(&mut self) -> NodeId {\n         self.next_node_id()\n     }"}]}