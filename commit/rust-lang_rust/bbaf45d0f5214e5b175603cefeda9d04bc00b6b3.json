{"sha": "bbaf45d0f5214e5b175603cefeda9d04bc00b6b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYWY0NWQwZjUyMTRlNWIxNzU2MDNjZWZlZGE5ZDA0YmMwMGI2YjM=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-11T12:21:26Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-11T12:21:26Z"}, "message": "Enforce #![deny(bare_trait_objects)] in src/librustc_data_structures tests", "tree": {"sha": "a89e05077fc5449307a6f30dbf1ce73e936329ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a89e05077fc5449307a6f30dbf1ce73e936329ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbaf45d0f5214e5b175603cefeda9d04bc00b6b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbaf45d0f5214e5b175603cefeda9d04bc00b6b3", "html_url": "https://github.com/rust-lang/rust/commit/bbaf45d0f5214e5b175603cefeda9d04bc00b6b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbaf45d0f5214e5b175603cefeda9d04bc00b6b3/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff65bbe96a4ef301673eb5934649019991dbef0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff65bbe96a4ef301673eb5934649019991dbef0a", "html_url": "https://github.com/rust-lang/rust/commit/ff65bbe96a4ef301673eb5934649019991dbef0a"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "02640a71010e2daf5a7d501987a839451be0203f", "filename": "src/librustc_data_structures/owning_ref/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bbaf45d0f5214e5b175603cefeda9d04bc00b6b3/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbaf45d0f5214e5b175603cefeda9d04bc00b6b3/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs?ref=bbaf45d0f5214e5b175603cefeda9d04bc00b6b3", "patch": "@@ -1443,8 +1443,8 @@ mod tests {\n             let c: OwningRef<Rc<Vec<u8>>, [u8]> = unsafe {a.map_owner(Rc::new)};\n             let d: OwningRef<Rc<Box<[u8]>>, [u8]> = unsafe {b.map_owner(Rc::new)};\n \n-            let e: OwningRef<Rc<Erased>, [u8]> = c.erase_owner();\n-            let f: OwningRef<Rc<Erased>, [u8]> = d.erase_owner();\n+            let e: OwningRef<Rc<dyn Erased>, [u8]> = c.erase_owner();\n+            let f: OwningRef<Rc<dyn Erased>, [u8]> = d.erase_owner();\n \n             let _g = e.clone();\n             let _h = f.clone();\n@@ -1460,16 +1460,16 @@ mod tests {\n             let c: OwningRef<Box<Vec<u8>>, [u8]> = a.map_owner_box();\n             let d: OwningRef<Box<Box<[u8]>>, [u8]> = b.map_owner_box();\n \n-            let _e: OwningRef<Box<Erased>, [u8]> = c.erase_owner();\n-            let _f: OwningRef<Box<Erased>, [u8]> = d.erase_owner();\n+            let _e: OwningRef<Box<dyn Erased>, [u8]> = c.erase_owner();\n+            let _f: OwningRef<Box<dyn Erased>, [u8]> = d.erase_owner();\n         }\n \n         #[test]\n         fn try_map1() {\n             use std::any::Any;\n \n             let x = Box::new(123_i32);\n-            let y: Box<Any> = x;\n+            let y: Box<dyn Any> = x;\n \n             OwningRef::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_ok();\n         }\n@@ -1479,7 +1479,7 @@ mod tests {\n             use std::any::Any;\n \n             let x = Box::new(123_i32);\n-            let y: Box<Any> = x;\n+            let y: Box<dyn Any> = x;\n \n             OwningRef::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_err();\n         }\n@@ -1843,8 +1843,8 @@ mod tests {\n             let c: OwningRefMut<Box<Vec<u8>>, [u8]> = unsafe {a.map_owner(Box::new)};\n             let d: OwningRefMut<Box<Box<[u8]>>, [u8]> = unsafe {b.map_owner(Box::new)};\n \n-            let _e: OwningRefMut<Box<Erased>, [u8]> = c.erase_owner();\n-            let _f: OwningRefMut<Box<Erased>, [u8]> = d.erase_owner();\n+            let _e: OwningRefMut<Box<dyn Erased>, [u8]> = c.erase_owner();\n+            let _f: OwningRefMut<Box<dyn Erased>, [u8]> = d.erase_owner();\n         }\n \n         #[test]\n@@ -1857,16 +1857,16 @@ mod tests {\n             let c: OwningRefMut<Box<Vec<u8>>, [u8]> = a.map_owner_box();\n             let d: OwningRefMut<Box<Box<[u8]>>, [u8]> = b.map_owner_box();\n \n-            let _e: OwningRefMut<Box<Erased>, [u8]> = c.erase_owner();\n-            let _f: OwningRefMut<Box<Erased>, [u8]> = d.erase_owner();\n+            let _e: OwningRefMut<Box<dyn Erased>, [u8]> = c.erase_owner();\n+            let _f: OwningRefMut<Box<dyn Erased>, [u8]> = d.erase_owner();\n         }\n \n         #[test]\n         fn try_map1() {\n             use std::any::Any;\n \n             let x = Box::new(123_i32);\n-            let y: Box<Any> = x;\n+            let y: Box<dyn Any> = x;\n \n             OwningRefMut::new(y).try_map_mut(|x| x.downcast_mut::<i32>().ok_or(())).is_ok();\n         }\n@@ -1876,7 +1876,7 @@ mod tests {\n             use std::any::Any;\n \n             let x = Box::new(123_i32);\n-            let y: Box<Any> = x;\n+            let y: Box<dyn Any> = x;\n \n             OwningRefMut::new(y).try_map_mut(|x| x.downcast_mut::<i32>().ok_or(())).is_err();\n         }\n@@ -1886,7 +1886,7 @@ mod tests {\n             use std::any::Any;\n \n             let x = Box::new(123_i32);\n-            let y: Box<Any> = x;\n+            let y: Box<dyn Any> = x;\n \n             OwningRefMut::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_ok();\n         }\n@@ -1896,7 +1896,7 @@ mod tests {\n             use std::any::Any;\n \n             let x = Box::new(123_i32);\n-            let y: Box<Any> = x;\n+            let y: Box<dyn Any> = x;\n \n             OwningRefMut::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_err();\n         }"}]}