{"sha": "cba479f75c7513f91f727741882a99442f393c12", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYTQ3OWY3NWM3NTEzZjkxZjcyNzc0MTg4MmE5OTQ0MmYzOTNjMTI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-11-28T14:24:26Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-12-06T13:01:05Z"}, "message": "Add `{f32,f64}::approx_unchecked_to<Int>` unsafe methods\n\nAs discussed in https://github.com/rust-lang/rust/issues/10184\n\nCurrently, casting a floating point number to an integer with `as` is Undefined Behavior if the value is out of range. `-Z saturating-float-casts` fixes this soundness hole by making `as` \u201csaturate\u201d to the maximum or minimum value of the integer type (or zero for `NaN`), but has measurable negative performance impact in some benchmarks. There is some consensus in that thread for enabling saturation by default anyway, but provide an `unsafe fn` alternative for users who know through some other mean that their values are in range.", "tree": {"sha": "b9dcaf3f1f8510c49370bf91381ac568256911b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9dcaf3f1f8510c49370bf91381ac568256911b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cba479f75c7513f91f727741882a99442f393c12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cba479f75c7513f91f727741882a99442f393c12", "html_url": "https://github.com/rust-lang/rust/commit/cba479f75c7513f91f727741882a99442f393c12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cba479f75c7513f91f727741882a99442f393c12/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f442797c17f8f1f6ff217d48e664018359bdd6bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f442797c17f8f1f6ff217d48e664018359bdd6bc", "html_url": "https://github.com/rust-lang/rust/commit/f442797c17f8f1f6ff217d48e664018359bdd6bc"}], "stats": {"total": 142, "additions": 139, "deletions": 3}, "files": [{"sha": "16d5375059feebd663c6bc563c96aa750375bd7c", "filename": "src/libcore/convert/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cba479f75c7513f91f727741882a99442f393c12/src%2Flibcore%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba479f75c7513f91f727741882a99442f393c12/src%2Flibcore%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fmod.rs?ref=cba479f75c7513f91f727741882a99442f393c12", "patch": "@@ -40,6 +40,11 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+mod num;\n+\n+#[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\n+pub use num::FloatToInt;\n+\n /// The identity function.\n ///\n /// Two things are important to note about this function:"}, {"sha": "076a1107479e783393761f4924a9a2cf8dc52f5e", "filename": "src/libcore/convert/num.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cba479f75c7513f91f727741882a99442f393c12/src%2Flibcore%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba479f75c7513f91f727741882a99442f393c12/src%2Flibcore%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fnum.rs?ref=cba479f75c7513f91f727741882a99442f393c12", "patch": "@@ -0,0 +1,38 @@\n+mod private {\n+    /// This trait being unreachable from outside the crate\n+    /// prevents other implementations of the `FloatToInt` trait,\n+    /// which allows potentially adding more trait methods after the trait is `#[stable]`.\n+    #[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\n+    pub trait Sealed {}\n+}\n+\n+/// Supporting trait for inherent methods of `f32` and `f64` such as `round_unchecked_to`.\n+/// Typically doesn\u2019t need to be used directly.\n+#[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\n+pub trait FloatToInt<Int>: private::Sealed + Sized {\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"float_approx_unchecked_to\", issue = \"67058\")]\n+    #[doc(hidden)]\n+    unsafe fn approx_unchecked(self) -> Int;\n+}\n+\n+macro_rules! impl_float_to_int {\n+    ( $Float: ident => $( $Int: ident )+ ) => {\n+        #[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\n+        impl private::Sealed for $Float {}\n+        $(\n+            #[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\n+            impl FloatToInt<$Int> for $Float {\n+                #[cfg(not(bootstrap))]\n+                #[doc(hidden)]\n+                #[inline]\n+                unsafe fn approx_unchecked(self) -> $Int {\n+                    crate::intrinsics::float_to_int_approx_unchecked(self)\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+impl_float_to_int!(f32 => u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize);\n+impl_float_to_int!(f64 => u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize);"}, {"sha": "18aae59573d7d56a0707f586617bf86570a816ad", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cba479f75c7513f91f727741882a99442f393c12/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba479f75c7513f91f727741882a99442f393c12/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=cba479f75c7513f91f727741882a99442f393c12", "patch": "@@ -1144,6 +1144,11 @@ extern \"rust-intrinsic\" {\n     /// May assume inputs are finite.\n     pub fn frem_fast<T>(a: T, b: T) -> T;\n \n+    /// Convert with LLVM\u2019s fptoui/fptosi, which may return undef for values out of range\n+    /// https://github.com/rust-lang/rust/issues/10184\n+    #[cfg(not(bootstrap))]\n+    pub fn float_to_int_approx_unchecked<Float, Int>(value: Float) -> Int;\n+\n \n     /// Returns the number of bits set in an integer type `T`\n     pub fn ctpop<T>(x: T) -> T;"}, {"sha": "ac06f95e244b6f97c407804b0812dac9d151fa12", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cba479f75c7513f91f727741882a99442f393c12/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba479f75c7513f91f727741882a99442f393c12/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=cba479f75c7513f91f727741882a99442f393c12", "patch": "@@ -7,9 +7,10 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[cfg(not(bootstrap))]\n+use crate::convert::FloatToInt;\n #[cfg(not(test))]\n use crate::intrinsics;\n-\n use crate::mem;\n use crate::num::FpCategory;\n \n@@ -400,6 +401,35 @@ impl f32 {\n         intrinsics::minnumf32(self, other)\n     }\n \n+    /// Rounds toward zero and converts to any primitive integer type,\n+    /// assuming that the value is finite and fits in that type.\n+    ///\n+    /// ```\n+    /// #![feature(float_approx_unchecked_to)]\n+    ///\n+    /// let value = 4.6_f32;\n+    /// let rounded = unsafe { value.approx_unchecked_to::<u16>() };\n+    /// assert_eq!(rounded, 4);\n+    ///\n+    /// let value = -128.9_f32;\n+    /// let rounded = unsafe { value.approx_unchecked_to::<i8>() };\n+    /// assert_eq!(rounded, std::i8::MIN);\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// The value must:\n+    ///\n+    /// * Not be `NaN`\n+    /// * Not be infinite\n+    /// * Be representable in the return type `Int`, after truncating off its fractional part\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"float_approx_unchecked_to\", issue = \"67058\")]\n+    #[inline]\n+    pub unsafe fn approx_unchecked_to<Int>(self) -> Int where Self: FloatToInt<Int> {\n+        FloatToInt::<Int>::approx_unchecked(self)\n+    }\n+\n     /// Raw transmutation to `u32`.\n     ///\n     /// This is currently identical to `transmute::<f32, u32>(self)` on all platforms."}, {"sha": "794f77fcfc1be379e879214ee5a4cd2672ac9ae8", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cba479f75c7513f91f727741882a99442f393c12/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba479f75c7513f91f727741882a99442f393c12/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=cba479f75c7513f91f727741882a99442f393c12", "patch": "@@ -7,9 +7,10 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[cfg(not(bootstrap))]\n+use crate::convert::FloatToInt;\n #[cfg(not(test))]\n use crate::intrinsics;\n-\n use crate::mem;\n use crate::num::FpCategory;\n \n@@ -413,6 +414,35 @@ impl f64 {\n         intrinsics::minnumf64(self, other)\n     }\n \n+    /// Rounds toward zero and converts to any primitive integer type,\n+    /// assuming that the value is finite and fits in that type.\n+    ///\n+    /// ```\n+    /// #![feature(float_approx_unchecked_to)]\n+    ///\n+    /// let value = 4.6_f32;\n+    /// let rounded = unsafe { value.approx_unchecked_to::<u16>() };\n+    /// assert_eq!(rounded, 4);\n+    ///\n+    /// let value = -128.9_f32;\n+    /// let rounded = unsafe { value.approx_unchecked_to::<i8>() };\n+    /// assert_eq!(rounded, std::i8::MIN);\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// The value must:\n+    ///\n+    /// * Not be `NaN`\n+    /// * Not be infinite\n+    /// * Be representable in the return type `Int`, after truncating off its fractional part\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"float_approx_unchecked_to\", issue = \"67058\")]\n+    #[inline]\n+    pub unsafe fn approx_unchecked_to<Int>(self) -> Int where Self: FloatToInt<Int> {\n+        FloatToInt::<Int>::approx_unchecked(self)\n+    }\n+\n     /// Raw transmutation to `u64`.\n     ///\n     /// This is currently identical to `transmute::<f64, u64>(self)` on all platforms."}, {"sha": "1767ad118e7c0912bd706b9527caabbbdbdaaeee", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cba479f75c7513f91f727741882a99442f393c12/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba479f75c7513f91f727741882a99442f393c12/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=cba479f75c7513f91f727741882a99442f393c12", "patch": "@@ -516,9 +516,36 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                         return;\n                     }\n                 }\n-\n             },\n \n+            \"float_to_int_approx_unchecked\" => {\n+                if float_type_width(arg_tys[0]).is_none() {\n+                    span_invalid_monomorphization_error(\n+                        tcx.sess, span,\n+                        &format!(\"invalid monomorphization of `float_to_int_approx_unchecked` \\\n+                                  intrinsic: expected basic float type, \\\n+                                  found `{}`\", arg_tys[0]));\n+                    return;\n+                }\n+                match int_type_width_signed(ret_ty, self.cx) {\n+                    Some((width, signed)) => {\n+                        if signed {\n+                            self.fptosi(args[0].immediate(), self.cx.type_ix(width))\n+                        } else {\n+                            self.fptoui(args[0].immediate(), self.cx.type_ix(width))\n+                        }\n+                    }\n+                    None => {\n+                        span_invalid_monomorphization_error(\n+                            tcx.sess, span,\n+                            &format!(\"invalid monomorphization of `float_to_int_approx_unchecked` \\\n+                                      intrinsic:  expected basic integer type, \\\n+                                      found `{}`\", ret_ty));\n+                        return;\n+                    }\n+                }\n+            }\n+\n             \"discriminant_value\" => {\n                 args[0].deref(self.cx()).codegen_get_discr(self, ret_ty)\n             }"}, {"sha": "b967c6e36e35ebc209ba4f7d73e69a42254e1655", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cba479f75c7513f91f727741882a99442f393c12/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba479f75c7513f91f727741882a99442f393c12/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=cba479f75c7513f91f727741882a99442f393c12", "patch": "@@ -336,6 +336,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n                 (1, vec![param(0), param(0)], param(0)),\n             \"fadd_fast\" | \"fsub_fast\" | \"fmul_fast\" | \"fdiv_fast\" | \"frem_fast\" =>\n                 (1, vec![param(0), param(0)], param(0)),\n+            \"float_to_int_approx_unchecked\" => (2, vec![ param(0) ], param(1)),\n \n             \"assume\" => (0, vec![tcx.types.bool], tcx.mk_unit()),\n             \"likely\" => (0, vec![tcx.types.bool], tcx.types.bool),"}]}