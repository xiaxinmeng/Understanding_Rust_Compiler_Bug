{"sha": "5a69b5d0f9753a7e780849ec930b1bb48653588b", "node_id": "C_kwDOAAsO6NoAKDVhNjliNWQwZjk3NTNhN2U3ODA4NDllYzkzMGIxYmI0ODY1MzU4OGI", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-04-20T18:33:32Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-04-21T15:57:37Z"}, "message": "Changes from review", "tree": {"sha": "f281b832750475228585796d21a8be0f50bda2f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f281b832750475228585796d21a8be0f50bda2f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a69b5d0f9753a7e780849ec930b1bb48653588b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a69b5d0f9753a7e780849ec930b1bb48653588b", "html_url": "https://github.com/rust-lang/rust/commit/5a69b5d0f9753a7e780849ec930b1bb48653588b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a69b5d0f9753a7e780849ec930b1bb48653588b/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e54854f6a93f4121ac55d895830414d33bd3aa8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e54854f6a93f4121ac55d895830414d33bd3aa8e", "html_url": "https://github.com/rust-lang/rust/commit/e54854f6a93f4121ac55d895830414d33bd3aa8e"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "5b432475fc3845ef8ccc01d0070d0e1534d89d36", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a69b5d0f9753a7e780849ec930b1bb48653588b/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a69b5d0f9753a7e780849ec930b1bb48653588b/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=5a69b5d0f9753a7e780849ec930b1bb48653588b", "patch": "@@ -571,7 +571,7 @@ fn check_must_not_suspend_ty<'tcx>(\n         // FIXME: support adding the attribute to TAITs\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n             let mut has_emitted = false;\n-            for (predicate, _) in fcx.tcx.explicit_item_bounds(def).subst_identity_iter_copied() {\n+            for &(predicate, _) in fcx.tcx.explicit_item_bounds(def).skip_binder() {\n                 // We only look at the `DefId`, so it is safe to skip the binder here.\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(ref poly_trait_predicate)) =\n                     predicate.kind().skip_binder()"}, {"sha": "44e3ccf7e4b8f241fd16dff5fd7ee50fd6c25f1c", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5a69b5d0f9753a7e780849ec930b1bb48653588b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a69b5d0f9753a7e780849ec930b1bb48653588b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=5a69b5d0f9753a7e780849ec930b1bb48653588b", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::ty::codec::TyDecoder;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::GeneratorDiagnosticData;\n-use rustc_middle::ty::{self, ParameterizedOverTcx, Ty, TyCtxt, Visibility};\n+use rustc_middle::ty::{self, ParameterizedOverTcx, Predicate, Ty, TyCtxt, Visibility};\n use rustc_serialize::opaque::MemDecoder;\n use rustc_serialize::{Decodable, Decoder};\n use rustc_session::cstore::{\n@@ -857,6 +857,20 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         )\n     }\n \n+    fn get_explicit_item_bounds(\n+        self,\n+        index: DefIndex,\n+        tcx: TyCtxt<'tcx>,\n+    ) -> ty::EarlyBinder<&'tcx [(Predicate<'tcx>, Span)]> {\n+        let lazy = self.root.tables.explicit_item_bounds.get(self, index);\n+        let output = if lazy.is_default() {\n+            &mut []\n+        } else {\n+            tcx.arena.alloc_from_iter(lazy.decode((self, tcx)))\n+        };\n+        ty::EarlyBinder(&*output)\n+    }\n+\n     fn get_variant(self, kind: &DefKind, index: DefIndex, parent_did: DefId) -> ty::VariantDef {\n         let adt_kind = match kind {\n             DefKind::Variant => ty::AdtKind::Enum,"}, {"sha": "92d69aeb771fbce69275bfc57b10d48b2e3a4d2a", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a69b5d0f9753a7e780849ec930b1bb48653588b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a69b5d0f9753a7e780849ec930b1bb48653588b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=5a69b5d0f9753a7e780849ec930b1bb48653588b", "patch": "@@ -203,11 +203,7 @@ impl IntoArgs for (CrateNum, SimplifiedType) {\n }\n \n provide! { tcx, def_id, other, cdata,\n-    explicit_item_bounds => {\n-        let lazy = cdata.root.tables.explicit_item_bounds.get(cdata, def_id.index);\n-        let output = if lazy.is_default() { &mut [] } else { tcx.arena.alloc_from_iter(lazy.decode((cdata, tcx))) };\n-        ty::EarlyBinder(&*output)\n-    }\n+    explicit_item_bounds => { cdata.get_explicit_item_bounds(def_id.index, tcx) }\n     explicit_predicates_of => { table }\n     generics_of => { table }\n     inferred_outlives_of => { table_defaulted_array }"}, {"sha": "7ac87cc80fddb989d7131e0267a146f1881ec9fa", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a69b5d0f9753a7e780849ec930b1bb48653588b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a69b5d0f9753a7e780849ec930b1bb48653588b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=5a69b5d0f9753a7e780849ec930b1bb48653588b", "patch": "@@ -1611,7 +1611,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = ty.kind() else { return false };\n         let future_trait = self.require_lang_item(LangItem::Future, None);\n \n-        self.explicit_item_bounds(def_id).subst_identity_iter_copied().any(|(predicate, _)| {\n+        self.explicit_item_bounds(def_id).skip_binder().iter().any(|&(predicate, _)| {\n             let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() else {\n                 return false;\n             };"}, {"sha": "a75d3108575fd70a0e106ec60615c2296098c2e5", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a69b5d0f9753a7e780849ec930b1bb48653588b/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a69b5d0f9753a7e780849ec930b1bb48653588b/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=5a69b5d0f9753a7e780849ec930b1bb48653588b", "patch": "@@ -1800,7 +1800,7 @@ fn check_must_not_suspend_ty<'tcx>(\n         // FIXME: support adding the attribute to TAITs\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n             let mut has_emitted = false;\n-            for (predicate, _) in tcx.explicit_item_bounds(def).subst_identity_iter_copied() {\n+            for &(predicate, _) in tcx.explicit_item_bounds(def).skip_binder() {\n                 // We only look at the `DefId`, so it is safe to skip the binder here.\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(ref poly_trait_predicate)) =\n                     predicate.kind().skip_binder()"}, {"sha": "c319b2e31c7e673f1f8fe6dcd5b57708e9c4980c", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5a69b5d0f9753a7e780849ec930b1bb48653588b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a69b5d0f9753a7e780849ec930b1bb48653588b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=5a69b5d0f9753a7e780849ec930b1bb48653588b", "patch": "@@ -50,12 +50,11 @@ impl<'tcx> RustIrDatabase<'tcx> {\n     where\n         ty::Predicate<'tcx>: LowerInto<'tcx, std::option::Option<T>>,\n     {\n-        let bounds = self.interner.tcx.explicit_item_bounds(def_id);\n-        bounds\n-            .0\n-            .iter()\n-            .map(|(bound, _)| bounds.rebind(*bound).subst(self.interner.tcx, &bound_vars))\n-            .filter_map(|bound| LowerInto::<Option<_>>::lower_into(bound, self.interner))\n+        self.interner\n+            .tcx\n+            .explicit_item_bounds(def_id)\n+            .subst_iter_copied(self.interner.tcx, &bound_vars)\n+            .filter_map(|(bound, _)| LowerInto::<Option<_>>::lower_into(bound, self.interner))\n             .collect()\n     }\n }\n@@ -509,12 +508,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let explicit_item_bounds = self.interner.tcx.explicit_item_bounds(opaque_ty_id.0);\n         let bounds =\n             explicit_item_bounds\n-                .0\n-                .iter()\n+                .subst_iter_copied(self.interner.tcx, &bound_vars)\n                 .map(|(bound, _)| {\n-                    explicit_item_bounds.rebind(*bound).subst(self.interner.tcx, &bound_vars)\n-                })\n-                .map(|bound| {\n                     bound.fold_with(&mut ReplaceOpaqueTyFolder {\n                         tcx: self.interner.tcx,\n                         opaque_ty_id,"}]}