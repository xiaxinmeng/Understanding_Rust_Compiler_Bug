{"sha": "d526a8d5940182c9e020783600578a1f7b4b2122", "node_id": "C_kwDOAAsO6NoAKGQ1MjZhOGQ1OTQwMTgyYzllMDIwNzgzNjAwNTc4YTFmN2I0YjIxMjI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-03T13:44:29Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-03T13:44:29Z"}, "message": "Clean up opaque type obligations in query results", "tree": {"sha": "9e58bb7c9df4db23c277e6dbcfacce75c2f7bef8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e58bb7c9df4db23c277e6dbcfacce75c2f7bef8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d526a8d5940182c9e020783600578a1f7b4b2122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d526a8d5940182c9e020783600578a1f7b4b2122", "html_url": "https://github.com/rust-lang/rust/commit/d526a8d5940182c9e020783600578a1f7b4b2122", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d526a8d5940182c9e020783600578a1f7b4b2122/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9bb93f3a40871e54d8d1cecd239af9b0d96c7d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9bb93f3a40871e54d8d1cecd239af9b0d96c7d5", "html_url": "https://github.com/rust-lang/rust/commit/d9bb93f3a40871e54d8d1cecd239af9b0d96c7d5"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "7d86f8a763c30349fb2b0d39261e142bb2b522d1", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d526a8d5940182c9e020783600578a1f7b4b2122/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d526a8d5940182c9e020783600578a1f7b4b2122/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=d526a8d5940182c9e020783600578a1f7b4b2122", "patch": "@@ -25,7 +25,7 @@ use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, BoundVar, Const, OpaqueTypeKey, ToPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{self, BoundVar, Const, ToPredicate, Ty, TyCtxt};\n use rustc_span::Span;\n use std::fmt::Debug;\n use std::iter;\n@@ -146,13 +146,13 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         })\n     }\n \n-    fn take_opaque_types_for_query_response(&self) -> Vec<(OpaqueTypeKey<'tcx>, Ty<'tcx>)> {\n+    fn take_opaque_types_for_query_response(&self) -> Vec<(Ty<'tcx>, Ty<'tcx>)> {\n         self.inner\n             .borrow_mut()\n             .opaque_type_storage\n             .take_opaque_types()\n             .into_iter()\n-            .map(|(k, v)| (k, v.hidden_type.ty))\n+            .map(|(k, v)| (self.tcx.mk_opaque(k.def_id, k.substs), v.hidden_type.ty))\n             .collect()\n     }\n \n@@ -497,11 +497,10 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         let mut obligations = vec![];\n \n         // Carry all newly resolved opaque types to the caller's scope\n-        for &(key, ty) in &query_response.value.opaque_types {\n-            let substs = substitute_value(self.tcx, &result_subst, key.substs);\n-            let opaque = self.tcx.mk_opaque(key.def_id, substs);\n-            let ty = substitute_value(self.tcx, &result_subst, ty);\n-            obligations.extend(self.handle_opaque_type(opaque, ty, cause, param_env)?.obligations);\n+        for &(a, b) in &query_response.value.opaque_types {\n+            let a = substitute_value(self.tcx, &result_subst, a);\n+            let b = substitute_value(self.tcx, &result_subst, b);\n+            obligations.extend(self.handle_opaque_type(a, b, cause, param_env)?.obligations);\n         }\n \n         Ok(InferOk { value: result_subst, obligations })"}, {"sha": "2fc901bdbff34db5a8c4411b511f842a1cbe36f2", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d526a8d5940182c9e020783600578a1f7b4b2122/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d526a8d5940182c9e020783600578a1f7b4b2122/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=d526a8d5940182c9e020783600578a1f7b4b2122", "patch": "@@ -23,7 +23,7 @@\n \n use crate::infer::MemberConstraint;\n use crate::ty::subst::GenericArg;\n-use crate::ty::{self, BoundVar, List, OpaqueTypeKey, Region, Ty, TyCtxt};\n+use crate::ty::{self, BoundVar, List, Region, Ty, TyCtxt};\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use smallvec::SmallVec;\n@@ -178,9 +178,12 @@ pub struct QueryResponse<'tcx, R> {\n     pub var_values: CanonicalVarValues<'tcx>,\n     pub region_constraints: QueryRegionConstraints<'tcx>,\n     pub certainty: Certainty,\n-    /// List of opaque types for which we figured out a hidden type\n-    /// during the evaluation of the query.\n-    pub opaque_types: Vec<(OpaqueTypeKey<'tcx>, Ty<'tcx>)>,\n+    /// List of opaque types which we tried to compare to another type.\n+    /// Inside the query we don't know yet whether the opaque type actually\n+    /// should get its hidden type inferred. So we bubble the opaque type\n+    /// and the type it was compared against upwards and let the query caller\n+    /// handle it.\n+    pub opaque_types: Vec<(Ty<'tcx>, Ty<'tcx>)>,\n     pub value: R,\n }\n "}]}