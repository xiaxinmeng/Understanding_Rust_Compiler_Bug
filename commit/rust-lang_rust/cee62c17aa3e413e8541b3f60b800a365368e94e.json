{"sha": "cee62c17aa3e413e8541b3f60b800a365368e94e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZTYyYzE3YWEzZTQxM2U4NTQxYjNmNjBiODAwYTM2NTM2OGU5NGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T00:09:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T00:09:45Z"}, "message": "Auto merge of #75351 - JohnTitor:rollup-q9udsyx, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #74200 (Std panicking unsafe block in unsafe fn)\n - #75286 (Add additional case for Path starts with)\n - #75318 (Resolve `char` as a primitive even if there is a module in scope)\n - #75320 (Detect likely `for foo of bar` JS syntax)\n - #75328 (Cleanup E0749)\n - #75344 (Rename \"Important traits\" to \"Notable traits\")\n - #75348 (Move to intra-doc links in library/core/src/time.rs)\n - #75350 (Do not ICE when lowering invalid extern fn with bodies)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "e913b1bd95fe8377d4dec020c720ea2d7804211e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e913b1bd95fe8377d4dec020c720ea2d7804211e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cee62c17aa3e413e8541b3f60b800a365368e94e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cee62c17aa3e413e8541b3f60b800a365368e94e", "html_url": "https://github.com/rust-lang/rust/commit/cee62c17aa3e413e8541b3f60b800a365368e94e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cee62c17aa3e413e8541b3f60b800a365368e94e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5fef3c715f69bbc5ab2f9e18b9e79308f1e33ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5fef3c715f69bbc5ab2f9e18b9e79308f1e33ae", "html_url": "https://github.com/rust-lang/rust/commit/f5fef3c715f69bbc5ab2f9e18b9e79308f1e33ae"}, {"sha": "53696196932d6221d657b0dcc11f91a79344c7e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/53696196932d6221d657b0dcc11f91a79344c7e9", "html_url": "https://github.com/rust-lang/rust/commit/53696196932d6221d657b0dcc11f91a79344c7e9"}], "stats": {"total": 222, "additions": 162, "deletions": 60}, "files": [{"sha": "5741f8a53b522b96044120af538f41f58b4bfd12", "filename": "library/core/src/time.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -30,12 +30,10 @@ const MICROS_PER_SEC: u64 = 1_000_000;\n /// nanosecond-level precision, APIs binding a system timeout will typically round up\n /// the number of nanoseconds.\n ///\n-/// `Duration`s implement many common traits, including [`Add`], [`Sub`], and other\n-/// [`ops`] traits. It implements `Default` by returning a zero-length `Duration`.\n+/// [`Duration`]s implement many common traits, including [`Add`], [`Sub`], and other\n+/// [`ops`] traits. It implements [`Default`] by returning a zero-length `Duration`.\n ///\n-/// [`Add`]: ../../std/ops/trait.Add.html\n-/// [`Sub`]: ../../std/ops/trait.Sub.html\n-/// [`ops`]: ../../std/ops/index.html\n+/// [`ops`]: crate::ops\n ///\n /// # Examples\n ///\n@@ -293,7 +291,7 @@ impl Duration {\n     ///            + duration.subsec_nanos() as f64 * 1e-9);\n     /// ```\n     ///\n-    /// [`subsec_nanos`]: #method.subsec_nanos\n+    /// [`subsec_nanos`]: Duration::subsec_nanos\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[rustc_const_stable(feature = \"duration\", since = \"1.32.0\")]\n     #[inline]\n@@ -421,8 +419,6 @@ impl Duration {\n     /// Checked `Duration` addition. Computes `self + other`, returning [`None`]\n     /// if overflow occurred.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -457,8 +453,6 @@ impl Duration {\n     /// Checked `Duration` subtraction. Computes `self - other`, returning [`None`]\n     /// if the result would be negative or if overflow occurred.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -494,8 +488,6 @@ impl Duration {\n     /// Checked `Duration` multiplication. Computes `self * other`, returning\n     /// [`None`] if overflow occurred.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -526,8 +518,6 @@ impl Duration {\n     /// Checked `Duration` division. Computes `self / other`, returning [`None`]\n     /// if `other == 0`.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:"}, {"sha": "08d363a9a29649d1359f1de996bb8bcd64bc0661", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -7,6 +7,8 @@\n //! * Executing a panic up to doing the actual implementation\n //! * Shims around \"try\"\n \n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n use core::panic::{BoxMeUp, Location, PanicInfo};\n \n use crate::any::Any;\n@@ -322,25 +324,48 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n     let mut data = Data { f: ManuallyDrop::new(f) };\n \n     let data_ptr = &mut data as *mut _ as *mut u8;\n-    return if intrinsics::r#try(do_call::<F, R>, data_ptr, do_catch::<F, R>) == 0 {\n-        Ok(ManuallyDrop::into_inner(data.r))\n-    } else {\n-        Err(ManuallyDrop::into_inner(data.p))\n-    };\n+    // SAFETY:\n+    //\n+    // Access to the union's fields: this is `std` and we know that the `r#try`\n+    // intrinsic fills in the `r` or `p` union field based on its return value.\n+    //\n+    // The call to `intrinsics::r#try` is made safe by:\n+    // - `do_call`, the first argument, can be called with the initial `data_ptr`.\n+    // - `do_catch`, the second argument, can be called with the `data_ptr` as well.\n+    // See their safety preconditions for more informations\n+    unsafe {\n+        return if intrinsics::r#try(do_call::<F, R>, data_ptr, do_catch::<F, R>) == 0 {\n+            Ok(ManuallyDrop::into_inner(data.r))\n+        } else {\n+            Err(ManuallyDrop::into_inner(data.p))\n+        };\n+    }\n \n     // We consider unwinding to be rare, so mark this function as cold. However,\n     // do not mark it no-inline -- that decision is best to leave to the\n     // optimizer (in most cases this function is not inlined even as a normal,\n     // non-cold function, though, as of the writing of this comment).\n     #[cold]\n     unsafe fn cleanup(payload: *mut u8) -> Box<dyn Any + Send + 'static> {\n-        let obj = Box::from_raw(__rust_panic_cleanup(payload));\n+        // SAFETY: The whole unsafe block hinges on a correct implementation of\n+        // the panic handler `__rust_panic_cleanup`. As such we can only\n+        // assume it returns the correct thing for `Box::from_raw` to work\n+        // without undefined behavior.\n+        let obj = unsafe { Box::from_raw(__rust_panic_cleanup(payload)) };\n         panic_count::decrease();\n         obj\n     }\n \n+    // SAFETY:\n+    // data must be non-NUL, correctly aligned, and a pointer to a `Data<F, R>`\n+    // Its must contains a valid `f` (type: F) value that can be use to fill\n+    // `data.r`.\n+    //\n+    // This function cannot be marked as `unsafe` because `intrinsics::r#try`\n+    // expects normal function pointers.\n     #[inline]\n     fn do_call<F: FnOnce() -> R, R>(data: *mut u8) {\n+        // SAFETY: this is the responsibilty of the caller, see above.\n         unsafe {\n             let data = data as *mut Data<F, R>;\n             let data = &mut (*data);\n@@ -352,8 +377,21 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n     // We *do* want this part of the catch to be inlined: this allows the\n     // compiler to properly track accesses to the Data union and optimize it\n     // away most of the time.\n+    //\n+    // SAFETY:\n+    // data must be non-NUL, correctly aligned, and a pointer to a `Data<F, R>`\n+    // Since this uses `cleanup` it also hinges on a correct implementation of\n+    // `__rustc_panic_cleanup`.\n+    //\n+    // This function cannot be marked as `unsafe` because `intrinsics::r#try`\n+    // expects normal function pointers.\n     #[inline]\n     fn do_catch<F: FnOnce() -> R, R>(data: *mut u8, payload: *mut u8) {\n+        // SAFETY: this is the responsibilty of the caller, see above.\n+        //\n+        // When `__rustc_panic_cleaner` is correctly implemented we can rely\n+        // on `obj` being the correct thing to pass to `data.p` (after wrapping\n+        // in `ManuallyDrop`).\n         unsafe {\n             let data = data as *mut Data<F, R>;\n             let data = &mut (*data);"}, {"sha": "e3d529df7de1643732b64071a1fd5bf527d4ffde", "filename": "library/std/src/path.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -2031,9 +2031,13 @@ impl Path {\n     /// assert!(path.starts_with(\"/etc\"));\n     /// assert!(path.starts_with(\"/etc/\"));\n     /// assert!(path.starts_with(\"/etc/passwd\"));\n-    /// assert!(path.starts_with(\"/etc/passwd/\"));\n+    /// assert!(path.starts_with(\"/etc/passwd/\")); // extra slash is okay\n+    /// assert!(path.starts_with(\"/etc/passwd///\")); // multiple extra slashes are okay\n     ///\n     /// assert!(!path.starts_with(\"/e\"));\n+    /// assert!(!path.starts_with(\"/etc/passwd.txt\"));\n+    ///\n+    /// assert!(!Path::new(\"/etc/foo.rs\").starts_with(\"/etc/foo\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn starts_with<P: AsRef<Path>>(&self, base: P) -> bool {"}, {"sha": "66508f06b2884ccb4de9147d890d3f08fa35e8cb", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -172,7 +172,11 @@ macro_rules! __thread_local_inner {\n                 static __KEY: $crate::thread::__OsLocalKeyInner<$t> =\n                     $crate::thread::__OsLocalKeyInner::new();\n \n-                __KEY.get(__init)\n+                // FIXME: remove the #[allow(...)] marker when macros don't\n+                // raise warning for missing/extraneous unsafe blocks anymore.\n+                // See https://github.com/rust-lang/rust/issues/74838.\n+                #[allow(unused_unsafe)]\n+                unsafe { __KEY.get(__init) }\n             }\n \n             unsafe {"}, {"sha": "7cfde3fc6d2dcd1e09e49b8f0dcd1ba614353de2", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -573,7 +573,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .resolver\n             .trait_map()\n             .iter()\n-            .map(|(&k, v)| (self.node_id_to_hir_id[k].unwrap(), v.clone()))\n+            .filter_map(|(&k, v)| {\n+                self.node_id_to_hir_id.get(k).and_then(|id| id.as_ref()).map(|id| (*id, v.clone()))\n+            })\n             .collect();\n \n         let mut def_id_to_hir_id = IndexVec::default();"}, {"sha": "7a1a745b53c12b606b49b93d7ae2bdb0ae158734", "filename": "src/librustc_error_codes/error_codes/E0749.md", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustc_error_codes%2Ferror_codes%2FE0749.md", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustc_error_codes%2Ferror_codes%2FE0749.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0749.md?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -1,4 +1,19 @@\n-Negative impls are not allowed to have any items. Negative impls\n-declare that a trait is **not** implemented (and never will be) and\n-hence there is no need to specify the values for trait methods or\n-other items.\n+An item was added on a negative impl.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0749\n+# #![feature(negative_impls)]\n+trait MyTrait {\n+    type Foo;\n+}\n+\n+impl !MyTrait for u32 {\n+    type Foo = i32; // error!\n+}\n+# fn main() {}\n+```\n+\n+Negative impls are not allowed to have any items. Negative impls declare that a\n+trait is **not** implemented (and never will be) and hence there is no need to\n+specify the values for trait methods or other items."}, {"sha": "55a134ae09115ae5b32ced5f3e43e112ba03f2e1", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -1733,13 +1733,20 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(lo.to(self.prev_token.span), kind, attrs))\n     }\n \n-    fn error_missing_in_for_loop(&self) {\n-        let in_span = self.prev_token.span.between(self.token.span);\n-        self.struct_span_err(in_span, \"missing `in` in `for` loop\")\n+    fn error_missing_in_for_loop(&mut self) {\n+        let (span, msg, sugg) = if self.token.is_ident_named(sym::of) {\n+            // Possibly using JS syntax (#75311).\n+            let span = self.token.span;\n+            self.bump();\n+            (span, \"try using `in` here instead\", \"in\")\n+        } else {\n+            (self.prev_token.span.between(self.token.span), \"try adding `in` here\", \" in \")\n+        };\n+        self.struct_span_err(span, \"missing `in` in `for` loop\")\n             .span_suggestion_short(\n-                in_span,\n-                \"try adding `in` here\",\n-                \" in \".into(),\n+                span,\n+                msg,\n+                sugg.into(),\n                 // Has been misleading, at least in the past (closed Issue #48492).\n                 Applicability::MaybeIncorrect,\n             )"}, {"sha": "caa6de09664bcf1a38607114bcd31d980c3b89ae", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -737,6 +737,7 @@ symbols! {\n         not,\n         note,\n         object_safe_for_dispatch,\n+        of,\n         offset,\n         omit_gdb_pretty_printer_section,\n         on,"}, {"sha": "4cbc56333b1553476ad7bef1b58793ad7e9830e8", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -3450,7 +3450,7 @@ fn spotlight_decl(decl: &clean::FnDecl) -> String {\n                 if impl_.trait_.def_id().map_or(false, |d| c.traits[&d].is_spotlight) {\n                     if out.is_empty() {\n                         out.push_str(&format!(\n-                            \"<h3 class=\\\"important\\\">Important traits for {}</h3>\\\n+                            \"<h3 class=\\\"notable\\\">Notable traits for {}</h3>\\\n                                       <code class=\\\"content\\\">\",\n                             impl_.for_.print()\n                         ));\n@@ -3485,7 +3485,7 @@ fn spotlight_decl(decl: &clean::FnDecl) -> String {\n     if !out.is_empty() {\n         out.insert_str(\n             0,\n-            \"<span class=\\\"important-traits\\\"><span class=\\\"important-traits-tooltip\\\">\u24d8<div class='important-traits-tooltiptext'><span class=\\\"docblock\\\">\"\n+            \"<span class=\\\"notable-traits\\\"><span class=\\\"notable-traits-tooltip\\\">\u24d8<div class='notable-traits-tooltiptext'><span class=\\\"docblock\\\">\"\n \n         );\n         out.push_str(\"</code></span></div></span></span>\");"}, {"sha": "19284018a30db91372837389dde62fb02769945f", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -2636,9 +2636,9 @@ function defocusSearchBar() {\n         });\n     }());\n \n-    onEachLazy(document.getElementsByClassName(\"important-traits\"), function(e) {\n+    onEachLazy(document.getElementsByClassName(\"notable-traits\"), function(e) {\n         e.onclick = function() {\n-            this.getElementsByClassName('important-traits-tooltiptext')[0]\n+            this.getElementsByClassName('notable-traits-tooltiptext')[0]\n                 .classList.toggle(\"force-tooltip\");\n         };\n     });"}, {"sha": "db0e4f4d31df81c8ad81fa5025d7ab26c1fdf3d1", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -91,7 +91,7 @@ h2 {\n h3 {\n \tfont-size: 1.3em;\n }\n-h1, h2, h3:not(.impl):not(.method):not(.type):not(.tymethod):not(.important),\n+h1, h2, h3:not(.impl):not(.method):not(.type):not(.tymethod):not(.notable),\n h4:not(.method):not(.type):not(.tymethod):not(.associatedconstant) {\n \tfont-weight: 500;\n \tmargin: 20px 0 15px 0;\n@@ -528,7 +528,7 @@ h4 > code, h3 > code, .invisible > code {\n \tfont-size: 0.8em;\n }\n \n-.content .methods > div:not(.important-traits) {\n+.content .methods > div:not(.notable-traits) {\n \tmargin-left: 40px;\n \tmargin-bottom: 15px;\n }\n@@ -1099,17 +1099,17 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tfont-size: 20px;\n }\n \n-.important-traits-tooltip {\n+.notable-traits-tooltip {\n \tdisplay: inline-block;\n \tcursor: pointer;\n }\n \n-.important-traits:hover .important-traits-tooltiptext,\n-.important-traits .important-traits-tooltiptext.force-tooltip {\n+.notable-traits:hover .notable-traits-tooltiptext,\n+.notable-traits .notable-traits-tooltiptext.force-tooltip {\n \tdisplay: inline-block;\n }\n \n-.important-traits .important-traits-tooltiptext {\n+.notable-traits .notable-traits-tooltiptext {\n \tdisplay: none;\n \tpadding: 5px 3px 3px 3px;\n \tborder-radius: 6px;\n@@ -1121,18 +1121,18 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tborder: 1px solid;\n }\n \n-.important-traits-tooltip::after {\n+.notable-traits-tooltip::after {\n \t/* The margin on the tooltip does not capture hover events,\n \t   this extends the area of hover enough so that mouse hover is not\n \t   lost when moving the mouse to the tooltip */\n \tcontent: \"\\00a0\\00a0\\00a0\";\n }\n \n-.important-traits .important, .important-traits .docblock {\n+.notable-traits .notable, .notable-traits .docblock {\n \tmargin: 0;\n }\n \n-.important-traits .docblock code.content{\n+.notable-traits .docblock code.content{\n \tmargin: 0;\n \tpadding: 0;\n \tfont-size: 20px;\n@@ -1183,13 +1183,13 @@ pre.rust {\n \tfont-size: 16px;\n }\n \n-.important-traits {\n+.notable-traits {\n \tcursor: pointer;\n \tz-index: 2;\n \tmargin-left: 5px;\n }\n \n-h4 > .important-traits {\n+h4 > .notable-traits {\n \tposition: absolute;\n \tleft: -44px;\n \ttop: 2px;\n@@ -1431,7 +1431,7 @@ h4 > .important-traits {\n \t\tz-index: 1;\n \t}\n \n-\th4 > .important-traits {\n+\th4 > .notable-traits {\n \t\tposition: absolute;\n \t\tleft: -22px;\n \t\ttop: 24px;\n@@ -1522,7 +1522,7 @@ h4 > .important-traits {\n \t\tmargin-top: 0;\n \t}\n \n-\t.important-traits .important-traits-tooltiptext {\n+\t.notable-traits .notable-traits-tooltiptext {\n \t\tleft: 0;\n \t\ttop: 100%;\n \t}\n@@ -1544,7 +1544,7 @@ h4 > .important-traits {\n \t}\n }\n \n-h3.important {\n+h3.notable {\n \tmargin: 0;\n \tmargin-bottom: 13px;\n \tfont-size: 19px;"}, {"sha": "60f0d25b219e7a6d62c2f9f26994477e85a9b619", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -389,7 +389,7 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: transparent #314559 transparent transparent;\n }\n \n-.important-traits-tooltiptext {\n+.notable-traits-tooltiptext {\n \tbackground-color: #314559;\n \tborder-color: #5c6773;\n }"}, {"sha": "34c6cbbf4fa21e1dcc668c435a0999fa9ed561bd", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -339,7 +339,7 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: transparent black transparent transparent;\n }\n \n-.important-traits-tooltiptext {\n+.notable-traits-tooltiptext {\n \tbackground-color: #111;\n \tborder-color: #777;\n }"}, {"sha": "137aad4ed4398ed23220ac0ba9f00e2449d62d3e", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -333,7 +333,7 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: transparent black transparent transparent;\n }\n \n-.important-traits-tooltiptext {\n+.notable-traits-tooltiptext {\n \tbackground-color: #eee;\n \tborder-color: #999;\n }"}, {"sha": "062bd61a7d00279b22ac8a581da9698fbf8e256e", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -217,9 +217,11 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         return Ok((res, Some(path_str.to_owned())));\n                     }\n                     Res::Def(DefKind::Mod, _) => {\n-                        // This resolved to a module, but if we were passed `type@`,\n-                        // we want primitive types to take precedence instead.\n-                        if disambiguator == Some(Disambiguator::Namespace(Namespace::TypeNS)) {\n+                        // This resolved to a module, but we want primitive types to take precedence instead.\n+                        if matches!(\n+                            disambiguator,\n+                            None | Some(Disambiguator::Namespace(Namespace::TypeNS))\n+                        ) {\n                             if let Some(prim) = is_primitive(path_str, ns) {\n                                 if extra_fragment.is_some() {\n                                     return Err(ErrorKind::AnchorFailure(AnchorFailure::Primitive));"}, {"sha": "15ea1232fd6fb826b746ac042e88eaca15aa0caa", "filename": "src/test/rustdoc/intra-link-prim-precedence.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Ftest%2Frustdoc%2Fintra-link-prim-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Ftest%2Frustdoc%2Fintra-link-prim-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-prim-precedence.rs?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -8,5 +8,10 @@ pub mod char {}\n pub struct MyString;\n \n /// See also [char]\n-// @has intra_link_prim_precedence/struct.MyString2.html '//a/@href' 'intra_link_prim_precedence/char/index.html'\n+// @has intra_link_prim_precedence/struct.MyString2.html '//a/@href' 'https://doc.rust-lang.org/nightly/std/primitive.char.html'\n pub struct MyString2;\n+\n+/// See also [crate::char] and [mod@char]\n+// @has intra_link_prim_precedence/struct.MyString3.html '//*[@href=\"../intra_link_prim_precedence/char/index.html\"]' 'crate::char'\n+// @has - '//*[@href=\"../intra_link_prim_precedence/char/index.html\"]' 'mod@char'\n+pub struct MyString3;"}, {"sha": "305a9c3292a4cc5e61d4df6d2da86c7cc2d77d0f", "filename": "src/test/ui/issues/issue-40782.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Ftest%2Fui%2Fissues%2Fissue-40782.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Ftest%2Fui%2Fissues%2Fissue-40782.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40782.fixed?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -3,4 +3,6 @@\n fn main() {\n     for _i in 0..2 { //~ ERROR missing `in`\n     }\n+    for _i in 0..2 { //~ ERROR missing `in`\n+    }\n }"}, {"sha": "43460ec1535ce44b85b9157acfa70ac563801109", "filename": "src/test/ui/issues/issue-40782.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Ftest%2Fui%2Fissues%2Fissue-40782.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Ftest%2Fui%2Fissues%2Fissue-40782.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40782.rs?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -3,4 +3,6 @@\n fn main() {\n     for _i 0..2 { //~ ERROR missing `in`\n     }\n+    for _i of 0..2 { //~ ERROR missing `in`\n+    }\n }"}, {"sha": "81f419bf687f437319777f28335a9e62c0696012", "filename": "src/test/ui/issues/issue-40782.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Ftest%2Fui%2Fissues%2Fissue-40782.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Ftest%2Fui%2Fissues%2Fissue-40782.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40782.stderr?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -4,5 +4,11 @@ error: missing `in` in `for` loop\n LL |     for _i 0..2 {\n    |           ^ help: try adding `in` here\n \n-error: aborting due to previous error\n+error: missing `in` in `for` loop\n+  --> $DIR/issue-40782.rs:6:12\n+   |\n+LL |     for _i of 0..2 {\n+   |            ^^ help: try using `in` here instead\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "d556132e47ffd67b176ad0e17a9e0dd6876935c8", "filename": "src/test/ui/issues/issue-75283.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Ftest%2Fui%2Fissues%2Fissue-75283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Ftest%2Fui%2Fissues%2Fissue-75283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75283.rs?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -0,0 +1,6 @@\n+extern \"C\" {\n+    fn lol() { //~ ERROR incorrect function inside `extern` block\n+        println!(\"\");\n+    }\n+}\n+fn main() {}"}, {"sha": "da3800affc05a23e998d2c402ad2bb8520a57353", "filename": "src/test/ui/issues/issue-75283.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Ftest%2Fui%2Fissues%2Fissue-75283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Ftest%2Fui%2Fissues%2Fissue-75283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75283.stderr?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -0,0 +1,18 @@\n+error: incorrect function inside `extern` block\n+  --> $DIR/issue-75283.rs:2:8\n+   |\n+LL |   extern \"C\" {\n+   |   ---------- `extern` blocks define existing foreign functions and functions inside of them cannot have a body\n+LL |       fn lol() {\n+   |  ________^^^___-\n+   | |        |\n+   | |        cannot have a body\n+LL | |         println!(\"\");\n+LL | |     }\n+   | |_____- help: remove the invalid body: `;`\n+   |\n+   = help: you might have meant to write a function accessible through FFI, which can be done by writing `extern fn` outside of the `extern` block\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: aborting due to previous error\n+"}, {"sha": "2fa0f12d7e8dc5d0c3636e2e33a86a78cb697e10", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee62c17aa3e413e8541b3f60b800a365368e94e/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=cee62c17aa3e413e8541b3f60b800a365368e94e", "patch": "@@ -16,7 +16,7 @@ const EXEMPTED_FROM_TEST: &[&str] = &[\n ];\n \n // Some error codes don't have any tests apparently...\n-const IGNORE_EXPLANATION_CHECK: &[&str] = &[\"E0570\", \"E0601\", \"E0602\", \"E0639\", \"E0729\", \"E0749\"];\n+const IGNORE_EXPLANATION_CHECK: &[&str] = &[\"E0570\", \"E0601\", \"E0602\", \"E0639\", \"E0729\"];\n \n fn check_error_code_explanation(\n     f: &str,"}]}