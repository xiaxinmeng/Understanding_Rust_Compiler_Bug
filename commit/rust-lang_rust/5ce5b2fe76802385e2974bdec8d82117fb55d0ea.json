{"sha": "5ce5b2fe76802385e2974bdec8d82117fb55d0ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZTViMmZlNzY4MDIzODVlMjk3NGJkZWM4ZDgyMTE3ZmI1NWQwZWE=", "commit": {"author": {"name": "Nikolai Vazquez", "email": "nvazquez1297@gmail.com", "date": "2017-10-06T21:29:49Z"}, "committer": {"name": "Nikolai Vazquez", "email": "nvazquez1297@gmail.com", "date": "2017-10-06T21:30:20Z"}, "message": "Create Box::from_unique function\n\nProvides a reasonable interface for Box::from_raw implementation.\n\nDoes not get around the requirement of mem::transmute for converting\nback and forth between Unique and Box.", "tree": {"sha": "db879ad5860355718dc91ccdc8089cb9f3623cbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db879ad5860355718dc91ccdc8089cb9f3623cbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ce5b2fe76802385e2974bdec8d82117fb55d0ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce5b2fe76802385e2974bdec8d82117fb55d0ea", "html_url": "https://github.com/rust-lang/rust/commit/5ce5b2fe76802385e2974bdec8d82117fb55d0ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ce5b2fe76802385e2974bdec8d82117fb55d0ea/comments", "author": {"login": "nvzqz", "id": 10367662, "node_id": "MDQ6VXNlcjEwMzY3NjYy", "avatar_url": "https://avatars.githubusercontent.com/u/10367662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nvzqz", "html_url": "https://github.com/nvzqz", "followers_url": "https://api.github.com/users/nvzqz/followers", "following_url": "https://api.github.com/users/nvzqz/following{/other_user}", "gists_url": "https://api.github.com/users/nvzqz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nvzqz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nvzqz/subscriptions", "organizations_url": "https://api.github.com/users/nvzqz/orgs", "repos_url": "https://api.github.com/users/nvzqz/repos", "events_url": "https://api.github.com/users/nvzqz/events{/privacy}", "received_events_url": "https://api.github.com/users/nvzqz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nvzqz", "id": 10367662, "node_id": "MDQ6VXNlcjEwMzY3NjYy", "avatar_url": "https://avatars.githubusercontent.com/u/10367662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nvzqz", "html_url": "https://github.com/nvzqz", "followers_url": "https://api.github.com/users/nvzqz/followers", "following_url": "https://api.github.com/users/nvzqz/following{/other_user}", "gists_url": "https://api.github.com/users/nvzqz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nvzqz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nvzqz/subscriptions", "organizations_url": "https://api.github.com/users/nvzqz/orgs", "repos_url": "https://api.github.com/users/nvzqz/repos", "events_url": "https://api.github.com/users/nvzqz/events{/privacy}", "received_events_url": "https://api.github.com/users/nvzqz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "452b71a07be066432d93a93c1f9e7f10e18d7c96", "url": "https://api.github.com/repos/rust-lang/rust/commits/452b71a07be066432d93a93c1f9e7f10e18d7c96", "html_url": "https://github.com/rust-lang/rust/commit/452b71a07be066432d93a93c1f9e7f10e18d7c96"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "53d643e72884d1452c5126d841e0283950c72304", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5ce5b2fe76802385e2974bdec8d82117fb55d0ea/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce5b2fe76802385e2974bdec8d82117fb55d0ea/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=5ce5b2fe76802385e2974bdec8d82117fb55d0ea", "patch": "@@ -269,7 +269,34 @@ impl<T: ?Sized> Box<T> {\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n     pub unsafe fn from_raw(raw: *mut T) -> Self {\n-        mem::transmute(raw)\n+        Box::from_unique(Unique::new_unchecked(raw))\n+    }\n+\n+    /// Constructs a `Box` from a `Unique<T>` pointer.\n+    ///\n+    /// After calling this function, the memory is owned by a `Box` and `T` then\n+    /// be destroyed and released upon drop.\n+    ///\n+    /// # Safety\n+    ///\n+    /// A `Unique<T>` can be safely created via [`Unique::new`] and thus doesn't\n+    /// necessarily own the data pointed to nor is the data guaranteed to live\n+    /// as long as the pointer.\n+    ///\n+    /// [`Unique::new`]: ../../core/ptr/struct.Unique.html#method.new\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = Box::new(5);\n+    /// let ptr = Box::into_unique(x);\n+    /// let x = unsafe { Box::from_unique(ptr) };\n+    /// ```\n+    #[unstable(feature = \"unique\", reason = \"needs an RFC to flesh out design\",\n+               issue = \"27730\")]\n+    #[inline]\n+    pub unsafe fn from_unique(u: Unique<T>) -> Self {\n+        mem::transmute(u)\n     }\n \n     /// Consumes the `Box`, returning the wrapped raw pointer.\n@@ -303,13 +330,18 @@ impl<T: ?Sized> Box<T> {\n     /// After calling this function, the caller is responsible for the\n     /// memory previously managed by the `Box`. In particular, the\n     /// caller should properly destroy `T` and release the memory. The\n-    /// proper way to do so is to convert the raw pointer back into a\n-    /// `Box` with the [`Box::from_raw`] function.\n+    /// proper way to do so is to either convert the `Unique<T>` pointer:\n+    ///\n+    /// - Into a `Box` with the [`Box::from_unique`] function.\n+    ///\n+    /// - Into a raw pointer and back into a `Box` with the [`Box::from_raw`]\n+    ///   function.\n     ///\n     /// Note: this is an associated function, which means that you have\n     /// to call it as `Box::into_unique(b)` instead of `b.into_unique()`. This\n     /// is so that there is no conflict with a method on the inner type.\n     ///\n+    /// [`Box::from_unique`]: struct.Box.html#method.from_unique\n     /// [`Box::from_raw`]: struct.Box.html#method.from_raw\n     ///\n     /// # Examples"}]}