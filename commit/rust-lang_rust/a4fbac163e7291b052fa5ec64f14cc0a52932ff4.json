{"sha": "a4fbac163e7291b052fa5ec64f14cc0a52932ff4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZmJhYzE2M2U3MjkxYjA1MmZhNWVjNjRmMTRjYzBhNTI5MzJmZjQ=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-02-22T14:09:24Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-12T12:16:14Z"}, "message": "Implement valtree\n\nvaltree is a version of constants that is inherently safe to be used within types.\nThis is in contrast to ty::Const which can have different representations of the same value. These representation differences can show up in hashing or equality comparisons, breaking type equality of otherwise equal types.\nvaltrees do not have this problem.", "tree": {"sha": "a22e430dc163277eee97d277e2278dbf558e4ac2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a22e430dc163277eee97d277e2278dbf558e4ac2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4fbac163e7291b052fa5ec64f14cc0a52932ff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4fbac163e7291b052fa5ec64f14cc0a52932ff4", "html_url": "https://github.com/rust-lang/rust/commit/a4fbac163e7291b052fa5ec64f14cc0a52932ff4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31", "html_url": "https://github.com/rust-lang/rust/commit/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31"}], "stats": {"total": 138, "additions": 132, "deletions": 6}, "files": [{"sha": "ba9b285e8e61cbe5702a374e178f62e55a2bd7f4", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=a4fbac163e7291b052fa5ec64f14cc0a52932ff4", "patch": "@@ -13,7 +13,7 @@ use crate::ty::{ParamEnv, ScalarInt, Ty, TyCtxt};\n use super::{AllocId, Allocation, InterpResult, Pointer, PointerArithmetic};\n \n /// Represents the result of const evaluation via the `eval_to_allocation` query.\n-#[derive(Clone, HashStable, TyEncodable, TyDecodable, Debug)]\n+#[derive(Copy, Clone, HashStable, TyEncodable, TyDecodable, Debug, Hash, Eq, PartialEq)]\n pub struct ConstAlloc<'tcx> {\n     // the value lives here, at offset 0, and that allocation definitely is a `AllocKind::Memory`\n     // (so you can use `AllocMap::unwrap_memory`)."}, {"sha": "b0c066fb42f8a512dd635c5b60401d94b718c562", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=a4fbac163e7291b052fa5ec64f14cc0a52932ff4", "patch": "@@ -785,6 +785,14 @@ rustc_queries! {\n         cache_on_disk_if { true }\n     }\n \n+    /// Convert an evaluated constant to a type level constant or\n+    /// return `None` if that is not possible.\n+    query const_to_valtree(\n+        key: ty::ParamEnvAnd<'tcx, ConstAlloc<'tcx>>\n+    ) -> Option<ty::ValTree> {\n+        desc { \"destructure constant\" }\n+    }\n+\n     /// Destructure a constant ADT or array into its variant index and its\n     /// field values.\n     query destructure_const("}, {"sha": "622f8e8ff6cce0781b7b54e880f0acf1f46fc6c5", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=a4fbac163e7291b052fa5ec64f14cc0a52932ff4", "patch": "@@ -10,9 +10,11 @@ use rustc_macros::HashStable;\n \n mod int;\n mod kind;\n+mod valtree;\n \n pub use int::*;\n pub use kind::*;\n+pub use valtree::*;\n \n /// Typed constant value.\n #[derive(Copy, Clone, Debug, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]"}, {"sha": "9b42023f0540e0cc1211f37181a2ba621bc8ebcd", "filename": "compiler/rustc_middle/src/ty/consts/valtree.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs?ref=a4fbac163e7291b052fa5ec64f14cc0a52932ff4", "patch": "@@ -0,0 +1,15 @@\n+use super::ScalarInt;\n+use rustc_macros::HashStable;\n+\n+#[derive(Clone, Debug, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]\n+#[derive(HashStable)]\n+pub enum ValTree {\n+    Leaf(ScalarInt),\n+    Branch(Vec<ValTree>),\n+}\n+\n+impl ValTree {\n+    pub fn zst() -> Self {\n+        Self::Branch(Vec::new())\n+    }\n+}"}, {"sha": "5bbf7b35d3d74cb646bc0546b5f172ac0cfe3eea", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=a4fbac163e7291b052fa5ec64f14cc0a52932ff4", "patch": "@@ -55,7 +55,7 @@ pub use rustc_type_ir::*;\n \n pub use self::binding::BindingMode;\n pub use self::binding::BindingMode::*;\n-pub use self::consts::{Const, ConstInt, ConstKind, InferConst, ScalarInt};\n+pub use self::consts::{Const, ConstInt, ConstKind, InferConst, ScalarInt, ValTree};\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n     CtxtInterners, DelaySpanBugEmitted, FreeRegionInfo, GeneratorInteriorTypeCause, GlobalCtxt,"}, {"sha": "48e777f7158fd5cfbc790d12a3049b782ecf9537", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=a4fbac163e7291b052fa5ec64f14cc0a52932ff4", "patch": "@@ -14,8 +14,8 @@ use crate::middle::resolve_lifetime::{ObjectLifetimeDefault, Region, ResolveLife\n use crate::middle::stability::{self, DeprecationEntry};\n use crate::mir;\n use crate::mir::interpret::GlobalId;\n+use crate::mir::interpret::{ConstAlloc, LitToConstError, LitToConstInput};\n use crate::mir::interpret::{ConstValue, EvalToAllocationRawResult, EvalToConstValueResult};\n-use crate::mir::interpret::{LitToConstError, LitToConstInput};\n use crate::mir::mono::CodegenUnit;\n use crate::traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,"}, {"sha": "fbd2d5d78a72a9e490b3d36939caf49b18cfc26b", "filename": "compiler/rustc_mir/src/const_eval/mod.rs", "status": "modified", "additions": 90, "deletions": 2, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs?ref=a4fbac163e7291b052fa5ec64f14cc0a52932ff4", "patch": "@@ -3,12 +3,15 @@\n use std::convert::TryFrom;\n \n use rustc_hir::Mutability;\n-use rustc_middle::mir;\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::{\n+    mir::{self, interpret::ConstAlloc},\n+    ty::ScalarInt,\n+};\n use rustc_span::{source_map::DUMMY_SP, symbol::Symbol};\n \n use crate::interpret::{\n-    intern_const_alloc_recursive, ConstValue, InternKind, InterpCx, MemPlaceMeta, Scalar,\n+    intern_const_alloc_recursive, ConstValue, InternKind, InterpCx, MPlaceTy, MemPlaceMeta, Scalar,\n };\n \n mod error;\n@@ -35,6 +38,91 @@ pub(crate) fn const_caller_location(\n     ConstValue::Scalar(loc_place.ptr)\n }\n \n+/// Convert an evaluated constant to a type level constant\n+pub(crate) fn const_to_valtree<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    raw: ConstAlloc<'tcx>,\n+) -> Option<ty::ValTree> {\n+    let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n+    let place = ecx.raw_const_to_mplace(raw).unwrap();\n+    const_to_valtree_inner(&ecx, &place)\n+}\n+\n+fn const_to_valtree_inner<'tcx>(\n+    ecx: &CompileTimeEvalContext<'tcx, 'tcx>,\n+    place: &MPlaceTy<'tcx>,\n+) -> Option<ty::ValTree> {\n+    let branches = |n, variant| {\n+        let place = match variant {\n+            Some(variant) => ecx.mplace_downcast(&place, variant).unwrap(),\n+            None => *place,\n+        };\n+        let variant =\n+            variant.map(|variant| Some(ty::ValTree::Leaf(ScalarInt::from(variant.as_u32()))));\n+        let fields = (0..n).map(|i| {\n+            let field = ecx.mplace_field(&place, i).unwrap();\n+            const_to_valtree_inner(ecx, &field)\n+        });\n+        Some(ty::ValTree::Branch(variant.into_iter().chain(fields).collect::<Option<_>>()?))\n+    };\n+    match place.layout.ty.kind() {\n+        ty::FnDef(..) => Some(ty::ValTree::zst()),\n+        ty::Bool | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Char => {\n+            let val = ecx.read_immediate(&place.into()).unwrap();\n+            let val = val.to_scalar().unwrap();\n+            Some(ty::ValTree::Leaf(val.assert_int()))\n+        }\n+\n+        // Raw pointers are not allowed in type level constants, as raw pointers cannot be treated\n+        // like references. If we looked behind the raw pointer, we may be breaking the meaning of\n+        // the raw pointer. Equality on raw pointers is performed on the pointer and not on the pointee,\n+        // and we cannot guarantee any kind of pointer stability in the type system.\n+        // Technically we could allow function pointers, but they are not guaranteed to be the\n+        // same as the function pointers at runtime.\n+        ty::FnPtr(_) | ty::RawPtr(_) => None,\n+        ty::Ref(..) => unimplemented!(\"need to use deref_const\"),\n+\n+        ty::Dynamic(..) => unimplemented!(\n+            \"for trait objects we must look at the vtable and figure out the real type\"\n+        ),\n+\n+        ty::Slice(_) | ty::Str => {\n+            unimplemented!(\"need to find the backing data of the slice/str and recurse on that\")\n+        }\n+        ty::Tuple(substs) => branches(substs.len(), None),\n+        ty::Array(_, len) => branches(usize::try_from(len.eval_usize(ecx.tcx.tcx, ecx.param_env)).unwrap(), None),\n+\n+        ty::Adt(def, _) => {\n+            if def.variants.is_empty() {\n+                // Uninhabited\n+                return None;\n+            }\n+\n+            let variant = ecx.read_discriminant(&place.into()).unwrap().1;\n+\n+            branches(def.variants[variant].fields.len(), Some(variant))\n+        }\n+\n+        ty::Never\n+        | ty::Error(_)\n+        | ty::Foreign(..)\n+        | ty::Infer(ty::FreshIntTy(_))\n+        | ty::Infer(ty::FreshFloatTy(_))\n+        | ty::Projection(..)\n+        | ty::Param(_)\n+        | ty::Bound(..)\n+        | ty::Placeholder(..)\n+        // FIXME(oli-obk): we could look behind opaque types\n+        | ty::Opaque(..)\n+        | ty::Infer(_)\n+        // FIXME(oli-obk): we can probably encode closures just like structs\n+        | ty::Closure(..)\n+        | ty::Generator(..)\n+        | ty::GeneratorWitness(..) => None,\n+    }\n+}\n+\n /// This function uses `unwrap` copiously, because an already validated constant\n /// must have valid fields and can thus never fail outside of compiler bugs. However, it is\n /// invoked from the pretty printer, where it can receive enums with no variants and e.g."}, {"sha": "699b531f501885aa91ce5580b1c4f4fe43cf79cc", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=a4fbac163e7291b052fa5ec64f14cc0a52932ff4", "patch": "@@ -531,7 +531,7 @@ where\n         base.offset(from_offset, meta, layout, self)\n     }\n \n-    pub(super) fn mplace_downcast(\n+    pub(crate) fn mplace_downcast(\n         &self,\n         base: &MPlaceTy<'tcx, M::PointerTag>,\n         variant: VariantIdx,"}, {"sha": "194bc74c0fb1a8b28269074a87f750564c997534", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=a4fbac163e7291b052fa5ec64f14cc0a52932ff4", "patch": "@@ -63,6 +63,10 @@ pub fn provide(providers: &mut Providers) {\n         let (param_env, value) = param_env_and_value.into_parts();\n         const_eval::destructure_const(tcx, param_env, value)\n     };\n+    providers.const_to_valtree = |tcx, param_env_and_value| {\n+        let (param_env, raw) = param_env_and_value.into_parts();\n+        const_eval::const_to_valtree(tcx, param_env, raw)\n+    };\n     providers.deref_const = |tcx, param_env_and_value| {\n         let (param_env, value) = param_env_and_value.into_parts();\n         const_eval::deref_const(tcx, param_env, value)"}, {"sha": "e467f41986332a5472836dd82bb8b2f23be8b770", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fbac163e7291b052fa5ec64f14cc0a52932ff4/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=a4fbac163e7291b052fa5ec64f14cc0a52932ff4", "patch": "@@ -228,6 +228,15 @@ impl<'tcx> Key for (&'tcx ty::Const<'tcx>, mir::Field) {\n     }\n }\n \n+impl<'tcx> Key for mir::interpret::ConstAlloc<'tcx> {\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, _: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl<'tcx> Key for ty::PolyTraitRef<'tcx> {\n     fn query_crate(&self) -> CrateNum {\n         self.def_id().krate"}]}