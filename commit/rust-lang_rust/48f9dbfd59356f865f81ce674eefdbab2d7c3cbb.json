{"sha": "48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZjlkYmZkNTkzNTZmODY1ZjgxY2U2NzRlZWZkYmFiMmQ3YzNjYmI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-01-24T11:50:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-01-24T12:34:34Z"}, "message": "clean up some const error reporting around promoteds", "tree": {"sha": "32f1a61dd64449d8ae99b6e16f948f080a1e837a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32f1a61dd64449d8ae99b6e16f948f080a1e837a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "html_url": "https://github.com/rust-lang/rust/commit/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "html_url": "https://github.com/rust-lang/rust/commit/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5"}], "stats": {"total": 210, "additions": 66, "deletions": 144}, "files": [{"sha": "5702832bcb67d99ac60baa6cb5bbd75bcedc5908", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -134,11 +134,9 @@ pub(crate) fn codegen_constant<'tcx>(\n             {\n                 Ok(const_val) => const_val,\n                 Err(_) => {\n-                    if promoted.is_none() {\n-                        fx.tcx\n-                            .sess\n-                            .span_err(constant.span, \"erroneous constant encountered\");\n-                    }\n+                    fx.tcx\n+                        .sess\n+                        .span_err(constant.span, \"erroneous constant encountered\");\n                     return crate::trap::trap_unreachable_ret_value(\n                         fx,\n                         fx.layout_of(const_.ty),"}, {"sha": "b79a221a0e74acb16f08b6320bbfe2dcb0bba6fe", "filename": "compiler/rustc_codegen_ssa/src/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -30,12 +30,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 .tcx()\n                 .const_eval_resolve(ty::ParamEnv::reveal_all(), def, substs, promoted, None)\n                 .map_err(|err| {\n-                    if promoted.is_none() {\n-                        self.cx\n-                            .tcx()\n-                            .sess\n-                            .span_err(constant.span, \"erroneous constant encountered\");\n-                    }\n+                    self.cx.tcx().sess.span_err(constant.span, \"erroneous constant encountered\");\n                     err\n                 }),\n             ty::ConstKind::Value(value) => Ok(value),"}, {"sha": "252f5e7ef2ff2081f7719d98188e6dc501dc3f81", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 28, "deletions": 74, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -298,90 +298,44 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n         tcx.def_span(def.did),\n         key.param_env,\n         CompileTimeInterpreter::new(tcx.sess.const_eval_limit()),\n+        // Statics (and promoteds inside statics) may access other statics, because unlike consts\n+        // they do not have to behave \"as if\" they were evaluated at runtime.\n         MemoryExtra { can_access_statics: is_static },\n     );\n \n     let res = ecx.load_mir(cid.instance.def, cid.promoted);\n     match res.and_then(|body| eval_body_using_ecx(&mut ecx, cid, &body)) {\n         Err(error) => {\n             let err = ConstEvalErr::new(&ecx, error, None);\n-            // errors in statics are always emitted as fatal errors\n-            if is_static {\n-                // Ensure that if the above error was either `TooGeneric` or `Reported`\n-                // an error must be reported.\n-                let v = err.report_as_error(\n-                    ecx.tcx.at(ecx.cur_span()),\n-                    \"could not evaluate static initializer\",\n-                );\n-\n-                // If this is `Reveal:All`, then we need to make sure an error is reported but if\n-                // this is `Reveal::UserFacing`, then it's expected that we could get a\n-                // `TooGeneric` error. When we fall back to `Reveal::All`, then it will either\n-                // succeed or we'll report this error then.\n-                if key.param_env.reveal() == Reveal::All {\n-                    tcx.sess.delay_span_bug(\n-                        err.span,\n-                        &format!(\"static eval failure did not emit an error: {:#?}\", v),\n-                    );\n-                }\n-\n-                Err(v)\n-            } else if let Some(def) = def.as_local() {\n-                // constant defined in this crate, we can figure out a lint level!\n-                match tcx.def_kind(def.did.to_def_id()) {\n-                    // constants never produce a hard error at the definition site. Anything else is\n-                    // a backwards compatibility hazard (and will break old versions of winapi for\n-                    // sure)\n-                    //\n-                    // note that validation may still cause a hard error on this very same constant,\n-                    // because any code that existed before validation could not have failed\n-                    // validation thus preventing such a hard error from being a backwards\n-                    // compatibility hazard\n-                    DefKind::Const | DefKind::AssocConst => {\n-                        let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n-                        Err(err.report_as_lint(\n-                            tcx.at(tcx.def_span(def.did)),\n-                            \"any use of this value will cause an error\",\n-                            hir_id,\n-                            Some(err.span),\n-                        ))\n-                    }\n-                    // promoting runtime code is only allowed to error if it references broken\n-                    // constants any other kind of error will be reported to the user as a\n-                    // deny-by-default lint\n-                    _ => {\n-                        if let Some(p) = cid.promoted {\n-                            let span = tcx.promoted_mir_opt_const_arg(def.to_global())[p].span;\n-                            if let err_inval!(ReferencedConstant) = err.error {\n-                                Err(err.report_as_error(\n-                                    tcx.at(span),\n-                                    \"evaluation of constant expression failed\",\n-                                ))\n-                            } else {\n-                                Err(err.report_as_lint(\n-                                    tcx.at(span),\n-                                    \"reaching this expression at runtime will panic or abort\",\n-                                    tcx.hir().local_def_id_to_hir_id(def.did),\n-                                    Some(err.span),\n-                                ))\n-                            }\n-                        // anything else (array lengths, enum initializers, constant patterns) are\n-                        // reported as hard errors\n-                        } else {\n-                            Err(err.report_as_error(\n-                                ecx.tcx.at(ecx.cur_span()),\n-                                \"evaluation of constant value failed\",\n-                            ))\n-                        }\n-                    }\n-                }\n+            // Some CTFE errors raise just a lint, not a hard error; see\n+            // <https://github.com/rust-lang/rust/issues/71800>.\n+            let emit_as_lint = if let Some(def) = def.as_local() {\n+                // (Associated) consts only emit a lint, since they might be unused.\n+                matches!(tcx.def_kind(def.did.to_def_id()), DefKind::Const | DefKind::AssocConst)\n             } else {\n-                // use of broken constant from other crate\n-                Err(err.report_as_error(ecx.tcx.at(ecx.cur_span()), \"could not evaluate constant\"))\n+                // use of broken constant from other crate: always an error\n+                false\n+            };\n+            if emit_as_lint {\n+                let hir_id = tcx.hir().local_def_id_to_hir_id(def.as_local().unwrap().did);\n+                Err(err.report_as_lint(\n+                    tcx.at(tcx.def_span(def.did)),\n+                    \"any use of this value will cause an error\",\n+                    hir_id,\n+                    Some(err.span),\n+                ))\n+            } else {\n+                let msg = if is_static {\n+                    \"could not evaluate static initializer\"\n+                } else {\n+                    \"evaluation of constant value failed\"\n+                };\n+                Err(err.report_as_error(ecx.tcx.at(ecx.cur_span()), msg))\n             }\n         }\n         Ok(mplace) => {\n-            // Since evaluation had no errors, valiate the resulting constant:\n+            // Since evaluation had no errors, validate the resulting constant.\n+            // This is a separate `try` block to provide more targeted error reporting.\n             let validation = try {\n                 let mut ref_tracking = RefTracking::new(mplace);\n                 let mut inner = false;\n@@ -399,7 +353,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                 }\n             };\n             if let Err(error) = validation {\n-                // Validation failed, report an error\n+                // Validation failed, report an error. This is always a hard error.\n                 let err = ConstEvalErr::new(&ecx, error, None);\n                 Err(err.struct_error(\n                     ecx.tcx,"}, {"sha": "b0a4c7722e3ceafa2883292986ae790a30dc8555", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -31,7 +31,7 @@ impl Tr for u32 {\n fn main() {\n     assert_eq!(<() as Tr>::A, 255);\n     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n-    //~^ ERROR evaluation of constant expression failed\n+    //~^ ERROR evaluation of constant value failed\n     //~| ERROR erroneous constant used\n \n     assert_eq!(<u8 as Tr>::A, 254);"}, {"sha": "cbaaed0508b98c0e605b83ff2b7b8f3d686031cd", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -8,15 +8,11 @@ LL |     const B: u8 = Self::A + 1;\n    |\n    = note: `#[deny(const_err)]` on by default\n \n-error[E0080]: evaluation of constant expression failed\n-  --> $DIR/defaults-not-assumed-fail.rs:33:5\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/defaults-not-assumed-fail.rs:33:16\n    |\n LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n-   |     ^^^^^^^^^^^-------------^^^^^\n-   |                |\n-   |                referenced constant has errors\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |                ^^^^^^^^^^^^^ referenced constant has errors\n \n error: erroneous constant used\n   --> $DIR/defaults-not-assumed-fail.rs:33:5"}, {"sha": "c2adff116ef20b02ce94d69af2f4bba6ee338f73", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -12,7 +12,7 @@ note: the lint level is defined here\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n-error[E0080]: evaluation of constant expression failed\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/conditional_array_execution.rs:11:20\n    |\n LL |     println!(\"{}\", FOO);"}, {"sha": "cbfeca240266679e8a5c66ffafc6da822011450c", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -21,6 +21,6 @@ const X: i32 = 1 / 0; //~WARN any use of this value will cause an error\n \n fn main() {\n     let x: &'static i32 = &X;\n-    //~^ ERROR evaluation of constant expression failed\n+    //~^ ERROR evaluation of constant value failed\n     println!(\"x={}\", x);\n }"}, {"sha": "3e727b84aed109da65bf67b490758a0b6febe1ea", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -12,13 +12,11 @@ note: the lint level is defined here\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n \n-error[E0080]: evaluation of constant expression failed\n-  --> $DIR/const-eval-query-stack.rs:23:27\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-query-stack.rs:23:28\n    |\n LL |     let x: &'static i32 = &X;\n-   |                           ^-\n-   |                            |\n-   |                            referenced constant has errors\n+   |                            ^ referenced constant has errors\n query stack during panic:\n #0 [normalize_generic_arg_after_erasing_regions] normalizing `main::promoted[1]`\n #1 [optimized_mir] optimizing MIR for `main`"}, {"sha": "0a2532973f42302f96ad77e912e461efd2826c87", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -18,7 +18,7 @@ const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n \n fn main() {\n     assert_eq!(Y, 4);\n-    //~^ ERROR evaluation of constant expression failed\n+    //~^ ERROR evaluation of constant value failed\n     assert_eq!(Z, 4);\n-    //~^ ERROR evaluation of constant expression failed\n+    //~^ ERROR evaluation of constant value failed\n }"}, {"sha": "2afedf30563a60c6403748bf558dbaed885f22a3", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -1,22 +1,14 @@\n-error[E0080]: evaluation of constant expression failed\n-  --> $DIR/const_fn_ptr_fail2.rs:20:5\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_fn_ptr_fail2.rs:20:16\n    |\n LL |     assert_eq!(Y, 4);\n-   |     ^^^^^^^^^^^-^^^^^\n-   |                |\n-   |                referenced constant has errors\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |                ^ referenced constant has errors\n \n-error[E0080]: evaluation of constant expression failed\n-  --> $DIR/const_fn_ptr_fail2.rs:22:5\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_fn_ptr_fail2.rs:22:16\n    |\n LL |     assert_eq!(Z, 4);\n-   |     ^^^^^^^^^^^-^^^^^\n-   |                |\n-   |                referenced constant has errors\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |                ^ referenced constant has errors\n \n warning: skipping const checks\n    |"}, {"sha": "7d1d33288a907ff5741928c20c11bf8d14e7be77", "filename": "src/test/ui/consts/const-eval/issue-43197.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -12,8 +12,8 @@ fn main() {\n     const Y: u32 = foo(0 - 1);\n     //~^ WARN any use of this value will cause\n     println!(\"{} {}\", X, Y);\n-    //~^ ERROR evaluation of constant expression failed\n-    //~| ERROR evaluation of constant expression failed\n+    //~^ ERROR evaluation of constant value failed\n+    //~| ERROR evaluation of constant value failed\n     //~| WARN erroneous constant used [const_err]\n     //~| WARN erroneous constant used [const_err]\n }"}, {"sha": "8c72b591416877eaf3546474d07fa779595ada6f", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -20,7 +20,7 @@ LL |     const Y: u32 = foo(0 - 1);\n    |                        |\n    |                        attempt to compute `0_u32 - 1_u32`, which would overflow\n \n-error[E0080]: evaluation of constant expression failed\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-43197.rs:14:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n@@ -32,7 +32,7 @@ warning: erroneous constant used\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n \n-error[E0080]: evaluation of constant expression failed\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-43197.rs:14:26\n    |\n LL |     println!(\"{} {}\", X, Y);"}, {"sha": "79f1301a2f944194d246a72ea527acc9df7054da", "filename": "src/test/ui/consts/const-eval/issue-44578.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -25,5 +25,5 @@ impl Foo for u16 {\n \n fn main() {\n     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-    //~^ ERROR evaluation of constant expression failed [E0080]\n+    //~^ ERROR evaluation of constant value failed [E0080]\n }"}, {"sha": "bff9f40f82b351cfefbb089f4a04115c87173eb6", "filename": "src/test/ui/consts/const-eval/issue-44578.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -1,4 +1,4 @@\n-error[E0080]: evaluation of constant expression failed\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-44578.rs:27:20\n    |\n LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);"}, {"sha": "f929f500cf9fbd8cf0c136817035989a37e88ed7", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -8,13 +8,11 @@ LL |     const BAR: usize = [5, 6, 7][T::BOO];\n    |\n    = note: `#[deny(const_err)]` on by default\n \n-error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-50814-2.rs:18:5\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-50814-2.rs:18:6\n    |\n LL |     &<A<T> as Foo<T>>::BAR\n-   |     ^---------------------\n-   |      |\n-   |      referenced constant has errors\n+   |      ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error: aborting due to 2 previous errors\n "}, {"sha": "307fb3c8c9de1fbd116ffe2096038cb00b075268", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -8,13 +8,11 @@ LL |     const MAX: u8 = A::MAX + B::MAX;\n    |\n    = note: `#[deny(const_err)]` on by default\n \n-error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-50814.rs:20:5\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-50814.rs:20:6\n    |\n LL |     &Sum::<U8,U8>::MAX\n-   |     ^-----------------\n-   |      |\n-   |      referenced constant has errors\n+   |      ^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6dddc7ff6e9d2c45bf274ae2be22a051037c6010", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -20,15 +20,11 @@ note: the lint level is defined here\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n \n-error[E0080]: evaluation of constant expression failed\n-  --> $DIR/const_unsafe_unreachable_ub.rs:17:3\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_unsafe_unreachable_ub.rs:17:14\n    |\n LL |   assert_eq!(BAR, true);\n-   |   ^^^^^^^^^^^---^^^^^^^^\n-   |              |\n-   |              referenced constant has errors\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |              ^^^ referenced constant has errors\n \n error: erroneous constant used\n   --> $DIR/const_unsafe_unreachable_ub.rs:17:3"}, {"sha": "ede5487b65d3965da5c78c2b8919100cd4601a84", "filename": "src/test/ui/consts/issue-55878.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48f9dbfd59356f865f81ce674eefdbab2d7c3cbb/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.stderr?ref=48f9dbfd59356f865f81ce674eefdbab2d7c3cbb", "patch": "@@ -2,15 +2,12 @@ error[E0080]: values of the type `[u8; SIZE]` are too big for the current archit\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL |     intrinsics::size_of::<T>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     inside `std::mem::size_of::<[u8; SIZE]>` at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |     inside `main` at $DIR/issue-55878.rs:7:26\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ inside `std::mem::size_of::<[u8; SIZE]>` at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    | \n   ::: $DIR/issue-55878.rs:7:26\n    |\n LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n-   |                          ----------------------------------------------\n+   |                          ---------------------------------------------- inside `main` at $DIR/issue-55878.rs:7:26\n \n error: erroneous constant used\n   --> $DIR/issue-55878.rs:7:26"}]}