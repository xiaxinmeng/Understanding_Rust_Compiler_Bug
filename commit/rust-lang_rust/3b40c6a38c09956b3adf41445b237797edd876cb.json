{"sha": "3b40c6a38c09956b3adf41445b237797edd876cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNDBjNmEzOGMwOTk1NmIzYWRmNDE0NDViMjM3Nzk3ZWRkODc2Y2I=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-08-30T23:03:39Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-08-30T23:03:39Z"}, "message": "Merge pull request #221 from marcusklaas/diff-context\n\nRefactor diff handling in tests", "tree": {"sha": "8301ad51c01f701d8f638ce3ca81122995b324ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8301ad51c01f701d8f638ce3ca81122995b324ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b40c6a38c09956b3adf41445b237797edd876cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b40c6a38c09956b3adf41445b237797edd876cb", "html_url": "https://github.com/rust-lang/rust/commit/3b40c6a38c09956b3adf41445b237797edd876cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b40c6a38c09956b3adf41445b237797edd876cb/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b59ab9c13f8bacfc7c7a04b9c9713cdcf1ed67e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b59ab9c13f8bacfc7c7a04b9c9713cdcf1ed67e4", "html_url": "https://github.com/rust-lang/rust/commit/b59ab9c13f8bacfc7c7a04b9c9713cdcf1ed67e4"}, {"sha": "adeafb3e45473920dff899180f4bef9132fc15bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/adeafb3e45473920dff899180f4bef9132fc15bd", "html_url": "https://github.com/rust-lang/rust/commit/adeafb3e45473920dff899180f4bef9132fc15bd"}], "stats": {"total": 147, "additions": 124, "deletions": 23}, "files": [{"sha": "be9e8be98cab18720f08abeda9c698cf19066d3f", "filename": "Cargo.lock", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3b40c6a38c09956b3adf41445b237797edd876cb/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3b40c6a38c09956b3adf41445b237797edd876cb/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3b40c6a38c09956b3adf41445b237797edd876cb", "patch": "@@ -6,6 +6,7 @@ dependencies = [\n  \"regex 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.0.1 (git+https://github.com/nrc/strings.rs.git)\",\n+ \"term 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -22,6 +23,15 @@ name = \"diff\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"kernel32-sys\"\n+version = \"0.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"libc\"\n version = \"0.1.8\"\n@@ -60,6 +70,15 @@ name = \"strings\"\n version = \"0.0.1\"\n source = \"git+https://github.com/nrc/strings.rs.git#6d748148fbe3bf2d9e5ac2ede65ac503d7491a4f\"\n \n+[[package]]\n+name = \"term\"\n+version = \"0.2.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"toml\"\n version = \"0.1.21\"\n@@ -68,3 +87,13 @@ dependencies = [\n  \"rustc-serialize 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"winapi\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"winapi-build\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+"}, {"sha": "4716be7098e0a1c4001b76847c06ec1980d43476", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b40c6a38c09956b3adf41445b237797edd876cb/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3b40c6a38c09956b3adf41445b237797edd876cb/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=3b40c6a38c09956b3adf41445b237797edd876cb", "patch": "@@ -19,3 +19,4 @@ rustc-serialize = \"0.3.14\"\n [dev-dependencies]\n diff = \"0.1.0\"\n regex = \"0.1\"\n+term = \"0.2\""}, {"sha": "d6ba46c9cf5b6bc38a782ec766352408569989a4", "filename": "tests/system.rs", "status": "modified", "additions": 94, "deletions": 23, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/3b40c6a38c09956b3adf41445b237797edd876cb/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b40c6a38c09956b3adf41445b237797edd876cb/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=3b40c6a38c09956b3adf41445b237797edd876cb", "patch": "@@ -13,14 +13,17 @@\n extern crate rustfmt;\n extern crate diff;\n extern crate regex;\n+extern crate term;\n \n-use std::collections::HashMap;\n+use std::collections::{VecDeque, HashMap};\n use std::fs;\n use std::io::{self, Read, BufRead, BufReader};\n use std::thread;\n use rustfmt::*;\n use rustfmt::config::Config;\n \n+static DIFF_CONTEXT_SIZE: usize = 3;\n+\n fn get_path_string(dir_entry: io::Result<fs::DirEntry>) -> String {\n     let path = dir_entry.ok().expect(\"Couldn't get DirEntry.\").path();\n \n@@ -87,16 +90,40 @@ fn check_files<I>(files: I) -> (u32, u32)\n     (count, fails)\n }\n \n-fn print_mismatches(result: HashMap<String, String>) {\n-    for (_, fmt_text) in result {\n-        println!(\"{}\", fmt_text);\n+fn print_mismatches(result: HashMap<String, Vec<Mismatch>>) {\n+    let mut t = term::stdout().unwrap();\n+\n+    for (file_name, diff) in result {\n+        for mismatch in diff {\n+            t.fg(term::color::BRIGHT_WHITE).unwrap();\n+            writeln!(t, \"\\nMismatch at {}:{}:\", file_name, mismatch.line_number).unwrap();\n+\n+            for line in mismatch.lines {\n+                match line {\n+                    DiffLine::Context(ref str) => {\n+                        t.fg(term::color::WHITE).unwrap();\n+                        writeln!(t, \" {}\u23ce\", str).unwrap();\n+                    }\n+                    DiffLine::Expected(ref str) => {\n+                        t.fg(term::color::GREEN).unwrap();\n+                        writeln!(t, \"+{}\u23ce\", str).unwrap();\n+                    }\n+                    DiffLine::Resulting(ref str) => {\n+                        t.fg(term::color::RED).unwrap();\n+                        writeln!(t, \"-{}\u23ce\", str).unwrap();\n+                    }\n+                }\n+            }\n+        }\n     }\n+\n+    assert!(t.reset().unwrap());\n }\n \n // Ick, just needed to get a &'static to handle_result.\n static HANDLE_RESULT: &'static Fn(HashMap<String, String>) = &handle_result;\n \n-pub fn idempotent_check(filename: String) -> Result<(), HashMap<String, String>> {\n+pub fn idempotent_check(filename: String) -> Result<(), HashMap<String, Vec<Mismatch>>> {\n     let sig_comments = read_significant_comments(&filename);\n     let mut config = get_config(sig_comments.get(\"config\").map(|x| &(*x)[..]));\n     let args = vec![\"rustfmt\".to_owned(), filename];\n@@ -179,10 +206,11 @@ fn handle_result(result: HashMap<String, String>) {\n         // TODO: speedup by running through bytes iterator\n         f.read_to_string(&mut text).ok().expect(\"Failed reading target.\");\n         if fmt_text != text {\n-            let diff_str = make_diff(&file_name, &fmt_text, &text);\n-            failures.insert(file_name, diff_str);\n+            let diff = make_diff(&fmt_text, &text, DIFF_CONTEXT_SIZE);\n+            failures.insert(file_name, diff);\n         }\n     }\n+\n     if !failures.is_empty() {\n         panic!(failures);\n     }\n@@ -199,36 +227,79 @@ fn get_target(file_name: &str, target: Option<&str>) -> String {\n     }\n }\n \n-// Produces a diff string between the expected output and actual output of\n-// rustfmt on a given file\n-fn make_diff(file_name: &str, expected: &str, actual: &str) -> String {\n+pub enum DiffLine {\n+    Context(String),\n+    Expected(String),\n+    Resulting(String),\n+}\n+\n+pub struct Mismatch {\n+    line_number: u32,\n+    pub lines: Vec<DiffLine>,\n+}\n+\n+impl Mismatch {\n+    fn new(line_number: u32) -> Mismatch {\n+        Mismatch { line_number: line_number, lines: Vec::new() }\n+    }\n+}\n+\n+// Produces a diff between the expected output and actual output of rustfmt.\n+fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Mismatch> {\n     let mut line_number = 1;\n-    let mut prev_both = true;\n-    let mut text = String::new();\n+    let mut context_queue: VecDeque<&str> = VecDeque::with_capacity(context_size);\n+    let mut lines_since_mismatch = context_size + 1;\n+    let mut results = Vec::new();\n+    let mut mismatch = Mismatch::new(0);\n \n     for result in diff::lines(expected, actual) {\n         match result {\n             diff::Result::Left(str) => {\n-                if prev_both {\n-                    text.push_str(&format!(\"Mismatch @ {}:{}\\n\", file_name, line_number));\n+                if lines_since_mismatch >= context_size {\n+                    results.push(mismatch);\n+                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                }\n+\n+                while let Some(line) = context_queue.pop_front() {\n+                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n                 }\n-                text.push_str(&format!(\"-{}\u23ce\\n\", str));\n-                prev_both = false;\n+\n+                mismatch.lines.push(DiffLine::Resulting(str.to_owned()));\n+                lines_since_mismatch = 0;\n             }\n             diff::Result::Right(str) => {\n-                if prev_both {\n-                    text.push_str(&format!(\"Mismatch @ {}:{}\\n\", file_name, line_number));\n+                if lines_since_mismatch >= context_size {\n+                    results.push(mismatch);\n+                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                }\n+\n+                while let Some(line) = context_queue.pop_front() {\n+                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n                 }\n-                text.push_str(&format!(\"+{}\u23ce\\n\", str));\n-                prev_both = false;\n+\n+                mismatch.lines.push(DiffLine::Expected(str.to_owned()));\n                 line_number += 1;\n+                lines_since_mismatch = 0;\n             }\n-            diff::Result::Both(..) => {\n+            diff::Result::Both(str, _) => {\n+                if context_queue.len() >= context_size {\n+                    let _ = context_queue.pop_front();\n+                }\n+\n+                if lines_since_mismatch < context_size {\n+                    mismatch.lines.push(DiffLine::Context(str.to_owned()));\n+                } else {\n+                    context_queue.push_back(str);\n+                }\n+\n                 line_number += 1;\n-                prev_both = true;\n+                lines_since_mismatch += 1;\n             }\n         }\n     }\n \n-    text\n+    results.push(mismatch);\n+    results.remove(0);\n+\n+    results\n }"}]}