{"sha": "9b4344161b39d9463d95719018c4bf16243cf45f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNDM0NDE2MWIzOWQ5NDYzZDk1NzE5MDE4YzRiZjE2MjQzY2Y0NWY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-03-24T22:24:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-24T22:24:42Z"}, "message": "Merge pull request #3466 from topecongiro/discard-error-to-sink\n\nDiscard error report in silent_emitter", "tree": {"sha": "e12f9637d9e5fd58319099ad04c748da5da11165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e12f9637d9e5fd58319099ad04c748da5da11165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b4344161b39d9463d95719018c4bf16243cf45f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcmAOqCRBK7hj4Ov3rIwAAdHIIAGWDJ41W3Zd5VkQz0+S4BpNt\nM2BOqH3IFUdZ7cwYzzn7P0M/kKJQTUols5M+KfBAt1wVX67I0Bt0vMY0VVXL8bBT\n6I9mSnU6sY+w1rvofbwcWGsVLBexyhLGuHFWkHVItxB1VJ0yaU0QdVZNHIqLnmsU\nc5Rx4OCQKmbURIlrMOh0pVhskVijEbw8ndCD+LobkyenMd8kfNioWFqQF+BTpk65\nTSoLBXwOl2TfPTD3coK2aEHVyuO8IksqfD31b3v+wRM0MWOzTSX4B/85ZyKqsGVj\n2TVK8A79K6ACkc8JgBFhgeE4oZbJFINyFM2mV1xstDWhjGpta70bnVkgf2Gojak=\n=L1oD\n-----END PGP SIGNATURE-----\n", "payload": "tree e12f9637d9e5fd58319099ad04c748da5da11165\nparent cc26c5eacae010e80fdbe125917809414b627fa8\nparent 037cf2c43649b7040befd38122c2f86db5968580\nauthor Seiichi Uchida <seuchida@gmail.com> 1553466282 +0900\ncommitter GitHub <noreply@github.com> 1553466282 +0900\n\nMerge pull request #3466 from topecongiro/discard-error-to-sink\n\nDiscard error report in silent_emitter"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4344161b39d9463d95719018c4bf16243cf45f", "html_url": "https://github.com/rust-lang/rust/commit/9b4344161b39d9463d95719018c4bf16243cf45f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b4344161b39d9463d95719018c4bf16243cf45f/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc26c5eacae010e80fdbe125917809414b627fa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc26c5eacae010e80fdbe125917809414b627fa8", "html_url": "https://github.com/rust-lang/rust/commit/cc26c5eacae010e80fdbe125917809414b627fa8"}, {"sha": "037cf2c43649b7040befd38122c2f86db5968580", "url": "https://api.github.com/repos/rust-lang/rust/commits/037cf2c43649b7040befd38122c2f86db5968580", "html_url": "https://github.com/rust-lang/rust/commit/037cf2c43649b7040befd38122c2f86db5968580"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "b14a7b798c71d8e9ccd8dcd71a4cdd5d8f992db8", "filename": "src/formatting.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9b4344161b39d9463d95719018c4bf16243cf45f/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b4344161b39d9463d95719018c4bf16243cf45f/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=9b4344161b39d9463d95719018c4bf16243cf45f", "patch": "@@ -7,7 +7,7 @@ use std::rc::Rc;\n use std::time::{Duration, Instant};\n \n use syntax::ast;\n-use syntax::errors::emitter::{ColorConfig, EmitterWriter};\n+use syntax::errors::emitter::{ColorConfig, Emitter};\n use syntax::errors::{DiagnosticBuilder, Handler};\n use syntax::parse::{self, ParseSess};\n use syntax::source_map::{FilePathMapping, SourceMap, Span, DUMMY_SP};\n@@ -90,7 +90,7 @@ fn format_project<T: FormatHandler>(\n     timer = timer.done_parsing();\n \n     // Suppress error output if we have to do any further parsing.\n-    let silent_emitter = silent_emitter(source_map);\n+    let silent_emitter = silent_emitter();\n     parse_session.span_diagnostic = Handler::with_emitter(true, None, silent_emitter);\n \n     let mut context = FormatContext::new(&krate, report, parse_session, config, handler);\n@@ -672,18 +672,20 @@ fn parse_crate(\n     Err(ErrorKind::ParseError)\n }\n \n-fn silent_emitter(source_map: Rc<SourceMap>) -> Box<EmitterWriter> {\n-    Box::new(EmitterWriter::new(\n-        Box::new(Vec::new()),\n-        Some(source_map),\n-        false,\n-        false,\n-    ))\n+/// Emitter which discards every error.\n+struct SilentEmitter;\n+\n+impl Emitter for SilentEmitter {\n+    fn emit(&mut self, _db: &DiagnosticBuilder<'_>) {}\n+}\n+\n+fn silent_emitter() -> Box<SilentEmitter> {\n+    Box::new(SilentEmitter {})\n }\n \n fn make_parse_sess(source_map: Rc<SourceMap>, config: &Config) -> ParseSess {\n     let tty_handler = if config.hide_parse_errors() {\n-        let silent_emitter = silent_emitter(source_map.clone());\n+        let silent_emitter = silent_emitter();\n         Handler::with_emitter(true, None, silent_emitter)\n     } else {\n         let supports_color = term::stderr().map_or(false, |term| term.supports_color());"}]}