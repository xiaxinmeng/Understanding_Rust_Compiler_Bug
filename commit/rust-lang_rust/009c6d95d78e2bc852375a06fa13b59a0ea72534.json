{"sha": "009c6d95d78e2bc852375a06fa13b59a0ea72534", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwOWM2ZDk1ZDc4ZTJiYzg1MjM3NWEwNmZhMTNiNTlhMGVhNzI1MzQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-21T11:30:41Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-21T11:30:41Z"}, "message": "manually fix the overlong lines", "tree": {"sha": "c277e0adeb299d89c081dd5b13684cd5fd642d14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c277e0adeb299d89c081dd5b13684cd5fd642d14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/009c6d95d78e2bc852375a06fa13b59a0ea72534", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYWmfhAAoJEFbW7qD8Z6xGVvMP/R6vlbX7O0LStTbtFqptj/WZ\nypMSG6ehtOXL2MGbH5DtkujnipF8P+sxMREKvs1VuZo25B7b0AVzDV3y4a5d7+CU\nQ7txCw5bta483siFHiFAai6HV8QR8Px3MPsKS77pMoTyE4DjYCCKc7UTaBaN3xFZ\nGCamYYkc0FaWx35GOBkU9NzZ1RYsAereJK21/2RwdL2HQ+F+Wx2g7yFkZHN4jEbf\nnXgZYP2uK0DX1wVDbIBTNomYtxeXI/zQBRmO3AZuZsm/sFX4jSFRztSuy//D28Rd\nhVvAM8NlwWjl7wd6JKXVLeEgTE1qJQLDX1rYUxkT8M/m8ayKfzLydYCht0aqJlQt\nDmL9WonrT8ZR9Vrh7H5MUO3AIcxxSD1sRHAhtW/i/CvJZTYuS0ry3ZmfispNt8LL\n6DRkIW9rTvRYwF1/v8gPsyHP9+w80KXslDGt+D5k7iGGAiLnDc3Y1D7aDsL207bV\nptI+IgZwGvEK7B/yBXAXbOqUoXPzSJ3DHrOhsIzU4thrVB1PwaTjhu4Mu6WfWESE\ne1Hg3uSJd2dI92XJwWq8ad573AG8Zb8kFG7vnh71nEwI1Y0CnP3fsq9WOaLVelyt\nn9NPduMUpKAu85di++C3uCip7rHck4NGUnjGUqCM09FvR1vBKRZeMO7dV3goe55I\nyHbi6zEFHkEWfcOApNDn\n=GalB\n-----END PGP SIGNATURE-----", "payload": "tree c277e0adeb299d89c081dd5b13684cd5fd642d14\nparent 47eead5ada97f50af5e00426bc08f1dcbeb5d4d2\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1482319841 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1482319841 +0100\n\nmanually fix the overlong lines"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/009c6d95d78e2bc852375a06fa13b59a0ea72534", "html_url": "https://github.com/rust-lang/rust/commit/009c6d95d78e2bc852375a06fa13b59a0ea72534", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/009c6d95d78e2bc852375a06fa13b59a0ea72534/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2", "html_url": "https://github.com/rust-lang/rust/commit/47eead5ada97f50af5e00426bc08f1dcbeb5d4d2"}], "stats": {"total": 112, "additions": 77, "deletions": 35}, "files": [{"sha": "122a600d7d38f7fd066f61d3bc28e1247f0d2a2b", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/009c6d95d78e2bc852375a06fa13b59a0ea72534/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009c6d95d78e2bc852375a06fa13b59a0ea72534/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=009c6d95d78e2bc852375a06fa13b59a0ea72534", "patch": "@@ -126,7 +126,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                             return; // implements_trait does not work with generics\n                         }\n                         macro_rules! ops {\n-                            ($op:expr, $cx:expr, $ty:expr, $rty:expr, $($trait_name:ident:$full_trait_name:ident),+) => {\n+                            ($op:expr,\n+                             $cx:expr,\n+                             $ty:expr,\n+                             $rty:expr,\n+                             $($trait_name:ident:$full_trait_name:ident),+) => {\n                                 match $op {\n                                     $(hir::$full_trait_name => {\n                                         let [krate, module] = ::utils::paths::OPS_MODULE;\n@@ -140,15 +144,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                         let parent_fn = cx.tcx.map.get_parent(e.id);\n                                         let parent_impl = cx.tcx.map.get_parent(parent_fn);\n                                         // the crate node is the only one that is not in the map\n-                                        if parent_impl != ast::CRATE_NODE_ID {\n-                                            if let hir::map::Node::NodeItem(item) = cx.tcx.map.get(parent_impl) {\n-                                                if let hir::Item_::ItemImpl(_, _, _, Some(ref trait_ref), _, _) = item.node {\n-                                                    if trait_ref.path.def.def_id() == trait_id {\n-                                                        return;\n-                                                    }\n-                                                }\n-                                            }\n-                                        }\n+                                        if_let_chain!{[\n+                                            parent_impl != ast::CRATE_NODE_ID,\n+                                            let hir::map::Node::NodeItem(item) = cx.tcx.map.get(parent_impl),\n+                                            let hir::Item_::ItemImpl(_, _, _, Some(ref trait_ref), _, _) = item.node,\n+                                            trait_ref.path.def.def_id() == trait_id\n+                                        ], { return; }}\n                                         implements_trait($cx, $ty, trait_id, vec![$rty])\n                                     },)*\n                                     _ => false,"}, {"sha": "e1d7e2e9e2c2db7555fc53b3818b53d31bbd891d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/009c6d95d78e2bc852375a06fa13b59a0ea72534/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009c6d95d78e2bc852375a06fa13b59a0ea72534/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=009c6d95d78e2bc852375a06fa13b59a0ea72534", "patch": "@@ -175,8 +175,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     let mut store = reg.sess.lint_store.borrow_mut();\n     store.register_removed(\"unstable_as_slice\", \"`Vec::as_slice` has been stabilized in 1.7\");\n     store.register_removed(\"unstable_as_mut_slice\", \"`Vec::as_mut_slice` has been stabilized in 1.7\");\n-    store.register_removed(\"str_to_string\", \"using `str::to_string` is common even today and specialization will likely happen soon\");\n-    store.register_removed(\"string_to_string\", \"using `string::to_string` is common even today and specialization will likely happen soon\");\n+    store.register_removed(\"str_to_string\",\n+                           \"using `str::to_string` is common even today and specialization will likely happen soon\");\n+    store.register_removed(\"string_to_string\",\n+                           \"using `string::to_string` is common even today and specialization will likely happen soon\");\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     reg.register_late_lint_pass(box serde::Serde);\n@@ -229,7 +231,9 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box map_clone::Pass);\n     reg.register_late_lint_pass(box temporary_assignment::Pass);\n     reg.register_late_lint_pass(box transmute::Transmute);\n-    reg.register_late_lint_pass(box cyclomatic_complexity::CyclomaticComplexity::new(conf.cyclomatic_complexity_threshold));\n+    reg.register_late_lint_pass(\n+        box cyclomatic_complexity::CyclomaticComplexity::new(conf.cyclomatic_complexity_threshold)\n+    );\n     reg.register_late_lint_pass(box escape::Pass{too_large_for_stack: conf.too_large_for_stack});\n     reg.register_early_lint_pass(box misc_early::MiscEarly);\n     reg.register_late_lint_pass(box array_indexing::ArrayIndexing);"}, {"sha": "e6f044ae9b6ad5d474f3534c50fd574ae50a0c2b", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/009c6d95d78e2bc852375a06fa13b59a0ea72534/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009c6d95d78e2bc852375a06fa13b59a0ea72534/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=009c6d95d78e2bc852375a06fa13b59a0ea72534", "patch": "@@ -333,8 +333,16 @@ impl EarlyLintPass for MiscEarly {\n                                            lit.span,\n                                            \"this is a decimal constant\",\n                                            |db| {\n-                            db.span_suggestion(lit.span, \"if you mean to use a decimal constant, remove the `0` to remove confusion:\", src[1..].to_string());\n-                            db.span_suggestion(lit.span, \"if you mean to use an octal constant, use `0o`:\", format!(\"0o{}\", &src[1..]));\n+                            db.span_suggestion(\n+                                lit.span,\n+                                \"if you mean to use a decimal constant, remove the `0` to remove confusion:\",\n+                                src[1..].to_string(),\n+                            );\n+                            db.span_suggestion(\n+                                lit.span,\n+                                \"if you mean to use an octal constant, use `0o`:\",\n+                                format!(\"0o{}\", &src[1..]),\n+                            );\n                         });\n                     }\n                 }}\n@@ -374,7 +382,12 @@ impl EarlyLintPass for MiscEarly {\n                 let ExprKind::Path(_, ref path) = closure.node\n             ], {\n                 if sp_ident.node == (&path.segments[0]).identifier {\n-                    span_lint(cx, REDUNDANT_CLOSURE_CALL, second.span, \"Closure called just once immediately after it was declared\");\n+                    span_lint(\n+                        cx,\n+                        REDUNDANT_CLOSURE_CALL,\n+                        second.span,\n+                        \"Closure called just once immediately after it was declared\",\n+                    );\n                 }\n             }}\n         }"}, {"sha": "8ed7e355879762b491a3c32c34b916a543cd21d5", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/009c6d95d78e2bc852375a06fa13b59a0ea72534/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009c6d95d78e2bc852375a06fa13b59a0ea72534/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=009c6d95d78e2bc852375a06fa13b59a0ea72534", "patch": "@@ -81,7 +81,11 @@ fn check_manual_swap(cx: &LateContext, block: &Block) {\n             SpanlessEq::new(cx).ignore_fn().eq_expr(tmp_init, lhs1),\n             SpanlessEq::new(cx).ignore_fn().eq_expr(rhs1, lhs2)\n         ], {\n-            fn check_for_slice<'a>(cx: &LateContext, lhs1: &'a Expr, lhs2: &'a Expr) -> Option<(&'a Expr, &'a Expr, &'a Expr)> {\n+            fn check_for_slice<'a>(\n+                cx: &LateContext,\n+                lhs1: &'a Expr,\n+                lhs2: &'a Expr,\n+            ) -> Option<(&'a Expr, &'a Expr, &'a Expr)> {\n                 if let ExprIndex(ref lhs1, ref idx1) = lhs1.node {\n                     if let ExprIndex(ref lhs2, ref idx2) = lhs2.node {\n                         if SpanlessEq::new(cx).ignore_fn().eq_expr(lhs1, lhs2) {\n@@ -104,7 +108,10 @@ fn check_manual_swap(cx: &LateContext, block: &Block) {\n                 if let Some(slice) = Sugg::hir_opt(cx, slice) {\n                     (false,\n                      format!(\" elements of `{}`\", slice),\n-                     format!(\"{}.swap({}, {})\", slice.maybe_par(), snippet(cx, idx1.span, \"..\"), snippet(cx, idx2.span, \"..\")))\n+                     format!(\"{}.swap({}, {})\",\n+                             slice.maybe_par(),\n+                             snippet(cx, idx1.span, \"..\"),\n+                             snippet(cx, idx2.span, \"..\")))\n                 } else {\n                     (false, \"\".to_owned(), \"\".to_owned())\n                 }\n@@ -148,7 +155,9 @@ fn check_suspicious_swap(cx: &LateContext, block: &Block) {\n             SpanlessEq::new(cx).ignore_fn().eq_expr(lhs0, rhs1),\n             SpanlessEq::new(cx).ignore_fn().eq_expr(lhs1, rhs0)\n         ], {\n-            let (what, lhs, rhs) = if let (Some(first), Some(second)) = (Sugg::hir_opt(cx, lhs0), Sugg::hir_opt(cx, rhs0)) {\n+            let lhs0 = Sugg::hir_opt(cx, lhs0);\n+            let rhs0 = Sugg::hir_opt(cx, rhs0);\n+            let (what, lhs, rhs) = if let (Some(first), Some(second)) = (lhs0, rhs0) {\n                 (format!(\" `{}` and `{}`\", first, second), first.mut_addr().to_string(), second.mut_addr().to_string())\n             } else {\n                 (\"\".to_owned(), \"\".to_owned(), \"\".to_owned())"}, {"sha": "d80fa17e29f736cd0e63b47724eefb4c7885a9d8", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/009c6d95d78e2bc852375a06fa13b59a0ea72534/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009c6d95d78e2bc852375a06fa13b59a0ea72534/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=009c6d95d78e2bc852375a06fa13b59a0ea72534", "patch": "@@ -131,20 +131,23 @@ macro_rules! define_Conf {\n \n     // how to read the value?\n     (CONV i64, $value: expr) => { $value.as_integer() };\n-    (CONV u64, $value: expr) => { $value.as_integer().iter().filter_map(|&i| if i >= 0 { Some(i as u64) } else { None }).next() };\n+    (CONV u64, $value: expr) => {\n+        $value.as_integer()\n+        .iter()\n+        .filter_map(|&i| if i >= 0 { Some(i as u64) } else { None })\n+        .next()\n+    };\n     (CONV String, $value: expr) => { $value.as_str().map(Into::into) };\n     (CONV Vec<String>, $value: expr) => {{\n         let slice = $value.as_slice();\n \n         if let Some(slice) = slice {\n             if slice.iter().any(|v| v.as_str().is_none()) {\n                 None\n+            } else {\n+                Some(slice.iter().map(|v| v.as_str().expect(\"already checked\").to_owned()).collect())\n             }\n-            else {\n-                Some(slice.iter().map(|v| v.as_str().unwrap_or_else(|| unreachable!()).to_owned()).collect())\n-            }\n-        }\n-        else {\n+        } else {\n             None\n         }\n     }};\n@@ -160,7 +163,19 @@ define_Conf! {\n     /// Lint: CYCLOMATIC_COMPLEXITY. The maximum cyclomatic complexity a function can have\n     (\"cyclomatic-complexity-threshold\", cyclomatic_complexity_threshold, 25 => u64),\n     /// Lint: DOC_MARKDOWN. The list of words this lint should not consider as identifiers needing ticks\n-    (\"doc-valid-idents\", doc_valid_idents, [\"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"DirectX\", \"GPLv2\", \"GPLv3\", \"GitHub\", \"IPv4\", \"IPv6\", \"JavaScript\", \"NaN\", \"OAuth\", \"OpenGL\", \"TrueType\", \"iOS\", \"macOS\"] => Vec<String>),\n+    (\"doc-valid-idents\", doc_valid_idents, [\n+        \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\",\n+        \"DirectX\",\n+        \"GPLv2\", \"GPLv3\",\n+        \"GitHub\",\n+        \"IPv4\", \"IPv6\",\n+        \"JavaScript\",\n+        \"NaN\",\n+        \"OAuth\",\n+        \"OpenGL\",\n+        \"TrueType\",\n+        \"iOS\", \"macOS\",\n+    ] => Vec<String>),\n     /// Lint: TOO_MANY_ARGUMENTS. The maximum number of argument a function or method can have\n     (\"too-many-arguments-threshold\", too_many_arguments_threshold, 7 => u64),\n     /// Lint: TYPE_COMPLEXITY. The maximum complexity a type can have"}, {"sha": "81cb658df8dea25f24c09e7baf43cbc6e9a6ac91", "filename": "tests/compile-fail/absurd-extreme-comparisons.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/009c6d95d78e2bc852375a06fa13b59a0ea72534/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009c6d95d78e2bc852375a06fa13b59a0ea72534/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs?ref=009c6d95d78e2bc852375a06fa13b59a0ea72534", "patch": "@@ -9,7 +9,7 @@ fn main() {\n     let u: u32 = 42;\n \n     u <= 0;\n-    //~^ ERROR this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+    //~^ ERROR this comparison involving the minimum or maximum element for this type contains a\n     //~| HELP using u == 0 instead\n     u <= Z;\n     //~^ ERROR this comparison involving\n@@ -41,10 +41,10 @@ fn main() {\n         //~| HELP because 1-1 is the minimum value for this type, this comparison is always false\n     u >= !0;\n         //~^ ERROR this comparison involving\n-        //~| HELP because !0 is the maximum value for this type, the case where the two sides are not equal never occurs, consider using u == !0 instead\n+        //~| HELP consider using u == !0 instead\n     u <= 12 - 2*6;\n         //~^ ERROR this comparison involving\n-        //~| HELP because 12 - 2*6 is the minimum value for this type, the case where the two sides are not equal never occurs, consider using u == 12 - 2*6 instead\n+        //~| HELP consider using u == 12 - 2*6 instead\n \n     let i: i8 = 0;\n     i < -127 - 1;"}, {"sha": "090c39abc9268aa1a3af0e728d8a9baf98e8d3b9", "filename": "tests/compile-fail/block_in_if_condition.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/009c6d95d78e2bc852375a06fa13b59a0ea72534/tests%2Fcompile-fail%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009c6d95d78e2bc852375a06fa13b59a0ea72534/tests%2Fcompile-fail%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fblock_in_if_condition.rs?ref=009c6d95d78e2bc852375a06fa13b59a0ea72534", "patch": "@@ -21,13 +21,13 @@ macro_rules! blocky_too {\n fn macro_if() {\n     if blocky!() {\n     }\n-    \n+\n     if blocky_too!() {\n     }\n }\n \n fn condition_has_block() -> i32 {\n-    if { //~ERROR in an 'if' condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a 'let'\n+    if { //~ERROR in an 'if' condition, avoid complex blocks or closures with blocks;\n         let x = 3;\n         x == 3\n     } {\n@@ -55,12 +55,12 @@ fn pred_test() {\n     // this is a sneaky case, where the block isn't directly in the condition, but is actually\n     // inside a closure that the condition is using.  same principle applies.  add some extra\n     // expressions to make sure linter isn't confused by them.\n-    if v == 3 && sky == \"blue\" && predicate(|x| { let target = 3; x == target }, v) { //~ERROR in an 'if' condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a 'let'\n-\n+    if v == 3 && sky == \"blue\" && predicate(|x| { let target = 3; x == target }, v) {\n+        //~^ERROR in an 'if' condition, avoid complex blocks or closures with blocks;\n     }\n \n-    if predicate(|x| { let target = 3; x == target }, v) { //~ERROR in an 'if' condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a 'let'\n-\n+    if predicate(|x| { let target = 3; x == target }, v) {\n+        //~^ERROR in an 'if' condition, avoid complex blocks or closures with blocks;\n     }\n \n }"}]}