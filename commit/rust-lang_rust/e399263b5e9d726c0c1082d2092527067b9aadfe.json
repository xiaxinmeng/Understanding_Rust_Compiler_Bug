{"sha": "e399263b5e9d726c0c1082d2092527067b9aadfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzOTkyNjNiNWU5ZDcyNmMwYzEwODJkMjA5MjUyNzA2N2I5YWFkZmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-10T00:37:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-10T01:24:56Z"}, "message": "rustdoc: Write sections in markdown", "tree": {"sha": "f6b116ac30a80a11e4970a524e1ec833bf17b935", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6b116ac30a80a11e4970a524e1ec833bf17b935"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e399263b5e9d726c0c1082d2092527067b9aadfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e399263b5e9d726c0c1082d2092527067b9aadfe", "html_url": "https://github.com/rust-lang/rust/commit/e399263b5e9d726c0c1082d2092527067b9aadfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e399263b5e9d726c0c1082d2092527067b9aadfe/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ad8265fee1af5551a0d9ca284788ee1a2116fa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad8265fee1af5551a0d9ca284788ee1a2116fa5", "html_url": "https://github.com/rust-lang/rust/commit/0ad8265fee1af5551a0d9ca284788ee1a2116fa5"}], "stats": {"total": 153, "additions": 93, "deletions": 60}, "files": [{"sha": "aa974c7346515ca1c6a185c575be121013152df0", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 93, "deletions": 60, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/e399263b5e9d726c0c1082d2092527067b9aadfe/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e399263b5e9d726c0c1082d2092527067b9aadfe/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=e399263b5e9d726c0c1082d2092527067b9aadfe", "patch": "@@ -120,7 +120,8 @@ fn should_request_new_writer_for_each_page() {\n enum hlvl {\n     h1 = 1,\n     h2 = 2,\n-    h3 = 3\n+    h3 = 3,\n+    h4 = 4\n }\n \n fn write_header(ctxt: ctxt, lvl: hlvl, doc: doc::itemtag) {\n@@ -238,12 +239,84 @@ fn should_write_full_path_to_mod() {\n     assert str::contains(markdown, \"# Module `a::b::c`\");\n }\n \n+fn write_common(\n+    ctxt: ctxt,\n+    brief: option<str>,\n+    desc: option<str>,\n+    sections: [doc::section]\n+) {\n+    write_brief(ctxt, brief);\n+    write_desc(ctxt, desc);\n+    write_sections(ctxt, sections);\n+}\n+\n+fn write_brief(\n+    ctxt: ctxt,\n+    brief: option<str>\n+) {\n+    alt brief {\n+      some(brief) {\n+        ctxt.w.write_line(brief);\n+        ctxt.w.write_line(\"\");\n+      }\n+      none { }\n+    }\n+}\n+\n+#[test]\n+fn should_leave_blank_line_after_brief() {\n+    let markdown = test::render(\"#[doc(brief = \\\"brief\\\")] fn a() { }\");\n+    assert str::contains(markdown, \"brief\\n\\n\");\n+}\n+\n+#[test]\n+fn should_leave_blank_line_between_brief_and_desc() {\n+    let markdown = test::render(\n+        \"#[doc(brief = \\\"brief\\\", desc = \\\"desc\\\")] fn a() { }\"\n+    );\n+    assert str::contains(markdown, \"brief\\n\\ndesc\");\n+}\n+\n+fn write_desc(\n+    ctxt: ctxt,\n+    desc: option<str>\n+) {\n+    alt desc {\n+        some(desc) {\n+            ctxt.w.write_line(desc);\n+            ctxt.w.write_line(\"\");\n+        }\n+        none { }\n+    }\n+}\n+\n+fn write_sections(ctxt: ctxt, sections: [doc::section]) {\n+    vec::iter(sections) {|section|\n+        write_section(ctxt, section);\n+    }\n+}\n+\n+fn write_section(ctxt: ctxt, section: doc::section) {\n+    write_header_(ctxt, h4, section.header);\n+    ctxt.w.write_line(section.body);\n+    ctxt.w.write_line(\"\");\n+}\n+\n+#[test]\n+fn should_write_sections() {\n+    let markdown = test::render(\n+        \"#[doc = \\\"\\\n+         # Header\\n\\\n+         Body\\\"]\\\n+         mod a { }\");\n+    assert str::contains(markdown, \"#### Header\\n\\nBody\\n\\n\");\n+}\n+\n fn write_mod_contents(\n     ctxt: ctxt,\n     doc: doc::moddoc\n ) {\n-    write_brief(ctxt, doc.brief());\n-    write_desc(ctxt, doc.desc());\n+    write_common(ctxt, doc.brief(), doc.desc(), doc.sections());\n     if option::is_some(doc.index) {\n         write_index(ctxt, option::get(doc.index));\n     }\n@@ -321,9 +394,7 @@ fn should_not_write_index_if_no_entries() {\n \n fn write_nmod(ctxt: ctxt, doc: doc::nmoddoc) {\n     write_header(ctxt, h1, doc::nmodtag(doc));\n-\n-    write_brief(ctxt, doc.brief());\n-    write_desc(ctxt, doc.desc());\n+    write_common(ctxt, doc.brief(), doc.desc(), doc.sections());\n \n     for fndoc in doc.fns {\n         write_fn(ctxt, fndoc);\n@@ -353,6 +424,7 @@ fn write_fn(\n         doc.sig,\n         doc.brief(),\n         doc.desc(),\n+        doc.sections(),\n         doc.args,\n         doc.return,\n         doc.failure\n@@ -364,13 +436,13 @@ fn write_fnlike(\n     sig: option<str>,\n     brief: option<str>,\n     desc: option<str>,\n+    sections: [doc::section],\n     args: [doc::argdoc],\n     return: doc::retdoc,\n     failure: option<str>\n ) {\n     write_sig(ctxt, sig);\n-    write_brief(ctxt, brief);\n-    write_desc(ctxt, desc);\n+    write_common(ctxt, brief, desc, sections);\n     write_args(ctxt, args);\n     write_return(ctxt, return);\n     write_failure(ctxt, failure);\n@@ -437,46 +509,6 @@ fn should_leave_blank_line_between_fn_header_and_sig() {\n     assert str::contains(markdown, \"Function `a`\\n\\n    fn a()\");\n }\n \n-fn write_brief(\n-    ctxt: ctxt,\n-    brief: option<str>\n-) {\n-    alt brief {\n-      some(brief) {\n-        ctxt.w.write_line(brief);\n-        ctxt.w.write_line(\"\");\n-      }\n-      none { }\n-    }\n-}\n-\n-#[test]\n-fn should_leave_blank_line_after_brief() {\n-    let markdown = test::render(\"#[doc(brief = \\\"brief\\\")] fn a() { }\");\n-    assert str::contains(markdown, \"brief\\n\\n\");\n-}\n-\n-#[test]\n-fn should_leave_blank_line_between_brief_and_desc() {\n-    let markdown = test::render(\n-        \"#[doc(brief = \\\"brief\\\", desc = \\\"desc\\\")] fn a() { }\"\n-    );\n-    assert str::contains(markdown, \"brief\\n\\ndesc\");\n-}\n-\n-fn write_desc(\n-    ctxt: ctxt,\n-    desc: option<str>\n-) {\n-    alt desc {\n-        some(desc) {\n-            ctxt.w.write_line(desc);\n-            ctxt.w.write_line(\"\");\n-        }\n-        none { }\n-    }\n-}\n-\n fn write_args(\n     ctxt: ctxt,\n     args: [doc::argdoc]\n@@ -602,8 +634,7 @@ fn write_const(\n ) {\n     write_header(ctxt, h2, doc::consttag(doc));\n     write_sig(ctxt, doc.ty);\n-    write_brief(ctxt, doc.brief());\n-    write_desc(ctxt, doc.desc());\n+    write_common(ctxt, doc.brief(), doc.desc(), doc.sections());\n }\n \n #[test]\n@@ -625,8 +656,7 @@ fn write_enum(\n     doc: doc::enumdoc\n ) {\n     write_header(ctxt, h2, doc::enumtag(doc));\n-    write_brief(ctxt, doc.brief());\n-    write_desc(ctxt, doc.desc());\n+    write_common(ctxt, doc.brief(), doc.desc(), doc.sections());\n     write_variants(ctxt, doc.variants);\n }\n \n@@ -708,8 +738,7 @@ fn should_write_variant_list_with_signatures() {\n fn write_res(ctxt: ctxt, doc: doc::resdoc) {\n     write_header(ctxt, h2, doc::restag(doc));\n     write_sig(ctxt, doc.sig);\n-    write_brief(ctxt, doc.brief());\n-    write_desc(ctxt, doc.desc());\n+    write_common(ctxt, doc.brief(), doc.desc(), doc.sections());\n     write_args(ctxt, doc.args);\n }\n \n@@ -734,8 +763,7 @@ fn should_write_resource_args() {\n \n fn write_iface(ctxt: ctxt, doc: doc::ifacedoc) {\n     write_header(ctxt, h2, doc::ifacetag(doc));\n-    write_brief(ctxt, doc.brief());\n-    write_desc(ctxt, doc.desc());\n+    write_common(ctxt, doc.brief(), doc.desc(), doc.sections());\n     write_methods(ctxt, doc.methods);\n }\n \n@@ -750,6 +778,7 @@ fn write_method(ctxt: ctxt, doc: doc::methoddoc) {\n         doc.sig,\n         doc.brief,\n         doc.desc,\n+        doc.sections,\n         doc.args,\n         doc.return,\n         doc.failure\n@@ -827,8 +856,7 @@ fn should_write_iface_method_failure_conditions() {\n \n fn write_impl(ctxt: ctxt, doc: doc::impldoc) {\n     write_header(ctxt, h2, doc::impltag(doc));\n-    write_brief(ctxt, doc.brief());\n-    write_desc(ctxt, doc.desc());\n+    write_common(ctxt, doc.brief(), doc.desc(), doc.sections());\n     write_methods(ctxt, doc.methods);\n }\n \n@@ -913,8 +941,7 @@ fn write_type(\n ) {\n     write_header(ctxt, h2, doc::tytag(doc));\n     write_sig(ctxt, doc.sig);\n-    write_brief(ctxt, doc.brief());\n-    write_desc(ctxt, doc.desc());\n+    write_common(ctxt, doc.brief(), doc.desc(), doc.sections());\n }\n \n #[test]\n@@ -968,6 +995,12 @@ mod test {\n             #debug(\"doc (path): %?\", doc);\n             let doc = attr_pass::mk_pass().f(srv, doc);\n             #debug(\"doc (attr): %?\", doc);\n+            let doc = unindent_pass::mk_pass().f(srv, doc);\n+            #debug(\"doc (unindent): %?\", doc);\n+            let doc = sectionalize_pass::mk_pass().f(srv, doc);\n+            #debug(\"doc (trim): %?\", doc);\n+            let doc = trim_pass::mk_pass().f(srv, doc);\n+            #debug(\"doc (sectionalize): %?\", doc);\n             let doc = markdown_index_pass::mk_pass(config).f(srv, doc);\n             #debug(\"doc (index): %?\", doc);\n             (srv, doc)"}]}