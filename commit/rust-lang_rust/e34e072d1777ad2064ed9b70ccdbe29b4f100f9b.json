{"sha": "e34e072d1777ad2064ed9b70ccdbe29b4f100f9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNGUwNzJkMTc3N2FkMjA2NGVkOWI3MGNjZGJlMjliNGYxMDBmOWI=", "commit": {"author": {"name": "Zack Corr", "email": "zack@z0w0.me", "date": "2013-01-23T02:41:11Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-02-16T02:04:10Z"}, "message": "rustpkg: Add do command and get cmd listeners working correctly", "tree": {"sha": "e8180816c58150359c1034f49008901faa373612", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8180816c58150359c1034f49008901faa373612"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e34e072d1777ad2064ed9b70ccdbe29b4f100f9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e34e072d1777ad2064ed9b70ccdbe29b4f100f9b", "html_url": "https://github.com/rust-lang/rust/commit/e34e072d1777ad2064ed9b70ccdbe29b4f100f9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e34e072d1777ad2064ed9b70ccdbe29b4f100f9b/comments", "author": {"login": "z0w0", "id": 676417, "node_id": "MDQ6VXNlcjY3NjQxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/676417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/z0w0", "html_url": "https://github.com/z0w0", "followers_url": "https://api.github.com/users/z0w0/followers", "following_url": "https://api.github.com/users/z0w0/following{/other_user}", "gists_url": "https://api.github.com/users/z0w0/gists{/gist_id}", "starred_url": "https://api.github.com/users/z0w0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/z0w0/subscriptions", "organizations_url": "https://api.github.com/users/z0w0/orgs", "repos_url": "https://api.github.com/users/z0w0/repos", "events_url": "https://api.github.com/users/z0w0/events{/privacy}", "received_events_url": "https://api.github.com/users/z0w0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "707944184304acbd81c026156a04b98570c6ef9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/707944184304acbd81c026156a04b98570c6ef9c", "html_url": "https://github.com/rust-lang/rust/commit/707944184304acbd81c026156a04b98570c6ef9c"}], "stats": {"total": 144, "additions": 119, "deletions": 25}, "files": [{"sha": "349bbd0f4086f5f34c4a67c49a8ea1b9125d6212", "filename": "src/librustpkg/api.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e34e072d1777ad2064ed9b70ccdbe29b4f100f9b/src%2Flibrustpkg%2Fapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e34e072d1777ad2064ed9b70ccdbe29b4f100f9b/src%2Flibrustpkg%2Fapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fapi.rs?ref=e34e072d1777ad2064ed9b70ccdbe29b4f100f9b", "patch": "@@ -19,21 +19,29 @@ pub struct Crate {\n }\n \n pub struct Listener {\n-    cmd: ~str,\n+    cmds: ~[~str],\n     cb: fn~()\n }\n \n pub fn run(listeners: ~[Listener]) {\n-    io::println(src_dir().to_str());\n-    io::println(work_dir().to_str());\n-\n-    let cmd = os::args()[1];\n+    let rcmd = os::args()[2];\n+    let mut found = false;\n \n     for listeners.each |listener| {\n-        if listener.cmd == cmd {\n-            (listener.cb)();\n+        for listener.cmds.each |&cmd| {\n+            if cmd == rcmd {\n+                (listener.cb)();\n+\n+                found = true;\n+\n+                break;\n+            }\n         }\n     }\n+\n+    if !found {\n+        os::set_exit_status(1);\n+    }\n }\n \n pub impl Crate {\n@@ -108,19 +116,22 @@ pub fn build(crates: ~[Crate]) -> bool {\n     let dir = src_dir();\n     let work_dir = work_dir();\n     let mut success = true;\n+    let sysroot = Path(os::args()[1]);\n \n     for crates.each |&crate| {\n         let path = &dir.push_rel(&Path(crate.file)).normalize();\n \n         note(fmt!(\"compiling %s\", path.to_str()));\n \n-        success = compile_crate(path, &work_dir, crate.flags, crate.cfgs,\n+        success = compile_crate(Some(sysroot), path, &work_dir, crate.flags, crate.cfgs,\n                                 false, false);\n \n         if !success { break; }\n     }\n \n-    os::set_exit_status(101);\n+    if !success {\n+        os::set_exit_status(2);\n+    }\n \n     success\n }"}, {"sha": "76e6b5879426d6efe442e724b55f7d8ad0b609ab", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e34e072d1777ad2064ed9b70ccdbe29b4f100f9b/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e34e072d1777ad2064ed9b70ccdbe29b4f100f9b/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=e34e072d1777ad2064ed9b70ccdbe29b4f100f9b", "patch": "@@ -30,6 +30,7 @@ use io::{ReaderUtil, WriterUtil};\n use std::getopts;\n use std::net::url;\n use send_map::linear::LinearMap;\n+use rustc::metadata::filesearch;\n use rustc::driver::{driver, session};\n use syntax::{ast, attr, codemap, diagnostic, parse, visit};\n use semver::Version;\n@@ -184,7 +185,11 @@ impl PackageScript {\n         // the build API.\n         for crate.node.module.items.each |i| {\n             match i.node {\n-                ast::item_fn(_, _, _, _) => custom = true,\n+                ast::item_fn(_, _, _, _) => {\n+                    custom = true;\n+\n+                    break;\n+                }\n                 _ => {}\n             }\n         }\n@@ -228,10 +233,11 @@ impl PackageScript {\n         let outputs = driver::build_output_filenames(input, &Some(work_dir),\n                                                      &None, sess);\n         let exe = work_dir.push(~\"package\" + util::exe_suffix());\n+        let root = filesearch::get_rustpkg_sysroot().get().pop().pop();\n \n         driver::compile_rest(sess, cfg, driver::cu_parse,\n                          Some(outputs), Some(crate));\n-        run::run_program(exe.to_str(), ~[cmd])\n+        run::run_program(exe.to_str(), ~[root.to_str(), cmd])\n     }\n \n     fn hash() -> ~str {\n@@ -282,6 +288,13 @@ impl Ctx {\n             ~\"clean\" => {\n                 self.clean();\n             }\n+            ~\"do\" => {\n+                if args.len() < 1 {\n+                    return usage::do_cmd();\n+                }\n+\n+                self.do_cmd(args[0]);\n+            }\n             ~\"install\" => {\n                 self.install(if args.len() >= 1 { Some(args[0]) }\n                              else { None }, \n@@ -322,6 +335,33 @@ impl Ctx {\n         }\n     }\n \n+    fn do_cmd(cmd: ~str) -> bool {\n+        if cmd == ~\"build\" {\n+            util::error(~\"the build cmd is reserved\");\n+\n+            return false;\n+        }\n+\n+        let cwd = &os::getcwd();\n+        let script = match PackageScript::parse(cwd) {\n+            result::Ok(script) => script,\n+            result::Err(err) => {\n+                util::error(err);\n+\n+                return false;\n+            }\n+        };\n+        let status = script.run(cmd);\n+\n+        if status == 1 {\n+            util::error(~\"no fns are listening for that cmd\");\n+\n+            return false;\n+        }\n+\n+        status == 0\n+    }\n+\n     fn build(dir: &Path, verbose: bool, opt: bool,\n              test: bool) -> Option<PackageScript> {\n         let cwd = &os::getcwd();\n@@ -399,7 +439,7 @@ impl Ctx {\n \n     fn compile(crate: &Path, dir: &Path, flags: ~[~str],\n                cfgs: ~[~str], opt: bool, test: bool) -> bool {\n-        util::compile_crate(crate, dir, flags, cfgs, opt, test)\n+        util::compile_crate(None, crate, dir, flags, cfgs, opt, test)\n     }\n \n     fn clean() -> bool {\n@@ -759,6 +799,7 @@ pub fn main() {\n         return match cmd {\n             ~\"build\" => usage::build(),\n             ~\"clean\" => usage::clean(),\n+            ~\"do\" => usage::do_cmd(),\n             ~\"install\" => usage::install(),\n             ~\"prefer\" => usage::prefer(),\n             ~\"test\" => usage::test(),"}, {"sha": "18afcd38bae1cf5e0661631a79820cc82b61c553", "filename": "src/librustpkg/usage.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e34e072d1777ad2064ed9b70ccdbe29b4f100f9b/src%2Flibrustpkg%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e34e072d1777ad2064ed9b70ccdbe29b4f100f9b/src%2Flibrustpkg%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fusage.rs?ref=e34e072d1777ad2064ed9b70ccdbe29b4f100f9b", "patch": "@@ -39,6 +39,13 @@ Remove all build files in the work cache for the package in the current\n directory.\");\n }\n \n+pub fn do_cmd() {\n+    io::println(~\"rustpkg do <cmd>\n+\n+Runs a command in the package script. You can listen to a command\n+by tagging a function with the attribute `#[pkg_do(cmd)]`.\");\n+}\n+\n pub fn install() {\n     io::println(~\"rustpkg [options..] install [url] [target]\n "}, {"sha": "317a9331675388fb8de721c7d8b20b373a1d77b5", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 48, "deletions": 13, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e34e072d1777ad2064ed9b70ccdbe29b4f100f9b/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e34e072d1777ad2064ed9b70ccdbe29b4f100f9b/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=e34e072d1777ad2064ed9b70ccdbe29b4f100f9b", "patch": "@@ -34,8 +34,8 @@ pub fn root() -> Path {\n }\n \n pub fn is_cmd(cmd: ~str) -> bool {\n-    let cmds = &[~\"build\", ~\"clean\", ~\"install\", ~\"prefer\", ~\"test\",\n-                 ~\"uninstall\", ~\"unprefer\"];\n+    let cmds = &[~\"build\", ~\"clean\", ~\"do\", ~\"install\", ~\"prefer\",\n+                 ~\"test\", ~\"uninstall\", ~\"unprefer\"];\n \n     vec::contains(cmds, &cmd)\n }\n@@ -74,6 +74,7 @@ fn mk_rustpkg_use(ctx: @ReadyCtx) -> @ast::view_item {\n }\n \n struct ListenerFn {\n+    cmds: ~[~str],\n     span: codemap::span,\n     path: ~[ast::ident]\n }\n@@ -119,8 +120,27 @@ fn fold_item(ctx: @ReadyCtx, &&item: @ast::item,\n \n     ctx.path.push(item.ident);\n \n-    if attr::find_attrs_by_name(item.attrs, ~\"pkg_do\").is_not_empty() {\n+    let attrs = attr::find_attrs_by_name(item.attrs, ~\"pkg_do\");\n+\n+    if attrs.len() > 0 {\n+        let mut cmds = ~[];\n+\n+        for attrs.each |attr| {\n+            match attr.node.value.node {\n+                ast::meta_list(_, mis) => {\n+                    for mis.each |mi| {\n+                        match mi.node {\n+                            ast::meta_word(cmd) => cmds.push(cmd),\n+                            _ => {}\n+                        };\n+                    }\n+                }\n+                _ => cmds.push(~\"build\")\n+            };\n+        }\n+\n         ctx.fns.push(ListenerFn {\n+            cmds: cmds,\n             span: item.span,\n             path: /*bad*/copy ctx.path\n         });\n@@ -284,13 +304,26 @@ fn mk_listener_vec(ctx: @ReadyCtx) -> @ast::expr {\n fn mk_listener_rec(ctx: @ReadyCtx, listener: ListenerFn) -> @ast::expr {\n     let span = listener.span;\n     let path = /*bad*/copy listener.path;\n-    let cmd_lit = no_span(ast::lit_str(@path_name_i(path,\n-                                       ctx.sess.parse_sess.interner)));\n+    let descs = do listener.cmds.map |&cmd| {\n+        let inner = @{\n+            id: ctx.sess.next_node_id(),\n+            callee_id: ctx.sess.next_node_id(),\n+            node: ast::expr_lit(@no_span(ast::lit_str(@cmd))),\n+            span: span\n+        };\n+\n+        @{\n+            id: ctx.sess.next_node_id(),\n+            callee_id: ctx.sess.next_node_id(),\n+            node: ast::expr_vstore(inner, ast::expr_vstore_uniq),\n+            span: dummy_sp()\n+        }\n+    };\n     let cmd_expr_inner = @{\n         id: ctx.sess.next_node_id(),\n         callee_id: ctx.sess.next_node_id(),\n-        node: ast::expr_lit(@cmd_lit),\n-        span: span\n+        node: ast::expr_vec(descs, ast::m_imm),\n+        span: dummy_sp()\n     };\n     let cmd_expr = {\n         id: ctx.sess.next_node_id(),\n@@ -300,7 +333,7 @@ fn mk_listener_rec(ctx: @ReadyCtx, listener: ListenerFn) -> @ast::expr {\n     };\n     let cmd_field = no_span(ast::field_ {\n         mutbl: ast::m_imm,\n-        ident: ctx.sess.ident_of(~\"cmd\"),\n+        ident: ctx.sess.ident_of(~\"cmds\"),\n         expr: @cmd_expr,\n     });\n \n@@ -827,7 +860,7 @@ pub fn remove_pkg(pkg: &Package) -> bool {\n     true\n }\n \n-pub fn compile_input(input: driver::input, dir: &Path,\n+pub fn compile_input(sysroot: Option<Path>, input: driver::input, dir: &Path,\n                flags: ~[~str], cfgs: ~[~str], opt: bool, test: bool) -> bool {\n     let lib_dir = dir.push(~\"lib\");\n     let bin_dir = dir.push(~\"bin\");\n@@ -838,6 +871,7 @@ pub fn compile_input(input: driver::input, dir: &Path,\n         crate_type: session::unknown_crate,\n         optimize: if opt { session::Aggressive } else { session::No },\n         test: test,\n+        maybe_sysroot: sysroot,\n         .. *session::basic_options()\n     };\n     let sess = driver::build_session(options, diagnostic::emit);\n@@ -966,14 +1000,14 @@ pub fn exe_suffix() -> ~str { ~\".exe\" }\n #[cfg(target_os = \"macos\")]\n pub fn exe_suffix() -> ~str { ~\"\" }\n \n-pub fn compile_crate(crate: &Path, dir: &Path, flags: ~[~str],\n+pub fn compile_crate(sysroot: Option<Path>, crate: &Path, dir: &Path, flags: ~[~str],\n                cfgs: ~[~str], opt: bool, test: bool) -> bool {\n-    compile_input(driver::file_input(*crate), dir, flags, cfgs, opt, test)\n+    compile_input(sysroot, driver::file_input(*crate), dir, flags, cfgs, opt, test)\n }\n \n-pub fn compile_str(code: ~str, dir: &Path, flags: ~[~str],\n+pub fn compile_str(sysroot: Option<Path>, code: ~str, dir: &Path, flags: ~[~str],\n                    cfgs: ~[~str], opt: bool, test: bool) -> bool {\n-    compile_input(driver::str_input(code), dir, flags, cfgs, opt, test)\n+    compile_input(sysroot, driver::str_input(code), dir, flags, cfgs, opt, test)\n }\n \n #[cfg(windows)]\n@@ -1002,6 +1036,7 @@ pub fn link_exe(src: &Path, dest: &Path) -> bool unsafe {\n fn test_is_cmd() {\n     assert is_cmd(~\"build\");\n     assert is_cmd(~\"clean\");\n+    assert is_cmd(~\"do\");\n     assert is_cmd(~\"install\");\n     assert is_cmd(~\"prefer\");\n     assert is_cmd(~\"test\");"}]}