{"sha": "1a04686fc0d2752de8731c833ab67bfae6136720", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMDQ2ODZmYzBkMjc1MmRlODczMWM4MzNhYjY3YmZhZTYxMzY3MjA=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-21T12:47:13Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-21T12:47:13Z"}, "message": "Avoid triggering match_wildcard_for_single_variants", "tree": {"sha": "631a56ee49f8f502d8121954f917cfe6fe7ebecd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/631a56ee49f8f502d8121954f917cfe6fe7ebecd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a04686fc0d2752de8731c833ab67bfae6136720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a04686fc0d2752de8731c833ab67bfae6136720", "html_url": "https://github.com/rust-lang/rust/commit/1a04686fc0d2752de8731c833ab67bfae6136720", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a04686fc0d2752de8731c833ab67bfae6136720/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ff71199df911b462800cf6bda7ac32879ba7eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ff71199df911b462800cf6bda7ac32879ba7eb1", "html_url": "https://github.com/rust-lang/rust/commit/7ff71199df911b462800cf6bda7ac32879ba7eb1"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "08a2e0c0918f0372de6f8918e1fea5b95cd8839c", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a04686fc0d2752de8731c833ab67bfae6136720/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a04686fc0d2752de8731c833ab67bfae6136720/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=1a04686fc0d2752de8731c833ab67bfae6136720", "patch": "@@ -18,11 +18,11 @@ trait Context {\n impl<T> Context for io::Result<T> {\n     fn context<C: AsRef<str>>(self, text: C) -> Self {\n         match self {\n+            Ok(t) => Ok(t),\n             Err(e) => {\n                 let message = format!(\"{}: {}\", text.as_ref(), e);\n                 Err(io::Error::new(ErrorKind::Other, message))\n             },\n-            ok => ok,\n         }\n     }\n }"}]}