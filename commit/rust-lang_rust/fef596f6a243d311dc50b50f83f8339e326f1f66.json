{"sha": "fef596f6a243d311dc50b50f83f8339e326f1f66", "node_id": "C_kwDOAAsO6NoAKGZlZjU5NmY2YTI0M2QzMTFkYzUwYjUwZjgzZjgzMzllMzI2ZjFmNjY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-11T10:31:21Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-11T10:31:21Z"}, "message": "Rename assertion macro", "tree": {"sha": "db16910a8dc90e4a884a00bec08f09e0ed451211", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db16910a8dc90e4a884a00bec08f09e0ed451211"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fef596f6a243d311dc50b50f83f8339e326f1f66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fef596f6a243d311dc50b50f83f8339e326f1f66", "html_url": "https://github.com/rust-lang/rust/commit/fef596f6a243d311dc50b50f83f8339e326f1f66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fef596f6a243d311dc50b50f83f8339e326f1f66/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af8536e32ff8840bb41c65a438ccf33568548e02", "url": "https://api.github.com/repos/rust-lang/rust/commits/af8536e32ff8840bb41c65a438ccf33568548e02", "html_url": "https://github.com/rust-lang/rust/commit/af8536e32ff8840bb41c65a438ccf33568548e02"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "7fb55d8219ef8080ad4296edc8484be3e810408b", "filename": "src/test/ui/layout/unsafe-cell-hides-niche.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/fef596f6a243d311dc50b50f83f8339e326f1f66/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef596f6a243d311dc50b50f83f8339e326f1f66/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs?ref=fef596f6a243d311dc50b50f83f8339e326f1f66", "patch": "@@ -19,46 +19,46 @@ struct Transparent<T>(T);\n struct NoNiche<T>(UnsafeCell<T>);\n \n // Overwriting the runtime assertion and making it a compile-time assertion\n-macro_rules! assert_eq {\n+macro_rules! assert_size {\n     ($a:ty, $b:literal) => {{\n         const _: () = assert!(std::mem::size_of::<$a>() == $b);\n     }};\n }\n \n fn main() {\n-    assert_eq!(Option<Wrapper<u32>>,     8);\n-    assert_eq!(Option<Wrapper<N32>>,     4); // (\u2713 niche opt)\n-    assert_eq!(Option<Transparent<u32>>, 8);\n-    assert_eq!(Option<Transparent<N32>>, 4); // (\u2713 niche opt)\n-    assert_eq!(Option<NoNiche<u32>>,     8);\n-    assert_eq!(Option<NoNiche<N32>>,     8); // (\u2717 niche opt)\n+    assert_size!(Option<Wrapper<u32>>,     8);\n+    assert_size!(Option<Wrapper<N32>>,     4); // (\u2713 niche opt)\n+    assert_size!(Option<Transparent<u32>>, 8);\n+    assert_size!(Option<Transparent<N32>>, 4); // (\u2713 niche opt)\n+    assert_size!(Option<NoNiche<u32>>,     8);\n+    assert_size!(Option<NoNiche<N32>>,     8); // (\u2717 niche opt)\n \n-    assert_eq!(Option<UnsafeCell<u32>>,  8);\n-    assert_eq!(Option<UnsafeCell<N32>>,  8); // (\u2717 niche opt)\n+    assert_size!(Option<UnsafeCell<u32>>,  8);\n+    assert_size!(Option<UnsafeCell<N32>>,  8); // (\u2717 niche opt)\n \n-    assert_eq!(       UnsafeCell<&()> , 8);\n-    assert_eq!(Option<UnsafeCell<&()>>, 16); // (\u2717 niche opt)\n-    assert_eq!(             Cell<&()> , 8);\n-    assert_eq!(Option<      Cell<&()>>, 16); // (\u2717 niche opt)\n-    assert_eq!(          RefCell<&()> , 16);\n-    assert_eq!(Option<   RefCell<&()>>, 24); // (\u2717 niche opt)\n-    assert_eq!(           RwLock<&()> , 24);\n-    assert_eq!(Option<    RwLock<&()>>, 32); // (\u2717 niche opt)\n-    assert_eq!(            Mutex<&()> , 16);\n-    assert_eq!(Option<     Mutex<&()>>, 24); // (\u2717 niche opt)\n+    assert_size!(       UnsafeCell<&()> , 8);\n+    assert_size!(Option<UnsafeCell<&()>>, 16); // (\u2717 niche opt)\n+    assert_size!(             Cell<&()> , 8);\n+    assert_size!(Option<      Cell<&()>>, 16); // (\u2717 niche opt)\n+    assert_size!(          RefCell<&()> , 16);\n+    assert_size!(Option<   RefCell<&()>>, 24); // (\u2717 niche opt)\n+    assert_size!(           RwLock<&()> , 24);\n+    assert_size!(Option<    RwLock<&()>>, 32); // (\u2717 niche opt)\n+    assert_size!(            Mutex<&()> , 16);\n+    assert_size!(Option<     Mutex<&()>>, 24); // (\u2717 niche opt)\n \n-    assert_eq!(       UnsafeCell<&[i32]> , 16);\n-    assert_eq!(Option<UnsafeCell<&[i32]>>, 24); // (\u2717 niche opt)\n-    assert_eq!(       UnsafeCell<(&(), &())> , 16);\n-    assert_eq!(Option<UnsafeCell<(&(), &())>>, 24); // (\u2717 niche opt)\n+    assert_size!(       UnsafeCell<&[i32]> , 16);\n+    assert_size!(Option<UnsafeCell<&[i32]>>, 24); // (\u2717 niche opt)\n+    assert_size!(       UnsafeCell<(&(), &())> , 16);\n+    assert_size!(Option<UnsafeCell<(&(), &())>>, 24); // (\u2717 niche opt)\n \n     trait Trait {}\n-    assert_eq!(       UnsafeCell<&dyn Trait> , 16);\n-    assert_eq!(Option<UnsafeCell<&dyn Trait>>, 24); // (\u2717 niche opt)\n+    assert_size!(       UnsafeCell<&dyn Trait> , 16);\n+    assert_size!(Option<UnsafeCell<&dyn Trait>>, 24); // (\u2717 niche opt)\n \n     #[repr(simd)]\n     pub struct Vec4<T>([T; 4]);\n \n-    assert_eq!(       UnsafeCell<Vec4<N32>> , 16);\n-    assert_eq!(Option<UnsafeCell<Vec4<N32>>>, 32); // (\u2717 niche opt)\n+    assert_size!(       UnsafeCell<Vec4<N32>> , 16);\n+    assert_size!(Option<UnsafeCell<Vec4<N32>>>, 32); // (\u2717 niche opt)\n }"}]}