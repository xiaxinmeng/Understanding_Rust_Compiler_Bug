{"sha": "ff2413db1b72b78137c7c0c7295eab112c0192d9", "node_id": "C_kwDOAAsO6NoAKGZmMjQxM2RiMWI3MmI3ODEzN2M3YzBjNzI5NWVhYjExMmMwMTkyZDk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-27T04:00:37Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-27T20:04:59Z"}, "message": "No need to probe when computing goals", "tree": {"sha": "25283d9e12bf7c484280b82bb87c846bbf2563d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25283d9e12bf7c484280b82bb87c846bbf2563d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff2413db1b72b78137c7c0c7295eab112c0192d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2413db1b72b78137c7c0c7295eab112c0192d9", "html_url": "https://github.com/rust-lang/rust/commit/ff2413db1b72b78137c7c0c7295eab112c0192d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff2413db1b72b78137c7c0c7295eab112c0192d9/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7919ef0ec5776c72dace7fec1c68551a617505ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7919ef0ec5776c72dace7fec1c68551a617505ad", "html_url": "https://github.com/rust-lang/rust/commit/7919ef0ec5776c72dace7fec1c68551a617505ad"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "2b42cfde9100e3910df9006cc4d5223316a1c231", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ff2413db1b72b78137c7c0c7295eab112c0192d9/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2413db1b72b78137c7c0c7295eab112c0192d9/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=ff2413db1b72b78137c7c0c7295eab112c0192d9", "patch": "@@ -337,15 +337,13 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n             // That won't actually reflect in the query response, so it seems moot.\n             self.make_canonical_response(Certainty::AMBIGUOUS)\n         } else {\n-            self.infcx.probe(|_| {\n-                let InferOk { value: (), obligations } = self\n-                    .infcx\n-                    .at(&ObligationCause::dummy(), goal.param_env)\n-                    .sub(goal.predicate.a, goal.predicate.b)?;\n-                self.evaluate_all_and_make_canonical_response(\n-                    obligations.into_iter().map(|pred| pred.into()).collect(),\n-                )\n-            })\n+            let InferOk { value: (), obligations } = self\n+                .infcx\n+                .at(&ObligationCause::dummy(), goal.param_env)\n+                .sub(goal.predicate.a, goal.predicate.b)?;\n+            self.evaluate_all_and_make_canonical_response(\n+                obligations.into_iter().map(|pred| pred.into()).collect(),\n+            )\n         }\n     }\n \n@@ -378,18 +376,16 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         &mut self,\n         goal: Goal<'tcx, ty::GenericArg<'tcx>>,\n     ) -> QueryResult<'tcx> {\n-        self.infcx.probe(|_| {\n-            match crate::traits::wf::unnormalized_obligations(\n-                self.infcx,\n-                goal.param_env,\n-                goal.predicate,\n-            ) {\n-                Some(obligations) => self.evaluate_all_and_make_canonical_response(\n-                    obligations.into_iter().map(|o| o.into()).collect(),\n-                ),\n-                None => self.make_canonical_response(Certainty::AMBIGUOUS),\n-            }\n-        })\n+        match crate::traits::wf::unnormalized_obligations(\n+            self.infcx,\n+            goal.param_env,\n+            goal.predicate,\n+        ) {\n+            Some(obligations) => self.evaluate_all_and_make_canonical_response(\n+                obligations.into_iter().map(|o| o.into()).collect(),\n+            ),\n+            None => self.make_canonical_response(Certainty::AMBIGUOUS),\n+        }\n     }\n }\n "}]}