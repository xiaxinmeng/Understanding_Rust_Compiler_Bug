{"sha": "2fd4dd20d717b3e8af4bdff2873b348920426425", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZDRkZDIwZDcxN2IzZThhZjRiZGZmMjg3M2IzNDg5MjA0MjY0MjU=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-03-25T10:49:35Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-04-11T14:32:40Z"}, "message": "Allow using `-C force-unwind-tables=no` when `panic=unwind`", "tree": {"sha": "d20af30295fee75b8cebd4de5d7ffbdd9777bcf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d20af30295fee75b8cebd4de5d7ffbdd9777bcf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fd4dd20d717b3e8af4bdff2873b348920426425", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYHMIiBUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLjL2QEAhSbMv19rXoK+KYxXt+zPy1Dz3Mtq\ny7VTo+QZ5JHF0EwBAOFISkkh27ghzv0C5dJrOumVEByItMJ44b2jpafidvQM\n=ZZfl\n-----END PGP SIGNATURE-----", "payload": "tree d20af30295fee75b8cebd4de5d7ffbdd9777bcf2\nparent 58f32da346642ff3f50186f6f4a0de46e61008be\nauthor hyd-dev <yd-huang@outlook.com> 1616669375 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1618151560 +0800\n\nAllow using `-C force-unwind-tables=no` when `panic=unwind`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd4dd20d717b3e8af4bdff2873b348920426425", "html_url": "https://github.com/rust-lang/rust/commit/2fd4dd20d717b3e8af4bdff2873b348920426425", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fd4dd20d717b3e8af4bdff2873b348920426425/comments", "author": null, "committer": null, "parents": [{"sha": "58f32da346642ff3f50186f6f4a0de46e61008be", "url": "https://api.github.com/repos/rust-lang/rust/commits/58f32da346642ff3f50186f6f4a0de46e61008be", "html_url": "https://github.com/rust-lang/rust/commit/58f32da346642ff3f50186f6f4a0de46e61008be"}], "stats": {"total": 101, "additions": 74, "deletions": 27}, "files": [{"sha": "cc2583be94474ea208f77f4c1a9fe446e45f4549", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2fd4dd20d717b3e8af4bdff2873b348920426425/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd4dd20d717b3e8af4bdff2873b348920426425/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=2fd4dd20d717b3e8af4bdff2873b348920426425", "patch": "@@ -807,8 +807,11 @@ impl Session {\n         // This is used to control the emission of the `uwtable` attribute on\n         // LLVM functions.\n         //\n-        // At the very least, unwind tables are needed when compiling with\n-        // `-C panic=unwind`.\n+        // Unwind tables are needed when compiling with `-C panic=unwind`, but\n+        // LLVM won't omit unwind tables unless the function is also marked as\n+        // `nounwind`, so users are allowed to disable `uwtable` emission.\n+        // Historically rustc always emits `uwtable` attributes by default, so\n+        // even they can be disabled, they're still emitted by default.\n         //\n         // On some targets (including windows), however, exceptions include\n         // other events such as illegal instructions, segfaults, etc. This means\n@@ -821,13 +824,10 @@ impl Session {\n         // If a target requires unwind tables, then they must be emitted.\n         // Otherwise, we can defer to the `-C force-unwind-tables=<yes/no>`\n         // value, if it is provided, or disable them, if not.\n-        if self.panic_strategy() == PanicStrategy::Unwind {\n-            true\n-        } else if self.target.requires_uwtable {\n-            true\n-        } else {\n-            self.opts.cg.force_unwind_tables.unwrap_or(self.target.default_uwtable)\n-        }\n+        self.target.requires_uwtable\n+            || self.opts.cg.force_unwind_tables.unwrap_or(\n+                self.panic_strategy() == PanicStrategy::Unwind || self.target.default_uwtable,\n+            )\n     }\n \n     /// Returns the symbol name for the registrar function,\n@@ -1483,13 +1483,6 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n \n     // Unwind tables cannot be disabled if the target requires them.\n     if let Some(include_uwtables) = sess.opts.cg.force_unwind_tables {\n-        if sess.panic_strategy() == PanicStrategy::Unwind && !include_uwtables {\n-            sess.err(\n-                \"panic=unwind requires unwind tables, they cannot be disabled \\\n-                     with `-C force-unwind-tables=no`.\",\n-            );\n-        }\n-\n         if sess.target.requires_uwtable && !include_uwtables {\n             sess.err(\n                 \"target requires unwind tables, they cannot be disabled with \\"}, {"sha": "499d4e69867174d48625d32bd936a6a605b73aa5", "filename": "src/test/assembly/panic-no-unwind-no-uwtable.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fd4dd20d717b3e8af4bdff2873b348920426425/src%2Ftest%2Fassembly%2Fpanic-no-unwind-no-uwtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd4dd20d717b3e8af4bdff2873b348920426425/src%2Ftest%2Fassembly%2Fpanic-no-unwind-no-uwtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fpanic-no-unwind-no-uwtable.rs?ref=2fd4dd20d717b3e8af4bdff2873b348920426425", "patch": "@@ -0,0 +1,8 @@\n+// assembly-output: emit-asm\n+// only-x86_64-unknown-linux-gnu\n+// compile-flags: -C panic=unwind -C force-unwind-tables=n -O\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK-NOT: .cfi_startproc\n+pub fn foo() {}"}, {"sha": "8eed72b2fca6963310ed25a09d937af02e6571e7", "filename": "src/test/assembly/panic-unwind-no-uwtable.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2fd4dd20d717b3e8af4bdff2873b348920426425/src%2Ftest%2Fassembly%2Fpanic-unwind-no-uwtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd4dd20d717b3e8af4bdff2873b348920426425/src%2Ftest%2Fassembly%2Fpanic-unwind-no-uwtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fpanic-unwind-no-uwtable.rs?ref=2fd4dd20d717b3e8af4bdff2873b348920426425", "patch": "@@ -0,0 +1,12 @@\n+// assembly-output: emit-asm\n+// only-x86_64-unknown-linux-gnu\n+// compile-flags: -C panic=unwind -C force-unwind-tables=n\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: foo:\n+// CHECK: .cfi_startproc\n+#[no_mangle]\n+fn foo() {\n+    panic!();\n+}"}, {"sha": "3ee23f05eb2b1d11a968091803b23e36a6351792", "filename": "src/test/codegen/force-no-unwind-tables.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fd4dd20d717b3e8af4bdff2873b348920426425/src%2Ftest%2Fcodegen%2Fforce-no-unwind-tables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd4dd20d717b3e8af4bdff2873b348920426425/src%2Ftest%2Fcodegen%2Fforce-no-unwind-tables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fforce-no-unwind-tables.rs?ref=2fd4dd20d717b3e8af4bdff2873b348920426425", "patch": "@@ -3,5 +3,9 @@\n \n #![crate_type=\"lib\"]\n \n+// CHECK-LABEL: define{{.*}}void @foo\n // CHECK-NOT: attributes #{{.*}} uwtable\n-pub fn foo() {}\n+#[no_mangle]\n+fn foo() {\n+    panic!();\n+}"}, {"sha": "4c85008cf359a842b80b0d856bbfdd8c5e4b6870", "filename": "src/test/codegen/panic-unwind-default-uwtable.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fd4dd20d717b3e8af4bdff2873b348920426425/src%2Ftest%2Fcodegen%2Fpanic-unwind-default-uwtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd4dd20d717b3e8af4bdff2873b348920426425/src%2Ftest%2Fcodegen%2Fpanic-unwind-default-uwtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpanic-unwind-default-uwtable.rs?ref=2fd4dd20d717b3e8af4bdff2873b348920426425", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -C panic=unwind -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK: attributes #{{.*}} uwtable\n+pub fn foo() {}"}, {"sha": "79e91879051c87a5c366b8a29478b78d2799dfa9", "filename": "src/test/ui/panic-runtime/unwind-tables-panic-required.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58f32da346642ff3f50186f6f4a0de46e61008be/src%2Ftest%2Fui%2Fpanic-runtime%2Funwind-tables-panic-required.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f32da346642ff3f50186f6f4a0de46e61008be/src%2Ftest%2Fui%2Fpanic-runtime%2Funwind-tables-panic-required.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Funwind-tables-panic-required.rs?ref=58f32da346642ff3f50186f6f4a0de46e61008be", "patch": "@@ -1,10 +0,0 @@\n-// Tests that the compiler errors if the user tries to turn off unwind tables\n-// when they are required.\n-//\n-// dont-check-compiler-stderr\n-// compile-flags: -C panic=unwind -C force-unwind-tables=no\n-//\n-// error-pattern: panic=unwind requires unwind tables, they cannot be disabled with `-C force-unwind-tables=no`.\n-\n-pub fn main() {\n-}"}, {"sha": "f249d3f4574744fc0fa1859e36fc0279b490ee7c", "filename": "src/test/ui/unwind-no-uwtable.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2fd4dd20d717b3e8af4bdff2873b348920426425/src%2Ftest%2Fui%2Funwind-no-uwtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd4dd20d717b3e8af4bdff2873b348920426425/src%2Ftest%2Fui%2Funwind-no-uwtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-no-uwtable.rs?ref=2fd4dd20d717b3e8af4bdff2873b348920426425", "patch": "@@ -0,0 +1,34 @@\n+// run-pass\n+// ignore-windows target requires uwtable\n+// ignore-wasm32-bare no proper panic=unwind support\n+// compile-flags: -C panic=unwind -C force-unwind-tables=n\n+\n+use std::panic::{self, AssertUnwindSafe};\n+\n+struct Increase<'a>(&'a mut u8);\n+\n+impl Drop for Increase<'_> {\n+    fn drop(&mut self) {\n+        *self.0 += 1;\n+    }\n+}\n+\n+#[inline(never)]\n+fn unwind() {\n+    panic!();\n+}\n+\n+#[inline(never)]\n+fn increase(count: &mut u8) {\n+    let _increase = Increase(count);\n+    unwind();\n+}\n+\n+fn main() {\n+    let mut count = 0;\n+    assert!(panic::catch_unwind(AssertUnwindSafe(\n+        #[inline(never)]\n+        || increase(&mut count)\n+    )).is_err());\n+    assert_eq!(count, 1);\n+}"}]}