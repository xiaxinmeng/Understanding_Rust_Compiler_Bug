{"sha": "5ca6bd50b584bc157eac783f2a2251424382351f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYTZiZDUwYjU4NGJjMTU3ZWFjNzgzZjJhMjI1MTQyNDM4MjM1MWY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-01-06T16:04:00Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-01-19T15:15:07Z"}, "message": "Rename CanonicalUserTypeAnnotation -> CanonicalUserType\n\nWe want the name `CanonicalUserTypeAnnotation` for our own use.", "tree": {"sha": "8daee16d0684fe00accd0abc887b19268c77a3ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8daee16d0684fe00accd0abc887b19268c77a3ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ca6bd50b584bc157eac783f2a2251424382351f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca6bd50b584bc157eac783f2a2251424382351f", "html_url": "https://github.com/rust-lang/rust/commit/5ca6bd50b584bc157eac783f2a2251424382351f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ca6bd50b584bc157eac783f2a2251424382351f/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "html_url": "https://github.com/rust-lang/rust/commit/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "ef8f7bd9a7561d4375d19090fce2754927dd0162", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6bd50b584bc157eac783f2a2251424382351f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6bd50b584bc157eac783f2a2251424382351f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5ca6bd50b584bc157eac783f2a2251424382351f", "patch": "@@ -350,7 +350,7 @@ pub struct TypeckTables<'tcx> {\n     /// canonical substitutions would include only `for<X> { Vec<X> }`.\n     ///\n     /// See also `AscribeUserType` statement in MIR.\n-    user_provided_types: ItemLocalMap<CanonicalUserTypeAnnotation<'tcx>>,\n+    user_provided_types: ItemLocalMap<CanonicalUserType<'tcx>>,\n \n     /// Stores the canonicalized types provided by the user. See also\n     /// `AscribeUserType` statement in MIR.\n@@ -493,7 +493,7 @@ impl<'tcx> TypeckTables<'tcx> {\n \n     pub fn user_provided_types(\n         &self\n-    ) -> LocalTableInContext<'_, CanonicalUserTypeAnnotation<'tcx>> {\n+    ) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n             data: &self.user_provided_types\n@@ -502,7 +502,7 @@ impl<'tcx> TypeckTables<'tcx> {\n \n     pub fn user_provided_types_mut(\n         &mut self\n-    ) -> LocalTableInContextMut<'_, CanonicalUserTypeAnnotation<'tcx>> {\n+    ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n             data: &mut self.user_provided_types\n@@ -807,12 +807,12 @@ newtype_index! {\n \n /// Mapping of type annotation indices to canonical user type annotations.\n pub type CanonicalUserTypeAnnotations<'tcx> =\n-    IndexVec<UserTypeAnnotationIndex, (Span, CanonicalUserTypeAnnotation<'tcx>)>;\n+    IndexVec<UserTypeAnnotationIndex, (Span, CanonicalUserType<'tcx>)>;\n \n /// Canonicalized user type annotation.\n-pub type CanonicalUserTypeAnnotation<'gcx> = Canonical<'gcx, UserType<'gcx>>;\n+pub type CanonicalUserType<'gcx> = Canonical<'gcx, UserType<'gcx>>;\n \n-impl CanonicalUserTypeAnnotation<'gcx> {\n+impl CanonicalUserType<'gcx> {\n     /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,\n     /// i.e. each thing is mapped to a canonical variable with the same index.\n     pub fn is_identity(&self) -> bool {"}, {"sha": "a6e226302e51b00b34d2dc81c332f7e54ff17020", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6bd50b584bc157eac783f2a2251424382351f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6bd50b584bc157eac783f2a2251424382351f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5ca6bd50b584bc157eac783f2a2251424382351f", "patch": "@@ -73,7 +73,7 @@ pub use self::binding::BindingMode::*;\n pub use self::context::{TyCtxt, FreeRegionInfo, GlobalArenas, AllArenas, tls, keep_local};\n pub use self::context::{Lift, TypeckTables, CtxtInterners};\n pub use self::context::{\n-    UserTypeAnnotationIndex, UserType, CanonicalUserTypeAnnotation,\n+    UserTypeAnnotationIndex, UserType, CanonicalUserType,\n     CanonicalUserTypeAnnotations,\n };\n "}, {"sha": "8d64c9e9ada89daa8ea5e71d444527f63d20d979", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6bd50b584bc157eac783f2a2251424382351f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6bd50b584bc157eac783f2a2251424382351f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=5ca6bd50b584bc157eac783f2a2251424382351f", "patch": "@@ -797,7 +797,7 @@ fn user_substs_applied_to_def(\n     cx: &mut Cx<'a, 'gcx, 'tcx>,\n     hir_id: hir::HirId,\n     def: &Def,\n-) -> Option<ty::CanonicalUserTypeAnnotation<'tcx>> {\n+) -> Option<ty::CanonicalUserType<'tcx>> {\n     debug!(\"user_substs_applied_to_def: def={:?}\", def);\n     let user_provided_type = match def {\n         // A reference to something callable -- e.g., a fn, method, or"}, {"sha": "7aaf74ae18fb3a4481780e92edb60550063bf3ff", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6bd50b584bc157eac783f2a2251424382351f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6bd50b584bc157eac783f2a2251424382351f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=5ca6bd50b584bc157eac783f2a2251424382351f", "patch": "@@ -15,7 +15,7 @@ use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n use rustc::mir::{ProjectionElem, UserTypeProjection};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, sign_extend};\n use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty, Lift};\n-use rustc::ty::{CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, UserType};\n+use rustc::ty::{CanonicalUserType, CanonicalUserTypeAnnotations, UserType};\n use rustc::ty::subst::{Substs, Kind};\n use rustc::ty::layout::VariantIdx;\n use rustc::hir::{self, PatKind, RangeEnd};\n@@ -60,12 +60,12 @@ pub struct Pattern<'tcx> {\n \n #[derive(Clone, Debug)]\n pub struct PatternTypeProjection<'tcx> {\n-    pub base: CanonicalUserTypeAnnotation<'tcx>,\n+    pub base: CanonicalUserType<'tcx>,\n     pub projs: Vec<ProjectionElem<'tcx, (), ()>>,\n }\n \n impl<'tcx> PatternTypeProjection<'tcx> {\n-    pub(crate) fn from_user_type(user_annotation: CanonicalUserTypeAnnotation<'tcx>) -> Self {\n+    pub(crate) fn from_user_type(user_annotation: CanonicalUserType<'tcx>) -> Self {\n         Self {\n             base: user_annotation,\n             projs: Vec::new(),"}, {"sha": "cb4a72387fa161bab7be4c6cb14e0929a2d50c8d", "filename": "src/librustc_mir/hair/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6bd50b584bc157eac783f2a2251424382351f/src%2Flibrustc_mir%2Fhair%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6bd50b584bc157eac783f2a2251424382351f/src%2Flibrustc_mir%2Fhair%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Futil.rs?ref=5ca6bd50b584bc157eac783f2a2251424382351f", "patch": "@@ -1,5 +1,5 @@\n use rustc::hir;\n-use rustc::ty::{self, CanonicalUserTypeAnnotation, TyCtxt, UserType};\n+use rustc::ty::{self, CanonicalUserType, TyCtxt, UserType};\n \n crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'_, 'gcx, 'tcx>;\n@@ -12,7 +12,7 @@ crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n     fn user_substs_applied_to_ty_of_hir_id(\n         &self,\n         hir_id: hir::HirId,\n-    ) -> Option<CanonicalUserTypeAnnotation<'tcx>> {\n+    ) -> Option<CanonicalUserType<'tcx>> {\n         let user_provided_types = self.tables().user_provided_types();\n         let mut user_ty = *user_provided_types.get(hir_id)?;\n         debug!(\"user_subts_applied_to_ty_of_hir_id: user_ty={:?}\", user_ty);"}, {"sha": "54fd7de381f2a58f3c1d0dde1f407366f80e8889", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6bd50b584bc157eac783f2a2251424382351f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6bd50b584bc157eac783f2a2251424382351f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5ca6bd50b584bc157eac783f2a2251424382351f", "patch": "@@ -103,7 +103,7 @@ use rustc::middle::region;\n use rustc::mir::interpret::{ConstValue, GlobalId};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n use rustc::ty::{\n-    self, AdtKind, CanonicalUserTypeAnnotation, Ty, TyCtxt, GenericParamDefKind, Visibility,\n+    self, AdtKind, CanonicalUserType, Ty, TyCtxt, GenericParamDefKind, Visibility,\n     ToPolyTraitRef, ToPredicate, RegionKind, UserType\n };\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n@@ -2252,7 +2252,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn write_user_type_annotation(\n         &self,\n         hir_id: hir::HirId,\n-        canonical_user_type_annotation: CanonicalUserTypeAnnotation<'tcx>,\n+        canonical_user_type_annotation: CanonicalUserType<'tcx>,\n     ) {\n         debug!(\n             \"write_user_type_annotation: hir_id={:?} canonical_user_type_annotation={:?} tag={}\","}]}