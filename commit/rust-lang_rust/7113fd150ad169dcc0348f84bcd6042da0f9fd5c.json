{"sha": "7113fd150ad169dcc0348f84bcd6042da0f9fd5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMTNmZDE1MGFkMTY5ZGNjMDM0OGY4NGJjZDYwNDJkYTBmOWZkNWM=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-01-27T02:21:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-03T23:37:24Z"}, "message": "Fixed tests still using old integer to_str\nFixed integer tests", "tree": {"sha": "3004070f6fc16d8d7a5dfbebefcee4b4b375d44a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3004070f6fc16d8d7a5dfbebefcee4b4b375d44a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7113fd150ad169dcc0348f84bcd6042da0f9fd5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7113fd150ad169dcc0348f84bcd6042da0f9fd5c", "html_url": "https://github.com/rust-lang/rust/commit/7113fd150ad169dcc0348f84bcd6042da0f9fd5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7113fd150ad169dcc0348f84bcd6042da0f9fd5c/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb194621044253fae32649511d76515a64009a53", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb194621044253fae32649511d76515a64009a53", "html_url": "https://github.com/rust-lang/rust/commit/eb194621044253fae32649511d76515a64009a53"}], "stats": {"total": 73, "additions": 49, "deletions": 24}, "files": [{"sha": "06d11e23967e82e4faebb5a787df5f1bc5e73e60", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7113fd150ad169dcc0348f84bcd6042da0f9fd5c/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7113fd150ad169dcc0348f84bcd6042da0f9fd5c/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=7113fd150ad169dcc0348f84bcd6042da0f9fd5c", "patch": "@@ -26,6 +26,9 @@ use prelude::*;\n use str;\n use uint;\n use vec;\n+use i8;\n+use i16;\n+use i32;\n \n pub const bits : uint = inst::bits;\n pub const bytes : uint = (inst::bits / 8);\n@@ -301,13 +304,13 @@ fn test_from_str() {\n     assert from_str(~\"0\") == Some(0 as T);\n     assert from_str(~\"3\") == Some(3 as T);\n     assert from_str(~\"10\") == Some(10 as T);\n-    assert from_str(~\"123456789\") == Some(123456789 as T);\n+    assert i32::from_str(~\"123456789\") == Some(123456789 as i32);\n     assert from_str(~\"00100\") == Some(100 as T);\n \n     assert from_str(~\"-1\") == Some(-1 as T);\n     assert from_str(~\"-3\") == Some(-3 as T);\n     assert from_str(~\"-10\") == Some(-10 as T);\n-    assert from_str(~\"-123456789\") == Some(-123456789 as T);\n+    assert i32::from_str(~\"-123456789\") == Some(-123456789 as i32);\n     assert from_str(~\"-00100\") == Some(-100 as T);\n \n     assert from_str(~\" \").is_none();\n@@ -320,18 +323,18 @@ fn test_parse_bytes() {\n     assert parse_bytes(to_bytes(~\"123\"), 10u) == Some(123 as T);\n     assert parse_bytes(to_bytes(~\"1001\"), 2u) == Some(9 as T);\n     assert parse_bytes(to_bytes(~\"123\"), 8u) == Some(83 as T);\n-    assert parse_bytes(to_bytes(~\"123\"), 16u) == Some(291 as T);\n-    assert parse_bytes(to_bytes(~\"ffff\"), 16u) == Some(65535 as T);\n-    assert parse_bytes(to_bytes(~\"FFFF\"), 16u) == Some(65535 as T);\n+    assert i32::parse_bytes(to_bytes(~\"123\"), 16u) == Some(291 as i32);\n+    assert i32::parse_bytes(to_bytes(~\"ffff\"), 16u) == Some(65535 as i32);\n+    assert i32::parse_bytes(to_bytes(~\"FFFF\"), 16u) == Some(65535 as i32);\n     assert parse_bytes(to_bytes(~\"z\"), 36u) == Some(35 as T);\n     assert parse_bytes(to_bytes(~\"Z\"), 36u) == Some(35 as T);\n \n     assert parse_bytes(to_bytes(~\"-123\"), 10u) == Some(-123 as T);\n     assert parse_bytes(to_bytes(~\"-1001\"), 2u) == Some(-9 as T);\n     assert parse_bytes(to_bytes(~\"-123\"), 8u) == Some(-83 as T);\n-    assert parse_bytes(to_bytes(~\"-123\"), 16u) == Some(-291 as T);\n-    assert parse_bytes(to_bytes(~\"-ffff\"), 16u) == Some(-65535 as T);\n-    assert parse_bytes(to_bytes(~\"-FFFF\"), 16u) == Some(-65535 as T);\n+    assert i32::parse_bytes(to_bytes(~\"-123\"), 16u) == Some(-291 as i32);\n+    assert i32::parse_bytes(to_bytes(~\"-ffff\"), 16u) == Some(-65535 as i32);\n+    assert i32::parse_bytes(to_bytes(~\"-FFFF\"), 16u) == Some(-65535 as i32);\n     assert parse_bytes(to_bytes(~\"-z\"), 36u) == Some(-35 as T);\n     assert parse_bytes(to_bytes(~\"-Z\"), 36u) == Some(-35 as T);\n \n@@ -380,27 +383,35 @@ fn test_int_to_str_overflow() {\n fn test_int_from_str_overflow() {\n     let mut i8_val: i8 = 127_i8;\n     assert (i8::from_str(~\"127\") == Some(i8_val));\n+    assert (i8::from_str(~\"128\").is_none());\n \n     i8_val += 1 as i8;\n     assert (i8::from_str(~\"-128\") == Some(i8_val));\n+    assert (i8::from_str(~\"-129\").is_none());\n \n     let mut i16_val: i16 = 32_767_i16;\n     assert (i16::from_str(~\"32767\") == Some(i16_val));\n+    assert (i16::from_str(~\"32768\").is_none());\n \n     i16_val += 1 as i16;\n     assert (i16::from_str(~\"-32768\") == Some(i16_val));\n+    assert (i16::from_str(~\"-32769\").is_none());\n \n     let mut i32_val: i32 = 2_147_483_647_i32;\n     assert (i32::from_str(~\"2147483647\") == Some(i32_val));\n+    assert (i32::from_str(~\"2147483648\").is_none());\n \n     i32_val += 1 as i32;\n     assert (i32::from_str(~\"-2147483648\") == Some(i32_val));\n+    assert (i32::from_str(~\"-2147483649\").is_none());\n \n     let mut i64_val: i64 = 9_223_372_036_854_775_807_i64;\n     assert (i64::from_str(~\"9223372036854775807\") == Some(i64_val));\n+    assert (i64::from_str(~\"9223372036854775808\").is_none());\n \n     i64_val += 1 as i64;\n     assert (i64::from_str(~\"-9223372036854775808\") == Some(i64_val));\n+    assert (i64::from_str(~\"-9223372036854775809\").is_none());\n }\n \n #[test]"}, {"sha": "44ed9816cf94ad0871bbab6e277f81a9338f1121", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7113fd150ad169dcc0348f84bcd6042da0f9fd5c/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7113fd150ad169dcc0348f84bcd6042da0f9fd5c/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=7113fd150ad169dcc0348f84bcd6042da0f9fd5c", "patch": "@@ -27,6 +27,9 @@ use prelude::*;\n use str;\n use uint;\n use vec;\n+use u8;\n+use u16;\n+use u32;\n \n pub const bits : uint = inst::bits;\n pub const bytes : uint = (inst::bits / 8);\n@@ -274,7 +277,7 @@ pub fn test_from_str() {\n     assert from_str(~\"0\") == Some(0u as T);\n     assert from_str(~\"3\") == Some(3u as T);\n     assert from_str(~\"10\") == Some(10u as T);\n-    assert from_str(~\"123456789\") == Some(123456789u as T);\n+    assert u32::from_str(~\"123456789\") == Some(123456789 as u32);\n     assert from_str(~\"00100\") == Some(100u as T);\n \n     assert from_str(~\"\").is_none();\n@@ -288,8 +291,8 @@ pub fn test_parse_bytes() {\n     assert parse_bytes(to_bytes(~\"123\"), 10u) == Some(123u as T);\n     assert parse_bytes(to_bytes(~\"1001\"), 2u) == Some(9u as T);\n     assert parse_bytes(to_bytes(~\"123\"), 8u) == Some(83u as T);\n-    assert parse_bytes(to_bytes(~\"123\"), 16u) == Some(291u as T);\n-    assert parse_bytes(to_bytes(~\"ffff\"), 16u) == Some(65535u as T);\n+    assert u16::parse_bytes(to_bytes(~\"123\"), 16u) == Some(291u as u16);\n+    assert u16::parse_bytes(to_bytes(~\"ffff\"), 16u) == Some(65535u as u16);\n     assert parse_bytes(to_bytes(~\"z\"), 36u) == Some(35u as T);\n \n     assert parse_bytes(to_bytes(~\"Z\"), 10u).is_none();\n@@ -327,27 +330,35 @@ fn test_uint_to_str_overflow() {\n fn test_uint_from_str_overflow() {\n     let mut u8_val: u8 = 255_u8;\n     assert (u8::from_str(~\"255\") == Some(u8_val));\n+    assert (u8::from_str(~\"256\").is_none());\n \n     u8_val += 1 as u8;\n     assert (u8::from_str(~\"0\") == Some(u8_val));\n+    assert (u8::from_str(~\"-1\").is_none());\n \n     let mut u16_val: u16 = 65_535_u16;\n     assert (u16::from_str(~\"65535\") == Some(u16_val));\n+    assert (u16::from_str(~\"65536\").is_none());\n \n     u16_val += 1 as u16;\n     assert (u16::from_str(~\"0\") == Some(u16_val));\n+    assert (u16::from_str(~\"-1\").is_none());\n \n     let mut u32_val: u32 = 4_294_967_295_u32;\n     assert (u32::from_str(~\"4294967295\") == Some(u32_val));\n+    assert (u32::from_str(~\"4294967296\").is_none());\n \n     u32_val += 1 as u32;\n     assert (u32::from_str(~\"0\") == Some(u32_val));\n+    assert (u32::from_str(~\"-1\").is_none());\n \n     let mut u64_val: u64 = 18_446_744_073_709_551_615_u64;\n     assert (u64::from_str(~\"18446744073709551615\") == Some(u64_val));\n+    assert (u64::from_str(~\"18446744073709551616\").is_none());\n \n     u64_val += 1 as u64;\n     assert (u64::from_str(~\"0\") == Some(u64_val));\n+    assert (u64::from_str(~\"-1\").is_none());\n }\n \n #[test]"}, {"sha": "d557a5a06da1a83cc60ad78a6e7e54791db10bec", "filename": "src/libstd/map.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7113fd150ad169dcc0348f84bcd6042da0f9fd5c/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7113fd150ad169dcc0348f84bcd6042da0f9fd5c/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=7113fd150ad169dcc0348f84bcd6042da0f9fd5c", "patch": "@@ -619,32 +619,35 @@ mod tests {\n             map::HashMap::<~str, ~str>();\n         i = 0u;\n         while i < num_to_insert {\n-            assert hm_ss.insert(uint::to_str(i, 2u), uint::to_str(i * i, 2u));\n+            assert hm_ss.insert(uint::to_str_radix(i, 2u),\n+                                uint::to_str_radix(i * i, 2u));\n             debug!(\"inserting \\\"%s\\\" -> \\\"%s\\\"\",\n-                   uint::to_str(i, 2u),\n-                   uint::to_str(i*i, 2u));\n+                   uint::to_str_radix(i, 2u),\n+                   uint::to_str_radix(i*i, 2u));\n             i += 1u;\n         }\n         debug!(\"-----\");\n         i = 0u;\n         while i < num_to_insert {\n             debug!(\"get(\\\"%s\\\") = \\\"%s\\\"\",\n-                   uint::to_str(i, 2u),\n-                   hm_ss.get(uint::to_str(i, 2u)));\n-            assert hm_ss.get(uint::to_str(i, 2u)) == uint::to_str(i * i, 2u);\n+                   uint::to_str_radix(i, 2u),\n+                   hm_ss.get(uint::to_str_radix(i, 2u)));\n+            assert hm_ss.get(uint::to_str_radix(i, 2u)) ==\n+                             uint::to_str_radix(i * i, 2u);\n             i += 1u;\n         }\n-        assert (hm_ss.insert(uint::to_str(num_to_insert, 2u),\n-                             uint::to_str(17u, 2u)));\n-        assert hm_ss.get(uint::to_str(num_to_insert, 2u)) ==\n-            uint::to_str(17u, 2u);\n+        assert (hm_ss.insert(uint::to_str_radix(num_to_insert, 2u),\n+                             uint::to_str_radix(17u, 2u)));\n+        assert hm_ss.get(uint::to_str_radix(num_to_insert, 2u)) ==\n+            uint::to_str_radix(17u, 2u);\n         debug!(\"-----\");\n         i = 0u;\n         while i < num_to_insert {\n             debug!(\"get(\\\"%s\\\") = \\\"%s\\\"\",\n-                   uint::to_str(i, 2u),\n-                   hm_ss.get(uint::to_str(i, 2u)));\n-            assert hm_ss.get(uint::to_str(i, 2u)) == uint::to_str(i * i, 2u);\n+                   uint::to_str_radix(i, 2u),\n+                   hm_ss.get(uint::to_str_radix(i, 2u)));\n+            assert hm_ss.get(uint::to_str_radix(i, 2u)) ==\n+                             uint::to_str_radix(i * i, 2u);\n             i += 1u;\n         }\n         debug!(\"*** finished test_growth\");"}]}