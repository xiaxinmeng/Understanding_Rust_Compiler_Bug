{"sha": "cba82561cf0773b8a2bc3358313e555ffd0352c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYTgyNTYxY2YwNzczYjhhMmJjMzM1ODMxM2U1NTVmZmQwMzUyYzM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-07T22:38:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-20T19:38:13Z"}, "message": "add some run-pass tests for NLL showing that things work as expected", "tree": {"sha": "fccafd5ce316ec17a2a5f189a5e7d41307a862bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fccafd5ce316ec17a2a5f189a5e7d41307a862bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cba82561cf0773b8a2bc3358313e555ffd0352c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cba82561cf0773b8a2bc3358313e555ffd0352c3", "html_url": "https://github.com/rust-lang/rust/commit/cba82561cf0773b8a2bc3358313e555ffd0352c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cba82561cf0773b8a2bc3358313e555ffd0352c3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80c510e353b34f006c284f9557e2b59d2f356029", "url": "https://api.github.com/repos/rust-lang/rust/commits/80c510e353b34f006c284f9557e2b59d2f356029", "html_url": "https://github.com/rust-lang/rust/commit/80c510e353b34f006c284f9557e2b59d2f356029"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "13ef907d8d008d92248ae0aa589a22f07ea8bd35", "filename": "src/test/run-pass/nll/get_default.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cba82561cf0773b8a2bc3358313e555ffd0352c3/src%2Ftest%2Frun-pass%2Fnll%2Fget_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba82561cf0773b8a2bc3358313e555ffd0352c3/src%2Ftest%2Frun-pass%2Fnll%2Fget_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fget_default.rs?ref=cba82561cf0773b8a2bc3358313e555ffd0352c3", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+use std::collections::HashMap;\n+\n+fn get_default(map: &mut HashMap<usize, String>, key: usize) -> &mut String {\n+    match map.get_mut(&key) {\n+        Some(value) => value,\n+        None => {\n+            map.insert(key, \"\".to_string());\n+            map.get_mut(&key).unwrap()\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let map = &mut HashMap::new();\n+    map.insert(22, format!(\"Hello, world\"));\n+    map.insert(44, format!(\"Goodbye, world\"));\n+    assert_eq!(&*get_default(map, 22), \"Hello, world\");\n+    assert_eq!(&*get_default(map, 66), \"\");\n+}"}, {"sha": "a3a484402cc1401c5044e40ab55d7dfa64b088b0", "filename": "src/test/run-pass/nll/process_or_insert_default.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cba82561cf0773b8a2bc3358313e555ffd0352c3/src%2Ftest%2Frun-pass%2Fnll%2Fprocess_or_insert_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba82561cf0773b8a2bc3358313e555ffd0352c3/src%2Ftest%2Frun-pass%2Fnll%2Fprocess_or_insert_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fprocess_or_insert_default.rs?ref=cba82561cf0773b8a2bc3358313e555ffd0352c3", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+use std::collections::HashMap;\n+\n+fn process_or_insert_default(map: &mut HashMap<usize, String>, key: usize) {\n+    match map.get_mut(&key) {\n+        Some(value) => {\n+            process(value);\n+        }\n+        None => {\n+            map.insert(key, \"\".to_string());\n+        }\n+    }\n+}\n+\n+fn process(x: &str) {\n+    assert_eq!(x, \"Hello, world\");\n+}\n+\n+fn main() {\n+    let map = &mut HashMap::new();\n+    map.insert(22, format!(\"Hello, world\"));\n+    map.insert(44, format!(\"Goodbye, world\"));\n+    process_or_insert_default(map, 22);\n+    process_or_insert_default(map, 66);\n+    assert_eq!(map[&66], \"\");\n+}"}, {"sha": "2b746fac4d42610121168999c01e38a199b5f3e1", "filename": "src/test/run-pass/nll/rc-loop.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/cba82561cf0773b8a2bc3358313e555ffd0352c3/src%2Ftest%2Frun-pass%2Fnll%2Frc-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba82561cf0773b8a2bc3358313e555ffd0352c3/src%2Ftest%2Frun-pass%2Fnll%2Frc-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Frc-loop.rs?ref=cba82561cf0773b8a2bc3358313e555ffd0352c3", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A test for something that NLL enables. It sometimes happens that\n+// the `while let` pattern makes some borrows from a variable (in this\n+// case, `x`) that you need in order to compute the next value for\n+// `x`.  The lexical checker makes this very painful. The NLL checker\n+// does not.\n+\n+#![feature(match_default_bindings)]\n+#![feature(nll)]\n+\n+use std::rc::Rc;\n+\n+#[derive(Debug, PartialEq, Eq)]\n+enum Foo {\n+    Base(usize),\n+    Next(Rc<Foo>),\n+}\n+\n+fn find_base(mut x: Rc<Foo>) -> Rc<Foo> {\n+    while let Foo::Next(n) = &*x {\n+        x = n.clone();\n+    }\n+    x\n+}\n+\n+fn main() {\n+    let chain = Rc::new(Foo::Next(Rc::new(Foo::Base(44))));\n+    let base = find_base(chain);\n+    assert_eq!(&*base, &Foo::Base(44));\n+}\n+"}]}