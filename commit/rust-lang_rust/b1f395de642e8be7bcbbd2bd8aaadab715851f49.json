{"sha": "b1f395de642e8be7bcbbd2bd8aaadab715851f49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZjM5NWRlNjQyZThiZTdiY2JiZDJiZDhhYWFkYWI3MTU4NTFmNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-23T16:09:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-23T16:09:41Z"}, "message": "Auto merge of #69084 - yaahc:delayed-doc-lint, r=petrochenkov\n\nSplit non macro portion of unused_doc_comment from macro part into two passes/lints\n\n## Motivation\n\nThis change is motivated by the needs of the [spandoc library](https://github.com/yaahc/spandoc). The specific use case is that my macro is removing doc comments when an attribute is applied to a fn with doc comments, but I would like the lint to still appear when I forget to add the `#[spandoc]` attribute to a fn, so I don't want to have to silence the lint globally.\n\n## Approach\n\nThis change splits the `unused _doc_comment` lint into two lints, `unused_macro_doc_comment` and `unused_doc_comment`. The non macro portion is moved into an `early_lint_pass` rather than a pre_expansion_pass. This allows proc macros to silence `unused_doc_comment` warnings by either adding an attribute to silence it or by removing the doc comment before the early_pass runs.\n\nThe `unused_macro_doc_comment` lint however will still be impossible for proc-macros to silence, but the only alternative that I can see is to remove this lint entirely, which I don't think is acceptable / is a decision I'm not comfortable making personally, so instead I opted to split the macro portion of the check into a separate lint so that it can be silenced globally with an attribute if necessary without needing to globally silence the `unused_doc_comment` lint as well, which is still desireable.\n\nfixes https://github.com/rust-lang/rust/issues/67838", "tree": {"sha": "756f27d09555da49a28a09148daf12b2c14a9b33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/756f27d09555da49a28a09148daf12b2c14a9b33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1f395de642e8be7bcbbd2bd8aaadab715851f49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f395de642e8be7bcbbd2bd8aaadab715851f49", "html_url": "https://github.com/rust-lang/rust/commit/b1f395de642e8be7bcbbd2bd8aaadab715851f49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1f395de642e8be7bcbbd2bd8aaadab715851f49/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87b0d83745c0cc5b3679e406fbdbf0e8a8bfd3c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/87b0d83745c0cc5b3679e406fbdbf0e8a8bfd3c6", "html_url": "https://github.com/rust-lang/rust/commit/87b0d83745c0cc5b3679e406fbdbf0e8a8bfd3c6"}, {"sha": "09bc5e3d969a154ffcbeb6827a901d36a6a854eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/09bc5e3d969a154ffcbeb6827a901d36a6a854eb", "html_url": "https://github.com/rust-lang/rust/commit/09bc5e3d969a154ffcbeb6827a901d36a6a854eb"}], "stats": {"total": 171, "additions": 89, "deletions": 82}, "files": [{"sha": "5d0c474140f16cd0c8f817a80118899d948c8ce4", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=b1f395de642e8be7bcbbd2bd8aaadab715851f49", "patch": "@@ -14,6 +14,8 @@ use rustc_parse::configure;\n use rustc_parse::parser::Parser;\n use rustc_parse::validate_attr;\n use rustc_parse::DirectoryOwnership;\n+use rustc_session::lint::builtin::UNUSED_DOC_COMMENTS;\n+use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::{feature_err, ParseSess};\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{sym, Symbol};\n@@ -1087,6 +1089,16 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                     .note(\"this may become a hard error in a future release\")\n                     .emit();\n             }\n+\n+            if attr.doc_str().is_some() {\n+                self.cx.parse_sess.buffer_lint_with_diagnostic(\n+                    &UNUSED_DOC_COMMENTS,\n+                    attr.span,\n+                    ast::CRATE_NODE_ID,\n+                    \"unused doc comment\",\n+                    BuiltinLintDiagnostics::UnusedDocComment(attr.span),\n+                );\n+            }\n         }\n     }\n }"}, {"sha": "5c601803a77a2cd62b77a4e54afe1e652af68c32", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 29, "deletions": 60, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=b1f395de642e8be7bcbbd2bd8aaadab715851f49", "patch": "@@ -738,87 +738,56 @@ impl EarlyLintPass for DeprecatedAttr {\n     }\n }\n \n-declare_lint! {\n-    pub UNUSED_DOC_COMMENTS,\n-    Warn,\n-    \"detects doc comments that aren't used by rustdoc\"\n-}\n+fn warn_if_doc(cx: &EarlyContext<'_>, node_span: Span, node_kind: &str, attrs: &[ast::Attribute]) {\n+    let mut attrs = attrs.into_iter().peekable();\n \n-declare_lint_pass!(UnusedDocComment => [UNUSED_DOC_COMMENTS]);\n+    // Accumulate a single span for sugared doc comments.\n+    let mut sugared_span: Option<Span> = None;\n \n-impl UnusedDocComment {\n-    fn warn_if_doc(\n-        &self,\n-        cx: &EarlyContext<'_>,\n-        node_span: Span,\n-        node_kind: &str,\n-        is_macro_expansion: bool,\n-        attrs: &[ast::Attribute],\n-    ) {\n-        let mut attrs = attrs.into_iter().peekable();\n-\n-        // Accumulate a single span for sugared doc comments.\n-        let mut sugared_span: Option<Span> = None;\n-\n-        while let Some(attr) = attrs.next() {\n-            if attr.is_doc_comment() {\n-                sugared_span = Some(\n-                    sugared_span.map_or_else(|| attr.span, |span| span.with_hi(attr.span.hi())),\n-                );\n-            }\n+    while let Some(attr) = attrs.next() {\n+        if attr.is_doc_comment() {\n+            sugared_span =\n+                Some(sugared_span.map_or_else(|| attr.span, |span| span.with_hi(attr.span.hi())));\n+        }\n \n-            if attrs.peek().map(|next_attr| next_attr.is_doc_comment()).unwrap_or_default() {\n-                continue;\n-            }\n+        if attrs.peek().map(|next_attr| next_attr.is_doc_comment()).unwrap_or_default() {\n+            continue;\n+        }\n \n-            let span = sugared_span.take().unwrap_or_else(|| attr.span);\n+        let span = sugared_span.take().unwrap_or_else(|| attr.span);\n \n-            if attr.is_doc_comment() || attr.check_name(sym::doc) {\n-                cx.struct_span_lint(UNUSED_DOC_COMMENTS, span, |lint| {\n-                    let mut err = lint.build(\"unused doc comment\");\n-                    err.span_label(\n-                        node_span,\n-                        format!(\"rustdoc does not generate documentation for {}\", node_kind),\n-                    );\n-                    if is_macro_expansion {\n-                        err.help(\n-                            \"to document an item produced by a macro, \\\n-                                  the macro must produce the documentation as part of its expansion\",\n-                        );\n-                    }\n-                    err.emit();\n-                });\n-            }\n+        if attr.is_doc_comment() || attr.check_name(sym::doc) {\n+            cx.struct_span_lint(UNUSED_DOC_COMMENTS, span, |lint| {\n+                let mut err = lint.build(\"unused doc comment\");\n+                err.span_label(\n+                    node_span,\n+                    format!(\"rustdoc does not generate documentation for {}\", node_kind),\n+                );\n+                err.emit();\n+            });\n         }\n     }\n }\n \n impl EarlyLintPass for UnusedDocComment {\n-    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n-        if let ast::ItemKind::Mac(..) = item.kind {\n-            self.warn_if_doc(cx, item.span, \"macro expansions\", true, &item.attrs);\n-        }\n-    }\n-\n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &ast::Stmt) {\n-        let (kind, is_macro_expansion) = match stmt.kind {\n-            ast::StmtKind::Local(..) => (\"statements\", false),\n-            ast::StmtKind::Item(..) => (\"inner items\", false),\n-            ast::StmtKind::Mac(..) => (\"macro expansions\", true),\n+        let kind = match stmt.kind {\n+            ast::StmtKind::Local(..) => \"statements\",\n+            ast::StmtKind::Item(..) => \"inner items\",\n             // expressions will be reported by `check_expr`.\n-            ast::StmtKind::Semi(..) | ast::StmtKind::Expr(..) => return,\n+            ast::StmtKind::Semi(..) | ast::StmtKind::Expr(..) | ast::StmtKind::Mac(..) => return,\n         };\n \n-        self.warn_if_doc(cx, stmt.span, kind, is_macro_expansion, stmt.kind.attrs());\n+        warn_if_doc(cx, stmt.span, kind, stmt.kind.attrs());\n     }\n \n     fn check_arm(&mut self, cx: &EarlyContext<'_>, arm: &ast::Arm) {\n         let arm_span = arm.pat.span.with_hi(arm.body.span.hi());\n-        self.warn_if_doc(cx, arm_span, \"match arms\", false, &arm.attrs);\n+        warn_if_doc(cx, arm_span, \"match arms\", &arm.attrs);\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n-        self.warn_if_doc(cx, expr.span, \"expressions\", false, &expr.attrs);\n+        warn_if_doc(cx, expr.span, \"expressions\", &expr.attrs);\n     }\n }\n "}, {"sha": "adad1198b096b21b9d53ef2ad6bc4a70bf35552b", "filename": "src/librustc_lint/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Flibrustc_lint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Flibrustc_lint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fcontext.rs?ref=b1f395de642e8be7bcbbd2bd8aaadab715851f49", "patch": "@@ -565,6 +565,11 @@ pub trait LintContext: Sized {\n                 BuiltinLintDiagnostics::DeprecatedMacro(suggestion, span) => {\n                     stability::deprecation_suggestion(&mut db, suggestion, span)\n                 }\n+                BuiltinLintDiagnostics::UnusedDocComment(span) => {\n+                    db.span_label(span, \"rustdoc does not generate documentation for macros\");\n+                    db.help(\"to document an item produced by a macro, \\\n+                                  the macro must produce the documentation as part of its expansion\");\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(LintDiagnosticBuilder::new(db));"}, {"sha": "7b42cd0e4a222675fd7b81558b6fdf075580eb57", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=b1f395de642e8be7bcbbd2bd8aaadab715851f49", "patch": "@@ -94,7 +94,7 @@ fn lint_mod(tcx: TyCtxt<'_>, module_def_id: DefId) {\n \n macro_rules! pre_expansion_lint_passes {\n     ($macro:path, $args:tt) => {\n-        $macro!($args, [KeywordIdents: KeywordIdents, UnusedDocComment: UnusedDocComment,]);\n+        $macro!($args, [KeywordIdents: KeywordIdents,]);\n     };\n }\n \n@@ -114,6 +114,7 @@ macro_rules! early_lint_passes {\n                 NonAsciiIdents: NonAsciiIdents,\n                 IncompleteFeatures: IncompleteFeatures,\n                 RedundantSemicolon: RedundantSemicolon,\n+                UnusedDocComment: UnusedDocComment,\n             ]\n         );\n     };"}, {"sha": "6d4f1ff5b4877dd810514c0f2fcf005175fba1df", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=b1f395de642e8be7bcbbd2bd8aaadab715851f49", "patch": "@@ -190,6 +190,7 @@ pub enum BuiltinLintDiagnostics {\n     UnusedImports(String, Vec<(Span, String)>),\n     RedundantImport(Vec<(Span, bool)>, Ident),\n     DeprecatedMacro(Option<Symbol>, Span),\n+    UnusedDocComment(Span),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "f8a4e024605aad3c1ad81a30c296ed6540ce38a5", "filename": "src/librustc_session/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=b1f395de642e8be7bcbbd2bd8aaadab715851f49", "patch": "@@ -564,3 +564,11 @@ declare_lint_pass! {\n         INLINE_NO_SANITIZE,\n     ]\n }\n+\n+declare_lint! {\n+    pub UNUSED_DOC_COMMENTS,\n+    Warn,\n+    \"detects doc comments that aren't used by rustdoc\"\n+}\n+\n+declare_lint_pass!(UnusedDocComment => [UNUSED_DOC_COMMENTS]);"}, {"sha": "30888e343ed8191975dbb60a3e2981124942c91a", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=b1f395de642e8be7bcbbd2bd8aaadab715851f49", "patch": "@@ -176,6 +176,25 @@ impl ParseSess {\n         });\n     }\n \n+    pub fn buffer_lint_with_diagnostic(\n+        &self,\n+        lint: &'static Lint,\n+        span: impl Into<MultiSpan>,\n+        node_id: NodeId,\n+        msg: &str,\n+        diagnostic: BuiltinLintDiagnostics,\n+    ) {\n+        self.buffered_lints.with_lock(|buffered_lints| {\n+            buffered_lints.push(BufferedEarlyLint {\n+                span: span.into(),\n+                node_id,\n+                msg: msg.into(),\n+                lint_id: LintId::of(lint),\n+                diagnostic,\n+            });\n+        });\n+    }\n+\n     /// Extend an error with a suggestion to wrap an expression with parentheses to allow the\n     /// parser to continue parsing the following operation as part of the same expression.\n     pub fn expr_parentheses_needed("}, {"sha": "8458ded5db0b22b1e5400851ae44f98d41428d7f", "filename": "src/libstd/sys/wasi/fd.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs?ref=b1f395de642e8be7bcbbd2bd8aaadab715851f49", "patch": "@@ -13,19 +13,15 @@ pub struct WasiFd {\n fn iovec<'a>(a: &'a mut [IoSliceMut<'_>]) -> &'a [wasi::Iovec] {\n     assert_eq!(mem::size_of::<IoSliceMut<'_>>(), mem::size_of::<wasi::Iovec>());\n     assert_eq!(mem::align_of::<IoSliceMut<'_>>(), mem::align_of::<wasi::Iovec>());\n-    /// SAFETY: `IoSliceMut` and `IoVec` have exactly the same memory layout\n-    unsafe {\n-        mem::transmute(a)\n-    }\n+    // SAFETY: `IoSliceMut` and `IoVec` have exactly the same memory layout\n+    unsafe { mem::transmute(a) }\n }\n \n fn ciovec<'a>(a: &'a [IoSlice<'_>]) -> &'a [wasi::Ciovec] {\n     assert_eq!(mem::size_of::<IoSlice<'_>>(), mem::size_of::<wasi::Ciovec>());\n     assert_eq!(mem::align_of::<IoSlice<'_>>(), mem::align_of::<wasi::Ciovec>());\n-    /// SAFETY: `IoSlice` and `CIoVec` have exactly the same memory layout\n-    unsafe {\n-        mem::transmute(a)\n-    }\n+    // SAFETY: `IoSlice` and `CIoVec` have exactly the same memory layout\n+    unsafe { mem::transmute(a) }\n }\n \n impl WasiFd {"}, {"sha": "92817321a88f0ccbcd80415267303df05934a000", "filename": "src/test/ui/useless-comment.stderr", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Ftest%2Fui%2Fuseless-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1f395de642e8be7bcbbd2bd8aaadab715851f49/src%2Ftest%2Fui%2Fuseless-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuseless-comment.stderr?ref=b1f395de642e8be7bcbbd2bd8aaadab715851f49", "patch": "@@ -2,9 +2,7 @@ error: unused doc comment\n   --> $DIR/useless-comment.rs:9:1\n    |\n LL | /// foo\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL | mac!();\n-   | ------- rustdoc does not generate documentation for macro expansions\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ rustdoc does not generate documentation for macros\n    |\n note: the lint level is defined here\n   --> $DIR/useless-comment.rs:3:9\n@@ -13,6 +11,14 @@ LL | #![deny(unused_doc_comments)]\n    |         ^^^^^^^^^^^^^^^^^^^\n    = help: to document an item produced by a macro, the macro must produce the documentation as part of its expansion\n \n+error: unused doc comment\n+  --> $DIR/useless-comment.rs:32:5\n+   |\n+LL |     /// bar\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ rustdoc does not generate documentation for macros\n+   |\n+   = help: to document an item produced by a macro, the macro must produce the documentation as part of its expansion\n+\n error: unused doc comment\n   --> $DIR/useless-comment.rs:13:5\n    |\n@@ -68,16 +74,6 @@ LL |     #[doc = \"bar\"]\n LL |     3;\n    |     - rustdoc does not generate documentation for expressions\n \n-error: unused doc comment\n-  --> $DIR/useless-comment.rs:32:5\n-   |\n-LL |     /// bar\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL |     mac!();\n-   |     ------- rustdoc does not generate documentation for macro expansions\n-   |\n-   = help: to document an item produced by a macro, the macro must produce the documentation as part of its expansion\n-\n error: unused doc comment\n   --> $DIR/useless-comment.rs:35:13\n    |"}]}