{"sha": "924d30a772c62d63e2251dd978ed6bfb28eb6994", "node_id": "C_kwDOAAsO6NoAKDkyNGQzMGE3NzJjNjJkNjNlMjI1MWRkOTc4ZWQ2YmZiMjhlYjY5OTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-16T18:50:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-16T18:50:02Z"}, "message": "Auto merge of #14585 - Veykril:macro-def-err, r=Veykril\n\nMake `ExpandDatabase::parse_macro_expansion` and `ExpandDatabase::parse_or_expand` infallible", "tree": {"sha": "c7b41f992a275bbea68f95a3109c97af1695313e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7b41f992a275bbea68f95a3109c97af1695313e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/924d30a772c62d63e2251dd978ed6bfb28eb6994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/924d30a772c62d63e2251dd978ed6bfb28eb6994", "html_url": "https://github.com/rust-lang/rust/commit/924d30a772c62d63e2251dd978ed6bfb28eb6994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/924d30a772c62d63e2251dd978ed6bfb28eb6994/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "697b335fdaf8d09d5f74b98641351624cad901a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/697b335fdaf8d09d5f74b98641351624cad901a6", "html_url": "https://github.com/rust-lang/rust/commit/697b335fdaf8d09d5f74b98641351624cad901a6"}, {"sha": "4ea5d7f6a025f84b92fca9638477898adb9caf4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ea5d7f6a025f84b92fca9638477898adb9caf4d", "html_url": "https://github.com/rust-lang/rust/commit/4ea5d7f6a025f84b92fca9638477898adb9caf4d"}], "stats": {"total": 466, "additions": 222, "deletions": 244}, "files": [{"sha": "a00337ae9c59771e3560195f23ca1d68e6ea2fe4", "filename": "crates/hir-def/src/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fattr.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -498,7 +498,7 @@ impl AttrsWithOwner {\n             AttrDefId::FieldId(id) => {\n                 let map = db.fields_attrs_source_map(id.parent);\n                 let file_id = id.parent.file_id(db);\n-                let root = db.parse_or_expand(file_id).unwrap();\n+                let root = db.parse_or_expand(file_id);\n                 let owner = match &map[id.local_id] {\n                     Either::Left(it) => ast::AnyHasAttrs::new(it.to_node(&root)),\n                     Either::Right(it) => ast::AnyHasAttrs::new(it.to_node(&root)),\n@@ -514,7 +514,7 @@ impl AttrsWithOwner {\n             AttrDefId::EnumVariantId(id) => {\n                 let map = db.variants_attrs_source_map(id.parent);\n                 let file_id = id.parent.lookup(db).id.file_id();\n-                let root = db.parse_or_expand(file_id).unwrap();\n+                let root = db.parse_or_expand(file_id);\n                 InFile::new(file_id, ast::AnyHasAttrs::new(map[id.local_id].to_node(&root)))\n             }\n             AttrDefId::StaticId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),"}, {"sha": "cf2227b37973f69d58a7bf0aef81120c37ba5df7", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -174,30 +174,12 @@ impl Expander {\n     fn enter_expand_inner(\n         db: &dyn DefDatabase,\n         call_id: MacroCallId,\n-        mut error: Option<ExpandError>,\n+        error: Option<ExpandError>,\n     ) -> ExpandResult<Option<InFile<Parse<SyntaxNode>>>> {\n         let file_id = call_id.as_file();\n         let ExpandResult { value, err } = db.parse_or_expand_with_err(file_id);\n \n-        if error.is_none() {\n-            error = err;\n-        }\n-\n-        let parse = match value {\n-            Some(it) => it,\n-            None => {\n-                // Only `None` if the macro expansion produced no usable AST.\n-                if error.is_none() {\n-                    tracing::warn!(\"no error despite `parse_or_expand` failing\");\n-                }\n-\n-                return ExpandResult::only_err(error.unwrap_or_else(|| {\n-                    ExpandError::Other(\"failed to parse macro invocation\".into())\n-                }));\n-            }\n-        };\n-\n-        ExpandResult { value: Some(InFile::new(file_id, parse)), err: error }\n+        ExpandResult { value: Some(InFile::new(file_id, value)), err: error.or(err) }\n     }\n \n     pub fn exit(&mut self, db: &dyn DefDatabase, mut mark: Mark) {"}, {"sha": "3fdd09b004eee9e142d11804d26606b9cbd55f95", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -640,22 +640,20 @@ impl<'a> AssocItemCollector<'a> {\n                 AssocItem::MacroCall(call) => {\n                     let file_id = self.expander.current_file_id();\n                     let root = self.db.parse_or_expand(file_id);\n-                    if let Some(root) = root {\n-                        let call = &item_tree[call];\n-\n-                        let ast_id_map = self.db.ast_id_map(file_id);\n-                        let macro_call = ast_id_map.get(call.ast_id).to_node(&root);\n-                        let _cx = stdx::panic_context::enter(format!(\n-                            \"collect_items MacroCall: {macro_call}\"\n-                        ));\n-                        if let Ok(res) =\n-                            self.expander.enter_expand::<ast::MacroItems>(self.db, macro_call)\n-                        {\n-                            self.collect_macro_items(res, &|| hir_expand::MacroCallKind::FnLike {\n-                                ast_id: InFile::new(file_id, call.ast_id),\n-                                expand_to: hir_expand::ExpandTo::Items,\n-                            });\n-                        }\n+                    let call = &item_tree[call];\n+\n+                    let ast_id_map = self.db.ast_id_map(file_id);\n+                    let macro_call = ast_id_map.get(call.ast_id).to_node(&root);\n+                    let _cx = stdx::panic_context::enter(format!(\n+                        \"collect_items MacroCall: {macro_call}\"\n+                    ));\n+                    if let Ok(res) =\n+                        self.expander.enter_expand::<ast::MacroItems>(self.db, macro_call)\n+                    {\n+                        self.collect_macro_items(res, &|| hir_expand::MacroCallKind::FnLike {\n+                            ast_id: InFile::new(file_id, call.ast_id),\n+                            expand_to: hir_expand::ExpandTo::Items,\n+                        });\n                     }\n                 }\n             }"}, {"sha": "64e61fe5a4f0c75202d3c7dea52b85d4cf273955", "filename": "crates/hir-def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -108,10 +108,7 @@ pub struct ItemTree {\n impl ItemTree {\n     pub(crate) fn file_item_tree_query(db: &dyn DefDatabase, file_id: HirFileId) -> Arc<ItemTree> {\n         let _p = profile::span(\"file_item_tree_query\").detail(|| format!(\"{file_id:?}\"));\n-        let syntax = match db.parse_or_expand(file_id) {\n-            Some(node) => node,\n-            None => return Default::default(),\n-        };\n+        let syntax = db.parse_or_expand(file_id);\n         if never!(syntax.kind() == SyntaxKind::ERROR, \"{:?} from {:?} {}\", file_id, syntax, syntax)\n         {\n             // FIXME: not 100% sure why these crop up, but return an empty tree to avoid a panic"}, {"sha": "e5fb15b6be4a9b1eb6f43bd3acf4d1458e9e7c9c", "filename": "crates/hir-def/src/macro_expansion_tests/mbe/matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -33,7 +33,7 @@ m!(&k\");\n \"#,\n         expect![[r#\"\n macro_rules! m { ($i:literal) => {}; }\n-/* error: Failed to lower macro args to token tree */\"#]],\n+/* error: invalid token tree */\"#]],\n     );\n }\n "}, {"sha": "ae56934f632f135a9108ffc724d37fb229cee390", "filename": "crates/hir-def/src/macro_expansion_tests/mbe/tt_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -98,7 +98,7 @@ macro_rules! m1 { ($x:ident) => { ($x } }\n macro_rules! m2 { ($x:ident) => {} }\n \n /* error: invalid macro definition: expected subtree */\n-/* error: Failed to lower macro args to token tree */\n+/* error: invalid token tree */\n \"#]],\n     )\n }"}, {"sha": "552d69ca2eaf36a5d6e99ab056b96707a6abc5c3", "filename": "crates/hir-def/src/macro_expansion_tests/mod.rs", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmod.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -151,34 +151,33 @@ pub fn identity_when_valid(_attr: TokenStream, item: TokenStream) -> TokenStream\n         if let Some(err) = exp.err {\n             format_to!(expn_text, \"/* error: {} */\", err);\n         }\n-        if let Some((parse, token_map)) = exp.value {\n-            if expect_errors {\n-                assert!(!parse.errors().is_empty(), \"no parse errors in expansion\");\n-                for e in parse.errors() {\n-                    format_to!(expn_text, \"/* parse error: {} */\\n\", e);\n-                }\n-            } else {\n-                assert!(\n-                    parse.errors().is_empty(),\n-                    \"parse errors in expansion: \\n{:#?}\",\n-                    parse.errors()\n-                );\n+        let (parse, token_map) = exp.value;\n+        if expect_errors {\n+            assert!(!parse.errors().is_empty(), \"no parse errors in expansion\");\n+            for e in parse.errors() {\n+                format_to!(expn_text, \"/* parse error: {} */\\n\", e);\n             }\n-            let pp = pretty_print_macro_expansion(\n-                parse.syntax_node(),\n-                show_token_ids.then_some(&*token_map),\n+        } else {\n+            assert!(\n+                parse.errors().is_empty(),\n+                \"parse errors in expansion: \\n{:#?}\",\n+                parse.errors()\n             );\n-            let indent = IndentLevel::from_node(call.syntax());\n-            let pp = reindent(indent, pp);\n-            format_to!(expn_text, \"{}\", pp);\n+        }\n+        let pp = pretty_print_macro_expansion(\n+            parse.syntax_node(),\n+            show_token_ids.then_some(&*token_map),\n+        );\n+        let indent = IndentLevel::from_node(call.syntax());\n+        let pp = reindent(indent, pp);\n+        format_to!(expn_text, \"{}\", pp);\n \n-            if tree {\n-                let tree = format!(\"{:#?}\", parse.syntax_node())\n-                    .split_inclusive('\\n')\n-                    .map(|line| format!(\"// {line}\"))\n-                    .collect::<String>();\n-                format_to!(expn_text, \"\\n{}\", tree)\n-            }\n+        if tree {\n+            let tree = format!(\"{:#?}\", parse.syntax_node())\n+                .split_inclusive('\\n')\n+                .map(|line| format!(\"// {line}\"))\n+                .collect::<String>();\n+            format_to!(expn_text, \"\\n{}\", tree)\n         }\n         let range = call.syntax().text_range();\n         let range: Range<usize> = range.into();"}, {"sha": "461b498fa01e108223a4e973bff6c1d376a424b3", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -1371,7 +1371,7 @@ impl DefCollector<'_> {\n \n             self.def_map.diagnostics.push(diag);\n         }\n-        if let Some(errors) = value {\n+        if let errors @ [_, ..] = &*value {\n             let loc: MacroCallLoc = self.db.lookup_intern_macro_call(macro_call_id);\n             let diag = DefDiagnostic::macro_expansion_parse_error(module_id, loc.kind, &errors);\n             self.def_map.diagnostics.push(diag);"}, {"sha": "d2e3575d5e8d5e6b65c5bcd81322caef18d7015f", "filename": "crates/hir-def/src/nameres/tests/incremental.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -109,7 +109,7 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n }\n \n #[test]\n-fn typing_inside_a_function_should_not_invalidate_expansions() {\n+fn typing_inside_a_function_should_not_invalidate_item_expansions() {\n     let (mut db, pos) = TestDB::with_position(\n         r#\"\n //- /lib.rs\n@@ -161,7 +161,7 @@ m!(Z);\n         let n_recalculated_item_trees = events.iter().filter(|it| it.contains(\"item_tree\")).count();\n         assert_eq!(n_recalculated_item_trees, 1);\n         let n_reparsed_macros =\n-            events.iter().filter(|it| it.contains(\"parse_macro_expansion\")).count();\n+            events.iter().filter(|it| it.contains(\"parse_macro_expansion(\")).count();\n         assert_eq!(n_reparsed_macros, 0);\n     }\n }"}, {"sha": "6047f770d4d3082d4c368bbea154d8078c741718", "filename": "crates/hir-def/src/src.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-def%2Fsrc%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fsrc.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -20,7 +20,7 @@ impl<N: ItemTreeNode> HasSource for AssocItemLoc<N> {\n     fn source(&self, db: &dyn DefDatabase) -> InFile<N::Source> {\n         let tree = self.id.item_tree(db);\n         let ast_id_map = db.ast_id_map(self.id.file_id());\n-        let root = db.parse_or_expand(self.id.file_id()).unwrap();\n+        let root = db.parse_or_expand(self.id.file_id());\n         let node = &tree[self.id.value];\n \n         InFile::new(self.id.file_id(), ast_id_map.get(node.ast_id()).to_node(&root))\n@@ -33,7 +33,7 @@ impl<N: ItemTreeNode> HasSource for ItemLoc<N> {\n     fn source(&self, db: &dyn DefDatabase) -> InFile<N::Source> {\n         let tree = self.id.item_tree(db);\n         let ast_id_map = db.ast_id_map(self.id.file_id());\n-        let root = db.parse_or_expand(self.id.file_id()).unwrap();\n+        let root = db.parse_or_expand(self.id.file_id());\n         let node = &tree[self.id.value];\n \n         InFile::new(self.id.file_id(), ast_id_map.get(node.ast_id()).to_node(&root))\n@@ -46,7 +46,7 @@ impl HasSource for Macro2Loc {\n     fn source(&self, db: &dyn DefDatabase) -> InFile<Self::Value> {\n         let tree = self.id.item_tree(db);\n         let ast_id_map = db.ast_id_map(self.id.file_id());\n-        let root = db.parse_or_expand(self.id.file_id()).unwrap();\n+        let root = db.parse_or_expand(self.id.file_id());\n         let node = &tree[self.id.value];\n \n         InFile::new(self.id.file_id(), ast_id_map.get(node.ast_id()).to_node(&root))\n@@ -59,7 +59,7 @@ impl HasSource for MacroRulesLoc {\n     fn source(&self, db: &dyn DefDatabase) -> InFile<Self::Value> {\n         let tree = self.id.item_tree(db);\n         let ast_id_map = db.ast_id_map(self.id.file_id());\n-        let root = db.parse_or_expand(self.id.file_id()).unwrap();\n+        let root = db.parse_or_expand(self.id.file_id());\n         let node = &tree[self.id.value];\n \n         InFile::new(self.id.file_id(), ast_id_map.get(node.ast_id()).to_node(&root))\n@@ -72,7 +72,7 @@ impl HasSource for ProcMacroLoc {\n     fn source(&self, db: &dyn DefDatabase) -> InFile<Self::Value> {\n         let tree = self.id.item_tree(db);\n         let ast_id_map = db.ast_id_map(self.id.file_id());\n-        let root = db.parse_or_expand(self.id.file_id()).unwrap();\n+        let root = db.parse_or_expand(self.id.file_id());\n         let node = &tree[self.id.value];\n \n         InFile::new(self.id.file_id(), ast_id_map.get(node.ast_id()).to_node(&root))"}, {"sha": "4b9f9704c255ac84478d757675b1d0fe1198234b", "filename": "crates/hir-expand/src/builtin_derive_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -198,7 +198,7 @@ fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, ExpandError> {\n fn expand_simple_derive(tt: &tt::Subtree, trait_path: tt::Subtree) -> ExpandResult<tt::Subtree> {\n     let info = match parse_adt(tt) {\n         Ok(info) => info,\n-        Err(e) => return ExpandResult::with_err(tt::Subtree::empty(), e),\n+        Err(e) => return ExpandResult::new(tt::Subtree::empty(), e),\n     };\n     let mut where_block = vec![];\n     let (params, args): (Vec<_>, Vec<_>) = info"}, {"sha": "9a25141d8f198d5d5ac23230ce0daa3f08b4bbe9", "filename": "crates/hir-expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -249,10 +249,7 @@ fn format_args_expand(\n     let mut args = parse_exprs_with_sep(tt, ',');\n \n     if args.is_empty() {\n-        return ExpandResult::with_err(\n-            tt::Subtree::empty(),\n-            mbe::ExpandError::NoMatchingRule.into(),\n-        );\n+        return ExpandResult::new(tt::Subtree::empty(), mbe::ExpandError::NoMatchingRule.into());\n     }\n     for arg in &mut args {\n         // Remove `key =`.\n@@ -575,7 +572,7 @@ fn include_expand(\n         Ok((subtree, map, file_id)) => {\n             ExpandResult::ok(ExpandedEager { subtree, included_file: Some((file_id, map)) })\n         }\n-        Err(e) => ExpandResult::with_err(\n+        Err(e) => ExpandResult::new(\n             ExpandedEager { subtree: tt::Subtree::empty(), included_file: None },\n             e,\n         ),\n@@ -588,7 +585,7 @@ fn include_bytes_expand(\n     tt: &tt::Subtree,\n ) -> ExpandResult<ExpandedEager> {\n     if let Err(e) = parse_string(tt) {\n-        return ExpandResult::with_err(\n+        return ExpandResult::new(\n             ExpandedEager { subtree: tt::Subtree::empty(), included_file: None },\n             e,\n         );\n@@ -613,7 +610,7 @@ fn include_str_expand(\n     let path = match parse_string(tt) {\n         Ok(it) => it,\n         Err(e) => {\n-            return ExpandResult::with_err(\n+            return ExpandResult::new(\n                 ExpandedEager { subtree: tt::Subtree::empty(), included_file: None },\n                 e,\n             )\n@@ -650,7 +647,7 @@ fn env_expand(\n     let key = match parse_string(tt) {\n         Ok(it) => it,\n         Err(e) => {\n-            return ExpandResult::with_err(\n+            return ExpandResult::new(\n                 ExpandedEager { subtree: tt::Subtree::empty(), included_file: None },\n                 e,\n             )\n@@ -686,7 +683,7 @@ fn option_env_expand(\n     let key = match parse_string(tt) {\n         Ok(it) => it,\n         Err(e) => {\n-            return ExpandResult::with_err(\n+            return ExpandResult::new(\n                 ExpandedEager { subtree: tt::Subtree::empty(), included_file: None },\n                 e,\n             )"}, {"sha": "bed04b3a343ca3d15087bdcbb43e4ec5522a9dc0", "filename": "crates/hir-expand/src/db.rs", "status": "modified", "additions": 66, "deletions": 63, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fdb.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -98,17 +98,14 @@ pub trait ExpandDatabase: SourceDatabase {\n     /// Main public API -- parses a hir file, not caring whether it's a real\n     /// file or a macro expansion.\n     #[salsa::transparent]\n-    fn parse_or_expand(&self, file_id: HirFileId) -> Option<SyntaxNode>;\n+    fn parse_or_expand(&self, file_id: HirFileId) -> SyntaxNode;\n     #[salsa::transparent]\n-    fn parse_or_expand_with_err(\n-        &self,\n-        file_id: HirFileId,\n-    ) -> ExpandResult<Option<Parse<SyntaxNode>>>;\n+    fn parse_or_expand_with_err(&self, file_id: HirFileId) -> ExpandResult<Parse<SyntaxNode>>;\n     /// Implementation for the macro case.\n     fn parse_macro_expansion(\n         &self,\n         macro_file: MacroFile,\n-    ) -> ExpandResult<Option<(Parse<SyntaxNode>, Arc<mbe::TokenMap>)>>;\n+    ) -> ExpandResult<(Parse<SyntaxNode>, Arc<mbe::TokenMap>)>;\n \n     /// Macro ids. That's probably the tricksiest bit in rust-analyzer, and the\n     /// reason why we use salsa at all.\n@@ -133,7 +130,7 @@ pub trait ExpandDatabase: SourceDatabase {\n     fn macro_def(&self, id: MacroDefId) -> Result<Arc<TokenExpander>, mbe::ParseError>;\n \n     /// Expand macro call to a token tree.\n-    fn macro_expand(&self, macro_call: MacroCallId) -> ExpandResult<Option<Arc<tt::Subtree>>>;\n+    fn macro_expand(&self, macro_call: MacroCallId) -> ExpandResult<Arc<tt::Subtree>>;\n     /// Special case of the previous query for procedural macros. We can't LRU\n     /// proc macros, since they are not deterministic in general, and\n     /// non-determinism breaks salsa in a very, very, very bad way. @edwin0cheng\n@@ -143,7 +140,7 @@ pub trait ExpandDatabase: SourceDatabase {\n     fn parse_macro_expansion_error(\n         &self,\n         macro_call: MacroCallId,\n-    ) -> ExpandResult<Option<Box<[SyntaxError]>>>;\n+    ) -> ExpandResult<Box<[SyntaxError]>>;\n \n     fn hygiene_frame(&self, file_id: HirFileId) -> Arc<HygieneFrame>;\n }\n@@ -252,37 +249,36 @@ pub fn expand_speculative(\n }\n \n fn ast_id_map(db: &dyn ExpandDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n-    let map = db.parse_or_expand(file_id).map(|it| AstIdMap::from_source(&it)).unwrap_or_default();\n-    Arc::new(map)\n+    Arc::new(AstIdMap::from_source(&db.parse_or_expand(file_id)))\n }\n \n-fn parse_or_expand(db: &dyn ExpandDatabase, file_id: HirFileId) -> Option<SyntaxNode> {\n+fn parse_or_expand(db: &dyn ExpandDatabase, file_id: HirFileId) -> SyntaxNode {\n     match file_id.repr() {\n-        HirFileIdRepr::FileId(file_id) => Some(db.parse(file_id).tree().syntax().clone()),\n+        HirFileIdRepr::FileId(file_id) => db.parse(file_id).tree().syntax().clone(),\n         HirFileIdRepr::MacroFile(macro_file) => {\n-            db.parse_macro_expansion(macro_file).value.map(|(it, _)| it.syntax_node())\n+            db.parse_macro_expansion(macro_file).value.0.syntax_node()\n         }\n     }\n }\n \n fn parse_or_expand_with_err(\n     db: &dyn ExpandDatabase,\n     file_id: HirFileId,\n-) -> ExpandResult<Option<Parse<SyntaxNode>>> {\n+) -> ExpandResult<Parse<SyntaxNode>> {\n     match file_id.repr() {\n-        HirFileIdRepr::FileId(file_id) => ExpandResult::ok(Some(db.parse(file_id).to_syntax())),\n+        HirFileIdRepr::FileId(file_id) => ExpandResult::ok(db.parse(file_id).to_syntax()),\n         HirFileIdRepr::MacroFile(macro_file) => {\n-            db.parse_macro_expansion(macro_file).map(|it| it.map(|(parse, _)| parse))\n+            db.parse_macro_expansion(macro_file).map(|(it, _)| it)\n         }\n     }\n }\n \n fn parse_macro_expansion(\n     db: &dyn ExpandDatabase,\n     macro_file: MacroFile,\n-) -> ExpandResult<Option<(Parse<SyntaxNode>, Arc<mbe::TokenMap>)>> {\n+) -> ExpandResult<(Parse<SyntaxNode>, Arc<mbe::TokenMap>)> {\n     let _p = profile::span(\"parse_macro_expansion\");\n-    let mbe::ValueResult { value, err } = db.macro_expand(macro_file.macro_call_id);\n+    let mbe::ValueResult { value: tt, err } = db.macro_expand(macro_file.macro_call_id);\n \n     if let Some(err) = &err {\n         if tracing::enabled!(tracing::Level::DEBUG) {\n@@ -308,10 +304,6 @@ fn parse_macro_expansion(\n             );\n         }\n     }\n-    let tt = match value {\n-        Some(tt) => tt,\n-        None => return ExpandResult { value: None, err },\n-    };\n \n     let expand_to = macro_expand_to(db, macro_file.macro_call_id);\n \n@@ -320,7 +312,7 @@ fn parse_macro_expansion(\n \n     let (parse, rev_token_map) = token_tree_to_syntax_node(&tt, expand_to);\n \n-    ExpandResult { value: Some((parse, Arc::new(rev_token_map))), err }\n+    ExpandResult { value: (parse, Arc::new(rev_token_map)), err }\n }\n \n fn macro_arg(\n@@ -448,78 +440,89 @@ fn macro_def(\n     }\n }\n \n-fn macro_expand(\n-    db: &dyn ExpandDatabase,\n-    id: MacroCallId,\n-    // FIXME: Remove the OPtion if possible\n-) -> ExpandResult<Option<Arc<tt::Subtree>>> {\n+fn macro_expand(db: &dyn ExpandDatabase, id: MacroCallId) -> ExpandResult<Arc<tt::Subtree>> {\n     let _p = profile::span(\"macro_expand\");\n     let loc: MacroCallLoc = db.lookup_intern_macro_call(id);\n     if let Some(eager) = &loc.eager {\n-        return ExpandResult {\n-            value: Some(eager.arg_or_expansion.clone()),\n-            err: eager.error.clone(),\n-        };\n+        return ExpandResult { value: eager.arg_or_expansion.clone(), err: eager.error.clone() };\n     }\n \n-    let macro_arg = match db.macro_arg(id) {\n-        Some(it) => it,\n-        None => {\n-            return ExpandResult::only_err(ExpandError::Other(\n-                \"Failed to lower macro args to token tree\".into(),\n-            ))\n-        }\n-    };\n-\n     let expander = match db.macro_def(loc.def) {\n         Ok(it) => it,\n         // FIXME: This is weird -- we effectively report macro *definition*\n         // errors lazily, when we try to expand the macro. Instead, they should\n         // be reported at the definition site when we construct a def map.\n         // (Note we do report them also at the definition site in the late diagnostic pass)\n         Err(err) => {\n-            return ExpandResult::only_err(ExpandError::Other(\n-                format!(\"invalid macro definition: {err}\").into(),\n-            ))\n+            return ExpandResult {\n+                value: Arc::new(tt::Subtree {\n+                    delimiter: tt::Delimiter::UNSPECIFIED,\n+                    token_trees: vec![],\n+                }),\n+                err: Some(ExpandError::Other(format!(\"invalid macro definition: {err}\").into())),\n+            }\n         }\n     };\n+    let Some(macro_arg) = db.macro_arg(id) else {\n+        return ExpandResult {\n+            value: Arc::new(\n+                tt::Subtree {\n+                    delimiter: tt::Delimiter::UNSPECIFIED,\n+                    token_trees: Vec::new(),\n+                },\n+            ),\n+            err: Some(ExpandError::Other(\n+                \"invalid token tree\"\n+                .into(),\n+            )),\n+        };\n+    };\n     let ExpandResult { value: mut tt, err } = expander.expand(db, id, &macro_arg.0);\n     // Set a hard limit for the expanded tt\n     let count = tt.count();\n     if TOKEN_LIMIT.check(count).is_err() {\n-        return ExpandResult::only_err(ExpandError::Other(\n-            format!(\n-                \"macro invocation exceeds token limit: produced {} tokens, limit is {}\",\n-                count,\n-                TOKEN_LIMIT.inner(),\n-            )\n-            .into(),\n-        ));\n+        return ExpandResult {\n+            value: Arc::new(tt::Subtree {\n+                delimiter: tt::Delimiter::UNSPECIFIED,\n+                token_trees: vec![],\n+            }),\n+            err: Some(ExpandError::Other(\n+                format!(\n+                    \"macro invocation exceeds token limit: produced {} tokens, limit is {}\",\n+                    count,\n+                    TOKEN_LIMIT.inner(),\n+                )\n+                .into(),\n+            )),\n+        };\n     }\n \n     fixup::reverse_fixups(&mut tt, &macro_arg.1, &macro_arg.2);\n \n-    ExpandResult { value: Some(Arc::new(tt)), err }\n+    ExpandResult { value: Arc::new(tt), err }\n }\n \n fn parse_macro_expansion_error(\n     db: &dyn ExpandDatabase,\n     macro_call_id: MacroCallId,\n-) -> ExpandResult<Option<Box<[SyntaxError]>>> {\n+) -> ExpandResult<Box<[SyntaxError]>> {\n     db.parse_macro_expansion(MacroFile { macro_call_id })\n-        .map(|it| it.map(|(it, _)| it.errors().to_vec().into_boxed_slice()))\n+        .map(|it| it.0.errors().to_vec().into_boxed_slice())\n }\n \n fn expand_proc_macro(db: &dyn ExpandDatabase, id: MacroCallId) -> ExpandResult<tt::Subtree> {\n     let loc: MacroCallLoc = db.lookup_intern_macro_call(id);\n-    let macro_arg = match db.macro_arg(id) {\n-        Some(it) => it,\n-        None => {\n-            return ExpandResult::with_err(\n-                tt::Subtree::empty(),\n-                ExpandError::Other(\"No arguments for proc-macro\".into()),\n-            )\n-        }\n+    let Some(macro_arg) = db.macro_arg(id) else {\n+        return ExpandResult {\n+            value: tt::Subtree {\n+                delimiter: tt::Delimiter::UNSPECIFIED,\n+                token_trees: Vec::new(),\n+            },\n+            err: Some(ExpandError::Other(\n+                \"invalid token tree\"\n+                .into(),\n+            )),\n+        };\n     };\n \n     let expander = match loc.def.kind {"}, {"sha": "b108e920443fab5f5afee04f9068315cf10678f0", "filename": "crates/hir-expand/src/eager.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Feager.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -111,7 +111,7 @@ fn lazy_expand(\n     def: &MacroDefId,\n     macro_call: InFile<ast::MacroCall>,\n     krate: CrateId,\n-) -> ExpandResult<Option<InFile<Parse<SyntaxNode>>>> {\n+) -> ExpandResult<InFile<Parse<SyntaxNode>>> {\n     let ast_id = db.ast_id_map(macro_call.file_id).ast_id(&macro_call.value);\n \n     let expand_to = ExpandTo::from_call_site(&macro_call.value);\n@@ -121,8 +121,7 @@ fn lazy_expand(\n         MacroCallKind::FnLike { ast_id: macro_call.with_value(ast_id), expand_to },\n     );\n \n-    db.parse_or_expand_with_err(id.as_file())\n-        .map(|parse| parse.map(|parse| InFile::new(id.as_file(), parse)))\n+    db.parse_or_expand_with_err(id.as_file()).map(|parse| InFile::new(id.as_file(), parse))\n }\n \n fn eager_macro_recur(\n@@ -162,8 +161,7 @@ fn eager_macro_recur(\n                     Err(err) => return Err(err),\n                 };\n                 id.map(|call| {\n-                    call.and_then(|call| db.parse_or_expand(call.as_file()))\n-                        .map(|it| it.clone_for_update())\n+                    call.map(|call| db.parse_or_expand(call.as_file()).clone_for_update())\n                 })\n             }\n             MacroDefKind::Declarative(_)\n@@ -174,23 +172,18 @@ fn eager_macro_recur(\n                 let ExpandResult { value, err } =\n                     lazy_expand(db, &def, curr.with_value(child.clone()), krate);\n \n-                match value {\n-                    Some(val) => {\n-                        // replace macro inside\n-                        let hygiene = Hygiene::new(db, val.file_id);\n-                        let ExpandResult { value, err: error } = eager_macro_recur(\n-                            db,\n-                            &hygiene,\n-                            // FIXME: We discard parse errors here\n-                            val.map(|it| it.syntax_node()),\n-                            krate,\n-                            macro_resolver,\n-                        )?;\n-                        let err = if err.is_none() { error } else { err };\n-                        ExpandResult { value, err }\n-                    }\n-                    None => ExpandResult { value: None, err },\n-                }\n+                // replace macro inside\n+                let hygiene = Hygiene::new(db, value.file_id);\n+                let ExpandResult { value, err: error } = eager_macro_recur(\n+                    db,\n+                    &hygiene,\n+                    // FIXME: We discard parse errors here\n+                    value.map(|it| it.syntax_node()),\n+                    krate,\n+                    macro_resolver,\n+                )?;\n+                let err = if err.is_none() { error } else { err };\n+                ExpandResult { value, err }\n             }\n         };\n         if err.is_some() {"}, {"sha": "00796e7c0dbb02351967826256098143606a0a8a", "filename": "crates/hir-expand/src/fixup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Ffixup.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -14,7 +14,7 @@ use tt::token_id::Subtree;\n /// The result of calculating fixes for a syntax node -- a bunch of changes\n /// (appending to and replacing nodes), the information that is needed to\n /// reverse those changes afterwards, and a token map.\n-#[derive(Debug)]\n+#[derive(Debug, Default)]\n pub(crate) struct SyntaxFixups {\n     pub(crate) append: FxHashMap<SyntaxElement, Vec<SyntheticToken>>,\n     pub(crate) replace: FxHashMap<SyntaxElement, Vec<SyntheticToken>>,\n@@ -24,7 +24,7 @@ pub(crate) struct SyntaxFixups {\n }\n \n /// This is the information needed to reverse the fixups.\n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Debug, Default, PartialEq, Eq)]\n pub struct SyntaxFixupUndoInfo {\n     original: Vec<Subtree>,\n }"}, {"sha": "9af38fed04451d1b1eb4793b66d935cba177d56c", "filename": "crates/hir-expand/src/hygiene.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fhygiene.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -200,8 +200,14 @@ fn make_hygiene_info(\n     });\n \n     let macro_def = db.macro_def(loc.def).ok()?;\n-    let (_, exp_map) = db.parse_macro_expansion(macro_file).value?;\n-    let macro_arg = db.macro_arg(macro_file.macro_call_id)?;\n+    let (_, exp_map) = db.parse_macro_expansion(macro_file).value;\n+    let macro_arg = db.macro_arg(macro_file.macro_call_id).unwrap_or_else(|| {\n+        Arc::new((\n+            tt::Subtree { delimiter: tt::Delimiter::UNSPECIFIED, token_trees: Vec::new() },\n+            Default::default(),\n+            Default::default(),\n+        ))\n+    });\n \n     Some(HygieneInfo {\n         file: macro_file,"}, {"sha": "965b9e850b425867bd2383ffbfd30ac60374a6f8", "filename": "crates/hir-expand/src/lib.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Flib.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -257,8 +257,14 @@ impl HirFileId {\n         let arg_tt = loc.kind.arg(db)?;\n \n         let macro_def = db.macro_def(loc.def).ok()?;\n-        let (parse, exp_map) = db.parse_macro_expansion(macro_file).value?;\n-        let macro_arg = db.macro_arg(macro_file.macro_call_id)?;\n+        let (parse, exp_map) = db.parse_macro_expansion(macro_file).value;\n+        let macro_arg = db.macro_arg(macro_file.macro_call_id).unwrap_or_else(|| {\n+            Arc::new((\n+                tt::Subtree { delimiter: tt::Delimiter::UNSPECIFIED, token_trees: Vec::new() },\n+                Default::default(),\n+                Default::default(),\n+            ))\n+        });\n \n         let def = loc.def.ast_id().left().and_then(|id| {\n             let def_tt = match id.to_node(db) {\n@@ -730,7 +736,7 @@ pub type AstId<N> = InFile<FileAstId<N>>;\n \n impl<N: AstNode> AstId<N> {\n     pub fn to_node(&self, db: &dyn db::ExpandDatabase) -> N {\n-        let root = db.parse_or_expand(self.file_id).unwrap();\n+        let root = db.parse_or_expand(self.file_id);\n         db.ast_id_map(self.file_id).get(self.value).to_node(&root)\n     }\n }\n@@ -766,7 +772,7 @@ impl<T> InFile<T> {\n     }\n \n     pub fn file_syntax(&self, db: &dyn db::ExpandDatabase) -> SyntaxNode {\n-        db.parse_or_expand(self.file_id).expect(\"source created from invalid file\")\n+        db.parse_or_expand(self.file_id)\n     }\n }\n "}, {"sha": "dc04a41155d1b249cff45728512cc2769d2155fd", "filename": "crates/hir-expand/src/proc_macro.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -38,7 +38,7 @@ impl ProcMacroExpander {\n                     Some(Ok(proc_macros)) => proc_macros,\n                     Some(Err(_)) | None => {\n                         never!(\"Non-dummy expander even though there are no proc macros\");\n-                        return ExpandResult::with_err(\n+                        return ExpandResult::new(\n                             tt::Subtree::empty(),\n                             ExpandError::Other(\"Internal error\".into()),\n                         );\n@@ -52,7 +52,7 @@ impl ProcMacroExpander {\n                             proc_macros.len(),\n                             id.0\n                         );\n-                        return ExpandResult::with_err(\n+                        return ExpandResult::new(\n                             tt::Subtree::empty(),\n                             ExpandError::Other(\"Internal error\".into()),\n                         );\n@@ -75,17 +75,15 @@ impl ProcMacroExpander {\n                             }\n                         }\n                         ProcMacroExpansionError::System(text)\n-                        | ProcMacroExpansionError::Panic(text) => ExpandResult::with_err(\n-                            tt::Subtree::empty(),\n-                            ExpandError::Other(text.into()),\n-                        ),\n+                        | ProcMacroExpansionError::Panic(text) => {\n+                            ExpandResult::new(tt::Subtree::empty(), ExpandError::Other(text.into()))\n+                        }\n                     },\n                 }\n             }\n-            None => ExpandResult::with_err(\n-                tt::Subtree::empty(),\n-                ExpandError::UnresolvedProcMacro(def_crate),\n-            ),\n+            None => {\n+                ExpandResult::new(tt::Subtree::empty(), ExpandError::UnresolvedProcMacro(def_crate))\n+            }\n         }\n     }\n }"}, {"sha": "fee03ed0bd86e085200ee4e72f08cf3f85beadbc", "filename": "crates/hir-ty/src/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -246,7 +246,7 @@ fn expr_node(\n ) -> Option<InFile<SyntaxNode>> {\n     Some(match body_source_map.expr_syntax(expr) {\n         Ok(sp) => {\n-            let root = db.parse_or_expand(sp.file_id).unwrap();\n+            let root = db.parse_or_expand(sp.file_id);\n             sp.map(|ptr| ptr.to_node(&root).syntax().clone())\n         }\n         Err(SyntheticSyntax) => return None,\n@@ -260,7 +260,7 @@ fn pat_node(\n ) -> Option<InFile<SyntaxNode>> {\n     Some(match body_source_map.pat_syntax(pat) {\n         Ok(sp) => {\n-            let root = db.parse_or_expand(sp.file_id).unwrap();\n+            let root = db.parse_or_expand(sp.file_id);\n             sp.map(|ptr| {\n                 ptr.either(\n                     |it| it.to_node(&root).syntax().clone(),\n@@ -290,7 +290,7 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n         for (pat, ty) in inference_result.type_of_pat.iter() {\n             let syntax_ptr = match body_source_map.pat_syntax(pat) {\n                 Ok(sp) => {\n-                    let root = db.parse_or_expand(sp.file_id).unwrap();\n+                    let root = db.parse_or_expand(sp.file_id);\n                     sp.map(|ptr| {\n                         ptr.either(\n                             |it| it.to_node(&root).syntax().clone(),\n@@ -309,7 +309,7 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n         for (expr, ty) in inference_result.type_of_expr.iter() {\n             let node = match body_source_map.expr_syntax(expr) {\n                 Ok(sp) => {\n-                    let root = db.parse_or_expand(sp.file_id).unwrap();\n+                    let root = db.parse_or_expand(sp.file_id);\n                     sp.map(|ptr| ptr.to_node(&root).syntax().clone())\n                 }\n                 Err(SyntheticSyntax) => continue,"}, {"sha": "b32efe1cb54f5d97dbb92fe4b4f13185a35068c2", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -140,7 +140,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.parse(file_id)\n     }\n \n-    pub fn parse_or_expand(&self, file_id: HirFileId) -> Option<SyntaxNode> {\n+    pub fn parse_or_expand(&self, file_id: HirFileId) -> SyntaxNode {\n         self.imp.parse_or_expand(file_id)\n     }\n \n@@ -518,23 +518,23 @@ impl<'db> SemanticsImpl<'db> {\n         tree\n     }\n \n-    fn parse_or_expand(&self, file_id: HirFileId) -> Option<SyntaxNode> {\n-        let node = self.db.parse_or_expand(file_id)?;\n+    fn parse_or_expand(&self, file_id: HirFileId) -> SyntaxNode {\n+        let node = self.db.parse_or_expand(file_id);\n         self.cache(node.clone(), file_id);\n-        Some(node)\n+        node\n     }\n \n     fn expand(&self, macro_call: &ast::MacroCall) -> Option<SyntaxNode> {\n         let sa = self.analyze_no_infer(macro_call.syntax())?;\n         let file_id = sa.expand(self.db, InFile::new(sa.file_id, macro_call))?;\n-        let node = self.parse_or_expand(file_id)?;\n+        let node = self.parse_or_expand(file_id);\n         Some(node)\n     }\n \n     fn expand_attr_macro(&self, item: &ast::Item) -> Option<SyntaxNode> {\n         let src = self.wrap_node_infile(item.clone());\n         let macro_call_id = self.with_ctx(|ctx| ctx.item_to_macro_call(src))?;\n-        self.parse_or_expand(macro_call_id.as_file())\n+        Some(self.parse_or_expand(macro_call_id.as_file()))\n     }\n \n     fn expand_derive_as_pseudo_attr_macro(&self, attr: &ast::Attr) -> Option<SyntaxNode> {\n@@ -543,7 +543,7 @@ impl<'db> SemanticsImpl<'db> {\n         let call_id = self.with_ctx(|ctx| {\n             ctx.attr_to_derive_macro_call(src.with_value(&adt), src).map(|(_, it, _)| it)\n         })?;\n-        self.parse_or_expand(call_id.as_file())\n+        Some(self.parse_or_expand(call_id.as_file()))\n     }\n \n     fn resolve_derive_macro(&self, attr: &ast::Attr) -> Option<Vec<Option<Macro>>> {\n@@ -566,7 +566,7 @@ impl<'db> SemanticsImpl<'db> {\n             .into_iter()\n             .flat_map(|call| {\n                 let file_id = call?.as_file();\n-                let node = self.db.parse_or_expand(file_id)?;\n+                let node = self.db.parse_or_expand(file_id);\n                 self.cache(node.clone(), file_id);\n                 Some(node)\n             })\n@@ -990,7 +990,7 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn diagnostics_display_range(&self, src: InFile<SyntaxNodePtr>) -> FileRange {\n-        let root = self.parse_or_expand(src.file_id).unwrap();\n+        let root = self.parse_or_expand(src.file_id);\n         let node = src.map(|it| it.to_node(&root));\n         node.as_ref().original_file_range(self.db.upcast())\n     }"}, {"sha": "d0bf1c23acd6b544f40f61ebd2ba5cc898fc8386", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -141,7 +141,7 @@ impl SourceAnalyzer {\n         expr: InFile<ast::MacroCall>,\n     ) -> Option<InFile<ast::Expr>> {\n         let macro_file = self.body_source_map()?.node_macro_file(expr.as_ref())?;\n-        let expanded = db.parse_or_expand(macro_file)?;\n+        let expanded = db.parse_or_expand(macro_file);\n         let res = if let Some(stmts) = ast::MacroStmts::cast(expanded.clone()) {\n             match stmts.expr()? {\n                 ast::Expr::MacroExpr(mac) => {"}, {"sha": "3eafd97b991d96dad90a42e2e3f4fe617069f7c4", "filename": "crates/hir/src/symbols.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fhir%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsymbols.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -32,18 +32,18 @@ pub struct DeclarationLocation {\n }\n \n impl DeclarationLocation {\n-    pub fn syntax<DB: HirDatabase>(&self, sema: &Semantics<'_, DB>) -> Option<SyntaxNode> {\n-        let root = sema.parse_or_expand(self.hir_file_id)?;\n-        Some(self.ptr.to_node(&root))\n+    pub fn syntax<DB: HirDatabase>(&self, sema: &Semantics<'_, DB>) -> SyntaxNode {\n+        let root = sema.parse_or_expand(self.hir_file_id);\n+        self.ptr.to_node(&root)\n     }\n \n-    pub fn original_range(&self, db: &dyn HirDatabase) -> Option<FileRange> {\n-        let node = resolve_node(db, self.hir_file_id, &self.ptr)?;\n-        Some(node.as_ref().original_file_range(db.upcast()))\n+    pub fn original_range(&self, db: &dyn HirDatabase) -> FileRange {\n+        let node = resolve_node(db, self.hir_file_id, &self.ptr);\n+        node.as_ref().original_file_range(db.upcast())\n     }\n \n     pub fn original_name_range(&self, db: &dyn HirDatabase) -> Option<FileRange> {\n-        let node = resolve_node(db, self.hir_file_id, &self.name_ptr)?;\n+        let node = resolve_node(db, self.hir_file_id, &self.name_ptr);\n         node.as_ref().original_file_range_opt(db.upcast())\n     }\n }\n@@ -52,10 +52,10 @@ fn resolve_node(\n     db: &dyn HirDatabase,\n     file_id: HirFileId,\n     ptr: &SyntaxNodePtr,\n-) -> Option<InFile<SyntaxNode>> {\n-    let root = db.parse_or_expand(file_id)?;\n+) -> InFile<SyntaxNode> {\n+    let root = db.parse_or_expand(file_id);\n     let node = ptr.to_node(&root);\n-    Some(InFile::new(file_id, node))\n+    InFile::new(file_id, node)\n }\n \n #[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]"}, {"sha": "36ac8c71d81548455f74c5667ec4bae6b4036b6f", "filename": "crates/ide-assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -59,7 +59,7 @@ pub(crate) fn replace_derive_with_manual_impl(\n     // collect the derive paths from the #[derive] expansion\n     let current_derives = ctx\n         .sema\n-        .parse_or_expand(hir_file)?\n+        .parse_or_expand(hir_file)\n         .descendants()\n         .filter_map(ast::Attr::cast)\n         .filter_map(|attr| attr.path())"}, {"sha": "74f7e0fe0d250ffbec26705afb18813f6b81d1b6", "filename": "crates/ide-db/src/items_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fitems_locator.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -136,7 +136,7 @@ fn get_name_definition(\n ) -> Option<Definition> {\n     let _p = profile::span(\"get_name_definition\");\n \n-    let candidate_node = import_candidate.loc.syntax(sema)?;\n+    let candidate_node = import_candidate.loc.syntax(sema);\n     let candidate_name_node = if candidate_node.kind() != NAME {\n         candidate_node.children().find(|it| it.kind() == NAME)?\n     } else {"}, {"sha": "ad2427017d1d21ac05c8982848b12a4633e08012", "filename": "crates/ide-diagnostics/src/handlers/incorrect_case.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -27,7 +27,7 @@ pub(crate) fn incorrect_case(ctx: &DiagnosticsContext<'_>, d: &hir::IncorrectCas\n }\n \n fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::IncorrectCase) -> Option<Vec<Assist>> {\n-    let root = ctx.sema.db.parse_or_expand(d.file)?;\n+    let root = ctx.sema.db.parse_or_expand(d.file);\n     let name_node = d.ident.to_node(&root);\n     let def = NameClass::classify(&ctx.sema, &name_node)?.defined()?;\n "}, {"sha": "17a2b44ccd5f34e51f0aa0dc18b91747565aeb6f", "filename": "crates/ide-diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -56,7 +56,7 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n         return None;\n     }\n \n-    let root = ctx.sema.db.parse_or_expand(d.file)?;\n+    let root = ctx.sema.db.parse_or_expand(d.file);\n \n     let current_module = match &d.field_list_parent {\n         Either::Left(ptr) => ctx.sema.scope(ptr.to_node(&root).syntax()).map(|it| it.module()),"}, {"sha": "d73f4e7721c29216ba78c2cdc0b57c4468c0adfb", "filename": "crates/ide-diagnostics/src/handlers/missing_unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_unsafe.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -24,7 +24,7 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingUnsafe) -> Option<Vec<Ass\n         return None;\n     }\n \n-    let root = ctx.sema.db.parse_or_expand(d.expr.file_id)?;\n+    let root = ctx.sema.db.parse_or_expand(d.expr.file_id);\n     let expr = d.expr.value.to_node(&root);\n \n     let node_to_add_unsafe_block = pick_best_node_to_add_unsafe_block(&expr)?;"}, {"sha": "a39eceab243791e63e70ca6f2faa5e44c80552b5", "filename": "crates/ide-diagnostics/src/handlers/no_such_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -21,7 +21,7 @@ pub(crate) fn no_such_field(ctx: &DiagnosticsContext<'_>, d: &hir::NoSuchField)\n }\n \n fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::NoSuchField) -> Option<Vec<Assist>> {\n-    let root = ctx.sema.db.parse_or_expand(d.field.file_id)?;\n+    let root = ctx.sema.db.parse_or_expand(d.field.file_id);\n     missing_record_expr_field_fixes(\n         &ctx.sema,\n         d.field.file_id.original_file(ctx.sema.db),"}, {"sha": "d3eda3c5ebce37b768512eb8b00f58f8fe5ca7e4", "filename": "crates/ide-diagnostics/src/handlers/replace_filter_map_next_with_find_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -28,7 +28,7 @@ fn fixes(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::ReplaceFilterMapNextWithFindMap,\n ) -> Option<Vec<Assist>> {\n-    let root = ctx.sema.db.parse_or_expand(d.file)?;\n+    let root = ctx.sema.db.parse_or_expand(d.file);\n     let next_expr = d.next_expr.to_node(&root);\n     let next_call = ast::MethodCallExpr::cast(next_expr.syntax().clone())?;\n "}, {"sha": "488c75b90327cc0f46a0de50ad2fb22266bddc4c", "filename": "crates/ide-diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -93,7 +93,7 @@ fn add_missing_ok_or_some(\n     expr_ptr: &InFile<AstPtr<ast::Expr>>,\n     acc: &mut Vec<Assist>,\n ) -> Option<()> {\n-    let root = ctx.sema.db.parse_or_expand(expr_ptr.file_id)?;\n+    let root = ctx.sema.db.parse_or_expand(expr_ptr.file_id);\n     let expr = expr_ptr.value.to_node(&root);\n     let expr_range = expr.syntax().text_range();\n     let scope = ctx.sema.scope(expr.syntax())?;\n@@ -133,7 +133,7 @@ fn remove_semicolon(\n     expr_ptr: &InFile<AstPtr<ast::Expr>>,\n     acc: &mut Vec<Assist>,\n ) -> Option<()> {\n-    let root = ctx.sema.db.parse_or_expand(expr_ptr.file_id)?;\n+    let root = ctx.sema.db.parse_or_expand(expr_ptr.file_id);\n     let expr = expr_ptr.value.to_node(&root);\n     if !d.actual.is_unit() {\n         return None;\n@@ -169,7 +169,7 @@ fn str_ref_to_owned(\n         return None;\n     }\n \n-    let root = ctx.sema.db.parse_or_expand(expr_ptr.file_id)?;\n+    let root = ctx.sema.db.parse_or_expand(expr_ptr.file_id);\n     let expr = expr_ptr.value.to_node(&root);\n     let expr_range = expr.syntax().text_range();\n "}, {"sha": "09bb9f3ebf620deb0e354d9dca07b1fbaa997856", "filename": "crates/ide-diagnostics/src/handlers/unresolved_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_field.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -50,7 +50,7 @@ fn method_fix(\n     ctx: &DiagnosticsContext<'_>,\n     expr_ptr: &InFile<AstPtr<ast::Expr>>,\n ) -> Option<Vec<Assist>> {\n-    let root = ctx.sema.db.parse_or_expand(expr_ptr.file_id)?;\n+    let root = ctx.sema.db.parse_or_expand(expr_ptr.file_id);\n     let expr = expr_ptr.value.to_node(&root);\n     let FileRange { range, file_id } = ctx.sema.original_range_opt(expr.syntax())?;\n     Some(vec![Assist {"}, {"sha": "8a0b457857942d6c8ce0e35484be3c0fca771544", "filename": "crates/ide-diagnostics/src/handlers/unresolved_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_method.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -53,7 +53,7 @@ fn field_fix(\n         return None;\n     }\n     let expr_ptr = &d.expr;\n-    let root = ctx.sema.db.parse_or_expand(expr_ptr.file_id)?;\n+    let root = ctx.sema.db.parse_or_expand(expr_ptr.file_id);\n     let expr = expr_ptr.value.to_node(&root);\n     let (file_id, range) = match expr {\n         ast::Expr::MethodCallExpr(mcall) => {"}, {"sha": "6e3fd3b42b0c36c9aa79d462fb9b8e45de7c563e", "filename": "crates/ide-diagnostics/src/handlers/unresolved_module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -31,7 +31,7 @@ pub(crate) fn unresolved_module(\n }\n \n fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::UnresolvedModule) -> Option<Vec<Assist>> {\n-    let root = ctx.sema.db.parse_or_expand(d.decl.file_id)?;\n+    let root = ctx.sema.db.parse_or_expand(d.decl.file_id);\n     let unresolved_module = d.decl.value.to_node(&root);\n     Some(\n         d.candidates"}, {"sha": "25d3568950dfef46f85ad176ddcd928c59ee71ea", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -201,7 +201,7 @@ impl<'a> DiagnosticsContext<'a> {\n         let sema = &self.sema;\n         (|| {\n             let precise_location = precise_location?;\n-            let root = sema.parse_or_expand(node.file_id)?;\n+            let root = sema.parse_or_expand(node.file_id);\n             match root.covering_element(precise_location) {\n                 syntax::NodeOrToken::Node(it) => Some(sema.original_range(&it)),\n                 syntax::NodeOrToken::Token(it) => {"}, {"sha": "c1a775136f6b9f3cbc622edec72ce5559554caa6", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -160,7 +160,7 @@ impl NavigationTarget {\n \n impl TryToNav for FileSymbol {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n-        let full_range = self.loc.original_range(db)?;\n+        let full_range = self.loc.original_range(db);\n         let name_range = self.loc.original_name_range(db)?;\n \n         Some(NavigationTarget {\n@@ -549,7 +549,7 @@ impl TryToNav for hir::ConstParam {\n /// e.g. `struct Name`, `enum Name`, `fn Name`\n pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n     let sema = Semantics::new(db);\n-    let node = symbol.loc.syntax(&sema)?;\n+    let node = symbol.loc.syntax(&sema);\n \n     match_ast! {\n         match node {"}, {"sha": "71fc91cf3177cce9acce20bc59fa383f098b958f", "filename": "crates/ide/src/status.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -120,12 +120,12 @@ impl FromIterator<TableEntry<FileId, Parse<ast::SourceFile>>> for SyntaxTreeStat\n     }\n }\n \n-impl<M> FromIterator<TableEntry<MacroFile, ExpandResult<Option<(Parse<SyntaxNode>, M)>>>>\n+impl<M> FromIterator<TableEntry<MacroFile, ExpandResult<(Parse<SyntaxNode>, M)>>>\n     for SyntaxTreeStats\n {\n     fn from_iter<T>(iter: T) -> SyntaxTreeStats\n     where\n-        T: IntoIterator<Item = TableEntry<MacroFile, ExpandResult<Option<(Parse<SyntaxNode>, M)>>>>,\n+        T: IntoIterator<Item = TableEntry<MacroFile, ExpandResult<(Parse<SyntaxNode>, M)>>>,\n     {\n         let mut res = SyntaxTreeStats::default();\n         for entry in iter {"}, {"sha": "6b7f4a22d29597dd4c0ef0a0cfc214ba444cdda5", "filename": "crates/mbe/src/expander.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fmbe%2Fsrc%2Fexpander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fmbe%2Fsrc%2Fexpander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn expand_rules(\n             transcriber::transcribe(&rule.rhs, &match_.bindings);\n         ExpandResult { value, err: match_.err.or(transcribe_err) }\n     } else {\n-        ExpandResult::with_err(\n+        ExpandResult::new(\n             tt::Subtree { delimiter: tt::Delimiter::unspecified(), token_trees: vec![] },\n             ExpandError::NoMatchingRule,\n         )"}, {"sha": "a043e8222dceb566529bf05242f8107688d80c01", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -324,12 +324,12 @@ pub struct ValueResult<T, E> {\n }\n \n impl<T, E> ValueResult<T, E> {\n-    pub fn ok(value: T) -> Self {\n-        Self { value, err: None }\n+    pub fn new(value: T, err: E) -> Self {\n+        Self { value, err: Some(err) }\n     }\n \n-    pub fn with_err(value: T, err: E) -> Self {\n-        Self { value, err: Some(err) }\n+    pub fn ok(value: T) -> Self {\n+        Self { value, err: None }\n     }\n \n     pub fn only_err(err: E) -> Self"}, {"sha": "cdf40777ba3811606a2bac8f529ec6fa87c7154f", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d30a772c62d63e2251dd978ed6bfb28eb6994/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=924d30a772c62d63e2251dd978ed6bfb28eb6994", "patch": "@@ -180,9 +180,8 @@ impl flags::AnalysisStats {\n \n             let mut total_macro_file_size = Bytes::default();\n             for e in hir::db::ParseMacroExpansionQuery.in_db(db).entries::<Vec<_>>() {\n-                if let Some((val, _)) = db.parse_macro_expansion(e.key).value {\n-                    total_macro_file_size += syntax_len(val.syntax_node())\n-                }\n+                let val = db.parse_macro_expansion(e.key).value.0;\n+                total_macro_file_size += syntax_len(val.syntax_node())\n             }\n             eprintln!(\"source files: {total_file_size}, macro files: {total_macro_file_size}\");\n         }\n@@ -533,7 +532,7 @@ fn location_csv_expr(\n         Ok(s) => s,\n         Err(SyntheticSyntax) => return \"synthetic,,\".to_string(),\n     };\n-    let root = db.parse_or_expand(src.file_id).unwrap();\n+    let root = db.parse_or_expand(src.file_id);\n     let node = src.map(|e| e.to_node(&root).syntax().clone());\n     let original_range = node.as_ref().original_file_range(db);\n     let path = vfs.file_path(original_range.file_id);\n@@ -555,7 +554,7 @@ fn location_csv_pat(\n         Ok(s) => s,\n         Err(SyntheticSyntax) => return \"synthetic,,\".to_string(),\n     };\n-    let root = db.parse_or_expand(src.file_id).unwrap();\n+    let root = db.parse_or_expand(src.file_id);\n     let node = src.map(|e| {\n         e.either(|it| it.to_node(&root).syntax().clone(), |it| it.to_node(&root).syntax().clone())\n     });\n@@ -577,7 +576,7 @@ fn expr_syntax_range(\n ) -> Option<(VfsPath, LineCol, LineCol)> {\n     let src = sm.expr_syntax(expr_id);\n     if let Ok(src) = src {\n-        let root = db.parse_or_expand(src.file_id).unwrap();\n+        let root = db.parse_or_expand(src.file_id);\n         let node = src.map(|e| e.to_node(&root).syntax().clone());\n         let original_range = node.as_ref().original_file_range(db);\n         let path = vfs.file_path(original_range.file_id);\n@@ -599,7 +598,7 @@ fn pat_syntax_range(\n ) -> Option<(VfsPath, LineCol, LineCol)> {\n     let src = sm.pat_syntax(pat_id);\n     if let Ok(src) = src {\n-        let root = db.parse_or_expand(src.file_id).unwrap();\n+        let root = db.parse_or_expand(src.file_id);\n         let node = src.map(|e| {\n             e.either(\n                 |it| it.to_node(&root).syntax().clone(),"}]}