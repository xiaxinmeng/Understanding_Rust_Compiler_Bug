{"sha": "c386316fe0aae4f49a76dec8c81c0bd560c50e77", "node_id": "C_kwDOAAsO6NoAKGMzODYzMTZmZTBhYWU0ZjQ5YTc2ZGVjOGM4MWMwYmQ1NjBjNTBlNzc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-28T09:52:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-28T09:52:03Z"}, "message": "Auto merge of #14185 - anergictcell:fix_14142, r=HKalbasi\n\nFix: Run doctests for structs with lifetime parameters from IDE\n\nFixes #14142: Doctests can't be triggered for structs with lifetimes\n\nThis MR adds lifetime parameters to the structs path for runnables so that they can be triggered from an IDE as well.\n\nThis is my first MR for rust-analyzer, please let me know if I should change something, either in code or the description here.", "tree": {"sha": "5f9ff6899aeb1440911e6873f91a8d8047e26ff6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f9ff6899aeb1440911e6873f91a8d8047e26ff6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c386316fe0aae4f49a76dec8c81c0bd560c50e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c386316fe0aae4f49a76dec8c81c0bd560c50e77", "html_url": "https://github.com/rust-lang/rust/commit/c386316fe0aae4f49a76dec8c81c0bd560c50e77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c386316fe0aae4f49a76dec8c81c0bd560c50e77/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0be16b0b28143bca47a7598dbdf39e33692f690", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0be16b0b28143bca47a7598dbdf39e33692f690", "html_url": "https://github.com/rust-lang/rust/commit/a0be16b0b28143bca47a7598dbdf39e33692f690"}, {"sha": "af79491ae62ebba739d3375c425b71c48f4b4905", "url": "https://api.github.com/repos/rust-lang/rust/commits/af79491ae62ebba739d3375c425b71c48f4b4905", "html_url": "https://github.com/rust-lang/rust/commit/af79491ae62ebba739d3375c425b71c48f4b4905"}], "stats": {"total": 380, "additions": 370, "deletions": 10}, "files": [{"sha": "b2323915c1fd5c43e6a9ccbfeed2c6c93592085f", "filename": "crates/hir-def/src/resolver.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c386316fe0aae4f49a76dec8c81c0bd560c50e77/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c386316fe0aae4f49a76dec8c81c0bd560c50e77/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fresolver.rs?ref=c386316fe0aae4f49a76dec8c81c0bd560c50e77", "patch": "@@ -459,6 +459,13 @@ impl Resolver {\n         })\n     }\n \n+    pub fn generic_params(&self) -> Option<&Interned<GenericParams>> {\n+        self.scopes().find_map(|scope| match scope {\n+            Scope::GenericParams { params, .. } => Some(params),\n+            _ => None,\n+        })\n+    }\n+\n     pub fn body_owner(&self) -> Option<DefWithBodyId> {\n         self.scopes().find_map(|scope| match scope {\n             Scope::ExprScope(it) => Some(it.owner),"}, {"sha": "921e64ad93348ab6ee4df1d3f4843a2ea5551593", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 90, "deletions": 1, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/c386316fe0aae4f49a76dec8c81c0bd560c50e77/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c386316fe0aae4f49a76dec8c81c0bd560c50e77/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c386316fe0aae4f49a76dec8c81c0bd560c50e77", "patch": "@@ -42,7 +42,7 @@ use hir_def::{\n     adt::VariantData,\n     body::{BodyDiagnostic, SyntheticSyntax},\n     expr::{BindingAnnotation, ExprOrPatId, LabelId, Pat, PatId},\n-    generics::{TypeOrConstParamData, TypeParamProvenance},\n+    generics::{LifetimeParamData, TypeOrConstParamData, TypeParamProvenance},\n     item_tree::ItemTreeNode,\n     lang_item::{LangItem, LangItemTarget},\n     layout::{Layout, LayoutError, ReprOptions},\n@@ -1170,6 +1170,25 @@ impl Adt {\n         }\n     }\n \n+    /// Returns the lifetime of the DataType\n+    pub fn lifetime(&self, db: &dyn HirDatabase) -> Option<LifetimeParamData> {\n+        let resolver = match self {\n+            Adt::Struct(s) => s.id.resolver(db.upcast()),\n+            Adt::Union(u) => u.id.resolver(db.upcast()),\n+            Adt::Enum(e) => e.id.resolver(db.upcast()),\n+        };\n+        resolver\n+            .generic_params()\n+            .and_then(|gp| {\n+                (&gp.lifetimes)\n+                    .iter()\n+                    // there should only be a single lifetime\n+                    // but `Arena` requires to use an iterator\n+                    .nth(0)\n+            })\n+            .map(|arena| arena.1.clone())\n+    }\n+\n     pub fn as_enum(&self) -> Option<Enum> {\n         if let Self::Enum(v) = self {\n             Some(*v)\n@@ -3332,6 +3351,24 @@ impl Type {\n         }\n     }\n \n+    /// Iterates its type arguments\n+    ///\n+    /// It iterates the actual type arguments when concrete types are used\n+    /// and otherwise the generic names.\n+    /// It does not include `const` arguments.\n+    ///\n+    /// For code, such as:\n+    /// ```text\n+    /// struct Foo<T, U>\n+    ///\n+    /// impl<U> Foo<String, U>\n+    /// ```\n+    ///\n+    /// It iterates:\n+    /// ```text\n+    /// - \"String\"\n+    /// - \"U\"\n+    /// ```\n     pub fn type_arguments(&self) -> impl Iterator<Item = Type> + '_ {\n         self.ty\n             .strip_references()\n@@ -3342,6 +3379,58 @@ impl Type {\n             .map(move |ty| self.derived(ty))\n     }\n \n+    /// Iterates its type and const arguments\n+    ///\n+    /// It iterates the actual type and const arguments when concrete types\n+    /// are used and otherwise the generic names.\n+    ///\n+    /// For code, such as:\n+    /// ```text\n+    /// struct Foo<T, const U: usize, const X: usize>\n+    ///\n+    /// impl<U> Foo<String, U, 12>\n+    /// ```\n+    ///\n+    /// It iterates:\n+    /// ```text\n+    /// - \"String\"\n+    /// - \"U\"\n+    /// - \"12\"\n+    /// ```\n+    pub fn type_and_const_arguments<'a>(\n+        &'a self,\n+        db: &'a dyn HirDatabase,\n+    ) -> impl Iterator<Item = SmolStr> + 'a {\n+        self.ty\n+            .strip_references()\n+            .as_adt()\n+            .into_iter()\n+            .flat_map(|(_, substs)| substs.iter(Interner))\n+            .filter_map(|arg| {\n+                // arg can be either a `Ty` or `constant`\n+                if let Some(ty) = arg.ty(Interner) {\n+                    Some(SmolStr::new(ty.display(db).to_string()))\n+                } else if let Some(const_) = arg.constant(Interner) {\n+                    Some(SmolStr::new_inline(&const_.display(db).to_string()))\n+                } else {\n+                    None\n+                }\n+            })\n+    }\n+\n+    /// Combines lifetime indicators, type and constant parameters into a single `Iterator`\n+    pub fn generic_parameters<'a>(\n+        &'a self,\n+        db: &'a dyn HirDatabase,\n+    ) -> impl Iterator<Item = SmolStr> + 'a {\n+        // iterate the lifetime\n+        self.as_adt()\n+            .and_then(|a| a.lifetime(db).and_then(|lt| Some((&lt.name).to_smol_str())))\n+            .into_iter()\n+            // add the type and const paramaters\n+            .chain(self.type_and_const_arguments(db))\n+    }\n+\n     pub fn iterate_method_candidates_with_traits<T>(\n         &self,\n         db: &dyn HirDatabase,"}, {"sha": "77aef710ad1d611e2b1232598ce170798dd40bcf", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 273, "deletions": 9, "changes": 282, "blob_url": "https://github.com/rust-lang/rust/blob/c386316fe0aae4f49a76dec8c81c0bd560c50e77/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c386316fe0aae4f49a76dec8c81c0bd560c50e77/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=c386316fe0aae4f49a76dec8c81c0bd560c50e77", "patch": "@@ -2,7 +2,7 @@ use std::fmt;\n \n use ast::HasName;\n use cfg::CfgExpr;\n-use hir::{AsAssocItem, HasAttrs, HasSource, HirDisplay, Semantics};\n+use hir::{AsAssocItem, HasAttrs, HasSource, Semantics};\n use ide_assists::utils::test_related_attribute;\n use ide_db::{\n     base_db::{FilePosition, FileRange},\n@@ -370,9 +370,9 @@ pub(crate) fn runnable_impl(\n     let nav = def.try_to_nav(sema.db)?;\n     let ty = def.self_ty(sema.db);\n     let adt_name = ty.as_adt()?.name(sema.db);\n-    let mut ty_args = ty.type_arguments().peekable();\n+    let mut ty_args = ty.generic_parameters(sema.db).peekable();\n     let params = if ty_args.peek().is_some() {\n-        format!(\"<{}>\", ty_args.format_with(\",\", |ty, cb| cb(&ty.display(sema.db))))\n+        format!(\"<{}>\", ty_args.format_with(\",\", |ty, cb| cb(&ty)))\n     } else {\n         String::new()\n     };\n@@ -436,14 +436,10 @@ fn module_def_doctest(db: &RootDatabase, def: Definition) -> Option<Runnable> {\n                 let ty = imp.self_ty(db);\n                 if let Some(adt) = ty.as_adt() {\n                     let name = adt.name(db);\n-                    let mut ty_args = ty.type_arguments().peekable();\n+                    let mut ty_args = ty.generic_parameters(db).peekable();\n                     format_to!(path, \"{}\", name);\n                     if ty_args.peek().is_some() {\n-                        format_to!(\n-                            path,\n-                            \"<{}>\",\n-                            ty_args.format_with(\",\", |ty, cb| cb(&ty.display(db)))\n-                        );\n+                        format_to!(path, \"<{}>\", ty_args.format_with(\",\", |ty, cb| cb(&ty)));\n                     }\n                     format_to!(path, \"::{}\", def_name);\n                     path.retain(|c| c != ' ');\n@@ -999,6 +995,221 @@ impl Data {\n         );\n     }\n \n+    #[test]\n+    fn test_runnables_doc_test_in_impl_with_lifetime() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+$0\n+fn main() {}\n+\n+struct Data<'a>;\n+impl Data<'a> {\n+    /// ```\n+    /// let x = 5;\n+    /// ```\n+    fn foo() {}\n+}\n+\"#,\n+            &[Bin, DocTest],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 1..13,\n+                            focus_range: 4..8,\n+                            name: \"main\",\n+                            kind: Function,\n+                        },\n+                        kind: Bin,\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 52..106,\n+                            name: \"foo\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"Data<'a>::foo\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_runnables_doc_test_in_impl_with_lifetime_and_types() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+$0\n+fn main() {}\n+\n+struct Data<'a, T, U>;\n+impl<T, U> Data<'a, T, U> {\n+    /// ```\n+    /// let x = 5;\n+    /// ```\n+    fn foo() {}\n+}\n+\"#,\n+            &[Bin, DocTest],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 1..13,\n+                            focus_range: 4..8,\n+                            name: \"main\",\n+                            kind: Function,\n+                        },\n+                        kind: Bin,\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 70..124,\n+                            name: \"foo\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"Data<'a,T,U>::foo\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_runnables_doc_test_in_impl_with_const() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+$0\n+fn main() {}\n+\n+struct Data<const N: usize>;\n+impl<const N: usize> Data<N> {\n+    /// ```\n+    /// let x = 5;\n+    /// ```\n+    fn foo() {}\n+}\n+\"#,\n+            &[Bin, DocTest],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 1..13,\n+                            focus_range: 4..8,\n+                            name: \"main\",\n+                            kind: Function,\n+                        },\n+                        kind: Bin,\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 79..133,\n+                            name: \"foo\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"Data<N>::foo\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_runnables_doc_test_in_impl_with_lifetime_types_and_const() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+$0\n+fn main() {}\n+\n+struct Data<'a, T, const N: usize>;\n+impl<'a, T, const N: usize> Data<'a, T, N> {\n+    /// ```\n+    /// let x = 5;\n+    /// ```\n+    fn foo() {}\n+}\n+\"#,\n+            &[Bin, DocTest],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 1..13,\n+                            focus_range: 4..8,\n+                            name: \"main\",\n+                            kind: Function,\n+                        },\n+                        kind: Bin,\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 100..154,\n+                            name: \"foo\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"Data<'a,T,N>::foo\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n     #[test]\n     fn test_runnables_module() {\n         check(\n@@ -2061,6 +2272,59 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_runnables_doc_test_in_impl_with_lifetime_type_const_value() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+$0\n+fn main() {}\n+\n+struct Data<'a, A, const B: usize, C, const D: u32>;\n+impl<A, C, const D: u32> Data<'a, A, 12, C, D> {\n+    /// ```\n+    /// ```\n+    fn foo() {}\n+}\n+\"#,\n+            &[Bin, DocTest],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 1..13,\n+                            focus_range: 4..8,\n+                            name: \"main\",\n+                            kind: Function,\n+                        },\n+                        kind: Bin,\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 121..156,\n+                            name: \"foo\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"Data<'a,A,12,C,D>::foo\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn doc_test_type_params() {\n         check("}]}