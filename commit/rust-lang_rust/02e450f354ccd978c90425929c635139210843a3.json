{"sha": "02e450f354ccd978c90425929c635139210843a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZTQ1MGYzNTRjY2Q5NzhjOTA0MjU5MjljNjM1MTM5MjEwODQzYTM=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-02T06:43:02Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-02T07:03:31Z"}, "message": "Add cargo-watch.check-arguments", "tree": {"sha": "008e2bc12c024b480d86a4dae7194b976cad494d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/008e2bc12c024b480d86a4dae7194b976cad494d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02e450f354ccd978c90425929c635139210843a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02e450f354ccd978c90425929c635139210843a3", "html_url": "https://github.com/rust-lang/rust/commit/02e450f354ccd978c90425929c635139210843a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02e450f354ccd978c90425929c635139210843a3/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee05eafe6c657c3d3710655e11d88d61bc5febf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee05eafe6c657c3d3710655e11d88d61bc5febf0", "html_url": "https://github.com/rust-lang/rust/commit/ee05eafe6c657c3d3710655e11d88d61bc5febf0"}], "stats": {"total": 213, "additions": 139, "deletions": 74}, "files": [{"sha": "33dd4f9950bf11b8e10568415004709c35b473e7", "filename": "docs/user/README.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02e450f354ccd978c90425929c635139210843a3/docs%2Fuser%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/02e450f354ccd978c90425929c635139210843a3/docs%2Fuser%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2FREADME.md?ref=02e450f354ccd978c90425929c635139210843a3", "patch": "@@ -59,6 +59,8 @@ for details.\n * `rust-analyzer.raLspServerPath`: path to `ra_lsp_server` executable\n * `rust-analyzer.enableCargoWatchOnStartup`: prompt to install & enable `cargo\n   watch` for live error highlighting (note, this **does not** use rust-analyzer)\n+* `rust-analyzer.cargo-watch.check-arguments`: cargo-watch check arguments. \n+  (e.g: `--features=\"shumway,pdf\"` will run as `cargo watch -x \"check --features=\"shumway,pdf\"\"` )  \n * `rust-analyzer.trace.server`: enables internal logging\n * `rust-analyzer.trace.cargo-watch`: enables cargo-watch logging\n "}, {"sha": "1c8caaa60cbfc7779b42b5dd3f110b89a0521f30", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02e450f354ccd978c90425929c635139210843a3/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/02e450f354ccd978c90425929c635139210843a3/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=02e450f354ccd978c90425929c635139210843a3", "patch": "@@ -184,6 +184,11 @@\n                     ],\n                     \"description\": \"Whether to run `cargo watch` on startup\"\n                 },\n+                \"rust-analyzer.cargo-watch.check-arguments\": {\n+                    \"type\": \"string\",\n+                    \"description\": \"`cargo-watch` check arguments. (e.g: `--features=\\\"shumway,pdf\\\"` will run as `cargo watch -x \\\"check --features=\\\"shumway,pdf\\\"\\\"` )\",\n+                    \"default\": \"\"\n+                },\n                 \"rust-analyzer.trace.server\": {\n                     \"type\": \"string\",\n                     \"scope\": \"window\",\n@@ -192,6 +197,11 @@\n                         \"messages\",\n                         \"verbose\"\n                     ],\n+                    \"enumDescriptions\": [\n+                        \"No traces\",\n+                        \"Error only\",\n+                        \"Full log\"\n+                    ],\n                     \"default\": \"off\",\n                     \"description\": \"Trace requests to the ra_lsp_server\"\n                 },"}, {"sha": "fb8fcaeb36b734d4c3c7edc685c517aaf06cdc72", "filename": "editors/code/src/commands/cargo_watch.ts", "status": "modified", "additions": 50, "deletions": 28, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/02e450f354ccd978c90425929c635139210843a3/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "raw_url": "https://github.com/rust-lang/rust/raw/02e450f354ccd978c90425929c635139210843a3/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts?ref=02e450f354ccd978c90425929c635139210843a3", "patch": "@@ -3,9 +3,9 @@ import * as path from 'path';\n import * as vscode from 'vscode';\n import { Server } from '../server';\n import { terminate } from '../utils/processes';\n+import { LineBuffer } from './line_buffer';\n import { StatusDisplay } from './watch_status';\n \n-\n export class CargoWatchProvider {\n     private diagnosticCollection?: vscode.DiagnosticCollection;\n     private cargoProcess?: child_process.ChildProcess;\n@@ -23,33 +23,44 @@ export class CargoWatchProvider {\n         this.outputChannel = vscode.window.createOutputChannel(\n             'Cargo Watch Trace'\n         );\n-            \n+\n+        let args = '\"check --message-format json';\n+        if (Server.config.cargoWatchOptions.checkArguments.length > 0) {\n+            // Excape the double quote string:\n+            args += ' ' + Server.config.cargoWatchOptions.checkArguments;\n+        }\n+        args += '\"';\n+\n         // Start the cargo watch with json message\n         this.cargoProcess = child_process.spawn(\n             'cargo',\n-            ['watch', '-x', '\\\"check --message-format json\\\"'],\n+            ['watch', '-x', args],\n             {\n                 stdio: ['ignore', 'pipe', 'pipe'],\n                 cwd: vscode.workspace.rootPath,\n-                windowsVerbatimArguments: true,\n+                windowsVerbatimArguments: true\n             }\n         );\n \n+        const stdoutData = new LineBuffer();\n         this.cargoProcess.stdout.on('data', (s: string) => {\n-            this.processOutput(s, (line) => {\n+            stdoutData.processOutput(s, line => {\n                 this.logInfo(line);\n                 this.parseLine(line);\n             });\n         });\n \n+        const stderrData = new LineBuffer();\n         this.cargoProcess.stderr.on('data', (s: string) => {\n-            this.processOutput(s, (line) => {\n-                this.logError('Error on cargo-watch : {\\n' + line + '}\\n' );\n+            stderrData.processOutput(s, line => {\n+                this.logError('Error on cargo-watch : {\\n' + line + '}\\n');\n             });\n         });\n \n         this.cargoProcess.on('error', (err: Error) => {\n-            this.logError('Error on cargo-watch process : {\\n' + err.message + '}\\n');\n+            this.logError(\n+                'Error on cargo-watch process : {\\n' + err.message + '}\\n'\n+            );\n         });\n \n         this.logInfo('cargo-watch started.');\n@@ -66,21 +77,24 @@ export class CargoWatchProvider {\n             terminate(this.cargoProcess);\n         }\n \n-        if(this.outputChannel) {\n+        if (this.outputChannel) {\n             this.outputChannel.dispose();\n         }\n     }\n \n     private logInfo(line: string) {\n         if (Server.config.cargoWatchOptions.trace === 'verbose') {\n             this.outputChannel!.append(line);\n-        }                \n+        }\n     }\n \n     private logError(line: string) {\n-        if (Server.config.cargoWatchOptions.trace === 'error' || Server.config.cargoWatchOptions.trace === 'verbose' ) {\n+        if (\n+            Server.config.cargoWatchOptions.trace === 'error' ||\n+            Server.config.cargoWatchOptions.trace === 'verbose'\n+        ) {\n             this.outputChannel!.append(line);\n-        }                \n+        }\n     }\n \n     private parseLine(line: string) {\n@@ -105,12 +119,32 @@ export class CargoWatchProvider {\n             return vscode.DiagnosticSeverity.Information;\n         }\n \n+        interface ErrorSpan {\n+            line_start: number;\n+            line_end: number;\n+            column_start: number;\n+            column_end: number;\n+        }\n+\n+        interface ErrorMessage {\n+            reason: string;\n+            message: {\n+                spans: ErrorSpan[];\n+                rendered: string;\n+                level: string;\n+                code?: {\n+                    code: string;\n+                };\n+            };\n+        }\n+\n         // cargo-watch itself output non json format\n         // Ignore these lines\n-        let data = null;\n+        let data: ErrorMessage;\n         try {\n             data = JSON.parse(line.trim());\n         } catch (error) {\n+            this.logError(`Fail to pass to json : { ${error} }`);\n             return;\n         }\n \n@@ -137,7 +171,9 @@ export class CargoWatchProvider {\n             const diagnostic = new vscode.Diagnostic(range, rendered, level);\n \n             diagnostic.source = 'rustc';\n-            diagnostic.code = data.message.code.code;\n+            diagnostic.code = data.message.code\n+                ? data.message.code.code\n+                : undefined;\n             diagnostic.relatedInformation = [];\n \n             const fileUrl = vscode.Uri.file(fileName!);\n@@ -150,18 +186,4 @@ export class CargoWatchProvider {\n             this.diagnosticCollection!.set(fileUrl, diagnostics);\n         }\n     }\n-\n-    private processOutput(chunk: string, cb: (line: string) => void  ) {\n-        // The stdout is not line based, convert it to line based for proceess.\n-        this.outBuffer += chunk;\n-        let eolIndex = this.outBuffer.indexOf('\\n');\n-        while (eolIndex >= 0) {\n-            // line includes the EOL\n-            const line = this.outBuffer.slice(0, eolIndex + 1);\n-            cb(line);\n-            this.outBuffer = this.outBuffer.slice(eolIndex + 1);\n-\n-            eolIndex = this.outBuffer.indexOf('\\n');\n-        }\n-    }\n }"}, {"sha": "fb5b9f7f2b2a6bb3541ea820ab3dd1125a141c9e", "filename": "editors/code/src/commands/line_buffer.ts", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02e450f354ccd978c90425929c635139210843a3/editors%2Fcode%2Fsrc%2Fcommands%2Fline_buffer.ts", "raw_url": "https://github.com/rust-lang/rust/raw/02e450f354ccd978c90425929c635139210843a3/editors%2Fcode%2Fsrc%2Fcommands%2Fline_buffer.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fline_buffer.ts?ref=02e450f354ccd978c90425929c635139210843a3", "patch": "@@ -0,0 +1,16 @@\n+export class LineBuffer {\n+    private outBuffer: string = '';\n+\n+    public processOutput(chunk: string, cb: (line: string) => void) {\n+        this.outBuffer += chunk;\n+        let eolIndex = this.outBuffer.indexOf('\\n');\n+        while (eolIndex >= 0) {\n+            // line includes the EOL\n+            const line = this.outBuffer.slice(0, eolIndex + 1);\n+            cb(line);\n+            this.outBuffer = this.outBuffer.slice(eolIndex + 1);\n+\n+            eolIndex = this.outBuffer.indexOf('\\n');\n+        }\n+    }\n+}"}, {"sha": "481a5e5f18fd687bf1de726228d031fe2d4df932", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/02e450f354ccd978c90425929c635139210843a3/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/02e450f354ccd978c90425929c635139210843a3/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=02e450f354ccd978c90425929c635139210843a3", "patch": "@@ -8,16 +8,21 @@ export type CargoWatchStartupOptions = 'ask' | 'enabled' | 'disabled';\n export type CargoWatchTraceOptions = 'off' | 'error' | 'verbose';\n \n export interface CargoWatchOptions {\n-    enableOnStartup: CargoWatchStartupOptions,\n-    trace: CargoWatchTraceOptions,\n-};\n+    enableOnStartup: CargoWatchStartupOptions;\n+    checkArguments: string;\n+    trace: CargoWatchTraceOptions;\n+}\n \n export class Config {\n     public highlightingOn = true;\n     public enableEnhancedTyping = true;\n     public raLspServerPath = RA_LSP_DEBUG || 'ra_lsp_server';\n     public showWorkspaceLoadedNotification = true;\n-    public cargoWatchOptions: CargoWatchOptions = { enableOnStartup: 'ask', trace: 'off' };\n+    public cargoWatchOptions: CargoWatchOptions = {\n+        enableOnStartup: 'ask',\n+        trace: 'off',\n+        checkArguments: ''\n+    };\n \n     private prevEnhancedTyping: null | boolean = null;\n \n@@ -79,17 +84,23 @@ export class Config {\n         }\n \n         if (config.has('enableCargoWatchOnStartup')) {\n-            this.cargoWatchOptions.enableOnStartup =\n-                config.get<CargoWatchStartupOptions>(\n-                    'enableCargoWatchOnStartup',\n-                    'ask'\n-                );\n-            this.cargoWatchOptions.trace =\n-                config.get<CargoWatchTraceOptions>(\n-                    'trace.cargo-watch',\n-                    'off'\n-                );\n+            this.cargoWatchOptions.enableOnStartup = config.get<\n+                CargoWatchStartupOptions\n+            >('enableCargoWatchOnStartup', 'ask');\n+        }\n+\n+        if (config.has('trace.cargo-watch')) {\n+            this.cargoWatchOptions.trace = config.get<CargoWatchTraceOptions>(\n+                'trace.cargo-watch',\n+                'off'\n+            );\n+        }\n \n+        if (config.has('cargo-watch.check-arguments')) {\n+            this.cargoWatchOptions.checkArguments = config.get<string>(\n+                'cargo-watch.check-arguments',\n+                ''\n+            );\n         }\n     }\n }"}, {"sha": "d4c2c87782a2283225d21ff7240b86ab386af69b", "filename": "editors/code/src/utils/processes.ts", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/02e450f354ccd978c90425929c635139210843a3/editors%2Fcode%2Fsrc%2Futils%2Fprocesses.ts", "raw_url": "https://github.com/rust-lang/rust/raw/02e450f354ccd978c90425929c635139210843a3/editors%2Fcode%2Fsrc%2Futils%2Fprocesses.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fprocesses.ts?ref=02e450f354ccd978c90425929c635139210843a3", "patch": "@@ -5,36 +5,40 @@ import ChildProcess = cp.ChildProcess;\n \n import { join } from 'path';\n \n-const isWindows = (process.platform === 'win32');\n-const isMacintosh = (process.platform === 'darwin');\n-const isLinux = (process.platform === 'linux');\n+const isWindows = process.platform === 'win32';\n+const isMacintosh = process.platform === 'darwin';\n+const isLinux = process.platform === 'linux';\n export function terminate(process: ChildProcess, cwd?: string): boolean {\n-\tif (isWindows) {\n-\t\ttry {\n-\t\t\t// This we run in Atom execFileSync is available.\n-\t\t\t// Ignore stderr since this is otherwise piped to parent.stderr\n-\t\t\t// which might be already closed.\n-\t\t\tconst options: any = {\n-\t\t\t\tstdio: ['pipe', 'pipe', 'ignore']\n-\t\t\t};\n-\t\t\tif (cwd) {\n-\t\t\t\toptions.cwd = cwd\n-\t\t\t}\n-\t\t\t(cp).execFileSync('taskkill', ['/T', '/F', '/PID', process.pid.toString()], options);\n-\t\t\treturn true;\n-\t\t} catch (err) {\n-\t\t\treturn false;\n-\t\t}\n-\t} else if (isLinux || isMacintosh) {\n-\t\ttry {\n-\t\t\tconst cmd = join(__dirname, 'terminateProcess.sh');\n-\t\t\tconst result = cp.spawnSync(cmd, [process.pid.toString()]);\n-\t\t\treturn result.error ? false : true;\n-\t\t} catch (err) {\n-\t\t\treturn false;\n-\t\t}\n-\t} else {\n-\t\tprocess.kill('SIGKILL');\n-\t\treturn true;\n-\t}\n-}\n\\ No newline at end of file\n+    if (isWindows) {\n+        try {\n+            // This we run in Atom execFileSync is available.\n+            // Ignore stderr since this is otherwise piped to parent.stderr\n+            // which might be already closed.\n+            const options: any = {\n+                stdio: ['pipe', 'pipe', 'ignore']\n+            };\n+            if (cwd) {\n+                options.cwd = cwd;\n+            }\n+            cp.execFileSync(\n+                'taskkill',\n+                ['/T', '/F', '/PID', process.pid.toString()],\n+                options\n+            );\n+            return true;\n+        } catch (err) {\n+            return false;\n+        }\n+    } else if (isLinux || isMacintosh) {\n+        try {\n+            const cmd = join(__dirname, 'terminateProcess.sh');\n+            const result = cp.spawnSync(cmd, [process.pid.toString()]);\n+            return result.error ? false : true;\n+        } catch (err) {\n+            return false;\n+        }\n+    } else {\n+        process.kill('SIGKILL');\n+        return true;\n+    }\n+}"}]}