{"sha": "a3c76f6d98d6a8161419582c3663638687acae12", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYzc2ZjZkOThkNmE4MTYxNDE5NTgyYzM2NjM2Mzg2ODdhY2FlMTI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-06-06T23:06:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-06T23:06:51Z"}, "message": "Rollup merge of #85965 - tmiasko:a, r=nagisa\n\nRemove dead code from `LocalAnalyzer`", "tree": {"sha": "b46279c856fb5be22f39ffb7322fb6884b6e43ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b46279c856fb5be22f39ffb7322fb6884b6e43ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3c76f6d98d6a8161419582c3663638687acae12", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgvVULCRBK7hj4Ov3rIwAAXsIIAKjo6KhtDeqQ6Zf9B/0Yq8fL\nk9uag7PTDrVvYAnpaYilVYtJoo7j5KYcCnbR9njsJVYZ712jNO11QXIYCoRZrK54\n0sOfeQQScZeD5GvGeus/Iksv2d6e0WN4V4VEbX1oL5d1rIDbABPQMNSkDV31tgXY\nk+G1aoKyCErT3FVg5ld12Jy7f8n+dG0KyHnXNwl0rG/wfyvXgIni7QF2tq5ND0Tc\n/Bh1K7fOt2vwlvsISSIgbJagHX+gJnqSDC60tHJ7KoPXkPg0dkZ2EPzoO+9Ca8CJ\nJAS61F/GyDcNuvpWFYk9LBVnvLeSfxqR+xInUZlgJMII8d1uzBEw+qD0eAlEatM=\n=/YV0\n-----END PGP SIGNATURE-----\n", "payload": "tree b46279c856fb5be22f39ffb7322fb6884b6e43ff\nparent b71bc9119259b7494797de621a98a2cd4d91d563\nparent 624c693508e94de2c962a4341d843313e5837511\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1623020811 +0200\ncommitter GitHub <noreply@github.com> 1623020811 +0200\n\nRollup merge of #85965 - tmiasko:a, r=nagisa\n\nRemove dead code from `LocalAnalyzer`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c76f6d98d6a8161419582c3663638687acae12", "html_url": "https://github.com/rust-lang/rust/commit/a3c76f6d98d6a8161419582c3663638687acae12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3c76f6d98d6a8161419582c3663638687acae12/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b71bc9119259b7494797de621a98a2cd4d91d563", "url": "https://api.github.com/repos/rust-lang/rust/commits/b71bc9119259b7494797de621a98a2cd4d91d563", "html_url": "https://github.com/rust-lang/rust/commit/b71bc9119259b7494797de621a98a2cd4d91d563"}, {"sha": "624c693508e94de2c962a4341d843313e5837511", "url": "https://api.github.com/repos/rust-lang/rust/commits/624c693508e94de2c962a4341d843313e5837511", "html_url": "https://github.com/rust-lang/rust/commit/624c693508e94de2c962a4341d843313e5837511"}], "stats": {"total": 50, "additions": 4, "deletions": 46}, "files": [{"sha": "8a22a74f97c34ad23577e3fc971a279c7531ef3f", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 4, "deletions": 46, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a3c76f6d98d6a8161419582c3663638687acae12/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c76f6d98d6a8161419582c3663638687acae12/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=a3c76f6d98d6a8161419582c3663638687acae12", "patch": "@@ -7,9 +7,7 @@ use rustc_data_structures::graph::dominators::Dominators;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::traversal;\n-use rustc_middle::mir::visit::{\n-    MutatingUseContext, NonMutatingUseContext, NonUseContext, PlaceContext, Visitor,\n-};\n+use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{self, Location, TerminatorKind};\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_target::abi::LayoutOf;\n@@ -20,7 +18,9 @@ pub fn non_ssa_locals<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     let mir = fx.mir;\n     let mut analyzer = LocalAnalyzer::new(fx);\n \n-    analyzer.visit_body(&mir);\n+    for (bb, data) in mir.basic_blocks().iter_enumerated() {\n+        analyzer.visit_basic_block_data(bb, data);\n+    }\n \n     for (local, decl) in mir.local_decls.iter_enumerated() {\n         let ty = fx.monomorphize(decl.ty);\n@@ -141,36 +141,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n \n             if let mir::ProjectionElem::Deref = elem {\n                 // Deref projections typically only read the pointer.\n-                // (the exception being `VarDebugInfo` contexts, handled below)\n                 base_context = PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy);\n-\n-                // Indirect debuginfo requires going through memory, that only\n-                // the debugger accesses, following our emitted DWARF pointer ops.\n-                //\n-                // FIXME(eddyb) Investigate the possibility of relaxing this, but\n-                // note that `llvm.dbg.declare` *must* be used for indirect places,\n-                // even if we start using `llvm.dbg.value` for all other cases,\n-                // as we don't necessarily know when the value changes, but only\n-                // where it lives in memory.\n-                //\n-                // It's possible `llvm.dbg.declare` could support starting from\n-                // a pointer that doesn't point to an `alloca`, but this would\n-                // only be useful if we know the pointer being `Deref`'d comes\n-                // from an immutable place, and if `llvm.dbg.declare` calls\n-                // must be at the very start of the function, then only function\n-                // arguments could contain such pointers.\n-                if context == PlaceContext::NonUse(NonUseContext::VarDebugInfo) {\n-                    // We use `NonUseContext::VarDebugInfo` for the base,\n-                    // which might not force the base local to memory,\n-                    // so we have to do it manually.\n-                    self.visit_local(&place_ref.local, context, location);\n-                }\n-            }\n-\n-            // `NonUseContext::VarDebugInfo` needs to flow all the\n-            // way down to the base local (see `visit_local`).\n-            if context == PlaceContext::NonUse(NonUseContext::VarDebugInfo) {\n-                base_context = context;\n             }\n \n             self.process_place(&place_base, base_context, location);\n@@ -185,20 +156,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n                 );\n             }\n         } else {\n-            // FIXME this is super_place code, is repeated here to avoid cloning place or changing\n-            // visit_place API\n-            let mut context = context;\n-\n-            if !place_ref.projection.is_empty() {\n-                context = if context.is_mutating_use() {\n-                    PlaceContext::MutatingUse(MutatingUseContext::Projection)\n-                } else {\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection)\n-                };\n-            }\n-\n             self.visit_local(&place_ref.local, context, location);\n-            self.visit_projection(*place_ref, context, location);\n         }\n     }\n }"}]}