{"sha": "0f572a9810e2c54b7067641583a5527acff6cae5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNTcyYTk4MTBlMmM1NGI3MDY3NjQxNTgzYTU1MjdhY2ZmNmNhZTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-13T07:30:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-13T07:30:09Z"}, "message": "explicitly talk about integer literals", "tree": {"sha": "8ef9dcfa4b921e1565586d52f28bff9f769cd28d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ef9dcfa4b921e1565586d52f28bff9f769cd28d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f572a9810e2c54b7067641583a5527acff6cae5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f572a9810e2c54b7067641583a5527acff6cae5", "html_url": "https://github.com/rust-lang/rust/commit/0f572a9810e2c54b7067641583a5527acff6cae5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f572a9810e2c54b7067641583a5527acff6cae5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c555aabc5b7df5ccb88c15b7b94f73f5b40d116c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c555aabc5b7df5ccb88c15b7b94f73f5b40d116c", "html_url": "https://github.com/rust-lang/rust/commit/c555aabc5b7df5ccb88c15b7b94f73f5b40d116c"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "7fd91aba321c5c8f68759842bdfe1a4f4a0dbe58", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f572a9810e2c54b7067641583a5527acff6cae5/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f572a9810e2c54b7067641583a5527acff6cae5/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=0f572a9810e2c54b7067641583a5527acff6cae5", "patch": "@@ -63,9 +63,9 @@\n //! [`Global`] allocator with [`Layout::for_value(&*value)`].\n //!\n //! For zero-sized values, the `Box` pointer still has to be [valid] for reads and writes and\n-//! sufficiently aligned. In particular, casting any aligned non-zero integer to a raw pointer\n-//! produces a valid pointer, but a pointer pointing into previously allocated memory that since got\n-//! freed is not valid.\n+//! sufficiently aligned. In particular, casting any aligned non-zero integer literal to a raw\n+//! pointer produces a valid pointer, but a pointer pointing into previously allocated memory that\n+//! since got freed is not valid.\n //!\n //! So long as `T: Sized`, a `Box<T>` is guaranteed to be represented\n //! as a single pointer and is also ABI-compatible with C pointers"}, {"sha": "243346a429a993e167301e080dca91bdc61e81ac", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f572a9810e2c54b7067641583a5527acff6cae5/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f572a9810e2c54b7067641583a5527acff6cae5/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=0f572a9810e2c54b7067641583a5527acff6cae5", "patch": "@@ -21,10 +21,10 @@\n //!   within the bounds of a single allocated object. Note that in Rust,\n //!   every (stack-allocated) variable is considered a separate allocated object.\n //! * Even for operations of [size zero][zst], the pointer must not be \"dangling\" in the sense of\n-//!   pointing to deallocated memory. However, casting any non-zero integer to a pointer is valid\n-//!   for zero-sized accesses. This corresponds to writing your own allocator; allocating zero-sized\n-//!   objects is not very hard. In contrast, when you use the standard allocator, after memory got\n-//!   deallocated, even zero-sized accesses to that memory are invalid.\n+//!   pointing to deallocated memory. However, casting any non-zero integer literal to a pointer is\n+//!   valid for zero-sized accesses. This corresponds to writing your own allocator; allocating\n+//!   zero-sized objects is not very hard. In contrast, when you use the standard allocator, after\n+//!   memory got deallocated, even zero-sized accesses to that memory are invalid.\n //! * All accesses performed by functions in this module are *non-atomic* in the sense\n //!   of [atomic operations] used to synchronize between threads. This means it is\n //!   undefined behavior to perform two concurrent accesses to the same location from different"}]}