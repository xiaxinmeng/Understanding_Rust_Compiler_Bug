{"sha": "48b87c6f275069e5c885b54e3d968056a5563db9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4Yjg3YzZmMjc1MDY5ZTVjODg1YjU0ZTNkOTY4MDU2YTU1NjNkYjk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-24T14:08:50Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-02T20:33:36Z"}, "message": "operator: implement binary_op strictly by first checking the type, then dispatching further; call ptr_op machine hook only for pointer types", "tree": {"sha": "53d319379e070498a7a0ea48fe236b34eb40ac87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53d319379e070498a7a0ea48fe236b34eb40ac87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48b87c6f275069e5c885b54e3d968056a5563db9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48b87c6f275069e5c885b54e3d968056a5563db9", "html_url": "https://github.com/rust-lang/rust/commit/48b87c6f275069e5c885b54e3d968056a5563db9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48b87c6f275069e5c885b54e3d968056a5563db9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44a927ad626620f0cde3216a256423b7a41d54c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/44a927ad626620f0cde3216a256423b7a41d54c9", "html_url": "https://github.com/rust-lang/rust/commit/44a927ad626620f0cde3216a256423b7a41d54c9"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "813b7f7fa9c307301e7ee9b603b638e28cc78129", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48b87c6f275069e5c885b54e3d968056a5563db9/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b87c6f275069e5c885b54e3d968056a5563db9/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=48b87c6f275069e5c885b54e3d968056a5563db9", "patch": "@@ -397,7 +397,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         )\n     }\n \n-    fn ptr_op(\n+    fn binary_ptr_op(\n         _ecx: &InterpCx<'mir, 'tcx, Self>,\n         _bin_op: mir::BinOp,\n         _left: ImmTy<'tcx>,"}, {"sha": "4a0cc24cf1e9540eea56b2777f35d2e137c2f3a2", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48b87c6f275069e5c885b54e3d968056a5563db9/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b87c6f275069e5c885b54e3d968056a5563db9/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=48b87c6f275069e5c885b54e3d968056a5563db9", "patch": "@@ -165,11 +165,10 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         def_id: DefId,\n     ) -> InterpResult<'tcx, Cow<'tcx, Allocation>>;\n \n-    /// Called for all binary operations on integer(-like) types when one operand is a pointer\n-    /// value, and for the `Offset` operation that is inherently about pointers.\n+    /// Called for all binary operations where the LHS has pointer type.\n     ///\n     /// Returns a (value, overflowed) pair if the operation succeeded\n-    fn ptr_op(\n+    fn binary_ptr_op(\n         ecx: &InterpCx<'mir, 'tcx, Self>,\n         bin_op: mir::BinOp,\n         left: ImmTy<'tcx, Self::PointerTag>,"}, {"sha": "504bd0a67bc48ce8377c8782a818c5ccabe17920", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/48b87c6f275069e5c885b54e3d968056a5563db9/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b87c6f275069e5c885b54e3d968056a5563db9/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=48b87c6f275069e5c885b54e3d968056a5563db9", "patch": "@@ -290,30 +290,29 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     FloatTy::F64 => self.binary_float_op(bin_op, left.to_f64()?, right.to_f64()?),\n                 })\n             }\n-            _ => {\n-                // Must be integer(-like) types.  Don't forget about == on fn pointers.\n-                assert!(\n-                    left.layout.ty.is_integral()   ||\n-                    left.layout.ty.is_unsafe_ptr() || left.layout.ty.is_fn_ptr(),\n-                    \"Unexpected LHS type {:?} for BinOp {:?}\", left.layout.ty, bin_op);\n+            _ if left.layout.ty.is_integral() => {\n+                // the RHS type can be different, e.g. for shifts -- but it has to be integral, too\n                 assert!(\n-                    right.layout.ty.is_integral()   ||\n-                    right.layout.ty.is_unsafe_ptr() || right.layout.ty.is_fn_ptr(),\n-                    \"Unexpected RHS type {:?} for BinOp {:?}\", right.layout.ty, bin_op);\n-\n-                // Handle operations that support pointer values\n-                if left.to_scalar_ptr()?.is_ptr() ||\n-                    right.to_scalar_ptr()?.is_ptr() ||\n-                    bin_op == mir::BinOp::Offset\n-                {\n-                    return M::ptr_op(self, bin_op, left, right);\n-                }\n+                    right.layout.ty.is_integral(),\n+                    \"Unexpected types for BinOp: {:?} {:?} {:?}\",\n+                    left.layout.ty, bin_op, right.layout.ty\n+                );\n \n-                // Everything else only works with \"proper\" bits\n-                let l = left.to_bits().expect(\"we checked is_ptr\");\n-                let r = right.to_bits().expect(\"we checked is_ptr\");\n+                let l = self.force_bits(left.to_scalar()?, left.layout.size)?;\n+                let r = self.force_bits(right.to_scalar()?, right.layout.size)?;\n                 self.binary_int_op(bin_op, l, left.layout, r, right.layout)\n             }\n+            _ if left.layout.ty.is_unsafe_ptr() || left.layout.ty.is_fn_ptr() => {\n+                // The RHS type must be the same *or an integer type* (for `Offset`)\n+                assert!(\n+                    right.layout.ty == left.layout.ty || right.layout.ty.is_integral(),\n+                    \"Unexpected types for BinOp: {:?} {:?} {:?}\",\n+                    left.layout.ty, bin_op, right.layout.ty\n+                );\n+\n+                M::binary_ptr_op(self, bin_op, left, right)\n+            }\n+            _ => bug!(\"Invalid MIR: bad LHS type for binop: {:?}\", left.layout.ty),\n         }\n     }\n "}]}