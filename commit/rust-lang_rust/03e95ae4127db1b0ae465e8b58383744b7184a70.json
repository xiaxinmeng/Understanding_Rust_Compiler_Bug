{"sha": "03e95ae4127db1b0ae465e8b58383744b7184a70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZTk1YWU0MTI3ZGIxYjBhZTQ2NWU4YjU4MzgzNzQ0YjcxODRhNzA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-10T11:08:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-10T11:09:35Z"}, "message": "Miri shouldn't look at types", "tree": {"sha": "683ead42c5b7cbe8415468bf910eef856193f322", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/683ead42c5b7cbe8415468bf910eef856193f322"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03e95ae4127db1b0ae465e8b58383744b7184a70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03e95ae4127db1b0ae465e8b58383744b7184a70", "html_url": "https://github.com/rust-lang/rust/commit/03e95ae4127db1b0ae465e8b58383744b7184a70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03e95ae4127db1b0ae465e8b58383744b7184a70/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d19a359444295bab01de7ff44a9d72302e573bc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d19a359444295bab01de7ff44a9d72302e573bc9", "html_url": "https://github.com/rust-lang/rust/commit/d19a359444295bab01de7ff44a9d72302e573bc9"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "6f4227ed34cc425adf44effc31669c81098b541b", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/03e95ae4127db1b0ae465e8b58383744b7184a70/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e95ae4127db1b0ae465e8b58383744b7184a70/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=03e95ae4127db1b0ae465e8b58383744b7184a70", "patch": "@@ -385,15 +385,19 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         local: mir::Local,\n         layout: Option<TyLayout<'tcx>>,\n     ) -> InterpResult<'tcx, TyLayout<'tcx>> {\n-        match frame.locals[local].layout.get() {\n+        // `const_prop` runs into this with an invalid (empty) frame, so we\n+        // have to support that case (mostly by skipping all caching).\n+        match frame.locals.get(local).and_then(|state| state.layout.get()) {\n             None => {\n                 let layout = crate::interpret::operand::from_known_layout(layout, || {\n                     let local_ty = frame.body.local_decls[local].ty;\n                     let local_ty = self.monomorphize_with_substs(local_ty, frame.instance.substs)?;\n                     self.layout_of(local_ty)\n                 })?;\n-                // Layouts of locals are requested a lot, so we cache them.\n-                frame.locals[local].layout.set(Some(layout));\n+                if let Some(state) = frame.locals.get(local) {\n+                    // Layouts of locals are requested a lot, so we cache them.\n+                    state.layout.set(Some(layout));\n+                }\n                 Ok(layout)\n             }\n             Some(layout) => Ok(layout),"}, {"sha": "1d6b48e9da4c4e38d9813defeb91075b41b19227", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03e95ae4127db1b0ae465e8b58383744b7184a70/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e95ae4127db1b0ae465e8b58383744b7184a70/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=03e95ae4127db1b0ae465e8b58383744b7184a70", "patch": "@@ -405,9 +405,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         }\n                     } else {\n                         let local = mir::RETURN_PLACE;\n-                        let ty = self.frame().body.local_decls[local].ty;\n-                        if !self.tcx.is_ty_uninhabited_from_any_module(ty) {\n-                            throw_unsup!(FunctionRetMismatch(self.tcx.types.never, ty))\n+                        let callee_layout = self.layout_of_local(self.frame(), local, None)?;\n+                        if !callee_layout.abi.is_uninhabited() {\n+                            throw_unsup!(FunctionRetMismatch(\n+                                self.tcx.types.never, callee_layout.ty\n+                            ))\n                         }\n                     }\n                     Ok(())"}]}