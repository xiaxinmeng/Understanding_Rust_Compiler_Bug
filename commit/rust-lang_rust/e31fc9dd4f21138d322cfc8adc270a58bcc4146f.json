{"sha": "e31fc9dd4f21138d322cfc8adc270a58bcc4146f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMWZjOWRkNGYyMTEzOGQzMjJjZmM4YWRjMjcwYTU4YmNjNDE0NmY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-09-19T13:38:53Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-11-24T12:19:26Z"}, "message": "Add `node_to_user_string`, `node_to_string` variant that drops id from output.", "tree": {"sha": "82129fe0925f87c56b76525ae4bc72325eb3fd21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82129fe0925f87c56b76525ae4bc72325eb3fd21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e31fc9dd4f21138d322cfc8adc270a58bcc4146f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e31fc9dd4f21138d322cfc8adc270a58bcc4146f", "html_url": "https://github.com/rust-lang/rust/commit/e31fc9dd4f21138d322cfc8adc270a58bcc4146f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e31fc9dd4f21138d322cfc8adc270a58bcc4146f/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5b795dc82edb4488bf237b470a68fcfec505bac", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5b795dc82edb4488bf237b470a68fcfec505bac", "html_url": "https://github.com/rust-lang/rust/commit/f5b795dc82edb4488bf237b470a68fcfec505bac"}], "stats": {"total": 59, "additions": 33, "deletions": 26}, "files": [{"sha": "8a2202d28d5c73f45d861ce62f8ac11b06e2873e", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 33, "deletions": 26, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e31fc9dd4f21138d322cfc8adc270a58bcc4146f/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31fc9dd4f21138d322cfc8adc270a58bcc4146f/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=e31fc9dd4f21138d322cfc8adc270a58bcc4146f", "patch": "@@ -551,7 +551,11 @@ impl<'ast> Map<'ast> {\n     }\n \n     pub fn node_to_string(&self, id: NodeId) -> String {\n-        node_id_to_string(self, id)\n+        node_id_to_string(self, id, true)\n+    }\n+\n+    pub fn node_to_user_string(&self, id: NodeId) -> String {\n+        node_id_to_string(self, id, false)\n     }\n }\n \n@@ -1028,7 +1032,10 @@ impl<'a> NodePrinter for pprust::State<'a> {\n     }\n }\n \n-fn node_id_to_string(map: &Map, id: NodeId) -> String {\n+fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n+    let id_str = format!(\" (id={})\", id);\n+    let id_str = if include_id { id_str.as_slice() } else { \"\" };\n+\n     match map.find(id) {\n         Some(NodeItem(item)) => {\n             let path_str = map.path_to_str_with_ident(id, item.ident);\n@@ -1045,82 +1052,82 @@ fn node_id_to_string(map: &Map, id: NodeId) -> String {\n                 ItemImpl(..) => \"impl\",\n                 ItemMac(..) => \"macro\"\n             };\n-            format!(\"{} {} (id={})\", item_str, path_str, id)\n+            format!(\"{} {}{}\", item_str, path_str, id_str)\n         }\n         Some(NodeForeignItem(item)) => {\n             let path_str = map.path_to_str_with_ident(id, item.ident);\n-            format!(\"foreign item {} (id={})\", path_str, id)\n+            format!(\"foreign item {}{}\", path_str, id_str)\n         }\n         Some(NodeImplItem(ref ii)) => {\n             match **ii {\n                 MethodImplItem(ref m) => {\n                     match m.node {\n                         MethDecl(ident, _, _, _, _, _, _, _) =>\n-                            format!(\"method {} in {} (id={})\",\n+                            format!(\"method {} in {}{}\",\n                                     token::get_ident(ident),\n-                                    map.path_to_string(id), id),\n+                                    map.path_to_string(id), id_str),\n                         MethMac(ref mac) =>\n-                            format!(\"method macro {} (id={})\",\n-                                    pprust::mac_to_string(mac), id)\n+                            format!(\"method macro {}{}\",\n+                                    pprust::mac_to_string(mac), id_str)\n                     }\n                 }\n                 TypeImplItem(ref t) => {\n-                    format!(\"typedef {} in {} (id={})\",\n+                    format!(\"typedef {} in {}{}\",\n                             token::get_ident(t.ident),\n                             map.path_to_string(id),\n-                            id)\n+                            id_str)\n                 }\n             }\n         }\n         Some(NodeTraitItem(ref tm)) => {\n             match **tm {\n                 RequiredMethod(_) | ProvidedMethod(_) => {\n                     let m = ast_util::trait_item_to_ty_method(&**tm);\n-                    format!(\"method {} in {} (id={})\",\n+                    format!(\"method {} in {}{}\",\n                             token::get_ident(m.ident),\n                             map.path_to_string(id),\n-                            id)\n+                            id_str)\n                 }\n                 TypeTraitItem(ref t) => {\n-                    format!(\"type item {} in {} (id={})\",\n+                    format!(\"type item {} in {}{}\",\n                             token::get_ident(t.ty_param.ident),\n                             map.path_to_string(id),\n-                            id)\n+                            id_str)\n                 }\n             }\n         }\n         Some(NodeVariant(ref variant)) => {\n-            format!(\"variant {} in {} (id={})\",\n+            format!(\"variant {} in {}{}\",\n                     token::get_ident(variant.node.name),\n-                    map.path_to_string(id), id)\n+                    map.path_to_string(id), id_str)\n         }\n         Some(NodeExpr(ref expr)) => {\n-            format!(\"expr {} (id={})\", pprust::expr_to_string(&**expr), id)\n+            format!(\"expr {}{}\", pprust::expr_to_string(&**expr), id_str)\n         }\n         Some(NodeStmt(ref stmt)) => {\n-            format!(\"stmt {} (id={})\", pprust::stmt_to_string(&**stmt), id)\n+            format!(\"stmt {}{}\", pprust::stmt_to_string(&**stmt), id_str)\n         }\n         Some(NodeArg(ref pat)) => {\n-            format!(\"arg {} (id={})\", pprust::pat_to_string(&**pat), id)\n+            format!(\"arg {}{}\", pprust::pat_to_string(&**pat), id_str)\n         }\n         Some(NodeLocal(ref pat)) => {\n-            format!(\"local {} (id={})\", pprust::pat_to_string(&**pat), id)\n+            format!(\"local {}{}\", pprust::pat_to_string(&**pat), id_str)\n         }\n         Some(NodePat(ref pat)) => {\n-            format!(\"pat {} (id={})\", pprust::pat_to_string(&**pat), id)\n+            format!(\"pat {}{}\", pprust::pat_to_string(&**pat), id_str)\n         }\n         Some(NodeBlock(ref block)) => {\n-            format!(\"block {} (id={})\", pprust::block_to_string(&**block), id)\n+            format!(\"block {}{}\", pprust::block_to_string(&**block), id_str)\n         }\n         Some(NodeStructCtor(_)) => {\n-            format!(\"struct_ctor {} (id={})\", map.path_to_string(id), id)\n+            format!(\"struct_ctor {}{}\", map.path_to_string(id), id_str)\n         }\n         Some(NodeLifetime(ref l)) => {\n-            format!(\"lifetime {} (id={})\",\n-                    pprust::lifetime_to_string(&**l), id)\n+            format!(\"lifetime {}{}\",\n+                    pprust::lifetime_to_string(&**l), id_str)\n         }\n         None => {\n-            format!(\"unknown node (id={})\", id)\n+            format!(\"unknown node{}\", id_str)\n         }\n     }\n }"}]}