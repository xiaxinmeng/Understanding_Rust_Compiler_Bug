{"sha": "d05d6abf89865bc701f6001bc20fe07506257e14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNWQ2YWJmODk4NjViYzcwMWY2MDAxYmMyMGZlMDc1MDYyNTdlMTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-30T21:55:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-30T21:55:46Z"}, "message": "Auto merge of #5750 - ebroto:blanket_clippy_restriction_lints, r=Manishearth,flip1995,phansch,oli-obk\n\nLint enabling the whole restriction group\n\nI've added it to the `correctness` category, but I may be missing some valid use cases. In that case it could be changed to `pedantic`.\n\nchangelog: Add [`blanket_clippy_restriction_lints`] to check against enabling the whole restriction group.", "tree": {"sha": "9f28a16ec69c70beaab5a27545e64b82839684ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f28a16ec69c70beaab5a27545e64b82839684ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d05d6abf89865bc701f6001bc20fe07506257e14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d05d6abf89865bc701f6001bc20fe07506257e14", "html_url": "https://github.com/rust-lang/rust/commit/d05d6abf89865bc701f6001bc20fe07506257e14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d05d6abf89865bc701f6001bc20fe07506257e14/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccf7cb3764728b26f5ccc0d7b3754f0c49319af3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccf7cb3764728b26f5ccc0d7b3754f0c49319af3", "html_url": "https://github.com/rust-lang/rust/commit/ccf7cb3764728b26f5ccc0d7b3754f0c49319af3"}, {"sha": "c5d8f530e0625f14c5b4bedebdf0dc53064310c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d8f530e0625f14c5b4bedebdf0dc53064310c9", "html_url": "https://github.com/rust-lang/rust/commit/c5d8f530e0625f14c5b4bedebdf0dc53064310c9"}], "stats": {"total": 145, "additions": 113, "deletions": 32}, "files": [{"sha": "b88044d6ce84ce9a2b75ed68383458c6325bcb38", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d05d6abf89865bc701f6001bc20fe07506257e14/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d05d6abf89865bc701f6001bc20fe07506257e14/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d05d6abf89865bc701f6001bc20fe07506257e14", "patch": "@@ -1352,6 +1352,7 @@ Released 2018-09-13\n [`bad_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#bad_bit_mask\n [`bind_instead_of_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#bind_instead_of_map\n [`blacklisted_name`]: https://rust-lang.github.io/rust-clippy/master/index.html#blacklisted_name\n+[`blanket_clippy_restriction_lints`]: https://rust-lang.github.io/rust-clippy/master/index.html#blanket_clippy_restriction_lints\n [`blocks_in_if_conditions`]: https://rust-lang.github.io/rust-clippy/master/index.html#blocks_in_if_conditions\n [`bool_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_comparison\n [`borrow_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_interior_mutable_const"}, {"sha": "bb9d8be5daee0a7b624ccd27c7b0a9fa2cae9002", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 67, "deletions": 28, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/d05d6abf89865bc701f6001bc20fe07506257e14/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05d6abf89865bc701f6001bc20fe07506257e14/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=d05d6abf89865bc701f6001bc20fe07506257e14", "patch": "@@ -2,8 +2,8 @@\n \n use crate::reexport::Name;\n use crate::utils::{\n-    first_line_of_span, is_present_in_source, match_def_path, paths, snippet_opt, span_lint, span_lint_and_sugg,\n-    span_lint_and_then, without_block_comments,\n+    first_line_of_span, is_present_in_source, match_def_path, paths, snippet_opt, span_lint, span_lint_and_help,\n+    span_lint_and_sugg, span_lint_and_then, without_block_comments,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::{AttrKind, AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n@@ -17,7 +17,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{Symbol, SymbolStr};\n use semver::Version;\n \n static UNIX_SYSTEMS: &[&str] = &[\n@@ -182,6 +182,29 @@ declare_clippy_lint! {\n     \"unknown_lints for scoped Clippy lints\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `warn`/`deny`/`forbid` attributes targeting the whole clippy::restriction category.\n+    ///\n+    /// **Why is this bad?** Restriction lints sometimes are in contrast with other lints or even go against idiomatic rust.\n+    /// These lints should only be enabled on a lint-by-lint basis and with careful consideration.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// Bad:\n+    /// ```rust\n+    /// #![deny(clippy::restriction)]\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust\n+    /// #![deny(clippy::as_conversions)]\n+    /// ```\n+    pub BLANKET_CLIPPY_RESTRICTION_LINTS,\n+    style,\n+    \"enabling the complete restriction group\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for `#[cfg_attr(rustfmt, rustfmt_skip)]` and suggests to replace it\n     /// with `#[rustfmt::skip]`.\n@@ -249,15 +272,17 @@ declare_lint_pass!(Attributes => [\n     DEPRECATED_SEMVER,\n     USELESS_ATTRIBUTE,\n     UNKNOWN_CLIPPY_LINTS,\n+    BLANKET_CLIPPY_RESTRICTION_LINTS,\n ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Attributes {\n     fn check_attribute(&mut self, cx: &LateContext<'a, 'tcx>, attr: &'tcx Attribute) {\n         if let Some(items) = &attr.meta_item_list() {\n             if let Some(ident) = attr.ident() {\n-                match &*ident.as_str() {\n+                let ident = &*ident.as_str();\n+                match ident {\n                     \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n-                        check_clippy_lint_names(cx, items);\n+                        check_clippy_lint_names(cx, ident, items);\n                     },\n                     _ => {},\n                 }\n@@ -363,38 +388,43 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Attributes {\n     }\n }\n \n-#[allow(clippy::single_match_else)]\n-fn check_clippy_lint_names(cx: &LateContext<'_, '_>, items: &[NestedMetaItem]) {\n-    let lint_store = cx.lints();\n-    for lint in items {\n+fn check_clippy_lint_names(cx: &LateContext<'_, '_>, ident: &str, items: &[NestedMetaItem]) {\n+    fn extract_name(lint: &NestedMetaItem) -> Option<SymbolStr> {\n         if_chain! {\n             if let Some(meta_item) = lint.meta_item();\n             if meta_item.path.segments.len() > 1;\n             if let tool_name = meta_item.path.segments[0].ident;\n             if tool_name.as_str() == \"clippy\";\n-            let name = meta_item.path.segments.last().unwrap().ident.name;\n-            if let CheckLintNameResult::Tool(Err((None, _))) = lint_store.check_lint_name(\n-                &name.as_str(),\n-                Some(tool_name.name),\n-            );\n+            let lint_name = meta_item.path.segments.last().unwrap().ident.name;\n             then {\n+                return Some(lint_name.as_str());\n+            }\n+        }\n+        None\n+    }\n+\n+    let lint_store = cx.lints();\n+    for lint in items {\n+        if let Some(lint_name) = extract_name(lint) {\n+            if let CheckLintNameResult::Tool(Err((None, _))) =\n+                lint_store.check_lint_name(&lint_name, Some(sym!(clippy)))\n+            {\n                 span_lint_and_then(\n                     cx,\n                     UNKNOWN_CLIPPY_LINTS,\n                     lint.span(),\n-                    &format!(\"unknown clippy lint: clippy::{}\", name),\n+                    &format!(\"unknown clippy lint: clippy::{}\", lint_name),\n                     |diag| {\n-                        let name_lower = name.as_str().to_lowercase();\n-                        let symbols = lint_store.get_lints().iter().map(\n-                            |l| Symbol::intern(&l.name_lower())\n-                        ).collect::<Vec<_>>();\n-                        let sugg = find_best_match_for_name(\n-                            symbols.iter(),\n-                            &format!(\"clippy::{}\", name_lower),\n-                            None,\n-                        );\n-                        if name.as_str().chars().any(char::is_uppercase)\n-                            && lint_store.find_lints(&format!(\"clippy::{}\", name_lower)).is_ok() {\n+                        let name_lower = lint_name.to_lowercase();\n+                        let symbols = lint_store\n+                            .get_lints()\n+                            .iter()\n+                            .map(|l| Symbol::intern(&l.name_lower()))\n+                            .collect::<Vec<_>>();\n+                        let sugg = find_best_match_for_name(symbols.iter(), &format!(\"clippy::{}\", name_lower), None);\n+                        if lint_name.chars().any(char::is_uppercase)\n+                            && lint_store.find_lints(&format!(\"clippy::{}\", name_lower)).is_ok()\n+                        {\n                             diag.span_suggestion(\n                                 lint.span(),\n                                 \"lowercase the lint name\",\n@@ -409,10 +439,19 @@ fn check_clippy_lint_names(cx: &LateContext<'_, '_>, items: &[NestedMetaItem]) {\n                                 Applicability::MachineApplicable,\n                             );\n                         }\n-                    }\n+                    },\n+                );\n+            } else if lint_name == \"restriction\" && ident != \"allow\" {\n+                span_lint_and_help(\n+                    cx,\n+                    BLANKET_CLIPPY_RESTRICTION_LINTS,\n+                    lint.span(),\n+                    \"restriction lints are not meant to be all enabled\",\n+                    None,\n+                    \"try enabling only the lints you really need\",\n                 );\n             }\n-        };\n+        }\n     }\n }\n "}, {"sha": "50116a95612e852ed8ab7af24aca63a13b7a5ae0", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d05d6abf89865bc701f6001bc20fe07506257e14/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05d6abf89865bc701f6001bc20fe07506257e14/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d05d6abf89865bc701f6001bc20fe07506257e14", "patch": "@@ -474,6 +474,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &assign_ops::ASSIGN_OP_PATTERN,\n         &assign_ops::MISREFACTORED_ASSIGN_OP,\n         &atomic_ordering::INVALID_ATOMIC_ORDERING,\n+        &attrs::BLANKET_CLIPPY_RESTRICTION_LINTS,\n         &attrs::DEPRECATED_CFG_ATTR,\n         &attrs::DEPRECATED_SEMVER,\n         &attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n@@ -1189,6 +1190,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&assign_ops::ASSIGN_OP_PATTERN),\n         LintId::of(&assign_ops::MISREFACTORED_ASSIGN_OP),\n         LintId::of(&atomic_ordering::INVALID_ATOMIC_ORDERING),\n+        LintId::of(&attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n         LintId::of(&attrs::DEPRECATED_CFG_ATTR),\n         LintId::of(&attrs::DEPRECATED_SEMVER),\n         LintId::of(&attrs::MISMATCHED_TARGET_OS),\n@@ -1441,6 +1443,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n         LintId::of(&assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n         LintId::of(&assign_ops::ASSIGN_OP_PATTERN),\n+        LintId::of(&attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n         LintId::of(&attrs::UNKNOWN_CLIPPY_LINTS),\n         LintId::of(&bit_mask::VERBOSE_BIT_MASK),\n         LintId::of(&blacklisted_name::BLACKLISTED_NAME),"}, {"sha": "5119fb40337284bdb15c90d2f1d98f9fbe9fc716", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d05d6abf89865bc701f6001bc20fe07506257e14/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05d6abf89865bc701f6001bc20fe07506257e14/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=d05d6abf89865bc701f6001bc20fe07506257e14", "patch": "@@ -80,6 +80,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"blacklisted_name\",\n     },\n+    Lint {\n+        name: \"blanket_clippy_restriction_lints\",\n+        group: \"style\",\n+        desc: \"enabling the complete restriction group\",\n+        deprecation: None,\n+        module: \"attrs\",\n+    },\n     Lint {\n         name: \"blocks_in_if_conditions\",\n         group: \"style\","}, {"sha": "908d063729f45c4bcdb0a41dc6fb18bfc73c470d", "filename": "tests/ui/attrs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d05d6abf89865bc701f6001bc20fe07506257e14/tests%2Fui%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05d6abf89865bc701f6001bc20fe07506257e14/tests%2Fui%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.rs?ref=d05d6abf89865bc701f6001bc20fe07506257e14", "patch": "@@ -1,5 +1,11 @@\n #![warn(clippy::inline_always, clippy::deprecated_semver)]\n #![allow(clippy::assertions_on_constants)]\n+// Test that the whole restriction group is not enabled\n+#![warn(clippy::restriction)]\n+#![deny(clippy::restriction)]\n+#![forbid(clippy::restriction)]\n+#![allow(clippy::missing_docs_in_private_items, clippy::panic, clippy::unreachable)]\n+\n #[inline(always)]\n fn test_attr_lint() {\n     assert!(true)"}, {"sha": "ef4b89eaa6dee41522557104579adbdca5031133", "filename": "tests/ui/attrs.stderr", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d05d6abf89865bc701f6001bc20fe07506257e14/tests%2Fui%2Fattrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d05d6abf89865bc701f6001bc20fe07506257e14/tests%2Fui%2Fattrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.stderr?ref=d05d6abf89865bc701f6001bc20fe07506257e14", "patch": "@@ -1,24 +1,49 @@\n error: you have declared `#[inline(always)]` on `test_attr_lint`. This is usually a bad idea\n-  --> $DIR/attrs.rs:3:1\n+  --> $DIR/attrs.rs:9:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::inline-always` implied by `-D warnings`\n \n error: the since field must contain a semver-compliant version\n-  --> $DIR/attrs.rs:23:14\n+  --> $DIR/attrs.rs:29:14\n    |\n LL | #[deprecated(since = \"forever\")]\n    |              ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::deprecated-semver` implied by `-D warnings`\n \n error: the since field must contain a semver-compliant version\n-  --> $DIR/attrs.rs:26:14\n+  --> $DIR/attrs.rs:32:14\n    |\n LL | #[deprecated(since = \"1\")]\n    |              ^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: restriction lints are not meant to be all enabled\n+  --> $DIR/attrs.rs:4:9\n+   |\n+LL | #![warn(clippy::restriction)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::blanket-clippy-restriction-lints` implied by `-D warnings`\n+   = help: try enabling only the lints you really need\n+\n+error: restriction lints are not meant to be all enabled\n+  --> $DIR/attrs.rs:5:9\n+   |\n+LL | #![deny(clippy::restriction)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try enabling only the lints you really need\n+\n+error: restriction lints are not meant to be all enabled\n+  --> $DIR/attrs.rs:6:11\n+   |\n+LL | #![forbid(clippy::restriction)]\n+   |           ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try enabling only the lints you really need\n+\n+error: aborting due to 6 previous errors\n "}]}