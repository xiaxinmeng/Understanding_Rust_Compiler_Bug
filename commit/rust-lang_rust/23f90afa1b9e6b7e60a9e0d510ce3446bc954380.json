{"sha": "23f90afa1b9e6b7e60a9e0d510ce3446bc954380", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZjkwYWZhMWI5ZTZiN2U2MGE5ZTBkNTEwY2UzNDQ2YmM5NTQzODA=", "commit": {"author": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-01-23T11:34:40Z"}, "committer": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-01-23T11:34:40Z"}, "message": "Add configurable threshold, default: 4096", "tree": {"sha": "7a3e05896e5f34afdcfc322919ee5583114fd1d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a3e05896e5f34afdcfc322919ee5583114fd1d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23f90afa1b9e6b7e60a9e0d510ce3446bc954380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23f90afa1b9e6b7e60a9e0d510ce3446bc954380", "html_url": "https://github.com/rust-lang/rust/commit/23f90afa1b9e6b7e60a9e0d510ce3446bc954380", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23f90afa1b9e6b7e60a9e0d510ce3446bc954380/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "647da97622a4df64b4e67a2b11a73f60035874a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/647da97622a4df64b4e67a2b11a73f60035874a9", "html_url": "https://github.com/rust-lang/rust/commit/647da97622a4df64b4e67a2b11a73f60035874a9"}], "stats": {"total": 130, "additions": 54, "deletions": 76}, "files": [{"sha": "f57092b7ff5888b0e75a698efa6ee19c8dfa39bc", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23f90afa1b9e6b7e60a9e0d510ce3446bc954380/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f90afa1b9e6b7e60a9e0d510ce3446bc954380/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=23f90afa1b9e6b7e60a9e0d510ce3446bc954380", "patch": "@@ -354,7 +354,9 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box explicit_write::Pass);\n     reg.register_late_lint_pass(box needless_pass_by_value::NeedlessPassByValue);\n     reg.register_early_lint_pass(box literal_representation::LiteralDigitGrouping);\n-    reg.register_early_lint_pass(box literal_representation::LiteralRepresentation);\n+    reg.register_early_lint_pass(box literal_representation::LiteralRepresentation::new(\n+            conf.literal_representation_threshold\n+    ));\n     reg.register_late_lint_pass(box use_self::UseSelf);\n     reg.register_late_lint_pass(box bytecount::ByteCount);\n     reg.register_late_lint_pass(box infinite_iter::Pass);"}, {"sha": "0d0e985f994535ff07ed8f562419e62e5b8175bc", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/23f90afa1b9e6b7e60a9e0d510ce3446bc954380/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f90afa1b9e6b7e60a9e0d510ce3446bc954380/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=23f90afa1b9e6b7e60a9e0d510ce3446bc954380", "patch": "@@ -394,7 +394,9 @@ impl LiteralDigitGrouping {\n }\n \n #[derive(Copy, Clone)]\n-pub struct LiteralRepresentation;\n+pub struct LiteralRepresentation {\n+    threshold: u64,\n+}\n \n impl LintPass for LiteralRepresentation {\n     fn get_lints(&self) -> LintArray {\n@@ -415,6 +417,11 @@ impl EarlyLintPass for LiteralRepresentation {\n }\n \n impl LiteralRepresentation {\n+    pub fn new(threshold: u64) -> Self {\n+        Self {\n+            threshold: threshold,\n+        }\n+    }\n     fn check_lit(&self, cx: &EarlyContext, lit: &Lit) {\n         // Lint integral literals.\n         if_chain! {\n@@ -425,11 +432,15 @@ impl LiteralRepresentation {\n             then {\n                 let digit_info = DigitInfo::new(&src, false);\n                 if digit_info.radix == Radix::Decimal {\n-                    let hex = format!(\"{:#X}\", digit_info.digits\n-                                                            .chars()\n-                                                            .filter(|&c| c != '_')\n-                                                            .collect::<String>()\n-                                                            .parse::<u128>().unwrap());\n+                    let val = digit_info.digits\n+                        .chars()\n+                        .filter(|&c| c != '_')\n+                        .collect::<String>()\n+                        .parse::<u128>().unwrap();\n+                    if val < self.threshold as u128 {\n+                        return\n+                    }\n+                    let hex = format!(\"{:#X}\", val);\n                     let digit_info = DigitInfo::new(&hex[..], false);\n                     let _ = Self::do_lint(digit_info.digits).map_err(|warning_type| {\n                         warning_type.display(&digit_info.grouping_hint(), cx, &lit.span)\n@@ -440,22 +451,30 @@ impl LiteralRepresentation {\n     }\n \n     fn do_lint(digits: &str) -> Result<(), WarningType> {\n-        if digits.len() == 2 && digits == \"FF\" {\n-            return Err(WarningType::BadRepresentation);\n-        } else if digits.len() == 3 {\n-            // Lint for Literals with a hex-representation of 3 digits\n+        if digits.len() == 1 {\n+            // Lint for 1 digit literals, if someone really sets the threshold that low\n+            if digits == \"1\" || digits == \"2\" || digits == \"4\" || digits == \"8\" || digits == \"3\" || digits == \"7\"\n+                || digits == \"F\"\n+            {\n+                return Err(WarningType::BadRepresentation);\n+            }\n+        } else if digits.len() < 4 {\n+            // Lint for Literals with a hex-representation of 2 or 3 digits\n             let f = &digits[0..1]; // first digit\n             let s = &digits[1..]; // suffix\n-                                  // Powers of 2 minus 1\n-            if (f.eq(\"1\") || f.eq(\"3\") || f.eq(\"7\") || f.eq(\"F\")) && s.eq(\"FF\") {\n+            // Powers of 2\n+            if ((f.eq(\"1\") || f.eq(\"2\") || f.eq(\"4\") || f.eq(\"8\")) && s.chars().all(|c| c == '0'))\n+                // Powers of 2 minus 1\n+                || ((f.eq(\"1\") || f.eq(\"3\") || f.eq(\"7\") || f.eq(\"F\")) && s.chars().all(|c| c == 'F'))\n+            {\n                 return Err(WarningType::BadRepresentation);\n             }\n-        } else if digits.len() > 3 {\n+        } else {\n             // Lint for Literals with a hex-representation of 4 digits or more\n             let f = &digits[0..1]; // first digit\n             let m = &digits[1..digits.len() - 1]; // middle digits, except last\n             let s = &digits[1..]; // suffix\n-                                  // Powers of 2 with a margin of +15/-16\n+            // Powers of 2 with a margin of +15/-16\n             if ((f.eq(\"1\") || f.eq(\"2\") || f.eq(\"4\") || f.eq(\"8\")) && m.chars().all(|c| c == '0'))\n                 || ((f.eq(\"1\") || f.eq(\"3\") || f.eq(\"7\") || f.eq(\"F\")) && m.chars().all(|c| c == 'F'))\n                 // Lint for representations with only 0s and Fs, while allowing 7 as the first"}, {"sha": "e1298be81e5c224e1d872a18394245ad10e2cff6", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23f90afa1b9e6b7e60a9e0d510ce3446bc954380/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f90afa1b9e6b7e60a9e0d510ce3446bc954380/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=23f90afa1b9e6b7e60a9e0d510ce3446bc954380", "patch": "@@ -177,6 +177,8 @@ define_Conf! {\n     (enum_variant_size_threshold, \"enum_variant_size_threshold\", 200 => u64),\n     /// Lint: VERBOSE_BIT_MASK. The maximum allowed size of a bit mask before suggesting to use 'trailing_zeros'\n     (verbose_bit_mask_threshold, \"verbose_bit_mask_threshold\", 1 => u64),\n+    /// Lint: BAD_LITERAL_REPRESENTATION. The lower bound for linting decimal literals\n+    (literal_representation_threshold, \"literal_representation_threshold\", 4096 => u64),\n }\n \n /// Search for the configuration file."}, {"sha": "ab12d605596cfdcbe4360448aba8fb13feedad50", "filename": "tests/ui/bad_literal_representation.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/23f90afa1b9e6b7e60a9e0d510ce3446bc954380/tests%2Fui%2Fbad_literal_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f90afa1b9e6b7e60a9e0d510ce3446bc954380/tests%2Fui%2Fbad_literal_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbad_literal_representation.rs?ref=23f90afa1b9e6b7e60a9e0d510ce3446bc954380", "patch": "@@ -4,14 +4,9 @@\n #[warn(bad_literal_representation)]\n #[allow(unused_variables)]\n fn main() {\n-    // Hex:      7F,  80, 100,  800,  FFA,   F0F3,     7F0F_F00D\n-    let good = (127, 128, 256, 2048, 4090, 61_683, 2_131_750_925);\n+    // Hex:      7F,  80, 100, 1FF,  800,  FFA,   F0F3,     7F0F_F00D\n+    let good = (127, 128, 256, 511, 2048, 4090, 61_683, 2_131_750_925);\n     let bad = (        // Hex:\n-        255,           // 0xFF\n-        511,           // 0x1FF\n-        1023,          // 0x3FF\n-        2047,          // 0x7FF\n-        4095,          // 0xFFF\n         4096,          // 0x1000\n         16_371,        // 0x3FF3\n         32_773,        // 0x8005"}, {"sha": "68e66ef1cee70e253af5e84567d296ec37a84186", "filename": "tests/ui/bad_literal_representation.stderr", "status": "modified", "additions": 14, "deletions": 54, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/23f90afa1b9e6b7e60a9e0d510ce3446bc954380/tests%2Fui%2Fbad_literal_representation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23f90afa1b9e6b7e60a9e0d510ce3446bc954380/tests%2Fui%2Fbad_literal_representation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbad_literal_representation.stderr?ref=23f90afa1b9e6b7e60a9e0d510ce3446bc954380", "patch": "@@ -1,96 +1,56 @@\n error: bad representation of integer literal\n   --> $DIR/bad_literal_representation.rs:10:9\n    |\n-10 |         255,           // 0xFF\n-   |         ^^^\n-   |\n-   = note: `-D bad-literal-representation` implied by `-D warnings`\n-   = help: consider: 0xFF\n-\n-error: bad representation of integer literal\n-  --> $DIR/bad_literal_representation.rs:11:9\n-   |\n-11 |         511,           // 0x1FF\n-   |         ^^^\n-   |\n-   = help: consider: 0x1FF\n-\n-error: bad representation of integer literal\n-  --> $DIR/bad_literal_representation.rs:12:9\n-   |\n-12 |         1023,          // 0x3FF\n-   |         ^^^^\n-   |\n-   = help: consider: 0x3FF\n-\n-error: bad representation of integer literal\n-  --> $DIR/bad_literal_representation.rs:13:9\n-   |\n-13 |         2047,          // 0x7FF\n-   |         ^^^^\n-   |\n-   = help: consider: 0x7FF\n-\n-error: bad representation of integer literal\n-  --> $DIR/bad_literal_representation.rs:14:9\n-   |\n-14 |         4095,          // 0xFFF\n-   |         ^^^^\n-   |\n-   = help: consider: 0xFFF\n-\n-error: bad representation of integer literal\n-  --> $DIR/bad_literal_representation.rs:15:9\n-   |\n-15 |         4096,          // 0x1000\n+10 |         4096,          // 0x1000\n    |         ^^^^\n    |\n+   = note: `-D bad-literal-representation` implied by `-D warnings`\n    = help: consider: 0x1000\n \n error: bad representation of integer literal\n-  --> $DIR/bad_literal_representation.rs:16:9\n+  --> $DIR/bad_literal_representation.rs:11:9\n    |\n-16 |         16_371,        // 0x3FF3\n+11 |         16_371,        // 0x3FF3\n    |         ^^^^^^\n    |\n    = help: consider: 0x3FF3\n \n error: bad representation of integer literal\n-  --> $DIR/bad_literal_representation.rs:17:9\n+  --> $DIR/bad_literal_representation.rs:12:9\n    |\n-17 |         32_773,        // 0x8005\n+12 |         32_773,        // 0x8005\n    |         ^^^^^^\n    |\n    = help: consider: 0x8005\n \n error: bad representation of integer literal\n-  --> $DIR/bad_literal_representation.rs:18:9\n+  --> $DIR/bad_literal_representation.rs:13:9\n    |\n-18 |         65_280,        // 0xFF00\n+13 |         65_280,        // 0xFF00\n    |         ^^^^^^\n    |\n    = help: consider: 0xFF00\n \n error: bad representation of integer literal\n-  --> $DIR/bad_literal_representation.rs:19:9\n+  --> $DIR/bad_literal_representation.rs:14:9\n    |\n-19 |         2_131_750_927, // 0x7F0F_F00F\n+14 |         2_131_750_927, // 0x7F0F_F00F\n    |         ^^^^^^^^^^^^^\n    |\n    = help: consider: 0x7F0F_F00F\n \n error: bad representation of integer literal\n-  --> $DIR/bad_literal_representation.rs:20:9\n+  --> $DIR/bad_literal_representation.rs:15:9\n    |\n-20 |         2_147_483_647, // 0x7FFF_FFFF\n+15 |         2_147_483_647, // 0x7FFF_FFFF\n    |         ^^^^^^^^^^^^^\n    |\n    = help: consider: 0x7FFF_FFFF\n \n error: bad representation of integer literal\n-  --> $DIR/bad_literal_representation.rs:21:9\n+  --> $DIR/bad_literal_representation.rs:16:9\n    |\n-21 |         4_042_322_160, // 0xF0F0_F0F0\n+16 |         4_042_322_160, // 0xF0F0_F0F0\n    |         ^^^^^^^^^^^^^\n    |\n    = help: consider: 0xF0F0_F0F0"}]}