{"sha": "fa7ba66e6a1799982b200d563006d3c6d390aefe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhN2JhNjZlNmExNzk5OTgyYjIwMGQ1NjMwMDZkM2M2ZDM5MGFlZmU=", "commit": {"author": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2019-04-26T15:58:57Z"}, "committer": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2019-04-26T15:59:12Z"}, "message": "Add flatten option for `Option<Option<T>>`\n\nsquashed commit", "tree": {"sha": "b749a8bf5af755cd060bef5f252b4a00f6138fa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b749a8bf5af755cd060bef5f252b4a00f6138fa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa7ba66e6a1799982b200d563006d3c6d390aefe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa7ba66e6a1799982b200d563006d3c6d390aefe", "html_url": "https://github.com/rust-lang/rust/commit/fa7ba66e6a1799982b200d563006d3c6d390aefe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa7ba66e6a1799982b200d563006d3c6d390aefe/comments", "author": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d720d7e617442aaf65df0910e8c9f0fdb0cf31c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d720d7e617442aaf65df0910e8c9f0fdb0cf31c", "html_url": "https://github.com/rust-lang/rust/commit/3d720d7e617442aaf65df0910e8c9f0fdb0cf31c"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "6b7f491effb30cf616e7a758ecddb1ba1c692f87", "filename": "src/libcore/option.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fa7ba66e6a1799982b200d563006d3c6d390aefe/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7ba66e6a1799982b200d563006d3c6d390aefe/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=fa7ba66e6a1799982b200d563006d3c6d390aefe", "patch": "@@ -136,7 +136,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::iter::{FromIterator, FusedIterator, TrustedLen};\n-use crate::{hint, mem, ops::{self, Deref}};\n+use crate::{convert, hint, mem, ops::{self, Deref}};\n use crate::pin::Pin;\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n@@ -1413,3 +1413,33 @@ impl<T> ops::Try for Option<T> {\n         None\n     }\n }\n+\n+impl<T> Option<Option<T>> {\n+    /// Converts from `Option<Option<T>>` to `Option<T>`\n+    ///\n+    /// # Examples\n+    /// Basic usage:\n+    /// ```\n+    /// #![feature(option_flattening)]\n+    /// let x: Option<Option<u32>> = Some(Some(6));\n+    /// assert_eq!(Some(6), x.flatten());\n+    ///\n+    /// let x: Option<Option<u32>> = Some(None);\n+    /// assert_eq!(None, x.flatten());\n+    ///\n+    /// let x: Option<Option<u32>> = None;\n+    /// assert_eq!(None, x.flatten());\n+    /// ```\n+    /// Flattening once only removes one level of nesting:\n+    /// ```\n+    /// #![feature(option_flattening)]\n+    /// let x: Option<Option<Option<u32>>> = Some(Some(Some(6)));\n+    /// assert_eq!(Some(Some(6)), x.flatten());\n+    /// assert_eq!(Some(6), x.flatten().flatten());\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_flattening\", issue = \"60258\")]\n+    pub fn flatten(self) -> Option<T> {\n+        self.and_then(convert::identity)\n+    }\n+}"}]}