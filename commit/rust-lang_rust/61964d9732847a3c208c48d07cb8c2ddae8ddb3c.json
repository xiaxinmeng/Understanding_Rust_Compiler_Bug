{"sha": "61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxOTY0ZDk3MzI4NDdhM2MyMDhjNDhkMDdjYjhjMmRkYWU4ZGRiM2M=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-14T10:28:47Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-17T16:57:20Z"}, "message": "replace some uses of NodeId with HirId", "tree": {"sha": "ba3ca8416f2b64335dae261fc4e5a1b259ef4882", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba3ca8416f2b64335dae261fc4e5a1b259ef4882"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "html_url": "https://github.com/rust-lang/rust/commit/61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b01a257da1fbb3f5661029dd390fdccc49dff287", "url": "https://api.github.com/repos/rust-lang/rust/commits/b01a257da1fbb3f5661029dd390fdccc49dff287", "html_url": "https://github.com/rust-lang/rust/commit/b01a257da1fbb3f5661029dd390fdccc49dff287"}], "stats": {"total": 285, "additions": 95, "deletions": 190}, "files": [{"sha": "8eea01cc4acca30622382094797e45fc82233e30", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -42,7 +42,8 @@ pub fn construct<'tcx>(tcx: TyCtxt<'tcx>, body: &hir::Body) -> CFG {\n     let body_exit;\n \n     // Find the tables for this body.\n-    let owner_def_id = tcx.hir().local_def_id(tcx.hir().body_owner(body.id()));\n+    let owner_hir_id = tcx.hir().body_owner(body.id());\n+    let owner_def_id = tcx.hir().local_def_id_from_hir_id(owner_hir_id);\n     let tables = tcx.typeck_tables_of(owner_def_id);\n \n     let mut cfg_builder = CFGBuilder {"}, {"sha": "0bfb6b98e630b29938ac758b3e91ad5b14712f96", "filename": "src/librustc/cfg/graphviz.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fgraphviz.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -22,11 +22,11 @@ pub struct LabelledCFG<'a, 'tcx: 'a> {\n impl<'a, 'tcx> LabelledCFG<'a, 'tcx> {\n     fn local_id_to_string(&self, local_id: hir::ItemLocalId) -> String {\n         assert!(self.cfg.owner_def_id.is_local());\n-        let node_id = self.tcx.hir().hir_to_node_id(hir::HirId {\n+        let hir_id = hir::HirId {\n             owner: self.tcx.hir().def_index_to_hir_id(self.cfg.owner_def_id.index).owner,\n             local_id\n-        });\n-        let s = self.tcx.hir().node_to_string(node_id);\n+        };\n+        let s = self.tcx.hir().hir_to_string(hir_id);\n \n         // Replacing newlines with \\\\l causes each line to be left-aligned,\n         // improving presentation of (long) pretty-printed expressions."}, {"sha": "08ec2aeed2905b161cc597dd0ecede2cd706ba8f", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -122,9 +122,10 @@ impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n                                        .find(|&(_, &entry)| hir_id == entry)\n                                        .expect(\"no node_to_hir_id entry\");\n                 let node_id = NodeId::from_usize(node_id);\n+                let hir_id = self.hir_map.node_to_hir_id(node_id);\n                 missing_items.push(format!(\"[local_id: {}, node:{}]\",\n                                            local_id,\n-                                           self.hir_map.node_to_string(node_id)));\n+                                           self.hir_map.hir_to_string(hir_id)));\n             }\n             self.error(|| format!(\n                 \"ItemLocalIds not assigned densely in {}. \\"}, {"sha": "680fe2866bcea69463900ce98636aa0175cffee5", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 6, "deletions": 92, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -286,21 +286,11 @@ impl<'hir> Map<'hir> {\n         self.definitions.def_index_to_hir_id(def_index)\n     }\n \n-    #[inline]\n-    pub fn def_index_to_node_id(&self, def_index: DefIndex) -> NodeId {\n-        self.definitions.def_index_to_node_id(def_index)\n-    }\n-\n     #[inline]\n     pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {\n         self.definitions.def_index_to_hir_id(def_id.to_def_id().index)\n     }\n \n-    #[inline]\n-    pub fn local_def_id_to_node_id(&self, def_id: LocalDefId) -> NodeId {\n-        self.definitions.as_local_node_id(def_id.to_def_id()).unwrap()\n-    }\n-\n     fn def_kind(&self, node_id: NodeId) -> Option<DefKind> {\n         let node = if let Some(node) = self.find(node_id) {\n             node\n@@ -422,12 +412,6 @@ impl<'hir> Map<'hir> {\n         self.forest.krate.body(id)\n     }\n \n-    pub fn fn_decl(&self, node_id: ast::NodeId) -> Option<FnDecl> {\n-        let hir_id = self.node_to_hir_id(node_id);\n-        self.fn_decl_by_hir_id(hir_id)\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n     pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<FnDecl> {\n         if let Some(entry) = self.find_entry(hir_id) {\n             entry.fn_decl().cloned()\n@@ -439,24 +423,18 @@ impl<'hir> Map<'hir> {\n     /// Returns the `NodeId` that corresponds to the definition of\n     /// which this is the body of, i.e., a `fn`, `const` or `static`\n     /// item (possibly associated), a closure, or a `hir::AnonConst`.\n-    pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> NodeId {\n+    pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {\n         let parent = self.get_parent_node_by_hir_id(hir_id);\n         assert!(self.lookup(parent).map_or(false, |e| e.is_body_owner(hir_id)));\n-        self.hir_to_node_id(parent)\n+        parent\n     }\n \n     pub fn body_owner_def_id(&self, id: BodyId) -> DefId {\n-        self.local_def_id(self.body_owner(id))\n+        self.local_def_id_from_hir_id(self.body_owner(id))\n     }\n \n-    /// Given a `NodeId`, returns the `BodyId` associated with it,\n+    /// Given a `HirId`, returns the `BodyId` associated with it,\n     /// if the node is a body owner, otherwise returns `None`.\n-    pub fn maybe_body_owned_by(&self, id: NodeId) -> Option<BodyId> {\n-        let hir_id = self.node_to_hir_id(id);\n-        self.maybe_body_owned_by_by_hir_id(hir_id)\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n     pub fn maybe_body_owned_by_by_hir_id(&self, hir_id: HirId) -> Option<BodyId> {\n         if let Some(entry) = self.find_entry(hir_id) {\n             if self.dep_graph.is_fully_enabled() {\n@@ -479,12 +457,6 @@ impl<'hir> Map<'hir> {\n         })\n     }\n \n-    pub fn body_owner_kind(&self, id: NodeId) -> BodyOwnerKind {\n-        let hir_id = self.node_to_hir_id(id);\n-        self.body_owner_kind_by_hir_id(hir_id)\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n     pub fn body_owner_kind_by_hir_id(&self, id: HirId) -> BodyOwnerKind {\n         match self.get_by_hir_id(id) {\n             Node::Item(&Item { node: ItemKind::Const(..), .. }) |\n@@ -793,17 +765,10 @@ impl<'hir> Map<'hir> {\n         self.walk_parent_nodes(id, match_fn, match_non_returning_block).ok()\n     }\n \n-    /// Retrieves the `NodeId` for `id`'s parent item, or `id` itself if no\n+    /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no\n     /// parent item is in this map. The \"parent item\" is the closest parent node\n     /// in the HIR which is recorded by the map and is an item, either an item\n     /// in a module, trait, or impl.\n-    pub fn get_parent(&self, id: NodeId) -> NodeId {\n-        let hir_id = self.node_to_hir_id(id);\n-        let parent_hir_id = self.get_parent_item(hir_id);\n-        self.hir_to_node_id(parent_hir_id)\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n     pub fn get_parent_item(&self, hir_id: HirId) -> HirId {\n         match self.walk_parent_nodes(hir_id, |node| match *node {\n             Node::Item(_) |\n@@ -819,12 +784,6 @@ impl<'hir> Map<'hir> {\n \n     /// Returns the `DefId` of `id`'s nearest module parent, or `id` itself if no\n     /// module parent is in this map.\n-    pub fn get_module_parent(&self, id: NodeId) -> DefId {\n-        let hir_id = self.node_to_hir_id(id);\n-        self.get_module_parent_by_hir_id(hir_id)\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n     pub fn get_module_parent_by_hir_id(&self, id: HirId) -> DefId {\n         self.local_def_id_from_hir_id(self.get_module_parent_node(id))\n     }\n@@ -901,22 +860,10 @@ impl<'hir> Map<'hir> {\n         Some(scope)\n     }\n \n-    pub fn get_parent_did(&self, id: NodeId) -> DefId {\n-        let hir_id = self.node_to_hir_id(id);\n-        self.get_parent_did_by_hir_id(hir_id)\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n     pub fn get_parent_did_by_hir_id(&self, id: HirId) -> DefId {\n         self.local_def_id_from_hir_id(self.get_parent_item(id))\n     }\n \n-    pub fn get_foreign_abi(&self, id: NodeId) -> Abi {\n-        let hir_id = self.node_to_hir_id(id);\n-        self.get_foreign_abi_by_hir_id(hir_id)\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n     pub fn get_foreign_abi_by_hir_id(&self, hir_id: HirId) -> Abi {\n         let parent = self.get_parent_item(hir_id);\n         if let Some(entry) = self.find_entry(parent) {\n@@ -930,12 +877,6 @@ impl<'hir> Map<'hir> {\n         bug!(\"expected foreign mod or inlined parent, found {}\", self.hir_to_string(parent))\n     }\n \n-    pub fn expect_item(&self, id: NodeId) -> &'hir Item {\n-        let hir_id = self.node_to_hir_id(id);\n-        self.expect_item_by_hir_id(hir_id)\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n     pub fn expect_item_by_hir_id(&self, id: HirId) -> &'hir Item {\n         match self.find_by_hir_id(id) { // read recorded by `find`\n             Some(Node::Item(item)) => item,\n@@ -1024,12 +965,6 @@ impl<'hir> Map<'hir> {\n \n     /// Given a node ID, gets a list of attributes associated with the AST\n     /// corresponding to the node-ID.\n-    pub fn attrs(&self, id: NodeId) -> &'hir [ast::Attribute] {\n-        let hir_id = self.node_to_hir_id(id);\n-        self.attrs_by_hir_id(hir_id)\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n     pub fn attrs_by_hir_id(&self, id: HirId) -> &'hir [ast::Attribute] {\n         self.read(id); // reveals attributes on the node\n         let attrs = match self.find_entry(id).map(|entry| entry.node) {\n@@ -1093,12 +1028,6 @@ impl<'hir> Map<'hir> {\n         })\n     }\n \n-    pub fn span(&self, id: NodeId) -> Span {\n-        let hir_id = self.node_to_hir_id(id);\n-        self.span_by_hir_id(hir_id)\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n     pub fn span_by_hir_id(&self, hir_id: HirId) -> Span {\n         self.read(hir_id); // reveals span from node\n         match self.find_entry(hir_id).map(|entry| entry.node) {\n@@ -1139,32 +1068,17 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn span_if_local(&self, id: DefId) -> Option<Span> {\n-        self.as_local_node_id(id).map(|id| self.span(id))\n+        self.as_local_hir_id(id).map(|id| self.span_by_hir_id(id))\n     }\n \n-    pub fn node_to_string(&self, id: NodeId) -> String {\n-        hir_id_to_string(self, self.node_to_hir_id(id), true)\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n     pub fn hir_to_string(&self, id: HirId) -> String {\n         hir_id_to_string(self, id, true)\n     }\n \n-    pub fn node_to_user_string(&self, id: NodeId) -> String {\n-        hir_id_to_string(self, self.node_to_hir_id(id), false)\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n     pub fn hir_to_user_string(&self, id: HirId) -> String {\n         hir_id_to_string(self, id, false)\n     }\n \n-    pub fn node_to_pretty_string(&self, id: NodeId) -> String {\n-        print::to_string(self, |s| s.print_node(self.get(id)))\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n     pub fn hir_to_pretty_string(&self, id: HirId) -> String {\n         print::to_string(self, |s| s.print_node(self.get_by_hir_id(id)))\n     }"}, {"sha": "662bde43c569c6fb65c5f76b2b83e7463bc06775", "filename": "src/librustc/hir/upvars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fhir%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fhir%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fupvars.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -14,8 +14,8 @@ pub fn provide(providers: &mut Providers<'_>) {\n             return None;\n         }\n \n-        let node_id = tcx.hir().as_local_node_id(def_id).unwrap();\n-        let body = tcx.hir().body(tcx.hir().maybe_body_owned_by(node_id)?);\n+        let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+        let body = tcx.hir().body(tcx.hir().maybe_body_owned_by_by_hir_id(hir_id)?);\n \n         let mut local_collector = LocalCollector::default();\n         local_collector.visit_body(body);"}, {"sha": "73bd37d53fe28c895a3f02506b35553ae21f447c", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     )\n                 };\n                 let span = scope.span(self, region_scope_tree);\n-                let tag = match self.hir().find(scope.node_id(self, region_scope_tree)) {\n+                let tag = match self.hir().find_by_hir_id(scope.hir_id(region_scope_tree)) {\n                     Some(Node::Block(_)) => \"block\",\n                     Some(Node::Expr(expr)) => match expr.node {\n                         hir::ExprKind::Call(..) => \"call\",\n@@ -1330,15 +1330,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     if !param.is_self() {\n                         let type_param = generics.type_param(param, self.tcx);\n                         let hir = &self.tcx.hir();\n-                        hir.as_local_node_id(type_param.def_id).map(|id| {\n+                        hir.as_local_hir_id(type_param.def_id).map(|id| {\n                             // Get the `hir::Param` to verify whether it already has any bounds.\n                             // We do this to avoid suggesting code that ends up as `T: 'a'b`,\n                             // instead we suggest `T: 'a + 'b` in that case.\n                             let mut has_bounds = false;\n-                            if let Node::GenericParam(ref param) = hir.get(id) {\n+                            if let Node::GenericParam(ref param) = hir.get_by_hir_id(id) {\n                                 has_bounds = !param.bounds.is_empty();\n                             }\n-                            let sp = hir.span(id);\n+                            let sp = hir.span_by_hir_id(id);\n                             // `sp` only covers `T`, change it so that it covers\n                             // `T:` when appropriate\n                             let is_impl_trait = bound_kind.to_string().starts_with(\"impl \");"}, {"sha": "78d1d56993e062bea3ae8eec5a281bcd98e19a2d", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -28,8 +28,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     ) -> Option<(&hir::Ty, &hir::FnDecl)> {\n         if let Some(anon_reg) = self.tcx().is_suitable_region(region) {\n             let def_id = anon_reg.def_id;\n-            if let Some(node_id) = self.tcx().hir().as_local_node_id(def_id) {\n-                let fndecl = match self.tcx().hir().get(node_id) {\n+            if let Some(hir_id) = self.tcx().hir().as_local_hir_id(def_id) {\n+                let fndecl = match self.tcx().hir().get_by_hir_id(hir_id) {\n                     Node::Item(&hir::Item {\n                         node: hir::ItemKind::Fn(ref fndecl, ..),\n                         .."}, {"sha": "6ed2b67556ddcec5521f7167cdbe85ef6ab16e0b", "filename": "src/librustc/infer/error_reporting/nice_region_error/outlives_closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -48,11 +48,11 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             if let (&SubregionOrigin::BindingTypeIsNotValidAtDecl(ref external_span),\n                     &RegionKind::ReFree(ref free_region)) = (&sub_origin, sup_region) {\n                 let hir = &self.tcx().hir();\n-                if let Some(node_id) = hir.as_local_node_id(free_region.scope) {\n+                if let Some(hir_id) = hir.as_local_hir_id(free_region.scope) {\n                     if let Node::Expr(Expr {\n                         node: Closure(_, _, _, closure_span, None),\n                         ..\n-                    }) = hir.get(node_id) {\n+                    }) = hir.get_by_hir_id(hir_id) {\n                         let sup_sp = sup_origin.span();\n                         let origin_sp = origin.span();\n                         let mut err = self.tcx().sess.struct_span_err("}, {"sha": "061d74416c57f30d1aa62fecaefee581aaa449ab", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -51,19 +51,19 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         };\n \n         let hir = &self.tcx().hir();\n-        if let Some(node_id) = hir.as_local_node_id(id) {\n-            if let Some(body_id) = hir.maybe_body_owned_by(node_id) {\n+        if let Some(hir_id) = hir.as_local_hir_id(id) {\n+            if let Some(body_id) = hir.maybe_body_owned_by_by_hir_id(hir_id) {\n                 let body = hir.body(body_id);\n                 let owner_id = hir.body_owner(body_id);\n-                let fn_decl = hir.fn_decl(owner_id).unwrap();\n+                let fn_decl = hir.fn_decl_by_hir_id(owner_id).unwrap();\n                 if let Some(tables) = self.tables {\n                     body.arguments\n                         .iter()\n                         .enumerate()\n                         .filter_map(|(index, arg)| {\n                             // May return None; sometimes the tables are not yet populated.\n                             let ty_hir_id = fn_decl.inputs[index].hir_id;\n-                            let arg_ty_span = hir.span(hir.hir_to_node_id(ty_hir_id));\n+                            let arg_ty_span = hir.span_by_hir_id(ty_hir_id);\n                             let ty = tables.node_type_opt(arg.hir_id)?;\n                             let mut found_anon_region = false;\n                             let new_arg_ty = self.tcx().fold_regions(&ty, &mut false, |r, _| {"}, {"sha": "cf304ebf3cbf4ba4d0de6b311d5f91a8b35bdd91", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -342,9 +342,9 @@ impl MutabilityCategory {\n     fn from_local(\n         tcx: TyCtxt<'_>,\n         tables: &ty::TypeckTables<'_>,\n-        id: ast::NodeId,\n+        id: hir::HirId,\n     ) -> MutabilityCategory {\n-        let ret = match tcx.hir().get(id) {\n+        let ret = match tcx.hir().get_by_hir_id(id) {\n             Node::Binding(p) => match p.node {\n                 PatKind::Binding(..) => {\n                     let bm = *tables.pat_binding_modes()\n@@ -358,7 +358,7 @@ impl MutabilityCategory {\n                 }\n                 _ => span_bug!(p.span, \"expected identifier pattern\")\n             },\n-            _ => span_bug!(tcx.hir().span(id), \"expected identifier pattern\")\n+            _ => span_bug!(tcx.hir().span_by_hir_id(id), \"expected identifier pattern\")\n         };\n         debug!(\"MutabilityCategory::{}(tcx, id={:?}) => {:?}\",\n                \"from_local\", id, ret);\n@@ -500,9 +500,8 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             // FIXME\n             None if self.is_tainted_by_errors() => Err(()),\n             None => {\n-                let id = self.tcx.hir().hir_to_node_id(id);\n                 bug!(\"no type for node {}: {} in mem_categorization\",\n-                     id, self.tcx.hir().node_to_string(id));\n+                     id, self.tcx.hir().hir_to_string(id));\n             }\n         }\n     }\n@@ -753,15 +752,14 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             }\n \n             Res::Local(var_id) => {\n-                let var_nid = self.tcx.hir().hir_to_node_id(var_id);\n                 if self.upvars.map_or(false, |upvars| upvars.contains_key(&var_id)) {\n-                    self.cat_upvar(hir_id, span, var_nid)\n+                    self.cat_upvar(hir_id, span, var_id)\n                 } else {\n                     Ok(cmt_ {\n                         hir_id,\n                         span,\n                         cat: Categorization::Local(var_id),\n-                        mutbl: MutabilityCategory::from_local(self.tcx, self.tables, var_nid),\n+                        mutbl: MutabilityCategory::from_local(self.tcx, self.tables, var_id),\n                         ty: expr_ty,\n                         note: NoteNone\n                     })\n@@ -778,7 +776,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         &self,\n         hir_id: hir::HirId,\n         span: Span,\n-        var_id: ast::NodeId,\n+        var_id: hir::HirId,\n     ) -> McResult<cmt_<'tcx>> {\n         // An upvar can have up to 3 components. We translate first to a\n         // `Categorization::Upvar`, which is itself a fiction -- it represents the reference to the\n@@ -828,13 +826,12 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             _ => span_bug!(span, \"unexpected type for fn in mem_categorization: {:?}\", ty),\n         };\n \n-        let var_hir_id = self.tcx.hir().node_to_hir_id(var_id);\n         let upvar_id = ty::UpvarId {\n-            var_path: ty::UpvarPath { hir_id: var_hir_id },\n+            var_path: ty::UpvarPath { hir_id: var_id },\n             closure_expr_id: closure_expr_def_id.to_local(),\n         };\n \n-        let var_ty = self.node_ty(var_hir_id)?;\n+        let var_ty = self.node_ty(var_id)?;\n \n         // Mutability of original variable itself\n         let var_mutbl = MutabilityCategory::from_local(self.tcx, self.tables, var_id);"}, {"sha": "708bd6f735d892f13153db28159fe792aab6ac89", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -14,7 +14,6 @@ use std::mem;\n use std::fmt;\n use rustc_macros::HashStable;\n use syntax::source_map;\n-use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n use crate::ty::{DefIdTree, TyCtxt};\n use crate::ty::query::Providers;\n@@ -169,29 +168,29 @@ impl Scope {\n         self.id\n     }\n \n-    pub fn node_id(&self, tcx: TyCtxt<'_>, scope_tree: &ScopeTree) -> ast::NodeId {\n+    pub fn hir_id(&self, scope_tree: &ScopeTree) -> hir::HirId {\n         match scope_tree.root_body {\n             Some(hir_id) => {\n-                tcx.hir().hir_to_node_id(hir::HirId {\n+                hir::HirId {\n                     owner: hir_id.owner,\n                     local_id: self.item_local_id()\n-                })\n+                }\n             }\n-            None => ast::DUMMY_NODE_ID\n+            None => hir::DUMMY_HIR_ID\n         }\n     }\n \n     /// Returns the span of this `Scope`. Note that in general the\n     /// returned span may not correspond to the span of any `NodeId` in\n     /// the AST.\n     pub fn span(&self, tcx: TyCtxt<'_>, scope_tree: &ScopeTree) -> Span {\n-        let node_id = self.node_id(tcx, scope_tree);\n-        if node_id == ast::DUMMY_NODE_ID {\n+        let hir_id = self.hir_id(scope_tree);\n+        if hir_id == hir::DUMMY_HIR_ID {\n             return DUMMY_SP;\n         }\n-        let span = tcx.hir().span(node_id);\n+        let span = tcx.hir().span_by_hir_id(hir_id);\n         if let ScopeData::Remainder(first_statement_index) = self.data {\n-            if let Node::Block(ref blk) = tcx.hir().get(node_id) {\n+            if let Node::Block(ref blk) = tcx.hir().get_by_hir_id(hir_id) {\n                 // Want span for scope starting after the\n                 // indexed statement and ending at end of\n                 // `blk`; reuse span of `blk` and shift `lo`\n@@ -1278,7 +1277,7 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n \n         // The body of the every fn is a root scope.\n         self.cx.parent = self.cx.var_parent;\n-        if self.tcx.hir().body_owner_kind(owner_id).is_fn_or_closure() {\n+        if self.tcx.hir().body_owner_kind_by_hir_id(owner_id).is_fn_or_closure() {\n             self.visit_expr(&body.value)\n         } else {\n             // Only functions have an outer terminating (drop) scope, while"}, {"sha": "b350f15664d442843ebbdbffb88c4ee58eaa6320", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -1823,7 +1823,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 // Do not free early-bound regions, only late-bound ones.\n             } else if let Some(body_id) = outermost_body {\n                 let fn_id = self.tcx.hir().body_owner(body_id);\n-                match self.tcx.hir().get(fn_id) {\n+                match self.tcx.hir().get_by_hir_id(fn_id) {\n                     Node::Item(&hir::Item {\n                         node: hir::ItemKind::Fn(..),\n                         ..\n@@ -1836,7 +1836,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         node: hir::ImplItemKind::Method(..),\n                         ..\n                     }) => {\n-                        let scope = self.tcx.hir().local_def_id(fn_id);\n+                        let scope = self.tcx.hir().local_def_id_from_hir_id(fn_id);\n                         def = Region::Free(scope, def.id().unwrap());\n                     }\n                     _ => {}"}, {"sha": "f886794be62826710f259ff235c8da5b72a54e4f", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -1013,10 +1013,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n     ) {\n         let hir = self.tcx.hir();\n-        let parent_node = hir.get_parent_node(\n-            hir.hir_to_node_id(obligation.cause.body_id),\n-        );\n-        let node = hir.find(parent_node);\n+        let parent_node = hir.get_parent_node_by_hir_id(obligation.cause.body_id);\n+        let node = hir.find_by_hir_id(parent_node);\n         if let Some(hir::Node::Item(hir::Item {\n             node: hir::ItemKind::Fn(decl, _, _, body_id),\n             .."}, {"sha": "c32f62e88c423eeaa2b9e677c0abbe702b3a874e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -250,11 +250,9 @@ fn validate_hir_id_for_typeck_tables(local_id_root: Option<DefId>,\n         if let Some(local_id_root) = local_id_root {\n             if hir_id.owner != local_id_root.index {\n                 ty::tls::with(|tcx| {\n-                    let node_id = tcx.hir().hir_to_node_id(hir_id);\n-\n                     bug!(\"node {} with HirId::owner {:?} cannot be placed in \\\n                           TypeckTables with local_id_root {:?}\",\n-                         tcx.hir().node_to_string(node_id),\n+                         tcx.hir().hir_to_string(hir_id),\n                          DefId::local(hir_id.owner),\n                          local_id_root)\n                 });"}, {"sha": "9429fde2790865c4e899a083e5518fced8218516", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -198,7 +198,7 @@ pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n     cfg: &cfg::CFG,\n ) -> (BorrowckCtxt<'a, 'tcx>, AnalysisData<'tcx>) {\n     let owner_id = tcx.hir().body_owner(body_id);\n-    let owner_def_id = tcx.hir().local_def_id(owner_id);\n+    let owner_def_id = tcx.hir().local_def_id_from_hir_id(owner_id);\n     let tables = tcx.typeck_tables_of(owner_def_id);\n     let region_scope_tree = tcx.region_scope_tree(owner_def_id);\n     let body = tcx.hir().body(body_id);\n@@ -389,8 +389,8 @@ pub enum LoanPathElem<'tcx> {\n }\n \n fn closure_to_block(closure_id: LocalDefId, tcx: TyCtxt<'_>) -> HirId {\n-    let closure_id = tcx.hir().local_def_id_to_node_id(closure_id);\n-    match tcx.hir().get(closure_id) {\n+    let closure_id = tcx.hir().local_def_id_to_hir_id(closure_id);\n+    match tcx.hir().get_by_hir_id(closure_id) {\n         Node::Expr(expr) => match expr.node {\n             hir::ExprKind::Closure(.., body_id, _, _) => {\n                 body_id.hir_id\n@@ -896,8 +896,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n                 // to implement two traits for \"one operator\" is not very intuitive for\n                 // many programmers.\n                 if err.cmt.note == mc::NoteIndex {\n-                    let node_id = self.tcx.hir().hir_to_node_id(err.cmt.hir_id);\n-                    let node =  self.tcx.hir().get(node_id);\n+                    let node =  self.tcx.hir().get_by_hir_id(err.cmt.hir_id);\n \n                     // This pattern probably always matches.\n                     if let Node::Expr(\n@@ -1022,8 +1021,8 @@ impl BorrowckCtxt<'_, 'tcx> {\n                 }\n \n                 if let ty::ReScope(scope) = *super_scope {\n-                    let node_id = scope.node_id(self.tcx, &self.region_scope_tree);\n-                    match self.tcx.hir().find(node_id) {\n+                    let hir_id = scope.hir_id(&self.region_scope_tree);\n+                    match self.tcx.hir().find_by_hir_id(hir_id) {\n                         Some(Node::Stmt(_)) => {\n                             if *sub_scope != ty::ReStatic {\n                                 db.note(\"consider using a `let` binding to increase its lifetime\");\n@@ -1514,8 +1513,7 @@ impl<'tcx> fmt::Debug for LoanPath<'tcx> {\n \n             LpUpvar(ty::UpvarId{ var_path: ty::UpvarPath {hir_id: var_id}, closure_expr_id }) => {\n                 let s = ty::tls::with(|tcx| {\n-                    let var_node_id = tcx.hir().hir_to_node_id(var_id);\n-                    tcx.hir().node_to_string(var_node_id)\n+                    tcx.hir().hir_to_string(var_id)\n                 });\n                 write!(f, \"$({} captured by id={:?})\", s, closure_expr_id)\n             }\n@@ -1549,8 +1547,7 @@ impl<'tcx> fmt::Display for LoanPath<'tcx> {\n \n             LpUpvar(ty::UpvarId{ var_path: ty::UpvarPath { hir_id }, closure_expr_id: _ }) => {\n                 let s = ty::tls::with(|tcx| {\n-                    let var_node_id = tcx.hir().hir_to_node_id(hir_id);\n-                    tcx.hir().node_to_string(var_node_id)\n+                    tcx.hir().hir_to_string(hir_id)\n                 });\n                 write!(f, \"$({} captured by closure)\", s)\n             }"}, {"sha": "ef416dbe62b8e793931f75514bb2abdd370ed120", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -922,7 +922,8 @@ fn print_with_analysis<'tcx>(\n                                             got {:?}\",\n                                             node);\n \n-                    tcx.sess.span_fatal(tcx.hir().span(nodeid), &message)\n+                    let hir_id = tcx.hir().node_to_hir_id(nodeid);\n+                    tcx.sess.span_fatal(tcx.hir().span_by_hir_id(hir_id), &message)\n                 }\n             }\n         }"}, {"sha": "fc11cd82f8a9aabd7f1e17d41f9d7b6d7cdddb48", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -304,8 +304,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n \n                 let upvar_hir_id = self.upvars[upvar_index.index()].var_hir_id;\n-                let upvar_node_id = self.infcx.tcx.hir().hir_to_node_id(upvar_hir_id);\n-                if let Some(Node::Binding(pat)) = self.infcx.tcx.hir().find(upvar_node_id) {\n+                if let Some(Node::Binding(pat)) = self.infcx.tcx.hir().find_by_hir_id(upvar_hir_id)\n+                {\n                     if let hir::PatKind::Binding(\n                         hir::BindingAnnotation::Unannotated,\n                         _,"}, {"sha": "61a13df47ffe698ef0d47b7a60293644140c5e80", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -230,14 +230,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 },\n \n                 ty::BoundRegion::BrEnv => {\n-                    let mir_node_id = tcx.hir()\n-                                         .as_local_node_id(mir_def_id)\n-                                         .expect(\"non-local mir\");\n+                    let mir_hir_id = tcx.hir()\n+                                        .as_local_hir_id(mir_def_id)\n+                                        .expect(\"non-local mir\");\n                     let def_ty = self.universal_regions.defining_ty;\n \n                     if let DefiningTy::Closure(def_id, substs) = def_ty {\n                         let args_span = if let hir::ExprKind::Closure(_, _, _, span, _) =\n-                            tcx.hir().expect_expr(mir_node_id).node\n+                            tcx.hir().expect_expr_by_hir_id(mir_hir_id).node\n                         {\n                             span\n                         } else {\n@@ -367,8 +367,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         argument_index: usize,\n         counter: &mut usize,\n     ) -> Option<RegionName> {\n-        let mir_node_id = infcx.tcx.hir().as_local_node_id(mir_def_id)?;\n-        let fn_decl = infcx.tcx.hir().fn_decl(mir_node_id)?;\n+        let mir_hir_id = infcx.tcx.hir().as_local_hir_id(mir_def_id)?;\n+        let fn_decl = infcx.tcx.hir().fn_decl_by_hir_id(mir_hir_id)?;\n         let argument_hir_ty: &hir::Ty = &fn_decl.inputs[argument_index];\n         match argument_hir_ty.node {\n             // This indicates a variable with no type annotation, like\n@@ -696,9 +696,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         highlight.highlighting_region_vid(fr, *counter);\n         let type_name = infcx.extract_type_name(&return_ty, Some(highlight));\n \n-        let mir_node_id = tcx.hir().as_local_node_id(mir_def_id).expect(\"non-local mir\");\n+        let mir_hir_id = tcx.hir().as_local_hir_id(mir_def_id).expect(\"non-local mir\");\n \n-        let (return_span, mir_description) = match tcx.hir().get(mir_node_id) {\n+        let (return_span, mir_description) = match tcx.hir().get_by_hir_id(mir_hir_id) {\n             hir::Node::Expr(hir::Expr {\n                 node: hir::ExprKind::Closure(_, return_ty, _, span, gen_move),\n                 ..\n@@ -759,9 +759,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         highlight.highlighting_region_vid(fr, *counter);\n         let type_name = infcx.extract_type_name(&yield_ty, Some(highlight));\n \n-        let mir_node_id = tcx.hir().as_local_node_id(mir_def_id).expect(\"non-local mir\");\n+        let mir_hir_id = tcx.hir().as_local_hir_id(mir_def_id).expect(\"non-local mir\");\n \n-        let yield_span = match tcx.hir().get(mir_node_id) {\n+        let yield_span = match tcx.hir().get_by_hir_id(mir_hir_id) {\n             hir::Node::Expr(hir::Expr {\n                 node: hir::ExprKind::Closure(_, _, _, span, _),\n                 .."}, {"sha": "280592e2b0164be500d0834bb65a2eac5ea56d9a", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -101,7 +101,7 @@ pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Body<'tcx> {\n                         let owner_id = tcx.hir().body_owner(body_id);\n                         let opt_ty_info;\n                         let self_arg;\n-                        if let Some(ref fn_decl) = tcx.hir().fn_decl(owner_id) {\n+                        if let Some(ref fn_decl) = tcx.hir().fn_decl_by_hir_id(owner_id) {\n                             let ty_hir_id = fn_decl.inputs[index].hir_id;\n                             let ty_span = tcx.hir().span_by_hir_id(ty_hir_id);\n                             opt_ty_info = Some(ty_span);\n@@ -650,7 +650,7 @@ fn construct_const<'a, 'tcx>(\n ) -> Body<'tcx> {\n     let tcx = hir.tcx();\n     let owner_id = tcx.hir().body_owner(body_id);\n-    let span = tcx.hir().span(owner_id);\n+    let span = tcx.hir().span_by_hir_id(owner_id);\n     let mut builder = Builder::new(\n         hir,\n         span,\n@@ -689,7 +689,7 @@ fn construct_error<'a, 'tcx>(\n     body_id: hir::BodyId\n ) -> Body<'tcx> {\n     let owner_id = hir.tcx().hir().body_owner(body_id);\n-    let span = hir.tcx().hir().span(owner_id);\n+    let span = hir.tcx().hir().span_by_hir_id(owner_id);\n     let ty = hir.tcx().types.err;\n     let mut builder = Builder::new(hir, span, 0, Safety::Safe, ty, span, vec![], vec![], false);\n     let source_info = builder.source_info(span);"}, {"sha": "9f05cf981f5178bec7204cf914f925faa8380ad6", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -908,12 +908,13 @@ fn convert_path_expr<'a, 'tcx>(\n         }\n \n         Res::Def(DefKind::ConstParam, def_id) => {\n-            let node_id = cx.tcx.hir().as_local_node_id(def_id).unwrap();\n-            let item_id = cx.tcx.hir().get_parent_node(node_id);\n-            let item_def_id = cx.tcx.hir().local_def_id(item_id);\n+            let hir_id = cx.tcx.hir().as_local_hir_id(def_id).unwrap();\n+            let item_id = cx.tcx.hir().get_parent_node_by_hir_id(hir_id);\n+            let item_def_id = cx.tcx.hir().local_def_id_from_hir_id(item_id);\n             let generics = cx.tcx.generics_of(item_def_id);\n-            let index = generics.param_def_id_to_index[&cx.tcx.hir().local_def_id(node_id)];\n-            let name = cx.tcx.hir().name(node_id).as_interned_str();\n+            let local_def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n+            let index = generics.param_def_id_to_index[&local_def_id];\n+            let name = cx.tcx.hir().name_by_hir_id(hir_id).as_interned_str();\n             let val = ConstValue::Param(ty::ParamConst::new(index, name));\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_const("}, {"sha": "03ccbdb14b7372524852dcaf4ebb518386bbac24", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -175,8 +175,8 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n                         // Sometimes the index is beyond the number of upvars (seen\n                         // for a generator).\n                         if let Some((&var_hir_id, _)) = upvars.get_index(field) {\n-                            let var_node_id = self.ecx.tcx.hir().hir_to_node_id(var_hir_id);\n-                            if let hir::Node::Binding(pat) = self.ecx.tcx.hir().get(var_node_id) {\n+                            let node = self.ecx.tcx.hir().get_by_hir_id(var_hir_id);\n+                            if let hir::Node::Binding(pat) = node {\n                                 if let hir::PatKind::Binding(_, _, ident, _) = pat.node {\n                                     name = Some(ident.name);\n                                 }"}, {"sha": "3adee156eb175e556bb10e3e9e6deacc25a2eee7", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -165,7 +165,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n     fn check_nested_body(&mut self, body_id: hir::BodyId) -> Promotability {\n         let item_id = self.tcx.hir().body_owner(body_id);\n-        let item_def_id = self.tcx.hir().local_def_id(item_id);\n+        let item_def_id = self.tcx.hir().local_def_id_from_hir_id(item_id);\n \n         let outer_in_fn = self.in_fn;\n         let outer_tables = self.tables;\n@@ -175,7 +175,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n         self.in_fn = false;\n         self.in_static = false;\n \n-        match self.tcx.hir().body_owner_kind(item_id) {\n+        match self.tcx.hir().body_owner_kind_by_hir_id(item_id) {\n             hir::BodyOwnerKind::Closure |\n             hir::BodyOwnerKind::Fn => self.in_fn = true,\n             hir::BodyOwnerKind::Static(_) => self.in_static = true,"}, {"sha": "97124e534771643e298ffc9200bb7f4da7cb79c3", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -2196,12 +2196,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         if let Some(def_id) = self.const_param_def_id(expr) {\n             // Find the name and index of the const parameter by indexing the generics of the\n             // parent item and construct a `ParamConst`.\n-            let node_id = tcx.hir().as_local_node_id(def_id).unwrap();\n-            let item_id = tcx.hir().get_parent_node(node_id);\n-            let item_def_id = tcx.hir().local_def_id(item_id);\n+            let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+            let item_id = tcx.hir().get_parent_node_by_hir_id(hir_id);\n+            let item_def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n             let generics = tcx.generics_of(item_def_id);\n-            let index = generics.param_def_id_to_index[&tcx.hir().local_def_id(node_id)];\n-            let name = tcx.hir().name(node_id).as_interned_str();\n+            let index = generics.param_def_id_to_index[&tcx.hir().local_def_id_from_hir_id(hir_id)];\n+            let name = tcx.hir().name_by_hir_id(hir_id).as_interned_str();\n             const_.val = ConstValue::Param(ty::ParamConst::new(index, name));\n         }\n "}, {"sha": "c4a834dd600a43df6470243ba02be2eb9519b9ed", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -2517,9 +2517,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Some(&t) => t,\n             None if self.is_tainted_by_errors() => self.tcx.types.err,\n             None => {\n-                let node_id = self.tcx.hir().hir_to_node_id(id);\n                 bug!(\"no type for node {}: {} in fcx {}\",\n-                     node_id, self.tcx.hir().node_to_string(node_id),\n+                     id, self.tcx.hir().hir_to_string(id),\n                      self.tag());\n             }\n         }"}, {"sha": "1e33551b2560fa5b23b61fba327627660fbe164d", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -34,7 +34,7 @@ use syntax_pos::Span;\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn resolve_type_vars_in_body(&self, body: &'tcx hir::Body) -> &'tcx ty::TypeckTables<'tcx> {\n         let item_id = self.tcx.hir().body_owner(body.id());\n-        let item_def_id = self.tcx.hir().local_def_id(item_id);\n+        let item_def_id = self.tcx.hir().local_def_id_from_hir_id(item_id);\n \n         // This attribute causes us to dump some writeback information\n         // in the form of errors, which is uSymbolfor unit tests.\n@@ -45,10 +45,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             wbcx.visit_node_id(arg.pat.span, arg.hir_id);\n         }\n         // Type only exists for constants and statics, not functions.\n-        match self.tcx.hir().body_owner_kind(item_id) {\n+        match self.tcx.hir().body_owner_kind_by_hir_id(item_id) {\n             hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => {\n-                let item_hir_id = self.tcx.hir().node_to_hir_id(item_id);\n-                wbcx.visit_node_id(body.value.span, item_hir_id);\n+                wbcx.visit_node_id(body.value.span, item_id);\n             }\n             hir::BodyOwnerKind::Closure | hir::BodyOwnerKind::Fn => (),\n         }"}, {"sha": "1273fcfc2573c7e57a2ddb0a8b9ada6bc1ab1ea8", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61964d9732847a3c208c48d07cb8c2ddae8ddb3c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "patch": "@@ -395,7 +395,7 @@ fn is_param<'tcx>(tcx: TyCtxt<'tcx>, ast_ty: &hir::Ty, param_id: hir::HirId) ->\n }\n \n fn convert_item<'tcx>(tcx: TyCtxt<'tcx>, item_id: hir::HirId) {\n-    let it = tcx.hir().expect_item_by_hir_id(item_id);\n+    let it = tcx.hir().expect_item(item_id);\n     debug!(\"convert: item {} with id {}\", it.ident, it.hir_id);\n     let def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n     match it.node {"}]}