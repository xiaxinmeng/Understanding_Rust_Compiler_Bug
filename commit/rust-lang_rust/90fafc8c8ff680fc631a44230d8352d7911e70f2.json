{"sha": "90fafc8c8ff680fc631a44230d8352d7911e70f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZmFmYzhjOGZmNjgwZmM2MzFhNDQyMzBkODM1MmQ3OTExZTcwZjI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-03T17:34:57Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-03T20:39:51Z"}, "message": "rustc_ast: `visit_mac` -> `visit_mac_call`", "tree": {"sha": "28197acbaef6755cea355c97af660da121394387", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28197acbaef6755cea355c97af660da121394387"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90fafc8c8ff680fc631a44230d8352d7911e70f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90fafc8c8ff680fc631a44230d8352d7911e70f2", "html_url": "https://github.com/rust-lang/rust/commit/90fafc8c8ff680fc631a44230d8352d7911e70f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90fafc8c8ff680fc631a44230d8352d7911e70f2/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3237b3886c8d1bd19b78eda6040e2c55e5332a82", "url": "https://api.github.com/repos/rust-lang/rust/commits/3237b3886c8d1bd19b78eda6040e2c55e5332a82", "html_url": "https://github.com/rust-lang/rust/commit/3237b3886c8d1bd19b78eda6040e2c55e5332a82"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "7cafac6ac8b7ff6dd75e17395dfc32efc85b0473", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=90fafc8c8ff680fc631a44230d8352d7911e70f2", "patch": "@@ -210,7 +210,7 @@ pub trait MutVisitor: Sized {\n         noop_visit_local(l, self);\n     }\n \n-    fn visit_mac(&mut self, mac: &mut MacCall) {\n+    fn visit_mac_call(&mut self, mac: &mut MacCall) {\n         noop_visit_mac(mac, self);\n     }\n \n@@ -491,7 +491,7 @@ pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n             vis.visit_id(id);\n             visit_vec(bounds, |bound| vis.visit_param_bound(bound));\n         }\n-        TyKind::MacCall(mac) => vis.visit_mac(mac),\n+        TyKind::MacCall(mac) => vis.visit_mac_call(mac),\n     }\n     vis.visit_span(span);\n }\n@@ -943,7 +943,7 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n             vis.visit_generics(generics);\n             visit_bounds(bounds, vis);\n         }\n-        ItemKind::MacCall(m) => vis.visit_mac(m),\n+        ItemKind::MacCall(m) => vis.visit_mac_call(m),\n         ItemKind::MacroDef(def) => vis.visit_macro_def(def),\n     }\n }\n@@ -972,7 +972,7 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n             visit_bounds(bounds, visitor);\n             visit_opt(ty, |ty| visitor.visit_ty(ty));\n         }\n-        AssocItemKind::MacCall(mac) => visitor.visit_mac(mac),\n+        AssocItemKind::MacCall(mac) => visitor.visit_mac_call(mac),\n     }\n     visitor.visit_span(span);\n     smallvec![item]\n@@ -1063,7 +1063,7 @@ pub fn noop_flat_map_foreign_item<T: MutVisitor>(\n             visit_bounds(bounds, visitor);\n             visit_opt(ty, |ty| visitor.visit_ty(ty));\n         }\n-        ForeignItemKind::MacCall(mac) => visitor.visit_mac(mac),\n+        ForeignItemKind::MacCall(mac) => visitor.visit_mac_call(mac),\n     }\n     visitor.visit_span(span);\n     smallvec![item]\n@@ -1102,7 +1102,7 @@ pub fn noop_visit_pat<T: MutVisitor>(pat: &mut P<Pat>, vis: &mut T) {\n             visit_vec(elems, |elem| vis.visit_pat(elem))\n         }\n         PatKind::Paren(inner) => vis.visit_pat(inner),\n-        PatKind::MacCall(mac) => vis.visit_mac(mac),\n+        PatKind::MacCall(mac) => vis.visit_mac_call(mac),\n     }\n     vis.visit_span(span);\n }\n@@ -1267,7 +1267,7 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             }\n             visit_vec(inputs, |(_c, expr)| vis.visit_expr(expr));\n         }\n-        ExprKind::MacCall(mac) => vis.visit_mac(mac),\n+        ExprKind::MacCall(mac) => vis.visit_mac_call(mac),\n         ExprKind::Struct(path, fields, expr) => {\n             vis.visit_path(path);\n             fields.flat_map_in_place(|field| vis.flat_map_field(field));\n@@ -1328,7 +1328,7 @@ pub fn noop_flat_map_stmt_kind<T: MutVisitor>(\n         StmtKind::Empty => smallvec![StmtKind::Empty],\n         StmtKind::MacCall(mut mac) => {\n             let MacCallStmt { mac: mac_, style: _, attrs } = mac.deref_mut();\n-            vis.visit_mac(mac_);\n+            vis.visit_mac_call(mac_);\n             visit_thin_attrs(attrs, vis);\n             smallvec![StmtKind::MacCall(mac)]\n         }"}, {"sha": "8751f09cfcbbe1bb785344c622de967263ff8ab3", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=90fafc8c8ff680fc631a44230d8352d7911e70f2", "patch": "@@ -176,7 +176,7 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_lifetime(&mut self, lifetime: &'ast Lifetime) {\n         walk_lifetime(self, lifetime)\n     }\n-    fn visit_mac(&mut self, mac: &'ast MacCall) {\n+    fn visit_mac_call(&mut self, mac: &'ast MacCall) {\n         walk_mac(self, mac)\n     }\n     fn visit_mac_def(&mut self, _mac: &'ast MacroDef, _id: NodeId) {\n@@ -341,7 +341,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n         }\n-        ItemKind::MacCall(ref mac) => visitor.visit_mac(mac),\n+        ItemKind::MacCall(ref mac) => visitor.visit_mac_call(mac),\n         ItemKind::MacroDef(ref ts) => visitor.visit_mac_def(ts, item.id),\n     }\n     walk_list!(visitor, visit_attribute, &item.attrs);\n@@ -409,7 +409,7 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n         }\n         TyKind::Typeof(ref expression) => visitor.visit_anon_const(expression),\n         TyKind::Infer | TyKind::ImplicitSelf | TyKind::Err => {}\n-        TyKind::MacCall(ref mac) => visitor.visit_mac(mac),\n+        TyKind::MacCall(ref mac) => visitor.visit_mac_call(mac),\n         TyKind::Never | TyKind::CVarArgs => {}\n     }\n }\n@@ -527,7 +527,7 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n         PatKind::Tuple(ref elems) | PatKind::Slice(ref elems) | PatKind::Or(ref elems) => {\n             walk_list!(visitor, visit_pat, elems);\n         }\n-        PatKind::MacCall(ref mac) => visitor.visit_mac(mac),\n+        PatKind::MacCall(ref mac) => visitor.visit_mac_call(mac),\n     }\n }\n \n@@ -552,7 +552,7 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignI\n             walk_list!(visitor, visit_ty, ty);\n         }\n         ForeignItemKind::MacCall(mac) => {\n-            visitor.visit_mac(mac);\n+            visitor.visit_mac_call(mac);\n         }\n     }\n }\n@@ -657,7 +657,7 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n             walk_list!(visitor, visit_ty, ty);\n         }\n         AssocItemKind::MacCall(mac) => {\n-            visitor.visit_mac(mac);\n+            visitor.visit_mac_call(mac);\n         }\n     }\n }\n@@ -687,7 +687,7 @@ pub fn walk_stmt<'a, V: Visitor<'a>>(visitor: &mut V, statement: &'a Stmt) {\n         StmtKind::Empty => {}\n         StmtKind::MacCall(ref mac) => {\n             let MacCallStmt { ref mac, style: _, ref attrs } = **mac;\n-            visitor.visit_mac(mac);\n+            visitor.visit_mac_call(mac);\n             for attr in attrs.iter() {\n                 visitor.visit_attribute(attr);\n             }\n@@ -818,7 +818,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::Ret(ref optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);\n         }\n-        ExprKind::MacCall(ref mac) => visitor.visit_mac(mac),\n+        ExprKind::MacCall(ref mac) => visitor.visit_mac_call(mac),\n         ExprKind::Paren(ref subexpression) => visitor.visit_expr(subexpression),\n         ExprKind::InlineAsm(ref ia) => {\n             for (op, _) in &ia.operands {"}, {"sha": "6efc78c88427ee9ac317d41e62d8317d06fe7f99", "filename": "compiler/rustc_ast_passes/src/node_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs?ref=90fafc8c8ff680fc631a44230d8352d7911e70f2", "patch": "@@ -114,7 +114,7 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_lifetime(self, lifetime)\n     }\n-    fn visit_mac(&mut self, mac: &MacCall) {\n+    fn visit_mac_call(&mut self, mac: &MacCall) {\n         self.count += 1;\n         walk_mac(self, mac)\n     }"}, {"sha": "0642edff6b67817084809fe89a9adcd0343a1ac8", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=90fafc8c8ff680fc631a44230d8352d7911e70f2", "patch": "@@ -358,7 +358,7 @@ fn find_type_parameters(\n             visit::walk_ty(self, ty)\n         }\n \n-        fn visit_mac(&mut self, mac: &ast::MacCall) {\n+        fn visit_mac_call(&mut self, mac: &ast::MacCall) {\n             self.cx.span_err(mac.span(), \"`derive` cannot be used on items with type macros\");\n         }\n     }"}, {"sha": "dde65d998d81b2a3531a7f87a1ee71f06d387d88", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=90fafc8c8ff680fc631a44230d8352d7911e70f2", "patch": "@@ -5,7 +5,6 @@ use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedMatch};\n use rustc_ast::mut_visit::{self, MutVisitor};\n use rustc_ast::token::{self, NtTT, Token};\n use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndSpacing};\n-use rustc_ast::MacCall;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{pluralize, PResult};"}, {"sha": "be0300bad98bd1aa5f7274d001134a1f051fac17", "filename": "compiler/rustc_expand/src/mut_visit/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs?ref=90fafc8c8ff680fc631a44230d8352d7911e70f2", "patch": "@@ -1,7 +1,7 @@\n use crate::tests::{matches_codepattern, string_to_crate};\n \n use rustc_ast as ast;\n-use rustc_ast::mut_visit::{self, MutVisitor};\n+use rustc_ast::mut_visit::MutVisitor;\n use rustc_ast_pretty::pprust;\n use rustc_span::symbol::Ident;\n use rustc_span::with_default_session_globals;"}, {"sha": "08c147ec3ac3f0a23d1775193fb10dfc7acfdf77", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=90fafc8c8ff680fc631a44230d8352d7911e70f2", "patch": "@@ -270,7 +270,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         self.check_id(id);\n     }\n \n-    fn visit_mac(&mut self, mac: &'a ast::MacCall) {\n+    fn visit_mac_call(&mut self, mac: &'a ast::MacCall) {\n         run_early_pass!(self, check_mac, mac);\n         ast_visit::walk_mac(self, mac);\n     }"}, {"sha": "ee9a6dca5ade985331bcb31ff83e00048851e5ab", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=90fafc8c8ff680fc631a44230d8352d7911e70f2", "patch": "@@ -1,6 +1,6 @@\n use super::{Parser, PathStyle};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n-use rustc_ast::mut_visit::{noop_visit_mac, noop_visit_pat, MutVisitor};\n+use rustc_ast::mut_visit::{noop_visit_pat, MutVisitor};\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::{self as ast, AttrVec, Attribute, FieldPat, MacCall, Pat, PatKind, RangeEnd};"}, {"sha": "1d02c9aa6375dd5666e40eddf2d703c94c81176c", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fafc8c8ff680fc631a44230d8352d7911e70f2/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=90fafc8c8ff680fc631a44230d8352d7911e70f2", "patch": "@@ -336,7 +336,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_lifetime(self, lifetime)\n     }\n \n-    fn visit_mac(&mut self, mac: &'v ast::MacCall) {\n+    fn visit_mac_call(&mut self, mac: &'v ast::MacCall) {\n         self.record(\"MacCall\", Id::None, mac);\n         ast_visit::walk_mac(self, mac)\n     }"}, {"sha": "30f3781bf7743c5af43c1e324a7715ddf1726729", "filename": "src/test/ui/parser/issue-65122-mac-invoc-in-mut-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fafc8c8ff680fc631a44230d8352d7911e70f2/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fafc8c8ff680fc631a44230d8352d7911e70f2/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.rs?ref=90fafc8c8ff680fc631a44230d8352d7911e70f2", "patch": "@@ -1,4 +1,4 @@\n-// Regression test; used to ICE with 'visit_mac disabled by default' due to a\n+// Regression test; used to ICE with 'visit_mac_call disabled by default' due to a\n // `MutVisitor` in `fn make_all_value_bindings_mutable` (`parse/parser/pat.rs`).\n \n macro_rules! mac1 {"}, {"sha": "c5f38c1f08025cf4ed82f107bcf3de32756887a0", "filename": "src/tools/clippy/clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fafc8c8ff680fc631a44230d8352d7911e70f2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fafc8c8ff680fc631a44230d8352d7911e70f2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=90fafc8c8ff680fc631a44230d8352d7911e70f2", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{span_lint, span_lint_and_then};\n use rustc_ast::ast::{\n-    Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Item, ItemKind, Local, MacCall, Pat, PatKind,\n+    Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Item, ItemKind, Local, Pat, PatKind,\n };\n use rustc_ast::visit::{walk_block, walk_expr, walk_pat, Visitor};\n use rustc_lint::{EarlyContext, EarlyLintPass};"}]}