{"sha": "49431909a6a8ccb915302d57c869e86d2a576af6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NDMxOTA5YTZhOGNjYjkxNTMwMmQ1N2M4NjllODZkMmE1NzZhZjY=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-03-11T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-03-11T00:00:00Z"}, "message": "Validate rustc_layout_scalar_valid_range_{start,end} attributes", "tree": {"sha": "920ed92db33d8ede260c1e086d7483eea1b30817", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/920ed92db33d8ede260c1e086d7483eea1b30817"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49431909a6a8ccb915302d57c869e86d2a576af6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49431909a6a8ccb915302d57c869e86d2a576af6", "html_url": "https://github.com/rust-lang/rust/commit/49431909a6a8ccb915302d57c869e86d2a576af6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49431909a6a8ccb915302d57c869e86d2a576af6/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ba71abddd744ff8bfbbb100c64ec8cbc52df62e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ba71abddd744ff8bfbbb100c64ec8cbc52df62e", "html_url": "https://github.com/rust-lang/rust/commit/1ba71abddd744ff8bfbbb100c64ec8cbc52df62e"}], "stats": {"total": 91, "additions": 90, "deletions": 1}, "files": [{"sha": "ae8883754d6f2465163785c74c1791dd6749a87d", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/49431909a6a8ccb915302d57c869e86d2a576af6/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49431909a6a8ccb915302d57c869e86d2a576af6/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=49431909a6a8ccb915302d57c869e86d2a576af6", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n \n-use rustc_ast::{Attribute, LitKind, NestedMetaItem};\n+use rustc_ast::{Attribute, Lit, LitKind, NestedMetaItem};\n use rustc_errors::{pluralize, struct_span_err};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n@@ -87,6 +87,10 @@ impl CheckAttrVisitor<'tcx> {\n                 self.check_export_name(hir_id, &attr, span, target)\n             } else if self.tcx.sess.check_name(attr, sym::rustc_args_required_const) {\n                 self.check_rustc_args_required_const(&attr, span, target, item)\n+            } else if self.tcx.sess.check_name(attr, sym::rustc_layout_scalar_valid_range_start) {\n+                self.check_rustc_layout_scalar_valid_range(&attr, span, target)\n+            } else if self.tcx.sess.check_name(attr, sym::rustc_layout_scalar_valid_range_end) {\n+                self.check_rustc_layout_scalar_valid_range(&attr, span, target)\n             } else if self.tcx.sess.check_name(attr, sym::allow_internal_unstable) {\n                 self.check_allow_internal_unstable(hir_id, &attr, span, target, &attrs)\n             } else if self.tcx.sess.check_name(attr, sym::rustc_allow_const_fn_unstable) {\n@@ -807,6 +811,37 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n+    fn check_rustc_layout_scalar_valid_range(\n+        &self,\n+        attr: &Attribute,\n+        span: &Span,\n+        target: Target,\n+    ) -> bool {\n+        if target != Target::Struct {\n+            self.tcx\n+                .sess\n+                .struct_span_err(attr.span, \"attribute should be applied to a struct\")\n+                .span_label(*span, \"not a struct\")\n+                .emit();\n+            return false;\n+        }\n+\n+        let list = match attr.meta_item_list() {\n+            None => return false,\n+            Some(it) => it,\n+        };\n+\n+        if matches!(&list[..], &[NestedMetaItem::Literal(Lit { kind: LitKind::Int(..), .. })]) {\n+            true\n+        } else {\n+            self.tcx\n+                .sess\n+                .struct_span_err(attr.span, \"expected exactly one integer literal argument\")\n+                .emit();\n+            false\n+        }\n+    }\n+\n     /// Checks if `#[rustc_legacy_const_generics]` is applied to a function and has a valid argument.\n     fn check_rustc_legacy_const_generics(\n         &self,"}, {"sha": "25fe4be660b2428d2a408fe80ef8952415d72f75", "filename": "src/test/ui/invalid/invalid_rustc_layout_scalar_valid_range.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/49431909a6a8ccb915302d57c869e86d2a576af6/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49431909a6a8ccb915302d57c869e86d2a576af6/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.rs?ref=49431909a6a8ccb915302d57c869e86d2a576af6", "patch": "@@ -0,0 +1,23 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_layout_scalar_valid_range_start(u32::MAX)] //~ ERROR\n+pub struct A(u32);\n+\n+#[rustc_layout_scalar_valid_range_end(1, 2)] //~ ERROR\n+pub struct B(u8);\n+\n+#[rustc_layout_scalar_valid_range_end(a = \"a\")] //~ ERROR\n+pub struct C(i32);\n+\n+#[rustc_layout_scalar_valid_range_end(1)] //~ ERROR\n+enum E {\n+    X = 1,\n+    Y = 14,\n+}\n+\n+fn main() {\n+    let _ = A(0);\n+    let _ = B(0);\n+    let _ = C(0);\n+    let _ = E::X;\n+}"}, {"sha": "7e95fedebdfc6bae872f1a4aadd9cfadd46c466a", "filename": "src/test/ui/invalid/invalid_rustc_layout_scalar_valid_range.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/49431909a6a8ccb915302d57c869e86d2a576af6/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49431909a6a8ccb915302d57c869e86d2a576af6/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.stderr?ref=49431909a6a8ccb915302d57c869e86d2a576af6", "patch": "@@ -0,0 +1,31 @@\n+error: expected exactly one integer literal argument\n+  --> $DIR/invalid_rustc_layout_scalar_valid_range.rs:3:1\n+   |\n+LL | #[rustc_layout_scalar_valid_range_start(u32::MAX)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: expected exactly one integer literal argument\n+  --> $DIR/invalid_rustc_layout_scalar_valid_range.rs:6:1\n+   |\n+LL | #[rustc_layout_scalar_valid_range_end(1, 2)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: expected exactly one integer literal argument\n+  --> $DIR/invalid_rustc_layout_scalar_valid_range.rs:9:1\n+   |\n+LL | #[rustc_layout_scalar_valid_range_end(a = \"a\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: attribute should be applied to a struct\n+  --> $DIR/invalid_rustc_layout_scalar_valid_range.rs:12:1\n+   |\n+LL |   #[rustc_layout_scalar_valid_range_end(1)]\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / enum E {\n+LL | |     X = 1,\n+LL | |     Y = 14,\n+LL | | }\n+   | |_- not a struct\n+\n+error: aborting due to 4 previous errors\n+"}]}