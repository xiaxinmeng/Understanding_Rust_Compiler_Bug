{"sha": "1aa3ffaf9912e2ba60295a28a820c38a78346dc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYTNmZmFmOTkxMmUyYmE2MDI5NWEyOGE4MjBjMzhhNzgzNDZkYzU=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-25T16:04:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-25T16:04:57Z"}, "message": "Rollup merge of #56024 - oli-obk:const_fn_collect_inner, r=michaelwoerister\n\nDon't auto-inline const functions\n\nfixes #53451", "tree": {"sha": "14621ba267b2c468a18cd7907050eec3cc3ff2cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14621ba267b2c468a18cd7907050eec3cc3ff2cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aa3ffaf9912e2ba60295a28a820c38a78346dc5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb+sgpCRBK7hj4Ov3rIwAAdHIIAH2vuQHvnNg4FpzFvte4fhcQ\nY7H+N1UZdT1l0D8WhRvtRWOuI7BkKMbFd4ivlSuIpY//DIVxvi1JdsSJDSnhhVP/\nsRq9uHixCYhRPAY36n+A4JB1qHBX3psw9XKS1GGFJoHdZ4rgnOih2YWVB7k9hU/z\nDVHIuYZsXfI9nX9M3STnVcHJEwLk3NVKyyX3VUGkZbTM7FRs/AyfG0dCGNeC8h9o\nFMOc2+3Iu6yj2q9GrLYf5SwefFDwwyyLvpq3gdUUvsnLq2mIEMvEond5JPajbVvX\nJgfsz47BUMSF1dtxAos15oSXnT23S52EEu+hhOiy24VEfeoqkjEm8CGDnqpjBmU=\n=MSht\n-----END PGP SIGNATURE-----\n", "payload": "tree 14621ba267b2c468a18cd7907050eec3cc3ff2cf\nparent e9bca7a993d740291568c57eeef797b175c591cf\nparent eb18ddd8f4fede5e12a97f724014a8406dd75881\nauthor Pietro Albini <pietro@pietroalbini.org> 1543161897 +0100\ncommitter GitHub <noreply@github.com> 1543161897 +0100\n\nRollup merge of #56024 - oli-obk:const_fn_collect_inner, r=michaelwoerister\n\nDon't auto-inline const functions\n\nfixes #53451\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa3ffaf9912e2ba60295a28a820c38a78346dc5", "html_url": "https://github.com/rust-lang/rust/commit/1aa3ffaf9912e2ba60295a28a820c38a78346dc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aa3ffaf9912e2ba60295a28a820c38a78346dc5/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9bca7a993d740291568c57eeef797b175c591cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9bca7a993d740291568c57eeef797b175c591cf", "html_url": "https://github.com/rust-lang/rust/commit/e9bca7a993d740291568c57eeef797b175c591cf"}, {"sha": "eb18ddd8f4fede5e12a97f724014a8406dd75881", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb18ddd8f4fede5e12a97f724014a8406dd75881", "html_url": "https://github.com/rust-lang/rust/commit/eb18ddd8f4fede5e12a97f724014a8406dd75881"}], "stats": {"total": 85, "additions": 52, "deletions": 33}, "files": [{"sha": "411a6e7e6238ef470973ce9ede3a8ec9556a52b4", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1aa3ffaf9912e2ba60295a28a820c38a78346dc5/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa3ffaf9912e2ba60295a28a820c38a78346dc5/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=1aa3ffaf9912e2ba60295a28a820c38a78346dc5", "patch": "@@ -173,10 +173,7 @@ impl<'tcx> InstanceDef<'tcx> {\n             // available to normal end-users.\n             return true\n         }\n-        let codegen_fn_attrs = tcx.codegen_fn_attrs(self.def_id());\n-        // need to use `is_const_fn_raw` since we don't really care if the user can use it as a\n-        // const fn, just whether the function should be inlined\n-        codegen_fn_attrs.requests_inline() || tcx.is_const_fn_raw(self.def_id())\n+        tcx.codegen_fn_attrs(self.def_id()).requests_inline()\n     }\n }\n "}, {"sha": "7531f62fdab7b7f8f42d8fbb9670986be8503592", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 21, "deletions": 26, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1aa3ffaf9912e2ba60295a28a820c38a78346dc5/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa3ffaf9912e2ba60295a28a820c38a78346dc5/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=1aa3ffaf9912e2ba60295a28a820c38a78346dc5", "patch": "@@ -178,10 +178,6 @@\n //! Some things are not yet fully implemented in the current version of this\n //! module.\n //!\n-//! ### Initializers of Constants and Statics\n-//! Since no MIR is constructed yet for initializer expressions of constants and\n-//! statics we cannot inspect these properly.\n-//!\n //! ### Const Fns\n //! Ideally, no mono item should be generated for const fns unless there\n //! is a call to them that cannot be evaluated at compile time. At the moment\n@@ -191,7 +187,6 @@\n use rustc::hir::{self, CodegenFnAttrFlags};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n-use rustc::hir::Node;\n use rustc::hir::def_id::DefId;\n use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n@@ -741,27 +736,27 @@ fn should_monomorphize_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance:\n         ty::InstanceDef::CloneShim(..) => return true\n     };\n \n-    return match tcx.hir.get_if_local(def_id) {\n-        Some(Node::ForeignItem(..)) => {\n-            false // foreign items are linked against, not codegened.\n-        }\n-        Some(_) => true,\n-        None => {\n-            if tcx.is_reachable_non_generic(def_id) ||\n-                tcx.is_foreign_item(def_id) ||\n-                is_available_upstream_generic(tcx, def_id, instance.substs)\n-            {\n-                // We can link to the item in question, no instance needed\n-                // in this crate\n-                false\n-            } else {\n-                if !tcx.is_mir_available(def_id) {\n-                    bug!(\"Cannot create local mono-item for {:?}\", def_id)\n-                }\n-                true\n-            }\n-        }\n-    };\n+    if tcx.is_foreign_item(def_id) {\n+        // We can always link to foreign items\n+        return false;\n+    }\n+\n+    if def_id.is_local() {\n+        // local items cannot be referred to locally without monomorphizing them locally\n+        return true;\n+    }\n+\n+    if tcx.is_reachable_non_generic(def_id) ||\n+       is_available_upstream_generic(tcx, def_id, instance.substs) {\n+        // We can link to the item in question, no instance needed\n+        // in this crate\n+        return false;\n+    }\n+\n+    if !tcx.is_mir_available(def_id) {\n+        bug!(\"Cannot create local mono-item for {:?}\", def_id)\n+    }\n+    return true;\n \n     fn is_available_upstream_generic<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                def_id: DefId,"}, {"sha": "5e181870fed657b7dc8f553eaf16dbdc1cef9f48", "filename": "src/test/codegen-units/item-collection/unreferenced-const-fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1aa3ffaf9912e2ba60295a28a820c38a78346dc5/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa3ffaf9912e2ba60295a28a820c38a78346dc5/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs?ref=1aa3ffaf9912e2ba60295a28a820c38a78346dc5", "patch": "@@ -11,11 +11,10 @@\n // ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=lazy\n \n-// NB: We do not expect *any* monomorphization to be generated here.\n-\n #![deny(dead_code)]\n #![crate_type = \"rlib\"]\n \n+//~ MONO_ITEM fn unreferenced_const_fn::foo[0] @@ unreferenced_const_fn-cgu.0[External]\n pub const fn foo(x: u32) -> u32 {\n     x + 0xf00\n }"}, {"sha": "72369aae97ce30ab8558555cb6cf8c71222bb88b", "filename": "src/test/ui/consts/auxiliary/const_fn_lib.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1aa3ffaf9912e2ba60295a28a820c38a78346dc5/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa3ffaf9912e2ba60295a28a820c38a78346dc5/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs?ref=1aa3ffaf9912e2ba60295a28a820c38a78346dc5", "patch": "@@ -10,6 +10,24 @@\n \n // Crate that exports a const fn. Used for testing cross-crate.\n \n+#![feature(const_fn)]\n #![crate_type=\"rlib\"]\n \n-pub const fn foo() -> usize { 22 } //~ ERROR const fn is unstable\n+pub const fn foo() -> usize { 22 }\n+\n+pub const fn bar() -> fn() {\n+    fn x() {}\n+    x\n+}\n+\n+#[inline]\n+pub const fn bar_inlined() -> fn() {\n+    fn x() {}\n+    x\n+}\n+\n+#[inline(always)]\n+pub const fn bar_inlined_always() -> fn() {\n+    fn x() {}\n+    x\n+}"}, {"sha": "c7617c9c7ad0342e0152fe28618a22582ac3567f", "filename": "src/test/ui/consts/const_fn_return_nested_fn_ptr.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1aa3ffaf9912e2ba60295a28a820c38a78346dc5/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_return_nested_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa3ffaf9912e2ba60295a28a820c38a78346dc5/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_return_nested_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_return_nested_fn_ptr.rs?ref=1aa3ffaf9912e2ba60295a28a820c38a78346dc5", "patch": "@@ -0,0 +1,10 @@\n+// compile-pass\n+// aux-build:const_fn_lib.rs\n+\n+extern crate const_fn_lib;\n+\n+fn main() {\n+    const_fn_lib::bar()();\n+    const_fn_lib::bar_inlined()();\n+    const_fn_lib::bar_inlined_always()();\n+}"}]}