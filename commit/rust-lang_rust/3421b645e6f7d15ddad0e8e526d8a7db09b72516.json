{"sha": "3421b645e6f7d15ddad0e8e526d8a7db09b72516", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MjFiNjQ1ZTZmN2QxNWRkYWQwZThlNTI2ZDhhN2RiMDliNzI1MTY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-10-22T17:19:18Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-10-22T17:19:18Z"}, "message": "Emit better #[cfg] diagnostics", "tree": {"sha": "e1ec7d37bd63ccc7f0e18b39479c0860b7fc5d9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1ec7d37bd63ccc7f0e18b39479c0860b7fc5d9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3421b645e6f7d15ddad0e8e526d8a7db09b72516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3421b645e6f7d15ddad0e8e526d8a7db09b72516", "html_url": "https://github.com/rust-lang/rust/commit/3421b645e6f7d15ddad0e8e526d8a7db09b72516", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3421b645e6f7d15ddad0e8e526d8a7db09b72516/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "978cc936491d23bd38ef18aa98ddcc7472ef5f54", "url": "https://api.github.com/repos/rust-lang/rust/commits/978cc936491d23bd38ef18aa98ddcc7472ef5f54", "html_url": "https://github.com/rust-lang/rust/commit/978cc936491d23bd38ef18aa98ddcc7472ef5f54"}], "stats": {"total": 189, "additions": 124, "deletions": 65}, "files": [{"sha": "b2ce7ca3c3d1c9613fde003af009ebf15a39ed71", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=3421b645e6f7d15ddad0e8e526d8a7db09b72516", "patch": "@@ -125,12 +125,20 @@ impl Attrs {\n         AttrQuery { attrs: self, key }\n     }\n \n-    pub fn cfg(&self) -> impl Iterator<Item = CfgExpr> + '_ {\n+    pub fn cfg(&self) -> Option<CfgExpr> {\n         // FIXME: handle cfg_attr :-)\n-        self.by_key(\"cfg\").tt_values().map(CfgExpr::parse)\n+        let mut cfgs = self.by_key(\"cfg\").tt_values().map(CfgExpr::parse).collect::<Vec<_>>();\n+        match cfgs.len() {\n+            0 => None,\n+            1 => Some(cfgs.pop().unwrap()),\n+            _ => Some(CfgExpr::All(cfgs)),\n+        }\n     }\n     pub(crate) fn is_cfg_enabled(&self, cfg_options: &CfgOptions) -> bool {\n-        self.cfg().all(|cfg| cfg_options.check(&cfg) != Some(false))\n+        match self.cfg() {\n+            None => true,\n+            Some(cfg) => cfg_options.check(&cfg) != Some(false),\n+        }\n     }\n }\n "}, {"sha": "34a6a8d4b89a3db6a6771d91f875d431d45670fa", "filename": "crates/hir_def/src/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs?ref=3421b645e6f7d15ddad0e8e526d8a7db09b72516", "patch": "@@ -1,7 +1,9 @@\n //! Diagnostics produced by `hir_def`.\n \n use std::any::Any;\n+use std::fmt::Write;\n \n+use cfg::{CfgExpr, CfgOptions, DnfExpr};\n use hir_expand::diagnostics::{Diagnostic, DiagnosticCode};\n use syntax::{ast, AstPtr, SyntaxNodePtr};\n \n@@ -94,15 +96,23 @@ impl Diagnostic for UnresolvedImport {\n pub struct InactiveCode {\n     pub file: HirFileId,\n     pub node: SyntaxNodePtr,\n+    pub cfg: CfgExpr,\n+    pub opts: CfgOptions,\n }\n \n impl Diagnostic for InactiveCode {\n     fn code(&self) -> DiagnosticCode {\n         DiagnosticCode(\"inactive-code\")\n     }\n     fn message(&self) -> String {\n-        // FIXME: say *why* it is configured out\n-        \"code is inactive due to #[cfg] directives\".to_string()\n+        let inactive = DnfExpr::new(self.cfg.clone()).why_inactive(&self.opts);\n+        let mut buf = \"code is inactive due to #[cfg] directives\".to_string();\n+\n+        if let Some(inactive) = inactive {\n+            write!(buf, \": {}\", inactive).unwrap();\n+        }\n+\n+        buf\n     }\n     fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile::new(self.file, self.node.clone())"}, {"sha": "eb41d324e3fbe3fb3e60a6aab00fc83e7574bec9", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=3421b645e6f7d15ddad0e8e526d8a7db09b72516", "patch": "@@ -283,6 +283,7 @@ pub enum ModuleSource {\n }\n \n mod diagnostics {\n+    use cfg::{CfgExpr, CfgOptions};\n     use hir_expand::diagnostics::DiagnosticSink;\n     use hir_expand::hygiene::Hygiene;\n     use hir_expand::InFile;\n@@ -299,7 +300,7 @@ mod diagnostics {\n \n         UnresolvedImport { ast: AstId<ast::Use>, index: usize },\n \n-        UnconfiguredCode { ast: InFile<SyntaxNodePtr> },\n+        UnconfiguredCode { ast: InFile<SyntaxNodePtr>, cfg: CfgExpr, opts: CfgOptions },\n     }\n \n     #[derive(Debug, PartialEq, Eq)]\n@@ -341,8 +342,10 @@ mod diagnostics {\n         pub(super) fn unconfigured_code(\n             container: LocalModuleId,\n             ast: InFile<SyntaxNodePtr>,\n+            cfg: CfgExpr,\n+            opts: CfgOptions,\n         ) -> Self {\n-            Self { in_module: container, kind: DiagnosticKind::UnconfiguredCode { ast } }\n+            Self { in_module: container, kind: DiagnosticKind::UnconfiguredCode { ast, cfg, opts } }\n         }\n \n         pub(super) fn add_to(\n@@ -395,8 +398,13 @@ mod diagnostics {\n                     }\n                 }\n \n-                DiagnosticKind::UnconfiguredCode { ast } => {\n-                    sink.push(InactiveCode { file: ast.file_id, node: ast.value.clone() });\n+                DiagnosticKind::UnconfiguredCode { ast, cfg, opts } => {\n+                    sink.push(InactiveCode {\n+                        file: ast.file_id,\n+                        node: ast.value.clone(),\n+                        cfg: cfg.clone(),\n+                        opts: opts.clone(),\n+                    });\n                 }\n             }\n         }"}, {"sha": "f30172d905d3dd44d50d76c6023fb28176cffb01", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=3421b645e6f7d15ddad0e8e526d8a7db09b72516", "patch": "@@ -6,7 +6,7 @@\n use std::iter;\n \n use base_db::{CrateId, FileId, ProcMacroId};\n-use cfg::CfgOptions;\n+use cfg::{CfgExpr, CfgOptions};\n use hir_expand::InFile;\n use hir_expand::{\n     ast_id_map::FileAstId,\n@@ -900,7 +900,8 @@ impl ModCollector<'_, '_> {\n         // `#[macro_use] extern crate` is hoisted to imports macros before collecting\n         // any other items.\n         for item in items {\n-            if self.is_cfg_enabled(self.item_tree.attrs((*item).into())) {\n+            let attrs = self.item_tree.attrs((*item).into());\n+            if attrs.cfg().map_or(true, |cfg| self.is_cfg_enabled(&cfg)) {\n                 if let ModItem::ExternCrate(id) = item {\n                     let import = self.item_tree[*id].clone();\n                     if import.is_macro_use {\n@@ -912,9 +913,11 @@ impl ModCollector<'_, '_> {\n \n         for &item in items {\n             let attrs = self.item_tree.attrs(item.into());\n-            if !self.is_cfg_enabled(attrs) {\n-                self.emit_unconfigured_diagnostic(item);\n-                continue;\n+            if let Some(cfg) = attrs.cfg() {\n+                if !self.is_cfg_enabled(&cfg) {\n+                    self.emit_unconfigured_diagnostic(item, &cfg);\n+                    continue;\n+                }\n             }\n             let module =\n                 ModuleId { krate: self.def_collector.def_map.krate, local_id: self.module_id };\n@@ -1321,20 +1324,22 @@ impl ModCollector<'_, '_> {\n         }\n     }\n \n-    fn is_cfg_enabled(&self, attrs: &Attrs) -> bool {\n-        attrs.is_cfg_enabled(self.def_collector.cfg_options)\n+    fn is_cfg_enabled(&self, cfg: &CfgExpr) -> bool {\n+        self.def_collector.cfg_options.check(cfg) != Some(false)\n     }\n \n-    fn emit_unconfigured_diagnostic(&mut self, item: ModItem) {\n+    fn emit_unconfigured_diagnostic(&mut self, item: ModItem, cfg: &CfgExpr) {\n         let ast_id = item.ast_id(self.item_tree);\n         let id_map = self.def_collector.db.ast_id_map(self.file_id);\n         let syntax_ptr = id_map.get(ast_id).syntax_node_ptr();\n \n         let ast_node = InFile::new(self.file_id, syntax_ptr);\n-        self.def_collector\n-            .def_map\n-            .diagnostics\n-            .push(DefDiagnostic::unconfigured_code(self.module_id, ast_node));\n+        self.def_collector.def_map.diagnostics.push(DefDiagnostic::unconfigured_code(\n+            self.module_id,\n+            ast_node,\n+            cfg.clone(),\n+            self.def_collector.cfg_options.clone(),\n+        ));\n     }\n }\n "}, {"sha": "5972248de7a84e85cfc4b900e33a38ca9119622f", "filename": "crates/hir_def/src/nameres/tests/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs?ref=3421b645e6f7d15ddad0e8e526d8a7db09b72516", "patch": "@@ -129,3 +129,25 @@ fn unresolved_module() {\n         \",\n     );\n }\n+\n+#[test]\n+fn inactive_item() {\n+    // Additional tests in `cfg` crate. This only tests disabled cfgs.\n+\n+    check_diagnostics(\n+        r#\"\n+        //- /lib.rs\n+          #[cfg(no)] pub fn f() {}\n+        //^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: no is disabled\n+\n+          #[cfg(no)] #[cfg(no2)] mod m;\n+        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: no and no2 are disabled\n+\n+          #[cfg(all(not(a), b))] enum E {}\n+        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: b is disabled\n+\n+          #[cfg(feature = \"std\")] use std;\n+        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: feature = \"std\" is disabled\n+        \"#,\n+    );\n+}"}, {"sha": "0332c7be046e157dfae5bc41b6a1670132b55ee4", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=3421b645e6f7d15ddad0e8e526d8a7db09b72516", "patch": "@@ -2128,7 +2128,7 @@ fn foo_<|>test() {}\n                                     ignore: false,\n                                 },\n                             },\n-                            cfg_exprs: [],\n+                            cfg: None,\n                         },\n                     ),\n                 ]\n@@ -2166,7 +2166,7 @@ mod tests<|> {\n                             kind: TestMod {\n                                 path: \"tests\",\n                             },\n-                            cfg_exprs: [],\n+                            cfg: None,\n                         },\n                     ),\n                 ]"}, {"sha": "eb82456ad8deeea31b210cd557b36b4acae9f56c", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 45, "deletions": 39, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=3421b645e6f7d15ddad0e8e526d8a7db09b72516", "patch": "@@ -15,7 +15,7 @@ use crate::{display::ToNav, FileId, NavigationTarget};\n pub struct Runnable {\n     pub nav: NavigationTarget,\n     pub kind: RunnableKind,\n-    pub cfg_exprs: Vec<CfgExpr>,\n+    pub cfg: Option<CfgExpr>,\n }\n \n #[derive(Debug, Clone)]\n@@ -168,7 +168,7 @@ fn runnable_fn(\n     };\n \n     let attrs = Attrs::from_attrs_owner(sema.db, InFile::new(HirFileId::from(file_id), &fn_def));\n-    let cfg_exprs = attrs.cfg().collect();\n+    let cfg = attrs.cfg();\n \n     let nav = if let RunnableKind::DocTest { .. } = kind {\n         NavigationTarget::from_doc_commented(\n@@ -179,7 +179,7 @@ fn runnable_fn(\n     } else {\n         NavigationTarget::from_named(sema.db, InFile::new(file_id.into(), &fn_def))\n     };\n-    Some(Runnable { nav, kind, cfg_exprs })\n+    Some(Runnable { nav, kind, cfg })\n }\n \n #[derive(Debug, Copy, Clone)]\n@@ -255,9 +255,9 @@ fn runnable_mod(\n         .join(\"::\");\n \n     let attrs = Attrs::from_attrs_owner(sema.db, InFile::new(HirFileId::from(file_id), &module));\n-    let cfg_exprs = attrs.cfg().collect();\n+    let cfg = attrs.cfg();\n     let nav = module_def.to_nav(sema.db);\n-    Some(Runnable { nav, kind: RunnableKind::TestMod { path }, cfg_exprs })\n+    Some(Runnable { nav, kind: RunnableKind::TestMod { path }, cfg })\n }\n \n // We could create runnables for modules with number_of_test_submodules > 0,\n@@ -348,7 +348,7 @@ fn bench() {}\n                             docs: None,\n                         },\n                         kind: Bin,\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                     Runnable {\n                         nav: NavigationTarget {\n@@ -373,7 +373,7 @@ fn bench() {}\n                                 ignore: false,\n                             },\n                         },\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                     Runnable {\n                         nav: NavigationTarget {\n@@ -398,7 +398,7 @@ fn bench() {}\n                                 ignore: true,\n                             },\n                         },\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                     Runnable {\n                         nav: NavigationTarget {\n@@ -420,7 +420,7 @@ fn bench() {}\n                                 \"bench\",\n                             ),\n                         },\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                 ]\n             \"#]],\n@@ -507,7 +507,7 @@ fn should_have_no_runnable_6() {}\n                             docs: None,\n                         },\n                         kind: Bin,\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                     Runnable {\n                         nav: NavigationTarget {\n@@ -527,7 +527,7 @@ fn should_have_no_runnable_6() {}\n                                 \"should_have_runnable\",\n                             ),\n                         },\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                     Runnable {\n                         nav: NavigationTarget {\n@@ -547,7 +547,7 @@ fn should_have_no_runnable_6() {}\n                                 \"should_have_runnable_1\",\n                             ),\n                         },\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                     Runnable {\n                         nav: NavigationTarget {\n@@ -567,7 +567,7 @@ fn should_have_no_runnable_6() {}\n                                 \"should_have_runnable_2\",\n                             ),\n                         },\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                 ]\n             \"#]],\n@@ -609,7 +609,7 @@ impl Data {\n                             docs: None,\n                         },\n                         kind: Bin,\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                     Runnable {\n                         nav: NavigationTarget {\n@@ -629,7 +629,7 @@ impl Data {\n                                 \"Data::foo\",\n                             ),\n                         },\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                 ]\n             \"#]],\n@@ -668,7 +668,7 @@ mod test_mod {\n                         kind: TestMod {\n                             path: \"test_mod\",\n                         },\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                     Runnable {\n                         nav: NavigationTarget {\n@@ -693,7 +693,7 @@ mod test_mod {\n                                 ignore: false,\n                             },\n                         },\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                 ]\n             \"#]],\n@@ -748,7 +748,7 @@ mod root_tests {\n                         kind: TestMod {\n                             path: \"root_tests::nested_tests_0\",\n                         },\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                     Runnable {\n                         nav: NavigationTarget {\n@@ -768,7 +768,7 @@ mod root_tests {\n                         kind: TestMod {\n                             path: \"root_tests::nested_tests_0::nested_tests_1\",\n                         },\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                     Runnable {\n                         nav: NavigationTarget {\n@@ -793,7 +793,7 @@ mod root_tests {\n                                 ignore: false,\n                             },\n                         },\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                     Runnable {\n                         nav: NavigationTarget {\n@@ -818,7 +818,7 @@ mod root_tests {\n                                 ignore: false,\n                             },\n                         },\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                     Runnable {\n                         nav: NavigationTarget {\n@@ -838,7 +838,7 @@ mod root_tests {\n                         kind: TestMod {\n                             path: \"root_tests::nested_tests_0::nested_tests_2\",\n                         },\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                     Runnable {\n                         nav: NavigationTarget {\n@@ -863,7 +863,7 @@ mod root_tests {\n                                 ignore: false,\n                             },\n                         },\n-                        cfg_exprs: [],\n+                        cfg: None,\n                     },\n                 ]\n             \"#]],\n@@ -906,12 +906,14 @@ fn test_foo1() {}\n                                 ignore: false,\n                             },\n                         },\n-                        cfg_exprs: [\n-                            KeyValue {\n-                                key: \"feature\",\n-                                value: \"foo\",\n-                            },\n-                        ],\n+                        cfg: Some(\n+                            Atom(\n+                                KeyValue {\n+                                    key: \"feature\",\n+                                    value: \"foo\",\n+                                },\n+                            ),\n+                        ),\n                     },\n                 ]\n             \"#]],\n@@ -954,20 +956,24 @@ fn test_foo1() {}\n                                 ignore: false,\n                             },\n                         },\n-                        cfg_exprs: [\n+                        cfg: Some(\n                             All(\n                                 [\n-                                    KeyValue {\n-                                        key: \"feature\",\n-                                        value: \"foo\",\n-                                    },\n-                                    KeyValue {\n-                                        key: \"feature\",\n-                                        value: \"bar\",\n-                                    },\n+                                    Atom(\n+                                        KeyValue {\n+                                            key: \"feature\",\n+                                            value: \"foo\",\n+                                        },\n+                                    ),\n+                                    Atom(\n+                                        KeyValue {\n+                                            key: \"feature\",\n+                                            value: \"bar\",\n+                                        },\n+                                    ),\n                                 ],\n                             ),\n-                        ],\n+                        ),\n                     },\n                 ]\n             \"#]],"}, {"sha": "1ab72bd9158a4c3dd50eb458c7e25bf3871003ac", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=3421b645e6f7d15ddad0e8e526d8a7db09b72516", "patch": "@@ -24,7 +24,7 @@ impl CargoTargetSpec {\n         snap: &GlobalStateSnapshot,\n         spec: Option<CargoTargetSpec>,\n         kind: &RunnableKind,\n-        cfgs: &[CfgExpr],\n+        cfg: &Option<CfgExpr>,\n     ) -> Result<(Vec<String>, Vec<String>)> {\n         let mut args = Vec::new();\n         let mut extra_args = Vec::new();\n@@ -87,7 +87,7 @@ impl CargoTargetSpec {\n             args.push(\"--all-features\".to_string());\n         } else {\n             let mut features = Vec::new();\n-            for cfg in cfgs {\n+            if let Some(cfg) = cfg.as_ref() {\n                 required_features(cfg, &mut features);\n             }\n             for feature in &snap.config.cargo.features {"}, {"sha": "121357a5ac82044e08767e07697af7db98d2ca8a", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3421b645e6f7d15ddad0e8e526d8a7db09b72516/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=3421b645e6f7d15ddad0e8e526d8a7db09b72516", "patch": "@@ -745,7 +745,7 @@ pub(crate) fn runnable(\n     let workspace_root = spec.as_ref().map(|it| it.workspace_root.clone());\n     let target = spec.as_ref().map(|s| s.target.clone());\n     let (cargo_args, executable_args) =\n-        CargoTargetSpec::runnable_args(snap, spec, &runnable.kind, &runnable.cfg_exprs)?;\n+        CargoTargetSpec::runnable_args(snap, spec, &runnable.kind, &runnable.cfg)?;\n     let label = runnable.label(target);\n     let location = location_link(snap, None, runnable.nav)?;\n "}]}