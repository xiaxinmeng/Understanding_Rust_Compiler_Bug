{"sha": "5e68c60406741c41d7dff65e74d05f641ee6022f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNjhjNjA0MDY3NDFjNDFkN2RmZjY1ZTc0ZDA1ZjY0MWVlNjAyMmY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-02T12:23:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-02T12:23:15Z"}, "message": "Rollup merge of #82516 - PoignardAzur:inherent-impl-ty, r=oli-obk\n\nAdd incomplete feature gate for inherent associate types.\n\nMentored by ``````@oli-obk``````\n\nSo far the only change is that instead of giving an automatic error, the following code compiles:\n\n```rust\nstruct Foo;\n\nimpl Foo {\n    type Bar = isize;\n}\n```\n\nThe backend work to make it actually usable isn't there yet. In particular, this:\n\n```rust\nlet x : Foo::Bar;\n```\n\nwill give you:\n\n```sh\nerror[E0223]: ambiguous associated type\n  --> /$RUSTC_DIR/src/test/ui/assoc-inherent.rs:15:13\n   |\nLL |     let x : Foo::Bar;\n   |             ^^^^^^^^ help: use fully-qualified syntax: `<Foo as Trait>::Bar`\n```", "tree": {"sha": "b9520af8789e24ebeb6aedeab006b9586840adcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9520af8789e24ebeb6aedeab006b9586840adcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e68c60406741c41d7dff65e74d05f641ee6022f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPi40CRBK7hj4Ov3rIwAAdHIIAH9QZTLtpVPhrB2FBF3GjonM\n88FjcUGh4yWObYgTrVBr4WbU9WPYR3bpqmaRhcpcOHu2dh5BO6dx9RjvRDrtdrpY\n9j22whsA6+q3063r82gcp8RQtJLyoSHtYB3SCzo3N/ZEq5xepDMhpr8z3YXkram7\nndE/ESve1JzmzbpZEp+yCRktWvxJggwFCpl48TT8d9UgXTzcAtUPHzdo0YKD+gRm\na0zXRDv1CgpLrhqH+7Qx7v1DkO6eUAFuLGrFbDXbK5W54ZoUBed8WyV+aspuq11N\ncpAK2sNBocUONblScR/L++f5PTqYNmLlY6oX5hnvjxkcGBFDKLYtmB4+94jWMiY=\n=bYCN\n-----END PGP SIGNATURE-----\n", "payload": "tree b9520af8789e24ebeb6aedeab006b9586840adcc\nparent ae5e024194a99bf265c874d64999e6beae916cde\nparent 4f4e15d5eb9750c4ac8c140207612122562d6c51\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1614687795 +0900\ncommitter GitHub <noreply@github.com> 1614687795 +0900\n\nRollup merge of #82516 - PoignardAzur:inherent-impl-ty, r=oli-obk\n\nAdd incomplete feature gate for inherent associate types.\n\nMentored by ``````@oli-obk``````\n\nSo far the only change is that instead of giving an automatic error, the following code compiles:\n\n```rust\nstruct Foo;\n\nimpl Foo {\n    type Bar = isize;\n}\n```\n\nThe backend work to make it actually usable isn't there yet. In particular, this:\n\n```rust\nlet x : Foo::Bar;\n```\n\nwill give you:\n\n```sh\nerror[E0223]: ambiguous associated type\n  --> /$RUSTC_DIR/src/test/ui/assoc-inherent.rs:15:13\n   |\nLL |     let x : Foo::Bar;\n   |             ^^^^^^^^ help: use fully-qualified syntax: `<Foo as Trait>::Bar`\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e68c60406741c41d7dff65e74d05f641ee6022f", "html_url": "https://github.com/rust-lang/rust/commit/5e68c60406741c41d7dff65e74d05f641ee6022f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e68c60406741c41d7dff65e74d05f641ee6022f/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae5e024194a99bf265c874d64999e6beae916cde", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae5e024194a99bf265c874d64999e6beae916cde", "html_url": "https://github.com/rust-lang/rust/commit/ae5e024194a99bf265c874d64999e6beae916cde"}, {"sha": "4f4e15d5eb9750c4ac8c140207612122562d6c51", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4e15d5eb9750c4ac8c140207612122562d6c51", "html_url": "https://github.com/rust-lang/rust/commit/4f4e15d5eb9750c4ac8c140207612122562d6c51"}], "stats": {"total": 134, "additions": 89, "deletions": 45}, "files": [{"sha": "4b529734328c7153387a4f2df61b5ce9cab8e7f2", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e68c60406741c41d7dff65e74d05f641ee6022f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e68c60406741c41d7dff65e74d05f641ee6022f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=5e68c60406741c41d7dff65e74d05f641ee6022f", "patch": "@@ -103,7 +103,6 @@ E0198: include_str!(\"./error_codes/E0198.md\"),\n E0199: include_str!(\"./error_codes/E0199.md\"),\n E0200: include_str!(\"./error_codes/E0200.md\"),\n E0201: include_str!(\"./error_codes/E0201.md\"),\n-E0202: include_str!(\"./error_codes/E0202.md\"),\n E0203: include_str!(\"./error_codes/E0203.md\"),\n E0204: include_str!(\"./error_codes/E0204.md\"),\n E0205: include_str!(\"./error_codes/E0205.md\"),"}, {"sha": "afc61ec2e48ff87fc80b0c9733a3c8360f624ccc", "filename": "compiler/rustc_error_codes/src/error_codes/E0202.md", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ae5e024194a99bf265c874d64999e6beae916cde/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0202.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae5e024194a99bf265c874d64999e6beae916cde/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0202.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0202.md?ref=ae5e024194a99bf265c874d64999e6beae916cde", "patch": "@@ -1,15 +0,0 @@\n-Inherent associated types were part of [RFC 195] but are not yet implemented.\n-See [the tracking issue][iss8995] for the status of this implementation.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0202\n-struct Foo;\n-\n-impl Foo {\n-    type Bar = isize; // error!\n-}\n-```\n-\n-[RFC 195]: https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md\n-[iss8995]: https://github.com/rust-lang/rust/issues/8995"}, {"sha": "8ee995a59d80d6de4dcef6f0a1f64030574b631f", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e68c60406741c41d7dff65e74d05f641ee6022f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e68c60406741c41d7dff65e74d05f641ee6022f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=5e68c60406741c41d7dff65e74d05f641ee6022f", "patch": "@@ -641,6 +641,9 @@ declare_features! (\n     /// Allows `pub` on `macro_rules` items.\n     (active, pub_macro_rules, \"1.52.0\", Some(78855), None),\n \n+    /// Allows associated types in inherent impls.\n+    (active, inherent_associated_types, \"1.52.0\", Some(8995), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -666,6 +669,7 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::unsized_locals,\n     sym::capture_disjoint_fields,\n     sym::const_generics_defaults,\n+    sym::inherent_associated_types,\n ];\n \n /// Some features are not allowed to be used together at the same time, if"}, {"sha": "27bb45bcc8512f5f93c179649990d5e65350d559", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e68c60406741c41d7dff65e74d05f641ee6022f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e68c60406741c41d7dff65e74d05f641ee6022f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5e68c60406741c41d7dff65e74d05f641ee6022f", "patch": "@@ -634,6 +634,7 @@ symbols! {\n         index_mut,\n         infer_outlives_requirements,\n         infer_static_outlives_requirements,\n+        inherent_associated_types,\n         inlateout,\n         inline,\n         inline_const,"}, {"sha": "e6f771cfd537295cce4133d98bd93b4974e7dd24", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5e68c60406741c41d7dff65e74d05f641ee6022f/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e68c60406741c41d7dff65e74d05f641ee6022f/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=5e68c60406741c41d7dff65e74d05f641ee6022f", "patch": "@@ -1,4 +1,3 @@\n-use crate::errors::AssocTypeOnInherentImpl;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, ErrorReported, StashKey};\n use rustc_hir as hir;\n@@ -294,7 +293,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             }\n             ImplItemKind::TyAlias(ref ty) => {\n                 if tcx.impl_trait_ref(tcx.hir().get_parent_did(hir_id).to_def_id()).is_none() {\n-                    report_assoc_ty_on_inherent_impl(tcx, item.span);\n+                    check_feature_inherent_assoc_ty(tcx, item.span);\n                 }\n \n                 icx.to_ty(ty)\n@@ -746,6 +745,16 @@ fn infer_placeholder_type(\n     })\n }\n \n-fn report_assoc_ty_on_inherent_impl(tcx: TyCtxt<'_>, span: Span) {\n-    tcx.sess.emit_err(AssocTypeOnInherentImpl { span });\n+fn check_feature_inherent_assoc_ty(tcx: TyCtxt<'_>, span: Span) {\n+    if !tcx.features().inherent_associated_types {\n+        use rustc_session::parse::feature_err;\n+        use rustc_span::symbol::sym;\n+        feature_err(\n+            &tcx.sess.parse_sess,\n+            sym::inherent_associated_types,\n+            span,\n+            \"inherent associated types are unstable\",\n+        )\n+        .emit();\n+    }\n }"}, {"sha": "5068242692ae85d4e7677ffec6d8dbbe813c5093", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e68c60406741c41d7dff65e74d05f641ee6022f/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e68c60406741c41d7dff65e74d05f641ee6022f/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=5e68c60406741c41d7dff65e74d05f641ee6022f", "patch": "@@ -82,13 +82,6 @@ pub struct CopyImplOnTypeWithDtor {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[error = \"E0202\"]\n-pub struct AssocTypeOnInherentImpl {\n-    #[message = \"associated types are not yet supported in inherent impls (see #8995)\"]\n-    pub span: Span,\n-}\n-\n #[derive(SessionDiagnostic)]\n #[error = \"E0203\"]\n pub struct MultipleRelaxedDefaultBounds {"}, {"sha": "c579c962ffcc16dcc9c01c1587a814168b103e3e", "filename": "src/test/ui/assoc-inherent.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5e68c60406741c41d7dff65e74d05f641ee6022f/src%2Ftest%2Fui%2Fassoc-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e68c60406741c41d7dff65e74d05f641ee6022f/src%2Ftest%2Fui%2Fassoc-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.rs?ref=5e68c60406741c41d7dff65e74d05f641ee6022f", "patch": "@@ -1,9 +1,20 @@\n-// Test associated types are, until #8995 is implemented, forbidden in inherent impls.\n+// Test that inherent associated types work with\n+// inherent_associated_types feature gate.\n+\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n \n struct Foo;\n \n impl Foo {\n-    type Bar = isize; //~ERROR associated types are not yet supported in inherent impls (see #8995)\n+    type Bar = isize;\n }\n \n-fn main() {}\n+impl Foo {\n+    type Baz; //~ ERROR associated type in `impl` without body\n+}\n+\n+fn main() {\n+    let x : Foo::Bar; //~ERROR ambiguous associated type\n+    x = 0isize;\n+}"}, {"sha": "b703453fa0334b2e3f55680ce9df127a8460d2a1", "filename": "src/test/ui/assoc-inherent.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5e68c60406741c41d7dff65e74d05f641ee6022f/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e68c60406741c41d7dff65e74d05f641ee6022f/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.stderr?ref=5e68c60406741c41d7dff65e74d05f641ee6022f", "patch": "@@ -1,9 +1,17 @@\n-error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n-  --> $DIR/assoc-inherent.rs:6:5\n+error: associated type in `impl` without body\n+  --> $DIR/assoc-inherent.rs:14:5\n    |\n-LL |     type Bar = isize;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     type Baz;\n+   |     ^^^^^^^^-\n+   |             |\n+   |             help: provide a definition for the type: `= <type>;`\n \n-error: aborting due to previous error\n+error[E0223]: ambiguous associated type\n+  --> $DIR/assoc-inherent.rs:18:13\n+   |\n+LL |     let x : Foo::Bar;\n+   |             ^^^^^^^^ help: use fully-qualified syntax: `<Foo as Trait>::Bar`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0202`.\n+For more information about this error, try `rustc --explain E0223`."}, {"sha": "fc7c6dbc02eef2fe1c167a607b8068b38db4ca23", "filename": "src/test/ui/feature-gates/feature-gate-inherent_associated_types.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e68c60406741c41d7dff65e74d05f641ee6022f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inherent_associated_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e68c60406741c41d7dff65e74d05f641ee6022f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inherent_associated_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inherent_associated_types.rs?ref=5e68c60406741c41d7dff65e74d05f641ee6022f", "patch": "@@ -0,0 +1,10 @@\n+// Test that inherent associated types cannot be used when inherent_associated_types\n+// feature gate is not used.\n+\n+struct Foo;\n+\n+impl Foo {\n+    type Bar = isize; //~ERROR inherent associated types are unstable\n+}\n+\n+fn main() {}"}, {"sha": "76e65d239f87867a4fe3fdb727649a6603b28da3", "filename": "src/test/ui/feature-gates/feature-gate-inherent_associated_types.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e68c60406741c41d7dff65e74d05f641ee6022f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inherent_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e68c60406741c41d7dff65e74d05f641ee6022f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inherent_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inherent_associated_types.stderr?ref=5e68c60406741c41d7dff65e74d05f641ee6022f", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: inherent associated types are unstable\n+  --> $DIR/feature-gate-inherent_associated_types.rs:7:5\n+   |\n+LL |     type Bar = isize;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information\n+   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "1ccc9497d9d81b82d31715637a5f150230f71204", "filename": "src/test/ui/parser/impl-item-type-no-body-semantic-fail.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e68c60406741c41d7dff65e74d05f641ee6022f/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e68c60406741c41d7dff65e74d05f641ee6022f/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs?ref=5e68c60406741c41d7dff65e74d05f641ee6022f", "patch": "@@ -8,16 +8,16 @@ struct X;\n impl X {\n     type Y;\n     //~^ ERROR associated type in `impl` without body\n-    //~| ERROR associated types are not yet supported in inherent impls\n+    //~| ERROR inherent associated types are unstable\n     type Z: Ord;\n     //~^ ERROR associated type in `impl` without body\n     //~| ERROR bounds on `type`s in `impl`s have no effect\n-    //~| ERROR associated types are not yet supported in inherent impls\n+    //~| ERROR inherent associated types are unstable\n     type W: Ord where Self: Eq;\n     //~^ ERROR associated type in `impl` without body\n     //~| ERROR bounds on `type`s in `impl`s have no effect\n-    //~| ERROR associated types are not yet supported in inherent impls\n+    //~| ERROR inherent associated types are unstable\n     type W where Self: Eq;\n     //~^ ERROR associated type in `impl` without body\n-    //~| ERROR associated types are not yet supported in inherent impls\n+    //~| ERROR inherent associated types are unstable\n }"}, {"sha": "818d73c898dcaf6ef4a19222d28584851f5b67bc", "filename": "src/test/ui/parser/impl-item-type-no-body-semantic-fail.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5e68c60406741c41d7dff65e74d05f641ee6022f/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e68c60406741c41d7dff65e74d05f641ee6022f/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr?ref=5e68c60406741c41d7dff65e74d05f641ee6022f", "patch": "@@ -51,30 +51,42 @@ LL | #![feature(generic_associated_types)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n-error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n+error[E0658]: inherent associated types are unstable\n   --> $DIR/impl-item-type-no-body-semantic-fail.rs:9:5\n    |\n LL |     type Y;\n    |     ^^^^^^^\n+   |\n+   = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information\n+   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n \n-error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n+error[E0658]: inherent associated types are unstable\n   --> $DIR/impl-item-type-no-body-semantic-fail.rs:12:5\n    |\n LL |     type Z: Ord;\n    |     ^^^^^^^^^^^^\n+   |\n+   = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information\n+   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n \n-error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n+error[E0658]: inherent associated types are unstable\n   --> $DIR/impl-item-type-no-body-semantic-fail.rs:16:5\n    |\n LL |     type W: Ord where Self: Eq;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information\n+   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n \n-error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n+error[E0658]: inherent associated types are unstable\n   --> $DIR/impl-item-type-no-body-semantic-fail.rs:20:5\n    |\n LL |     type W where Self: Eq;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information\n+   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n \n error: aborting due to 10 previous errors; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0202`.\n+For more information about this error, try `rustc --explain E0658`."}]}