{"sha": "cad33c0306ecc73e280a063700c2878798cbc348", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZDMzYzAzMDZlY2M3M2UyODBhMDYzNzAwYzI4Nzg3OThjYmMzNDg=", "commit": {"author": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-11-03T08:24:10Z"}, "committer": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-11-03T08:36:38Z"}, "message": "Extend needless_pass_by_value to methods", "tree": {"sha": "7f73a116b107faf65d33c7b0652e619dcfc8a9f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f73a116b107faf65d33c7b0652e619dcfc8a9f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cad33c0306ecc73e280a063700c2878798cbc348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cad33c0306ecc73e280a063700c2878798cbc348", "html_url": "https://github.com/rust-lang/rust/commit/cad33c0306ecc73e280a063700c2878798cbc348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cad33c0306ecc73e280a063700c2878798cbc348/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4127c230f086e48cb3214279ef02d3bb15d16cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4127c230f086e48cb3214279ef02d3bb15d16cdc", "html_url": "https://github.com/rust-lang/rust/commit/4127c230f086e48cb3214279ef02d3bb15d16cdc"}], "stats": {"total": 91, "additions": 79, "deletions": 12}, "files": [{"sha": "ac965a59bd51055971f20fac15e01ec8789ce175", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cad33c0306ecc73e280a063700c2878798cbc348/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad33c0306ecc73e280a063700c2878798cbc348/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=cad33c0306ecc73e280a063700c2878798cbc348", "patch": "@@ -1,4 +1,5 @@\n use rustc::hir::*;\n+use rustc::hir::map::*;\n use rustc::hir::intravisit::FnKind;\n use rustc::lint::*;\n use rustc::ty::{self, RegionKind, TypeFoldable};\n@@ -22,13 +23,20 @@ use std::borrow::Cow;\n /// sometimes avoid\n /// unnecessary allocations.\n ///\n-/// **Known problems:** Hopefully none.\n+/// **Known problems:**\n+/// * This lint suggests taking an argument by reference,\n+/// however sometimes it is better to let users decide the argument type\n+/// (by using `Borrow` trait, for example), depending on how the function is used.\n ///\n /// **Example:**\n /// ```rust\n /// fn foo(v: Vec<i32>) {\n ///     assert_eq!(v.len(), 42);\n /// }\n+/// // should be\n+/// fn foo(v: &[i32]) {\n+///     assert_eq!(v.len(), 42);\n+/// }\n /// ```\n declare_lint! {\n     pub NEEDLESS_PASS_BY_VALUE,\n@@ -73,9 +81,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                     }\n                 }\n             },\n+            FnKind::Method(..) => (),\n             _ => return,\n         }\n \n+        // Exclude non-inherent impls\n+        if let Some(NodeItem(item)) = cx.tcx.hir.find(cx.tcx.hir.get_parent_node(node_id)) {\n+            if matches!(item.node, ItemImpl(_, _, _, _, Some(_), _, _) | ItemDefaultImpl(..)) {\n+                return;\n+            }\n+        }\n+\n         // Allow `Borrow` or functions to be taken by value\n         let borrow_trait = need!(get_trait_def_id(cx, &paths::BORROW_TRAIT));\n         let fn_traits = [\n@@ -109,7 +125,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         } = {\n             let mut ctx = MovedVariablesCtxt::new(cx);\n             let region_scope_tree = &cx.tcx.region_scope_tree(fn_def_id);\n-            euv::ExprUseVisitor::new(&mut ctx, cx.tcx, cx.param_env, region_scope_tree, cx.tables, None).consume_body(body);\n+            euv::ExprUseVisitor::new(&mut ctx, cx.tcx, cx.param_env, region_scope_tree, cx.tables, None)\n+                .consume_body(body);\n             ctx\n         };\n \n@@ -127,6 +144,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                 return;\n             }\n \n+            // Ignore `self`s.\n+            if idx == 0 {\n+                if let PatKind::Binding(_, _, name, ..) = arg.pat.node {\n+                    if name.node.as_str() == \"self\" {\n+                        continue;\n+                    }\n+                }\n+            }\n+\n             // * Exclude a type that is specifically bounded by `Borrow`.\n             // * Exclude a type whose reference also fulfills its bound.\n             //   (e.g. `std::convert::AsRef`, `serde::Serialize`)\n@@ -163,7 +189,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                     if mode == BindingAnnotation::Mutable || mode == BindingAnnotation::RefMut {\n                         continue;\n                     }\n-    \n+\n                     // Dereference suggestion\n                     let sugg = |db: &mut DiagnosticBuilder| {\n                         let deref_span = spans_need_deref.get(&canonical_id);\n@@ -181,7 +207,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                                 db.span_suggestion(input.span,\n                                                 \"consider changing the type to\",\n                                                 slice_ty);\n-        \n+\n                                 for (span, suggestion) in clone_spans {\n                                     db.span_suggestion(\n                                         span,\n@@ -193,18 +219,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                                         suggestion.into()\n                                     );\n                                 }\n-        \n+\n                                 // cannot be destructured, no need for `*` suggestion\n                                 assert!(deref_span.is_none());\n                                 return;\n                             }\n                         }\n-    \n+\n                         if match_type(cx, ty, &paths::STRING) {\n                             if let Some(clone_spans) =\n                                 get_spans(cx, Some(body.id()), idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n                                 db.span_suggestion(input.span, \"consider changing the type to\", \"&str\".to_string());\n-    \n+\n                                 for (span, suggestion) in clone_spans {\n                                     db.span_suggestion(\n                                         span,\n@@ -216,14 +242,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                                         suggestion.into(),\n                                     );\n                                 }\n-    \n+\n                                 assert!(deref_span.is_none());\n                                 return;\n                             }\n                         }\n-    \n+\n                         let mut spans = vec![(input.span, format!(\"&{}\", snippet(cx, input.span, \"_\")))];\n-    \n+\n                         // Suggests adding `*` to dereference the added reference.\n                         if let Some(deref_span) = deref_span {\n                             spans.extend(\n@@ -236,7 +262,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                         }\n                         multispan_sugg(db, \"consider taking a reference instead\".to_string(), spans);\n                     };\n-    \n+\n                     span_lint_and_then(\n                         cx,\n                         NEEDLESS_PASS_BY_VALUE,"}, {"sha": "307acb45bcb70d638969f45c403c1480cd86e26d", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cad33c0306ecc73e280a063700c2878798cbc348/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad33c0306ecc73e280a063700c2878798cbc348/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=cad33c0306ecc73e280a063700c2878798cbc348", "patch": "@@ -65,7 +65,7 @@ fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n \n trait Foo {}\n \n-// `S: Serialize` can be passed by value\n+// `S: Serialize` is allowed to be passed by value, since a caller can pass `&S` instead\n trait Serialize {}\n impl<'a, T> Serialize for &'a T where T: Serialize {}\n impl Serialize for i32 {}\n@@ -79,4 +79,27 @@ fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n     let _ = v.clone();\n }\n \n+struct S<T, U>(T, U);\n+\n+impl<T: Serialize, U> S<T, U> {\n+    fn foo(\n+        self, // taking `self` by value is always allowed\n+        s: String,\n+        t: String,\n+    ) -> usize {\n+        s.len() + t.capacity()\n+    }\n+\n+    fn bar(\n+        _t: T, // Ok, since `&T: Serialize` too\n+    ) {\n+    }\n+\n+    fn baz(\n+        &self,\n+        _u: U,\n+    ) {\n+    }\n+}\n+\n fn main() {}"}, {"sha": "3e4d0c7e44f62fa2d6c68fcbb496cb5029f11246", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cad33c0306ecc73e280a063700c2878798cbc348/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cad33c0306ecc73e280a063700c2878798cbc348/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=cad33c0306ecc73e280a063700c2878798cbc348", "patch": "@@ -104,3 +104,21 @@ help: change `v.clone()` to\n 79 |     let _ = v.to_owned();\n    |             ^^^^^^^^^^^^\n \n+error: this argument is passed by value, but not consumed in the function body\n+  --> $DIR/needless_pass_by_value.rs:87:12\n+   |\n+87 |         s: String,\n+   |            ^^^^^^ help: consider changing the type to: `&str`\n+\n+error: this argument is passed by value, but not consumed in the function body\n+  --> $DIR/needless_pass_by_value.rs:88:12\n+   |\n+88 |         t: String,\n+   |            ^^^^^^ help: consider taking a reference instead: `&String`\n+\n+error: this argument is passed by value, but not consumed in the function body\n+   --> $DIR/needless_pass_by_value.rs:100:13\n+    |\n+100 |         _u: U,\n+    |             ^ help: consider taking a reference instead: `&U`\n+"}]}