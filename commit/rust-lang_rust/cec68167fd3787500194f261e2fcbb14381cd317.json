{"sha": "cec68167fd3787500194f261e2fcbb14381cd317", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYzY4MTY3ZmQzNzg3NTAwMTk0ZjI2MWUyZmNiYjE0MzgxY2QzMTc=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-08-10T05:12:35Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-08-13T00:15:43Z"}, "message": "Clean tools after building libstd/libtest/librustc.\n\nThis fixes the bug we previously had where we'd build a libtest tool\nafter building a libstd tool and clear out the libstd tool. Since we\nclear out all tools for a given stage on invocations of CleanTools after\nlib{std, test, rustc} change, we need to make sure that all tools built\nwith that stage will be built after the clearing is done.\n\nThe fix contained here technically isn't perfect; there is still an edge\ncase of compiling a libstd tool, then compiling libtest, which will\nclear out the libstd tool and it won't ever get rebuilt within that\nsession of rustbuild. This is where the caching system used today shows\nit's problems -- in effect, all tools depend on a global counter of the\nstage being cleared out. We can implement such a counter in a future\npatch to ensure that tools are rebuilt as needed, but it is deemed\nunlikely that it will be required in practice, since most if not all\ntools are built after the relevant stage's std/test/rustc are built,\nthough this is only an opinion and hasn't been verified.", "tree": {"sha": "d4cf4fb467870d1e0917b5cadc92ba7e8a06c602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4cf4fb467870d1e0917b5cadc92ba7e8a06c602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cec68167fd3787500194f261e2fcbb14381cd317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cec68167fd3787500194f261e2fcbb14381cd317", "html_url": "https://github.com/rust-lang/rust/commit/cec68167fd3787500194f261e2fcbb14381cd317", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cec68167fd3787500194f261e2fcbb14381cd317/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "facf5a91c458958de1c11cb9c28e14671af9b6fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/facf5a91c458958de1c11cb9c28e14671af9b6fd", "html_url": "https://github.com/rust-lang/rust/commit/facf5a91c458958de1c11cb9c28e14671af9b6fd"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "33c3638a894730a85a0dc6bb2846ae05011f734f", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cec68167fd3787500194f261e2fcbb14381cd317/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec68167fd3787500194f261e2fcbb14381cd317/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=cec68167fd3787500194f261e2fcbb14381cd317", "patch": "@@ -32,6 +32,7 @@ use serde_json;\n use util::{exe, libdir, is_dylib, copy};\n use {Build, Compiler, Mode};\n use native;\n+use tool;\n \n use cache::{INTERNER, Interned};\n use builder::{Step, RunConfig, ShouldRun, Builder};\n@@ -198,6 +199,12 @@ impl Step for StdLink {\n             // for reason why the sanitizers are not built in stage0.\n             copy_apple_sanitizer_dylibs(&build.native_dir(target), \"osx\", &libdir);\n         }\n+\n+        builder.ensure(tool::CleanTools {\n+            compiler: target_compiler,\n+            target: target,\n+            mode: Mode::Libstd,\n+        });\n     }\n }\n \n@@ -389,6 +396,11 @@ impl Step for TestLink {\n                 target);\n         add_to_sysroot(&builder.sysroot_libdir(target_compiler, target),\n                     &libtest_stamp(build, compiler, target));\n+        builder.ensure(tool::CleanTools {\n+            compiler: target_compiler,\n+            target: target,\n+            mode: Mode::Libtest,\n+        });\n     }\n }\n \n@@ -567,6 +579,11 @@ impl Step for RustcLink {\n                  target);\n         add_to_sysroot(&builder.sysroot_libdir(target_compiler, target),\n                        &librustc_stamp(build, compiler, target));\n+        builder.ensure(tool::CleanTools {\n+            compiler: target_compiler,\n+            target: target,\n+            mode: Mode::Librustc,\n+        });\n     }\n }\n "}, {"sha": "7ccd527b33874ab0c5de6af03e6f02f727544bd5", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cec68167fd3787500194f261e2fcbb14381cd317/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec68167fd3787500194f261e2fcbb14381cd317/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=cec68167fd3787500194f261e2fcbb14381cd317", "patch": "@@ -23,10 +23,10 @@ use channel::GitInfo;\n use cache::Interned;\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-struct CleanTools {\n-    compiler: Compiler,\n-    target: Interned<String>,\n-    mode: Mode,\n+pub struct CleanTools {\n+    pub compiler: Compiler,\n+    pub target: Interned<String>,\n+    pub mode: Mode,\n }\n \n impl Step for CleanTools {\n@@ -82,7 +82,6 @@ impl Step for ToolBuild {\n         let target = self.target;\n         let tool = self.tool;\n \n-        builder.ensure(CleanTools { compiler, target, mode: self.mode });\n         match self.mode {\n             Mode::Libstd => builder.ensure(compile::Std { compiler, target }),\n             Mode::Libtest => builder.ensure(compile::Test { compiler, target }),\n@@ -271,7 +270,6 @@ impl Step for Rustdoc {\n             builder.compiler(target_compiler.stage - 1, builder.build.build)\n         };\n \n-        builder.ensure(CleanTools { compiler: build_compiler, target, mode: Mode::Librustc });\n         builder.ensure(compile::Rustc { compiler: build_compiler, target });\n \n         let _folder = build.fold_output(|| format!(\"stage{}-rustdoc\", target_compiler.stage));"}]}